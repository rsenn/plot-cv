{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"attr",
				"attributeLists"
			],
			[
				"Transfo",
				"TransformedElements"
			],
			[
				"Elem",
				"ElementTransformLists"
			],
			[
				"pathTo",
				"pathToPointIterator"
			],
			[
				"Element",
				"ElementTransformMatrix"
			],
			[
				"Elemen",
				"ElementTransformList"
			],
			[
				"getTra",
				"getTransformationList"
			],
			[
				"serialize",
				"serializeToString"
			],
			[
				"unitConv",
				"unitConvToMM"
			],
			[
				"lazy",
				"lazyProperties"
			],
			[
				"ex",
				"expansion"
			],
			[
				"isArra",
				"isArrayBuffer"
			],
			[
				"Extra",
				"ExtractRotation"
			],
			[
				"tra",
				"transformation"
			],
			[
				"define",
				"defineProperties"
			],
			[
				"getters",
				"gettersSetters"
			],
			[
				"circui",
				"circuitFilePath"
			],
			[
				"Conn",
				"ConnectionPoint"
			],
			[
				"parseCom",
				"parseCommentOrEmpty"
			],
			[
				"circ",
				"circuitFilePath"
			],
			[
				"built",
				"builtin_attr"
			],
			[
				"dep",
				"depthOrPred"
			],
			[
				"exte",
				"extendAsyncGenerator"
			],
			[
				"extend",
				"extendArray"
			],
			[
				"allo",
				"allowedDirs"
			],
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "DereferenceError(object, member, pos, prev, locator)\n  frame =>\n  frame =>\nMutablePath\nDereferenceError.prototype.toString = function()\nIsChildren = a =>\nMutablePath\n   args =>\n   (a, p) =>\n  static equals(a, b)\nMutablePath\n  static isChildren(arg)\n  constructor(p = [], opts = {})\n  static matchObj(tagName, attr_or_index, tagField = 'tagName')\n  static partMatcher(obj, tagField = 'tagName')\n  static isMemberName(name, out = {})\n  static parse(path, out, separator = '.')\n  c = (text, c = 33, b = 0) =>\n([name, value]) =>\n  clone()\n  get size()\n  right(n = 1)\n  left(n = 1)\n  up(n = 1)\n  down(...args)\n  bottom(obj, noThrow = false)\n  nthChild(i)\n  diff(other)\n  get lastId()\n  get last()\n  get first()\n  get nextSibling()\n  get prevSibling()\n  get parent()\n  get parentNode()\n  get firstChild()\n  get lastChild()\n  get depth()\n  static compareObj(obj, other)\n  apply(obj, noThrow)\n   (a, i) =>\n(e, i, a) =>\n  child =>\n  toSource(opts = {})\n  item =>\n  p =>\n  toCode(name)\n(acc, part) =>\n  toReduce(name = '')\n  get absolute()\n  makeAbsolute(parent)\nMutablePath\n   (text, ...args) =>\n  text : text =>\n  toString(sep = ' ', partToStr = MutablePath.partToString, childrenStr = MutablePath.CHILDREN_GLYPH + CHILDREN_SPACE)\n   text =>\n  text : (text, ...c) =>\n  pad = (s, n = 1) =>\nMutablePath\n  existsIn(root)\n  split(pred)\n  pred = (part, index) =>\n  relativeTo(other = [])\n(part, i) =>\n  slice(start = 0, end = this.length)\nMutablePath\n  ctor\n  splice(start = 0, remove = this.length, ...insert)\n  push(...args)\n  pop(n = 1)\n  unshift(...args)\n  shift(n = 1)\n  concat(a)\n  ctor\n  map(fn)\n  ctor\n  filter(fn)\n  ctor\n  at(i)\n  predicate = (p, i) =>\nMutablePath\n  toArray(skip = true, n = 1)\nMutablePath\n  equals(other = [])\n  get parent()\n  t = p =>\n  abort = () =>\n  set = v =>\n  ignore = () =>\n  static compare(a, b)\n   (a, b) =>\nMutablePath\nMutablePath\n   () =>\n   () =>",
			"settings":
			{
				"buffer_size": 1873,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/xpath.js",
						"symkeys":
						[
							[
								163,
								186
							],
							[
								219,
								242
							],
							[
								305,
								317
							],
							[
								549,
								573
							],
							[
								1355,
								1365
							],
							[
								1459,
								1494
							],
							[
								1620,
								1642
							],
							[
								2166,
								2182
							],
							[
								2490,
								2497
							],
							[
								2763,
								2781
							],
							[
								3382,
								3401
							],
							[
								3732,
								3741
							],
							[
								3826,
								3840
							],
							[
								4102,
								4163
							],
							[
								4517,
								4536
							],
							[
								5255,
								5270
							],
							[
								5367,
								5371
							],
							[
								5530,
								5534
							],
							[
								5683,
								5697
							],
							[
								5803,
								5835
							],
							[
								6001,
								6008
							],
							[
								6244,
								6260
							],
							[
								6287,
								6291
							],
							[
								6377,
								6391
							],
							[
								6418,
								6422
							],
							[
								6507,
								6542
							],
							[
								6754,
								6782
							],
							[
								7486,
								7497
							],
							[
								7929,
								7938
							],
							[
								7970,
								8056
							],
							[
								8478,
								8506
							],
							[
								8614,
								8622
							],
							[
								8738,
								8755
							],
							[
								8946,
								8974
							],
							[
								9428,
								9439
							],
							[
								10548,
								10560
							],
							[
								10641,
								10649
							],
							[
								10664,
								10674
							],
							[
								10689,
								10701
							],
							[
								11029,
								11102
							],
							[
								11485,
								11497
							],
							[
								12018,
								12035
							]
						],
						"symlist":
						[
							"incr = (o, p, i = 1) =>",
							"isSpecialAttr = attr =>",
							"MutableXPath",
							"static partMatcher(part)",
							"toString()",
							"static isMemberName(name, out = {})",
							"static from(path, obj)",
							"maxCount = () =>",
							"item =>",
							"(acc, sib, idx) =>",
							"([idx, tagName]) =>",
							"(x, p) =>",
							"ImmutableXPath",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static strToPart(p)",
							"static parse(l)",
							"p =>",
							"p =>",
							"(acc, part) =>",
							"constructor(a, absolute = false)",
							"part =>",
							"get descendand()",
							"v =>",
							"get absolute()",
							"v =>",
							"slice(start = 0, end = this.length)",
							"c = (text, c = 33, b = 0) =>",
							"([k, v]) =>",
							"toArray()",
							"toString(sep = '/', childrenSym = this.constructor.CHILDREN_GLYPH, tfn = text => text)",
							"toCode(name = '', opts = {})",
							"y = i =>",
							"(acc, part, i) =>",
							" function partToStr(part)",
							"([k, v]) =>",
							"MutableXPath",
							" text =>",
							"toRegExp()",
							"MutableXPath",
							"findXPath = (xpath, flat, { root, recursive = true, entries = false }) =>",
							"m = other =>",
							"parseXPath = s =>"
						]
					},
					"AwAAAAAAAAAAAAAAmQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJkDAAAgIGluY3IgPSAobywgcCwgaSA9IDEpID0+CiAgaXNTcGVjaWFsQXR0ciA9IGF0dHIgPT4KTXV0YWJsZVhQYXRoCiAgc3RhdGljIHBhcnRNYXRjaGVyKHBhcnQpCiAgdG9TdHJpbmcoKQogIHN0YXRpYyBpc01lbWJlck5hbWUobmFtZSwgb3V0ID0ge30pCiAgc3RhdGljIGZyb20ocGF0aCwgb2JqKQogIG1heENvdW50ID0gKCkgPT4KICBpdGVtID0+CihhY2MsIHNpYiwgaWR4KSA9PgooW2lkeCwgdGFnTmFtZV0pID0+Cih4LCBwKSA9PgpJbW11dGFibGVYUGF0aAogIHN0YXRpYyBtYXRjaE9iaih0YWdOYW1lLCBhdHRyX29yX2luZGV4LCB0YWdGaWVsZCA9ICd0YWdOYW1lJykKICBzdGF0aWMgc3RyVG9QYXJ0KHApCiAgc3RhdGljIHBhcnNlKGwpCiAgcCA9PgogIHAgPT4KKGFjYywgcGFydCkgPT4KICBjb25zdHJ1Y3RvcihhLCBhYnNvbHV0ZSA9IGZhbHNlKQogIHBhcnQgPT4KICBnZXQgZGVzY2VuZGFuZCgpCiAgdiA9PgogIGdldCBhYnNvbHV0ZSgpCiAgdiA9PgogIHNsaWNlKHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpCiAgYyA9ICh0ZXh0LCBjID0gMzMsIGIgPSAwKSA9PgooW2ssIHZdKSA9PgogIHRvQXJyYXkoKQogIHRvU3RyaW5nKHNlcCA9ICcvJywgY2hpbGRyZW5TeW0gPSB0aGlzLmNvbnN0cnVjdG9yLkNISUxEUkVOX0dMWVBILCB0Zm4gPSB0ZXh0ID0+IHRleHQpCiAgdG9Db2RlKG5hbWUgPSAnJywgb3B0cyA9IHt9KQogIHkgPSBpID0+CihhY2MsIHBhcnQsIGkpID0+CiAgcGFydFRvU3RyKHBhcnQpCihbaywgdl0pID0+Ck11dGFibGVYUGF0aAogICB0ZXh0ID0+CiAgdG9SZWdFeHAoKQpNdXRhYmxlWFBhdGgKICBmaW5kWFBhdGggPSAoeHBhdGgsIGZsYXQsIHsgcm9vdCwgcmVjdXJzaXZlID0gdHJ1ZSwgZW50cmllcyA9IGZhbHNlIH0pID0+CiAgbSA9IG90aGVyID0+CiAgcGFyc2VYUGF0aCA9IHMgPT4AAAAAAAAAAJkDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACZAwAAICBpbmNyID0gKG8sIHAsIGkgPSAxKSA9PgogIGlzU3BlY2lhbEF0dHIgPSBhdHRyID0+Ck11dGFibGVYUGF0aAogIHN0YXRpYyBwYXJ0TWF0Y2hlcihwYXJ0KQogIHRvU3RyaW5nKCkKICBzdGF0aWMgaXNNZW1iZXJOYW1lKG5hbWUsIG91dCA9IHt9KQogIHN0YXRpYyBmcm9tKHBhdGgsIG9iaikKICBtYXhDb3VudCA9ICgpID0+CiAgaXRlbSA9PgooYWNjLCBzaWIsIGlkeCkgPT4KKFtpZHgsIHRhZ05hbWVdKSA9PgooeCwgcCkgPT4KSW1tdXRhYmxlWFBhdGgKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHN0clRvUGFydChwKQogIHN0YXRpYyBwYXJzZShsKQogIHAgPT4KICBwID0+CihhY2MsIHBhcnQpID0+CiAgY29uc3RydWN0b3IoYSwgYWJzb2x1dGUgPSBmYWxzZSkKICBwYXJ0ID0+CiAgZ2V0IGRlc2NlbmRhbmQoKQogIHYgPT4KICBnZXQgYWJzb2x1dGUoKQogIHYgPT4KICBzbGljZShzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQogIGMgPSAodGV4dCwgYyA9IDMzLCBiID0gMCkgPT4KKFtrLCB2XSkgPT4KICB0b0FycmF5KCkKICB0b1N0cmluZyhzZXAgPSAnLycsIGNoaWxkcmVuU3ltID0gdGhpcy5jb25zdHJ1Y3Rvci5DSElMRFJFTl9HTFlQSCwgdGZuID0gdGV4dCA9PiB0ZXh0KQogIHRvQ29kZShuYW1lID0gJycsIG9wdHMgPSB7fSkKICB5ID0gaSA9PgooYWNjLCBwYXJ0LCBpKSA9PgogIHBhcnRUb1N0cihwYXJ0KQooW2ssIHZdKSA9PgpNdXRhYmxlWFBhdGgKICAgdGV4dCA9PgogIHRvUmVnRXhwKCkKTXV0YWJsZVhQYXRoCiAgZmluZFhQYXRoID0gKHhwYXRoLCBmbGF0LCB7IHJvb3QsIHJlY3Vyc2l2ZSA9IHRydWUsIGVudHJpZXMgPSBmYWxzZSB9KSA9PgogIG0gPSBvdGhlciA9PgogIHBhcnNlWFBhdGggPSBzID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/document.js",
						"symkeys":
						[
							[
								918,
								979
							],
							[
								1022,
								1049
							],
							[
								1162,
								1175
							],
							[
								1305,
								1319
							],
							[
								1425,
								1455
							],
							[
								1565,
								1588
							],
							[
								1652,
								1675
							],
							[
								1820,
								1845
							],
							[
								1999,
								2047
							],
							[
								2376,
								2396
							],
							[
								2629,
								2644
							],
							[
								2777,
								2792
							],
							[
								2878,
								2893
							],
							[
								3712,
								3724
							],
							[
								4182,
								4195
							],
							[
								4268,
								4280
							],
							[
								4399,
								4415
							],
							[
								4682,
								4696
							],
							[
								4752,
								4764
							],
							[
								4835,
								4850
							],
							[
								4907,
								4923
							],
							[
								5023,
								5029
							],
							[
								5198,
								5212
							],
							[
								5228,
								5241
							],
							[
								5324,
								5333
							],
							[
								5519,
								5533
							],
							[
								5620,
								5633
							],
							[
								5760,
								5774
							],
							[
								5880,
								5893
							],
							[
								5945,
								5958
							],
							[
								7283,
								7318
							],
							[
								7768,
								7803
							],
							[
								7926,
								7950
							],
							[
								7997,
								8009
							],
							[
								8049,
								8069
							],
							[
								8113,
								8125
							],
							[
								8165,
								8186
							],
							[
								8231,
								8243
							],
							[
								8283,
								8296
							],
							[
								8349,
								8362
							],
							[
								8398,
								8420
							],
							[
								8580,
								8584
							],
							[
								8867,
								8873
							],
							[
								8929,
								8933
							],
							[
								9001,
								9005
							],
							[
								9035,
								9039
							],
							[
								9204,
								9229
							],
							[
								9478,
								9482
							],
							[
								9653,
								9667
							],
							[
								9758,
								9774
							],
							[
								9895,
								9906
							],
							[
								9957,
								9976
							],
							[
								10037,
								10045
							],
							[
								10089,
								10111
							],
							[
								10172,
								10194
							],
							[
								10259,
								10271
							],
							[
								10590,
								10602
							],
							[
								10802,
								10818
							],
							[
								10841,
								10845
							],
							[
								10932,
								10943
							],
							[
								11255,
								11272
							]
						],
						"symlist":
						[
							"function GetProxy(fn = (prop, target) => null, handlers = {})",
							"get(target, prop, receiver)",
							"EagleDocument",
							"get typeName()",
							"static typeName(fileExtension)",
							"static baseOf(filename)",
							"static typeOf(filename)",
							"static open(filename, fs)",
							"constructor(xmlStr, project, filename, type, fs)",
							"(raw, owner, ref) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(r, g, b) =>",
							"sheets: () =>",
							"parts: () =>",
							"libraries: () =>",
							"signals: () =>",
							"plain: () =>",
							"elements: () =>",
							"libraries: () =>",
							" () =>",
							"drawing: () =>",
							"layers: () =>",
							"get raw()",
							"get filename()",
							"get dirname()",
							"get basename()",
							"get changes()",
							"cacheFields()",
							"saveTo(file, overwrite = false, fs)",
							"index(path, transform = arg => arg)",
							"*getAll(pred, transform)",
							"(v, p, o) =>",
							"get(pred, transform)",
							"(v, p, o) =>",
							"find(pred, transform)",
							"(v, p, o) =>",
							"lookup(xpath)",
							" (o, p, v) =>",
							"getBounds(sheetNo = 0)",
							"v =>",
							"sig =>",
							"c =>",
							"e =>",
							"Rect",
							"getMeasures(options = {})",
							"e =>",
							"get measures()",
							"get dimensions()",
							"signalMap()",
							"([name, signal]) =>",
							"child =>",
							"([child, geometry]) =>",
							"([child, geometry]) =>",
							"getLayer(id)",
							"getSheet(id)",
							"getLibrary(name)",
							"e =>",
							"function ()",
							"get mainElement()"
						]
					},
					"AQAAAAAAAAAAAAAAbgQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuBAAAR2V0UHJveHkoZm4gPSAocHJvcCwgdGFyZ2V0KSA9PiBudWxsLCBoYW5kbGVycyA9IHt9KQogIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKQpFYWdsZURvY3VtZW50CiAgZ2V0IHR5cGVOYW1lKCkKICBzdGF0aWMgdHlwZU5hbWUoZmlsZUV4dGVuc2lvbikKICBzdGF0aWMgYmFzZU9mKGZpbGVuYW1lKQogIHN0YXRpYyB0eXBlT2YoZmlsZW5hbWUpCiAgc3RhdGljIG9wZW4oZmlsZW5hbWUsIGZzKQogIGNvbnN0cnVjdG9yKHhtbFN0ciwgcHJvamVjdCwgZmlsZW5hbWUsIHR5cGUsIGZzKQoocmF3LCBvd25lciwgcmVmKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKGtleSwgdmFsdWUpID0+CihrZXksIHZhbHVlKSA9PgoociwgZywgYikgPT4KICBzaGVldHM6ICgpID0+CiAgcGFydHM6ICgpID0+CiAgbGlicmFyaWVzOiAoKSA9PgogIHNpZ25hbHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgbGlicmFyaWVzOiAoKSA9PgogICAoKSA9PgogIGRyYXdpbmc6ICgpID0+CiAgbGF5ZXJzOiAoKSA9PgogIGdldCByYXcoKQogIGdldCBmaWxlbmFtZSgpCiAgZ2V0IGRpcm5hbWUoKQogIGdldCBiYXNlbmFtZSgpCiAgZ2V0IGNoYW5nZXMoKQogIGNhY2hlRmllbGRzKCkKICBzYXZlVG8oZmlsZSwgb3ZlcndyaXRlID0gZmFsc2UsIGZzKQogIGluZGV4KHBhdGgsIHRyYW5zZm9ybSA9IGFyZyA9PiBhcmcpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtKQoodiwgcCwgbykgPT4KICBnZXQocHJlZCwgdHJhbnNmb3JtKQoodiwgcCwgbykgPT4KICBmaW5kKHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgbG9va3VwKHhwYXRoKQogICAobywgcCwgdikgPT4KICBnZXRCb3VuZHMoc2hlZXRObyA9IDApCiAgdiA9PgogIHNpZyA9PgogIGMgPT4KICBlID0+ClJlY3QKICBnZXRNZWFzdXJlcyhvcHRpb25zID0ge30pCiAgZSA9PgogIGdldCBtZWFzdXJlcygpCiAgZ2V0IGRpbWVuc2lvbnMoKQogIHNpZ25hbE1hcCgpCihbbmFtZSwgc2lnbmFsXSkgPT4KICBjaGlsZCA9PgooW2NoaWxkLCBnZW9tZXRyeV0pID0+CihbY2hpbGQsIGdlb21ldHJ5XSkgPT4KICBnZXRMYXllcihpZCkKICBnZXRTaGVldChpZCkKICBnZXRMaWJyYXJ5KG5hbWUpCiAgZSA9PgooKQogIGdldCBtYWluRWxlbWVudCgpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12658,
								12685
							],
							[
								12798,
								12802
							],
							[
								13096,
								13110
							],
							[
								13202,
								13230
							],
							[
								13312,
								13319
							],
							[
								13429,
								13436
							],
							[
								13616,
								13623
							],
							[
								13762,
								13775
							],
							[
								13900,
								13907
							],
							[
								13931,
								13942
							],
							[
								13990,
								14004
							],
							[
								14012,
								14023
							],
							[
								14062,
								14076
							],
							[
								14110,
								14128
							],
							[
								14214,
								14232
							],
							[
								14300,
								14307
							],
							[
								14434,
								14449
							],
							[
								14803,
								14813
							],
							[
								15089,
								15107
							],
							[
								16114,
								16123
							],
							[
								16155,
								16166
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AQAAAAAAAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12658,
								12685
							],
							[
								12798,
								12802
							],
							[
								13096,
								13110
							],
							[
								13202,
								13230
							],
							[
								13312,
								13319
							],
							[
								13429,
								13436
							],
							[
								13616,
								13623
							],
							[
								13762,
								13775
							],
							[
								13900,
								13907
							],
							[
								13931,
								13942
							],
							[
								13990,
								14004
							],
							[
								14012,
								14023
							],
							[
								14062,
								14076
							],
							[
								14110,
								14128
							],
							[
								14214,
								14232
							],
							[
								14300,
								14307
							],
							[
								14434,
								14449
							],
							[
								14803,
								14813
							],
							[
								15089,
								15107
							],
							[
								16114,
								16123
							],
							[
								16155,
								16166
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AQAAAAAAAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12653,
								12680
							],
							[
								12793,
								12797
							],
							[
								13091,
								13105
							],
							[
								13197,
								13225
							],
							[
								13307,
								13314
							],
							[
								13424,
								13431
							],
							[
								13611,
								13618
							],
							[
								13757,
								13770
							],
							[
								13895,
								13902
							],
							[
								13926,
								13937
							],
							[
								13985,
								13999
							],
							[
								14007,
								14018
							],
							[
								14057,
								14071
							],
							[
								14105,
								14123
							],
							[
								14209,
								14227
							],
							[
								14295,
								14302
							],
							[
								14429,
								14444
							],
							[
								14798,
								14808
							],
							[
								15084,
								15102
							],
							[
								16109,
								16118
							],
							[
								16150,
								16161
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12669,
								12696
							],
							[
								12809,
								12813
							],
							[
								13107,
								13121
							],
							[
								13213,
								13241
							],
							[
								13323,
								13330
							],
							[
								13440,
								13447
							],
							[
								13627,
								13634
							],
							[
								13773,
								13786
							],
							[
								13911,
								13918
							],
							[
								13942,
								13953
							],
							[
								14001,
								14015
							],
							[
								14023,
								14034
							],
							[
								14073,
								14087
							],
							[
								14121,
								14139
							],
							[
								14225,
								14243
							],
							[
								14311,
								14318
							],
							[
								14445,
								14460
							],
							[
								14814,
								14824
							],
							[
								15100,
								15118
							],
							[
								16125,
								16134
							],
							[
								16166,
								16177
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12669,
								12696
							],
							[
								12809,
								12813
							],
							[
								13107,
								13121
							],
							[
								13213,
								13241
							],
							[
								13323,
								13330
							],
							[
								13440,
								13447
							],
							[
								13627,
								13634
							],
							[
								13773,
								13786
							],
							[
								13911,
								13918
							],
							[
								13942,
								13953
							],
							[
								14001,
								14015
							],
							[
								14023,
								14034
							],
							[
								14073,
								14087
							],
							[
								14121,
								14139
							],
							[
								14225,
								14243
							],
							[
								14311,
								14318
							],
							[
								14445,
								14460
							],
							[
								14814,
								14824
							],
							[
								15100,
								15118
							],
							[
								16125,
								16134
							],
							[
								16166,
								16177
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12669,
								12696
							],
							[
								12809,
								12813
							],
							[
								13107,
								13121
							],
							[
								13213,
								13241
							],
							[
								13323,
								13330
							],
							[
								13440,
								13447
							],
							[
								13627,
								13634
							],
							[
								13773,
								13786
							],
							[
								13911,
								13918
							],
							[
								13942,
								13953
							],
							[
								14001,
								14015
							],
							[
								14023,
								14034
							],
							[
								14073,
								14087
							],
							[
								14121,
								14139
							],
							[
								14225,
								14243
							],
							[
								14311,
								14318
							],
							[
								14445,
								14460
							],
							[
								14814,
								14824
							],
							[
								15100,
								15118
							],
							[
								16125,
								16134
							],
							[
								16166,
								16177
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/xpath.js",
						"symkeys":
						[
							[
								163,
								186
							],
							[
								219,
								242
							],
							[
								305,
								317
							],
							[
								549,
								573
							],
							[
								1355,
								1365
							],
							[
								1459,
								1494
							],
							[
								1620,
								1642
							],
							[
								2166,
								2182
							],
							[
								2490,
								2497
							],
							[
								2763,
								2781
							],
							[
								3382,
								3401
							],
							[
								3732,
								3741
							],
							[
								3826,
								3840
							],
							[
								4102,
								4163
							],
							[
								4517,
								4536
							],
							[
								5255,
								5270
							],
							[
								5367,
								5371
							],
							[
								5530,
								5534
							],
							[
								5683,
								5697
							],
							[
								5803,
								5835
							],
							[
								6001,
								6008
							],
							[
								6244,
								6260
							],
							[
								6287,
								6291
							],
							[
								6377,
								6391
							],
							[
								6418,
								6422
							],
							[
								6507,
								6542
							],
							[
								6754,
								6782
							],
							[
								7486,
								7497
							],
							[
								7929,
								7938
							],
							[
								7970,
								8056
							],
							[
								8478,
								8506
							],
							[
								8614,
								8622
							],
							[
								8738,
								8755
							],
							[
								8946,
								8974
							],
							[
								9428,
								9439
							],
							[
								10548,
								10560
							],
							[
								10641,
								10649
							],
							[
								10664,
								10674
							],
							[
								10689,
								10701
							],
							[
								11029,
								11102
							],
							[
								11485,
								11497
							],
							[
								12018,
								12035
							]
						],
						"symlist":
						[
							"incr = (o, p, i = 1) =>",
							"isSpecialAttr = attr =>",
							"MutableXPath",
							"static partMatcher(part)",
							"toString()",
							"static isMemberName(name, out = {})",
							"static from(path, obj)",
							"maxCount = () =>",
							"item =>",
							"(acc, sib, idx) =>",
							"([idx, tagName]) =>",
							"(x, p) =>",
							"ImmutableXPath",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static strToPart(p)",
							"static parse(l)",
							"p =>",
							"p =>",
							"(acc, part) =>",
							"constructor(a, absolute = false)",
							"part =>",
							"get descendand()",
							"v =>",
							"get absolute()",
							"v =>",
							"slice(start = 0, end = this.length)",
							"c = (text, c = 33, b = 0) =>",
							"([k, v]) =>",
							"toArray()",
							"toString(sep = '/', childrenSym = this.constructor.CHILDREN_GLYPH, tfn = text => text)",
							"toCode(name = '', opts = {})",
							"y = i =>",
							"(acc, part, i) =>",
							" function partToStr(part)",
							"([k, v]) =>",
							"MutableXPath",
							" text =>",
							"toRegExp()",
							"MutableXPath",
							"findXPath = (xpath, flat, { root, recursive = true, entries = false }) =>",
							"m = other =>",
							"parseXPath = s =>"
						]
					},
					"AQAAAAAAAAAAAAAAmQMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACZAwAAICBpbmNyID0gKG8sIHAsIGkgPSAxKSA9PgogIGlzU3BlY2lhbEF0dHIgPSBhdHRyID0+Ck11dGFibGVYUGF0aAogIHN0YXRpYyBwYXJ0TWF0Y2hlcihwYXJ0KQogIHRvU3RyaW5nKCkKICBzdGF0aWMgaXNNZW1iZXJOYW1lKG5hbWUsIG91dCA9IHt9KQogIHN0YXRpYyBmcm9tKHBhdGgsIG9iaikKICBtYXhDb3VudCA9ICgpID0+CiAgaXRlbSA9PgooYWNjLCBzaWIsIGlkeCkgPT4KKFtpZHgsIHRhZ05hbWVdKSA9PgooeCwgcCkgPT4KSW1tdXRhYmxlWFBhdGgKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHN0clRvUGFydChwKQogIHN0YXRpYyBwYXJzZShsKQogIHAgPT4KICBwID0+CihhY2MsIHBhcnQpID0+CiAgY29uc3RydWN0b3IoYSwgYWJzb2x1dGUgPSBmYWxzZSkKICBwYXJ0ID0+CiAgZ2V0IGRlc2NlbmRhbmQoKQogIHYgPT4KICBnZXQgYWJzb2x1dGUoKQogIHYgPT4KICBzbGljZShzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQogIGMgPSAodGV4dCwgYyA9IDMzLCBiID0gMCkgPT4KKFtrLCB2XSkgPT4KICB0b0FycmF5KCkKICB0b1N0cmluZyhzZXAgPSAnLycsIGNoaWxkcmVuU3ltID0gdGhpcy5jb25zdHJ1Y3Rvci5DSElMRFJFTl9HTFlQSCwgdGZuID0gdGV4dCA9PiB0ZXh0KQogIHRvQ29kZShuYW1lID0gJycsIG9wdHMgPSB7fSkKICB5ID0gaSA9PgooYWNjLCBwYXJ0LCBpKSA9PgogIHBhcnRUb1N0cihwYXJ0KQooW2ssIHZdKSA9PgpNdXRhYmxlWFBhdGgKICAgdGV4dCA9PgogIHRvUmVnRXhwKCkKTXV0YWJsZVhQYXRoCiAgZmluZFhQYXRoID0gKHhwYXRoLCBmbGF0LCB7IHJvb3QsIHJlY3Vyc2l2ZSA9IHRydWUsIGVudHJpZXMgPSBmYWxzZSB9KSA9PgogIG0gPSBvdGhlciA9PgogIHBhcnNlWFBhdGggPSBzID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/xpath.js",
						"symkeys":
						[
							[
								163,
								186
							],
							[
								219,
								242
							],
							[
								305,
								317
							],
							[
								549,
								573
							],
							[
								1355,
								1365
							],
							[
								1459,
								1494
							],
							[
								1620,
								1642
							],
							[
								2166,
								2182
							],
							[
								2490,
								2497
							],
							[
								2763,
								2781
							],
							[
								3382,
								3401
							],
							[
								3732,
								3741
							],
							[
								3826,
								3840
							],
							[
								4102,
								4163
							],
							[
								4517,
								4536
							],
							[
								5255,
								5270
							],
							[
								5367,
								5371
							],
							[
								5530,
								5534
							],
							[
								5683,
								5697
							],
							[
								5803,
								5835
							],
							[
								6001,
								6008
							],
							[
								6244,
								6260
							],
							[
								6287,
								6291
							],
							[
								6377,
								6391
							],
							[
								6418,
								6422
							],
							[
								6507,
								6542
							],
							[
								6754,
								6782
							],
							[
								7486,
								7497
							],
							[
								7929,
								7938
							],
							[
								7970,
								8056
							],
							[
								8478,
								8506
							],
							[
								8614,
								8622
							],
							[
								8738,
								8755
							],
							[
								8946,
								8974
							],
							[
								9428,
								9439
							],
							[
								10548,
								10560
							],
							[
								10641,
								10649
							],
							[
								10664,
								10674
							],
							[
								10689,
								10701
							],
							[
								11029,
								11102
							],
							[
								11485,
								11497
							],
							[
								12018,
								12035
							]
						],
						"symlist":
						[
							"incr = (o, p, i = 1) =>",
							"isSpecialAttr = attr =>",
							"MutableXPath",
							"static partMatcher(part)",
							"toString()",
							"static isMemberName(name, out = {})",
							"static from(path, obj)",
							"maxCount = () =>",
							"item =>",
							"(acc, sib, idx) =>",
							"([idx, tagName]) =>",
							"(x, p) =>",
							"ImmutableXPath",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static strToPart(p)",
							"static parse(l)",
							"p =>",
							"p =>",
							"(acc, part) =>",
							"constructor(a, absolute = false)",
							"part =>",
							"get descendand()",
							"v =>",
							"get absolute()",
							"v =>",
							"slice(start = 0, end = this.length)",
							"c = (text, c = 33, b = 0) =>",
							"([k, v]) =>",
							"toArray()",
							"toString(sep = '/', childrenSym = this.constructor.CHILDREN_GLYPH, tfn = text => text)",
							"toCode(name = '', opts = {})",
							"y = i =>",
							"(acc, part, i) =>",
							" function partToStr(part)",
							"([k, v]) =>",
							"MutableXPath",
							" text =>",
							"toRegExp()",
							"MutableXPath",
							"findXPath = (xpath, flat, { root, recursive = true, entries = false }) =>",
							"m = other =>",
							"parseXPath = s =>"
						]
					},
					"AQAAAAAAAAAAAAAAmQMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3509,
								3538
							],
							[
								3582,
								3593
							],
							[
								3620,
								3628
							],
							[
								3636,
								3655
							],
							[
								3677,
								3682
							],
							[
								3785,
								3816
							],
							[
								3867,
								3910
							],
							[
								3955,
								3962
							],
							[
								4063,
								4148
							],
							[
								4300,
								4305
							],
							[
								4350,
								4368
							],
							[
								4407,
								4414
							],
							[
								4463,
								4470
							],
							[
								4509,
								4526
							],
							[
								4573,
								4580
							],
							[
								4617,
								4635
							],
							[
								4658,
								4667
							],
							[
								4690,
								4708
							],
							[
								4719,
								4780
							],
							[
								4900,
								4909
							],
							[
								4946,
								4957
							],
							[
								4968,
								4992
							],
							[
								5073,
								5081
							],
							[
								5264,
								5318
							],
							[
								5537,
								5567
							],
							[
								6219,
								6265
							],
							[
								6301,
								6305
							],
							[
								6336,
								6343
							],
							[
								6429,
								6468
							],
							[
								6553,
								6598
							],
							[
								6632,
								6636
							],
							[
								6664,
								6707
							],
							[
								6786,
								6831
							],
							[
								6875,
								6879
							],
							[
								6927,
								6931
							],
							[
								6938,
								6942
							],
							[
								6971,
								7004
							],
							[
								7036,
								7079
							],
							[
								7154,
								7158
							],
							[
								7197,
								7236
							],
							[
								7282,
								7325
							],
							[
								7370,
								7409
							],
							[
								7505,
								7538
							],
							[
								7570,
								7590
							],
							[
								7837,
								7859
							],
							[
								10202,
								10213
							],
							[
								11314,
								11358
							],
							[
								11484,
								11504
							],
							[
								11819,
								11829
							],
							[
								11857,
								11867
							],
							[
								11903,
								11916
							],
							[
								12166,
								12180
							],
							[
								13082,
								13091
							],
							[
								13357,
								13376
							],
							[
								14094,
								14107
							],
							[
								14125,
								14130
							],
							[
								14301,
								14325
							],
							[
								14451,
								14455
							],
							[
								14550,
								14563
							],
							[
								14650,
								14671
							],
							[
								15068,
								15084
							],
							[
								15322,
								15327
							],
							[
								15365,
								15380
							],
							[
								15541,
								15549
							],
							[
								15590,
								15598
							],
							[
								15773,
								15801
							],
							[
								15868,
								15902
							],
							[
								15936,
								15941
							],
							[
								16578,
								16626
							],
							[
								16744,
								16753
							],
							[
								16916,
								16920
							],
							[
								17028,
								17058
							],
							[
								17300,
								17308
							],
							[
								17375,
								17379
							],
							[
								17469,
								17476
							],
							[
								17816,
								17840
							],
							[
								18085,
								18090
							],
							[
								19820,
								19864
							],
							[
								20311,
								20337
							],
							[
								21039,
								21062
							],
							[
								21182,
								21204
							],
							[
								21455,
								21459
							],
							[
								21947,
								21951
							],
							[
								22568,
								22597
							],
							[
								22622,
								22626
							],
							[
								22702,
								22725
							],
							[
								22769,
								22775
							],
							[
								22803,
								22807
							],
							[
								22823,
								22860
							],
							[
								22882,
								22898
							],
							[
								22918,
								22925
							],
							[
								22982,
								23010
							],
							[
								23064,
								23075
							],
							[
								23158,
								23166
							],
							[
								23262,
								23266
							],
							[
								23416,
								23420
							],
							[
								23518,
								23523
							],
							[
								23583,
								23594
							],
							[
								23666,
								23677
							],
							[
								23764,
								23769
							],
							[
								23819,
								23825
							],
							[
								23922,
								23930
							],
							[
								24105,
								24134
							],
							[
								24227,
								24280
							],
							[
								24433,
								24437
							],
							[
								24491,
								24495
							],
							[
								24771,
								24778
							],
							[
								24800,
								24806
							],
							[
								24835,
								24866
							],
							[
								25000,
								25024
							],
							[
								25150,
								25161
							],
							[
								25179,
								25195
							],
							[
								25354,
								25359
							],
							[
								25383,
								25387
							],
							[
								25435,
								25444
							],
							[
								25512,
								25517
							],
							[
								25655,
								25660
							],
							[
								25782,
								25793
							],
							[
								25882,
								25889
							],
							[
								26535,
								26551
							],
							[
								28605,
								28639
							],
							[
								28978,
								28992
							],
							[
								29087,
								29091
							],
							[
								29113,
								29127
							],
							[
								29158,
								29162
							],
							[
								30462,
								30478
							],
							[
								30528,
								30543
							],
							[
								30602,
								30621
							],
							[
								30644,
								30656
							],
							[
								30745,
								30749
							],
							[
								30848,
								30852
							],
							[
								31071,
								31077
							],
							[
								31167,
								31181
							],
							[
								31210,
								31228
							],
							[
								31365,
								31377
							],
							[
								31407,
								31472
							],
							[
								31501,
								31506
							],
							[
								31645,
								31683
							],
							[
								31708,
								31728
							],
							[
								31757,
								31806
							],
							[
								31853,
								31863
							],
							[
								32036,
								32046
							],
							[
								32119,
								32129
							],
							[
								32200,
								32210
							],
							[
								32737,
								32818
							],
							[
								32829,
								32852
							],
							[
								33070,
								33075
							],
							[
								33157,
								33166
							],
							[
								33196,
								33202
							],
							[
								33218,
								33247
							],
							[
								33283,
								33296
							],
							[
								33527,
								33533
							],
							[
								33542,
								33553
							],
							[
								33621,
								33643
							],
							[
								33860,
								33883
							],
							[
								34295,
								34324
							],
							[
								34646,
								34673
							],
							[
								34707,
								34720
							],
							[
								34747,
								34752
							],
							[
								34776,
								34781
							],
							[
								34826,
								34836
							],
							[
								34866,
								34876
							],
							[
								34962,
								34967
							],
							[
								35087,
								35092
							],
							[
								35106,
								35114
							],
							[
								35336,
								35340
							],
							[
								35393,
								35397
							],
							[
								35485,
								35498
							],
							[
								35599,
								35612
							],
							[
								35873,
								35906
							],
							[
								35960,
								35964
							],
							[
								36078,
								36104
							],
							[
								36447,
								36480
							],
							[
								36827,
								36872
							],
							[
								36913,
								36917
							],
							[
								36934,
								36963
							],
							[
								36999,
								37005
							],
							[
								37389,
								37459
							],
							[
								38059,
								38131
							],
							[
								38364,
								38369
							],
							[
								39091,
								39095
							]
						],
						"symlist":
						[
							"function GetGlobalFunctions()",
							"([k, v]) =>",
							"([k]) =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							" (module, ...args) =>",
							"m =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACZAwAAICBpbmNyID0gKG8sIHAsIGkgPSAxKSA9PgogIGlzU3BlY2lhbEF0dHIgPSBhdHRyID0+Ck11dGFibGVYUGF0aAogIHN0YXRpYyBwYXJ0TWF0Y2hlcihwYXJ0KQogIHRvU3RyaW5nKCkKICBzdGF0aWMgaXNNZW1iZXJOYW1lKG5hbWUsIG91dCA9IHt9KQogIHN0YXRpYyBmcm9tKHBhdGgsIG9iaikKICBtYXhDb3VudCA9ICgpID0+CiAgaXRlbSA9PgooYWNjLCBzaWIsIGlkeCkgPT4KKFtpZHgsIHRhZ05hbWVdKSA9PgooeCwgcCkgPT4KSW1tdXRhYmxlWFBhdGgKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHN0clRvUGFydChwKQogIHN0YXRpYyBwYXJzZShsKQogIHAgPT4KICBwID0+CihhY2MsIHBhcnQpID0+CiAgY29uc3RydWN0b3IoYSwgYWJzb2x1dGUgPSBmYWxzZSkKICBwYXJ0ID0+CiAgZ2V0IGRlc2NlbmRhbmQoKQogIHYgPT4KICBnZXQgYWJzb2x1dGUoKQogIHYgPT4KICBzbGljZShzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQogIGMgPSAodGV4dCwgYyA9IDMzLCBiID0gMCkgPT4KKFtrLCB2XSkgPT4KICB0b0FycmF5KCkKICB0b1N0cmluZyhzZXAgPSAnLycsIGNoaWxkcmVuU3ltID0gdGhpcy5jb25zdHJ1Y3Rvci5DSElMRFJFTl9HTFlQSCwgdGZuID0gdGV4dCA9PiB0ZXh0KQogIHRvQ29kZShuYW1lID0gJycsIG9wdHMgPSB7fSkKICB5ID0gaSA9PgooYWNjLCBwYXJ0LCBpKSA9PgogIHBhcnRUb1N0cihwYXJ0KQooW2ssIHZdKSA9PgpNdXRhYmxlWFBhdGgKICAgdGV4dCA9PgogIHRvUmVnRXhwKCkKTXV0YWJsZVhQYXRoCiAgZmluZFhQYXRoID0gKHhwYXRoLCBmbGF0LCB7IHJvb3QsIHJlY3Vyc2l2ZSA9IHRydWUsIGVudHJpZXMgPSBmYWxzZSB9KSA9PgogIG0gPSBvdGhlciA9PgogIHBhcnNlWFBhdGggPSBzID0+AAAAAAAAAAB4DAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12669,
								12696
							],
							[
								12809,
								12813
							],
							[
								13107,
								13121
							],
							[
								13213,
								13241
							],
							[
								13323,
								13330
							],
							[
								13440,
								13447
							],
							[
								13627,
								13634
							],
							[
								13773,
								13786
							],
							[
								13911,
								13918
							],
							[
								13942,
								13953
							],
							[
								14001,
								14015
							],
							[
								14023,
								14034
							],
							[
								14073,
								14087
							],
							[
								14121,
								14139
							],
							[
								14225,
								14243
							],
							[
								14311,
								14318
							],
							[
								14445,
								14460
							],
							[
								14814,
								14824
							],
							[
								15100,
								15118
							],
							[
								16125,
								16134
							],
							[
								16166,
								16177
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB4DAAAR2V0R2xvYmFsRnVuY3Rpb25zKCkKKFtrLCB2XSkgPT4KKFtrXSkgPT4KICB0b1hNTChvYmopCiAgIGEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCiAgIChkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICBsb2FkKGZpbGVuYW1lLCBwcm9qZWN0ID0gZ2xvYmFsVGhpcy5wcm9qZWN0KQogIG5ld1Byb2plY3QoZmlsZW5hbWUpCiAgc2NoOiAoKSA9PgogIGJyZDogKCkgPT4KICBuZXh0UHJvamVjdCgpCiAgcHJvamVjdE5hbWVzKCkKICBxdWl0KGFyZykKICByZW5kZXJUb1N0cmluZyhhcmcpCiAgICguLi5hcmdzKSA9PgooKSA9PgogICAobW9kdWxlLCAuLi5hcmdzKSA9PgogIG0gPT4KICAuZXhpdCA9ICgpID0+CiAgLmRlYnVnID0gKC4uLmFyZ3MpID0+CiAgLnNob3cgPSB2YWx1ZSA9PgooKSA9PgooaXRlbSwgaSwgYSkgPT4KICBlbnRyeSA9PgogIGVudHJ5ID0+ClRlcm1pbmF0ZShleGl0Q29kZSkKICB4bWwoc3RyaW5ncywgZXhwcmVzc2lvbnMpCiAgIGUgPT4KICBpbXBvcnRNb2R1bGUobW9kdWxlTmFtZSwgLi4uYXJncykKICBtb2R1bGUgPT4KICBlID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CiAgIGUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CiAgIGUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KICB0ZXN0RWFnbGUoZmlsZW5hbWUpCihbbmFtZSwgZV0pID0+CiAgZSA9PgooW25hbWUsIGldKSA9PgogIHAgPT4KKGNoaWxkLCBpLCBhKSA9PgooY2hpbGQyLCBpMikgPT4KKFtpbmRleCwgZXF1YWxdKSA9PgooW2luZGV4XSkgPT4KICBpID0+CiAgaSA9PgogIGRvYyA9PgooW2ZpbGUsIGVdKSA9PgooW2ZpbGUsIHhwYXRoXSkgPT4KICAgKFtrLCB2XSkgPT4KTW9kaWZ5UGF0aChwLCBmbiA9IChkaXIsIGJhc2UsIGV4dCkgPT4gW2RpciwgYmFzZSwgZXh0XSkKKCkgPT4KQXBwZW5kVG9GaWxlbmFtZShwLCBzdHIgPSAnJykKICAgKGRpciwgYmFzZSwgZXh0KSA9PgpTZXRTVkdCYWNrZ3JvdW5kKHhtbCwgY29sb3IgPSAnI2ZmZmZmZicpCiAgIChlLCBuKSA9PgogICAoZSwgbikgPT4KICAgKGUsIG4pID0+CiAgIChlLCBuKSA9PgpGaWxlRnVuY3Rpb24gPSAoZm4sIHJmbiA9IFJlYWRGaWxlLCB3Zm4gPSBXcml0ZUZpbGUsIG5hbWVmbiA9IG4gPT4gbiwgLi4uYXJncykgPT4KICAgKGZpbGVuYW1lLCAuLi5hcmdzKSA9PgogICBuID0+CiAgIGRhdGEgPT4KICAgbiA9PgpQdXRSb3dzQ29sdW1ucyhyb3dzKQooYWNjLCByb3cpID0+CiAgcm93ID0+Cihjb2wsIGkpID0+CkdldExpYnJhcnkoZSkKRWxlbWVudE5hbWUoZSkKR2V0Um90YXRpb24oZWxlbWVudCkKUGFja2FnZTJDaXJjdWl0KHApCih7IHgsIHkgfSkgPT4KICBwdCA9PgogIHB0ID0+Cih7IHggfSkgPT4KKHsgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KICBjb29yZCA9PgogIHggPT4KICB5ID0+Cih7IHgsIHkgfSkgPT4KKHsgeCwgeSB9KSA9PgpDb250YWN0cmVmMkNpcmN1aXQoY3JlZikKICBlID0+ClNpZ25hbDJDaXJjdWl0KHMpCkVsZW1lbnQyQ2lyY3VpdChlbGVtZW50KQpHZXRVc2VkUGFja2FnZXMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+CkdldFBhY2thZ2VQaXRjaChwa2cpCiAgcGFkID0+CkVhZ2xlMkNpcmN1aXQoZG9jID0gcHJvamVjdC5ib2FyZCwgd2lkdGggPSAxMDAsIGhlaWdodCA9IDEwMCkKRWFnbGUyQ2lyY3VpdEpTKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBzY2FsZSA9IDUwLCBzaGVldCA9IDApCiAgIG4gPT4KICBlID0+AAAAAAAAAAARBQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12652,
								12679
							],
							[
								12792,
								12796
							],
							[
								13090,
								13104
							],
							[
								13196,
								13224
							],
							[
								13306,
								13313
							],
							[
								13423,
								13430
							],
							[
								13610,
								13617
							],
							[
								13756,
								13769
							],
							[
								13894,
								13901
							],
							[
								13925,
								13936
							],
							[
								13984,
								13998
							],
							[
								14006,
								14017
							],
							[
								14056,
								14070
							],
							[
								14104,
								14122
							],
							[
								14208,
								14226
							],
							[
								14294,
								14301
							],
							[
								14428,
								14443
							],
							[
								14797,
								14807
							],
							[
								15083,
								15101
							],
							[
								16108,
								16117
							],
							[
								16149,
								16160
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12714,
								12741
							],
							[
								12854,
								12858
							],
							[
								13152,
								13166
							],
							[
								13258,
								13286
							],
							[
								13368,
								13375
							],
							[
								13485,
								13492
							],
							[
								13672,
								13679
							],
							[
								13818,
								13831
							],
							[
								13956,
								13963
							],
							[
								13987,
								13998
							],
							[
								14046,
								14060
							],
							[
								14068,
								14079
							],
							[
								14118,
								14132
							],
							[
								14166,
								14184
							],
							[
								14270,
								14288
							],
							[
								14356,
								14363
							],
							[
								14490,
								14505
							],
							[
								14859,
								14869
							],
							[
								15145,
								15163
							],
							[
								16170,
								16179
							],
							[
								16211,
								16222
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAEQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEFAAAgIG1ha2VFYWdsZU5vZGUgPSAob3duZXIsIHJlZiwgY3RvcikgPT4KICB3YWxrUGF0aChwLCB0ID0gcCA9PiBwLgooMSkpCiAgYWJvcnQgPSAoKSA9PgogIHNldCA9IHYgPT4KICBpZ25vcmUgPSAoKSA9PgpFYWdsZU5vZGUKICBjb25zdHJ1Y3Rvcihvd25lciwgcmVmLCByYXcpCiAgZ2V0IHBhdGgoKQogIGdldCByb290KCkKICBnZXQgZG9jdW1lbnQoKQogIHQgPSAobywgcCwgdikgPT4KICAgKHAsIGksIGFib3J0LCBpZ25vcmUpID0+CiAgcGF0aCA9PgogIGdldCBwcm9qZWN0KCkKICBnZXQgbm9kZSgpCiAgZ2V0IHJhdygpCiAgY2FjaGVGaWVsZHMoKQogIGdldCBjaGlsZENvbnN0cnVjdG9yKCkKICBsaXN0Q3RvciA9IChvLCBwLCB2KSA9PgogICAoKSA9PgogICAoKSA9PgogICAoKSA9PgogIGluaXRSZWxhdGlvbihrZXksIGhhbmRsZXIsIGZuKQogICB2ID0+CiAgYXBwZW5kQ2hpbGQobm9kZSwgYXR0cmlidXRlcyA9IHt9KQogIHJlcGxhY2Uobm9kZSkKICBzdGF0aWMgbWFrZVByZWRpY2F0ZShwcmVkaWNhdGUpCiAgcHJlZCA9ICh2LCBwLCBvKSA9PgogIHByZWQgPSAodiwgcCwgbykgPT4KKGFjYywga2V5KSA9PgogIHByZWQgPSAodiwgcCwgbykgPT4KKGtleSwgaSkgPT4KKmdldEFsbChwcmVkaWNhdGUsIHRyYW5zZm9ybSkKKC4uLmFyZ3MpID0+CiAgZ2V0KHByZWQsIHRyYW5zZm9ybSkKKC4uLmFyZ3MpID0+CiAgZmluZChuYW1lLCB0cmFuc2Zvcm0gPSBhID0+IGEpCiAgZ2V0TWFwKGVudGl0eSkKICBlID0+CiAgdCA9IChbdiwgbCwgZF0pID0+CiAgIGl0ID0+CiAgZ2V0IG5hbWVzKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2U2libGluZygpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICB0b1N0cmluZygpCiAgaW5zcGVjdChkZXB0aCwgb3B0aW9ucykKICBnZXRBdHRyID0gbmFtZSA9PgogIG5hbWUgPT4KICAgKGF0dHJzLCBhdHRyKSA9PgogIHQgPSAobywgcCwgdikgPT4KICBnZXRCb3VuZHMocHJlZCA9IGUgPT4gdHJ1ZSkKICBlID0+CiAgZ2V0IGdlb21ldHJ5KCkKICBtYWtlR2V0dGVyU2V0dGVyID0gayA9PiB2ID0+CiAgcHJvcCA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgZ2V0RG9jdW1lbnQoKQogIHhwYXRoKCkKICAgKCkgPT4KICAgeHBhdGggPT4KICAgKCkgPT4KSW1tdXRhYmxlWFBhdGgKICB0ID0gKFt2LCBsLCBkXSkgPT4KKml0ZXJhdG9yKC4uLmFyZ3MpCiAgIGFyZyA9PgogICAoW3YsIGwsIGRdKSA9PgogICAodiwgcCkgPT4KICB0b1hNTChpbmRlbnQgPSAnJykKRWFnbGVOb2RlCigpAAAAAAAAAAARBQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12761,
								12788
							],
							[
								12901,
								12905
							],
							[
								13199,
								13213
							],
							[
								13305,
								13333
							],
							[
								13415,
								13422
							],
							[
								13532,
								13539
							],
							[
								13719,
								13726
							],
							[
								13865,
								13878
							],
							[
								14003,
								14010
							],
							[
								14034,
								14045
							],
							[
								14093,
								14107
							],
							[
								14115,
								14126
							],
							[
								14165,
								14179
							],
							[
								14213,
								14231
							],
							[
								14317,
								14335
							],
							[
								14403,
								14410
							],
							[
								14537,
								14552
							],
							[
								14906,
								14916
							],
							[
								15192,
								15210
							],
							[
								16217,
								16226
							],
							[
								16258,
								16269
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/node.js",
						"symkeys":
						[
							[
								608,
								645
							],
							[
								784,
								817
							],
							[
								819,
								823
							],
							[
								876,
								889
							],
							[
								913,
								923
							],
							[
								941,
								955
							],
							[
								1131,
								1140
							],
							[
								1214,
								1242
							],
							[
								1902,
								1912
							],
							[
								1948,
								1958
							],
							[
								2015,
								2029
							],
							[
								2076,
								2092
							],
							[
								2224,
								2249
							],
							[
								2520,
								2527
							],
							[
								2977,
								2990
							],
							[
								3099,
								3109
							],
							[
								3183,
								3192
							],
							[
								3574,
								3587
							],
							[
								4265,
								4287
							],
							[
								4565,
								4588
							],
							[
								5138,
								5144
							],
							[
								5372,
								5378
							],
							[
								5529,
								5535
							],
							[
								5891,
								5921
							],
							[
								5969,
								5974
							],
							[
								6254,
								6288
							],
							[
								6527,
								6540
							],
							[
								6578,
								6609
							],
							[
								6698,
								6717
							],
							[
								6808,
								6827
							],
							[
								7005,
								7018
							],
							[
								7052,
								7071
							],
							[
								7083,
								7094
							],
							[
								7201,
								7230
							],
							[
								7392,
								7404
							],
							[
								7605,
								7625
							],
							[
								7775,
								7787
							],
							[
								8040,
								8070
							],
							[
								8414,
								8428
							],
							[
								8528,
								8532
							],
							[
								8612,
								8630
							],
							[
								8741,
								8747
							],
							[
								8973,
								8984
							],
							[
								9269,
								9286
							],
							[
								9407,
								9424
							],
							[
								9545,
								9561
							],
							[
								9845,
								9861
							],
							[
								9990,
								10005
							],
							[
								10250,
								10260
							],
							[
								10342,
								10365
							],
							[
								10833,
								10850
							],
							[
								11011,
								11018
							],
							[
								11065,
								11091
							],
							[
								12301,
								12317
							],
							[
								12744,
								12771
							],
							[
								12884,
								12888
							],
							[
								13182,
								13196
							],
							[
								13288,
								13316
							],
							[
								13398,
								13405
							],
							[
								13515,
								13522
							],
							[
								13702,
								13709
							],
							[
								13848,
								13861
							],
							[
								13986,
								13993
							],
							[
								14017,
								14028
							],
							[
								14076,
								14090
							],
							[
								14098,
								14109
							],
							[
								14148,
								14162
							],
							[
								14196,
								14214
							],
							[
								14300,
								14318
							],
							[
								14386,
								14393
							],
							[
								14520,
								14535
							],
							[
								14889,
								14899
							],
							[
								15175,
								15193
							],
							[
								16200,
								16209
							],
							[
								16241,
								16252
							]
						],
						"symlist":
						[
							"makeEagleNode = (owner, ref, ctor) =>",
							"function* walkPath(p, t = p => p.",
							"(1))",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"EagleNode",
							"constructor(owner, ref, raw)",
							"get path()",
							"get root()",
							"get document()",
							"t = (o, p, v) =>",
							" (p, i, abort, ignore) =>",
							"path =>",
							"get project()",
							"get node()",
							"get raw()",
							"cacheFields()",
							"get childConstructor()",
							"listCtor = (o, p, v) =>",
							" () =>",
							" () =>",
							" () =>",
							"initRelation(key, handler, fn)",
							" v =>",
							"appendChild(node, attributes = {})",
							"replace(node)",
							"static makePredicate(predicate)",
							"pred = (v, p, o) =>",
							"pred = (v, p, o) =>",
							"(acc, key) =>",
							"pred = (v, p, o) =>",
							"(key, i) =>",
							"*getAll(predicate, transform)",
							"(...args) =>",
							"get(pred, transform)",
							"(...args) =>",
							"find(name, transform = a => a)",
							"getMap(entity)",
							"e =>",
							"t = ([v, l, d]) =>",
							" it =>",
							"get names()",
							"get nextSibling()",
							"get prevSibling()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"toString()",
							"inspect(depth, options)",
							"getAttr = name =>",
							"name =>",
							" (attrs, attr) =>",
							"t = (o, p, v) =>",
							"getBounds(pred = e => true)",
							"e =>",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							"getDocument()",
							"xpath()",
							" () =>",
							" xpath =>",
							" () =>",
							"ImmutableXPath",
							"t = ([v, l, d]) =>",
							"*iterator(...args)",
							" arg =>",
							" ([v, l, d]) =>",
							" (v, p) =>",
							"toXML(indent = '')",
							"EagleNode",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAEQUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/xpath.js",
						"symkeys":
						[
							[
								163,
								186
							],
							[
								219,
								242
							],
							[
								305,
								317
							],
							[
								549,
								573
							],
							[
								1355,
								1365
							],
							[
								1459,
								1494
							],
							[
								1620,
								1642
							],
							[
								2166,
								2182
							],
							[
								2490,
								2497
							],
							[
								2763,
								2781
							],
							[
								3382,
								3401
							],
							[
								3732,
								3741
							],
							[
								3826,
								3840
							],
							[
								4102,
								4163
							],
							[
								4517,
								4536
							],
							[
								5255,
								5270
							],
							[
								5367,
								5371
							],
							[
								5530,
								5534
							],
							[
								5683,
								5697
							],
							[
								5803,
								5835
							],
							[
								6001,
								6008
							],
							[
								6244,
								6260
							],
							[
								6287,
								6291
							],
							[
								6377,
								6391
							],
							[
								6418,
								6422
							],
							[
								6507,
								6542
							],
							[
								6754,
								6782
							],
							[
								7486,
								7497
							],
							[
								7929,
								7938
							],
							[
								7970,
								8056
							],
							[
								8478,
								8506
							],
							[
								8614,
								8622
							],
							[
								8738,
								8755
							],
							[
								8946,
								8974
							],
							[
								9428,
								9439
							],
							[
								10548,
								10560
							],
							[
								10641,
								10649
							],
							[
								10664,
								10674
							],
							[
								10689,
								10701
							],
							[
								11029,
								11102
							],
							[
								11485,
								11497
							],
							[
								12018,
								12035
							]
						],
						"symlist":
						[
							"incr = (o, p, i = 1) =>",
							"isSpecialAttr = attr =>",
							"MutableXPath",
							"static partMatcher(part)",
							"toString()",
							"static isMemberName(name, out = {})",
							"static from(path, obj)",
							"maxCount = () =>",
							"item =>",
							"(acc, sib, idx) =>",
							"([idx, tagName]) =>",
							"(x, p) =>",
							"ImmutableXPath",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static strToPart(p)",
							"static parse(l)",
							"p =>",
							"p =>",
							"(acc, part) =>",
							"constructor(a, absolute = false)",
							"part =>",
							"get descendand()",
							"v =>",
							"get absolute()",
							"v =>",
							"slice(start = 0, end = this.length)",
							"c = (text, c = 33, b = 0) =>",
							"([k, v]) =>",
							"toArray()",
							"toString(sep = '/', childrenSym = this.constructor.CHILDREN_GLYPH, tfn = text => text)",
							"toCode(name = '', opts = {})",
							"y = i =>",
							"(acc, part, i) =>",
							" function partToStr(part)",
							"([k, v]) =>",
							"MutableXPath",
							" text =>",
							"toRegExp()",
							"MutableXPath",
							"findXPath = (xpath, flat, { root, recursive = true, entries = false }) =>",
							"m = other =>",
							"parseXPath = s =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAARBQAAICBtYWtlRWFnbGVOb2RlID0gKG93bmVyLCByZWYsIGN0b3IpID0+CiAgd2Fsa1BhdGgocCwgdCA9IHAgPT4gcC4KKDEpKQogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KRWFnbGVOb2RlCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQogIGdldCBwYXRoKCkKICBnZXQgcm9vdCgpCiAgZ2V0IGRvY3VtZW50KCkKICB0ID0gKG8sIHAsIHYpID0+CiAgIChwLCBpLCBhYm9ydCwgaWdub3JlKSA9PgogIHBhdGggPT4KICBnZXQgcHJvamVjdCgpCiAgZ2V0IG5vZGUoKQogIGdldCByYXcoKQogIGNhY2hlRmllbGRzKCkKICBnZXQgY2hpbGRDb25zdHJ1Y3RvcigpCiAgbGlzdEN0b3IgPSAobywgcCwgdikgPT4KICAgKCkgPT4KICAgKCkgPT4KICAgKCkgPT4KICBpbml0UmVsYXRpb24oa2V5LCBoYW5kbGVyLCBmbikKICAgdiA9PgogIGFwcGVuZENoaWxkKG5vZGUsIGF0dHJpYnV0ZXMgPSB7fSkKICByZXBsYWNlKG5vZGUpCiAgc3RhdGljIG1ha2VQcmVkaWNhdGUocHJlZGljYXRlKQogIHByZWQgPSAodiwgcCwgbykgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihhY2MsIGtleSkgPT4KICBwcmVkID0gKHYsIHAsIG8pID0+CihrZXksIGkpID0+CipnZXRBbGwocHJlZGljYXRlLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCiguLi5hcmdzKSA9PgogIGZpbmQobmFtZSwgdHJhbnNmb3JtID0gYSA9PiBhKQogIGdldE1hcChlbnRpdHkpCiAgZSA9PgogIHQgPSAoW3YsIGwsIGRdKSA9PgogICBpdCA9PgogIGdldCBuYW1lcygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgdG9TdHJpbmcoKQogIGluc3BlY3QoZGVwdGgsIG9wdGlvbnMpCiAgZ2V0QXR0ciA9IG5hbWUgPT4KICBuYW1lID0+CiAgIChhdHRycywgYXR0cikgPT4KICB0ID0gKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQgPSBlID0+IHRydWUpCiAgZSA9PgogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIGdldERvY3VtZW50KCkKICB4cGF0aCgpCiAgICgpID0+CiAgIHhwYXRoID0+CiAgICgpID0+CkltbXV0YWJsZVhQYXRoCiAgdCA9IChbdiwgbCwgZF0pID0+CippdGVyYXRvciguLi5hcmdzKQogICBhcmcgPT4KICAgKFt2LCBsLCBkXSkgPT4KICAgKHYsIHApID0+CiAgdG9YTUwoaW5kZW50ID0gJycpCkVhZ2xlTm9kZQooKQAAAAAAAAAAmQMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACZAwAAICBpbmNyID0gKG8sIHAsIGkgPSAxKSA9PgogIGlzU3BlY2lhbEF0dHIgPSBhdHRyID0+Ck11dGFibGVYUGF0aAogIHN0YXRpYyBwYXJ0TWF0Y2hlcihwYXJ0KQogIHRvU3RyaW5nKCkKICBzdGF0aWMgaXNNZW1iZXJOYW1lKG5hbWUsIG91dCA9IHt9KQogIHN0YXRpYyBmcm9tKHBhdGgsIG9iaikKICBtYXhDb3VudCA9ICgpID0+CiAgaXRlbSA9PgooYWNjLCBzaWIsIGlkeCkgPT4KKFtpZHgsIHRhZ05hbWVdKSA9PgooeCwgcCkgPT4KSW1tdXRhYmxlWFBhdGgKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHN0clRvUGFydChwKQogIHN0YXRpYyBwYXJzZShsKQogIHAgPT4KICBwID0+CihhY2MsIHBhcnQpID0+CiAgY29uc3RydWN0b3IoYSwgYWJzb2x1dGUgPSBmYWxzZSkKICBwYXJ0ID0+CiAgZ2V0IGRlc2NlbmRhbmQoKQogIHYgPT4KICBnZXQgYWJzb2x1dGUoKQogIHYgPT4KICBzbGljZShzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQogIGMgPSAodGV4dCwgYyA9IDMzLCBiID0gMCkgPT4KKFtrLCB2XSkgPT4KICB0b0FycmF5KCkKICB0b1N0cmluZyhzZXAgPSAnLycsIGNoaWxkcmVuU3ltID0gdGhpcy5jb25zdHJ1Y3Rvci5DSElMRFJFTl9HTFlQSCwgdGZuID0gdGV4dCA9PiB0ZXh0KQogIHRvQ29kZShuYW1lID0gJycsIG9wdHMgPSB7fSkKICB5ID0gaSA9PgooYWNjLCBwYXJ0LCBpKSA9PgogIHBhcnRUb1N0cihwYXJ0KQooW2ssIHZdKSA9PgpNdXRhYmxlWFBhdGgKICAgdGV4dCA9PgogIHRvUmVnRXhwKCkKTXV0YWJsZVhQYXRoCiAgZmluZFhQYXRoID0gKHhwYXRoLCBmbGF0LCB7IHJvb3QsIHJlY3Vyc2l2ZSA9IHRydWUsIGVudHJpZXMgPSBmYWxzZSB9KSA9PgogIG0gPSBvdGhlciA9PgogIHBhcnNlWFBhdGggPSBzID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/xpath.js",
						"symkeys":
						[
							[
								163,
								186
							],
							[
								219,
								242
							],
							[
								305,
								317
							],
							[
								549,
								573
							],
							[
								1355,
								1365
							],
							[
								1459,
								1494
							],
							[
								1620,
								1642
							],
							[
								2166,
								2182
							],
							[
								2490,
								2497
							],
							[
								2763,
								2781
							],
							[
								3382,
								3401
							],
							[
								3732,
								3741
							],
							[
								3826,
								3840
							],
							[
								4102,
								4163
							],
							[
								4517,
								4536
							],
							[
								5255,
								5270
							],
							[
								5367,
								5371
							],
							[
								5530,
								5534
							],
							[
								5683,
								5697
							],
							[
								5803,
								5835
							],
							[
								6001,
								6008
							],
							[
								6244,
								6260
							],
							[
								6287,
								6291
							],
							[
								6377,
								6391
							],
							[
								6418,
								6422
							],
							[
								6507,
								6542
							],
							[
								6754,
								6782
							],
							[
								7486,
								7497
							],
							[
								7929,
								7938
							],
							[
								7970,
								8056
							],
							[
								8478,
								8506
							],
							[
								8614,
								8622
							],
							[
								8738,
								8755
							],
							[
								8946,
								8974
							],
							[
								9428,
								9439
							],
							[
								10548,
								10560
							],
							[
								10641,
								10649
							],
							[
								10664,
								10674
							],
							[
								10689,
								10701
							],
							[
								11029,
								11102
							],
							[
								11485,
								11497
							],
							[
								12018,
								12035
							]
						],
						"symlist":
						[
							"incr = (o, p, i = 1) =>",
							"isSpecialAttr = attr =>",
							"MutableXPath",
							"static partMatcher(part)",
							"toString()",
							"static isMemberName(name, out = {})",
							"static from(path, obj)",
							"maxCount = () =>",
							"item =>",
							"(acc, sib, idx) =>",
							"([idx, tagName]) =>",
							"(x, p) =>",
							"ImmutableXPath",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static strToPart(p)",
							"static parse(l)",
							"p =>",
							"p =>",
							"(acc, part) =>",
							"constructor(a, absolute = false)",
							"part =>",
							"get descendand()",
							"v =>",
							"get absolute()",
							"v =>",
							"slice(start = 0, end = this.length)",
							"c = (text, c = 33, b = 0) =>",
							"([k, v]) =>",
							"toArray()",
							"toString(sep = '/', childrenSym = this.constructor.CHILDREN_GLYPH, tfn = text => text)",
							"toCode(name = '', opts = {})",
							"y = i =>",
							"(acc, part, i) =>",
							" function partToStr(part)",
							"([k, v]) =>",
							"MutableXPath",
							" text =>",
							"toRegExp()",
							"MutableXPath",
							"findXPath = (xpath, flat, { root, recursive = true, entries = false }) =>",
							"m = other =>",
							"parseXPath = s =>"
						]
					},
					"AQAAAAAAAAAAAAAAmQMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACZAwAAICBpbmNyID0gKG8sIHAsIGkgPSAxKSA9PgogIGlzU3BlY2lhbEF0dHIgPSBhdHRyID0+Ck11dGFibGVYUGF0aAogIHN0YXRpYyBwYXJ0TWF0Y2hlcihwYXJ0KQogIHRvU3RyaW5nKCkKICBzdGF0aWMgaXNNZW1iZXJOYW1lKG5hbWUsIG91dCA9IHt9KQogIHN0YXRpYyBmcm9tKHBhdGgsIG9iaikKICBtYXhDb3VudCA9ICgpID0+CiAgaXRlbSA9PgooYWNjLCBzaWIsIGlkeCkgPT4KKFtpZHgsIHRhZ05hbWVdKSA9PgooeCwgcCkgPT4KSW1tdXRhYmxlWFBhdGgKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHN0clRvUGFydChwKQogIHN0YXRpYyBwYXJzZShsKQogIHAgPT4KICBwID0+CihhY2MsIHBhcnQpID0+CiAgY29uc3RydWN0b3IoYSwgYWJzb2x1dGUgPSBmYWxzZSkKICBwYXJ0ID0+CiAgZ2V0IGRlc2NlbmRhbmQoKQogIHYgPT4KICBnZXQgYWJzb2x1dGUoKQogIHYgPT4KICBzbGljZShzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQogIGMgPSAodGV4dCwgYyA9IDMzLCBiID0gMCkgPT4KKFtrLCB2XSkgPT4KICB0b0FycmF5KCkKICB0b1N0cmluZyhzZXAgPSAnLycsIGNoaWxkcmVuU3ltID0gdGhpcy5jb25zdHJ1Y3Rvci5DSElMRFJFTl9HTFlQSCwgdGZuID0gdGV4dCA9PiB0ZXh0KQogIHRvQ29kZShuYW1lID0gJycsIG9wdHMgPSB7fSkKICB5ID0gaSA9PgooYWNjLCBwYXJ0LCBpKSA9PgogIHBhcnRUb1N0cihwYXJ0KQooW2ssIHZdKSA9PgpNdXRhYmxlWFBhdGgKICAgdGV4dCA9PgogIHRvUmVnRXhwKCkKTXV0YWJsZVhQYXRoCiAgZmluZFhQYXRoID0gKHhwYXRoLCBmbGF0LCB7IHJvb3QsIHJlY3Vyc2l2ZSA9IHRydWUsIGVudHJpZXMgPSBmYWxzZSB9KSA9PgogIG0gPSBvdGhlciA9PgogIHBhcnNlWFBhdGggPSBzID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/json/path.js",
						"symkeys":
						[
							[
								107,
								169
							],
							[
								307,
								315
							],
							[
								350,
								358
							],
							[
								868,
								879
							],
							[
								1235,
								1283
							],
							[
								1473,
								1490
							],
							[
								1635,
								1646
							],
							[
								1978,
								1986
							],
							[
								2221,
								2231
							],
							[
								2241,
								2260
							],
							[
								2274,
								2285
							],
							[
								2322,
								2344
							],
							[
								2540,
								2570
							],
							[
								3170,
								3231
							],
							[
								3581,
								3626
							],
							[
								3776,
								3811
							],
							[
								3892,
								3932
							],
							[
								5085,
								5113
							],
							[
								5918,
								5936
							],
							[
								6246,
								6253
							],
							[
								6356,
								6366
							],
							[
								6550,
								6562
							],
							[
								6827,
								6838
							],
							[
								7098,
								7107
							],
							[
								7168,
								7181
							],
							[
								7221,
								7249
							],
							[
								7490,
								7501
							],
							[
								7562,
								7573
							],
							[
								7803,
								7815
							],
							[
								7852,
								7862
							],
							[
								7905,
								7916
							],
							[
								7946,
								7963
							],
							[
								7997,
								8014
							],
							[
								8047,
								8059
							],
							[
								8091,
								8107
							],
							[
								8139,
								8155
							],
							[
								8193,
								8208
							],
							[
								8247,
								8258
							],
							[
								8292,
								8321
							],
							[
								8701,
								8720
							],
							[
								9079,
								9094
							],
							[
								9416,
								9428
							],
							[
								9589,
								9597
							],
							[
								10044,
								10063
							],
							[
								10186,
								10193
							],
							[
								10247,
								10251
							],
							[
								10338,
								10350
							],
							[
								10376,
								10390
							],
							[
								10462,
								10481
							],
							[
								10552,
								10566
							],
							[
								10603,
								10623
							],
							[
								11057,
								11068
							],
							[
								11256,
								11275
							],
							[
								11306,
								11320
							],
							[
								11755,
								11871
							],
							[
								11986,
								11994
							],
							[
								11995,
								12017
							],
							[
								12351,
								12370
							],
							[
								12631,
								12642
							],
							[
								12707,
								12721
							],
							[
								12979,
								12990
							],
							[
								13133,
								13156
							],
							[
								13321,
								13343
							],
							[
								13370,
								13382
							],
							[
								13691,
								13726
							],
							[
								13839,
								13850
							],
							[
								13927,
								13931
							],
							[
								14317,
								14367
							],
							[
								14707,
								14720
							],
							[
								14891,
								14901
							],
							[
								14954,
								14970
							],
							[
								15097,
								15109
							],
							[
								15241,
								15250
							],
							[
								15379,
								15383
							],
							[
								15528,
								15535
							],
							[
								15773,
								15777
							],
							[
								15797,
								15807
							],
							[
								16026,
								16030
							],
							[
								16050,
								16055
							],
							[
								16159,
								16180
							],
							[
								16274,
								16285
							],
							[
								16384,
								16411
							],
							[
								16444,
								16455
							],
							[
								16664,
								16682
							],
							[
								17634,
								17646
							],
							[
								17720,
								17728
							],
							[
								17816,
								17829
							],
							[
								17855,
								17865
							],
							[
								17885,
								17899
							],
							[
								18078,
								18098
							],
							[
								18315,
								18325
							],
							[
								18499,
								18510
							],
							[
								18531,
								18542
							],
							[
								18605,
								18611
							],
							[
								18747,
								18753
							]
						],
						"symlist":
						[
							" function DereferenceError(object, member, pos, prev, locator)",
							"frame =>",
							"frame =>",
							"MutablePath",
							"DereferenceError.prototype.toString = function()",
							"IsChildren = a =>",
							"MutablePath",
							" args =>",
							" (a, p) =>",
							"static equals(a, b)",
							"MutablePath",
							"static isChildren(arg)",
							"constructor(p = [], opts = {})",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static partMatcher(obj, tagField = 'tagName')",
							"static isMemberName(name, out = {})",
							"static parse(path, out, separator = '.')",
							"c = (text, c = 33, b = 0) =>",
							"([name, value]) =>",
							"clone()",
							"get size()",
							"right(n = 1)",
							"left(n = 1)",
							"up(n = 1)",
							"down(...args)",
							"bottom(obj, noThrow = false)",
							"nthChild(i)",
							"diff(other)",
							"get lastId()",
							"get last()",
							"get first()",
							"get nextSibling()",
							"get prevSibling()",
							"get parent()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"get depth()",
							"static compareObj(obj, other)",
							"apply(obj, noThrow)",
							" (a, i) =>",
							"(e, i, a) =>",
							"child =>",
							"toSource(opts = {})",
							"item =>",
							"p =>",
							"toCode(name)",
							"(acc, part) =>",
							"toReduce(name = '')",
							"get absolute()",
							"makeAbsolute(parent)",
							"MutablePath",
							" (text, ...args) =>",
							"text : text =>",
							"toString(sep = ' ', partToStr = MutablePath.partToString, childrenStr = MutablePath.CHILDREN_GLYPH + CHILDREN_SPACE)",
							" text =>",
							"text : (text, ...c) =>",
							"pad = (s, n = 1) =>",
							"MutablePath",
							"existsIn(root)",
							"split(pred)",
							"pred = (part, index) =>",
							"relativeTo(other = [])",
							"(part, i) =>",
							"slice(start = 0, end = this.length)",
							"MutablePath",
							"ctor",
							"splice(start = 0, remove = this.length, ...insert)",
							"push(...args)",
							"pop(n = 1)",
							"unshift(...args)",
							"shift(n = 1)",
							"concat(a)",
							"ctor",
							"map(fn)",
							"ctor",
							"filter(fn)",
							"ctor",
							"at(i)",
							"predicate = (p, i) =>",
							"MutablePath",
							"toArray(skip = true, n = 1)",
							"MutablePath",
							"equals(other = [])",
							"get parent()",
							"t = p =>",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"static compare(a, b)",
							" (a, b) =>",
							"MutablePath",
							"MutablePath",
							" () =>",
							" () =>"
						]
					},
					"AQAAAAAAAAAAAAAAUQcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABRBwAARGVyZWZlcmVuY2VFcnJvcihvYmplY3QsIG1lbWJlciwgcG9zLCBwcmV2LCBsb2NhdG9yKQogIGZyYW1lID0+CiAgZnJhbWUgPT4KTXV0YWJsZVBhdGgKRGVyZWZlcmVuY2VFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCklzQ2hpbGRyZW4gPSBhID0+Ck11dGFibGVQYXRoCiAgIGFyZ3MgPT4KICAgKGEsIHApID0+CiAgc3RhdGljIGVxdWFscyhhLCBiKQpNdXRhYmxlUGF0aAogIHN0YXRpYyBpc0NoaWxkcmVuKGFyZykKICBjb25zdHJ1Y3RvcihwID0gW10sIG9wdHMgPSB7fSkKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHBhcnRNYXRjaGVyKG9iaiwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIGlzTWVtYmVyTmFtZShuYW1lLCBvdXQgPSB7fSkKICBzdGF0aWMgcGFyc2UocGF0aCwgb3V0LCBzZXBhcmF0b3IgPSAnLicpCiAgYyA9ICh0ZXh0LCBjID0gMzMsIGIgPSAwKSA9PgooW25hbWUsIHZhbHVlXSkgPT4KICBjbG9uZSgpCiAgZ2V0IHNpemUoKQogIHJpZ2h0KG4gPSAxKQogIGxlZnQobiA9IDEpCiAgdXAobiA9IDEpCiAgZG93biguLi5hcmdzKQogIGJvdHRvbShvYmosIG5vVGhyb3cgPSBmYWxzZSkKICBudGhDaGlsZChpKQogIGRpZmYob3RoZXIpCiAgZ2V0IGxhc3RJZCgpCiAgZ2V0IGxhc3QoKQogIGdldCBmaXJzdCgpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnQoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgZ2V0IGRlcHRoKCkKICBzdGF0aWMgY29tcGFyZU9iaihvYmosIG90aGVyKQogIGFwcGx5KG9iaiwgbm9UaHJvdykKICAgKGEsIGkpID0+CihlLCBpLCBhKSA9PgogIGNoaWxkID0+CiAgdG9Tb3VyY2Uob3B0cyA9IHt9KQogIGl0ZW0gPT4KICBwID0+CiAgdG9Db2RlKG5hbWUpCihhY2MsIHBhcnQpID0+CiAgdG9SZWR1Y2UobmFtZSA9ICcnKQogIGdldCBhYnNvbHV0ZSgpCiAgbWFrZUFic29sdXRlKHBhcmVudCkKTXV0YWJsZVBhdGgKICAgKHRleHQsIC4uLmFyZ3MpID0+CiAgdGV4dCA6IHRleHQgPT4KICB0b1N0cmluZyhzZXAgPSAnICcsIHBhcnRUb1N0ciA9IE11dGFibGVQYXRoLnBhcnRUb1N0cmluZywgY2hpbGRyZW5TdHIgPSBNdXRhYmxlUGF0aC5DSElMRFJFTl9HTFlQSCArIENISUxEUkVOX1NQQUNFKQogICB0ZXh0ID0+CiAgdGV4dCA6ICh0ZXh0LCAuLi5jKSA9PgogIHBhZCA9IChzLCBuID0gMSkgPT4KTXV0YWJsZVBhdGgKICBleGlzdHNJbihyb290KQogIHNwbGl0KHByZWQpCiAgcHJlZCA9IChwYXJ0LCBpbmRleCkgPT4KICByZWxhdGl2ZVRvKG90aGVyID0gW10pCihwYXJ0LCBpKSA9PgogIHNsaWNlKHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpCk11dGFibGVQYXRoCiAgY3RvcgogIHNwbGljZShzdGFydCA9IDAsIHJlbW92ZSA9IHRoaXMubGVuZ3RoLCAuLi5pbnNlcnQpCiAgcHVzaCguLi5hcmdzKQogIHBvcChuID0gMSkKICB1bnNoaWZ0KC4uLmFyZ3MpCiAgc2hpZnQobiA9IDEpCiAgY29uY2F0KGEpCiAgY3RvcgogIG1hcChmbikKICBjdG9yCiAgZmlsdGVyKGZuKQogIGN0b3IKICBhdChpKQogIHByZWRpY2F0ZSA9IChwLCBpKSA9PgpNdXRhYmxlUGF0aAogIHRvQXJyYXkoc2tpcCA9IHRydWUsIG4gPSAxKQpNdXRhYmxlUGF0aAogIGVxdWFscyhvdGhlciA9IFtdKQogIGdldCBwYXJlbnQoKQogIHQgPSBwID0+CiAgYWJvcnQgPSAoKSA9PgogIHNldCA9IHYgPT4KICBpZ25vcmUgPSAoKSA9PgogIHN0YXRpYyBjb21wYXJlKGEsIGIpCiAgIChhLCBiKSA9PgpNdXRhYmxlUGF0aApNdXRhYmxlUGF0aAogICAoKSA9PgogICAoKSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/json/path.js",
						"symkeys":
						[
							[
								107,
								169
							],
							[
								307,
								315
							],
							[
								350,
								358
							],
							[
								868,
								879
							],
							[
								1235,
								1283
							],
							[
								1473,
								1490
							],
							[
								1635,
								1646
							],
							[
								1978,
								1986
							],
							[
								2221,
								2231
							],
							[
								2241,
								2260
							],
							[
								2274,
								2285
							],
							[
								2322,
								2344
							],
							[
								2540,
								2570
							],
							[
								3170,
								3231
							],
							[
								3581,
								3626
							],
							[
								3776,
								3811
							],
							[
								3892,
								3932
							],
							[
								5085,
								5113
							],
							[
								5918,
								5936
							],
							[
								6246,
								6253
							],
							[
								6356,
								6366
							],
							[
								6550,
								6562
							],
							[
								6827,
								6838
							],
							[
								7098,
								7107
							],
							[
								7168,
								7181
							],
							[
								7221,
								7249
							],
							[
								7490,
								7501
							],
							[
								7562,
								7573
							],
							[
								7803,
								7815
							],
							[
								7852,
								7862
							],
							[
								7905,
								7916
							],
							[
								7946,
								7963
							],
							[
								7997,
								8014
							],
							[
								8047,
								8059
							],
							[
								8091,
								8107
							],
							[
								8139,
								8155
							],
							[
								8193,
								8208
							],
							[
								8247,
								8258
							],
							[
								8292,
								8321
							],
							[
								8701,
								8720
							],
							[
								9079,
								9094
							],
							[
								9416,
								9428
							],
							[
								9589,
								9597
							],
							[
								10044,
								10063
							],
							[
								10186,
								10193
							],
							[
								10247,
								10251
							],
							[
								10338,
								10350
							],
							[
								10376,
								10390
							],
							[
								10462,
								10481
							],
							[
								10552,
								10566
							],
							[
								10603,
								10623
							],
							[
								11057,
								11068
							],
							[
								11256,
								11275
							],
							[
								11306,
								11320
							],
							[
								11755,
								11871
							],
							[
								11986,
								11994
							],
							[
								11995,
								12017
							],
							[
								12351,
								12370
							],
							[
								12631,
								12642
							],
							[
								12707,
								12721
							],
							[
								12979,
								12990
							],
							[
								13133,
								13156
							],
							[
								13321,
								13343
							],
							[
								13370,
								13382
							],
							[
								13691,
								13726
							],
							[
								13839,
								13850
							],
							[
								13927,
								13931
							],
							[
								14317,
								14367
							],
							[
								14707,
								14720
							],
							[
								14891,
								14901
							],
							[
								14954,
								14970
							],
							[
								15097,
								15109
							],
							[
								15241,
								15250
							],
							[
								15379,
								15383
							],
							[
								15528,
								15535
							],
							[
								15773,
								15777
							],
							[
								15797,
								15807
							],
							[
								16026,
								16030
							],
							[
								16050,
								16055
							],
							[
								16159,
								16180
							],
							[
								16274,
								16285
							],
							[
								16384,
								16411
							],
							[
								16444,
								16455
							],
							[
								16664,
								16682
							],
							[
								17634,
								17646
							],
							[
								17720,
								17728
							],
							[
								17816,
								17829
							],
							[
								17855,
								17865
							],
							[
								17885,
								17899
							],
							[
								18078,
								18098
							],
							[
								18315,
								18325
							],
							[
								18499,
								18510
							],
							[
								18531,
								18542
							],
							[
								18605,
								18611
							],
							[
								18747,
								18753
							]
						],
						"symlist":
						[
							" function DereferenceError(object, member, pos, prev, locator)",
							"frame =>",
							"frame =>",
							"MutablePath",
							"DereferenceError.prototype.toString = function()",
							"IsChildren = a =>",
							"MutablePath",
							" args =>",
							" (a, p) =>",
							"static equals(a, b)",
							"MutablePath",
							"static isChildren(arg)",
							"constructor(p = [], opts = {})",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static partMatcher(obj, tagField = 'tagName')",
							"static isMemberName(name, out = {})",
							"static parse(path, out, separator = '.')",
							"c = (text, c = 33, b = 0) =>",
							"([name, value]) =>",
							"clone()",
							"get size()",
							"right(n = 1)",
							"left(n = 1)",
							"up(n = 1)",
							"down(...args)",
							"bottom(obj, noThrow = false)",
							"nthChild(i)",
							"diff(other)",
							"get lastId()",
							"get last()",
							"get first()",
							"get nextSibling()",
							"get prevSibling()",
							"get parent()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"get depth()",
							"static compareObj(obj, other)",
							"apply(obj, noThrow)",
							" (a, i) =>",
							"(e, i, a) =>",
							"child =>",
							"toSource(opts = {})",
							"item =>",
							"p =>",
							"toCode(name)",
							"(acc, part) =>",
							"toReduce(name = '')",
							"get absolute()",
							"makeAbsolute(parent)",
							"MutablePath",
							" (text, ...args) =>",
							"text : text =>",
							"toString(sep = ' ', partToStr = MutablePath.partToString, childrenStr = MutablePath.CHILDREN_GLYPH + CHILDREN_SPACE)",
							" text =>",
							"text : (text, ...c) =>",
							"pad = (s, n = 1) =>",
							"MutablePath",
							"existsIn(root)",
							"split(pred)",
							"pred = (part, index) =>",
							"relativeTo(other = [])",
							"(part, i) =>",
							"slice(start = 0, end = this.length)",
							"MutablePath",
							"ctor",
							"splice(start = 0, remove = this.length, ...insert)",
							"push(...args)",
							"pop(n = 1)",
							"unshift(...args)",
							"shift(n = 1)",
							"concat(a)",
							"ctor",
							"map(fn)",
							"ctor",
							"filter(fn)",
							"ctor",
							"at(i)",
							"predicate = (p, i) =>",
							"MutablePath",
							"toArray(skip = true, n = 1)",
							"MutablePath",
							"equals(other = [])",
							"get parent()",
							"t = p =>",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"static compare(a, b)",
							" (a, b) =>",
							"MutablePath",
							"MutablePath",
							" () =>",
							" () =>"
						]
					},
					"AQAAAAAAAAAAAAAAUQcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABRBwAARGVyZWZlcmVuY2VFcnJvcihvYmplY3QsIG1lbWJlciwgcG9zLCBwcmV2LCBsb2NhdG9yKQogIGZyYW1lID0+CiAgZnJhbWUgPT4KTXV0YWJsZVBhdGgKRGVyZWZlcmVuY2VFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCklzQ2hpbGRyZW4gPSBhID0+Ck11dGFibGVQYXRoCiAgIGFyZ3MgPT4KICAgKGEsIHApID0+CiAgc3RhdGljIGVxdWFscyhhLCBiKQpNdXRhYmxlUGF0aAogIHN0YXRpYyBpc0NoaWxkcmVuKGFyZykKICBjb25zdHJ1Y3RvcihwID0gW10sIG9wdHMgPSB7fSkKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHBhcnRNYXRjaGVyKG9iaiwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIGlzTWVtYmVyTmFtZShuYW1lLCBvdXQgPSB7fSkKICBzdGF0aWMgcGFyc2UocGF0aCwgb3V0LCBzZXBhcmF0b3IgPSAnLicpCiAgYyA9ICh0ZXh0LCBjID0gMzMsIGIgPSAwKSA9PgooW25hbWUsIHZhbHVlXSkgPT4KICBjbG9uZSgpCiAgZ2V0IHNpemUoKQogIHJpZ2h0KG4gPSAxKQogIGxlZnQobiA9IDEpCiAgdXAobiA9IDEpCiAgZG93biguLi5hcmdzKQogIGJvdHRvbShvYmosIG5vVGhyb3cgPSBmYWxzZSkKICBudGhDaGlsZChpKQogIGRpZmYob3RoZXIpCiAgZ2V0IGxhc3RJZCgpCiAgZ2V0IGxhc3QoKQogIGdldCBmaXJzdCgpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnQoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgZ2V0IGRlcHRoKCkKICBzdGF0aWMgY29tcGFyZU9iaihvYmosIG90aGVyKQogIGFwcGx5KG9iaiwgbm9UaHJvdykKICAgKGEsIGkpID0+CihlLCBpLCBhKSA9PgogIGNoaWxkID0+CiAgdG9Tb3VyY2Uob3B0cyA9IHt9KQogIGl0ZW0gPT4KICBwID0+CiAgdG9Db2RlKG5hbWUpCihhY2MsIHBhcnQpID0+CiAgdG9SZWR1Y2UobmFtZSA9ICcnKQogIGdldCBhYnNvbHV0ZSgpCiAgbWFrZUFic29sdXRlKHBhcmVudCkKTXV0YWJsZVBhdGgKICAgKHRleHQsIC4uLmFyZ3MpID0+CiAgdGV4dCA6IHRleHQgPT4KICB0b1N0cmluZyhzZXAgPSAnICcsIHBhcnRUb1N0ciA9IE11dGFibGVQYXRoLnBhcnRUb1N0cmluZywgY2hpbGRyZW5TdHIgPSBNdXRhYmxlUGF0aC5DSElMRFJFTl9HTFlQSCArIENISUxEUkVOX1NQQUNFKQogICB0ZXh0ID0+CiAgdGV4dCA6ICh0ZXh0LCAuLi5jKSA9PgogIHBhZCA9IChzLCBuID0gMSkgPT4KTXV0YWJsZVBhdGgKICBleGlzdHNJbihyb290KQogIHNwbGl0KHByZWQpCiAgcHJlZCA9IChwYXJ0LCBpbmRleCkgPT4KICByZWxhdGl2ZVRvKG90aGVyID0gW10pCihwYXJ0LCBpKSA9PgogIHNsaWNlKHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpCk11dGFibGVQYXRoCiAgY3RvcgogIHNwbGljZShzdGFydCA9IDAsIHJlbW92ZSA9IHRoaXMubGVuZ3RoLCAuLi5pbnNlcnQpCiAgcHVzaCguLi5hcmdzKQogIHBvcChuID0gMSkKICB1bnNoaWZ0KC4uLmFyZ3MpCiAgc2hpZnQobiA9IDEpCiAgY29uY2F0KGEpCiAgY3RvcgogIG1hcChmbikKICBjdG9yCiAgZmlsdGVyKGZuKQogIGN0b3IKICBhdChpKQogIHByZWRpY2F0ZSA9IChwLCBpKSA9PgpNdXRhYmxlUGF0aAogIHRvQXJyYXkoc2tpcCA9IHRydWUsIG4gPSAxKQpNdXRhYmxlUGF0aAogIGVxdWFscyhvdGhlciA9IFtdKQogIGdldCBwYXJlbnQoKQogIHQgPSBwID0+CiAgYWJvcnQgPSAoKSA9PgogIHNldCA9IHYgPT4KICBpZ25vcmUgPSAoKSA9PgogIHN0YXRpYyBjb21wYXJlKGEsIGIpCiAgIChhLCBiKSA9PgpNdXRhYmxlUGF0aApNdXRhYmxlUGF0aAogICAoKSA9PgogICAoKSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/json/path.js",
						"symkeys":
						[
							[
								107,
								169
							],
							[
								307,
								315
							],
							[
								350,
								358
							],
							[
								868,
								879
							],
							[
								1235,
								1283
							],
							[
								1473,
								1490
							],
							[
								1635,
								1646
							],
							[
								1978,
								1986
							],
							[
								2221,
								2231
							],
							[
								2241,
								2260
							],
							[
								2274,
								2285
							],
							[
								2322,
								2344
							],
							[
								2540,
								2570
							],
							[
								3170,
								3231
							],
							[
								3581,
								3626
							],
							[
								3776,
								3811
							],
							[
								3892,
								3932
							],
							[
								5085,
								5113
							],
							[
								5918,
								5936
							],
							[
								6246,
								6253
							],
							[
								6356,
								6366
							],
							[
								6550,
								6562
							],
							[
								6827,
								6838
							],
							[
								7098,
								7107
							],
							[
								7168,
								7181
							],
							[
								7221,
								7249
							],
							[
								7490,
								7501
							],
							[
								7562,
								7573
							],
							[
								7803,
								7815
							],
							[
								7852,
								7862
							],
							[
								7905,
								7916
							],
							[
								7946,
								7963
							],
							[
								7997,
								8014
							],
							[
								8047,
								8059
							],
							[
								8091,
								8107
							],
							[
								8139,
								8155
							],
							[
								8193,
								8208
							],
							[
								8247,
								8258
							],
							[
								8292,
								8321
							],
							[
								8701,
								8720
							],
							[
								9079,
								9094
							],
							[
								9416,
								9428
							],
							[
								9589,
								9597
							],
							[
								10044,
								10063
							],
							[
								10186,
								10193
							],
							[
								10247,
								10251
							],
							[
								10338,
								10350
							],
							[
								10376,
								10390
							],
							[
								10462,
								10481
							],
							[
								10552,
								10566
							],
							[
								10603,
								10623
							],
							[
								11057,
								11068
							],
							[
								11256,
								11275
							],
							[
								11306,
								11320
							],
							[
								11755,
								11871
							],
							[
								11986,
								11994
							],
							[
								11995,
								12017
							],
							[
								12351,
								12370
							],
							[
								12631,
								12642
							],
							[
								12707,
								12721
							],
							[
								12979,
								12990
							],
							[
								13133,
								13156
							],
							[
								13321,
								13343
							],
							[
								13370,
								13382
							],
							[
								13691,
								13726
							],
							[
								13839,
								13850
							],
							[
								13927,
								13931
							],
							[
								14317,
								14367
							],
							[
								14707,
								14720
							],
							[
								14891,
								14901
							],
							[
								14954,
								14970
							],
							[
								15097,
								15109
							],
							[
								15241,
								15250
							],
							[
								15379,
								15383
							],
							[
								15528,
								15535
							],
							[
								15773,
								15777
							],
							[
								15797,
								15807
							],
							[
								16026,
								16030
							],
							[
								16050,
								16055
							],
							[
								16159,
								16180
							],
							[
								16274,
								16285
							],
							[
								16384,
								16411
							],
							[
								16444,
								16455
							],
							[
								16664,
								16682
							],
							[
								17634,
								17646
							],
							[
								17720,
								17728
							],
							[
								17816,
								17829
							],
							[
								17855,
								17865
							],
							[
								17885,
								17899
							],
							[
								18078,
								18098
							],
							[
								18315,
								18325
							],
							[
								18499,
								18510
							],
							[
								18531,
								18542
							],
							[
								18605,
								18611
							],
							[
								18747,
								18753
							]
						],
						"symlist":
						[
							" function DereferenceError(object, member, pos, prev, locator)",
							"frame =>",
							"frame =>",
							"MutablePath",
							"DereferenceError.prototype.toString = function()",
							"IsChildren = a =>",
							"MutablePath",
							" args =>",
							" (a, p) =>",
							"static equals(a, b)",
							"MutablePath",
							"static isChildren(arg)",
							"constructor(p = [], opts = {})",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static partMatcher(obj, tagField = 'tagName')",
							"static isMemberName(name, out = {})",
							"static parse(path, out, separator = '.')",
							"c = (text, c = 33, b = 0) =>",
							"([name, value]) =>",
							"clone()",
							"get size()",
							"right(n = 1)",
							"left(n = 1)",
							"up(n = 1)",
							"down(...args)",
							"bottom(obj, noThrow = false)",
							"nthChild(i)",
							"diff(other)",
							"get lastId()",
							"get last()",
							"get first()",
							"get nextSibling()",
							"get prevSibling()",
							"get parent()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"get depth()",
							"static compareObj(obj, other)",
							"apply(obj, noThrow)",
							" (a, i) =>",
							"(e, i, a) =>",
							"child =>",
							"toSource(opts = {})",
							"item =>",
							"p =>",
							"toCode(name)",
							"(acc, part) =>",
							"toReduce(name = '')",
							"get absolute()",
							"makeAbsolute(parent)",
							"MutablePath",
							" (text, ...args) =>",
							"text : text =>",
							"toString(sep = ' ', partToStr = MutablePath.partToString, childrenStr = MutablePath.CHILDREN_GLYPH + CHILDREN_SPACE)",
							" text =>",
							"text : (text, ...c) =>",
							"pad = (s, n = 1) =>",
							"MutablePath",
							"existsIn(root)",
							"split(pred)",
							"pred = (part, index) =>",
							"relativeTo(other = [])",
							"(part, i) =>",
							"slice(start = 0, end = this.length)",
							"MutablePath",
							"ctor",
							"splice(start = 0, remove = this.length, ...insert)",
							"push(...args)",
							"pop(n = 1)",
							"unshift(...args)",
							"shift(n = 1)",
							"concat(a)",
							"ctor",
							"map(fn)",
							"ctor",
							"filter(fn)",
							"ctor",
							"at(i)",
							"predicate = (p, i) =>",
							"MutablePath",
							"toArray(skip = true, n = 1)",
							"MutablePath",
							"equals(other = [])",
							"get parent()",
							"t = p =>",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"static compare(a, b)",
							" (a, b) =>",
							"MutablePath",
							"MutablePath",
							" () =>",
							" () =>"
						]
					},
					"AQAAAAAAAAAAAAAAUQcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					37,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/json/path.js",
						"symkeys":
						[
							[
								107,
								169
							],
							[
								307,
								315
							],
							[
								350,
								358
							],
							[
								868,
								879
							],
							[
								1235,
								1283
							],
							[
								1473,
								1490
							],
							[
								1635,
								1646
							],
							[
								1978,
								1986
							],
							[
								2221,
								2231
							],
							[
								2241,
								2260
							],
							[
								2274,
								2285
							],
							[
								2322,
								2344
							],
							[
								2540,
								2570
							],
							[
								3170,
								3231
							],
							[
								3581,
								3626
							],
							[
								3776,
								3811
							],
							[
								3892,
								3932
							],
							[
								5085,
								5113
							],
							[
								5918,
								5936
							],
							[
								6246,
								6253
							],
							[
								6356,
								6366
							],
							[
								6550,
								6562
							],
							[
								6827,
								6838
							],
							[
								7098,
								7107
							],
							[
								7168,
								7181
							],
							[
								7221,
								7249
							],
							[
								7490,
								7501
							],
							[
								7562,
								7573
							],
							[
								7803,
								7815
							],
							[
								7852,
								7862
							],
							[
								7905,
								7916
							],
							[
								7946,
								7963
							],
							[
								7997,
								8014
							],
							[
								8047,
								8059
							],
							[
								8091,
								8107
							],
							[
								8139,
								8155
							],
							[
								8193,
								8208
							],
							[
								8247,
								8258
							],
							[
								8292,
								8321
							],
							[
								8701,
								8720
							],
							[
								9074,
								9089
							],
							[
								9411,
								9423
							],
							[
								9584,
								9592
							],
							[
								10039,
								10058
							],
							[
								10181,
								10188
							],
							[
								10242,
								10246
							],
							[
								10333,
								10345
							],
							[
								10371,
								10385
							],
							[
								10457,
								10476
							],
							[
								10547,
								10561
							],
							[
								10598,
								10618
							],
							[
								11052,
								11063
							],
							[
								11251,
								11270
							],
							[
								11301,
								11315
							],
							[
								11750,
								11866
							],
							[
								11981,
								11989
							],
							[
								11990,
								12012
							],
							[
								12346,
								12365
							],
							[
								12626,
								12637
							],
							[
								12702,
								12716
							],
							[
								12974,
								12985
							],
							[
								13128,
								13151
							],
							[
								13316,
								13338
							],
							[
								13365,
								13377
							],
							[
								13686,
								13721
							],
							[
								13834,
								13845
							],
							[
								13922,
								13926
							],
							[
								14312,
								14362
							],
							[
								14702,
								14715
							],
							[
								14886,
								14896
							],
							[
								14949,
								14965
							],
							[
								15092,
								15104
							],
							[
								15236,
								15245
							],
							[
								15374,
								15378
							],
							[
								15523,
								15530
							],
							[
								15768,
								15772
							],
							[
								15792,
								15802
							],
							[
								16021,
								16025
							],
							[
								16045,
								16050
							],
							[
								16154,
								16175
							],
							[
								16269,
								16280
							],
							[
								16379,
								16406
							],
							[
								16439,
								16450
							],
							[
								16659,
								16677
							],
							[
								17629,
								17641
							],
							[
								17715,
								17723
							],
							[
								17811,
								17824
							],
							[
								17850,
								17860
							],
							[
								17880,
								17894
							],
							[
								18073,
								18093
							],
							[
								18310,
								18320
							],
							[
								18494,
								18505
							],
							[
								18526,
								18537
							],
							[
								18600,
								18606
							],
							[
								18742,
								18748
							]
						],
						"symlist":
						[
							" function DereferenceError(object, member, pos, prev, locator)",
							"frame =>",
							"frame =>",
							"MutablePath",
							"DereferenceError.prototype.toString = function()",
							"IsChildren = a =>",
							"MutablePath",
							" args =>",
							" (a, p) =>",
							"static equals(a, b)",
							"MutablePath",
							"static isChildren(arg)",
							"constructor(p = [], opts = {})",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static partMatcher(obj, tagField = 'tagName')",
							"static isMemberName(name, out = {})",
							"static parse(path, out, separator = '.')",
							"c = (text, c = 33, b = 0) =>",
							"([name, value]) =>",
							"clone()",
							"get size()",
							"right(n = 1)",
							"left(n = 1)",
							"up(n = 1)",
							"down(...args)",
							"bottom(obj, noThrow = false)",
							"nthChild(i)",
							"diff(other)",
							"get lastId()",
							"get last()",
							"get first()",
							"get nextSibling()",
							"get prevSibling()",
							"get parent()",
							"get parentNode()",
							"get firstChild()",
							"get lastChild()",
							"get depth()",
							"static compareObj(obj, other)",
							"apply(obj, noThrow)",
							" (a, i) =>",
							"(e, i, a) =>",
							"child =>",
							"toSource(opts = {})",
							"item =>",
							"p =>",
							"toCode(name)",
							"(acc, part) =>",
							"toReduce(name = '')",
							"get absolute()",
							"makeAbsolute(parent)",
							"MutablePath",
							" (text, ...args) =>",
							"text : text =>",
							"toString(sep = ' ', partToStr = MutablePath.partToString, childrenStr = MutablePath.CHILDREN_GLYPH + CHILDREN_SPACE)",
							" text =>",
							"text : (text, ...c) =>",
							"pad = (s, n = 1) =>",
							"MutablePath",
							"existsIn(root)",
							"split(pred)",
							"pred = (part, index) =>",
							"relativeTo(other = [])",
							"(part, i) =>",
							"slice(start = 0, end = this.length)",
							"MutablePath",
							"ctor",
							"splice(start = 0, remove = this.length, ...insert)",
							"push(...args)",
							"pop(n = 1)",
							"unshift(...args)",
							"shift(n = 1)",
							"concat(a)",
							"ctor",
							"map(fn)",
							"ctor",
							"filter(fn)",
							"ctor",
							"at(i)",
							"predicate = (p, i) =>",
							"MutablePath",
							"toArray(skip = true, n = 1)",
							"MutablePath",
							"equals(other = [])",
							"get parent()",
							"t = p =>",
							"abort = () =>",
							"set = v =>",
							"ignore = () =>",
							"static compare(a, b)",
							" (a, b) =>",
							"MutablePath",
							"MutablePath",
							" () =>",
							" () =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAABRBwAARGVyZWZlcmVuY2VFcnJvcihvYmplY3QsIG1lbWJlciwgcG9zLCBwcmV2LCBsb2NhdG9yKQogIGZyYW1lID0+CiAgZnJhbWUgPT4KTXV0YWJsZVBhdGgKRGVyZWZlcmVuY2VFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCklzQ2hpbGRyZW4gPSBhID0+Ck11dGFibGVQYXRoCiAgIGFyZ3MgPT4KICAgKGEsIHApID0+CiAgc3RhdGljIGVxdWFscyhhLCBiKQpNdXRhYmxlUGF0aAogIHN0YXRpYyBpc0NoaWxkcmVuKGFyZykKICBjb25zdHJ1Y3RvcihwID0gW10sIG9wdHMgPSB7fSkKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHBhcnRNYXRjaGVyKG9iaiwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIGlzTWVtYmVyTmFtZShuYW1lLCBvdXQgPSB7fSkKICBzdGF0aWMgcGFyc2UocGF0aCwgb3V0LCBzZXBhcmF0b3IgPSAnLicpCiAgYyA9ICh0ZXh0LCBjID0gMzMsIGIgPSAwKSA9PgooW25hbWUsIHZhbHVlXSkgPT4KICBjbG9uZSgpCiAgZ2V0IHNpemUoKQogIHJpZ2h0KG4gPSAxKQogIGxlZnQobiA9IDEpCiAgdXAobiA9IDEpCiAgZG93biguLi5hcmdzKQogIGJvdHRvbShvYmosIG5vVGhyb3cgPSBmYWxzZSkKICBudGhDaGlsZChpKQogIGRpZmYob3RoZXIpCiAgZ2V0IGxhc3RJZCgpCiAgZ2V0IGxhc3QoKQogIGdldCBmaXJzdCgpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgcHJldlNpYmxpbmcoKQogIGdldCBwYXJlbnQoKQogIGdldCBwYXJlbnROb2RlKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgZ2V0IGRlcHRoKCkKICBzdGF0aWMgY29tcGFyZU9iaihvYmosIG90aGVyKQogIGFwcGx5KG9iaiwgbm9UaHJvdykKICAgKGEsIGkpID0+CihlLCBpLCBhKSA9PgogIGNoaWxkID0+CiAgdG9Tb3VyY2Uob3B0cyA9IHt9KQogIGl0ZW0gPT4KICBwID0+CiAgdG9Db2RlKG5hbWUpCihhY2MsIHBhcnQpID0+CiAgdG9SZWR1Y2UobmFtZSA9ICcnKQogIGdldCBhYnNvbHV0ZSgpCiAgbWFrZUFic29sdXRlKHBhcmVudCkKTXV0YWJsZVBhdGgKICAgKHRleHQsIC4uLmFyZ3MpID0+CiAgdGV4dCA6IHRleHQgPT4KICB0b1N0cmluZyhzZXAgPSAnICcsIHBhcnRUb1N0ciA9IE11dGFibGVQYXRoLnBhcnRUb1N0cmluZywgY2hpbGRyZW5TdHIgPSBNdXRhYmxlUGF0aC5DSElMRFJFTl9HTFlQSCArIENISUxEUkVOX1NQQUNFKQogICB0ZXh0ID0+CiAgdGV4dCA6ICh0ZXh0LCAuLi5jKSA9PgogIHBhZCA9IChzLCBuID0gMSkgPT4KTXV0YWJsZVBhdGgKICBleGlzdHNJbihyb290KQogIHNwbGl0KHByZWQpCiAgcHJlZCA9IChwYXJ0LCBpbmRleCkgPT4KICByZWxhdGl2ZVRvKG90aGVyID0gW10pCihwYXJ0LCBpKSA9PgogIHNsaWNlKHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpCk11dGFibGVQYXRoCiAgY3RvcgogIHNwbGljZShzdGFydCA9IDAsIHJlbW92ZSA9IHRoaXMubGVuZ3RoLCAuLi5pbnNlcnQpCiAgcHVzaCguLi5hcmdzKQogIHBvcChuID0gMSkKICB1bnNoaWZ0KC4uLmFyZ3MpCiAgc2hpZnQobiA9IDEpCiAgY29uY2F0KGEpCiAgY3RvcgogIG1hcChmbikKICBjdG9yCiAgZmlsdGVyKGZuKQogIGN0b3IKICBhdChpKQogIHByZWRpY2F0ZSA9IChwLCBpKSA9PgpNdXRhYmxlUGF0aAogIHRvQXJyYXkoc2tpcCA9IHRydWUsIG4gPSAxKQpNdXRhYmxlUGF0aAogIGVxdWFscyhvdGhlciA9IFtdKQogIGdldCBwYXJlbnQoKQogIHQgPSBwID0+CiAgYWJvcnQgPSAoKSA9PgogIHNldCA9IHYgPT4KICBpZ25vcmUgPSAoKSA9PgogIHN0YXRpYyBjb21wYXJlKGEsIGIpCiAgIChhLCBiKSA9PgpNdXRhYmxlUGF0aApNdXRhYmxlUGF0aAogICAoKSA9PgogICAoKSA9PgAAAAAAAAAAUQcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFEHAABEZXJlZmVyZW5jZUVycm9yKG9iamVjdCwgbWVtYmVyLCBwb3MsIHByZXYsIGxvY2F0b3IpCiAgZnJhbWUgPT4KICBmcmFtZSA9PgpNdXRhYmxlUGF0aApEZXJlZmVyZW5jZUVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkKSXNDaGlsZHJlbiA9IGEgPT4KTXV0YWJsZVBhdGgKICAgYXJncyA9PgogICAoYSwgcCkgPT4KICBzdGF0aWMgZXF1YWxzKGEsIGIpCk11dGFibGVQYXRoCiAgc3RhdGljIGlzQ2hpbGRyZW4oYXJnKQogIGNvbnN0cnVjdG9yKHAgPSBbXSwgb3B0cyA9IHt9KQogIHN0YXRpYyBtYXRjaE9iaih0YWdOYW1lLCBhdHRyX29yX2luZGV4LCB0YWdGaWVsZCA9ICd0YWdOYW1lJykKICBzdGF0aWMgcGFydE1hdGNoZXIob2JqLCB0YWdGaWVsZCA9ICd0YWdOYW1lJykKICBzdGF0aWMgaXNNZW1iZXJOYW1lKG5hbWUsIG91dCA9IHt9KQogIHN0YXRpYyBwYXJzZShwYXRoLCBvdXQsIHNlcGFyYXRvciA9ICcuJykKICBjID0gKHRleHQsIGMgPSAzMywgYiA9IDApID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIGNsb25lKCkKICBnZXQgc2l6ZSgpCiAgcmlnaHQobiA9IDEpCiAgbGVmdChuID0gMSkKICB1cChuID0gMSkKICBkb3duKC4uLmFyZ3MpCiAgYm90dG9tKG9iaiwgbm9UaHJvdyA9IGZhbHNlKQogIG50aENoaWxkKGkpCiAgZGlmZihvdGhlcikKICBnZXQgbGFzdElkKCkKICBnZXQgbGFzdCgpCiAgZ2V0IGZpcnN0KCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2U2libGluZygpCiAgZ2V0IHBhcmVudCgpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgZGVwdGgoKQogIHN0YXRpYyBjb21wYXJlT2JqKG9iaiwgb3RoZXIpCiAgYXBwbHkob2JqLCBub1Rocm93KQogICAoYSwgaSkgPT4KKGUsIGksIGEpID0+CiAgY2hpbGQgPT4KICB0b1NvdXJjZShvcHRzID0ge30pCiAgaXRlbSA9PgogIHAgPT4KICB0b0NvZGUobmFtZSkKKGFjYywgcGFydCkgPT4KICB0b1JlZHVjZShuYW1lID0gJycpCiAgZ2V0IGFic29sdXRlKCkKICBtYWtlQWJzb2x1dGUocGFyZW50KQpNdXRhYmxlUGF0aAogICAodGV4dCwgLi4uYXJncykgPT4KICB0ZXh0IDogdGV4dCA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJywgcGFydFRvU3RyID0gTXV0YWJsZVBhdGgucGFydFRvU3RyaW5nLCBjaGlsZHJlblN0ciA9IE11dGFibGVQYXRoLkNISUxEUkVOX0dMWVBIICsgQ0hJTERSRU5fU1BBQ0UpCiAgIHRleHQgPT4KICB0ZXh0IDogKHRleHQsIC4uLmMpID0+CiAgcGFkID0gKHMsIG4gPSAxKSA9PgpNdXRhYmxlUGF0aAogIGV4aXN0c0luKHJvb3QpCiAgc3BsaXQocHJlZCkKICBwcmVkID0gKHBhcnQsIGluZGV4KSA9PgogIHJlbGF0aXZlVG8ob3RoZXIgPSBbXSkKKHBhcnQsIGkpID0+CiAgc2xpY2Uoc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aCkKTXV0YWJsZVBhdGgKICBjdG9yCiAgc3BsaWNlKHN0YXJ0ID0gMCwgcmVtb3ZlID0gdGhpcy5sZW5ndGgsIC4uLmluc2VydCkKICBwdXNoKC4uLmFyZ3MpCiAgcG9wKG4gPSAxKQogIHVuc2hpZnQoLi4uYXJncykKICBzaGlmdChuID0gMSkKICBjb25jYXQoYSkKICBjdG9yCiAgbWFwKGZuKQogIGN0b3IKICBmaWx0ZXIoZm4pCiAgY3RvcgogIGF0KGkpCiAgcHJlZGljYXRlID0gKHAsIGkpID0+Ck11dGFibGVQYXRoCiAgdG9BcnJheShza2lwID0gdHJ1ZSwgbiA9IDEpCk11dGFibGVQYXRoCiAgZXF1YWxzKG90aGVyID0gW10pCiAgZ2V0IHBhcmVudCgpCiAgdCA9IHAgPT4KICBhYm9ydCA9ICgpID0+CiAgc2V0ID0gdiA9PgogIGlnbm9yZSA9ICgpID0+CiAgc3RhdGljIGNvbXBhcmUoYSwgYikKICAgKGEsIGIpID0+Ck11dGFibGVQYXRoCk11dGFibGVQYXRoCiAgICgpID0+CiAgICgpID0+AAAAAAAAAABRBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUQcAAERlcmVmZXJlbmNlRXJyb3Iob2JqZWN0LCBtZW1iZXIsIHBvcywgcHJldiwgbG9jYXRvcikKICBmcmFtZSA9PgogIGZyYW1lID0+Ck11dGFibGVQYXRoCkRlcmVmZXJlbmNlRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKQpJc0NoaWxkcmVuID0gYSA9PgpNdXRhYmxlUGF0aAogICBhcmdzID0+CiAgIChhLCBwKSA9PgogIHN0YXRpYyBlcXVhbHMoYSwgYikKTXV0YWJsZVBhdGgKICBzdGF0aWMgaXNDaGlsZHJlbihhcmcpCiAgY29uc3RydWN0b3IocCA9IFtdLCBvcHRzID0ge30pCiAgc3RhdGljIG1hdGNoT2JqKHRhZ05hbWUsIGF0dHJfb3JfaW5kZXgsIHRhZ0ZpZWxkID0gJ3RhZ05hbWUnKQogIHN0YXRpYyBwYXJ0TWF0Y2hlcihvYmosIHRhZ0ZpZWxkID0gJ3RhZ05hbWUnKQogIHN0YXRpYyBpc01lbWJlck5hbWUobmFtZSwgb3V0ID0ge30pCiAgc3RhdGljIHBhcnNlKHBhdGgsIG91dCwgc2VwYXJhdG9yID0gJy4nKQogIGMgPSAodGV4dCwgYyA9IDMzLCBiID0gMCkgPT4KKFtuYW1lLCB2YWx1ZV0pID0+CiAgY2xvbmUoKQogIGdldCBzaXplKCkKICByaWdodChuID0gMSkKICBsZWZ0KG4gPSAxKQogIHVwKG4gPSAxKQogIGRvd24oLi4uYXJncykKICBib3R0b20ob2JqLCBub1Rocm93ID0gZmFsc2UpCiAgbnRoQ2hpbGQoaSkKICBkaWZmKG90aGVyKQogIGdldCBsYXN0SWQoKQogIGdldCBsYXN0KCkKICBnZXQgZmlyc3QoKQogIGdldCBuZXh0U2libGluZygpCiAgZ2V0IHByZXZTaWJsaW5nKCkKICBnZXQgcGFyZW50KCkKICBnZXQgcGFyZW50Tm9kZSgpCiAgZ2V0IGZpcnN0Q2hpbGQoKQogIGdldCBsYXN0Q2hpbGQoKQogIGdldCBkZXB0aCgpCiAgc3RhdGljIGNvbXBhcmVPYmoob2JqLCBvdGhlcikKICBhcHBseShvYmosIG5vVGhyb3cpCiAgIChhLCBpKSA9PgooZSwgaSwgYSkgPT4KICBjaGlsZCA9PgogIHRvU291cmNlKG9wdHMgPSB7fSkKICBpdGVtID0+CiAgcCA9PgogIHRvQ29kZShuYW1lKQooYWNjLCBwYXJ0KSA9PgogIHRvUmVkdWNlKG5hbWUgPSAnJykKICBnZXQgYWJzb2x1dGUoKQogIG1ha2VBYnNvbHV0ZShwYXJlbnQpCk11dGFibGVQYXRoCiAgICh0ZXh0LCAuLi5hcmdzKSA9PgogIHRleHQgOiB0ZXh0ID0+CiAgdG9TdHJpbmcoc2VwID0gJyAnLCBwYXJ0VG9TdHIgPSBNdXRhYmxlUGF0aC5wYXJ0VG9TdHJpbmcsIGNoaWxkcmVuU3RyID0gTXV0YWJsZVBhdGguQ0hJTERSRU5fR0xZUEggKyBDSElMRFJFTl9TUEFDRSkKICAgdGV4dCA9PgogIHRleHQgOiAodGV4dCwgLi4uYykgPT4KICBwYWQgPSAocywgbiA9IDEpID0+Ck11dGFibGVQYXRoCiAgZXhpc3RzSW4ocm9vdCkKICBzcGxpdChwcmVkKQogIHByZWQgPSAocGFydCwgaW5kZXgpID0+CiAgcmVsYXRpdmVUbyhvdGhlciA9IFtdKQoocGFydCwgaSkgPT4KICBzbGljZShzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQpNdXRhYmxlUGF0aAogIGN0b3IKICBzcGxpY2Uoc3RhcnQgPSAwLCByZW1vdmUgPSB0aGlzLmxlbmd0aCwgLi4uaW5zZXJ0KQogIHB1c2goLi4uYXJncykKICBwb3AobiA9IDEpCiAgdW5zaGlmdCguLi5hcmdzKQogIHNoaWZ0KG4gPSAxKQogIGNvbmNhdChhKQogIGN0b3IKICBtYXAoZm4pCiAgY3RvcgogIGZpbHRlcihmbikKICBjdG9yCiAgYXQoaSkKICBwcmVkaWNhdGUgPSAocCwgaSkgPT4KTXV0YWJsZVBhdGgKICB0b0FycmF5KHNraXAgPSB0cnVlLCBuID0gMSkKTXV0YWJsZVBhdGgKICBlcXVhbHMob3RoZXIgPSBbXSkKICBnZXQgcGFyZW50KCkKICB0ID0gcCA9PgogIGFib3J0ID0gKCkgPT4KICBzZXQgPSB2ID0+CiAgaWdub3JlID0gKCkgPT4KICBzdGF0aWMgY29tcGFyZShhLCBiKQogICAoYSwgYikgPT4KTXV0YWJsZVBhdGgKTXV0YWJsZVBhdGgKICAgKCkgPT4KICAgKCkgPT4AAAAAAAAAAFEHAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "main.js",
			"settings":
			{
				"buffer_size": 96845,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					689,
					1,
					"insert",
					{
						"characters": ",isoDate"
					},
					"CAAAABgeAAAAAAAAGR4AAAAAAAAAAAAAGR4AAAAAAAAaHgAAAAAAAAAAAAAaHgAAAAAAABseAAAAAAAAAAAAABseAAAAAAAAHB4AAAAAAAAAAAAAHB4AAAAAAAAdHgAAAAAAAAAAAAAdHgAAAAAAAB4eAAAAAAAAAAAAAB4eAAAAAAAAHx4AAAAAAAAAAAAAHx4AAAAAAAAgHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGB4AAAAAAAAYHgAAAAAAAAAAAAAAAPC/"
				],
				[
					747,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAyuwAAAAAAADK7AAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 39474,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					17,
					2,
					"right_delete",
					null,
					"AgAAAAwDAAAAAAAADAMAAAAAAAAIAAAAY2FsbE1haW4MAwAAAAAAAAwDAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAADAMAAAAAAAAUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					2,
					"right_delete",
					null,
					"AgAAAHp3AAAAAAAAencAAAAAAAAGAAAAZXF1YWxzencAAAAAAAB6dwAAAAAAAAEAAAAo",
					"AQAAAAAAAAABAAAAencAAAAAAACAdwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAIN3AAAAAAAAg3cAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAhHcAAAAAAACEdwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIN3AAAAAAAAhHcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAg3cAAAAAAACDdwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAAIN3AAAAAAAAg3cAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAhHcAAAAAAACEdwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " ==="
					},
					"BAAAAIN3AAAAAAAAhHcAAAAAAAAAAAAAhHcAAAAAAACFdwAAAAAAAAAAAACFdwAAAAAAAIZ3AAAAAAAAAAAAAIZ3AAAAAAAAh3cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAg3cAAAAAAACDdwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"right_delete",
					null,
					"AQAAAJJ3AAAAAAAAkncAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAkncAAAAAAACSdwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					2,
					"right_delete",
					null,
					"AgAAAA0DAAAAAAAADQMAAAAAAAAGAAAAZXF1YWxzDQMAAAAAAAANAwAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAADQMAAAAAAAATAwAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					6,
					"right_delete",
					null,
					"BgAAAA0DAAAAAAAADQMAAAAAAAABAAAAIA0DAAAAAAAADQMAAAAAAAABAAAAZQ0DAAAAAAAADQMAAAAAAAABAAAAeA0DAAAAAAAADQMAAAAAAAABAAAAaQ0DAAAAAAAADQMAAAAAAAABAAAAdA0DAAAAAAAADQMAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAADQMAAAAAAAANAwAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "process."
					},
					"CAAAAFozAAAAAAAAWzMAAAAAAAAAAAAAWzMAAAAAAABcMwAAAAAAAAAAAABcMwAAAAAAAF0zAAAAAAAAAAAAAF0zAAAAAAAAXjMAAAAAAAAAAAAAXjMAAAAAAABfMwAAAAAAAAAAAABfMwAAAAAAAGAzAAAAAAAAAAAAAGAzAAAAAAAAYTMAAAAAAAAAAAAAYTMAAAAAAABiMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWjMAAAAAAABaMwAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					2,
					"right_delete",
					null,
					"AgAAAA4DAAAAAAAADgMAAAAAAAAHAAAAZ2V0QXJncw4DAAAAAAAADgMAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAADgMAAAAAAAAVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"right_delete",
					null,
					"AQAAABYoAAAAAAAAFigAAAAAAAAKAAAAICAgIHV0aWwsCg",
					"AQAAAAAAAAABAAAAFigAAAAAAAAgKAAAAAAAAAAAAAAAAAAA"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "process."
					},
					"CAAAACWaAAAAAAAAJpoAAAAAAAAAAAAAJpoAAAAAAAAnmgAAAAAAAAAAAAAnmgAAAAAAACiaAAAAAAAAAAAAACiaAAAAAAAAKZoAAAAAAAAAAAAAKZoAAAAAAAAqmgAAAAAAAAAAAAAqmgAAAAAAACuaAAAAAAAAAAAAACuaAAAAAAAALJoAAAAAAAAAAAAALJoAAAAAAAAtmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJZoAAAAAAAAlmgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": ",."
					},
					"AgAAAOwgAAAAAAAA7SAAAAAAAAAAAAAA7SAAAAAAAADuIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7CAAAAAAAADsIAAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"left_delete",
					null,
					"AQAAAO0gAAAAAAAA7SAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA7iAAAAAAAADuIAAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "className"
					},
					"CQAAAO0gAAAAAAAA7iAAAAAAAAAAAAAA7iAAAAAAAADvIAAAAAAAAAAAAADvIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAAA8SAAAAAAAAAAAAAA8SAAAAAAAADyIAAAAAAAAAAAAADyIAAAAAAAAPMgAAAAAAAAAAAAAPMgAAAAAAAA9CAAAAAAAAAAAAAA9CAAAAAAAAD1IAAAAAAAAAAAAAD1IAAAAAAAAPYgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7SAAAAAAAADtIAAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCmgAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgeyBFYWdsZVNWR1JlbmRlcmVyLCBTY2hlbWF0aWNSZW5kZXJlciwgQm9hcmRSZW5kZXJlciwgTGlicmFyeVJlbmRlcmVyLCBFYWdsZU5vZGVMaXN0LCB1c2VUcmtsLCBSQUQyREVHLCBERUcyUkFELCBWRVJUSUNBTCwgSE9SSVpPTlRBTCwgSE9SSVpPTlRBTF9WRVJUSUNBTCwgREVCVUcsIGxvZywgc2V0RGVidWcsIFBpblNpemVzLCBFc2NhcGVDbGFzc05hbWUsIFVuZXNjYXBlQ2xhc3NOYW1lLCBMYXllclRvQ2xhc3MsIEVsZW1lbnRUb0NsYXNzLCBDbGFtcEFuZ2xlLCBBbGlnbm1lbnRBbmdsZSwgTWFrZVJvdGF0aW9uLCBFYWdsZUFsaWdubWVudHMsIEFsaWdubWVudCwgU1ZHQWxpZ25tZW50cywgQWxpZ25tZW50QXR0cnMsIFJvdGF0ZVRyYW5zZm9ybWF0aW9uLCBMYXllckF0dHJpYnV0ZXMsIEludmVydFksIFBvbGFyVG9DYXJ0ZXNpYW4sIENhcnRlc2lhblRvUG9sYXIsIFJlbmRlckFyYywgQ2FsY3VsYXRlQXJjUmFkaXVzLCBMaW5lc1RvUGF0aCwgTWFrZUNvb3JkVHJhbnNmb3JtZXIsIHVzZUF0dHJpYnV0ZXMsIEVhZ2xlRG9jdW1lbnQsIEVhZ2xlUmVmZXJlbmNlLCBFYWdsZVJlZiwgbWFrZUVhZ2xlTm9kZSwgRWFnbGVOb2RlLCBSZW5kZXJlciwgRWFnbGVQcm9qZWN0LCBFYWdsZUVsZW1lbnQsIG1ha2VFYWdsZUVsZW1lbnQsIEVhZ2xlRWxlbWVudFByb3h5LCBFYWdsZU5vZGVNYXAsIEltbXV0YWJsZVBhdGgsIERlcmVmZXJlbmNlRXJyb3IgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7YWJicmV2aWF0ZSwgICAgZ2V0TWV0aG9kcywgbWFwIH1mcm9tICcuL2xpYi9taXNjLmpzJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICcuL2xpYi9kZWVwLmpzJzsKaW1wb3J0ICogYXMgcGF0aCBmcm9tICcuL2xpYi9wYXRoLmpzJzsKaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBFdmVudFRhcmdldCwgZXZlbnRpZnkgfSBmcm9tICcuL2xpYi9ldmVudHMuanMnOwppbXBvcnQgcmVxdWlyZSBmcm9tICdyZXF1aXJlJzsKaW1wb3J0IHsgTGluZUxpc3QsIFBvaW50LCBDaXJjbGUsIFJlY3QsIFNpemUsIExpbmUsIFRyYW5zZm9ybWF0aW9uTGlzdCwgUm90YXRpb24sIFRyYW5zbGF0aW9uLCBTY2FsaW5nLCBNYXRyaXgsIEJCb3ggfSBmcm9tICcuL2xpYi9nZW9tLmpzJzsKaW1wb3J0IHsgQ29uc29sZSB9IGZyb20gJ2NvbnNvbGUnOwppbXBvcnQgUkVQTCBmcm9tICcuL3F1aWNranMvcWpzLW1vZHVsZXMvbGliL3JlcGwuanMnOwppbXBvcnQgeyBCaW5hcnlUcmVlLCBCdWNrZXRTdG9yZSwgQnVja2V0TWFwLCBDb21wb25lbnRNYXAsIENvbXBvc2l0ZU1hcCwgRGVxdWUsIEVudW0sIEhhc2hMaXN0LCBNdWx0aW1hcCwgU2hhc2gsIFNvcnRlZE1hcCwgSGFzaE11bHRpbWFwLCBNdWx0aUJpTWFwLCBNdWx0aUtleU1hcCwgRGVuc2VTcGF0aWFsSGFzaDJELCBTcGF0aWFsSGFzaDJELCBIYXNoTWFwLCBTcGF0aWFsSCwgU3BhdGlhbEhhc2gsIFNwYXRpYWxIYXNoTWFwLCBCb3hIYXNoIH0gZnJvbSAnLi9saWIvY29udGFpbmVyLmpzJzsKaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgeyBQb2ludGVyIH0gZnJvbSAnLi9saWIvcG9pbnRlci5qcyc7CmltcG9ydCB7IHJlYWQgYXMgZnJvbVhNTCwgd3JpdGUgYXMgd3JpdGVYTUwgfSBmcm9tICd4bWwnOwppbXBvcnQgaW5zcGVjdCBmcm9tICcuL2xpYi9vYmplY3RJbnNwZWN0LmpzJzsKaW1wb3J0IHsgSWZEZWJ1ZywgTG9nSWZEZWJ1ZywgUmVhZEZkLCBSZWFkRmlsZSwgTG9hZEhpc3RvcnksIFJlYWRKU09OLCBSZWFkWE1MLCBNYXBGaWxlLCBXcml0ZUZpbGUsIFdyaXRlSlNPTiwgV3JpdGVYTUwsIFJlYWRCSlNPTiwgV3JpdGVCSlNPTiwgRGlySXRlcmF0b3IsIFJlY3Vyc2l2ZURpckl0ZXJhdG9yLCBSZWFkRGlyUmVjdXJzaXZlLCBGaWx0ZXIsIEZpbHRlckltYWdlcywgU29ydEZpbGVzLCBTdGF0RmlsZXMsIEZkUmVhZGVyLCBDb3B5VG9DbGlwYm9hcmQsIFJlYWRDYWxsYmFjaywgTG9nQ2FsbCwgU3Bhd24sIEZldGNoVVJMIH0gZnJvbSAnLi9pby1oZWxwZXJzLmpzJzsKaW1wb3J0IHsgR2V0RXhwb25lbnQsIEdldE1hbnRpc3NhLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlIH0gZnJvbSAnLi9saWIvZWRhL3ZhbHVlcy5qcyc7CmltcG9ydCB7IEdldE11bHRpcGxpZXJzLCBHZXRGYWN0b3IsIEdldENvbG9yQmFuZHMsIFBhcnRTY2FsZXMsIGRpZ2l0MmNvbG9yIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgQ2lyY3VpdEpTIGZyb20gJy4vbGliL2VkYS9jaXJjdWl0anMuanMnOwppbXBvcnQgeyBjbGFzc05hbWUsIGRlZmluZSwgZXh0ZW5kQXJyYXksIGdldE9wdCwgZ2xvYiwgR0xPQl9CUkFDRSwgaW50ZXJzZWN0LCBpc09iamVjdCwgbWVtb2l6ZSwgcmFuZ2UsIHVuaXF1ZSwgbGF6eVByb3BlcnRpZXMsIGVudHJpZXMsIGlzSlNGdW5jdGlvbiwgd2Vha0Fzc2lnbiB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyBIU0xBLCBpc0hTTEEsIEltbXV0YWJsZUhTTEEsIFJHQkEsIGlzUkdCQSwgSW1tdXRhYmxlUkdCQSwgQ29sb3JlZFRleHQgfSBmcm9tICcuL2xpYi9jb2xvci5qcyc7CmltcG9ydCB7IHNjaWVudGlmaWMsIG51bTJjb2xvciwgR2V0UGFydHMsIEdldEluc3RhbmNlcywgR2V0UG9zaXRpb25zLCBHZXRFbGVtZW50cyB9IGZyb20gJy4vZWFnbGUtY29tbWFuZHMuanMnOwppbXBvcnQgeyBFZGdlLCBHcmFwaCwgTm9kZSB9IGZyb20gJy4vbGliL2dlb20vZ3JhcGguanMnOwppbXBvcnQgeyBNdXRhYmxlWFBhdGggYXMgWFBhdGgsIHBhcnNlWFBhdGgsIEltbXV0YWJsZVhQYXRoIH0gZnJvbSAnLi9xdWlja2pzL3Fqcy1tb2R1bGVzL2xpYi94cGF0aC5qcyc7CmltcG9ydCB7IFByZWRpY2F0ZSB9IGZyb20gJ3ByZWRpY2F0ZSc7CmltcG9ydCBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnOwppbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IFJlYWN0Q29tcG9uZW50LCBGcmFnbWVudCwgcmVuZGVyLCBoLCBmb3J3YXJkUmVmLCBSZWFjdCwgdG9DaGlsZEFycmF5IH0gZnJvbSAnLi9saWIvZG9tL3ByZWFjdENvbXBvbmVudC5qcyc7CmltcG9ydCB7IFRhYmxlIH0gZnJvbSAnLi9jbGktaGVscGVycy5qcyc7CmltcG9ydCByZW5kZXJUb1N0cmluZyBmcm9tICcuL2xpYi9wcmVhY3QtcmVuZGVyLXRvLXN0cmluZy5qcyc7CmltcG9ydCB7IFByaW1pdGl2ZUNvbXBvbmVudHMsIEVsZW1lbnROYW1lVG9Db21wb25lbnQsIEVsZW1lbnRUb0NvbXBvbmVudCB9IGZyb20gJy4vbGliL2VhZ2xlL2NvbXBvbmVudHMuanMnOwppbXBvcnQgeyBFYWdsZVRvR2VyYmVyLCBHZXJiZXJUb0djb2RlIH0gZnJvbSAnLi9wY2ItY29udmVyc2lvbi5qcyc7CmltcG9ydCB7IEV4ZWNUb29sIH0gZnJvbSAnLi9vcy1oZWxwZXJzLmpzJzsKaW1wb3J0ICogYXMgY29tcG9uZW50cyBmcm9tICcuL2xpYi9lYWdsZS9jb21wb25lbnRzLmpzJzsKCmxldCBjbWRoaXN0OwoKZXh0ZW5kQXJyYXkoKTsKCmZ1bmN0aW9uIEdldEdsb2JhbEZ1bmN0aW9ucygpIHsKICByZXR1cm4gZW50cmllcyhnbG9iYWxUaGlzKQogICAgLmZpbHRlcigoW2ssIHZdKSA9PiBpc0pTRnVuY3Rpb24odikpCiAgICAubWFwKChba10pID0+IGspOwp9CgpmdW5jdGlvbiB0b1hNTChvYmopIHsKICBkZWVwLmZvckVhY2gob2JqLCBhID0+IEFycmF5LmlzQXJyYXkoYS5jaGlsZHJlbikgJiYgYS5jaGlsZHJlbi5sZW5ndGggPT0gMCAmJiBkZWxldGUgYS5jaGlsZHJlbik7CiAgcmV0dXJuIHdyaXRlWE1MKG9iaik7Cn0KCmZ1bmN0aW9uIHJlbmRlclRvWE1MKGNvbXBvbmVudCkgewogIHJldHVybiBmcm9tWE1MKHJlbmRlclRvU3RyaW5nKGNvbXBvbmVudCkpOwp9CgpmdW5jdGlvbiBHZXRGaWxldGltZShmaWxlLCBmaWVsZCA9ICdtdGltZScpIHsKICBpZihBcnJheS5pc0FycmF5KGZpbGUpKSByZXR1cm4gZmlsZS5tYXAoZmlsZSA9PiBbZmlsZSwgR2V0RmlsZXRpbWUoZmlsZSwgZmllbGQpXSk7CiAgbGV0IG1zID0gZnMuc3RhdFN5bmMoZmlsZSk/LltmaWVsZF07CiAgcmV0dXJuIG5ldyBEYXRlKG1zKTsKfQoKZnVuY3Rpb24gRmluZFByb2plY3RzKGRpclB0biA9ICcuLi8qL2VhZ2xlJywgc29ydERpcmVjdGlvbiA9IC0xLCBzb3J0RmllbGQgPSAnbXRpbWUnKSB7CiAgbGV0IGZpbGVzID0gZ2xvYihkaXJQdG4gKyAnLyoue3NjaCxicmR9JywgR0xPQl9CUkFDRSk7CiAgbGV0IGVudHJpZXMgPSBTb3J0RmlsZXMoZmlsZXMsIHNvcnREaXJlY3Rpb24sIHNvcnRGaWVsZCk7CgogIGxldCBuYW1lcyA9IHVuaXF1ZShmaWxlcy5tYXAoZm4gPT4gZm4ucmVwbGFjZSgvXC4oc2NofGJyZCkkL2ksICcnKSkpOwoKICBjb25zdCBtaW5JbmRleCA9IG5hbWUgPT4KICAgIE1hdGgubWluKAogICAgICBlbnRyaWVzLmZpbmRJbmRleChmaWxlID0+IGZpbGUgPT0gbmFtZSArICcuc2NoJyksCiAgICAgIGVudHJpZXMuZmluZEluZGV4KGZpbGUgPT4gZmlsZSA9PSBuYW1lICsgJy5icmQnKQogICAgKTsKICBjb25zdCBoYXNCb3RoID0gbmFtZSA9PiBtaW5JbmRleChuYW1lKSA+PSAwOwoKICByZXR1cm4gbmFtZXMKICAgIC5tYXAobmFtZSA9PiBbbmFtZSwgbWluSW5kZXgobmFtZSldKQogICAgLmZpbHRlcigoW25hbWUsIGluZGV4XSkgPT4gaW5kZXggPj0gMCkKICAgIC5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSkKICAgIC5tYXAoKFtuYW1lLCBpbmRleF0pID0+IG5hbWUpOwp9CgpmdW5jdGlvbiBTb3J0RmlsZXMoZmlsZXMsIGRpcmVjdGlvbiA9IDEsIHN0YXRGaWVsZCA9ICdtdGltZScpIHsKICBpZih0eXBlb2YgZGlyZWN0aW9uID09ICdib29sZWFuJykgZGlyZWN0aW9uID0gZGlyZWN0aW9uID8gMSA6IC0xOwogIHJldHVybiBHZXRGaWxldGltZShmaWxlcywgc3RhdEZpZWxkKQogICAgLnNvcnQoKGEsIGIpID0+IGRpcmVjdGlvbiAqIChhWzFdIC0gYlsxXSkpCiAgICAubWFwKChbZmlsZV0pID0+IGZpbGUpOwp9CgpmdW5jdGlvbiBwaWNrKGl0LCBuID0gMSkgewogIGxldCByZXQgPSBuZXcgQXJyYXkoKTsKCiAgaWYodHlwZW9mIG4gIT0gJ2Z1bmN0aW9uJykgewogICAgbGV0IG51bSA9IG47CiAgICBuID0gaSA9PiBpIDwgbnVtOwogIH0KICBsZXQgaSA9IDA7CiAgZm9yKGkgPSAwOyA7IGkrKykgewogICAgbGV0IHsgZG9uZSwgdmFsdWUgfSA9IGl0Lm5leHQoKTsKICAgIGlmKGRvbmUpIGJyZWFrOwogICAgaWYobihpKSkgewogICAgICByZXQucHVzaCh2YWx1ZSk7CiAgICB9IGVsc2UgYnJlYWs7CiAgfQogIHJldHVybiByZXQ7Cn0KCmZ1bmN0aW9uIGFwcGVuZCh0YWcsIGF0dHJzLCBjaGlsZHJlbiwgcGFyZW50LCBlbGVtZW50KSB7CiAgY29uc29sZS5sb2coJ2FwcGVuZCcsIHsKICAgIHRhZywKICAgIGF0dHJzLAogICAgY2hpbGRyZW4sCiAgICBwYXJlbnQsCiAgICBlbGVtZW50CiAgfSk7CgogIGxldCBvYmo7CiAgb2JqID0geyB0YWdOYW1lOiB0YWcsIGF0dHJpYnV0ZXM6IGF0dHJzLCBjaGlsZHJlbiB9OwoKICBpZihwYXJlbnQpIHBhcmVudC5jaGlsZHJlbi5wdXNoKG9iaik7CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIHJlbmRlcihkb2MsIGZpbGVuYW1lKSB7CiAgaWYoZG9jIGluc3RhbmNlb2YgRWFnbGVQcm9qZWN0KSB7CiAgICByZW5kZXIoZG9jLnNjaGVtYXRpYyk7CiAgICByZW5kZXIoZG9jLmJvYXJkKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGRvYywgUmVhY3RDb21wb25lbnQuYXBwZW5kKTsKICBsZXQgc3RyOwogIGxldCBzdmcgPSByZW5kZXJlci5yZW5kZXIoZG9jKTsKICB0cnkgewogICAgc3RyID0gcmVuZGVyVG9TdHJpbmcoc3ZnKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlKTsKICB9CiAgY29uc29sZS5sb2coJ3JlbmRlcicsIHsgc3RyIH0pOwoKICBsZXQgeG1sID0gZnJvbVhNTChzdHIpOwoKICBmaWxlbmFtZSA/Pz0gcGF0aC5iYXNlbmFtZShkb2MuZmlsZW5hbWUsICcuJyArIGRvYy50eXBlKSArICctJyArIHsgc2NoOiAnc2NoZW1hdGljJywgYnJkOiAnYm9hcmQnLCBsYnI6ICdsaWJyYXJ5JyB9W2RvYy50eXBlXSArICcuc3ZnJzsKCiAgaWYoZmlsZW5hbWUpIHsKICAgIGxldCByZXQ7CiAgICByZXQgPSBXcml0ZUZpbGUoZmlsZW5hbWUsIChzdHIgPSB0b1hNTCh4bWwpKSk7CiAgICBjb25zb2xlLmxvZyhgU2F2aW5nIHRvICcke2ZpbGVuYW1lfScuLi5gLCByZXQpOwogIH0KICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiBDb2xsZWN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpIHsKICByZXR1cm4gWy4uLmRvYy5wYXJ0c10KICAgIC5tYXAoZSA9PiBlLnJhdy5hdHRyaWJ1dGVzKQogICAgLmZpbHRlcihhdHRyID0+ICEoYXR0ci52YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGF0dHIuZGV2aWNlID09PSAnJykgfHwgL15JQy8udGVzdChhdHRyLm5hbWUpKQogICAgLm1hcCgoeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4gKHsKICAgICAgbmFtZSwKICAgICAgZGV2aWNlc2V0LAogICAgICBkZXZpY2UsCiAgICAgIHZhbHVlOiB2YWx1ZSA/PyAnLScKICAgIH0pKTsKfQoKZnVuY3Rpb24gQ29sbGVjdEVsZW1lbnRzKGRvYyA9IHByb2plY3QuYm9hcmQpIHsKICByZXR1cm4gZG9jLmVsZW1lbnRzCiAgICAubWFwKGUgPT4gZS5yYXcuYXR0cmlidXRlcykKICAgIC5tYXAoKHsgbmFtZSwgbGlicmFyeSwgcGFja2FnZTogcGtnLCB2YWx1ZSB9KSA9PiAoewogICAgICBuYW1lLAogICAgICBsaWJyYXJ5LAogICAgICBbJ3BhY2thZ2UnXTogcGtnLAogICAgICB2YWx1ZQogICAgfSkpOwp9CgpmdW5jdGlvbiBDb2xsZWN0UGFydHNFbGVtZW50cyhwcm9qID0gcHJvamVjdCkgewogIHJldHVybiBwcm9qZWN0LmJvYXJkLmVsZW1lbnRzCiAgICAubWFwKGUgPT4gW2UsIHByb2plY3Quc2NoZW1hdGljLnBhcnRzW2UubmFtZV1dKQogICAgLm1hcChhID0+IGEubWFwKGUgPT4gZS5yYXcuYXR0cmlidXRlcykpCiAgICAubWFwKChbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PiB3ZWFrQXNzaWduKGVsZW1lbnQsIHBhcnQpKTsKfQoKZnVuY3Rpb24gTGlzdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKSB7CiAgbGV0IHBhcnRzID0gQ29sbGVjdFBhcnRzKGRvYyk7CiAgbGV0IHZhbHVlTGVuID0gTWF0aC5tYXgoLi4ucGFydHMubWFwKHAgPT4gcC52YWx1ZS5sZW5ndGgpKTsKCiAgcmV0dXJuIHBhcnRzLm1hcCgoeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4gdmFsdWUucGFkU3RhcnQodmFsdWVMZW4pICsgJyAnICsgZGV2aWNlKTsKfQoKZnVuY3Rpb24gU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKSB7CiAgcmV0dXJuIFRhYmxlKAogICAgQ29sbGVjdFBhcnRzKGRvYykubWFwKCh7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PiBbbmFtZSwgZGV2aWNlc2V0LCBkZXZpY2UsIHZhbHVlID8/ICctJ10pLAogICAgWyduYW1lJywgJ2RldmljZXNldCcsICdkZXZpY2UnLCAndmFsdWUnXQogICk7Cn0KCmZ1bmN0aW9uIEVhZ2xlUHJpbnQoZmlsZSwgb3V0cHV0KSB7CiAgb3V0cHV0ID8/PSBNb2RpZnlQYXRoKGZpbGUsIChkaXIsIGJhc2UsIGV4dCkgPT4gW2RpciwgYmFzZSwgZXh0ICsgJy5wZGYnXSk7CiAgbGV0IGFyZ3YgPSBbJy9vcHQvZWFnbGUtNy4yLjAvYmluL2VhZ2xlJywgJy1OLScsICctQycsIGBQUklOVCBsYW5kc2NhcGUgMC44IC0xIC0wIC1jYXB0aW9uIEZJTEUgJyR7b3V0cHV0fScgc2hlZXRzIGFsbCBwYXBlciBhNDsgUVVJVGAsIGZpbGVdOwoKICByZXR1cm4gY2hpbGRfcHJvY2Vzcy5zcGF3bihhcmd2WzBdLCBhcmd2LCB7CiAgICBibG9jazogZmFsc2UKICB9KTsKfQoKZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgbWF4QXJyYXlMZW5ndGg6IDEwMCwKICAgICAgY29sb3JzOiB0cnVlLAogICAgICBkZXB0aDogMTAsCiAgICAgIGNvbXBhY3Q6IDAsCiAgICAgIGN1c3RvbUluc3BlY3Q6IHRydWUKICAgIH0KICB9KTsKCiAgbGV0IGRlYnVnTG9nID0gZnMub3BlblN5bmMoJ2RlYnVnLmxvZycsICdhJyk7CgogIGNvbnN0IGJhc2UgPSBwYXRoLmJhc2VuYW1lKF9fZmlsZW5hbWUsIHBhdGguZXh0bmFtZShfX2ZpbGVuYW1lKSk7CiAgY29uc3QgaGlzdGZpbGUgPSBgLiR7YmFzZX0taGlzdG9yeWA7CgogIGxldCBwYXJhbXMgPSBnZXRPcHQoCiAgICB7CiAgICAgIGRlYnVnOiBbZmFsc2UsIG51bGwsICd4J10sCiAgICAgICdvdXRwdXQtZGlyJzogW3RydWUsIG51bGwsICdkJ10sCiAgICAgICdAJzogJ2lucHV0JwogICAgfSwKICAgIGFyZ3MKICApOwoKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsgY29tcG9uZW50cywgQ29uc29sZSwgR2V0R2xvYmFsRnVuY3Rpb25zICxjbGFzc05hbWV9KTsKCiAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7CiAgICBjaGlsZF9wcm9jZXNzLAogICAgU2F2ZUxpYnJhcmllcywKICAgIEVhZ2xlU1ZHUmVuZGVyZXIsCiAgICBTY2hlbWF0aWNSZW5kZXJlciwKICAgIEJvYXJkUmVuZGVyZXIsCiAgICBMaWJyYXJ5UmVuZGVyZXIsCiAgICBFYWdsZU5vZGVMaXN0LAogICAgdXNlVHJrbCwKICAgIFJBRDJERUcsCiAgICBERUcyUkFELAogICAgVkVSVElDQUwsCiAgICBIT1JJWk9OVEFMLAogICAgSE9SSVpPTlRBTF9WRVJUSUNBTCwKICAgIERFQlVHLAogICAgc2V0RGVidWcsCiAgICBQaW5TaXplcywKICAgIEVzY2FwZUNsYXNzTmFtZSwKICAgIFVuZXNjYXBlQ2xhc3NOYW1lLAogICAgTGF5ZXJUb0NsYXNzLAogICAgRWxlbWVudFRvQ2xhc3MsCiAgICBDbGFtcEFuZ2xlLAogICAgQWxpZ25tZW50QW5nbGUsCiAgICBNYWtlUm90YXRpb24sCiAgICBFYWdsZUFsaWdubWVudHMsCiAgICBBbGlnbm1lbnQsCiAgICBTVkdBbGlnbm1lbnRzLAogICAgQWxpZ25tZW50QXR0cnMsCiAgICBSb3RhdGVUcmFuc2Zvcm1hdGlvbiwKICAgIExheWVyQXR0cmlidXRlcywKICAgIEludmVydFksCiAgICBQb2xhclRvQ2FydGVzaWFuLAogICAgQ2FydGVzaWFuVG9Qb2xhciwKICAgIFJlbmRlckFyYywKICAgIENhbGN1bGF0ZUFyY1JhZGl1cywKICAgIExpbmVzVG9QYXRoLAogICAgTWFrZUNvb3JkVHJhbnNmb3JtZXIsCiAgICB1c2VBdHRyaWJ1dGVzLAogICAgRWFnbGVEb2N1bWVudCwKICAgIEVhZ2xlUmVmZXJlbmNlLAogICAgRWFnbGVSZWYsCiAgICBtYWtlRWFnbGVOb2RlLAogICAgRWFnbGVOb2RlLAogICAgUmVuZGVyZXIsCiAgICBFYWdsZVByb2plY3QsCiAgICBFYWdsZUVsZW1lbnQsCiAgICBtYWtlRWFnbGVFbGVtZW50LAogICAgRWFnbGVFbGVtZW50UHJveHksCiAgICBFYWdsZU5vZGVNYXAsCiAgICBJbW11dGFibGVQYXRoLAogICAgRGVyZWZlcmVuY2VFcnJvciwKICAgIEdldE5hbWVzLAogICAgR2V0QnlOYW1lLAogICAgQ29ycmVsYXRlU2NoZW1hdGljQW5kQm9hcmQsCiAgICBMb2FkSGlzdG9yeSwKICAgIElmRGVidWcsCiAgICBMb2dJZkRlYnVnLAogICAgUmVhZEZkLAogICAgUmVhZEZpbGUsCiAgICBMb2FkSGlzdG9yeSwKICAgIFJlYWRKU09OLAogICAgUmVhZFhNTCwKICAgIE1hcEZpbGUsCiAgICBXcml0ZUZpbGUsCiAgICBXcml0ZUpTT04sCiAgICBXcml0ZVhNTCwKICAgIFJlYWRCSlNPTiwKICAgIFdyaXRlQkpTT04sCiAgICBEaXJJdGVyYXRvciwKICAgIFJlY3Vyc2l2ZURpckl0ZXJhdG9yLAogICAgUmVhZERpclJlY3Vyc2l2ZSwKICAgIEZpbHRlciwKICAgIEZpbHRlckltYWdlcywKICAgIFNvcnRGaWxlcywKICAgIFN0YXRGaWxlcywKICAgIEZkUmVhZGVyLAogICAgQ29weVRvQ2xpcGJvYXJkLAogICAgUmVhZENhbGxiYWNrLAogICAgTG9nQ2FsbCwKICAgIFNwYXduLAogICAgRmV0Y2hVUkwsCiAgICBDb3B5VG9DbGlwYm9hcmQsCiAgICBDaXJjdWl0SlMsCiAgICBQdXRSb3dzQ29sdW1ucywKICAgIEdldExpYnJhcnksCiAgICBFbGVtZW50TmFtZSwKICAgIEdldFVzZWRQYWNrYWdlcywKICAgIEdldFBhY2thZ2VQaXRjaCwKICAgIFBhY2thZ2UyQ2lyY3VpdCwKICAgIEdldFJvdGF0aW9uLAogICAgRWFnbGUyQ2lyY3VpdCwKICAgIEVhZ2xlMkNpcmN1aXRKUywKICAgIE1vZGlmeVBhdGgsCiAgICBBcHBlbmRUb0ZpbGVuYW1lLAogICAgU2V0U1ZHQmFja2dyb3VuZCwKICAgIFNWR0ZpbGVTZXRCYWNrZ3JvdW5kLAogICAgU1ZHUmVzYXZlLAogICAgRmlsZUZ1bmN0aW9uLAogICAgdG9OdW1iZXIobikgewogICAgICByZXR1cm4gaXNOYU4oK24pID8gbiA6ICtuOwogICAgfSwKICAgIHBhdGgsCiAgICBFdmVudEVtaXR0ZXIsCiAgICBFdmVudFRhcmdldCwKICAgIGV2ZW50aWZ5LAogICAgR3JhcGgsCiAgICBFZGdlLAogICAgTm9kZSwKICAgIHhtbCwKICAgIFhQYXRoLAogICAgSW1tdXRhYmxlWFBhdGgsCiAgICBwYXJzZVhQYXRoLAogICAgUHJlZGljYXRlLAogICAgcmVuZGVyLAogICAgcGljaywKICAgIGZyb21YTUwsCiAgICB0b1hNTCwKICAgIHdyaXRlWE1MCiAgfSk7CiAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7CiAgICBHZXRFeHBvbmVudCwKICAgIEdldE1hbnRpc3NhLAogICAgVmFsdWVUb051bWJlciwKICAgIE51bWJlclRvVmFsdWUsCiAgICBHZXRNdWx0aXBsaWVycywKICAgIEdldEZhY3RvciwKICAgIEdldENvbG9yQmFuZHMsCiAgICBVcGRhdGVNZWFzdXJlcywKICAgIEFsaWduSXRlbSwKICAgIEFsaWduQWxsLAogICAgc2NpZW50aWZpYywKICAgIG51bTJjb2xvciwKICAgIEdldFBhcnRzLAogICAgR2V0SW5zdGFuY2VzLAogICAgR2V0UG9zaXRpb25zLAogICAgR2V0RWxlbWVudHMsCiAgICBHZXRTaGVldHMKICB9KTsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIGRlZmluZSwKICAgIGlzT2JqZWN0LAogICAgbWVtb2l6ZSwKICAgIHVuaXF1ZSwKICAgIEZpbmRQcm9qZWN0cywKICAgIFRhYmxlLAogICAgQ29sbGVjdFBhcnRzLAogICAgTGlzdFBhcnRzLAogICAgU2hvd1BhcnRzLAogICAgQ29sbGVjdEVsZW1lbnRzLAogICAgQ29sbGVjdFBhcnRzRWxlbWVudHMsCiAgICBFYWdsZVByaW50LAogICAgc2V0RGVidWcKICB9KTsKCiAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7CiAgICBoLAogICAgZm9yd2FyZFJlZiwKICAgIEZyYWdtZW50LAogICAgUmVhY3QsCiAgICBSZWFjdENvbXBvbmVudCwKICAgIHRvQ2hpbGRBcnJheSwKICAgIEdldEZpbGV0aW1lLAogICAgVGVybWluYXRlLAogICAgQ29udGFjdHJlZjJDaXJjdWl0LAogICAgU2lnbmFsMkNpcmN1aXQsCiAgICBFbGVtZW50MkNpcmN1aXQsCiAgICBTb3J0RmlsZXMKICB9KTsKCiAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7CiAgICBsb2FkKGZpbGVuYW1lLCBwcm9qZWN0ID0gZ2xvYmFsVGhpcy5wcm9qZWN0KSB7CiAgICAgIGdsb2JhbFRoaXMuZG9jdW1lbnQgPSBuZXcgRWFnbGVEb2N1bWVudChmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGYtOCcpLCBwcm9qZWN0LCBmaWxlbmFtZSwgbnVsbCwgZnMpOwogICAgfSwKICAgIG5ld1Byb2plY3QoZmlsZW5hbWUpIHsKICAgICAgaWYoZ2xvYmFsVGhpcy5wcm9qZWN0KSB7CiAgICAgICAgZ2xvYmFsVGhpcy5wcm9qZWN0LmNsb3NlQWxsKCk7CiAgICAgICAgZGVsZXRlIGdsb2JhbFRoaXMucHJvamVjdDsKICAgICAgICBkZWxldGUgZ2xvYmFsVGhpcy5zY2g7CiAgICAgICAgZGVsZXRlIGdsb2JhbFRoaXMuYnJkOwogICAgICB9CgogICAgICBnbG9iYWxUaGlzLnByb2plY3QgPSBuZXcgRWFnbGVQcm9qZWN0KGZpbGVuYW1lKTsKCiAgICAgIC8vcHJvamVjdC5sYXp5T3BlbihmaWxlbmFtZSk7CgogICAgICBsYXp5UHJvcGVydGllcyhnbG9iYWxUaGlzLCB7CiAgICAgICAgc2NoOiAoKSA9PiBwcm9qZWN0LnNjaGVtYXRpYywKICAgICAgICBicmQ6ICgpID0+IHByb2plY3QuYm9hcmQKICAgICAgfSk7CiAgICB9LAogICAgbmV4dFByb2plY3QoKSB7CiAgICAgIGlmKGdsb2JhbFRoaXMucHJvamVjdE5hbWVzLmxlbmd0aCA+IGdsb2JhbFRoaXMucHJvamVjdEluZGV4ICsgMSkgewogICAgICAgIGdsb2JhbFRoaXMubmV3UHJvamVjdChnbG9iYWxUaGlzLnByb2plY3ROYW1lc1srK2dsb2JhbFRoaXMucHJvamVjdEluZGV4XSk7CiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXMucHJvamVjdDsKICAgICAgfQogICAgfQogIH0pOwoKICBsYXp5UHJvcGVydGllcyhnbG9iYWxUaGlzLCB7CiAgICBwcm9qZWN0TmFtZXMoKSB7CiAgICAgIHRoaXMucHJvamVjdEluZGV4ID0gLTE7CiAgICAgIHJldHVybiBGaW5kUHJvamVjdHModW5kZWZpbmVkLCAxKTsKICAgIH0KICB9KTsKICAvLyBnbG9iYWxUaGlzLmRvY3MgPSBhcmdzLm1hcChhcmcgPT4gKGdsb2JhbFRoaXMuZG9jID0gbG9hZChhcmcpKSk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgVXBkYXRlTWVhc3VyZXMsCiAgICBBbGlnbkl0ZW0sCiAgICBBbGlnbkFsbCwKICAgIGZpeFZhbHVlLAogICAgZml4VmFsdWVzLAogICAgY29vcmRNYXAsCiAgICBVdGlsLAogICAgTGluZUxpc3QsCiAgICBQb2ludCwKICAgIENpcmNsZSwKICAgIFJlY3QsCiAgICBTaXplLAogICAgTGluZSwKICAgIFRyYW5zZm9ybWF0aW9uTGlzdCwKICAgIFJvdGF0aW9uLAogICAgVHJhbnNsYXRpb24sCiAgICBTY2FsaW5nLAogICAgTWF0cml4LAogICAgQkJveCwKICAgIGZzLAogICAgUG9pbnRlciwKICAgIGRlZXAKICB9KTsKCiAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7CiAgICBCaW5hcnlUcmVlLAogICAgQnVja2V0U3RvcmUsCiAgICBCdWNrZXRNYXAsCiAgICBDb21wb25lbnRNYXAsCiAgICBDb21wb3NpdGVNYXAsCiAgICBEZXF1ZSwKICAgIEVudW0sCiAgICBIYXNoTGlzdCwKICAgIE11bHRpbWFwLAogICAgU2hhc2gsCiAgICBTb3J0ZWRNYXAsCiAgICBIYXNoTXVsdGltYXAsCiAgICBNdWx0aUJpTWFwLAogICAgTXVsdGlLZXlNYXAsCiAgICBEZW5zZVNwYXRpYWxIYXNoMkQsCiAgICBTcGF0aWFsSGFzaDJELAogICAgSGFzaE1hcCwKICAgIFNwYXRpYWxILAogICAgU3BhdGlhbEhhc2gsCiAgICBTcGF0aWFsSGFzaE1hcCwKICAgIEJveEhhc2gsCiAgICBHZXRQb2x5Z29ucywKICAgIEZpbmRQb2x5Z29ucywKICAgIFJlbW92ZVBvbHlnb25zLAogICAgcXVpdChhcmcpIHsKICAgICAgcmVwbC5jbGVhbnVwKCk7CiAgICAgIHByb2Nlc3MuZXhpdChhcmcgPz8gMCk7CiAgICB9CiAgfSk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgUHJpbWl0aXZlQ29tcG9uZW50cywKICAgIEVsZW1lbnROYW1lVG9Db21wb25lbnQsCiAgICBFbGVtZW50VG9Db21wb25lbnQsCiAgICBFYWdsZVRvR2VyYmVyLAogICAgR2VyYmVyVG9HY29kZSwKICAgIEV4ZWNUb29sCiAgfSk7CiAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7CiAgICByZW5kZXJUb1N0cmluZyhhcmcpIHsKICAgICAgLy8gIHJldHVybiByZW5kZXJUb1N0cmluZyhhcmcpOwogICAgICByZXR1cm4gd3JpdGVYTUwoZnJvbVhNTChyZW5kZXJUb1N0cmluZyhhcmcpKSk7CiAgICB9LAogICAgcmVuZGVyVG9YTUwKICB9KTsKCiAgY21kaGlzdCA9IGAuJHtiYXNlfS1jbWRoaXN0b3J5YDsKCiAgbGV0IG5hbWUgPSAocHJvY2Vzcy5lbnZbJ05BTUUnXSA/PyBiYXNlKQogICAgLnJlcGxhY2UoLy4qXC8vLCAnJykKICAgIC5yZXBsYWNlKC8tL2csICcgJykKICAgIC5yZXBsYWNlKC9cLlteXC8uXSokLywgJycpOwogIGxldCBbcHJlZml4LCBzdWZmaXhdID0gbmFtZS5zcGxpdCgnICcpOwoKICBsZXQgcmVwbCA9IChnbG9iYWxUaGlzLnJlcGwgPSBuZXcgUkVQTChgXHgxYlszODs1OzE2NW0ke3ByZWZpeH0gXHgxYlszODs1OzM5bSR7c3VmZml4fVx4MWJbMG1gLCBmYWxzZSkpOwoKICBmb3IobGV0IGZpbGUgb2YgcGFyYW1zWydAJ10pIHsKICAgIHJlcGwucHJpbnRTdGF0dXMoYExvYWRpbmcgJyR7ZmlsZX0nLi4uYCk7CiAgICBuZXdQcm9qZWN0KGZpbGUpOwogIH0KCiAgcmVwbC5oaXN0b3J5ID0gTG9hZEhpc3RvcnkoY21kaGlzdCk7CiAgcmVwbC5sb2FkU2F2ZU9wdGlvbnMoKTsKICByZXBsLnByaW50U3RhdHVzKGBMb2FkZWQgJHtyZXBsLmhpc3RvcnkubGVuZ3RofSBoaXN0b3J5IGVudHJpZXMpYCk7CgogIGxldCBsb2cgPSBjb25zb2xlLmxvZzsKCiAgY29uc29sZS5sb2cgPSAoLi4uYXJncykgPT4gcmVwbC5wcmludFN0YXR1cygoKSA9PiBsb2coLi4uYXJncykpOwoKICAvL2NvbnNvbGUubG9nKGByZXBsYCwgcmVwbCk7CiAgLy9jb25zb2xlLmxvZyhgZGVidWdMb2dgLCBnZXRNZXRob2RzKGRlYnVnTG9nLCBJbmZpbml0eSwgMCkpOwogIC8vcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmYWxzZSk7CiAgcmVwbC5kaXJlY3RpdmVzLmkgPSBbCiAgICAobW9kdWxlLCAuLi5hcmdzKSA9PiB7CiAgICAgIGNvbnNvbGUubG9nKCdhcmdzJywgYXJncyk7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIHJlcXVpcmUobW9kdWxlKTsKICAgICAgfSBjYXRjaChlKSB7fQogICAgICBpbXBvcnQobW9kdWxlKS50aGVuKG0gPT4gKGdsb2JhbFRoaXNbbW9kdWxlXSA9IG0pKTsKICAgIH0sCiAgICAnaW1wb3J0IG1vZHVsZScKICBdOwoKICByZXBsLmRlYnVnTG9nID0gZGVidWdMb2c7CiAgcmVwbC5leGl0ID0gKCkgPT4gewogICAgcmVwbC5jbGVhbnVwKCk7CiAgICBUZXJtaW5hdGUoKTsKICB9OwogIHJlcGwuaW1wb3J0TW9kdWxlID0gaW1wb3J0TW9kdWxlOwogIHJlcGwuZGVidWcgPSAoLi4uYXJncykgPT4gewogICAgbGV0IHMgPSAnJzsKICAgIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgICAgaWYocykgcyArPSAnICc7CiAgICAgIGlmKHR5cGVvZiBhcmcgIT0gJ3N0cmluZycgfHwgYXJnLmluZGV4T2YoJ1x4MWInKSA9PSAtMSkKICAgICAgICBzICs9IGluc3BlY3QoYXJnLCB7CiAgICAgICAgICBkZXB0aDogSW5maW5pdHksCiAgICAgICAgICBkZXB0aDogNiwKICAgICAgICAgIGNvbXBhY3Q6IGZhbHNlCiAgICAgICAgfSk7CiAgICAgIGVsc2UgcyArPSBhcmc7CiAgICB9CiAgICBmcy53cml0ZVN5bmMoZGVidWdMb2csIGZzLmJ1ZmZlckZyb20ocyArICdcbicpKTsKCiAgICAvLyAgICBkZWJ1Z0xvZy5wdXRzKHMgKyAnXG4nKTsKICAgIGZzLmZsdXNoU3luYyhkZWJ1Z0xvZyk7CiAgfTsKICByZXBsLnNob3cgPSB2YWx1ZSA9PiB7CiAgICBpZihpc09iamVjdCh2YWx1ZSkgJiYgdmFsdWUgaW5zdGFuY2VvZiBFYWdsZU5vZGUpIHsKICAgICAgY29uc29sZS5sb2codmFsdWUuaW5zcGVjdCgpKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTsKICAgIH0KICB9OwoKICAvLyByZXBsLmhpc3RvcnlTZXQoSlNPTi5wYXJzZShzdGQubG9hZEZpbGUoaGlzdGZpbGUpIHx8ICdbXScpKTsKCiAgcmVwbC5hZGRDbGVhbnVwSGFuZGxlcigoKSA9PiB7CiAgICBsZXQgaGlzdCA9IHJlcGwuaGlzdG9yeS5maWx0ZXIoKGl0ZW0sIGksIGEpID0+IGEubGFzdEluZGV4T2YoaXRlbSkgPT0gaSk7CgogICAgLy8gICAgZnMud3JpdGVGaWxlU3luYyhjbWRoaXN0LCBKU09OLnN0cmluZ2lmeShoaXN0LCBudWxsLCAyKSk7CiAgICBmcy53cml0ZUZpbGVTeW5jKAogICAgICBjbWRoaXN0LAogICAgICBoaXN0CiAgICAgICAgLmZpbHRlcihlbnRyeSA9PiAoZW50cnkgKyAnJykudHJpbSgpICE9ICcnKQogICAgICAgIC5tYXAoZW50cnkgPT4gZW50cnkucmVwbGFjZSgvXG4vZywgJ1xcXFxuJykgKyAnXG4nKQogICAgICAgIC5qb2luKCcnKQogICAgKTsKCiAgICBjb25zb2xlLmxvZyhgRVhJVCAod3JvdGUgJHtoaXN0Lmxlbmd0aH0gaGlzdG9yeSBlbnRyaWVzKWApOwogICAgVGVybWluYXRlKDApOwogIH0pOwoKICByZXBsLnJ1blN5bmMoKTsKfQoKZnVuY3Rpb24gVGVybWluYXRlKGV4aXRDb2RlKSB7CiAgY29uc29sZS5sb2coJ1Rlcm1pbmF0ZScsIGV4aXRDb2RlKTsKCiAgc3RkLmV4aXQoZXhpdENvZGUpOwp9CgpmdW5jdGlvbiB4bWwoc3RyaW5ncywgZXhwcmVzc2lvbnMpIHsKICBsZXQgW3RhZ10gPSBzdHJpbmdzOwogIHJldHVybiBlID0+IGUudGFnTmFtZSA9PSB0YWc7Cn0KCi8qZnVuY3Rpb24gTG9hZEhpc3RvcnkoZmlsZW5hbWUpIHsKICBsZXQgY29udGVudHMgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGYtOCcpOwogIGxldCBkYXRhOwoKICBjb25zdCBwYXJzZSA9ICgpID0+IHsKICAgIHRyeSB7CiAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGNvbnRlbnRzKTsKICAgIH0gY2F0Y2goZSkge30KICAgIGlmKGRhdGEpIHJldHVybiBkYXRhOwogICAgdHJ5IHsKICAgICAgZGF0YSA9IGNvbnRlbnRzLnNwbGl0KC9cbi9nKTsKICAgIH0gY2F0Y2goZSkge30KICAgIGlmKGRhdGEpIHJldHVybiBkYXRhOwogIH07CgogIHJldHVybiAocGFyc2UoKSA/PyBbXSkuZmlsdGVyKGVudHJ5ID0+IChlbnRyeSArICcnKS50cmltKCkgIT0gJycpLm1hcChlbnRyeSA9PiBlbnRyeS5yZXBsYWNlKC9cXG4vZywgJ1xuJykpOwp9CgpmdW5jdGlvbiBSZWFkSlNPTihmaWxlbmFtZSkgewogIGxldCBkYXRhID0gc3RkLmxvYWRGaWxlKGZpbGVuYW1lKTsKCiAgaWYoZGF0YSkgY29uc29sZS5sb2coYFJlYWRKU09OKCcke2ZpbGVuYW1lfScpICR7ZGF0YS5sZW5ndGh9IGJ5dGVzIHJlYWRgKTsKICByZXR1cm4gZGF0YSA/IEpTT04ucGFyc2UoZGF0YSkgOiBudWxsOwp9Ki8KCmFzeW5jIGZ1bmN0aW9uIGltcG9ydE1vZHVsZShtb2R1bGVOYW1lLCAuLi5hcmdzKSB7CiAgLy9jb25zb2xlLmxvZygnaW1wb3J0TW9kdWxlJywgbW9kdWxlTmFtZSwgYXJncyk7CiAgbGV0IGRvbmUgPSBmYWxzZTsKICByZXR1cm4gYXdhaXQgaW1wb3J0KG1vZHVsZU5hbWUpCiAgICAudGhlbihtb2R1bGUgPT4gewogICAgICAvL2NvbnNvbGUubG9nKCdpbXBvcnQnLCB7IG1vZHVsZSB9KTsKICAgICAgZG9uZSA9IHRydWU7CiAgICAgIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgeyBbbW9kdWxlTmFtZV06IG1vZHVsZSB9KTsKICAgICAgcmV0dXJuIG1vZHVsZTsKICAgIH0pCiAgICAuY2F0Y2goZSA9PiB7CiAgICAgIGNvbnNvbGUuZXJyb3IobW9kdWxlTmFtZSArICc6JywgZSk7CiAgICAgIGRvbmUgPSB0cnVlOwogICAgfSk7CiAgLy8gd2hpbGUoIWRvbmUpIHN0ZC5zbGVlcCg1MCk7Cn0KCmZ1bmN0aW9uIFVwZGF0ZU1lYXN1cmVzKGJvYXJkKSB7CiAgaWYoIWJvYXJkKSByZXR1cm4gZmFsc2U7CiAgbGV0IGJvdW5kcyA9IGJvYXJkLmdldEJvdW5kcygpOwogIGxldCBtZWFzdXJlcyA9IGJvYXJkLmdldE1lYXN1cmVzKCk7CgogIGlmKG1lYXN1cmVzKSB7CiAgICBjb25zb2xlLmxvZygnZ290IG1lYXN1cmVzOicsIG1lYXN1cmVzKTsKICB9IGVsc2UgewogICAgbGV0IHJlY3QgPSBuZXcgUmVjdChib3VuZHMucmVjdCk7CiAgICBsZXQgbGluZXMgPSByZWN0LnRvTGluZXMobGluZXMgPT4gbmV3IExpbmVMaXN0KGxpbmVzKSk7CiAgICBsZXQgeyBwbGFpbiB9ID0gYm9hcmQ7CiAgICBwbGFpbi5yZW1vdmUoZSA9PiBlLnRhZ05hbWUgPT0gJ3dpcmUnICYmIGUuYXR0cmlidXRlcy5sYXllciA9PSAnNDcnKTsKICAgIHBsYWluLmFwcGVuZCgKICAgICAgLi4ubGluZXMubWFwKGxpbmUgPT4gKHsKICAgICAgICB0YWdOYW1lOiAnd2lyZScsCiAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgLi4ubGluZS50b09iamVjdCgpLAogICAgICAgICAgbGF5ZXI6IDQ3LAogICAgICAgICAgd2lkdGg6IDAKICAgICAgICB9CiAgICAgIH0pKQogICAgKTsKICAgIC8vY29uc29sZS5sb2coJ25vIG1lYXN1cmVzOicsIHsgYm91bmRzLCBsaW5lcyB9LCBbLi4ucGxhaW5dKTsKICAgIC8vcGxhaW4ucmVtb3ZlKGUgPT4gZS5hdHRyaWJ1dGVzLmxheWVyID09ICc1MScpOwogIH0KICAvL2NvbnNvbGUubG9nKCdib2FyZC5wbGFpbjonLCBib2FyZC5wbGFpbik7CiAgcmV0dXJuICFtZWFzdXJlczsKfQoKZnVuY3Rpb24gQWxpZ25JdGVtKGl0ZW0pIHsKICBsZXQgY2hhbmdlZDsKICAvLyBjb25zb2xlLmxvZygnQWxpZ25JdGVtJywgeyBpdGVtIH0pOwogIGxldCBvZmZzZXRQb3MgPSBuZXcgUG9pbnQoMCwgMCk7CiAgbGV0IGdlb21ldHJ5ID0gaXRlbS5nZW9tZXRyeTsKICBpZihpdGVtLnRhZ05hbWUgPT0gJ2VsZW1lbnQnKSB7CiAgICBsZXQgcGtnID0gaXRlbVsncGFja2FnZSddOwogICAgbGV0IHRyYW5zZm9ybWF0aW9uID0gaXRlbS50cmFuc2Zvcm1hdGlvbigpLmZpbHRlcih0ciA9PiB0ci50eXBlICE9ICd0cmFuc2xhdGUnKTsKICAgIGxldCBtYXRyaXggPSB0cmFuc2Zvcm1hdGlvbi50b01hdHJpeCgpOwogICAgLy9jb25zb2xlLmxvZygnQWxpZ25JdGVtOicsIHsgdHJhbnNmb3JtYXRpb24sIG1hdHJpeCB9KTsKICAgIG9mZnNldFBvcyA9IG5ldyBQb2ludChwa2cucGFkc1swXSkudHJhbnNmb3JtKG1hdHJpeCk7CiAgICBsZXQgaW5jaFBvcyA9IG9mZnNldFBvcy5xdW90KDIuNTQpOwogICAgLy8gY29uc29sZS5sb2coJ0FsaWduSXRlbTonLCB7IG9mZnNldFBvcywgaW5jaFBvcyB9KTsKICAgIGxldCBvbGRQb3MgPSBuZXcgUG9pbnQoaXRlbSk7CiAgICBpbmNoUG9zID0gb2xkUG9zLnF1b3QoMi41NCk7CiAgICAvLyBjb25zb2xlLmxvZygnQWxpZ25JdGVtOicsIHsgb2xkUG9zLCBpbmNoUG9zIH0pOwogICAgbGV0IHBhZFBvcyA9IG9sZFBvcy5zdW0ob2Zmc2V0UG9zKTsKICAgIGluY2hQb3MgPSBwYWRQb3MucXVvdCgyLjU0KTsKICAgIC8vIGNvbnNvbGUubG9nKCdBbGlnbkl0ZW06JywgeyBwYWRQb3MsIGluY2hQb3MgfSk7CiAgICBsZXQgbmV3UG9zID0gcGFkUG9zLnJvdW5kKDIuNTQpLmRpZmYob2Zmc2V0UG9zKS5yb3VuZCgwLjAwMDEsIDQpOwogICAgbGV0IGRpZmYgPSBuZXdQb3MuZGlmZihvbGRQb3MpOwogICAgbGV0IGJlZm9yZSA9IGl0ZW0ucGFyZW50Tm9kZS50b1hNTCgpOwogICAgLy9jb25zb2xlLmxvZygnZ2VvbWV0cnk6JywgT2JqZWN0LmVudHJpZXMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoZ2VvbWV0cnkpKS5tYXAoKFtuYW1lLCB7IHZhbHVlIH1dKSA9PiBbbmFtZSwgdmFsdWUgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModmFsdWUpXSksIGdlb21ldHJ5LngxKTsKICAgIGluY2hQb3MgPSBuZXdQb3MucXVvdCgyLjU0KTsKICAgIC8vY29uc29sZS5sb2coJ0FsaWduSXRlbTonLCB7IG5ld1BvcywgZGlmZiwgaW5jaFBvcyB9KTsKICAgIGdlb21ldHJ5LmFkZChkaWZmKTsKICAgIGNoYW5nZWQgPSAhZGlmZi5pc051bGwoKTsKICB9CiAgaWYoaXRlbS50YWdOYW1lID09ICd3aXJlJykgewogICAgbGV0IG9sZENvb3JkID0gZ2VvbWV0cnkuY2xvbmUoKTsKICAgIGxldCBpbmNoQ29vcmQgPSBvbGRDb29yZC5xdW90KDIuNTQpOwogICAgLy9jb25zb2xlLmxvZygnQWxpZ25JdGVtOicsIHsgb2xkQ29vcmQsIGluY2hDb29yZCB9KTsKICAgIGxldCBuZXdDb29yZCA9IG9sZENvb3JkLmNsb25lKCkucm91bmQoMi41NCk7CiAgICBpbmNoQ29vcmQgPSBuZXdDb29yZC5xdW90KDIuNTQpOwogICAgLy9jb25zb2xlLmxvZygnQWxpZ25JdGVtOicsIHsgbmV3Q29vcmQsIGluY2hDb29yZCB9KTsKICAgIGxldCBkaWZmID0gbmV3Q29vcmQuZGlmZihvbGRDb29yZCk7CiAgICAvL2NvbnNvbGUubG9nKCdBbGlnbkl0ZW06JywgeyBkaWZmIH0pOwogICAgY2hhbmdlZCA9ICFkaWZmLmlzTnVsbCgpOwogICAgZ2VvbWV0cnkuYWRkKGRpZmYpOwogIH0KICBpZihjaGFuZ2VkKSB7CiAgICBjb25zb2xlLmxvZyhpdGVtKTsKICAgIC8qICAgIGNvbnNvbGUubG9nKCdhZnRlcjonLCBhYmJyZXZpYXRlKGl0ZW0ucGFyZW50Tm9kZS50b1hNTCgpKSk7CiAgICAgY29uc29sZS5sb2coJ2FsaWduXG4nLCBpdGVtLnhwYXRoKCksICdcbiBuZXdQb3M6JywgbmV3UG9zLCAnXG4gZGlmZjonLCBkaWZmLCAnXG4gYXR0cjonLCBpdGVtLnJhdy5hdHRyaWJ1dGVzKTsqLwogIH0KICByZXR1cm4gY2hhbmdlZDsKfQoKZnVuY3Rpb24gQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkgewogIGlmKCFkb2MpIHJldHVybiBmYWxzZTsKCiAgbGV0IGl0ZW1zID0gZG9jLmdldEFsbChkb2MudHlwZSA9PSAnYnJkJyA/ICdlbGVtZW50JyA6ICdpbnN0YW5jZScpOwogIGxldCBjaGFuZ2VkID0gZmFsc2U7CiAgaXRlbXMgPSBbLi4uaXRlbXNdOwogIGNvbnNvbGUubG9nKCdpdGVtczonLCBpdGVtcyk7CiAgZm9yKGxldCBpdGVtIG9mIGl0ZW1zKSBjaGFuZ2VkIHw9IEFsaWduSXRlbShpdGVtKTsKICBsZXQgc2lnbmFsc19uZXRzID0gZG9jLmdldEFsbCgvKHNpZ25hbHN8bmV0cykvKTsKICAvL2NvbnNvbGUubG9nKCdzaWduYWxzX25ldHM6Jywgc2lnbmFsc19uZXRzKTsKICBmb3IobGV0IG5ldCBvZiBzaWduYWxzX25ldHMpIGZvciAobGV0IGl0ZW0gb2YgbmV0LmdldEFsbCgnd2lyZScpKSBjaGFuZ2VkIHw9IEFsaWduSXRlbShpdGVtKTsKICByZXR1cm4gISFjaGFuZ2VkOwp9CgpmdW5jdGlvbiBmaXhWYWx1ZShlbGVtZW50KSB7CiAgbGV0IHZhbHVlID0gZWxlbWVudC52YWx1ZTsKICBsZXQgbmV3VmFsdWU7CgogIHN3aXRjaCAoZWxlbWVudC5uYW1lWzBdKSB7CiAgICBjYXNlICdSJzogewogICAgICBuZXdWYWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14oWzAtOS5dKykoW21rTV0/KSg/Olx4RUZceEJGXHhCRHxceEMyXHhBOXxceDI2XHhDMipceEE5K3xcdTIxMjY/W1x4ODAtXHhGRl0rKShbXHgwMC1ceDdGXSopLywgJyQxJDJcdTIxMjYkMycpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgJ0wnOiB7CiAgICAgIG5ld1ZhbHVlID0gdmFsdWUucmVwbGFjZSgvXihbMC05Ll0rKSg/OltceDdGLVx4RkZdKlx4QjV8XHhFRlx4QkZceEJEKShILiopLywgJyQxXHUwMEI1JDInKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlICdDJzogewogICAgICBuZXdWYWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14oWzAtOS5dKykoPzpbXHg3Ri1ceEZGXSpceEI1fFx4RUZceEJGXHhCRCkoRi4qKS8sICckMVx1MDBCNSQyJyk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICBpZihuZXdWYWx1ZSAmJiBuZXdWYWx1ZSAhPSB2YWx1ZSkgewogICAgY29uc29sZS5sb2coYGVsZW1lbnQgJHtlbGVtZW50fSB2YWx1ZSBjaGFuZ2VkIGZyb20gJyR7dmFsdWV9JyB0byAnJHtuZXdWYWx1ZX0nYCk7CiAgICBlbGVtZW50LmF0dHJpYnV0ZXNbJ3ZhbHVlJ10gPSBuZXdWYWx1ZTsKICB9Cn0KCmZ1bmN0aW9uIGZpeFZhbHVlcyhkb2MpIHsKICBpZihkb2MudHlwZSA9PSAnYnJkJykgZG9jLmVsZW1lbnRzLmZvckVhY2goZml4VmFsdWUpOwogIGVsc2UgaWYoZG9jLnR5cGUgPT0gJ3NjaCcpIGRvYy5wYXJ0cy5mb3JFYWNoKGZpeFZhbHVlKTsKfQoKZnVuY3Rpb24gY29vcmRNYXAoZG9jKSB7CiAgbGV0IG1hcCA9IG5ldyBNdWx0aW1hcCgpOwoKICBpZihkb2MudHlwZSA9PSAnYnJkJykgewogICAgZm9yKGxldCBbLCBzaWduYWxdIG9mIGRvYy5zaWduYWxzKSB7CiAgICAgIGZvcihsZXQgd2lyZSBvZiBzaWduYWwud2lyZXMpIHsKICAgICAgICBsZXQgbGluZSA9IG5ldyBMaW5lKHdpcmUuZ2VvbWV0cnkpOwogICAgICAgIGxldCBwb2ludHMgPSBsaW5lLnRvUG9pbnRzKCk7CiAgICAgICAgbGV0IFthLCBiXSA9IHBvaW50cy5tYXAocCA9PiBuZXcgUG9pbnQocCkpOwoKICAgICAgICAvLyAgIGNvbnNvbGUubG9nKGBzaWduYWwgJyR7c2lnbmFsLm5hbWV9JyB3aXJlICMke3NpZ25hbC53aXJlcy5pbmRleE9mKHdpcmUpfTpgLCBwb2ludHMpOwogICAgICAgIGNvbnNvbGUubG9nKGBzaWduYWwgJyR7c2lnbmFsLm5hbWV9JyB3aXJlICMke3NpZ25hbC53aXJlcy5pbmRleE9mKHdpcmUpfTpgLCB7IGEsIGIgfSk7CgogICAgICAgIG1hcC5zZXQoYS50b1N0cmluZygpLCBbc2lnbmFsLm5hbWUsIHdpcmUsIGJdKTsKICAgICAgICBtYXAuc2V0KGIudG9TdHJpbmcoKSwgW3NpZ25hbC5uYW1lLCB3aXJlLCBhXSk7CiAgICAgIH0KICAgIH0KICAgIGZvcihsZXQgZWxlbWVudCBvZiBkb2MuYm9hcmQuZWxlbWVudHMuY2hpbGRyZW4pIHsKICAgICAgbGV0IHBvcyA9IG5ldyBQb2ludChlbGVtZW50Lmdlb21ldHJ5KTsKICAgICAgbGV0IHRyYW5zZm9ybSA9IGVsZW1lbnQudHJhbnNmb3JtYXRpb24oKS5maWx0ZXIodCA9PiB0LnR5cGUgIT0gJ3RyYW5zbGF0ZScpOwogICAgICBjb25zb2xlLmxvZyhgZWxlbWVudCAnJHtlbGVtZW50Lm5hbWV9JzpgLCBwb3MsIHRyYW5zZm9ybSk7CiAgICAgIGxldCBpID0gMDsKICAgICAgbGV0IHsgY29udGFjdHJlZnMgfSA9IGVsZW1lbnQ7CiAgICAgIGNvbnNvbGUubG9nKGBjb250YWN0cmVmcyBgLCBjb250YWN0cmVmcyk7CiAgICAgIGZvcihsZXQgcGFkIG9mIGVsZW1lbnQucGFkcy5saXN0KSB7CiAgICAgICAgbGV0IHsgZ2VvbWV0cnkgfSA9IHBhZDsKICAgICAgICBjb25zb2xlLmxvZyhgcGFkICcke2VsZW1lbnQubmFtZX0uJHtwYWQubmFtZX0nOmAsIGdlb21ldHJ5KTsKICAgICAgICBsZXQgcGFkUG9zID0gbmV3IFBvaW50KGdlb21ldHJ5KTsKICAgICAgICBsZXQgY3JlZiA9IGNvbnRhY3RyZWZzW3BhZC5uYW1lXTsKICAgICAgICBtYXAuc2V0KHBhZFBvcy50b1N0cmluZygpLCBbY3JlZj8ucGFyZW50Tm9kZSA/PyBudWxsLCBlbGVtZW50LCBwYWQgLyosIGNyZWYqL10pOwogICAgICB9CiAgICB9CiAgfQogIGdsb2JhbFRoaXMubWFwQ29vcmRzID0gbWFwOwogIC8vICBjb25zb2xlLmxvZygnY29vcmRNYXAnLCB7IG1hcCB9KTsKICAvLyAgcmV0dXJuIG1hcDsKfQoKZnVuY3Rpb24gR2V0UG9seWdvbnMoZCA9IGRvYykgewogIHJldHVybiBbLi4uZC5nZXRBbGwoZSA9PiBlLnRhZ05hbWUgPT0gJ3BvbHlnb24nICYmIFsxLCAxNl0uaW5kZXhPZigrZS5hdHRyaWJ1dGVzLmxheWVyKSAhPSAtMSldOwp9CgpmdW5jdGlvbiBGaW5kUG9seWdvbnMoKSB7CiAgcmV0dXJuIChnbG9iYWxUaGlzLnBvbHlnb25zID0gZG9jcy5tYXAoZG9jID0+IFtkb2MsIEdldFBvbHlnb25zKGRvYykubWFwKGUgPT4gZS5wYXRoKV0pKTsKfQoKZnVuY3Rpb24gUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKSB7CiAgcG9seWdvbnMuZm9yRWFjaCgoW2RvYywgbGlzdF0pID0+IHsKICAgIGxpc3QuZm9yRWFjaChwYXRoID0+IGRlZXAudW5zZXQoZG9jLnJhdywgcGF0aCkpOwoKICAgIGRvYy5zYXZlVG8oKTsKICB9KTsKfQoKZnVuY3Rpb24gR2V0TmFtZXMoZG9jLCBwcmVkKSB7CiAgbGV0IGxpc3QsIG5hbWVzOwogIGlmKHR5cGVvZiBwcmVkICE9ICdmdW5jdGlvbicpIHByZWQgPSBlID0+ICEhZS5wYWNrYWdlOwoKICBzd2l0Y2ggKGRvYy50eXBlKSB7CiAgICBjYXNlICdzY2gnOiB7CiAgICAgIGxpc3QgPSBkb2Muc2hlZXRzLm1hcChzaGVldCA9PiBbLi4uc2hlZXQuaW5zdGFuY2VzLmxpc3RdKS5mbGF0KCk7CiAgICAgIGxpc3QgPSBbLi4ubGlzdF0uZmlsdGVyKHByZWQpOwogICAgICBuYW1lcyA9IGxpc3QubWFwKGUgPT4gZS5hdHRyaWJ1dGVzLnBhcnQpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgJ2JyZCc6IHsKICAgICAgbGlzdCA9IGRvYy5lbGVtZW50cy5saXN0OwogICAgICBsaXN0ID0gWy4uLmxpc3RdLmZpbHRlcihwcmVkKTsKICAgICAgbmFtZXMgPSBsaXN0Lm1hcChlID0+IGUuYXR0cmlidXRlcy5uYW1lKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBkZWZhdWx0OiB7CiAgICAgIG5hbWVzID0gZGVlcAogICAgICAgIC5zZWxlY3QoZG9jLnJhdywgZSA9PiBlLmF0dHJpYnV0ZXMubmFtZSwgZGVlcC5SRVRVUk5fVkFMVUVfUEFUSCkKICAgICAgICAuZmlsdGVyKChbdiwgcF0pID0+IFsnc3ltYm9sJywgJ2RldmljZScsICdwYWNrYWdlJ10uaW5kZXhPZih2LnRhZ05hbWUpICE9IC0xKQogICAgICAgIC5tYXAoKFt2LCBwXSkgPT4gdi5hdHRyaWJ1dGVzLm5hbWUpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIHVuaXF1ZShuYW1lcyk7Cn0KCmxldCBuYW1lTWFwcyA9ICgoKSA9PiB7CiAgbGV0IGFzc29jID0gbmV3IFdlYWtNYXAoKTsKCiAgcmV0dXJuIG1lbW9pemUoZG9jID0+IHsKICAgIGxldCBtYXA7CiAgICBzd2l0Y2ggKGRvYy50eXBlKSB7CiAgICAgIGNhc2UgJ3NjaCc6IHsKICAgICAgICBtYXAgPSBuZXcgTWFwKGRvYy5zaGVldHMubWFwKHNoZWV0ID0+IFsuLi5zaGVldC5pbnN0YW5jZXNdKS5mbGF0KCkpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGNhc2UgJ2JyZCc6IHsKICAgICAgICBtYXAgPSBuZXcgTWFwKFsuLi5kb2MuZWxlbWVudHNdKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG1hcDsKICB9KTsKfSkoKTsKCmZ1bmN0aW9uIEdldEJ5TmFtZShkb2MsIG5hbWUpIHsKICBsZXQgbWFwID0gbmFtZU1hcHMoZG9jKTsKCiAgLy9jb25zb2xlLmxvZygiR2V0QnlOYW1lIiwgbWFwKTsKICByZXR1cm4gbWFwLmdldChuYW1lKTsKfQoKZnVuY3Rpb24gQ29ycmVsYXRlU2NoZW1hdGljQW5kQm9hcmQoc2NoZW1hdGljLCBib2FyZCkgewogIGlmKCFzY2hlbWF0aWMpIHNjaGVtYXRpYyA9IHByb2plY3Quc2NoZW1hdGljOwogIGlmKCFib2FyZCkgYm9hcmQgPSBwcm9qZWN0LmJvYXJkOwogIGxldCBkb2N1bWVudHMgPSBbc2NoZW1hdGljLCBib2FyZF07CiAgbGV0IG5hbWVzID0gZG9jdW1lbnRzLm1hcChkID0+IEdldE5hbWVzKGQpKTsKICBsZXQgYWxsTmFtZXMgPSBNYXRoLm1heCguLi5uYW1lcy5tYXAobiA9PiBuLmxlbmd0aCkpOwogIGxldCBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3QoLi4ubmFtZXMpOwoKICBpZihhbGxOYW1lcy5sZW5ndGggPiBpbnRlcnNlY3Rpb24ubGVuZ3RoKSBjb25zb2xlLndhcm4oYFdBUk5JTkc6IE9ubHkgJHtpbnRlcnNlY3Rpb24ubGVuZ3RofSBuYW1lcyBvZiAke2FsbE5hbWVzLmxlbmd0aH0gY29ycmVsYXRlYCk7CiAgY29uc29sZS5sb2coYGludGVyc2VjdGlvbmAsIGludGVyc2VjdGlvbik7CgogIHJldHVybiAvKm5ldyBNYXAqLyBpbnRlcnNlY3Rpb24ubWFwKG5hbWUgPT4gW25hbWUsIGRvY3VtZW50cy5tYXAoZG9jID0+IEdldEJ5TmFtZShkb2MsIG5hbWUpKV0pOwp9CgpmdW5jdGlvbiBHZXRTaGVldHMoZG9jX29yX3Byb2opIHsKICBpZighKGRvY19vcl9wcm9qIGluc3RhbmNlb2YgRWFnbGVEb2N1bWVudCkpIGRvY19vcl9wcm9qID0gZG9jX29yX3Byb2ouc2NoZW1hdGljOwoKICByZXR1cm4gWy4uLmRvY19vcl9wcm9qLnNjaGVtYXRpYy5zaGVldHNdOwp9CgpmdW5jdGlvbiBTYXZlTGlicmFyaWVzKCkgewogIGNvbnN0IHsgc2NoZW1hdGljLCBib2FyZCB9ID0gcHJvamVjdDsKICBjb25zdCBsYXllck1hcCA9IC8qT2JqZWN0LnZhbHVlcyovIFsuLi5zY2hlbWF0aWMubGF5ZXJzLCAuLi5ib2FyZC5sYXllcnNdLmZpbHRlcigoW24sIGVdKSA9PiBlLmFjdGl2ZSkucmVkdWNlKChhY2MsIFtuLCBlXSkgPT4gKHsgLi4uYWNjLCBbZS5udW1iZXJdOiBlLnJhdyB9KSwge30pOwogIGNvbnN0IGVudGl0aWVzID0gWydzeW1ib2xzJywgJ3BhY2thZ2VzJywgJ2RldmljZXNldHMnXTsKCiAgbGV0IGxheWVySWRzID0gZGVlcAogICAgLnNlbGVjdChbc2NoZW1hdGljLnJhdywgYm9hcmQucmF3XSwgZSA9PiBlICYmIGUubGF5ZXIpCiAgICAubWFwKGUgPT4gK2UubGF5ZXIpCiAgICAuY29uY2F0KHJhbmdlKDE3LCA0OSkpCiAgICAuc29ydCgoYSwgYikgPT4gYSAtIGIpOwogIGxheWVySWRzID0gdW5pcXVlKGxheWVySWRzKTsKICBsZXQgbGF5ZXJzID0gbGF5ZXJJZHMubWFwKGlkID0+IGxheWVyTWFwW2lkXSk7CgogIC8vICBjb25zb2xlLmxvZygnbGF5ZXJzJywgbGF5ZXJzKTsKICBjb25zb2xlLmxvZygKICAgICdsYXllcklkcycsCiAgICBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IDIgfSksCiAgICBsYXllcklkcy5tYXAoaWQgPT4gW2lkLCBsYXllck1hcFtpZF0uYXR0cmlidXRlcy5uYW1lXSkKICApOwoKICBjb25zdCBsaWJyYXJ5TmFtZXMgPSB1bmlxdWUoWy4uLnNjaGVtYXRpYy5saWJyYXJpZXMsIC4uLmJvYXJkLmxpYnJhcmllc10ubWFwKChbbiwgZV0pID0+IG4pKTsKICBjb25zb2xlLmxvZygnbGlicmFyeU5hbWVzJywgbGlicmFyeU5hbWVzKTsKCiAgY29uc3QgbGlicmFyaWVzID0gbGlicmFyeU5hbWVzLm1hcChuYW1lID0+IFtuYW1lLCBzY2hlbWF0aWMuZ2V0TGlicmFyeShuYW1lKSwgYm9hcmQuZ2V0TGlicmFyeShuYW1lKV0pOwogIGZvcihsZXQgW25hbWUsIC4uLmxpYnNdIG9mIGxpYnJhcmllcykgewogICAgbGV0IG9iaiA9IHsgc3ltYm9sczogW10sIHBhY2thZ2VzOiBbXSwgZGV2aWNlc2V0czogW10gfTsKCiAgICBsZXQgeG1sID0gewogICAgICB0YWdOYW1lOiAnbGlicmFyeScsCiAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgewogICAgICAgICAgdGFnTmFtZTogJ2Rlc2NyaXB0aW9uJywKICAgICAgICAgIGF0dHJpYnV0ZXM6IHt9LAogICAgICAgICAgY2hpbGRyZW46IFtgJHtuYW1lfS5sYnIgbGlicmFyeWBdCiAgICAgICAgfQogICAgICBdLAogICAgICBhdHRyaWJ1dGVzOiB7IG5hbWUgfQogICAgfTsKCiAgICBmb3IobGV0IGxpYiBvZiBsaWJzKSB7CiAgICAgIGlmKGxpYikgewogICAgICAgIGZvcihsZXQgZW50aXR5IG9mIGVudGl0aWVzKSB7CiAgICAgICAgICBpZihsaWJbZW50aXR5XSkgb2JqW2VudGl0eV0gPSBbLi4ub2JqW2VudGl0eV0sIC4uLmxpYltlbnRpdHldXTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGZvcihsZXQgZW50aXR5IG9mIGVudGl0aWVzKSB7CiAgICAgIG9ialtlbnRpdHldID0gb2JqW2VudGl0eV0ucmVkdWNlKChhY2MsIFtuLCBlXSkgPT4gKHsgLi4uYWNjLCBbbl06IGUucmF3IH0pLCB7fSk7CiAgICB9CgogICAgZm9yKGxldCBlbnRpdHkgb2YgZW50aXRpZXMpIHsKICAgICAgb2JqW2VudGl0eV0gPSBPYmplY3QudmFsdWVzKG9ialtlbnRpdHldKTsKCiAgICAgIHhtbC5jaGlsZHJlbi5wdXNoKHsKICAgICAgICB0YWdOYW1lOiBlbnRpdHksCiAgICAgICAgY2hpbGRyZW46IG9ialtlbnRpdHldCiAgICAgIH0pOwogICAgfQoKICAgIC8vIGNvbnNvbGUubG9nKCcnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IDMsIGRlcHRoOiA0IH0pLCB4bWwpOwoKICAgIHhtbCA9IHsKICAgICAgdGFnTmFtZTogJz94bWwnLAogICAgICBhdHRyaWJ1dGVzOiB7IHZlcnNpb246ICcxLjAnLCBlbmNvZGluZzogJ3V0Zi04JyB9LAogICAgICBjaGlsZHJlbjogWwogICAgICAgIHsKICAgICAgICAgIHRhZ05hbWU6ICchRE9DVFlQRSBlYWdsZSBTWVNURU0gImVhZ2xlLmR0ZCInLAogICAgICAgICAgYXR0cmlidXRlczoge30sCiAgICAgICAgICBjaGlsZHJlbjogW10KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHRhZ05hbWU6ICdlYWdsZScsCiAgICAgICAgICBhdHRyaWJ1dGVzOiB7IHZlcnNpb246ICc2LjQuMScgfSwKICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICB0YWdOYW1lOiAnZHJhd2luZycsCiAgICAgICAgICAgICAgYXR0cmlidXRlczoge30sCiAgICAgICAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgdGFnTmFtZTogJ3NldHRpbmdzJywKICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge30sCiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgdGFnTmFtZTogJ3NldHRpbmcnLAogICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogeyBhbHdheXN2ZWN0b3Jmb250OiAnbm8nIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdzZXR0aW5nJywKICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHsgdmVydGljYWx0ZXh0OiAndXAnIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdncmlkJywKICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogewogICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlOiAnMC4zMTc1JywKICAgICAgICAgICAgICAgICAgICB1bml0ZGlzdDogJ21tJywKICAgICAgICAgICAgICAgICAgICB1bml0OiAnbW0nLAogICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnbGluZXMnLAogICAgICAgICAgICAgICAgICAgIG11bHRpcGxlOiAnMScsCiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ3llcycsCiAgICAgICAgICAgICAgICAgICAgYWx0ZGlzdGFuY2U6ICcwLjAyNScsCiAgICAgICAgICAgICAgICAgICAgYWx0dW5pdGRpc3Q6ICdtbScsCiAgICAgICAgICAgICAgICAgICAgYWx0dW5pdDogJ21tJwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICB0YWdOYW1lOiAnbGF5ZXJzJywKICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge30sCiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBsYXllcnMKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB4bWwKICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH07CgogICAgLy8gICAgY29uc29sZS5sb2coJ3htbCcsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogMywgZGVwdGg6IDkgfSksIHhtbCk7CiAgICBXcml0ZUZpbGUoYCR7bmFtZX0ubGJyYCwgdG9YTUwoeG1sKSk7CiAgfQoKICByZXR1cm4geG1sOwogIC8vY29uc29sZS5sb2coJ2xpYnJhcmllcycsIGxpYnJhcmllcyk7Cn0KCmFzeW5jIGZ1bmN0aW9uIHRlc3RFYWdsZShmaWxlbmFtZSkgewogIGNvbnNvbGUubG9nKCd0ZXN0RWFnbGU6ICcsIGZpbGVuYW1lKTsKICBsZXQgcHJvaiA9IG5ldyBFYWdsZVByb2plY3QoZmlsZW5hbWUsIGZzKTsKICBjb25zb2xlLmxvZygnUHJvamVjdCBsb2FkZWQ6ICcsICFwcm9qLmZhaWxlZCk7CiAgY29uc29sZS5sb2coJ1Byb2plY3Q6ICcsIHByb2opOwogIGNvbnNvbGUubG9nKCdwcm9qLmRvY3VtZW50cycsIHByb2ouZG9jdW1lbnRzKTsKICBsZXQgeyBib2FyZCwgc2NoZW1hdGljIH0gPSBwcm9qOwogIGNvbnN0IHBhY2thZ2VzID0gewogICAgYm9hcmQ6IChib2FyZCAmJiBib2FyZC5lbGVtZW50cyAmJiBbLi4uYm9hcmQuZWxlbWVudHNdLm1hcCgoW25hbWUsIGVdKSA9PiBlLnBhY2thZ2UpKSB8fCBbXSwKICAgIHNjaGVtYXRpYzogKHNjaGVtYXRpYyAmJiBzY2hlbWF0aWMuc2hlZXRzICYmIFsuLi5zY2hlbWF0aWMuc2hlZXRzXS5tYXAoZSA9PiBbLi4uZS5pbnN0YW5jZXNdLm1hcCgoW25hbWUsIGldKSA9PiBpLnBhcnQuZGV2aWNlLnBhY2thZ2UpLmZpbHRlcihwID0+IHAgIT09IHVuZGVmaW5lZCkpLmZsYXQoKSkgfHwgW10KICB9OwogIGxldCBwYXJ0cyA9IChzY2hlbWF0aWMgJiYgc2NoZW1hdGljLnBhcnRzKSB8fCBbXTsKICBsZXQgc2hlZXRzID0gKHNjaGVtYXRpYyAmJiBzY2hlbWF0aWMuc2hlZXRzKSB8fCBbXTsKICBsZXQgbGlicmFyaWVzID0gKGJvYXJkICYmIGJvYXJkLmxpYnJhcmllcykgfHwgW107CiAgbGV0IGVsZW1lbnRzID0gKGJvYXJkICYmIGJvYXJkLmVsZW1lbnRzKSB8fCBbXTsKICBmb3IobGV0IFtsaWJOYW1lLCBsaWJdIG9mIGxpYnJhcmllcykgewogICAgZm9yKGxldCBbcGtnTmFtZSwgcGtnXSBvZiBsaWIucGFja2FnZXMpCiAgICAgIGZvcihsZXQgcGFkIG9mIHBrZy5jaGlsZHJlbikgewogICAgICAgIGlmKHBhZC50YWdOYW1lICE9PSAncGFkJykgY29udGludWU7CiAgICAgICAgcGFkLnNldEF0dHJpYnV0ZSgnZHJpbGwnLCAnMC43Jyk7CiAgICAgICAgcGFkLnNldEF0dHJpYnV0ZSgnZGlhbWV0ZXInLCAnMS43NzgnKTsKICAgICAgICBwYWQucmVtb3ZlQXR0cmlidXRlKCdzdG9wJyk7CiAgICAgICAgcGFkLnJlbW92ZUF0dHJpYnV0ZSgncm90Jyk7CiAgICAgICAgcGFkLnJlbW92ZUF0dHJpYnV0ZSgnc2hhcGUnKTsKICAgICAgfQogIH0KICBsZXQgY21kcyA9IFtdOwogIGZvcihsZXQgW25hbWUsIGVsZW1dIG9mIGVsZW1lbnRzKSB7CiAgICBjbWRzLnB1c2goYE1PVkUgJHtlbGVtLm5hbWV9ICR7ZWxlbS5wb3N9O2ApOwogICAgaWYoZWxlbS5yb3QpIGNtZHMucHVzaChgUk9UQVRFICR7ZWxlbS5yb3R9ICR7ZWxlbS5uYW1lfTtgKTsKICB9CiAgY29uc29sZS5sb2coJ3Byb2ouYm9hcmQnLCBwcm9qLmJvYXJkKTsKICBpZihwcm9qLmJvYXJkKSBVcGRhdGVNZWFzdXJlcyhwcm9qLmJvYXJkKTsKICBpZihBbGlnbkFsbChib2FyZCkgfHwgQWxpZ25BbGwoc2NoZW1hdGljKSkgY29uc29sZS5sb2coJ1NhdmVkOicsIGF3YWl0IHByb2ouc2F2ZVRvKCd0bXAnLCB0cnVlKSk7CiAgY29uc29sZS5sb2coJ2RvY3VtZW50cycsIHByb2ouZG9jdW1lbnRzKTsKICBjb25zb2xlLmxvZygnc2F2ZWQ6JywgYXdhaXQgcHJvai5zYXZlVG8oJ3RtcCcsIHRydWUpKTsKICBmb3IobGV0IGRvYyBvZiBwcm9qLmRvY3VtZW50cykgewogICAgbGV0IGNoYW5nZWQgPSBmYWxzZTsKICAgIGNvbnNvbGUubG9nKCdlYWdsZTonLCBjbGFzc05hbWUoZG9jLmZpbmQoJ2VhZ2xlJykpKTsKICAgIGZvcihsZXQgcGtnIG9mIGRvYy5maW5kKCdlYWdsZScpLmdldEFsbCgncGFja2FnZScpKSB7CiAgICAgIGxldCBpbmRleGVzID0gWy4uLnBrZy5jaGlsZHJlbl0ubWFwKChjaGlsZCwgaSwgYSkgPT4KICAgICAgICBhCiAgICAgICAgICAuc2xpY2UoaSArIDEpCiAgICAgICAgICAubWFwKChjaGlsZDIsIGkyKSA9PiBbaTIgKyBpICsgMSwgY2hpbGQucmF3ID09PSBjaGlsZDIucmF3XSkKICAgICAgICAgIC5maWx0ZXIoKFtpbmRleCwgZXF1YWxdKSA9PiBlcXVhbCkKICAgICAgICAgIC5tYXAoKFtpbmRleF0pID0+IGluZGV4KQogICAgICApOwogICAgICBpbmRleGVzID0gaW5kZXhlcy5mbGF0KCkucmV2ZXJzZSgpOwogICAgICBsZXQgcGF0aHMgPSBpbmRleGVzLm1hcChpID0+IHBrZy5wYXRoLmRvd24oJ2NoaWxkcmVuJywgaSkpOwogICAgICBjb25zb2xlLmxvZygnaW5kZXhlcycsIHBrZy5uYW1lLCBwYXRocyk7CiAgICAgIHBhdGhzLmZvckVhY2goaSA9PiBkZWVwLnVuc2V0KGRvYy5yYXcsIFsuLi5pXSkpOwogICAgICBjaGFuZ2VkID0gY2hhbmdlZCB8fCBpbmRleGVzLmxlbmd0aCA+IDA7CiAgICB9CiAgICBpZihjaGFuZ2VkKSB7CiAgICAgIGRvYy5zYXZlVG8oZG9jLmZpbGVuYW1lKTsKICAgICAgY29uc29sZS5sb2coJ1NhdmVkOicsIGRvYy5maWxlbmFtZSk7CiAgICB9CiAgfQogIGxldCBkZXNjID0gcHJvai5kb2N1bWVudHMubWFwKGRvYyA9PiBbZG9jLmZpbGVuYW1lLCBkb2MuZmluZCgnZGVzY3JpcHRpb24nKV0pOwogIGNvbnNvbGUubG9nKCdkZXNjJywgZGVzYyk7CiAgZGVzYyA9IGRlc2MubWFwKChbZmlsZSwgZV0pID0+IFtmaWxlLCBlICYmIGUueHBhdGgoKV0pLm1hcCgoW2ZpbGUsIHhwYXRoXSkgPT4gW2ZpbGUsIHhwYXRoICYmIHhwYXRoLnRvQ29kZSgnJywgeyBzcGFjaW5nOiAnJywgZnVuY3Rpb246IHRydWUgfSldKTsKICBkZXNjID0gbmV3IE1hcChkZXNjKTsKICBjb25zb2xlLmxvZygnZGVzY3JpcHRpb25zJywgWy4uLm1hcChkZXNjLCAoW2ssIHZdKSA9PiBbaywgdl0pXSk7CiAgcmV0dXJuIHByb2o7Cn0KCmZ1bmN0aW9uIE1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pIHsKICBsZXQgW2RpciwgYmFzZSwgZXh0XSA9ICgoKSA9PiB7CiAgICBsZXQgeyBkaXIsIGJhc2UsIGV4dCB9ID0gcGF0aC50b09iamVjdChwKTsKICAgIHJldHVybiBmbihkaXIsIGJhc2UsIGV4dCk7CiAgfSkoKTsKCiAgcmV0dXJuIHBhdGguZnJvbU9iamVjdCh7IGRpciwgYmFzZSwgZXh0IH0pOwp9CgpmdW5jdGlvbiBBcHBlbmRUb0ZpbGVuYW1lKHAsIHN0ciA9ICcnKSB7CiAgcmV0dXJuIE1vZGlmeVBhdGgocCwgKGRpciwgYmFzZSwgZXh0KSA9PiBbZGlyLCBiYXNlICsgc3RyLCBleHRdKTsKfQoKZnVuY3Rpb24gU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKSB7CiAgbGV0IHN2Z05vZGU7CiAgbGV0IGJnUmVjdCA9IGRlZXAuZmluZCh4bWwsIChlLCBuKSA9PiBlLnRhZ05hbWUgPT0gJ3JlY3QnICYmIGUuYXR0cmlidXRlcy5pZCA9PSAnYmFja2dyb3VuZC1yZWN0JywgZGVlcC5SRVRVUk5fUEFUSCk7CgogIGlmKGJnUmVjdCkgdGhyb3cgbmV3IEVycm9yKCdiYWNrZ3JvdW5kLXJlY3QgYWxyZWF5IHNldCcpOwoKICBpZigoc3ZnTm9kZSA9IGRlZXAuZmluZCh4bWwsIChlLCBuKSA9PiBlLnRhZ05hbWUgPT0gJ3N2ZycsIGRlZXAuUkVUVVJOX1ZBTFVFKSkpIHsKICAgIGxldCBkZWZzID0gZGVlcC5maW5kKHhtbCwgKGUsIG4pID0+IGUudGFnTmFtZSA9PSAnZGVmcycsIGRlZXAuUkVUVVJOX1BBVEgpOwogICAgbGV0IGdwYXRoID0gZGVlcC5maW5kKHhtbCwgKGUsIG4pID0+IGUudGFnTmFtZSA9PSAnZycsIGRlZXAuUkVUVVJOX1BBVEgpOwogICAgbGV0IGNoaWxkcmVuID0gZGVlcC5nZXQoeG1sLCBkZWZzLnNsaWNlKDAsIC0xKSk7CgogICAgLy9jb25zb2xlLmxvZygnU2V0U1ZHQmFja2dyb3VuZCcse2dwYXRofSk7CgogICAgbGV0IHsgdmlld0JveCB9ID0gc3ZnTm9kZS5hdHRyaWJ1dGVzOwogICAgbGV0IHJlY3QgPSBSZWN0LmZyb21TdHJpbmcodmlld0JveCk7CiAgICBsZXQgcG9zID0gZGVmc1tkZWZzLmxlbmd0aCAtIDFdID8/IDA7CiAgICAvL2NvbnNvbGUubG9nKCdTZXRTVkdCYWNrZ3JvdW5kJyx7dmlld0JveCxyZWN0LHBvc30pOwoKICAgIGNoaWxkcmVuLnNwbGljZShwb3MgKyAxLCAwLCB7CiAgICAgIHRhZ05hbWU6ICdyZWN0JywKICAgICAgYXR0cmlidXRlczogewogICAgICAgIGlkOiAnYmFja2dyb3VuZC1yZWN0JywKICAgICAgICBmaWxsOiAnI2ZmZicsCiAgICAgICAgLi4ucmVjdC50b09iamVjdCgpCiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiB4bWw7CiAgfQp9Cgpjb25zdCBGaWxlRnVuY3Rpb24gPSAoZm4sIHJmbiA9IFJlYWRGaWxlLCB3Zm4gPSBXcml0ZUZpbGUsIG5hbWVmbiA9IG4gPT4gbiwgLi4uYXJncykgPT4gewogIHJldHVybiAoZmlsZW5hbWUsIC4uLmFyZ3MpID0+IHsKICAgIGxldCBkYXRhID0gcmZuKGZpbGVuYW1lLCAuLi5hcmdzKTsKCiAgICBsZXQgb3V0cHV0ID0gZm4oZGF0YSwgLi4uYXJncyk7CgogICAgcmV0dXJuIHdmbihuYW1lZm4oZmlsZW5hbWUpLCBvdXRwdXQsIC4uLmFyZ3MpOwogIH07Cn07Cgpjb25zdCBTVkdGaWxlU2V0QmFja2dyb3VuZCA9IEZpbGVGdW5jdGlvbihTZXRTVkdCYWNrZ3JvdW5kLCBSZWFkWE1MLCBXcml0ZVhNTCwgbiA9PiBBcHBlbmRUb0ZpbGVuYW1lKG4sICcud2l0aC1iYWNrZ3JvdW5kJyksIGZhbHNlKTsKY29uc3QgU1ZHUmVzYXZlID0gRmlsZUZ1bmN0aW9uKAogIGRhdGEgPT4gZGF0YSwKICBSZWFkWE1MLAogIFdyaXRlWE1MLAogIG4gPT4gbiwKICBmYWxzZQopOwoKZnVuY3Rpb24gUHV0Um93c0NvbHVtbnMocm93cykgewogIGxldCBjb2x1bW5MZW5ndGggPSByb3dzLnJlZHVjZSgoYWNjLCByb3cpID0+IHsKICAgIGZvcihsZXQgaSA9IDA7IGkgPCByb3cubGVuZ3RoOyBpKyspIGFjY1tpXSA9IE1hdGgubWF4KGFjY1tpXSB8IDAsIChyb3dbaV0gKyAnJykubGVuZ3RoKTsKICAgIHJldHVybiBhY2M7CiAgfSwgW10pOwogIGNvbnNvbGUubG9nKCdjb2x1bW5MZW5ndGgnLCBjb2x1bW5MZW5ndGgpOwogIGNvbHVtbkxlbmd0aFtjb2x1bW5MZW5ndGgubGVuZ3RoIC0gMV0gPSAwOwoKICByZXR1cm4gcm93cy5tYXAocm93ID0+IHJvdy5tYXAoKGNvbCwgaSkgPT4gKGNvbCArICcnKS5wYWRFbmQoY29sdW1uTGVuZ3RoW2ldLCAnICcpKS5qb2luKCcgJykpLmpvaW4oJ1xuJyk7Cn0KCmZ1bmN0aW9uIEdldExpYnJhcnkoZSkgewogIGxldCBkZXB0aCA9IDA7CiAgd2hpbGUoKGUgPSBlLnBhcmVudE5vZGUpKSB7CiAgICBjb25zdCB7IHRhZ05hbWUgfSA9IGU7CiAgICBpZih0YWdOYW1lID09ICdsaWJyYXJ5JykgcmV0dXJuIGU7CiAgICBpZih0YWdOYW1lID09ICdlYWdsZScpIGJyZWFrOwogICAgLy9jb25zb2xlLmxvZygnR2V0TGlicmFyeScsIHsgZSwgZGVwdGggfSk7CiAgICBkZXB0aCsrOwogIH0KfQoKZnVuY3Rpb24gRWxlbWVudE5hbWUoZSkgewogIGxldCBuID0gZS5uYW1lOwogIG4gPSBuLnJlcGxhY2UoL1teQS1aYS16MC05X10vZywgJ18nKTsKCiAgaWYoIS9eW0EtWmEtel0vaS50ZXN0KG4pKSB7CiAgICBpZihlLnRhZ05hbWUgPT0gJ3BhY2thZ2UnKSBuID0gbi5yZXBsYWNlKC9eWzAtOV0rXy9nLCAnJyk7CiAgICBsZXQgbGliID0gR2V0TGlicmFyeShlKTsKICAgIGlmKGxpYiAmJiBsaWIubmFtZSkgbiA9IGxpYi5uYW1lICsgbjsKICB9CiAgbiA9IG4ucmVwbGFjZSgvKFswLTldKV8oW0EtWmEtel0pL2csICckMSQyJyk7CgogIGlmKGUudGFnTmFtZSA9PSAncGFja2FnZScpIG4gPSBuLnRvTG93ZXJDYXNlKCk7CiAgaWYoZS50YWdOYW1lID09ICdwYWNrYWdlJykgbiA9IG4ucmVwbGFjZSgvX1swLTldK3hbMC05XSskL2csICcnKTsKICByZXR1cm4gbjsKfQoKZnVuY3Rpb24gR2V0Um90YXRpb24oZWxlbWVudCkgewogIGxldCB7IHJvdCB9ID0gZWxlbWVudDsKICBsZXQgbWlycm9yID0gZmFsc2U7CiAgbGV0IGFuZ2xlID0gMDsKCiAgaWYodHlwZW9mIHJvdCA9PSAnc3RyaW5nJyAmJiByb3QuaW5kZXhPZignTScpICE9IC0xKSB7CiAgICBtaXJyb3IgPSB0cnVlOwogICAgcm90ID0gcm90LnJlcGxhY2UoL00vZywgJycpOwogIH0KICBpZih0eXBlb2Ygcm90ID09ICdzdHJpbmcnICYmIHJvdC5pbmRleE9mKCdSJykgIT0gLTEpIHsKICAgIHJvdCA9IHJvdC5yZXBsYWNlKC9SL2csICcnKTsKICAgIGFuZ2xlID0gK3JvdDsKICB9CiAgcmV0dXJuIFttaXJyb3IsIGFuZ2xlXTsKfQoKZnVuY3Rpb24gUGFja2FnZTJDaXJjdWl0KHApIHsKICBsZXQgcG9pbnRzID0gcC5wYWRzCiAgICAubWFwKCh7IHgsIHkgfSkgPT4gbmV3IFBvaW50KHgsIHkpKQogICAgLm1hcChwdCA9PiBwdC5kaXYoMi41NCkpCiAgICAubWFwKHB0ID0+IHB0LnRvRml4ZWQoMSkpOwoKICBsZXQgeHBvaW50cyA9IHBvaW50cy5tYXAoKHsgeCB9KSA9PiB4KSwKICAgIHlwb2ludHMgPSBwb2ludHMubWFwKCh7IHkgfSkgPT4geSk7CgogIGlmKHVuaXF1ZSh5cG9pbnRzKS5sZW5ndGggPiB1bmlxdWUoeHBvaW50cykubGVuZ3RoKSB7CiAgICBwb2ludHMgPSBwb2ludHMubWFwKHB0ID0+IHB0LnJvdGF0ZShNYXRoLlBJIC8gMikudG9GaXhlZCgxKSk7CiAgICBjb25zb2xlLmxvZygnUGFja2FnZTJDaXJjdWl0KDEpJywgeyBwb2ludHMgfSk7CiAgfQoKICBsZXQgaGFsZiA9IHBvaW50cy5maWx0ZXIocHQgPT4gWy4uLnB0XS5zb21lKGNvb3JkID0+IGNvb3JkICE9IDAgJiYgTWF0aC5hYnMoY29vcmQpIDwgMSkpOwoKICBpZihoYWxmLmxlbmd0aCkgewogICAgbGV0IHQgPSBuZXcgVHJhbnNsYXRpb24oLi4uaGFsZlswXSkuaW52ZXJ0KCk7CiAgICAvLyBjb25zb2xlLmxvZygndCcsIHQpOyAgICBwb2ludHMgPSBwb2ludHMubWFwKHB0ID0+IHB0LnRyYW5zZm9ybSh0KSk7CiAgfQoKICBsZXQgeG9mZnMgPSB1bmlxdWUoeHBvaW50cy5tYXAoeCA9PiBNYXRoLmFicyh4ICUgMSkpKTsKICBsZXQgeW9mZnMgPSB1bmlxdWUoeXBvaW50cy5tYXAoeSA9PiBNYXRoLmFicyh5ICUgMSkpKTsKCiAgaWYoeG9mZnMubGVuZ3RoID09IDEgJiYgeG9mZnNbMF0gIT0gMCkgewogICAgcG9pbnRzID0gcG9pbnRzLm1hcCgoeyB4LCB5IH0pID0+IG5ldyBQb2ludCh4IC0geG9mZnNbMF0sIHkpKTsKICB9CiAgaWYoeW9mZnMubGVuZ3RoID09IDEgJiYgeW9mZnNbMF0gIT0gMCkgewogICAgcG9pbnRzID0gcG9pbnRzLm1hcCgoeyB4LCB5IH0pID0+IG5ldyBQb2ludCh4LCB5IC0geW9mZnNbMF0pKTsKICB9CgogIGlmKHhvZmZzLmxlbmd0aCA+IDEgfHwgeW9mZnMubGVuZ3RoID4gMSAvKiB8fCBwLm5hbWUuc3RhcnRzV2l0aCgnRElMMjgnKSovKSBjb25zb2xlLmxvZygnUGFja2FnZTJDaXJjdWl0KDIpJywgeyBwb2ludHMsIHhwb2ludHM6IHVuaXF1ZSh4cG9pbnRzKSwgeXBvaW50czogdW5pcXVlKHlwb2ludHMpIH0pOwoKICByZXR1cm4gW0VsZW1lbnROYW1lKHApLCBwb2ludHMuam9pbignICcpXTsKfQoKZnVuY3Rpb24gQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpIHsKICBsZXQgcGFkSW5kZXggPSBjcmVmLmVsZW1lbnQucGFkcy5saXN0LnJhdy5maWx0ZXIoZSA9PiBlLnRhZ05hbWUgPT0gJ3BhZCcpLmluZGV4T2YoY3JlZi5wYWQucmF3KTsKICBsZXQgeyBuYW1lIH0gPSBjcmVmLmVsZW1lbnQ7CiAgcmV0dXJuIGAke25hbWV9LiR7cGFkSW5kZXggKyAxfWA7Cn0KCmZ1bmN0aW9uIFNpZ25hbDJDaXJjdWl0KHMpIHsKICBsZXQgeyBuYW1lLCBjb250YWN0cmVmcyB9ID0gczsKCiAgbGV0IGNvbnRhY3RzID0gJyc7CiAgbGV0IFtmaXJzdENvbnRhY3QsIC4uLnJlc3RPZkNvbnRhY3RzXSA9IGNvbnRhY3RyZWZzOwoKICBpZihyZXN0T2ZDb250YWN0cy5sZW5ndGggPT0gMCkgcmV0dXJuICcnOwoKICBmb3IobGV0IGNvbnRhY3Qgb2YgcmVzdE9mQ29udGFjdHMpIHsKICAgIGNvbnRhY3RzICs9IGAke0NvbnRhY3RyZWYyQ2lyY3VpdChmaXJzdENvbnRhY3QpfVx0JHtDb250YWN0cmVmMkNpcmN1aXQoY29udGFjdCl9XG5gOwogIH0KICByZXR1cm4gYCMgU2lnbmFsICR7bmFtZX1cbmAgKyBjb250YWN0cyArICdcbic7Cn0KCmZ1bmN0aW9uIEVsZW1lbnQyQ2lyY3VpdChlbGVtZW50KSB7CiAgbGV0IFtwYWNrYWdlTmFtZV0gPSBQYWNrYWdlMkNpcmN1aXQoZWxlbWVudC5wYWNrYWdlKTsKICBsZXQgbmFtZSA9IEVsZW1lbnROYW1lKGVsZW1lbnQpOwogIGxldCB7IHgsIHkgfSA9IGVsZW1lbnQ7CgogIHJldHVybiBgJHtuYW1lLnBhZEVuZCg4KX0gJHtwYWNrYWdlTmFtZS5wYWRFbmQoMTYpfSR7KHggLyAyLjU0KS50b0ZpeGVkKDApfSwkeyh5IC8gMi41NCkudG9GaXhlZCgwKX1cbmA7CgogIC8vIHJldHVybiBbRWxlbWVudE5hbWUoZWxlbWVudCksIFsuLi5lbGVtZW50LnBhZHMubGlzdF0ubWFwKCh7IHgsIHkgfSkgPT4gYCR7eCAvIDIuNTR9LCR7eSAvIDIuNTR9YCkuam9pbignICcpXTsKfQoKZnVuY3Rpb24gR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpIHsKICByZXR1cm4gdW5pcXVlKGRvYy5lbGVtZW50cy5saXN0Lm1hcChlID0+IGUucGFja2FnZSkpOwp9CgpmdW5jdGlvbiBHZXRQYWNrYWdlUGl0Y2gocGtnKSB7CiAgbGV0IHBvaW50cyA9IHBrZy5wYWRzLmxpc3QubWFwKHBhZCA9PiBuZXcgUG9pbnQocGFkKSk7CgogIGlmKHBvaW50cy5sZW5ndGggPT0gMikgcmV0dXJuIFBvaW50LmRpc3RhbmNlKC4uLnBvaW50cyk7CgogIGxldCBzbWFsbGVzdCA9IEluZmluaXR5OwoKICBmb3IobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7CiAgICBmb3IobGV0IGogPSAwOyBqIDwgcG9pbnRzLmxlbmd0aDsgaisrKSB7CiAgICAgIGlmKGkgPT0gaikgY29udGludWU7CgogICAgICBsZXQgZGlzdCA9IFBvaW50LmRpc3RhbmNlKHBvaW50c1tpXSwgcG9pbnRzW2pdKTsKICAgICAgaWYoc21hbGxlc3QgPiBkaXN0KSBzbWFsbGVzdCA9IGRpc3Q7CiAgICB9CiAgfQoKICBpZihOdW1iZXIuaXNGaW5pdGUoc21hbGxlc3QpKSByZXR1cm4gc21hbGxlc3Q7Cn0KCmZ1bmN0aW9uIEVhZ2xlMkNpcmN1aXQoZG9jID0gcHJvamVjdC5ib2FyZCwgd2lkdGggPSAxMDAsIGhlaWdodCA9IDEwMCkgewogIGxldCBvID0gJyc7CgogIG8gKz0gYCMgU3RyaXBib2FyZAojIGJvYXJkIDx3aWR0aD4sPGhlaWdodD4KCmJvYXJkICR7d2lkdGh9LCR7aGVpZ2h0fQoKYDsKCiAgbyArPSBgIyBQYWNrYWdlcwojIDxwYWNrYWdlIG5hbWU+IDxwaW4gY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gcGluIDA+CgpgOwoKICBvICs9IFB1dFJvd3NDb2x1bW5zKEdldFVzZWRQYWNrYWdlcyhkb2MpLm1hcChQYWNrYWdlMkNpcmN1aXQpKTsKICBvICs9ICdcblxuJzsKCiAgbyArPSBgIyBDb21wb25lbnRzCiMgPGNvbXBvbmVudCBuYW1lPiA8cGFja2FnZSBuYW1lPiA8YWJzb2x1dGUgcG9zaXRpb24gb2YgY29tcG9uZW50IHBpbiAwPgpgOwogIGZvcihsZXQgZWxlbWVudCBvZiBkb2MuZWxlbWVudHMubGlzdCkgbyArPSBFbGVtZW50MkNpcmN1aXQoZWxlbWVudCk7CgogIG8gKz0gYAojIENvbm5lY3Rpb25zCiMgPGZyb20gY29tcG9uZW50IG5hbWU+LjxwaW4gaW5kZXg+IDx0byBjb21wb25lbnQgbmFtZT4uPHBpbiBpbmRleD4KYDsKICBmb3IobGV0IHNpZ25hbCBvZiBkb2Muc2lnbmFscy5saXN0KSBvICs9IFNpZ25hbDJDaXJjdWl0KHNpZ25hbCk7CgogIHJldHVybiBvOwp9CgpmdW5jdGlvbiBFYWdsZTJDaXJjdWl0SlMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMsIHNjYWxlID0gNTAsIHNoZWV0ID0gMCkgewogIGxldCBjaXJjID0gbmV3IENpcmN1aXRKUygpOwogIGxldCBzaGVldHMgPSBHZXRTaGVldHMoZG9jKTsKICBjb25zb2xlLmxvZygnc2hlZXRzJywgc2hlZXRzKTsKICBsZXQgc2ggPSAoZ2xvYmFsVGhpcy5zaGVldCA9IHNoZWV0c1tzaGVldF0pOwogIGNvbnNvbGUubG9nKCdzaCcsIHNoKTsKICBsZXQgdHJlZSA9IHNoLnJhdzsKCiAgZm9yKGxldCBbZWxtLCBwdHJdIG9mIGRlZXAuaXRlcmF0ZSh0cmVlLCBuID0+ICd4MScgaW4gbi5hdHRyaWJ1dGVzICYmIG4uYXR0cmlidXRlcy5sYXllciA9PSA5MSkpIHsKICAgIGxldCBsbiA9IG5ldyBMaW5lKGVsbS5hdHRyaWJ1dGVzKS5tdWwoc2NhbGUgLyAyLjU0KS5yb3VuZCgpOwoKICAgIHB0ciA9IHB0ci5zbGljZSgwLCAtMik7CiAgICBsZXQgc2VnbWVudEluZGV4ID0gcHRyW3B0ci5sZW5ndGggLSAxXTsKICAgIGxldCBzZWdtZW50ID0gZGVlcC5nZXQodHJlZSwgcHRyKTsKICAgIGxldCBuZXQgPSBkZWVwLmdldCh0cmVlLCBwdHIuc2xpY2UoMCwgLTIpKTsKCiAgICAvL2NvbnNvbGUubG9nKCdsbicsbG4sZWxtLmF0dHJpYnV0ZXMubGF5ZXIpOwogICAgY29uc29sZS5sb2coJ3NlZ21lbnQvbmV0JywgewogICAgICBzZWdtZW50OiBzZWdtZW50SW5kZXgsCiAgICAgIG5ldDogbmV0LmF0dHJpYnV0ZXMubmFtZQogICAgfSk7CgogICAgY2lyYy5hZGQoJ3cnLCAuLi5sbiwgMCk7CiAgfQoKICAvKmZvcihsZXQgW2VsbSwgcHRyXSBvZiBkZWVwLml0ZXJhdGUodHJlZSwgbiA9PiAneCcgaW4gbi5hdHRyaWJ1dGVzKSkgewogICAgbGV0IHB0ID0gbmV3IFBvaW50KGVsbS5hdHRyaWJ1dGVzKS5tdWwoc2NhbGUgLyAyLjU0KS5yb3VuZCgpOwogICAgY29uc29sZS5sb2coZWxtLnRhZ05hbWUsIGVsbS5hdHRyaWJ1dGVzKTsKCiAgICBjaXJjLmFkZCgncicsIC4uLnB0LCAwKTsKICB9Ki8KICBsZXQgaW5zdGFuY2VzID0gc2guY2hpbGRyZW4uZmluZChlID0+IGUudGFnTmFtZSA9PSAnaW5zdGFuY2VzJykuY2hpbGRyZW47CgogIGNvbnNvbGUubG9nKCdpbnN0YW5jZXMnLCBpbnN0YW5jZXMpOwogIGZvcihsZXQgW25hbWUsIGluc3RhbmNlXSBvZiBpbnN0YW5jZXMpIHsKICAgIGNvbnNvbGUubG9nKGBpbnN0YW5jZSAnJHtuYW1lfSdgLCBjb25zb2xlLmNvbmZpZyh7IGRlcHRoOiAwIH0pLCBpbnN0YW5jZSk7CiAgfQogIHJldHVybiBjaXJjOwp9CgovL2NhbGxNYWluKG1haW4sIHRydWUpOwoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7CiAgcHJvY2Vzcy5leGl0KDEpOwp9CgAAAAAAAAAAQpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9iAAAAAAAAD2IAAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"left_delete",
					null,
					"AQAAABoLAAAAAAAAGgsAAAAAAAAUAAAAcXVpY2tqcy9xanMtbW9kdWxlcy8",
					"AQAAAAAAAAABAAAAGgsAAAAAAAAuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": "xml/"
					},
					"BAAAAB4LAAAAAAAAHwsAAAAAAAAAAAAAHwsAAAAAAAAgCwAAAAAAAAAAAAAgCwAAAAAAACELAAAAAAAAAAAAACELAAAAAAAAIgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgsAAAAAAAAeCwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/xml/xpath.js",
			"settings":
			{
				"buffer_size": 12291,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/json/path.js",
			"settings":
			{
				"buffer_size": 18765,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					95,
					1,
					"insert",
					{
						"characters": "this"
					},
					"BQAAAG0jAAAAAAAAbiMAAAAAAAAAAAAAbiMAAAAAAABuIwAAAAAAAAEAAABhbiMAAAAAAABvIwAAAAAAAAAAAABvIwAAAAAAAHAjAAAAAAAAAAAAAHAjAAAAAAAAcSMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbSMAAAAAAABuIwAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"cut",
					null,
					"AQAAANoiAAAAAAAA2iIAAAAAAAAOAAAAbGV0IGEgPSB0aGlzOwo",
					"AQAAAAAAAAABAAAA2iIAAAAAAADoIgAAAAAAAAAAAAAAAEBA"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAANoiAAAAAAAA2yIAAAAAAAAAAAAA2yIAAAAAAADcIgAAAAAAAAAAAADcIgAAAAAAAN0iAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2iIAAAAAAADaIgAAAAAAAAAAAAAAAEBA"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " a;"
					},
					"AwAAAN0iAAAAAAAA3iIAAAAAAAAAAAAA3iIAAAAAAADfIgAAAAAAAAAAAADfIgAAAAAAAOAiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3SIAAAAAAADdIgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/ref.js",
			"settings":
			{
				"buffer_size": 3417,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAdDQAAaW1wb3J0IHsgdG9YTUwgfSBmcm9tICcuLi9qc29uLmpzJzsKaW1wb3J0IHsgdGV4dCwgY29uY2F0IH0gZnJvbSAnLi9jb21tb24uanMnOwppbXBvcnQgeyBQb2ludGVyIGFzIEltbXV0YWJsZVBhdGggfSBmcm9tICcuLi9wb2ludGVyLmpzJzsKaW1wb3J0IHsgSW1tdXRhYmxlWFBhdGggfSBmcm9tICcuLi94bWwveHBhdGguanMnOwoKZXhwb3J0IGNvbnN0IENoaWxkcmVuU3ltID0gU3ltYm9sKCfiirMnKTsKCmV4cG9ydCBjbGFzcyBFYWdsZVJlZmVyZW5jZSB7CiAgY29uc3RydWN0b3Iocm9vdCwgcGF0aCwgY2hlY2sgPSB0cnVlKSB7CiAgICBpZihwYXRoIGluc3RhbmNlb2YgSW1tdXRhYmxlWFBhdGgpIHBhdGggPSBbLi4ucGF0aC50b1BvaW50ZXIocm9vdCldOwoKICAgIGlmKCEocGF0aCBpbnN0YW5jZW9mIEltbXV0YWJsZVBhdGgpKSBwYXRoID0gbmV3IEltbXV0YWJsZVBhdGgocGF0aCk7CiAgICB0aGlzLnBhdGggPSBwYXRoOwogICAgdGhpcy5yb290ID0gcm9vdDsKICAgIC8vY29uc29sZS5sb2coJ0VhZ2xlUmVmZXJlbmNlJywgeyByb290OiBhYmJyZXZpYXRlKHRvWE1MKHJvb3QpLCAxMCksIHBhdGggfSk7CiAgICBpZihjaGVjayAmJiAhdGhpcy5kZXJlZmVyZW5jZSh0cnVlKSkgewogICAgICAvL2NvbnNvbGUubG9nKCdkZXJlZmVyZW5jZTonLCB7IHBhdGgsIHJvb3Q6IGFiYnJldmlhdGUodG9YTUwocm9vdCksIDEwKSB9KTsKICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMucm9vdC50YWdOYW1lICsgJyAnICsgdGhpcy5wYXRoKTsKICAgIH0KICB9CgogIGdldCB0eXBlKCkgewogICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGgubGFzdCA9PSAnbnVtYmVyJyA/IEFycmF5IDogT2JqZWN0OwogIH0KCiAgZ2V0UGF0aChyb290KSB7CiAgICBsZXQgcGF0aCA9IG5ldyBJbW11dGFibGVQYXRoKCk7CiAgICBsZXQgcmVmID0gdGhpczsKICAgIGRvIHsKICAgICAgcGF0aCA9IHJlZi5wYXRoLmNvbmNhdChwYXRoKTsKICAgICAgaWYocm9vdCA9PT0gdW5kZWZpbmVkIHx8IHJvb3QgPT0gcmVmKSBicmVhazsKICAgIH0gd2hpbGUodHJ1ZSk7CiAgICByZXR1cm4gcGF0aDsKICB9CgogIGRlcmVmZXJlbmNlKG5vVGhyb3cpIHsKICAgIGNvbnN0IHsgcGF0aCwgcm9vdCB9ID0gdGhpczsKICAgIGxldCByOwogICAgdHJ5IHsKICAgICAgciA9IChpc09iamVjdChyb290KSAmJiAnb3duZXInIGluIHJvb3QgJiYgcGF0aC5kZXJlZihyb290Lm93bmVyLCB0cnVlKSkgfHwgcGF0aC5kZXJlZihyb290KTsKICAgIH0gY2F0Y2goZXJyKSB7CiAgICAgIGlmKCFub1Rocm93KSB0aHJvdyBlcnI7CiAgICAgIC8vY29uc29sZS5sb2coJ2VycjonLCBlcnIubWVzc2FnZSwgZXJyLnN0YWNrKTsKICAgIH0KICAgIHJldHVybiByOwogIH0KCiAgcmVwbGFjZSh2YWx1ZSkgewogICAgY29uc3Qgb2JqID0gdGhpcy5wYXRoLnVwKCkuYXBwbHkodGhpcy5yb290KTsKICAgIHJldHVybiAob2JqW3RoaXMucGF0aC5sYXN0XSA9IHZhbHVlKTsKICB9CgogIGVudHJ5KCkgewogICAgaWYodGhpcy5wYXRoLnNpemUgPiAwKSB7CiAgICAgIGxldCBrZXkgPSB0aGlzLnBhdGgubGFzdDsKICAgICAgbGV0IG9iaiA9IHRoaXMucGF0aC51cCgpLmFwcGx5KHRoaXMucm9vdCk7CiAgICAgIHJldHVybiBbb2JqW2tleV0sIGtleSwgb2JqXTsKICAgIH0KICAgIHJldHVybiBbdGhpcy5yb290XTsKICB9CgogIGdldCBwYXJlbnQoKSB7CiAgICByZXR1cm4gRWFnbGVSZWYodGhpcy5yb290LCB0aGlzLnBhdGguc2xpY2UoMCwgLTEpKTsKICB9CgogIGdldCBwcmV2U2libGluZygpIHsKICAgIHJldHVybiBFYWdsZVJlZih0aGlzLnJvb3QsIHRoaXMucGF0aC5wcmV2U2libGluZyk7CiAgfQogIGdldCBuZXh0U2libGluZygpIHsKICAgIHJldHVybiBFYWdsZVJlZih0aGlzLnJvb3QsIHRoaXMucGF0aC5uZXh0U2libGluZyk7CiAgfQoKICBnZXQgZmlyc3RDaGlsZCgpIHsKICAgIHJldHVybiBFYWdsZVJlZih0aGlzLnJvb3QsIHRoaXMucGF0aC5maXJzdENoaWxkKTsKICB9CiAgZ2V0IGxhc3RDaGlsZCgpIHsKICAgIHJldHVybiBFYWdsZVJlZih0aGlzLnJvb3QsIHRoaXMucGF0aC5sYXN0Q2hpbGQpOwogIH0KCiAgZG93biguLi5hcmdzKSB7CiAgICAvLyByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKHRoaXMsIGFyZ3MpOwogICAgcmV0dXJuIG5ldyBFYWdsZVJlZmVyZW5jZSh0aGlzLnJvb3QsIHRoaXMucGF0aC5jb25jYXQoYXJncyksIGZhbHNlKTsKICB9CiAgdXAobiA9IDEpIHsKICAgIHJldHVybiBuZXcgRWFnbGVSZWZlcmVuY2UodGhpcy5yb290LCB0aGlzLnBhdGgudXAobiksIGZhbHNlKTsKICB9CiAgbGVmdChuKSB7CiAgICByZXR1cm4gbmV3IEVhZ2xlUmVmZXJlbmNlKHRoaXMucm9vdCwgdGhpcy5wYXRoLmxlZnQobiksIGZhbHNlKTsKICB9CiAgcmlnaHQobikgewogICAgcmV0dXJuIG5ldyBFYWdsZVJlZmVyZW5jZSh0aGlzLnJvb3QsIHRoaXMucGF0aC5yaWdodChuKSwgZmFsc2UpOwogIH0KCiAgc2hpZnQobiA9IDEpIHsKICAgIGxldCByb290ID0gdGhpcy5yb290OwogICAgaWYobiA8IDApIG4gPSB0aGlzLnBhdGgubGVuZ3RoICsgbjsKICAgIGZvcihsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgbGV0IGsgPSB0aGlzLnBhdGhbaV07CiAgICAgIHJvb3QgPSByb290W2tdOwogICAgfQogICAgcmV0dXJuIG5ldyBFYWdsZVJlZmVyZW5jZShyb290LCB0aGlzLnBhdGguc2xpY2UobikpOwogIH0KCiAgW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldKCkgewogICAgcmV0dXJuIHRleHQoY2xhc3NOYW1lKHRoaXMpLCAzOCwgNSwgMjE5KSArICcgeyAnICsgdGhpcy5wYXRoW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldKCkgKyBgICwgcm9vdDoke2FiYnJldmlhdGUodG9YTUwodGhpcy5yb290LCAwKSwgNDApfSAgfWA7CiAgfQogIGluc3BlY3QoKSB7CiAgICByZXR1cm4gdGhpc1tTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSguLi5hcmd1bWVudHMpOwogIH0KfQoKZXhwb3J0IGNvbnN0IEVhZ2xlUmVmID0gZnVuY3Rpb24gRWFnbGVSZWYocm9vdCwgcGF0aCkgewogIGlmKGlzT2JqZWN0KHJvb3QpICYmIGlzT2JqZWN0KHJvb3Qucm9vdCkpIHJvb3QgPSByb290LnJvb3Q7CiAgLy9jb25zb2xlLmxvZygnRWFnbGVSZWYnLCB7IHJvb3QsIHBhdGggfSk7CiAgbGV0IG9iaiA9IG5ldyBFYWdsZVJlZmVyZW5jZShyb290LCBwYXRoKTsKICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvYmopOwp9OwoKT2JqZWN0LmFzc2lnbihFYWdsZVJlZmVyZW5jZS5wcm90b3R5cGUsIHsgZGVyZWY6IEVhZ2xlUmVmZXJlbmNlLnByb3RvdHlwZS5kZXJlZmVyZW5jZSB9KTsKAAAAAAAAAABZDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/dom/element.js",
			"settings":
			{
				"buffer_size": 35545,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/element.js",
			"settings":
			{
				"buffer_size": 33278,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					35,
					1,
					"cut",
					null,
					"AQAAABQAAAAAAAAAFAAAAAAAAAASAAAAZGVjb2RlSFRNTEVudGl0aWVz",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAABQAAAAAAAAAJgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMYDAAAAAAAAxwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgMAAAAAAADGAwAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAAMYDAAAAAAAArgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgMAAAAAAADGAwAAAAAAAAAAAAAAAAAA"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMYDAAAAAAAAxwMAAAAAAAAAAAAAxwMAAAAAAADIAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgMAAAAAAADGAwAAAAAAAAAAAAAAAAAA"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAMcDAAAAAAAAyAMAAAAAAAAAAAAAyAMAAAAAAADJAwAAAAAAAAAAAADJAwAAAAAAAMoDAAAAAAAAAAAAAMoDAAAAAAAAywMAAAAAAAAAAAAAywMAAAAAAADMAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwMAAAAAAADHAwAAAAAAAAAAAAAAAAAA"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " decode"
					},
					"BwAAAMwDAAAAAAAAzQMAAAAAAAAAAAAAzQMAAAAAAADOAwAAAAAAAAAAAADOAwAAAAAAAM8DAAAAAAAAAAAAAM8DAAAAAAAA0AMAAAAAAAAAAAAA0AMAAAAAAADRAwAAAAAAAAAAAADRAwAAAAAAANIDAAAAAAAAAAAAANIDAAAAAAAA0wMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAMAAAAAAADMAwAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert_completion",
					{
						"completion": "decodeHTMLEntities",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "decodeHTMLEntities"
					},
					"AgAAAM0DAAAAAAAAzQMAAAAAAAAGAAAAZGVjb2RlzQMAAAAAAADfAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wMAAAAAAADTAwAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "=s=>s"
					},
					"BQAAAN8DAAAAAAAA4AMAAAAAAAAAAAAA4AMAAAAAAADhAwAAAAAAAAAAAADhAwAAAAAAAOIDAAAAAAAAAAAAAOIDAAAAAAAA4wMAAAAAAAAAAAAA4wMAAAAAAADkAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wMAAAAAAADfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					2,
					"right_delete",
					null,
					"AgAAAOQDAAAAAAAA5AMAAAAAAAABAAAACuQDAAAAAAAA5AMAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA5AMAAAAAAADkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAOQDAAAAAAAA5QMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AMAAAAAAADkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMwEAAAAAAAAzQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAQAAAAAAADMBAAAAAAAAAAAAAAAAG5A"
				],
				[
					73,
					2,
					"right_delete",
					null,
					"AgAAABQAAAAAAAAAFAAAAAAAAAASAAAAZGVjb2RlSFRNTEVudGl0aWVzFAAAAAAAAAAUAAAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAAwEAAAAAAAADQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAQAAAAAAAAMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAALoEAAAAAAAAuwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugQAAAAAAAC6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": " v=>"
					},
					"BAAAAEAYAAAAAAAAQRgAAAAAAAAAAAAAQRgAAAAAAABCGAAAAAAAAAAAAABCGAAAAAAAAEMYAAAAAAAAAAAAAEMYAAAAAAAARBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQBgAAAAAAABAGAAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": " v!=="
					},
					"BQAAAEQYAAAAAAAARRgAAAAAAAAAAAAARRgAAAAAAABGGAAAAAAAAAAAAABGGAAAAAAAAEcYAAAAAAAAAAAAAEcYAAAAAAAASBgAAAAAAAAAAAAASBgAAAAAAABJGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBgAAAAAAABEGAAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " undefined"
					},
					"CgAAAEkYAAAAAAAAShgAAAAAAAAAAAAAShgAAAAAAABLGAAAAAAAAAAAAABLGAAAAAAAAEwYAAAAAAAAAAAAAEwYAAAAAAAATRgAAAAAAAAAAAAATRgAAAAAAABOGAAAAAAAAAAAAABOGAAAAAAAAE8YAAAAAAAAAAAAAE8YAAAAAAAAUBgAAAAAAAAAAAAAUBgAAAAAAABRGAAAAAAAAAAAAABRGAAAAAAAAFIYAAAAAAAAAAAAAFIYAAAAAAAAUxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASRgAAAAAAABJGAAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAFMYAAAAAAAAVBgAAAAAAAAAAAAAVBgAAAAAAABVGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUxgAAAAAAABTGAAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAFUYAAAAAAAAVhgAAAAAAAAAAAAAVhgAAAAAAABXGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVRgAAAAAAABVGAAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAFcYAAAAAAAAWBgAAAAAAAAAAAAAWBgAAAAAAABYGAAAAAAAAD4AAABpZlRoZW5FbHNlKAogICAgICAgICAgICB2ID0+IHYgIT09IHVuZGVmaW5lZCwKICAgICAgICAgICAgdiA9Pg",
					"AQAAAAAAAAABAAAAVxgAAAAAAACVGAAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"left_delete",
					null,
					"AQAAAHEYAAAAAAAAcRgAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAchgAAAAAAAByGAAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAHEYAAAAAAAAchgAAAAAAAAAAAAAchgAAAAAAABzGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRgAAAAAAABxGAAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMYAAAAAAAAdBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcxgAAAAAAABzGAAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					18,
					"right_delete",
					null,
					"EgAAAHQYAAAAAAAAdBgAAAAAAAABAAAACnQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAKHQYAAAAAAAAdBgAAAAAAAABAAAAKXQYAAAAAAAAdBgAAAAAAAABAAAAIHQYAAAAAAAAdBgAAAAAAAABAAAAPXQYAAAAAAAAdBgAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAdBgAAAAAAAB0GAAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"left_delete",
					null,
					"AQAAAIcYAAAAAAAAhxgAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAiBgAAAAAAACIGAAAAAAAAP///////+9/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAIcYAAAAAAAAiBgAAAAAAAAAAAAAiBgAAAAAAACJGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxgAAAAAAACHGAAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"left_delete",
					null,
					"AQAAAIoYAAAAAAAAihgAAAAAAAANAAAAICAgICAgICAgICk7Cg",
					"AQAAAAAAAAABAAAAihgAAAAAAACXGAAAAAAAAAAAAAAAAAAA"
				],
				[
					155,
					1,
					"cut",
					null,
					"AQAAAK0YAAAAAAAArRgAAAAAAAALAAAAaWZUaGVuRWxzZSg",
					"AQAAAAAAAAABAAAArRgAAAAAAAC4GAAAAAAAAP///////+9/"
				],
				[
					158,
					1,
					"left_delete",
					null,
					"AQAAAM4YAAAAAAAAzhgAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAzxgAAAAAAADPGAAAAAAAAP///////+9/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAM4YAAAAAAAAzxgAAAAAAAAAAAAAzxgAAAAAAADQGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzhgAAAAAAADOGAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANAYAAAAAAAA0RgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0BgAAAAAAADQGAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					16,
					"right_delete",
					null,
					"EAAAANEYAAAAAAAA0RgAAAAAAAABAAAACtEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAdtEYAAAAAAAA0RgAAAAAAAABAAAAINEYAAAAAAAA0RgAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAA0RgAAAAAAADRGAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"right_delete",
					null,
					"AQAAANEYAAAAAAAA0RgAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAA0RgAAAAAAADRGAAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"left_delete",
					null,
					"AQAAAN4YAAAAAAAA3hgAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA3xgAAAAAAADfGAAAAAAAAP///////+9/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAN4YAAAAAAAA3xgAAAAAAAAAAAAA3xgAAAAAAADgGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hgAAAAAAADeGAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOAYAAAAAAAA4RgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BgAAAAAAADgGAAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAOEYAAAAAAAA4hgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RgAAAAAAADhGAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOIYAAAAAAAA5BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hgAAAAAAADiGAAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAOIYAAAAAAAA4hgAAAAAAAABAAAAKOIYAAAAAAAA4hgAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA4xgAAAAAAADjGAAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"left_delete",
					null,
					"AQAAAOEYAAAAAAAA4RgAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA4hgAAAAAAADiGAAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOEYAAAAAAAA4xgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RgAAAAAAADhGAAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"right_delete",
					null,
					"AQAAAOIYAAAAAAAA4hgAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA4hgAAAAAAADiGAAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAH0ZAAAAAAAAfhkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRkAAAAAAAB9GQAAAAAAAAAAAAAAAHpA"
				],
				[
					175,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAH4ZAAAAAAAAgBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfhkAAAAAAAB+GQAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIAZAAAAAAAAgRkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgBkAAAAAAACAGQAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"left_delete",
					null,
					"AQAAAIIZAAAAAAAAghkAAAAAAAANAAAAICAgICAgICAgICk7Cg",
					"AQAAAAAAAAABAAAAghkAAAAAAACPGQAAAAAAAAAAAAAAAAAA"
				],
				[
					208,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+QgAAAAAAAD5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJ4WAAAAAAAAnxYAAAAAAAAAAAAAnxYAAAAAAACfFgAAAAAAAAwAAAAgaWZUaGVuRWxzZSg",
					"AQAAAAAAAAABAAAAnhYAAAAAAACqFgAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"left_delete",
					null,
					"AQAAAMAWAAAAAAAAwBYAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAwRYAAAAAAADBFgAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAMAWAAAAAAAAwRYAAAAAAAAAAAAAwRYAAAAAAADCFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwBYAAAAAAADAFgAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMIWAAAAAAAAwxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhYAAAAAAADCFgAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					17,
					"right_delete",
					null,
					"EQAAAMMWAAAAAAAAwxYAAAAAAAABAAAACsMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAdsMWAAAAAAAAwxYAAAAAAAABAAAAIMMWAAAAAAAAwxYAAAAAAAABAAAAPcMWAAAAAAAAwxYAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAwxYAAAAAAADDFgAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"left_delete",
					null,
					"AQAAAPUWAAAAAAAA9RYAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA9hYAAAAAAAD2FgAAAAAAAP///////+9/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAPUWAAAAAAAA9hYAAAAAAAAAAAAA9hYAAAAAAAD3FgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9RYAAAAAAAD1FgAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPcWAAAAAAAA+BYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9xYAAAAAAAD3FgAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPgWAAAAAAAA+hYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+BYAAAAAAAD4FgAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"right_delete",
					null,
					"AQAAAPkWAAAAAAAA+RYAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA+RYAAAAAAAD5FgAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKQXAAAAAAAApRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApBcAAAAAAACkFwAAAAAAAAAAAAAAQIZA"
				],
				[
					229,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKUXAAAAAAAApxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApRcAAAAAAAClFwAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKcXAAAAAAAAqBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxcAAAAAAACnFwAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"right_delete",
					null,
					"AQAAAKkXAAAAAAAAqRcAAAAAAAANAAAAICAgICAgICAgICk7Cg",
					"AQAAAAAAAAABAAAAqRcAAAAAAAC2FwAAAAAAAAAAAAAAAAAA"
				],
				[
					235,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AwAAAM0XAAAAAAAAzhcAAAAAAAAAAAAAzhcAAAAAAADWFwAAAAAAAAAAAADWFwAAAAAAANgXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRcAAAAAAACpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPYXAAAAAAAA9xcAAAAAAAAAAAAAzhcAAAAAAADOFwAAAAAAAAoAAAAgICAgICAgICAg",
					"AQAAAAAAAAABAAAA9hcAAAAAAAD2FwAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"cut",
					null,
					"AQAAAO0XAAAAAAAA7RcAAAAAAAAMAAAAIGlmVGhlbkVsc2Uo",
					"AQAAAAAAAAABAAAA7RcAAAAAAAD5FwAAAAAAAP///////+9/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO0XAAAAAAAA7hcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7RcAAAAAAADtFwAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					2,
					"right_delete",
					null,
					"AgAAAO4XAAAAAAAA7hcAAAAAAAABAAAACu4XAAAAAAAA7hcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA7hcAAAAAAADuFwAAAAAAAAAAAAAAAPC/"
				],
				[
					261,
					1,
					"left_delete",
					null,
					"AQAAAAcYAAAAAAAABxgAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAACBgAAAAAAAAIGAAAAAAAAP///////+9/"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAAcYAAAAAAAACBgAAAAAAAAAAAAACBgAAAAAAAAJGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABxgAAAAAAAAHGAAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAkYAAAAAAAAChgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACRgAAAAAAAAJGAAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					19,
					"right_delete",
					null,
					"EwAAAAoYAAAAAAAAChgAAAAAAAABAAAACgoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAKAoYAAAAAAAAChgAAAAAAAABAAAAKQoYAAAAAAAAChgAAAAAAAABAAAAIAoYAAAAAAAAChgAAAAAAAABAAAAPQoYAAAAAAAAChgAAAAAAAABAAAAPgoYAAAAAAAAChgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAChgAAAAAAAAKGAAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					1,
					"left_delete",
					null,
					"AQAAABAYAAAAAAAAEBgAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAERgAAAAAAAARGAAAAAAAAP///////+9/"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAABAYAAAAAAAAERgAAAAAAAAAAAAAERgAAAAAAAASGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBgAAAAAAAAQGAAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABIYAAAAAAAAExgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEhgAAAAAAAASGAAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					18,
					"right_delete",
					null,
					"EgAAABMYAAAAAAAAExgAAAAAAAABAAAAChMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAdhMYAAAAAAAAExgAAAAAAAABAAAAIBMYAAAAAAAAExgAAAAAAAABAAAAPRMYAAAAAAAAExgAAAAAAAABAAAAPhMYAAAAAAAAExgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAExgAAAAAAAATGAAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABUYAAAAAAAAFhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFRgAAAAAAAAVGAAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"right_delete",
					null,
					"AQAAABcYAAAAAAAAFxgAAAAAAAANAAAAICAgICAgICAgICk7Cg",
					"AQAAAAAAAAABAAAAFxgAAAAAAAAkGAAAAAAAAAAAAAAAAAAA"
				],
				[
					276,
					1,
					"left_delete",
					null,
					"AQAAAM0XAAAAAAAAzRcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAzhcAAAAAAADOFwAAAAAAAAAAAAAAAAAA"
				],
				[
					281,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAzRcAAAAAAADNFwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/project.js",
			"settings":
			{
				"buffer_size": 7861,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEYPAAAAAAAARw8AAAAAAAAAAAAARw8AAAAAAABIDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARg8AAAAAAABGDwAAAAAAAAAAAAAAACBA"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAAEcPAAAAAAAASA8AAAAAAAAAAAAASA8AAAAAAABJDwAAAAAAAAAAAABJDwAAAAAAAEoPAAAAAAAAAAAAAEoPAAAAAAAASw8AAAAAAAAAAAAASw8AAAAAAABMDwAAAAAAAAAAAABMDwAAAAAAAE0PAAAAAAAAAAAAAE0PAAAAAAAATg8AAAAAAAAAAAAATg8AAAAAAABPDwAAAAAAAAAAAABPDwAAAAAAAFAPAAAAAAAAAAAAAFAPAAAAAAAAUQ8AAAAAAAAAAAAAUQ8AAAAAAABSDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARw8AAAAAAABHDwAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFIPAAAAAAAAVA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUg8AAAAAAABSDwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAFMPAAAAAAAAVQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUw8AAAAAAABTDwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "findDop"
					},
					"BwAAAFQPAAAAAAAAVQ8AAAAAAAAAAAAAVQ8AAAAAAABWDwAAAAAAAAAAAABWDwAAAAAAAFcPAAAAAAAAAAAAAFcPAAAAAAAAWA8AAAAAAAAAAAAAWA8AAAAAAABZDwAAAAAAAAAAAABZDwAAAAAAAFoPAAAAAAAAAAAAAFoPAAAAAAAAWw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVA8AAAAAAABUDwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"left_delete",
					null,
					"AQAAAFoPAAAAAAAAWg8AAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAWw8AAAAAAABbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAFoPAAAAAAAAWw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWg8AAAAAAABaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "findDocument",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "findDocument"
					},
					"AgAAAFQPAAAAAAAAVA8AAAAAAAAHAAAAZmluZERvY1QPAAAAAAAAYA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWw8AAAAAAABbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ",pred"
					},
					"BQAAAGEPAAAAAAAAYg8AAAAAAAAAAAAAYg8AAAAAAABjDwAAAAAAAAAAAABjDwAAAAAAAGQPAAAAAAAAAAAAAGQPAAAAAAAAZQ8AAAAAAAAAAAAAZQ8AAAAAAABmDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQ8AAAAAAABhDwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGcPAAAAAAAAaA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZw8AAAAAAABnDwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"cut",
					null,
					"AQAAAEcPAAAAAAAARw8AAAAAAAAiAAAAY29uc29sZS5sb2coJ2ZpbmREb2N1bWVudCcscHJlZCk7Cg",
					"AQAAAAAAAAABAAAARw8AAAAAAABpDwAAAAAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"paste",
					null,
					"AQAAAEYOAAAAAAAAaA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARg4AAAAAAABGDgAAAAAAAAAAAAAAAAAA"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGgOAAAAAAAAaQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaA4AAAAAAABoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAGUOAAAAAAAAZg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQ4AAAAAAABlDgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAGYOAAAAAAAAaA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZg4AAAAAAABmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"paste",
					null,
					"AQAAAJEPAAAAAAAAtg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQ8AAAAAAACRDwAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AgAAAKwPAAAAAAAArA8AAAAAAAAEAAAAcHJlZKwPAAAAAAAAsg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArA8AAAAAAACwDwAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BQAAAK0PAAAAAAAArg8AAAAAAAAAAAAArg8AAAAAAACuDwAAAAAAAAQAAABwcmVkrg8AAAAAAACvDwAAAAAAAAAAAACvDwAAAAAAALAPAAAAAAAAAAAAALAPAAAAAAAAsQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQ8AAAAAAACxDwAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					3,
					"right_delete",
					null,
					"AwAAALIPAAAAAAAAsg8AAAAAAAABAAAAK7IPAAAAAAAAsg8AAAAAAAABAAAAJ7IPAAAAAAAAsg8AAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAsg8AAAAAAACyDwAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJEPAAAAAAAAkg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQ8AAAAAAACRDwAAAAAAAAAAAAAAAAAA"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAJIPAAAAAAAAkw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkg8AAAAAAACSDwAAAAAAAAAAAAAAAAAA"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAJIPAAAAAAAAkg8AAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAkw8AAAAAAACTDwAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DAAAALMGAAAAAAAAtAYAAAAAAAAAAAAAtAYAAAAAAAC1BgAAAAAAAAAAAAC1BgAAAAAAALYGAAAAAAAAAAAAALYGAAAAAAAAtwYAAAAAAAAAAAAAtwYAAAAAAAC4BgAAAAAAAAAAAAC4BgAAAAAAALkGAAAAAAAAAAAAALkGAAAAAAAAugYAAAAAAAAAAAAAugYAAAAAAAC7BgAAAAAAAAAAAAC7BgAAAAAAALwGAAAAAAAAAAAAALwGAAAAAAAAvQYAAAAAAAAAAAAAvQYAAAAAAAC+BgAAAAAAAAAAAAC+BgAAAAAAAL8GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswYAAAAAAACzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAL8GAAAAAAAAwQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwYAAAAAAAC/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMAGAAAAAAAAwgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAYAAAAAAADABgAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "lazyOpen"
					},
					"CAAAAMEGAAAAAAAAwgYAAAAAAAAAAAAAwgYAAAAAAADDBgAAAAAAAAAAAADDBgAAAAAAAMQGAAAAAAAAAAAAAMQGAAAAAAAAxQYAAAAAAAAAAAAAxQYAAAAAAADGBgAAAAAAAAAAAADGBgAAAAAAAMcGAAAAAAAAAAAAAMcGAAAAAAAAyAYAAAAAAAAAAAAAyAYAAAAAAADJBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQYAAAAAAADBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": ",doc.lib"
					},
					"CAAAAMoGAAAAAAAAywYAAAAAAAAAAAAAywYAAAAAAADMBgAAAAAAAAAAAADMBgAAAAAAAM0GAAAAAAAAAAAAAM0GAAAAAAAAzgYAAAAAAAAAAAAAzgYAAAAAAADPBgAAAAAAAAAAAADPBgAAAAAAANAGAAAAAAAAAAAAANAGAAAAAAAA0QYAAAAAAAAAAAAA0QYAAAAAAADSBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygYAAAAAAADKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert_completion",
					{
						"completion": "libraries",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "libraries"
					},
					"AgAAAM8GAAAAAAAAzwYAAAAAAAADAAAAbGlizwYAAAAAAADYBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gYAAAAAAADSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "M"
					},
					"AQAAANkGAAAAAAAA2gYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QYAAAAAAADZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"left_delete",
					null,
					"AQAAANkGAAAAAAAA2QYAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAA2gYAAAAAAADaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANkGAAAAAAAA2gYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QYAAAAAAADZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMsGAAAAAAAAzAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywYAAAAAAADLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "console.config"
					},
					"DgAAAMsGAAAAAAAAzAYAAAAAAAAAAAAAzAYAAAAAAADNBgAAAAAAAAAAAADNBgAAAAAAAM4GAAAAAAAAAAAAAM4GAAAAAAAAzwYAAAAAAAAAAAAAzwYAAAAAAADQBgAAAAAAAAAAAADQBgAAAAAAANEGAAAAAAAAAAAAANEGAAAAAAAA0gYAAAAAAAAAAAAA0gYAAAAAAADTBgAAAAAAAAAAAADTBgAAAAAAANQGAAAAAAAAAAAAANQGAAAAAAAA1QYAAAAAAAAAAAAA1QYAAAAAAADWBgAAAAAAAAAAAADWBgAAAAAAANcGAAAAAAAAAAAAANcGAAAAAAAA2AYAAAAAAAAAAAAA2AYAAAAAAADZBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywYAAAAAAADLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANkGAAAAAAAA2wYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QYAAAAAAADZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANoGAAAAAAAA3AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gYAAAAAAADaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "ins"
					},
					"AwAAANsGAAAAAAAA3AYAAAAAAAAAAAAA3AYAAAAAAADdBgAAAAAAAAAAAADdBgAAAAAAAN4GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wYAAAAAAADbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					3,
					"left_delete",
					null,
					"AwAAAN0GAAAAAAAA3QYAAAAAAAABAAAAc9wGAAAAAAAA3AYAAAAAAAABAAAAbtsGAAAAAAAA2wYAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA3gYAAAAAAADeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "customIs"
					},
					"CAAAANsGAAAAAAAA3AYAAAAAAAAAAAAA3AYAAAAAAADdBgAAAAAAAAAAAADdBgAAAAAAAN4GAAAAAAAAAAAAAN4GAAAAAAAA3wYAAAAAAAAAAAAA3wYAAAAAAADgBgAAAAAAAAAAAADgBgAAAAAAAOEGAAAAAAAAAAAAAOEGAAAAAAAA4gYAAAAAAAAAAAAA4gYAAAAAAADjBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wYAAAAAAADbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"left_delete",
					null,
					"AQAAAOIGAAAAAAAA4gYAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAA4wYAAAAAAADjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "nspect"
					},
					"BgAAAOIGAAAAAAAA4wYAAAAAAAAAAAAA4wYAAAAAAADkBgAAAAAAAAAAAADkBgAAAAAAAOUGAAAAAAAAAAAAAOUGAAAAAAAA5gYAAAAAAAAAAAAA5gYAAAAAAADnBgAAAAAAAAAAAADnBgAAAAAAAOgGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gYAAAAAAADiBgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					13,
					"left_delete",
					null,
					"DQAAAOcGAAAAAAAA5wYAAAAAAAABAAAAdOYGAAAAAAAA5gYAAAAAAAABAAAAY+UGAAAAAAAA5QYAAAAAAAABAAAAZeQGAAAAAAAA5AYAAAAAAAABAAAAcOMGAAAAAAAA4wYAAAAAAAABAAAAc+IGAAAAAAAA4gYAAAAAAAABAAAAbuEGAAAAAAAA4QYAAAAAAAABAAAASeAGAAAAAAAA4AYAAAAAAAABAAAAbd8GAAAAAAAA3wYAAAAAAAABAAAAb94GAAAAAAAA3gYAAAAAAAABAAAAdN0GAAAAAAAA3QYAAAAAAAABAAAAc9wGAAAAAAAA3AYAAAAAAAABAAAAddsGAAAAAAAA2wYAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAA6AYAAAAAAADoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "customInspace"
					},
					"DQAAANsGAAAAAAAA3AYAAAAAAAAAAAAA3AYAAAAAAADdBgAAAAAAAAAAAADdBgAAAAAAAN4GAAAAAAAAAAAAAN4GAAAAAAAA3wYAAAAAAAAAAAAA3wYAAAAAAADgBgAAAAAAAAAAAADgBgAAAAAAAOEGAAAAAAAAAAAAAOEGAAAAAAAA4gYAAAAAAAAAAAAA4gYAAAAAAADjBgAAAAAAAAAAAADjBgAAAAAAAOQGAAAAAAAAAAAAAOQGAAAAAAAA5QYAAAAAAAAAAAAA5QYAAAAAAADmBgAAAAAAAAAAAADmBgAAAAAAAOcGAAAAAAAAAAAAAOcGAAAAAAAA6AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wYAAAAAAADbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					3,
					"left_delete",
					null,
					"AwAAAOcGAAAAAAAA5wYAAAAAAAABAAAAZeYGAAAAAAAA5gYAAAAAAAABAAAAY+UGAAAAAAAA5QYAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAA6AYAAAAAAADoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "ect:false"
					},
					"CQAAAOUGAAAAAAAA5gYAAAAAAAAAAAAA5gYAAAAAAADnBgAAAAAAAAAAAADnBgAAAAAAAOgGAAAAAAAAAAAAAOgGAAAAAAAA6QYAAAAAAAAAAAAA6QYAAAAAAADqBgAAAAAAAAAAAADqBgAAAAAAAOsGAAAAAAAAAAAAAOsGAAAAAAAA7AYAAAAAAAAAAAAA7AYAAAAAAADtBgAAAAAAAAAAAADtBgAAAAAAAO4GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QYAAAAAAADlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPAGAAAAAAAA8QYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AYAAAAAAADwBgAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"paste",
					null,
					"AgAAAPIGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABwAAAAAAAA0AAABkb2MubGlicmFyaWVz",
					"AQAAAAAAAAABAAAA8gYAAAAAAAD/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": ".lis"
					},
					"BAAAAAAHAAAAAAAAAQcAAAAAAAAAAAAAAQcAAAAAAAACBwAAAAAAAAAAAAACBwAAAAAAAAMHAAAAAAAAAAAAAAMHAAAAAAAABAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAAQHAAAAAAAABQcAAAAAAAAAAAAABQcAAAAAAAAGBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAcAAAAAAAAEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAYHAAAAAAAACAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgcAAAAAAAAGBwAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"left_delete",
					null,
					"AQAAAAcHAAAAAAAABwcAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAACAcAAAAAAAAIBwAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAAYHAAAAAAAABgcAAAAAAAABAAAAKAYHAAAAAAAABgcAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAABwcAAAAAAAAHBwAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					2,
					"left_delete",
					null,
					"AgAAAAUHAAAAAAAABQcAAAAAAAABAAAAdAQHAAAAAAAABAcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAABgcAAAAAAAAGBwAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "t))"
					},
					"AwAAAAQHAAAAAAAABQcAAAAAAAAAAAAABQcAAAAAAAAGBwAAAAAAAAAAAAAGBwAAAAAAAAcHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAcAAAAAAAAEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"left_delete",
					null,
					"AQAAAAUHAAAAAAAABQcAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAABgcAAAAAAAAGBwAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"left_delete",
					null,
					"AQAAAPIGAAAAAAAA8gYAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA8wYAAAAAAADzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"transpose",
					null,
					"AgAAAAQHAAAAAAAABQcAAAAAAAABAAAAKQMHAAAAAAAABAcAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAABAcAAAAAAAAEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					2,
					"left_delete",
					null,
					"AgAAAAQHAAAAAAAABAcAAAAAAAABAAAAdAMHAAAAAAAAAwcAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAABQcAAAAAAAAFBwAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAAMHAAAAAAAABAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwcAAAAAAAADBwAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAQHAAAAAAAABgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAcAAAAAAAAEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAAQHAAAAAAAABAcAAAAAAAABAAAAKAQHAAAAAAAABAcAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAABQcAAAAAAAAFBwAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAAQHAAAAAAAABQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAcAAAAAAAAEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": "[,."
					},
					"AwAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA8wYAAAAAAAD0BgAAAAAAAAAAAAD0BgAAAAAAAPUGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gYAAAAAAADyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					2,
					"left_delete",
					null,
					"AgAAAPQGAAAAAAAA9AYAAAAAAAABAAAALvMGAAAAAAAA8wYAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA9QYAAAAAAAD1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAAPMGAAAAAAAA9AYAAAAAAAAAAAAA9AYAAAAAAAD1BgAAAAAAAAAAAAD1BgAAAAAAAPYGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wYAAAAAAADzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": " ]"
					},
					"AgAAAAgHAAAAAAAACQcAAAAAAAAAAAAACQcAAAAAAAAKBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAcAAAAAAAAIBwAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"paste",
					null,
					"AgAAADkHAAAAAAAAUQcAAAAAAAAAAAAAUQcAAAAAAABRBwAAAAAAABIAAABkb2MubGlicmFyaWVzLmxpc3Q",
					"AQAAAAAAAAABAAAAOQcAAAAAAABLBwAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": "&&"
					},
					"AgAAALQGAAAAAAAAtQYAAAAAAAAAAAAAtQYAAAAAAAC2BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAYAAAAAAAC0BgAAAAAAAAAAAAAAAAAA"
				],
				[
					297,
					2,
					"left_delete",
					null,
					"AgAAALUGAAAAAAAAtQYAAAAAAAABAAAAJrQGAAAAAAAAtAYAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAtgYAAAAAAAC2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALQGAAAAAAAAtQYAAAAAAAAAAAAAtQYAAAAAAAC2BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAYAAAAAAAC0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD6HgAAaW1wb3J0IHsgZGVmaW5lLCBsYXp5UHJvcGVydHksIHRyeUNhdGNoLCB1bmlxdWUgfSBmcm9tICcuLi9taXNjLmpzJzsKaW1wb3J0IHsgRWFnbGVEb2N1bWVudCB9IGZyb20gJy4vZG9jdW1lbnQuanMnOwppbXBvcnQgeyBFYWdsZUVsZW1lbnQgfSBmcm9tICcuL2VsZW1lbnQuanMnOwppbXBvcnQgeyBFYWdsZU5vZGVNYXAgfSBmcm9tICcuL25vZGVNYXAuanMnOwppbXBvcnQgeyBkdW1wIH0gZnJvbSAnLi9jb21tb24uanMnOwppbXBvcnQgcGF0aCBmcm9tICcuLi9wYXRoLmpzJzsKaW1wb3J0ICogYXMgZnMgZnJvbSAnLi4vZmlsZXN5c3RlbS5qcyc7CgpleHBvcnQgY2xhc3MgRWFnbGVQcm9qZWN0IHsKICBjb25zdHJ1Y3RvcihmaWxlLCBmcykgewogICAgZnMgPSBmcyB8fCB0aGlzLmZzIHx8IGdsb2JhbFRoaXMuZnM7CgogICAgdGhpcy5maWxlbmFtZXMgPSBbXTsKCiAgICBkZWZpbmUodGhpcywgewogICAgICBmaWxlLAoKICAgICAgZG9jdW1lbnRzOiB7fSwKICAgICAgbGlzdDogW10sCiAgICAgIGRhdGE6IHsgc2NoOiBudWxsLCBicmQ6IG51bGwsIGxicjoge30gfSwKICAgICAgZnMKICAgIH0pOwoKICAgIGNvbnN0IGxvYWRGaWxlID0gZmlsZSA9PiB7CiAgICAgIGlmKHR5cGVvZiBmaWxlID09ICdzdHJpbmcnKSB7CiAgICAgICAgaWYoL1wuKGJyZHxzY2gpJC8udGVzdChmaWxlKSB8fCAhL1wubGJyJC8udGVzdChmaWxlKSkgdGhpcy5iYXNlbmFtZSA9IGZpbGUucmVwbGFjZSgvXC4oYnJkfHNjaHxsYnIpJC9pLCAnJyk7CiAgICAgIH0KCiAgICAgIGxldCBkaXIgPSBwYXRoLmRpcm5hbWUoZmlsZSk7CiAgICAgIGxldCBsaWJyYXJ5UGF0aCA9IFtkaXJdOwogICAgICBkaXIgPSBwYXRoLmpvaW4oZGlyLCAnbGJyJyk7CiAgICAgIGlmKGZzLmV4aXN0c1N5bmMoZGlyKSkgbGlicmFyeVBhdGgucHVzaChkaXIpOwogICAgICB0aGlzLmxpYnJhcnlQYXRoID0gbGlicmFyeVBhdGg7CgogICAgICBpZihmcy5leGlzdHNTeW5jKGZpbGUpKSB0aGlzLmxhenlPcGVuKGZpbGUpOwogICAgICB0aGlzLmxvYWQoKTsKICAgIH07CgogICAgdGhpcy5lYWdsZVBhdGggPSBFYWdsZVByb2plY3QuZGV0ZXJtaW5lRWFnbGVQYXRoKGZzKTsKCiAgICBpZihmaWxlKSB7CiAgICAgIGlmKEFycmF5LmlzQXJyYXkoZmlsZSkpIGZpbGUuZm9yRWFjaChsb2FkRmlsZSk7CiAgICAgIGVsc2UgbG9hZEZpbGUoZmlsZSk7CiAgICAgIGlmKCF0aGlzLmZhaWxlZCkgY29uc29sZS5sb2coJ09wZW5lZCBwcm9qZWN0OicsIHRoaXMuYmFzZW5hbWUsIHRoaXMuZWFnbGVQYXRoKTsKICAgIH0KICB9CgogIGxvYWQobmFtZSA9IHRoaXMuYmFzZW5hbWUpIHsKICAgIHRoaXMuYmFzZW5hbWUgPSBuYW1lOwogICAgdGhpcy5sYXp5T3Blbih0aGlzLmJhc2VuYW1lICsgJy5zY2gnKTsKICAgIHRoaXMubGF6eU9wZW4odGhpcy5iYXNlbmFtZSArICcuYnJkJyk7CgogICAgcmV0dXJuICF0aGlzLmZhaWxlZDsKICB9CgogIGxhenlPcGVuKGZpbGUpIHsKICAgIGxldCBpbmRleCA9IHRoaXMuZmlsZW5hbWVzLmxlbmd0aDsKICAgIHRoaXMuZmlsZW5hbWVzLnB1c2goZmlsZSk7CiAgICBsYXp5UHJvcGVydHkoCiAgICAgIHRoaXMuZG9jdW1lbnRzLAogICAgICBwYXRoLmJhc2VuYW1lKGZpbGUpLAogICAgICAoKSA9PiB7CiAgICAgICAgbGV0IGRvYyA9IEVhZ2xlRG9jdW1lbnQub3BlbihmaWxlLCB0aGlzLmZzKTsKICAgICAgICB0aGlzLmxpc3RbaW5kZXhdID0gZG9jOwoKLy9jb25zb2xlLmxvZygnbGF6eU9wZW4nLGNvbnNvbGUuY29uZmlnKHtjdXN0b21JbnNwZWN0OmZhbHNlfSksIFsuLi5kb2MubGlicmFyaWVzLmxpc3QgXSk7CiAgICAgICAgaWYoZG9jLmxpYnJhcmllcykgdGhpcy5hZGRMaWJyYXJpZXMoWy4uLmRvYy5saWJyYXJpZXMubGlzdCBdLm1hcChsID0+IGwubmFtZSkpOwoKICAgICAgICByZXR1cm4gZG9jOwogICAgICB9LAogICAgICB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9CiAgICApOwogIH0KCiAgY2xvc2UoZmlsZSkgewogICAgbGV0IGluZGV4OwoKICAgIGlmKChpbmRleCA9IHRoaXMuZmlsZW5hbWVzLmluZGV4T2YoZmlsZSkpICE9IC0xKSB7CiAgICAgIFtpbmRleF0gPSB0aGlzLmZpbGVuYW1lcy5zcGxpY2UoaW5kZXgsIDEpOwoKICAgICAgZGVsZXRlIHRoaXMuZG9jdW1lbnRzW3BhdGguYmFzZW5hbWUoZmlsZSldOwogICAgfQogICAgcmV0dXJuIGluZGV4OwogIH0KCiAgY2xvc2VBbGwoKSB7CiAgICB3aGlsZSh0aGlzLmZpbGVuYW1lcy5sZW5ndGggPiAwKSB0aGlzLmNsb3NlKHRoaXMuZmlsZW5hbWVzWzBdKTsKICB9CgogIGFkZExpYnJhcmllcyhsaWJzKSB7CiAgICBmb3IobGV0IGxpYiBvZiBsaWJzKSB7CiAgICAgIGxldCBmaWxlID0gdGhpcy5maW5kTGlicmFyeShsaWIpOwogICAgICBpZihmaWxlICYmIHRoaXMuZmlsZW5hbWVzLmluZGV4T2YoZmlsZSkgPT0gLTEpIHRoaXMubGF6eU9wZW4oZmlsZSk7CiAgICB9CiAgfQoKICAvKiogQGJyaWVmICBPcGVucyBhIG93bmVyRG9jdW1lbnQKICAgKgogICAqIEBwYXJhbSAgICAgIHtzdHJpbmd9ICAgICAgICAgYmFzZW5hbWUgIERvY3VtZW50IGJhc2VuYW1lCiAgICogQHJldHVybiAgICAge0VhZ2xlRG9jdW1lbnR9ICBUaGUgZWFnbGUgb3duZXJEb2N1bWVudC4KICAgKi8KICBvcGVuKGZpbGUpIHsKICAgIGxldCBkb2MsIGVycjsKCiAgICB0cnlDYXRjaCgpOwoKICAgIHRyeSB7CiAgICAgIGRvYyA9IEVhZ2xlRG9jdW1lbnQub3BlbihmaWxlLCB0aGlzLmZzKTsKICAgIH0gY2F0Y2goZXJyb3IpIHsKICAgICAgZXJyID0gZXJyb3I7CiAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlcnIpOwogICAgfQogICAgaWYoZG9jKSB7CiAgICAgIGNvbnNvbGUubG9nKCdPcGVuZWQgZG9jdW1lbnQnLCBmaWxlKTsKICAgICAgdGhpcy5maWxlbmFtZXMucHVzaChmaWxlKTsKICAgICAgdGhpcy5saXN0W3BhdGguYmFzZW5hbWUoZmlsZSldID0gZG9jOwogICAgfSBlbHNlIHRocm93IG5ldyBFcnJvcihgRWFnbGVQcm9qZWN0OiBlcnJvciBvcGVuaW5nICcke2ZpbGV9JzogJHtlcnJ9YCk7CiAgICBpZihkb2MudHlwZSA9PSAnbGJyJykgewogICAgICB0aGlzLmRhdGFbZG9jLnR5cGVdW2RvYy5iYXNlbmFtZV0gPSBkb2M7CiAgICAgIGNvbnNvbGUubG9nKCdPcGVuZWQgbGlicmFyeTonLCBkb2MuYmFzZW5hbWUpOwogICAgfSBlbHNlIHRoaXMuZGF0YVtkb2MudHlwZV0gPSBkb2M7CiAgICB0aGlzLmZhaWxlZCA9ICFkb2M7CiAgICByZXR1cm4gZG9jOwogIH0KCiAgc3RhdGljIGRldGVybWluZUVhZ2xlUGF0aChmcykgewogICAgbGV0IGVudlZhcjsKICAgIGlmKCFlbnZWYXIpCiAgICAgIHRyeSB7CiAgICAgICAgZW52VmFyID0gcHJvY2Vzcy5lbnZbJ1BBVEgnXTsKICAgICAgfSBjYXRjaChlKSB7fQogICAgbGV0IHNlYXJjaFBhdGggPSBlbnZWYXIuc3BsaXQoLzovZyk7CiAgICBsZXQgYmluOwogICAgZm9yKGxldCBkaXIgb2Ygc2VhcmNoUGF0aCkgewogICAgICBiaW4gPSBkaXIgKyAnL2VhZ2xlJzsKICAgICAgaWYoIWZzLmV4aXN0c1N5bmMoYmluKSkgY29udGludWU7CiAgICAgIGlmKCEvKGVhZ2xlKS9pLnRlc3QoZGlyKSkgewogICAgICAgIGJpbiA9IGZzLnJlYWxwYXRoU3luYyhiaW4pOwogICAgICAgIGRpciA9IGJpbi5yZXBsYWNlKC9cL1teXC9dKyQvLCAnJyk7CiAgICAgIH0KICAgICAgZGlyID0gZGlyLnJlcGxhY2UoL1tcXFwvXWJpbiQvaSwgJycpOwoKICAgICAgcmV0dXJuIGRpcjsKICAgIH0KICB9CgogIGZpbmREb2N1bWVudChwcmVkKSB7CmNvbnNvbGUubG9nKCdmaW5kRG9jdW1lbnQnLHByZWQrJycpOwoKICAgIGlmKHR5cGVvZiBwcmVkID09ICdzdHJpbmcnKSB7CiAgICAgIGxldCBuYW1lID0gcHJlZDsKICAgICAgaWYobmFtZS5pbmRleE9mKCcvJykgPT0gLTEpIG5hbWUgPSAnKF58LyknICsgbmFtZTsKCiAgICAgIGxldCByZSA9IG5ldyBSZWdFeHAobmFtZSArICckJyk7CiAgICAgIHByZWQgPSBuYW1lID0+IHJlLnRlc3QobmFtZSk7CiAgICB9CiAgICBsZXQgbmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLmRvY3VtZW50cyk7CgoKICAgIGNvbnN0IG5hbWUgPSBuYW1lcy5maW5kKHByZWQpOwoKY29uc29sZS5sb2coJ2ZpbmREb2N1bWVudCcse25hbWV9KTsKCiAgICByZXR1cm4gdGhpcy5kb2N1bWVudHNbbmFtZV07CiAgfQoKICBnZXRMaWJyYXJ5KG5hbWUpIHsKICAgIHJldHVybiB0aGlzLmZpbmREb2N1bWVudChuYW1lICsgJy5sYnInKTsKICB9CgogIGdldCBzY2hlbWF0aWMoKSB7CiAgICByZXR1cm4gdGhpcy5maW5kRG9jdW1lbnQobmFtZSA9PiAvXC5zY2gkL2kudGVzdChuYW1lKSk7CiAgfQogIGdldCBib2FyZCgpIHsKICAgIHJldHVybiB0aGlzLmZpbmREb2N1bWVudChuYW1lID0+IC9cLmJyZCQvaS50ZXN0KG5hbWUpKTsKICB9CiAgZ2V0IGxpYnJhcmllcygpIHsKICAgIHJldHVybiB0aGlzLmxpc3QuZmlsdGVyKGRvYyA9PiBkb2MudHlwZSA9PSAnbGJyJyk7CiAgfQogIGdldCByb290KCkgewogICAgbGV0IGNoaWxkcmVuID0gdGhpcy5saXN0OwogICAgcmV0dXJuIHsgY2hpbGRyZW4gfTsKICB9CiAgZ2V0IGNoaWxkcmVuKCkgewogICAgbGV0IGNoaWxkcmVuID0gdGhpcy5saXN0OwogICAgcmV0dXJuIGNoaWxkcmVuOwogIH0KCiAgKml0ZXJhdG9yKHQgPSAoW3YsIGwsIGRdKSA9PiBbdHlwZW9mIHYgPT0gJ29iamVjdCcgPyBFYWdsZUVsZW1lbnQuZ2V0KGQsIGwsIHYpIDogdiwgbCwgZF0pIHsKICAgIGNvbnN0IHByb2plY3QgPSB0aGlzOwogICAgZm9yKGxldCBkb2Mgb2YgdGhpcy5saXN0KSB7CiAgICAgIGxldCBwcmVmaXggPSBFYWdsZVByb2plY3QuZG9jdW1lbnRLZXkoZG9jKTsKICAgICAgeWllbGQqIGRvYy5pdGVyYXRvcih0KTsKICAgIH0KICB9CgogIHN0YXRpYyBkb2N1bWVudExvY2F0aW9uKGQpIHsKICAgIHJldHVybiBkLnR5cGUgPT0gJ2xicicgPyBbJ2xicicsIGQuYmFzZW5hbWVdIDogW2QudHlwZV07CiAgfQoKICBzdGF0aWMgZG9jdW1lbnRLZXkoZCkgewogICAgc3dpdGNoIChkLnR5cGUpIHsKICAgICAgY2FzZSAnc2NoJzoKICAgICAgICByZXR1cm4gWydzY2hlbWF0aWMnXTsKICAgICAgY2FzZSAnYnJkJzoKICAgICAgICByZXR1cm4gWydib2FyZCddOwogICAgICBjYXNlICdsYnInOgogICAgICAgIHJldHVybiBbJ2xpYnJhcnknLCBkLmJhc2VuYW1lXTsKICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KCiAgZ2V0RG9jdW1lbnREaXJlY3RvcmllcygpIHsKICAgIHJldHVybiB1bmlxdWUodGhpcy5maWxlbmFtZXMubWFwKGZpbGUgPT4gcGF0aC5kaXJuYW1lKGZpbGUpKSk7CiAgfQoKICBnZXRMaWJyYXJ5UGF0aCgpIHsKICAgIGxldCBkb2NEaXJzID0gdGhpcy5nZXREb2N1bWVudERpcmVjdG9yaWVzKCk7CiAgICBsZXQgcGF0aCA9IFsuLi5kb2NEaXJzLCAuLi5kb2NEaXJzLm1hcChkaXIgPT4gYCR7ZGlyfS9sYnJgKV07CiAgICBpZih0aGlzLmVhZ2xlUGF0aCkgcGF0aC5wdXNoKHRoaXMuZWFnbGVQYXRoICsgJy9sYnInKTsKICAgIHJldHVybiBwYXRoOwogIH0KCiAgZ2V0TGlicmFyeU5hbWVzKCkgewogICAgbGV0IGxpYnJhcnlOYW1lcyA9IFtdOwoKICAgIHRyeUNhdGNoKAogICAgICAoKSA9PiB0aGlzLnNjaGVtYXRpYy5saWJyYXJpZXMua2V5cygpLAogICAgICBuYW1lcyA9PiAobGlicmFyeU5hbWVzID0gbGlicmFyeU5hbWVzLmNvbmNhdChuYW1lcykpCiAgICApOwogICAgdHJ5Q2F0Y2goCiAgICAgICgpID0+IHRoaXMuYm9hcmQubGlicmFyaWVzLmtleXMoKSwKICAgICAgbmFtZXMgPT4gKGxpYnJhcnlOYW1lcyA9IGxpYnJhcnlOYW1lcy5jb25jYXQobmFtZXMpKQogICAgKTsKCiAgICByZXR1cm4gdW5pcXVlKGxpYnJhcnlOYW1lcyk7CiAgfQoKICBmaW5kTGlicmFyeShuYW1lLCBkaXJzID0gdGhpcy5saWJyYXJ5UGF0aCkgewogICAgZGlycyA/Pz0gdGhpcy5nZXRMaWJyYXJ5UGF0aCgpOwoKICAgIGZvcihsZXQgZGlyIG9mIGRpcnMpIHsKICAgICAgY29uc3QgZmlsZSA9IGAke2Rpcn0vJHtuYW1lfS5sYnJgOwogICAgICBpZih0aGlzLmZzLmV4aXN0c1N5bmMoZmlsZSkpIHJldHVybiBmaWxlOwogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfQoKICB1cGRhdGVMaWJyYXJ5KG5hbWUpIHsKICAgIGNvbnN0IGwgPSB0aGlzLmxpYnJhcnk7CgogICAgY29uc3QgeyBzY2hlbWF0aWMsIGJvYXJkIH0gPSB0aGlzOwoKICAgIGxldCBsaWJyYXJpZXMgPSB7CiAgICAgIGZpbGU6IHRoaXMuZ2V0TGlicmFyeShuYW1lKSwKICAgICAgc2NoZW1hdGljOiBzY2hlbWF0aWMuZ2V0TGlicmFyeShuYW1lKSwKICAgICAgYm9hcmQ6IGJvYXJkLmdldExpYnJhcnkobmFtZSkKICAgIH07CgogICAgZm9yKGxldCBkZXN0RG9jIG9mIFsnc2NoZW1hdGljJywgJ2JvYXJkJ10pIHsKICAgICAgY29uc3QgbGliUHJvcHMgPSBsaWIgPT4gbGliOwoKICAgICAgY29uc3QgZGVzdExpYiA9IGxpYlByb3BzKGxpYnJhcmllc1tkZXN0RG9jXSk7CiAgICAgIGNvbnN0IHNyY0xpYiA9IGxpYlByb3BzKGxpYnJhcmllcy5maWxlKTsKCiAgICAgIGZvcihsZXQgZW50aXR5IG9mIFsncGFja2FnZXMnLCAnc3ltYm9scycsICdkZXZpY2VzZXRzJ10pIHsKICAgICAgICBpZighKGVudGl0eSBpbiBkZXN0TGliKSkgY29udGludWU7CiAgICAgICAgaWYoIShkZXN0TGliW2VudGl0eV0gaW5zdGFuY2VvZiBFYWdsZU5vZGVNYXApKSBjb250aW51ZTsKCiAgICAgICAgY29uc3QgZHN0TWFwID0gZGVzdExpYltlbnRpdHldOwogICAgICAgIGxldCBlbnQgPSBzcmNMaWJbZW50aXR5XS5lbnRyaWVzKCk7CiAgICAgICAgbGV0IG0gPSBuZXcgTWFwKGVudCk7CgogICAgICAgIGxldCBudW1VcGRhdGVkID0gMDsKICAgICAgICBmb3IobGV0IHZhbHVlIG9mIHNyY0xpYltlbnRpdHldLnZhbHVlcygpKSB7CiAgICAgICAgICBjb25zdCBrZXkgPSB2YWx1ZS5uYW1lOwoKICAgICAgICAgIGRzdE1hcC5zZXQoa2V5LCB2YWx1ZSk7CiAgICAgICAgICBudW1VcGRhdGVkKys7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICBpbmRleChsKSB7CiAgICBsZXQgcGF0aCA9IFsuLi5sXTsKICAgIGxldCBrZXkgPSBwYXRoLnNoaWZ0KCk7CiAgICBsZXQgZG9jLCBuYW1lOwoKICAgIGlmKHBhdGgubGVuZ3RoID09IDApIHJldHVybiB0aGlzOwoKICAgIHN3aXRjaCAoa2V5KSB7CiAgICAgIGNhc2UgJ2JvYXJkJzoKICAgICAgY2FzZSAnc2NoZW1hdGljJzoKICAgICAgICBkb2MgPSB0aGlzW2tleV07CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2xpYnJhcnknOgogICAgICAgIG5hbWUgPSBwYXRoLnNoaWZ0KCk7CiAgICAgICAgZG9jID0gdGhpc1trZXldW25hbWVdOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIGJyZWFrOwogICAgfQogICAgaWYoIWRvYyB8fCAhZG9jLmluZGV4KSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignRVJST1I6IHByb2plY3QuaW5kZXgoJyArIGwuam9pbignLCAnKSArICcgKScpOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmKHBhdGgubGVuZ3RoID09IDApIHJldHVybiBkb2M7CiAgICByZXR1cm4gZG9jLmluZGV4KHBhdGgpOwogIH0KCiAgc2F2ZVRvKGRpciA9ICcuJywgb3ZlcndyaXRlID0gZmFsc2UpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgIGxldCBwcm9taXNlcyA9IHRoaXMubGlzdC5tYXAoZG9jID0+IFtkb2MuYmFzZW5hbWUsIGRvYy5zYXZlVG8oW2RpciwgZG9jLmJhc2VuYW1lXS5qb2luKCcvJyksIG92ZXJ3cml0ZSwgdGhpcy5mcyldKTsKCiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihyZXN1bHQgPT4gewogICAgICAgIHJlc29sdmUoT2JqZWN0LmZyb21FbnRyaWVzKHJlc3VsdCkpOwogICAgICB9KTsKICAgIH0pOwogIH0KfQoKRWFnbGVQcm9qZWN0LnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddID0gJ0VhZ2xlUHJvamVjdCc7CgAAAAAAAAAADh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8ggAAAAAAAD4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					2,
					"left_delete",
					null,
					"AgAAAAAQAAAAAAAAABAAAAAAAAArAAAAICAgIGNvbnNvbGUubG9nKCdmaW5kRG9jdW1lbnQnLCB7IG5hbWUgfSk7Cv8PAAAAAAAA/w8AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAABAAAAAAAAArEAAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					2,
					"right_delete",
					null,
					"AgAAAK4OAAAAAAAArg4AAAAAAAAsAAAAICAgIGNvbnNvbGUubG9nKCdmaW5kRG9jdW1lbnQnLCBwcmVkICsgJycpOwquDgAAAAAAAK4OAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAArg4AAAAAAADaDgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/document.js",
			"settings":
			{
				"buffer_size": 11315,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/eagle/node.js",
			"settings":
			{
				"buffer_size": 16493,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					14,
					2,
					"right_delete",
					null,
					"AgAAAKMpAAAAAAAAoykAAAAAAAABAAAAL6MpAAAAAAAAoykAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAoykAAAAAAACjKQAAAAAAAAAAAAAAAEBA"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAAIspAAAAAAAAjCkAAAAAAAAAAAAAjCkAAAAAAACNKQAAAAAAAAAAAACNKQAAAAAAAI4pAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiykAAAAAAACLKQAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI4pAAAAAAAAjykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjikAAAAAAACOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					5,
					"right_delete",
					null,
					"BQAAAI8pAAAAAAAAjykAAAAAAAABAAAAO48pAAAAAAAAjykAAAAAAAABAAAAII8pAAAAAAAAjykAAAAAAAABAAAAL48pAAAAAAAAjykAAAAAAAABAAAAL48pAAAAAAAAjykAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAjykAAAAAAACPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": ",attgri"
					},
					"BwAAANcpAAAAAAAA2CkAAAAAAAAAAAAA2CkAAAAAAADZKQAAAAAAAAAAAADZKQAAAAAAANopAAAAAAAAAAAAANopAAAAAAAA2ykAAAAAAAAAAAAA2ykAAAAAAADcKQAAAAAAAAAAAADcKQAAAAAAAN0pAAAAAAAAAAAAAN0pAAAAAAAA3ikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1ykAAAAAAADXKQAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					3,
					"left_delete",
					null,
					"AwAAAN0pAAAAAAAA3SkAAAAAAAABAAAAadwpAAAAAAAA3CkAAAAAAAABAAAActspAAAAAAAA2ykAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAA3ikAAAAAAADeKQAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "ributeLi"
					},
					"CAAAANspAAAAAAAA3CkAAAAAAAAAAAAA3CkAAAAAAADdKQAAAAAAAAAAAADdKQAAAAAAAN4pAAAAAAAAAAAAAN4pAAAAAAAA3ykAAAAAAAAAAAAA3ykAAAAAAADgKQAAAAAAAAAAAADgKQAAAAAAAOEpAAAAAAAAAAAAAOEpAAAAAAAA4ikAAAAAAAAAAAAA4ikAAAAAAADjKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2ykAAAAAAADbKQAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert_completion",
					{
						"completion": "attributeLists",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "attributeLists"
					},
					"AgAAANgpAAAAAAAA2CkAAAAAAAALAAAAYXR0cmlidXRlTGnYKQAAAAAAAOYpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4ykAAAAAAADjKQAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					2,
					"right_delete",
					null,
					"AgAAAIwpAAAAAAAAjCkAAAAAAAABAAAAP4wpAAAAAAAAjCkAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAAjCkAAAAAAACMKQAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"cut",
					null,
					"AQAAAI0pAAAAAAAAjSkAAAAAAAAMAAAARWFnbGVFbGVtZW50",
					"AQAAAAAAAAABAAAAjSkAAAAAAACZKQAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAHcpAAAAAAAAeCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdykAAAAAAAB3KQAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHgpAAAAAAAAeSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeCkAAAAAAAB4KQAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"paste",
					null,
					"AQAAAHkpAAAAAAAAhSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeSkAAAAAAAB5KQAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": ".attr"
					},
					"BQAAAIUpAAAAAAAAhikAAAAAAAAAAAAAhikAAAAAAACHKQAAAAAAAAAAAACHKQAAAAAAAIgpAAAAAAAAAAAAAIgpAAAAAAAAiSkAAAAAAAAAAAAAiSkAAAAAAACKKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhSkAAAAAAACFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert_completion",
					{
						"completion": "attributeLists",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "attributeLists"
					},
					"AgAAAIYpAAAAAAAAhikAAAAAAAAEAAAAYXR0coYpAAAAAAAAlCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiikAAAAAAACKKQAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"cut",
					null,
					"AQAAAK0pAAAAAAAArSkAAAAAAABMAAAAICAgIGNvbnNvbGUubG9nKCdFYWdsZU5vZGUuaW5zcGVjdCcsICB7dGFnTmFtZSxhdHRyaWJ1dGVzLGF0dHJpYnV0ZUxpc3RzfSk7Cg",
					"AQAAAAAAAAABAAAArSkAAAAAAAD5KQAAAAAAAAAAAAAAAAAA"
				],
				[
					181,
					1,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AQAAAEAqAAAAAAAASCoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQCoAAAAAAABAKgAAAAAAAAAAAAAAQINA"
				],
				[
					184,
					3,
					"left_delete",
					null,
					"AwAAAEcqAAAAAAAARyoAAAAAAAABAAAAIEYqAAAAAAAARioAAAAAAAABAAAAL0UqAAAAAAAARSoAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAASCoAAAAAAABIKgAAAAAAAAAAAAAAAExA"
				],
				[
					187,
					1,
					"right_delete",
					null,
					"AQAAAAEqAAAAAAAAASoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAASoAAAAAAAABKgAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAASoAAAAAAAABKgAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BQAAAGkuAAAAAAAAai4AAAAAAAAAAAAAai4AAAAAAAByLgAAAAAAAAAAAAByLgAAAAAAAHIuAAAAAAAABQAAAHdyaXRlai4AAAAAAABqLgAAAAAAAAgAAAAgICAgICAgIGouAAAAAAAAdC4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaS4AAAAAAABuLgAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					10,
					"left_delete",
					null,
					"CgAAAHIuAAAAAAAAci4AAAAAAAACAAAAICBwLgAAAAAAAHAuAAAAAAAAAgAAACAgbi4AAAAAAABuLgAAAAAAAAIAAAAgIGwuAAAAAAAAbC4AAAAAAAACAAAAICBqLgAAAAAAAGouAAAAAAAAAgAAACAgaS4AAAAAAABpLgAAAAAAAAEAAAAKaC4AAAAAAABoLgAAAAAAAAEAAAAuZy4AAAAAAABnLgAAAAAAAAEAAABsZi4AAAAAAABmLgAAAAAAAAEAAABtZS4AAAAAAABlLgAAAAAAAAEAAAB4",
					"AQAAAAAAAAABAAAAdC4AAAAAAAB0LgAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "toXML"
					},
					"BQAAAGUuAAAAAAAAZi4AAAAAAAAAAAAAZi4AAAAAAABnLgAAAAAAAAAAAABnLgAAAAAAAGguAAAAAAAAAAAAAGguAAAAAAAAaS4AAAAAAAAAAAAAaS4AAAAAAABqLgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZS4AAAAAAABlLgAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AgAAAGUuAAAAAAAAZi4AAAAAAAAAAAAAZi4AAAAAAABmLgAAAAAAAAUAAAB0b1hNTA",
					"AQAAAAAAAAABAAAAZS4AAAAAAABqLgAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": "tg"
					},
					"AgAAAGYuAAAAAAAAZy4AAAAAAAAAAAAAZy4AAAAAAABoLgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZi4AAAAAAABmLgAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"left_delete",
					null,
					"AQAAAGcuAAAAAAAAZy4AAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAaC4AAAAAAABoLgAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert_completion",
					{
						"completion": "this",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "this"
					},
					"AgAAAGYuAAAAAAAAZi4AAAAAAAABAAAAdGYuAAAAAAAAai4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZy4AAAAAAABnLgAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					4,
					"left_delete",
					null,
					"BAAAAGkuAAAAAAAAaS4AAAAAAAABAAAAc2guAAAAAAAAaC4AAAAAAAABAAAAaWcuAAAAAAAAZy4AAAAAAAABAAAAaGYuAAAAAAAAZi4AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAai4AAAAAAABqLgAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "toXML"
					},
					"BQAAAGYuAAAAAAAAZy4AAAAAAAAAAAAAZy4AAAAAAABoLgAAAAAAAAAAAABoLgAAAAAAAGkuAAAAAAAAAAAAAGkuAAAAAAAAai4AAAAAAAAAAAAAai4AAAAAAABrLgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZi4AAAAAAABmLgAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					1,
					"left_delete",
					null,
					"AQAAANYuAAAAAAAA1i4AAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAA1y4AAAAAAADXLgAAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAqCoAAAAAAACoKgAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": "\ncns"
					},
					"BgAAABcnAAAAAAAAGCcAAAAAAAAAAAAAGCcAAAAAAAAaJwAAAAAAAAAAAAAaJwAAAAAAABwnAAAAAAAAAAAAABwnAAAAAAAAHScAAAAAAAAAAAAAHScAAAAAAAAeJwAAAAAAAAAAAAAeJwAAAAAAAB8nAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFycAAAAAAAAXJwAAAAAAAAAAAAAAAPC/"
				],
				[
					417,
					3,
					"left_delete",
					null,
					"AwAAAB4nAAAAAAAAHicAAAAAAAABAAAAcx0nAAAAAAAAHScAAAAAAAABAAAAbhwnAAAAAAAAHCcAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAHycAAAAAAAAfJwAAAAAAAAAAAAAAAPC/"
				],
				[
					418,
					1,
					"insert",
					{
						"characters": "this.cjhil"
					},
					"CgAAABwnAAAAAAAAHScAAAAAAAAAAAAAHScAAAAAAAAeJwAAAAAAAAAAAAAeJwAAAAAAAB8nAAAAAAAAAAAAAB8nAAAAAAAAICcAAAAAAAAAAAAAICcAAAAAAAAhJwAAAAAAAAAAAAAhJwAAAAAAACInAAAAAAAAAAAAACInAAAAAAAAIycAAAAAAAAAAAAAIycAAAAAAAAkJwAAAAAAAAAAAAAkJwAAAAAAACUnAAAAAAAAAAAAACUnAAAAAAAAJicAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHCcAAAAAAAAcJwAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					4,
					"left_delete",
					null,
					"BAAAACUnAAAAAAAAJScAAAAAAAABAAAAbCQnAAAAAAAAJCcAAAAAAAABAAAAaSMnAAAAAAAAIycAAAAAAAABAAAAaCInAAAAAAAAIicAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAAJicAAAAAAAAmJwAAAAAAAAAAAAAAAPC/"
				],
				[
					420,
					1,
					"insert",
					{
						"characters": "hildren.length"
					},
					"DgAAACInAAAAAAAAIycAAAAAAAAAAAAAIycAAAAAAAAkJwAAAAAAAAAAAAAkJwAAAAAAACUnAAAAAAAAAAAAACUnAAAAAAAAJicAAAAAAAAAAAAAJicAAAAAAAAnJwAAAAAAAAAAAAAnJwAAAAAAACgnAAAAAAAAAAAAACgnAAAAAAAAKScAAAAAAAAAAAAAKScAAAAAAAAqJwAAAAAAAAAAAAAqJwAAAAAAACsnAAAAAAAAAAAAACsnAAAAAAAALCcAAAAAAAAAAAAALCcAAAAAAAAtJwAAAAAAAAAAAAAtJwAAAAAAAC4nAAAAAAAAAAAAAC4nAAAAAAAALycAAAAAAAAAAAAALycAAAAAAAAwJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIicAAAAAAAAiJwAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"cut",
					null,
					"AQAAABwnAAAAAAAAHCcAAAAAAAAUAAAAdGhpcy5jaGlsZHJlbi5sZW5ndGg",
					"AQAAAAAAAAABAAAAMCcAAAAAAAAcJwAAAAAAAAAAAAAAAEBA"
				],
				[
					425,
					1,
					"paste",
					null,
					"AQAAAEcnAAAAAAAAWycAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARycAAAAAAABHJwAAAAAAAAAAAAAAAPC/"
				],
				[
					427,
					3,
					"left_delete",
					null,
					"AwAAABonAAAAAAAAGicAAAAAAAACAAAAICAYJwAAAAAAABgnAAAAAAAAAgAAACAgFycAAAAAAAAXJwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAHCcAAAAAAAAcJwAAAAAAAAAAAAAAAH9A"
				],
				[
					448,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAyyUAAAAAAADLJQAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHwwAAAAAAAAfTAAAAAAAAAAAAAAfTAAAAAAAAB9MAAAAAAAAAYAAAAgICAgLy8",
					"AQAAAAAAAAABAAAAgjAAAAAAAAB8MAAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": " newPoin"
					},
					"CAAAAJ4wAAAAAAAAnzAAAAAAAAAAAAAAnzAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAAKEwAAAAAAAAAAAAAKEwAAAAAAAAojAAAAAAAAAAAAAAojAAAAAAAACjMAAAAAAAAAAAAACjMAAAAAAAAKQwAAAAAAAAAAAAAKQwAAAAAAAApTAAAAAAAAAAAAAApTAAAAAAAACmMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnjAAAAAAAACeMAAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					4,
					"left_delete",
					null,
					"BAAAAKUwAAAAAAAApTAAAAAAAAABAAAAbqQwAAAAAAAApDAAAAAAAAABAAAAaaMwAAAAAAAAozAAAAAAAAABAAAAb6IwAAAAAAAAojAAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAApjAAAAAAAACmMAAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": " Pio"
					},
					"BAAAAKIwAAAAAAAAozAAAAAAAAAAAAAAozAAAAAAAACkMAAAAAAAAAAAAACkMAAAAAAAAKUwAAAAAAAAAAAAAKUwAAAAAAAApjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAojAAAAAAAACiMAAAAAAAAAAAAAAAAPC/"
				],
				[
					464,
					2,
					"left_delete",
					null,
					"AgAAAKUwAAAAAAAApTAAAAAAAAABAAAAb6QwAAAAAAAApDAAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAApjAAAAAAAACmMAAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "ointer"
					},
					"BgAAAKQwAAAAAAAApTAAAAAAAAAAAAAApTAAAAAAAACmMAAAAAAAAAAAAACmMAAAAAAAAKcwAAAAAAAAAAAAAKcwAAAAAAAAqDAAAAAAAAAAAAAAqDAAAAAAAACpMAAAAAAAAAAAAACpMAAAAAAAAKowAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApDAAAAAAAACkMAAAAAAAAAAAAAAAAPC/"
				],
				[
					466,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKowAAAAAAAArDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqjAAAAAAAACqMAAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					2,
					"right_delete",
					null,
					"AgAAAKswAAAAAAAAqzAAAAAAAAABAAAAKaswAAAAAAAAqzAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAqzAAAAAAAACrMAAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAAKswAAAAAAAArDAAAAAAAAAAAAAArDAAAAAAAACtMAAAAAAAAAAAAACtMAAAAAAAAK4wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqzAAAAAAAACrMAAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAALMwAAAAAAAAtDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAszAAAAAAAACzMAAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"cut",
					null,
					"AQAAAHwwAAAAAAAAfDAAAAAAAABNAAAAICBjb25zb2xlLmxvZygnRWFnbGVOb2RlLmxvb2t1cCgnLCBuZXcgUG9pbnRlciguLi54cGF0aCksICcsJywgdCArICcnLCAnKScpOwo",
					"AQAAAAAAAAABAAAAfDAAAAAAAADJMAAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"paste",
					null,
					"AQAAACowAAAAAAAAdzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKjAAAAAAAAAqMAAAAAAAAAAAAAAAAPC/"
				],
				[
					538,
					1,
					"insert",
					{
						"characters": "x√ºp"
					},
					"BAAAAEwwAAAAAAAATTAAAAAAAAAAAAAATTAAAAAAAABNMAAAAAAAABYAAAAgbmV3IFBvaW50ZXIoLi4ueHBhdGgpTTAAAAAAAABOMAAAAAAAAAAAAABOMAAAAAAAAE8wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATDAAAAAAAABiMAAAAAAAAAAAAAAAAPC/"
				],
				[
					539,
					2,
					"left_delete",
					null,
					"AgAAAE4wAAAAAAAATjAAAAAAAAABAAAAcE0wAAAAAAAATTAAAAAAAAACAAAAw7w",
					"AQAAAAAAAAABAAAATzAAAAAAAABPMAAAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					1,
					"insert",
					{
						"characters": "path"
					},
					"BAAAAE0wAAAAAAAATjAAAAAAAAAAAAAATjAAAAAAAABPMAAAAAAAAAAAAABPMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAUTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATTAAAAAAAABNMAAAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"cut",
					null,
					"AQAAACgwAAAAAAAAKDAAAAAAAAA+AAAAICAgIGNvbnNvbGUubG9nKCdFYWdsZU5vZGUubG9va3VwKCcseHBhdGgsICcsJywgdCArICcnLCAnKScpOwo",
					"AQAAAAAAAAABAAAAKDAAAAAAAABmMAAAAAAAAAAAAAAAAPC/"
				],
				[
					550,
					1,
					"paste",
					null,
					"AQAAACgwAAAAAAAAZjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKDAAAAAAAAAoMAAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"paste",
					null,
					"AQAAALgwAAAAAAAA9jAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuDAAAAAAAAC4MAAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					1,
					"cut",
					null,
					"AQAAAEIxAAAAAAAAQjEAAAAAAAAtAAAAICAgIGxldCB2YWx1ZSA9IHhwYXRoLmRlcmVmKHRoaXMucmF3LCB0cnVlKTsK",
					"AQAAAAAAAAABAAAAQjEAAAAAAABvMQAAAAAAAAAAAAAAAPC/"
				],
				[
					628,
					1,
					"paste",
					null,
					"AQAAAPYwAAAAAAAAIzEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9jAAAAAAAAD2MAAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"cut",
					null,
					"AQAAALgwAAAAAAAAuDAAAAAAAAA+AAAAICAgIGNvbnNvbGUubG9nKCdFYWdsZU5vZGUubG9va3VwKCcseHBhdGgsICcsJywgdCArICcnLCAnKScpOwo",
					"AQAAAAAAAAABAAAAuDAAAAAAAAD2MAAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"paste",
					null,
					"AQAAALgwAAAAAAAA9jAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuDAAAAAAAAC4MAAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"paste",
					null,
					"AQAAACMxAAAAAAAAYTEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIzEAAAAAAAAjMQAAAAAAAAAAAAAAAPC/"
				],
				[
					643,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAEUxAAAAAAAARjEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARTEAAAAAAABFMQAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"insert",
					{
						"characters": "{}"
					},
					"AgAAAEgxAAAAAAAASTEAAAAAAAAAAAAASTEAAAAAAABKMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASDEAAAAAAABIMQAAAAAAAAAAAAAAAPC/"
				],
				[
					646,
					1,
					"left_delete",
					null,
					"AQAAAEkxAAAAAAAASTEAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAASjEAAAAAAABKMQAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"insert",
					{
						"characters": "value});"
					},
					"CAAAAEkxAAAAAAAASjEAAAAAAAAAAAAASjEAAAAAAABLMQAAAAAAAAAAAABLMQAAAAAAAEwxAAAAAAAAAAAAAEwxAAAAAAAATTEAAAAAAAAAAAAATTEAAAAAAABOMQAAAAAAAAAAAABOMQAAAAAAAE8xAAAAAAAAAAAAAE8xAAAAAAAAUDEAAAAAAAAAAAAAUDEAAAAAAABRMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASTEAAAAAAABJMQAAAAAAAAAAAAAAAPC/"
				],
				[
					649,
					1,
					"cut",
					null,
					"AQAAAFExAAAAAAAAUTEAAAAAAAAZAAAAeHBhdGgsICcsJywgdCArICcnLCAnKScpOw",
					"AQAAAAAAAAABAAAAUTEAAAAAAABqMQAAAAAAAP///////+9/"
				],
				[
					654,
					1,
					"left_delete",
					null,
					"AQAAANkwAAAAAAAA2TAAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA2jAAAAAAAADaMAAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAANswAAAAAAAA3DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2zAAAAAAAADbMAAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAOEwAAAAAAAA4jAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4TAAAAAAAADhMAAAAAAAAAAAAAAAAPC/"
				],
				[
					661,
					1,
					"left_delete",
					null,
					"AQAAAOIwAAAAAAAA4jAAAAAAAAASAAAALCAnLCcsIHQgKyAnJywgJykn",
					"AQAAAAAAAAABAAAA4jAAAAAAAAD0MAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/common.js",
			"settings":
			{
				"buffer_size": 3953,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOAAAAAAAAAA4QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AAAAAAAAADgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"paste",
					null,
					"AQAAAOEAAAAAAAAA7gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAO4AAAAAAAAA7wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gAAAAAAAADuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAACoBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAAsAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgEAAAAAAAAqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " {"
					},
					"AgAAACwBAAAAAAAALQEAAAAAAAAAAAAALQEAAAAAAAAuAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAEAAAAAAAAsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BwAAAC4BAAAAAAAALwEAAAAAAAAAAAAALwEAAAAAAAAxAQAAAAAAAAAAAAAvAQAAAAAAAC8BAAAAAAAAAgAAACAgLwEAAAAAAAAzAQAAAAAAAAAAAAAzAQAAAAAAADQBAAAAAAAAAAAAAC8BAAAAAAAALwEAAAAAAAAEAAAAICAgIC8BAAAAAAAAMQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgEAAAAAAAAuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"paste",
					null,
					"AQAAADABAAAAAAAAZAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAEAAAAAAAAwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BAAAAGQBAAAAAAAAZQEAAAAAAAAAAAAAZQEAAAAAAABnAQAAAAAAAAAAAABnAQAAAAAAAGgBAAAAAAAAAAAAAGgBAAAAAAAAagEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAEAAAAAAABkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"left_delete",
					null,
					"AQAAAF4BAAAAAAAAXgEAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAXwEAAAAAAABfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAF4BAAAAAAAAYAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgEAAAAAAABeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "t,co"
					},
					"BAAAAF8BAAAAAAAAYAEAAAAAAAAAAAAAYAEAAAAAAABhAQAAAAAAAAAAAABhAQAAAAAAAGIBAAAAAAAAAAAAAGIBAAAAAAAAYwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwEAAAAAAABfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					2,
					"left_delete",
					null,
					"AgAAAGIBAAAAAAAAYgEAAAAAAAABAAAAb2EBAAAAAAAAYQEAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAYwEAAAAAAABjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "...colors"
					},
					"CQAAAGEBAAAAAAAAYgEAAAAAAAAAAAAAYgEAAAAAAABjAQAAAAAAAAAAAABjAQAAAAAAAGQBAAAAAAAAAAAAAGQBAAAAAAAAZQEAAAAAAAAAAAAAZQEAAAAAAABmAQAAAAAAAAAAAABmAQAAAAAAAGcBAAAAAAAAAAAAAGcBAAAAAAAAaAEAAAAAAAAAAAAAaAEAAAAAAABpAQAAAAAAAAAAAABpAQAAAAAAAGoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQEAAAAAAABhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "ansi"
					},
					"BQAAAGQBAAAAAAAAZQEAAAAAAAAAAAAAZQEAAAAAAABlAQAAAAAAAAYAAABjb2xvcnNlAQAAAAAAAGYBAAAAAAAAAAAAAGYBAAAAAAAAZwEAAAAAAAAAAAAAZwEAAAAAAABoAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAEAAAAAAABqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAG0BAAAAAAAAbgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQEAAAAAAABtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"left_delete",
					null,
					"AQAAAG0BAAAAAAAAbQEAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAbgEAAAAAAABuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "an"
					},
					"AgAAAG0BAAAAAAAAbgEAAAAAAAAAAAAAbgEAAAAAAABvAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQEAAAAAAABtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					2,
					"left_delete",
					null,
					"AgAAAG4BAAAAAAAAbgEAAAAAAAABAAAAbm0BAAAAAAAAbQEAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAbwEAAAAAAABvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "`\\x1v"
					},
					"BQAAAG0BAAAAAAAAbgEAAAAAAAAAAAAAbgEAAAAAAABvAQAAAAAAAAAAAABvAQAAAAAAAHABAAAAAAAAAAAAAHABAAAAAAAAcQEAAAAAAAAAAAAAcQEAAAAAAAByAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQEAAAAAAABtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"left_delete",
					null,
					"AQAAAHEBAAAAAAAAcQEAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAcgEAAAAAAAByAQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "b["
					},
					"AgAAAHEBAAAAAAAAcgEAAAAAAAAAAAAAcgEAAAAAAABzAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQEAAAAAAABxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMBAAAAAAAAdAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwEAAAAAAABzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAHMBAAAAAAAAdAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwEAAAAAAABzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHQBAAAAAAAAdgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAEAAAAAAAB0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "ansi.join"
					},
					"CQAAAHUBAAAAAAAAdgEAAAAAAAAAAAAAdgEAAAAAAAB3AQAAAAAAAAAAAAB3AQAAAAAAAHgBAAAAAAAAAAAAAHgBAAAAAAAAeQEAAAAAAAAAAAAAeQEAAAAAAAB6AQAAAAAAAAAAAAB6AQAAAAAAAHsBAAAAAAAAAAAAAHsBAAAAAAAAfAEAAAAAAAAAAAAAfAEAAAAAAAB9AQAAAAAAAAAAAAB9AQAAAAAAAH4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQEAAAAAAAB1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAH4BAAAAAAAAgAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgEAAAAAAAB+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAH8BAAAAAAAAgAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwEAAAAAAAB/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"left_delete",
					null,
					"AQAAAH8BAAAAAAAAfwEAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAgAEAAAAAAACAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAH8BAAAAAAAAgQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwEAAAAAAAB/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIABAAAAAAAAgQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAEAAAAAAACAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAIQBAAAAAAAAhQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAEAAAAAAACEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAIUBAAAAAAAAhgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQEAAAAAAACFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIYBAAAAAAAAiAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgEAAAAAAACGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					2,
					"right_delete",
					null,
					"AgAAAIcBAAAAAAAAhwEAAAAAAAABAAAAfYcBAAAAAAAAhwEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhwEAAAAAAACHAQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAIgBAAAAAAAAiQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAEAAAAAAACIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAIkBAAAAAAAAigEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQEAAAAAAACJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"left_delete",
					null,
					"AQAAAIkBAAAAAAAAiQEAAAAAAAABAAAAJA",
					"AQAAAAAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\\x1b"
					},
					"BAAAAIkBAAAAAAAAigEAAAAAAAAAAAAAigEAAAAAAACLAQAAAAAAAAAAAACLAQAAAAAAAIwBAAAAAAAAAAAAAIwBAAAAAAAAjQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQEAAAAAAACJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAI0BAAAAAAAAjwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQEAAAAAAACNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "0m"
					},
					"AgAAAI4BAAAAAAAAjwEAAAAAAAAAAAAAjwEAAAAAAACQAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"right_delete",
					null,
					"AQAAAJABAAAAAAAAkAEAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAkAEAAAAAAACQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "`K"
					},
					"AgAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAEAAAAAAACQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"left_delete",
					null,
					"AQAAAJEBAAAAAAAAkQEAAAAAAAABAAAASw",
					"AQAAAAAAAAABAAAAkgEAAAAAAACSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"left_delete",
					null,
					"AQAAAJEBAAAAAAAAkQEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAkgEAAAAAAACSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABcDwAAaW1wb3J0IHsgSW1tdXRhYmxlUGF0aCB9IGZyb20gJy4uL2pzb24uanMnOwppbXBvcnQgeyBjbGFzc05hbWUsIGlzT2JqZWN0LGluc3BlY3RTeW1ib2wgfSBmcm9tICcuLi9taXNjLmpzJzsKCmNvbnN0IGlzQnJvd3NlciA9ICgpID0+ICEhZ2xvYmFsVGhpcy5uYXZpZ2F0b3I7Cgpjb25zdCBwYXRoUGFkZGluZyA9IGlzQnJvd3NlcigpID8gMCA6IDQwOwoKZXhwb3J0IGNvbnN0IGNvbG9yaW5nID0gIGlzQnJvd3NlcigpID8gewogIGNvbmNhdDogKC4uLmFyZ3MpID0+IGFyZ3Muam9pbignJyksCiAgdGV4dDogdCA9PiB0CiAgfSA6IHsKICAgY29uY2F0OiAoLi4uYXJncykgPT4gYXJncy5qb2luKCcnKSwKICB0ZXh0OiAodCwuLi5hbnNpKSA9PiBgXHgxYlske2Fuc2kuam9pbignOycpfW0ke3R9XHgxYlswbWAgIAogICB9OwoKZXhwb3J0IGNvbnN0IGNvbmNhdCA9IGNvbG9yaW5nLmNvbmNhdC5iaW5kKGNvbG9yaW5nKTsKZXhwb3J0IGNvbnN0IHRleHQgPSBjb2xvcmluZy50ZXh0LmJpbmQoY29sb3JpbmcpOwoKZXhwb3J0IGNvbnN0IGRpbmdiYXRDb2RlID0gZGlnaXQgPT4gKGRpZ2l0ICUgMTAgPT0gMCA/IGNpcmNsZXNbMF0gOiBTdHJpbmcuZnJvbUNoYXJDb2RlKChkaWdpdCAlIDEwKSArIGNpcmNsZXNbMV0uY2hhckNvZGVBdCgwKSAtIDEpKTsKCmV4cG9ydCBjb25zdCBQYWxldHRlID0gewogIGJvYXJkOiAobSA9IChyLCBnLCBiKSA9PiBbciwgZywgYl0pID0+CiAgICBbCiAgICAgIFsyNTUsIDI1NSwgMjU1XSwgLy8gMAogICAgICBbNzUsIDc1LCAxNjVdLAogICAgICBbNzUsIDE2NSwgNzVdLAogICAgICBbNzUsIDE2NSwgMTY1XSwKICAgICAgWzE2NSwgNzUsIDc1XSwKICAgICAgWzE2NSwgNzUsIDE2NV0sIC8vIDUKICAgICAgWzE2NSwgMTY1LCA3NV0sCiAgICAgIFsxNzUsIDE3NSwgMTc1XSwgLy8gNwogICAgICBbNzUsIDc1LCAyNTVdLAogICAgICBbNzUsIDI1NSwgNzVdLAogICAgICBbNzUsIDI1NSwgMjU1XSwKICAgICAgWzI1NSwgNzUsIDc1XSwKICAgICAgWzI1NSwgNzUsIDI1NV0sCiAgICAgIFsyNTUsIDI1NSwgNzVdLAogICAgICBbNzUsIDc1LCA3NV0sCiAgICAgIFsxNjUsIDE2NSwgMTY1XSwKICAgICAgWzE4MCwgMTgwLCAxODBdLCAvLyAxNgogICAgICBbOTAsIDkwLCA5MF0sCiAgICAgIFsxOTIsIDE5MiwgMTkyXSAvLyAyNAogICAgXS5tYXAoYyA9PiBtKC4uLmMpKSwKICBzY2hlbWF0aWM6IChtID0gKHIsIGcsIGIpID0+IFtyLCBnLCBiXSkgPT4KICAgIFsKICAgICAgWzI1NSwgMjU1LCAyNTVdLAogICAgICBbNzUsIDc1LCAxNjVdLAogICAgICBbNzUsIDE2NSwgNzVdLAogICAgICBbNzUsIDE2NSwgMTY1XSwKICAgICAgWzE2NSwgNzUsIDc1XSwKICAgICAgWzE2NSwgNzUsIDE2NV0sCiAgICAgIFsxNjUsIDE2NSwgNzVdLAogICAgICBbMTc1LCAxNzUsIDE3NV0sCiAgICAgIFs3NSwgNzUsIDI1NV0sCiAgICAgIFs3NSwgMjU1LCA3NV0sCiAgICAgIFs3NSwgMjU1LCAyNTVdLAogICAgICBbMjU1LCA3NSwgNzVdLAogICAgICBbMjU1LCA3NSwgMjU1XSwKICAgICAgWzI1NSwgMjU1LCA3NV0sCiAgICAgIFs3NSwgNzUsIDc1XSwKICAgICAgWzE2NSwgMTY1LCAxNjVdLAogICAgICBbMTc1LCAxNzUsIDE3NV0KICAgIF0ubWFwKGMgPT4gbSguLi5jKSkKfTsKCmV4cG9ydCBjb25zdCBkdW1wID0gKG8sIGRlcHRoID0gMiwgYnJlYWtMZW5ndGggPSA0MDApID0+IHsKICBjb25zdCBpc0VsZW1lbnQgPSBvID0+IGlzT2JqZWN0KG8pICYmIFsnRWFnbGVFbGVtZW50JywgJ0VhZ2xlTm9kZScsICdFYWdsZURvY3VtZW50J10uaW5kZXhPZihjbGFzc05hbWUobykpICE9IC0xOwogIGxldCBzOwogIGlmKG8gaW5zdGFuY2VvZiBBcnJheSkgewogICAgcyA9ICcnOwogICAgZm9yKGxldCBpIG9mIG8pIHsKICAgICAgaWYocy5sZW5ndGggPiAwKSBzICs9IGlzRWxlbWVudChpKSA/ICcsXG4nIDogJywgJzsKICAgICAgcyArPSBkdW1wKGksIGRlcHRoIC0gMSwgYnJlYWtMZW5ndGgpOwogICAgfQogIH0gZWxzZSBpZihpc0VsZW1lbnQobykpIHsKICAgIHMgPSBFYWdsZUludGVyZmFjZS5pbnNwZWN0KG8sIHVuZGVmaW5lZCwgeyBkZXB0aCwgcGF0aDogZmFsc2UgfSk7CiAgICBkZXB0aCAqIDQ7CiAgfSBlbHNlCiAgICBzID0gaW5zcGVjdChvLCB7CiAgICAgIGRlcHRoLAogICAgICBuZXdsaW5lOiAnJywKICAgICAgY29sb3JzOiAhaXNCcm93c2VyKCksCiAgICAgIGJyZWFrTGVuZ3RoCiAgICB9KTsKICByZXR1cm4gczsKfTsKCmV4cG9ydCBjb25zdCBwYXJzZUFyZ3MgPSBhcmdzID0+IHsKICBsZXQgcmV0ID0geyBwYXRoOiBbXSB9OwoKICB3aGlsZShhcmdzLmxlbmd0aCA+IDApIHsKICAgIGlmKGFyZ3NbMF0gaW5zdGFuY2VvZiBJbW11dGFibGVQYXRoKSB7CiAgICAgIHJldC5wYXRoID0gYXJncy5zaGlmdCgpOwogICAgfSBlbHNlIGlmKGFyZ3NbMF0gaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgICAgbGV0IHJlID0gYXJncy5zaGlmdCgpOwogICAgICByZXQucHJlZGljYXRlID0gaXQgPT4gcmUudGVzdChpdC50YWdOYW1lKTsKICAgIH0gZWxzZSBpZihhcmdzWzBdIGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgcmV0LnBhdGggPSBuZXcgSW1tdXRhYmxlUGF0aChhcmdzLnNoaWZ0KCkpOwogICAgfSBlbHNlIGlmKHR5cGVvZiBhcmdzWzBdID09ICdmdW5jdGlvbicpIHsKICAgICAgaWYocmV0LnByZWRpY2F0ZSA9PT0gdW5kZWZpbmVkKSByZXQucHJlZGljYXRlID0gYXJncy5zaGlmdCgpOwogICAgICBlbHNlIHJldC50cmFuc2Zvcm0gPSBhcmdzLnNoaWZ0KCk7CiAgICB9IGVsc2UgaWYodHlwZW9mIGFyZ3NbMF0gPT0gJ3N0cmluZycpIHsKICAgICAgaWYocmV0LmVsZW1lbnQgPT09IHVuZGVmaW5lZCkgcmV0LmVsZW1lbnQgPSBhcmdzLnNoaWZ0KCk7CiAgICAgIGVsc2UgcmV0Lm5hbWUgPSBhcmdzLnNoaWZ0KCk7CiAgICB9IGVsc2UgaWYodHlwZW9mIGFyZ3NbMF0gPT0gJ29iamVjdCcpIHsKICAgICAgY29uc3QgeyBwcmVkaWNhdGUsIHRyYW5zZm9ybSwgZWxlbWVudCwgbmFtZSB9ID0gYXJncy5zaGlmdCgpOwogICAgICBPYmplY3QuYXNzaWduKHJldCwgeyBwcmVkaWNhdGUsIHRyYW5zZm9ybSwgZWxlbWVudCwgbmFtZSB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigndW5oYW5kbGVkOiAnICsgdHlwZW9mIGFyZ3NbMF0gKyBkdW1wKGFyZ3NbMF0pKTsKICAgIH0KICB9CiAgaWYodHlwZW9mIHJldC5wcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJyAmJiAocmV0LmVsZW1lbnQgfHwgcmV0Lm5hbWUpKSB7CiAgICBpZihyZXQubmFtZSkgcmV0LnByZWRpY2F0ZSA9IHYgPT4gdi50YWdOYW1lID09IHJldC5lbGVtZW50ICYmIHYuYXR0cmlidXRlcy5uYW1lID09IHJldC5uYW1lOwogICAgZWxzZSByZXQucHJlZGljYXRlID0gdiA9PiB2LnRhZ05hbWUgPT0gcmV0LmVsZW1lbnQ7CiAgfQogIHJldHVybiByZXQ7Cn07CgpleHBvcnQgY29uc3QgdHJhdmVyc2UgPSBmdW5jdGlvbiogKG9iaiwgcGF0aCA9IFtdLCBkb2MpIHsKICBpZighKHBhdGggaW5zdGFuY2VvZiBJbW11dGFibGVQYXRoKSkgcGF0aCA9IG5ldyBJbW11dGFibGVQYXRoKHBhdGgpOwogIHlpZWxkIFtvYmosIHBhdGgsIGRvY107CiAgaWYodHlwZW9mIG9iaiA9PSAnb2JqZWN0JykgewogICAgaWYoQXJyYXkuaXNBcnJheShvYmopKSB7CiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHlpZWxkKiB0cmF2ZXJzZShvYmpbaV0sIHBhdGguY29uY2F0KFtpXSksIGRvYyk7CiAgICB9IGVsc2UgaWYoJ2NoaWxkcmVuJyBpbiBvYmogJiYgQXJyYXkuaXNBcnJheShvYmouY2hpbGRyZW4pKSB7CiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBvYmouY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHlpZWxkKiB0cmF2ZXJzZShvYmouY2hpbGRyZW5baV0sIHBhdGguY29uY2F0KFsnY2hpbGRyZW4nLCBpXSksIGRvYyk7CiAgICB9CiAgfQp9OwoAAAAAAAAAAHEPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAgH1A"
				]
			]
		},
		{
			"file": "lib/misc.js",
			"settings":
			{
				"buffer_size": 65534,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					37,
					1,
					"paste",
					null,
					"AgAAAE9ZAAAAAAAAD1sAAAAAAAAAAAAAD1sAAAAAAAAPWwAAAAAAALwBAABleHBvcnQgZnVuY3Rpb24gZmlsdGVyKHNlcSwgcHJlZCwgdGhpc0FyZykgewogIGlmKGlzT2JqZWN0KHByZWQpICYmIHByZWQgaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgIGxldCByZSA9IHByZWQ7CiAgICBwcmVkID0gKGVsLCBpKSA9PiByZS50ZXN0KGVsKTsKICB9CiAgaWYodHlwZXMuaXNJdGVyYWJsZShzZXEpKSB7CiAgICBsZXQgciA9IFtdLAogICAgICBpID0gMDsKICAgIGZvcihsZXQgZWwgb2Ygc2VxKSBpZihwcmVkLmNhbGwodGhpc0FyZywgZWwsIGkrKywgc2VxKSkgci5wdXNoKGVsKTsKICAgIHJldHVybiByOwogIH0gZWxzZSBpZihpc09iamVjdChzZXEpKSB7CiAgICBsZXQgciA9IHt9OwogICAgZm9yKGxldCBrZXkgaW4gc2VxKSBpZihwcmVkLmNhbGwodGhpc0FyZywgdmFsdWUsIGtleSwgc2VxKSkgcltrZXldID0gc2VxW2tleV07CiAgICByZXR1cm4gcjsKICB9Cn0",
					"AQAAAAAAAAABAAAAT1kAAAAAAAALWwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAE5ZAAAAAAAATlkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAT1kAAAAAAABPWQAAAAAAAAAAAAAAACBA"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAAAG+AAAAAAAAD78AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAb4AAAAAAAABvgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAA+/AAAAAAAAEL8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAD78AAAAAAAAPvwAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"cut",
					null,
					"AQAAAB++AAAAAAAAH74AAAAAAAAIAAAAICB0cnkgewo",
					"AQAAAAAAAAABAAAAH74AAAAAAAAnvgAAAAAAAAAAAAAAAAAA"
				],
				[
					66,
					1,
					"cut",
					null,
					"AQAAAOW+AAAAAAAA5b4AAAAAAAAhAAAAICB9IGNhdGNoKGVycikge30KICByZXR1cm4gbnVsbDsK",
					"AQAAAAAAAAABAAAA5b4AAAAAAAAGvwAAAAAAAAAAAAAAAAAA"
				],
				[
					73,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA5b4AAAAAAADlvgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAOW+AAAAAAAA5r4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5b4AAAAAAADlvgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"left_delete",
					null,
					"AQAAAOW+AAAAAAAA5b4AAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAA5r4AAAAAAADmvgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"paste",
					null,
					"AQAAANpAAAAAAAAADEIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2kAAAAAAAADaQAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"paste",
					null,
					"AQAAANtAAAAAAAAA+0EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA20AAAAAAAADbQAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					2,
					"left_delete",
					null,
					"AgAAANtAAAAAAAAA20AAAAAAAAABAAAACtpAAAAAAAAA2kAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA3EAAAAAAAADcQAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "components.js",
			"settings":
			{
				"buffer_size": 41728,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"left_delete",
					null,
					"AQAAALcAAAAAAAAAtwAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAS30AAAAAAABMfQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"cut",
					null,
					"AQAAAPsAAAAAAAAA+wAAAAAAAAA2AAAALy9pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJy4vbGliL2NvbXBhdC5tanMnOwoK",
					"AQAAAAAAAAABAAAA+wAAAAAAAAAxAQAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": ",tryCac"
					},
					"BwAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAADAAAAAAAAAAMAAAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "tch"
					},
					"AwAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ",roundTo"
					},
					"CAAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADkAAAAAAAAAAAAAADkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"",
					null,
					"AQAAAI4DAAAAAAAAvQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgMAAAAAAACOAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "events.js",
			"settings":
			{
				"buffer_size": 1632,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAATBgAAaW1wb3J0IHsgUmVwZWF0ZXIgfSBmcm9tICcuL2xpYi9yZXBlYXRlci9yZXBlYXRlci5qcyc7CmV4cG9ydCB7IEV2ZW50RW1pdHRlciwgRXZlbnRUYXJnZXQgfSBmcm9tICcuL2xpYi9ldmVudHMuanMnOwoKZXhwb3J0IGZ1bmN0aW9uIEVtaXR0ZXIodGFyZ2V0KSB7CiAgY29uc3QgbGlzdGVuZXJzID0gbmV3IE1hcCgpOwogIGxldCBlbWl0dGVyID0gbmV3LnRhcmdldCA/IHRoaXMgOiB7fTsKICBPYmplY3QuYXNzaWduKGVtaXR0ZXIsIHsKICAgIG9uOiAodHlwZSwgaGFuZGxlcikgPT4gKGxpc3RlbmVycy5zZXQodHlwZSwgaGFuZGxlciksIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpLCBlbWl0dGVyKSwKICAgIG9mZjogKHR5cGUsIGhhbmRsZXIpID0+ICh0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyIHx8IGxpc3RlbmVycy5nZXQodHlwZSkpLCBsaXN0ZW5lcnMuZGVsZXRlKHR5cGUpLCBlbWl0dGVyKSwKICAgIHJlc2V0OiAoKSA9PiB7CiAgICAgIGZvcihsZXQgW3R5cGUsIGhhbmRsZXJdIG9mIGxpc3RlbmVycykgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlcik7CiAgICAgIGxpc3RlbmVycy5jbGVhcigpOwogICAgICByZXR1cm4gZW1pdHRlcjsKICAgIH0KICB9KTsKICByZXR1cm4gZGVmaW5lKGVtaXR0ZXIsIHsgbGlzdGVuZXJzLCB0YXJnZXQgfSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBFdmVudEl0ZXJhdG9yKGV2ZW50cywgdGFyZ2V0ID0gdHJ5Q2F0Y2goKCkgPT4gd2luZG93KSkgewogIGxldCBlbWl0dGVyID0gbmV3IEVtaXR0ZXIodGFyZ2V0KTsKICBpZih0eXBlb2YgZXZlbnRzID09ICdzdHJpbmcnKSBldmVudHMgPSBFdmVudEl0ZXJhdG9yW2V2ZW50cyArICdFdmVudHMnXSB8fCBldmVudHMuc3BsaXQoLywvZyk7CgogIGxldCBpdGVyID0gbmV3IFJlcGVhdGVyKGFzeW5jIChwdXNoLCBzdG9wKSA9PiB7CiAgICBsZXQgaGFuZGxlciA9IGUgPT4gewogICAgICBlLmVtaXR0ZXIgPSBlbWl0dGVyOwogICAgICBwdXNoKGUpOwogICAgfTsKCiAgICBmb3IobGV0IHR5cGUgb2YgZXZlbnRzKSBlbWl0dGVyLm9uKHR5cGUsIGhhbmRsZXIpOwogICAgY29uc29sZS5sb2coJ3JlZ2lzdGVyZWQnLCBldmVudHMpOwogICAgYXdhaXQgc3RvcDsKCiAgICAvKmZvcihsZXQgdHlwZSBvZiBldmVudHMpIGVtaXR0ZXIub2ZmKHR5cGUsIGhhbmRsZXIpOwogICAgICBjb25zb2xlLmxvZygndW5yZWdpc3RlcmVkJywgZXZlbnRzKTsqLwogICAgZW1pdHRlci5yZXNldCgpOwogIH0pOwogIHJldHVybiBkZWZpbmUoaXRlciwgeyBlbWl0dGVyLCB0YXJnZXQgfSk7CiAgaXRlci5lbWl0dGVyID0gZW1pdHRlcjsKICByZXR1cm4gaXRlcjsKfQoKY29uc3QgdG91Y2hFdmVudHMgPSBbJ3RvdWNobW92ZScsICd0b3VjaHN0YXJ0JywgJ3RvdWNoY2FuY2VsJywgJ21vdXNlbW92ZScsICdtb3VzZXVwJywgJ21vdXNlZG93biddOwpjb25zdCBrZXlFdmVudHMgPSBbJ2tleWRvd24nXTsKT2JqZWN0LmFzc2lnbihFdmVudEl0ZXJhdG9yLCB7IHRvdWNoRXZlbnRzLCBrZXlFdmVudHMgfSk7CgAAAAAAAAAAVgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAkAAAAAAAAACgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "tryCatch,"
					},
					"CQAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/tlite.js",
			"settings":
			{
				"buffer_size": 6293,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAATQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					2,
					"right_delete",
					null,
					"AgAAAD8AAAAAAAAAPwAAAAAAAAADAAAAbGliPwAAAAAAAAA/AAAAAAAAAAEAAAAv",
					"AQAAAAAAAAABAAAAPwAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "wea"
					},
					"BAAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKAAAAAAAAACwAAAB0cnlDYXRjaCwgZGVmaW5lLCBpc09iamVjdCwgbWVtb2l6ZSwgdW5pcXVlIAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_completion",
					{
						"completion": "weakMapper",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "weakMapper"
					},
					"AgAAAAkAAAAAAAAACQAAAAAAAAABAAAAdwkAAAAAAAAAEwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					2,
					"right_delete",
					null,
					"AgAAABMAAAAAAAAAEwAAAAAAAAABAAAAZRMAAAAAAAAAEwAAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "commands.js",
			"settings":
			{
				"buffer_size": 12259,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					21,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAQwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAEIAAAAAAAAAQgAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/fetch.js",
			"settings":
			{
				"buffer_size": 2433,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					29,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "import"
					},
					"BgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " Util"
					},
					"BQAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABEAAAAAAAAAEgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABIAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ".-"
					},
					"AgAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAABQAAAAAAAAAFAAAAAAAAAABAAAALRMAAAAAAAAAEwAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAABMAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAABMAAAAAAAAAEwAAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "./util.js"
					},
					"CQAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAB0AAAAAAAAAHgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAAB0AAAAAAAAAHQAAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAB0AAAAAAAAAHgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAB4AAAAAAAAAHwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"left_delete",
					null,
					"AQAAAB4AAAAAAAAAHgAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"right_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG1A"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAH4HAAAAAAAAfwcAAAAAAAAAAAAAfwcAAAAAAACABwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgcAAAAAAAB+BwAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAIkGAAAAAAAAigYAAAAAAAAAAAAAigYAAAAAAACKBgAAAAAAAB4AAAAvKi50aGVuKCAgTm9ybWFsaXplUmVzcG9uc2UpKi8",
					"AQAAAAAAAAABAAAAiQYAAAAAAACnBgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					2,
					"left_delete",
					null,
					"AgAAAIkGAAAAAAAAiQYAAAAAAAABAAAAIIgGAAAAAAAAiAYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAigYAAAAAAACKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADoCAAAaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsLmpzJzsKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBOb3JtYWxpemVSZXNwb25zZShyZXNwKSB7CiAgcmVzcCA9IGF3YWl0IHJlc3A7CgogIGlmKFV0aWwuaXNPYmplY3QocmVzcCkpIHsKICAgIGxldCB7IGNhY2hlZCwgc3RhdHVzLCBvaywgcmVkaXJlY3RlZCwgdXJsLCBoZWFkZXJzIH0gPSByZXNwOwogICAgbGV0IGRpc3AgPSBoZWFkZXJzLmdldCgnQ29udGVudC1EaXNwb3NpdGlvbicpOwogICAgbGV0IHR5cGUgPSBoZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJyk7CiAgICBpZihvaykgewogICAgICBpZighZGlzcCAmJiAvanNvbi8udGVzdCh0eXBlKSAmJiB0eXBlb2YgcmVzcC5qc29uID09ICdmdW5jdGlvbicpIHJlc3AgPSB7IGRhdGE6IGF3YWl0IHJlc3AuanNvbigpIH07CiAgICAgIGVsc2UgaWYodHlwZW9mIHJlc3AudGV4dCA9PSAnZnVuY3Rpb24nKSByZXNwID0geyBkYXRhOiBhd2FpdCByZXNwLnRleHQoKSB9OwogICAgICBpZihkaXNwICYmICFyZXNwLmZpbGUpIHJlc3AuZmlsZSA9IGRpc3AucmVwbGFjZSgvLipbJyJdKFteIl0rKVsnIl0uKi8sICckMScpOwogICAgICBpZihkaXNwICYmIHR5cGUpIHJlc3AudHlwZSA9IHR5cGU7CiAgICAgIGlmKHJlc3AuZmlsZSkgaWYgKCEvdG1wXC8vLnRlc3QocmVzcC5maWxlKSkgcmVzcC5maWxlID0gJ3RtcC8nICsgcmVzcC5maWxlOwogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5pbmZvKCdyZXNwOicsIHJlc3ApOwogICAgICByZXNwID0geyAuLi5yZXNwLCBlcnJvcjogcmVzcC5zdGF0dXNUZXh0IH07CiAgICB9CiAgICBpZihjYWNoZWQpIHJlc3AuY2FjaGVkID0gdHJ1ZTsKICAgIGlmKHJlZGlyZWN0ZWQpIHJlc3AucmVkaXJlY3RlZCA9IHRydWU7CgogICAgbGV0IGZuID0gVXRpbC5tYXBGdW5jdGlvbihoZWFkZXJzKTsKICAgIC8vbGV0IHsga2V5cywgZ2V0IH0gPSBmbjsKICAgIHJlc3AuaGVhZGVycyA9IFV0aWwuZGVmaW5lKE9iamVjdC5mcm9tRW50cmllcyhmbi5lbnRyaWVzKCkpLCB7CiAgICAgIGtleXM6IGZuLAogICAgICBnZXQ6IGZuCiAgICB9KTsKICB9CiAgcmV0dXJuIHJlc3A7Cn0KCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBSZXNwb25zZURhdGEocmVzcCkgewogIHJlc3AgPSBhd2FpdCBOb3JtYWxpemVSZXNwb25zZShyZXNwKTsKICBpZihyZXNwLmRhdGEpIHJldHVybiByZXNwLmRhdGE7Cn0KCmV4cG9ydCBjb25zdCBGZXRjaENhY2hlZCA9IFV0aWwuY2FjaGVkRmV0Y2goewogIGRlYnVnOiB0cnVlLAogIHByaW50KHsgY2FjaGVkLCBvaywgc3RhdHVzLCByZWRpcmVjdGVkLCBzdGF0dXNUZXh0LCB0eXBlLCB1cmwgfSwgZm4sIC4uLmFyZ3MpIHsKICAgIGNvbnNvbGUuZGVidWcoCiAgICAgIGBGZXRjaENhY2hlZCgke2FyZ3MubWFwKChhLCBpKSA9PiAodHlwZW9mIGEgPT0gJ3N0cmluZycgPyAnIicgKyBhICsgJyInIDogaSA9PSAxID8gVXRpbC50b1NvdXJjZSh7IC4uLnRoaXMub3B0cywgLi4uYSB9LCB7IGNvbG9yczogZmFsc2UsIG11bHRpbGluZTogZmFsc2UgfSkgOiBhKSkuam9pbignLCAnKX0pID1gLAogICAgICB7CiAgICAgICAgY2FjaGVkLAogICAgICAgIG9rLAogICAgICAgIHN0YXR1cywKICAgICAgICByZWRpcmVjdGVkLAogICAgICAgIHN0YXR1c1RleHQsCiAgICAgICAgdHlwZSwKICAgICAgICB1cmwKICAgICAgfQogICAgKTsKICB9Cn0pOwoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEZldGNoVVJMKHVybCwgYWxsT3B0cyA9IHt9KSB7CiAgbGV0IHsgbm9jYWNoZSA9IGZhbHNlLCAuLi5vcHRzIH0gPSBhbGxPcHRzOwogIGxldCByZXN1bHQ7CiAgbGV0IHJldDsKICBpZihvcHRzLm1ldGhvZCAmJiBvcHRzLm1ldGhvZC50b1VwcGVyQ2FzZSgpID09ICdQT1NUJykgbm9jYWNoZSA9IHRydWU7CiAgLy9sZXQgZmV0Y2ggPSBub2NhY2hlID8gd2luZG93LmZldGNoIDogRmV0Y2hDYWNoZWQ7CiAgaWYoL3RtcFwvLy50ZXN0KHVybCkpIHsKICAgIHVybCA9IHVybC5yZXBsYWNlKC8uKnRtcFwvL2csICd0bXAvJyk7CiAgfSBlbHNlIGlmKC9eXC8vLnRlc3QodXJsKSkgewogICAgdXJsID0gdXJsLnNsaWNlKDEpOwogIH0gZWxzZSBpZigvOlwvXC8vLnRlc3QodXJsKSkgewogIH0gZWxzZSB7CiAgICB1cmwgPSAnc3RhdGljLycgKyB1cmw7CiAgfQogIHRyeSB7CiAgICBpZighcmV0KSByZXQgPSByZXN1bHQgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdHMpOwogIH0gY2F0Y2goZXJyb3IpIHsKICAgIFV0aWwucHV0RXJyb3IoZXJyb3IpOwogICAgdGhyb3cgZXJyb3I7CiAgfQogIHJldHVybiByZXQ7Cn0KAAAAAAAAAADGCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAUAAAAAAAAUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAHUGAAAAAAAAdwYAAAAAAAAAAAAAyQQAAAAAAADLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQQAAAAAAAB1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "(url,options"
					},
					"DAAAAMkEAAAAAAAAygQAAAAAAAAAAAAAygQAAAAAAADLBAAAAAAAAAAAAADLBAAAAAAAAMwEAAAAAAAAAAAAAMwEAAAAAAAAzQQAAAAAAAAAAAAAzQQAAAAAAADOBAAAAAAAAAAAAADOBAAAAAAAAM8EAAAAAAAAAAAAAM8EAAAAAAAA0AQAAAAAAAAAAAAA0AQAAAAAAADRBAAAAAAAAAAAAADRBAAAAAAAANIEAAAAAAAAAAAAANIEAAAAAAAA0wQAAAAAAAAAAAAA0wQAAAAAAADUBAAAAAAAAAAAAADUBAAAAAAAANUEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQQAAAAAAADJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAANUEAAAAAAAA1gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QQAAAAAAADVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAANYEAAAAAAAA1wQAAAAAAAAAAAAA1wQAAAAAAADYBAAAAAAAAAAAAADYBAAAAAAAANkEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gQAAAAAAADWBAAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": " fetch(url,op"
					},
					"DQAAANkEAAAAAAAA2gQAAAAAAAAAAAAA2gQAAAAAAADbBAAAAAAAAAAAAADbBAAAAAAAANwEAAAAAAAAAAAAANwEAAAAAAAA3QQAAAAAAAAAAAAA3QQAAAAAAADeBAAAAAAAAAAAAADeBAAAAAAAAN8EAAAAAAAAAAAAAN8EAAAAAAAA4AQAAAAAAAAAAAAA4AQAAAAAAADhBAAAAAAAAAAAAADhBAAAAAAAAOIEAAAAAAAAAAAAAOIEAAAAAAAA4wQAAAAAAAAAAAAA4wQAAAAAAADkBAAAAAAAAAAAAADkBAAAAAAAAOUEAAAAAAAAAAAAAOUEAAAAAAAA5gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QQAAAAAAADZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "tions);"
					},
					"BwAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA5wQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOkEAAAAAAAAAAAAAOkEAAAAAAAA6gQAAAAAAAAAAAAA6gQAAAAAAADrBAAAAAAAAAAAAADrBAAAAAAAAOwEAAAAAAAAAAAAAOwEAAAAAAAA7QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gQAAAAAAADmBAAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO0EAAAAAAAA7gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QQAAAAAAADtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAWwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					11,
					"right_delete",
					null,
					"CwAAAAoAAAAAAAAACgAAAAAAAAABAAAAYQoAAAAAAAAACgAAAAAAAAABAAAAYwoAAAAAAAAACgAAAAAAAAABAAAAaAoAAAAAAAAACgAAAAAAAAABAAAAZQoAAAAAAAAACgAAAAAAAAABAAAAZAoAAAAAAAAACgAAAAAAAAABAAAARgoAAAAAAAAACgAAAAAAAAABAAAAZQoAAAAAAAAACgAAAAAAAAABAAAAdAoAAAAAAAAACgAAAAAAAAABAAAAYwoAAAAAAAAACgAAAAAAAAABAAAAaAoAAAAAAAAACgAAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"left_delete",
					null,
					"AQAAAAkAAAAAAAAACQAAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					20,
					"right_delete",
					null,
					"FAAAACcAAAAAAAAAJwAAAAAAAAABAAAALCcAAAAAAAAAJwAAAAAAAAABAAAAICcAAAAAAAAAJwAAAAAAAAABAAAAcCcAAAAAAAAAJwAAAAAAAAABAAAAdScAAAAAAAAAJwAAAAAAAAABAAAAdCcAAAAAAAAAJwAAAAAAAAABAAAARScAAAAAAAAAJwAAAAAAAAABAAAAcicAAAAAAAAAJwAAAAAAAAABAAAAcicAAAAAAAAAJwAAAAAAAAABAAAAbycAAAAAAAAAJwAAAAAAAAABAAAAcicAAAAAAAAAJwAAAAAAAAABAAAALCcAAAAAAAAAJwAAAAAAAAABAAAAICcAAAAAAAAAJwAAAAAAAAABAAAAdCcAAAAAAAAAJwAAAAAAAAABAAAAbycAAAAAAAAAJwAAAAAAAAABAAAAUycAAAAAAAAAJwAAAAAAAAABAAAAbycAAAAAAAAAJwAAAAAAAAABAAAAdScAAAAAAAAAJwAAAAAAAAABAAAAcicAAAAAAAAAJwAAAAAAAAABAAAAYycAAAAAAAAAJwAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"",
					null,
					"AQAAALsDAAAAAAAAuwMAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAuwMAAAAAAADAAwAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"",
					null,
					"AQAAAAIEAAAAAAAAAgQAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAAgQAAAAAAAAHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DgAAAOIIAAAAAAAA4wgAAAAAAAAAAAAA4wgAAAAAAADlCAAAAAAAAAAAAADlCAAAAAAAAOcIAAAAAAAAAAAAAOcIAAAAAAAA6AgAAAAAAAAAAAAA6AgAAAAAAADpCAAAAAAAAAAAAADpCAAAAAAAAOoIAAAAAAAAAAAAAOoIAAAAAAAA6wgAAAAAAAAAAAAA6wgAAAAAAADsCAAAAAAAAAAAAADsCAAAAAAAAO0IAAAAAAAAAAAAAO0IAAAAAAAA7ggAAAAAAAAAAAAA7ggAAAAAAADvCAAAAAAAAAAAAADvCAAAAAAAAPAIAAAAAAAAAAAAAPAIAAAAAAAA8QgAAAAAAAAAAAAA8QgAAAAAAADyCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4ggAAAAAAADiCAAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPIIAAAAAAAA9AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8ggAAAAAAADyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPMIAAAAAAAA9QgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wgAAAAAAADzCAAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "FetchURL"
					},
					"CAAAAPQIAAAAAAAA9QgAAAAAAAAAAAAA9QgAAAAAAAD2CAAAAAAAAAAAAAD2CAAAAAAAAPcIAAAAAAAAAAAAAPcIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD5CAAAAAAAAAAAAAD5CAAAAAAAAPoIAAAAAAAAAAAAAPoIAAAAAAAA+wgAAAAAAAAAAAAA+wgAAAAAAAD8CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AgAAAAAAAD0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": " ERROR:"
					},
					"BwAAAPwIAAAAAAAA/QgAAAAAAAAAAAAA/QgAAAAAAAD+CAAAAAAAAAAAAAD+CAAAAAAAAP8IAAAAAAAAAAAAAP8IAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAABCQAAAAAAAAAAAAABCQAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AgAAAAAAAD8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAQJAAAAAAAABQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAkAAAAAAAAECQAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					2,
					"left_delete",
					null,
					"AgAAAAQJAAAAAAAABAkAAAAAAAABAAAALAMJAAAAAAAAAwkAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAABQkAAAAAAAAFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAAMJAAAAAAAABAkAAAAAAAAAAAAABAkAAAAAAAAFCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwkAAAAAAAADCQAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					2,
					"left_delete",
					null,
					"AgAAAAQJAAAAAAAABAkAAAAAAAABAAAAKwMJAAAAAAAAAwkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAABQkAAAAAAAAFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "',error.messa"
					},
					"DQAAAAMJAAAAAAAABAkAAAAAAAAAAAAABAkAAAAAAAAFCQAAAAAAAAAAAAAFCQAAAAAAAAYJAAAAAAAAAAAAAAYJAAAAAAAABwkAAAAAAAAAAAAABwkAAAAAAAAICQAAAAAAAAAAAAAICQAAAAAAAAkJAAAAAAAAAAAAAAkJAAAAAAAACgkAAAAAAAAAAAAACgkAAAAAAAALCQAAAAAAAAAAAAALCQAAAAAAAAwJAAAAAAAAAAAAAAwJAAAAAAAADQkAAAAAAAAAAAAADQkAAAAAAAAOCQAAAAAAAAAAAAAOCQAAAAAAAA8JAAAAAAAAAAAAAA8JAAAAAAAAEAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwkAAAAAAAADCQAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "ge+"
					},
					"AwAAABAJAAAAAAAAEQkAAAAAAAAAAAAAEQkAAAAAAAASCQAAAAAAAAAAAAASCQAAAAAAABMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAkAAAAAAAAQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABMJAAAAAAAAFQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwkAAAAAAAATCQAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAABQJAAAAAAAAFQkAAAAAAAAAAAAAFQkAAAAAAAAWCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAkAAAAAAAAUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "+error.stack"
					},
					"DAAAABcJAAAAAAAAGAkAAAAAAAAAAAAAGAkAAAAAAAAZCQAAAAAAAAAAAAAZCQAAAAAAABoJAAAAAAAAAAAAABoJAAAAAAAAGwkAAAAAAAAAAAAAGwkAAAAAAAAcCQAAAAAAAAAAAAAcCQAAAAAAAB0JAAAAAAAAAAAAAB0JAAAAAAAAHgkAAAAAAAAAAAAAHgkAAAAAAAAfCQAAAAAAAAAAAAAfCQAAAAAAACAJAAAAAAAAAAAAACAJAAAAAAAAIQkAAAAAAAAAAAAAIQkAAAAAAAAiCQAAAAAAAAAAAAAiCQAAAAAAACMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwkAAAAAAAAXCQAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACQJAAAAAAAAJQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAkAAAAAAAAkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"cut",
					null,
					"AQAAACYJAAAAAAAAJgkAAAAAAAAaAAAAICAgIFV0aWwucHV0RXJyb3IoZXJyb3IpOwo",
					"AQAAAAAAAAABAAAAJgkAAAAAAAAmCQAAAAAAAAAAAAAAAAAA"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAA0FAAAAAAAADgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQUAAAAAAAANBQAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAA4FAAAAAAAADwUAAAAAAAAAAAAADwUAAAAAAAAQBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgUAAAAAAAAOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAAA8FAAAAAAAAEAUAAAAAAAAAAAAAEAUAAAAAAAARBQAAAAAAAAAAAAARBQAAAAAAABIFAAAAAAAAAAAAABIFAAAAAAAAEwUAAAAAAAAAAAAAEwUAAAAAAAAUBQAAAAAAAAAAAAAUBQAAAAAAABUFAAAAAAAAAAAAABUFAAAAAAAAFgUAAAAAAAAAAAAAFgUAAAAAAAAXBQAAAAAAAAAAAAAXBQAAAAAAABgFAAAAAAAAAAAAABgFAAAAAAAAGQUAAAAAAAAAAAAAGQUAAAAAAAAaBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwUAAAAAAAAPBQAAAAAAAAAAAAAAAAAA"
				],
				[
					229,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABoFAAAAAAAAHAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgUAAAAAAAAaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABsFAAAAAAAAHQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwUAAAAAAAAbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "FetchCached"
					},
					"CwAAABwFAAAAAAAAHQUAAAAAAAAAAAAAHQUAAAAAAAAeBQAAAAAAAAAAAAAeBQAAAAAAAB8FAAAAAAAAAAAAAB8FAAAAAAAAIAUAAAAAAAAAAAAAIAUAAAAAAAAhBQAAAAAAAAAAAAAhBQAAAAAAACIFAAAAAAAAAAAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAAkBQAAAAAAACUFAAAAAAAAAAAAACUFAAAAAAAAJgUAAAAAAAAAAAAAJgUAAAAAAAAnBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAUAAAAAAAAcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACgFAAAAAAAAKQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAUAAAAAAAAoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACkFAAAAAAAAKwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQUAAAAAAAApBQAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "urol"
					},
					"BAAAACoFAAAAAAAAKwUAAAAAAAAAAAAAKwUAAAAAAAAsBQAAAAAAAAAAAAAsBQAAAAAAAC0FAAAAAAAAAAAAAC0FAAAAAAAALgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgUAAAAAAAAqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					2,
					"left_delete",
					null,
					"AgAAAC0FAAAAAAAALQUAAAAAAAABAAAAbCwFAAAAAAAALAUAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAALgUAAAAAAAAuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": "l,options"
					},
					"CQAAACwFAAAAAAAALQUAAAAAAAAAAAAALQUAAAAAAAAuBQAAAAAAAAAAAAAuBQAAAAAAAC8FAAAAAAAAAAAAAC8FAAAAAAAAMAUAAAAAAAAAAAAAMAUAAAAAAAAxBQAAAAAAAAAAAAAxBQAAAAAAADIFAAAAAAAAAAAAADIFAAAAAAAAMwUAAAAAAAAAAAAAMwUAAAAAAAA0BQAAAAAAAAAAAAA0BQAAAAAAADUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAUAAAAAAAAsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADcFAAAAAAAAOAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAADkFAAAAAAAAOgUAAAAAAAAAAAAAOgUAAAAAAAA7BQAAAAAAAAAAAAA7BQAAAAAAADwFAAAAAAAAAAAAADwFAAAAAAAAPQUAAAAAAAAAAAAAPQUAAAAAAAA+BQAAAAAAAAAAAAA+BQAAAAAAAD8FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD8FAAAAAAAAQAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwUAAAAAAAA/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"AgAAAFMFAAAAAAAAVAUAAAAAAAAAAAAAVAUAAAAAAABVBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwUAAAAAAABTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": "M"
					},
					"AQAAAFUFAAAAAAAAVgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQUAAAAAAABVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"left_delete",
					null,
					"AQAAAFUFAAAAAAAAVQUAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAVgUAAAAAAABWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFUFAAAAAAAAVgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQUAAAAAAABVBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "server.js",
			"settings":
			{
				"buffer_size": 27374,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					25,
					1,
					"",
					null,
					"AQAAALEIAAAAAAAAsQgAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAsQgAAAAAAAC2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"",
					null,
					"AQAAAKgLAAAAAAAAqAsAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAqAsAAAAAAACtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					3,
					"right_delete",
					null,
					"AwAAABIfAAAAAAAAEh8AAAAAAAABAAAATxIfAAAAAAAAEh8AAAAAAAABAAAAdRIfAAAAAAAAEh8AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAEh8AAAAAAAASHwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAB8fAAAAAAAAIB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHx8AAAAAAAAfHwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAACAfAAAAAAAAIR8AAAAAAAAAAAAAIR8AAAAAAAAiHwAAAAAAAAAAAAAiHwAAAAAAACMfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIB8AAAAAAAAgHwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACMfAAAAAAAAJB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIx8AAAAAAAAjHwAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ".test"
					},
					"BQAAADMfAAAAAAAANB8AAAAAAAAAAAAANB8AAAAAAAA1HwAAAAAAAAAAAAA1HwAAAAAAADYfAAAAAAAAAAAAADYfAAAAAAAANx8AAAAAAAAAAAAANx8AAAAAAAA4HwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMx8AAAAAAAAzHwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADgfAAAAAAAAOh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOB8AAAAAAAA4HwAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAADkfAAAAAAAAOh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOR8AAAAAAAA5HwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAACQfAAAAAAAAJR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJB8AAAAAAAAkHwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					6,
					"left_delete",
					null,
					"BgAAAAsfAAAAAAAACx8AAAAAAAABAAAALgofAAAAAAAACh8AAAAAAAABAAAAbAkfAAAAAAAACR8AAAAAAAABAAAAaQgfAAAAAAAACB8AAAAAAAABAAAAdAcfAAAAAAAABx8AAAAAAAABAAAAVQYfAAAAAAAABh8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAADB8AAAAAAAAMHwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAYfAAAAAAAABx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABh8AAAAAAAAGHwAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": ",."
					},
					"AgAAAKcEAAAAAAAAqAQAAAAAAAAAAAAAqAQAAAAAAACpBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwQAAAAAAACnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAAKgEAAAAAAAAqAQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAqQQAAAAAAACpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "fiol√∂te"
					},
					"BwAAAKgEAAAAAAAAqQQAAAAAAAAAAAAAqQQAAAAAAACqBAAAAAAAAAAAAACqBAAAAAAAAKsEAAAAAAAAAAAAAKsEAAAAAAAArAQAAAAAAAAAAAAArAQAAAAAAACtBAAAAAAAAAAAAACtBAAAAAAAAK4EAAAAAAAAAAAAAK4EAAAAAAAArwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAQAAAAAAACoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					4,
					"left_delete",
					null,
					"BAAAAK4EAAAAAAAArgQAAAAAAAABAAAAZa0EAAAAAAAArQQAAAAAAAABAAAAdKwEAAAAAAAArAQAAAAAAAACAAAAw7arBAAAAAAAAKsEAAAAAAAAAQAAAGw",
					"AQAAAAAAAAABAAAArwQAAAAAAACvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAKsEAAAAAAAArAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwQAAAAAAACrBAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					2,
					"left_delete",
					null,
					"AgAAAKsEAAAAAAAAqwQAAAAAAAABAAAAbKoEAAAAAAAAqgQAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAArAQAAAAAAACsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "lter,m"
					},
					"BgAAAKoEAAAAAAAAqwQAAAAAAAAAAAAAqwQAAAAAAACsBAAAAAAAAAAAAACsBAAAAAAAAK0EAAAAAAAAAAAAAK0EAAAAAAAArgQAAAAAAAAAAAAArgQAAAAAAACvBAAAAAAAAAAAAACvBAAAAAAAALAEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgQAAAAAAACqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAAK8EAAAAAAAArwQAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAsAQAAAAAAACwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "filterKeys"
					},
					"CgAAAK8EAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAACxBAAAAAAAAAAAAACxBAAAAAAAALIEAAAAAAAAAAAAALIEAAAAAAAAswQAAAAAAAAAAAAAswQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALUEAAAAAAAAAAAAALUEAAAAAAAAtgQAAAAAAAAAAAAAtgQAAAAAAAC3BAAAAAAAAAAAAAC3BAAAAAAAALgEAAAAAAAAAAAAALgEAAAAAAAAuQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwQAAAAAAACvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					6,
					"left_delete",
					null,
					"BgAAAIgsAAAAAAAAiCwAAAAAAAANAAAAZmlsdGVyT3V0S2V5c4csAAAAAAAAhywAAAAAAAABAAAALoYsAAAAAAAAhiwAAAAAAAABAAAAbIUsAAAAAAAAhSwAAAAAAAABAAAAaYQsAAAAAAAAhCwAAAAAAAABAAAAdIMsAAAAAAAAgywAAAAAAAABAAAAVQ",
					"AQAAAAAAAAABAAAAiCwAAAAAAACVLAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "filterKeys"
					},
					"CgAAAIMsAAAAAAAAhCwAAAAAAAAAAAAAhCwAAAAAAACFLAAAAAAAAAAAAACFLAAAAAAAAIYsAAAAAAAAAAAAAIYsAAAAAAAAhywAAAAAAAAAAAAAhywAAAAAAACILAAAAAAAAAAAAACILAAAAAAAAIksAAAAAAAAAAAAAIksAAAAAAAAiiwAAAAAAAAAAAAAiiwAAAAAAACLLAAAAAAAAAAAAACLLAAAAAAAAIwsAAAAAAAAAAAAAIwsAAAAAAAAjSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgywAAAAAAACDLAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "k>"
					},
					"AgAAAJYsAAAAAAAAlywAAAAAAAAAAAAAlywAAAAAAACYLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAliwAAAAAAACWLAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJgsAAAAAAAAmSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmCwAAAAAAACYLAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					2,
					"left_delete",
					null,
					"AgAAAJgsAAAAAAAAmCwAAAAAAAABAAAAIJcsAAAAAAAAlywAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAmSwAAAAAAACZLAAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "=>!"
					},
					"AwAAAJcsAAAAAAAAmCwAAAAAAAAAAAAAmCwAAAAAAACZLAAAAAAAAAAAAACZLAAAAAAAAJosAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlywAAAAAAACXLAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": ".test"
					},
					"BQAAAKosAAAAAAAAqywAAAAAAAAAAAAAqywAAAAAAACsLAAAAAAAAAAAAACsLAAAAAAAAK0sAAAAAAAAAAAAAK0sAAAAAAAAriwAAAAAAAAAAAAAriwAAAAAAACvLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqiwAAAAAAACqLAAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAK8sAAAAAAAAsSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArywAAAAAAACvLAAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAALAsAAAAAAAAsSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsCwAAAAAAACwLAAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"paste",
					null,
					"AgAAAOAsAAAAAAAAIy0AAAAAAAAAAAAAIy0AAAAAAAAjLQAAAAAAABwAAAAgICAgICBVdGlsLnB1dEVycm9yKGVycm9yKTsK",
					"AQAAAAAAAAABAAAA4CwAAAAAAAD8LAAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "GerberTo"
					},
					"CQAAAPEsAAAAAAAA8iwAAAAAAAAAAAAA8iwAAAAAAADyLAAAAAAAAAgAAABGZXRjaFVSTPIsAAAAAAAA8ywAAAAAAAAAAAAA8ywAAAAAAAD0LAAAAAAAAAAAAAD0LAAAAAAAAPUsAAAAAAAAAAAAAPUsAAAAAAAA9iwAAAAAAAAAAAAA9iwAAAAAAAD3LAAAAAAAAAAAAAD3LAAAAAAAAPgsAAAAAAAAAAAAAPgsAAAAAAAA+SwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8SwAAAAAAAD5LAAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert_completion",
					{
						"completion": "gerberToGcode",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "gerberToGcode"
					},
					"AgAAAPEsAAAAAAAA8SwAAAAAAAAIAAAAR2VyYmVyVG/xLAAAAAAAAP4sAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+SwAAAAAAAD5LAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "foi"
					},
					"BAAAALY0AAAAAAAAtzQAAAAAAAAAAAAAtzQAAAAAAAC3NAAAAAAAABIAAABVdGlsLmZpbHRlck91dEtleXO3NAAAAAAAALg0AAAAAAAAAAAAALg0AAAAAAAAuTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyDQAAAAAAAC2NAAAAAAAAAAAAAAAAFhA"
				],
				[
					183,
					2,
					"left_delete",
					null,
					"AgAAALg0AAAAAAAAuDQAAAAAAAABAAAAabc0AAAAAAAAtzQAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAuTQAAAAAAAC5NAAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "ilterKeys"
					},
					"CQAAALc0AAAAAAAAuDQAAAAAAAAAAAAAuDQAAAAAAAC5NAAAAAAAAAAAAAC5NAAAAAAAALo0AAAAAAAAAAAAALo0AAAAAAAAuzQAAAAAAAAAAAAAuzQAAAAAAAC8NAAAAAAAAAAAAAC8NAAAAAAAAL00AAAAAAAAAAAAAL00AAAAAAAAvjQAAAAAAAAAAAAAvjQAAAAAAAC/NAAAAAAAAAAAAAC/NAAAAAAAAMA0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtzQAAAAAAAC3NAAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "k=>"
					},
					"AwAAAM40AAAAAAAAzzQAAAAAAAAAAAAAzzQAAAAAAADQNAAAAAAAAAAAAADQNAAAAAAAANE0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzjQAAAAAAADONAAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": " !"
					},
					"AgAAANE0AAAAAAAA0jQAAAAAAAAAAAAA0jQAAAAAAADTNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0TQAAAAAAADRNAAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": ".test"
					},
					"BQAAADI1AAAAAAAAMzUAAAAAAAAAAAAAMzUAAAAAAAA0NQAAAAAAAAAAAAA0NQAAAAAAADU1AAAAAAAAAAAAADU1AAAAAAAANjUAAAAAAAAAAAAANjUAAAAAAAA3NQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMjUAAAAAAAAyNQAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADc1AAAAAAAAOTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANzUAAAAAAAA3NQAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAADg1AAAAAAAAOTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAODUAAAAAAAA4NQAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"right_delete",
					null,
					"AQAAAJo0AAAAAAAAmjQAAAAAAAAPAAAAICAgIC4uLlV0aWwuaWYo",
					"AQAAAAAAAAABAAAAmjQAAAAAAACpNAAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"cut",
					null,
					"AQAAADQ1AAAAAAAANDUAAAAAAABaAAAAICAgICAgKCkgPT4gW10sCiAgICAgICAgICAgIHZhbHVlID0+IFsnaGVhZGVyczogJywgdmFsdWVdLAogICAgICAgICAgICBVdGlsLmlzRW1wdHkKICAgICAg",
					"AQAAAAAAAAABAAAANDUAAAAAAACONQAAAAAAAAAAAAAAAEhA"
				],
				[
					304,
					1,
					"left_delete",
					null,
					"AQAAACw1AAAAAAAALDUAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAALTUAAAAAAAAtNQAAAAAAAP///////+9/"
				],
				[
					313,
					1,
					"cut",
					null,
					"AQAAADQ1AAAAAAAANDUAAAAAAAAMAAAAICAgKQogICAgICAg",
					"AQAAAAAAAAABAAAANDUAAAAAAABANQAAAAAAAAAAAAAAAExA"
				],
				[
					321,
					1,
					"",
					null,
					"AQAAAO5RAAAAAAAA7lEAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAA7lEAAAAAAADzUQAAAAAAAAAAAAAAAPC/"
				],
				[
					322,
					1,
					"",
					null,
					"AQAAAJ9SAAAAAAAAn1IAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAn1IAAAAAAACkUgAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					1,
					"",
					null,
					"AQAAAAxTAAAAAAAADFMAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAADFMAAAAAAAARUwAAAAAAAAAAAAAAAPC/"
				],
				[
					329,
					1,
					"",
					null,
					"AQAAAGNVAAAAAAAAY1UAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAY1UAAAAAAABoVQAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"",
					null,
					"AQAAAM1WAAAAAAAAzVYAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAzVYAAAAAAADSVgAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"",
					null,
					"AQAAAGhgAAAAAAAAaGAAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAaGAAAAAAAABtYAAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"",
					null,
					"AQAAAM9hAAAAAAAAz2EAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAz2EAAAAAAADUYQAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"",
					null,
					"AQAAAHtiAAAAAAAAe2IAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAe2IAAAAAAACAYgAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"",
					null,
					"AQAAADFkAAAAAAAAMWQAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAMWQAAAAAAAA2ZAAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"",
					null,
					"AQAAAENkAAAAAAAAQ2QAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAQ2QAAAAAAABIZAAAAAAAAAAAAAAAAPC/"
				],
				[
					348,
					1,
					"",
					null,
					"AQAAAJxkAAAAAAAAnGQAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAnGQAAAAAAAChZAAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"",
					null,
					"AQAAAP0lAAAAAAAA/SUAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAA/SUAAAAAAAACJgAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"",
					null,
					"AQAAAIMoAAAAAAAAgygAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAgygAAAAAAACIKAAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"",
					null,
					"AQAAADVCAAAAAAAANUIAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAANUIAAAAAAAA6QgAAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"",
					null,
					"AQAAAM1KAAAAAAAAzUoAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAzUoAAAAAAADSSgAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"",
					null,
					"AQAAAPhKAAAAAAAA+EoAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAA+EoAAAAAAAD9SgAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"",
					null,
					"AQAAAF5QAAAAAAAAXlAAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAXlAAAAAAAABjUAAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": ",matchAll"
					},
					"CQAAALkEAAAAAAAAugQAAAAAAAAAAAAAugQAAAAAAAC7BAAAAAAAAAAAAAC7BAAAAAAAALwEAAAAAAAAAAAAALwEAAAAAAAAvQQAAAAAAAAAAAAAvQQAAAAAAAC+BAAAAAAAAAAAAAC+BAAAAAAAAL8EAAAAAAAAAAAAAL8EAAAAAAAAwAQAAAAAAAAAAAAAwAQAAAAAAADBBAAAAAAAAAAAAADBBAAAAAAAAMIEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQQAAAAAAAC5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					400,
					1,
					"paste",
					null,
					"AgAAANsEAAAAAAAA+AUAAAAAAAAAAAAA+AUAAAAAAAD4BQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAA3AQAAAAAAADbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": " hashStrin"
					},
					"CgAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADlBAAAAAAAAAAAAADlBAAAAAAAAOYEAAAAAAAAAAAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA5wQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOkEAAAAAAAAAAAAAOkEAAAAAAAA6gQAAAAAAAAAAAAA6gQAAAAAAADrBAAAAAAAAAAAAADrBAAAAAAAAOwEAAAAAAAAAAAAAOwEAAAAAAAA7QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wQAAAAAAADjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					404,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAO0EAAAAAAAA7gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QQAAAAAAADtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"",
					null,
					"AQAAALNUAAAAAAAAs1QAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAs1QAAAAAAAC4VAAAAAAAAAAAAAAAAPC/"
				],
				[
					417,
					1,
					"",
					null,
					"AQAAABtWAAAAAAAAG1YAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAG1YAAAAAAAAgVgAAAAAAAAAAAAAAAPC/"
				],
				[
					421,
					1,
					"",
					null,
					"AQAAALhjAAAAAAAAuGMAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAAuGMAAAAAAAC9YwAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"",
					null,
					"AQAAAPdjAAAAAAAA92MAAAAAAAAFAAAAVXRpbC4",
					"AQAAAAAAAAABAAAA92MAAAAAAAD8YwAAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANsEAAAAAAAA3AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wQAAAAAAADbBAAAAAAAAAAAAAAAAAAA"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMIFAAAAAAAAwwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgUAAAAAAADCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"paste",
					null,
					"AQAAAMMFAAAAAAAA8wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwUAAAAAAADDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPMFAAAAAAAA9AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wUAAAAAAADzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					1,
					"cut",
					null,
					"AQAAAMIFAAAAAAAAwgUAAAAAAAAyAAAAICh4IDw8IG4pIHwgKCh4ID4+ICgzMiAtIG4pKSAmIH4oKC0xID4+IG4pIDw8IG4pKSA",
					"AQAAAAAAAAABAAAA9AUAAAAAAADCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"paste",
					null,
					"AQAAAMIFAAAAAAAA9AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgUAAAAAAADCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANsEAAAAAAAA3AQAAAAAAAAAAAAA3AQAAAAAAADdBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wQAAAAAAADbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAANwEAAAAAAAA3QQAAAAAAAAAAAAA3QQAAAAAAADeBAAAAAAAAAAAAADeBAAAAAAAAN8EAAAAAAAAAAAAAN8EAAAAAAAA4AQAAAAAAAAAAAAA4AQAAAAAAADhBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AQAAAAAAADcBAAAAAAAAAAAAAAAAAAA"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": " rotateLeft"
					},
					"CwAAAOEEAAAAAAAA4gQAAAAAAAAAAAAA4gQAAAAAAADjBAAAAAAAAAAAAADjBAAAAAAAAOQEAAAAAAAAAAAAAOQEAAAAAAAA5QQAAAAAAAAAAAAA5QQAAAAAAADmBAAAAAAAAAAAAADmBAAAAAAAAOcEAAAAAAAAAAAAAOcEAAAAAAAA6AQAAAAAAAAAAAAA6AQAAAAAAADpBAAAAAAAAAAAAADpBAAAAAAAAOoEAAAAAAAAAAAAAOoEAAAAAAAA6wQAAAAAAAAAAAAA6wQAAAAAAADsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QQAAAAAAADhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOwEAAAAAAAA7QQAAAAAAAAAAAAA7QQAAAAAAADuBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AQAAAAAAADsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": " N"
					},
					"AgAAAO4EAAAAAAAA7wQAAAAAAAAAAAAA7wQAAAAAAADwBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gQAAAAAAADuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAPAEAAAAAAAA8QQAAAAAAAAAAAAA8QQAAAAAAADyBAAAAAAAAAAAAADyBAAAAAAAAPMEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AQAAAAAAADwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPMEAAAAAAAA9AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wQAAAAAAADzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					4,
					"left_delete",
					null,
					"BAAAAPMEAAAAAAAA8wQAAAAAAAABAAAAIPIEAAAAAAAA8gQAAAAAAAABAAAAPvEEAAAAAAAA8QQAAAAAAAABAAAAPfAEAAAAAAAA8AQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA9AQAAAAAAAD0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAPAEAAAAAAAA8QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AQAAAAAAADwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					464,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPEEAAAAAAAA8gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QQAAAAAAADxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					3,
					"left_delete",
					null,
					"AwAAAPEEAAAAAAAA8QQAAAAAAAABAAAAIPAEAAAAAAAA8AQAAAAAAAABAAAAbu8EAAAAAAAA7wQAAAAAAAABAAAATg",
					"AQAAAAAAAAABAAAA8gQAAAAAAADyBAAAAAAAAAAAAAAAAPC/"
				],
				[
					466,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAO8EAAAAAAAA8AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wQAAAAAAADvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAPAEAAAAAAAA8QQAAAAAAAAAAAAA8QQAAAAAAADyBAAAAAAAAAAAAADyBAAAAAAAAPMEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AQAAAAAAADwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					1,
					"insert",
					{
						"characters": " x"
					},
					"AgAAAPMEAAAAAAAA9AQAAAAAAAAAAAAA9AQAAAAAAAD1BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wQAAAAAAADzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAPUEAAAAAAAA9gQAAAAAAAAAAAAA9gQAAAAAAAD3BAAAAAAAAAAAAAD3BAAAAAAAAPgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QQAAAAAAAD1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgEAAAAAAAA+QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AQAAAAAAAD4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"paste",
					null,
					"AQAAAPkEAAAAAAAAKwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QQAAAAAAAD5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"left_delete",
					null,
					"AQAAACoFAAAAAAAAKgUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAKwUAAAAAAAArBQAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACoFAAAAAAAAKwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgUAAAAAAAAqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					474,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACsFAAAAAAAALAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwUAAAAAAAArBQAAAAAAAAAAAAAAAPC/"
				],
				[
					477,
					1,
					"left_delete",
					null,
					"AQAAACsFAAAAAAAAKwUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAALAUAAAAAAAAsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAIcFAAAAAAAAiAUAAAAAAAAAAAAAiAUAAAAAAACKBQAAAAAAAAAAAACKBQAAAAAAAIsFAAAAAAAAAAAAAIsFAAAAAAAAjAUAAAAAAAAAAAAAjAUAAAAAAACNBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwUAAAAAAACHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": " rot="
					},
					"BQAAAI0FAAAAAAAAjgUAAAAAAAAAAAAAjgUAAAAAAACPBQAAAAAAAAAAAACPBQAAAAAAAJAFAAAAAAAAAAAAAJAFAAAAAAAAkQUAAAAAAAAAAAAAkQUAAAAAAACSBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQUAAAAAAACNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"paste",
					null,
					"AQAAAJIFAAAAAAAAnAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgUAAAAAAACSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					496,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJwFAAAAAAAAngUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAUAAAAAAACcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AQAAAJ0FAAAAAAAAngUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQUAAAAAAACdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJ8FAAAAAAAAoAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwUAAAAAAACfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAC0GAAAAAAAALgYAAAAAAAAAAAAALgYAAAAAAAAvBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQYAAAAAAAAtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					3,
					"left_delete",
					null,
					"AwAAAC4GAAAAAAAALgYAAAAAAAABAAAAZS0GAAAAAAAALQYAAAAAAAABAAAAciwGAAAAAAAALAYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAALwYAAAAAAAAvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAACwGAAAAAAAALQYAAAAAAAAAAAAALQYAAAAAAAAuBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAYAAAAAAAAsBgAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"left_delete",
					null,
					"AQAAAC0GAAAAAAAALQYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAALgYAAAAAAAAuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": "rot(ret)"
					},
					"CAAAAC0GAAAAAAAALgYAAAAAAAAAAAAALgYAAAAAAAAvBgAAAAAAAAAAAAAvBgAAAAAAADAGAAAAAAAAAAAAADAGAAAAAAAAMQYAAAAAAAAAAAAAMQYAAAAAAAAyBgAAAAAAAAAAAAAyBgAAAAAAADMGAAAAAAAAAAAAADMGAAAAAAAANAYAAAAAAAAAAAAANAYAAAAAAAA1BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQYAAAAAAAAtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAADUGAAAAAAAANgYAAAAAAAAAAAAANgYAAAAAAAA3BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQYAAAAAAAA1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": " mask;"
					},
					"BgAAADcGAAAAAAAAOAYAAAAAAAAAAAAAOAYAAAAAAAA5BgAAAAAAAAAAAAA5BgAAAAAAADoGAAAAAAAAAAAAADoGAAAAAAAAOwYAAAAAAAAAAAAAOwYAAAAAAAA8BgAAAAAAAAAAAAA8BgAAAAAAAD0GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwYAAAAAAAA3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					1,
					"cut",
					null,
					"AQAAAD0GAAAAAAAAPQYAAAAAAABRAAAAKHggPDwgbikgfCAoKHggPj4gKDMyIC0gbikpICYgfigoLTEgPj4gbikgPDwgbikpICBVdGlsLnJvdGF0ZUxlZnQocmV0LCA3KSAmIG1hc2s7",
					"AQAAAAAAAAABAAAAPQYAAAAAAACOBgAAAAAAAP///////+9/"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF8GAAAAAAAAYAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwYAAAAAAABfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					603,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DQAAAANXAAAAAAAABFcAAAAAAAAAAAAABFcAAAAAAAAMVwAAAAAAAAAAAAAMVwAAAAAAAA1XAAAAAAAAAAAAAA1XAAAAAAAADlcAAAAAAAAAAAAADlcAAAAAAAAPVwAAAAAAAAAAAAAPVwAAAAAAABBXAAAAAAAAAAAAABBXAAAAAAAAEVcAAAAAAAAAAAAAEVcAAAAAAAASVwAAAAAAAAAAAAASVwAAAAAAABNXAAAAAAAAAAAAABNXAAAAAAAAFFcAAAAAAAAAAAAAFFcAAAAAAAAVVwAAAAAAAAAAAAAVVwAAAAAAABZXAAAAAAAAAAAAABZXAAAAAAAAF1cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAA1cAAAAAAAADVwAAAAAAAAAAAAAAAPC/"
				],
				[
					604,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABdXAAAAAAAAGVcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAF1cAAAAAAAAXVwAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABhXAAAAAAAAGlcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGFcAAAAAAAAYVwAAAAAAAAAAAAAAAPC/"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": "req.url"
					},
					"BwAAABlXAAAAAAAAGlcAAAAAAAAAAAAAGlcAAAAAAAAbVwAAAAAAAAAAAAAbVwAAAAAAABxXAAAAAAAAAAAAABxXAAAAAAAAHVcAAAAAAAAAAAAAHVcAAAAAAAAeVwAAAAAAAAAAAAAeVwAAAAAAAB9XAAAAAAAAAAAAAB9XAAAAAAAAIFcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGVcAAAAAAAAZVwAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					1,
					"insert",
					{
						"characters": ",req.url"
					},
					"CAAAACFXAAAAAAAAIlcAAAAAAAAAAAAAIlcAAAAAAAAjVwAAAAAAAAAAAAAjVwAAAAAAACRXAAAAAAAAAAAAACRXAAAAAAAAJVcAAAAAAAAAAAAAJVcAAAAAAAAmVwAAAAAAAAAAAAAmVwAAAAAAACdXAAAAAAAAAAAAACdXAAAAAAAAKFcAAAAAAAAAAAAAKFcAAAAAAAApVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIVcAAAAAAAAhVwAAAAAAAAAAAAAAAPC/"
				],
				[
					610,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACpXAAAAAAAAK1cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKlcAAAAAAAAqVwAAAAAAAAAAAAAAAPC/"
				],
				[
					620,
					1,
					"insert",
					{
						"characters": "error"
					},
					"BQAAAFhcAAAAAAAAWVwAAAAAAAAAAAAAWVwAAAAAAABaXAAAAAAAAAAAAABaXAAAAAAAAFtcAAAAAAAAAAAAAFtcAAAAAAAAXFwAAAAAAAAAAAAAXFwAAAAAAABdXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWFwAAAAAAABYXAAAAAAAAAAAAAAAAPC/"
				],
				[
					621,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAF1cAAAAAAAAXlwAAAAAAAAAAAAAXlwAAAAAAABfXAAAAAAAAAAAAABfXAAAAAAAAGBcAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXVwAAAAAAABdXAAAAAAAAAAAAAAAAPC/"
				],
				[
					622,
					1,
					"insert",
					{
						"characters": " conosle"
					},
					"CAAAAGBcAAAAAAAAYVwAAAAAAAAAAAAAYVwAAAAAAABiXAAAAAAAAAAAAABiXAAAAAAAAGNcAAAAAAAAAAAAAGNcAAAAAAAAZFwAAAAAAAAAAAAAZFwAAAAAAABlXAAAAAAAAAAAAABlXAAAAAAAAGZcAAAAAAAAAAAAAGZcAAAAAAAAZ1wAAAAAAAAAAAAAZ1wAAAAAAABoXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYFwAAAAAAABgXAAAAAAAAAAAAAAAAPC/"
				],
				[
					623,
					4,
					"left_delete",
					null,
					"BAAAAGdcAAAAAAAAZ1wAAAAAAAABAAAAZWZcAAAAAAAAZlwAAAAAAAABAAAAbGVcAAAAAAAAZVwAAAAAAAABAAAAc2RcAAAAAAAAZFwAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAaFwAAAAAAABoXAAAAAAAAAAAAAAAAPC/"
				],
				[
					624,
					1,
					"insert",
					{
						"characters": "sole.loig"
					},
					"CQAAAGRcAAAAAAAAZVwAAAAAAAAAAAAAZVwAAAAAAABmXAAAAAAAAAAAAABmXAAAAAAAAGdcAAAAAAAAAAAAAGdcAAAAAAAAaFwAAAAAAAAAAAAAaFwAAAAAAABpXAAAAAAAAAAAAABpXAAAAAAAAGpcAAAAAAAAAAAAAGpcAAAAAAAAa1wAAAAAAAAAAAAAa1wAAAAAAABsXAAAAAAAAAAAAABsXAAAAAAAAG1cAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZFwAAAAAAABkXAAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					2,
					"left_delete",
					null,
					"AgAAAGxcAAAAAAAAbFwAAAAAAAABAAAAZ2tcAAAAAAAAa1wAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAbVwAAAAAAABtXAAAAAAAAAAAAAAAAPC/"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAGtcAAAAAAAAbFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa1wAAAAAAABrXAAAAAAAAAAAAAAAAPC/"
				],
				[
					627,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGxcAAAAAAAAblwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbFwAAAAAAABsXAAAAAAAAAAAAAAAAPC/"
				],
				[
					628,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAG1cAAAAAAAAb1wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbVwAAAAAAABtXAAAAAAAAAAAAAAAAPC/"
				],
				[
					629,
					1,
					"insert",
					{
						"characters": "Exception:"
					},
					"CgAAAG5cAAAAAAAAb1wAAAAAAAAAAAAAb1wAAAAAAABwXAAAAAAAAAAAAABwXAAAAAAAAHFcAAAAAAAAAAAAAHFcAAAAAAAAclwAAAAAAAAAAAAAclwAAAAAAABzXAAAAAAAAAAAAABzXAAAAAAAAHRcAAAAAAAAAAAAAHRcAAAAAAAAdVwAAAAAAAAAAAAAdVwAAAAAAAB2XAAAAAAAAAAAAAB2XAAAAAAAAHdcAAAAAAAAAAAAAHdcAAAAAAAAeFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAblwAAAAAAABuXAAAAAAAAAAAAAAAAPC/"
				],
				[
					631,
					1,
					"insert",
					{
						"characters": ",e"
					},
					"AgAAAHlcAAAAAAAAelwAAAAAAAAAAAAAelwAAAAAAAB7XAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeVwAAAAAAAB5XAAAAAAAAAAAAAAAAPC/"
				],
				[
					632,
					2,
					"left_delete",
					null,
					"AgAAAHpcAAAAAAAAelwAAAAAAAABAAAAZXlcAAAAAAAAeVwAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAe1wAAAAAAAB7XAAAAAAAAAAAAAAAAPC/"
				],
				[
					633,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAHlcAAAAAAAAelwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeVwAAAAAAAB5XAAAAAAAAAAAAAAAAPC/"
				],
				[
					634,
					1,
					"left_delete",
					null,
					"AQAAAHlcAAAAAAAAeVwAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAelwAAAAAAAB6XAAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"insert",
					{
						"characters": ",error.message+"
					},
					"DwAAAHlcAAAAAAAAelwAAAAAAAAAAAAAelwAAAAAAAB7XAAAAAAAAAAAAAB7XAAAAAAAAHxcAAAAAAAAAAAAAHxcAAAAAAAAfVwAAAAAAAAAAAAAfVwAAAAAAAB+XAAAAAAAAAAAAAB+XAAAAAAAAH9cAAAAAAAAAAAAAH9cAAAAAAAAgFwAAAAAAAAAAAAAgFwAAAAAAACBXAAAAAAAAAAAAACBXAAAAAAAAIJcAAAAAAAAAAAAAIJcAAAAAAAAg1wAAAAAAAAAAAAAg1wAAAAAAACEXAAAAAAAAAAAAACEXAAAAAAAAIVcAAAAAAAAAAAAAIVcAAAAAAAAhlwAAAAAAAAAAAAAhlwAAAAAAACHXAAAAAAAAAAAAACHXAAAAAAAAIhcAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeVwAAAAAAAB5XAAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIhcAAAAAAAAilwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiFwAAAAAAACIXAAAAAAAAAAAAAAAAPC/"
				],
				[
					637,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAIlcAAAAAAAAilwAAAAAAAAAAAAAilwAAAAAAACLXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiVwAAAAAAACJXAAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIxcAAAAAAAAjVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjFwAAAAAAACMXAAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"left_delete",
					null,
					"AQAAAIxcAAAAAAAAjFwAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAjVwAAAAAAACNXAAAAAAAAAAAAAAAAPC/"
				],
				[
					641,
					1,
					"insert",
					{
						"characters": "+error.stack"
					},
					"DAAAAIxcAAAAAAAAjVwAAAAAAAAAAAAAjVwAAAAAAACOXAAAAAAAAAAAAACOXAAAAAAAAI9cAAAAAAAAAAAAAI9cAAAAAAAAkFwAAAAAAAAAAAAAkFwAAAAAAACRXAAAAAAAAAAAAACRXAAAAAAAAJJcAAAAAAAAAAAAAJJcAAAAAAAAk1wAAAAAAAAAAAAAk1wAAAAAAACUXAAAAAAAAAAAAACUXAAAAAAAAJVcAAAAAAAAAAAAAJVcAAAAAAAAllwAAAAAAAAAAAAAllwAAAAAAACXXAAAAAAAAAAAAACXXAAAAAAAAJhcAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjFwAAAAAAACMXAAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"cut",
					null,
					"AQAAAJlcAAAAAAAAmVwAAAAAAAASAAAAICAgICBVdGlsLnB1dEVycm9y",
					"AQAAAAAAAAABAAAAmVwAAAAAAACrXAAAAAAAAP///////+9/"
				],
				[
					645,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJlcAAAAAAAAmlwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmVwAAAAAAACZXAAAAAAAAAAAAAAAAPC/"
				],
				[
					646,
					1,
					"left_delete",
					null,
					"AQAAAJlcAAAAAAAAmVwAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAmlwAAAAAAACaXAAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": "req.url+'';"
					},
					"CwAAAEBXAAAAAAAAQVcAAAAAAAAAAAAAQVcAAAAAAABCVwAAAAAAAAAAAABCVwAAAAAAAENXAAAAAAAAAAAAAENXAAAAAAAARFcAAAAAAAAAAAAARFcAAAAAAABFVwAAAAAAAAAAAABFVwAAAAAAAEZXAAAAAAAAAAAAAEZXAAAAAAAAR1cAAAAAAAAAAAAAR1cAAAAAAABIVwAAAAAAAAAAAABIVwAAAAAAAElXAAAAAAAAAAAAAElXAAAAAAAASlcAAAAAAAAAAAAASlcAAAAAAABLVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQFcAAAAAAABAVwAAAAAAAAAAAAAAAPC/"
				],
				[
					659,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAEtXAAAAAAAATFcAAAAAAAAAAAAATFcAAAAAAABNVwAAAAAAAAAAAABNVwAAAAAAAE5XAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAS1cAAAAAAABLVwAAAAAAAAAAAAAAAPC/"
				],
				[
					662,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE5XAAAAAAAAT1cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATlcAAAAAAABOVwAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"insert",
					{
						"characters": "[];"
					},
					"AwAAAKNXAAAAAAAApFcAAAAAAAAAAAAApFcAAAAAAAClVwAAAAAAAAAAAAClVwAAAAAAAKZXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAo1cAAAAAAACjVwAAAAAAAAAAAAAAAGNA"
				],
				[
					675,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAKZXAAAAAAAAp1cAAAAAAAAAAAAAp1cAAAAAAACoVwAAAAAAAAAAAACoVwAAAAAAAKlXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAplcAAAAAAACmVwAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": "/&"
					},
					"AgAAAG9XAAAAAAAAcFcAAAAAAAAAAAAAcFcAAAAAAABxVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb1cAAAAAAABvVwAAAAAAAAAAAAAAAFBA"
				],
				[
					679,
					1,
					"left_delete",
					null,
					"AQAAAHBXAAAAAAAAcFcAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAcVcAAAAAAABxVwAAAAAAAAAAAAAAAPC/"
				],
				[
					680,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHBXAAAAAAAAcVcAAAAAAAAAAAAAcVcAAAAAAAByVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcFcAAAAAAABwVwAAAAAAAAAAAAAAAPC/"
				],
				[
					690,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAApYAAAAAAAADFgAAAAAAAAAAAAAAVgAAAAAAAADWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAVgAAAAAAAAKWAAAAAAAAAAAAAAAAPC/"
				],
				[
					700,
					3,
					"left_delete",
					null,
					"AwAAADxXAAAAAAAAPFcAAAAAAAABAAAAbDtXAAAAAAAAO1cAAAAAAAABAAAAcjpXAAAAAAAAOlcAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAPVcAAAAAAAA9VwAAAAAAAAAAAAAAAPC/"
				],
				[
					701,
					1,
					"insert",
					{
						"characters": "location"
					},
					"CAAAADpXAAAAAAAAO1cAAAAAAAAAAAAAO1cAAAAAAAA8VwAAAAAAAAAAAAA8VwAAAAAAAD1XAAAAAAAAAAAAAD1XAAAAAAAAPlcAAAAAAAAAAAAAPlcAAAAAAAA/VwAAAAAAAAAAAAA/VwAAAAAAAEBXAAAAAAAAAAAAAEBXAAAAAAAAQVcAAAAAAAAAAAAAQVcAAAAAAABCVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOlcAAAAAAAA6VwAAAAAAAAAAAAAAAPC/"
				],
				[
					706,
					3,
					"left_delete",
					null,
					"AwAAAK1XAAAAAAAArVcAAAAAAAABAAAAO6xXAAAAAAAArFcAAAAAAAABAAAAXatXAAAAAAAAq1cAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAArlcAAAAAAACuVwAAAAAAAAAAAAAAAGZA"
				],
				[
					707,
					3,
					"right_delete",
					null,
					"AwAAAKtXAAAAAAAAq1cAAAAAAAABAAAAIKtXAAAAAAAAq1cAAAAAAAABAAAAL6tXAAAAAAAAq1cAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAq1cAAAAAAACrVwAAAAAAAAAAAAAAAPC/"
				],
				[
					745,
					1,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AQAAAJdXAAAAAAAAo1cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAl1cAAAAAAACXVwAAAAAAAAAAAAAAAPC/"
				],
				[
					746,
					3,
					"left_delete",
					null,
					"AwAAAKJXAAAAAAAAolcAAAAAAAABAAAAL6FXAAAAAAAAoVcAAAAAAAABAAAAL6BXAAAAAAAAoFcAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAo1cAAAAAAACjVwAAAAAAAAAAAAAAAPC/"
				],
				[
					747,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAKBXAAAAAAAAoVcAAAAAAAAAAAAAoVcAAAAAAACiVwAAAAAAAAAAAACiVwAAAAAAAKNXAAAAAAAAAAAAAKNXAAAAAAAApFcAAAAAAAAAAAAApFcAAAAAAAClVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoFcAAAAAAACgVwAAAAAAAAAAAAAAAPC/"
				],
				[
					748,
					1,
					"insert",
					{
						"characters": " query="
					},
					"BwAAAKVXAAAAAAAAplcAAAAAAAAAAAAAplcAAAAAAACnVwAAAAAAAAAAAACnVwAAAAAAAKhXAAAAAAAAAAAAAKhXAAAAAAAAqVcAAAAAAAAAAAAAqVcAAAAAAACqVwAAAAAAAAAAAACqVwAAAAAAAKtXAAAAAAAAAAAAAKtXAAAAAAAArFcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApVcAAAAAAAClVwAAAAAAAAAAAAAAAPC/"
				],
				[
					749,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKxXAAAAAAAArlcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArFcAAAAAAACsVwAAAAAAAAAAAAAAAPC/"
				],
				[
					751,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAK5XAAAAAAAAr1cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArlcAAAAAAACuVwAAAAAAAAAAAAAAAPC/"
				],
				[
					758,
					1,
					"cut",
					null,
					"AQAAAAxXAAAAAAAADFcAAAAAAAAoAAAAY29uc29sZS5sb2coJ3JlcS51cmwnLHJlcS51cmwpOwogICAgICAgIA",
					"AQAAAAAAAAABAAAADFcAAAAAAAA0VwAAAAAAAAAAAAAAAFBA"
				],
				[
					759,
					2,
					"paste",
					null,
					"AgAAAAxXAAAAAAAANFcAAAAAAAAAAAAANFcAAAAAAABcVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADFcAAAAAAAAMVwAAAAAAAAAAAAAAAPC/"
				],
				[
					764,
					4,
					"right_delete",
					null,
					"BAAAABxXAAAAAAAAHFcAAAAAAAABAAAALhxXAAAAAAAAHFcAAAAAAAABAAAAdRxXAAAAAAAAHFcAAAAAAAABAAAAchxXAAAAAAAAHFcAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAHFcAAAAAAAAcVwAAAAAAAAAAAAAAAGhA"
				],
				[
					766,
					4,
					"right_delete",
					null,
					"BAAAACFXAAAAAAAAIVcAAAAAAAABAAAALiFXAAAAAAAAIVcAAAAAAAABAAAAdSFXAAAAAAAAIVcAAAAAAAABAAAAciFXAAAAAAAAIVcAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAIVcAAAAAAAAhVwAAAAAAAAAAAAAAAPC/"
				],
				[
					777,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AgAAAMZXAAAAAAAAxlcAAAAAAAAFAAAAcXVlcnnGVwAAAAAAAM1XAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxlcAAAAAAADLVwAAAAAAAAAAAAAAAPC/"
				],
				[
					778,
					1,
					"insert",
					{
						"characters": "query"
					},
					"BgAAAMdXAAAAAAAAyFcAAAAAAAAAAAAAyFcAAAAAAADIVwAAAAAAAAUAAABxdWVyechXAAAAAAAAyVcAAAAAAAAAAAAAyVcAAAAAAADKVwAAAAAAAAAAAADKVwAAAAAAAMtXAAAAAAAAAAAAAMtXAAAAAAAAzFcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAx1cAAAAAAADMVwAAAAAAAAAAAAAAAPC/"
				],
				[
					780,
					1,
					"insert",
					{
						"characters": "=req"
					},
					"BAAAAM1XAAAAAAAAzlcAAAAAAAAAAAAAzlcAAAAAAADPVwAAAAAAAAAAAADPVwAAAAAAANBXAAAAAAAAAAAAANBXAAAAAAAA0VcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzVcAAAAAAADNVwAAAAAAAAAAAAAAAPC/"
				],
				[
					781,
					3,
					"right_delete",
					null,
					"AwAAANFXAAAAAAAA0VcAAAAAAAABAAAAPdFXAAAAAAAA0VcAAAAAAAABAAAAe9FXAAAAAAAA0VcAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAA0VcAAAAAAADRVwAAAAAAAAAAAAAAAPC/"
				],
				[
					785,
					1,
					"insert",
					{
						"characters": "Object.keys("
					},
					"DAAAAB5XAAAAAAAAH1cAAAAAAAAAAAAAH1cAAAAAAAAgVwAAAAAAAAAAAAAgVwAAAAAAACFXAAAAAAAAAAAAACFXAAAAAAAAIlcAAAAAAAAAAAAAIlcAAAAAAAAjVwAAAAAAAAAAAAAjVwAAAAAAACRXAAAAAAAAAAAAACRXAAAAAAAAJVcAAAAAAAAAAAAAJVcAAAAAAAAmVwAAAAAAAAAAAAAmVwAAAAAAACdXAAAAAAAAAAAAACdXAAAAAAAAKFcAAAAAAAAAAAAAKFcAAAAAAAApVwAAAAAAAAAAAAApVwAAAAAAACpXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHlcAAAAAAAAeVwAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAC5XAAAAAAAAL1cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALlcAAAAAAAAuVwAAAAAAAAAAAAAAAPC/"
				],
				[
					814,
					1,
					"paste",
					null,
					"AQAAAJRZAAAAAAAAvFkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlFkAAAAAAACUWQAAAAAAAAAAAAAAAPC/"
				],
				[
					821,
					1,
					"insert",
					{
						"characters": "github"
					},
					"BwAAAKlZAAAAAAAAqlkAAAAAAAAAAAAAqlkAAAAAAACqWQAAAAAAAAcAAAByZXEudXJsqlkAAAAAAACrWQAAAAAAAAAAAACrWQAAAAAAAKxZAAAAAAAAAAAAAKxZAAAAAAAArVkAAAAAAAAAAAAArVkAAAAAAACuWQAAAAAAAAAAAACuWQAAAAAAAK9ZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqVkAAAAAAACwWQAAAAAAAAAAAAAAAPC/"
				],
				[
					826,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AgAAALFZAAAAAAAAsVkAAAAAAAAHAAAAcmVxLnVybLFZAAAAAAAAulkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsVkAAAAAAAC4WQAAAAAAAAAAAAAAAPC/"
				],
				[
					827,
					1,
					"insert",
					{
						"characters": "owner,repo,re"
					},
					"DgAAALJZAAAAAAAAs1kAAAAAAAAAAAAAs1kAAAAAAACzWQAAAAAAAAcAAAByZXEudXJss1kAAAAAAAC0WQAAAAAAAAAAAAC0WQAAAAAAALVZAAAAAAAAAAAAALVZAAAAAAAAtlkAAAAAAAAAAAAAtlkAAAAAAAC3WQAAAAAAAAAAAAC3WQAAAAAAALhZAAAAAAAAAAAAALhZAAAAAAAAuVkAAAAAAAAAAAAAuVkAAAAAAAC6WQAAAAAAAAAAAAC6WQAAAAAAALtZAAAAAAAAAAAAALtZAAAAAAAAvFkAAAAAAAAAAAAAvFkAAAAAAAC9WQAAAAAAAAAAAAC9WQAAAAAAAL5ZAAAAAAAAAAAAAL5ZAAAAAAAAv1kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAslkAAAAAAAC5WQAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					2,
					"left_delete",
					null,
					"AgAAAL5ZAAAAAAAAvlkAAAAAAAABAAAAZb1ZAAAAAAAAvVkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAv1kAAAAAAAC/WQAAAAAAAAAAAAAAAPC/"
				],
				[
					829,
					1,
					"insert",
					{
						"characters": "dir"
					},
					"AwAAAL1ZAAAAAAAAvlkAAAAAAAAAAAAAvlkAAAAAAAC/WQAAAAAAAAAAAAC/WQAAAAAAAMBZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvVkAAAAAAAC9WQAAAAAAAAAAAAAAAPC/"
				],
				[
					859,
					1,
					"insert",
					{
						"characters": "z"
					},
					"AQAAAOswAAAAAAAA7DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6zAAAAAAAADrMAAAAAAAAAAAAAAAAPC/"
				],
				[
					860,
					1,
					"left_delete",
					null,
					"AQAAAOswAAAAAAAA6zAAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAA7DAAAAAAAADsMAAAAAAAAAAAAAAAAPC/"
				],
				[
					861,
					1,
					"insert",
					{
						"characters": "url,"
					},
					"BAAAAOswAAAAAAAA7DAAAAAAAAAAAAAA7DAAAAAAAADtMAAAAAAAAAAAAADtMAAAAAAAAO4wAAAAAAAAAAAAAO4wAAAAAAAA7zAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6zAAAAAAAADrMAAAAAAAAAAAAAAAAPC/"
				],
				[
					862,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO8wAAAAAAAA8DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7zAAAAAAAADvMAAAAAAAAAAAAAAAAPC/"
				],
				[
					878,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DgAAALBNAAAAAAAAsU0AAAAAAAAAAAAAsU0AAAAAAACzTQAAAAAAAAAAAACzTQAAAAAAALVNAAAAAAAAAAAAALVNAAAAAAAAtk0AAAAAAAAAAAAAtk0AAAAAAAC3TQAAAAAAAAAAAAC3TQAAAAAAALhNAAAAAAAAAAAAALhNAAAAAAAAuU0AAAAAAAAAAAAAuU0AAAAAAAC6TQAAAAAAAAAAAAC6TQAAAAAAALtNAAAAAAAAAAAAALtNAAAAAAAAvE0AAAAAAAAAAAAAvE0AAAAAAAC9TQAAAAAAAAAAAAC9TQAAAAAAAL5NAAAAAAAAAAAAAL5NAAAAAAAAv00AAAAAAAAAAAAAv00AAAAAAADATQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsE0AAAAAAACwTQAAAAAAAAAAAAAAAGxA"
				],
				[
					879,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMBNAAAAAAAAwk0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwE0AAAAAAADATQAAAAAAAAAAAAAAAPC/"
				],
				[
					880,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMFNAAAAAAAAw00AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwU0AAAAAAADBTQAAAAAAAAAAAAAAAPC/"
				],
				[
					881,
					1,
					"insert",
					{
						"characters": "FilesURLS"
					},
					"CQAAAMJNAAAAAAAAw00AAAAAAAAAAAAAw00AAAAAAADETQAAAAAAAAAAAADETQAAAAAAAMVNAAAAAAAAAAAAAMVNAAAAAAAAxk0AAAAAAAAAAAAAxk0AAAAAAADHTQAAAAAAAAAAAADHTQAAAAAAAMhNAAAAAAAAAAAAAMhNAAAAAAAAyU0AAAAAAAAAAAAAyU0AAAAAAADKTQAAAAAAAAAAAADKTQAAAAAAAMtNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwk0AAAAAAADCTQAAAAAAAAAAAAAAAPC/"
				],
				[
					882,
					1,
					"left_delete",
					null,
					"AQAAAMpNAAAAAAAAyk0AAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAAy00AAAAAAADLTQAAAAAAAAAAAAAAAPC/"
				],
				[
					883,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAMpNAAAAAAAAy00AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyk0AAAAAAADKTQAAAAAAAAAAAAAAAPC/"
				],
				[
					885,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMxNAAAAAAAAzU0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzE0AAAAAAADMTQAAAAAAAAAAAAAAAPC/"
				],
				[
					886,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAM1NAAAAAAAAz00AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzU0AAAAAAADNTQAAAAAAAAAAAAAAAPC/"
				],
				[
					887,
					1,
					"insert",
					{
						"characters": "list"
					},
					"BAAAAM5NAAAAAAAAz00AAAAAAAAAAAAAz00AAAAAAADQTQAAAAAAAAAAAADQTQAAAAAAANFNAAAAAAAAAAAAANFNAAAAAAAA0k0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzk0AAAAAAADOTQAAAAAAAAAAAAAAAPC/"
				],
				[
					889,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANRNAAAAAAAA1U0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1E0AAAAAAADUTQAAAAAAAAAAAAAAAPC/"
				],
				[
					892,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANVNAAAAAAAA1k0AAAAAAAAAAAAA1k0AAAAAAADaTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1U0AAAAAAADVTQAAAAAAAAAAAAAAAPC/"
				],
				[
					897,
					3,
					"left_delete",
					null,
					"AwAAANhNAAAAAAAA2E0AAAAAAAACAAAAICDWTQAAAAAAANZNAAAAAAAAAgAAACAg1U0AAAAAAADVTQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAA2k0AAAAAAADaTQAAAAAAAAAAAAAAAEBA"
				],
				[
					939,
					1,
					"cut",
					null,
					"AQAAANJcAAAAAAAA0lwAAAAAAAAlAAAAcmVzdWx0Lm1hcChmaWxlID0+IGZpbGUuZG93bmxvYWRfdXJsKQ",
					"AQAAAAAAAAABAAAA0lwAAAAAAAD3XAAAAAAAAAAAAAAAAPC/"
				],
				[
					940,
					1,
					"paste",
					null,
					"AQAAANJcAAAAAAAA91wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0lwAAAAAAADSXAAAAAAAAAAAAAAAAPC/"
				],
				[
					960,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAALBNAAAAAAAAsU0AAAAAAAAAAAAAsU0AAAAAAACzTQAAAAAAAAAAAACzTQAAAAAAALVNAAAAAAAAAAAAALVNAAAAAAAAtk0AAAAAAAAAAAAAtk0AAAAAAAC3TQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsE0AAAAAAACwTQAAAAAAAAAAAAAAAHJA"
				],
				[
					961,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALdNAAAAAAAAuU0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAt00AAAAAAAC3TQAAAAAAAAAAAAAAAPC/"
				],
				[
					962,
					1,
					"insert",
					{
						"characters": "list.length=="
					},
					"DQAAALhNAAAAAAAAuU0AAAAAAAAAAAAAuU0AAAAAAAC6TQAAAAAAAAAAAAC6TQAAAAAAALtNAAAAAAAAAAAAALtNAAAAAAAAvE0AAAAAAAAAAAAAvE0AAAAAAAC9TQAAAAAAAAAAAAC9TQAAAAAAAL5NAAAAAAAAAAAAAL5NAAAAAAAAv00AAAAAAAAAAAAAv00AAAAAAADATQAAAAAAAAAAAADATQAAAAAAAMFNAAAAAAAAAAAAAMFNAAAAAAAAwk0AAAAAAAAAAAAAwk0AAAAAAADDTQAAAAAAAAAAAADDTQAAAAAAAMRNAAAAAAAAAAAAAMRNAAAAAAAAxU0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuE0AAAAAAAC4TQAAAAAAAAAAAAAAAPC/"
				],
				[
					964,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMZNAAAAAAAAx00AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxk0AAAAAAADGTQAAAAAAAAAAAAAAAPC/"
				],
				[
					965,
					2,
					"left_delete",
					null,
					"AgAAAMZNAAAAAAAAxk0AAAAAAAABAAAAIMVNAAAAAAAAxU0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAx00AAAAAAADHTQAAAAAAAAAAAAAAAPC/"
				],
				[
					966,
					1,
					"insert",
					{
						"characters": "0)return"
					},
					"CAAAAMVNAAAAAAAAxk0AAAAAAAAAAAAAxk0AAAAAAADHTQAAAAAAAAAAAADHTQAAAAAAAMhNAAAAAAAAAAAAAMhNAAAAAAAAyU0AAAAAAAAAAAAAyU0AAAAAAADKTQAAAAAAAAAAAADKTQAAAAAAAMtNAAAAAAAAAAAAAMtNAAAAAAAAzE0AAAAAAAAAAAAAzE0AAAAAAADNTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxU0AAAAAAADFTQAAAAAAAAAAAAAAAPC/"
				],
				[
					967,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAM1NAAAAAAAAzk0AAAAAAAAAAAAAzk0AAAAAAADPTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzU0AAAAAAADNTQAAAAAAAAAAAAAAAPC/"
				],
				[
					968,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAM9NAAAAAAAA0U0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz00AAAAAAADPTQAAAAAAAAAAAAAAAPC/"
				],
				[
					969,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAM9NAAAAAAAAz00AAAAAAAABAAAAe89NAAAAAAAAz00AAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAA0E0AAAAAAADQTQAAAAAAAAAAAAAAAPC/"
				],
				[
					970,
					1,
					"left_delete",
					null,
					"AQAAAM5NAAAAAAAAzk0AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAz00AAAAAAADPTQAAAAAAAAAAAAAAAPC/"
				],
				[
					971,
					1,
					"insert",
					{
						"characters": "null;"
					},
					"BQAAAM5NAAAAAAAAz00AAAAAAAAAAAAAz00AAAAAAADQTQAAAAAAAAAAAADQTQAAAAAAANFNAAAAAAAAAAAAANFNAAAAAAAA0k0AAAAAAAAAAAAA0k0AAAAAAADTTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzk0AAAAAAADOTQAAAAAAAAAAAAAAAPC/"
				],
				[
					974,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANRNAAAAAAAA1U0AAAAAAAAAAAAA1U0AAAAAAADVTQAAAAAAACUAAAAgICAgY29uc29sZS5sb2coJ0ZpbGVzVVJMcycse2xpc3R9KTsK",
					"AQAAAAAAAAABAAAA1E0AAAAAAAD5TQAAAAAAAAAAAAAAAAAA"
				],
				[
					989,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAB06AAAAAAAAHjoAAAAAAAAAAAAAHjoAAAAAAAAfOgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHToAAAAAAAAdOgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/util.js",
			"redo_stack":
			[
				[
					247,
					1,
					"paste",
					null,
					"AQAAADT6AQAAAAAANPoBAAAAAADoAAAALnJlcGxhY2UobmV3IFJlZ0V4cCgnJihbXjtdKyk7JywgJ2dtJyksIChtYXRjaCwgZW50aXR5KSA9PiB7CiAgICBhbXA6ICcmJywKICAgIGFwb3M6ICInIiwKICAgICcjeDI3JzogIiciLAogICAgJyN4MkYnOiAnLycsCiAgICAnIzM5JzogIiciLAogICAgJyM0Nyc6ICcvJywKICAgIGx0OiAnPCcsCiAgICBndDogJz4nLAogICAgbmJzcDogJyAnLAogICAgcXVvdDogJyInCiAgfVtlbnRpdHldIHx8IG1hdGNoKQ",
					"AQAAAAAAAAABAAAAHPsBAAAAAAAc+wEAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"cut",
					null,
					"AQAAADT6AQAAAAAAHPsBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANPoBAAAAAAA0+gEAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"cut",
					null,
					"AQAAACf6AQAAAAAAOvoBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ/oBAAAAAAAn+gEAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"paste",
					null,
					"AgAAAB37AQAAAAAAJfsBAAAAAAAAAAAAgvoBAAAAAACC+gEAAAAAAJsAAAB7CiAgICBhbXA6ICcmJywKICAgIGFwb3M6ICInIiwKICAgICcjeDI3JzogIiciLAogICAgJyN4MkYnOiAnLycsCiAgICAnIzM5JzogIiciLAogICAgJyM0Nyc6ICcvJywKICAgIGx0OiAnPCcsCiAgICBndDogJz4nLAogICAgbmJzcDogJyAnLAogICAgcXVvdDogJyInCiAgfQ",
					"AQAAAAAAAAABAAAAHfsBAAAAAAAd+wEAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"cut",
					null,
					"AQAAADj6AQAAAAAA0/oBAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOPoBAAAAAAA4+gEAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 185739,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					77,
					1,
					"cut",
					null,
					"AQAAANPeAQAAAAAA094BAAAAAAAwAAAAKHggPDwgbikgfCAoKHggPj4gKDMyIC0gbikpICYgfigoLTEgPj4gbikgPDwgbikp",
					"AQAAAAAAAAABAAAA094BAAAAAAAD3wEAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"paste",
					null,
					"AQAAANPeAQAAAAAAA98BAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA094BAAAAAADT3gEAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "string-helpers.js",
			"settings":
			{
				"buffer_size": 4518,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"paste",
					null,
					"AQAAAPMOAAAAAAAAUxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8w4AAAAAAADzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "function"
					},
					"CAAAAPMOAAAAAAAA9A4AAAAAAAAAAAAA9A4AAAAAAAD1DgAAAAAAAAAAAAD1DgAAAAAAAPYOAAAAAAAAAAAAAPYOAAAAAAAA9w4AAAAAAAAAAAAA9w4AAAAAAAD4DgAAAAAAAAAAAAD4DgAAAAAAAPkOAAAAAAAAAAAAAPkOAAAAAAAA+g4AAAAAAAAAAAAA+g4AAAAAAAD7DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8w4AAAAAAADzDgAAAAAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " W"
					},
					"AgAAAPsOAAAAAAAA/A4AAAAAAAAAAAAA/A4AAAAAAAD9DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+w4AAAAAAAD7DgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAAPwOAAAAAAAA/A4AAAAAAAABAAAAVw",
					"AQAAAAAAAAABAAAA/Q4AAAAAAAD9DgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "wordWrap"
					},
					"CAAAAPwOAAAAAAAA/Q4AAAAAAAAAAAAA/Q4AAAAAAAD+DgAAAAAAAAAAAAD+DgAAAAAAAP8OAAAAAAAAAAAAAP8OAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAABDwAAAAAAAAAAAAABDwAAAAAAAAIPAAAAAAAAAAAAAAIPAAAAAAAAAw8AAAAAAAAAAAAAAw8AAAAAAAAEDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/A4AAAAAAAD8DgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAB0PAAAAAAAAHQ8AAAAAAAABAAAAPhwPAAAAAAAAHA8AAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAHg8AAAAAAAAeDwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "export"
					},
					"BgAAAPMOAAAAAAAA9A4AAAAAAAAAAAAA9A4AAAAAAAD1DgAAAAAAAAAAAAD1DgAAAAAAAPYOAAAAAAAAAAAAAPYOAAAAAAAA9w4AAAAAAAAAAAAA9w4AAAAAAAD4DgAAAAAAAAAAAAD4DgAAAAAAAPkOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8w4AAAAAAADzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkOAAAAAAAA+g4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+Q4AAAAAAAD5DgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPIOAAAAAAAA8w4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8g4AAAAAAADyDgAAAAAAAAAAAAAAAExA"
				],
				[
					29,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAGoQAAAAAAAAaxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9A4AAAAAAAD0DgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAAGkQAAAAAAAAaRAAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAahAAAAAAAABqEAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGkQAAAAAAAAahAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaRAAAAAAAABpEAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAGoQAAAAAAAAaxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahAAAAAAAABqEAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAAGoQAAAAAAAAahAAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAaxAAAAAAAABrEAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					2,
					"right_delete",
					null,
					"AgAAACgQAAAAAAAAKBAAAAAAAAAEAAAAVXRpbCgQAAAAAAAAKBAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAKBAAAAAAAAAsEAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"paste",
					null,
					"AQAAAGYQAAAAAAAAixEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhAAAAAAAABmEAAAAAAAAAAAAAAAAAAA"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "export"
					},
					"BgAAAGYQAAAAAAAAZxAAAAAAAAAAAAAAZxAAAAAAAABoEAAAAAAAAAAAAABoEAAAAAAAAGkQAAAAAAAAAAAAAGkQAAAAAAAAahAAAAAAAAAAAAAAahAAAAAAAABrEAAAAAAAAAAAAABrEAAAAAAAAGwQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhAAAAAAAABmEAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwQAAAAAAAAbRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbBAAAAAAAABsEAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " decodeH"
					},
					"CAAAAHUQAAAAAAAAdhAAAAAAAAAAAAAAdhAAAAAAAAB3EAAAAAAAAAAAAAB3EAAAAAAAAHgQAAAAAAAAAAAAAHgQAAAAAAAAeRAAAAAAAAAAAAAAeRAAAAAAAAB6EAAAAAAAAAAAAAB6EAAAAAAAAHsQAAAAAAAAAAAAAHsQAAAAAAAAfBAAAAAAAAAAAAAAfBAAAAAAAAB9EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdRAAAAAAAAB1EAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"paste",
					null,
					"AgAAAHYQAAAAAAAAiBAAAAAAAAAAAAAAiBAAAAAAAACIEAAAAAAAAAcAAABkZWNvZGVI",
					"AQAAAAAAAAABAAAAdhAAAAAAAAB9EAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAKURAAAAAAAAphEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBAAAAAAAACIEAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Project: Edit Project"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/dom",
		"/home/roman/Projects/plot-cv/lib/dsp",
		"/home/roman/Projects/plot-cv/lib/eagle",
		"/home/roman/Projects/plot-cv/lib/svg"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/xml.js",
		"/home/roman/Projects/plot-cv/lib/proxy/observableMembrane.js",
		"/home/roman/Projects/plot-cv/lib/xml/util.js",
		"/home/roman/Projects/plot-cv/lib/xml/xpath.js",
		"/home/roman/Projects/plot-cv/lib/json/path.js",
		"/home/roman/Projects/plot-cv/lib/json/pathMapper.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/lib/geom/trbl.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/geom/polyline.js",
		"/home/roman/Projects/plot-cv/lib/geom/lineList.js",
		"/home/roman/Projects/plot-cv/lib/geom.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/token-rules.js",
		"/home/roman/Projects/plot-cv/param.js",
		"/home/roman/Projects/plot-cv/lib/jpeg.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/test-libbpg.js",
		"/home/roman/Projects/plot-cv/test-kolorwheel.js",
		"/home/roman/Projects/plot-cv/test-jpg.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/pointer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/environment.js",
		"/home/roman/Projects/plot-cv/lib/eventEmitter.js",
		"/home/roman/Projects/plot-cv/lib/devtools.js",
		"/home/roman/Projects/plot-cv/lib/gcode/parser.js",
		"/home/roman/Projects/plot-cv/lib/dom/svg.js",
		"/home/roman/Projects/plot-cv/lib/log.js",
		"/home/roman/Projects/plot-cv/lib/dom/cache.js",
		"/home/roman/Projects/plot-cv/lib/autoStore.js",
		"/home/roman/Projects/plot-cv/test-description.js",
		"/home/roman/Projects/plot-cv/test-features2d.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/test-pointlist.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/gl.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/test-wasm.js",
		"/home/roman/Projects/plot-cv/test-svgpath.js",
		"/home/roman/Projects/plot-cv/test-proxy.js",
		"/home/roman/Projects/plot-cv/test-path.js",
		"/home/roman/Projects/plot-cv/tokenize.js",
		"/home/roman/Projects/plot-cv/lib/clipper-lib.js",
		"/home/roman/Projects/plot-cv/lib/clipper.js",
		"/home/roman/Projects/plot-cv/test-coverage.js",
		"/home/roman/Projects/plot-cv/test-console.js",
		"/home/roman/Projects/plot-cv/test-clipper.js",
		"/home/roman/Projects/plot-cv/dump-ast.js",
		"/home/roman/Projects/plot-cv/test-clexer.js",
		"/home/roman/Projects/plot-cv/test-childprocess.js",
		"/home/roman/Projects/plot-cv/test-call.js",
		"/home/roman/Projects/plot-cv/test-bitset.js",
		"/home/roman/Projects/plot-cv/test-autoplacer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/test-membrane.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/interpreter.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/printer.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useTrkl.js",
		"/home/roman/Projects/plot-cv/lib/json/treeObserver.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/test-date.js",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/test-dom.js",
		"/home/roman/Projects/plot-cv/test-export.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/test-ast.js",
		"/home/roman/Projects/plot-cv/test-antlr.js",
		"/home/roman/Projects/plot-cv/test-alea.js",
		"/home/roman/Projects/plot-cv/test-util.js",
		"/home/roman/Projects/plot-cv/lib/swipeTracker.js",
		"/home/roman/Projects/plot-cv/lib/axios.js",
		"/home/roman/Projects/plot-cv/lib/iterator.js",
		"/home/roman/Projects/plot-cv/lib/sourceMap.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/lib/dom/css.js",
		"/home/roman/Projects/plot-cv/lib/c/commons.js",
		"/home/roman/Projects/plot-cv/lib/c/rules.js",
		"/home/roman/Projects/plot-cv/lib/lua.js",
		"/home/roman/Projects/plot-cv/lib/draw/colorMap.js",
		"/home/roman/Projects/plot-cv/lib/fetch.js",
		"/home/roman/Projects/plot-cv/lib/json/util.js",
		"/home/roman/Projects/plot-cv/lib/stream/writableStream.js",
		"/home/roman/Projects/plot-cv/lib/stream/transformStream.js",
		"/home/roman/Projects/plot-cv/lib/stream/utils.js",
		"/home/roman/Projects/plot-cv/lib/lazyInitializer.js",
		"/home/roman/Projects/plot-cv/lib/xml/parse.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/lib/svg/path-parser.js",
		"/home/roman/Projects/plot-cv/lib/svg/path.js",
		"/home/roman/Projects/plot-cv/miscFixed613.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/svg.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/lib/geom/polygon.js",
		"/home/roman/Projects/plot-cv/lib/devpane.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser2.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/token.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/estree.js",
		"/home/roman/Projects/plot-cv/xml2js.js",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/test-websocket.js",
		"/home/roman/Projects/plot-cv/test-voronoi.js",
		"/home/roman/Projects/plot-cv/test-stack.js",
		"/home/roman/Projects/plot-cv/test-renderer.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"apply\\(",
			"deref",
			"findIndex",
			"\\.toPointer\\(",
			"getSiblings",
			"XPath",
			" Node,",
			"Node,",
			"ThenElse",
			"lastChild",
			" concat\\(",
			"concat =",
			"concat",
			"inspect",
			"inspect\\(",
			"'findD",
			"inspect\\(",
			"xml\\.",
			"xml.write",
			"xml",
			"className",
			"util'",
			"exit\\(",
			"getArgs",
			"equals\\(",
			"equals",
			"equalsd",
			"callMain",
			"ion hasGetSet",
			"hasGetSet",
			"remover",
			"decodeHTMLEntities",
			"misc.js",
			"isObject",
			"wordWrap",
			"word",
			"wordWrap =",
			"wordWrap",
			"isoDate",
			"misc.js",
			"FilesURLs",
			"ListContents",
			"ListCont",
			"query",
			"hashString",
			"Util\\.",
			"hashString",
			"matchAll",
			"Util\\.",
			"filterKeys",
			"Util\\.",
			"try",
			"Util\\.",
			"toSource",
			"Util\\.",
			"misc.js",
			", filter",
			"filter =",
			"filter\\(",
			"filter",
			"filter, ",
			"FetchCached",
			"Util.cachedFetch",
			"achedFetch",
			"fetch",
			"\\.caches",
			"cachedFetch",
			"getset",
			"getSet",
			"ZoomLog",
			"deriveGetSet",
			"rn this.store",
			"rn ",
			"keys\\(",
			"keys",
			"debounceAsync",
			"debounce",
			"ColoredText",
			"\\, ColoredText",
			"ColoredText",
			"colorCtor",
			"ColoredText",
			"text\\(",
			"\\b(text|concat)\\(",
			"text\\(",
			"concat\\(",
			"Util\\.(define|isObject|className)",
			"Util\\.",
			"text\\(",
			"export",
			"ansi\\(",
			"import.*\\bansi\\b",
			" concat\\(",
			"concat\\(",
			"text\\(",
			"(coloring|concat|ansi).*from.*common.js'",
			"from.*common.js'",
			"from.*common.js",
			"(concat|ansi|text)\\(",
			"coloring",
			"\\brpc\\b",
			"rpc\\b",
			"rpc\\.",
			"SyscallEr",
			"extendArray",
			"object2Array",
			"  ",
			"Object2Array",
			"pushUnique",
			"inserter =",
			"inserter",
			"getConstructor",
			"decorateIt",
			"walkPath",
			"map\\(",
			"Util\\.",
			"isBrowser",
			"fnName",
			"isBrowser",
			"Util\\.",
			"getCallers",
			"Util\\.",
			"filterOutKeys =",
			"filterOutKeys",
			"Util\\.(className|define|escape|isObject)",
			"colorText",
			"color",
			"coloring"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"",
			"debounce",
			"",
			"\\1",
			"functionName",
			"",
			"\\1",
			"functionName",
			"unique",
			"",
			"AddRule",
			"addRule\\('\\1',",
			"lexer\\.addRule\\('\\1',",
			"lexer\\.addRule\\(tokenRules\\['\\1'\\]\\,",
			"filesystem.\\1Sync(",
			"",
			"filesystem.\\1Sync(",
			"",
			"MakePoint",
			"",
			"define",
			"PointList\\.prototype",
			"};\\n\nPointList.",
			"}\\n\nfunction",
			"",
			"isObject",
			"roundTo",
			"define",
			"padding"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1873,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/json/path.js",
							"function_name_status_row": -1,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									107,
									169
								],
								[
									307,
									315
								],
								[
									350,
									358
								],
								[
									868,
									879
								],
								[
									1235,
									1283
								],
								[
									1473,
									1490
								],
								[
									1635,
									1646
								],
								[
									1978,
									1986
								],
								[
									2221,
									2231
								],
								[
									2241,
									2260
								],
								[
									2274,
									2285
								],
								[
									2322,
									2344
								],
								[
									2540,
									2570
								],
								[
									3170,
									3231
								],
								[
									3581,
									3626
								],
								[
									3776,
									3811
								],
								[
									3892,
									3932
								],
								[
									5085,
									5113
								],
								[
									5918,
									5936
								],
								[
									6246,
									6253
								],
								[
									6356,
									6366
								],
								[
									6550,
									6562
								],
								[
									6827,
									6838
								],
								[
									7098,
									7107
								],
								[
									7168,
									7181
								],
								[
									7221,
									7249
								],
								[
									7490,
									7501
								],
								[
									7562,
									7573
								],
								[
									7803,
									7815
								],
								[
									7852,
									7862
								],
								[
									7905,
									7916
								],
								[
									7946,
									7963
								],
								[
									7997,
									8014
								],
								[
									8047,
									8059
								],
								[
									8091,
									8107
								],
								[
									8139,
									8155
								],
								[
									8193,
									8208
								],
								[
									8247,
									8258
								],
								[
									8292,
									8321
								],
								[
									8701,
									8720
								],
								[
									9074,
									9089
								],
								[
									9411,
									9423
								],
								[
									9584,
									9592
								],
								[
									10039,
									10058
								],
								[
									10181,
									10188
								],
								[
									10242,
									10246
								],
								[
									10333,
									10345
								],
								[
									10371,
									10385
								],
								[
									10457,
									10476
								],
								[
									10547,
									10561
								],
								[
									10598,
									10618
								],
								[
									11052,
									11063
								],
								[
									11251,
									11270
								],
								[
									11301,
									11315
								],
								[
									11750,
									11866
								],
								[
									11981,
									11989
								],
								[
									11990,
									12012
								],
								[
									12346,
									12365
								],
								[
									12626,
									12637
								],
								[
									12702,
									12716
								],
								[
									12974,
									12985
								],
								[
									13128,
									13151
								],
								[
									13316,
									13338
								],
								[
									13365,
									13377
								],
								[
									13686,
									13721
								],
								[
									13834,
									13845
								],
								[
									13922,
									13926
								],
								[
									14312,
									14362
								],
								[
									14702,
									14715
								],
								[
									14886,
									14896
								],
								[
									14949,
									14965
								],
								[
									15092,
									15104
								],
								[
									15236,
									15245
								],
								[
									15374,
									15378
								],
								[
									15523,
									15530
								],
								[
									15768,
									15772
								],
								[
									15792,
									15802
								],
								[
									16021,
									16025
								],
								[
									16045,
									16050
								],
								[
									16154,
									16175
								],
								[
									16269,
									16280
								],
								[
									16379,
									16406
								],
								[
									16439,
									16450
								],
								[
									16659,
									16677
								],
								[
									17629,
									17641
								],
								[
									17715,
									17723
								],
								[
									17811,
									17824
								],
								[
									17850,
									17860
								],
								[
									17880,
									17894
								],
								[
									18073,
									18093
								],
								[
									18310,
									18320
								],
								[
									18494,
									18505
								],
								[
									18526,
									18537
								],
								[
									18600,
									18606
								],
								[
									18742,
									18748
								]
							],
							"symlist":
							[
								"DereferenceError(object, member, pos, prev, locator)",
								"  frame =>",
								"  frame =>",
								"MutablePath",
								"DereferenceError.prototype.toString = function()",
								"IsChildren = a =>",
								"MutablePath",
								"\targs =>",
								"\t(a, p) =>",
								"  static equals(a, b)",
								"MutablePath",
								"  static isChildren(arg)",
								"  constructor(p = [], opts = {})",
								"  static matchObj(tagName, attr_or_index, tagField = 'tagName')",
								"  static partMatcher(obj, tagField = 'tagName')",
								"  static isMemberName(name, out = {})",
								"  static parse(path, out, separator = '.')",
								"  c = (text, c = 33, b = 0) =>",
								"([name, value]) =>",
								"  clone()",
								"  get size()",
								"  right(n = 1)",
								"  left(n = 1)",
								"  up(n = 1)",
								"  down(...args)",
								"  bottom(obj, noThrow = false)",
								"  nthChild(i)",
								"  diff(other)",
								"  get lastId()",
								"  get last()",
								"  get first()",
								"  get nextSibling()",
								"  get prevSibling()",
								"  get parent()",
								"  get parentNode()",
								"  get firstChild()",
								"  get lastChild()",
								"  get depth()",
								"  static compareObj(obj, other)",
								"  apply(obj, noThrow)",
								"\t(a, i) =>",
								"(e, i, a) =>",
								"  child =>",
								"  toSource(opts = {})",
								"  item =>",
								"  p =>",
								"  toCode(name)",
								"(acc, part) =>",
								"  toReduce(name = '')",
								"  get absolute()",
								"  makeAbsolute(parent)",
								"MutablePath",
								"\t(text, ...args) =>",
								"  text : text =>",
								"  toString(sep = ' ', partToStr = MutablePath.partToString, childrenStr = MutablePath.CHILDREN_GLYPH + CHILDREN_SPACE)",
								"\ttext =>",
								"  text : (text, ...c) =>",
								"  pad = (s, n = 1) =>",
								"MutablePath",
								"  existsIn(root)",
								"  split(pred)",
								"  pred = (part, index) =>",
								"  relativeTo(other = [])",
								"(part, i) =>",
								"  slice(start = 0, end = this.length)",
								"MutablePath",
								"  ctor",
								"  splice(start = 0, remove = this.length, ...insert)",
								"  push(...args)",
								"  pop(n = 1)",
								"  unshift(...args)",
								"  shift(n = 1)",
								"  concat(a)",
								"  ctor",
								"  map(fn)",
								"  ctor",
								"  filter(fn)",
								"  ctor",
								"  at(i)",
								"  predicate = (p, i) =>",
								"MutablePath",
								"  toArray(skip = true, n = 1)",
								"MutablePath",
								"  equals(other = [])",
								"  get parent()",
								"  t = p =>",
								"  abort = () =>",
								"  set = v =>",
								"  ignore = () =>",
								"  static compare(a, b)",
								"\t(a, b) =>",
								"MutablePath",
								"MutablePath",
								"\t() =>",
								"\t() =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tabs_extra_last_activated": 1681034197.78,
							"tabs_extra_last_activated_sheet_index": 0
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 96845,
						"regions":
						{
						},
						"selection":
						[
							[
								60618,
								60618
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1661,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681030967.57,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 24491.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "eagle-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39474,
						"regions":
						{
							"col_00AFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										13769,
										13782
									]
								],
								"scope": "col_00AFFFFF"
							},
							"col_00AFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00AFFFFF_circle.png",
								"regions":
								[
									[
										13703,
										13703
									]
								],
								"scope": "col_gutter"
							},
							"col_D700FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										13745,
										13759
									]
								],
								"scope": "col_D700FFFF"
							},
							"col_D700FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D700FFFF_circle.png",
								"regions":
								[
									[
										13703,
										13703
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										31797,
										31804
									],
									[
										32657,
										32661
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										31757,
										31757
									],
									[
										32642,
										32642
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								2850,
								2850
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 24,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681036407.07,
							"tabs_extra_last_activated_sheet_index": 1,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/xml/xpath.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12291,
						"regions":
						{
						},
						"selection":
						[
							[
								4256,
								4269
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 110,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681036577.76,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1391.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/json/path.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18765,
						"regions":
						{
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										11714,
										11724
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										11652,
										11652
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								9643,
								9643
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 334,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681044913.45,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4509.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/eagle/ref.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3417,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								2
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681030411.88,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/dom/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35545,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681030446.66,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/eagle/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33278,
						"regions":
						{
						},
						"selection":
						[
							[
								414,
								428
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 8,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681033267.71,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/eagle/project.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7861,
						"regions":
						{
						},
						"selection":
						[
							[
								3758,
								3758
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 147,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681031998.36,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1826.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/eagle/document.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11315,
						"regions":
						{
						},
						"selection":
						[
							[
								3180,
								3183
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 100,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681036170.42,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 716.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/eagle/node.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16493,
						"regions":
						{
						},
						"selection":
						[
							[
								12516,
								12516
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 398,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681036509.73,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5651.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/eagle/common.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3953,
						"regions":
						{
						},
						"selection":
						[
							[
								358,
								358
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 13,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681032394.34,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/misc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65534,
						"regions":
						{
						},
						"selection":
						[
							[
								16602,
								16602
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 503,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681030751.79,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6938.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "components.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41728,
						"regions":
						{
						},
						"selection":
						[
							[
								305,
								305
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681030286.79,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "events.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1632,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								77
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681028367.53,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "lib/tlite.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6293,
						"regions":
						{
						},
						"selection":
						[
							[
								19,
								19
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681028424.49,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "commands.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12259,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681030172.53,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "lib/fetch.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2433,
						"regions":
						{
						},
						"selection":
						[
							[
								2329,
								2396
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 73,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681028776.45,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 495.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27374,
						"regions":
						{
						},
						"selection":
						[
							[
								14879,
								14879
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 429,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681029941.41,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6056.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 185739,
						"regions":
						{
						},
						"selection":
						[
							[
								8773,
								8784
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 281,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681030632.41,
							"tabs_extra_last_activated_sheet_index": 12,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3836.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "string-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4518,
						"regions":
						{
						},
						"selection":
						[
							[
								4214,
								4232
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 155,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681030457.67,
							"tabs_extra_last_activated_sheet_index": 13,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1778.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 102.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Run with qjsm",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"json/path",
				"lib/json/path.js"
			],
			[
				"xpath.js",
				"lib/xml/xpath.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"common.j",
				"lib/eagle/common.js"
			],
			[
				"node",
				"lib/eagle/node.js"
			],
			[
				"docu",
				"lib/eagle/document.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"project",
				"lib/eagle/project.js"
			],
			[
				"eagle-shel",
				"eagle-shell.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"string-he",
				"string-helpers.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"eleme",
				"lib/dom/element.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"comp",
				"components.js"
			],
			[
				"comman",
				"commands.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"commands",
				"commands.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"tlite.js",
				"lib/tlite.js"
			],
			[
				"events.js",
				"events.js"
			],
			[
				"componen",
				"components.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"fetch.js",
				"lib/fetch.js"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"autoSt",
				"lib/autoStore.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"log.js",
				"lib/log.js"
			],
			[
				"cache.js",
				"lib/dom/cache.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"common.js",
				"lib/eagle/common.js"
			],
			[
				"envi",
				"lib/ecmascript/environment.js"
			],
			[
				"interp",
				"lib/ecmascript/interpreter.js"
			],
			[
				"lib/ut",
				"lib/util.js"
			],
			[
				"interpret",
				"lib/ecmascript/interpreter.js"
			],
			[
				"printer",
				"lib/ecmascript/printer.js"
			],
			[
				"useTrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"treeOb",
				"lib/json/treeObserver.js"
			],
			[
				"eventE",
				"lib/eventEmitter.js"
			],
			[
				"devtoo",
				"lib/devtools.js"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"pointer.js",
				"lib/pointer.js"
			],
			[
				"devtool",
				"lib/devtools.js"
			],
			[
				"lib/u",
				"lib/util.js"
			],
			[
				"gcode/par",
				"lib/gcode/parser.js"
			],
			[
				"dom/svg",
				"lib/dom/svg.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"eagle/proj",
				"lib/eagle/project.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"test-expo",
				"test-export.js"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"gl.js",
				"gl.js"
			],
			[
				"draw-utils",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"test-wasm",
				"test-wasm.js"
			],
			[
				"test-svgp",
				"test-svgpath.js"
			],
			[
				"test-proxy",
				"test-proxy.js"
			],
			[
				"test-path",
				"test-path.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"test-libb",
				"test-libbpg.js"
			],
			[
				"test-ko",
				"test-kolorwheel.js"
			],
			[
				"jpeg.js",
				"lib/jpeg.js"
			],
			[
				"test-jpg",
				"test-jpg.js"
			],
			[
				"test-dom",
				"test-dom.js"
			],
			[
				"test-debu",
				"test-debuggerprotocol.js"
			],
			[
				"test-da",
				"test-date.js"
			],
			[
				"test-desc",
				"test-description.js"
			],
			[
				"test-fea",
				"test-features2d.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"param.j",
				"param.js"
			],
			[
				"test-poin",
				"test-pointlist.js"
			],
			[
				"token-rul",
				"token-rules.js"
			],
			[
				"tokenize",
				"tokenize.js"
			],
			[
				"test-clexer",
				"test-clexer.js"
			],
			[
				"test-cov",
				"test-coverage.js"
			],
			[
				"test-con",
				"test-console.js"
			],
			[
				"test-clip",
				"test-clipper.js"
			],
			[
				"clipper-lib",
				"lib/clipper-lib.js"
			],
			[
				"clipper.js",
				"lib/clipper.js"
			],
			[
				"test-c",
				"test-clipper.js"
			],
			[
				"test-clpp",
				"test-clipper.js"
			],
			[
				"dump-ast",
				"dump-ast.js"
			],
			[
				"tok",
				"tokenize.js"
			],
			[
				"test-cle",
				"test-clexer.js"
			],
			[
				"test-bit",
				"test-bitset.js"
			],
			[
				"test-au",
				"test-autoplacer.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"trbl",
				"lib/geom/trbl.js"
			],
			[
				"olyli",
				"lib/geom/polyline.js"
			],
			[
				"lineList",
				"lib/geom/lineList.js"
			],
			[
				"geom.js",
				"lib/geom.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"test-auo",
				"test-autoplacer.js"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"pathMap",
				"lib/json/pathMapper.js"
			],
			[
				"test-membr",
				"test-membrane.js"
			],
			[
				"observab",
				"lib/proxy/observableMembrane.js"
			],
			[
				"xml/util",
				"lib/xml/util.js"
			],
			[
				"path.js",
				"lib/json/path.js"
			],
			[
				"xml/xpa",
				"lib/xml/xpath.js"
			],
			[
				"test-mem",
				"test-membrane.js"
			],
			[
				"xml.js",
				"lib/xml.js"
			],
			[
				"treeob",
				"lib/json/treeObserver.js"
			],
			[
				"lib/util",
				"lib/util.js"
			],
			[
				"test-m",
				"test-membrane.js"
			],
			[
				"test-ast",
				"test-ast.js"
			],
			[
				"test-antlr",
				"test-antlr.js"
			],
			[
				"test-ale",
				"test-alea.js"
			],
			[
				"test-u",
				"test-util.js"
			],
			[
				"test-ut",
				"test-util.js"
			],
			[
				"dom/cache",
				"lib/dom/cache.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"circl",
				"lib/geom/circle.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"parse/gramma",
				"lib/parse/grammar.js"
			],
			[
				"geom/poly",
				"lib/geom/polygon.js"
			],
			[
				"grammar.js",
				"lib/parse/grammar.js"
			],
			[
				"OpenLayers",
				"lib/OpenLayers.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 784.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
