{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"getOwn",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			],
			[
				"arg",
				"argc"
			],
			[
				"instru",
				"instrument"
			],
			[
				"defaul",
				"defaultExport"
			],
			[
				"getBy",
				"getByIdOrName"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  xmlize(obj, depth = 2)\nSubstChars = str =>\n  main(...args)\n([name, elem]) =>\n([name, value]) =>\n  m =>\n(a, b) =>\n([value, count]) =>\n(a, b) =>\n([val, rat, count]) =>\n([key, list]) =>",
			"settings":
			{
				"buffer_size": 184,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					766,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAHgEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					767,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					768,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					769,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								462,
								493
							],
							[
								619,
								638
							],
							[
								707,
								735
							],
							[
								1407,
								1424
							],
							[
								1824,
								1842
							],
							[
								1857,
								1861
							],
							[
								2593,
								2602
							],
							[
								2668,
								2687
							],
							[
								2796,
								2805
							],
							[
								2830,
								2852
							],
							[
								3338,
								3354
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"([key, list]) =>"
						]
					},
					"AQAAAAAAAAAAAAAAuAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					770,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KKFtrZXksIGxpc3RdKSA9PgAAAAAAAAAAHgEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					776,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-commands.js",
						"symkeys":
						[
							[
								234,
								265
							],
							[
								506,
								514
							],
							[
								581,
								585
							],
							[
								675,
								682
							],
							[
								825,
								850
							],
							[
								1431,
								1454
							],
							[
								1805,
								1832
							],
							[
								1910,
								1920
							],
							[
								2245,
								2285
							],
							[
								2452,
								2460
							]
						],
						"symlist":
						[
							" function updateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							" function alignItem(item)",
							" function alignAll(doc)",
							" function scientific(value)",
							"toString()",
							" function num2color(num, square = false)",
							"a = n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAogAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQEAAAAAAAAJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					777,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								462,
								493
							],
							[
								619,
								638
							],
							[
								707,
								735
							],
							[
								1407,
								1424
							],
							[
								1824,
								1842
							],
							[
								1857,
								1861
							],
							[
								2593,
								2602
							],
							[
								2668,
								2687
							],
							[
								2796,
								2805
							],
							[
								2830,
								2852
							],
							[
								3338,
								3354
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACiAAAAICB1cGRhdGVNZWFzdXJlcyhib2FyZCkKICBsaW5lcyA9PgogIGUgPT4KICBsaW5lID0+CiAgYWxpZ25JdGVtKGl0ZW0pCiAgYWxpZ25BbGwoZG9jKQogIHNjaWVudGlmaWModmFsdWUpCiAgdG9TdHJpbmcoKQogIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKQogIGEgPSBuID0+AAAAAAAAAAC4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					778,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								462,
								493
							],
							[
								619,
								638
							],
							[
								707,
								735
							],
							[
								1407,
								1424
							],
							[
								1824,
								1842
							],
							[
								1857,
								1861
							],
							[
								2593,
								2602
							],
							[
								2668,
								2687
							],
							[
								2796,
								2805
							],
							[
								2830,
								2852
							],
							[
								3011,
								3016
							],
							[
								3358,
								3374
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"b =>",
							"([key, list]) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAC4AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KKFtrZXksIGxpc3RdKSA9PgAAAAAAAAAAvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL8AAAAgIHhtbGl6ZShvYmosIGRlcHRoID0gMikKU3Vic3RDaGFycyA9IHN0ciA9PgogIG1haW4oLi4uYXJncykKKFtuYW1lLCBlbGVtXSkgPT4KKFtuYW1lLCB2YWx1ZV0pID0+CiAgbSA9PgooYSwgYikgPT4KKFt2YWx1ZSwgY291bnRdKSA9PgooYSwgYikgPT4KKFt2YWwsIHJhdCwgY291bnRdKSA9PgogIGIgPT4KKFtrZXksIGxpc3RdKSA9PgAAAAAAAAAAvwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					779,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAAB4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					780,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-commands.js",
						"symkeys":
						[
							[
								234,
								265
							],
							[
								506,
								514
							],
							[
								581,
								585
							],
							[
								675,
								682
							],
							[
								825,
								850
							],
							[
								1431,
								1454
							],
							[
								1805,
								1832
							],
							[
								1910,
								1920
							],
							[
								2245,
								2285
							],
							[
								2452,
								2460
							]
						],
						"symlist":
						[
							" function updateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							" function alignItem(item)",
							" function alignAll(doc)",
							" function scientific(value)",
							"toString()",
							" function num2color(num, square = false)",
							"a = n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAogAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					781,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								462,
								493
							],
							[
								619,
								638
							],
							[
								707,
								735
							],
							[
								1407,
								1424
							],
							[
								1824,
								1842
							],
							[
								1857,
								1861
							],
							[
								2593,
								2602
							],
							[
								2668,
								2687
							],
							[
								2796,
								2805
							],
							[
								2830,
								2852
							],
							[
								3011,
								3016
							],
							[
								3358,
								3374
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"b =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACiAAAAICB1cGRhdGVNZWFzdXJlcyhib2FyZCkKICBsaW5lcyA9PgogIGUgPT4KICBsaW5lID0+CiAgYWxpZ25JdGVtKGl0ZW0pCiAgYWxpZ25BbGwoZG9jKQogIHNjaWVudGlmaWModmFsdWUpCiAgdG9TdHJpbmcoKQogIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKQogIGEgPSBuID0+AAAAAAAAAAC/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					782,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								462,
								493
							],
							[
								619,
								638
							],
							[
								707,
								735
							],
							[
								1407,
								1424
							],
							[
								1836,
								1854
							],
							[
								1869,
								1873
							],
							[
								2605,
								2614
							],
							[
								2680,
								2699
							],
							[
								2808,
								2817
							],
							[
								2842,
								2864
							],
							[
								3023,
								3028
							],
							[
								3370,
								3386
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"b =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAAL8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					783,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								462,
								493
							],
							[
								619,
								638
							],
							[
								707,
								735
							],
							[
								1407,
								1424
							],
							[
								1836,
								1854
							],
							[
								1869,
								1873
							],
							[
								2605,
								2614
							],
							[
								2680,
								2699
							],
							[
								2808,
								2817
							],
							[
								2842,
								2864
							],
							[
								3023,
								3028
							],
							[
								3370,
								3386
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"b =>",
							"([key, list]) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAAL8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAAL8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					784,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAAB4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					785,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								462,
								493
							],
							[
								619,
								638
							],
							[
								707,
								735
							],
							[
								1407,
								1424
							],
							[
								1836,
								1854
							],
							[
								1869,
								1873
							],
							[
								2605,
								2614
							],
							[
								2680,
								2699
							],
							[
								2808,
								2817
							],
							[
								2842,
								2864
							],
							[
								3023,
								3028
							],
							[
								3370,
								3386
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"b =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAvwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					786,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAAB4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					787,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								462,
								493
							],
							[
								619,
								638
							],
							[
								707,
								735
							],
							[
								1407,
								1424
							],
							[
								1836,
								1854
							],
							[
								1869,
								1873
							],
							[
								2605,
								2614
							],
							[
								2680,
								2699
							],
							[
								2808,
								2817
							],
							[
								2842,
								2864
							],
							[
								3023,
								3028
							],
							[
								3370,
								3386
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"b =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAvwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					788,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-commands.js",
						"symkeys":
						[
							[
								234,
								265
							],
							[
								506,
								514
							],
							[
								581,
								585
							],
							[
								675,
								682
							],
							[
								825,
								850
							],
							[
								1431,
								1454
							],
							[
								1805,
								1832
							],
							[
								1910,
								1920
							],
							[
								2245,
								2285
							],
							[
								2452,
								2460
							]
						],
						"symlist":
						[
							" function updateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							" function alignItem(item)",
							" function alignAll(doc)",
							" function scientific(value)",
							"toString()",
							" function num2color(num, square = false)",
							"a = n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAAKIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					789,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACiAAAAICB1cGRhdGVNZWFzdXJlcyhib2FyZCkKICBsaW5lcyA9PgogIGUgPT4KICBsaW5lID0+CiAgYWxpZ25JdGVtKGl0ZW0pCiAgYWxpZ25BbGwoZG9jKQogIHNjaWVudGlmaWModmFsdWUpCiAgdG9TdHJpbmcoKQogIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKQogIGEgPSBuID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					790,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					791,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-commands.js",
						"symkeys":
						[
							[
								234,
								265
							],
							[
								506,
								514
							],
							[
								581,
								585
							],
							[
								675,
								682
							],
							[
								825,
								850
							],
							[
								1431,
								1454
							],
							[
								1805,
								1832
							],
							[
								1910,
								1920
							],
							[
								2247,
								2287
							],
							[
								2454,
								2462
							]
						],
						"symlist":
						[
							" function updateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							" function alignItem(item)",
							" function alignAll(doc)",
							" function scientific(value)",
							"toString()",
							" function num2color(num, square = false)",
							"a = n =>"
						]
					},
					"AwAAAAAAAAAAAAAAogAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKIAAAAgIHVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KICBhbGlnbkl0ZW0oaXRlbSkKICBhbGlnbkFsbChkb2MpCiAgc2NpZW50aWZpYyh2YWx1ZSkKICB0b1N0cmluZygpCiAgbnVtMmNvbG9yKG51bSwgc3F1YXJlID0gZmFsc2UpCiAgYSA9IG4gPT4AAAAAAAAAAKIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					792,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACiAAAAICB1cGRhdGVNZWFzdXJlcyhib2FyZCkKICBsaW5lcyA9PgogIGUgPT4KICBsaW5lID0+CiAgYWxpZ25JdGVtKGl0ZW0pCiAgYWxpZ25BbGwoZG9jKQogIHNjaWVudGlmaWModmFsdWUpCiAgdG9TdHJpbmcoKQogIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKQogIGEgPSBuID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					793,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					794,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					795,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								522,
								542
							],
							[
								732,
								748
							],
							[
								802,
								821
							],
							[
								856,
								872
							],
							[
								932,
								948
							],
							[
								1011,
								1045
							],
							[
								1068,
								1100
							],
							[
								1123,
								1166
							],
							[
								2996,
								3015
							],
							[
								3113,
								3129
							],
							[
								3191,
								3209
							],
							[
								3273,
								3292
							],
							[
								3357,
								3366
							],
							[
								3421,
								3438
							],
							[
								3501,
								3518
							],
							[
								3581,
								3595
							],
							[
								3655,
								3670
							],
							[
								3731,
								3746
							],
							[
								3807,
								3815
							],
							[
								3869,
								3881
							],
							[
								3939,
								3949
							],
							[
								4005,
								4016
							],
							[
								4073,
								4081
							],
							[
								4135,
								4157
							],
							[
								4225,
								4240
							],
							[
								4301,
								4323
							],
							[
								4391,
								4407
							],
							[
								4469,
								4485
							],
							[
								4547,
								4559
							],
							[
								4617,
								4629
							],
							[
								4687,
								4700
							],
							[
								4759,
								4777
							],
							[
								4835,
								4853
							],
							[
								4917,
								4939
							],
							[
								5007,
								5034
							],
							[
								5107,
								5124
							],
							[
								5181,
								5198
							],
							[
								5255,
								5272
							],
							[
								5319,
								5335
							],
							[
								5418,
								5434
							],
							[
								5506,
								5522
							],
							[
								5594,
								5611
							],
							[
								5668,
								5688
							],
							[
								5747,
								5767
							],
							[
								5926,
								5945
							],
							[
								6021,
								6028
							],
							[
								6057,
								6077
							],
							[
								6147,
								6162
							],
							[
								6223,
								6249
							],
							[
								6327,
								6353
							],
							[
								6399,
								6424
							],
							[
								6509,
								6551
							],
							[
								6685,
								6725
							],
							[
								9654,
								9697
							],
							[
								10078,
								10113
							],
							[
								10269,
								10287
							],
							[
								10317,
								10322
							],
							[
								10412,
								10439
							],
							[
								10558,
								10579
							],
							[
								10608,
								10624
							],
							[
								10717,
								10752
							],
							[
								10792,
								10810
							],
							[
								10997,
								11018
							],
							[
								11042,
								11052
							],
							[
								11091,
								11121
							],
							[
								11447,
								11481
							],
							[
								11782,
								11816
							],
							[
								12036,
								12070
							],
							[
								12136,
								12172
							],
							[
								12247,
								12264
							],
							[
								12423,
								12460
							],
							[
								12461,
								12475
							],
							[
								12481,
								12485
							],
							[
								12560,
								12592
							],
							[
								12620,
								12646
							],
							[
								12971,
								12993
							],
							[
								13031,
								13047
							],
							[
								13062,
								13069
							],
							[
								13091,
								13107
							],
							[
								13145,
								13173
							],
							[
								13392,
								13409
							],
							[
								13410,
								13419
							],
							[
								13471,
								13488
							],
							[
								13489,
								13498
							],
							[
								13558,
								13575
							],
							[
								13576,
								13599
							],
							[
								13655,
								13679
							],
							[
								16306,
								16334
							],
							[
								16765,
								16769
							],
							[
								16897,
								16910
							],
							[
								17226,
								17238
							],
							[
								17501,
								17514
							],
							[
								17619,
								17633
							],
							[
								18526,
								18554
							],
							[
								18670,
								18683
							],
							[
								18795,
								18821
							],
							[
								19001,
								19024
							],
							[
								19168,
								19220
							],
							[
								19314,
								19330
							],
							[
								19414,
								19425
							],
							[
								19538,
								19542
							],
							[
								19821,
								19854
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)"
						]
					},
					"AQAAAAAAAAAAAAAADAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					796,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAMCAAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQpBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24geCgpCkdlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCiAgaXNBbnlBcnJheUJ1ZmZlcih2KQogIGlzQXJyYXlCdWZmZXIodikKICBpc0JpZ0ludDY0QXJyYXkodikKICBpc0JpZ1VpbnQ2NEFycmF5KHYpCiAgaXNEYXRlKHYpCiAgaXNGbG9hdDMyQXJyYXkodikKICBpc0Zsb2F0NjRBcnJheSh2KQogIGlzSW50OEFycmF5KHYpCiAgaXNJbnQxNkFycmF5KHYpCiAgaXNJbnQzMkFycmF5KHYpCiAgaXNNYXAodikKICBpc1Byb21pc2UodikKICBpc1Byb3h5KHYpCiAgaXNSZWdFeHAodikKICBpc1NldCh2KQogIGlzU2hhcmVkQXJyYXlCdWZmZXIodikKICBpc1VpbnQ4QXJyYXkodikKICBpc1VpbnQ4Q2xhbXBlZEFycmF5KHYpCiAgaXNVaW50MTZBcnJheSh2KQogIGlzVWludDMyQXJyYXkodikKICBpc1dlYWtNYXAodikKICBpc1dlYWtTZXQodikKICBpc0RhdGFWaWV3KHYpCiAgaXNCb29sZWFuT2JqZWN0KHYpCiAgaXNBc3luY0Z1bmN0aW9uKHYpCiAgaXNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzQXN5bmNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzTnVtYmVyT2JqZWN0KHYpCiAgaXNCaWdJbnRPYmplY3QodikKICBpc1N5bWJvbE9iamVjdCh2KQogIGlzTmF0aXZlRXJyb3IodikKICBpc01hcEl0ZXJhdG9yKHYpCiAgaXNTZXRJdGVyYXRvcih2KQogIGlzU3RyaW5nT2JqZWN0KHYpCiAgaXNBcnJheUJ1ZmZlclZpZXcodikKICBpc0FyZ3VtZW50c09iamVjdCh2KQogIGlzQm94ZWRQcmltaXRpdmUodikKICBjdG9yID0+CiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGhhc0J1aWx0SW4obywgbSkKICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBhc3NlcnQoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkKICBzZXRJbnRlcnZhbChjYWxsYmFjaywgbXMpCiAgc3RhcnQoKQooKSA9PgogIGNsZWFySW50ZXJ2YWwoaWQpCiAgbWVtb2l6ZShmbikKICAobiwgLi4ucmVzdCkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICB3YWl0Rm9yKG1zKQogIHJlc29sdmUgPT4KICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIHdlYWtBc3NpZ24ob2JqLCAuLi5hcmdzKQogIGdldENvbnN0cnVjdG9yQ2hhaW4ob2JqKQogIGhhc1Byb3RvdHlwZShvYmosIHByb3RvKQogIGZpbHRlcihzZXEsIHByZWQsIHRoaXNBcmcpCiAgcHJlZCA9IChlbCwgaSkgPT4KICAoZiwgYXJyID0gW10sIGxlbmd0aCA9IGYubGVuZ3RoKSA9PgogICguLi5hcmdzKSA9PgogIGEgPT4KICBzcGxpdChidWYsIC4uLnBvaW50cykKICBzcGxpdEF0ID0gKGIsIHBvcywgbGVuKSA9PgogIHVuaXF1ZSA9IChhcnIsIGNtcCkgPT4KICAoZWwsIGksIGFycikgPT4KICBpdGVtID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSBmbiA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgdG9CaWdJbnQoYXJnKQogIGxhenlQcm9wZXJ0eShvYmosIG5hbWUsIGdldHRlciwgb3B0cyA9IHt9KQogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgdiA9PgogIHJlcGxhY2VQcm9wZXJ0eSh2YWx1ZSkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					797,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					798,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
							[
								132,
								149
							],
							[
								384,
								433
							],
							[
								1320,
								1324
							],
							[
								2140,
								2147
							],
							[
								2669,
								2683
							],
							[
								2943,
								2949
							],
							[
								3052,
								3079
							],
							[
								3127,
								3158
							],
							[
								3314,
								3324
							],
							[
								3363,
								3387
							],
							[
								3454,
								3470
							],
							[
								3515,
								3532
							],
							[
								3580,
								3600
							],
							[
								3651,
								3674
							],
							[
								3722,
								3748
							],
							[
								4149,
								4154
							],
							[
								4213,
								4237
							],
							[
								4260,
								4276
							],
							[
								4291,
								4302
							],
							[
								4342,
								4358
							],
							[
								4373,
								4385
							],
							[
								4426,
								4442
							],
							[
								4457,
								4472
							],
							[
								4516,
								4532
							],
							[
								4547,
								4565
							],
							[
								4612,
								4628
							],
							[
								4643,
								4664
							],
							[
								4714,
								4730
							],
							[
								4745,
								4769
							],
							[
								4895,
								4918
							],
							[
								5001,
								5021
							],
							[
								5276,
								5288
							],
							[
								5338,
								5350
							],
							[
								5470,
								5493
							],
							[
								5576,
								5603
							],
							[
								5858,
								5879
							],
							[
								5942,
								5963
							],
							[
								6099,
								6123
							],
							[
								6209,
								6216
							],
							[
								6237,
								6244
							],
							[
								6274,
								6296
							],
							[
								6379,
								6386
							],
							[
								6404,
								6411
							],
							[
								6436,
								6458
							],
							[
								6508,
								6515
							],
							[
								6569,
								6576
							],
							[
								6608,
								6637
							],
							[
								6983,
								7008
							],
							[
								7135,
								7154
							],
							[
								7236,
								7255
							],
							[
								7442,
								7461
							],
							[
								7539,
								7558
							],
							[
								7623,
								7642
							],
							[
								7738,
								7778
							],
							[
								7920,
								7933
							],
							[
								7959,
								7992
							],
							[
								8241,
								8255
							],
							[
								8416,
								8423
							],
							[
								8640,
								8646
							],
							[
								9052,
								9076
							],
							[
								9455,
								9491
							],
							[
								9533,
								9551
							],
							[
								9734,
								9771
							],
							[
								9852,
								9870
							],
							[
								9888,
								9899
							],
							[
								9965,
								9999
							],
							[
								10026,
								10044
							],
							[
								10319,
								10364
							],
							[
								10564,
								10582
							],
							[
								10833,
								10859
							],
							[
								11118,
								11137
							],
							[
								11216,
								11235
							],
							[
								11385,
								11433
							],
							[
								11614,
								11629
							],
							[
								11655,
								11665
							],
							[
								11752,
								11757
							],
							[
								12524,
								12530
							],
							[
								12606,
								12611
							],
							[
								12620,
								12625
							],
							[
								12654,
								12663
							],
							[
								12687,
								12697
							],
							[
								12719,
								12732
							],
							[
								12760,
								12774
							],
							[
								12800,
								12817
							],
							[
								12845,
								12863
							],
							[
								12964,
								12969
							],
							[
								13177,
								13200
							],
							[
								13651,
								13655
							],
							[
								13697,
								13701
							],
							[
								13808,
								13820
							],
							[
								14409,
								14419
							],
							[
								14507,
								14535
							],
							[
								14569,
								14575
							],
							[
								14637,
								14661
							],
							[
								14691,
								14732
							],
							[
								15008,
								15020
							],
							[
								15053,
								15085
							],
							[
								15127,
								15167
							],
							[
								15321,
								15341
							],
							[
								16627,
								16657
							],
							[
								16717,
								16754
							],
							[
								16939,
								16945
							],
							[
								17160,
								17190
							],
							[
								17270,
								17302
							],
							[
								17530,
								17560
							],
							[
								17697,
								17700
							],
							[
								17837,
								17871
							],
							[
								18028,
								18060
							],
							[
								18350,
								18378
							],
							[
								18456,
								18485
							],
							[
								18560,
								18597
							],
							[
								18647,
								18682
							],
							[
								18863,
								18898
							],
							[
								19198,
								19221
							],
							[
								19252,
								19276
							],
							[
								19340,
								19367
							],
							[
								19400,
								19440
							],
							[
								19558,
								19601
							],
							[
								19904,
								19933
							],
							[
								19990,
								20004
							],
							[
								20053,
								20082
							],
							[
								20124,
								20151
							],
							[
								20261,
								20268
							],
							[
								20288,
								20316
							],
							[
								20406,
								20433
							],
							[
								20472,
								20499
							],
							[
								20549,
								20573
							],
							[
								20648,
								20683
							],
							[
								20785,
								20817
							],
							[
								20902,
								20936
							],
							[
								21021,
								21051
							],
							[
								21271,
								21281
							],
							[
								21334,
								21338
							],
							[
								21406,
								21443
							],
							[
								21480,
								21497
							],
							[
								21520,
								21537
							],
							[
								21597,
								21614
							],
							[
								21700,
								21709
							],
							[
								21781,
								21795
							],
							[
								21863,
								21868
							],
							[
								22566,
								22604
							],
							[
								22755,
								22790
							],
							[
								22874,
								22892
							],
							[
								22950,
								22994
							],
							[
								23008,
								23017
							],
							[
								23049,
								23077
							],
							[
								23091,
								23100
							],
							[
								23169,
								23212
							],
							[
								23332,
								23365
							],
							[
								23392,
								23399
							],
							[
								23528,
								23533
							],
							[
								23549,
								23583
							],
							[
								23660,
								23686
							],
							[
								23784,
								23818
							],
							[
								23841,
								23855
							],
							[
								23890,
								23940
							],
							[
								24078,
								24124
							],
							[
								24185,
								24247
							],
							[
								24258,
								24274
							],
							[
								24409,
								24446
							],
							[
								24485,
								24542
							],
							[
								24913,
								24947
							],
							[
								25077,
								25116
							],
							[
								25191,
								25228
							],
							[
								25345,
								25376
							],
							[
								26131,
								26174
							],
							[
								26305,
								26310
							],
							[
								26466,
								26500
							],
							[
								26708,
								26744
							],
							[
								26806,
								26832
							],
							[
								27592,
								27617
							],
							[
								27685,
								27713
							],
							[
								28306,
								28325
							],
							[
								28420,
								28435
							],
							[
								28563,
								28588
							],
							[
								28888,
								28945
							],
							[
								29068,
								29133
							],
							[
								29243,
								29295
							],
							[
								29416,
								29466
							],
							[
								29582,
								29597
							],
							[
								29668,
								29679
							],
							[
								29767,
								29778
							],
							[
								29804,
								29819
							],
							[
								29897,
								29911
							],
							[
								29951,
								29970
							],
							[
								30193,
								30282
							],
							[
								30285,
								30382
							],
							[
								30438,
								30450
							],
							[
								30515,
								30529
							],
							[
								30561,
								30567
							],
							[
								30610,
								30618
							],
							[
								30664,
								30672
							],
							[
								30728,
								30743
							],
							[
								30796,
								30803
							],
							[
								30914,
								30924
							],
							[
								31066,
								31076
							],
							[
								31139,
								31146
							],
							[
								31231,
								31258
							],
							[
								31282,
								31291
							],
							[
								31317,
								31325
							],
							[
								31342,
								31351
							],
							[
								31390,
								31398
							],
							[
								31409,
								31422
							],
							[
								31433,
								31448
							],
							[
								31477,
								31495
							],
							[
								31575,
								31599
							],
							[
								32020,
								32054
							],
							[
								32085,
								32096
							],
							[
								32101,
								32111
							],
							[
								32125,
								32136
							],
							[
								32157,
								32193
							],
							[
								32697,
								32727
							],
							[
								32771,
								32802
							],
							[
								33037,
								33059
							],
							[
								33119,
								33145
							],
							[
								33261,
								33272
							],
							[
								33384,
								33415
							],
							[
								33619,
								33644
							],
							[
								33711,
								33763
							],
							[
								33875,
								33897
							],
							[
								33903,
								33924
							],
							[
								33941,
								33973
							],
							[
								34093,
								34128
							],
							[
								34193,
								34226
							],
							[
								34273,
								34285
							],
							[
								34355,
								34367
							],
							[
								34424,
								34455
							],
							[
								34499,
								34541
							],
							[
								34717,
								34745
							],
							[
								34856,
								34886
							],
							[
								34898,
								34915
							],
							[
								35039,
								35075
							],
							[
								35152,
								35178
							],
							[
								35220,
								35259
							],
							[
								35371,
								35375
							],
							[
								35402,
								35406
							],
							[
								35445,
								35449
							],
							[
								35477,
								35481
							],
							[
								35504,
								35540
							],
							[
								35578,
								35610
							],
							[
								35728,
								35769
							],
							[
								35862,
								35886
							],
							[
								35909,
								35920
							],
							[
								35938,
								35955
							],
							[
								36041,
								36065
							],
							[
								36088,
								36114
							],
							[
								36570,
								36602
							],
							[
								36856,
								36865
							],
							[
								36896,
								36905
							],
							[
								36936,
								36945
							],
							[
								36976,
								36985
							],
							[
								37016,
								37025
							],
							[
								37055,
								37064
							],
							[
								37095,
								37104
							],
							[
								37113,
								37133
							],
							[
								37177,
								37182
							],
							[
								37225,
								37234
							],
							[
								37402,
								37435
							],
							[
								37809,
								37835
							],
							[
								38061,
								38104
							],
							[
								38146,
								38158
							],
							[
								38236,
								38281
							],
							[
								38402,
								38422
							],
							[
								38543,
								38550
							],
							[
								38569,
								38576
							],
							[
								38756,
								38785
							],
							[
								38914,
								38959
							],
							[
								39087,
								39119
							],
							[
								39198,
								39219
							],
							[
								39470,
								39488
							],
							[
								39675,
								39688
							],
							[
								39810,
								39858
							],
							[
								39871,
								39880
							],
							[
								39918,
								39928
							],
							[
								39975,
								40009
							],
							[
								40286,
								40328
							],
							[
								40382,
								40420
							],
							[
								40582,
								40601
							],
							[
								40801,
								40840
							],
							[
								40974,
								40991
							],
							[
								41531,
								41551
							],
							[
								41639,
								41658
							],
							[
								41699,
								41718
							],
							[
								43571,
								43578
							],
							[
								43593,
								43600
							],
							[
								45217,
								45250
							],
							[
								45398,
								45407
							],
							[
								45427,
								45435
							],
							[
								45439,
								45448
							],
							[
								45589,
								45617
							],
							[
								45731,
								45759
							],
							[
								45873,
								45891
							],
							[
								46270,
								46305
							],
							[
								46345,
								46372
							],
							[
								46453,
								46501
							],
							[
								46702,
								46789
							],
							[
								46800,
								46816
							],
							[
								46925,
								46965
							],
							[
								46991,
								46995
							],
							[
								47012,
								47017
							],
							[
								47036,
								47041
							],
							[
								47059,
								47096
							],
							[
								47122,
								47126
							],
							[
								47132,
								47138
							],
							[
								47153,
								47159
							],
							[
								47167,
								47173
							],
							[
								47189,
								47226
							],
							[
								47252,
								47256
							],
							[
								47270,
								47276
							],
							[
								47284,
								47290
							],
							[
								47297,
								47303
							],
							[
								47320,
								47373
							],
							[
								47374,
								47391
							],
							[
								47496,
								47515
							],
							[
								47562,
								47600
							],
							[
								47625,
								47638
							],
							[
								48233,
								48277
							],
							[
								48349,
								48367
							],
							[
								48621,
								48639
							],
							[
								48966,
								48993
							],
							[
								49002,
								49017
							],
							[
								49093,
								49120
							],
							[
								49247,
								49251
							],
							[
								49329,
								49342
							],
							[
								49539,
								49568
							],
							[
								49676,
								49702
							],
							[
								49770,
								49797
							],
							[
								50069,
								50090
							],
							[
								50160,
								50185
							],
							[
								50205,
								50227
							],
							[
								50291,
								50316
							],
							[
								50441,
								50465
							],
							[
								50689,
								50705
							],
							[
								50706,
								50725
							],
							[
								50758,
								50778
							],
							[
								50867,
								50895
							],
							[
								50993,
								51018
							],
							[
								51068,
								51095
							],
							[
								51098,
								51117
							],
							[
								51422,
								51452
							],
							[
								51495,
								51510
							],
							[
								51578,
								51601
							],
							[
								51640,
								51644
							],
							[
								51684,
								51688
							],
							[
								51726,
								51750
							],
							[
								51817,
								51853
							],
							[
								51918,
								51925
							],
							[
								51963,
								52002
							],
							[
								52142,
								52175
							],
							[
								52367,
								52378
							],
							[
								52475,
								52506
							],
							[
								52565,
								52621
							],
							[
								52985,
								53026
							],
							[
								53392,
								53432
							],
							[
								53660,
								53708
							],
							[
								53740,
								53749
							],
							[
								54032,
								54071
							],
							[
								54082,
								54091
							],
							[
								54130,
								54141
							],
							[
								54546,
								54587
							],
							[
								54633,
								54666
							],
							[
								54743,
								54778
							],
							[
								54878,
								54921
							],
							[
								55101,
								55137
							],
							[
								55454,
								55493
							],
							[
								55624,
								55672
							],
							[
								55840,
								55854
							],
							[
								56026,
								56033
							],
							[
								56149,
								56156
							],
							[
								56491,
								56515
							],
							[
								56545,
								56562
							],
							[
								56619,
								56641
							],
							[
								56670,
								56687
							],
							[
								56793,
								56824
							],
							[
								56898,
								56918
							],
							[
								57052,
								57086
							],
							[
								57116,
								57125
							],
							[
								57145,
								57153
							],
							[
								57157,
								57166
							],
							[
								57259,
								57293
							],
							[
								57594,
								57627
							],
							[
								57989,
								58023
							],
							[
								58393,
								58427
							],
							[
								58710,
								58754
							],
							[
								59379,
								59418
							],
							[
								59546,
								59628
							],
							[
								60754,
								60767
							],
							[
								60785,
								60794
							],
							[
								60812,
								60821
							],
							[
								60872,
								60883
							],
							[
								60907,
								60919
							],
							[
								60926,
								60937
							],
							[
								60974,
								60979
							],
							[
								61082,
								61087
							],
							[
								61232,
								61237
							],
							[
								61270,
								61275
							],
							[
								61310,
								61315
							],
							[
								61510,
								61515
							],
							[
								61719,
								61752
							],
							[
								61765,
								61766
							],
							[
								62175,
								62208
							],
							[
								62372,
								62409
							],
							[
								62417,
								62418
							],
							[
								62894,
								62901
							],
							[
								63040,
								63051
							],
							[
								63137,
								63148
							],
							[
								63435,
								63449
							],
							[
								63992,
								64024
							],
							[
								64534,
								64572
							],
							[
								64871,
								64894
							],
							[
								64907,
								64927
							],
							[
								64990,
								65004
							],
							[
								65008,
								65022
							],
							[
								65099,
								65114
							],
							[
								65188,
								65202
							],
							[
								65245,
								65268
							],
							[
								65460,
								65478
							],
							[
								65684,
								65698
							],
							[
								65702,
								65716
							],
							[
								65887,
								65909
							],
							[
								66453,
								66458
							],
							[
								66500,
								66506
							],
							[
								66549,
								66556
							],
							[
								66585,
								66624
							],
							[
								66653,
								66663
							],
							[
								66669,
								66678
							],
							[
								66696,
								66723
							],
							[
								66763,
								66772
							],
							[
								66781,
								66789
							],
							[
								66837,
								66846
							],
							[
								66872,
								66881
							],
							[
								66892,
								66900
							],
							[
								66972,
								66981
							],
							[
								67072,
								67116
							],
							[
								67178,
								67239
							],
							[
								67547,
								67573
							],
							[
								67601,
								67606
							],
							[
								67630,
								67643
							],
							[
								67751,
								67816
							],
							[
								67920,
								67946
							],
							[
								67980,
								68006
							],
							[
								68027,
								68060
							],
							[
								68088,
								68104
							],
							[
								68119,
								68126
							],
							[
								68148,
								68164
							],
							[
								68189,
								68216
							],
							[
								68273,
								68288
							],
							[
								68310,
								68322
							],
							[
								68339,
								68354
							],
							[
								68364,
								68373
							],
							[
								68413,
								68422
							],
							[
								68429,
								68435
							],
							[
								68447,
								68476
							],
							[
								68562,
								68572
							],
							[
								68613,
								68628
							],
							[
								68647,
								68660
							],
							[
								69085,
								69095
							],
							[
								69234,
								69246
							],
							[
								69526,
								69547
							],
							[
								69733,
								69744
							],
							[
								69781,
								69790
							],
							[
								69870,
								69903
							],
							[
								70208,
								70237
							],
							[
								70281,
								70303
							],
							[
								70337,
								70376
							],
							[
								70410,
								70416
							],
							[
								70489,
								70514
							],
							[
								70525,
								70537
							],
							[
								70729,
								70739
							],
							[
								70791,
								70841
							],
							[
								71249,
								71279
							],
							[
								71365,
								71395
							],
							[
								71468,
								71499
							],
							[
								71653,
								71677
							],
							[
								71732,
								71756
							],
							[
								71883,
								71887
							],
							[
								71967,
								71992
							],
							[
								72080,
								72103
							],
							[
								72135,
								72141
							],
							[
								72284,
								72285
							],
							[
								72376,
								72380
							],
							[
								72514,
								72545
							],
							[
								72796,
								72808
							],
							[
								72924,
								72938
							],
							[
								73084,
								73116
							],
							[
								73320,
								73346
							],
							[
								73347,
								73364
							],
							[
								73413,
								73436
							],
							[
								73469,
								73479
							],
							[
								73528,
								73540
							],
							[
								73855,
								73865
							],
							[
								74057,
								74069
							],
							[
								74744,
								74777
							],
							[
								74805,
								74819
							],
							[
								74913,
								74938
							],
							[
								75087,
								75115
							],
							[
								75249,
								75278
							],
							[
								75578,
								75626
							],
							[
								75815,
								75852
							],
							[
								75901,
								75949
							],
							[
								76063,
								76097
							],
							[
								76105,
								76129
							],
							[
								76643,
								76673
							],
							[
								76799,
								76826
							],
							[
								77303,
								77354
							],
							[
								77396,
								77423
							],
							[
								77593,
								77641
							],
							[
								77853,
								77888
							],
							[
								78095,
								78128
							],
							[
								78400,
								78431
							],
							[
								78677,
								78721
							],
							[
								78857,
								78873
							],
							[
								79033,
								79083
							],
							[
								79477,
								79482
							],
							[
								79563,
								79576
							],
							[
								79625,
								79635
							],
							[
								79639,
								79652
							],
							[
								79727,
								79742
							],
							[
								79791,
								79801
							],
							[
								79805,
								79820
							],
							[
								79887,
								79920
							],
							[
								80030,
								80037
							],
							[
								80321,
								80336
							],
							[
								80593,
								80618
							],
							[
								80679,
								80707
							],
							[
								80796,
								80805
							],
							[
								81772,
								81803
							],
							[
								81975,
								81989
							],
							[
								82612,
								82646
							],
							[
								82831,
								82853
							],
							[
								82889,
								82913
							],
							[
								82916,
								82936
							],
							[
								83180,
								83206
							],
							[
								83301,
								83339
							],
							[
								83741,
								83784
							],
							[
								83856,
								83878
							],
							[
								83900,
								83926
							],
							[
								84051,
								84159
							],
							[
								84397,
								84448
							],
							[
								84526,
								84560
							],
							[
								84648,
								84676
							],
							[
								84710,
								84745
							],
							[
								84819,
								84844
							],
							[
								84866,
								84883
							],
							[
								84925,
								84974
							],
							[
								85047,
								85060
							],
							[
								85131,
								85144
							],
							[
								85320,
								85358
							],
							[
								85369,
								85388
							],
							[
								85442,
								85483
							],
							[
								85494,
								85513
							],
							[
								85571,
								85596
							],
							[
								85643,
								85682
							],
							[
								85767,
								85780
							],
							[
								85819,
								85829
							],
							[
								85883,
								85890
							],
							[
								85915,
								85921
							],
							[
								85963,
								85976
							],
							[
								85996,
								86032
							],
							[
								86117,
								86130
							],
							[
								86169,
								86179
							],
							[
								86212,
								86219
							],
							[
								86325,
								86358
							],
							[
								86438,
								86473
							],
							[
								86513,
								86523
							],
							[
								86638,
								86666
							],
							[
								86828,
								86840
							],
							[
								86945,
								86970
							],
							[
								87085,
								87098
							],
							[
								87197,
								87224
							],
							[
								87343,
								87356
							],
							[
								87459,
								87492
							],
							[
								87715,
								87734
							],
							[
								87813,
								87841
							],
							[
								87860,
								87879
							],
							[
								87897,
								87932
							],
							[
								88275,
								88306
							],
							[
								88365,
								88378
							],
							[
								88462,
								88494
							],
							[
								88675,
								88725
							],
							[
								88768,
								88795
							],
							[
								88997,
								89030
							],
							[
								89081,
								89116
							],
							[
								89129,
								89143
							],
							[
								89210,
								89272
							],
							[
								89471,
								89487
							],
							[
								89714,
								89724
							],
							[
								89762,
								89772
							],
							[
								89792,
								89802
							],
							[
								89830,
								89855
							],
							[
								89981,
								90006
							],
							[
								90280,
								90307
							],
							[
								90539,
								90551
							],
							[
								92204,
								92239
							],
							[
								92258,
								92266
							],
							[
								92314,
								92329
							],
							[
								92477,
								92490
							],
							[
								92683,
								92699
							],
							[
								92906,
								92931
							],
							[
								92946,
								92968
							],
							[
								93184,
								93188
							],
							[
								93402,
								93424
							],
							[
								93446,
								93456
							],
							[
								93474,
								93487
							],
							[
								93634,
								93656
							],
							[
								93678,
								93688
							],
							[
								93706,
								93719
							],
							[
								93848,
								93870
							],
							[
								93896,
								93906
							],
							[
								93924,
								93937
							],
							[
								93973,
								93995
							],
							[
								94016,
								94026
							],
							[
								94044,
								94057
							],
							[
								94077,
								94118
							],
							[
								94425,
								94448
							],
							[
								94529,
								94551
							],
							[
								94625,
								94645
							],
							[
								94772,
								94783
							],
							[
								94816,
								94833
							],
							[
								95009,
								95028
							],
							[
								95063,
								95085
							],
							[
								95217,
								95238
							],
							[
								95376,
								95396
							],
							[
								95463,
								95486
							],
							[
								95562,
								95584
							],
							[
								95702,
								95726
							],
							[
								95788,
								95800
							],
							[
								95971,
								95989
							],
							[
								96051,
								96063
							],
							[
								96215,
								96238
							],
							[
								96379,
								96395
							],
							[
								96451,
								96464
							],
							[
								96496,
								96564
							],
							[
								96605,
								96627
							],
							[
								96656,
								96666
							],
							[
								96682,
								96695
							],
							[
								96755,
								96768
							],
							[
								96844,
								96867
							],
							[
								96995,
								97017
							],
							[
								97114,
								97127
							],
							[
								97189,
								97205
							],
							[
								97243,
								97247
							],
							[
								97506,
								97549
							],
							[
								97564,
								97589
							],
							[
								97732,
								97740
							],
							[
								97754,
								97761
							],
							[
								97770,
								97775
							],
							[
								97793,
								97834
							],
							[
								97847,
								97854
							],
							[
								97931,
								97970
							],
							[
								98122,
								98133
							],
							[
								98168,
								98189
							],
							[
								98267,
								98274
							],
							[
								98306,
								98331
							],
							[
								98389,
								98398
							],
							[
								98415,
								98422
							],
							[
								98440,
								98466
							],
							[
								98524,
								98533
							],
							[
								98551,
								98558
							],
							[
								98577,
								98672
							],
							[
								99304,
								99324
							],
							[
								99325,
								99339
							],
							[
								99361,
								99368
							],
							[
								99395,
								99415
							],
							[
								99416,
								99430
							],
							[
								99451,
								99458
							],
							[
								99502,
								99516
							],
							[
								99588,
								99637
							],
							[
								99650,
								99666
							],
							[
								99700,
								99716
							],
							[
								99808,
								99840
							],
							[
								99871,
								99910
							],
							[
								100291,
								100332
							],
							[
								100371,
								100378
							],
							[
								100434,
								100454
							],
							[
								100492,
								100511
							],
							[
								100585,
								100602
							],
							[
								100621,
								100641
							],
							[
								100645,
								100662
							],
							[
								100712,
								100735
							],
							[
								100836,
								100859
							],
							[
								100903,
								100922
							],
							[
								100965,
								100993
							],
							[
								101089,
								101110
							],
							[
								101186,
								101212
							],
							[
								101325,
								101343
							],
							[
								101397,
								101402
							],
							[
								101405,
								101411
							],
							[
								101424,
								101470
							],
							[
								101553,
								101566
							],
							[
								101944,
								101957
							],
							[
								102020,
								102069
							],
							[
								102082,
								102098
							],
							[
								102120,
								102133
							],
							[
								102161,
								102173
							],
							[
								102177,
								102190
							],
							[
								102252,
								102304
							],
							[
								102493,
								102506
							],
							[
								102569,
								102608
							],
							[
								102752,
								102787
							],
							[
								102859,
								102863
							],
							[
								102890,
								102899
							],
							[
								103150,
								103185
							],
							[
								103261,
								103282
							],
							[
								103297,
								103305
							],
							[
								103318,
								103327
							],
							[
								103349,
								103353
							],
							[
								103392,
								103396
							],
							[
								103446,
								103482
							],
							[
								103528,
								103577
							],
							[
								103893,
								103921
							],
							[
								103981,
								104032
							],
							[
								104283,
								104326
							],
							[
								104379,
								104422
							],
							[
								104458,
								104463
							],
							[
								104540,
								104554
							],
							[
								104589,
								104599
							],
							[
								104612,
								104647
							],
							[
								104691,
								104699
							],
							[
								105246,
								105290
							],
							[
								105825,
								105848
							],
							[
								106256,
								106298
							],
							[
								107104,
								107127
							],
							[
								107499,
								107504
							],
							[
								108058,
								108071
							],
							[
								108107,
								108122
							],
							[
								108160,
								108177
							],
							[
								108219,
								108263
							],
							[
								108462,
								108469
							],
							[
								109112,
								109125
							],
							[
								109160,
								109169
							],
							[
								109226,
								109245
							],
							[
								109351,
								109364
							],
							[
								109539,
								109554
							],
							[
								109598,
								109615
							],
							[
								109661,
								109674
							],
							[
								109716,
								109729
							],
							[
								109771,
								109786
							],
							[
								109830,
								109847
							],
							[
								109975,
								109980
							],
							[
								110129,
								110155
							],
							[
								110332,
								110346
							],
							[
								110369,
								110374
							],
							[
								111008,
								111012
							],
							[
								111070,
								111074
							],
							[
								111317,
								111326
							],
							[
								111451,
								111464
							],
							[
								111538,
								111552
							],
							[
								111803,
								111826
							],
							[
								111844,
								111853
							],
							[
								111870,
								111881
							],
							[
								111891,
								111900
							],
							[
								111920,
								111948
							],
							[
								112056,
								112089
							],
							[
								112256,
								112278
							],
							[
								112296,
								112305
							],
							[
								112325,
								112338
							],
							[
								112396,
								112405
							],
							[
								112425,
								112467
							],
							[
								112940,
								112948
							],
							[
								112983,
								112994
							],
							[
								113071,
								113109
							],
							[
								113460,
								113481
							],
							[
								113566,
								113600
							],
							[
								113753,
								113792
							],
							[
								113847,
								113859
							],
							[
								114318,
								114326
							],
							[
								114458,
								114465
							],
							[
								114524,
								114532
							],
							[
								114645,
								114662
							],
							[
								114741,
								114745
							],
							[
								114799,
								114816
							],
							[
								114928,
								114976
							],
							[
								115262,
								115357
							],
							[
								115492,
								115504
							],
							[
								115514,
								115526
							],
							[
								115531,
								115544
							],
							[
								115650,
								115662
							],
							[
								115672,
								115684
							],
							[
								115689,
								115702
							],
							[
								115810,
								115818
							],
							[
								116029,
								116037
							],
							[
								116412,
								116422
							],
							[
								116502,
								116512
							],
							[
								116593,
								116601
							],
							[
								116732,
								116751
							],
							[
								117300,
								117304
							],
							[
								117373,
								117390
							],
							[
								117430,
								117445
							],
							[
								117483,
								117496
							],
							[
								117532,
								117547
							],
							[
								117657,
								117662
							],
							[
								117732,
								117741
							],
							[
								117762,
								117772
							],
							[
								117879,
								117944
							],
							[
								118295,
								118329
							],
							[
								118413,
								118456
							],
							[
								118672,
								118719
							],
							[
								118910,
								118961
							],
							[
								119181,
								119233
							],
							[
								119581,
								119624
							],
							[
								119940,
								119944
							],
							[
								120059,
								120134
							],
							[
								120452,
								120456
							],
							[
								120689,
								120731
							],
							[
								120795,
								120803
							],
							[
								120964,
								121005
							],
							[
								121052,
								121084
							],
							[
								121165,
								121198
							],
							[
								121257,
								121321
							],
							[
								121561,
								121602
							],
							[
								121640,
								121658
							],
							[
								121707,
								121714
							],
							[
								121908,
								121972
							],
							[
								122148,
								122213
							],
							[
								122226,
								122238
							],
							[
								122255,
								122266
							],
							[
								122290,
								122305
							],
							[
								122688,
								122718
							],
							[
								122895,
								122915
							],
							[
								122935,
								122989
							],
							[
								123212,
								123218
							],
							[
								123270,
								123275
							],
							[
								123331,
								123337
							],
							[
								123414,
								123419
							],
							[
								123462,
								123521
							],
							[
								125570,
								125583
							],
							[
								125731,
								125745
							],
							[
								125905,
								125918
							],
							[
								126000,
								126019
							],
							[
								126262,
								126299
							],
							[
								126647,
								126717
							],
							[
								127073,
								127115
							],
							[
								127166,
								127175
							],
							[
								127341,
								127376
							],
							[
								127503,
								127507
							],
							[
								127529,
								127540
							],
							[
								127650,
								127673
							],
							[
								127817,
								127841
							],
							[
								127942,
								127946
							],
							[
								127969,
								127973
							],
							[
								127985,
								128017
							],
							[
								128065,
								128105
							],
							[
								128334,
								128353
							],
							[
								128385,
								128449
							],
							[
								128501,
								128506
							],
							[
								128539,
								128569
							],
							[
								128656,
								128691
							],
							[
								128715,
								128741
							],
							[
								128855,
								128888
							],
							[
								129027,
								129085
							],
							[
								129110,
								129136
							],
							[
								129179,
								129214
							],
							[
								129257,
								129278
							],
							[
								129427,
								129453
							],
							[
								129611,
								129630
							],
							[
								129952,
								130001
							],
							[
								130026,
								130047
							],
							[
								130089,
								130105
							],
							[
								130159,
								130182
							],
							[
								130245,
								130273
							],
							[
								130335,
								130356
							],
							[
								130380,
								130385
							],
							[
								130958,
								130989
							],
							[
								130992,
								131010
							],
							[
								131062,
								131063
							],
							[
								131076,
								131087
							],
							[
								131642,
								131687
							],
							[
								131789,
								131813
							],
							[
								132075,
								132085
							],
							[
								132133,
								132154
							],
							[
								132202,
								132223
							],
							[
								132309,
								132350
							],
							[
								132498,
								132502
							],
							[
								132548,
								132556
							],
							[
								132585,
								132589
							],
							[
								132964,
								132977
							],
							[
								133030,
								133050
							],
							[
								133376,
								133433
							],
							[
								133540,
								133551
							],
							[
								133891,
								133911
							],
							[
								133951,
								133987
							],
							[
								134016,
								134029
							],
							[
								134072,
								134082
							],
							[
								134127,
								134142
							],
							[
								134945,
								134958
							],
							[
								135529,
								135549
							],
							[
								135624,
								135639
							],
							[
								136016,
								136029
							],
							[
								136100,
								136120
							],
							[
								136202,
								136217
							],
							[
								136283,
								136312
							],
							[
								136386,
								136419
							],
							[
								136531,
								136545
							],
							[
								136585,
								136600
							],
							[
								136622,
								136650
							],
							[
								137179,
								137202
							],
							[
								137409,
								137437
							],
							[
								137544,
								137586
							],
							[
								137913,
								137969
							],
							[
								138203,
								138244
							],
							[
								138330,
								138341
							],
							[
								138490,
								138503
							],
							[
								138824,
								138840
							],
							[
								138869,
								138921
							],
							[
								138990,
								138997
							],
							[
								139081,
								139095
							],
							[
								139179,
								139194
							],
							[
								139300,
								139304
							],
							[
								139336,
								139356
							],
							[
								139407,
								139420
							],
							[
								139470,
								139482
							],
							[
								139776,
								139791
							],
							[
								140112,
								140122
							],
							[
								140177,
								140187
							],
							[
								140271,
								140282
							],
							[
								140339,
								140346
							],
							[
								140949,
								140959
							],
							[
								141025,
								141036
							],
							[
								141104,
								141116
							],
							[
								141151,
								141164
							],
							[
								141209,
								141224
							],
							[
								141243,
								141270
							],
							[
								141456,
								141499
							],
							[
								141660,
								141720
							],
							[
								141806,
								141831
							],
							[
								141880,
								141923
							],
							[
								141934,
								141944
							],
							[
								141953,
								141982
							],
							[
								142238,
								142254
							],
							[
								142276,
								142287
							],
							[
								142337,
								142367
							],
							[
								142436,
								142441
							],
							[
								142470,
								142475
							],
							[
								142770,
								142783
							],
							[
								142834,
								142865
							],
							[
								142886,
								142899
							],
							[
								142900,
								142920
							],
							[
								144424,
								144451
							],
							[
								144476,
								144481
							],
							[
								144532,
								144561
							],
							[
								144640,
								144645
							],
							[
								144727,
								144740
							],
							[
								144791,
								144802
							],
							[
								144842,
								144863
							],
							[
								144987,
								145004
							],
							[
								145134,
								145154
							],
							[
								145350,
								145376
							],
							[
								145464,
								145470
							],
							[
								145500,
								145505
							],
							[
								145581,
								145614
							],
							[
								145772,
								145777
							],
							[
								145828,
								145841
							],
							[
								145865,
								145871
							],
							[
								145954,
								145978
							],
							[
								146072,
								146083
							],
							[
								146139,
								146152
							],
							[
								146214,
								146225
							],
							[
								146324,
								146334
							],
							[
								146432,
								146445
							],
							[
								146558,
								146567
							],
							[
								146625,
								146637
							],
							[
								146720,
								146728
							],
							[
								146828,
								146835
							],
							[
								146937,
								146957
							],
							[
								147145,
								147166
							],
							[
								147425,
								147442
							],
							[
								147595,
								147607
							],
							[
								147736,
								147750
							],
							[
								147921,
								147934
							],
							[
								147951,
								147971
							],
							[
								148230,
								148260
							],
							[
								148266,
								148292
							],
							[
								148311,
								148337
							],
							[
								148366,
								148384
							],
							[
								148450,
								148484
							],
							[
								148598,
								148652
							],
							[
								148679,
								148699
							],
							[
								148789,
								148806
							],
							[
								148902,
								148924
							],
							[
								149031,
								149055
							],
							[
								149163,
								149193
							],
							[
								149224,
								149233
							],
							[
								149276,
								149295
							],
							[
								149444,
								149464
							],
							[
								149581,
								149600
							],
							[
								149714,
								149730
							],
							[
								149838,
								149848
							],
							[
								149926,
								149933
							],
							[
								149999,
								150008
							],
							[
								150353,
								150374
							],
							[
								150383,
								150411
							],
							[
								150421,
								150466
							],
							[
								150521,
								150532
							],
							[
								150554,
								150564
							],
							[
								150577,
								150588
							],
							[
								150616,
								150649
							],
							[
								150810,
								150842
							],
							[
								150910,
								150932
							],
							[
								151104,
								151140
							],
							[
								151302,
								151318
							],
							[
								151379,
								151415
							],
							[
								151491,
								151502
							],
							[
								151567,
								151571
							],
							[
								151610,
								151623
							],
							[
								151737,
								151773
							],
							[
								151950,
								151955
							],
							[
								151996,
								152049
							],
							[
								152987,
								153016
							],
							[
								153170,
								153207
							],
							[
								153218,
								153231
							],
							[
								153244,
								153253
							],
							[
								153300,
								153320
							],
							[
								153354,
								153370
							],
							[
								153592,
								153613
							],
							[
								153741,
								153773
							],
							[
								153800,
								153809
							],
							[
								153821,
								153834
							],
							[
								153912,
								153936
							],
							[
								154003,
								154012
							],
							[
								154028,
								154038
							],
							[
								154055,
								154072
							],
							[
								154100,
								154109
							],
							[
								154110,
								154133
							],
							[
								154179,
								154203
							],
							[
								154351,
								154356
							],
							[
								154374,
								154383
							],
							[
								154483,
								154491
							],
							[
								154495,
								154504
							],
							[
								154526,
								154539
							],
							[
								154556,
								154569
							],
							[
								154576,
								154589
							],
							[
								154615,
								154632
							],
							[
								154645,
								154661
							],
							[
								154731,
								154736
							],
							[
								154754,
								154763
							],
							[
								154863,
								154871
							],
							[
								154884,
								154893
							],
							[
								154908,
								154913
							],
							[
								155001,
								155038
							],
							[
								155195,
								155211
							],
							[
								155225,
								155247
							],
							[
								155360,
								155366
							],
							[
								156414,
								156429
							],
							[
								156479,
								156493
							],
							[
								156507,
								156522
							],
							[
								157052,
								157069
							],
							[
								157119,
								157135
							],
							[
								157419,
								157449
							],
							[
								157467,
								157476
							],
							[
								157494,
								157504
							],
							[
								157517,
								157526
							],
							[
								157669,
								157698
							],
							[
								157716,
								157725
							],
							[
								157743,
								157753
							],
							[
								157757,
								157766
							],
							[
								159047,
								159099
							],
							[
								159165,
								159188
							],
							[
								159260,
								159278
							],
							[
								159627,
								159637
							],
							[
								159641,
								159655
							],
							[
								159857,
								159889
							],
							[
								159916,
								159951
							],
							[
								159991,
								160014
							],
							[
								160175,
								160191
							],
							[
								160376,
								160385
							],
							[
								160411,
								160431
							],
							[
								160458,
								160467
							],
							[
								160482,
								160506
							],
							[
								160646,
								160691
							],
							[
								160723,
								160741
							],
							[
								160887,
								160899
							],
							[
								161044,
								161049
							],
							[
								161363,
								161370
							],
							[
								161507,
								161526
							],
							[
								161544,
								161566
							],
							[
								161850,
								161892
							],
							[
								161909,
								161946
							],
							[
								162194,
								162213
							],
							[
								162583,
								162623
							],
							[
								162666,
								162680
							],
							[
								162750,
								162780
							],
							[
								162829,
								162859
							],
							[
								162926,
								163004
							],
							[
								163454,
								163482
							],
							[
								163534,
								163598
							],
							[
								163616,
								163640
							],
							[
								163899,
								163918
							],
							[
								164033,
								164069
							],
							[
								164794,
								164832
							],
							[
								164849,
								164887
							],
							[
								166176,
								166183
							],
							[
								166239,
								166257
							],
							[
								166469,
								166476
							],
							[
								166524,
								166528
							],
							[
								166660,
								166668
							],
							[
								166735,
								166747
							],
							[
								167723,
								167789
							],
							[
								167790,
								167807
							],
							[
								168045,
								168056
							],
							[
								168073,
								168092
							],
							[
								168206,
								168270
							],
							[
								168286,
								168295
							],
							[
								168307,
								168315
							],
							[
								168368,
								168383
							],
							[
								168399,
								168405
							],
							[
								168429,
								168442
							],
							[
								168637,
								168654
							],
							[
								168699,
								168724
							],
							[
								168823,
								168829
							],
							[
								168949,
								168981
							],
							[
								169058,
								169062
							],
							[
								169192,
								169213
							],
							[
								169251,
								169272
							],
							[
								169364,
								169389
							],
							[
								169560,
								169593
							],
							[
								169826,
								169853
							],
							[
								169945,
								169949
							],
							[
								170056,
								170061
							],
							[
								170325,
								170371
							],
							[
								170961,
								170970
							],
							[
								171206,
								171259
							],
							[
								171270,
								171296
							],
							[
								171599,
								171615
							],
							[
								171699,
								171710
							],
							[
								171956,
								171960
							],
							[
								172244,
								172297
							],
							[
								172525,
								172538
							],
							[
								172549,
								172565
							],
							[
								172740,
								172749
							],
							[
								172791,
								172800
							],
							[
								172840,
								172845
							],
							[
								172881,
								172899
							],
							[
								172920,
								172951
							],
							[
								173058,
								173077
							],
							[
								173370,
								173383
							],
							[
								173472,
								173490
							],
							[
								173585,
								173602
							],
							[
								173735,
								173742
							],
							[
								173861,
								173867
							],
							[
								174017,
								174025
							],
							[
								174144,
								174154
							],
							[
								174383,
								174392
							],
							[
								174885,
								174925
							],
							[
								175234,
								175269
							],
							[
								175600,
								175606
							],
							[
								175642,
								175660
							],
							[
								175704,
								175714
							],
							[
								175797,
								175807
							],
							[
								175856,
								175888
							],
							[
								176135,
								176154
							],
							[
								176772,
								176794
							],
							[
								177093,
								177153
							],
							[
								177863,
								177888
							],
							[
								177917,
								177933
							],
							[
								177942,
								177953
							],
							[
								178045,
								178051
							],
							[
								178060,
								178071
							],
							[
								178131,
								178155
							],
							[
								178173,
								178182
							],
							[
								178206,
								178215
							],
							[
								178243,
								178254
							],
							[
								178281,
								178292
							],
							[
								178325,
								178338
							],
							[
								178357,
								178370
							],
							[
								178382,
								178395
							],
							[
								178546,
								178557
							],
							[
								178659,
								178684
							],
							[
								178702,
								178728
							],
							[
								178819,
								178853
							],
							[
								179125,
								179146
							],
							[
								179211,
								179229
							],
							[
								179397,
								179433
							],
							[
								179855,
								179875
							],
							[
								180078,
								180093
							],
							[
								180369,
								180392
							],
							[
								180601,
								180619
							],
							[
								180837,
								180849
							],
							[
								180879,
								180894
							],
							[
								180939,
								180945
							],
							[
								180997,
								181011
							],
							[
								181153,
								181171
							],
							[
								181367,
								181399
							],
							[
								181465,
								181481
							],
							[
								181817,
								181833
							],
							[
								182280,
								182283
							],
							[
								182296,
								182297
							],
							[
								182327,
								182363
							],
							[
								182804,
								182843
							],
							[
								182932,
								182958
							],
							[
								183006,
								183067
							],
							[
								183474,
								183502
							],
							[
								183609,
								183627
							],
							[
								183922,
								183960
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"self = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							"(key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.intersect = (a, b) =>",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = function(arr)",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							"(acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							"x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							"Util.isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							"(acc, { elements }) =>",
							"(acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods) =>",
							"Util.bindMethodsTo = function(dest, obj, methods)",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakAssign = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.getFunctionArguments = fn =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							"(a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							"gen = p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							" (fd = 0, mode = true) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							"([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>"
						]
					},
					"AQAAAAAAAAAAAAAAGmgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					799,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-commands.js",
						"symkeys":
						[
							[
								234,
								265
							],
							[
								506,
								514
							],
							[
								581,
								585
							],
							[
								675,
								682
							],
							[
								825,
								850
							],
							[
								1431,
								1454
							],
							[
								1805,
								1832
							],
							[
								1910,
								1920
							],
							[
								2247,
								2287
							],
							[
								2454,
								2462
							]
						],
						"symlist":
						[
							" function updateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							" function alignItem(item)",
							" function alignAll(doc)",
							" function scientific(value)",
							"toString()",
							" function num2color(num, square = false)",
							"a = n =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					800,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-commands.js",
						"symkeys":
						[
							[
								234,
								265
							],
							[
								506,
								514
							],
							[
								581,
								585
							],
							[
								675,
								682
							],
							[
								825,
								850
							],
							[
								1431,
								1454
							],
							[
								1805,
								1832
							],
							[
								1910,
								1920
							],
							[
								2098,
								2103
							],
							[
								2149,
								2162
							],
							[
								2317,
								2357
							],
							[
								2524,
								2532
							]
						],
						"symlist":
						[
							" function updateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							" function alignItem(item)",
							" function alignAll(doc)",
							" function scientific(value)",
							"toString()",
							"() =>",
							" (...args) =>",
							" function num2color(num, square = false)",
							"a = n =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACiAAAAICB1cGRhdGVNZWFzdXJlcyhib2FyZCkKICBsaW5lcyA9PgogIGUgPT4KICBsaW5lID0+CiAgYWxpZ25JdGVtKGl0ZW0pCiAgYWxpZ25BbGwoZG9jKQogIHNjaWVudGlmaWModmFsdWUpCiAgdG9TdHJpbmcoKQogIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKQogIGEgPSBuID0+AAAAAAAAAAC3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtwAAACAgdXBkYXRlTWVhc3VyZXMoYm9hcmQpCiAgbGluZXMgPT4KICBlID0+CiAgbGluZSA9PgogIGFsaWduSXRlbShpdGVtKQogIGFsaWduQWxsKGRvYykKICBzY2llbnRpZmljKHZhbHVlKQogIHRvU3RyaW5nKCkKKCkgPT4KICAoLi4uYXJncykgPT4KICBudW0yY29sb3IobnVtLCBzcXVhcmUgPSBmYWxzZSkKICBhID0gbiA9PgAAAAAAAAAAtwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					801,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								463,
								494
							],
							[
								620,
								639
							],
							[
								708,
								736
							],
							[
								1408,
								1425
							],
							[
								1837,
								1855
							],
							[
								1870,
								1874
							],
							[
								2606,
								2615
							],
							[
								2681,
								2700
							],
							[
								2809,
								2818
							],
							[
								2843,
								2865
							],
							[
								3026,
								3030
							],
							[
								3375,
								3391
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"b =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC3AAAAICB1cGRhdGVNZWFzdXJlcyhib2FyZCkKICBsaW5lcyA9PgogIGUgPT4KICBsaW5lID0+CiAgYWxpZ25JdGVtKGl0ZW0pCiAgYWxpZ25BbGwoZG9jKQogIHNjaWVudGlmaWModmFsdWUpCiAgdG9TdHJpbmcoKQooKSA9PgogICguLi5hcmdzKSA9PgogIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKQogIGEgPSBuID0+AAAAAAAAAAC/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					802,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAAB4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					803,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					804,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					805,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AwAAAAAAAAAAAAAAHgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4BAABHZXRFeHBvbmVudCh2YWx1ZSkKR2V0TWFudGlzc2EodmFsdWUpClZhbHVlVG9OdW1iZXIodmFsdWUpCk51bWJlclRvVmFsdWUoIHZhbHVlLCBzdWZmaXhlcyA9IFsgWzFlLTMsICdtJ10sIFsxZS02LCAndSddLCBbMWUtOSwgJ24nXSwgWzFlLTEyLCAncCddLCBbMWUzLCAnayddLCBbMWU2LCAnTSddLCBbMWU5LCAnRyddIF0gKQpHZXRNdWx0aXBsaWVycygpCkdldE11bHRpcGxpZXIoZXhwb25lbnQsIGJhc2U9MTApCkdldEZhY3RvcihudW0pCkdldENvbG9yQmFuZHModmFsdWUsIHByZWNpc2lvbiA9IDIpAAAAAAAAAAAeAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					806,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								463,
								494
							],
							[
								620,
								639
							],
							[
								708,
								736
							],
							[
								1408,
								1425
							],
							[
								1837,
								1855
							],
							[
								1870,
								1874
							],
							[
								2606,
								2615
							],
							[
								2681,
								2700
							],
							[
								2809,
								2818
							],
							[
								2843,
								2865
							],
							[
								3026,
								3030
							],
							[
								3375,
								3391
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"b =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAvwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					807,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								463,
								494
							],
							[
								620,
								639
							],
							[
								708,
								736
							],
							[
								1408,
								1425
							],
							[
								1837,
								1855
							],
							[
								1870,
								1874
							],
							[
								2606,
								2615
							],
							[
								2681,
								2700
							],
							[
								2809,
								2818
							],
							[
								2843,
								2865
							],
							[
								3033,
								3037
							],
							[
								3382,
								3398
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"b =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAAL8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					808,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								463,
								494
							],
							[
								620,
								639
							],
							[
								708,
								736
							],
							[
								1408,
								1425
							],
							[
								1837,
								1855
							],
							[
								1870,
								1874
							],
							[
								2606,
								2615
							],
							[
								2681,
								2700
							],
							[
								2809,
								2818
							],
							[
								2843,
								2865
							],
							[
								3386,
								3402
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KICBiID0+Cihba2V5LCBsaXN0XSkgPT4AAAAAAAAAALgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					809,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								463,
								494
							],
							[
								620,
								639
							],
							[
								708,
								736
							],
							[
								1408,
								1425
							],
							[
								1837,
								1855
							],
							[
								1870,
								1874
							],
							[
								2606,
								2615
							],
							[
								2681,
								2700
							],
							[
								2809,
								2818
							],
							[
								2843,
								2865
							],
							[
								3388,
								3404
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"([key, list]) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAC4AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KKFtrZXksIGxpc3RdKSA9PgAAAAAAAAAAuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALgAAAAgIHhtbGl6ZShvYmosIGRlcHRoID0gMikKU3Vic3RDaGFycyA9IHN0ciA9PgogIG1haW4oLi4uYXJncykKKFtuYW1lLCBlbGVtXSkgPT4KKFtuYW1lLCB2YWx1ZV0pID0+CiAgbSA9PgooYSwgYikgPT4KKFt2YWx1ZSwgY291bnRdKSA9PgooYSwgYikgPT4KKFt2YWwsIHJhdCwgY291bnRdKSA9PgooW2tleSwgbGlzdF0pID0+AAAAAAAAAAC4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					810,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KKFtrZXksIGxpc3RdKSA9PgAAAAAAAAAAHgEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					811,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-commands.js",
						"symkeys":
						[
							[
								234,
								265
							],
							[
								506,
								514
							],
							[
								581,
								585
							],
							[
								675,
								682
							],
							[
								825,
								850
							],
							[
								1431,
								1454
							],
							[
								1805,
								1832
							],
							[
								1910,
								1920
							],
							[
								2097,
								2102
							],
							[
								2149,
								2162
							],
							[
								2316,
								2356
							],
							[
								2523,
								2531
							]
						],
						"symlist":
						[
							" function updateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							" function alignItem(item)",
							" function alignAll(doc)",
							" function scientific(value)",
							"toString()",
							"() =>",
							" (...args) =>",
							" function num2color(num, square = false)",
							"a = n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAtwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					812,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC3AAAAICB1cGRhdGVNZWFzdXJlcyhib2FyZCkKICBsaW5lcyA9PgogIGUgPT4KICBsaW5lID0+CiAgYWxpZ25JdGVtKGl0ZW0pCiAgYWxpZ25BbGwoZG9jKQogIHNjaWVudGlmaWModmFsdWUpCiAgdG9TdHJpbmcoKQooKSA9PgogICguLi5hcmdzKSA9PgogIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKQogIGEgPSBuID0+AAAAAAAAAAAeAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					813,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-commands.js",
						"symkeys":
						[
							[
								234,
								265
							],
							[
								506,
								514
							],
							[
								581,
								585
							],
							[
								675,
								682
							],
							[
								825,
								850
							],
							[
								1431,
								1454
							],
							[
								1805,
								1832
							],
							[
								1910,
								1920
							],
							[
								2097,
								2102
							],
							[
								2149,
								2162
							],
							[
								2316,
								2356
							],
							[
								2523,
								2531
							]
						],
						"symlist":
						[
							" function updateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							" function alignItem(item)",
							" function alignAll(doc)",
							" function scientific(value)",
							"toString()",
							"() =>",
							" (...args) =>",
							" function num2color(num, square = false)",
							"a = n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAtwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					824,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-commands.js",
						"symkeys":
						[
							[
								234,
								265
							],
							[
								506,
								514
							],
							[
								581,
								585
							],
							[
								675,
								682
							],
							[
								825,
								850
							],
							[
								1431,
								1454
							],
							[
								1805,
								1832
							],
							[
								1910,
								1920
							],
							[
								2097,
								2102
							],
							[
								2149,
								2162
							],
							[
								2316,
								2356
							],
							[
								2523,
								2531
							]
						],
						"symlist":
						[
							" function updateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							" function alignItem(item)",
							" function alignAll(doc)",
							" function scientific(value)",
							"toString()",
							"() =>",
							" (...args) =>",
							" function num2color(num, square = false)",
							"a = n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC3AAAAICB1cGRhdGVNZWFzdXJlcyhib2FyZCkKICBsaW5lcyA9PgogIGUgPT4KICBsaW5lID0+CiAgYWxpZ25JdGVtKGl0ZW0pCiAgYWxpZ25BbGwoZG9jKQogIHNjaWVudGlmaWModmFsdWUpCiAgdG9TdHJpbmcoKQooKSA9PgogICguLi5hcmdzKSA9PgogIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKQogIGEgPSBuID0+AAAAAAAAAAC3AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					825,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC3AAAAICB1cGRhdGVNZWFzdXJlcyhib2FyZCkKICBsaW5lcyA9PgogIGUgPT4KICBsaW5lID0+CiAgYWxpZ25JdGVtKGl0ZW0pCiAgYWxpZ25BbGwoZG9jKQogIHNjaWVudGlmaWModmFsdWUpCiAgdG9TdHJpbmcoKQooKSA9PgogICguLi5hcmdzKSA9PgogIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKQogIGEgPSBuID0+AAAAAAAAAAAeAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					828,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAHgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwEAAAAAAAAHAQAAAAAAAAAAAAAAAPC/"
				],
				[
					829,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
						"symkeys":
						[
							[
								49,
								77
							],
							[
								596,
								624
							],
							[
								856,
								886
							],
							[
								1037,
								1207
							],
							[
								1385,
								1411
							],
							[
								1608,
								1650
							],
							[
								1698,
								1722
							],
							[
								1910,
								1955
							]
						],
						"symlist":
						[
							" function GetExponent(value)",
							" function GetMantissa(value)",
							" function ValueToNumber(value)",
							" function NumberToValue( value, suffixes = [ [1e-3, 'm'], [1e-6, 'u'], [1e-9, 'n'], [1e-12, 'p'], [1e3, 'k'], [1e6, 'M'], [1e9, 'G'] ] )",
							" function GetMultipliers()",
							" function GetMultiplier(exponent, base=10)",
							" function GetFactor(num)",
							" function GetColorBands(value, precision = 2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAHgEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					830,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								463,
								494
							],
							[
								620,
								639
							],
							[
								708,
								736
							],
							[
								1408,
								1425
							],
							[
								1837,
								1855
							],
							[
								1870,
								1874
							],
							[
								2606,
								2615
							],
							[
								2681,
								2700
							],
							[
								2809,
								2818
							],
							[
								2843,
								2865
							],
							[
								3388,
								3404
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAQAAR2V0RXhwb25lbnQodmFsdWUpCkdldE1hbnRpc3NhKHZhbHVlKQpWYWx1ZVRvTnVtYmVyKHZhbHVlKQpOdW1iZXJUb1ZhbHVlKCB2YWx1ZSwgc3VmZml4ZXMgPSBbIFsxZS0zLCAnbSddLCBbMWUtNiwgJ3UnXSwgWzFlLTksICduJ10sIFsxZS0xMiwgJ3AnXSwgWzFlMywgJ2snXSwgWzFlNiwgJ00nXSwgWzFlOSwgJ0cnXSBdICkKR2V0TXVsdGlwbGllcnMoKQpHZXRNdWx0aXBsaWVyKGV4cG9uZW50LCBiYXNlPTEwKQpHZXRGYWN0b3IobnVtKQpHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKQAAAAAAAAAAuAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					831,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								463,
								494
							],
							[
								620,
								639
							],
							[
								708,
								736
							],
							[
								1408,
								1425
							],
							[
								1837,
								1855
							],
							[
								1870,
								1874
							],
							[
								2606,
								2615
							],
							[
								2681,
								2700
							],
							[
								2809,
								2818
							],
							[
								2843,
								2865
							],
							[
								3392,
								3408
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KKFtrZXksIGxpc3RdKSA9PgAAAAAAAAAAuAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					832,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-query.js",
						"symkeys":
						[
							[
								463,
								494
							],
							[
								620,
								639
							],
							[
								708,
								736
							],
							[
								1408,
								1425
							],
							[
								1837,
								1855
							],
							[
								1870,
								1874
							],
							[
								2606,
								2615
							],
							[
								2681,
								2700
							],
							[
								2809,
								2818
							],
							[
								2843,
								2865
							],
							[
								3387,
								3403
							]
						],
						"symlist":
						[
							"function xmlize(obj, depth = 2)",
							"SubstChars = str =>",
							"async function main(...args)",
							"([name, elem]) =>",
							"([name, value]) =>",
							"m =>",
							"(a, b) =>",
							"([value, count]) =>",
							"(a, b) =>",
							"([val, rat, count]) =>",
							"([key, list]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4AAAAICB4bWxpemUob2JqLCBkZXB0aCA9IDIpClN1YnN0Q2hhcnMgPSBzdHIgPT4KICBtYWluKC4uLmFyZ3MpCihbbmFtZSwgZWxlbV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIG0gPT4KKGEsIGIpID0+CihbdmFsdWUsIGNvdW50XSkgPT4KKGEsIGIpID0+CihbdmFsLCByYXQsIGNvdW50XSkgPT4KKFtrZXksIGxpc3RdKSA9PgAAAAAAAAAAuAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "import { unique } from './lib/misc.js';\nimport { EagleDocument } from './lib/eagle.js';\nimport { toXML } from './lib/json.js';\nimport fs from 'fs';\nimport Util from './lib/util.js';\nimport { Console } from 'console';\nimport { digit2color, GetColorBands, ValueToNumber, NumberToValue, PartScales } from './lib/eda/colorCoding.js';\nimport { UnitForName } from './lib/eda/units.js';\nimport { num2color, scientific } from './eagle-commands.js';\n\nlet documents = [];\n\nfunction xmlize(obj, depth = 2) {\n  return obj.toXML ? obj.toXML().replace(/>\\s*</g, '>\\n    <') : EagleDocument.toXML(obj, depth).split(/\\n/g)[0];\n}\n\nconst SubstChars = str => str.replace(/\\xCE\\xBC/g, '\\u00B5').replace(/\\xCE\\xA9/g, '\\u2126');\n\nasync function main(...args) {\n  globalThis.console = new Console({ inspectOptions: { breakLength: 100, colors: true, depth: Infinity, compact: 2, customInspect: true } });\n  if(args.length == 0) args.unshift('../an-tronics/eagle/Headphone-Amplifier-ClassAB-alt2.brd');\n  args = unique(args);\n  for(let arg of args) {\n    let data = fs.readFileSync(arg);\n    console.log(`loaded '${arg}' length: ${data.length}`);\n    let doc = new EagleDocument(data, null, arg);\n    documents.push(doc);\n  }\n  let components = {\n    C: [],\n    L: [],\n    R: []\n  };\n  for(let doc of documents) {\n    let main = doc.mainElement;\n    console.log('main:', main);\n    let parts = [...(main.elements || main.parts)].map(([name, elem]) => [name, typeof elem.value == 'string' ? SubstChars(elem.value) : elem.value]);\n    console.log('parts', console.config({ compact: false }), Object.fromEntries(parts));\n    let matchers = [\n      [/^R/, /^[0-9.]+([kKmM][Ω\\u03A9]?|[Ω\\u03A9]?)(|\\/[0-9.]+W)/],\n      [/^C/, /^[0-9.]+([pnuμ\\u03bcm]F?|F?)(|\\/[0-9.]+V)/],\n      [/^L/, /^[0-9.]+([nuμ\\u03bcm]H?|H?)/]\n    ];\n\n    let nameValueMap = new Map(parts.filter(([name, value]) => matchers.some(m => m[0].test(name) && m[1].test(value))));\n    //console.log('nameValueMap', new Map([...nameValueMap].map(([n, v]) => [n, v])));\n    for(let [name, value] of nameValueMap) {\n      value = (value ? '' + value : '').replace(/[\\u0000-\\u001F\\u007F-\\uFFFF]/g, '');\n      components[name[0]].push(value.replace(/[ΩFH]$/, '').replace(/^\\./, '0.'));\n    }\n  }\n  let histograms = {};\n  let values = {};\n  //\n  /* for(let value of [2.2, 4.7e3]) {\n    console.log(`GetColorBands(${value}, 3)`, GetColorBands(value, 2));\n  }*/\n  for(let key in components) {\n    components[key].sort();\n    console.log(`component ${key}`, components[key]);\n    let hist = Util.histogram(components[key], new Map());\n\n    histograms[key] = new Map([...hist].sort((a, b) => b[1] - a[1]));\n    values[key] = [...histograms[key]]\n      .map(([value, count]) => {\n        return [value || scientific(value).toString(), ValueToNumber(value), count];\n      })\n      .sort((a, b) => a[1] - b[1])\n      .map(([val, rat, count]) => {\n     console.log('c', { val, rat, count });\n        const scal = PartScales[key[0]];\n\n        let bands = key[0] == 'C' ? [' '] /*?? GetColorBands(rat * scal, 2).map(b => `[${b}]`)*/ : [num2color(rat * scal)];\n      //  console.log('c', { bands });\n\n        return [key, (val + '').substring(0, 10).padStart(10, ' ') + UnitForName(key), bands.join(' '), `  × ${count}`].join(' ');\n      });\n  }\n  // console.log('components:', components);\n\n\n  console.log(\n    'values:\\n   ' +\n      Object.entries(values)\n        .map(([key, list]) => `${key}:\\n\\t${list.join('\\n\\n\\t')}`)\n        .join('\\n   ')\n  );\n  console.log(`\\r\\nFinished querying`, ...args);\n\n  return;\n  /* console.log('digit2color:', digit2color);\n  for(let value of [33000, 1800, 470, 1e6, 4.7e3]) {\n    console.log('GetColorBands', GetColorBands(value, 3));\n    console.log('GetColorBands', GetColorBands(value, 2));\n    console.log('NumberToValue', NumberToValue(value));\n  }\n  for(let value of ['33k', '1.8k', '470', '1.8k', '47k', '10M', '4.7k']) {\n    console.log(`ValueToNumber(${value})`, ValueToNumber(value));\n  }*/\n}\n\nUtil.callMain(main, true);\n",
			"file": "eagle-query.js",
			"file_size": 3990,
			"file_write_time": 132839162234878886,
			"settings":
			{
				"buffer_size": 3985,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					466,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAAEQAAaW1wb3J0IHsgRWFnbGVEb2N1bWVudCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHsgTGluZUxpc3QsIFJlY3QgfSBmcm9tICcuL2xpYi9nZW9tLmpzJzsKaW1wb3J0IHsgdG9YTUwgfSBmcm9tICcuL2xpYi9qc29uLmpzJzsKaW1wb3J0IGZzIGZyb20gJ2ZzJzsKaW1wb3J0IFV0aWwgZnJvbSAnLi9saWIvdXRpbC5qcyc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgZGlnaXQyY29sb3IsIEdldEZhY3RvciwgR2V0Q29sb3JCYW5kcywgVmFsdWVUb051bWJlciwgTnVtYmVyVG9WYWx1ZSwgR2V0RXhwb25lbnQsIEdldE1hbnRpc3NhIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyB1cGRhdGVNZWFzdXJlcywgYWxpZ25JdGVtLCBhbGlnbkFsbCB9IGZyb20gJy4vZWFnbGUtY29tbWFuZHMuanMnOwoKbGV0IGRvY3VtZW50cyA9IFtdOwoKZnVuY3Rpb24geG1saXplKG9iaiwgZGVwdGggPSAyKSB7CiAgcmV0dXJuIG9iai50b1hNTCA/IG9iai50b1hNTCgpLnJlcGxhY2UoLz5ccyo8L2csICc+XG4gICAgPCcpIDogRWFnbGVEb2N1bWVudC50b1hNTChvYmosIGRlcHRoKS5zcGxpdCgvXG4vZylbMF07Cn0KCmZ1bmN0aW9uIHNjaWVudGlmaWModmFsdWUpIHsKICBsZXQgc2NpID0gW0dldE1hbnRpc3NhKHZhbHVlKSwgR2V0RXhwb25lbnQodmFsdWUpXTsKCiAgVXRpbC5kZWZpbmUoc2NpLCB7CiAgICB0b1N0cmluZygpIHsKICAgICAgbGV0IHNpZ24gPSBNYXRoLnNpZ24odGhpc1sxXSkgPCAwID8gJy0nIDogJysnOwogICAgICByZXR1cm4gYCR7dGhpc1swXX1lJHtzaWdufSR7KE1hdGguYWJzKHRoaXNbMV0pICsgJycpLnBhZFN0YXJ0KDIsICcwJyl9YDsKICAgIH0KICB9KTsKICByZXR1cm4gc2NpOwp9CmNvbnN0IGNvbG9yID0gVXRpbC5jb2xvcmluZyh0cnVlKTsKCmNvbnN0IHZlcnRpY2FsUmVjdGFuZ2xlcyA9IFsn4pauICcsICfilq8gJ107CmNvbnN0IGxhcmdlU3F1YXJlcyA9IFsn4pagJywgJ+KWoSddOwoKZnVuY3Rpb24gbnVtMmNvbG9yKG51bSwgc3F1YXJlID0gZmFsc2UpIHsKICBsZXQgc3ltID0gc3F1YXJlID8gbGFyZ2VTcXVhcmVzIDogdmVydGljYWxSZWN0YW5nbGVzOwogIGxldCBjID0gdHlwZW9mIG51bSA9PSAnbnVtYmVyJyA/IEdldENvbG9yQmFuZHMobnVtKSA6IG51bTsKCiAgcmV0dXJuIGMubWFwKG4gPT4gY29sb3IudGV4dChuID8gc3ltWzBdIDogY29sb3IudGV4dChzeW1bMV0sIDM4LCA1LCAyMzYpLCBuID8gMzggOiA0OCwgLi4uZGlnaXQyY29sb3IuYW5zaVtuXS5zbGljZSgxKSkpLmpvaW4oJycpOwp9CmNvbnN0IFN1YnN0Q2hhcnMgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1x4Q0VceEJDL2csICdcdTAwQjUnKS5yZXBsYWNlKC9ceENFXHhBOS9nLCAnXHUyMTI2Jyk7Cgphc3luYyBmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7IGluc3BlY3RPcHRpb25zOiB7IGJyZWFrTGVuZ3RoOiAxMDAsIGNvbG9yczogdHJ1ZSwgZGVwdGg6IEluZmluaXR5LCBjb21wYWN0OiAyLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0gfSk7CiAgaWYoYXJncy5sZW5ndGggPT0gMCkgYXJncy51bnNoaWZ0KCcuLi9hbi10cm9uaWNzL2VhZ2xlL0hlYWRwaG9uZS1BbXBsaWZpZXItQ2xhc3NBQi1hbHQyLmJyZCcpOwogIGFyZ3MgPSBVdGlsLnVuaXF1ZShhcmdzKTsKICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICBsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhhcmcpOwogICAgY29uc29sZS5sb2coYGxvYWRlZCAnJHthcmd9JyBsZW5ndGg6ICR7ZGF0YS5sZW5ndGh9YCk7CiAgICBsZXQgZG9jID0gbmV3IEVhZ2xlRG9jdW1lbnQoZGF0YSwgbnVsbCwgYXJnKTsKICAgIGRvY3VtZW50cy5wdXNoKGRvYyk7CiAgfQogIGxldCBjb21wb25lbnRzID0gewogICAgQzogW10sCiAgICBMOiBbXSwKICAgIFI6IFtdCiAgfTsKICBmb3IobGV0IGRvYyBvZiBkb2N1bWVudHMpIHsKICAgIGxldCBtYWluID0gZG9jLm1haW5FbGVtZW50OwogICAgY29uc29sZS5sb2coJ21haW46JywgbWFpbik7CiAgICBsZXQgcGFydHMgPSBbLi4uKG1haW4uZWxlbWVudHMgfHwgbWFpbi5wYXJ0cyldLm1hcCgoW25hbWUsIGVsZW1dKSA9PiBbbmFtZSwgdHlwZW9mIGVsZW0udmFsdWUgPT0gJ3N0cmluZycgPyBTdWJzdENoYXJzKGVsZW0udmFsdWUpIDogZWxlbS52YWx1ZV0pOwogICAgY29uc29sZS5sb2coJ3BhcnRzJywgcGFydHMpOwogICAgbGV0IG1hdGNoZXJzID0gWwogICAgICBbL15SLywgL15bMC05Ll0rKFtrS21NXVvOqVx1MDNBOV0/fFvOqVx1MDNBOV0/KSh8XC9bMC05Ll0rVykvXSwKICAgICAgWy9eQy8sIC9eWzAtOS5dKyhbcG51zrxtXUY/fEY/KSh8XC9bMC05Ll0rVikvXSwKICAgICAgWy9eTC8sIC9eWzAtOS5dKyhbbnXOvG1dSD98SD8pL10KICAgIF07CgogICAgbGV0IG5hbWVWYWx1ZU1hcCA9IG5ldyBNYXAocGFydHMuZmlsdGVyKChbbmFtZSwgdmFsdWVdKSA9PiBtYXRjaGVycy5zb21lKG0gPT4gbVswXS50ZXN0KG5hbWUpICYmIG1bMV0udGVzdCh2YWx1ZSkpKSk7CiAgICBjb25zb2xlLmxvZygKICAgICAgJ25hbWVWYWx1ZU1hcCcsCiAgICAgIG5ldyBNYXAoCiAgICAgICAgWy4uLm5hbWVWYWx1ZU1hcF0ubWFwKChbbiwgdl0pID0+IFsKICAgICAgICAgIG4sCiAgICAgICAgICB2CiAgICAgICAgXSkKICAgICAgKQogICAgKTsKICAgIGZvcihsZXQgW25hbWUsIHZhbHVlXSBvZiBuYW1lVmFsdWVNYXApIHsKICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXHUwMDAwLVx1MDAxRlx1MDA3Ri1cdUZGRkZdL2csICcnKTsKICAgICAgY29tcG9uZW50c1tuYW1lWzBdXS5wdXNoKHZhbHVlLnJlcGxhY2UoL1vOqUZIXSQvLCAnJykucmVwbGFjZSgvXlwuLywgJzAuJykpOwogICAgfQogIH0KICBsZXQgaGlzdG9ncmFtcyA9IHt9OwogIGxldCB2YWx1ZXMgPSB7fTsKICBjb25zb2xlLmxvZygnY29tcG9uZW50cycsIGNvbXBvbmVudHMpOwogIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfQogIGZvcihsZXQga2V5IGluIGNvbXBvbmVudHMpIHsKICAgIGNvbXBvbmVudHNba2V5XS5zb3J0KCk7CiAgICBsZXQgaGlzdCA9IFV0aWwuaGlzdG9ncmFtKGNvbXBvbmVudHNba2V5XSwgIG5ldyBNYXAoKSk7CgogICAgaGlzdG9ncmFtc1trZXldID0gbmV3IE1hcChbLi4uaGlzdF0uc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pKTsKICAgIHZhbHVlc1trZXldID0gWy4uLmhpc3RvZ3JhbXNba2V5XV0KICAgICAgLm1hcCgoW3ZhbHVlLCBjb3VudF0pID0+IHsKCgogICAgICAgIHJldHVybiBbdmFsdWUgfHwgc2NpZW50aWZpYyh2YWx1ZSkudG9TdHJpbmcoKSwgVmFsdWVUb051bWJlcih2YWx1ZSksIGNvdW50XTsKICAgICAgfSkKICAgICAgLnNvcnQoKGEsIGIpID0+IGFbMV0gLSBiWzFdKQogICAgICAubWFwKChbdmFsLCByYXQsIGNvdW50XSkgPT4gWyh2YWwgKyAnJykucGFkU3RhcnQoNCwgJyAnKSArIFVuaXRGb3JOYW1lKGtleSksICByYXQgPj0gMSA/IG51bTJjb2xvcihyYXQpIDogJycsIGAgIMOXICR7Y291bnR9YF0uam9pbignICcpKTsKICB9CiAgY29uc29sZS5sb2coJ2NvbXBvbmVudHM6JywgY29tcG9uZW50cyk7CgoKICBjb25zb2xlLmxvZygKICAgICd2YWx1ZXM6XG4gICAnICsKICAgICAgT2JqZWN0LmVudHJpZXModmFsdWVzKQogICAgICAgIC5tYXAoKFtrZXksIGxpc3RdKSA9PiBgJHtrZXl9OlxuXHQke2xpc3Quam9pbignXG5cdCcpfWApCiAgICAgICAgLmpvaW4oJ1xuICAgJykKICApOwoKICByZXR1cm47CiAgY29uc29sZS5sb2coJ2RpZ2l0MmNvbG9yOicsIGRpZ2l0MmNvbG9yKTsKICBmb3IobGV0IHZhbHVlIG9mIFszMzAwMCwgMTgwMCwgNDcwLCAxZTYsIDQuN2UzXSkgewogICAgY29uc29sZS5sb2coJ0dldENvbG9yQmFuZHMnLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAzKSk7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDIpKTsKICAgIGNvbnNvbGUubG9nKCdOdW1iZXJUb1ZhbHVlJywgTnVtYmVyVG9WYWx1ZSh2YWx1ZSkpOwogIH0KICBmb3IobGV0IHZhbHVlIG9mIFsnMzNrJywgJzEuOGsnLCAnNDcwJywgJzEuOGsnLCAnNDdrJywgJzEwTScsICc0LjdrJ10pIHsKICAgIGNvbnNvbGUubG9nKGBWYWx1ZVRvTnVtYmVyKCR7dmFsdWV9KWAsIFZhbHVlVG9OdW1iZXIodmFsdWUpKTsKICB9Cn0KClV0aWwuY2FsbE1haW4obWFpbiwgdHJ1ZSk7CgoAAAAAAAAAAKwQAAAAAAAAAAAAAAAAAAAAAAAArBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHAAAAAAAAAJwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC6EAAAaW1wb3J0IHsgRWFnbGVEb2N1bWVudCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHsgTGluZUxpc3QsIFJlY3QgfSBmcm9tICcuL2xpYi9nZW9tLmpzJzsKaW1wb3J0IHsgdG9YTUwgfSBmcm9tICcuL2xpYi9qc29uLmpzJzsKaW1wb3J0IGZzIGZyb20gJ2ZzJzsKaW1wb3J0IFV0aWwgZnJvbSAnLi9saWIvdXRpbC5qcyc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgZGlnaXQyY29sb3IsIEdldEZhY3RvciwgR2V0Q29sb3JCYW5kcywgVmFsdWVUb051bWJlciwgTnVtYmVyVG9WYWx1ZSwgR2V0RXhwb25lbnQsIEdldE1hbnRpc3NhIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyB1cGRhdGVNZWFzdXJlcywgYWxpZ25JdGVtLCBhbGlnbkFsbCB9IGZyb20gJy4vZWFnbGUtY29tbWFuZHMuanMnOwoKbGV0IGRvY3VtZW50cyA9IFtdOwoKZnVuY3Rpb24geG1saXplKG9iaiwgZGVwdGggPSAyKSB7CiAgcmV0dXJuIG9iai50b1hNTCA/IG9iai50b1hNTCgpLnJlcGxhY2UoLz5ccyo8L2csICc+XG4gICAgPCcpIDogRWFnbGVEb2N1bWVudC50b1hNTChvYmosIGRlcHRoKS5zcGxpdCgvXG4vZylbMF07Cn0KCmZ1bmN0aW9uIHNjaWVudGlmaWModmFsdWUpIHsKICBsZXQgc2NpID0gW0dldE1hbnRpc3NhKHZhbHVlKSwgR2V0RXhwb25lbnQodmFsdWUpXTsKCiAgVXRpbC5kZWZpbmUoc2NpLCB7CiAgICB0b1N0cmluZygpIHsKICAgICAgbGV0IHNpZ24gPSBNYXRoLnNpZ24odGhpc1sxXSkgPCAwID8gJy0nIDogJysnOwogICAgICByZXR1cm4gYCR7dGhpc1swXX1lJHtzaWdufSR7KE1hdGguYWJzKHRoaXNbMV0pICsgJycpLnBhZFN0YXJ0KDIsICcwJyl9YDsKICAgIH0KICB9KTsKICByZXR1cm4gc2NpOwp9CmNvbnN0IGNvbG9yID0gVXRpbC5jb2xvcmluZyh0cnVlKTsKCmNvbnN0IHZlcnRpY2FsUmVjdGFuZ2xlcyA9IFsn4pauICcsICfilq8gJ107CmNvbnN0IGxhcmdlU3F1YXJlcyA9IFsn4pagJywgJ+KWoSddOwoKZnVuY3Rpb24gbnVtMmNvbG9yKG51bSwgc3F1YXJlID0gZmFsc2UpIHsKICBsZXQgc3ltID0gc3F1YXJlID8gbGFyZ2VTcXVhcmVzIDogdmVydGljYWxSZWN0YW5nbGVzOwogIGxldCBjID0gdHlwZW9mIG51bSA9PSAnbnVtYmVyJyA/IEdldENvbG9yQmFuZHMobnVtKSA6IG51bTsKCiAgcmV0dXJuIGMubWFwKG4gPT4gY29sb3IudGV4dChuID8gc3ltWzBdIDogY29sb3IudGV4dChzeW1bMV0sIDM4LCA1LCAyMzYpLCBuID8gMzggOiA0OCwgLi4uZGlnaXQyY29sb3IuYW5zaVtuXS5zbGljZSgxKSkpLmpvaW4oJycpOwp9CmNvbnN0IFN1YnN0Q2hhcnMgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1x4Q0VceEJDL2csICdcdTAwQjUnKS5yZXBsYWNlKC9ceENFXHhBOS9nLCAnXHUyMTI2Jyk7Cgphc3luYyBmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7IGluc3BlY3RPcHRpb25zOiB7IGJyZWFrTGVuZ3RoOiAxMDAsIGNvbG9yczogdHJ1ZSwgZGVwdGg6IEluZmluaXR5LCBjb21wYWN0OiAyLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0gfSk7CiAgaWYoYXJncy5sZW5ndGggPT0gMCkgYXJncy51bnNoaWZ0KCcuLi9hbi10cm9uaWNzL2VhZ2xlL0hlYWRwaG9uZS1BbXBsaWZpZXItQ2xhc3NBQi1hbHQyLmJyZCcpOwogIGFyZ3MgPSBVdGlsLnVuaXF1ZShhcmdzKTsKICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICBsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhhcmcpOwogICAgY29uc29sZS5sb2coYGxvYWRlZCAnJHthcmd9JyBsZW5ndGg6ICR7ZGF0YS5sZW5ndGh9YCk7CiAgICBsZXQgZG9jID0gbmV3IEVhZ2xlRG9jdW1lbnQoZGF0YSwgbnVsbCwgYXJnKTsKICAgIGRvY3VtZW50cy5wdXNoKGRvYyk7CiAgfQogIGxldCBjb21wb25lbnRzID0gewogICAgQzogW10sCiAgICBMOiBbXSwKICAgIFI6IFtdCiAgfTsKICBmb3IobGV0IGRvYyBvZiBkb2N1bWVudHMpIHsKICAgIGxldCBtYWluID0gZG9jLm1haW5FbGVtZW50OwogICAgY29uc29sZS5sb2coJ21haW46JywgbWFpbik7CiAgICBsZXQgcGFydHMgPSBbLi4uKG1haW4uZWxlbWVudHMgfHwgbWFpbi5wYXJ0cyldLm1hcCgoW25hbWUsIGVsZW1dKSA9PiBbbmFtZSwgdHlwZW9mIGVsZW0udmFsdWUgPT0gJ3N0cmluZycgPyBTdWJzdENoYXJzKGVsZW0udmFsdWUpIDogZWxlbS52YWx1ZV0pOwogICAgY29uc29sZS5sb2coJ3BhcnRzJywgcGFydHMpOwogICAgbGV0IG1hdGNoZXJzID0gWwogICAgICBbL15SLywgL15bMC05Ll0rKFtrS21NXVvOqVx1MDNBOV0/fFvOqVx1MDNBOV0/KSh8XC9bMC05Ll0rVykvXSwKICAgICAgWy9eQy8sIC9eWzAtOS5dKyhbcG51zrxtXUY/fEY/KSh8XC9bMC05Ll0rVikvXSwKICAgICAgWy9eTC8sIC9eWzAtOS5dKyhbbnXOvG1dSD98SD8pL10KICAgIF07CgogICAgbGV0IG5hbWVWYWx1ZU1hcCA9IG5ldyBNYXAocGFydHMuZmlsdGVyKChbbmFtZSwgdmFsdWVdKSA9PiBtYXRjaGVycy5zb21lKG0gPT4gbVswXS50ZXN0KG5hbWUpICYmIG1bMV0udGVzdCh2YWx1ZSkpKSk7CiAgICBjb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1tcdTAwMDAtXHUwMDFGXHUwMDdGLVx1RkZGRl0vZywgJycpOwogICAgICBjb21wb25lbnRzW25hbWVbMF1dLnB1c2godmFsdWUucmVwbGFjZSgvW86pRkhdJC8sICcnKS5yZXBsYWNlKC9eXC4vLCAnMC4nKSk7CiAgICB9CiAgfQogIGxldCBoaXN0b2dyYW1zID0ge307CiAgbGV0IHZhbHVlcyA9IHt9OwogIGNvbnNvbGUubG9nKCdjb21wb25lbnRzJywgY29tcG9uZW50cyk7CiAgZm9yKGxldCB2YWx1ZSBvZiBbMi4yLCA0LjdlM10pIHsKICAgIGNvbnNvbGUubG9nKGBHZXRDb2xvckJhbmRzKCR7dmFsdWV9LCAzKWAsIEdldENvbG9yQmFuZHModmFsdWUsIDIpKTsKICB9CiAgZm9yKGxldCBrZXkgaW4gY29tcG9uZW50cykgewogICAgY29tcG9uZW50c1trZXldLnNvcnQoKTsKICAgIGxldCBoaXN0ID0gVXRpbC5oaXN0b2dyYW0oY29tcG9uZW50c1trZXldLCBuZXcgTWFwKCkpOwoKICAgIGhpc3RvZ3JhbXNba2V5XSA9IG5ldyBNYXAoWy4uLmhpc3RdLnNvcnQoKGEsIGIpID0+IGJbMV0gLSBhWzFdKSk7CiAgICB2YWx1ZXNba2V5XSA9IFsuLi5oaXN0b2dyYW1zW2tleV1dCiAgICAgIC5tYXAoKFt2YWx1ZSwgY291bnRdKSA9PiB7CiAgICAgICAgcmV0dXJuIFt2YWx1ZSB8fCBzY2llbnRpZmljKHZhbHVlKS50b1N0cmluZygpLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSwgY291bnRdOwogICAgICB9KQogICAgICAuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pCiAgICAgIC5tYXAoKFt2YWwsIHJhdCwgY291bnRdKSA9PiBbKHZhbCArICcnKS5wYWRTdGFydCg0LCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwgcmF0ID49IDEgPyBudW0yY29sb3IocmF0KSA6ICcnLCBgICDDlyAke2NvdW50fWBdLmpvaW4oJyAnKSk7CiAgfQogIGNvbnNvbGUubG9nKCdjb21wb25lbnRzOicsIGNvbXBvbmVudHMpOwoKICBjb25zb2xlLmxvZygKICAgICd2YWx1ZXM6XG4gICAnICsKICAgICAgT2JqZWN0LmVudHJpZXModmFsdWVzKQogICAgICAgIC5tYXAoKFtrZXksIGxpc3RdKSA9PiBgJHtrZXl9OlxuXHQke2xpc3Quam9pbignXG5cdCcpfWApCiAgICAgICAgLmpvaW4oJ1xuICAgJykKICApOwoKICByZXR1cm47CiAgY29uc29sZS5sb2coJ2RpZ2l0MmNvbG9yOicsIGRpZ2l0MmNvbG9yKTsKICBmb3IobGV0IHZhbHVlIG9mIFszMzAwMCwgMTgwMCwgNDcwLCAxZTYsIDQuN2UzXSkgewogICAgY29uc29sZS5sb2coJ0dldENvbG9yQmFuZHMnLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAzKSk7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDIpKTsKICAgIGNvbnNvbGUubG9nKCdOdW1iZXJUb1ZhbHVlJywgTnVtYmVyVG9WYWx1ZSh2YWx1ZSkpOwogIH0KICBmb3IobGV0IHZhbHVlIG9mIFsnMzNrJywgJzEuOGsnLCAnNDcwJywgJzEuOGsnLCAnNDdrJywgJzEwTScsICc0LjdrJ10pIHsKICAgIGNvbnNvbGUubG9nKGBWYWx1ZVRvTnVtYmVyKCR7dmFsdWV9KWAsIFZhbHVlVG9OdW1iZXIodmFsdWUpKTsKICB9Cn0KClV0aWwuY2FsbE1haW4obWFpbiwgdHJ1ZSk7CgAAAAAAAAAA7RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD7EAAAaW1wb3J0IHsgZGVmaW5lLCBpc09iamVjdCwgbWVtb2l6ZSwgcmFuZ2UsIHVuaXF1ZSB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyBFYWdsZURvY3VtZW50IH0gZnJvbSAnLi9saWIvZWFnbGUuanMnOwppbXBvcnQgeyBMaW5lTGlzdCwgUmVjdCB9IGZyb20gJy4vbGliL2dlb20uanMnOwppbXBvcnQgeyB0b1hNTCB9IGZyb20gJy4vbGliL2pzb24uanMnOwppbXBvcnQgZnMgZnJvbSAnZnMnOwppbXBvcnQgVXRpbCBmcm9tICcuL2xpYi91dGlsLmpzJzsKaW1wb3J0IHsgQ29uc29sZSB9IGZyb20gJ2NvbnNvbGUnOwppbXBvcnQgeyBkaWdpdDJjb2xvciwgR2V0RmFjdG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlLCBHZXRFeHBvbmVudCwgR2V0TWFudGlzc2EgfSBmcm9tICcuL2xpYi9lZGEvY29sb3JDb2RpbmcuanMnOwppbXBvcnQgeyBVbml0Rm9yTmFtZSB9IGZyb20gJy4vbGliL2VkYS91bml0cy5qcyc7CmltcG9ydCB7IHVwZGF0ZU1lYXN1cmVzLCBhbGlnbkl0ZW0sIGFsaWduQWxsIH0gZnJvbSAnLi9lYWdsZS1jb21tYW5kcy5qcyc7CgpsZXQgZG9jdW1lbnRzID0gW107CgpmdW5jdGlvbiB4bWxpemUob2JqLCBkZXB0aCA9IDIpIHsKICByZXR1cm4gb2JqLnRvWE1MID8gb2JqLnRvWE1MKCkucmVwbGFjZSgvPlxzKjwvZywgJz5cbiAgICA8JykgOiBFYWdsZURvY3VtZW50LnRvWE1MKG9iaiwgZGVwdGgpLnNwbGl0KC9cbi9nKVswXTsKfQoKZnVuY3Rpb24gc2NpZW50aWZpYyh2YWx1ZSkgewogIGxldCBzY2kgPSBbR2V0TWFudGlzc2EodmFsdWUpLCBHZXRFeHBvbmVudCh2YWx1ZSldOwoKICBVdGlsLmRlZmluZShzY2ksIHsKICAgIHRvU3RyaW5nKCkgewogICAgICBsZXQgc2lnbiA9IE1hdGguc2lnbih0aGlzWzFdKSA8IDAgPyAnLScgOiAnKyc7CiAgICAgIHJldHVybiBgJHt0aGlzWzBdfWUke3NpZ259JHsoTWF0aC5hYnModGhpc1sxXSkgKyAnJykucGFkU3RhcnQoMiwgJzAnKX1gOwogICAgfQogIH0pOwogIHJldHVybiBzY2k7Cn0KY29uc3QgY29sb3IgPSBVdGlsLmNvbG9yaW5nKHRydWUpOwoKY29uc3QgdmVydGljYWxSZWN0YW5nbGVzID0gWyfilq4gJywgJ+KWryAnXTsKY29uc3QgbGFyZ2VTcXVhcmVzID0gWyfilqAnLCAn4pahJ107CgpmdW5jdGlvbiBudW0yY29sb3IobnVtLCBzcXVhcmUgPSBmYWxzZSkgewogIGxldCBzeW0gPSBzcXVhcmUgPyBsYXJnZVNxdWFyZXMgOiB2ZXJ0aWNhbFJlY3RhbmdsZXM7CiAgbGV0IGMgPSB0eXBlb2YgbnVtID09ICdudW1iZXInID8gR2V0Q29sb3JCYW5kcyhudW0pIDogbnVtOwoKICByZXR1cm4gYy5tYXAobiA9PiBjb2xvci50ZXh0KG4gPyBzeW1bMF0gOiBjb2xvci50ZXh0KHN5bVsxXSwgMzgsIDUsIDIzNiksIG4gPyAzOCA6IDQ4LCAuLi5kaWdpdDJjb2xvci5hbnNpW25dLnNsaWNlKDEpKSkuam9pbignJyk7Cn0KY29uc3QgU3Vic3RDaGFycyA9IHN0ciA9PiBzdHIucmVwbGFjZSgvXHhDRVx4QkMvZywgJ1x1MDBCNScpLnJlcGxhY2UoL1x4Q0VceEE5L2csICdcdTIxMjYnKTsKCmFzeW5jIGZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsgaW5zcGVjdE9wdGlvbnM6IHsgYnJlYWtMZW5ndGg6IDEwMCwgY29sb3JzOiB0cnVlLCBkZXB0aDogSW5maW5pdHksIGNvbXBhY3Q6IDIsIGN1c3RvbUluc3BlY3Q6IHRydWUgfSB9KTsKICBpZihhcmdzLmxlbmd0aCA9PSAwKSBhcmdzLnVuc2hpZnQoJy4uL2FuLXRyb25pY3MvZWFnbGUvSGVhZHBob25lLUFtcGxpZmllci1DbGFzc0FCLWFsdDIuYnJkJyk7CiAgYXJncyA9IFV0aWwudW5pcXVlKGFyZ3MpOwogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFyZyk7CiAgICBjb25zb2xlLmxvZyhgbG9hZGVkICcke2FyZ30nIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IG1haW4gPSBkb2MubWFpbkVsZW1lbnQ7CiAgICBjb25zb2xlLmxvZygnbWFpbjonLCBtYWluKTsKICAgIGxldCBwYXJ0cyA9IFsuLi4obWFpbi5lbGVtZW50cyB8fCBtYWluLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFtuYW1lLCB0eXBlb2YgZWxlbS52YWx1ZSA9PSAnc3RyaW5nJyA/IFN1YnN0Q2hhcnMoZWxlbS52YWx1ZSkgOiBlbGVtLnZhbHVlXSk7CiAgICBjb25zb2xlLmxvZygncGFydHMnLCBwYXJ0cyk7CiAgICBsZXQgbWF0Y2hlcnMgPSBbCiAgICAgIFsvXlIvLCAvXlswLTkuXSsoW2tLbU1dW86pXHUwM0E5XT98W86pXHUwM0E5XT8pKHxcL1swLTkuXStXKS9dLAogICAgICBbL15DLywgL15bMC05Ll0rKFtwbnXOvG1dRj98Rj8pKHxcL1swLTkuXStWKS9dLAogICAgICBbL15MLywgL15bMC05Ll0rKFtudc68bV1IP3xIPykvXQogICAgXTsKCiAgICBsZXQgbmFtZVZhbHVlTWFwID0gbmV3IE1hcChwYXJ0cy5maWx0ZXIoKFtuYW1lLCB2YWx1ZV0pID0+IG1hdGNoZXJzLnNvbWUobSA9PiBtWzBdLnRlc3QobmFtZSkgJiYgbVsxXS50ZXN0KHZhbHVlKSkpKTsKICAgIGNvbnNvbGUubG9nKCduYW1lVmFsdWVNYXAnLCBuZXcgTWFwKFsuLi5uYW1lVmFsdWVNYXBdLm1hcCgoW24sIHZdKSA9PiBbbiwgdl0pKSk7CiAgICBmb3IobGV0IFtuYW1lLCB2YWx1ZV0gb2YgbmFtZVZhbHVlTWFwKSB7CiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZcdTAwN0YtXHVGRkZGXS9nLCAnJyk7CiAgICAgIGNvbXBvbmVudHNbbmFtZVswXV0ucHVzaCh2YWx1ZS5yZXBsYWNlKC9bzqlGSF0kLywgJycpLnJlcGxhY2UoL15cLi8sICcwLicpKTsKICAgIH0KICB9CiAgbGV0IGhpc3RvZ3JhbXMgPSB7fTsKICBsZXQgdmFsdWVzID0ge307CiAgY29uc29sZS5sb2coJ2NvbXBvbmVudHMnLCBjb21wb25lbnRzKTsKICBmb3IobGV0IHZhbHVlIG9mIFsyLjIsIDQuN2UzXSkgewogICAgY29uc29sZS5sb2coYEdldENvbG9yQmFuZHMoJHt2YWx1ZX0sIDMpYCwgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMikpOwogIH0KICBmb3IobGV0IGtleSBpbiBjb21wb25lbnRzKSB7CiAgICBjb21wb25lbnRzW2tleV0uc29ydCgpOwogICAgbGV0IGhpc3QgPSBVdGlsLmhpc3RvZ3JhbShjb21wb25lbnRzW2tleV0sIG5ldyBNYXAoKSk7CgogICAgaGlzdG9ncmFtc1trZXldID0gbmV3IE1hcChbLi4uaGlzdF0uc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pKTsKICAgIHZhbHVlc1trZXldID0gWy4uLmhpc3RvZ3JhbXNba2V5XV0KICAgICAgLm1hcCgoW3ZhbHVlLCBjb3VudF0pID0+IHsKICAgICAgICByZXR1cm4gW3ZhbHVlIHx8IHNjaWVudGlmaWModmFsdWUpLnRvU3RyaW5nKCksIFZhbHVlVG9OdW1iZXIodmFsdWUpLCBjb3VudF07CiAgICAgIH0pCiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSkKICAgICAgLm1hcCgoW3ZhbCwgcmF0LCBjb3VudF0pID0+IFsodmFsICsgJycpLnBhZFN0YXJ0KDQsICcgJykgKyBVbml0Rm9yTmFtZShrZXkpLCByYXQgPj0gMSA/IG51bTJjb2xvcihyYXQpIDogJycsIGAgIMOXICR7Y291bnR9YF0uam9pbignICcpKTsKICB9CiAgY29uc29sZS5sb2coJ2NvbXBvbmVudHM6JywgY29tcG9uZW50cyk7CgogIGNvbnNvbGUubG9nKAogICAgJ3ZhbHVlczpcbiAgICcgKwogICAgICBPYmplY3QuZW50cmllcyh2YWx1ZXMpCiAgICAgICAgLm1hcCgoW2tleSwgbGlzdF0pID0+IGAke2tleX06XG5cdCR7bGlzdC5qb2luKCdcblx0Jyl9YCkKICAgICAgICAuam9pbignXG4gICAnKQogICk7CgogIHJldHVybjsKICBjb25zb2xlLmxvZygnZGlnaXQyY29sb3I6JywgZGlnaXQyY29sb3IpOwogIGZvcihsZXQgdmFsdWUgb2YgWzMzMDAwLCAxODAwLCA0NzAsIDFlNiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDMpKTsKICAgIGNvbnNvbGUubG9nKCdHZXRDb2xvckJhbmRzJywgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMikpOwogICAgY29uc29sZS5sb2coJ051bWJlclRvVmFsdWUnLCBOdW1iZXJUb1ZhbHVlKHZhbHVlKSk7CiAgfQogIGZvcihsZXQgdmFsdWUgb2YgWyczM2snLCAnMS44aycsICc0NzAnLCAnMS44aycsICc0N2snLCAnMTBNJywgJzQuN2snXSkgewogICAgY29uc29sZS5sb2coYFZhbHVlVG9OdW1iZXIoJHt2YWx1ZX0pYCwgVmFsdWVUb051bWJlcih2YWx1ZSkpOwogIH0KfQoKVXRpbC5jYWxsTWFpbihtYWluLCB0cnVlKTsKAAAAAAAAAADjEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwgAAAAAAACTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADxEAAAaW1wb3J0IHsgZGVmaW5lLCBpc09iamVjdCwgbWVtb2l6ZSwgcmFuZ2UsIHVuaXF1ZSB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyBFYWdsZURvY3VtZW50IH0gZnJvbSAnLi9saWIvZWFnbGUuanMnOwppbXBvcnQgeyBMaW5lTGlzdCwgUmVjdCB9IGZyb20gJy4vbGliL2dlb20uanMnOwppbXBvcnQgeyB0b1hNTCB9IGZyb20gJy4vbGliL2pzb24uanMnOwppbXBvcnQgZnMgZnJvbSAnZnMnOwppbXBvcnQgVXRpbCBmcm9tICcuL2xpYi91dGlsLmpzJzsKaW1wb3J0IHsgQ29uc29sZSB9IGZyb20gJ2NvbnNvbGUnOwppbXBvcnQgeyBkaWdpdDJjb2xvciwgR2V0RmFjdG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlLCBHZXRFeHBvbmVudCwgR2V0TWFudGlzc2EgfSBmcm9tICcuL2xpYi9lZGEvY29sb3JDb2RpbmcuanMnOwppbXBvcnQgeyBVbml0Rm9yTmFtZSB9IGZyb20gJy4vbGliL2VkYS91bml0cy5qcyc7CmltcG9ydCB7IHVwZGF0ZU1lYXN1cmVzLCBhbGlnbkl0ZW0sIGFsaWduQWxsIH0gZnJvbSAnLi9lYWdsZS1jb21tYW5kcy5qcyc7CgpsZXQgZG9jdW1lbnRzID0gW107CgpmdW5jdGlvbiB4bWxpemUob2JqLCBkZXB0aCA9IDIpIHsKICByZXR1cm4gb2JqLnRvWE1MID8gb2JqLnRvWE1MKCkucmVwbGFjZSgvPlxzKjwvZywgJz5cbiAgICA8JykgOiBFYWdsZURvY3VtZW50LnRvWE1MKG9iaiwgZGVwdGgpLnNwbGl0KC9cbi9nKVswXTsKfQoKZnVuY3Rpb24gc2NpZW50aWZpYyh2YWx1ZSkgewogIGxldCBzY2kgPSBbR2V0TWFudGlzc2EodmFsdWUpLCBHZXRFeHBvbmVudCh2YWx1ZSldOwoKICBkZWZpbmUoc2NpLCB7CiAgICB0b1N0cmluZygpIHsKICAgICAgbGV0IHNpZ24gPSBNYXRoLnNpZ24odGhpc1sxXSkgPCAwID8gJy0nIDogJysnOwogICAgICByZXR1cm4gYCR7dGhpc1swXX1lJHtzaWdufSR7KE1hdGguYWJzKHRoaXNbMV0pICsgJycpLnBhZFN0YXJ0KDIsICcwJyl9YDsKICAgIH0KICB9KTsKICByZXR1cm4gc2NpOwp9CmNvbnN0IGNvbG9yID0gVXRpbC5jb2xvcmluZyh0cnVlKTsKCmNvbnN0IHZlcnRpY2FsUmVjdGFuZ2xlcyA9IFsn4pauICcsICfilq8gJ107CmNvbnN0IGxhcmdlU3F1YXJlcyA9IFsn4pagJywgJ+KWoSddOwoKZnVuY3Rpb24gbnVtMmNvbG9yKG51bSwgc3F1YXJlID0gZmFsc2UpIHsKICBsZXQgc3ltID0gc3F1YXJlID8gbGFyZ2VTcXVhcmVzIDogdmVydGljYWxSZWN0YW5nbGVzOwogIGxldCBjID0gdHlwZW9mIG51bSA9PSAnbnVtYmVyJyA/IEdldENvbG9yQmFuZHMobnVtKSA6IG51bTsKCiAgcmV0dXJuIGMubWFwKG4gPT4gY29sb3IudGV4dChuID8gc3ltWzBdIDogY29sb3IudGV4dChzeW1bMV0sIDM4LCA1LCAyMzYpLCBuID8gMzggOiA0OCwgLi4uZGlnaXQyY29sb3IuYW5zaVtuXS5zbGljZSgxKSkpLmpvaW4oJycpOwp9CmNvbnN0IFN1YnN0Q2hhcnMgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1x4Q0VceEJDL2csICdcdTAwQjUnKS5yZXBsYWNlKC9ceENFXHhBOS9nLCAnXHUyMTI2Jyk7Cgphc3luYyBmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7IGluc3BlY3RPcHRpb25zOiB7IGJyZWFrTGVuZ3RoOiAxMDAsIGNvbG9yczogdHJ1ZSwgZGVwdGg6IEluZmluaXR5LCBjb21wYWN0OiAyLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0gfSk7CiAgaWYoYXJncy5sZW5ndGggPT0gMCkgYXJncy51bnNoaWZ0KCcuLi9hbi10cm9uaWNzL2VhZ2xlL0hlYWRwaG9uZS1BbXBsaWZpZXItQ2xhc3NBQi1hbHQyLmJyZCcpOwogIGFyZ3MgPSB1bmlxdWUoYXJncyk7CiAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoYXJnKTsKICAgIGNvbnNvbGUubG9nKGBsb2FkZWQgJyR7YXJnfScgbGVuZ3RoOiAke2RhdGEubGVuZ3RofWApOwogICAgbGV0IGRvYyA9IG5ldyBFYWdsZURvY3VtZW50KGRhdGEsIG51bGwsIGFyZyk7CiAgICBkb2N1bWVudHMucHVzaChkb2MpOwogIH0KICBsZXQgY29tcG9uZW50cyA9IHsKICAgIEM6IFtdLAogICAgTDogW10sCiAgICBSOiBbXQogIH07CiAgZm9yKGxldCBkb2Mgb2YgZG9jdW1lbnRzKSB7CiAgICBsZXQgbWFpbiA9IGRvYy5tYWluRWxlbWVudDsKICAgIGNvbnNvbGUubG9nKCdtYWluOicsIG1haW4pOwogICAgbGV0IHBhcnRzID0gWy4uLihtYWluLmVsZW1lbnRzIHx8IG1haW4ucGFydHMpXS5tYXAoKFtuYW1lLCBlbGVtXSkgPT4gW25hbWUsIHR5cGVvZiBlbGVtLnZhbHVlID09ICdzdHJpbmcnID8gU3Vic3RDaGFycyhlbGVtLnZhbHVlKSA6IGVsZW0udmFsdWVdKTsKICAgIGNvbnNvbGUubG9nKCdwYXJ0cycsIHBhcnRzKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68bV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKHBhcnRzLmZpbHRlcigoW25hbWUsIHZhbHVlXSkgPT4gbWF0Y2hlcnMuc29tZShtID0+IG1bMF0udGVzdChuYW1lKSAmJiBtWzFdLnRlc3QodmFsdWUpKSkpOwogICAgY29uc29sZS5sb2coJ25hbWVWYWx1ZU1hcCcsIG5ldyBNYXAoWy4uLm5hbWVWYWx1ZU1hcF0ubWFwKChbbiwgdl0pID0+IFtuLCB2XSkpKTsKICAgIGZvcihsZXQgW25hbWUsIHZhbHVlXSBvZiBuYW1lVmFsdWVNYXApIHsKICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXHUwMDAwLVx1MDAxRlx1MDA3Ri1cdUZGRkZdL2csICcnKTsKICAgICAgY29tcG9uZW50c1tuYW1lWzBdXS5wdXNoKHZhbHVlLnJlcGxhY2UoL1vOqUZIXSQvLCAnJykucmVwbGFjZSgvXlwuLywgJzAuJykpOwogICAgfQogIH0KICBsZXQgaGlzdG9ncmFtcyA9IHt9OwogIGxldCB2YWx1ZXMgPSB7fTsKICBjb25zb2xlLmxvZygnY29tcG9uZW50cycsIGNvbXBvbmVudHMpOwogIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfQogIGZvcihsZXQga2V5IGluIGNvbXBvbmVudHMpIHsKICAgIGNvbXBvbmVudHNba2V5XS5zb3J0KCk7CiAgICBsZXQgaGlzdCA9IFV0aWwuaGlzdG9ncmFtKGNvbXBvbmVudHNba2V5XSwgbmV3IE1hcCgpKTsKCiAgICBoaXN0b2dyYW1zW2tleV0gPSBuZXcgTWFwKFsuLi5oaXN0XS5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSkpOwogICAgdmFsdWVzW2tleV0gPSBbLi4uaGlzdG9ncmFtc1trZXldXQogICAgICAubWFwKChbdmFsdWUsIGNvdW50XSkgPT4gewogICAgICAgIHJldHVybiBbdmFsdWUgfHwgc2NpZW50aWZpYyh2YWx1ZSkudG9TdHJpbmcoKSwgVmFsdWVUb051bWJlcih2YWx1ZSksIGNvdW50XTsKICAgICAgfSkKICAgICAgLnNvcnQoKGEsIGIpID0+IGFbMV0gLSBiWzFdKQogICAgICAubWFwKChbdmFsLCByYXQsIGNvdW50XSkgPT4gWyh2YWwgKyAnJykucGFkU3RhcnQoNCwgJyAnKSArIFVuaXRGb3JOYW1lKGtleSksIHJhdCA+PSAxID8gbnVtMmNvbG9yKHJhdCkgOiAnJywgYCAgw5cgJHtjb3VudH1gXS5qb2luKCcgJykpOwogIH0KICBjb25zb2xlLmxvZygnY29tcG9uZW50czonLCBjb21wb25lbnRzKTsKCiAgY29uc29sZS5sb2coCiAgICAndmFsdWVzOlxuICAgJyArCiAgICAgIE9iamVjdC5lbnRyaWVzKHZhbHVlcykKICAgICAgICAubWFwKChba2V5LCBsaXN0XSkgPT4gYCR7a2V5fTpcblx0JHtsaXN0LmpvaW4oJ1xuXHQnKX1gKQogICAgICAgIC5qb2luKCdcbiAgICcpCiAgKTsKCiAgcmV0dXJuOwogIGNvbnNvbGUubG9nKCdkaWdpdDJjb2xvcjonLCBkaWdpdDJjb2xvcik7CiAgZm9yKGxldCB2YWx1ZSBvZiBbMzMwMDAsIDE4MDAsIDQ3MCwgMWU2LCA0LjdlM10pIHsKICAgIGNvbnNvbGUubG9nKCdHZXRDb2xvckJhbmRzJywgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMykpOwogICAgY29uc29sZS5sb2coJ0dldENvbG9yQmFuZHMnLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgICBjb25zb2xlLmxvZygnTnVtYmVyVG9WYWx1ZScsIE51bWJlclRvVmFsdWUodmFsdWUpKTsKICB9CiAgZm9yKGxldCB2YWx1ZSBvZiBbJzMzaycsICcxLjhrJywgJzQ3MCcsICcxLjhrJywgJzQ3aycsICcxME0nLCAnNC43ayddKSB7CiAgICBjb25zb2xlLmxvZyhgVmFsdWVUb051bWJlcigke3ZhbHVlfSlgLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSk7CiAgfQp9CgpVdGlsLmNhbGxNYWluKG1haW4sIHRydWUpOwoAAAAAAAAAANwQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwgAAAAAAACTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"cut",
					null,
					"AQAAAE8FAAAAAAAATwUAAAAAAAAcAAAAZGlnaXQyY29sb3IuYW5zaVtuXS5zbGljZSgxKQ",
					"AQAAAAAAAAABAAAATwUAAAAAAABrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "ansi"
					},
					"BAAAAE8FAAAAAAAAUAUAAAAAAAAAAAAAUAUAAAAAAABRBQAAAAAAAAAAAABRBQAAAAAAAFIFAAAAAAAAAAAAAFIFAAAAAAAAUwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwUAAAAAAABPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAPEEAAAAAAAA8gQAAAAAAAAAAAAA8gQAAAAAAAD0BAAAAAAAAAAAAAD0BAAAAAAAAPUEAAAAAAAAAAAAAPUEAAAAAAAA9gQAAAAAAAAAAAAA9gQAAAAAAAD3BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QQAAAAAAADxBAAAAAAAAAAAAAAAAI5A"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " ansi"
					},
					"BQAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD5BAAAAAAAAAAAAAD5BAAAAAAAAPoEAAAAAAAAAAAAAPoEAAAAAAAA+wQAAAAAAAAAAAAA+wQAAAAAAAD8BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wQAAAAAAAD3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AQAAAAAAAD8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAP0EAAAAAAAA/gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QQAAAAAAAD9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAAP4EAAAAAAAAGgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gQAAAAAAAD+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABoFAAAAAAAAGwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgUAAAAAAAAaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABEFAAAAAAAAEgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAABEFAAAAAAAAEQUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAEgUAAAAAAAASBQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAABEFAAAAAAAAEgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAABsFAAAAAAAAHAUAAAAAAAAAAAAAHAUAAAAAAAAdBQAAAAAAAAAAAAAdBQAAAAAAAB4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwUAAAAAAAAbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB4FAAAAAAAAHwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgUAAAAAAAAeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAB8FAAAAAAAAIQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwUAAAAAAAAfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gQAAAAAAAD+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAP8EAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAABBQAAAAAAAAAAAAABBQAAAAAAAAIFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wQAAAAAAAD/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAIFAAAAAAAAAwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgUAAAAAAAACBQAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkFAAAAAAAAiwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQUAAAAAAACJBQAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAIoFAAAAAAAAiwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigUAAAAAAACKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALgLAAAAAAAAuQsAAAAAAAAAAAAAuQsAAAAAAAC6CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAsAAAAAAAC4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAE8MAAAAAAAAUQwAAAAAAAAAAAAA4gsAAAAAAADkCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gsAAAAAAABPDAAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAG4OAAAAAAAAbw4AAAAAAAAAAAAAbw4AAAAAAABwDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbg4AAAAAAABuDgAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "Obhjec"
					},
					"BgAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADEJAAAAAAAAAAAAADEJAAAAAAAAMgkAAAAAAAAAAAAAMgkAAAAAAAAzCQAAAAAAAAAAAAAzCQAAAAAAADQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgkAAAAAAAAuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					4,
					"left_delete",
					null,
					"BAAAADMJAAAAAAAAMwkAAAAAAAABAAAAYzIJAAAAAAAAMgkAAAAAAAABAAAAZTEJAAAAAAAAMQkAAAAAAAABAAAAajAJAAAAAAAAMAkAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAANAkAAAAAAAA0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "ec"
					},
					"AgAAADAJAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAAyCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAkAAAAAAAAwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					2,
					"left_delete",
					null,
					"AgAAADEJAAAAAAAAMQkAAAAAAAABAAAAYzAJAAAAAAAAMAkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAMgkAAAAAAAAyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "je"
					},
					"AgAAADAJAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAAyCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAkAAAAAAAAwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					4,
					"left_delete",
					null,
					"BAAAADEJAAAAAAAAMQkAAAAAAAABAAAAZTAJAAAAAAAAMAkAAAAAAAABAAAAai8JAAAAAAAALwkAAAAAAAABAAAAYi4JAAAAAAAALgkAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAAMgkAAAAAAAAyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADEJAAAAAAAAAAAAADEJAAAAAAAAMgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgkAAAAAAAAuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					4,
					"left_delete",
					null,
					"BAAAADEJAAAAAAAAMQkAAAAAAAABAAAAZTAJAAAAAAAAMAkAAAAAAAABAAAAbS8JAAAAAAAALwkAAAAAAAABAAAAYS4JAAAAAAAALgkAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAMgkAAAAAAAAyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADEJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgkAAAAAAAAuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": " Map("
					},
					"BQAAADEJAAAAAAAAMgkAAAAAAAAAAAAAMgkAAAAAAAAzCQAAAAAAAAAAAAAzCQAAAAAAADQJAAAAAAAAAAAAADQJAAAAAAAANQkAAAAAAAAAAAAANQkAAAAAAAA2CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQkAAAAAAAAxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADwJAAAAAAAAPQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAkAAAAAAAA8CQAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "Object.fromEntri"
					},
					"EQAAAC0JAAAAAAAALgkAAAAAAAAAAAAALgkAAAAAAAAuCQAAAAAAAAgAAAAgbmV3IE1hcC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADEJAAAAAAAAAAAAADEJAAAAAAAAMgkAAAAAAAAAAAAAMgkAAAAAAAAzCQAAAAAAAAAAAAAzCQAAAAAAADQJAAAAAAAAAAAAADQJAAAAAAAANQkAAAAAAAAAAAAANQkAAAAAAAA2CQAAAAAAAAAAAAA2CQAAAAAAADcJAAAAAAAAAAAAADcJAAAAAAAAOAkAAAAAAAAAAAAAOAkAAAAAAAA5CQAAAAAAAAAAAAA5CQAAAAAAADoJAAAAAAAAAAAAADoJAAAAAAAAOwkAAAAAAAAAAAAAOwkAAAAAAAA8CQAAAAAAAAAAAAA8CQAAAAAAAD0JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQkAAAAAAAA1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAAD0JAAAAAAAAPgkAAAAAAAAAAAAAPgkAAAAAAAA/CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQkAAAAAAAA9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "  {par"
					},
					"BgAAAC0JAAAAAAAALgkAAAAAAAAAAAAALgkAAAAAAAAvCQAAAAAAAAAAAAAvCQAAAAAAADAJAAAAAAAAAAAAADAJAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAAyCQAAAAAAAAAAAAAyCQAAAAAAADMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQkAAAAAAAAtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "ts:"
					},
					"AwAAADMJAAAAAAAANAkAAAAAAAAAAAAANAkAAAAAAAA1CQAAAAAAAAAAAAA1CQAAAAAAADYJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwkAAAAAAAAzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADYJAAAAAAAANwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgkAAAAAAAA2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAFAJAAAAAAAAUQkAAAAAAAAAAAAAUQkAAAAAAABSCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					7,
					"left_delete",
					null,
					"BwAAADUJAAAAAAAANQkAAAAAAAABAAAAOjQJAAAAAAAANAkAAAAAAAABAAAAczMJAAAAAAAAMwkAAAAAAAABAAAAdDIJAAAAAAAAMgkAAAAAAAABAAAAcjEJAAAAAAAAMQkAAAAAAAABAAAAYTAJAAAAAAAAMAkAAAAAAAABAAAAcC8JAAAAAAAALwkAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAANgkAAAAAAAA2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": "console.config"
					},
					"DgAAAC8JAAAAAAAAMAkAAAAAAAAAAAAAMAkAAAAAAAAxCQAAAAAAAAAAAAAxCQAAAAAAADIJAAAAAAAAAAAAADIJAAAAAAAAMwkAAAAAAAAAAAAAMwkAAAAAAAA0CQAAAAAAAAAAAAA0CQAAAAAAADUJAAAAAAAAAAAAADUJAAAAAAAANgkAAAAAAAAAAAAANgkAAAAAAAA3CQAAAAAAAAAAAAA3CQAAAAAAADgJAAAAAAAAAAAAADgJAAAAAAAAOQkAAAAAAAAAAAAAOQkAAAAAAAA6CQAAAAAAAAAAAAA6CQAAAAAAADsJAAAAAAAAAAAAADsJAAAAAAAAPAkAAAAAAAAAAAAAPAkAAAAAAAA9CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwkAAAAAAAAvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD0JAAAAAAAAPwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQkAAAAAAAA9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAD4JAAAAAAAAQAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgkAAAAAAAA+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD8JAAAAAAAAQAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwkAAAAAAAA/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "compact:"
					},
					"CAAAAD8JAAAAAAAAQAkAAAAAAAAAAAAAQAkAAAAAAABBCQAAAAAAAAAAAABBCQAAAAAAAEIJAAAAAAAAAAAAAEIJAAAAAAAAQwkAAAAAAAAAAAAAQwkAAAAAAABECQAAAAAAAAAAAABECQAAAAAAAEUJAAAAAAAAAAAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABHCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwkAAAAAAAA/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": " false})"
					},
					"CAAAAEcJAAAAAAAASAkAAAAAAAAAAAAASAkAAAAAAABJCQAAAAAAAAAAAABJCQAAAAAAAEoJAAAAAAAAAAAAAEoJAAAAAAAASwkAAAAAAAAAAAAASwkAAAAAAABMCQAAAAAAAAAAAABMCQAAAAAAAE0JAAAAAAAAAAAAAE0JAAAAAAAATgkAAAAAAAAAAAAATgkAAAAAAABPCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwkAAAAAAABHCQAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE8JAAAAAAAAUAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwkAAAAAAABPCQAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFAJAAAAAAAAUQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					4,
					"right_delete",
					null,
					"BAAAAFEJAAAAAAAAUQkAAAAAAAABAAAAIFEJAAAAAAAAUQkAAAAAAAABAAAAfVEJAAAAAAAAUQkAAAAAAAABAAAAKVEJAAAAAAAAUQkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAUQkAAAAAAABRCQAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					2,
					"left_delete",
					null,
					"AgAAAGsJAAAAAAAAawkAAAAAAAABAAAAfWoJAAAAAAAAagkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAbAkAAAAAAABsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAKcKAAAAAAAAqAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwoAAAAAAACnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"left_delete",
					null,
					"AQAAAKcKAAAAAAAApwoAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAqAoAAAAAAACoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKcKAAAAAAAAqAoAAAAAAAAAAAAAqAoAAAAAAACpCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwoAAAAAAACnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					316,
					1,
					"insert",
					{
						"characters": "72"
					},
					"AgAAAKkKAAAAAAAAqgoAAAAAAAAAAAAAqgoAAAAAAACrCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQoAAAAAAACpCgAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					2,
					"left_delete",
					null,
					"AgAAAKoKAAAAAAAAqgoAAAAAAAABAAAAMqkKAAAAAAAAqQoAAAAAAAABAAAANw",
					"AQAAAAAAAAABAAAAqwoAAAAAAACrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAADoLAAAAAAAAOwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgsAAAAAAAA6CwAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": "?="
					},
					"AgAAADsLAAAAAAAAPAsAAAAAAAAAAAAAPAsAAAAAAAA9CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwsAAAAAAAA7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"left_delete",
					null,
					"AQAAADwLAAAAAAAAPAsAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAPQsAAAAAAAA9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": "'')"
					},
					"AwAAADwLAAAAAAAAPQsAAAAAAAAAAAAAPQsAAAAAAAA+CwAAAAAAAAAAAAA+CwAAAAAAAD8LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAsAAAAAAAA8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAADULAAAAAAAANgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQsAAAAAAAA1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"left_delete",
					null,
					"AQAAAJILAAAAAAAAkgsAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAkwsAAAAAAACTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": "e?"
					},
					"AgAAAJILAAAAAAAAkwsAAAAAAAAAAAAAkwsAAAAAAACUCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgsAAAAAAACSCwAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAG0LAAAAAAAAbgsAAAAAAAAAAAAAbgsAAAAAAABvCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQsAAAAAAABtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"left_delete",
					null,
					"AQAAAG4LAAAAAAAAbgsAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAbwsAAAAAAABvCwAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "=="
					},
					"AgAAAG4LAAAAAAAAbwsAAAAAAAAAAAAAbwsAAAAAAABwCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgsAAAAAAABuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAHALAAAAAAAAcQsAAAAAAAAAAAAAcQsAAAAAAAByCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAsAAAAAAABwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					4,
					"left_delete",
					null,
					"BAAAAHELAAAAAAAAcQsAAAAAAAABAAAAMHALAAAAAAAAcAsAAAAAAAABAAAAIG8LAAAAAAAAbwsAAAAAAAABAAAAPW4LAAAAAAAAbgsAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAcgsAAAAAAAByCwAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "??"
					},
					"AgAAAG4LAAAAAAAAbwsAAAAAAAAAAAAAbwsAAAAAAABwCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgsAAAAAAABuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": " ''"
					},
					"AwAAAHALAAAAAAAAcQsAAAAAAAAAAAAAcQsAAAAAAAByCwAAAAAAAAAAAAByCwAAAAAAAHMLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAsAAAAAAABwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"left_delete",
					null,
					"AQAAAJkLAAAAAAAAmQsAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAAmgsAAAAAAACaCwAAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					4,
					"left_delete",
					null,
					"BAAAAD8LAAAAAAAAPwsAAAAAAAABAAAAKT4LAAAAAAAAPgsAAAAAAAABAAAAJz0LAAAAAAAAPQsAAAAAAAABAAAAJzwLAAAAAAAAPAsAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAAQAsAAAAAAABACwAAAAAAAAAAAAAAAPC/"
				],
				[
					392,
					1,
					"right_delete",
					null,
					"AQAAAC0LAAAAAAAALQsAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAALQsAAAAAAAAtCwAAAAAAAAAAAAAAAE5A"
				],
				[
					393,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAC0LAAAAAAAALgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQsAAAAAAAAtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"left_delete",
					null,
					"AQAAADULAAAAAAAANQsAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAANgsAAAAAAAA2CwAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": "?'')"
					},
					"BAAAADsLAAAAAAAAPAsAAAAAAAAAAAAAPAsAAAAAAAA9CwAAAAAAAAAAAAA9CwAAAAAAAD4LAAAAAAAAAAAAAD4LAAAAAAAAPwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwsAAAAAAAA7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					414,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAADULAAAAAAAANgsAAAAAAAAAAAAANgsAAAAAAAA3CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQsAAAAAAAA1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"left_delete",
					null,
					"AQAAADYLAAAAAAAANgsAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAANwsAAAAAAAA3CwAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					2,
					"left_delete",
					null,
					"AgAAAG4LAAAAAAAAbgsAAAAAAAAFAAAAPz8gJydtCwAAAAAAAG0LAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAAbgsAAAAAAABzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAADsLAAAAAAAAPAsAAAAAAAAAAAAAPAsAAAAAAAA9CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwsAAAAAAAA7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": " ''+value"
					},
					"CQAAAD0LAAAAAAAAPgsAAAAAAAAAAAAAPgsAAAAAAAA/CwAAAAAAAAAAAAA/CwAAAAAAAEALAAAAAAAAAAAAAEALAAAAAAAAQQsAAAAAAAAAAAAAQQsAAAAAAABCCwAAAAAAAAAAAABCCwAAAAAAAEMLAAAAAAAAAAAAAEMLAAAAAAAARAsAAAAAAAAAAAAARAsAAAAAAABFCwAAAAAAAAAAAABFCwAAAAAAAEYLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQsAAAAAAAA9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAEYLAAAAAAAARwsAAAAAAAAAAAAARwsAAAAAAABICwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgsAAAAAAABGCwAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgLAAAAAAAASQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAsAAAAAAABICwAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					2,
					"right_delete",
					null,
					"AgAAAEkLAAAAAAAASQsAAAAAAAABAAAAP0kLAAAAAAAASQsAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAASQsAAAAAAABJCwAAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					1,
					"paste",
					null,
					"AQAAAIMPAAAAAAAAvg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgw8AAAAAAACDDwAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": "Finished"
					},
					"CQAAAJQPAAAAAAAAlQ8AAAAAAAAAAAAAlQ8AAAAAAACVDwAAAAAAAAYAAABsb2FkZWSVDwAAAAAAAJYPAAAAAAAAAAAAAJYPAAAAAAAAlw8AAAAAAAAAAAAAlw8AAAAAAACYDwAAAAAAAAAAAACYDwAAAAAAAJkPAAAAAAAAAAAAAJkPAAAAAAAAmg8AAAAAAAAAAAAAmg8AAAAAAACbDwAAAAAAAAAAAACbDwAAAAAAAJwPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlA8AAAAAAACaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": " querying"
					},
					"CQAAAJwPAAAAAAAAnQ8AAAAAAAAAAAAAnQ8AAAAAAACeDwAAAAAAAAAAAACeDwAAAAAAAJ8PAAAAAAAAAAAAAJ8PAAAAAAAAoA8AAAAAAAAAAAAAoA8AAAAAAAChDwAAAAAAAAAAAAChDwAAAAAAAKIPAAAAAAAAAAAAAKIPAAAAAAAAow8AAAAAAAAAAAAAow8AAAAAAACkDwAAAAAAAAAAAACkDwAAAAAAAKUPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnA8AAAAAAACcDwAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": "...."
					},
					"BAAAAK4PAAAAAAAArw8AAAAAAAAAAAAArw8AAAAAAACwDwAAAAAAAAAAAACwDwAAAAAAALEPAAAAAAAAAAAAALEPAAAAAAAAsg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArg8AAAAAAACuDwAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAALIPAAAAAAAAtA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsg8AAAAAAACyDwAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAALMPAAAAAAAAtA8AAAAAAAAAAAAAtA8AAAAAAAC1DwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsw8AAAAAAACzDwAAAAAAAAAAAAAAAPC/"
				],
				[
					502,
					1,
					"left_delete",
					null,
					"AQAAALUPAAAAAAAAtQ8AAAAAAAAbAAAAYCBsZW5ndGg6ICR7ZGF0YS5sZW5ndGh9YCk7",
					"AQAAAAAAAAABAAAAtQ8AAAAAAADQDwAAAAAAAP///////+9/"
				],
				[
					507,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACREQAAaW1wb3J0IHsgZGVmaW5lLCBpc09iamVjdCwgbWVtb2l6ZSwgdW5pcXVlIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IExpbmVMaXN0LCBSZWN0IH0gZnJvbSAnLi9saWIvZ2VvbS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRGYWN0b3IsIEdldENvbG9yQmFuZHMsIFZhbHVlVG9OdW1iZXIsIE51bWJlclRvVmFsdWUsIEdldEV4cG9uZW50LCBHZXRNYW50aXNzYSB9IGZyb20gJy4vbGliL2VkYS9jb2xvckNvZGluZy5qcyc7CmltcG9ydCB7IFVuaXRGb3JOYW1lIH0gZnJvbSAnLi9saWIvZWRhL3VuaXRzLmpzJzsKaW1wb3J0IHsgdXBkYXRlTWVhc3VyZXMsIGFsaWduSXRlbSwgYWxpZ25BbGwgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9CgpmdW5jdGlvbiBzY2llbnRpZmljKHZhbHVlKSB7CiAgbGV0IHNjaSA9IFtHZXRNYW50aXNzYSh2YWx1ZSksIEdldEV4cG9uZW50KHZhbHVlKV07CgogIGRlZmluZShzY2ksIHsKICAgIHRvU3RyaW5nKCkgewogICAgICBsZXQgc2lnbiA9IE1hdGguc2lnbih0aGlzWzFdKSA8IDAgPyAnLScgOiAnKyc7CiAgICAgIHJldHVybiBgJHt0aGlzWzBdfWUke3NpZ259JHsoTWF0aC5hYnModGhpc1sxXSkgKyAnJykucGFkU3RhcnQoMiwgJzAnKX1gOwogICAgfQogIH0pOwogIHJldHVybiBzY2k7Cn0KY29uc3QgY29sb3IgPSBVdGlsLmNvbG9yaW5nKHRydWUpOwoKY29uc3QgdmVydGljYWxSZWN0YW5nbGVzID0gWyfilq4gJywgJ+KWryAnXTsKY29uc3QgbGFyZ2VTcXVhcmVzID0gWyfilqAnLCAn4pahJ107CgpmdW5jdGlvbiBudW0yY29sb3IobnVtLCBzcXVhcmUgPSBmYWxzZSkgewogIGxldCBzeW0gPSBzcXVhcmUgPyBsYXJnZVNxdWFyZXMgOiB2ZXJ0aWNhbFJlY3RhbmdsZXM7CiAgbGV0IGMgPSB0eXBlb2YgbnVtID09ICdudW1iZXInID8gR2V0Q29sb3JCYW5kcyhudW0pIDogbnVtOwogIGxldCBhbnNpID1uID0+IGRpZ2l0MmNvbG9yLmFuc2lbbl0/LnNsaWNlKDEpID8/IFtdOwoKICByZXR1cm4gYy5tYXAobiA9PiBjb2xvci50ZXh0KG4gPyBzeW1bMF0gOiBjb2xvci50ZXh0KHN5bVsxXSwgMzgsIDUsIDIzNiksIG4gPyAzOCA6IDQ4LCAuLi5hbnNpKG4pKSkuam9pbignJyk7Cn0KY29uc3QgU3Vic3RDaGFycyA9IHN0ciA9PiBzdHIucmVwbGFjZSgvXHhDRVx4QkMvZywgJ1x1MDBCNScpLnJlcGxhY2UoL1x4Q0VceEE5L2csICdcdTIxMjYnKTsKCmFzeW5jIGZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsgaW5zcGVjdE9wdGlvbnM6IHsgYnJlYWtMZW5ndGg6IDEwMCwgY29sb3JzOiB0cnVlLCBkZXB0aDogSW5maW5pdHksIGNvbXBhY3Q6IDIsIGN1c3RvbUluc3BlY3Q6IHRydWUgfSB9KTsKICBpZihhcmdzLmxlbmd0aCA9PSAwKSBhcmdzLnVuc2hpZnQoJy4uL2FuLXRyb25pY3MvZWFnbGUvSGVhZHBob25lLUFtcGxpZmllci1DbGFzc0FCLWFsdDIuYnJkJyk7CiAgYXJncyA9IHVuaXF1ZShhcmdzKTsKICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICBsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhhcmcpOwogICAgY29uc29sZS5sb2coYGxvYWRlZCAnJHthcmd9JyBsZW5ndGg6ICR7ZGF0YS5sZW5ndGh9YCk7CiAgICBsZXQgZG9jID0gbmV3IEVhZ2xlRG9jdW1lbnQoZGF0YSwgbnVsbCwgYXJnKTsKICAgIGRvY3VtZW50cy5wdXNoKGRvYyk7CiAgfQogIGxldCBjb21wb25lbnRzID0gewogICAgQzogW10sCiAgICBMOiBbXSwKICAgIFI6IFtdCiAgfTsKICBmb3IobGV0IGRvYyBvZiBkb2N1bWVudHMpIHsKICAgIGxldCBtYWluID0gZG9jLm1haW5FbGVtZW50OwogICAgY29uc29sZS5sb2coJ21haW46JywgbWFpbik7CiAgICBsZXQgcGFydHMgPSBbLi4uKG1haW4uZWxlbWVudHMgfHwgbWFpbi5wYXJ0cyldLm1hcCgoW25hbWUsIGVsZW1dKSA9PiBbbmFtZSwgdHlwZW9mIGVsZW0udmFsdWUgPT0gJ3N0cmluZycgPyBTdWJzdENoYXJzKGVsZW0udmFsdWUpIDogZWxlbS52YWx1ZV0pOwogICAgY29uc29sZS5sb2coJ3BhcnRzJywgIGNvbnNvbGUuY29uZmlnKHtjb21wYWN0OiBmYWxzZX0pLCBPYmplY3QuZnJvbUVudHJpZXMocGFydHMpKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68bV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKHBhcnRzLmZpbHRlcigoW25hbWUsIHZhbHVlXSkgPT4gbWF0Y2hlcnMuc29tZShtID0+IG1bMF0udGVzdChuYW1lKSAmJiBtWzFdLnRlc3QodmFsdWUpKSkpOwogICAgLy9jb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnK3ZhbHVlIDogJycpLnJlcGxhY2UoL1tcdTAwMDAtXHUwMDFGXHUwMDdGLVx1RkZGRl0vZywgJycpOwogICAgICBjb21wb25lbnRzW25hbWVbMF1dLnB1c2godmFsdWUucmVwbGFjZSgvW86pRkhdJC8sICcnKS5yZXBsYWNlKC9eXC4vLCAnMC4nKSk7CiAgICB9CiAgfQogIGxldCBoaXN0b2dyYW1zID0ge307CiAgbGV0IHZhbHVlcyA9IHt9OwogIC8vY29uc29sZS5sb2coJ2NvbXBvbmVudHMnLCBjb21wb25lbnRzKTsKIC8qIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfSovCiAgZm9yKGxldCBrZXkgaW4gY29tcG9uZW50cykgewogICAgY29tcG9uZW50c1trZXldLnNvcnQoKTsKICAgIGxldCBoaXN0ID0gVXRpbC5oaXN0b2dyYW0oY29tcG9uZW50c1trZXldLCBuZXcgTWFwKCkpOwoKICAgIGhpc3RvZ3JhbXNba2V5XSA9IG5ldyBNYXAoWy4uLmhpc3RdLnNvcnQoKGEsIGIpID0+IGJbMV0gLSBhWzFdKSk7CiAgICB2YWx1ZXNba2V5XSA9IFsuLi5oaXN0b2dyYW1zW2tleV1dCiAgICAgIC5tYXAoKFt2YWx1ZSwgY291bnRdKSA9PiB7CiAgICAgICAgcmV0dXJuIFt2YWx1ZSB8fCBzY2llbnRpZmljKHZhbHVlKS50b1N0cmluZygpLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSwgY291bnRdOwogICAgICB9KQogICAgICAuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pCiAgICAgIC5tYXAoKFt2YWwsIHJhdCwgY291bnRdKSA9PiBbKHZhbCArICcnKS5wYWRTdGFydCg0LCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwgcmF0ID49IDEgPyBudW0yY29sb3IocmF0KSA6ICcnLCBgICDDlyAke2NvdW50fWBdLmpvaW4oJyAnKSk7CiAgfQogLy8gY29uc29sZS5sb2coJ2NvbXBvbmVudHM6JywgY29tcG9uZW50cyk7CgogIGNvbnNvbGUubG9nKAogICAgJ3ZhbHVlczpcbiAgICcgKwogICAgICBPYmplY3QuZW50cmllcyh2YWx1ZXMpCiAgICAgICAgLm1hcCgoW2tleSwgbGlzdF0pID0+IGAke2tleX06XG5cdCR7bGlzdC5qb2luKCdcblx0Jyl9YCkKICAgICAgICAuam9pbignXG4gICAnKQogICk7CiAgICBjb25zb2xlLmxvZyhgRmluaXNoZWQgcXVlcnlpbmcgJyR7YXJnfScuLi4uYCk7CgogIHJldHVybjsKICBjb25zb2xlLmxvZygnZGlnaXQyY29sb3I6JywgZGlnaXQyY29sb3IpOwogIGZvcihsZXQgdmFsdWUgb2YgWzMzMDAwLCAxODAwLCA0NzAsIDFlNiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDMpKTsKICAgIGNvbnNvbGUubG9nKCdHZXRDb2xvckJhbmRzJywgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMikpOwogICAgY29uc29sZS5sb2coJ051bWJlclRvVmFsdWUnLCBOdW1iZXJUb1ZhbHVlKHZhbHVlKSk7CiAgfQogIGZvcihsZXQgdmFsdWUgb2YgWyczM2snLCAnMS44aycsICc0NzAnLCAnMS44aycsICc0N2snLCAnMTBNJywgJzQuN2snXSkgewogICAgY29uc29sZS5sb2coYFZhbHVlVG9OdW1iZXIoJHt2YWx1ZX0pYCwgVmFsdWVUb051bWJlcih2YWx1ZSkpOwogIH0KfQoKVXRpbC5jYWxsTWFpbihtYWluLCB0cnVlKTsKAAAAAAAAAACHEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQ8AAAAAAAC1DwAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAKoPAAAAAAAAqw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqg8AAAAAAACqDwAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": " ,m"
					},
					"AwAAAKsPAAAAAAAArA8AAAAAAAAAAAAArA8AAAAAAACtDwAAAAAAAAAAAACtDwAAAAAAAK4PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqw8AAAAAAACrDwAAAAAAAAAAAAAAAPC/"
				],
				[
					568,
					5,
					"left_delete",
					null,
					"BQAAAK0PAAAAAAAArQ8AAAAAAAABAAAAbawPAAAAAAAArA8AAAAAAAABAAAALKsPAAAAAAAAqw8AAAAAAAABAAAAIKoPAAAAAAAAqg8AAAAAAAABAAAAYKkPAAAAAAAAqQ8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAArg8AAAAAAACuDwAAAAAAAAAAAAAAAPC/"
				],
				[
					569,
					1,
					"insert",
					{
						"characters": "`,...args)("
					},
					"CwAAAKkPAAAAAAAAqg8AAAAAAAAAAAAAqg8AAAAAAACrDwAAAAAAAAAAAACrDwAAAAAAAKwPAAAAAAAAAAAAAKwPAAAAAAAArQ8AAAAAAAAAAAAArQ8AAAAAAACuDwAAAAAAAAAAAACuDwAAAAAAAK8PAAAAAAAAAAAAAK8PAAAAAAAAsA8AAAAAAAAAAAAAsA8AAAAAAACxDwAAAAAAAAAAAACxDwAAAAAAALIPAAAAAAAAAAAAALIPAAAAAAAAsw8AAAAAAAAAAAAAsw8AAAAAAAC0DwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQ8AAAAAAACpDwAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"left_delete",
					null,
					"AQAAALMPAAAAAAAAsw8AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAtA8AAAAAAAC0DwAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAALMPAAAAAAAAtA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsw8AAAAAAACzDwAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"left_delete",
					null,
					"AQAAALMPAAAAAAAAsw8AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAtA8AAAAAAAC0DwAAAAAAAAAAAAAAAPC/"
				],
				[
					574,
					1,
					"insert",
					{
						"characters": "M"
					},
					"AgAAALMPAAAAAAAAtA8AAAAAAAAAAAAAtA8AAAAAAAC0DwAAAAAAAA8AAAAnJHthcmd9Jy4uLi5gKTs",
					"AQAAAAAAAAABAAAAsw8AAAAAAADCDwAAAAAAAP///////+9/"
				],
				[
					575,
					1,
					"left_delete",
					null,
					"AQAAALMPAAAAAAAAsw8AAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAtA8AAAAAAAC0DwAAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALMPAAAAAAAAtA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsw8AAAAAAACzDwAAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					1,
					"insert",
					{
						"characters": " ,"
					},
					"AgAAAJgPAAAAAAAAmQ8AAAAAAAAAAAAAmQ8AAAAAAACaDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmA8AAAAAAACYDwAAAAAAAAAAAAAAAPC/"
				],
				[
					582,
					2,
					"left_delete",
					null,
					"AgAAAJkPAAAAAAAAmQ8AAAAAAAABAAAALJgPAAAAAAAAmA8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAmg8AAAAAAACaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					583,
					1,
					"insert",
					{
						"characters": "\\\\n"
					},
					"AwAAAJgPAAAAAAAAmQ8AAAAAAAAAAAAAmQ8AAAAAAACaDwAAAAAAAAAAAACaDwAAAAAAAJsPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmA8AAAAAAACYDwAAAAAAAAAAAAAAAPC/"
				],
				[
					584,
					2,
					"left_delete",
					null,
					"AgAAAJoPAAAAAAAAmg8AAAAAAAABAAAAbpkPAAAAAAAAmQ8AAAAAAAABAAAAXA",
					"AQAAAAAAAAABAAAAmw8AAAAAAACbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					585,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAJkPAAAAAAAAmg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQ8AAAAAAACZDwAAAAAAAAAAAAAAAPC/"
				],
				[
					586,
					1,
					"left_delete",
					null,
					"AQAAAJkPAAAAAAAAmQ8AAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAmg8AAAAAAACaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": "r\\n"
					},
					"AwAAAJkPAAAAAAAAmg8AAAAAAAAAAAAAmg8AAAAAAACbDwAAAAAAAAAAAACbDwAAAAAAAJwPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQ8AAAAAAACZDwAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"cut",
					null,
					"AQAAAM4CAAAAAAAAzgIAAAAAAADVAgAACmZ1bmN0aW9uIHNjaWVudGlmaWModmFsdWUpIHsKICBsZXQgc2NpID0gW0dldE1hbnRpc3NhKHZhbHVlKSwgR2V0RXhwb25lbnQodmFsdWUpXTsKCiAgZGVmaW5lKHNjaSwgewogICAgdG9TdHJpbmcoKSB7CiAgICAgIGxldCBzaWduID0gTWF0aC5zaWduKHRoaXNbMV0pIDwgMCA/ICctJyA6ICcrJzsKICAgICAgcmV0dXJuIGAke3RoaXNbMF19ZSR7c2lnbn0keyhNYXRoLmFicyh0aGlzWzFdKSArICcnKS5wYWRTdGFydCgyLCAnMCcpfWA7CiAgICB9CiAgfSk7CiAgcmV0dXJuIHNjaTsKfQpjb25zdCBjb2xvciA9IFV0aWwuY29sb3JpbmcodHJ1ZSk7Cgpjb25zdCB2ZXJ0aWNhbFJlY3RhbmdsZXMgPSBbJ+KWriAnLCAn4pavICddOwpjb25zdCBsYXJnZVNxdWFyZXMgPSBbJ+KWoCcsICfilqEnXTsKCmZ1bmN0aW9uIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKSB7CiAgbGV0IHN5bSA9IHNxdWFyZSA/IGxhcmdlU3F1YXJlcyA6IHZlcnRpY2FsUmVjdGFuZ2xlczsKICBsZXQgYyA9IHR5cGVvZiBudW0gPT0gJ251bWJlcicgPyBHZXRDb2xvckJhbmRzKG51bSkgOiBudW07CiAgbGV0IGFuc2kgPSBuID0+IGRpZ2l0MmNvbG9yLmFuc2lbbl0/LnNsaWNlKDEpID8/IFtdOwoKICByZXR1cm4gYy5tYXAobiA9PiBjb2xvci50ZXh0KG4gPyBzeW1bMF0gOiBjb2xvci50ZXh0KHN5bVsxXSwgMzgsIDUsIDIzNiksIG4gPyAzOCA6IDQ4LCAuLi5hbnNpKG4pKSkuam9pbignJyk7Cn0",
					"AQAAAAAAAAABAAAAzgIAAAAAAACbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					648,
					1,
					"paste",
					null,
					"AQAAACQBAAAAAAAALQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAEAAAAAAAAkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					649,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAC0BAAAAAAAALgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQEAAAAAAAAtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					650,
					1,
					"insert",
					{
						"characters": " sc"
					},
					"AwAAAC4BAAAAAAAALwEAAAAAAAAAAAAALwEAAAAAAAAwAQAAAAAAAAAAAAAwAQAAAAAAADEBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgEAAAAAAAAuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					651,
					4,
					"left_delete",
					null,
					"BAAAADABAAAAAAAAMAEAAAAAAAABAAAAYy8BAAAAAAAALwEAAAAAAAABAAAAcy4BAAAAAAAALgEAAAAAAAABAAAAIC0BAAAAAAAALQEAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAMQEAAAAAAAAxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					652,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAAC0BAAAAAAAALgEAAAAAAAAAAAAALgEAAAAAAAAvAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQEAAAAAAAAtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC8BAAAAAAAAMAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwEAAAAAAAAvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					2,
					"left_delete",
					null,
					"AgAAAC8BAAAAAAAALwEAAAAAAAABAAAAIC4BAAAAAAAALgEAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAMAEAAAAAAAAwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					655,
					1,
					"insert",
					{
						"characters": "sci"
					},
					"AwAAAC4BAAAAAAAALwEAAAAAAAAAAAAALwEAAAAAAAAwAQAAAAAAAAAAAAAwAQAAAAAAADEBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgEAAAAAAAAuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADEBAAAAAAAAMgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQEAAAAAAAAxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAADEBAAAAAAAAMgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQEAAAAAAAAxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					659,
					1,
					"left_delete",
					null,
					"AQAAADEBAAAAAAAAMQEAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAMgEAAAAAAAAyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					660,
					1,
					"insert",
					{
						"characters": "en"
					},
					"AgAAADEBAAAAAAAAMgEAAAAAAAAAAAAAMgEAAAAAAAAzAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQEAAAAAAAAxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					661,
					1,
					"insert_completion",
					{
						"completion": "scientific",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "scientific"
					},
					"AgAAAC4BAAAAAAAALgEAAAAAAAAFAAAAc2NpZW4uAQAAAAAAADgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					662,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADgBAAAAAAAAOQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAEAAAAAAAA4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					681,
					1,
					"cut",
					null,
					"AQAAACQBAAAAAAAAJAEAAAAAAAAVAAAAbnVtMmNvbG9yLHNjaWVudGlmaWMs",
					"AQAAAAAAAAABAAAAJAEAAAAAAAA5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					686,
					1,
					"paste",
					null,
					"AQAAAOEBAAAAAAAA+AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QEAAAAAAADhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					693,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADXDgAAaW1wb3J0IHsgZGVmaW5lLCBpc09iamVjdCwgbWVtb2l6ZSwgdW5pcXVlIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IExpbmVMaXN0LCBSZWN0IH0gZnJvbSAnLi9saWIvZ2VvbS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7ICBkaWdpdDJjb2xvciwgR2V0RmFjdG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlLCBHZXRFeHBvbmVudCwgR2V0TWFudGlzc2EgfSBmcm9tICcuL2xpYi9lZGEvY29sb3JDb2RpbmcuanMnOwppbXBvcnQgeyBVbml0Rm9yTmFtZSB9IGZyb20gJy4vbGliL2VkYS91bml0cy5qcyc7CmltcG9ydCB7ICBudW0yY29sb3Isc2NpZW50aWZpYywgdXBkYXRlTWVhc3VyZXMsIGFsaWduSXRlbSwgYWxpZ25BbGwgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9Cgpjb25zdCBTdWJzdENoYXJzID0gc3RyID0+IHN0ci5yZXBsYWNlKC9ceENFXHhCQy9nLCAnXHUwMEI1JykucmVwbGFjZSgvXHhDRVx4QTkvZywgJ1x1MjEyNicpOwoKYXN5bmMgZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoeyBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9IH0pOwogIGlmKGFyZ3MubGVuZ3RoID09IDApIGFyZ3MudW5zaGlmdCgnLi4vYW4tdHJvbmljcy9lYWdsZS9IZWFkcGhvbmUtQW1wbGlmaWVyLUNsYXNzQUItYWx0Mi5icmQnKTsKICBhcmdzID0gdW5pcXVlKGFyZ3MpOwogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFyZyk7CiAgICBjb25zb2xlLmxvZyhgbG9hZGVkICcke2FyZ30nIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IG1haW4gPSBkb2MubWFpbkVsZW1lbnQ7CiAgICBjb25zb2xlLmxvZygnbWFpbjonLCBtYWluKTsKICAgIGxldCBwYXJ0cyA9IFsuLi4obWFpbi5lbGVtZW50cyB8fCBtYWluLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFtuYW1lLCB0eXBlb2YgZWxlbS52YWx1ZSA9PSAnc3RyaW5nJyA/IFN1YnN0Q2hhcnMoZWxlbS52YWx1ZSkgOiBlbGVtLnZhbHVlXSk7CiAgICBjb25zb2xlLmxvZygncGFydHMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IGZhbHNlIH0pLCBPYmplY3QuZnJvbUVudHJpZXMocGFydHMpKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68bV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKHBhcnRzLmZpbHRlcigoW25hbWUsIHZhbHVlXSkgPT4gbWF0Y2hlcnMuc29tZShtID0+IG1bMF0udGVzdChuYW1lKSAmJiBtWzFdLnRlc3QodmFsdWUpKSkpOwogICAgLy9jb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZcdTAwN0YtXHVGRkZGXS9nLCAnJyk7CiAgICAgIGNvbXBvbmVudHNbbmFtZVswXV0ucHVzaCh2YWx1ZS5yZXBsYWNlKC9bzqlGSF0kLywgJycpLnJlcGxhY2UoL15cLi8sICcwLicpKTsKICAgIH0KICB9CiAgbGV0IGhpc3RvZ3JhbXMgPSB7fTsKICBsZXQgdmFsdWVzID0ge307CiAgLy9jb25zb2xlLmxvZygnY29tcG9uZW50cycsIGNvbXBvbmVudHMpOwogIC8qIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfSovCiAgZm9yKGxldCBrZXkgaW4gY29tcG9uZW50cykgewogICAgY29tcG9uZW50c1trZXldLnNvcnQoKTsKICAgIGxldCBoaXN0ID0gVXRpbC5oaXN0b2dyYW0oY29tcG9uZW50c1trZXldLCBuZXcgTWFwKCkpOwoKICAgIGhpc3RvZ3JhbXNba2V5XSA9IG5ldyBNYXAoWy4uLmhpc3RdLnNvcnQoKGEsIGIpID0+IGJbMV0gLSBhWzFdKSk7CiAgICB2YWx1ZXNba2V5XSA9IFsuLi5oaXN0b2dyYW1zW2tleV1dCiAgICAgIC5tYXAoKFt2YWx1ZSwgY291bnRdKSA9PiB7CiAgICAgICAgcmV0dXJuIFt2YWx1ZSB8fCBzY2llbnRpZmljKHZhbHVlKS50b1N0cmluZygpLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSwgY291bnRdOwogICAgICB9KQogICAgICAuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pCiAgICAgIC5tYXAoKFt2YWwsIHJhdCwgY291bnRdKSA9PiBbKHZhbCArICcnKS5wYWRTdGFydCg0LCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwgcmF0ID49IDEgPyBudW0yY29sb3IocmF0KSA6ICcnLCBgICDDlyAke2NvdW50fWBdLmpvaW4oJyAnKSk7CiAgfQogIC8vIGNvbnNvbGUubG9nKCdjb21wb25lbnRzOicsIGNvbXBvbmVudHMpOwoKICBjb25zb2xlLmxvZygKICAgICd2YWx1ZXM6XG4gICAnICsKICAgICAgT2JqZWN0LmVudHJpZXModmFsdWVzKQogICAgICAgIC5tYXAoKFtrZXksIGxpc3RdKSA9PiBgJHtrZXl9OlxuXHQke2xpc3Quam9pbignXG5cdCcpfWApCiAgICAgICAgLmpvaW4oJ1xuICAgJykKICApOwogIGNvbnNvbGUubG9nKGBcclxuRmluaXNoZWQgcXVlcnlpbmdgLC4uLmFyZ3MpOwoKICByZXR1cm47CiAgY29uc29sZS5sb2coJ2RpZ2l0MmNvbG9yOicsIGRpZ2l0MmNvbG9yKTsKICBmb3IobGV0IHZhbHVlIG9mIFszMzAwMCwgMTgwMCwgNDcwLCAxZTYsIDQuN2UzXSkgewogICAgY29uc29sZS5sb2coJ0dldENvbG9yQmFuZHMnLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAzKSk7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDIpKTsKICAgIGNvbnNvbGUubG9nKCdOdW1iZXJUb1ZhbHVlJywgTnVtYmVyVG9WYWx1ZSh2YWx1ZSkpOwogIH0KICBmb3IobGV0IHZhbHVlIG9mIFsnMzNrJywgJzEuOGsnLCAnNDcwJywgJzEuOGsnLCAnNDdrJywgJzEwTScsICc0LjdrJ10pIHsKICAgIGNvbnNvbGUubG9nKGBWYWx1ZVRvTnVtYmVyKCR7dmFsdWV9KWAsIFZhbHVlVG9OdW1iZXIodmFsdWUpKTsKICB9Cn0KClV0aWwuY2FsbE1haW4obWFpbiwgdHJ1ZSk7CgAAAAAAAAAA0Q4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AEAAAAAAAD4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					706,
					1,
					"paste",
					null,
					"AgAAABsBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAAClAQAAAAAAAIoAAABpbXBvcnQgeyBkaWdpdDJjb2xvciwgR2V0RmFjdG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlLCBHZXRFeHBvbmVudCwgR2V0TWFudGlzc2EgfSBmcm9tICcuL2xpYi9lZGEvY29sb3JDb2RpbmcuanMnOwo",
					"AQAAAAAAAAABAAAAGwEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					711,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADXDgAAaW1wb3J0IHsgZGVmaW5lLCBpc09iamVjdCwgbWVtb2l6ZSwgdW5pcXVlIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IExpbmVMaXN0LCBSZWN0IH0gZnJvbSAnLi9saWIvZ2VvbS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRGYWN0b3IsIEdldENvbG9yQmFuZHMsIFZhbHVlVG9OdW1iZXIsIE51bWJlclRvVmFsdWUsIEdldEV4cG9uZW50LCBHZXRNYW50aXNzYSB9IGZyb20gJy4vbGliL2VkYS9jb2xvckNvZGluZy5qcyc7CmltcG9ydCB7IFVuaXRGb3JOYW1lIH0gZnJvbSAnLi9saWIvZWRhL3VuaXRzLmpzJzsKaW1wb3J0IHsgbnVtMmNvbG9yLCBzY2llbnRpZmljLCB1cGRhdGVNZWFzdXJlcywgYWxpZ25JdGVtLCBhbGlnbkFsbCB9IGZyb20gJy4vZWFnbGUtY29tbWFuZHMuanMnOwoKbGV0IGRvY3VtZW50cyA9IFtdOwoKZnVuY3Rpb24geG1saXplKG9iaiwgZGVwdGggPSAyKSB7CiAgcmV0dXJuIG9iai50b1hNTCA/IG9iai50b1hNTCgpLnJlcGxhY2UoLz5ccyo8L2csICc+XG4gICAgPCcpIDogRWFnbGVEb2N1bWVudC50b1hNTChvYmosIGRlcHRoKS5zcGxpdCgvXG4vZylbMF07Cn0KCmNvbnN0IFN1YnN0Q2hhcnMgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1x4Q0VceEJDL2csICdcdTAwQjUnKS5yZXBsYWNlKC9ceENFXHhBOS9nLCAnXHUyMTI2Jyk7Cgphc3luYyBmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7IGluc3BlY3RPcHRpb25zOiB7IGJyZWFrTGVuZ3RoOiAxMDAsIGNvbG9yczogdHJ1ZSwgZGVwdGg6IEluZmluaXR5LCBjb21wYWN0OiAyLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0gfSk7CiAgaWYoYXJncy5sZW5ndGggPT0gMCkgYXJncy51bnNoaWZ0KCcuLi9hbi10cm9uaWNzL2VhZ2xlL0hlYWRwaG9uZS1BbXBsaWZpZXItQ2xhc3NBQi1hbHQyLmJyZCcpOwogIGFyZ3MgPSB1bmlxdWUoYXJncyk7CiAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoYXJnKTsKICAgIGNvbnNvbGUubG9nKGBsb2FkZWQgJyR7YXJnfScgbGVuZ3RoOiAke2RhdGEubGVuZ3RofWApOwogICAgbGV0IGRvYyA9IG5ldyBFYWdsZURvY3VtZW50KGRhdGEsIG51bGwsIGFyZyk7CiAgICBkb2N1bWVudHMucHVzaChkb2MpOwogIH0KICBsZXQgY29tcG9uZW50cyA9IHsKICAgIEM6IFtdLAogICAgTDogW10sCiAgICBSOiBbXQogIH07CiAgZm9yKGxldCBkb2Mgb2YgZG9jdW1lbnRzKSB7CiAgICBsZXQgbWFpbiA9IGRvYy5tYWluRWxlbWVudDsKICAgIGNvbnNvbGUubG9nKCdtYWluOicsIG1haW4pOwogICAgbGV0IHBhcnRzID0gWy4uLihtYWluLmVsZW1lbnRzIHx8IG1haW4ucGFydHMpXS5tYXAoKFtuYW1lLCBlbGVtXSkgPT4gW25hbWUsIHR5cGVvZiBlbGVtLnZhbHVlID09ICdzdHJpbmcnID8gU3Vic3RDaGFycyhlbGVtLnZhbHVlKSA6IGVsZW0udmFsdWVdKTsKICAgIGNvbnNvbGUubG9nKCdwYXJ0cycsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogZmFsc2UgfSksIE9iamVjdC5mcm9tRW50cmllcyhwYXJ0cykpOwogICAgbGV0IG1hdGNoZXJzID0gWwogICAgICBbL15SLywgL15bMC05Ll0rKFtrS21NXVvOqVx1MDNBOV0/fFvOqVx1MDNBOV0/KSh8XC9bMC05Ll0rVykvXSwKICAgICAgWy9eQy8sIC9eWzAtOS5dKyhbcG51zrxtXUY/fEY/KSh8XC9bMC05Ll0rVikvXSwKICAgICAgWy9eTC8sIC9eWzAtOS5dKyhbbnXOvG1dSD98SD8pL10KICAgIF07CgogICAgbGV0IG5hbWVWYWx1ZU1hcCA9IG5ldyBNYXAocGFydHMuZmlsdGVyKChbbmFtZSwgdmFsdWVdKSA9PiBtYXRjaGVycy5zb21lKG0gPT4gbVswXS50ZXN0KG5hbWUpICYmIG1bMV0udGVzdCh2YWx1ZSkpKSk7CiAgICAvL2NvbnNvbGUubG9nKCduYW1lVmFsdWVNYXAnLCBuZXcgTWFwKFsuLi5uYW1lVmFsdWVNYXBdLm1hcCgoW24sIHZdKSA9PiBbbiwgdl0pKSk7CiAgICBmb3IobGV0IFtuYW1lLCB2YWx1ZV0gb2YgbmFtZVZhbHVlTWFwKSB7CiAgICAgIHZhbHVlID0gKHZhbHVlID8gJycgKyB2YWx1ZSA6ICcnKS5yZXBsYWNlKC9bXHUwMDAwLVx1MDAxRlx1MDA3Ri1cdUZGRkZdL2csICcnKTsKICAgICAgY29tcG9uZW50c1tuYW1lWzBdXS5wdXNoKHZhbHVlLnJlcGxhY2UoL1vOqUZIXSQvLCAnJykucmVwbGFjZSgvXlwuLywgJzAuJykpOwogICAgfQogIH0KICBsZXQgaGlzdG9ncmFtcyA9IHt9OwogIGxldCB2YWx1ZXMgPSB7fTsKICAvL2NvbnNvbGUubG9nKCdjb21wb25lbnRzJywgY29tcG9uZW50cyk7CiAgLyogZm9yKGxldCB2YWx1ZSBvZiBbMi4yLCA0LjdlM10pIHsKICAgIGNvbnNvbGUubG9nKGBHZXRDb2xvckJhbmRzKCR7dmFsdWV9LCAzKWAsIEdldENvbG9yQmFuZHModmFsdWUsIDIpKTsKICB9Ki8KICBmb3IobGV0IGtleSBpbiBjb21wb25lbnRzKSB7CiAgICBjb21wb25lbnRzW2tleV0uc29ydCgpOwogICAgbGV0IGhpc3QgPSBVdGlsLmhpc3RvZ3JhbShjb21wb25lbnRzW2tleV0sIG5ldyBNYXAoKSk7CgogICAgaGlzdG9ncmFtc1trZXldID0gbmV3IE1hcChbLi4uaGlzdF0uc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pKTsKICAgIHZhbHVlc1trZXldID0gWy4uLmhpc3RvZ3JhbXNba2V5XV0KICAgICAgLm1hcCgoW3ZhbHVlLCBjb3VudF0pID0+IHsKICAgICAgICByZXR1cm4gW3ZhbHVlIHx8IHNjaWVudGlmaWModmFsdWUpLnRvU3RyaW5nKCksIFZhbHVlVG9OdW1iZXIodmFsdWUpLCBjb3VudF07CiAgICAgIH0pCiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSkKICAgICAgLm1hcCgoW3ZhbCwgcmF0LCBjb3VudF0pID0+IFsodmFsICsgJycpLnBhZFN0YXJ0KDQsICcgJykgKyBVbml0Rm9yTmFtZShrZXkpLCByYXQgPj0gMSA/IG51bTJjb2xvcihyYXQpIDogJycsIGAgIMOXICR7Y291bnR9YF0uam9pbignICcpKTsKICB9CiAgLy8gY29uc29sZS5sb2coJ2NvbXBvbmVudHM6JywgY29tcG9uZW50cyk7CgogIGNvbnNvbGUubG9nKAogICAgJ3ZhbHVlczpcbiAgICcgKwogICAgICBPYmplY3QuZW50cmllcyh2YWx1ZXMpCiAgICAgICAgLm1hcCgoW2tleSwgbGlzdF0pID0+IGAke2tleX06XG5cdCR7bGlzdC5qb2luKCdcblx0Jyl9YCkKICAgICAgICAuam9pbignXG4gICAnKQogICk7CiAgY29uc29sZS5sb2coYFxyXG5GaW5pc2hlZCBxdWVyeWluZ2AsIC4uLmFyZ3MpOwoKICByZXR1cm47CiAgY29uc29sZS5sb2coJ2RpZ2l0MmNvbG9yOicsIGRpZ2l0MmNvbG9yKTsKICBmb3IobGV0IHZhbHVlIG9mIFszMzAwMCwgMTgwMCwgNDcwLCAxZTYsIDQuN2UzXSkgewogICAgY29uc29sZS5sb2coJ0dldENvbG9yQmFuZHMnLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAzKSk7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDIpKTsKICAgIGNvbnNvbGUubG9nKCdOdW1iZXJUb1ZhbHVlJywgTnVtYmVyVG9WYWx1ZSh2YWx1ZSkpOwogIH0KICBmb3IobGV0IHZhbHVlIG9mIFsnMzNrJywgJzEuOGsnLCAnNDcwJywgJzEuOGsnLCAnNDdrJywgJzEwTScsICc0LjdrJ10pIHsKICAgIGNvbnNvbGUubG9nKGBWYWx1ZVRvTnVtYmVyKCR7dmFsdWV9KWAsIFZhbHVlVG9OdW1iZXIodmFsdWUpKTsKICB9Cn0KClV0aWwuY2FsbE1haW4obWFpbiwgdHJ1ZSk7CgAAAAAAAAAAPA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					729,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCDgAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9Cgpjb25zdCBTdWJzdENoYXJzID0gc3RyID0+IHN0ci5yZXBsYWNlKC9ceENFXHhCQy9nLCAnXHUwMEI1JykucmVwbGFjZSgvXHhDRVx4QTkvZywgJ1x1MjEyNicpOwoKYXN5bmMgZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoeyBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9IH0pOwogIGlmKGFyZ3MubGVuZ3RoID09IDApIGFyZ3MudW5zaGlmdCgnLi4vYW4tdHJvbmljcy9lYWdsZS9IZWFkcGhvbmUtQW1wbGlmaWVyLUNsYXNzQUItYWx0Mi5icmQnKTsKICBhcmdzID0gdW5pcXVlKGFyZ3MpOwogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFyZyk7CiAgICBjb25zb2xlLmxvZyhgbG9hZGVkICcke2FyZ30nIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IG1haW4gPSBkb2MubWFpbkVsZW1lbnQ7CiAgICBjb25zb2xlLmxvZygnbWFpbjonLCBtYWluKTsKICAgIGxldCBwYXJ0cyA9IFsuLi4obWFpbi5lbGVtZW50cyB8fCBtYWluLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFtuYW1lLCB0eXBlb2YgZWxlbS52YWx1ZSA9PSAnc3RyaW5nJyA/IFN1YnN0Q2hhcnMoZWxlbS52YWx1ZSkgOiBlbGVtLnZhbHVlXSk7CiAgICBjb25zb2xlLmxvZygncGFydHMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IGZhbHNlIH0pLCBPYmplY3QuZnJvbUVudHJpZXMocGFydHMpKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68bV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKHBhcnRzLmZpbHRlcigoW25hbWUsIHZhbHVlXSkgPT4gbWF0Y2hlcnMuc29tZShtID0+IG1bMF0udGVzdChuYW1lKSAmJiBtWzFdLnRlc3QodmFsdWUpKSkpOwogICAgLy9jb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZcdTAwN0YtXHVGRkZGXS9nLCAnJyk7CiAgICAgIGNvbXBvbmVudHNbbmFtZVswXV0ucHVzaCh2YWx1ZS5yZXBsYWNlKC9bzqlGSF0kLywgJycpLnJlcGxhY2UoL15cLi8sICcwLicpKTsKICAgIH0KICB9CiAgbGV0IGhpc3RvZ3JhbXMgPSB7fTsKICBsZXQgdmFsdWVzID0ge307CiAgLy9jb25zb2xlLmxvZygnY29tcG9uZW50cycsIGNvbXBvbmVudHMpOwogIC8qIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfSovCiAgZm9yKGxldCBrZXkgaW4gY29tcG9uZW50cykgewogICAgY29tcG9uZW50c1trZXldLnNvcnQoKTsKICAgIGxldCBoaXN0ID0gVXRpbC5oaXN0b2dyYW0oY29tcG9uZW50c1trZXldLCBuZXcgTWFwKCkpOwoKICAgIGhpc3RvZ3JhbXNba2V5XSA9IG5ldyBNYXAoWy4uLmhpc3RdLnNvcnQoKGEsIGIpID0+IGJbMV0gLSBhWzFdKSk7CiAgICB2YWx1ZXNba2V5XSA9IFsuLi5oaXN0b2dyYW1zW2tleV1dCiAgICAgIC5tYXAoKFt2YWx1ZSwgY291bnRdKSA9PiB7CiAgICAgICAgcmV0dXJuIFt2YWx1ZSB8fCBzY2llbnRpZmljKHZhbHVlKS50b1N0cmluZygpLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSwgY291bnRdOwogICAgICB9KQogICAgICAuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pCiAgICAgIC5tYXAoKFt2YWwsIHJhdCwgY291bnRdKSA9PiBbKHZhbCArICcnKS5wYWRTdGFydCg0LCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwgcmF0ID49IDEgPyBudW0yY29sb3IocmF0KSA6ICcnLCBgICDDlyAke2NvdW50fWBdLmpvaW4oJyAnKSk7CiAgfQogIC8vIGNvbnNvbGUubG9nKCdjb21wb25lbnRzOicsIGNvbXBvbmVudHMpOwoKICBjb25zb2xlLmxvZygKICAgICd2YWx1ZXM6XG4gICAnICsKICAgICAgT2JqZWN0LmVudHJpZXModmFsdWVzKQogICAgICAgIC5tYXAoKFtrZXksIGxpc3RdKSA9PiBgJHtrZXl9OlxuXHQke2xpc3Quam9pbignXG5cdCcpfWApCiAgICAgICAgLmpvaW4oJ1xuICAgJykKICApOwogIGNvbnNvbGUubG9nKGBcclxuRmluaXNoZWQgcXVlcnlpbmdgLCAuLi5hcmdzKTsKCiAgcmV0dXJuOwogIGNvbnNvbGUubG9nKCdkaWdpdDJjb2xvcjonLCBkaWdpdDJjb2xvcik7CiAgZm9yKGxldCB2YWx1ZSBvZiBbMzMwMDAsIDE4MDAsIDQ3MCwgMWU2LCA0LjdlM10pIHsKICAgIGNvbnNvbGUubG9nKCdHZXRDb2xvckJhbmRzJywgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMykpOwogICAgY29uc29sZS5sb2coJ0dldENvbG9yQmFuZHMnLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgICBjb25zb2xlLmxvZygnTnVtYmVyVG9WYWx1ZScsIE51bWJlclRvVmFsdWUodmFsdWUpKTsKICB9CiAgZm9yKGxldCB2YWx1ZSBvZiBbJzMzaycsICcxLjhrJywgJzQ3MCcsICcxLjhrJywgJzQ3aycsICcxME0nLCAnNC43ayddKSB7CiAgICBjb25zb2xlLmxvZyhgVmFsdWVUb051bWJlcigke3ZhbHVlfSlgLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSk7CiAgfQp9CgpVdGlsLmNhbGxNYWluKG1haW4sIHRydWUpOwoAAAAAAAAAADwOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AAAAAAAAAA1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					740,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAB0OAAAAAAAAHw4AAAAAAAAAAAAAewwAAAAAAAB9DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewwAAAAAAAAdDgAAAAAAAAAAAAAAAPC/"
				],
				[
					837,
					1,
					"insert",
					{
						"characters": "«"
					},
					"AQAAADMMAAAAAAAANAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwwAAAAAAAAzDAAAAAAAAAAAAAAAAPC/"
				],
				[
					838,
					1,
					"left_delete",
					null,
					"AQAAADMMAAAAAAAAMwwAAAAAAAACAAAAwqs",
					"AQAAAAAAAAABAAAANAwAAAAAAAA0DAAAAAAAAAAAAAAAAPC/"
				],
				[
					839,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAADMMAAAAAAAANAwAAAAAAAAAAAAANAwAAAAAAAA1DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwwAAAAAAAAzDAAAAAAAAAAAAAAAAPC/"
				],
				[
					871,
					1,
					"cut",
					null,
					"AQAAADEMAAAAAAAAMQwAAAAAAAACAAAAXG4",
					"AQAAAAAAAAABAAAAMwwAAAAAAAAxDAAAAAAAAAAAAAAAAPC/"
				],
				[
					874,
					1,
					"paste",
					null,
					"AQAAABgMAAAAAAAAGgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAwAAAAAAAAYDAAAAAAAAAAAAAAAAPC/"
				],
				[
					883,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABIDgAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9Cgpjb25zdCBTdWJzdENoYXJzID0gc3RyID0+IHN0ci5yZXBsYWNlKC9ceENFXHhCQy9nLCAnXHUwMEI1JykucmVwbGFjZSgvXHhDRVx4QTkvZywgJ1x1MjEyNicpOwoKYXN5bmMgZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoeyBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9IH0pOwogIGlmKGFyZ3MubGVuZ3RoID09IDApIGFyZ3MudW5zaGlmdCgnLi4vYW4tdHJvbmljcy9lYWdsZS9IZWFkcGhvbmUtQW1wbGlmaWVyLUNsYXNzQUItYWx0Mi5icmQnKTsKICBhcmdzID0gdW5pcXVlKGFyZ3MpOwogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFyZyk7CiAgICBjb25zb2xlLmxvZyhgbG9hZGVkICcke2FyZ30nIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IG1haW4gPSBkb2MubWFpbkVsZW1lbnQ7CiAgICBjb25zb2xlLmxvZygnbWFpbjonLCBtYWluKTsKICAgIGxldCBwYXJ0cyA9IFsuLi4obWFpbi5lbGVtZW50cyB8fCBtYWluLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFtuYW1lLCB0eXBlb2YgZWxlbS52YWx1ZSA9PSAnc3RyaW5nJyA/IFN1YnN0Q2hhcnMoZWxlbS52YWx1ZSkgOiBlbGVtLnZhbHVlXSk7CiAgICBjb25zb2xlLmxvZygncGFydHMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IGZhbHNlIH0pLCBPYmplY3QuZnJvbUVudHJpZXMocGFydHMpKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68bV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKHBhcnRzLmZpbHRlcigoW25hbWUsIHZhbHVlXSkgPT4gbWF0Y2hlcnMuc29tZShtID0+IG1bMF0udGVzdChuYW1lKSAmJiBtWzFdLnRlc3QodmFsdWUpKSkpOwogICAgLy9jb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZcdTAwN0YtXHVGRkZGXS9nLCAnJyk7CiAgICAgIGNvbXBvbmVudHNbbmFtZVswXV0ucHVzaCh2YWx1ZS5yZXBsYWNlKC9bzqlGSF0kLywgJycpLnJlcGxhY2UoL15cLi8sICcwLicpKTsKICAgIH0KICB9CiAgbGV0IGhpc3RvZ3JhbXMgPSB7fTsKICBsZXQgdmFsdWVzID0ge307CiAgLy9jb25zb2xlLmxvZygnY29tcG9uZW50cycsIGNvbXBvbmVudHMpOwogIC8qIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfSovCiAgZm9yKGxldCBrZXkgaW4gY29tcG9uZW50cykgewogICAgY29tcG9uZW50c1trZXldLnNvcnQoKTsKICAgIGxldCBoaXN0ID0gVXRpbC5oaXN0b2dyYW0oY29tcG9uZW50c1trZXldLCBuZXcgTWFwKCkpOwoKICAgIGhpc3RvZ3JhbXNba2V5XSA9IG5ldyBNYXAoWy4uLmhpc3RdLnNvcnQoKGEsIGIpID0+IGJbMV0gLSBhWzFdKSk7CiAgICB2YWx1ZXNba2V5XSA9IFsuLi5oaXN0b2dyYW1zW2tleV1dCiAgICAgIC5tYXAoKFt2YWx1ZSwgY291bnRdKSA9PiB7CiAgICAgICAgcmV0dXJuIFt2YWx1ZSB8fCBzY2llbnRpZmljKHZhbHVlKS50b1N0cmluZygpLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSwgY291bnRdOwogICAgICB9KQogICAgICAuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pCiAgICAgIC5tYXAoKFt2YWwsIHJhdCwgY291bnRdKSA9PiBbKHZhbCArICcnKS5wYWRTdGFydCg0LCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwgcmF0ID49IDEgPyBudW0yY29sb3IocmF0KSA6ICcnLCBgICDDlyAke2NvdW50fWBdLmpvaW4oJyAnKSk7CiAgfQogIC8vIGNvbnNvbGUubG9nKCdjb21wb25lbnRzOicsIGNvbXBvbmVudHMpOwoKICBjb25zb2xlLmxvZygKICAgICd2YWx1ZXM6XG4gICAnICsKICAgICAgT2JqZWN0LmVudHJpZXModmFsdWVzKQogICAgICAgIC5tYXAoKFtrZXksIGxpc3RdKSA9PiBgJHtrZXl9OlxuXHQke2xpc3Quam9pbignXG5cblx0Jyl9YCkKICAgICAgICAuam9pbignXG4gICAnKQogICk7CiAgY29uc29sZS5sb2coYFxyXG5GaW5pc2hlZCBxdWVyeWluZ2AsIC4uLmFyZ3MpOwoKICByZXR1cm47CiAvKiBjb25zb2xlLmxvZygnZGlnaXQyY29sb3I6JywgZGlnaXQyY29sb3IpOwogIGZvcihsZXQgdmFsdWUgb2YgWzMzMDAwLCAxODAwLCA0NzAsIDFlNiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDMpKTsKICAgIGNvbnNvbGUubG9nKCdHZXRDb2xvckJhbmRzJywgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMikpOwogICAgY29uc29sZS5sb2coJ051bWJlclRvVmFsdWUnLCBOdW1iZXJUb1ZhbHVlKHZhbHVlKSk7CiAgfQogIGZvcihsZXQgdmFsdWUgb2YgWyczM2snLCAnMS44aycsICc0NzAnLCAnMS44aycsICc0N2snLCAnMTBNJywgJzQuN2snXSkgewogICAgY29uc29sZS5sb2coYFZhbHVlVG9OdW1iZXIoJHt2YWx1ZX0pYCwgVmFsdWVUb051bWJlcih2YWx1ZSkpOwogIH0qLwp9CgpVdGlsLmNhbGxNYWluKG1haW4sIHRydWUpOwoAAAAAAAAAAEMOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AgAAAAAAADiCAAAAAAAAAAAAAAAAPC/"
				],
				[
					884,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABJDgAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9Cgpjb25zdCBTdWJzdENoYXJzID0gc3RyID0+IHN0ci5yZXBsYWNlKC9ceENFXHhCQy9nLCAnXHUwMEI1JykucmVwbGFjZSgvXHhDRVx4QTkvZywgJ1x1MjEyNicpOwoKYXN5bmMgZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoeyBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9IH0pOwogIGlmKGFyZ3MubGVuZ3RoID09IDApIGFyZ3MudW5zaGlmdCgnLi4vYW4tdHJvbmljcy9lYWdsZS9IZWFkcGhvbmUtQW1wbGlmaWVyLUNsYXNzQUItYWx0Mi5icmQnKTsKICBhcmdzID0gdW5pcXVlKGFyZ3MpOwogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFyZyk7CiAgICBjb25zb2xlLmxvZyhgbG9hZGVkICcke2FyZ30nIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IG1haW4gPSBkb2MubWFpbkVsZW1lbnQ7CiAgICBjb25zb2xlLmxvZygnbWFpbjonLCBtYWluKTsKICAgIGxldCBwYXJ0cyA9IFsuLi4obWFpbi5lbGVtZW50cyB8fCBtYWluLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFtuYW1lLCB0eXBlb2YgZWxlbS52YWx1ZSA9PSAnc3RyaW5nJyA/IFN1YnN0Q2hhcnMoZWxlbS52YWx1ZSkgOiBlbGVtLnZhbHVlXSk7CiAgICBjb25zb2xlLmxvZygncGFydHMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IGZhbHNlIH0pLCBPYmplY3QuZnJvbUVudHJpZXMocGFydHMpKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68bV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKHBhcnRzLmZpbHRlcigoW25hbWUsIHZhbHVlXSkgPT4gbWF0Y2hlcnMuc29tZShtID0+IG1bMF0udGVzdChuYW1lKSAmJiBtWzFdLnRlc3QodmFsdWUpKSkpOwogICAgLy9jb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZcdTAwN0YtXHVGRkZGXS9nLCAnJyk7CiAgICAgIGNvbXBvbmVudHNbbmFtZVswXV0ucHVzaCh2YWx1ZS5yZXBsYWNlKC9bzqlGSF0kLywgJycpLnJlcGxhY2UoL15cLi8sICcwLicpKTsKICAgIH0KICB9CiAgbGV0IGhpc3RvZ3JhbXMgPSB7fTsKICBsZXQgdmFsdWVzID0ge307CiAgLy9jb25zb2xlLmxvZygnY29tcG9uZW50cycsIGNvbXBvbmVudHMpOwogIC8qIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfSovCiAgZm9yKGxldCBrZXkgaW4gY29tcG9uZW50cykgewogICAgY29tcG9uZW50c1trZXldLnNvcnQoKTsKICAgIGxldCBoaXN0ID0gVXRpbC5oaXN0b2dyYW0oY29tcG9uZW50c1trZXldLCBuZXcgTWFwKCkpOwoKICAgIGhpc3RvZ3JhbXNba2V5XSA9IG5ldyBNYXAoWy4uLmhpc3RdLnNvcnQoKGEsIGIpID0+IGJbMV0gLSBhWzFdKSk7CiAgICB2YWx1ZXNba2V5XSA9IFsuLi5oaXN0b2dyYW1zW2tleV1dCiAgICAgIC5tYXAoKFt2YWx1ZSwgY291bnRdKSA9PiB7CiAgICAgICAgcmV0dXJuIFt2YWx1ZSB8fCBzY2llbnRpZmljKHZhbHVlKS50b1N0cmluZygpLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSwgY291bnRdOwogICAgICB9KQogICAgICAuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pCiAgICAgIC5tYXAoKFt2YWwsIHJhdCwgY291bnRdKSA9PiBbKHZhbCArICcnKS5wYWRTdGFydCg0LCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwgcmF0ID49IDEgPyBudW0yY29sb3IocmF0KSA6ICcnLCBgICDDlyAke2NvdW50fWBdLmpvaW4oJyAnKSk7CiAgfQogIC8vIGNvbnNvbGUubG9nKCdjb21wb25lbnRzOicsIGNvbXBvbmVudHMpOwoKICBjb25zb2xlLmxvZygKICAgICd2YWx1ZXM6XG4gICAnICsKICAgICAgT2JqZWN0LmVudHJpZXModmFsdWVzKQogICAgICAgIC5tYXAoKFtrZXksIGxpc3RdKSA9PiBgJHtrZXl9OlxuXHQke2xpc3Quam9pbignXG5cblx0Jyl9YCkKICAgICAgICAuam9pbignXG4gICAnKQogICk7CiAgY29uc29sZS5sb2coYFxyXG5GaW5pc2hlZCBxdWVyeWluZ2AsIC4uLmFyZ3MpOwoKICByZXR1cm47CiAgLyogY29uc29sZS5sb2coJ2RpZ2l0MmNvbG9yOicsIGRpZ2l0MmNvbG9yKTsKICBmb3IobGV0IHZhbHVlIG9mIFszMzAwMCwgMTgwMCwgNDcwLCAxZTYsIDQuN2UzXSkgewogICAgY29uc29sZS5sb2coJ0dldENvbG9yQmFuZHMnLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAzKSk7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDIpKTsKICAgIGNvbnNvbGUubG9nKCdOdW1iZXJUb1ZhbHVlJywgTnVtYmVyVG9WYWx1ZSh2YWx1ZSkpOwogIH0KICBmb3IobGV0IHZhbHVlIG9mIFsnMzNrJywgJzEuOGsnLCAnNDcwJywgJzEuOGsnLCAnNDdrJywgJzEwTScsICc0LjdrJ10pIHsKICAgIGNvbnNvbGUubG9nKGBWYWx1ZVRvTnVtYmVyKCR7dmFsdWV9KWAsIFZhbHVlVG9OdW1iZXIodmFsdWUpKTsKICB9Ki8KfQoKVXRpbC5jYWxsTWFpbihtYWluLCB0cnVlKTsKAAAAAAAAAABMDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AgAAAAAAADiCAAAAAAAAAAAAAAAAPC/"
				],
				[
					885,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABSDgAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9Cgpjb25zdCBTdWJzdENoYXJzID0gc3RyID0+IHN0ci5yZXBsYWNlKC9ceENFXHhCQy9nLCAnXHUwMEI1JykucmVwbGFjZSgvXHhDRVx4QTkvZywgJ1x1MjEyNicpOwoKYXN5bmMgZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoeyBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9IH0pOwogIGlmKGFyZ3MubGVuZ3RoID09IDApIGFyZ3MudW5zaGlmdCgnLi4vYW4tdHJvbmljcy9lYWdsZS9IZWFkcGhvbmUtQW1wbGlmaWVyLUNsYXNzQUItYWx0Mi5icmQnKTsKICBhcmdzID0gdW5pcXVlKGFyZ3MpOwogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFyZyk7CiAgICBjb25zb2xlLmxvZyhgbG9hZGVkICcke2FyZ30nIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IG1haW4gPSBkb2MubWFpbkVsZW1lbnQ7CiAgICBjb25zb2xlLmxvZygnbWFpbjonLCBtYWluKTsKICAgIGxldCBwYXJ0cyA9IFsuLi4obWFpbi5lbGVtZW50cyB8fCBtYWluLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFtuYW1lLCB0eXBlb2YgZWxlbS52YWx1ZSA9PSAnc3RyaW5nJyA/IFN1YnN0Q2hhcnMoZWxlbS52YWx1ZSkgOiBlbGVtLnZhbHVlXSk7CiAgICBjb25zb2xlLmxvZygncGFydHMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IGZhbHNlIH0pLCBPYmplY3QuZnJvbUVudHJpZXMocGFydHMpKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68bV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKHBhcnRzLmZpbHRlcigoW25hbWUsIHZhbHVlXSkgPT4gbWF0Y2hlcnMuc29tZShtID0+IG1bMF0udGVzdChuYW1lKSAmJiBtWzFdLnRlc3QodmFsdWUpKSkpOwogICAgLy9jb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZcdTAwN0YtXHVGRkZGXS9nLCAnJyk7CiAgICAgIGNvbXBvbmVudHNbbmFtZVswXV0ucHVzaCh2YWx1ZS5yZXBsYWNlKC9bzqlGSF0kLywgJycpLnJlcGxhY2UoL15cLi8sICcwLicpKTsKICAgIH0KICB9CiAgbGV0IGhpc3RvZ3JhbXMgPSB7fTsKICBsZXQgdmFsdWVzID0ge307CiAgLy9jb25zb2xlLmxvZygnY29tcG9uZW50cycsIGNvbXBvbmVudHMpOwogIC8qIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfSovCiAgZm9yKGxldCBrZXkgaW4gY29tcG9uZW50cykgewogICAgY29tcG9uZW50c1trZXldLnNvcnQoKTsKICAgIGxldCBoaXN0ID0gVXRpbC5oaXN0b2dyYW0oY29tcG9uZW50c1trZXldLCBuZXcgTWFwKCkpOwoKICAgIGhpc3RvZ3JhbXNba2V5XSA9IG5ldyBNYXAoWy4uLmhpc3RdLnNvcnQoKGEsIGIpID0+IGJbMV0gLSBhWzFdKSk7CiAgICB2YWx1ZXNba2V5XSA9IFsuLi5oaXN0b2dyYW1zW2tleV1dCiAgICAgIC5tYXAoKFt2YWx1ZSwgY291bnRdKSA9PiB7CiAgICAgICAgcmV0dXJuIFt2YWx1ZSB8fCBzY2llbnRpZmljKHZhbHVlKS50b1N0cmluZygpLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSwgY291bnRdOwogICAgICB9KQogICAgICAuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pCiAgICAgIC5tYXAoKFt2YWwsIHJhdCwgY291bnRdKSA9PiBbKHZhbCArICcnKS5wYWRTdGFydCg0LCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwgcmF0ID49IDEgPyBudW0yY29sb3IocmF0KSA6ICcnLCBgICDDlyAke2NvdW50fWBdLmpvaW4oJyAnKSk7CiAgfQogIC8vIGNvbnNvbGUubG9nKCdjb21wb25lbnRzOicsIGNvbXBvbmVudHMpOwoKICBjb25zb2xlLmxvZygKICAgICd2YWx1ZXM6XG4gICAnICsKICAgICAgT2JqZWN0LmVudHJpZXModmFsdWVzKQogICAgICAgIC5tYXAoKFtrZXksIGxpc3RdKSA9PiBgJHtrZXl9OlxuXHQke2xpc3Quam9pbignXG5cblx0Jyl9YCkKICAgICAgICAuam9pbignXG4gICAnKQogICk7CiAgY29uc29sZS5sb2coYFxyXG5GaW5pc2hlZCBxdWVyeWluZ2AsIC4uLmFyZ3MpOwoKICByZXR1cm47CiAgLyogY29uc29sZS5sb2coJ2RpZ2l0MmNvbG9yOicsIGRpZ2l0MmNvbG9yKTsKICBmb3IobGV0IHZhbHVlIG9mIFszMzAwMCwgMTgwMCwgNDcwLCAxZTYsIDQuN2UzXSkgewogICAgY29uc29sZS5sb2coJ0dldENvbG9yQmFuZHMnLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAzKSk7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDIpKTsKICAgIGNvbnNvbGUubG9nKCdOdW1iZXJUb1ZhbHVlJywgTnVtYmVyVG9WYWx1ZSh2YWx1ZSkpOwogIH0KICBmb3IobGV0IHZhbHVlIG9mIFsnMzNrJywgJzEuOGsnLCAnNDcwJywgJzEuOGsnLCAnNDdrJywgJzEwTScsICc0LjdrJ10pIHsKICAgIGNvbnNvbGUubG9nKGBWYWx1ZVRvTnVtYmVyKCR7dmFsdWV9KWAsIFZhbHVlVG9OdW1iZXIodmFsdWUpKTsKICB9Ki8KfQoKVXRpbC5jYWxsTWFpbihtYWluLCB0cnVlKTsKAAAAAAAAAABMDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AgAAAAAAADiCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1009,
					1,
					"paste",
					null,
					"AQAAAFcLAAAAAAAAZAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwsAAAAAAABXCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1010,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAGQLAAAAAAAAZQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAsAAAAAAABkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1011,
					1,
					"insert",
					{
						"characters": "rat"
					},
					"AwAAAGULAAAAAAAAZgsAAAAAAAAAAAAAZgsAAAAAAABnCwAAAAAAAAAAAABnCwAAAAAAAGgLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQsAAAAAAABlCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1012,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAGgLAAAAAAAAaQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAsAAAAAAABoCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1013,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkLAAAAAAAAagsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQsAAAAAAABpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1014,
					1,
					"left_delete",
					null,
					"AQAAAGkLAAAAAAAAaQsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAagsAAAAAAABqCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1015,
					2,
					"right_delete",
					null,
					"AgAAAGkLAAAAAAAAaQsAAAAAAAABAAAAJ2kLAAAAAAAAaQsAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAaQsAAAAAAABpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1016,
					1,
					"insert",
					{
						"characters": ".join('"
					},
					"BwAAAGkLAAAAAAAAagsAAAAAAAAAAAAAagsAAAAAAABrCwAAAAAAAAAAAABrCwAAAAAAAGwLAAAAAAAAAAAAAGwLAAAAAAAAbQsAAAAAAAAAAAAAbQsAAAAAAABuCwAAAAAAAAAAAABuCwAAAAAAAG8LAAAAAAAAAAAAAG8LAAAAAAAAcAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQsAAAAAAABpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1017,
					1,
					"insert",
					{
						"characters": "')"
					},
					"AgAAAHALAAAAAAAAcQsAAAAAAAAAAAAAcQsAAAAAAAByCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAsAAAAAAABwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1030,
					1,
					"insert",
					{
						"characters": "|"
					},
					"AQAAAHALAAAAAAAAcQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAsAAAAAAABwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1043,
					1,
					"cut",
					null,
					"AQAAAGkLAAAAAAAAaQsAAAAAAAAKAAAALmpvaW4oJ3wnKQ",
					"AQAAAAAAAAABAAAAaQsAAAAAAABzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1161,
					1,
					"insert",
					{
						"characters": "val"
					},
					"BAAAAGULAAAAAAAAZgsAAAAAAAAAAAAAZgsAAAAAAABmCwAAAAAAAAMAAAByYXRmCwAAAAAAAGcLAAAAAAAAAAAAAGcLAAAAAAAAaAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQsAAAAAAABoCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1227,
					1,
					"insert",
					{
						"characters": "rat"
					},
					"BAAAAGULAAAAAAAAZgsAAAAAAAAAAAAAZgsAAAAAAABmCwAAAAAAAAMAAAB2YWxmCwAAAAAAAGcLAAAAAAAAAAAAAGcLAAAAAAAAaAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQsAAAAAAABoCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1324,
					1,
					"insert",
					{
						"characters": "key,"
					},
					"BAAAAAsLAAAAAAAADAsAAAAAAAAAAAAADAsAAAAAAAANCwAAAAAAAAAAAAANCwAAAAAAAA4LAAAAAAAAAAAAAA4LAAAAAAAADwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwsAAAAAAAALCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1325,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA8LAAAAAAAAEAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwsAAAAAAAAPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1426,
					1,
					"cut",
					null,
					"AQAAAMcIAAAAAAAAxwgAAAAAAAAmAAAAY29uc29sZS5sb2coJ2NvbXBvbmVudHMnLCBjb21wb25lbnRzKTs",
					"AQAAAAAAAAABAAAAxwgAAAAAAADtCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1431,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHYJAAAAAAAAdwkAAAAAAAAAAAAAdwkAAAAAAAB7CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgkAAAAAAAB2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1432,
					1,
					"paste",
					null,
					"AQAAAHsJAAAAAAAAoQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewkAAAAAAAB7CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1440,
					1,
					"paste",
					null,
					"AgAAAJUJAAAAAAAApAkAAAAAAAAAAAAApAkAAAAAAACkCQAAAAAAAAoAAABjb21wb25lbnRz",
					"AQAAAAAAAAABAAAAlQkAAAAAAACfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1443,
					1,
					"left_delete",
					null,
					"AQAAAJEJAAAAAAAAkQkAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAkgkAAAAAAACSCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1446,
					1,
					"insert",
					{
						"characters": " ${key}`"
					},
					"CAAAAJEJAAAAAAAAkgkAAAAAAAAAAAAAkgkAAAAAAACTCQAAAAAAAAAAAACTCQAAAAAAAJQJAAAAAAAAAAAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAACWCQAAAAAAAJcJAAAAAAAAAAAAAJcJAAAAAAAAmAkAAAAAAAAAAAAAmAkAAAAAAACZCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQkAAAAAAACRCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1447,
					1,
					"right_delete",
					null,
					"AQAAAJkJAAAAAAAAmQkAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAmQkAAAAAAACZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1452,
					1,
					"insert_snippet",
					{
						"contents": "`${0:$SELECTION}`"
					},
					"AgAAAIcJAAAAAAAAhwkAAAAAAAABAAAAJ4cJAAAAAAAAigkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwkAAAAAAACICQAAAAAAAAAAAAAAAPC/"
				],
				[
					1453,
					2,
					"right_delete",
					null,
					"AgAAAIgJAAAAAAAAiAkAAAAAAAABAAAAJ4gJAAAAAAAAiAkAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAiAkAAAAAAACJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1481,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABkLAAAAAAAAGgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQsAAAAAAAAZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1482,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABoLAAAAAAAAHAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgsAAAAAAAAaCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1483,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAABsLAAAAAAAAHAsAAAAAAAAAAAAAHAsAAAAAAAAiCwAAAAAAAAAAAAAiCwAAAAAAACMLAAAAAAAAAAAAACMLAAAAAAAAKQsAAAAAAAAAAAAAHAsAAAAAAAAcCwAAAAAAAAYAAAAgICAgICAcCwAAAAAAACQLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwsAAAAAAAAbCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1484,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAACQLAAAAAAAAJQsAAAAAAAAAAAAAJQsAAAAAAAAtCwAAAAAAAAAAAAAcCwAAAAAAABwLAAAAAAAACAAAACAgICAgICAgJQsAAAAAAAAmCwAAAAAAAAAAAAAmCwAAAAAAACcLAAAAAAAAAAAAACcLAAAAAAAAKAsAAAAAAAAAAAAAKAsAAAAAAAApCwAAAAAAAAAAAAApCwAAAAAAACoLAAAAAAAAAAAAACoLAAAAAAAAKwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAsAAAAAAAAkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1485,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACsLAAAAAAAALAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwsAAAAAAAArCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1486,
					10,
					"right_delete",
					null,
					"CgAAACwLAAAAAAAALAsAAAAAAAABAAAACiwLAAAAAAAALAsAAAAAAAABAAAAICwLAAAAAAAALAsAAAAAAAABAAAAICwLAAAAAAAALAsAAAAAAAABAAAAICwLAAAAAAAALAsAAAAAAAABAAAAICwLAAAAAAAALAsAAAAAAAABAAAAICwLAAAAAAAALAsAAAAAAAABAAAAICwLAAAAAAAALAsAAAAAAAABAAAAfSwLAAAAAAAALAsAAAAAAAABAAAAICwLAAAAAAAALAsAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAALAsAAAAAAAAsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1488,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAACwLAAAAAAAALQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAsAAAAAAAAsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1491,
					1,
					"left_delete",
					null,
					"AQAAAKsLAAAAAAAAqwsAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAArAsAAAAAAACsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1493,
					1,
					"insert",
					{
						"characters": "});"
					},
					"AwAAAK0LAAAAAAAArgsAAAAAAAAAAAAArgsAAAAAAACvCwAAAAAAAAAAAACvCwAAAAAAALALAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQsAAAAAAACtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1502,
					1,
					"paste",
					null,
					"AQAAABwLAAAAAAAAXQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAsAAAAAAAAcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1513,
					1,
					"insert",
					{
						"characters": "rat"
					},
					"BAAAADELAAAAAAAAMgsAAAAAAAAAAAAAMgsAAAAAAAAyCwAAAAAAAAMAAABudW0yCwAAAAAAADMLAAAAAAAAAAAAADMLAAAAAAAANAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQsAAAAAAAA0CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1523,
					1,
					"insert",
					{
						"characters": "rat"
					},
					"BAAAAFELAAAAAAAAUgsAAAAAAAAAAAAAUgsAAAAAAABSCwAAAAAAAAMAAABudW1SCwAAAAAAAFMLAAAAAAAAAAAAAFMLAAAAAAAAVAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQsAAAAAAABUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1533,
					1,
					"insert",
					{
						"characters": "rat"
					},
					"BAAAAFgLAAAAAAAAWQsAAAAAAAAAAAAAWQsAAAAAAABZCwAAAAAAAAMAAABudW1ZCwAAAAAAAFoLAAAAAAAAAAAAAFoLAAAAAAAAWwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAsAAAAAAABbCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1562,
					1,
					"cut",
					null,
					"AQAAAK4LAAAAAAAArgsAAAAAAAAJAAAAbnVtMmNvbG9y",
					"AQAAAAAAAAABAAAArgsAAAAAAAC3CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1563,
					1,
					"paste",
					null,
					"AQAAAK4LAAAAAAAAtwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgsAAAAAAACuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1653,
					9,
					"left_delete",
					null,
					"CQAAADILAAAAAAAAMgsAAAAAAAAQAAAAYXQgPT0gJ251bWJlcicgPzELAAAAAAAAMQsAAAAAAAABAAAAcjALAAAAAAAAMAsAAAAAAAABAAAAIC8LAAAAAAAALwsAAAAAAAABAAAAZi4LAAAAAAAALgsAAAAAAAABAAAAby0LAAAAAAAALQsAAAAAAAABAAAAZSwLAAAAAAAALAsAAAAAAAABAAAAcCsLAAAAAAAAKwsAAAAAAAABAAAAeSoLAAAAAAAAKgsAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAMgsAAAAAAABCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1654,
					1,
					"insert",
					{
						"characters": "key"
					},
					"AwAAACoLAAAAAAAAKwsAAAAAAAAAAAAAKwsAAAAAAAAsCwAAAAAAAAAAAAAsCwAAAAAAAC0LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgsAAAAAAAAqCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1655,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAC0LAAAAAAAALwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQsAAAAAAAAtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1656,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAC4LAAAAAAAALwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgsAAAAAAAAuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1658,
					1,
					"insert",
					{
						"characters": "=="
					},
					"AgAAADALAAAAAAAAMQsAAAAAAAAAAAAAMQsAAAAAAAAyCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAsAAAAAAAAwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1659,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADILAAAAAAAANAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgsAAAAAAAAyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1660,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAADMLAAAAAAAANAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwsAAAAAAAAzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1662,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAADULAAAAAAAANgsAAAAAAAAAAAAANgsAAAAAAAA3CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQsAAAAAAAA1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1663,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADcLAAAAAAAAOAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwsAAAAAAAA3CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1664,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAADgLAAAAAAAAOQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAsAAAAAAAA4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1669,
					1,
					"insert",
					{
						"characters": "num2"
					},
					"BQAAAE8LAAAAAAAAUAsAAAAAAAAAAAAAUAsAAAAAAABQCwAAAAAAAAMAAAByYXRQCwAAAAAAAFELAAAAAAAAAAAAAFELAAAAAAAAUgsAAAAAAAAAAAAAUgsAAAAAAABTCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwsAAAAAAABSCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1670,
					1,
					"insert_completion",
					{
						"completion": "num2color",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "num2color"
					},
					"AgAAAE8LAAAAAAAATwsAAAAAAAAEAAAAbnVtMk8LAAAAAAAAWAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwsAAAAAAABTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1671,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFgLAAAAAAAAWgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAsAAAAAAABYCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1672,
					1,
					"insert",
					{
						"characters": "rat"
					},
					"AwAAAFkLAAAAAAAAWgsAAAAAAAAAAAAAWgsAAAAAAABbCwAAAAAAAAAAAABbCwAAAAAAAFwLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQsAAAAAAABZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1674,
					1,
					"left_delete",
					null,
					"AQAAAFwLAAAAAAAAXAsAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAXQsAAAAAAABdCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1675,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFwLAAAAAAAAXgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAsAAAAAAABcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1676,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAFwLAAAAAAAAXAsAAAAAAAABAAAAKFwLAAAAAAAAXAsAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAXQsAAAAAAABdCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1677,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFwLAAAAAAAAXQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAsAAAAAAABcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1694,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF8LAAAAAAAAYAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwsAAAAAAABfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1701,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKULAAAAAAAApgsAAAAAAAAAAAAApgsAAAAAAACuCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQsAAAAAAAClCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1704,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN8LAAAAAAAA4AsAAAAAAAAAAAAA4AsAAAAAAADpCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wsAAAAAAADfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1709,
					1,
					"insert",
					{
						"characters": "bands"
					},
					"BgAAAK8LAAAAAAAAsAsAAAAAAAAAAAAAsAsAAAAAAACwCwAAAAAAAC4AAAByYXQgPj0gMSA/IG51bTJjb2xvcihyYXQpIDogR2V0Q29sb3JCYW5kcyhyYXQpsAsAAAAAAACxCwAAAAAAAAAAAACxCwAAAAAAALILAAAAAAAAAAAAALILAAAAAAAAswsAAAAAAAAAAAAAswsAAAAAAAC0CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QsAAAAAAACvCwAAAAAAAAAAAAAAwFhA"
				],
				[
					1713,
					1,
					"left_delete",
					null,
					"AQAAAF4LAAAAAAAAXgsAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAXwsAAAAAAABfCwAAAAAAAAAAAAAAQGNA"
				],
				[
					1718,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADgLAAAAAAAAOQsAAAAAAAAAAAAAOQsAAAAAAAA5CwAAAAAAAAIAAAA/IA",
					"AQAAAAAAAAABAAAAOAsAAAAAAAA6CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1722,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAABULAAAAAAAAFgsAAAAAAAAAAAAAFgsAAAAAAAAcCwAAAAAAAAAAAAAWCwAAAAAAABYLAAAAAAAABgAAACAgICAgIBYLAAAAAAAAHgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQsAAAAAAAAVCwAAAAAAAAAAAAAA8HNA"
				],
				[
					1723,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADADgAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9Cgpjb25zdCBTdWJzdENoYXJzID0gc3RyID0+IHN0ci5yZXBsYWNlKC9ceENFXHhCQy9nLCAnXHUwMEI1JykucmVwbGFjZSgvXHhDRVx4QTkvZywgJ1x1MjEyNicpOwoKYXN5bmMgZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoeyBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9IH0pOwogIGlmKGFyZ3MubGVuZ3RoID09IDApIGFyZ3MudW5zaGlmdCgnLi4vYW4tdHJvbmljcy9lYWdsZS9IZWFkcGhvbmUtQW1wbGlmaWVyLUNsYXNzQUItYWx0Mi5icmQnKTsKICBhcmdzID0gdW5pcXVlKGFyZ3MpOwogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFyZyk7CiAgICBjb25zb2xlLmxvZyhgbG9hZGVkICcke2FyZ30nIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IG1haW4gPSBkb2MubWFpbkVsZW1lbnQ7CiAgICBjb25zb2xlLmxvZygnbWFpbjonLCBtYWluKTsKICAgIGxldCBwYXJ0cyA9IFsuLi4obWFpbi5lbGVtZW50cyB8fCBtYWluLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFtuYW1lLCB0eXBlb2YgZWxlbS52YWx1ZSA9PSAnc3RyaW5nJyA/IFN1YnN0Q2hhcnMoZWxlbS52YWx1ZSkgOiBlbGVtLnZhbHVlXSk7CiAgICBjb25zb2xlLmxvZygncGFydHMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IGZhbHNlIH0pLCBPYmplY3QuZnJvbUVudHJpZXMocGFydHMpKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68bV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKHBhcnRzLmZpbHRlcigoW25hbWUsIHZhbHVlXSkgPT4gbWF0Y2hlcnMuc29tZShtID0+IG1bMF0udGVzdChuYW1lKSAmJiBtWzFdLnRlc3QodmFsdWUpKSkpOwogICAgLy9jb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZcdTAwN0YtXHVGRkZGXS9nLCAnJyk7CiAgICAgIGNvbXBvbmVudHNbbmFtZVswXV0ucHVzaCh2YWx1ZS5yZXBsYWNlKC9bzqlGSF0kLywgJycpLnJlcGxhY2UoL15cLi8sICcwLicpKTsKICAgIH0KICB9CiAgbGV0IGhpc3RvZ3JhbXMgPSB7fTsKICBsZXQgdmFsdWVzID0ge307CiAgLy8KICAvKiBmb3IobGV0IHZhbHVlIG9mIFsyLjIsIDQuN2UzXSkgewogICAgY29uc29sZS5sb2coYEdldENvbG9yQmFuZHMoJHt2YWx1ZX0sIDMpYCwgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMikpOwogIH0qLwogIGZvcihsZXQga2V5IGluIGNvbXBvbmVudHMpIHsKICAgIGNvbXBvbmVudHNba2V5XS5zb3J0KCk7CiAgICBjb25zb2xlLmxvZyhgY29tcG9uZW50ICR7a2V5fWAsIGNvbXBvbmVudHNba2V5XSk7CiAgICBsZXQgaGlzdCA9IFV0aWwuaGlzdG9ncmFtKGNvbXBvbmVudHNba2V5XSwgbmV3IE1hcCgpKTsKCiAgICBoaXN0b2dyYW1zW2tleV0gPSBuZXcgTWFwKFsuLi5oaXN0XS5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSkpOwogICAgdmFsdWVzW2tleV0gPSBbLi4uaGlzdG9ncmFtc1trZXldXQogICAgICAubWFwKChbdmFsdWUsIGNvdW50XSkgPT4gewogICAgICAgIHJldHVybiBbdmFsdWUgfHwgc2NpZW50aWZpYyh2YWx1ZSkudG9TdHJpbmcoKSwgVmFsdWVUb051bWJlcih2YWx1ZSksIGNvdW50XTsKICAgICAgfSkKICAgICAgLnNvcnQoKGEsIGIpID0+IGFbMV0gLSBiWzFdKQogICAgICAubWFwKChbdmFsLCByYXQsIGNvdW50XQogICAgICAgICkgPT4gewogIGxldCBiYW5kcyA9IGtleVswXT09J0MnID8gIEdldENvbG9yQmFuZHMocmF0KSA6IG51bTJjb2xvcihyYXQpOwoKICAgICAgICByZXR1cm4gW2tleSwgKHZhbCArICcnKS5wYWRTdGFydCg0LCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwKICAgICAgICAgYmFuZHMsIAogICAgICAgICBgICDDlyAke2NvdW50fWBdLmpvaW4oJyAnKTsKfSk7ICB9CiAgLy8gY29uc29sZS5sb2coJ2NvbXBvbmVudHM6JywgY29tcG9uZW50cyk7CgogIGNvbnNvbGUubG9nKAogICAgJ3ZhbHVlczpcbiAgICcgKwogICAgICBPYmplY3QuZW50cmllcyh2YWx1ZXMpCiAgICAgICAgLm1hcCgoW2tleSwgbGlzdF0pID0+IGAke2tleX06XG5cdCR7bGlzdC5qb2luKCdcblxuXHQnKX1gKQogICAgICAgIC5qb2luKCdcbiAgICcpCiAgKTsKICBjb25zb2xlLmxvZyhgXHJcbkZpbmlzaGVkIHF1ZXJ5aW5nYCwgLi4uYXJncyk7CgogIHJldHVybjsKICAvKiBjb25zb2xlLmxvZygnZGlnaXQyY29sb3I6JywgZGlnaXQyY29sb3IpOwogIGZvcihsZXQgdmFsdWUgb2YgWzMzMDAwLCAxODAwLCA0NzAsIDFlNiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDMpKTsKICAgIGNvbnNvbGUubG9nKCdHZXRDb2xvckJhbmRzJywgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMikpOwogICAgY29uc29sZS5sb2coJ051bWJlclRvVmFsdWUnLCBOdW1iZXJUb1ZhbHVlKHZhbHVlKSk7CiAgfQogIGZvcihsZXQgdmFsdWUgb2YgWyczM2snLCAnMS44aycsICc0NzAnLCAnMS44aycsICc0N2snLCAnMTBNJywgJzQuN2snXSkgewogICAgY29uc29sZS5sb2coYFZhbHVlVG9OdW1iZXIoJHt2YWx1ZX0pYCwgVmFsdWVUb051bWJlcih2YWx1ZSkpOwogIH0qLwp9CgpVdGlsLmNhbGxNYWluKG1haW4sIHRydWUpOwoAAAAAAAAAAKwOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgsAAAAAAAAeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1736,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAFULAAAAAAAAVgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQsAAAAAAABVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1739,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAGQLAAAAAAAAZQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAsAAAAAAABkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1742,
					1,
					"insert",
					{
						"characters": ".join('"
					},
					"BwAAALILAAAAAAAAswsAAAAAAAAAAAAAswsAAAAAAAC0CwAAAAAAAAAAAAC0CwAAAAAAALULAAAAAAAAAAAAALULAAAAAAAAtgsAAAAAAAAAAAAAtgsAAAAAAAC3CwAAAAAAAAAAAAC3CwAAAAAAALgLAAAAAAAAAAAAALgLAAAAAAAAuQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgsAAAAAAACyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1743,
					1,
					"insert",
					{
						"characters": " ')"
					},
					"AwAAALkLAAAAAAAAugsAAAAAAAAAAAAAugsAAAAAAAC7CwAAAAAAAAAAAAC7CwAAAAAAALwLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQsAAAAAAAC5CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1774,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFELAAAAAAAAUgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQsAAAAAAABRCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1775,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAFILAAAAAAAAUwsAAAAAAAAAAAAAUwsAAAAAAABUCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgsAAAAAAABSCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1776,
					1,
					"left_delete",
					null,
					"AQAAAFMLAAAAAAAAUwsAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAVAsAAAAAAABUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1777,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAFMLAAAAAAAAVQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwsAAAAAAABTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1778,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAFQLAAAAAAAAVQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAsAAAAAAABUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1779,
					1,
					"left_delete",
					null,
					"AQAAAFQLAAAAAAAAVAsAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAVQsAAAAAAABVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1780,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAFMLAAAAAAAAUwsAAAAAAAABAAAAJ1MLAAAAAAAAUwsAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAVAsAAAAAAABUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1781,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAFMLAAAAAAAAVAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwsAAAAAAABTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1786,
					1,
					"left_delete",
					null,
					"AQAAAFMLAAAAAAAAUwsAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAVAsAAAAAAABUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1787,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAFMLAAAAAAAAVAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwsAAAAAAABTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1793,
					1,
					"insert",
					{
						"characters": "\nconysol"
					},
					"CgAAABsLAAAAAAAAHAsAAAAAAAAAAAAAHAsAAAAAAAAiCwAAAAAAAAAAAAAiCwAAAAAAACQLAAAAAAAAAAAAACQLAAAAAAAAJQsAAAAAAAAAAAAAJQsAAAAAAAAmCwAAAAAAAAAAAAAmCwAAAAAAACcLAAAAAAAAAAAAACcLAAAAAAAAKAsAAAAAAAAAAAAAKAsAAAAAAAApCwAAAAAAAAAAAAApCwAAAAAAACoLAAAAAAAAAAAAACoLAAAAAAAAKwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwsAAAAAAAAbCwAAAAAAAAAAAAAAQINA"
				],
				[
					1794,
					4,
					"left_delete",
					null,
					"BAAAACoLAAAAAAAAKgsAAAAAAAABAAAAbCkLAAAAAAAAKQsAAAAAAAABAAAAbygLAAAAAAAAKAsAAAAAAAABAAAAcycLAAAAAAAAJwsAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAKwsAAAAAAAArCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1795,
					1,
					"insert",
					{
						"characters": "sole.log"
					},
					"CAAAACcLAAAAAAAAKAsAAAAAAAAAAAAAKAsAAAAAAAApCwAAAAAAAAAAAAApCwAAAAAAACoLAAAAAAAAAAAAACoLAAAAAAAAKwsAAAAAAAAAAAAAKwsAAAAAAAAsCwAAAAAAAAAAAAAsCwAAAAAAAC0LAAAAAAAAAAAAAC0LAAAAAAAALgsAAAAAAAAAAAAALgsAAAAAAAAvCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwsAAAAAAAAnCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1796,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC8LAAAAAAAAMQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwsAAAAAAAAvCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1797,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADALAAAAAAAAMgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAsAAAAAAAAwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1798,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAADELAAAAAAAAMgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQsAAAAAAAAxCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1800,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADMLAAAAAAAANAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwsAAAAAAAAzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1801,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADQLAAAAAAAANQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAsAAAAAAAA0CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1802,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADULAAAAAAAANwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQsAAAAAAAA1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1803,
					1,
					"insert",
					{
						"characters": "val,rat,count"
					},
					"DQAAADYLAAAAAAAANwsAAAAAAAAAAAAANwsAAAAAAAA4CwAAAAAAAAAAAAA4CwAAAAAAADkLAAAAAAAAAAAAADkLAAAAAAAAOgsAAAAAAAAAAAAAOgsAAAAAAAA7CwAAAAAAAAAAAAA7CwAAAAAAADwLAAAAAAAAAAAAADwLAAAAAAAAPQsAAAAAAAAAAAAAPQsAAAAAAAA+CwAAAAAAAAAAAAA+CwAAAAAAAD8LAAAAAAAAAAAAAD8LAAAAAAAAQAsAAAAAAAAAAAAAQAsAAAAAAABBCwAAAAAAAAAAAABBCwAAAAAAAEILAAAAAAAAAAAAAEILAAAAAAAAQwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgsAAAAAAAA2CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1805,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEULAAAAAAAARgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQsAAAAAAABFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1860,
					1,
					"paste",
					null,
					"AQAAAJULAAAAAAAAvwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQsAAAAAAACVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1866,
					1,
					"insert",
					{
						"characters": "ban"
					},
					"BAAAAKkLAAAAAAAAqgsAAAAAAAAAAAAAqgsAAAAAAACqCwAAAAAAAA0AAAB2YWwscmF0LGNvdW50qgsAAAAAAACrCwAAAAAAAAAAAACrCwAAAAAAAKwLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgsAAAAAAACpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1867,
					1,
					"insert_completion",
					{
						"completion": "bands",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "bands"
					},
					"AgAAAKkLAAAAAAAAqQsAAAAAAAADAAAAYmFuqQsAAAAAAACuCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAsAAAAAAACsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1886,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAODwAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9Cgpjb25zdCBTdWJzdENoYXJzID0gc3RyID0+IHN0ci5yZXBsYWNlKC9ceENFXHhCQy9nLCAnXHUwMEI1JykucmVwbGFjZSgvXHhDRVx4QTkvZywgJ1x1MjEyNicpOwoKYXN5bmMgZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoeyBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9IH0pOwogIGlmKGFyZ3MubGVuZ3RoID09IDApIGFyZ3MudW5zaGlmdCgnLi4vYW4tdHJvbmljcy9lYWdsZS9IZWFkcGhvbmUtQW1wbGlmaWVyLUNsYXNzQUItYWx0Mi5icmQnKTsKICBhcmdzID0gdW5pcXVlKGFyZ3MpOwogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFyZyk7CiAgICBjb25zb2xlLmxvZyhgbG9hZGVkICcke2FyZ30nIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IG1haW4gPSBkb2MubWFpbkVsZW1lbnQ7CiAgICBjb25zb2xlLmxvZygnbWFpbjonLCBtYWluKTsKICAgIGxldCBwYXJ0cyA9IFsuLi4obWFpbi5lbGVtZW50cyB8fCBtYWluLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFtuYW1lLCB0eXBlb2YgZWxlbS52YWx1ZSA9PSAnc3RyaW5nJyA/IFN1YnN0Q2hhcnMoZWxlbS52YWx1ZSkgOiBlbGVtLnZhbHVlXSk7CiAgICBjb25zb2xlLmxvZygncGFydHMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IGZhbHNlIH0pLCBPYmplY3QuZnJvbUVudHJpZXMocGFydHMpKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68bV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKHBhcnRzLmZpbHRlcigoW25hbWUsIHZhbHVlXSkgPT4gbWF0Y2hlcnMuc29tZShtID0+IG1bMF0udGVzdChuYW1lKSAmJiBtWzFdLnRlc3QodmFsdWUpKSkpOwogICAgLy9jb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZcdTAwN0YtXHVGRkZGXS9nLCAnJyk7CiAgICAgIGNvbXBvbmVudHNbbmFtZVswXV0ucHVzaCh2YWx1ZS5yZXBsYWNlKC9bzqlGSF0kLywgJycpLnJlcGxhY2UoL15cLi8sICcwLicpKTsKICAgIH0KICB9CiAgbGV0IGhpc3RvZ3JhbXMgPSB7fTsKICBsZXQgdmFsdWVzID0ge307CiAgLy8KICAvKiBmb3IobGV0IHZhbHVlIG9mIFsyLjIsIDQuN2UzXSkgewogICAgY29uc29sZS5sb2coYEdldENvbG9yQmFuZHMoJHt2YWx1ZX0sIDMpYCwgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMikpOwogIH0qLwogIGZvcihsZXQga2V5IGluIGNvbXBvbmVudHMpIHsKICAgIGNvbXBvbmVudHNba2V5XS5zb3J0KCk7CiAgICBjb25zb2xlLmxvZyhgY29tcG9uZW50ICR7a2V5fWAsIGNvbXBvbmVudHNba2V5XSk7CiAgICBsZXQgaGlzdCA9IFV0aWwuaGlzdG9ncmFtKGNvbXBvbmVudHNba2V5XSwgbmV3IE1hcCgpKTsKCiAgICBoaXN0b2dyYW1zW2tleV0gPSBuZXcgTWFwKFsuLi5oaXN0XS5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSkpOwogICAgdmFsdWVzW2tleV0gPSBbLi4uaGlzdG9ncmFtc1trZXldXQogICAgICAubWFwKChbdmFsdWUsIGNvdW50XSkgPT4gewogICAgICAgIHJldHVybiBbdmFsdWUgfHwgc2NpZW50aWZpYyh2YWx1ZSkudG9TdHJpbmcoKSwgVmFsdWVUb051bWJlcih2YWx1ZSksIGNvdW50XTsKICAgICAgfSkKICAgICAgLnNvcnQoKGEsIGIpID0+IGFbMV0gLSBiWzFdKQogICAgICAubWFwKChbdmFsLCByYXQsIGNvdW50XSkgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCdjJywge3ZhbCxyYXQsY291bnR9KTsKICAgICAgICBsZXQgYmFuZHMgPSBrZXlbMF0gPT0gJ0MnID8gR2V0Q29sb3JCYW5kcyhyYXQsIDMpIDogW251bTJjb2xvcihyYXQpXTsKICBjb25zb2xlLmxvZygnYycsIHtiYW5kc30pOwogICAgIAogICAgICAgIHJldHVybiBba2V5LCAodmFsICsgJycpLnBhZFN0YXJ0KDQsICcgJykgKyBVbml0Rm9yTmFtZShrZXkpLCBiYW5kcy5qb2luKCcgJyksIGAgIMOXICR7Y291bnR9YF0uam9pbignICcpOwogICAgICB9KTsKICB9CiAgLy8gY29uc29sZS5sb2coJ2NvbXBvbmVudHM6JywgY29tcG9uZW50cyk7CgogIGNvbnNvbGUubG9nKAogICAgJ3ZhbHVlczpcbiAgICcgKwogICAgICBPYmplY3QuZW50cmllcyh2YWx1ZXMpCiAgICAgICAgLm1hcCgoW2tleSwgbGlzdF0pID0+IGAke2tleX06XG5cdCR7bGlzdC5qb2luKCdcblxuXHQnKX1gKQogICAgICAgIC5qb2luKCdcbiAgICcpCiAgKTsKICBjb25zb2xlLmxvZyhgXHJcbkZpbmlzaGVkIHF1ZXJ5aW5nYCwgLi4uYXJncyk7CgogIHJldHVybjsKICAvKiBjb25zb2xlLmxvZygnZGlnaXQyY29sb3I6JywgZGlnaXQyY29sb3IpOwogIGZvcihsZXQgdmFsdWUgb2YgWzMzMDAwLCAxODAwLCA0NzAsIDFlNiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDMpKTsKICAgIGNvbnNvbGUubG9nKCdHZXRDb2xvckJhbmRzJywgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMikpOwogICAgY29uc29sZS5sb2coJ051bWJlclRvVmFsdWUnLCBOdW1iZXJUb1ZhbHVlKHZhbHVlKSk7CiAgfQogIGZvcihsZXQgdmFsdWUgb2YgWyczM2snLCAnMS44aycsICc0NzAnLCAnMS44aycsICc0N2snLCAnMTBNJywgJzQuN2snXSkgewogICAgY29uc29sZS5sb2coYFZhbHVlVG9OdW1iZXIoJHt2YWx1ZX0pYCwgVmFsdWVUb051bWJlcih2YWx1ZSkpOwogIH0qLwp9CgpVdGlsLmNhbGxNYWluKG1haW4sIHRydWUpOwoAAAAAAAAAAA8PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QAAAAAAAAA+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					1893,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AgAAAIIBAAAAAAAAgwEAAAAAAAAAAAAAgwEAAAAAAACDAQAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAAggEAAAAAAACDAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1913,
					1,
					"insert",
					{
						"characters": "*\""
					},
					"AgAAAIALAAAAAAAAgQsAAAAAAAAAAAAAgQsAAAAAAACCCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAsAAAAAAACACwAAAAAAAAAAAAAAAPC/"
				],
				[
					1914,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIILAAAAAAAAgwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggsAAAAAAACCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1915,
					1,
					"paste",
					null,
					"AQAAAIMLAAAAAAAAjQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwsAAAAAAACDCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1918,
					2,
					"left_delete",
					null,
					"AgAAAIILAAAAAAAAggsAAAAAAAABAAAAIIELAAAAAAAAgQsAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAgwsAAAAAAACDCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1928,
					1,
					"cut",
					null,
					"AQAAAIELAAAAAAAAgQsAAAAAAAAKAAAAUGFydFNjYWxlcw",
					"AQAAAAAAAAABAAAAgQsAAAAAAACLCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1929,
					1,
					"insert",
					{
						"characters": "scal"
					},
					"BAAAAIELAAAAAAAAggsAAAAAAAAAAAAAggsAAAAAAACDCwAAAAAAAAAAAACDCwAAAAAAAIQLAAAAAAAAAAAAAIQLAAAAAAAAhQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQsAAAAAAACBCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1931,
					1,
					"insert",
					{
						"characters": "\nconst"
					},
					"BwAAAEoLAAAAAAAASwsAAAAAAAAAAAAASwsAAAAAAABTCwAAAAAAAAAAAABTCwAAAAAAAFQLAAAAAAAAAAAAAFQLAAAAAAAAVQsAAAAAAAAAAAAAVQsAAAAAAABWCwAAAAAAAAAAAABWCwAAAAAAAFcLAAAAAAAAAAAAAFcLAAAAAAAAWAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgsAAAAAAABKCwAAAAAAAAAAAAAA8INA"
				],
				[
					1932,
					1,
					"insert",
					{
						"characters": " scal"
					},
					"BQAAAFgLAAAAAAAAWQsAAAAAAAAAAAAAWQsAAAAAAABaCwAAAAAAAAAAAABaCwAAAAAAAFsLAAAAAAAAAAAAAFsLAAAAAAAAXAsAAAAAAAAAAAAAXAsAAAAAAABdCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAsAAAAAAABYCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1933,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAF0LAAAAAAAAXgsAAAAAAAAAAAAAXgsAAAAAAABfCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQsAAAAAAABdCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1934,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8LAAAAAAAAYAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwsAAAAAAABfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1935,
					1,
					"paste",
					null,
					"AQAAAGALAAAAAAAAagsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAsAAAAAAABgCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1936,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGoLAAAAAAAAbAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagsAAAAAAABqCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1937,
					1,
					"insert",
					{
						"characters": "key]"
					},
					"BAAAAGsLAAAAAAAAbAsAAAAAAAAAAAAAbAsAAAAAAABtCwAAAAAAAAAAAABtCwAAAAAAAG4LAAAAAAAAAAAAAG4LAAAAAAAAbwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawsAAAAAAABrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1938,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAG8LAAAAAAAAcQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwsAAAAAAABvCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1939,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAG8LAAAAAAAAbwsAAAAAAAABAAAAW28LAAAAAAAAbwsAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAcAsAAAAAAABwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1940,
					1,
					"left_delete",
					null,
					"AQAAAG4LAAAAAAAAbgsAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAbwsAAAAAAABvCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1941,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAG4LAAAAAAAAcAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgsAAAAAAABuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1942,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAG8LAAAAAAAAcAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwsAAAAAAABvCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1944,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHILAAAAAAAAcwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgsAAAAAAAByCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1945,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHMLAAAAAAAAdAsAAAAAAAAAAAAAdAsAAAAAAAB8CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwsAAAAAAABzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1955,
					1,
					"left_delete",
					null,
					"AgAAAGoLAAAAAAAAagsAAAAAAAABAAAAKHMLAAAAAAAAcwsAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAAawsAAAAAAABrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1956,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAGoLAAAAAAAAawsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagsAAAAAAABqCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1959,
					1,
					"left_delete",
					null,
					"AQAAAHELAAAAAAAAcQsAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAcgsAAAAAAAByCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1960,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAHELAAAAAAAAcgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQsAAAAAAABxCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1983,
					1,
					"paste",
					null,
					"AQAAAMQLAAAAAAAAyQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAsAAAAAAADECwAAAAAAAAAAAAAAAPC/"
				],
				[
					1991,
					2,
					"left_delete",
					null,
					"AgAAAIMBAAAAAAAAgwEAAAAAAAABAAAAIIIBAAAAAAAAggEAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAhAEAAAAAAACEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1992,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIIBAAAAAAAAgwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggEAAAAAAACCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1999,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABoBAAAAAAAAGwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgEAAAAAAAAaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2000,
					1,
					"insert",
					{
						"characters": " Pèar"
					},
					"BQAAABsBAAAAAAAAHAEAAAAAAAAAAAAAHAEAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAgAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwEAAAAAAAAbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2001,
					3,
					"left_delete",
					null,
					"AwAAAB8BAAAAAAAAHwEAAAAAAAABAAAAch4BAAAAAAAAHgEAAAAAAAABAAAAYR0BAAAAAAAAHQEAAAAAAAACAAAAw6g",
					"AQAAAAAAAAABAAAAIAEAAAAAAAAgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2002,
					1,
					"insert",
					{
						"characters": "art"
					},
					"AwAAAB0BAAAAAAAAHgEAAAAAAAAAAAAAHgEAAAAAAAAfAQAAAAAAAAAAAAAfAQAAAAAAACABAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQEAAAAAAAAdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2003,
					1,
					"insert_completion",
					{
						"completion": "PartScales",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "PartScales"
					},
					"AgAAABwBAAAAAAAAHAEAAAAAAAAEAAAAUGFydBwBAAAAAAAAJgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAEAAAAAAAAgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2015,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAALwLAAAAAAAAvQsAAAAAAAAAAAAAvQsAAAAAAAC9CwAAAAAAAAEAAAAz",
					"AQAAAAAAAAABAAAAvAsAAAAAAAC9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2050,
					1,
					"insert",
					{
						"characters": "20"
					},
					"AwAAACcMAAAAAAAAKAwAAAAAAAAAAAAAKAwAAAAAAAAoDAAAAAAAAAEAAAA0KAwAAAAAAAApDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwwAAAAAAAAoDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2062,
					1,
					"insert",
					{
						"characters": "10"
					},
					"AwAAACcMAAAAAAAAKAwAAAAAAAAAAAAAKAwAAAAAAAAoDAAAAAAAAAIAAAAyMCgMAAAAAAAAKQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwwAAAAAAAApDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2075,
					1,
					"insert",
					{
						"characters": "sui"
					},
					"AwAAAB4MAAAAAAAAHwwAAAAAAAAAAAAAHwwAAAAAAAAgDAAAAAAAAAAAAAAgDAAAAAAAACEMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgwAAAAAAAAeDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2076,
					2,
					"left_delete",
					null,
					"AgAAACAMAAAAAAAAIAwAAAAAAAABAAAAaR8MAAAAAAAAHwwAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAIQwAAAAAAAAhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2077,
					1,
					"left_delete",
					null,
					"AQAAAB4MAAAAAAAAHgwAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAHwwAAAAAAAAfDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2078,
					1,
					"insert",
					{
						"characters": "ys"
					},
					"AgAAAB4MAAAAAAAAHwwAAAAAAAAAAAAAHwwAAAAAAAAgDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgwAAAAAAAAeDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2079,
					2,
					"left_delete",
					null,
					"AgAAAB8MAAAAAAAAHwwAAAAAAAABAAAAcx4MAAAAAAAAHgwAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAIAwAAAAAAAAgDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2080,
					1,
					"insert",
					{
						"characters": "substring(0,10)"
					},
					"DwAAAB4MAAAAAAAAHwwAAAAAAAAAAAAAHwwAAAAAAAAgDAAAAAAAAAAAAAAgDAAAAAAAACEMAAAAAAAAAAAAACEMAAAAAAAAIgwAAAAAAAAAAAAAIgwAAAAAAAAjDAAAAAAAAAAAAAAjDAAAAAAAACQMAAAAAAAAAAAAACQMAAAAAAAAJQwAAAAAAAAAAAAAJQwAAAAAAAAmDAAAAAAAAAAAAAAmDAAAAAAAACcMAAAAAAAAAAAAACcMAAAAAAAAKAwAAAAAAAAAAAAAKAwAAAAAAAApDAAAAAAAAAAAAAApDAAAAAAAACoMAAAAAAAAAAAAACoMAAAAAAAAKwwAAAAAAAAAAAAAKwwAAAAAAAAsDAAAAAAAAAAAAAAsDAAAAAAAAC0MAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgwAAAAAAAAeDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2081,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAC0MAAAAAAAALgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQwAAAAAAAAtDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2141,
					1,
					"insert",
					{
						"characters": ".am"
					},
					"AwAAAL4LAAAAAAAAvwsAAAAAAAAAAAAAvwsAAAAAAADACwAAAAAAAAAAAADACwAAAAAAAMELAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgsAAAAAAAC+CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2142,
					2,
					"left_delete",
					null,
					"AgAAAMALAAAAAAAAwAsAAAAAAAABAAAAbb8LAAAAAAAAvwsAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAwQsAAAAAAADBCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2143,
					1,
					"insert",
					{
						"characters": "map)b"
					},
					"BQAAAL8LAAAAAAAAwAsAAAAAAAAAAAAAwAsAAAAAAADBCwAAAAAAAAAAAADBCwAAAAAAAMILAAAAAAAAAAAAAMILAAAAAAAAwwsAAAAAAAAAAAAAwwsAAAAAAADECwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwsAAAAAAAC/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2144,
					2,
					"left_delete",
					null,
					"AgAAAMMLAAAAAAAAwwsAAAAAAAABAAAAYsILAAAAAAAAwgsAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAxAsAAAAAAADECwAAAAAAAAAAAAAAAPC/"
				],
				[
					2145,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMILAAAAAAAAxAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgsAAAAAAADCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2146,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAMMLAAAAAAAAxAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwsAAAAAAADDCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2147,
					1,
					"insert",
					{
						"characters": "  =>"
					},
					"BAAAAMQLAAAAAAAAxQsAAAAAAAAAAAAAxQsAAAAAAADGCwAAAAAAAAAAAADGCwAAAAAAAMcLAAAAAAAAAAAAAMcLAAAAAAAAyAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAsAAAAAAADECwAAAAAAAAAAAAAAAPC/"
				],
				[
					2148,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMgLAAAAAAAAyQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAsAAAAAAADICwAAAAAAAAAAAAAAAPC/"
				],
				[
					2149,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAMkLAAAAAAAAywsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQsAAAAAAADJCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2150,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAMoLAAAAAAAAywsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygsAAAAAAADKCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2151,
					1,
					"left_delete",
					null,
					"AQAAAMoLAAAAAAAAygsAAAAAAAABAAAAJA",
					"AQAAAAAAAAABAAAAywsAAAAAAADLCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2152,
					1,
					"insert",
					{
						"characters": "[${"
					},
					"AwAAAMoLAAAAAAAAywsAAAAAAAAAAAAAywsAAAAAAADMCwAAAAAAAAAAAADMCwAAAAAAAM0LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygsAAAAAAADKCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2153,
					2,
					"left_delete",
					null,
					"AgAAAMwLAAAAAAAAzAsAAAAAAAABAAAAe8sLAAAAAAAAywsAAAAAAAABAAAAJA",
					"AQAAAAAAAAABAAAAzQsAAAAAAADNCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2154,
					1,
					"insert",
					{
						"characters": "${b}]"
					},
					"BQAAAMsLAAAAAAAAzAsAAAAAAAAAAAAAzAsAAAAAAADNCwAAAAAAAAAAAADNCwAAAAAAAM4LAAAAAAAAAAAAAM4LAAAAAAAAzwsAAAAAAAAAAAAAzwsAAAAAAADQCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywsAAAAAAADLCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2156,
					1,
					"insert",
					{
						"characters": ",."
					},
					"AgAAANILAAAAAAAA0wsAAAAAAAAAAAAA0wsAAAAAAADUCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gsAAAAAAADSCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2157,
					2,
					"left_delete",
					null,
					"AgAAANMLAAAAAAAA0wsAAAAAAAABAAAALtILAAAAAAAA0gsAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA1AsAAAAAAADUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2184,
					1,
					"paste",
					null,
					"AQAAAK0GAAAAAAAAswYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQYAAAAAAACtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2191,
					1,
					"paste",
					null,
					"AQAAAOcGAAAAAAAA7QYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wYAAAAAAADnBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2213,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACFDwAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlLCBQYXJ0U2NhbGVzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3Isc2NpZW50aWZpYyB9IGZyb20gJy4vZWFnbGUtY29tbWFuZHMuanMnOwoKbGV0IGRvY3VtZW50cyA9IFtdOwoKZnVuY3Rpb24geG1saXplKG9iaiwgZGVwdGggPSAyKSB7CiAgcmV0dXJuIG9iai50b1hNTCA/IG9iai50b1hNTCgpLnJlcGxhY2UoLz5ccyo8L2csICc+XG4gICAgPCcpIDogRWFnbGVEb2N1bWVudC50b1hNTChvYmosIGRlcHRoKS5zcGxpdCgvXG4vZylbMF07Cn0KCmNvbnN0IFN1YnN0Q2hhcnMgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1x4Q0VceEJDL2csICdcdTAwQjUnKS5yZXBsYWNlKC9ceENFXHhBOS9nLCAnXHUyMTI2Jyk7Cgphc3luYyBmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7IGluc3BlY3RPcHRpb25zOiB7IGJyZWFrTGVuZ3RoOiAxMDAsIGNvbG9yczogdHJ1ZSwgZGVwdGg6IEluZmluaXR5LCBjb21wYWN0OiAyLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0gfSk7CiAgaWYoYXJncy5sZW5ndGggPT0gMCkgYXJncy51bnNoaWZ0KCcuLi9hbi10cm9uaWNzL2VhZ2xlL0hlYWRwaG9uZS1BbXBsaWZpZXItQ2xhc3NBQi1hbHQyLmJyZCcpOwogIGFyZ3MgPSB1bmlxdWUoYXJncyk7CiAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoYXJnKTsKICAgIGNvbnNvbGUubG9nKGBsb2FkZWQgJyR7YXJnfScgbGVuZ3RoOiAke2RhdGEubGVuZ3RofWApOwogICAgbGV0IGRvYyA9IG5ldyBFYWdsZURvY3VtZW50KGRhdGEsIG51bGwsIGFyZyk7CiAgICBkb2N1bWVudHMucHVzaChkb2MpOwogIH0KICBsZXQgY29tcG9uZW50cyA9IHsKICAgIEM6IFtdLAogICAgTDogW10sCiAgICBSOiBbXQogIH07CiAgZm9yKGxldCBkb2Mgb2YgZG9jdW1lbnRzKSB7CiAgICBsZXQgbWFpbiA9IGRvYy5tYWluRWxlbWVudDsKICAgIGNvbnNvbGUubG9nKCdtYWluOicsIG1haW4pOwogICAgbGV0IHBhcnRzID0gWy4uLihtYWluLmVsZW1lbnRzIHx8IG1haW4ucGFydHMpXS5tYXAoKFtuYW1lLCBlbGVtXSkgPT4gW25hbWUsIHR5cGVvZiBlbGVtLnZhbHVlID09ICdzdHJpbmcnID8gU3Vic3RDaGFycyhlbGVtLnZhbHVlKSA6IGVsZW0udmFsdWVdKTsKICAgIGNvbnNvbGUubG9nKCdwYXJ0cycsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogZmFsc2UgfSksIE9iamVjdC5mcm9tRW50cmllcyhwYXJ0cykpOwogICAgbGV0IG1hdGNoZXJzID0gWwogICAgICBbL15SLywgL15bMC05Ll0rKFtrS21NXVvOqVx1MDNBOV0/fFvOqVx1MDNBOV0/KSh8XC9bMC05Ll0rVykvXSwKICAgICAgWy9eQy8sIC9eWzAtOS5dKyhbcG51zrxcdTAzYmNtXUY/fEY/KSh8XC9bMC05Ll0rVikvXSwKICAgICAgWy9eTC8sIC9eWzAtOS5dKyhbbnXOvFx1MDNiY21dSD98SD8pL10KICAgIF07CgogICAgbGV0IG5hbWVWYWx1ZU1hcCA9IG5ldyBNYXAocGFydHMuZmlsdGVyKChbbmFtZSwgdmFsdWVdKSA9PiBtYXRjaGVycy5zb21lKG0gPT4gbVswXS50ZXN0KG5hbWUpICYmIG1bMV0udGVzdCh2YWx1ZSkpKSk7CiAgICAvL2NvbnNvbGUubG9nKCduYW1lVmFsdWVNYXAnLCBuZXcgTWFwKFsuLi5uYW1lVmFsdWVNYXBdLm1hcCgoW24sIHZdKSA9PiBbbiwgdl0pKSk7CiAgICBmb3IobGV0IFtuYW1lLCB2YWx1ZV0gb2YgbmFtZVZhbHVlTWFwKSB7CiAgICAgIHZhbHVlID0gKHZhbHVlID8gJycgKyB2YWx1ZSA6ICcnKS5yZXBsYWNlKC9bXHUwMDAwLVx1MDAxRlx1MDA3Ri1cdUZGRkZdL2csICcnKTsKICAgICAgY29tcG9uZW50c1tuYW1lWzBdXS5wdXNoKHZhbHVlLnJlcGxhY2UoL1vOqUZIXSQvLCAnJykucmVwbGFjZSgvXlwuLywgJzAuJykpOwogICAgfQogIH0KICBsZXQgaGlzdG9ncmFtcyA9IHt9OwogIGxldCB2YWx1ZXMgPSB7fTsKICAvLwogIC8qIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfSovCiAgZm9yKGxldCBrZXkgaW4gY29tcG9uZW50cykgewogICAgY29tcG9uZW50c1trZXldLnNvcnQoKTsKICAgIGNvbnNvbGUubG9nKGBjb21wb25lbnQgJHtrZXl9YCwgY29tcG9uZW50c1trZXldKTsKICAgIGxldCBoaXN0ID0gVXRpbC5oaXN0b2dyYW0oY29tcG9uZW50c1trZXldLCBuZXcgTWFwKCkpOwoKICAgIGhpc3RvZ3JhbXNba2V5XSA9IG5ldyBNYXAoWy4uLmhpc3RdLnNvcnQoKGEsIGIpID0+IGJbMV0gLSBhWzFdKSk7CiAgICB2YWx1ZXNba2V5XSA9IFsuLi5oaXN0b2dyYW1zW2tleV1dCiAgICAgIC5tYXAoKFt2YWx1ZSwgY291bnRdKSA9PiB7CiAgICAgICAgcmV0dXJuIFt2YWx1ZSB8fCBzY2llbnRpZmljKHZhbHVlKS50b1N0cmluZygpLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSwgY291bnRdOwogICAgICB9KQogICAgICAuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pCiAgICAgIC5tYXAoKFt2YWwsIHJhdCwgY291bnRdKSA9PiB7CiAgICAgICAgY29uc29sZS5sb2coJ2MnLCB7IHZhbCwgcmF0LCBjb3VudCB9KTsKICAgICAgICBjb25zdCBzY2FsID0gUGFydFNjYWxlc1trZXlbMF1dOwoKICAgICAgICBsZXQgYmFuZHMgPSBrZXlbMF0gPT0gJ0MnID8gR2V0Q29sb3JCYW5kcyhyYXQqc2NhbCwgMikubWFwKGIgID0+IGBbJHtifV1gKSA6IFtudW0yY29sb3IocmF0KnNjYWwpXTsKICAgICAgICBjb25zb2xlLmxvZygnYycsIHsgYmFuZHMgfSk7CgogICAgICAgIHJldHVybiBba2V5LCAodmFsICsgJycpLnN1YnN0cmluZygwLDEwKS5wYWRTdGFydCgxMCwgJyAnKSArIFVuaXRGb3JOYW1lKGtleSksIGJhbmRzLmpvaW4oJyAnKSwgYCAgw5cgJHtjb3VudH1gXS5qb2luKCcgJyk7CiAgICAgIH0pOwogIH0KICAvLyBjb25zb2xlLmxvZygnY29tcG9uZW50czonLCBjb21wb25lbnRzKTsKCiAgY29uc29sZS5sb2coCiAgICAndmFsdWVzOlxuICAgJyArCiAgICAgIE9iamVjdC5lbnRyaWVzKHZhbHVlcykKICAgICAgICAubWFwKChba2V5LCBsaXN0XSkgPT4gYCR7a2V5fTpcblx0JHtsaXN0LmpvaW4oJ1xuXG5cdCcpfWApCiAgICAgICAgLmpvaW4oJ1xuICAgJykKICApOwogIGNvbnNvbGUubG9nKGBcclxuRmluaXNoZWQgcXVlcnlpbmdgLCAuLi5hcmdzKTsKCiAgcmV0dXJuOwogIC8qIGNvbnNvbGUubG9nKCdkaWdpdDJjb2xvcjonLCBkaWdpdDJjb2xvcik7CiAgZm9yKGxldCB2YWx1ZSBvZiBbMzMwMDAsIDE4MDAsIDQ3MCwgMWU2LCA0LjdlM10pIHsKICAgIGNvbnNvbGUubG9nKCdHZXRDb2xvckJhbmRzJywgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMykpOwogICAgY29uc29sZS5sb2coJ0dldENvbG9yQmFuZHMnLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgICBjb25zb2xlLmxvZygnTnVtYmVyVG9WYWx1ZScsIE51bWJlclRvVmFsdWUodmFsdWUpKTsKICB9CiAgZm9yKGxldCB2YWx1ZSBvZiBbJzMzaycsICcxLjhrJywgJzQ3MCcsICcxLjhrJywgJzQ3aycsICcxME0nLCAnNC43ayddKSB7CiAgICBjb25zb2xlLmxvZyhgVmFsdWVUb051bWJlcigke3ZhbHVlfSlgLCBWYWx1ZVRvTnVtYmVyKHZhbHVlKSk7CiAgfSovCn0KClV0aWwuY2FsbE1haW4obWFpbiwgdHJ1ZSk7CgAAAAAAAAAAhA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AwAAAAAAADrDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2240,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAALELAAAAAAAAsgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQsAAAAAAACxCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2241,
					1,
					"insert",
					{
						"characters": " '"
					},
					"AgAAALILAAAAAAAAswsAAAAAAAAAAAAAswsAAAAAAAC0CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgsAAAAAAACyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2242,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAALQLAAAAAAAAtQsAAAAAAAAAAAAAtQsAAAAAAAC2CwAAAAAAAAAAAAC2CwAAAAAAALcLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAsAAAAAAAC0CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2243,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALcLAAAAAAAAuAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwsAAAAAAAC3CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2262,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAOcLAAAAAAAA6QsAAAAAAAAAAAAAtQsAAAAAAAC3CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQsAAAAAAADnCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2279,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAALELAAAAAAAAsgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQsAAAAAAACxCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2281,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAALULAAAAAAAAtgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQsAAAAAAAC1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2305,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADsLAAAAAAAAPAsAAAAAAAAAAAAAPAsAAAAAAAA9CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwsAAAAAAAA7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2308,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABEMAAAAAAAAEgwAAAAAAAAAAAAAEgwAAAAAAAATDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQwAAAAAAAARDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2400,
					2,
					"left_delete",
					null,
					"AgAAADoLAAAAAAAAOgsAAAAAAAADAAAAIC8vOAsAAAAAAAA4CwAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAPQsAAAAAAAA6CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2413,
					1,
					"duplicate_line",
					null,
					"AQAAAO0MAAAAAAAA7gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AwAAAAAAADsDAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "import { LineList, Rect } from './lib/geom.js';\nimport Util from './lib/util.js';\nimport { BG, digit2color, GetColorBands, PartScales } from './lib/eda/colorCoding.js';\nexport { GetColorBands } from './lib/eda/colorCoding.js';\n\nexport function updateMeasures(board) {\n  if(!board) return false;\n  let bounds = board.getBounds();\n  let measures = board.getMeasures();\n  if(measures) {\n    console.log('got measures:', measures);\n  } else {\n    let rect = new Rect(bounds.rect);\n    let lines = rect.toLines(lines => new LineList(lines));\n    let { plain } = board;\n    plain.remove(e => e.tagName == 'wire' && e.attributes.layer == '47');\n    plain.append(\n      ...lines.map(line => ({\n        tagName: 'wire',\n        attributes: { ...line.toObject(), layer: 47, width: 0 }\n      }))\n    );\n  }\n  return !measures;\n}\n\nexport function alignItem(item) {\n  console.debug('alignItem', item);\n  let geometry = item.geometry;\n  let oldPos = geometry.clone();\n  let newPos = geometry.clone().round(1.27, 2);\n  let diff = newPos.diff(oldPos).round(0.0001, 5);\n  let before = item.parentNode.toXML();\n  geometry.add(diff);\n  let changed = !diff.isNull();\n  if(changed) {\n    console.log('before:', Util.abbreviate(before));\n    console.log('after:', Util.abbreviate(item.parentNode.toXML()));\n    console.log('align\\n', item.xpath(), '\\n newPos:', newPos, '\\n diff:', diff, '\\n attr:', item.raw.attributes);\n  }\n  return changed;\n}\n\nexport function alignAll(doc) {\n  if(!doc) return false;\n  let items = doc.getAll(doc.type == 'brd' ? 'element' : 'instance');\n  let changed = false;\n  for(let item of items) changed |= alignItem(item);\n  let signals_nets = doc.getAll(/(signals|nets)/);\n\n  for(let net of signals_nets) for (let item of net.getAll('wire')) changed |= alignItem(item);\n  return !!changed;\n}\n\nexport function scientific(value) {\n  let sci = [GetMantissa(value), GetExponent(value)];\n\n  define(sci, {\n    toString() {\n      let sign = Math.sign(this[1]) < 0 ? '-' : '+';\n      return `${this[0]}e${sign}${(Math.abs(this[1]) + '').padStart(2, '0')}`;\n    }\n  });\n  return sci;\n}\nconst text = (() => {\n  const ansi = Util.coloring(true);\n  return (...args) => ansi.text(...args);\n})();\n\nconst verticalRectangles = ['█', '□', '\\u2588\\u258d' /*'\\u2589'*/ /*'▮'*/, '□', '▯'];\nconst largeSquares = ['■', '□'];\n\nexport function num2color(num, square = false) {\n  let sym = square ? largeSquares : verticalRectangles;\n  let bands = typeof num == 'number' ? GetColorBands(num) : num;\n  const { ansi, rgb } = digit2color;\n  let a = n => ansi[n]?.slice(1) ?? [];\n  let ret = []; //bands.map(n => );\n  //ret.push(text('\\u2595', 38, 2, ...digit2color.rgb[BG]));\n\n  for(let band of bands) {\n    if(ret.length) ret.push(text(' ', 48, 2, ...rgb[BG]));\n    //\n    //  ret.push(text(sym[0], 38));\n    if(band) {\n      band = text(sym[0], 38, ...a(band));\n      band = text(band, 48, 2, ...rgb[BG]);\n    } else {\n      band = text(sym[1], 38, 2, 255, 255, 255);\n    }\n    ret.push(band); //\n  }\n  ret.push(text(' ', 48, 2, ...rgb[BG]));\n  //  console.log('num2color', { bands, ret });\n  return ret.join('');\n}\n",
			"file": "eagle-commands.js",
			"file_size": 3108,
			"file_write_time": 132839160199549063,
			"settings":
			{
				"buffer_size": 3096,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					33,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACvCwAAaW1wb3J0IHsgTGluZUxpc3QsIFJlY3QgfSBmcm9tICcuL2xpYi9nZW9tLmpzJzsKaW1wb3J0IFV0aWwgZnJvbSAnLi9saWIvdXRpbC5qcyc7CmltcG9ydCB7IEJHLCBkaWdpdDJjb2xvciwgR2V0Q29sb3JCYW5kcyB9IGZyb20gJy4vbGliL2VkYS9jb2xvckNvZGluZy5qcyc7CgpleHBvcnQgZnVuY3Rpb24gdXBkYXRlTWVhc3VyZXMoYm9hcmQpIHsKICBpZighYm9hcmQpIHJldHVybiBmYWxzZTsKICBsZXQgYm91bmRzID0gYm9hcmQuZ2V0Qm91bmRzKCk7CiAgbGV0IG1lYXN1cmVzID0gYm9hcmQuZ2V0TWVhc3VyZXMoKTsKICBpZihtZWFzdXJlcykgewogICAgY29uc29sZS5sb2coJ2dvdCBtZWFzdXJlczonLCBtZWFzdXJlcyk7CiAgfSBlbHNlIHsKICAgIGxldCByZWN0ID0gbmV3IFJlY3QoYm91bmRzLnJlY3QpOwogICAgbGV0IGxpbmVzID0gcmVjdC50b0xpbmVzKGxpbmVzID0+IG5ldyBMaW5lTGlzdChsaW5lcykpOwogICAgbGV0IHsgcGxhaW4gfSA9IGJvYXJkOwogICAgcGxhaW4ucmVtb3ZlKGUgPT4gZS50YWdOYW1lID09ICd3aXJlJyAmJiBlLmF0dHJpYnV0ZXMubGF5ZXIgPT0gJzQ3Jyk7CiAgICBwbGFpbi5hcHBlbmQoCiAgICAgIC4uLmxpbmVzLm1hcChsaW5lID0+ICh7CiAgICAgICAgdGFnTmFtZTogJ3dpcmUnLAogICAgICAgIGF0dHJpYnV0ZXM6IHsgLi4ubGluZS50b09iamVjdCgpLCBsYXllcjogNDcsIHdpZHRoOiAwIH0KICAgICAgfSkpCiAgICApOwogIH0KICByZXR1cm4gIW1lYXN1cmVzOwp9CgpleHBvcnQgZnVuY3Rpb24gYWxpZ25JdGVtKGl0ZW0pIHsKICBjb25zb2xlLmRlYnVnKCdhbGlnbkl0ZW0nLCBpdGVtKTsKICBsZXQgZ2VvbWV0cnkgPSBpdGVtLmdlb21ldHJ5OwogIGxldCBvbGRQb3MgPSBnZW9tZXRyeS5jbG9uZSgpOwogIGxldCBuZXdQb3MgPSBnZW9tZXRyeS5jbG9uZSgpLnJvdW5kKDEuMjcsIDIpOwogIGxldCBkaWZmID0gbmV3UG9zLmRpZmYob2xkUG9zKS5yb3VuZCgwLjAwMDEsIDUpOwogIGxldCBiZWZvcmUgPSBpdGVtLnBhcmVudE5vZGUudG9YTUwoKTsKICBnZW9tZXRyeS5hZGQoZGlmZik7CiAgbGV0IGNoYW5nZWQgPSAhZGlmZi5pc051bGwoKTsKICBpZihjaGFuZ2VkKSB7CiAgICBjb25zb2xlLmxvZygnYmVmb3JlOicsIFV0aWwuYWJicmV2aWF0ZShiZWZvcmUpKTsKICAgIGNvbnNvbGUubG9nKCdhZnRlcjonLCBVdGlsLmFiYnJldmlhdGUoaXRlbS5wYXJlbnROb2RlLnRvWE1MKCkpKTsKICAgIGNvbnNvbGUubG9nKCdhbGlnblxuJywgaXRlbS54cGF0aCgpLCAnXG4gbmV3UG9zOicsIG5ld1BvcywgJ1xuIGRpZmY6JywgZGlmZiwgJ1xuIGF0dHI6JywgaXRlbS5yYXcuYXR0cmlidXRlcyk7CiAgfQogIHJldHVybiBjaGFuZ2VkOwp9CgpleHBvcnQgZnVuY3Rpb24gYWxpZ25BbGwoZG9jKSB7CiAgaWYoIWRvYykgcmV0dXJuIGZhbHNlOwogIGxldCBpdGVtcyA9IGRvYy5nZXRBbGwoZG9jLnR5cGUgPT0gJ2JyZCcgPyAnZWxlbWVudCcgOiAnaW5zdGFuY2UnKTsKICBsZXQgY2hhbmdlZCA9IGZhbHNlOwogIGZvcihsZXQgaXRlbSBvZiBpdGVtcykgY2hhbmdlZCB8PSBhbGlnbkl0ZW0oaXRlbSk7CiAgbGV0IHNpZ25hbHNfbmV0cyA9IGRvYy5nZXRBbGwoLyhzaWduYWxzfG5ldHMpLyk7CgogIGZvcihsZXQgbmV0IG9mIHNpZ25hbHNfbmV0cykgZm9yIChsZXQgaXRlbSBvZiBuZXQuZ2V0QWxsKCd3aXJlJykpIGNoYW5nZWQgfD0gYWxpZ25JdGVtKGl0ZW0pOwogIHJldHVybiAhIWNoYW5nZWQ7Cn0KCmV4cG9ydCBmdW5jdGlvbiBzY2llbnRpZmljKHZhbHVlKSB7CiAgbGV0IHNjaSA9IFtHZXRNYW50aXNzYSh2YWx1ZSksIEdldEV4cG9uZW50KHZhbHVlKV07CgogIGRlZmluZShzY2ksIHsKICAgIHRvU3RyaW5nKCkgewogICAgICBsZXQgc2lnbiA9IE1hdGguc2lnbih0aGlzWzFdKSA8IDAgPyAnLScgOiAnKyc7CiAgICAgIHJldHVybiBgJHt0aGlzWzBdfWUke3NpZ259JHsoTWF0aC5hYnModGhpc1sxXSkgKyAnJykucGFkU3RhcnQoMiwgJzAnKX1gOwogICAgfQogIH0pOwogIHJldHVybiBzY2k7Cn0KY29uc3QgY29sb3IgPSBVdGlsLmNvbG9yaW5nKHRydWUpOwoKCmNvbnN0IHZlcnRpY2FsUmVjdGFuZ2xlcyA9IFsn4paIJywgJ+KWoScsICdcdTI1ODhcdTI1OGQnIC8qJ1x1MjU4OScqLyAvKifilq4nKi8sICfilqEnLCAn4pavJ107CmNvbnN0IGxhcmdlU3F1YXJlcyA9IFsn4pagJywgJ+KWoSddOwoKZXhwb3J0IGZ1bmN0aW9uIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKSB7CiAgbGV0IHN5bSA9IHNxdWFyZSA/IGxhcmdlU3F1YXJlcyA6IHZlcnRpY2FsUmVjdGFuZ2xlczsKICBsZXQgYmFuZHMgPSB0eXBlb2YgbnVtID09ICdudW1iZXInID8gR2V0Q29sb3JCYW5kcyhudW0pIDogbnVtOwogIGNvbnN0IHsgYW5zaSwgcmdiIH0gPSBkaWdpdDJjb2xvcjsKICBsZXQgYSA9IG4gPT4gYW5zaVtuXT8uc2xpY2UoMSkgPz8gW107CiAgbGV0IHJldCA9IFtdOyAvL2JhbmRzLm1hcChuID0+ICk7CiAgcmV0LnB1c2goY29sb3IudGV4dCgnXHUyNTk1JywgMzgsIDIsIC4uLmRpZ2l0MmNvbG9yLnJnYltCR10pKTsKCiAgZm9yKGxldCBiYW5kIG9mIGJhbmRzKSB7CiAgICBpZihyZXQubGVuZ3RoKSByZXQucHVzaChjb2xvci50ZXh0KCcgJywgNDgsIDIsIC4uLnJnYltCR10pKTsKICAgIC8vCiAgICAvLyAgcmV0LnB1c2goY29sb3IudGV4dChzeW1bMF0sIDM4KSk7CiAgICBpZihiYW5kKSB7CiAgICBiYW5kID0gY29sb3IudGV4dChzeW1bMF0sIDM4LCAuLi5hKGJhbmQpKTsKICAgIGJhbmQgPSBjb2xvci50ZXh0KGJhbmQsIDQ4LCAyLCAuLi5yZ2JbQkddKTsKICB9ZWxzZSB7CiAgICAgYmFuZCA9IGNvbG9yLnRleHQoc3ltWzFdLCAzOCwyLDI1NSwyNTUsMjU1KTsKIH0KICAgIHJldC5wdXNoKGJhbmQpOyAvLwogIH0KICByZXQucHVzaChjb2xvci50ZXh0KCcgJywgNDgsIDIsIC4uLnJnYltCR10pKTsKICBjb25zb2xlLmxvZygnbnVtMmNvbG9yJywgeyBiYW5kcywgcmV0IH0pOwogIHJldHVybiByZXQuam9pbignJyk7Cn0KAAAAAAAAAACvCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wgAAAAAAAAkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"cut",
					null,
					"AQAAAFIAAAAAAAAAUgAAAAAAAABLAAAAaW1wb3J0IHsgQkcsIGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsK",
					"AQAAAAAAAAABAAAAnQAAAAAAAABSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					2,
					"paste",
					null,
					"AgAAAFIAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAADoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgAAAAAAAABSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "ec"
					},
					"AwAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACeAAAAAAAAAAYAAABpbXBvcnSeAAAAAAAAAJ8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"left_delete",
					null,
					"AQAAAJ4AAAAAAAAAngAAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAnwAAAAAAAACfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "xport"
					},
					"BQAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKEAAAAAAAAAAAAAAKEAAAAAAAAAogAAAAAAAAAAAAAAogAAAAAAAACjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngAAAAAAAACeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAKYAAAAAAAAApwAAAAAAAAAAAAAApwAAAAAAAACnAAAAAAAAABEAAABCRywgZGlnaXQyY29sb3IsIA",
					"AQAAAAAAAAABAAAApgAAAAAAAAC3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD4CwAAaW1wb3J0IHsgTGluZUxpc3QsIFJlY3QgfSBmcm9tICcuL2xpYi9nZW9tLmpzJzsKaW1wb3J0IFV0aWwgZnJvbSAnLi9saWIvdXRpbC5qcyc7CmltcG9ydCB7IEJHLCBkaWdpdDJjb2xvciwgR2V0Q29sb3JCYW5kcyB9IGZyb20gJy4vbGliL2VkYS9jb2xvckNvZGluZy5qcyc7CmV4cG9ydCB7ICBHZXRDb2xvckJhbmRzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKCmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVNZWFzdXJlcyhib2FyZCkgewogIGlmKCFib2FyZCkgcmV0dXJuIGZhbHNlOwogIGxldCBib3VuZHMgPSBib2FyZC5nZXRCb3VuZHMoKTsKICBsZXQgbWVhc3VyZXMgPSBib2FyZC5nZXRNZWFzdXJlcygpOwogIGlmKG1lYXN1cmVzKSB7CiAgICBjb25zb2xlLmxvZygnZ290IG1lYXN1cmVzOicsIG1lYXN1cmVzKTsKICB9IGVsc2UgewogICAgbGV0IHJlY3QgPSBuZXcgUmVjdChib3VuZHMucmVjdCk7CiAgICBsZXQgbGluZXMgPSByZWN0LnRvTGluZXMobGluZXMgPT4gbmV3IExpbmVMaXN0KGxpbmVzKSk7CiAgICBsZXQgeyBwbGFpbiB9ID0gYm9hcmQ7CiAgICBwbGFpbi5yZW1vdmUoZSA9PiBlLnRhZ05hbWUgPT0gJ3dpcmUnICYmIGUuYXR0cmlidXRlcy5sYXllciA9PSAnNDcnKTsKICAgIHBsYWluLmFwcGVuZCgKICAgICAgLi4ubGluZXMubWFwKGxpbmUgPT4gKHsKICAgICAgICB0YWdOYW1lOiAnd2lyZScsCiAgICAgICAgYXR0cmlidXRlczogeyAuLi5saW5lLnRvT2JqZWN0KCksIGxheWVyOiA0Nywgd2lkdGg6IDAgfQogICAgICB9KSkKICAgICk7CiAgfQogIHJldHVybiAhbWVhc3VyZXM7Cn0KCmV4cG9ydCBmdW5jdGlvbiBhbGlnbkl0ZW0oaXRlbSkgewogIGNvbnNvbGUuZGVidWcoJ2FsaWduSXRlbScsIGl0ZW0pOwogIGxldCBnZW9tZXRyeSA9IGl0ZW0uZ2VvbWV0cnk7CiAgbGV0IG9sZFBvcyA9IGdlb21ldHJ5LmNsb25lKCk7CiAgbGV0IG5ld1BvcyA9IGdlb21ldHJ5LmNsb25lKCkucm91bmQoMS4yNywgMik7CiAgbGV0IGRpZmYgPSBuZXdQb3MuZGlmZihvbGRQb3MpLnJvdW5kKDAuMDAwMSwgNSk7CiAgbGV0IGJlZm9yZSA9IGl0ZW0ucGFyZW50Tm9kZS50b1hNTCgpOwogIGdlb21ldHJ5LmFkZChkaWZmKTsKICBsZXQgY2hhbmdlZCA9ICFkaWZmLmlzTnVsbCgpOwogIGlmKGNoYW5nZWQpIHsKICAgIGNvbnNvbGUubG9nKCdiZWZvcmU6JywgVXRpbC5hYmJyZXZpYXRlKGJlZm9yZSkpOwogICAgY29uc29sZS5sb2coJ2FmdGVyOicsIFV0aWwuYWJicmV2aWF0ZShpdGVtLnBhcmVudE5vZGUudG9YTUwoKSkpOwogICAgY29uc29sZS5sb2coJ2FsaWduXG4nLCBpdGVtLnhwYXRoKCksICdcbiBuZXdQb3M6JywgbmV3UG9zLCAnXG4gZGlmZjonLCBkaWZmLCAnXG4gYXR0cjonLCBpdGVtLnJhdy5hdHRyaWJ1dGVzKTsKICB9CiAgcmV0dXJuIGNoYW5nZWQ7Cn0KCmV4cG9ydCBmdW5jdGlvbiBhbGlnbkFsbChkb2MpIHsKICBpZighZG9jKSByZXR1cm4gZmFsc2U7CiAgbGV0IGl0ZW1zID0gZG9jLmdldEFsbChkb2MudHlwZSA9PSAnYnJkJyA/ICdlbGVtZW50JyA6ICdpbnN0YW5jZScpOwogIGxldCBjaGFuZ2VkID0gZmFsc2U7CiAgZm9yKGxldCBpdGVtIG9mIGl0ZW1zKSBjaGFuZ2VkIHw9IGFsaWduSXRlbShpdGVtKTsKICBsZXQgc2lnbmFsc19uZXRzID0gZG9jLmdldEFsbCgvKHNpZ25hbHN8bmV0cykvKTsKCiAgZm9yKGxldCBuZXQgb2Ygc2lnbmFsc19uZXRzKSBmb3IgKGxldCBpdGVtIG9mIG5ldC5nZXRBbGwoJ3dpcmUnKSkgY2hhbmdlZCB8PSBhbGlnbkl0ZW0oaXRlbSk7CiAgcmV0dXJuICEhY2hhbmdlZDsKfQoKZXhwb3J0IGZ1bmN0aW9uIHNjaWVudGlmaWModmFsdWUpIHsKICBsZXQgc2NpID0gW0dldE1hbnRpc3NhKHZhbHVlKSwgR2V0RXhwb25lbnQodmFsdWUpXTsKCiAgZGVmaW5lKHNjaSwgewogICAgdG9TdHJpbmcoKSB7CiAgICAgIGxldCBzaWduID0gTWF0aC5zaWduKHRoaXNbMV0pIDwgMCA/ICctJyA6ICcrJzsKICAgICAgcmV0dXJuIGAke3RoaXNbMF19ZSR7c2lnbn0keyhNYXRoLmFicyh0aGlzWzFdKSArICcnKS5wYWRTdGFydCgyLCAnMCcpfWA7CiAgICB9CiAgfSk7CiAgcmV0dXJuIHNjaTsKfQpjb25zdCBjb2xvciA9IFV0aWwuY29sb3JpbmcodHJ1ZSk7Cgpjb25zdCB2ZXJ0aWNhbFJlY3RhbmdsZXMgPSBbJ+KWiCcsICfilqEnLCAnXHUyNTg4XHUyNThkJyAvKidcdTI1ODknKi8gLyon4pauJyovLCAn4pahJywgJ+KWryddOwpjb25zdCBsYXJnZVNxdWFyZXMgPSBbJ+KWoCcsICfilqEnXTsKCmV4cG9ydCBmdW5jdGlvbiBudW0yY29sb3IobnVtLCBzcXVhcmUgPSBmYWxzZSkgewogIGxldCBzeW0gPSBzcXVhcmUgPyBsYXJnZVNxdWFyZXMgOiB2ZXJ0aWNhbFJlY3RhbmdsZXM7CiAgbGV0IGJhbmRzID0gdHlwZW9mIG51bSA9PSAnbnVtYmVyJyA/IEdldENvbG9yQmFuZHMobnVtKSA6IG51bTsKICBjb25zdCB7IGFuc2ksIHJnYiB9ID0gZGlnaXQyY29sb3I7CiAgbGV0IGEgPSBuID0+IGFuc2lbbl0/LnNsaWNlKDEpID8/IFtdOwogIGxldCByZXQgPSBbXTsgLy9iYW5kcy5tYXAobiA9PiApOwogIHJldC5wdXNoKGNvbG9yLnRleHQoJ1x1MjU5NScsIDM4LCAyLCAuLi5kaWdpdDJjb2xvci5yZ2JbQkddKSk7CgogIGZvcihsZXQgYmFuZCBvZiBiYW5kcykgewogICAgaWYocmV0Lmxlbmd0aCkgcmV0LnB1c2goY29sb3IudGV4dCgnICcsIDQ4LCAyLCAuLi5yZ2JbQkddKSk7CiAgICAvLwogICAgLy8gIHJldC5wdXNoKGNvbG9yLnRleHQoc3ltWzBdLCAzOCkpOwogICAgaWYoYmFuZCkgewogICAgICBiYW5kID0gY29sb3IudGV4dChzeW1bMF0sIDM4LCAuLi5hKGJhbmQpKTsKICAgICAgYmFuZCA9IGNvbG9yLnRleHQoYmFuZCwgNDgsIDIsIC4uLnJnYltCR10pOwogICAgfSBlbHNlIHsKICAgICAgYmFuZCA9IGNvbG9yLnRleHQoc3ltWzFdLCAzOCwgMiwgMjU1LCAyNTUsIDI1NSk7CiAgICB9CiAgICByZXQucHVzaChiYW5kKTsgLy8KICB9CiAgcmV0LnB1c2goY29sb3IudGV4dCgnICcsIDQ4LCAyLCAuLi5yZ2JbQkddKSk7CiAgY29uc29sZS5sb2coJ251bTJjb2xvcicsIHsgYmFuZHMsIHJldCB9KTsKICByZXR1cm4gcmV0LmpvaW4oJycpOwp9CgAAAAAAAAAA6QsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQMAAAAAAAAnAwAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " ,"
					},
					"AgAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"paste",
					null,
					"AQAAAHsAAAAAAAAAhQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACkIAAAAAAAAKggAAAAAAAAAAAAAKggAAAAAAAAqCAAAAAAAAAUAAABjb2xvcg",
					"AQAAAAAAAAABAAAAKQgAAAAAAAAuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACoIAAAAAAAALAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKggAAAAAAAAqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "text"
					},
					"BAAAACsIAAAAAAAALAgAAAAAAAAAAAAALAgAAAAAAAAtCAAAAAAAAAAAAAAtCAAAAAAAAC4IAAAAAAAAAAAAAC4IAAAAAAAALwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwgAAAAAAAArCAAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					1,
					"",
					null,
					"AQAAAOcJAAAAAAAA6wkAAAAAAAAKAAAAY29sb3IudGV4dA",
					"AQAAAAAAAAABAAAA5wkAAAAAAADxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"",
					null,
					"AQAAAE8KAAAAAAAAUwoAAAAAAAAKAAAAY29sb3IudGV4dA",
					"AQAAAAAAAAABAAAATwoAAAAAAABZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"",
					null,
					"AQAAAIYKAAAAAAAAigoAAAAAAAAKAAAAY29sb3IudGV4dA",
					"AQAAAAAAAAABAAAAhgoAAAAAAACQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"",
					null,
					"AQAAALUKAAAAAAAAuQoAAAAAAAAKAAAAY29sb3IudGV4dA",
					"AQAAAAAAAAABAAAAtQoAAAAAAAC/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"",
					null,
					"AQAAAOAKAAAAAAAA5AoAAAAAAAAKAAAAY29sb3IudGV4dA",
					"AQAAAAAAAAABAAAA4AoAAAAAAADqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"",
					null,
					"AQAAABkLAAAAAAAAHQsAAAAAAAAKAAAAY29sb3IudGV4dA",
					"AQAAAAAAAAABAAAAGQsAAAAAAAAjCwAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"",
					null,
					"AQAAAGkLAAAAAAAAbQsAAAAAAAAKAAAAY29sb3IudGV4dA",
					"AQAAAAAAAAABAAAAaQsAAAAAAABzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "text"
					},
					"BQAAACoIAAAAAAAAKwgAAAAAAAAAAAAAKwgAAAAAAAArCAAAAAAAAAYAAAB7dGV4dH0rCAAAAAAAACwIAAAAAAAAAAAAACwIAAAAAAAALQgAAAAAAAAAAAAALQgAAAAAAAAuCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKggAAAAAAAAwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": "(...args)"
					},
					"CQAAADEIAAAAAAAAMggAAAAAAAAAAAAAMggAAAAAAAAzCAAAAAAAAAAAAAAzCAAAAAAAADQIAAAAAAAAAAAAADQIAAAAAAAANQgAAAAAAAAAAAAANQgAAAAAAAA2CAAAAAAAAAAAAAA2CAAAAAAAADcIAAAAAAAAAAAAADcIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA5CAAAAAAAAAAAAAA5CAAAAAAAADoIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQgAAAAAAAAxCAAAAAAAAAAAAAAAAPC/"
				],
				[
					337,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAADoIAAAAAAAAOwgAAAAAAAAAAAAAOwgAAAAAAAA8CAAAAAAAAAAAAAA8CAAAAAAAAD0IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOggAAAAAAAA6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "  {"
					},
					"AwAAAD0IAAAAAAAAPggAAAAAAAAAAAAAPggAAAAAAAA/CAAAAAAAAAAAAAA/CAAAAAAAAEAIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQgAAAAAAAA9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEAIAAAAAAAAQQgAAAAAAAAAAAAAQQgAAAAAAABDCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAgAAAAAAABACAAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAADEIAAAAAAAAMggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQgAAAAAAAAxCAAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"cut",
					null,
					"AQAAADIIAAAAAAAAMggAAAAAAAAOAAAAKC4uLmFyZ3MpID0+ICA",
					"AQAAAAAAAAABAAAAMggAAAAAAABACAAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAADIIAAAAAAAAMwgAAAAAAAAAAAAAMwgAAAAAAAA0CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMggAAAAAAAAyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAADQIAAAAAAAANQgAAAAAAAAAAAAANQgAAAAAAAA2CAAAAAAAAAAAAAA2CAAAAAAAADcIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAgAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADcIAAAAAAAAOAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwgAAAAAAAA3CAAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAADkIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA8CAAAAAAAAAAAAAA8CAAAAAAAAD0IAAAAAAAAAAAAAD0IAAAAAAAAPggAAAAAAAAAAAAAPggAAAAAAAA/CAAAAAAAAAAAAAA/CAAAAAAAAEAIAAAAAAAAAAAAAEAIAAAAAAAAQQgAAAAAAAAAAAAAQQgAAAAAAABCCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQgAAAAAAAA5CAAAAAAAAP///////+9/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": " v"
					},
					"AgAAAEIIAAAAAAAAQwgAAAAAAAAAAAAAQwgAAAAAAABECAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQggAAAAAAABCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"left_delete",
					null,
					"AQAAAEMIAAAAAAAAQwgAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAARAgAAAAAAABECAAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"paste",
					null,
					"AQAAAEMIAAAAAAAAUQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwgAAAAAAABDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"cut",
					null,
					"AQAAAFIIAAAAAAAAUggAAAAAAAAXAAAAICBVdGlsLmNvbG9yaW5nKHRydWUpOwo",
					"AQAAAAAAAAABAAAAUggAAAAAAABpCAAAAAAAAAAAAAAAAAAA"
				],
				[
					383,
					1,
					"paste",
					null,
					"AQAAADoIAAAAAAAAUQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOggAAAAAAAA6CAAAAAAAAAAAAAAAAAAA"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAADoIAAAAAAAAOwgAAAAAAAAAAAAAOwgAAAAAAAA8CAAAAAAAAAAAAAA8CAAAAAAAAD0IAAAAAAAAAAAAAD0IAAAAAAAAPggAAAAAAAAAAAAAPggAAAAAAAA/CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOggAAAAAAAA6CAAAAAAAAAAAAAAAAAAA"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": " ansi"
					},
					"BQAAAD8IAAAAAAAAQAgAAAAAAAAAAAAAQAgAAAAAAABBCAAAAAAAAAAAAABBCAAAAAAAAEIIAAAAAAAAAAAAAEIIAAAAAAAAQwgAAAAAAAAAAAAAQwgAAAAAAABECAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwgAAAAAAAA/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEQIAAAAAAAARQgAAAAAAAAAAAAARQgAAAAAAABGCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAgAAAAAAABECAAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"paste",
					null,
					"AQAAAHQIAAAAAAAAeAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAgAAAAAAAB0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					397,
					1,
					"insert",
					{
						"characters": ".tex"
					},
					"BAAAAHgIAAAAAAAAeQgAAAAAAAAAAAAAeQgAAAAAAAB6CAAAAAAAAAAAAAB6CAAAAAAAAHsIAAAAAAAAAAAAAHsIAAAAAAAAfAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAgAAAAAAAB4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAHwIAAAAAAAAfQgAAAAAAAAAAAAAfQgAAAAAAAB+CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAgAAAAAAAB8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					399,
					2,
					"left_delete",
					null,
					"AgAAAH0IAAAAAAAAfQgAAAAAAAABAAAAdHwIAAAAAAAAfAgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAfggAAAAAAAB+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					400,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAHwIAAAAAAAAfQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAgAAAAAAAB8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAH0IAAAAAAAAfwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQgAAAAAAAB9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": "...args"
					},
					"BwAAAH4IAAAAAAAAfwgAAAAAAAAAAAAAfwgAAAAAAACACAAAAAAAAAAAAACACAAAAAAAAIEIAAAAAAAAAAAAAIEIAAAAAAAAgggAAAAAAAAAAAAAgggAAAAAAACDCAAAAAAAAAAAAACDCAAAAAAAAIQIAAAAAAAAAAAAAIQIAAAAAAAAhQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfggAAAAAAAB+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					404,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIYIAAAAAAAAhwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhggAAAAAAACGCAAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "\n})"
					},
					"BgAAAIcIAAAAAAAAiAgAAAAAAAAAAAAAiAgAAAAAAACKCAAAAAAAAAAAAACKCAAAAAAAAIsIAAAAAAAAAAAAAIgIAAAAAAAAiAgAAAAAAAACAAAAICCICAAAAAAAAIgIAAAAAAAAAAAAAIkIAAAAAAAAiggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwgAAAAAAACHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					406,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIoIAAAAAAAAjAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiggAAAAAAACKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIwIAAAAAAAAjQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhDAAAaW1wb3J0IHsgTGluZUxpc3QsIFJlY3QgfSBmcm9tICcuL2xpYi9nZW9tLmpzJzsKaW1wb3J0IFV0aWwgZnJvbSAnLi9saWIvdXRpbC5qcyc7CmltcG9ydCB7IEJHLCBkaWdpdDJjb2xvciwgR2V0Q29sb3JCYW5kcyAsUGFydFNjYWxlcyB9IGZyb20gJy4vbGliL2VkYS9jb2xvckNvZGluZy5qcyc7CmV4cG9ydCB7IEdldENvbG9yQmFuZHMgfSBmcm9tICcuL2xpYi9lZGEvY29sb3JDb2RpbmcuanMnOwoKZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZU1lYXN1cmVzKGJvYXJkKSB7CiAgaWYoIWJvYXJkKSByZXR1cm4gZmFsc2U7CiAgbGV0IGJvdW5kcyA9IGJvYXJkLmdldEJvdW5kcygpOwogIGxldCBtZWFzdXJlcyA9IGJvYXJkLmdldE1lYXN1cmVzKCk7CiAgaWYobWVhc3VyZXMpIHsKICAgIGNvbnNvbGUubG9nKCdnb3QgbWVhc3VyZXM6JywgbWVhc3VyZXMpOwogIH0gZWxzZSB7CiAgICBsZXQgcmVjdCA9IG5ldyBSZWN0KGJvdW5kcy5yZWN0KTsKICAgIGxldCBsaW5lcyA9IHJlY3QudG9MaW5lcyhsaW5lcyA9PiBuZXcgTGluZUxpc3QobGluZXMpKTsKICAgIGxldCB7IHBsYWluIH0gPSBib2FyZDsKICAgIHBsYWluLnJlbW92ZShlID0+IGUudGFnTmFtZSA9PSAnd2lyZScgJiYgZS5hdHRyaWJ1dGVzLmxheWVyID09ICc0NycpOwogICAgcGxhaW4uYXBwZW5kKAogICAgICAuLi5saW5lcy5tYXAobGluZSA9PiAoewogICAgICAgIHRhZ05hbWU6ICd3aXJlJywKICAgICAgICBhdHRyaWJ1dGVzOiB7IC4uLmxpbmUudG9PYmplY3QoKSwgbGF5ZXI6IDQ3LCB3aWR0aDogMCB9CiAgICAgIH0pKQogICAgKTsKICB9CiAgcmV0dXJuICFtZWFzdXJlczsKfQoKZXhwb3J0IGZ1bmN0aW9uIGFsaWduSXRlbShpdGVtKSB7CiAgY29uc29sZS5kZWJ1ZygnYWxpZ25JdGVtJywgaXRlbSk7CiAgbGV0IGdlb21ldHJ5ID0gaXRlbS5nZW9tZXRyeTsKICBsZXQgb2xkUG9zID0gZ2VvbWV0cnkuY2xvbmUoKTsKICBsZXQgbmV3UG9zID0gZ2VvbWV0cnkuY2xvbmUoKS5yb3VuZCgxLjI3LCAyKTsKICBsZXQgZGlmZiA9IG5ld1Bvcy5kaWZmKG9sZFBvcykucm91bmQoMC4wMDAxLCA1KTsKICBsZXQgYmVmb3JlID0gaXRlbS5wYXJlbnROb2RlLnRvWE1MKCk7CiAgZ2VvbWV0cnkuYWRkKGRpZmYpOwogIGxldCBjaGFuZ2VkID0gIWRpZmYuaXNOdWxsKCk7CiAgaWYoY2hhbmdlZCkgewogICAgY29uc29sZS5sb2coJ2JlZm9yZTonLCBVdGlsLmFiYnJldmlhdGUoYmVmb3JlKSk7CiAgICBjb25zb2xlLmxvZygnYWZ0ZXI6JywgVXRpbC5hYmJyZXZpYXRlKGl0ZW0ucGFyZW50Tm9kZS50b1hNTCgpKSk7CiAgICBjb25zb2xlLmxvZygnYWxpZ25cbicsIGl0ZW0ueHBhdGgoKSwgJ1xuIG5ld1BvczonLCBuZXdQb3MsICdcbiBkaWZmOicsIGRpZmYsICdcbiBhdHRyOicsIGl0ZW0ucmF3LmF0dHJpYnV0ZXMpOwogIH0KICByZXR1cm4gY2hhbmdlZDsKfQoKZXhwb3J0IGZ1bmN0aW9uIGFsaWduQWxsKGRvYykgewogIGlmKCFkb2MpIHJldHVybiBmYWxzZTsKICBsZXQgaXRlbXMgPSBkb2MuZ2V0QWxsKGRvYy50eXBlID09ICdicmQnID8gJ2VsZW1lbnQnIDogJ2luc3RhbmNlJyk7CiAgbGV0IGNoYW5nZWQgPSBmYWxzZTsKICBmb3IobGV0IGl0ZW0gb2YgaXRlbXMpIGNoYW5nZWQgfD0gYWxpZ25JdGVtKGl0ZW0pOwogIGxldCBzaWduYWxzX25ldHMgPSBkb2MuZ2V0QWxsKC8oc2lnbmFsc3xuZXRzKS8pOwoKICBmb3IobGV0IG5ldCBvZiBzaWduYWxzX25ldHMpIGZvciAobGV0IGl0ZW0gb2YgbmV0LmdldEFsbCgnd2lyZScpKSBjaGFuZ2VkIHw9IGFsaWduSXRlbShpdGVtKTsKICByZXR1cm4gISFjaGFuZ2VkOwp9CgpleHBvcnQgZnVuY3Rpb24gc2NpZW50aWZpYyh2YWx1ZSkgewogIGxldCBzY2kgPSBbR2V0TWFudGlzc2EodmFsdWUpLCBHZXRFeHBvbmVudCh2YWx1ZSldOwoKICBkZWZpbmUoc2NpLCB7CiAgICB0b1N0cmluZygpIHsKICAgICAgbGV0IHNpZ24gPSBNYXRoLnNpZ24odGhpc1sxXSkgPCAwID8gJy0nIDogJysnOwogICAgICByZXR1cm4gYCR7dGhpc1swXX1lJHtzaWdufSR7KE1hdGguYWJzKHRoaXNbMV0pICsgJycpLnBhZFN0YXJ0KDIsICcwJyl9YDsKICAgIH0KICB9KTsKICByZXR1cm4gc2NpOwp9CmNvbnN0ICB0ZXh0ID0gKCgpID0+IHsKY29uc3QgYW5zaSA9ICBVdGlsLmNvbG9yaW5nKHRydWUpOwogIHJldHVybiAoLi4uYXJncykgPT4gIGFuc2kudGV4dCguLi5hcmdzKTsKfSkoKTsKCmNvbnN0IHZlcnRpY2FsUmVjdGFuZ2xlcyA9IFsn4paIJywgJ+KWoScsICdcdTI1ODhcdTI1OGQnIC8qJ1x1MjU4OScqLyAvKifilq4nKi8sICfilqEnLCAn4pavJ107CmNvbnN0IGxhcmdlU3F1YXJlcyA9IFsn4pagJywgJ+KWoSddOwoKZXhwb3J0IGZ1bmN0aW9uIG51bTJjb2xvcihudW0sIHNxdWFyZSA9IGZhbHNlKSB7CiAgbGV0IHN5bSA9IHNxdWFyZSA/IGxhcmdlU3F1YXJlcyA6IHZlcnRpY2FsUmVjdGFuZ2xlczsKICBsZXQgYmFuZHMgPSB0eXBlb2YgbnVtID09ICdudW1iZXInID8gR2V0Q29sb3JCYW5kcyhudW0pIDogbnVtOwogIGNvbnN0IHsgYW5zaSwgcmdiIH0gPSBkaWdpdDJjb2xvcjsKICBsZXQgYSA9IG4gPT4gYW5zaVtuXT8uc2xpY2UoMSkgPz8gW107CiAgbGV0IHJldCA9IFtdOyAvL2JhbmRzLm1hcChuID0+ICk7CiAgcmV0LnB1c2godGV4dCgnXHUyNTk1JywgMzgsIDIsIC4uLmRpZ2l0MmNvbG9yLnJnYltCR10pKTsKCiAgZm9yKGxldCBiYW5kIG9mIGJhbmRzKSB7CiAgICBpZihyZXQubGVuZ3RoKSByZXQucHVzaCh0ZXh0KCcgJywgNDgsIDIsIC4uLnJnYltCR10pKTsKICAgIC8vCiAgICAvLyAgcmV0LnB1c2godGV4dChzeW1bMF0sIDM4KSk7CiAgICBpZihiYW5kKSB7CiAgICAgIGJhbmQgPSB0ZXh0KHN5bVswXSwgMzgsIC4uLmEoYmFuZCkpOwogICAgICBiYW5kID0gdGV4dChiYW5kLCA0OCwgMiwgLi4ucmdiW0JHXSk7CiAgICB9IGVsc2UgewogICAgICBiYW5kID0gdGV4dChzeW1bMV0sIDM4LCAyLCAyNTUsIDI1NSwgMjU1KTsKICAgIH0KICAgIHJldC5wdXNoKGJhbmQpOyAvLwogIH0KICByZXQucHVzaCh0ZXh0KCcgJywgNDgsIDIsIC4uLnJnYltCR10pKTsKICBjb25zb2xlLmxvZygnbnVtMmNvbG9yJywgeyBiYW5kcywgcmV0IH0pOwogIHJldHVybiByZXQuam9pbignJyk7Cn0KAAAAAAAAAAASDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQgAAAAAAACNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACMKAAAAAAAAJAoAAAAAAAAAAAAAJAoAAAAAAAAlCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwoAAAAAAAAjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANELAAAAAAAA0gsAAAAAAAAAAAAA0gsAAAAAAADTCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QsAAAAAAADRCwAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": " \t"
					},
					"AgAAANMLAAAAAAAA1AsAAAAAAAAAAAAA1AsAAAAAAADVCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wsAAAAAAADTCwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 184103,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "main.js",
			"settings":
			{
				"buffer_size": 95255,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					27,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABMNAAAAAAAAFA0AAAAAAAAAAAAAFA0AAAAAAAAUDQAAAAAAAA8AAABHZXRDb2xvckJhbmRzLCA",
					"AQAAAAAAAAABAAAAEw0AAAAAAAAiDQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAASA8AAAAAAABIDwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eda/colorCoding.js",
			"settings":
			{
				"buffer_size": 3553,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					36,
					2,
					"right_delete",
					null,
					"AgAAAGYHAAAAAAAAZgcAAAAAAAACAAAAIC9mBwAAAAAAAGYHAAAAAAAAAQAAAC8",
					"AQAAAAAAAAABAAAAaAcAAAAAAABmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"cut",
					null,
					"AQAAABEHAAAAAAAAEQcAAAAAAAAoAAAAICBsZXQgbXVsdGlwbGllciA9IEdldE11bHRpcGxpZXJzKClbZl07Cg",
					"AQAAAAAAAAABAAAAEQcAAAAAAAA5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					2,
					"paste",
					null,
					"AgAAABEHAAAAAAAAOQcAAAAAAAAAAAAAOQcAAAAAAABhBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQcAAAAAAAARBwAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAACEHAAAAAAAAIgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQcAAAAAAAAhBwAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"left_delete",
					null,
					"AQAAADUHAAAAAAAANQcAAAAAAAADAAAAW2Zd",
					"AQAAAAAAAAABAAAANQcAAAAAAAA4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"paste",
					null,
					"AgAAAEoHAAAAAAAAVQcAAAAAAAAAAAAAVQcAAAAAAABVBwAAAAAAABAAAABHZXRNdWx0aXBsaWVycygp",
					"AQAAAAAAAAABAAAASgcAAAAAAABaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"cut",
					null,
					"AQAAAEoHAAAAAAAASgcAAAAAAAAOAAAAbXVsdGlwbGllcnNbZl0",
					"AQAAAAAAAAABAAAASgcAAAAAAABYBwAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"paste",
					null,
					"AgAAAF4HAAAAAAAAbAcAAAAAAAAAAAAAbAcAAAAAAABsBwAAAAAAAAoAAABtdWx0aXBsaWVy",
					"AQAAAAAAAAABAAAAXgcAAAAAAABoBwAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"left_delete",
					null,
					"AQAAADcHAAAAAAAANwcAAAAAAAAVAAAAICBsZXQgbXVsdGlwbGllciA9IDsK",
					"AQAAAAAAAAABAAAANwcAAAAAAABMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALcHAAAAAAAAuAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwcAAAAAAAC3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"cut",
					null,
					"AQAAALQFAAAAAAAAtAUAAAAAAAAOAAAALAogICAgWzZdOiAxZTc",
					"AQAAAAAAAAABAAAAtAUAAAAAAADCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					3,
					"paste",
					null,
					"AwAAALQFAAAAAAAAwgUAAAAAAAAAAAAAwgUAAAAAAADQBQAAAAAAAAAAAADQBQAAAAAAAN4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAUAAAAAAAC0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AgAAAMkFAAAAAAAAygUAAAAAAAAAAAAAygUAAAAAAADKBQAAAAAAAAEAAAA2",
					"AQAAAAAAAAABAAAAyQUAAAAAAADKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AgAAANcFAAAAAAAA2AUAAAAAAAAAAAAA2AUAAAAAAADYBQAAAAAAAAEAAAA2",
					"AQAAAAAAAAABAAAA1wUAAAAAAADYBQAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AgAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA0AUAAAAAAADQBQAAAAAAAAEAAAA3",
					"AQAAAAAAAAABAAAAzwUAAAAAAADQBQAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "9"
					},
					"AgAAAN0FAAAAAAAA3gUAAAAAAAAAAAAA3gUAAAAAAADeBQAAAAAAAAEAAAA3",
					"AQAAAAAAAAABAAAA3QUAAAAAAADeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"cut",
					null,
					"AQAAANAFAAAAAAAA0AUAAAAAAAAOAAAALAogICAgWzhdOiAxZTk",
					"AQAAAAAAAAABAAAA3gUAAAAAAADQBQAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					2,
					"paste",
					null,
					"AgAAANAFAAAAAAAA3gUAAAAAAAAAAAAA3gUAAAAAAADsBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AUAAAAAAADQBQAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "9"
					},
					"AgAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA5gUAAAAAAADmBQAAAAAAAAEAAAA4",
					"AQAAAAAAAAABAAAA5QUAAAAAAADmBQAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "10"
					},
					"AwAAAOsFAAAAAAAA7AUAAAAAAAAAAAAA7AUAAAAAAADsBQAAAAAAAAEAAAA57AUAAAAAAADtBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wUAAAAAAADsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					301,
					1,
					"cut",
					null,
					"AQAAADgEAAAAAAAAOAQAAAAAAAAQAAAAICAgIFsxZTMsICdrJ10sCg",
					"AQAAAAAAAAABAAAAOAQAAAAAAABIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					3,
					"paste",
					null,
					"AwAAADgEAAAAAAAASAQAAAAAAAAAAAAASAQAAAAAAABYBAAAAAAAAAAAAABYBAAAAAAAAGgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAQAAAAAAAA4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "-3"
					},
					"AwAAAD8EAAAAAAAAQAQAAAAAAAAAAAAAQAQAAAAAAABABAAAAAAAAAEAAAAzQAQAAAAAAABBBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwQAAAAAAABABAAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"left_delete",
					null,
					"AQAAAEQEAAAAAAAARAQAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAARQQAAAAAAABFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAAEQEAAAAAAAARQQAAAAAAAAAAAAARQQAAAAAAABGBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAQAAAAAAABEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					2,
					"left_delete",
					null,
					"AgAAAEUEAAAAAAAARQQAAAAAAAABAAAAbUQEAAAAAAAARAQAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAARgQAAAAAAABGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAEQEAAAAAAAARQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAQAAAAAAABEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					1,
					"left_delete",
					null,
					"AQAAAFQEAAAAAAAAVAQAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAVQQAAAAAAABVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAFQEAAAAAAAAVQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAQAAAAAAABUBAAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "-6"
					},
					"AgAAAE8EAAAAAAAAUAQAAAAAAAAAAAAAUAQAAAAAAABRBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwQAAAAAAABPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					321,
					2,
					"left_delete",
					null,
					"AgAAAFAEAAAAAAAAUAQAAAAAAAABAAAANk8EAAAAAAAATwQAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAUQQAAAAAAABRBAAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": "-6"
					},
					"AgAAAFAEAAAAAAAAUQQAAAAAAAAAAAAAUQQAAAAAAABSBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAQAAAAAAABQBAAAAAAAAAAAAAAAAPC/"
				],
				[
					324,
					1,
					"right_delete",
					null,
					"AQAAAFIEAAAAAAAAUgQAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAUgQAAAAAAABSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					1,
					"cut",
					null,
					"AQAAAE0EAAAAAAAATQQAAAAAAAARAAAAWzFlLTYsICd1J10sCiAgICA",
					"AQAAAAAAAAABAAAATQQAAAAAAABeBAAAAAAAAAAAAAAAAEZA"
				],
				[
					331,
					3,
					"paste",
					null,
					"AwAAAE0EAAAAAAAAXgQAAAAAAAAAAAAAXgQAAAAAAABvBAAAAAAAAAAAAABvBAAAAAAAAIAEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQQAAAAAAABNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AgAAAGYEAAAAAAAAZwQAAAAAAAAAAAAAZwQAAAAAAABnBAAAAAAAAAEAAAB1",
					"AQAAAAAAAAABAAAAZgQAAAAAAABnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AgAAAHcEAAAAAAAAeAQAAAAAAAAAAAAAeAQAAAAAAAB4BAAAAAAAAAEAAAB1",
					"AQAAAAAAAAABAAAAdwQAAAAAAAB4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": "9"
					},
					"AgAAAGIEAAAAAAAAYwQAAAAAAAAAAAAAYwQAAAAAAABjBAAAAAAAAAEAAAA2",
					"AQAAAAAAAAABAAAAYwQAAAAAAABiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": "12"
					},
					"AwAAAHMEAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB0BAAAAAAAAAEAAAA2dAQAAAAAAAB1BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwQAAAAAAAB0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"paste",
					null,
					"AQAAADoGAAAAAAAAXQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgYAAAAAAAA6BgAAAAAAAAAAAAAAAPC/"
				],
				[
					423,
					1,
					"left_delete",
					null,
					"AQAAAFwGAAAAAAAAXAYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAXQYAAAAAAABdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					1,
					"left_delete",
					null,
					"AQAAAFcGAAAAAAAAVwYAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAWAYAAAAAAABYBgAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": "expo"
					},
					"BAAAAFgGAAAAAAAAWQYAAAAAAAAAAAAAWQYAAAAAAABaBgAAAAAAAAAAAABaBgAAAAAAAFsGAAAAAAAAAAAAAFsGAAAAAAAAXAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAYAAAAAAABYBgAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"insert",
					{
						"characters": "nen"
					},
					"AwAAAFwGAAAAAAAAXQYAAAAAAAAAAAAAXQYAAAAAAABeBgAAAAAAAAAAAABeBgAAAAAAAF8GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAYAAAAAAABcBgAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": " t,"
					},
					"AwAAAF8GAAAAAAAAYAYAAAAAAAAAAAAAYAYAAAAAAABhBgAAAAAAAAAAAABhBgAAAAAAAGIGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwYAAAAAAABfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"insert",
					{
						"characters": " b"
					},
					"AgAAAGIGAAAAAAAAYwYAAAAAAAAAAAAAYwYAAAAAAABkBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgYAAAAAAABiBgAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					3,
					"left_delete",
					null,
					"AwAAAGMGAAAAAAAAYwYAAAAAAAABAAAAYmIGAAAAAAAAYgYAAAAAAAABAAAAIGEGAAAAAAAAYQYAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAZAYAAAAAAABkBgAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"left_delete",
					null,
					"AQAAAGAGAAAAAAAAYAYAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAYQYAAAAAAABhBgAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAGAGAAAAAAAAYQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAYAAAAAAABgBgAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					2,
					"left_delete",
					null,
					"AgAAAGAGAAAAAAAAYAYAAAAAAAABAAAAdF8GAAAAAAAAXwYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAYQYAAAAAAABhBgAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": "t,"
					},
					"AgAAAF8GAAAAAAAAYAYAAAAAAAAAAAAAYAYAAAAAAABhBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwYAAAAAAABfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": " base=10"
					},
					"CAAAAGEGAAAAAAAAYgYAAAAAAAAAAAAAYgYAAAAAAABjBgAAAAAAAAAAAABjBgAAAAAAAGQGAAAAAAAAAAAAAGQGAAAAAAAAZQYAAAAAAAAAAAAAZQYAAAAAAABmBgAAAAAAAAAAAABmBgAAAAAAAGcGAAAAAAAAAAAAAGcGAAAAAAAAaAYAAAAAAAAAAAAAaAYAAAAAAABpBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQYAAAAAAABhBgAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAGwGAAAAAAAAbQYAAAAAAAAAAAAAbQYAAAAAAABvBgAAAAAAAAAAAABvBgAAAAAAAHAGAAAAAAAAAAAAAHAGAAAAAAAAcQYAAAAAAAAAAAAAcQYAAAAAAAByBgAAAAAAAAAAAAByBgAAAAAAAHMGAAAAAAAAAAAAAHMGAAAAAAAAdAYAAAAAAAAAAAAAdAYAAAAAAAB1BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAYAAAAAAABsBgAAAAAAAP///////+9/"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": "  Math.pow"
					},
					"CgAAAHUGAAAAAAAAdgYAAAAAAAAAAAAAdgYAAAAAAAB3BgAAAAAAAAAAAAB3BgAAAAAAAHgGAAAAAAAAAAAAAHgGAAAAAAAAeQYAAAAAAAAAAAAAeQYAAAAAAAB6BgAAAAAAAAAAAAB6BgAAAAAAAHsGAAAAAAAAAAAAAHsGAAAAAAAAfAYAAAAAAAAAAAAAfAYAAAAAAAB9BgAAAAAAAAAAAAB9BgAAAAAAAH4GAAAAAAAAAAAAAH4GAAAAAAAAfwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQYAAAAAAAB1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAH8GAAAAAAAAgQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": "base,"
					},
					"BQAAAIAGAAAAAAAAgQYAAAAAAAAAAAAAgQYAAAAAAACCBgAAAAAAAAAAAACCBgAAAAAAAIMGAAAAAAAAAAAAAIMGAAAAAAAAhAYAAAAAAAAAAAAAhAYAAAAAAACFBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAYAAAAAAACABgAAAAAAAAAAAAAAAPC/"
				],
				[
					453,
					1,
					"insert",
					{
						"characters": " exponent"
					},
					"CQAAAIUGAAAAAAAAhgYAAAAAAAAAAAAAhgYAAAAAAACHBgAAAAAAAAAAAACHBgAAAAAAAIgGAAAAAAAAAAAAAIgGAAAAAAAAiQYAAAAAAAAAAAAAiQYAAAAAAACKBgAAAAAAAAAAAACKBgAAAAAAAIsGAAAAAAAAAAAAAIsGAAAAAAAAjAYAAAAAAAAAAAAAjAYAAAAAAACNBgAAAAAAAAAAAACNBgAAAAAAAI4GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQYAAAAAAACFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAI8GAAAAAAAAkAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwYAAAAAAACPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAJAGAAAAAAAAkQYAAAAAAAAAAAAAkQYAAAAAAACTBgAAAAAAAAAAAACTBgAAAAAAAJQGAAAAAAAAAAAAAJEGAAAAAAAAkQYAAAAAAAACAAAAICCRBgAAAAAAAJEGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAYAAAAAAACQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJIGAAAAAAAAkwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgYAAAAAAACSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADoGAAAAAAAAOwYAAAAAAAAAAAAAOwYAAAAAAAA8BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgYAAAAAAAA6BgAAAAAAAAAAAAAAAAAA"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAABQIAAAAAAAAFQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAgAAAAAAAAUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACQIAAAAAAAAJQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAgAAAAAAAAkCAAAAAAAAP///////+9/"
				],
				[
					484,
					1,
					"left_delete",
					null,
					"AQAAACQIAAAAAAAAJAgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAJQgAAAAAAAAlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					486,
					1,
					"insert",
					{
						"characters": "^??"
					},
					"AwAAACMIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAlCAAAAAAAAAAAAAAlCAAAAAAAACYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwgAAAAAAAAjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACYIAAAAAAAAJwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJggAAAAAAAAmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					488,
					4,
					"left_delete",
					null,
					"BAAAACYIAAAAAAAAJggAAAAAAAABAAAAICUIAAAAAAAAJQgAAAAAAAABAAAAPyQIAAAAAAAAJAgAAAAAAAABAAAAPyMIAAAAAAAAIwgAAAAAAAABAAAAXg",
					"AQAAAAAAAAABAAAAJwgAAAAAAAAnCAAAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					1,
					"insert",
					{
						"characters": "??"
					},
					"AgAAACMIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAlCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwgAAAAAAAAjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"paste",
					null,
					"AQAAACUIAAAAAAAAMggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQgAAAAAAAAlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADIIAAAAAAAANAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMggAAAAAAAAyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAADMIAAAAAAAANAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwgAAAAAAAAzCAAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADUIAAAAAAAANggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQgAAAAAAAA1CAAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJwHAAAAAAAAnQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAcAAAAAAACcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": " expon"
					},
					"BgAAAJ0HAAAAAAAAngcAAAAAAAAAAAAAngcAAAAAAACfBwAAAAAAAAAAAACfBwAAAAAAAKAHAAAAAAAAAAAAAKAHAAAAAAAAoQcAAAAAAAAAAAAAoQcAAAAAAACiBwAAAAAAAAAAAACiBwAAAAAAAKMHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQcAAAAAAACdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": "ent"
					},
					"AwAAAKMHAAAAAAAApAcAAAAAAAAAAAAApAcAAAAAAAClBwAAAAAAAAAAAAClBwAAAAAAAKYHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowcAAAAAAACjBwAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKYHAAAAAAAApwcAAAAAAAAAAAAApwcAAAAAAACoBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgcAAAAAAACmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": " 1e1"
					},
					"BAAAAKgHAAAAAAAAqQcAAAAAAAAAAAAAqQcAAAAAAACqBwAAAAAAAAAAAACqBwAAAAAAAKsHAAAAAAAAAAAAAKsHAAAAAAAArAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAcAAAAAAACoBwAAAAAAAAAAAAAAAPC/"
				],
				[
					531,
					2,
					"left_delete",
					null,
					"AgAAAKsHAAAAAAAAqwcAAAAAAAABAAAAMaoHAAAAAAAAqgcAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAArAcAAAAAAACsBwAAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"cut",
					null,
					"AQAAAKkHAAAAAAAAqQcAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAqQcAAAAAAACqBwAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKkHAAAAAAAAqgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQcAAAAAAACpBwAAAAAAAAAAAAAAAPC/"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": "\n\nval"
					},
					"CAAAAK0HAAAAAAAArgcAAAAAAAAAAAAArgcAAAAAAACwBwAAAAAAAAAAAACwBwAAAAAAALEHAAAAAAAAAAAAALEHAAAAAAAAswcAAAAAAAAAAAAArgcAAAAAAACuBwAAAAAAAAIAAAAgILEHAAAAAAAAsgcAAAAAAAAAAAAAsgcAAAAAAACzBwAAAAAAAAAAAACzBwAAAAAAALQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQcAAAAAAACtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"insert",
					{
						"characters": "ue"
					},
					"AgAAALQHAAAAAAAAtQcAAAAAAAAAAAAAtQcAAAAAAAC2BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAcAAAAAAAC0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": " =Ma"
					},
					"BAAAALYHAAAAAAAAtwcAAAAAAAAAAAAAtwcAAAAAAAC4BwAAAAAAAAAAAAC4BwAAAAAAALkHAAAAAAAAAAAAALkHAAAAAAAAugcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgcAAAAAAAC2BwAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					2,
					"left_delete",
					null,
					"AgAAALkHAAAAAAAAuQcAAAAAAAABAAAAYbgHAAAAAAAAuAcAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAugcAAAAAAAC6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BQAAALgHAAAAAAAAuQcAAAAAAAAAAAAAuQcAAAAAAAC6BwAAAAAAAAAAAAC6BwAAAAAAALsHAAAAAAAAAAAAALsHAAAAAAAAvAcAAAAAAAAAAAAAvAcAAAAAAAC9BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAcAAAAAAAC4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					568,
					6,
					"left_delete",
					null,
					"BgAAALwHAAAAAAAAvAcAAAAAAAABAAAAZbsHAAAAAAAAuwcAAAAAAAABAAAAdboHAAAAAAAAugcAAAAAAAABAAAAbLkHAAAAAAAAuQcAAAAAAAABAAAAYbgHAAAAAAAAuAcAAAAAAAABAAAAdrcHAAAAAAAAtwcAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAvQcAAAAAAAC9BwAAAAAAAAAAAAAAAPC/"
				],
				[
					569,
					1,
					"insert",
					{
						"characters": "*="
					},
					"AgAAALcHAAAAAAAAuAcAAAAAAAAAAAAAuAcAAAAAAAC5BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwcAAAAAAAC3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": " Math.pow"
					},
					"CQAAALkHAAAAAAAAugcAAAAAAAAAAAAAugcAAAAAAAC7BwAAAAAAAAAAAAC7BwAAAAAAALwHAAAAAAAAAAAAALwHAAAAAAAAvQcAAAAAAAAAAAAAvQcAAAAAAAC+BwAAAAAAAAAAAAC+BwAAAAAAAL8HAAAAAAAAAAAAAL8HAAAAAAAAwAcAAAAAAAAAAAAAwAcAAAAAAADBBwAAAAAAAAAAAADBBwAAAAAAAMIHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQcAAAAAAAC5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMIHAAAAAAAAxAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgcAAAAAAADCBwAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": "10,exp"
					},
					"BgAAAMMHAAAAAAAAxAcAAAAAAAAAAAAAxAcAAAAAAADFBwAAAAAAAAAAAADFBwAAAAAAAMYHAAAAAAAAAAAAAMYHAAAAAAAAxwcAAAAAAAAAAAAAxwcAAAAAAADIBwAAAAAAAAAAAADIBwAAAAAAAMkHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwcAAAAAAADDBwAAAAAAAAAAAAAAAPC/"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": "onent"
					},
					"BQAAAMkHAAAAAAAAygcAAAAAAAAAAAAAygcAAAAAAADLBwAAAAAAAAAAAADLBwAAAAAAAMwHAAAAAAAAAAAAAMwHAAAAAAAAzQcAAAAAAAAAAAAAzQcAAAAAAADOBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQcAAAAAAADJBwAAAAAAAAAAAAAAAPC/"
				],
				[
					575,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM8HAAAAAAAA0AcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwcAAAAAAADPBwAAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANAHAAAAAAAA0QcAAAAAAAAAAAAA0QcAAAAAAADTBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AcAAAAAAADQBwAAAAAAAAAAAAAAAPC/"
				],
				[
					599,
					1,
					"cut",
					null,
					"AQAAAK8HAAAAAAAArwcAAAAAAAAiAAAAICB2YWx1ZSAqPSBNYXRoLnBvdygxMCxleHBvbmVudCk7Cg",
					"AQAAAAAAAAABAAAArwcAAAAAAADRBwAAAAAAAAAAAAAAAPC/"
				],
				[
					602,
					1,
					"cut",
					null,
					"AQAAAJwHAAAAAAAAnAcAAAAAAAAOAAAALCBleHBvbmVudCA9IDA",
					"AQAAAAAAAAABAAAAnAcAAAAAAACqBwAAAAAAAAAAAAAAAPC/"
				],
				[
					615,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAAIAJAAAAAAAAgQkAAAAAAAAAAAAAoQcAAAAAAAChBwAAAAAAAAIAAAAgIH8JAAAAAAAAgAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAkAAAAAAACACQAAAAAAAAAAAAAAAPC/"
				],
				[
					616,
					1,
					"insert",
					{
						"characters": " export"
					},
					"BwAAAIAJAAAAAAAAgQkAAAAAAAAAAAAAgQkAAAAAAACCCQAAAAAAAAAAAACCCQAAAAAAAIMJAAAAAAAAAAAAAIMJAAAAAAAAhAkAAAAAAAAAAAAAhAkAAAAAAACFCQAAAAAAAAAAAACFCQAAAAAAAIYJAAAAAAAAAAAAAIYJAAAAAAAAhwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAkAAAAAAACACQAAAAAAAAAAAAAAAPC/"
				],
				[
					617,
					1,
					"insert",
					{
						"characters": " const"
					},
					"BgAAAIcJAAAAAAAAiAkAAAAAAAAAAAAAiAkAAAAAAACJCQAAAAAAAAAAAACJCQAAAAAAAIoJAAAAAAAAAAAAAIoJAAAAAAAAiwkAAAAAAAAAAAAAiwkAAAAAAACMCQAAAAAAAAAAAACMCQAAAAAAAI0JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwkAAAAAAACHCQAAAAAAAAAAAAAAAPC/"
				],
				[
					618,
					1,
					"insert",
					{
						"characters": " C"
					},
					"AgAAAI0JAAAAAAAAjgkAAAAAAAAAAAAAjgkAAAAAAACPCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQkAAAAAAACNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					619,
					1,
					"left_delete",
					null,
					"AQAAAI4JAAAAAAAAjgkAAAAAAAABAAAAQw",
					"AQAAAAAAAAABAAAAjwkAAAAAAACPCQAAAAAAAAAAAAAAAPC/"
				],
				[
					620,
					1,
					"insert",
					{
						"characters": "PartE"
					},
					"BQAAAI4JAAAAAAAAjwkAAAAAAAAAAAAAjwkAAAAAAACQCQAAAAAAAAAAAACQCQAAAAAAAJEJAAAAAAAAAAAAAJEJAAAAAAAAkgkAAAAAAAAAAAAAkgkAAAAAAACTCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgkAAAAAAACOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					621,
					1,
					"insert",
					{
						"characters": "xpa"
					},
					"AwAAAJMJAAAAAAAAlAkAAAAAAAAAAAAAlAkAAAAAAACVCQAAAAAAAAAAAACVCQAAAAAAAJYJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwkAAAAAAACTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					622,
					1,
					"left_delete",
					null,
					"AQAAAJUJAAAAAAAAlQkAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAlgkAAAAAAACWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					623,
					1,
					"insert",
					{
						"characters": "onents="
					},
					"BwAAAJUJAAAAAAAAlgkAAAAAAAAAAAAAlgkAAAAAAACXCQAAAAAAAAAAAACXCQAAAAAAAJgJAAAAAAAAAAAAAJgJAAAAAAAAmQkAAAAAAAAAAAAAmQkAAAAAAACaCQAAAAAAAAAAAACaCQAAAAAAAJsJAAAAAAAAAAAAAJsJAAAAAAAAnAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQkAAAAAAACVCQAAAAAAAAAAAAAAAPC/"
				],
				[
					624,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJwJAAAAAAAAngkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAkAAAAAAACcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJ0JAAAAAAAAngkAAAAAAAAAAAAAngkAAAAAAACfCQAAAAAAAAAAAACfCQAAAAAAAKAJAAAAAAAAAAAAAKAJAAAAAAAAoQkAAAAAAAAAAAAAngkAAAAAAACeCQAAAAAAAAEAAAAgngkAAAAAAACgCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQkAAAAAAACdCQAAAAAAAAAAAAAAAPC/"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": "C:"
					},
					"AgAAAKAJAAAAAAAAoQkAAAAAAAAAAAAAoQkAAAAAAACiCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAkAAAAAAACgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					627,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKIJAAAAAAAAowkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					630,
					1,
					"insert",
					{
						"characters": "Scales"
					},
					"BwAAAJIJAAAAAAAAkwkAAAAAAAAAAAAAkwkAAAAAAACTCQAAAAAAAAkAAABFeHBvbmVudHOTCQAAAAAAAJQJAAAAAAAAAAAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAACWCQAAAAAAAJcJAAAAAAAAAAAAAJcJAAAAAAAAmAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgkAAAAAAACbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"paste",
					null,
					"AQAAAKAJAAAAAAAAogkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAkAAAAAAACgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAKIJAAAAAAAAowkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					641,
					1,
					"left_delete",
					null,
					"AQAAAKAJAAAAAAAAoAkAAAAAAAADAAAAMTIx",
					"AQAAAAAAAAABAAAAoAkAAAAAAACjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					642,
					1,
					"insert",
					{
						"characters": "1e12,"
					},
					"BQAAAKAJAAAAAAAAoQkAAAAAAAAAAAAAoQkAAAAAAACiCQAAAAAAAAAAAACiCQAAAAAAAKMJAAAAAAAAAAAAAKMJAAAAAAAApAkAAAAAAAAAAAAApAkAAAAAAAClCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAkAAAAAAACgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					643,
					1,
					"insert",
					{
						"characters": "\nR="
					},
					"BAAAAKUJAAAAAAAApgkAAAAAAAAAAAAApgkAAAAAAACoCQAAAAAAAAAAAACoCQAAAAAAAKkJAAAAAAAAAAAAAKkJAAAAAAAAqgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQkAAAAAAAClCQAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAKoJAAAAAAAAqwkAAAAAAAAAAAAAqwkAAAAAAACsCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgkAAAAAAACqCQAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					3,
					"left_delete",
					null,
					"AwAAAKsJAAAAAAAAqwkAAAAAAAABAAAAMaoJAAAAAAAAqgkAAAAAAAABAAAAIKkJAAAAAAAAqQkAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAArAkAAAAAAACsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					646,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAKkJAAAAAAAAqgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQkAAAAAAACpCQAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAKoJAAAAAAAAqwkAAAAAAAAAAAAAqwkAAAAAAACsCQAAAAAAAAAAAACsCQAAAAAAAK0JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgkAAAAAAACqCQAAAAAAAAAAAAAAAPC/"
				],
				[
					648,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK0JAAAAAAAArgkAAAAAAAAAAAAArgkAAAAAAACwCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQkAAAAAAACtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					649,
					1,
					"insert",
					{
						"characters": ";L"
					},
					"AgAAALAJAAAAAAAAsQkAAAAAAAAAAAAAsQkAAAAAAACyCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAkAAAAAAACwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					650,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALIJAAAAAAAAswkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgkAAAAAAACyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					651,
					3,
					"left_delete",
					null,
					"AwAAALIJAAAAAAAAsgkAAAAAAAABAAAAILEJAAAAAAAAsQkAAAAAAAABAAAATLAJAAAAAAAAsAkAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAswkAAAAAAACzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					652,
					1,
					"insert",
					{
						"characters": "L:"
					},
					"AgAAALAJAAAAAAAAsQkAAAAAAAAAAAAAsQkAAAAAAACyCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAkAAAAAAACwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					1,
					"insert",
					{
						"characters": " 1e0"
					},
					"BAAAALIJAAAAAAAAswkAAAAAAAAAAAAAswkAAAAAAAC0CQAAAAAAAAAAAAC0CQAAAAAAALUJAAAAAAAAAAAAALUJAAAAAAAAtgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgkAAAAAAACyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"left_delete",
					null,
					"AQAAALUJAAAAAAAAtQkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAtgkAAAAAAAC2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					655,
					1,
					"insert",
					{
						"characters": "6,"
					},
					"AgAAALUJAAAAAAAAtgkAAAAAAAAAAAAAtgkAAAAAAAC3CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQkAAAAAAAC1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"left_delete",
					null,
					"AQAAALYJAAAAAAAAtgkAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAtwkAAAAAAAC3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					657,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALYJAAAAAAAAtwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgkAAAAAAAC2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					659,
					1,
					"left_delete",
					null,
					"AQAAALoJAAAAAAAAugkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAuwkAAAAAAAC7CQAAAAAAAAAAAAAAwFhA"
				],
				[
					707,
					1,
					"paste",
					null,
					"AQAAAI8AAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					708,
					1,
					"left_delete",
					null,
					"AQAAAJUAAAAAAAAAlQAAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					758,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAE4IAAAAAAAATwgAAAAAAAAAAAAATwgAAAAAAABQCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATggAAAAAAABOCAAAAAAAAAAAAAAAAPC/"
				],
				[
					763,
					1,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AQAAAHIHAAAAAAAATggAAAAAAADeAAAAcG9ydCBmdW5jdGlvbiBHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKSB7CgoKICBsZXQgZiA9IEdldEZhY3Rvcih2YWx1ZSk7CiAgbGV0IGZ4ID0gZiArICgyIC0gcHJlY2lzaW9uKTsKICBsZXQgbXVsdGlwbGllcnMgPSBHZXRNdWx0aXBsaWVycygpOwogIGxldCB4ID0gdmFsdWUgLyAobXVsdGlwbGllcnNbZl0/P0dldE11bHRpcGxpZXIoZikpOwogIGxldCByID0gW107Ci8v",
					"AQAAAAAAAAABAAAAUAgAAAAAAAByBwAAAAAAAAAAAAAAAPC/"
				],
				[
					764,
					1,
					"delete_blank_lines",
					{
						"surplus": true
					},
					"AQAAAHIHAAAAAAAATggAAAAAAADcAAAAcG9ydCBmdW5jdGlvbiBHZXRDb2xvckJhbmRzKHZhbHVlLCBwcmVjaXNpb24gPSAyKSB7CiAgbGV0IGYgPSBHZXRGYWN0b3IodmFsdWUpOwogIGxldCBmeCA9IGYgKyAoMiAtIHByZWNpc2lvbik7CiAgbGV0IG11bHRpcGxpZXJzID0gR2V0TXVsdGlwbGllcnMoKTsKICBsZXQgeCA9IHZhbHVlIC8gKG11bHRpcGxpZXJzW2ZdPz9HZXRNdWx0aXBsaWVyKGYpKTsKICBsZXQgciA9IFtdOwovLw",
					"AQAAAAAAAAABAAAAcgcAAAAAAABOCAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eda/units.js",
			"settings":
			{
				"buffer_size": 137,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/eagle",
		"/home/roman/Projects/plot-cv/lib/eda",
		"/home/roman/Projects/plot-cv/modules",
		"/home/roman/Projects/plot-cv/static",
		"/home/roman/Projects/plot-cv/static/css"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/cross.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/dimension.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/sheet.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/rectangle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/plot-cv/lib/xml.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/preact.js",
		"/home/roman/Projects/plot-cv/lib/hooks.js",
		"/home/roman/Projects/plot-cv/lib/preact.mjs",
		"/home/roman/Projects/plot-cv/lib/preact.standalone.js",
		"/home/roman/Projects/plot-cv/lib/preact.m.js",
		"/home/roman/Projects/plot-cv/lib/preact.esm.js",
		"/home/roman/Projects/plot-cv/test-imread.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useEvent.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/test-sockets.js",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tmp.xml",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/test-umat.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/test-net.js",
		"/home/roman/Projects/plot-cv/test-minnet.js",
		"/home/roman/Projects/plot-cv/plot-cv.js",
		"/home/roman/Projects/plot-cv/list-proxies.js",
		"/home/roman/Projects/plot-cv/libraries.js",
		"/home/roman/Projects/plot-cv/grammar-geda-netlist.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/test.js",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/test-glfw.js",
		"/home/roman/Projects/plot-cv/modules/tty.c",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js",
		"/home/roman/Projects/plot-cv/src/plot-cv.cpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/test-features2d.js",
		"/home/roman/Projects/plot-cv/static/css/list.css",
		"/home/roman/Projects/plot-cv/fontsample.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/videoSource.js",
		"/home/roman/Projects/plot-cv/lib/compat.mjs",
		"/home/roman/Projects/plot-cv/lib/hooks.mjs",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/preact.mjs",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useTrkl.js",
		"/home/roman/Projects/plot-cv/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/static/svg/sort-size-2.svg",
		"/home/roman/Projects/plot-cv/static/svg/sort-name-2.svg",
		"/home/roman/Projects/plot-cv/static/svg/sort-time-2.svg",
		"/home/roman/Projects/plot-cv/commands.js",
		"/home/roman/Projects/plot-cv/static/debugger.css",
		"/home/roman/Projects/plot-cv/tlite.css",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/lib/geom/align.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/inotify_event.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/palette.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/geometry.hpp",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/plot-cv/test-voronoi.js",
		"/home/roman/Projects/plot-cv/quickjs/README.md",
		"/home/roman/Projects/plot-cv/quickjs/readme.txt",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/skeletonization.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/gif_write.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_gif.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/png_write.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/DomColors.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant_colors_grabber.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_imgproc.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant_colors_grabber.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/qjs-opencv/gifenc/example.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/DomColors.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/.git",
		"/home/roman/Projects/plot-cv/image-helpers.js",
		"/home/roman/Projects/plot-cv/test-eagle.js",
		"/home/roman/Projects/plot-cv/test-ecmascript2.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.cpp",
		"/home/roman/Projects/plot-cv/test-video.config.json",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.hpp"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"color.text",
			"replace",
			"GetColorBa",
			"GetExponent, GetMantissa, ValueToNumber, NumberToValue, GetMultipliers, GetFactor, GetColorBands, BG, digit2color ",
			"App",
			"GetColorBands, updateMeasures, alignItem, alignAll, scientific, num2color",
			"{\n",
			"pushTransform",
			"lookup",
			"unique",
			"function isObject",
			"isObject",
			"Util\\.",
			"ansi",
			"assign",
			"digit2color",
			"nameValue",
			"components:",
			"Util\\.(define|isObject|memoize|range|unique)\\(",
			"Util\\.(define|isObject|memoize|range|unique)",
			"(Util\\.define|Util\\.isObject|Util\\.memoize|Util\\.range|Util\\.unique)",
			"unique",
			"(Util\\.define|Util\\.isObject|Util\\.memoize|Util\\.range|Util\\.unique)",
			"globalThi",
			"put_banner",
			"openSync",
			"filesystem",
			"import",
			"\n        //rational(value).toExponential()",
			"xmlize",
			"scientific",
			"EagleDoc",
			"^function",
			"^funct",
			"^\\s*console",
			"assign",
			"fromXML",
			"xml.js",
			"xml",
			"../an-tronics/eagle/Headphone-Amplifier-ClassAB-alt2.brd",
			"filesystem\\.",
			"u\\$1 =",
			"u$1 =",
			"rectangle",
			"// ",
			"gulp",
			"serialport",
			"libbpg",
			"\",    ",
			"jison",
			"_moduleAl",
			"\"\n",
			"hier",
			"findContours",
			"2",
			"openSync",
			"writeFileSync",
			"ResizeHandler",
			"\\.properties",
			"rect",
			"handler",
			"MouseIterator",
			"filesystem",
			"std\\.",
			"inspect",
			"          \n",
			"sort.*svg",
			"ButtonGroup",
			"useEvent",
			"mousedown",
			"ButtonGr",
			"sort-",
			"createRef",
			"IS_HYDRATE",
			"hydrate",
			"createRef",
			"preactCom",
			"Fragment",
			"vnode",
			"cloneElement",
			"cloneEleme",
			"clone",
			"\\(Button,",
			"\\(Button, ",
			"'group'",
			"ButtonGroup",
			"black",
			"#000",
			"black",
			"#000",
			"#fff",
			"#000",
			"fill",
			"button",
			"components.js",
			"ButtonGroup",
			"align",
			"CCimage",
			"resize",
			"fromImages",
			"input",
			"'ImageSize",
			"seq\\.size",
			"FAIL:",
			"ImageSize",
			"dst",
			"firstSize",
			"dst0Size",
			"videoSize",
			"video\\.",
			"videos",
			"ImageSequence",
			"fetch",
			"'/save'",
			"save'",
			"Compile\\(",
			"args",
			"SpawnCom",
			"SpawnCm",
			"-I",
			"'I'",
			"'-I'",
			"'-I?",
			"'-I'",
			"-I",
			"document",
			"global\\.",
			"outputName"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log",
			"puts",
			"export function",
			"type",
			"header.",
			"#000000",
			"a",
			"MakeListCommand",
			"si",
			"pi",
			"plen",
			"slen",
			"pattern[0]",
			"string[0]",
			"string.length",
			"pattern.length",
			"string.length",
			"export const",
			"this",
			"item",
			"js_deep_defaultflags",
			"sheet",
			"makeListMembersCmd",
			"get_websocket_obj",
			"0",
			"searchPath",
			"makeValueDescriptor",
			"socket",
			"",
			", func",
			"func,",
			"func",
			"function ",
			"readline",
			"",
			"(",
			"Pointer",
			"deref",
			"export \\1",
			"log"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 184,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/eagle-query.js",
							"function_name_status_row": 7,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									463,
									494
								],
								[
									620,
									639
								],
								[
									708,
									736
								],
								[
									1408,
									1425
								],
								[
									1837,
									1855
								],
								[
									1870,
									1874
								],
								[
									2606,
									2615
								],
								[
									2681,
									2700
								],
								[
									2809,
									2818
								],
								[
									2843,
									2865
								],
								[
									3387,
									3403
								]
							],
							"symlist":
							[
								"  xmlize(obj, depth = 2)",
								"SubstChars = str =>",
								"  main(...args)",
								"([name, elem]) =>",
								"([name, value]) =>",
								"  m =>",
								"(a, b) =>",
								"([value, count]) =>",
								"(a, b) =>",
								"([val, rat, count]) =>",
								"([key, list]) =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639442428.82,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "eagle-query.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3985,
						"regions":
						{
						},
						"selection":
						[
							[
								3309,
								3309
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 80,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639464044.47,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1140.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "eagle-commands.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3096,
						"regions":
						{
						},
						"selection":
						[
							[
								3029,
								3029
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 94,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639442427.9,
							"tabs_extra_last_activated_sheet_index": 1,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1262.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 184103,
						"regions":
						{
						},
						"selection":
						[
							[
								136145,
								136149
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 4486,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639442112.12,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 93809.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 95255,
						"regions":
						{
						},
						"selection":
						[
							[
								3912,
								3912
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 55,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639441361.64,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 636.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/eda/colorCoding.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3553,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										3447,
										3451
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										3422,
										3422
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										3416,
										3421
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										3391,
										3391
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2560,
										2567
									],
									[
										3258,
										3263
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									],
									[
										3233,
										3233
									]
								],
								"scope": "col_gutter"
							},
							"col_4A90E2FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2658,
										2665
									]
								],
								"scope": "col_4A90E2FF"
							},
							"col_4A90E2FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4A90E2FF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									]
								],
								"scope": "col_gutter"
							},
							"col_7ED321FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2642,
										2649
									]
								],
								"scope": "col_7ED321FF"
							},
							"col_7ED321FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7ED321FF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									]
								],
								"scope": "col_gutter"
							},
							"col_808080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										3510,
										3514
									]
								],
								"scope": "col_808080FF"
							},
							"col_808080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_808080FF_circle.png",
								"regions":
								[
									[
										3484,
										3484
									]
								],
								"scope": "col_gutter"
							},
							"col_8B572AFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2576,
										2583
									]
								],
								"scope": "col_8B572AFF"
							},
							"col_8B572AFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_8B572AFF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									]
								],
								"scope": "col_gutter"
							},
							"col_9013FEFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2674,
										2681
									]
								],
								"scope": "col_9013FEFF"
							},
							"col_9013FEFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_9013FEFF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									]
								],
								"scope": "col_gutter"
							},
							"col_999999FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2690,
										2697
									]
								],
								"scope": "col_999999FF"
							},
							"col_999999FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_999999FF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									]
								],
								"scope": "col_gutter"
							},
							"col_A52A2AFF":
							{
								"flags": 16,
								"regions":
								[
									[
										3289,
										3294
									]
								],
								"scope": "col_A52A2AFF"
							},
							"col_A52A2AFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A52A2AFF_circle.png",
								"regions":
								[
									[
										3264,
										3264
									]
								],
								"scope": "col_gutter"
							},
							"col_C0C0C0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										3194,
										3200
									]
								],
								"scope": "col_C0C0C0FF"
							},
							"col_C0C0C0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_C0C0C0FF_circle.png",
								"regions":
								[
									[
										3167,
										3167
									]
								],
								"scope": "col_gutter"
							},
							"col_D0021BFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2592,
										2599
									]
								],
								"scope": "col_D0021BFF"
							},
							"col_D0021BFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D0021BFF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									]
								],
								"scope": "col_gutter"
							},
							"col_EBCE9DFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2545,
										2552
									]
								],
								"scope": "col_EBCE9DFF"
							},
							"col_EBCE9DFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_EBCE9DFF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									]
								],
								"scope": "col_gutter"
							},
							"col_EE82EEFF":
							{
								"flags": 16,
								"regions":
								[
									[
										3477,
										3483
									]
								],
								"scope": "col_EE82EEFF"
							},
							"col_EE82EEFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_EE82EEFF_circle.png",
								"regions":
								[
									[
										3452,
										3452
									]
								],
								"scope": "col_gutter"
							},
							"col_F5A623FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2608,
										2615
									]
								],
								"scope": "col_F5A623FF"
							},
							"col_F5A623FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F5A623FF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									]
								],
								"scope": "col_gutter"
							},
							"col_F8E71CFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2626,
										2633
									]
								],
								"scope": "col_F8E71CFF"
							},
							"col_F8E71CFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F8E71CFF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										3321,
										3324
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										3295,
										3295
									]
								],
								"scope": "col_gutter"
							},
							"col_FFA500FF":
							{
								"flags": 16,
								"regions":
								[
									[
										3351,
										3357
									]
								],
								"scope": "col_FFA500FF"
							},
							"col_FFA500FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFA500FF_circle.png",
								"regions":
								[
									[
										3325,
										3325
									]
								],
								"scope": "col_gutter"
							},
							"col_FFD700FF":
							{
								"flags": 16,
								"regions":
								[
									[
										3228,
										3232
									]
								],
								"scope": "col_FFD700FF"
							},
							"col_FFD700FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFD700FF_circle.png",
								"regions":
								[
									[
										3201,
										3201
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										3384,
										3390
									]
								],
								"scope": "col_FFFF00FF"
							},
							"col_FFFF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFF00FF_circle.png",
								"regions":
								[
									[
										3358,
										3358
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2706,
										2713
									],
									[
										3540,
										3545
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										2536,
										2536
									],
									[
										3515,
										3515
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								2003,
								2003
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 102,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639442450.76,
							"tabs_extra_last_activated_sheet_index": 4,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1703.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/eda/units.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 137,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639439174.02,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 76.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"util",
				"lib/util.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"ser",
				"server.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"io-h",
				"io-helpers.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"colorCo",
				"lib/eda/colorCoding.js"
			],
			[
				"quickjs-mi",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"util.j",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"packa",
				"package.json"
			],
			[
				"xml.js",
				"lib/xml.js"
			],
			[
				"eagle-q",
				"eagle-query.js"
			],
			[
				"eagle-qu",
				"eagle-query.js"
			],
			[
				"componen",
				"components.js"
			],
			[
				"preact.m.",
				"lib/preact.m.js"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/utils.c"
			],
			[
				"packag",
				"package.json"
			],
			[
				"plot-cv.cpp",
				"src/plot-cv.cpp"
			],
			[
				"test-im",
				"test-imread.js"
			],
			[
				"test-imre",
				"test-imread.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"cvPipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"debugger.",
				"debugger.html"
			],
			[
				"test_xml",
				"quickjs/qjs-modules/tests/test_xml.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"list.htm",
				"list.html"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"useEve",
				"lib/hooks/useEvent.js"
			],
			[
				"ompat.mjs",
				"lib/compat.mjs"
			],
			[
				".mjs",
				"lib/compat.mjs"
			],
			[
				"hooks.mj",
				"lib/hooks.mjs"
			],
			[
				"preact.mjs",
				"preact.mjs"
			],
			[
				"hooks.",
				"lib/hooks.mjs"
			],
			[
				"compat.mj",
				"lib/compat.mjs"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"components.",
				"components.js"
			],
			[
				"tlite.css",
				"tlite.css"
			],
			[
				"debugger.css",
				"static/debugger.css"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"useTrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"schema",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"commands",
				"commands.js"
			],
			[
				"components",
				"components.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"align.js",
				"lib/geom/align.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"cvVid",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"cvpip",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"imagepip",
				"imagePipeline.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"usetrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"fetch.j",
				"lib/fetch.js"
			],
			[
				"comm",
				"commands.js"
			],
			[
				"package",
				"package.json"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"js_Cv",
				"qjs-opencv/js_cv.cpp"
			],
			[
				"gif_wr",
				"qjs-opencv/gif_write.hpp"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"js_mat",
				"qjs-opencv/js_mat.cpp"
			],
			[
				"image-he",
				"image-helpers.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"test-eagle",
				"test-eagle.js"
			],
			[
				"test-xml",
				"test-xml.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-misc.c",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-mmap",
				"quickjs/qjs-modules/quickjs-mmap.c"
			],
			[
				"quickjs-libc.c",
				"quickjs/quickjs-libc.c"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-ins",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"webSOc",
				"webSocket.js"
			],
			[
				"timers.",
				"lib/repeater/timers.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvGUI",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"js_Mat",
				"qjs-opencv/js_mat.cpp"
			],
			[
				"-helper",
				"io-helpers.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"quickjs-lib",
				"quickjs/quickjs-libc.c"
			],
			[
				"test-repe",
				"test-repeater.js"
			],
			[
				"repea",
				"lib/repeater/repeater.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"jpeg.js",
				"lib/jpeg.js"
			],
			[
				"image-h",
				"image-helpers.js"
			],
			[
				"estree.js",
				"lib/ecmascript/estree.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"terminal",
				"qjs-modules/lib/terminal.js"
			],
			[
				"Svgpath",
				"lib/svg/path.js"
			],
			[
				"cvVIde",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"js_poin",
				"qjs-opencv/js_point.hpp"
			],
			[
				"js_cont",
				"qjs-opencv/js_contour.hpp"
			],
			[
				"test.js",
				"test.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"path",
				"lib/svg/path.js"
			],
			[
				"path.js",
				"lib/svg/path.js"
			],
			[
				"svgpa",
				"lib/svg/path-parser.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"test-clip",
				"test-clipper.js"
			],
			[
				"13",
				"opencv/disabled/code10-3.cpp"
			],
			[
				"test-svg",
				"test-svgpath.js"
			],
			[
				"test-svgp",
				"test-svgpath.js"
			],
			[
				"svg",
				"src/simple_svg_writer.hpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 317.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
