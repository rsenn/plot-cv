{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ex",
				"expansion"
			],
			[
				"isArra",
				"isArrayBuffer"
			],
			[
				"Extra",
				"ExtractRotation"
			],
			[
				"tra",
				"transformation"
			],
			[
				"define",
				"defineProperties"
			],
			[
				"getters",
				"gettersSetters"
			],
			[
				"circui",
				"circuitFilePath"
			],
			[
				"Conn",
				"ConnectionPoint"
			],
			[
				"parseCom",
				"parseCommentOrEmpty"
			],
			[
				"circ",
				"circuitFilePath"
			],
			[
				"built",
				"builtin_attr"
			],
			[
				"dep",
				"depthOrPred"
			],
			[
				"exte",
				"extendAsyncGenerator"
			],
			[
				"extend",
				"extendArray"
			],
			[
				"allo",
				"allowedDirs"
			],
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "—Ⓕ– IS ( ) { … } — function\n—Ⓕ– count ( ) { … } — function\n—Ⓕ– check_type ( ) { … } — function",
			"settings":
			{
				"buffer_size": 94,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					477,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/elementRect.js",
						"symkeys":
						[
							[
								164,
								199
							],
							[
								371,
								387
							],
							[
								421,
								446
							],
							[
								554,
								580
							],
							[
								718,
								726
							],
							[
								785,
								792
							],
							[
								873,
								882
							],
							[
								941,
								948
							],
							[
								1060,
								1077
							],
							[
								1217,
								1229
							],
							[
								1533,
								1571
							],
							[
								1751,
								1787
							],
							[
								1788,
								1805
							],
							[
								1909,
								1919
							],
							[
								1957,
								1984
							],
							[
								2036,
								2050
							],
							[
								2098,
								2115
							],
							[
								2214,
								2228
							],
							[
								2276,
								2293
							],
							[
								2359,
								2386
							],
							[
								2438,
								2452
							],
							[
								2504,
								2521
							],
							[
								2621,
								2635
							],
							[
								2688,
								2705
							],
							[
								2774,
								2811
							],
							[
								2948,
								2957
							],
							[
								2976,
								2988
							],
							[
								3009,
								3016
							],
							[
								3171,
								3180
							],
							[
								3195,
								3202
							],
							[
								3225,
								3237
							],
							[
								3258,
								3265
							],
							[
								3432,
								3441
							],
							[
								3460,
								3472
							],
							[
								3493,
								3500
							],
							[
								3646,
								3655
							],
							[
								3670,
								3677
							],
							[
								3701,
								3713
							],
							[
								3734,
								3741
							],
							[
								3870,
								3908
							],
							[
								4010,
								4019
							],
							[
								4043,
								4055
							],
							[
								4139,
								4148
							],
							[
								4172,
								4184
							],
							[
								4264,
								4273
							],
							[
								4298,
								4311
							],
							[
								4397,
								4406
							],
							[
								4431,
								4444
							],
							[
								4493,
								4531
							]
						],
						"symlist":
						[
							" function ElementRectProxy(element)",
							"ElementRectProxy",
							"getPos(fn = rect => rect)",
							"getRect(fn = rect => rect)",
							"setPos()",
							"rect =>",
							"setSize()",
							"rect =>",
							"fn = (rect, e) =>",
							"setRect(arg)",
							"propSetter = (prop, proxy) => value =>",
							"computedSetter = (proxy, compute) =>",
							" function(value)",
							"oldrect =>",
							"ElementXYProps = element =>",
							" function()",
							" function(val)",
							" function()",
							" function(val)",
							"ElementWHProps = element =>",
							" function()",
							" function(val)",
							" function()",
							" function(val)",
							"ElementPosProps = (element, proxy) =>",
							" () =>",
							" value =>",
							"rect =>",
							" () =>",
							"rect =>",
							" value =>",
							"rect =>",
							" () =>",
							" value =>",
							"rect =>",
							" () =>",
							"rect =>",
							" value =>",
							"rect =>",
							"ElementSizeProps = (element, proxy) =>",
							" () =>",
							" width =>",
							" () =>",
							" width =>",
							" () =>",
							" height =>",
							" () =>",
							" height =>",
							"ElementRectProps = (element, proxy) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADWAgAATEVYRVJfSAogIGxleGljYWxfcnVsZQogIGxleGljYWxfc2Nhbm5lcgogIGxleGVyX3N0YXRlX2ZpbmRiCiAgbGV4ZXJfc3RhdGVfbmV3CiAgbGV4ZXJfc3RhdGVfcHVzaAogIGxleGVyX3N0YXRlX3BvcAogIGxleGVyX3N0YXRlX3RvcAogIGxleGVyX3N0YXRlc19za2lwCiAgbGV4ZXJfc3RhdGVzX2R1bXAKICBsZXhlcl9ydWxlX3JlZ2V4CiAgbGV4ZXJfcnVsZV9leHBhbmQKICBsZXhlcl9ydWxlX2FkZAogIGxleGVyX3J1bGVfZmluZAogIGxleGVyX3J1bGVfZnJlZQogIGxleGVyX3J1bGVfZnJlZV9ydAogIGxleGVyX3J1bGVfZHVtcAogIGxleGVyX2luaXQKICBsZXhlcl9kZWZpbmUKICBsZXhlcl9maW5kX2RlZmluaXRpb24KICBsZXhlcl9jb21waWxlX3J1bGVzCiAgbGV4ZXJfcGVlawogIGxleGVyX3NraXBfbgogIGxleGVyX3NraXAKICBsZXhlcl9jaGFybGVuCiAgbGV4ZXJfY2xlYXJfdG9rZW4KICBsZXhlcl9sZXhlbWUKICBsZXhlcl9uZXh0CiAgbGV4ZXJfc2V0X2lucHV0CiAgbGV4ZXJfc2V0X2xvY2F0aW9uCiAgbGV4ZXJfcmVsZWFzZQogIGxleGVyX2ZyZWUKICBsZXhlcl9yZWxlYXNlX3J0CiAgbGV4ZXJfZnJlZV9ydAogIGxleGVyX2R1bXAKICBsZXhlcl9kdXAKICBsZXhlcl9ydWxlX2F0CiAgbGV4ZXJfc3RhdGVfZmluZAogIGxleGVyX3N0YXRlX2RlcHRoCiAgbGV4ZXJfc3RhdGVfbmFtZQogIGxleGVyX251bV9zdGF0ZXMKICBsZXhlcl9zdGF0ZV90b3BuYW1lAAAAAAAAAAAWAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					478,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAWAwAARWxlbWVudFJlY3RQcm94eShlbGVtZW50KQpFbGVtZW50UmVjdFByb3h5CiAgZ2V0UG9zKGZuID0gcmVjdCA9PiByZWN0KQogIGdldFJlY3QoZm4gPSByZWN0ID0+IHJlY3QpCiAgc2V0UG9zKCkKICByZWN0ID0+CiAgc2V0U2l6ZSgpCiAgcmVjdCA9PgogIGZuID0gKHJlY3QsIGUpID0+CiAgc2V0UmVjdChhcmcpCiAgcHJvcFNldHRlciA9IChwcm9wLCBwcm94eSkgPT4gdmFsdWUgPT4KICBjb21wdXRlZFNldHRlciA9IChwcm94eSwgY29tcHV0ZSkgPT4KICBmdW5jdGlvbih2YWx1ZSkKICBvbGRyZWN0ID0+CkVsZW1lbnRYWVByb3BzID0gZWxlbWVudCA9PgogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbih2YWwpCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKHZhbCkKRWxlbWVudFdIUHJvcHMgPSBlbGVtZW50ID0+CiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKHZhbCkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24odmFsKQpFbGVtZW50UG9zUHJvcHMgPSAoZWxlbWVudCwgcHJveHkpID0+CiAgKCkgPT4KICB2YWx1ZSA9PgogIHJlY3QgPT4KICAoKSA9PgogIHJlY3QgPT4KICB2YWx1ZSA9PgogIHJlY3QgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgcmVjdCA9PgogICgpID0+CiAgcmVjdCA9PgogIHZhbHVlID0+CiAgcmVjdCA9PgpFbGVtZW50U2l6ZVByb3BzID0gKGVsZW1lbnQsIHByb3h5KSA9PgogICgpID0+CiAgd2lkdGggPT4KICAoKSA9PgogIHdpZHRoID0+CiAgKCkgPT4KICBoZWlnaHQgPT4KICAoKSA9PgogIGhlaWdodCA9PgpFbGVtZW50UmVjdFByb3BzID0gKGVsZW1lbnQsIHByb3h5KSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					479,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
						"symkeys":
						[
							[
								359,
								370
							],
							[
								650,
								664
							],
							[
								934,
								951
							],
							[
								2023,
								2036
							],
							[
								2065,
								2078
							],
							[
								2369,
								2381
							],
							[
								2738,
								2751
							],
							[
								2933,
								2953
							],
							[
								4222,
								4239
							],
							[
								4482,
								4502
							],
							[
								5121,
								5137
							],
							[
								6488,
								6500
							],
							[
								8413,
								8431
							],
							[
								10301,
								10315
							],
							[
								10583,
								10597
							],
							[
								10923,
								10935
							],
							[
								11568,
								11577
							],
							[
								12960,
								12977
							],
							[
								13292,
								13311
							],
							[
								13567,
								13585
							],
							[
								13972,
								13986
							],
							[
								14248,
								14259
							],
							[
								14587,
								14599
							],
							[
								15184,
								15197
							],
							[
								15364,
								15381
							],
							[
								16580,
								16600
							],
							[
								17913,
								17928
							],
							[
								25644,
								25656
							],
							[
								28954,
								28966
							],
							[
								30360,
								30375
							],
							[
								30763,
								30778
							],
							[
								31128,
								31147
							],
							[
								31896,
								31911
							],
							[
								32349,
								32366
							],
							[
								32838,
								32850
							],
							[
								34642,
								34657
							],
							[
								35481,
								35494
							],
							[
								35717,
								35730
							],
							[
								36335,
								36352
							],
							[
								36749,
								36765
							],
							[
								37815,
								37833
							],
							[
								41895,
								41908
							],
							[
								43376,
								43390
							],
							[
								43420,
								43434
							]
						],
						"symlist":
						[
							" Ⓣ  JSLexerRule ; — typedef",
							"—Ⓕ– offset_toarray ( ) { … } — function",
							"—Ⓕ– js_lexer_rule_new ( ) { … } — function",
							"—Ⓒ– token_methods { … } ; — type",
							"—Ⓒ– token_getters { … } ; — type",
							"—Ⓕ– js_token_new ( ) { … } — function",
							"—Ⓕ– js_token_wrap ( ) { … } — function",
							"—Ⓕ– js_token_constructor ( ) { … } — function",
							"—Ⓕ– js_token_tostring ( ) { … } — function",
							"—Ⓕ– js_token_toprimitive ( ) { … } — function",
							"—Ⓕ– js_token_inspect ( ) { … } — function",
							"—Ⓕ– js_token_get ( ) { … } — function",
							"—Ⓕ– js_token_finalizer ( ) { … } — function",
							"—Ⓕ– lexer_continue ( ) { … } — function",
							"—Ⓕ– lexer_to_state ( ) { … } — function",
							"—Ⓕ– lexer_handle ( ) { … } — function",
							"—Ⓕ– lexer_lex ( ) { … } — function",
							"—Ⓕ– lexer_escape_pred ( ) { … } — function",
							"—Ⓕ– lexer_unescape_pred ( ) { … } — function",
							"—Ⓕ– lexer_current_line ( ) { … } — function",
							"—Ⓕ– lexer_lexeme_s ( ) { … } — function",
							"—Ⓕ– lexer_token ( ) { … } — function",
							"—Ⓕ– js_lexer_new ( ) { … } — function",
							"—Ⓕ– js_lexer_wrap ( ) { … } — function",
							"—Ⓕ– js_lexer_add_rule ( ) { … } — function",
							"—Ⓕ– js_lexer_constructor ( ) { … } — function",
							"—Ⓕ– js_lexer_method ( ) { … } — function",
							"—Ⓕ– js_lexer_get ( ) { … } — function",
							"—Ⓕ– js_lexer_set ( ) { … } — function",
							"—Ⓕ– js_lexer_tokens ( ) { … } — function",
							"—Ⓕ– js_lexer_states ( ) { … } — function",
							"—Ⓕ– js_lexer_statestack ( ) { … } — function",
							"—Ⓕ– js_lexer_escape ( ) { … } — function",
							"—Ⓕ– js_lexer_tostring ( ) { … } — function",
							"—Ⓕ– js_lexer_lex ( ) { … } — function",
							"—Ⓕ– js_lexer_nextfn ( ) { … } — function",
							"—Ⓕ– js_lexer_next ( ) { … } — function",
							"—Ⓕ– js_lexer_call ( ) { … } — function",
							"—Ⓕ– js_lexer_iterator ( ) { … } — function",
							"—Ⓕ– js_lexer_inspect ( ) { … } — function",
							"—Ⓕ– js_lexer_finalizer ( ) { … } — function",
							"—Ⓕ– js_lexer_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AQAAAAAAAAAAAAAA6AYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					480,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACSCAAAICDik4kgIEpTTGV4ZXJSdWxlIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIG9mZnNldF90b2FycmF5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfcnVsZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSuOKAkyB0b2tlbl9tZXRob2RzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdG9rZW5fZ2V0dGVycyB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK74oCTIGpzX3Rva2VuX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3dyYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fdG9wcmltaXRpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfY29udGludWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl90b19zdGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2hhbmRsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2VzY2FwZV9wcmVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdW5lc2NhcGVfcHJlZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2N1cnJlbnRfbGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleGVtZV9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdG9rZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl93cmFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfYWRkX3J1bGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3Rva2VucyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlc3RhY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9lc2NhcGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHRmbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jYWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaXRlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					481,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					482,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					483,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					484,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					485,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
						"symkeys":
						[
							[
								359,
								370
							],
							[
								650,
								664
							],
							[
								934,
								951
							],
							[
								2023,
								2036
							],
							[
								2065,
								2078
							],
							[
								2369,
								2381
							],
							[
								2738,
								2751
							],
							[
								2933,
								2953
							],
							[
								4222,
								4239
							],
							[
								4482,
								4502
							],
							[
								5121,
								5137
							],
							[
								6488,
								6500
							],
							[
								8413,
								8431
							],
							[
								10301,
								10315
							],
							[
								10583,
								10597
							],
							[
								10923,
								10935
							],
							[
								11568,
								11577
							],
							[
								12960,
								12977
							],
							[
								13292,
								13311
							],
							[
								13567,
								13585
							],
							[
								13972,
								13986
							],
							[
								14248,
								14259
							],
							[
								14587,
								14599
							],
							[
								15184,
								15197
							],
							[
								15364,
								15381
							],
							[
								16580,
								16600
							],
							[
								17913,
								17928
							],
							[
								25644,
								25656
							],
							[
								28954,
								28966
							],
							[
								30360,
								30375
							],
							[
								30763,
								30778
							],
							[
								31128,
								31147
							],
							[
								31896,
								31911
							],
							[
								32349,
								32366
							],
							[
								32838,
								32850
							],
							[
								34642,
								34657
							],
							[
								35481,
								35494
							],
							[
								35717,
								35730
							],
							[
								36335,
								36352
							],
							[
								36749,
								36765
							],
							[
								37815,
								37833
							],
							[
								41895,
								41908
							],
							[
								43376,
								43390
							],
							[
								43420,
								43434
							]
						],
						"symlist":
						[
							" Ⓣ  JSLexerRule ; — typedef",
							"—Ⓕ– offset_toarray ( ) { … } — function",
							"—Ⓕ– js_lexer_rule_new ( ) { … } — function",
							"—Ⓒ– token_methods { … } ; — type",
							"—Ⓒ– token_getters { … } ; — type",
							"—Ⓕ– js_token_new ( ) { … } — function",
							"—Ⓕ– js_token_wrap ( ) { … } — function",
							"—Ⓕ– js_token_constructor ( ) { … } — function",
							"—Ⓕ– js_token_tostring ( ) { … } — function",
							"—Ⓕ– js_token_toprimitive ( ) { … } — function",
							"—Ⓕ– js_token_inspect ( ) { … } — function",
							"—Ⓕ– js_token_get ( ) { … } — function",
							"—Ⓕ– js_token_finalizer ( ) { … } — function",
							"—Ⓕ– lexer_continue ( ) { … } — function",
							"—Ⓕ– lexer_to_state ( ) { … } — function",
							"—Ⓕ– lexer_handle ( ) { … } — function",
							"—Ⓕ– lexer_lex ( ) { … } — function",
							"—Ⓕ– lexer_escape_pred ( ) { … } — function",
							"—Ⓕ– lexer_unescape_pred ( ) { … } — function",
							"—Ⓕ– lexer_current_line ( ) { … } — function",
							"—Ⓕ– lexer_lexeme_s ( ) { … } — function",
							"—Ⓕ– lexer_token ( ) { … } — function",
							"—Ⓕ– js_lexer_new ( ) { … } — function",
							"—Ⓕ– js_lexer_wrap ( ) { … } — function",
							"—Ⓕ– js_lexer_add_rule ( ) { … } — function",
							"—Ⓕ– js_lexer_constructor ( ) { … } — function",
							"—Ⓕ– js_lexer_method ( ) { … } — function",
							"—Ⓕ– js_lexer_get ( ) { … } — function",
							"—Ⓕ– js_lexer_set ( ) { … } — function",
							"—Ⓕ– js_lexer_tokens ( ) { … } — function",
							"—Ⓕ– js_lexer_states ( ) { … } — function",
							"—Ⓕ– js_lexer_statestack ( ) { … } — function",
							"—Ⓕ– js_lexer_escape ( ) { … } — function",
							"—Ⓕ– js_lexer_tostring ( ) { … } — function",
							"—Ⓕ– js_lexer_lex ( ) { … } — function",
							"—Ⓕ– js_lexer_nextfn ( ) { … } — function",
							"—Ⓕ– js_lexer_next ( ) { … } — function",
							"—Ⓕ– js_lexer_call ( ) { … } — function",
							"—Ⓕ– js_lexer_iterator ( ) { … } — function",
							"—Ⓕ– js_lexer_inspect ( ) { … } — function",
							"—Ⓕ– js_lexer_finalizer ( ) { … } — function",
							"—Ⓕ– js_lexer_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AQAAAAAAAAAAAAAA6AYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					486,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACSCAAAICDik4kgIEpTTGV4ZXJSdWxlIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIG9mZnNldF90b2FycmF5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfcnVsZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSuOKAkyB0b2tlbl9tZXRob2RzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdG9rZW5fZ2V0dGVycyB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK74oCTIGpzX3Rva2VuX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3dyYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fdG9wcmltaXRpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfY29udGludWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl90b19zdGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2hhbmRsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2VzY2FwZV9wcmVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdW5lc2NhcGVfcHJlZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2N1cnJlbnRfbGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleGVtZV9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdG9rZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl93cmFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfYWRkX3J1bGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3Rva2VucyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlc3RhY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9lc2NhcGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHRmbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jYWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaXRlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					487,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9534,
								9546
							],
							[
								9824,
								9834
							],
							[
								9974,
								9991
							],
							[
								10122,
								10135
							],
							[
								10319,
								10331
							],
							[
								10463,
								10473
							],
							[
								10603,
								10618
							],
							[
								10730,
								10748
							],
							[
								10973,
								10986
							],
							[
								11522,
								11532
							],
							[
								11647,
								11663
							],
							[
								12125,
								12138
							],
							[
								12256,
								12266
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"AQAAAAAAAAAAAAAAZAUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					488,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9534,
								9546
							],
							[
								9824,
								9834
							],
							[
								9974,
								9991
							],
							[
								10122,
								10135
							],
							[
								10319,
								10331
							],
							[
								10463,
								10473
							],
							[
								10603,
								10618
							],
							[
								10730,
								10748
							],
							[
								10973,
								10986
							],
							[
								11522,
								11532
							],
							[
								11647,
								11663
							],
							[
								12125,
								12138
							],
							[
								12256,
								12266
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"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",
					"AQAAAAAAAAAAAAAA"
				],
				[
					489,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4BgAA4oCU4pK74oCTIGxleGVyX3N0YXRlX2ZpbmRiICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc3RhdGVfbmV3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc3RhdGVfcHVzaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3N0YXRlX3BvcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3N0YXRlX3RvcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3N0YXRlc19za2lwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc3RhdGVzX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX3JlZ2V4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfcnVsZV9leHBhbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2NvbXBpbGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX21hdGNoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfcnVsZV9hZGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2ZyZWVfcnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfZGVmaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfZmluZF9kZWZpbml0aW9uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfY29tcGlsZV9ydWxlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3BlZWsgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9za2lwX24gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9za2lwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfY2xlYXJfdG9rZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9jaGFybGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfbGV4ZW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3NldF9pbnB1dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3NldF9sb2NhdGlvbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3JlbGVhc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfcmVsZWFzZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2ZyZWVfcnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9kdW1wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					490,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9534,
								9546
							],
							[
								9824,
								9834
							],
							[
								9974,
								9991
							],
							[
								10122,
								10135
							],
							[
								10319,
								10331
							],
							[
								10463,
								10473
							],
							[
								10603,
								10618
							],
							[
								10730,
								10748
							],
							[
								10973,
								10986
							],
							[
								11522,
								11532
							],
							[
								11647,
								11663
							],
							[
								12125,
								12138
							],
							[
								12256,
								12266
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"AQAAAAAAAAAAAAAAZAUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					491,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9535,
								9547
							],
							[
								9825,
								9835
							],
							[
								9975,
								9992
							],
							[
								10123,
								10136
							],
							[
								10320,
								10332
							],
							[
								10464,
								10474
							],
							[
								10604,
								10619
							],
							[
								10731,
								10749
							],
							[
								10974,
								10987
							],
							[
								11523,
								11533
							],
							[
								11648,
								11664
							],
							[
								12126,
								12139
							],
							[
								12257,
								12267
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAC4BgAA4oCU4pK74oCTIGxleGVyX3N0YXRlX2ZpbmRiICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc3RhdGVfbmV3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc3RhdGVfcHVzaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3N0YXRlX3BvcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3N0YXRlX3RvcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3N0YXRlc19za2lwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc3RhdGVzX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX3JlZ2V4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfcnVsZV9leHBhbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2NvbXBpbGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX21hdGNoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfcnVsZV9hZGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2ZyZWVfcnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfZGVmaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfZmluZF9kZWZpbml0aW9uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfY29tcGlsZV9ydWxlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3BlZWsgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9za2lwX24gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9za2lwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfY2xlYXJfdG9rZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9jaGFybGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfbGV4ZW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3NldF9pbnB1dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3NldF9sb2NhdGlvbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3JlbGVhc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfcmVsZWFzZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2ZyZWVfcnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9kdW1wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAZAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALgGAADigJTikrvigJMgbGV4ZXJfc3RhdGVfZmluZGIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9zdGF0ZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9zdGF0ZV9wdXNoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc3RhdGVfcG9wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc3RhdGVfdG9wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc3RhdGVzX3NraXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9zdGF0ZXNfZHVtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3J1bGVfcmVnZXggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2V4cGFuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3J1bGVfY29tcGlsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3J1bGVfbWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9ydWxlX2FkZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3J1bGVfZmluZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3J1bGVfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3J1bGVfZnJlZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3J1bGVfZHVtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9kZWZpbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9maW5kX2RlZmluaXRpb24gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9jb21waWxlX3J1bGVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfcGVlayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3NraXBfbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX3NraXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9jbGVhcl90b2tlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2NoYXJsZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9sZXhlbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc2V0X2lucHV0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfc2V0X2xvY2F0aW9uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfcmVsZWFzZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl9yZWxlYXNlX3J0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfZnJlZV9ydCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAABkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					492,
					4,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9556,
								9568
							],
							[
								9846,
								9856
							],
							[
								9996,
								10013
							],
							[
								10144,
								10157
							],
							[
								10341,
								10353
							],
							[
								10485,
								10495
							],
							[
								10625,
								10640
							],
							[
								10752,
								10770
							],
							[
								10995,
								11008
							],
							[
								11544,
								11554
							],
							[
								11669,
								11685
							],
							[
								12147,
								12160
							],
							[
								12278,
								12288
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					493,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9573,
								9585
							],
							[
								9863,
								9873
							],
							[
								10013,
								10030
							],
							[
								10161,
								10174
							],
							[
								10358,
								10370
							],
							[
								10502,
								10512
							],
							[
								10642,
								10657
							],
							[
								10769,
								10787
							],
							[
								11012,
								11025
							],
							[
								11561,
								11571
							],
							[
								11686,
								11702
							],
							[
								12164,
								12177
							],
							[
								12295,
								12305
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"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",
					"AQAAAAAAAAAAAAAA"
				],
				[
					494,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9572,
								9584
							],
							[
								9862,
								9872
							],
							[
								10012,
								10029
							],
							[
								10160,
								10173
							],
							[
								10357,
								10369
							],
							[
								10501,
								10511
							],
							[
								10641,
								10656
							],
							[
								10768,
								10786
							],
							[
								11011,
								11024
							],
							[
								11560,
								11570
							],
							[
								11685,
								11701
							],
							[
								12163,
								12176
							],
							[
								12294,
								12304
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"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",
					"AQAAAAAAAAAAAAAA"
				],
				[
					495,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
						"symkeys":
						[
							[
								359,
								370
							],
							[
								650,
								664
							],
							[
								934,
								951
							],
							[
								2023,
								2036
							],
							[
								2065,
								2078
							],
							[
								2369,
								2381
							],
							[
								2738,
								2751
							],
							[
								2933,
								2953
							],
							[
								4222,
								4239
							],
							[
								4482,
								4502
							],
							[
								5121,
								5137
							],
							[
								6488,
								6500
							],
							[
								8413,
								8431
							],
							[
								10301,
								10315
							],
							[
								10583,
								10597
							],
							[
								10923,
								10935
							],
							[
								11568,
								11577
							],
							[
								12960,
								12977
							],
							[
								13292,
								13311
							],
							[
								13567,
								13585
							],
							[
								13972,
								13986
							],
							[
								14248,
								14259
							],
							[
								14587,
								14599
							],
							[
								15184,
								15197
							],
							[
								15364,
								15381
							],
							[
								16580,
								16600
							],
							[
								17913,
								17928
							],
							[
								25644,
								25656
							],
							[
								28954,
								28966
							],
							[
								30360,
								30375
							],
							[
								30763,
								30778
							],
							[
								31128,
								31147
							],
							[
								31896,
								31911
							],
							[
								32349,
								32366
							],
							[
								32838,
								32850
							],
							[
								34642,
								34657
							],
							[
								35481,
								35494
							],
							[
								35717,
								35730
							],
							[
								36335,
								36352
							],
							[
								36749,
								36765
							],
							[
								37815,
								37833
							],
							[
								41895,
								41908
							],
							[
								43376,
								43390
							],
							[
								43420,
								43434
							]
						],
						"symlist":
						[
							" Ⓣ  JSLexerRule ; — typedef",
							"—Ⓕ– offset_toarray ( ) { … } — function",
							"—Ⓕ– js_lexer_rule_new ( ) { … } — function",
							"—Ⓒ– token_methods { … } ; — type",
							"—Ⓒ– token_getters { … } ; — type",
							"—Ⓕ– js_token_new ( ) { … } — function",
							"—Ⓕ– js_token_wrap ( ) { … } — function",
							"—Ⓕ– js_token_constructor ( ) { … } — function",
							"—Ⓕ– js_token_tostring ( ) { … } — function",
							"—Ⓕ– js_token_toprimitive ( ) { … } — function",
							"—Ⓕ– js_token_inspect ( ) { … } — function",
							"—Ⓕ– js_token_get ( ) { … } — function",
							"—Ⓕ– js_token_finalizer ( ) { … } — function",
							"—Ⓕ– lexer_continue ( ) { … } — function",
							"—Ⓕ– lexer_to_state ( ) { … } — function",
							"—Ⓕ– lexer_handle ( ) { … } — function",
							"—Ⓕ– lexer_lex ( ) { … } — function",
							"—Ⓕ– lexer_escape_pred ( ) { … } — function",
							"—Ⓕ– lexer_unescape_pred ( ) { … } — function",
							"—Ⓕ– lexer_current_line ( ) { … } — function",
							"—Ⓕ– lexer_lexeme_s ( ) { … } — function",
							"—Ⓕ– lexer_token ( ) { … } — function",
							"—Ⓕ– js_lexer_new ( ) { … } — function",
							"—Ⓕ– js_lexer_wrap ( ) { … } — function",
							"—Ⓕ– js_lexer_add_rule ( ) { … } — function",
							"—Ⓕ– js_lexer_constructor ( ) { … } — function",
							"—Ⓕ– js_lexer_method ( ) { … } — function",
							"—Ⓕ– js_lexer_get ( ) { … } — function",
							"—Ⓕ– js_lexer_set ( ) { … } — function",
							"—Ⓕ– js_lexer_tokens ( ) { … } — function",
							"—Ⓕ– js_lexer_states ( ) { … } — function",
							"—Ⓕ– js_lexer_statestack ( ) { … } — function",
							"—Ⓕ– js_lexer_escape ( ) { … } — function",
							"—Ⓕ– js_lexer_tostring ( ) { … } — function",
							"—Ⓕ– js_lexer_lex ( ) { … } — function",
							"—Ⓕ– js_lexer_nextfn ( ) { … } — function",
							"—Ⓕ– js_lexer_next ( ) { … } — function",
							"—Ⓕ– js_lexer_call ( ) { … } — function",
							"—Ⓕ– js_lexer_iterator ( ) { … } — function",
							"—Ⓕ– js_lexer_inspect ( ) { … } — function",
							"—Ⓕ– js_lexer_finalizer ( ) { … } — function",
							"—Ⓕ– js_lexer_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"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",
					"AQAAAAAAAAAAAAAA"
				],
				[
					496,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACSCAAAICDik4kgIEpTTGV4ZXJSdWxlIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIG9mZnNldF90b2FycmF5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfcnVsZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSuOKAkyB0b2tlbl9tZXRob2RzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdG9rZW5fZ2V0dGVycyB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK74oCTIGpzX3Rva2VuX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3dyYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fdG9wcmltaXRpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfY29udGludWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl90b19zdGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2hhbmRsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2VzY2FwZV9wcmVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdW5lc2NhcGVfcHJlZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2N1cnJlbnRfbGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleGVtZV9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdG9rZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl93cmFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfYWRkX3J1bGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3Rva2VucyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlc3RhY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9lc2NhcGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHRmbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jYWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaXRlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					497,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
						"symkeys":
						[
							[
								359,
								370
							],
							[
								650,
								664
							],
							[
								934,
								951
							],
							[
								2023,
								2036
							],
							[
								2065,
								2078
							],
							[
								2369,
								2381
							],
							[
								2738,
								2751
							],
							[
								2933,
								2953
							],
							[
								4222,
								4239
							],
							[
								4482,
								4502
							],
							[
								5121,
								5137
							],
							[
								6488,
								6500
							],
							[
								8413,
								8431
							],
							[
								10301,
								10315
							],
							[
								10583,
								10597
							],
							[
								10923,
								10935
							],
							[
								11568,
								11577
							],
							[
								12960,
								12977
							],
							[
								13292,
								13311
							],
							[
								13567,
								13585
							],
							[
								13972,
								13986
							],
							[
								14248,
								14259
							],
							[
								14587,
								14599
							],
							[
								15184,
								15197
							],
							[
								15364,
								15381
							],
							[
								16580,
								16600
							],
							[
								17913,
								17928
							],
							[
								25644,
								25656
							],
							[
								28954,
								28966
							],
							[
								30360,
								30375
							],
							[
								30763,
								30778
							],
							[
								31128,
								31147
							],
							[
								31896,
								31911
							],
							[
								32349,
								32366
							],
							[
								32838,
								32850
							],
							[
								34642,
								34657
							],
							[
								35481,
								35494
							],
							[
								35717,
								35730
							],
							[
								36335,
								36352
							],
							[
								36749,
								36765
							],
							[
								37815,
								37833
							],
							[
								41895,
								41908
							],
							[
								43376,
								43390
							],
							[
								43420,
								43434
							]
						],
						"symlist":
						[
							" Ⓣ  JSLexerRule ; — typedef",
							"—Ⓕ– offset_toarray ( ) { … } — function",
							"—Ⓕ– js_lexer_rule_new ( ) { … } — function",
							"—Ⓒ– token_methods { … } ; — type",
							"—Ⓒ– token_getters { … } ; — type",
							"—Ⓕ– js_token_new ( ) { … } — function",
							"—Ⓕ– js_token_wrap ( ) { … } — function",
							"—Ⓕ– js_token_constructor ( ) { … } — function",
							"—Ⓕ– js_token_tostring ( ) { … } — function",
							"—Ⓕ– js_token_toprimitive ( ) { … } — function",
							"—Ⓕ– js_token_inspect ( ) { … } — function",
							"—Ⓕ– js_token_get ( ) { … } — function",
							"—Ⓕ– js_token_finalizer ( ) { … } — function",
							"—Ⓕ– lexer_continue ( ) { … } — function",
							"—Ⓕ– lexer_to_state ( ) { … } — function",
							"—Ⓕ– lexer_handle ( ) { … } — function",
							"—Ⓕ– lexer_lex ( ) { … } — function",
							"—Ⓕ– lexer_escape_pred ( ) { … } — function",
							"—Ⓕ– lexer_unescape_pred ( ) { … } — function",
							"—Ⓕ– lexer_current_line ( ) { … } — function",
							"—Ⓕ– lexer_lexeme_s ( ) { … } — function",
							"—Ⓕ– lexer_token ( ) { … } — function",
							"—Ⓕ– js_lexer_new ( ) { … } — function",
							"—Ⓕ– js_lexer_wrap ( ) { … } — function",
							"—Ⓕ– js_lexer_add_rule ( ) { … } — function",
							"—Ⓕ– js_lexer_constructor ( ) { … } — function",
							"—Ⓕ– js_lexer_method ( ) { … } — function",
							"—Ⓕ– js_lexer_get ( ) { … } — function",
							"—Ⓕ– js_lexer_set ( ) { … } — function",
							"—Ⓕ– js_lexer_tokens ( ) { … } — function",
							"—Ⓕ– js_lexer_states ( ) { … } — function",
							"—Ⓕ– js_lexer_statestack ( ) { … } — function",
							"—Ⓕ– js_lexer_escape ( ) { … } — function",
							"—Ⓕ– js_lexer_tostring ( ) { … } — function",
							"—Ⓕ– js_lexer_lex ( ) { … } — function",
							"—Ⓕ– js_lexer_nextfn ( ) { … } — function",
							"—Ⓕ– js_lexer_next ( ) { … } — function",
							"—Ⓕ– js_lexer_call ( ) { … } — function",
							"—Ⓕ– js_lexer_iterator ( ) { … } — function",
							"—Ⓕ– js_lexer_inspect ( ) { … } — function",
							"—Ⓕ– js_lexer_finalizer ( ) { … } — function",
							"—Ⓕ– js_lexer_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AQAAAAAAAAAAAAAA6AYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					498,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACSCAAAICDik4kgIEpTTGV4ZXJSdWxlIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIG9mZnNldF90b2FycmF5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfcnVsZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSuOKAkyB0b2tlbl9tZXRob2RzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdG9rZW5fZ2V0dGVycyB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK74oCTIGpzX3Rva2VuX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3dyYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fdG9wcmltaXRpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfY29udGludWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl90b19zdGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2hhbmRsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2VzY2FwZV9wcmVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdW5lc2NhcGVfcHJlZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2N1cnJlbnRfbGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleGVtZV9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdG9rZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl93cmFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfYWRkX3J1bGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3Rva2VucyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlc3RhY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9lc2NhcGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHRmbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jYWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaXRlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					499,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					500,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
						"symkeys":
						[
							[
								359,
								370
							],
							[
								650,
								664
							],
							[
								934,
								951
							],
							[
								2023,
								2036
							],
							[
								2065,
								2078
							],
							[
								2369,
								2381
							],
							[
								2738,
								2751
							],
							[
								2933,
								2953
							],
							[
								4222,
								4239
							],
							[
								4482,
								4502
							],
							[
								5121,
								5137
							],
							[
								6488,
								6500
							],
							[
								8413,
								8431
							],
							[
								10301,
								10315
							],
							[
								10583,
								10597
							],
							[
								10923,
								10935
							],
							[
								11568,
								11577
							],
							[
								12960,
								12977
							],
							[
								13292,
								13311
							],
							[
								13567,
								13585
							],
							[
								13972,
								13986
							],
							[
								14248,
								14259
							],
							[
								14587,
								14599
							],
							[
								15184,
								15197
							],
							[
								15364,
								15381
							],
							[
								16580,
								16600
							],
							[
								17913,
								17928
							],
							[
								25644,
								25656
							],
							[
								28954,
								28966
							],
							[
								30360,
								30375
							],
							[
								30763,
								30778
							],
							[
								31128,
								31147
							],
							[
								31896,
								31911
							],
							[
								32349,
								32366
							],
							[
								32838,
								32850
							],
							[
								34642,
								34657
							],
							[
								35481,
								35494
							],
							[
								35717,
								35730
							],
							[
								36335,
								36352
							],
							[
								36749,
								36765
							],
							[
								37815,
								37833
							],
							[
								41895,
								41908
							],
							[
								43376,
								43390
							],
							[
								43420,
								43434
							]
						],
						"symlist":
						[
							" Ⓣ  JSLexerRule ; — typedef",
							"—Ⓕ– offset_toarray ( ) { … } — function",
							"—Ⓕ– js_lexer_rule_new ( ) { … } — function",
							"—Ⓒ– token_methods { … } ; — type",
							"—Ⓒ– token_getters { … } ; — type",
							"—Ⓕ– js_token_new ( ) { … } — function",
							"—Ⓕ– js_token_wrap ( ) { … } — function",
							"—Ⓕ– js_token_constructor ( ) { … } — function",
							"—Ⓕ– js_token_tostring ( ) { … } — function",
							"—Ⓕ– js_token_toprimitive ( ) { … } — function",
							"—Ⓕ– js_token_inspect ( ) { … } — function",
							"—Ⓕ– js_token_get ( ) { … } — function",
							"—Ⓕ– js_token_finalizer ( ) { … } — function",
							"—Ⓕ– lexer_continue ( ) { … } — function",
							"—Ⓕ– lexer_to_state ( ) { … } — function",
							"—Ⓕ– lexer_handle ( ) { … } — function",
							"—Ⓕ– lexer_lex ( ) { … } — function",
							"—Ⓕ– lexer_escape_pred ( ) { … } — function",
							"—Ⓕ– lexer_unescape_pred ( ) { … } — function",
							"—Ⓕ– lexer_current_line ( ) { … } — function",
							"—Ⓕ– lexer_lexeme_s ( ) { … } — function",
							"—Ⓕ– lexer_token ( ) { … } — function",
							"—Ⓕ– js_lexer_new ( ) { … } — function",
							"—Ⓕ– js_lexer_wrap ( ) { … } — function",
							"—Ⓕ– js_lexer_add_rule ( ) { … } — function",
							"—Ⓕ– js_lexer_constructor ( ) { … } — function",
							"—Ⓕ– js_lexer_method ( ) { … } — function",
							"—Ⓕ– js_lexer_get ( ) { … } — function",
							"—Ⓕ– js_lexer_set ( ) { … } — function",
							"—Ⓕ– js_lexer_tokens ( ) { … } — function",
							"—Ⓕ– js_lexer_states ( ) { … } — function",
							"—Ⓕ– js_lexer_statestack ( ) { … } — function",
							"—Ⓕ– js_lexer_escape ( ) { … } — function",
							"—Ⓕ– js_lexer_tostring ( ) { … } — function",
							"—Ⓕ– js_lexer_lex ( ) { … } — function",
							"—Ⓕ– js_lexer_nextfn ( ) { … } — function",
							"—Ⓕ– js_lexer_next ( ) { … } — function",
							"—Ⓕ– js_lexer_call ( ) { … } — function",
							"—Ⓕ– js_lexer_iterator ( ) { … } — function",
							"—Ⓕ– js_lexer_inspect ( ) { … } — function",
							"—Ⓕ– js_lexer_finalizer ( ) { … } — function",
							"—Ⓕ– js_lexer_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AQAAAAAAAAAAAAAA6AYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					501,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9586,
								9598
							],
							[
								9876,
								9886
							],
							[
								10026,
								10043
							],
							[
								10174,
								10187
							],
							[
								10371,
								10383
							],
							[
								10515,
								10525
							],
							[
								10655,
								10670
							],
							[
								10782,
								10800
							],
							[
								11025,
								11038
							],
							[
								11574,
								11584
							],
							[
								11699,
								11715
							],
							[
								12177,
								12190
							],
							[
								12308,
								12318
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACSCAAAICDik4kgIEpTTGV4ZXJSdWxlIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIG9mZnNldF90b2FycmF5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfcnVsZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSuOKAkyB0b2tlbl9tZXRob2RzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdG9rZW5fZ2V0dGVycyB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK74oCTIGpzX3Rva2VuX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3dyYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3Rva2VuX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fdG9wcmltaXRpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190b2tlbl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdG9rZW5fZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfY29udGludWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsZXhlcl90b19zdGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2hhbmRsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2VzY2FwZV9wcmVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdW5lc2NhcGVfcHJlZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2N1cnJlbnRfbGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGxleGVyX2xleGVtZV9zICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbGV4ZXJfdG9rZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl93cmFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfYWRkX3J1bGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3Rva2VucyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX3N0YXRlc3RhY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9lc2NhcGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX2xleCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHRmbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2xleGVyX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9jYWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaXRlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19sZXhlcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbGV4ZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAZAUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					502,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9586,
								9598
							],
							[
								9876,
								9886
							],
							[
								10026,
								10043
							],
							[
								10174,
								10187
							],
							[
								10371,
								10383
							],
							[
								10515,
								10525
							],
							[
								10655,
								10670
							],
							[
								10782,
								10800
							],
							[
								11025,
								11038
							],
							[
								11574,
								11584
							],
							[
								11699,
								11715
							],
							[
								12177,
								12190
							],
							[
								12308,
								12318
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"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",
					"AQAAAAAAAAAAAAAA"
				],
				[
					503,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9593,
								9605
							],
							[
								9883,
								9893
							],
							[
								10033,
								10050
							],
							[
								10181,
								10194
							],
							[
								10378,
								10390
							],
							[
								10522,
								10532
							],
							[
								10662,
								10677
							],
							[
								10789,
								10807
							],
							[
								11032,
								11045
							],
							[
								11581,
								11591
							],
							[
								11706,
								11722
							],
							[
								12184,
								12197
							],
							[
								12315,
								12325
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"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",
					"AQAAAAAAAAAAAAAA"
				],
				[
					504,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
						"symkeys":
						[
							[
								168,
								185
							],
							[
								434,
								449
							],
							[
								730,
								746
							],
							[
								1096,
								1111
							],
							[
								1549,
								1564
							],
							[
								1825,
								1842
							],
							[
								2003,
								2020
							],
							[
								2321,
								2337
							],
							[
								2405,
								2422
							],
							[
								2938,
								2956
							],
							[
								3544,
								3560
							],
							[
								3935,
								3949
							],
							[
								4793,
								4808
							],
							[
								5017,
								5032
							],
							[
								5207,
								5225
							],
							[
								5410,
								5425
							],
							[
								5663,
								5673
							],
							[
								6099,
								6111
							],
							[
								6313,
								6334
							],
							[
								6592,
								6611
							],
							[
								6792,
								6802
							],
							[
								9593,
								9605
							],
							[
								9883,
								9893
							],
							[
								10033,
								10050
							],
							[
								10181,
								10194
							],
							[
								10378,
								10390
							],
							[
								10522,
								10532
							],
							[
								10662,
								10677
							],
							[
								10789,
								10807
							],
							[
								11032,
								11045
							],
							[
								11581,
								11591
							],
							[
								11706,
								11722
							],
							[
								12184,
								12197
							],
							[
								12315,
								12325
							]
						],
						"symlist":
						[
							"—Ⓕ– lexer_state_findb ( ) { … } — function",
							"—Ⓕ– lexer_state_new ( ) { … } — function",
							"—Ⓕ– lexer_state_push ( ) { … } — function",
							"—Ⓕ– lexer_state_pop ( ) { … } — function",
							"—Ⓕ– lexer_state_top ( ) { … } — function",
							"—Ⓕ– lexer_states_skip ( ) { … } — function",
							"—Ⓕ– lexer_states_dump ( ) { … } — function",
							"—Ⓕ– lexer_rule_regex ( ) { … } — function",
							"—Ⓕ– lexer_rule_expand ( ) { … } — function",
							"—Ⓕ– lexer_rule_compile ( ) { … } — function",
							"—Ⓕ– lexer_rule_match ( ) { … } — function",
							"—Ⓕ– lexer_rule_add ( ) { … } — function",
							"—Ⓕ– lexer_rule_find ( ) { … } — function",
							"—Ⓕ– lexer_rule_free ( ) { … } — function",
							"—Ⓕ– lexer_rule_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_rule_dump ( ) { … } — function",
							"—Ⓕ– lexer_init ( ) { … } — function",
							"—Ⓕ– lexer_define ( ) { … } — function",
							"—Ⓕ– lexer_find_definition ( ) { … } — function",
							"—Ⓕ– lexer_compile_rules ( ) { … } — function",
							"—Ⓕ– lexer_peek ( ) { … } — function",
							"—Ⓕ– lexer_skip_n ( ) { … } — function",
							"—Ⓕ– lexer_skip ( ) { … } — function",
							"—Ⓕ– lexer_clear_token ( ) { … } — function",
							"—Ⓕ– lexer_charlen ( ) { … } — function",
							"—Ⓕ– lexer_lexeme ( ) { … } — function",
							"—Ⓕ– lexer_next ( ) { … } — function",
							"—Ⓕ– lexer_set_input ( ) { … } — function",
							"—Ⓕ– lexer_set_location ( ) { … } — function",
							"—Ⓕ– lexer_release ( ) { … } — function",
							"—Ⓕ– lexer_free ( ) { … } — function",
							"—Ⓕ– lexer_release_rt ( ) { … } — function",
							"—Ⓕ– lexer_free_rt ( ) { … } — function",
							"—Ⓕ– lexer_dump ( ) { … } — function"
						]
					},
					"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",
					"AQAAAAAAAAAAAAAA"
				],
				[
					505,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"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",
					"AQAAAAAAAAAAAAAA"
				],
				[
					506,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CMakeLists.txt",
						"symkeys":
						[
							[
								95,
								107
							],
							[
								120,
								134
							],
							[
								186,
								202
							],
							[
								446,
								463
							],
							[
								467,
								491
							],
							[
								545,
								564
							],
							[
								568,
								588
							],
							[
								649,
								669
							],
							[
								672,
								696
							],
							[
								771,
								787
							],
							[
								874,
								883
							],
							[
								1154,
								1178
							],
							[
								1213,
								1237
							],
							[
								1327,
								1351
							],
							[
								1550,
								1563
							],
							[
								1619,
								1643
							],
							[
								1823,
								1847
							],
							[
								1915,
								1925
							],
							[
								1957,
								1961
							],
							[
								1972,
								1975
							],
							[
								1985,
								1991
							],
							[
								1993,
								1996
							],
							[
								2030,
								2033
							],
							[
								2037,
								2043
							],
							[
								2045,
								2048
							],
							[
								2062,
								2068
							],
							[
								2070,
								2073
							],
							[
								2105,
								2109
							],
							[
								2113,
								2119
							],
							[
								2121,
								2124
							],
							[
								2308,
								2333
							],
							[
								2458,
								2480
							],
							[
								2517,
								2527
							],
							[
								2530,
								2552
							],
							[
								2655,
								2659
							],
							[
								2797,
								2802
							],
							[
								2875,
								2894
							],
							[
								2902,
								2921
							],
							[
								2925,
								2945
							],
							[
								2953,
								2973
							],
							[
								2994,
								3011
							],
							[
								3015,
								3039
							],
							[
								3043,
								3067
							],
							[
								3180,
								3210
							],
							[
								3294,
								3327
							],
							[
								3437,
								3456
							],
							[
								3460,
								3484
							],
							[
								3490,
								3514
							],
							[
								3525,
								3549
							],
							[
								3559,
								3583
							],
							[
								3595,
								3619
							],
							[
								3754,
								3766
							],
							[
								3777,
								3797
							],
							[
								3839,
								3851
							],
							[
								3875,
								3891
							],
							[
								3901,
								3921
							],
							[
								3950,
								3966
							],
							[
								4026,
								4044
							],
							[
								4071,
								4088
							],
							[
								4169,
								4186
							],
							[
								4262,
								4279
							],
							[
								4402,
								4420
							],
							[
								4424,
								4436
							],
							[
								4483,
								4500
							],
							[
								4509,
								4521
							],
							[
								4579,
								4594
							],
							[
								4598,
								4613
							],
							[
								4617,
								4634
							],
							[
								4675,
								4691
							],
							[
								4785,
								4802
							],
							[
								4861,
								4879
							],
							[
								4890,
								4901
							],
							[
								4934,
								4938
							],
							[
								4969,
								4973
							],
							[
								4979,
								4986
							],
							[
								5018,
								5025
							],
							[
								5036,
								5049
							],
							[
								5053,
								5066
							],
							[
								5070,
								5074
							],
							[
								5086,
								5101
							],
							[
								5105,
								5120
							],
							[
								5124,
								5128
							],
							[
								5143,
								5150
							],
							[
								5231,
								5244
							],
							[
								5300,
								5315
							],
							[
								5390,
								5426
							],
							[
								5430,
								5447
							],
							[
								5550,
								5571
							],
							[
								5799,
								5820
							],
							[
								6481,
								6500
							],
							[
								6504,
								6523
							],
							[
								6539,
								6560
							],
							[
								6564,
								6585
							],
							[
								7006,
								7025
							],
							[
								7051,
								7070
							],
							[
								7074,
								7093
							],
							[
								7164,
								7183
							],
							[
								7256,
								7277
							],
							[
								7303,
								7324
							],
							[
								7328,
								7349
							],
							[
								7422,
								7443
							],
							[
								7604,
								7623
							],
							[
								7651,
								7670
							],
							[
								7674,
								7693
							],
							[
								7766,
								7785
							],
							[
								7854,
								7875
							],
							[
								7903,
								7924
							],
							[
								7928,
								7949
							],
							[
								8024,
								8045
							],
							[
								8454,
								8467
							],
							[
								8471,
								8484
							],
							[
								8500,
								8522
							],
							[
								8526,
								8548
							],
							[
								8603,
								8621
							],
							[
								8807,
								8831
							],
							[
								8845,
								8864
							],
							[
								8878,
								8889
							],
							[
								8920,
								8927
							],
							[
								8947,
								8951
							],
							[
								8964,
								8967
							],
							[
								8995,
								8999
							],
							[
								9000,
								9008
							],
							[
								9070,
								9074
							],
							[
								9135,
								9142
							],
							[
								9155,
								9159
							],
							[
								9172,
								9176
							],
							[
								9242,
								9246
							],
							[
								9254,
								9258
							],
							[
								9268,
								9272
							],
							[
								9273,
								9281
							],
							[
								9310,
								9314
							],
							[
								9318,
								9322
							],
							[
								9356,
								9360
							],
							[
								9372,
								9383
							],
							[
								9406,
								9410
							],
							[
								9581,
								9605
							],
							[
								9687,
								9711
							],
							[
								9764,
								9784
							],
							[
								10023,
								10042
							],
							[
								10070,
								10073
							],
							[
								10086,
								10090
							],
							[
								10103,
								10123
							],
							[
								10178,
								10193
							],
							[
								10222,
								10246
							],
							[
								11284,
								11307
							],
							[
								11311,
								11330
							],
							[
								11484,
								11507
							],
							[
								11562,
								11585
							],
							[
								11648,
								11659
							],
							[
								11668,
								11679
							],
							[
								11687,
								11702
							],
							[
								11710,
								11721
							],
							[
								11763,
								11772
							],
							[
								11867,
								11882
							],
							[
								11914,
								11934
							],
							[
								11986,
								11997
							],
							[
								12030,
								12046
							],
							[
								12079,
								12092
							],
							[
								12096,
								12119
							],
							[
								12713,
								12737
							],
							[
								12925,
								12949
							],
							[
								13078,
								13102
							],
							[
								13185,
								13209
							],
							[
								13299,
								13315
							],
							[
								13407,
								13424
							],
							[
								13439,
								13457
							],
							[
								13478,
								13495
							],
							[
								13518,
								13535
							],
							[
								13558,
								13576
							],
							[
								13580,
								13589
							],
							[
								13710,
								13726
							],
							[
								13745,
								13762
							]
						],
						"symlist":
						[
							"PROJECT_NAME",
							"DISABLE_WERROR",
							"CMAKE_BUILD_TYPE",
							"CMAKE_BUILD_RPATH",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_PREFIX",
							"QUICKJS_SOURCES_ROOT",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_BUILD_TYPE",
							"LIBWS2_32",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"PNG_LIBRARIES",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"check_size",
							"TYPE",
							"VAR",
							"CMAKE_",
							"VAR",
							"VAR",
							"CMAKE_",
							"VAR",
							"CMAKE_",
							"VAR",
							"TYPE",
							"CMAKE_",
							"VAR",
							"POSITION_INDEPENDENT_CODE",
							"CMAKE_THREAD_LIBS_INIT",
							"LIBPTHREAD",
							"CMAKE_THREAD_LIBS_INIT",
							"LIBM",
							"LIBDL",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_PREFIX",
							"CMAKE_INSTALL_PREFIX",
							"CMAKE_BUILD_RPATH",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BUILD_WITH_INSTALL_RPATH",
							"CMAKE_INSTALL_RPATH_USE_LINK_PATH",
							"OPENCV_INCLUDE_DIRS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CXX_STANDARD",
							"CMAKE_REQUIRED_QUIET",
							"CXX_STANDARD",
							"CXX_STANDARD_NUM",
							"CMAKE_REQUIRED_QUIET",
							"CXX_STANDARD_NUM",
							"CXX_STANDARD_VALUE",
							"CXX_STANDARD_NAME",
							"CXX_STANDARD_NAME",
							"CXX_STANDARD_NAME",
							"CXX_STANDARD_VALUE",
							"CXX_STANDARD",
							"CXX_STANDARD_FLAG",
							"CXX_STANDARD",
							"CMAKE_CXX_FLAGS",
							"CMAKE_CXX_FLAGS",
							"CXX_STANDARD_FLAG",
							"CXX_STANDARD_NUM",
							"CXX_STANDARD_FLAG",
							"CXX_STANDARD_VALUE",
							"NOWARN_FLAG",
							"FLAG",
							"FLAG",
							"VARNAME",
							"VARNAME",
							"CMAKE_C_FLAGS",
							"CMAKE_C_FLAGS",
							"FLAG",
							"CMAKE_CXX_FLAGS",
							"CMAKE_CXX_FLAGS",
							"FLAG",
							"VARNAME",
							"CMAKE_C_FLAGS",
							"CMAKE_CXX_FLAGS",
							"CMAKE_CXX11_EXTENSION_COMPILE_OPTION",
							"CXX_STANDARD_FLAG",
							"CMAKE_CXX_COMPILER_ID",
							"CMAKE_CXX_COMPILER_ID",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_C_FLAGS",
							"CMAKE_C_FLAGS",
							"CMAKE_EXE_LINKER_FLAGS",
							"CMAKE_EXE_LINKER_FLAGS",
							"quickjs_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"QUICKJS_LIBRARY_DIR",
							"src_program",
							"SOURCES",
							"NAME",
							"SRC",
							"NAME",
							"_SOURCES",
							"SRCS",
							"SOURCES",
							"NAME",
							"SRCS",
							"NAME",
							"NAME",
							"NAME",
							"_SOURCES",
							"NAME",
							"ARGN",
							"NAME",
							"PLOTCV_DEFS",
							"NAME",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"QUICKJS_SOURCES_LIST",
							"find_static_library",
							"VAR",
							"NAME",
							"CMAKE_INSTALL_PREFIX",
							"QUICKJS_LIBRARY",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_REQUIRED_INCLUDES",
							"OPENCV_INCLUDE_DIRS",
							"OPENCV_FREETYPE_LIBRARY",
							"OPENCV_FREETYPE_LIBRARY",
							"CLI_SOURCES",
							"OpenCV_LIBS",
							"QUICKJS_LIBRARY",
							"PNG_LIBRARY",
							"LIBWS2_32",
							"QUICKJS_VERSION",
							"CMAKE_INSTALL_PREFIX",
							"PLOTCV_DEFS",
							"QUICKJS_OPENCV_A",
							"PNG_LIBRARIES",
							"OPENCV_FREETYPE_LIBRARY",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BINARY_DIR",
							"CMAKE_INSTALL_DIR",
							"CMAKE_MAKE_PROGRAM",
							"CMAKE_INSTALL_DIR",
							"CMAKE_INSTALL_DIR",
							"CMAKE_PROJECT_NAME",
							"DATE_TIME",
							"CMAKE_BINARY_DIR",
							"CMAKE_INSTALL_DIR"
						]
					},
					"AQAAAAAAAAAAAAAABAsAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					507,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAECwAAUFJPSkVDVF9OQU1FCkRJU0FCTEVfV0VSUk9SCkNNQUtFX0JVSUxEX1RZUEUKQ01BS0VfQlVJTERfUlBBVEgKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0lOU1RBTExfUlBBVEgKQ01BS0VfSU5TVEFMTF9QUkVGSVgKUVVJQ0tKU19TT1VSQ0VTX1JPT1QKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0JVSUxEX1RZUEUKTElCV1MyXzMyCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSClBOR19MSUJSQVJJRVMKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgogIGNoZWNrX3NpemUKVFlQRQpWQVIKQ01BS0VfClZBUgpWQVIKQ01BS0VfClZBUgpDTUFLRV8KVkFSClRZUEUKQ01BS0VfClZBUgpQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFCkNNQUtFX1RIUkVBRF9MSUJTX0lOSVQKTElCUFRIUkVBRApDTUFLRV9USFJFQURfTElCU19JTklUCkxJQk0KTElCREwKQ01BS0VfSU5TVEFMTF9SUEFUSApDTUFLRV9JTlNUQUxMX1JQQVRICkNNQUtFX0lOU1RBTExfUFJFRklYCkNNQUtFX0lOU1RBTExfUFJFRklYCkNNQUtFX0JVSUxEX1JQQVRICkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQlVJTERfV0lUSF9JTlNUQUxMX1JQQVRICkNNQUtFX0lOU1RBTExfUlBBVEhfVVNFX0xJTktfUEFUSApPUEVOQ1ZfSU5DTFVERV9ESVJTCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1hYX1NUQU5EQVJECkNNQUtFX1JFUVVJUkVEX1FVSUVUCkNYWF9TVEFOREFSRApDWFhfU1RBTkRBUkRfTlVNCkNNQUtFX1JFUVVJUkVEX1FVSUVUCkNYWF9TVEFOREFSRF9OVU0KQ1hYX1NUQU5EQVJEX1ZBTFVFCkNYWF9TVEFOREFSRF9OQU1FCkNYWF9TVEFOREFSRF9OQU1FCkNYWF9TVEFOREFSRF9OQU1FCkNYWF9TVEFOREFSRF9WQUxVRQpDWFhfU1RBTkRBUkQKQ1hYX1NUQU5EQVJEX0ZMQUcKQ1hYX1NUQU5EQVJECkNNQUtFX0NYWF9GTEFHUwpDTUFLRV9DWFhfRkxBR1MKQ1hYX1NUQU5EQVJEX0ZMQUcKQ1hYX1NUQU5EQVJEX05VTQpDWFhfU1RBTkRBUkRfRkxBRwpDWFhfU1RBTkRBUkRfVkFMVUUKTk9XQVJOX0ZMQUcKRkxBRwpGTEFHClZBUk5BTUUKVkFSTkFNRQpDTUFLRV9DX0ZMQUdTCkNNQUtFX0NfRkxBR1MKRkxBRwpDTUFLRV9DWFhfRkxBR1MKQ01BS0VfQ1hYX0ZMQUdTCkZMQUcKVkFSTkFNRQpDTUFLRV9DX0ZMQUdTCkNNQUtFX0NYWF9GTEFHUwpDTUFLRV9DWFgxMV9FWFRFTlNJT05fQ09NUElMRV9PUFRJT04KQ1hYX1NUQU5EQVJEX0ZMQUcKQ01BS0VfQ1hYX0NPTVBJTEVSX0lECkNNQUtFX0NYWF9DT01QSUxFUl9JRApDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DWFhfRkxBR1NfREVCVUcKQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DWFhfRkxBR1NfREVCVUcKQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTCkNNQUtFX0NfRkxBR1MKQ01BS0VfRVhFX0xJTktFUl9GTEFHUwpDTUFLRV9FWEVfTElOS0VSX0ZMQUdTCiAgcXVpY2tqc19CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpRVUlDS0pTX0xJQlJBUllfRElSCiAgc3JjX3Byb2dyYW0KU09VUkNFUwpOQU1FClNSQwpOQU1FCiAgX1NPVVJDRVMKU1JDUwpTT1VSQ0VTCk5BTUUKU1JDUwpOQU1FCk5BTUUKTkFNRQogIF9TT1VSQ0VTCk5BTUUKQVJHTgpOQU1FClBMT1RDVl9ERUZTCk5BTUUKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpRVUlDS0pTX1NPVVJDRVNfTElTVAogIGZpbmRfc3RhdGljX2xpYnJhcnkKVkFSCk5BTUUKQ01BS0VfSU5TVEFMTF9QUkVGSVgKUVVJQ0tKU19MSUJSQVJZCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9SRVFVSVJFRF9JTkNMVURFUwpPUEVOQ1ZfSU5DTFVERV9ESVJTCk9QRU5DVl9GUkVFVFlQRV9MSUJSQVJZCk9QRU5DVl9GUkVFVFlQRV9MSUJSQVJZCkNMSV9TT1VSQ0VTCk9wZW5DVl9MSUJTClFVSUNLSlNfTElCUkFSWQpQTkdfTElCUkFSWQpMSUJXUzJfMzIKUVVJQ0tKU19WRVJTSU9OCkNNQUtFX0lOU1RBTExfUFJFRklYClBMT1RDVl9ERUZTClFVSUNLSlNfT1BFTkNWX0EKUE5HX0xJQlJBUklFUwpPUEVOQ1ZfRlJFRVRZUEVfTElCUkFSWQpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQklOQVJZX0RJUgpDTUFLRV9JTlNUQUxMX0RJUgpDTUFLRV9NQUtFX1BST0dSQU0KQ01BS0VfSU5TVEFMTF9ESVIKQ01BS0VfSU5TVEFMTF9ESVIKQ01BS0VfUFJPSkVDVF9OQU1FCkRBVEVfVElNRQpDTUFLRV9CSU5BUllfRElSCkNNQUtFX0lOU1RBTExfRElSAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					508,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					509,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					510,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					511,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					512,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					513,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					514,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					515,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					516,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					517,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					518,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CMakeLists.txt",
						"symkeys":
						[
							[
								95,
								107
							],
							[
								120,
								134
							],
							[
								186,
								202
							],
							[
								446,
								463
							],
							[
								467,
								491
							],
							[
								545,
								564
							],
							[
								568,
								588
							],
							[
								649,
								669
							],
							[
								672,
								696
							],
							[
								771,
								787
							],
							[
								874,
								883
							],
							[
								1154,
								1178
							],
							[
								1213,
								1237
							],
							[
								1327,
								1351
							],
							[
								1550,
								1563
							],
							[
								1619,
								1643
							],
							[
								1823,
								1847
							],
							[
								1915,
								1925
							],
							[
								1957,
								1961
							],
							[
								1972,
								1975
							],
							[
								1985,
								1991
							],
							[
								1993,
								1996
							],
							[
								2030,
								2033
							],
							[
								2037,
								2043
							],
							[
								2045,
								2048
							],
							[
								2062,
								2068
							],
							[
								2070,
								2073
							],
							[
								2105,
								2109
							],
							[
								2113,
								2119
							],
							[
								2121,
								2124
							],
							[
								2308,
								2333
							],
							[
								2458,
								2480
							],
							[
								2517,
								2527
							],
							[
								2530,
								2552
							],
							[
								2655,
								2659
							],
							[
								2797,
								2802
							],
							[
								2875,
								2894
							],
							[
								2902,
								2921
							],
							[
								2925,
								2945
							],
							[
								2953,
								2973
							],
							[
								2994,
								3011
							],
							[
								3015,
								3039
							],
							[
								3043,
								3067
							],
							[
								3180,
								3210
							],
							[
								3294,
								3327
							],
							[
								3437,
								3456
							],
							[
								3460,
								3484
							],
							[
								3490,
								3514
							],
							[
								3525,
								3549
							],
							[
								3559,
								3583
							],
							[
								3595,
								3619
							],
							[
								3754,
								3766
							],
							[
								3777,
								3797
							],
							[
								3839,
								3851
							],
							[
								3875,
								3891
							],
							[
								3901,
								3921
							],
							[
								3950,
								3966
							],
							[
								4026,
								4044
							],
							[
								4071,
								4088
							],
							[
								4169,
								4186
							],
							[
								4262,
								4279
							],
							[
								4402,
								4420
							],
							[
								4424,
								4436
							],
							[
								4483,
								4500
							],
							[
								4509,
								4521
							],
							[
								4579,
								4594
							],
							[
								4598,
								4613
							],
							[
								4617,
								4634
							],
							[
								4675,
								4691
							],
							[
								4785,
								4802
							],
							[
								4861,
								4879
							],
							[
								4890,
								4901
							],
							[
								4934,
								4938
							],
							[
								4969,
								4973
							],
							[
								4979,
								4986
							],
							[
								5018,
								5025
							],
							[
								5036,
								5049
							],
							[
								5053,
								5066
							],
							[
								5070,
								5074
							],
							[
								5086,
								5101
							],
							[
								5105,
								5120
							],
							[
								5124,
								5128
							],
							[
								5143,
								5150
							],
							[
								5231,
								5244
							],
							[
								5300,
								5315
							],
							[
								5390,
								5426
							],
							[
								5430,
								5447
							],
							[
								5550,
								5571
							],
							[
								5799,
								5820
							],
							[
								6481,
								6500
							],
							[
								6504,
								6523
							],
							[
								6539,
								6560
							],
							[
								6564,
								6585
							],
							[
								7006,
								7025
							],
							[
								7051,
								7070
							],
							[
								7074,
								7093
							],
							[
								7164,
								7183
							],
							[
								7256,
								7277
							],
							[
								7303,
								7324
							],
							[
								7328,
								7349
							],
							[
								7422,
								7443
							],
							[
								7604,
								7623
							],
							[
								7651,
								7670
							],
							[
								7674,
								7693
							],
							[
								7766,
								7785
							],
							[
								7854,
								7875
							],
							[
								7903,
								7924
							],
							[
								7928,
								7949
							],
							[
								8024,
								8045
							],
							[
								8454,
								8467
							],
							[
								8471,
								8484
							],
							[
								8500,
								8522
							],
							[
								8526,
								8548
							],
							[
								8603,
								8621
							],
							[
								8807,
								8831
							],
							[
								8845,
								8864
							],
							[
								8878,
								8889
							],
							[
								8920,
								8927
							],
							[
								8947,
								8951
							],
							[
								8964,
								8967
							],
							[
								8995,
								8999
							],
							[
								9000,
								9008
							],
							[
								9070,
								9074
							],
							[
								9135,
								9142
							],
							[
								9155,
								9159
							],
							[
								9172,
								9176
							],
							[
								9242,
								9246
							],
							[
								9254,
								9258
							],
							[
								9268,
								9272
							],
							[
								9273,
								9281
							],
							[
								9310,
								9314
							],
							[
								9318,
								9322
							],
							[
								9356,
								9360
							],
							[
								9372,
								9383
							],
							[
								9406,
								9410
							],
							[
								9581,
								9605
							],
							[
								9687,
								9711
							],
							[
								9764,
								9784
							],
							[
								10023,
								10042
							],
							[
								10070,
								10073
							],
							[
								10086,
								10090
							],
							[
								10103,
								10123
							],
							[
								10178,
								10193
							],
							[
								10222,
								10246
							],
							[
								11284,
								11307
							],
							[
								11311,
								11330
							],
							[
								11484,
								11507
							],
							[
								11562,
								11585
							],
							[
								11648,
								11659
							],
							[
								11668,
								11679
							],
							[
								11687,
								11702
							],
							[
								11710,
								11721
							],
							[
								11763,
								11772
							],
							[
								11867,
								11882
							],
							[
								11914,
								11934
							],
							[
								11986,
								11997
							],
							[
								12030,
								12046
							],
							[
								12079,
								12092
							],
							[
								12096,
								12119
							],
							[
								12713,
								12737
							],
							[
								12925,
								12949
							],
							[
								13078,
								13102
							],
							[
								13185,
								13209
							],
							[
								13299,
								13315
							],
							[
								13407,
								13424
							],
							[
								13439,
								13457
							],
							[
								13478,
								13495
							],
							[
								13518,
								13535
							],
							[
								13558,
								13576
							],
							[
								13580,
								13589
							],
							[
								13710,
								13726
							],
							[
								13745,
								13762
							]
						],
						"symlist":
						[
							"PROJECT_NAME",
							"DISABLE_WERROR",
							"CMAKE_BUILD_TYPE",
							"CMAKE_BUILD_RPATH",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_PREFIX",
							"QUICKJS_SOURCES_ROOT",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_BUILD_TYPE",
							"LIBWS2_32",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"PNG_LIBRARIES",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"check_size",
							"TYPE",
							"VAR",
							"CMAKE_",
							"VAR",
							"VAR",
							"CMAKE_",
							"VAR",
							"CMAKE_",
							"VAR",
							"TYPE",
							"CMAKE_",
							"VAR",
							"POSITION_INDEPENDENT_CODE",
							"CMAKE_THREAD_LIBS_INIT",
							"LIBPTHREAD",
							"CMAKE_THREAD_LIBS_INIT",
							"LIBM",
							"LIBDL",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_RPATH",
							"CMAKE_INSTALL_PREFIX",
							"CMAKE_INSTALL_PREFIX",
							"CMAKE_BUILD_RPATH",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BUILD_WITH_INSTALL_RPATH",
							"CMAKE_INSTALL_RPATH_USE_LINK_PATH",
							"OPENCV_INCLUDE_DIRS",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CXX_STANDARD",
							"CMAKE_REQUIRED_QUIET",
							"CXX_STANDARD",
							"CXX_STANDARD_NUM",
							"CMAKE_REQUIRED_QUIET",
							"CXX_STANDARD_NUM",
							"CXX_STANDARD_VALUE",
							"CXX_STANDARD_NAME",
							"CXX_STANDARD_NAME",
							"CXX_STANDARD_NAME",
							"CXX_STANDARD_VALUE",
							"CXX_STANDARD",
							"CXX_STANDARD_FLAG",
							"CXX_STANDARD",
							"CMAKE_CXX_FLAGS",
							"CMAKE_CXX_FLAGS",
							"CXX_STANDARD_FLAG",
							"CXX_STANDARD_NUM",
							"CXX_STANDARD_FLAG",
							"CXX_STANDARD_VALUE",
							"NOWARN_FLAG",
							"FLAG",
							"FLAG",
							"VARNAME",
							"VARNAME",
							"CMAKE_C_FLAGS",
							"CMAKE_C_FLAGS",
							"FLAG",
							"CMAKE_CXX_FLAGS",
							"CMAKE_CXX_FLAGS",
							"FLAG",
							"VARNAME",
							"CMAKE_C_FLAGS",
							"CMAKE_CXX_FLAGS",
							"CMAKE_CXX11_EXTENSION_COMPILE_OPTION",
							"CXX_STANDARD_FLAG",
							"CMAKE_CXX_COMPILER_ID",
							"CMAKE_CXX_COMPILER_ID",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_C_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_CXX_FLAGS_DEBUG",
							"CMAKE_C_FLAGS",
							"CMAKE_C_FLAGS",
							"CMAKE_EXE_LINKER_FLAGS",
							"CMAKE_EXE_LINKER_FLAGS",
							"quickjs_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"QUICKJS_LIBRARY_DIR",
							"src_program",
							"SOURCES",
							"NAME",
							"SRC",
							"NAME",
							"_SOURCES",
							"SRCS",
							"SOURCES",
							"NAME",
							"SRCS",
							"NAME",
							"NAME",
							"NAME",
							"_SOURCES",
							"NAME",
							"ARGN",
							"NAME",
							"PLOTCV_DEFS",
							"NAME",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_SOURCE_DIR",
							"QUICKJS_SOURCES_LIST",
							"find_static_library",
							"VAR",
							"NAME",
							"CMAKE_INSTALL_PREFIX",
							"QUICKJS_LIBRARY",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_REQUIRED_INCLUDES",
							"OPENCV_INCLUDE_DIRS",
							"OPENCV_FREETYPE_LIBRARY",
							"OPENCV_FREETYPE_LIBRARY",
							"CLI_SOURCES",
							"OpenCV_LIBS",
							"QUICKJS_LIBRARY",
							"PNG_LIBRARY",
							"LIBWS2_32",
							"QUICKJS_VERSION",
							"CMAKE_INSTALL_PREFIX",
							"PLOTCV_DEFS",
							"QUICKJS_OPENCV_A",
							"PNG_LIBRARIES",
							"OPENCV_FREETYPE_LIBRARY",
							"CMAKE_CURRENT_SOURCE_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_BINARY_DIR",
							"CMAKE_INSTALL_DIR",
							"CMAKE_MAKE_PROGRAM",
							"CMAKE_INSTALL_DIR",
							"CMAKE_INSTALL_DIR",
							"CMAKE_PROJECT_NAME",
							"DATE_TIME",
							"CMAKE_BINARY_DIR",
							"CMAKE_INSTALL_DIR"
						]
					},
					"AQAAAAAAAAAAAAAABAsAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					519,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/c11-parser.y",
						"symkeys":
						[
							[
								11998,
								12005
							]
						],
						"symlist":
						[
							"—Ⓕ– yyerror ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAECwAAUFJPSkVDVF9OQU1FCkRJU0FCTEVfV0VSUk9SCkNNQUtFX0JVSUxEX1RZUEUKQ01BS0VfQlVJTERfUlBBVEgKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0lOU1RBTExfUlBBVEgKQ01BS0VfSU5TVEFMTF9QUkVGSVgKUVVJQ0tKU19TT1VSQ0VTX1JPT1QKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0JVSUxEX1RZUEUKTElCV1MyXzMyCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSClBOR19MSUJSQVJJRVMKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgogIGNoZWNrX3NpemUKVFlQRQpWQVIKQ01BS0VfClZBUgpWQVIKQ01BS0VfClZBUgpDTUFLRV8KVkFSClRZUEUKQ01BS0VfClZBUgpQT1NJVElPTl9JTkRFUEVOREVOVF9DT0RFCkNNQUtFX1RIUkVBRF9MSUJTX0lOSVQKTElCUFRIUkVBRApDTUFLRV9USFJFQURfTElCU19JTklUCkxJQk0KTElCREwKQ01BS0VfSU5TVEFMTF9SUEFUSApDTUFLRV9JTlNUQUxMX1JQQVRICkNNQUtFX0lOU1RBTExfUFJFRklYCkNNQUtFX0lOU1RBTExfUFJFRklYCkNNQUtFX0JVSUxEX1JQQVRICkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQlVJTERfV0lUSF9JTlNUQUxMX1JQQVRICkNNQUtFX0lOU1RBTExfUlBBVEhfVVNFX0xJTktfUEFUSApPUEVOQ1ZfSU5DTFVERV9ESVJTCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ1hYX1NUQU5EQVJECkNNQUtFX1JFUVVJUkVEX1FVSUVUCkNYWF9TVEFOREFSRApDWFhfU1RBTkRBUkRfTlVNCkNNQUtFX1JFUVVJUkVEX1FVSUVUCkNYWF9TVEFOREFSRF9OVU0KQ1hYX1NUQU5EQVJEX1ZBTFVFCkNYWF9TVEFOREFSRF9OQU1FCkNYWF9TVEFOREFSRF9OQU1FCkNYWF9TVEFOREFSRF9OQU1FCkNYWF9TVEFOREFSRF9WQUxVRQpDWFhfU1RBTkRBUkQKQ1hYX1NUQU5EQVJEX0ZMQUcKQ1hYX1NUQU5EQVJECkNNQUtFX0NYWF9GTEFHUwpDTUFLRV9DWFhfRkxBR1MKQ1hYX1NUQU5EQVJEX0ZMQUcKQ1hYX1NUQU5EQVJEX05VTQpDWFhfU1RBTkRBUkRfRkxBRwpDWFhfU1RBTkRBUkRfVkFMVUUKTk9XQVJOX0ZMQUcKRkxBRwpGTEFHClZBUk5BTUUKVkFSTkFNRQpDTUFLRV9DX0ZMQUdTCkNNQUtFX0NfRkxBR1MKRkxBRwpDTUFLRV9DWFhfRkxBR1MKQ01BS0VfQ1hYX0ZMQUdTCkZMQUcKVkFSTkFNRQpDTUFLRV9DX0ZMQUdTCkNNQUtFX0NYWF9GTEFHUwpDTUFLRV9DWFgxMV9FWFRFTlNJT05fQ09NUElMRV9PUFRJT04KQ1hYX1NUQU5EQVJEX0ZMQUcKQ01BS0VfQ1hYX0NPTVBJTEVSX0lECkNNQUtFX0NYWF9DT01QSUxFUl9JRApDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DWFhfRkxBR1NfREVCVUcKQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NfRkxBR1NfREVCVUcKQ01BS0VfQ19GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DWFhfRkxBR1NfREVCVUcKQ01BS0VfQ1hYX0ZMQUdTX0RFQlVHCkNNQUtFX0NYWF9GTEFHU19ERUJVRwpDTUFLRV9DX0ZMQUdTCkNNQUtFX0NfRkxBR1MKQ01BS0VfRVhFX0xJTktFUl9GTEFHUwpDTUFLRV9FWEVfTElOS0VSX0ZMQUdTCiAgcXVpY2tqc19CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpRVUlDS0pTX0xJQlJBUllfRElSCiAgc3JjX3Byb2dyYW0KU09VUkNFUwpOQU1FClNSQwpOQU1FCiAgX1NPVVJDRVMKU1JDUwpTT1VSQ0VTCk5BTUUKU1JDUwpOQU1FCk5BTUUKTkFNRQogIF9TT1VSQ0VTCk5BTUUKQVJHTgpOQU1FClBMT1RDVl9ERUZTCk5BTUUKQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpRVUlDS0pTX1NPVVJDRVNfTElTVAogIGZpbmRfc3RhdGljX2xpYnJhcnkKVkFSCk5BTUUKQ01BS0VfSU5TVEFMTF9QUkVGSVgKUVVJQ0tKU19MSUJSQVJZCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9SRVFVSVJFRF9JTkNMVURFUwpPUEVOQ1ZfSU5DTFVERV9ESVJTCk9QRU5DVl9GUkVFVFlQRV9MSUJSQVJZCk9QRU5DVl9GUkVFVFlQRV9MSUJSQVJZCkNMSV9TT1VSQ0VTCk9wZW5DVl9MSUJTClFVSUNLSlNfTElCUkFSWQpQTkdfTElCUkFSWQpMSUJXUzJfMzIKUVVJQ0tKU19WRVJTSU9OCkNNQUtFX0lOU1RBTExfUFJFRklYClBMT1RDVl9ERUZTClFVSUNLSlNfT1BFTkNWX0EKUE5HX0xJQlJBUklFUwpPUEVOQ1ZfRlJFRVRZUEVfTElCUkFSWQpDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkNNQUtFX0NVUlJFTlRfQklOQVJZX0RJUgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQklOQVJZX0RJUgpDTUFLRV9JTlNUQUxMX0RJUgpDTUFLRV9NQUtFX1BST0dSQU0KQ01BS0VfSU5TVEFMTF9ESVIKQ01BS0VfSU5TVEFMTF9ESVIKQ01BS0VfUFJPSkVDVF9OQU1FCkRBVEVfVElNRQpDTUFLRV9CSU5BUllfRElSCkNNQUtFX0lOU1RBTExfRElSAAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					520,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/c11-scanner.l",
						"symkeys":
						[
							[
								74,
								76
							],
							[
								3789,
								3794
							],
							[
								3982,
								3992
							]
						],
						"symlist":
						[
							"—Ⓕ– IS ( ) { … } — function",
							"—Ⓕ– count ( ) { … } — function",
							"—Ⓕ– check_type ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqAAAA4oCU4pK74oCTIHl5ZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAABeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					521,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/c11-parser.y",
						"symkeys":
						[
							[
								11998,
								12005
							]
						],
						"symlist":
						[
							"—Ⓕ– yyerror ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB8AAAA4oCU4pK74oCTIElTICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY291bnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjaGVja190eXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					522,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/c11-scanner.l",
						"symkeys":
						[
							[
								74,
								76
							],
							[
								3789,
								3794
							],
							[
								3982,
								3992
							]
						],
						"symlist":
						[
							"—Ⓕ– IS ( ) { … } — function",
							"—Ⓕ– count ( ) { … } — function",
							"—Ⓕ– check_type ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqAAAA4oCU4pK74oCTIHl5ZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAABeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 34102,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAALyoAAAAAAADfKwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAADSAAAAAAAAANoAAAAAAAAAAAAAAvX8AAAAAAAC/fwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvX8AAAAAAAA0gAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "(("
					},
					"AgAAAOJ/AAAAAAAA438AAAAAAAAAAAAA438AAAAAAADkfwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4n8AAAAAAADifwAAAAAAAAAAAAAAAFJA"
				],
				[
					30,
					2,
					"left_delete",
					null,
					"AgAAAON/AAAAAAAA438AAAAAAAABAAAAKOJ/AAAAAAAA4n8AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA5H8AAAAAAADkfwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOJ/AAAAAAAA438AAAAAAAAAAAAA438AAAAAAADkfwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4n8AAAAAAADifwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAL1/AAAAAAAAvn8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvX8AAAAAAAC9fwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"right_delete",
					null,
					"AQAAAMB/AAAAAAAAwH8AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAwH8AAAAAAADAfwAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAOWEAAAAAAAA54QAAAAAAAAAAAAAWoQAAAAAAABchAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWoQAAAAAAADlhAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"left_delete",
					null,
					"AQAAAFqEAAAAAAAAWoQAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAW4QAAAAAAABbhAAAAAAAAAAAAAAAgE9A"
				],
				[
					100,
					1,
					"right_delete",
					null,
					"AQAAAFqEAAAAAAAAWoQAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAWoQAAAAAAABahAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHWEAAAAAAAAdoQAAAAAAAAAAAAAdoQAAAAAAAB3hAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdYQAAAAAAAB1hAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					2,
					"left_delete",
					null,
					"AgAAAOiEAAAAAAAA6IQAAAAAAAABAAAAL+eEAAAAAAAA54QAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAA6YQAAAAAAADphAAAAAAAAAAAAAAAgFZA"
				],
				[
					117,
					1,
					"left_delete",
					null,
					"AQAAAL5/AAAAAAAAvn8AAAAAAACDAAAALyoKICAgICAgb25GZChmZCwgcmQsIHdyKSB7CiAgICAgICAgLy9jb25zb2xlLmxvZygnb25GZCcsIGZkLCByZCwgd3IpOwogICAgICAgIHJldHVybiBjYWxsYmFja3Mub25GZChmZCwgcmQsIHdyKTsKICAgICAgfSwqLwogICAgICA",
					"AQAAAAAAAAABAAAAvn8AAAAAAABBgAAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAvn8AAAAAAAC+fwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "fire.js",
			"settings":
			{
				"buffer_size": 14472,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					764,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAH0qAAAAAAAAfioAAAAAAAAAAAAAfioAAAAAAAB+KgAAAAAAAAIAAAAqLw",
					"AQAAAAAAAAABAAAAfyoAAAAAAAB9KgAAAAAAAAAAAAAAAPC/"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALUoAAAAAAAAtigAAAAAAAAAAAAAtigAAAAAAAC2KAAAAAAAAAUAAAAgIC8qIA",
					"AQAAAAAAAAABAAAAuigAAAAAAAC1KAAAAAAAAAAAAAAAAPC/"
				],
				[
					782,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHoqAAAAAAAAeyoAAAAAAAAAAAAAeyoAAAAAAAB9KgAAAAAAAAAAAAB9KgAAAAAAAH4qAAAAAAAAAAAAAH4qAAAAAAAAgCoAAAAAAAAAAAAAeyoAAAAAAAB7KgAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAeioAAAAAAAB6KgAAAAAAAAAAAAAAADJA"
				],
				[
					784,
					1,
					"insert",
					{
						"characters": "render"
					},
					"BwAAAHsqAAAAAAAAfCoAAAAAAAAAAAAAfSoAAAAAAAB9KgAAAAAAAAIAAAAgIHwqAAAAAAAAfSoAAAAAAAAAAAAAfSoAAAAAAAB+KgAAAAAAAAAAAAB+KgAAAAAAAH8qAAAAAAAAAAAAAH8qAAAAAAAAgCoAAAAAAAAAAAAAgCoAAAAAAACBKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeyoAAAAAAAB7KgAAAAAAAAAAAAAAADJA"
				],
				[
					785,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIEqAAAAAAAAgyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgSoAAAAAAACBKgAAAAAAAAAAAAAAAPC/"
				],
				[
					786,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAIIqAAAAAAAAgyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgioAAAAAAACCKgAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIMqAAAAAAAAhSoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgyoAAAAAAACDKgAAAAAAAAAAAAAAAPC/"
				],
				[
					788,
					1,
					"insert",
					{
						"characters": "SVG"
					},
					"AwAAAIQqAAAAAAAAhSoAAAAAAAAAAAAAhSoAAAAAAACGKgAAAAAAAAAAAACGKgAAAAAAAIcqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhCoAAAAAAACEKgAAAAAAAAAAAAAAAPC/"
				],
				[
					789,
					1,
					"insert_completion",
					{
						"completion": "SVGComponent",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SVGComponent"
					},
					"AgAAAIQqAAAAAAAAhCoAAAAAAAADAAAAU1ZHhCoAAAAAAACQKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhyoAAAAAAACHKgAAAAAAAAAAAAAAAPC/"
				],
				[
					791,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJEqAAAAAAAAkioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkSoAAAAAAACRKgAAAAAAAAAAAAAAAPC/"
				],
				[
					792,
					1,
					"insert",
					{
						"characters": " svgConta"
					},
					"CQAAAJIqAAAAAAAAkyoAAAAAAAAAAAAAkyoAAAAAAACUKgAAAAAAAAAAAACUKgAAAAAAAJUqAAAAAAAAAAAAAJUqAAAAAAAAlioAAAAAAAAAAAAAlioAAAAAAACXKgAAAAAAAAAAAACXKgAAAAAAAJgqAAAAAAAAAAAAAJgqAAAAAAAAmSoAAAAAAAAAAAAAmSoAAAAAAACaKgAAAAAAAAAAAACaKgAAAAAAAJsqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkioAAAAAAACSKgAAAAAAAAAAAAAAAPC/"
				],
				[
					793,
					1,
					"insert_completion",
					{
						"completion": "svgContainer",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "svgContainer"
					},
					"AgAAAJMqAAAAAAAAkyoAAAAAAAAIAAAAc3ZnQ29udGGTKgAAAAAAAJ8qAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmyoAAAAAAACbKgAAAAAAAAAAAAAAAPC/"
				],
				[
					797,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKAqAAAAAAAAoSoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoCoAAAAAAACgKgAAAAAAAAAAAAAAAPC/"
				],
				[
					800,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAoSoAAAAAAAChKgAAAAAAAAAAAAAAAPC/"
				],
				[
					824,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADYpAAAAAAAANykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANikAAAAAAAA2KQAAAAAAAAAAAAAAAIJA"
				],
				[
					827,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAALUpAAAAAAAAtikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtSkAAAAAAAC1KQAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BwAAALYpAAAAAAAAtykAAAAAAAAAAAAAtykAAAAAAAC9KQAAAAAAAAAAAAC3KQAAAAAAALcpAAAAAAAABgAAACAgICAgILcpAAAAAAAAvykAAAAAAAAAAAAAvykAAAAAAADAKQAAAAAAAAAAAADAKQAAAAAAAMgpAAAAAAAAAAAAALcpAAAAAAAAtykAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAAtikAAAAAAAC2KQAAAAAAAAAAAAAAAPC/"
				],
				[
					831,
					1,
					"left_delete",
					null,
					"AQAAALUpAAAAAAAAtSkAAAAAAAABAAAAJA",
					"AQAAAAAAAAABAAAAtikAAAAAAAC2KQAAAAAAAAAAAAAAAPC/"
				],
				[
					834,
					1,
					"",
					null,
					"AQAAALYpAAAAAAAAMioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtikAAAAAAAC2KQAAAAAAAAAAAAAAAPC/"
				],
				[
					840,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AgAAALYpAAAAAAAAtykAAAAAAAAAAAAAtykAAAAAAAC3KQAAAAAAAAoAAABTVkcuY3JlYXRl",
					"AQAAAAAAAAABAAAAtikAAAAAAADAKQAAAAAAAAAAAAAAAPC/"
				],
				[
					856,
					1,
					"paste",
					null,
					"AgAAAMgpAAAAAAAAzCkAAAAAAAAAAAAAzCkAAAAAAADMKQAAAAAAAAYAAAB3aW5kb3c",
					"AQAAAAAAAAABAAAAyCkAAAAAAADOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					857,
					1,
					"insert",
					{
						"characters": ".r"
					},
					"AgAAAMwpAAAAAAAAzSkAAAAAAAAAAAAAzSkAAAAAAADOKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzCkAAAAAAADMKQAAAAAAAAAAAAAAAPC/"
				],
				[
					858,
					1,
					"left_delete",
					null,
					"AQAAAM0pAAAAAAAAzSkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAzikAAAAAAADOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					859,
					1,
					"insert",
					{
						"characters": "wdth"
					},
					"BAAAAM0pAAAAAAAAzikAAAAAAAAAAAAAzikAAAAAAADPKQAAAAAAAAAAAADPKQAAAAAAANApAAAAAAAAAAAAANApAAAAAAAA0SkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzSkAAAAAAADNKQAAAAAAAAAAAAAAAPC/"
				],
				[
					860,
					3,
					"left_delete",
					null,
					"AwAAANApAAAAAAAA0CkAAAAAAAABAAAAaM8pAAAAAAAAzykAAAAAAAABAAAAdM4pAAAAAAAAzikAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAA0SkAAAAAAADRKQAAAAAAAAAAAAAAAPC/"
				],
				[
					861,
					1,
					"insert",
					{
						"characters": "dt"
					},
					"AgAAAM4pAAAAAAAAzykAAAAAAAAAAAAAzykAAAAAAADQKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzikAAAAAAADOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					903,
					1,
					"insert",
					{
						"characters": "ce,."
					},
					"BAAAAM0pAAAAAAAAzikAAAAAAAAAAAAAzikAAAAAAADPKQAAAAAAAAAAAADPKQAAAAAAANApAAAAAAAAAAAAANApAAAAAAAA0SkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzSkAAAAAAADNKQAAAAAAAAAAAAAAAPC/"
				],
				[
					904,
					2,
					"left_delete",
					null,
					"AgAAANApAAAAAAAA0CkAAAAAAAABAAAALs8pAAAAAAAAzykAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA0SkAAAAAAADRKQAAAAAAAAAAAAAAAPC/"
				],
				[
					905,
					1,
					"insert",
					{
						"characters": "nter.x"
					},
					"BgAAAM8pAAAAAAAA0CkAAAAAAAAAAAAA0CkAAAAAAADRKQAAAAAAAAAAAADRKQAAAAAAANIpAAAAAAAAAAAAANIpAAAAAAAA0ykAAAAAAAAAAAAA0ykAAAAAAADUKQAAAAAAAAAAAADUKQAAAAAAANUpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzykAAAAAAADPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					907,
					1,
					"left_delete",
					null,
					"AQAAANUpAAAAAAAA1SkAAAAAAAAQAAAAd2R0LmlubmVyV2lkdGgvMg",
					"AQAAAAAAAAABAAAA1SkAAAAAAADlKQAAAAAAAAAAAAAAAPC/"
				],
				[
					911,
					1,
					"insert",
					{
						"characters": "cenmter"
					},
					"BwAAAB4pAAAAAAAAHykAAAAAAAAAAAAAHykAAAAAAAAgKQAAAAAAAAAAAAAgKQAAAAAAACEpAAAAAAAAAAAAACEpAAAAAAAAIikAAAAAAAAAAAAAIikAAAAAAAAjKQAAAAAAAAAAAAAjKQAAAAAAACQpAAAAAAAAAAAAACQpAAAAAAAAJSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHikAAAAAAAAeKQAAAAAAAAAAAAAAAPC/"
				],
				[
					912,
					4,
					"left_delete",
					null,
					"BAAAACQpAAAAAAAAJCkAAAAAAAABAAAAciMpAAAAAAAAIykAAAAAAAABAAAAZSIpAAAAAAAAIikAAAAAAAABAAAAdCEpAAAAAAAAISkAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAJSkAAAAAAAAlKQAAAAAAAAAAAAAAAPC/"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": "ter,"
					},
					"BAAAACEpAAAAAAAAIikAAAAAAAAAAAAAIikAAAAAAAAjKQAAAAAAAAAAAAAjKQAAAAAAACQpAAAAAAAAAAAAACQpAAAAAAAAJSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAISkAAAAAAAAhKQAAAAAAAAAAAAAAAPC/"
				],
				[
					914,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACUpAAAAAAAAJikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJSkAAAAAAAAlKQAAAAAAAAAAAAAAAPC/"
				],
				[
					916,
					4,
					"left_delete",
					null,
					"BAAAANMpAAAAAAAA0ykAAAAAAAABAAAAdNIpAAAAAAAA0ikAAAAAAAABAAAAY9EpAAAAAAAA0SkAAAAAAAABAAAAZdApAAAAAAAA0CkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA1CkAAAAAAADUKQAAAAAAAAAAAAAAwGhA"
				],
				[
					917,
					1,
					"right_delete",
					null,
					"AQAAANApAAAAAAAA0CkAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA0CkAAAAAAADQKQAAAAAAAAAAAAAAAPC/"
				],
				[
					921,
					2,
					"left_delete",
					null,
					"AgAAAN8pAAAAAAAA3ykAAAAAAAATAAAAaW5kb3cuaW5uZXJIZWlnaHQvMt4pAAAAAAAA3ikAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAA3ykAAAAAAADyKQAAAAAAAAAAAAAAAPC/"
				],
				[
					922,
					1,
					"insert",
					{
						"characters": "center.y"
					},
					"CAAAAN4pAAAAAAAA3ykAAAAAAAAAAAAA3ykAAAAAAADgKQAAAAAAAAAAAADgKQAAAAAAAOEpAAAAAAAAAAAAAOEpAAAAAAAA4ikAAAAAAAAAAAAA4ikAAAAAAADjKQAAAAAAAAAAAADjKQAAAAAAAOQpAAAAAAAAAAAAAOQpAAAAAAAA5SkAAAAAAAAAAAAA5SkAAAAAAADmKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3ikAAAAAAADeKQAAAAAAAAAAAAAAAPC/"
				],
				[
					937,
					4,
					"left_delete",
					null,
					"BAAAABgqAAAAAAAAGCoAAAAAAAABAAAAZxcqAAAAAAAAFyoAAAAAAAABAAAAdhYqAAAAAAAAFioAAAAAAAABAAAAcxUqAAAAAAAAFSoAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAGSoAAAAAAAAZKgAAAAAAAAAAAAAAAPC/"
				],
				[
					948,
					1,
					"right_delete",
					null,
					"AQAAAOwpAAAAAAAA7CkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAA7CkAAAAAAADsKQAAAAAAAAAAAAAAAPC/"
				],
				[
					949,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAOwpAAAAAAAA7SkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7CkAAAAAAADsKQAAAAAAAAAAAAAAAPC/"
				],
				[
					955,
					1,
					"left_delete",
					null,
					"AQAAABIqAAAAAAAAEioAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAEyoAAAAAAAATKgAAAAAAAAAAAAAAAPC/"
				],
				[
					956,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAABIqAAAAAAAAEyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEioAAAAAAAASKgAAAAAAAAAAAAAAAPC/"
				],
				[
					962,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABMqAAAAAAAAFCoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEyoAAAAAAAATKgAAAAAAAAAAAAAAAPC/"
				],
				[
					963,
					1,
					"insert",
					{
						"characters": " fiolo"
					},
					"BgAAABQqAAAAAAAAFSoAAAAAAAAAAAAAFSoAAAAAAAAWKgAAAAAAAAAAAAAWKgAAAAAAABcqAAAAAAAAAAAAABcqAAAAAAAAGCoAAAAAAAAAAAAAGCoAAAAAAAAZKgAAAAAAAAAAAAAZKgAAAAAAABoqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFCoAAAAAAAAUKgAAAAAAAAAAAAAAAPC/"
				],
				[
					964,
					3,
					"left_delete",
					null,
					"AwAAABkqAAAAAAAAGSoAAAAAAAABAAAAbxgqAAAAAAAAGCoAAAAAAAABAAAAbBcqAAAAAAAAFyoAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAGioAAAAAAAAaKgAAAAAAAAAAAAAAAPC/"
				],
				[
					965,
					1,
					"insert",
					{
						"characters": "lL"
					},
					"AgAAABcqAAAAAAAAGCoAAAAAAAAAAAAAGCoAAAAAAAAZKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFyoAAAAAAAAXKgAAAAAAAAAAAAAAAPC/"
				],
				[
					966,
					1,
					"left_delete",
					null,
					"AQAAABgqAAAAAAAAGCoAAAAAAAABAAAATA",
					"AQAAAAAAAAABAAAAGSoAAAAAAAAZKgAAAAAAAAAAAAAAAPC/"
				],
				[
					967,
					1,
					"insert",
					{
						"characters": "l:"
					},
					"AgAAABgqAAAAAAAAGSoAAAAAAAAAAAAAGSoAAAAAAAAaKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGCoAAAAAAAAYKgAAAAAAAAAAAAAAAPC/"
				],
				[
					968,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABoqAAAAAAAAGyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGioAAAAAAAAaKgAAAAAAAAAAAAAAAPC/"
				],
				[
					969,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAABsqAAAAAAAAHSoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGyoAAAAAAAAbKgAAAAAAAAAAAAAAAPC/"
				],
				[
					970,
					1,
					"insert",
					{
						"characters": "rgba/("
					},
					"BgAAABwqAAAAAAAAHSoAAAAAAAAAAAAAHSoAAAAAAAAeKgAAAAAAAAAAAAAeKgAAAAAAAB8qAAAAAAAAAAAAAB8qAAAAAAAAICoAAAAAAAAAAAAAICoAAAAAAAAhKgAAAAAAAAAAAAAhKgAAAAAAACIqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHCoAAAAAAAAcKgAAAAAAAAAAAAAAAPC/"
				],
				[
					971,
					2,
					"left_delete",
					null,
					"AgAAACEqAAAAAAAAISoAAAAAAAABAAAAKCAqAAAAAAAAICoAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAIioAAAAAAAAiKgAAAAAAAAAAAAAAAPC/"
				],
				[
					972,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAACAqAAAAAAAAISoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAICoAAAAAAAAgKgAAAAAAAAAAAAAAAPC/"
				],
				[
					975,
					1,
					"insert",
					{
						"characters": "80,80,80,"
					},
					"CQAAACEqAAAAAAAAIioAAAAAAAAAAAAAIioAAAAAAAAjKgAAAAAAAAAAAAAjKgAAAAAAACQqAAAAAAAAAAAAACQqAAAAAAAAJSoAAAAAAAAAAAAAJSoAAAAAAAAmKgAAAAAAAAAAAAAmKgAAAAAAACcqAAAAAAAAAAAAACcqAAAAAAAAKCoAAAAAAAAAAAAAKCoAAAAAAAApKgAAAAAAAAAAAAApKgAAAAAAACoqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAISoAAAAAAAAhKgAAAAAAAAAAAAAAAPC/"
				],
				[
					976,
					1,
					"insert",
					{
						"characters": "0.3)"
					},
					"BAAAACoqAAAAAAAAKyoAAAAAAAAAAAAAKyoAAAAAAAAsKgAAAAAAAAAAAAAsKgAAAAAAAC0qAAAAAAAAAAAAAC0qAAAAAAAALioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKioAAAAAAAAqKgAAAAAAAAAAAAAAAPC/"
				],
				[
					985,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/NgAAaW1wb3J0IHsgY3Jvc3NraXQsIENBTlZBUyB9IGZyb20gJy4vbGliL2Nyb3Nza2l0LmpzJzsKaW1wb3J0IHsgUkdCQSwgSFNMQSB9IGZyb20gJy4vbGliL2NvbG9yLmpzJzsKaW1wb3J0IHsgdGltZXIgfSBmcm9tICcuL2xpYi9hc3luYy9oZWxwZXJzLmpzJzsKaW1wb3J0IHsgV2ViU29ja2V0SXRlcmF0b3IsIFdlYlNvY2tldFVSTCwgQ3JlYXRlV2ViU29ja2V0LCBSZWNvbm5lY3RpbmdXZWJTb2NrZXQsIFN0cmVhbVJlYWRJdGVyYXRvciB9IGZyb20gJy4vbGliL2FzeW5jL3dlYnNvY2tldC5qcyc7CmltcG9ydCB7IG9uY2UsIHN0cmVhbWlmeSwgdGhyb3R0bGUsIGRpc3RpbmN0LCBzdWJzY3JpYmUgfSBmcm9tICcuL2xpYi9hc3luYy9ldmVudHMuanMnOwppbXBvcnQgeyBtZW1vaXplLCBkZWZpbmUsIGlzVW5kZWZpbmVkLCBwcm9wZXJ0aWVzLCBrZXlzLCB1bmlxdWUsIHJhbmRTdHIsIHJhbmRJbnQgfSBmcm9tICcuL2xpYi9taXNjLmpzJzsKaW1wb3J0IHsgaXNTdHJlYW0sIEFjcXVpcmVSZWFkZXIsIEFjcXVpcmVXcml0ZXIsIEFycmF5V3JpdGVyLCByZWFkU3RyZWFtLCBQaXBlVG8sIFdyaXRhYmxlUmVwZWF0ZXIsIFdyaXRlSXRlcmF0b3IsIEFzeW5jV3JpdGUsIEFzeW5jUmVhZCwgUmVhZEZyb21JdGVyYXRvciwgV3JpdGVUb1JlcGVhdGVyLCBMb2dTaW5rLCBTdHJpbmdSZWFkZXIsIExpbmVSZWFkZXIsIERlYnVnVHJhbnNmb3JtU3RyZWFtLCBDcmVhdGVXcml0YWJsZVN0cmVhbSwgQ3JlYXRlVHJhbnNmb3JtU3RyZWFtLCBSZXBlYXRlclNvdXJjZSwgUmVwZWF0ZXJTaW5rLCBMaW5lQnVmZmVyU3RyZWFtLCBUZXh0VHJhbnNmb3JtU3RyZWFtLCBDaHVua1JlYWRlciwgQnl0ZVJlYWRlciwgUGlwZVRvUmVwZWF0ZXIsIFJlYWRlciwgUmVhZEFsbCwgZGVmYXVsdCBhcyB1dGlscyB9IGZyb20gJy4vbGliL3N0cmVhbS91dGlscy5qcyc7CmltcG9ydCB7IEludGVyc2VjdGlvbiwgTWF0cml4LCBpc1JlY3QsIFJlY3QsIFNpemUsIFBvaW50LCBMaW5lLCBUcmFuc2Zvcm1hdGlvbkxpc3QsIFZlY3RvciB9IGZyb20gJy4vbGliL2dlb20uanMnOwppbXBvcnQgeyBFbGVtZW50LCBpc0VsZW1lbnQsIFNWRyB9IGZyb20gJy4vbGliL2RvbS5qcyc7CmltcG9ydCBSZWFjdCwgeyBoLCBodG1sLCByZW5kZXIsIEZyYWdtZW50LCBDb21wb25lbnQsIGNyZWF0ZVJlZiwgdXNlU3RhdGUsIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmLCB0b0NoaWxkQXJyYXkgfSBmcm9tICcuL2xpYi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKCmZ1bmN0aW9uIE5ld1dTKCkgewogIGxldCB1cmwgPSBXZWJTb2NrZXRVUkwoJy93cycsIHsgbWlycm9yOiBjdXJyZW50RmlsZSB9KTsKICBsZXQgd3MgPSBuZXcgUmVjb25uZWN0aW5nV2ViU29ja2V0KHVybCwgJ2x3cy1taXJyb3ItcHJvdG9jb2wnKTsKICAoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICBmb3IgYXdhaXQobGV0IGNodW5rIG9mIHdzKSB7CiAgICAgIGxldCBkYXRhID0gSlNPTi5wYXJzZShjaHVuayk7CgogICAgICBpZihkYXRhLmNpZCAhPSBnbG9iYWxUaGlzLmNpZCkgY29uc29sZS5sb2coJ1dTIHJlY2VpdmU6JywgZGF0YSk7CiAgICB9CiAgfSkoKTsKICByZXR1cm4gKGdsb2JhbFRoaXMud3MgPSB3cyk7Cn0KCmNvbnN0IE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PiBbOCwgNCwgNCwgNCwgMTJdLm1hcChuID0+IHJhbmRTdHIobiwgJzAxMjM0NTY3ODlhYmNkZWYnKSwgcm5nKS5qb2luKCctJyk7CmNvbnN0IE1ha2VDbGllbnRJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4gWzQsIDQsIDQsIDRdLm1hcChuID0+IHJhbmRTdHIobiwgWydBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicsICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicsICcuLSQnXVtyYW5kSW50KDAsIDMpXSksIHJuZykuam9pbignJyk7CgpmdW5jdGlvbiBtYWluKCkgewogIGRlZmluZSgKICAgIGdsb2JhbFRoaXMsCiAgICBwcm9wZXJ0aWVzKAogICAgICB7CiAgICAgICAgY3VycmVudFVSTDogKCkgPT4gbmV3IFVSTChpbXBvcnQubWV0YS51cmwpLAogICAgICAgIGN1cnJlbnRGaWxlOiAoKSA9PiBnbG9iYWxUaGlzLmN1cnJlbnRVUkwucGF0aG5hbWUucmVwbGFjZSgvXlwvLywgJycpCiAgICAgIH0sCiAgICAgIHsgbWVtb2l6ZTogdHJ1ZSB9CiAgICApCiAgKTsKCiAgY29uc3Qgd2lkdGggPSAzMjA7CiAgY29uc3QgaGVpZ2h0ID0gMjAwOwogIGNvbnN0IHBhcmVudCA9IGRvY3VtZW50LmJvZHk7CgogIGNyb3Nza2l0LmluaXQoewogICAgcmVuZGVyZXI6IENBTlZBUywKICAgIHBhcmVudCwKICAgIHc6IHdpZHRoLAogICAgaDogaGVpZ2h0LAogICAgYWxwaGE6IGZhbHNlCiAgfSk7CgogIGZ1bmN0aW9uIFJlcGFyZW50KGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdjYW52YXMnKVswXSkgewogICAgY2FudmFzLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoY2FudmFzKTsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKS5hcHBlbmRDaGlsZChjYW52YXMpOwogIH0KCiAgZnVuY3Rpb24gR2V0RWxlbWVudE1hdHJpeChlbGVtZW50KSB7CiAgICBsZXQgeyB0cmFuc2Zvcm0gfSA9IEVsZW1lbnQuZ2V0Q1NTKGRpdkVsZW1lbnQpOwoKICAgIHJldHVybiBNYXRyaXguZnJvbUNTUyh0cmFuc2Zvcm0pOwogIH0KCiAgZnVuY3Rpb24gU2V0Q3Jvc3NoYWlyKHBvcykgewogICAgbGV0IGNoID0gRWxlbWVudC5maW5kKCcjY3Jvc3NoYWlyJyk7CiAgICBsZXQgcmVjdCA9IEVsZW1lbnQuZ2V0UmVjdChjaCk7CgogICAgY29uc29sZS5sb2coJ1NldENyb3NzaGFpcicsIHsgY2gsIHJlY3QsIHBvcyB9KTsKICAgIHJlY3QueCA9IHBvcy54IC0gcmVjdC53aWR0aCAvIDI7CiAgICByZWN0LnkgPSBwb3MueSAtIHJlY3QuaGVpZ2h0IC8gMjsKCiAgICBFbGVtZW50LnNldFJlY3QoY2gsIHJlY3QpOwogIH0KCiAgZnVuY3Rpb24gRXZlbnRQb3NpdGlvbnMoZXZlbnRPclRvdWNoKSB7CiAgICBsZXQgcG9zaXRpb25zID0gdW5pcXVlKAogICAgICBrZXlzKGV2ZW50T3JUb3VjaCwgMikKICAgICAgICAuZmlsdGVyKG4gPT4gdHlwZW9mIG4gPT0gJ3N0cmluZycgJiYgL1tYWV0kLy50ZXN0KG4pKQogICAgICAgIC5tYXAobiA9PiBuLnNsaWNlKDAsIC0xKSkKICAgICk7CgogICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7CiAgICAgIGFjY1trZXldID0gbmV3IFBvaW50KGV2ZW50T3JUb3VjaFtrZXkgKyAnWCddLCBldmVudE9yVG91Y2hba2V5ICsgJ1knXSk7CiAgICAgIHJldHVybiBhY2M7CiAgICB9LCB7fSk7CiAgfQoKICBmdW5jdGlvbiBQb3NpdGlvbk1hdHJpeChjYW52YXMgPSBjYW52YXNFbGVtZW50LCByZWN0ID0gY2FudmFzUmVjdCkgewogICAgbGV0IHZlcnRpY2FsID0gcmVjdC5hc3BlY3QoKSA8IDE7CiAgICBsZXQgdG9wTGVmdCA9IHJlY3QudG9Qb2ludHMoKVt2ZXJ0aWNhbCA/IDEgOiAwXTsKICAgIGxldCBtID0gTWF0cml4LmlkZW50aXR5KCkuc2NhbGUoY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTsKCiAgICBpZih2ZXJ0aWNhbCkgbSA9IG0ucm90YXRlKC1NYXRoLlBJIC8gMik7CgogICAgbSA9IG0uc2NhbGUoMSAvIHJlY3Qud2lkdGgsIDEgLyByZWN0LmhlaWdodCk7CiAgICBtID0gbS50cmFuc2xhdGUoLXRvcExlZnQueCwgLXRvcExlZnQueSk7CgogICAgcmV0dXJuIG07CiAgfQoKICBmdW5jdGlvbiBQb3NpdGlvblByb2Nlc3NvcihjYW52YXMgPSBjYW52YXNFbGVtZW50LCByZWN0ID0gY2FudmFzUmVjdCkgewogICAgbGV0IG0gPSBQb3NpdGlvbk1hdHJpeChjYW52YXMsIHJlY3QpOwogICAgcmV0dXJuIHBvcyA9PiBuZXcgUG9pbnQoLi4ubS50cmFuc2Zvcm1fcG9pbnQobmV3IFBvaW50KHBvcykpKS5yb3VuZCgxKTsKICB9CgogIGZ1bmN0aW9uIFByb2Nlc3NQb3NpdGlvbihwb3MpIHsKICAgIHJldHVybiBQb3NpdGlvblByb2Nlc3NvcigpKHBvcyk7CiAgfQoKICBhc3luYyBmdW5jdGlvbiogTW92ZW1lbnRJdGVyYXRvcihlbGVtZW50KSB7CiAgICBsZXQgZXYgPSBhd2FpdCBvbmNlKGVsZW1lbnQsICdtb3VzZWRvd24nLCAndG91Y2hzdGFydCcpOwogICAgbGV0IHR5cGUgPSBldi50eXBlLnNsaWNlKDAsIDUpOwogICAgeWllbGQgZXY7CiAgICBjb25zb2xlLmxvZyh0eXBlICsgJyBzdGFydCcpOwogICAgZm9yIGF3YWl0KGxldCBldmVudCBvZiBzdHJlYW1pZnkoWydtb3VzZXVwJywgJ21vdXNlbW92ZScsICd0b3VjaGVuZCcsICd0b3VjaG1vdmUnXSwgZWxlbWVudCkpIHsKICAgICAgLy9ldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICBpZigndG91Y2hlcycgaW4gZXZlbnQpIHsKICAgICAgICBpZihldmVudC50b3VjaGVzLmxlbmd0aCkgewogICAgICAgICAgZ2xvYmFsVGhpcy5tb3VzZUV2ZW50ID0gZXZlbnQ7CgogICAgICAgICAgeWllbGQqIFsuLi5ldmVudC50b3VjaGVzXS5tYXAoRXZlbnRQb3NpdGlvbnMpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zdCB7IHR5cGUsIGNsaWVudFg6IHgsIGNsaWVudFk6IHkgfSA9IGV2ZW50OwogICAgICAgIGxldCBvYmogPSB7IHR5cGUsIHgsIHkgfTsKICAgICAgICB5aWVsZCBvYmo7CiAgICAgIH0KICAgICAgaWYoLyh1cHxlbmQpJC8udGVzdChldmVudC50eXBlKSkgewogICAgICAgIGNvbnNvbGUubG9nKHR5cGUgKyAnIGVuZCcpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQoKICBSZXBhcmVudCgpOwoKICBjcm9zc2tpdC5jbGVhcigpOwogIGNyb3Nza2l0LnJlY3QoewogICAgeDogMCwKICAgIHk6IDAsCiAgICB3aWR0aCwKICAgIGhlaWdodCwKICAgIGZpbGw6ICdibGFjaycsCiAgICBzdHJva2U6ICdibGFjaycsCiAgICBhbmdsZTogMAogIH0pOwoKICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIod2lkdGggKiAoaGVpZ2h0ICsgMikpOwogIGNvbnN0IHBhbGV0dGUgPSBDcmVhdGVQYWxldHRlKCk7CiAgY29uc3QgcGFsZXR0ZUhTTCA9IENyZWF0ZVBhbGV0dGVIU0woKTsKCiAgY29uc3QgcGl4ZWxzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogaGVpZ2h0ICsgMiB9KS5tYXAoKHYsIGkpID0+IG5ldyBVaW50OENsYW1wZWRBcnJheShidWZmZXIsIGkgKiB3aWR0aCwgd2lkdGgpKTsKICBjb25zdCB7IGNvbnRleHQgfSA9IGNyb3Nza2l0OwogIGNvbnN0IGltYWdlID0gY29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7CgogIGNvbnN0IHsgbm93LCB3YWl0Rm9yLCBhbmltYXRpb25GcmFtZSB9ID0gVXRpbDsKICBjb25zdCBmcHMgPSA1MDsKICBjb25zdCBtYXRyaXggPSBuZXcgTWF0cml4KCkudHJhbnNsYXRlKDE2MCwgMTAwKS5zY2FsZSgwLjUpOwoKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIGJ1ZmZlciwKICAgIHBhbGV0dGUsCiAgICBwYWxldHRlSFNMLAogICAgcGl4ZWxzLAogICAgY29udGV4dCwKICAgIGltYWdlLAogICAgZnBzLAogICAgbWF0cml4LAogICAgUmVwYXJlbnQsCiAgICBkb206IHsgRWxlbWVudCB9LAogICAgZ2VvbTogeyBSZWN0IH0sCiAgICBNb3ZlbWVudEl0ZXJhdG9yLAogICAgTW91c2VIYW5kbGVyLAogICAgR2V0RWxlbWVudE1hdHJpeCwKICAgIFNldENyb3NzaGFpciwKICAgIEV2ZW50UG9zaXRpb25zLAogICAgUG9zaXRpb25Qcm9jZXNzb3IsCiAgICBQb3NpdGlvbk1hdHJpeCwKICAgIFByb2Nlc3NQb3NpdGlvbgogIH0pOwoKICBhc3luYyBmdW5jdGlvbiBMb29wKCkgewogICAgY29uc3QgZGVsYXkgPSAxMDAwIC8gZnBzOwogICAgY29uc3QgbG9nID0gKHQsIG5hbWUpID0+IGdsb2JhbFRoaXMuZG9Mb2cgJiYgY29uc29sZS5sb2coYCR7bmFtZX0gdGltaW5nOiAke3QudG9GaXhlZCgzKX1tc2ApOwogICAgY29uc3QgZmlyZSA9ICguLi5hcmdzKSA9PiBGaXJlKC4uLmFyZ3MpOwogICAgY29uc3QgcmVkcmF3ID0gKC4uLmFyZ3MpID0+IFJlZHJhdyguLi5hcmdzKTsKCiAgICBhd2FpdCBvbmNlKHdpbmRvdywgJ2xvYWQnKTsKCiAgICBJbml0KCk7CgogICAgZm9yKDs7KSB7CiAgICAgIGZpcmUoKTsKICAgICAgcmVkcmF3KCk7CiAgICAgIGF3YWl0IGFuaW1hdGlvbkZyYW1lKGRlbGF5KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIEZpcmUoKSB7CiAgICBmb3IobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykgewogICAgICBwaXhlbHNbaGVpZ2h0XVt4XSA9IDI1NSAtIChSYW5kb21CeXRlKCkgJSAxMjgpOwogICAgICBwaXhlbHNbaGVpZ2h0ICsgMV1beF0gPSAyNTUgLSAoUmFuZG9tQnl0ZSgpICUgMTI4KTsKICAgIH0KCiAgICBmb3IobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHsKICAgICAgZm9yKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHsKICAgICAgICBjb25zdCBzdW0gPSBbcGl4ZWxzW3kgKyAxXVtNb2R1bG8oeCAtIDEsIHdpZHRoKV0sIHBpeGVsc1t5ICsgMV1beF0sIHBpeGVsc1t5ICsgMV1bTW9kdWxvKHggKyAxLCB3aWR0aCldLCBwaXhlbHNbeSArIDJdW3hdXS5yZWR1Y2UoKGEsIHApID0+IGEgKyAocCB8IDApLCAwKTsKCiAgICAgICAgcGl4ZWxzW3ldW3hdID0gKHN1bSAqIDE1KSA+Pj4gNjsKICAgICAgfQogICAgfQogIH0KCiAgYXN5bmMgZnVuY3Rpb24gUmVkcmF3KCkgewogICAgY29uc3QgeyBkYXRhIH0gPSBpbWFnZTsKCiAgICBsZXQgaSA9IDA7CiAgICBsZXQgdCA9IFsuLi5tYXRyaXhdOwoKICAgIGZvcihsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykgewogICAgICBmb3IobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykgewogICAgICAgIGNvbnN0IGMgPSBwYWxldHRlW3BpeGVsc1t5XVt4XV07CiAgICAgICAgZGF0YVtpKytdID0gYy5yOwogICAgICAgIGRhdGFbaSsrXSA9IGMuZzsKICAgICAgICBkYXRhW2krK10gPSBjLmI7CiAgICAgICAgZGF0YVtpKytdID0gYy5hOwogICAgICB9CiAgICB9CgogICAgY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2UsIDAsIDApOwogIH0KCiAgZnVuY3Rpb24gQ3JlYXRlUGFsZXR0ZSgpIHsKICAgIGNvbnN0IGNvbG9ycyA9IG5ldyBBcnJheSgyNTYpOwoKICAgIGZvcihsZXQgaSA9IDA7IGkgPCA2NDsgaSsrKSB7CiAgICAgIGNvbnN0IHZhbHVlID0gaSAqIDQ7CgogICAgICBjb2xvcnNbaV0gPSBuZXcgUkdCQSh2YWx1ZSwgMCwgMCk7CiAgICAgIGNvbG9yc1tpICsgNjRdID0gbmV3IFJHQkEoMjU1LCB2YWx1ZSwgMCk7CiAgICAgIGNvbG9yc1tpICsgMTI4XSA9IG5ldyBSR0JBKDI1NSwgMjU1LCB2YWx1ZSk7CiAgICAgIGNvbG9yc1tpICsgMTkyXSA9IG5ldyBSR0JBKDI1NSwgMjU1LCAyNTUpOwogICAgfQogICAgcmV0dXJuIGNvbG9yczsKICB9CgogIGZ1bmN0aW9uIENyZWF0ZVBhbGV0dGVIU0woKSB7CiAgICBjb25zdCBjb2xvcnMgPSBuZXcgQXJyYXkoMjU2KTsKCiAgICBjb25zdCBodWVzID0gW25ldyBIU0xBKDAsIDEwMCwgMCksIG5ldyBIU0xBKDAsIDEwMCwgNTApLCBuZXcgSFNMQSgzMCwgMTAwLCA1MCksIG5ldyBIU0xBKDYwLCAxMDAsIDUwKSwgbmV3IEhTTEEoNjAsIDEwMCwgMTAwKSwgbmV3IEhTTEEoNjAsIDEwMCwgMTAwKV07CgogICAgY29uc3QgYnJlYWtwb2ludHMgPSBbMCwgNTEsIDgwLCAxNTQsIDIwNSwgMjU2XTsKICAgIGNvbnNvbGUubG9nKCdicmVha3BvaW50czonLCBicmVha3BvaW50cyk7CgogICAgZm9yKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7CiAgICAgIGNvbnN0IGh1ZSA9ICh2ID0+ICh2ID09IC0xID8gKCkgPT4gaHVlcy5sZW5ndGggLSAyIDogdiA9PiB2KSkoYnJlYWtwb2ludHMuZmluZEluZGV4KGIgPT4gaSA8IGIpKTsKICAgICAgY29uc3QgcmFuZ2UgPSBicmVha3BvaW50c1todWVdIC0gMSAtIGJyZWFrcG9pbnRzW2h1ZSAtIDFdOwoKICAgICAgY29sb3JzW2ldID0gSFNMQS5ibGVuZChodWVzW2h1ZSAtIDFdLCBodWVzW2h1ZV0sIChpIC0gYnJlYWtwb2ludHNbaHVlIC0gMV0pIC8gcmFuZ2UpLnRvUkdCQSgpOwogICAgfQogICAgcmV0dXJuIGNvbG9yczsKICB9CgogIC8vIEZvciByYW5kb20gbnVtYmVycywgdXNlICJ4ID0gMTgxICogeCArIDM1OSIgZnJvbQogIC8vIFRvbSBEaWNrZW5zICJSYW5kb20gTnVtYmVyIEdlbmVyYXRvciBmb3IgTWljcm9jb250cm9sbGVycyIKICAvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNzAzMjMyMDQ5MTcvaHR0cDovL2hvbWUuZWFydGhsaW5rLm5ldC9+dGRpY2tlbnMvNjhoYzExL3JhbmRvbS82OGhjMTFyYW5kb20uaHRtbAogIGxldCBzY3JhdGNoID0gMDsKCiAgZnVuY3Rpb24gUmFuZG9tQnl0ZSgpIHsKICAgIGNvbnN0IHZhbHVlID0gMTgxICogc2NyYXRjaCArIDM1OTsKICAgIHNjcmF0Y2ggPSB2YWx1ZSA+Pj4gMDsKICAgIHJldHVybiAodmFsdWUgPj4+IDgpICYgMHhmZjsKICB9CgogIGZ1bmN0aW9uIE1vZHVsbyhuLCBtKSB7CiAgICByZXR1cm4gKChuICUgbSkgKyBtKSAlIG07CiAgfQoKICBsZXQgZWxlbWVudCwgcmVjdCwgcmMsIG1vdXNlVHJhbnNmb3JtOwoKICBmdW5jdGlvbiBCbGF6ZSh4LCB5KSB7CiAgICBmb3IobGV0IHR5ID0geSAtIDE7IHR5IDwgeSArIDE7IHR5KyspIHsKICAgICAgZm9yKGxldCB0eCA9IHggLSAxOyB0eCA8IHggKyAxOyB0eCsrKSB7CiAgICAgICAgcGl4ZWxzW3R5XVt0eF0gPSByYzsKICAgICAgfQogICAgfQoKICAgIHBpeGVsc1t5ICsgMV1beF0gPSByYzsKICB9CgogIGZ1bmN0aW9uIE1vdXNlSGFuZGxlcihlKSB7CiAgICBsZXQgeyB0YXJnZXQsIGJ1dHRvbnMsIHR5cGUgfSA9IGU7CgogICAgaWYoJ3RvdWNoZXMnIGluIGUpIHsKICAgICAgZm9yKGxldCB0b3VjaCBvZiBbLi4uZS50b3VjaGVzXSkgewogICAgICAgIGNvbnN0IHsgY2xpZW50WCwgY2xpZW50WSB9ID0gdG91Y2g7CiAgICAgICAgTW91c2VIYW5kbGVyKHsKICAgICAgICAgIHR5cGUsCiAgICAgICAgICB0YXJnZXQsCiAgICAgICAgICBidXR0b25zLAogICAgICAgICAgb2Zmc2V0WDogTWF0aC50cnVuYyhjbGllbnRYKSAtIHJlY3QueCwKICAgICAgICAgIG9mZnNldFk6IE1hdGgudHJ1bmMoY2xpZW50WSkgLSByZWN0LnkKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm47CiAgICB9CgogICAgZ2xvYmFsVGhpcy5wb2ludGVyRXZlbnQgPSBlOwoKICAgIGNvbnN0IHggPSBNYXRoLnJvdW5kKChlLm9mZnNldFggKiB3aWR0aCkgLyByZWN0LndpZHRoKTsKICAgIGNvbnN0IHkgPSBNYXRoLnJvdW5kKChlLm9mZnNldFkgKiBoZWlnaHQpIC8gcmVjdC5oZWlnaHQpOwoKICAgIHRyeSB7CiAgICAgIGlmKC8oZG93bnxzdGFydCkkLy50ZXN0KHR5cGUpKSByYyA9IHBpeGVsc1t5XVt4XSA+IDB4MzAgPyAwIDogUmFuZG9tQnl0ZSgpIHwgMHg4MDsKCiAgICAgIEJsYXplKHgsIHkpOwogICAgfSBjYXRjaChlKSB7fQogIH0KCiAgZnVuY3Rpb24gUmVzaXplSGFuZGxlcihlKSB7CiAgICByZWN0ID0gY2FudmFzUmVjdDsKICAgIG1vdXNlVHJhbnNmb3JtID0gUG9zaXRpb25Qcm9jZXNzb3IoKTsKICAgIGNvbnNvbGUubG9nKCdSZXNpemVIYW5kbGVyJywgeyBlLCByZWN0IH0pOwogIH0KCiAgZnVuY3Rpb24gT3JpZW50YXRpb25DaGFuZ2UoZSkgewogICAgcmVjdCA9IGNhbnZhc1JlY3Q7CiAgICBtb3VzZVRyYW5zZm9ybSA9IFBvc2l0aW9uUHJvY2Vzc29yKCk7CiAgICBjb25zb2xlLmxvZygnT3JpZW50YXRpb25DaGFuZ2UnLCB7IGUsIHJlY3QgfSk7CiAgfQoKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsgUmFuZG9tQnl0ZSB9KTsKCiAgZnVuY3Rpb24gSW5pdCgpIHsKICAgIHdpbmRvdy5jYW52YXMgPSBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignY2FudmFzJyk7CgogICAgZGVmaW5lKAogICAgICBnbG9iYWxUaGlzLAogICAgICBwcm9wZXJ0aWVzKHsKICAgICAgICBjYW52YXNFbGVtZW50OiAoKSA9PiBFbGVtZW50LmZpbmQoJ2NhbnZhcycpLAogICAgICAgIGRpdkVsZW1lbnQ6ICgpID0+IEVsZW1lbnQuZmluZCgnYm9keSA+IGRpdjpmaXJzdC1jaGlsZCcpCiAgICAgIH0pLAogICAgICBwcm9wZXJ0aWVzKHsKICAgICAgICB3aW5kb3dSZWN0OiAoKSA9PiBuZXcgUmVjdCh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KSwKICAgICAgICBib2R5UmVjdDogKCkgPT4gRWxlbWVudC5yZWN0KCdib2R5Jykucm91bmQoMCksCiAgICAgICAgY2FudmFzUmVjdDogKCkgPT4gRWxlbWVudC5yZWN0KCdjYW52YXMnKS5yb3VuZCgwKSwKICAgICAgICBkaXZSZWN0OiAoKSA9PiBFbGVtZW50LnJlY3QoJ2JvZHkgPiBkaXY6Zmlyc3QtY2hpbGQnKS5yb3VuZCgwKQogICAgICB9KSwKICAgICAgewogICAgICAgIGdldFJlY3QKICAgICAgfSwKICAgICAgcHJvcGVydGllcyh7CiAgICAgICAgdHJhbnNmb3JtOiBbKCkgPT4gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdChFbGVtZW50LmdldENTUygnYm9keSA+IGRpdjpmaXJzdC1jaGlsZCcpLnRyYW5zZm9ybSksIHZhbHVlID0+IEVsZW1lbnQuc2V0Q1NTKCdib2R5ID4gZGl2OmZpcnN0LWNoaWxkJywgeyB0cmFuc2Zvcm06IHZhbHVlICsgJycgfSldCiAgICAgIH0pCiAgICApOwoKICAgIGNvbnN0IFNWR0NvbXBvbmVudCA9IHByb3BzID0+IHsKICAgICAgY29uc3QgcmVjdCA9IEVsZW1lbnQucmVjdChkb2N1bWVudC5ib2R5KS5yb3VuZCgxKTsKICAgICAgY29uc3QgeyBjZW50ZXIsIHdpZHRoLCBoZWlnaHQgfSA9IHJlY3Q7CgoKICAgICAgcmV0dXJuIGgoJ3N2ZycsIHsgdmVyc2lvbjogJzEuMScsIHhtbG5zOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCB2aWV3Qm94OiBbLi4ucmVjdF0uam9pbignICcpLCB3aWR0aCwgaGVpZ2h0IH0sIFsKaCgnY2lyY2xlJywgeyBjeDogY2VudGVyLngsIGN5OiBjZW50ZXIueSwgcjogMjUwLCAnc3Ryb2tlJzogJyMwZjAnLCAnc3Ryb2tlLXdpZHRoJzogMSwgZmlsbDogYHJnYmEoODAsODAsODAsMC4zKWAgfSkKICAgICAgICBdKTsKICAgIH07CgogICAgbGV0IHN2Z0NvbnRhaW5lciA9IEVsZW1lbnQuY3JlYXRlKCdkaXYnLCB7fSwgZG9jdW1lbnQuYm9keSk7CiAgICBFbGVtZW50LnNldENTUyhzdmdDb250YWluZXIsIHsgcG9zaXRpb246ICdhYnNvbHV0ZScsIHRvcDogMCwgbGVmdDogMCwgekluZGV4OiA5OTk5OTk5OSwgcG9pbnRlckV2ZW50czogJ25vbmUnIH0pOwoKICAgIHJlbmRlcihoKFNWR0NvbXBvbmVudCksIHN2Z0NvbnRhaW5lcik7CgogICAgcmVjdCA9IGNhbnZhc1JlY3Q7CiAgICBtb3VzZVRyYW5zZm9ybSA9IFBvc2l0aW9uUHJvY2Vzc29yKCk7CgogICAgKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgICBmb3IgYXdhaXQobGV0IGV2ZW50IG9mIHN0cmVhbWlmeShbJ29yaWVudGF0aW9uY2hhbmdlJywgJ3Jlc2l6ZSddLCBkb2N1bWVudCkpIHsKICAgICAgICBjb25zb2xlLmxvZyhldmVudC50eXBlLCBldmVudCk7CiAgICAgICAgZ2xvYmFsVGhpc1tldmVudC50eXBlXSA9IGV2ZW50OwogICAgICB9CiAgICB9KSgpOwoKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBSZXNpemVIYW5kbGVyLCB0cnVlKTsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIE9yaWVudGF0aW9uQ2hhbmdlLCB0cnVlKTsKCiAgICAvKiAgIGNvbnN0IGhhbmRsZXIgPSBNb3VzZUhhbmRsZXI7CgogICAgc3Vic2NyaWJlKE1vdmVtZW50SXRlcmF0b3IoZWxlbWVudCksIGhhbmRsZXIpOyovCiAgfQoKICBnbG9iYWxUaGlzLndzID0gKGdsb2JhbFRoaXMucndzID8/PSBOZXdXUygpKS53czsKCiAgKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgbGV0IHRyYWlsID0gW10sCiAgICAgIHN0YXJ0LAogICAgICBsYXN0OwogICAgZm9yKDs7KSB7CiAgICAgIGxldCBwcmV2LCBwdDsKCiAgICAgIGZvciBhd2FpdChsZXQgZXYgb2YgTW92ZW1lbnRJdGVyYXRvcih3aW5kb3cpKSB7CiAgICAgICAgaWYoIWdsb2JhbFRoaXMuY2lkKSB7CiAgICAgICAgICBnbG9iYWxUaGlzLmNpZCA/Pz0gTWFrZUNsaWVudElEKCk7CgogICAgICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6ICdoZWxsbycsIGNpZCB9KSk7CiAgICAgICAgfQoKICAgICAgICBpZihyZWN0Lmluc2lkZShldikpIHsKICAgICAgICAgIGxldCBwdCA9IChnbG9iYWxUaGlzLm1vdXNlUG9zID0gbW91c2VUcmFuc2Zvcm0oZXYpKTsKICAgICAgICAgIGxldCBkaWZmID0gcHQsCiAgICAgICAgICAgIHQ7CiAgICAgICAgICBpZihwcmV2KSBkaWZmID0gcHQuZGlmZihwcmV2KTsKCiAgICAgICAgICBzdGFydCA/Pz0gdCA9IERhdGUubm93KCk7CgogICAgICAgICAgLy90cmFpbC5wdXNoKHsgLi4ucHQsIHRpbWU6IERhdGUubm93KCkgIC1zdGFydCAgfSk7CiAgICAgICAgICB0cmFpbC5wdXNoKHQgLSBzdGFydCArICcvJyArIChwcmV2ICYmIGRpZmYueCA+IDAgPyAnKycgOiAnJykgKyBkaWZmLnggKyAnLCcgKyAocHJldiAmJiBkaWZmLnkgPiAwID8gJysnIDogJycpICsgZGlmZi55KTsKCiAgICAgICAgICBsYXN0ID0gdDsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2JsYXplJywgLi4ucHQpOwogICAgICAgICAgICByYyA9IHBpeGVsc1twdC55XVtwdC54XSA+IDB4MzAgPyAwIDogUmFuZG9tQnl0ZSgpIHwgMHg4MDsKCiAgICAgICAgICAgIEJsYXplKHB0LngsIHB0LnkpOwogICAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgICAgcHJldiA9IHB0OwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIFNlbmRUcmFpbCgpIHsKICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6ICdibGF6ZScsIHN0YXJ0LCB0cmFpbDogdHJhaWwuam9pbignICcpIH0pKTsKCiAgICAgIHRyYWlsLnNwbGljZSgwLCB0cmFpbC5sZW5ndGgpOwogICAgICBzdGFydCA9IHVuZGVmaW5lZDsKICAgICAgcHJldiA9IHVuZGVmaW5lZDsKICAgIH0KICB9KSgpOwoKICBMb29wKCk7Cn0KCmRlZmluZShnbG9iYWxUaGlzLCB7IGNyb3Nza2l0LCBSR0JBLCBIU0xBLCBVdGlsLCBNYXRyaXgsIFRyYW5zZm9ybWF0aW9uTGlzdCB9KTsKZGVmaW5lKGdsb2JhbFRoaXMsIHsgV2ViU29ja2V0SXRlcmF0b3IsIFdlYlNvY2tldFVSTCwgQ3JlYXRlV2ViU29ja2V0LCBOZXdXUywgUmVjb25uZWN0aW5nV2ViU29ja2V0IH0pOwpkZWZpbmUoZ2xvYmFsVGhpcywgeyBkZWZpbmUsIGlzVW5kZWZpbmVkLCBwcm9wZXJ0aWVzLCBrZXlzIH0pOwpkZWZpbmUoZ2xvYmFsVGhpcywgeyBvbmNlLCBzdHJlYW1pZnksIHRocm90dGxlLCBkaXN0aW5jdCwgc3Vic2NyaWJlIH0pOwpkZWZpbmUoZ2xvYmFsVGhpcywgeyBJbnRlcnNlY3Rpb24sIE1hdHJpeCwgaXNSZWN0LCBSZWN0LCBTaXplLCBQb2ludCwgTGluZSwgVHJhbnNmb3JtYXRpb25MaXN0LCBWZWN0b3IgfSk7CmRlZmluZShnbG9iYWxUaGlzLCB7CiAgdGltZXIsCiAgTWFrZVVVSUQsCiAgTWFrZUNsaWVudElELAogIGlzU3RyZWFtLAogIEFjcXVpcmVSZWFkZXIsCiAgQWNxdWlyZVdyaXRlciwKICBBcnJheVdyaXRlciwKICByZWFkU3RyZWFtLAogIFBpcGVUbywKICBXcml0YWJsZVJlcGVhdGVyLAogIFdyaXRlSXRlcmF0b3IsCiAgQXN5bmNXcml0ZSwKICBBc3luY1JlYWQsCiAgUmVhZEZyb21JdGVyYXRvciwKICBXcml0ZVRvUmVwZWF0ZXIsCiAgTG9nU2luaywKICBTdHJpbmdSZWFkZXIsCiAgTGluZVJlYWRlciwKICBEZWJ1Z1RyYW5zZm9ybVN0cmVhbSwKICBDcmVhdGVXcml0YWJsZVN0cmVhbSwKICBDcmVhdGVUcmFuc2Zvcm1TdHJlYW0sCiAgUmVwZWF0ZXJTb3VyY2UsCiAgUmVwZWF0ZXJTaW5rLAogIExpbmVCdWZmZXJTdHJlYW0sCiAgVGV4dFRyYW5zZm9ybVN0cmVhbSwKICBDaHVua1JlYWRlciwKICBCeXRlUmVhZGVyLAogIFBpcGVUb1JlcGVhdGVyLAogIFJlYWRlciwKICBSZWFkQWxsLAogIFN0cmVhbVJlYWRJdGVyYXRvcgp9KTsKCmRlZmluZShnbG9iYWxUaGlzLCB7IEVsZW1lbnQsIGlzRWxlbWVudCwgU1ZHLCBSZWFjdCwgaCwgaHRtbCwgcmVuZGVyLCBGcmFnbWVudCwgQ29tcG9uZW50LCBjcmVhdGVSZWYsIHVzZVN0YXRlLCB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiwgdG9DaGlsZEFycmF5IH0pOwoKbWFpbigpOwoKZnVuY3Rpb24gZ2V0UmVjdChlbGVtKSB7CiAgcmV0dXJuIG5ldyBSZWN0KChlbGVtID8/IGRpdkVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKS5yb3VuZCgxKTsKfQoAAAAAAAAAAMI2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtyoAAAAAAAC3KgAAAAAAAAAAAAAAAPC/"
				],
				[
					987,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAASSoAAAAAAABJKgAAAAAAAAAAAAAAwHhA"
				],
				[
					1024,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAACgsAAAAAAAAKiwAAAAAAAAAAAAAAiwAAAAAAAAELAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAiwAAAAAAAAoLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1041,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFAyAAAAAAAAUTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUDIAAAAAAABQMgAAAAAAAAAAAAAAAAAA"
				],
				[
					1042,
					1,
					"left_delete",
					null,
					"AQAAAFAyAAAAAAAAUDIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAUTIAAAAAAABRMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1083,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAE8yAAAAAAAAUDIAAAAAAAAAAAAAUDIAAAAAAABUMgAAAAAAAAAAAABUMgAAAAAAAFYyAAAAAAAAAAAAAFYyAAAAAAAAVzIAAAAAAAAAAAAAVzIAAAAAAABYMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATzIAAAAAAABPMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1084,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFgyAAAAAAAAWjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWDIAAAAAAABYMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1085,
					1,
					"insert",
					{
						"characters": "tral"
					},
					"BAAAAFkyAAAAAAAAWjIAAAAAAAAAAAAAWjIAAAAAAABbMgAAAAAAAAAAAABbMgAAAAAAAFwyAAAAAAAAAAAAAFwyAAAAAAAAXTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWTIAAAAAAABZMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1086,
					1,
					"left_delete",
					null,
					"AQAAAFwyAAAAAAAAXDIAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAXTIAAAAAAABdMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1087,
					1,
					"insert",
					{
						"characters": "il.lkengt"
					},
					"CQAAAFwyAAAAAAAAXTIAAAAAAAAAAAAAXTIAAAAAAABeMgAAAAAAAAAAAABeMgAAAAAAAF8yAAAAAAAAAAAAAF8yAAAAAAAAYDIAAAAAAAAAAAAAYDIAAAAAAABhMgAAAAAAAAAAAABhMgAAAAAAAGIyAAAAAAAAAAAAAGIyAAAAAAAAYzIAAAAAAAAAAAAAYzIAAAAAAABkMgAAAAAAAAAAAABkMgAAAAAAAGUyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXDIAAAAAAABcMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1088,
					5,
					"left_delete",
					null,
					"BQAAAGQyAAAAAAAAZDIAAAAAAAABAAAAdGMyAAAAAAAAYzIAAAAAAAABAAAAZ2IyAAAAAAAAYjIAAAAAAAABAAAAbmEyAAAAAAAAYTIAAAAAAAABAAAAZWAyAAAAAAAAYDIAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAZTIAAAAAAABlMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1089,
					1,
					"insert",
					{
						"characters": "engt"
					},
					"BAAAAGAyAAAAAAAAYTIAAAAAAAAAAAAAYTIAAAAAAABiMgAAAAAAAAAAAABiMgAAAAAAAGMyAAAAAAAAAAAAAGMyAAAAAAAAZDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYDIAAAAAAABgMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1091,
					1,
					"left_delete",
					null,
					"AQAAAGQyAAAAAAAAZDIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAZTIAAAAAAABlMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1092,
					1,
					"insert",
					{
						"characters": "h)"
					},
					"AgAAAGQyAAAAAAAAZTIAAAAAAAAAAAAAZTIAAAAAAABmMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZDIAAAAAAABkMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1097,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGYyAAAAAAAAZzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZjIAAAAAAABmMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1098,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGcyAAAAAAAAaTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZzIAAAAAAABnMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1099,
					1,
					"right_delete",
					null,
					"AQAAAGgyAAAAAAAAaDIAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAaDIAAAAAAABoMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1102,
					2,
					"left_delete",
					null,
					"AgAAAGcyAAAAAAAAZzIAAAAAAAABAAAAe2YyAAAAAAAAZjIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAaDIAAAAAAABoMgAAAAAAAAAAAAAAAGtA"
				],
				[
					1108,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAGcyAAAAAAAAaTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZzIAAAAAAABnMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1112,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADQyAAAAAAAANTIAAAAAAAAAAAAANTIAAAAAAAA2MgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANDIAAAAAAAA0MgAAAAAAAAAAAAAAADJA"
				],
				[
					1114,
					1,
					"insert",
					{
						"characters": "SendTrail"
					},
					"CQAAADUyAAAAAAAANjIAAAAAAAAAAAAANjIAAAAAAAA3MgAAAAAAAAAAAAA3MgAAAAAAADgyAAAAAAAAAAAAADgyAAAAAAAAOTIAAAAAAAAAAAAAOTIAAAAAAAA6MgAAAAAAAAAAAAA6MgAAAAAAADsyAAAAAAAAAAAAADsyAAAAAAAAPDIAAAAAAAAAAAAAPDIAAAAAAAA9MgAAAAAAAAAAAAA9MgAAAAAAAD4yAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANTIAAAAAAAA1MgAAAAAAAAAAAAAAAAAA"
				],
				[
					1115,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD4yAAAAAAAAQDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPjIAAAAAAAA+MgAAAAAAAAAAAAAAAPC/"
				],
				[
					1117,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEAyAAAAAAAAQTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQDIAAAAAAABAMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1142,
					1,
					"paste",
					null,
					"AQAAAGIyAAAAAAAAjTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYjIAAAAAAABiMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1147,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ8yAAAAAAAAoDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnzIAAAAAAACfMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1148,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKAyAAAAAAAAojIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoDIAAAAAAACgMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1149,
					1,
					"right_delete",
					null,
					"AQAAAKEyAAAAAAAAoTIAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAoTIAAAAAAAChMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1151,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAPUyAAAAAAAA9jIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9TIAAAAAAAD1MgAAAAAAAAAAAAAAgGZA"
				],
				[
					1158,
					1,
					"cut",
					null,
					"AQAAAG4yAAAAAAAAbjIAAAAAAAAeAAAALy9jb25zb2xlLmxvZygnYmxhemUnLCAuLi5wdCk7",
					"AQAAAAAAAAABAAAAbjIAAAAAAACMMgAAAAAAAP///////+9/"
				],
				[
					1161,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAIMyAAAAAAAAhDIAAAAAAAAAAAAAhDIAAAAAAACGMgAAAAAAAAAAAACGMgAAAAAAAIgyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgzIAAAAAAACDMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1162,
					1,
					"paste",
					null,
					"AQAAAIgyAAAAAAAApjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiDIAAAAAAACIMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1175,
					1,
					"cut",
					null,
					"AQAAAMYyAAAAAAAAxjIAAAAAAAAwAAAAeyB0eXBlOiAnYmxhemUnLCBzdGFydCwgdHJhaWw6IHRyYWlsLmpvaW4oJyAnKSB9",
					"AQAAAAAAAAABAAAAxjIAAAAAAAD2MgAAAAAAAAAAAAAAAPC/"
				],
				[
					1176,
					1,
					"insert",
					{
						"characters": "payload"
					},
					"BwAAAMYyAAAAAAAAxzIAAAAAAAAAAAAAxzIAAAAAAADIMgAAAAAAAAAAAADIMgAAAAAAAMkyAAAAAAAAAAAAAMkyAAAAAAAAyjIAAAAAAAAAAAAAyjIAAAAAAADLMgAAAAAAAAAAAADLMgAAAAAAAMwyAAAAAAAAAAAAAMwyAAAAAAAAzTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxjIAAAAAAADGMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1178,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAAIMyAAAAAAAAhDIAAAAAAAAAAAAAhDIAAAAAAACGMgAAAAAAAAAAAACGMgAAAAAAAIgyAAAAAAAAAAAAAIgyAAAAAAAAiTIAAAAAAAAAAAAAiTIAAAAAAACKMgAAAAAAAAAAAACKMgAAAAAAAIsyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgzIAAAAAAACDMgAAAAAAAAAAAAAAYHVA"
				],
				[
					1179,
					1,
					"insert",
					{
						"characters": " l"
					},
					"AgAAAIsyAAAAAAAAjDIAAAAAAAAAAAAAjDIAAAAAAACNMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAizIAAAAAAACLMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1180,
					5,
					"left_delete",
					null,
					"BQAAAIwyAAAAAAAAjDIAAAAAAAABAAAAbIsyAAAAAAAAizIAAAAAAAABAAAAIIoyAAAAAAAAijIAAAAAAAABAAAAdIkyAAAAAAAAiTIAAAAAAAABAAAAZYgyAAAAAAAAiDIAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAjTIAAAAAAACNMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1181,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAIgyAAAAAAAAiTIAAAAAAAAAAAAAiTIAAAAAAACKMgAAAAAAAAAAAACKMgAAAAAAAIsyAAAAAAAAAAAAAIsyAAAAAAAAjDIAAAAAAAAAAAAAjDIAAAAAAACNMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiDIAAAAAAACIMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1182,
					1,
					"insert",
					{
						"characters": " paylod"
					},
					"BwAAAI0yAAAAAAAAjjIAAAAAAAAAAAAAjjIAAAAAAACPMgAAAAAAAAAAAACPMgAAAAAAAJAyAAAAAAAAAAAAAJAyAAAAAAAAkTIAAAAAAAAAAAAAkTIAAAAAAACSMgAAAAAAAAAAAACSMgAAAAAAAJMyAAAAAAAAAAAAAJMyAAAAAAAAlDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjTIAAAAAAACNMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1183,
					1,
					"left_delete",
					null,
					"AQAAAJMyAAAAAAAAkzIAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAlDIAAAAAAACUMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1184,
					1,
					"insert",
					{
						"characters": "ad=)"
					},
					"BAAAAJMyAAAAAAAAlDIAAAAAAAAAAAAAlDIAAAAAAACVMgAAAAAAAAAAAACVMgAAAAAAAJYyAAAAAAAAAAAAAJYyAAAAAAAAlzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkzIAAAAAAACTMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1185,
					1,
					"left_delete",
					null,
					"AQAAAJYyAAAAAAAAljIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAlzIAAAAAAACXMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1186,
					1,
					"paste",
					null,
					"AQAAAJYyAAAAAAAAxjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAljIAAAAAAACWMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1187,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMYyAAAAAAAAxzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxjIAAAAAAADGMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1191,
					2,
					"right_delete",
					null,
					"AgAAAMwyAAAAAAAAzDIAAAAAAAABAAAAL8wyAAAAAAAAzDIAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAzDIAAAAAAADMMgAAAAAAAAAAAAAAAEJA"
				],
				[
					1194,
					5,
					"right_delete",
					null,
					"BQAAANkyAAAAAAAA2TIAAAAAAAABAAAAYtkyAAAAAAAA2TIAAAAAAAABAAAAbNkyAAAAAAAA2TIAAAAAAAABAAAAYdkyAAAAAAAA2TIAAAAAAAABAAAAetkyAAAAAAAA2TIAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA2TIAAAAAAADZMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1195,
					1,
					"insert",
					{
						"characters": "SE"
					},
					"AgAAANkyAAAAAAAA2jIAAAAAAAAAAAAA2jIAAAAAAADbMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2TIAAAAAAADZMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1196,
					1,
					"left_delete",
					null,
					"AQAAANoyAAAAAAAA2jIAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAA2zIAAAAAAADbMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1197,
					1,
					"insert",
					{
						"characters": "endTrail,"
					},
					"CQAAANoyAAAAAAAA2zIAAAAAAAAAAAAA2zIAAAAAAADcMgAAAAAAAAAAAADcMgAAAAAAAN0yAAAAAAAAAAAAAN0yAAAAAAAA3jIAAAAAAAAAAAAA3jIAAAAAAADfMgAAAAAAAAAAAADfMgAAAAAAAOAyAAAAAAAAAAAAAOAyAAAAAAAA4TIAAAAAAAAAAAAA4TIAAAAAAADiMgAAAAAAAAAAAADiMgAAAAAAAOMyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2jIAAAAAAADaMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1198,
					1,
					"left_delete",
					null,
					"AQAAAOIyAAAAAAAA4jIAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA4zIAAAAAAADjMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1200,
					1,
					"insert",
					{
						"characters": ",payload);"
					},
					"CgAAAOMyAAAAAAAA5DIAAAAAAAAAAAAA5DIAAAAAAADlMgAAAAAAAAAAAADlMgAAAAAAAOYyAAAAAAAAAAAAAOYyAAAAAAAA5zIAAAAAAAAAAAAA5zIAAAAAAADoMgAAAAAAAAAAAADoMgAAAAAAAOkyAAAAAAAAAAAAAOkyAAAAAAAA6jIAAAAAAAAAAAAA6jIAAAAAAADrMgAAAAAAAAAAAADrMgAAAAAAAOwyAAAAAAAAAAAAAOwyAAAAAAAA7TIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4zIAAAAAAADjMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1202,
					1,
					"cut",
					null,
					"AQAAAO0yAAAAAAAA7TIAAAAAAAAJAAAALCAuLi5wdCk7",
					"AQAAAAAAAAABAAAA7TIAAAAAAAD2MgAAAAAAAP///////+9/"
				],
				[
					1310,
					1,
					"cut",
					null,
					"AQAAAC4yAAAAAAAALjIAAAAAAAAGAAAAICAgIH0K",
					"AQAAAAAAAAABAAAALjIAAAAAAAA0MgAAAAAAAAAAAAAAAAAA"
				],
				[
					1314,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHAzAAAAAAAAcTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcDMAAAAAAABwMwAAAAAAAAAAAAAAAAAA"
				],
				[
					1316,
					1,
					"paste",
					null,
					"AQAAAHAzAAAAAAAAdjMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcDMAAAAAAABwMwAAAAAAAAAAAAAAAAAA"
				],
				[
					1319,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAdjMAAAAAAAB2MwAAAAAAAAAAAAAAAPC/"
				],
				[
					1359,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALEvAAAAAAAAsi8AAAAAAAAAAAAAsi8AAAAAAACyLwAAAAAAAAMAAAAgLy8",
					"AQAAAAAAAAABAAAAtC8AAAAAAACxLwAAAAAAAAAAAAAAAPC/"
				],
				[
					1363,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAO0vAAAAAAAA7i8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7S8AAAAAAADtLwAAAAAAAAAAAAAAAPC/"
				],
				[
					1364,
					1,
					"left_delete",
					null,
					"AQAAAO0vAAAAAAAA7S8AAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA7i8AAAAAAADuLwAAAAAAAAAAAAAAAPC/"
				],
				[
					1365,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAAO0vAAAAAAAA7y8AAAAAAAAAAAAA7i8AAAAAAADwLwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7S8AAAAAAADtLwAAAAAAAAAAAAAAAPC/"
				],
				[
					1366,
					2,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"BAAAAO4vAAAAAAAA7i8AAAAAAAABAAAAKO4vAAAAAAAA7i8AAAAAAAABAAAAKe0vAAAAAAAA7S8AAAAAAAABAAAAKO0vAAAAAAAA7S8AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA7y8AAAAAAADvLwAAAAAAAAAAAAAAAPC/"
				],
				[
					1367,
					1,
					"left_delete",
					null,
					"AQAAAOwvAAAAAAAA7C8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA7S8AAAAAAADtLwAAAAAAAAAAAAAAAPC/"
				],
				[
					1368,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOwvAAAAAAAA7S8AAAAAAAAAAAAA7S8AAAAAAADuLwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7C8AAAAAAADsLwAAAAAAAAAAAAAAAPC/"
				],
				[
					1375,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAPIxAAAAAAAA9DEAAAAAAAAAAAAA4TEAAAAAAADjMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4TEAAAAAAADyMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1404,
					1,
					"indent",
					null,
					"AQAAACcyAAAAAAAAKTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJzIAAAAAAABTMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1425,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAOExAAAAAAAA4jEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4TEAAAAAAADhMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1426,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOIxAAAAAAAA4zEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4jEAAAAAAADiMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1427,
					2,
					"left_delete",
					null,
					"AgAAAOIxAAAAAAAA4jEAAAAAAAABAAAAIOExAAAAAAAA4TEAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAA4zEAAAAAAADjMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1428,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOExAAAAAAAA4jEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4TEAAAAAAADhMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1429,
					1,
					"insert",
					{
						"characters": " [...trail]"
					},
					"CwAAAOIxAAAAAAAA4zEAAAAAAAAAAAAA4zEAAAAAAADkMQAAAAAAAAAAAADkMQAAAAAAAOUxAAAAAAAAAAAAAOUxAAAAAAAA5jEAAAAAAAAAAAAA5jEAAAAAAADnMQAAAAAAAAAAAADnMQAAAAAAAOgxAAAAAAAAAAAAAOgxAAAAAAAA6TEAAAAAAAAAAAAA6TEAAAAAAADqMQAAAAAAAAAAAADqMQAAAAAAAOsxAAAAAAAAAAAAAOsxAAAAAAAA7DEAAAAAAAAAAAAA7DEAAAAAAADtMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4jEAAAAAAADiMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1431,
					1,
					"cut",
					null,
					"AQAAAO0xAAAAAAAA7TEAAAAAAAAVAAAALyo6IHRyYWlsLmpvaW4oJyAnKSov",
					"AQAAAAAAAAABAAAA7TEAAAAAAAACMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1440,
					1,
					"insert",
					{
						"characters": ".repoa"
					},
					"BgAAAEkyAAAAAAAASjIAAAAAAAAAAAAASjIAAAAAAABLMgAAAAAAAAAAAABLMgAAAAAAAEwyAAAAAAAAAAAAAEwyAAAAAAAATTIAAAAAAAAAAAAATTIAAAAAAABOMgAAAAAAAAAAAABOMgAAAAAAAE8yAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASTIAAAAAAABJMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1441,
					2,
					"left_delete",
					null,
					"AgAAAE4yAAAAAAAATjIAAAAAAAABAAAAYU0yAAAAAAAATTIAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAATzIAAAAAAABPMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1442,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAE0yAAAAAAAATjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATTIAAAAAAABNMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1443,
					1,
					"left_delete",
					null,
					"AQAAAE0yAAAAAAAATTIAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAATjIAAAAAAABOMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1444,
					1,
					"insert",
					{
						"characters": "lace"
					},
					"BAAAAE0yAAAAAAAATjIAAAAAAAAAAAAATjIAAAAAAABPMgAAAAAAAAAAAABPMgAAAAAAAFAyAAAAAAAAAAAAAFAyAAAAAAAAUTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATTIAAAAAAABNMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1445,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFEyAAAAAAAAUzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUTIAAAAAAABRMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1446,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAFIyAAAAAAAAUzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUjIAAAAAAABSMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1447,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAFMyAAAAAAAAVTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUzIAAAAAAABTMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1448,
					1,
					"insert",
					{
						"characters": "/g,"
					},
					"AwAAAFQyAAAAAAAAVTIAAAAAAAAAAAAAVTIAAAAAAABWMgAAAAAAAAAAAABWMgAAAAAAAFcyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVDIAAAAAAABUMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1449,
					1,
					"insert",
					{
						"characters": " '')"
					},
					"BAAAAFcyAAAAAAAAWDIAAAAAAAAAAAAAWDIAAAAAAABZMgAAAAAAAAAAAABZMgAAAAAAAFoyAAAAAAAAAAAAAFoyAAAAAAAAWzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzIAAAAAAABXMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1450,
					2,
					"right_delete",
					null,
					"AgAAAFsyAAAAAAAAWzIAAAAAAAABAAAAIlsyAAAAAAAAWzIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAWzIAAAAAAABbMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1472,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAFgyAAAAAAAAWTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWDIAAAAAAABYMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1474,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAFoyAAAAAAAAWzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWjIAAAAAAABaMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1475,
					1,
					"right_delete",
					null,
					"AQAAAFsyAAAAAAAAWzIAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAWzIAAAAAAABbMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1487,
					1,
					"left_delete",
					null,
					"AQAAAEkyAAAAAAAASTIAAAAAAAATAAAALnJlcGxhY2UoLyIvZywgIiciKQ",
					"AQAAAAAAAAABAAAASTIAAAAAAABcMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1490,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAASTIAAAAAAABJMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1506,
					1,
					"insert",
					{
						"characters": "fuin"
					},
					"BQAAALgGAAAAAAAAuQYAAAAAAAAAAAAAuQYAAAAAAAC5BgAAAAAAAAUAAABjb25zdLkGAAAAAAAAugYAAAAAAAAAAAAAugYAAAAAAAC7BgAAAAAAAAAAAAC7BgAAAAAAALwGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQYAAAAAAAC4BgAAAAAAAAAAAAAAAAAA"
				],
				[
					1507,
					2,
					"left_delete",
					null,
					"AgAAALsGAAAAAAAAuwYAAAAAAAABAAAAbroGAAAAAAAAugYAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAvAYAAAAAAAC8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1508,
					1,
					"insert",
					{
						"characters": "nction"
					},
					"BgAAALoGAAAAAAAAuwYAAAAAAAAAAAAAuwYAAAAAAAC8BgAAAAAAAAAAAAC8BgAAAAAAAL0GAAAAAAAAAAAAAL0GAAAAAAAAvgYAAAAAAAAAAAAAvgYAAAAAAAC/BgAAAAAAAAAAAAC/BgAAAAAAAMAGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugYAAAAAAAC6BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1510,
					1,
					"right_delete",
					null,
					"AQAAAM4GAAAAAAAAzgYAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAzgYAAAAAAADOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1512,
					2,
					"left_delete",
					null,
					"AgAAAOQGAAAAAAAA5AYAAAAAAAABAAAAPuMGAAAAAAAA4wYAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAA5QYAAAAAAADlBgAAAAAAAP///////+9/"
				],
				[
					1513,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMGAAAAAAAA5AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wYAAAAAAADjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1514,
					1,
					"wrap_block",
					{
						"begin": "{",
						"end": "}"
					},
					"AgAAAOQGAAAAAAAA5QYAAAAAAAAAAAAAdwcAAAAAAAB5BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AYAAAAAAADkBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1515,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAOUGAAAAAAAA5gYAAAAAAAAAAAAA5gYAAAAAAADoBgAAAAAAAAAAAADoBgAAAAAAAOkGAAAAAAAAAAAAAOkGAAAAAAAA6gYAAAAAAAAAAAAA6gYAAAAAAADrBgAAAAAAAAAAAADrBgAAAAAAAOwGAAAAAAAAAAAAAOwGAAAAAAAA7QYAAAAAAAAAAAAA7QYAAAAAAADuBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QYAAAAAAADlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1516,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO4GAAAAAAAA7wYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gYAAAAAAADuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1517,
					2,
					"right_delete",
					null,
					"AgAAAO8GAAAAAAAA7wYAAAAAAAABAAAACu8GAAAAAAAA7wYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA7wYAAAAAAADvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1520,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAEYGAAAAAAAARwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgYAAAAAAABGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1521,
					1,
					"left_delete",
					null,
					"AQAAAEYGAAAAAAAARgYAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAARwYAAAAAAABHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1522,
					1,
					"insert",
					{
						"characters": "function"
					},
					"CAAAAEYGAAAAAAAARwYAAAAAAAAAAAAARwYAAAAAAABIBgAAAAAAAAAAAABIBgAAAAAAAEkGAAAAAAAAAAAAAEkGAAAAAAAASgYAAAAAAAAAAAAASgYAAAAAAABLBgAAAAAAAAAAAABLBgAAAAAAAEwGAAAAAAAAAAAAAEwGAAAAAAAATQYAAAAAAAAAAAAATQYAAAAAAABOBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgYAAAAAAABGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1523,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE4GAAAAAAAATwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgYAAAAAAABOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1524,
					5,
					"right_delete",
					null,
					"BQAAAE8GAAAAAAAATwYAAAAAAAABAAAAY08GAAAAAAAATwYAAAAAAAABAAAAb08GAAAAAAAATwYAAAAAAAABAAAAbk8GAAAAAAAATwYAAAAAAAABAAAAc08GAAAAAAAATwYAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAATwYAAAAAAABPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1526,
					1,
					"right_delete",
					null,
					"AQAAAFkGAAAAAAAAWQYAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAWQYAAAAAAABZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1537,
					2,
					"left_delete",
					null,
					"AgAAAG8GAAAAAAAAbwYAAAAAAAABAAAAPm4GAAAAAAAAbgYAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAcAYAAAAAAABwBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1538,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAG4GAAAAAAAAbwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgYAAAAAAABuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1539,
					1,
					"left_delete",
					null,
					"AQAAAG4GAAAAAAAAbgYAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAbwYAAAAAAABvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1540,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAG4GAAAAAAAAcAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgYAAAAAAABuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1541,
					1,
					"insert",
					{
						"characters": " return"
					},
					"BwAAAG8GAAAAAAAAcAYAAAAAAAAAAAAAcAYAAAAAAABxBgAAAAAAAAAAAABxBgAAAAAAAHIGAAAAAAAAAAAAAHIGAAAAAAAAcwYAAAAAAAAAAAAAcwYAAAAAAAB0BgAAAAAAAAAAAAB0BgAAAAAAAHUGAAAAAAAAAAAAAHUGAAAAAAAAdgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwYAAAAAAABvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1542,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHYGAAAAAAAAdwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgYAAAAAAAB2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1543,
					2,
					"right_delete",
					null,
					"AgAAAHcGAAAAAAAAdwYAAAAAAAABAAAAfXcGAAAAAAAAdwYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAdwYAAAAAAAB3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1545,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAMAGAAAAAAAAwQYAAAAAAAAAAAAAwQYAAAAAAADCBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAYAAAAAAADABgAAAAAAAP///////+9/"
				],
				[
					1556,
					1,
					"cut",
					null,
					"AQAAAOQEAAAAAAAA5AQAAAAAAACoAgAAZnVuY3Rpb24gTmV3V1MoKSB7CiAgbGV0IHVybCA9IFdlYlNvY2tldFVSTCgnL3dzJywgeyBtaXJyb3I6IGN1cnJlbnRGaWxlIH0pOwogIGxldCB3cyA9IG5ldyBSZWNvbm5lY3RpbmdXZWJTb2NrZXQodXJsLCAnbHdzLW1pcnJvci1wcm90b2NvbCcpOwogIChhc3luYyBmdW5jdGlvbigpIHsKICAgIGZvciBhd2FpdChsZXQgY2h1bmsgb2Ygd3MpIHsKICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGNodW5rKTsKCiAgICAgIGlmKGRhdGEuY2lkICE9IGdsb2JhbFRoaXMuY2lkKSBjb25zb2xlLmxvZygnV1MgcmVjZWl2ZTonLCBkYXRhKTsKICAgIH0KICB9KSgpOwogIHJldHVybiAoZ2xvYmFsVGhpcy53cyA9IHdzKTsKfQoKZnVuY3Rpb24gIE1ha2VVVUlEICAocm5nID0gTWF0aC5yYW5kb20pIHsgcmV0dXJuIFs4LCA0LCA0LCA0LCAxMl0ubWFwKG4gPT4gcmFuZFN0cihuLCAnMDEyMzQ1Njc4OWFiY2RlZicpLCBybmcpLmpvaW4oJy0nKTsgfQpmdW5jdGlvbiBNYWtlQ2xpZW50SUQgIChybmcgPSBNYXRoLnJhbmRvbSkgIHsKICByZXR1cm4gIFs0LCA0LCA0LCA0XQogICAgLm1hcChuID0+IHJhbmRTdHIobiwgWydBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicsICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicsICcuLSQnXVtyYW5kSW50KDAsIDMpXSksIHJuZykKICAgIC5qb2luKCcnKTsKfQo",
					"AQAAAAAAAAABAAAA5AQAAAAAAACMBwAAAAAAAAAAAAAAAAAA"
				],
				[
					1565,
					1,
					"paste",
					null,
					"AQAAAN41AAAAAAAAhjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3jUAAAAAAADeNQAAAAAAAAAAAAAAAAAA"
				],
				[
					1568,
					1,
					"cut",
					null,
					"AQAAAHg1AAAAAAAAeDUAAAAAAAAOAwAACmZ1bmN0aW9uIGdldFJlY3QoZWxlbSkgewogIHJldHVybiBuZXcgUmVjdCgoZWxlbSA/PyBkaXZFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkucm91bmQoMSk7Cn0KZnVuY3Rpb24gTmV3V1MoKSB7CiAgbGV0IHVybCA9IFdlYlNvY2tldFVSTCgnL3dzJywgeyBtaXJyb3I6IGN1cnJlbnRGaWxlIH0pOwogIGxldCB3cyA9IG5ldyBSZWNvbm5lY3RpbmdXZWJTb2NrZXQodXJsLCAnbHdzLW1pcnJvci1wcm90b2NvbCcpOwogIChhc3luYyBmdW5jdGlvbigpIHsKICAgIGZvciBhd2FpdChsZXQgY2h1bmsgb2Ygd3MpIHsKICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGNodW5rKTsKCiAgICAgIGlmKGRhdGEuY2lkICE9IGdsb2JhbFRoaXMuY2lkKSBjb25zb2xlLmxvZygnV1MgcmVjZWl2ZTonLCBkYXRhKTsKICAgIH0KICB9KSgpOwogIHJldHVybiAoZ2xvYmFsVGhpcy53cyA9IHdzKTsKfQoKZnVuY3Rpb24gIE1ha2VVVUlEICAocm5nID0gTWF0aC5yYW5kb20pIHsgcmV0dXJuIFs4LCA0LCA0LCA0LCAxMl0ubWFwKG4gPT4gcmFuZFN0cihuLCAnMDEyMzQ1Njc4OWFiY2RlZicpLCBybmcpLmpvaW4oJy0nKTsgfQpmdW5jdGlvbiBNYWtlQ2xpZW50SUQgIChybmcgPSBNYXRoLnJhbmRvbSkgIHsKICByZXR1cm4gIFs0LCA0LCA0LCA0XQogICAgLm1hcChuID0+IHJhbmRTdHIobiwgWydBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicsICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicsICcuLSQnXVtyYW5kSW50KDAsIDMpXSksIHJuZykKICAgIC5qb2luKCcnKTsKfQo",
					"AQAAAAAAAAABAAAAeDUAAAAAAACGOAAAAAAAAAAAAAAAAPC/"
				],
				[
					1573,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPowAAAAAAAA+zAAAAAAAAAAAAAA+zAAAAAAAAD8MAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+jAAAAAAAAD6MAAAAAAAAAAAAAAAAPC/"
				],
				[
					1574,
					1,
					"paste",
					null,
					"AQAAAPwwAAAAAAAACjQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/DAAAAAAAAD8MAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/dom.js",
			"settings":
			{
				"buffer_size": 6598,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					21,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAABgIAAAAAAAAGAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/dom/element.js",
			"settings":
			{
				"buffer_size": 36040,
				"line_ending": "Unix"
			}
		},
		{
			"file": "debugger-server.js",
			"settings":
			{
				"buffer_size": 15241,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADINAAAAAAAANA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMg0AAAAAAAAyDQAAAAAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAADINAAAAAAAAMg0AAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAANA0AAAAAAAA0DQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"",
					null,
					"AQAAAFs6AAAAAAAAXzoAAAAAAAAEAAAAOTAwMA",
					"AQAAAAAAAAABAAAAWzoAAAAAAABfOgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+TgAAAAAAAD5OAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+TgAAAAAAAD5OAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHAaAAAAAAAAcRoAAAAAAAAAAAAAcRoAAAAAAAByGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcBoAAAAAAABwGgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAO4aAAAAAAAA7xoAAAAAAAAAAAAA7xoAAAAAAADwGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7hoAAAAAAADuGgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"",
					null,
					"AQAAAKwbAAAAAAAAxRsAAAAAAAAXAAAAICAgICAgICAgICAgY29uc29sZS5sb2c",
					"AQAAAAAAAAABAAAArBsAAAAAAADDGwAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"",
					null,
					"AQAAAGUdAAAAAAAAgx0AAAAAAAAcAAAACiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZw",
					"AQAAAAAAAAABAAAAZR0AAAAAAACBHQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAKI4AAAAAAAAozgAAAAAAAAAAAAAozgAAAAAAACjOAAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAAojgAAAAAAACjOAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKM4AAAAAAAApDgAAAAAAAAAAAAApDgAAAAAAACoOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAozgAAAAAAACjOAAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					3,
					"left_delete",
					null,
					"AwAAAKY4AAAAAAAApjgAAAAAAAABAAAAIKQ4AAAAAAAApDgAAAAAAAACAAAAICCjOAAAAAAAAKM4AAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAApzgAAAAAAACnOAAAAAAAAAAAAAAAADtA"
				],
				[
					115,
					1,
					"right_delete",
					null,
					"AQAAAKM4AAAAAAAAozgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAozgAAAAAAACjOAAAAAAAAAAAAAAAgI9A"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABw0AAAAAAAAHTQAAAAAAAAAAAAAHTQAAAAAAAAdNAAAAAAAAAQAAAAvKiAg",
					"AQAAAAAAAAABAAAAIDQAAAAAAAAcNAAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOI1AAAAAAAA4zUAAAAAAAAAAAAA4zUAAAAAAADjNQAAAAAAAAIAAAAqLw",
					"AQAAAAAAAAABAAAA5DUAAAAAAADiNQAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAOM1AAAAAAAA5TUAAAAAAAAAAAAAHTQAAAAAAAAfNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4zUAAAAAAAAdNAAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "\n\nlet"
					},
					"BQAAABk0AAAAAAAAGjQAAAAAAAAAAAAAGjQAAAAAAAAbNAAAAAAAAAAAAAAbNAAAAAAAABw0AAAAAAAAAAAAABw0AAAAAAAAHTQAAAAAAAAAAAAAHTQAAAAAAAAeNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGTQAAAAAAAAZNAAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": " repl=new"
					},
					"CQAAAB40AAAAAAAAHzQAAAAAAAAAAAAAHzQAAAAAAAAgNAAAAAAAAAAAAAAgNAAAAAAAACE0AAAAAAAAAAAAACE0AAAAAAAAIjQAAAAAAAAAAAAAIjQAAAAAAAAjNAAAAAAAAAAAAAAjNAAAAAAAACQ0AAAAAAAAAAAAACQ0AAAAAAAAJTQAAAAAAAAAAAAAJTQAAAAAAAAmNAAAAAAAAAAAAAAmNAAAAAAAACc0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHjQAAAAAAAAeNAAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": " R"
					},
					"AgAAACc0AAAAAAAAKDQAAAAAAAAAAAAAKDQAAAAAAAApNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJzQAAAAAAAAnNAAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					5,
					"left_delete",
					null,
					"BQAAACg0AAAAAAAAKDQAAAAAAAABAAAAUic0AAAAAAAAJzQAAAAAAAABAAAAICY0AAAAAAAAJjQAAAAAAAABAAAAdyU0AAAAAAAAJTQAAAAAAAABAAAAZSQ0AAAAAAAAJDQAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAKTQAAAAAAAApNAAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "StartREPL"
					},
					"CQAAACQ0AAAAAAAAJTQAAAAAAAAAAAAAJTQAAAAAAAAmNAAAAAAAAAAAAAAmNAAAAAAAACc0AAAAAAAAAAAAACc0AAAAAAAAKDQAAAAAAAAAAAAAKDQAAAAAAAApNAAAAAAAAAAAAAApNAAAAAAAACo0AAAAAAAAAAAAACo0AAAAAAAAKzQAAAAAAAAAAAAAKzQAAAAAAAAsNAAAAAAAAAAAAAAsNAAAAAAAAC00AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJDQAAAAAAAAkNAAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC00AAAAAAAALzQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALTQAAAAAAAAtNAAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAC80AAAAAAAAMDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALzQAAAAAAAAvNAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"left_delete",
					null,
					"AQAAABk0AAAAAAAAGTQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAGjQAAAAAAAAaNAAAAAAAAAAAAAAAoGdA"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABo0AAAAAAAAHDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGjQAAAAAAAAaNAAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADQ0AAAAAAAANTQAAAAAAAAAAAAANTQAAAAAAAA3NAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANDQAAAAAAAA0NAAAAAAAAAAAAAAAADJA"
				],
				[
					227,
					1,
					"cut",
					null,
					"AQAAABo0AAAAAAAAGjQAAAAAAAAYAAAAICBsZXQgcmVwbD1TdGFydFJFUEwoKTsK",
					"AQAAAAAAAAABAAAAGjQAAAAAAAAyNAAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAADM5AAAAAAAANDkAAAAAAAAAAAAANDkAAAAAAAA2OQAAAAAAAAAAAAA2OQAAAAAAADc5AAAAAAAAAAAAADc5AAAAAAAAOTkAAAAAAAAAAAAANDkAAAAAAAA0OQAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAMzkAAAAAAAAzOQAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"paste",
					null,
					"AQAAADc5AAAAAAAATzkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANzkAAAAAAAA3OQAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAATzkAAAAAAABPOQAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": "define(globl"
					},
					"DAAAADM5AAAAAAAANDkAAAAAAAAAAAAANDkAAAAAAAA1OQAAAAAAAAAAAAA1OQAAAAAAADY5AAAAAAAAAAAAADY5AAAAAAAANzkAAAAAAAAAAAAANzkAAAAAAAA4OQAAAAAAAAAAAAA4OQAAAAAAADk5AAAAAAAAAAAAADk5AAAAAAAAOjkAAAAAAAAAAAAAOjkAAAAAAAA7OQAAAAAAAAAAAAA7OQAAAAAAADw5AAAAAAAAAAAAADw5AAAAAAAAPTkAAAAAAAAAAAAAPTkAAAAAAAA+OQAAAAAAAAAAAAA+OQAAAAAAAD85AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMzkAAAAAAAAzOQAAAAAAAAAAAAAAADJA"
				],
				[
					281,
					1,
					"left_delete",
					null,
					"AQAAAD45AAAAAAAAPjkAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAPzkAAAAAAAA/OQAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": "al"
					},
					"AgAAAD45AAAAAAAAPzkAAAAAAAAAAAAAPzkAAAAAAABAOQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPjkAAAAAAAA+OQAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					2,
					"left_delete",
					null,
					"AgAAAD85AAAAAAAAPzkAAAAAAAABAAAAbD45AAAAAAAAPjkAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAQDkAAAAAAABAOQAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": "al"
					},
					"AgAAAD45AAAAAAAAPzkAAAAAAAAAAAAAPzkAAAAAAABAOQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPjkAAAAAAAA+OQAAAAAAAAAAAAAAAPC/"
				],
				[
					285,
					11,
					"left_delete",
					null,
					"CwAAAD85AAAAAAAAPzkAAAAAAAABAAAAbD45AAAAAAAAPjkAAAAAAAABAAAAYT05AAAAAAAAPTkAAAAAAAABAAAAYjw5AAAAAAAAPDkAAAAAAAABAAAAbzs5AAAAAAAAOzkAAAAAAAABAAAAbDo5AAAAAAAAOjkAAAAAAAABAAAAZzk5AAAAAAAAOTkAAAAAAAABAAAAKDg5AAAAAAAAODkAAAAAAAABAAAAZTc5AAAAAAAANzkAAAAAAAABAAAAbjY5AAAAAAAANjkAAAAAAAABAAAAaTU5AAAAAAAANTkAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAQDkAAAAAAABAOQAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					2,
					"left_delete",
					null,
					"AgAAADQ5AAAAAAAANDkAAAAAAAABAAAAZTM5AAAAAAAAMzkAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAANTkAAAAAAAA1OQAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADM5AAAAAAAANDkAAAAAAAAAAAAANDkAAAAAAAA1OQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMzkAAAAAAAAzOQAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					2,
					"left_delete",
					null,
					"AgAAAB00AAAAAAAAHTQAAAAAAAABAAAAKhw0AAAAAAAAHDQAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAHjQAAAAAAAAeNAAAAAAAAAAAAAAAAEJA"
				],
				[
					295,
					1,
					"cut",
					null,
					"AQAAABo0AAAAAAAAGjQAAAAAAADLAQAAICBkZWZpbmUoZ2xvYmFsVGhpcywgewogICAgZ2V0IGNvbm5lY3Rpb25zKCkgewogICAgICByZXR1cm4gWy4uLmdsb2JhbFRoaXMuc29ja2V0c107CiAgICB9LAogICAgZ2V0IHNvY2tsaXN0KCkgewogICAgICByZXR1cm4gWy4uLmdsb2JhbFRoaXMuc29ja2V0c107CiAgICB9LAogICAgbmV0OiB7IHNldExvZywgTExMX1VTRVIsIExMTF9OT1RJQ0UsIExMTF9XQVJOLCBjbGllbnQsIHNlcnZlciB9LAogICAgU3RhcnREZWJ1Z2dlciwKICAgIENvbm5lY3REZWJ1Z2dlciwKICAgIERlYnVnZ2VyUHJvdG9jb2wsCiAgICByZXBsOiBTdGFydFJFUEwoKSwKICAgIGRhZW1vbigpIHsKICAgICAgcmVwbC5zdG9wKCk7CiAgICAgIHN0ZC5wdXRzKCdcbmRldGFjaGluZy4uLicpOwogICAgICBkYWVtb24oMSwgMCk7CiAgICAgIHN0ZC5wdXRzKCcgUElEICcgKyBnZXRwaWQoKSArICdcbicpOwogICAgfQogIH0pOwogKi8K",
					"AQAAAAAAAAABAAAAGjQAAAAAAADlNQAAAAAAAAAAAAAAAAAA"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGM3AAAAAAAAZDcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYzcAAAAAAABjNwAAAAAAAAAAAAAAAAAA"
				],
				[
					300,
					1,
					"paste",
					null,
					"AQAAAGQ3AAAAAAAALzkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZDcAAAAAAABkNwAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					2,
					"left_delete",
					null,
					"AgAAAC05AAAAAAAALTkAAAAAAAABAAAALyw5AAAAAAAALDkAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAALjkAAAAAAAAuOQAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAsBwAAAAAAACwHAAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAsBwAAAAAAACwHAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "debugger-client.js",
			"settings":
			{
				"buffer_size": 14360,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "draw.html",
			"settings":
			{
				"buffer_size": 500,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 4708 files for \"^js_lexer_constructor\" (regex, case sensitive)\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c:\n  632  \n  633  JSValue\n  634: js_lexer_constructor(JSContext* ctx, JSValueConst new_target, int argc, JSValueConst argv[]) {\n  635    JSValue proto, ret;\n  636    Lexer* lex;\n\n1 match in 1 file\n\n\nSearching 4708 files for \"js_is_arraybuffer\" (regex, case sensitive)\n\n~/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c:\n  769    }\n  770  \n  771:   if(js_is_arraybuffer(ctx, value)) {\n  772      ret.value = JS_DupValue(ctx, value);\n  773      ret.data = JS_GetArrayBuffer(ctx, &ret.size, ret.value);\n  ...\n  836  \n  837  BOOL\n  838: js_is_arraybuffer(JSContext* ctx, JSValueConst value) {\n  839    if(JS_IsObject(value)) {\n  840      size_t len;\n\n~/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.h:\n  178  JSBuffer js_input_args(JSContext*, int argc, JSValueConst argv[]);\n  179  int js_buffer_fromargs(JSContext*, int argc, JSValueConst argv[], JSBuffer* buf);\n  180: BOOL js_is_arraybuffer(JSContext*, JSValueConst value);\n  181  BOOL js_is_dataview(JSContext*, JSValueConst value);\n  182  BOOL js_is_typedarray(JSContext*, JSValueConst value);\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c:\n  172    //  JSValue arraybuffer_ctor = js_global_get_str(ctx, \"ArrayBuffer\");\n  173  \n  174:   if(js_value_isclass(ctx, argv[0], JS_CLASS_ARRAY_BUFFER) || js_is_arraybuffer(ctx, argv[0]) /* || JS_IsInstanceOf(ctx, argv[0], arraybuffer_ctor)*/) {\n  175      uint8_t* data;\n  176      size_t len;\n  ...\n  215    char buf[128];\n  216  \n  217:   if(js_is_arraybuffer(ctx, argv[0]) || js_is_sharedarraybuffer(ctx, argv[0])) {\n  218      size_t len;\n  219      ptr = JS_GetArrayBuffer(ctx, &len, argv[0]);\n  ...\n  326    uint64_t newlen;\n  327  \n  328:   if(!js_is_arraybuffer(ctx, argv[0]))\n  329      return JS_ThrowTypeError(ctx, \"argument 1 must be an ArrayBuffer\");\n  330  \n  ...\n 1918      case IS_UNDEFINED: r = JS_IsUndefined(arg); break;\n 1919      case IS_UNINITIALIZED: r = JS_IsUninitialized(arg); break;\n 1920:     case IS_ARRAYBUFFER: r = js_is_arraybuffer(ctx, arg); break;\n 1921    }\n 1922    if(r == -1)\n ....\n 1935    }\n 1936  \n 1937:   if(js_is_arraybuffer(ctx, argv[0])) {\n 1938      InputBuffer buf = js_output_args(ctx, argc, argv);\n 1939      uint32_t count = 0, reclen;\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c:\n  291      return JS_EXCEPTION;\n  292  \n  293:   if(argc < 1 || !js_is_arraybuffer(ctx, argv[0])) {\n  294      void* data;\n  295      size_t size;\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c:\n  142  js_mmap_tostring(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst argv[]) {\n  143    JSValue ret = JS_UNDEFINED;\n  144:   if(js_is_arraybuffer(ctx, argv[0])) {\n  145      uint8_t* data;\n  146      size_t len;\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c:\n  518      dbuf_putstr(buf, \"new Uint8Array([\");\n  519    else {\n  520:     if(js_is_arraybuffer(ctx, value))\n  521        dbuf_putstr(buf, \"ArrayBuffer\");\n  522      else if(js_is_sharedarraybuffer(ctx, value))\n  ...\n  873      int32_t d = depth > 2000000000 ? INT32_MAX - depth : depth;\n  874  \n  875:     // if(!js_is_arraybuffer(ctx, value))\n  876      deepest = property_enumeration_deepest(ctx, value, opts->compact + 1);\n  877  \n  ...\n  890  \n  891      if(!is_array && !is_typedarray) {\n  892:       if(js_is_arraybuffer(ctx, value) || js_is_sharedarraybuffer(ctx, value))\n  893          return js_inspect_print_arraybuffer(ctx, buf, value, opts, depth + 1);\n  894        if(js_is_date(ctx, value))\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c:\n  123  static BOOL\n  124  js_sockaddr_init(JSContext* ctx, int argc, JSValueConst argv[], SockAddr* a) {\n  125:   if(argc == 1 && js_is_arraybuffer(ctx, argv[0])) {\n  126      uint8_t* data;\n  127      size_t len;\n  ...\n  387      tv->tv_usec = usec;\n  388      return TRUE;\n  389:   } else if(js_is_arraybuffer(ctx, arg)) {\n  390      uint8_t* data;\n  391      size_t len;\n  ...\n  409      JS_SetPropertyUint32(ctx, arg, 1, JS_NewUint32(ctx, tv->tv_usec));\n  410      return TRUE;\n  411:   } else if(js_is_arraybuffer(ctx, arg)) {\n  412      uint8_t* data;\n  413      size_t len;\n  ...\n  434      }\n  435      return TRUE;\n  436:   } else if(js_is_arraybuffer(ctx, arg)) {\n  437      uint8_t* data;\n  438      size_t len;\n  ...\n  454          JS_SetPropertyUint32(ctx, arg, i++, JS_NewUint32(ctx, fd));\n  455      return TRUE;\n  456:   } else if(js_is_arraybuffer(ctx, arg)) {\n  457      uint8_t* data;\n  458      size_t len;\n  ...\n  495    }\n  496  \n  497:   if(js_is_arraybuffer(ctx, arg)) {\n  498      uint8_t* data;\n  499      size_t len;\n  ...\n  521      JS_SetPropertyStr(ctx, arg, \"revents\", JS_NewInt32(ctx, pfd->revents));\n  522      return TRUE;\n  523:   } else if(js_is_arraybuffer(ctx, arg)) {\n  524      uint8_t* data;\n  525      size_t len;\n  ...\n  648    int32_t timeout = -1;\n  649    struct pollfd* pfds;\n  650:   BOOL is_array = js_is_array(ctx, argv[0]), is_arraybuffer = js_is_arraybuffer(ctx, argv[0]);\n  651  \n  652    if(argc >= 2 && JS_IsNumber(argv[1]))\n\n~/Projects/plot-cv/quickjs/qjs-modules/include/utils.h:\n  681  }\n  682  \n  683: BOOL js_is_arraybuffer(JSContext*, JSValueConst);\n  684  BOOL js_is_sharedarraybuffer(JSContext*, JSValueConst);\n  685  BOOL js_is_date(JSContext*, JSValueConst);\n\n~/Projects/plot-cv/quickjs/qjs-modules/src/utils.c:\n 2011  \n 2012  BOOL\n 2013: js_is_arraybuffer(JSContext* ctx, JSValueConst value) {\n 2014    BOOL ret = FALSE;\n 2015    if(!JS_IsObject(value))\n ....\n 2254  js_arraybuffer_bytelength(JSContext* ctx, JSValueConst value) {\n 2255    int64_t len = -1;\n 2256:   if(js_is_arraybuffer(ctx, value)) {\n 2257      JSValue length = JS_GetPropertyStr(ctx, value, \"byteLength\");\n 2258      JS_ToInt64(ctx, &len, length);\n\n~/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c:\n  484    }\n  485  \n  486:   if(js_value_isclass(ctx, value, JS_CLASS_ARRAY_BUFFER) || js_is_arraybuffer(ctx, value)) {\n  487      ret.value = JS_DupValue(ctx, value);\n  488      ret.data = JS_GetArrayBuffer(ctx, &ret.size, ret.value);\n\n25 matches across 10 files\n\n\nSearching 4708 files for \"^js_is_arraybuffer\" (regex, case sensitive)\n\n~/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c:\n  836  \n  837  BOOL\n  838: js_is_arraybuffer(JSContext* ctx, JSValueConst value) {\n  839    if(JS_IsObject(value)) {\n  840      size_t len;\n\n~/Projects/plot-cv/quickjs/qjs-modules/src/utils.c:\n 2011  \n 2012  BOOL\n 2013: js_is_arraybuffer(JSContext* ctx, JSValueConst value) {\n 2014    BOOL ret = FALSE;\n 2015    if(!JS_IsObject(value))\n\n2 matches across 2 files\n\n\nSearching 4708 files for \"^js_is_arraybuffer\" (regex, case sensitive)\n\n~/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c:\n  836  \n  837  BOOL\n  838: js_is_arraybuffer(JSContext* ctx, JSValueConst value) {\n  839    if(JS_IsObject(value)) {\n  840      size_t len;\n\n~/Projects/plot-cv/quickjs/qjs-modules/src/utils.c:\n 2011  \n 2012  BOOL\n 2013: js_is_arraybuffer(JSContext* ctx, JSValueConst value) {\n 2014    BOOL ret = FALSE;\n 2015    if(!JS_IsObject(value))\n\n2 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 7109,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-net/lib/jsutils.c",
			"settings":
			{
				"buffer_size": 25008,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/src/utils.c",
			"settings":
			{
				"buffer_size": 93368,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					201,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAmjABAAAAAACaMAEAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/tests/test_lexer.js",
			"settings":
			{
				"buffer_size": 14983,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAADYCAAAAAAAANgIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAANwIAAAAAAAA3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ",startInteractive"
					},
					"EQAAADYCAAAAAAAANwIAAAAAAAAAAAAANwIAAAAAAAA4AgAAAAAAAAAAAAA4AgAAAAAAADkCAAAAAAAAAAAAADkCAAAAAAAAOgIAAAAAAAAAAAAAOgIAAAAAAAA7AgAAAAAAAAAAAAA7AgAAAAAAADwCAAAAAAAAAAAAADwCAAAAAAAAPQIAAAAAAAAAAAAAPQIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD8CAAAAAAAAAAAAAD8CAAAAAAAAQAIAAAAAAAAAAAAAQAIAAAAAAABBAgAAAAAAAAAAAABBAgAAAAAAAEICAAAAAAAAAAAAAEICAAAAAAAAQwIAAAAAAAAAAAAAQwIAAAAAAABEAgAAAAAAAAAAAABEAgAAAAAAAEUCAAAAAAAAAAAAAEUCAAAAAAAARgIAAAAAAAAAAAAARgIAAAAAAABHAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgIAAAAAAAA2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\nstartInteractive89"
					},
					"FAAAACA6AAAAAAAAIToAAAAAAAAAAAAAIToAAAAAAAAjOgAAAAAAAAAAAAAjOgAAAAAAACQ6AAAAAAAAAAAAACQ6AAAAAAAAJToAAAAAAAAAAAAAJToAAAAAAAAmOgAAAAAAAAAAAAAmOgAAAAAAACc6AAAAAAAAAAAAACc6AAAAAAAAKDoAAAAAAAAAAAAAKDoAAAAAAAApOgAAAAAAAAAAAAApOgAAAAAAACo6AAAAAAAAAAAAACo6AAAAAAAAKzoAAAAAAAAAAAAAKzoAAAAAAAAsOgAAAAAAAAAAAAAsOgAAAAAAAC06AAAAAAAAAAAAAC06AAAAAAAALjoAAAAAAAAAAAAALjoAAAAAAAAvOgAAAAAAAAAAAAAvOgAAAAAAADA6AAAAAAAAAAAAADA6AAAAAAAAMToAAAAAAAAAAAAAMToAAAAAAAAyOgAAAAAAAAAAAAAyOgAAAAAAADM6AAAAAAAAAAAAADM6AAAAAAAANDoAAAAAAAAAAAAANDoAAAAAAAA1OgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIDoAAAAAAAAgOgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					2,
					"left_delete",
					null,
					"AgAAADQ6AAAAAAAANDoAAAAAAAABAAAAOTM6AAAAAAAAMzoAAAAAAAABAAAAOA",
					"AQAAAAAAAAABAAAANToAAAAAAAA1OgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADM6AAAAAAAANToAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMzoAAAAAAAAzOgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADU6AAAAAAAANjoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANToAAAAAAAA1OgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADk6AAAAAAAAOjoAAAAAAAAAAAAAOjoAAAAAAAA7OgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOToAAAAAAAA5OgAAAAAAAAAAAAAAADJA"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "globalThis."
					},
					"CwAAADMgAAAAAAAANCAAAAAAAAAAAAAANCAAAAAAAAA1IAAAAAAAAAAAAAA1IAAAAAAAADYgAAAAAAAAAAAAADYgAAAAAAAANyAAAAAAAAAAAAAANyAAAAAAAAA4IAAAAAAAAAAAAAA4IAAAAAAAADkgAAAAAAAAAAAAADkgAAAAAAAAOiAAAAAAAAAAAAAAOiAAAAAAAAA7IAAAAAAAAAAAAAA7IAAAAAAAADwgAAAAAAAAAAAAADwgAAAAAAAAPSAAAAAAAAAAAAAAPSAAAAAAAAA+IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMyAAAAAAAAAzIAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "lexer"
					},
					"BQAAAD4gAAAAAAAAPyAAAAAAAAAAAAAAPyAAAAAAAABAIAAAAAAAAAAAAABAIAAAAAAAAEEgAAAAAAAAAAAAAEEgAAAAAAAAQiAAAAAAAAAAAAAAQiAAAAAAAABDIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPiAAAAAAAAA+IAAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEMgAAAAAAAARCAAAAAAAAAAAAAARCAAAAAAAABFIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQyAAAAAAAABDIAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUgAAAAAAAARiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSAAAAAAAABFIAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAARiAAAAAAAABGIAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/quickjs.h",
			"settings":
			{
				"buffer_size": 42139,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "draw.js",
			"settings":
			{
				"buffer_size": 13788,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					36,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAwAAAAAAAMsDAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/resolve-imports.js",
			"settings":
			{
				"buffer_size": 46874,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					64,
					1,
					"paste",
					null,
					"AQAAAEwhAAAAAAAAfCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATCEAAAAAAABMIQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAAFwhAAAAAAAAXSEAAAAAAAAAAAAAXSEAAAAAAABdIQAAAAAAAAEAAAAy",
					"AQAAAAAAAAABAAAAXCEAAAAAAABdIQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "lex."
					},
					"BQAAAGwhAAAAAAAAbSEAAAAAAAAAAAAAbSEAAAAAAABtIQAAAAAAAAUAAAB0b2tlbm0hAAAAAAAAbiEAAAAAAAAAAAAAbiEAAAAAAABvIQAAAAAAAAAAAABvIQAAAAAAAHAhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbCEAAAAAAABxIQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "jks"
					},
					"AwAAAHAhAAAAAAAAcSEAAAAAAAAAAAAAcSEAAAAAAAByIQAAAAAAAAAAAAByIQAAAAAAAHMhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcCEAAAAAAABwIQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					2,
					"left_delete",
					null,
					"AgAAAHIhAAAAAAAAciEAAAAAAAABAAAAc3EhAAAAAAAAcSEAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAcyEAAAAAAABzIQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHEhAAAAAAAAciEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcSEAAAAAAABxIQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					3,
					"right_delete",
					null,
					"AwAAAHYhAAAAAAAAdiEAAAAAAAABAAAAb3YhAAAAAAAAdiEAAAAAAAABAAAAa3YhAAAAAAAAdiEAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAdiEAAAAAAAB2IQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"left_delete",
					null,
					"AQAAAHUhAAAAAAAAdSEAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAdiEAAAAAAAB2IQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "lex.jks"
					},
					"BwAAAHUhAAAAAAAAdiEAAAAAAAAAAAAAdiEAAAAAAAB3IQAAAAAAAAAAAAB3IQAAAAAAAHghAAAAAAAAAAAAAHghAAAAAAAAeSEAAAAAAAAAAAAAeSEAAAAAAAB6IQAAAAAAAAAAAAB6IQAAAAAAAHshAAAAAAAAAAAAAHshAAAAAAAAfCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdSEAAAAAAAB1IQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					2,
					"left_delete",
					null,
					"AgAAAHshAAAAAAAAeyEAAAAAAAABAAAAc3ohAAAAAAAAeiEAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAfCEAAAAAAAB8IQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHohAAAAAAAAeyEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeiEAAAAAAAB6IQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"right_delete",
					null,
					"AQAAAHshAAAAAAAAeyEAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAeyEAAAAAAAB7IQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					3,
					"right_delete",
					null,
					"AwAAAHghAAAAAAAAeCEAAAAAAAABAAAALnghAAAAAAAAeCEAAAAAAAABAAAAanghAAAAAAAAeCEAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAeCEAAAAAAAB4IQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAHghAAAAAAAAeSEAAAAAAAAAAAAAeSEAAAAAAAB6IQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeCEAAAAAAAB4IQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					3,
					"left_delete",
					null,
					"AwAAAHEhAAAAAAAAcSEAAAAAAAABAAAAc3AhAAAAAAAAcCEAAAAAAAABAAAAam8hAAAAAAAAbyEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAciEAAAAAAAByIQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAG8hAAAAAAAAcCEAAAAAAAAAAAAAcCEAAAAAAABxIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbyEAAAAAAABvIQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAcSEAAAAAAABxIQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAcSEAAAAAAABxIQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/quickjs-lexer.c",
			"settings":
			{
				"buffer_size": 43795,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					118,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAKqwAAI2luY2x1ZGUgImRlZmluZXMuaCIKI2luY2x1ZGUgPHF1aWNranMuaD4KI2luY2x1ZGUgPGxpYnJlZ2V4cC5oPgojaW5jbHVkZSAicXVpY2tqcy1sZXhlci5oIgojaW5jbHVkZSAicXVpY2tqcy1sb2NhdGlvbi5oIgojaW5jbHVkZSAidmVjdG9yLmgiCiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPGN0eXBlLmg+CiNpbmNsdWRlIDxzdGRpbnQuaD4KI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSAiZGVidWcuaCIKI2luY2x1ZGUgInRva2VuLmgiCgovKioKICogXGFkZHRvZ3JvdXAgcXVpY2tqcy1sZXhlcgogKiBAewogKi8KdHlwZWRlZiBzdHJ1Y3QgewogIEpTVmFsdWUgYWN0aW9uOwogIEJPT0wgc2tpcDsKfSBKU0xleGVyUnVsZTsKCnRocmVhZF9sb2NhbCBWSVNJQkxFIEpTQ2xhc3NJRCBqc190b2tlbl9jbGFzc19pZCA9IDAsIGpzX2xleGVyX2NsYXNzX2lkID0gMDsKdGhyZWFkX2xvY2FsIEpTVmFsdWUgdG9rZW5fcHJvdG8gPSB7e0pTX1RBR19VTkRFRklORUR9fSwgdG9rZW5fY3RvciA9IHt7SlNfVEFHX1VOREVGSU5FRH19Owp0aHJlYWRfbG9jYWwgSlNWYWx1ZSBsZXhlcl9wcm90byA9IHt7SlNfVEFHX1VOREVGSU5FRH19LCBsZXhlcl9jdG9yID0ge3tKU19UQUdfVU5ERUZJTkVEfX07CgpzdGF0aWMgSlNWYWx1ZQpvZmZzZXRfdG9hcnJheShPZmZzZXRMZW5ndGggb2Zmc19sZW4sIEpTQ29udGV4dCogY3R4KSB7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCAwLCBKU19OZXdJbnQ2NChjdHgsIG9mZnNfbGVuLm9mZnNldCkpOwogIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCAxLCBKU19OZXdJbnQ2NChjdHgsIG9mZnNfbGVuLm9mZnNldCArIG9mZnNfbGVuLmxlbmd0aCkpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2xleGVyX3J1bGVfbmV3KEpTQ29udGV4dCogY3R4LCBMZXhlciogbGV4LCBMZXhlclJ1bGUqIHJ1bGUpIHsKICBKU1ZhbHVlIHJldCwgc3RhdGVzOwogIER5bkJ1ZiBkYnVmOwogIHNpemVfdCBpLCBqOwogIGpzX2RidWZfaW5pdChjdHgsICZkYnVmKTsKICBsZXhlcl9ydWxlX2R1bXAobGV4LCBydWxlLCAmZGJ1Zik7CiAgZGJ1Zl8wKCZkYnVmKTsKCiAgaWYocnVsZS0+ZXhwclswXSA9PSAnPCcpIHsKICAgIGFzc2VydCghc3RybmNtcChydWxlLT5leHByLCAoY29uc3QgY2hhciopZGJ1Zi5idWYsIHN0cl9jaHIocnVsZS0+ZXhwciwgJz4nKSkpOwogIH0KCiAgcmV0ID0gSlNfTmV3QXJyYXkoY3R4KTsKICBqc19zZXRfcHJvcGVydHlpbnRfc3RyaW5nKGN0eCwgcmV0LCAwLCBydWxlLT5uYW1lKTsKICBqc19zZXRfcHJvcGVydHlpbnRfc3RyaW5nKGN0eCwgcmV0LCAxLCBsZXhlcl9zdGF0ZXNfc2tpcCgoY2hhciopZGJ1Zi5idWYpKTsKCiAgc3RhdGVzID0gSlNfTmV3QXJyYXkoY3R4KTsKCiAgZm9yKGkgPSAwLCBqID0gMDsgaSA8IDMyOyBpKyspIHsKICAgIGlmKHJ1bGUtPm1hc2sgJiAoMSA8PCBpKSkgewogICAgICBjaGFyKiBuYW1lID0gbGV4ZXJfc3RhdGVfbmFtZShsZXgsIGkpOwoKICAgICAgaWYobmFtZSkKICAgICAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHN0YXRlcywgaisrLCBKU19OZXdTdHJpbmcoY3R4LCBuYW1lKSk7CiAgICB9CiAgfQoKICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgMiwgc3RhdGVzKTsKICBpZihydWxlLT5vcGFxdWUpIHsKICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCAzLCBKU19EdXBWYWx1ZShjdHgsICgoSlNMZXhlclJ1bGUqKXJ1bGUtPm9wYXF1ZSktPmFjdGlvbikpOwogICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIDQsIEpTX05ld0Jvb2woY3R4LCAoKEpTTGV4ZXJSdWxlKilydWxlLT5vcGFxdWUpLT5za2lwKSk7CiAgfQogIC8vIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCAzLCBKU19OZXdJbnQ2NChjdHgsIHJ1bGUtPm1hc2spKTsKCiAgZGJ1Zl9mcmVlKCZkYnVmKTsKICByZXR1cm4gcmV0Owp9CgplbnVtIHRva2VuX21ldGhvZHMgewogIFRPX1NUUklORyA9IDAsCn07CgplbnVtIHRva2VuX2dldHRlcnMgewogIFRPS0VOX1BST1BfQllURUxFTkdUSCA9IDAsCiAgVE9LRU5fUFJPUF9CWVRFT0ZGU0VULAogIFRPS0VOX1BST1BfQ0hBUkxFTkdUSCwKICBUT0tFTl9QUk9QX1NUQVJULAogIFRPS0VOX1BST1BfRU5ELAogIFRPS0VOX1BST1BfQllURVJBTkdFLAogIFRPS0VOX1BST1BfQ0hBUlJBTkdFLAogIFRPS0VOX1BST1BfTEVYRU1FLAogIFRPS0VOX1BST1BfTE9DLAogIFRPS0VOX1BST1BfSUQsCiAgVE9LRU5fUFJPUF9TRVEsCiAgVE9LRU5fUFJPUF9UWVBFLAogIFRPS0VOX1BST1BfUlVMRSwKfTsKClRva2VuKgpqc190b2tlbl9uZXcoSlNDb250ZXh0KiBjdHgsIGludCBpZCwgY29uc3QgY2hhciogbGV4ZW1lLCBMb2NhdGlvbiogbG9jLCB1aW50NjRfdCBieXRlX29mZnNldCkgewogIFRva2VuKiB0b2s7CgogIGlmKCEodG9rID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihUb2tlbikpKSkKICAgIHJldHVybiAwOwoKICB0b2stPmlkID0gaWQ7CiAgdG9rLT5sZXhlbWUgPSAodWludDhfdCopanNfc3RyZHVwKGN0eCwgbGV4ZW1lKTsKICB0b2stPmxvYyA9IGxvY2F0aW9uX2R1cChsb2MpOwogIC8vIHRvay0+bG9jX3ZhbCA9IEpTX1VOREVGSU5FRDsKICAvLyAgIHRvay0+Ynl0ZV9vZmZzZXQgPSBieXRlX29mZnNldDsKCiAgcmV0dXJuIHRvazsKfQoKSlNWYWx1ZQpqc190b2tlbl93cmFwKEpTQ29udGV4dCogY3R4LCBUb2tlbiogdG9rKSB7CiAgSlNWYWx1ZSBvYmogPSBKU19VTkRFRklORUQ7CgogIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCB0b2tlbl9wcm90bywganNfdG9rZW5fY2xhc3NfaWQpOwogIEpTX1NldE9wYXF1ZShvYmosIHRvayk7CiAgcmV0dXJuIG9iajsKfQoKSlNWYWx1ZQpqc190b2tlbl9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG5ld190YXJnZXQsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgTGV4ZXIqIGxleCA9IDA7CiAgVG9rZW4qIHRvazsKICBKU1ZhbHVlIG9iaiA9IEpTX1VOREVGSU5FRDsKICBKU1ZhbHVlIHByb3RvOwoKICBpZighKHRvayA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoVG9rZW4pKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICAvKiB1c2luZyBuZXdfdGFyZ2V0IHRvIGdldCB0aGUgcHJvdG90eXBlIGlzIG5lY2Vzc2FyeSB3aGVuIHRoZQogICAgIGNsYXNzIGlzIGV4dGVuZGVkLiAqLwogIHByb3RvID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBuZXdfdGFyZ2V0LCAicHJvdG90eXBlIik7CiAgaWYoSlNfSXNFeGNlcHRpb24ocHJvdG8pKQogICAgZ290byBmYWlsOwogIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCBwcm90bywganNfdG9rZW5fY2xhc3NfaWQpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHByb3RvKTsKICBpZihKU19Jc0V4Y2VwdGlvbihvYmopKQogICAgZ290byBmYWlsOwoKICBKU19TZXRPcGFxdWUob2JqLCB0b2spOwoKICAvLyB0b2stPmxvY192YWwgPSBKU19VTkRFRklORUQ7CgogIC8vCiAgLy8KICBpZihhcmdjID49IDEgJiYgKGxleCA9IGpzX2xleGVyX2RhdGEoYXJndlswXSkpKSB7CiAgICBhcmdjLS07CiAgICBhcmd2Kys7CiAgfQoKICBpZihhcmdjID4gMCkgewogICAgaWYoSlNfSXNOdW1iZXIoYXJndlswXSkpIHsKICAgICAgSlNfVG9JbnQzMihjdHgsICZ0b2stPmlkLCBhcmd2WzBdKTsKICAgIH0gZWxzZSBpZihKU19Jc1N0cmluZyhhcmd2WzBdKSkgewogICAgfQogIH0KICBpZihhcmdjID4gMSkKICAgIHRvay0+bGV4ZW1lID0gKHVpbnQ4X3QqKWpzX3Rvc3RyaW5nKGN0eCwgYXJndlsxXSk7CiAgaWYoYXJnYyA+IDIpIHsKICAgIExvY2F0aW9uKiBsb2M7CgogICAgaWYoKGxvYyA9IGpzX2xvY2F0aW9uX2RhdGEyKGN0eCwgYXJndlsyXSkpKQogICAgICB0b2stPmxvYyA9IGxvY2F0aW9uX2R1cChsb2MpOwogICAgZWxzZQogICAgICB0b2stPmxvYyA9IGpzX2xvY2F0aW9uX2Zyb20oY3R4LCBhcmd2WzJdKTsKICB9CiAgaWYoYXJnYyA+IDMpCiAgICBKU19Ub0ludDY0KGN0eCwgJnRvay0+bG9jLT5jaGFyX29mZnNldCwgYXJndlszXSk7CgogIHJldHVybiBvYmo7CmZhaWw6CiAganNfZnJlZShjdHgsIHRvayk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgb2JqKTsKICByZXR1cm4gSlNfRVhDRVBUSU9OOwp9CgpKU1ZhbHVlCmpzX3Rva2VuX3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgVG9rZW4qIHRvazsKICBpZighKHRvayA9IGpzX3Rva2VuX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CiAgcmV0dXJuIEpTX05ld1N0cmluZ0xlbihjdHgsIChjb25zdCBjaGFyKil0b2stPmxleGVtZSwgdG9rLT5ieXRlX2xlbmd0aCk7Cn0KCkpTVmFsdWUKanNfdG9rZW5fdG9wcmltaXRpdmUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBUb2tlbiogdG9rOwogIGNvbnN0IGNoYXIqIGhpbnQ7CiAgSlNWYWx1ZSByZXQ7CiAgaWYoISh0b2sgPSBqc190b2tlbl9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIGhpbnQgPSBhcmdjID4gMCA/IEpTX1RvQ1N0cmluZyhjdHgsIGFyZ3ZbMF0pIDogMDsKCiAgaWYoaGludCAmJiAhc3RyY21wKGhpbnQsICJudW1iZXIiKSkKICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgdG9rLT5pZCk7CiAgZWxzZQogICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKXRvay0+bGV4ZW1lLCB0b2stPmJ5dGVfbGVuZ3RoKTsKCiAgaWYoaGludCkKICAgIGpzX2NzdHJpbmdfZnJlZShjdHgsIGhpbnQpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc190b2tlbl9pbnNwZWN0X2Z1bmNzWzFdID0gewogICAgSlNfUFJPUF9TVFJJTkdfREVGKCJbU3ltYm9sLnRvU3RyaW5nVGFnXSIsICJUb2tlbiIsIEpTX1BST1BfQ09ORklHVVJBQkxFKSwKfTsKCkpTVmFsdWUKanNfdG9rZW5faW5zcGVjdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIFRva2VuKiB0b2s7CiAgTGV4ZXJSdWxlKiBydWxlOwogIGludCBhcmdpID0gMDsKICBpbnQzMl90IGQgPSAwOwoKICBpZighKHRvayA9IGpzX3Rva2VuX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIGlmKGFyZ2kgPCBhcmdjICYmIEpTX0lzTnVtYmVyKGFyZ3ZbYXJnaV0pKQogICAgSlNfVG9JbnQzMihjdHgsICZkLCBhcmd2W2FyZ2krK10pOwoKICAvLyBwcmludGYoIiVzIGQ9JWlcbiIsIF9fZnVuY19fLCAoaW50KWQpOwoKICBKU1ZhbHVlIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCB0b2tlbl9wcm90bywganNfdG9rZW5fY2xhc3NfaWQpOwogIHJ1bGUgPSBsZXhlcl9ydWxlX2F0KHRvay0+bGV4ZXIsIHRvay0+aWQpOwoKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiaWQiLCBKU19OZXdVaW50MzIoY3R4LCB0b2stPmlkKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAic2VxIiwgSlNfTmV3VWludDMyKGN0eCwgdG9rLT5zZXEpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwoKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAidHlwZSIsIHJ1bGUgPyBKU19OZXdTdHJpbmcoY3R4LCBydWxlLT5uYW1lKSA6IEpTX05VTEwsIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImxleGVtZSIsIEpTX05ld1N0cmluZyhjdHgsIChjb25zdCBjaGFyKil0b2stPmxleGVtZSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CgogIGlmKHRvay0+bG9jKQogICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImNoYXJPZmZzZXQiLCBKU19OZXdVaW50MzIoY3R4LCB0b2stPmxvYy0+Y2hhcl9vZmZzZXQpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwoKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiY2hhckxlbmd0aCIsIEpTX05ld1VpbnQzMihjdHgsIHRvay0+Y2hhcl9sZW5ndGgpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwoKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiY2hhclJhbmdlIiwgb2Zmc2V0X3RvYXJyYXkodG9rZW5fY2hhcl9yYW5nZSh0b2spLCBjdHgpLCAwKTsKCiAgaWYodG9rLT5sb2MpCiAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAibG9jIiwganNfbG9jYXRpb25fd3JhcChjdHgsIHRvay0+bG9jKSwgMCk7CiAgcmV0dXJuIG9iajsKfQoKSlNWYWx1ZQpqc190b2tlbl9nZXQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IG1hZ2ljKSB7CiAgVG9rZW4qIHRvazsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKCiAgaWYoISh0b2sgPSBqc190b2tlbl9kYXRhKHRoaXNfdmFsKSkpCiAgICByZXR1cm4gcmV0OwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgVE9LRU5fUFJPUF9CWVRFTEVOR1RIOiB7CiAgICAgIHJldCA9IEpTX05ld0ludDY0KGN0eCwgdG9rLT5ieXRlX2xlbmd0aCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX0NIQVJMRU5HVEg6IHsKICAgICAgcmV0ID0gSlNfTmV3SW50NjQoY3R4LCB0b2stPmNoYXJfbGVuZ3RoKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICAgIC8qICAgICAgY2FzZSBUT0tFTl9QUk9QX0JZVEVPRkZTRVQ6IHsKICAgICAgICAgICAgcmV0ID0gSlNfTmV3SW50NjQoY3R4LCB0b2stPmJ5dGVfb2Zmc2V0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgY2FzZSBUT0tFTl9QUk9QX1NUQVJUOiB7CiAgICAgICAgICAgIHJldCA9IEpTX05ld0ludDY0KGN0eCwgdG9rLT5sb2MuY2hhcl9vZmZzZXQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgVE9LRU5fUFJPUF9FTkQ6IHsKICAgICAgICAgICAgcmV0ID0gSlNfTmV3SW50NjQoY3R4LCB0b2stPmxvYy5jaGFyX29mZnNldCArIHRvay0+Y2hhcl9sZW5ndGgpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICovCiAgICBjYXNlIFRPS0VOX1BST1BfQllURVJBTkdFOiB7CiAgICAgIExvY2F0aW9uKiBsb2M7CiAgICAgIGlmKChsb2MgPSB0b2stPmxvYykpCiAgICAgICAgcmV0ID0gb2Zmc2V0X3RvYXJyYXkodG9rZW5fYnl0ZV9yYW5nZSh0b2spLCBjdHgpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVE9LRU5fUFJPUF9DSEFSUkFOR0U6IHsKICAgICAgTG9jYXRpb24qIGxvYzsKICAgICAgaWYoKGxvYyA9IHRvay0+bG9jKSkKICAgICAgICByZXQgPSBvZmZzZXRfdG9hcnJheSh0b2tlbl9jaGFyX3JhbmdlKHRvayksIGN0eCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX0xFWEVNRTogewogICAgICByZXQgPSBKU19OZXdTdHJpbmdMZW4oY3R4LCAoY29uc3QgY2hhciopdG9rLT5sZXhlbWUsIHRvay0+Ynl0ZV9sZW5ndGgpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVE9LRU5fUFJPUF9MT0M6IHsKICAgICAgTG9jYXRpb24qIGxvYzsKCiAgICAgIGlmKChsb2MgPSBsb2NhdGlvbl9kdXAodG9rLT5sb2MpKSkKICAgICAgICByZXQgPSBqc19sb2NhdGlvbl93cmFwKGN0eCwgbG9jKTsKCiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX0lEOiB7CiAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgdG9rLT5pZCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX1NFUTogewogICAgICByZXQgPSBKU19OZXdVaW50MzIoY3R4LCB0b2stPnNlcSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX1JVTEU6IHsKICAgICAgTGV4ZXJSdWxlKiBydWxlID0gbGV4ZXJfcnVsZV9hdCh0b2stPmxleGVyLCB0b2stPmlkKTsKICAgICAgcmV0ID0gcnVsZSA/IGpzX2xleGVyX3J1bGVfbmV3KGN0eCwgdG9rLT5sZXhlciwgcnVsZSkgOiBKU19OVUxMOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVE9LRU5fUFJPUF9UWVBFOiB7CiAgICAgIExleGVyUnVsZSogcnVsZSA9IGxleGVyX3J1bGVfYXQodG9rLT5sZXhlciwgdG9rLT5pZCk7CiAgICAgIHJldCA9IHJ1bGUgPyBKU19OZXdTdHJpbmcoY3R4LCBydWxlLT5uYW1lKSA6IEpTX05VTEw7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gcmV0Owp9Cgp2b2lkCmpzX3Rva2VuX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCBKU1ZhbHVlIHZhbCkgewogIFRva2VuKiB0b2s7CiAgaWYoKHRvayA9IGpzX3Rva2VuX2RhdGEodmFsKSkpIHsKICAgIHRva2VuX2ZyZWVfcnQodG9rLCBydCk7CiAgICBKU19TZXRPcGFxdWUodmFsLCAwKTsKICB9CiAgLy8gSlNfRnJlZVZhbHVlUlQocnQsIHZhbCk7Cn0KCnN0YXRpYyBKU0NsYXNzRGVmIGpzX3Rva2VuX2NsYXNzID0gewogICAgLmNsYXNzX25hbWUgPSAiVG9rZW4iLAogICAgLmZpbmFsaXplciA9IGpzX3Rva2VuX2ZpbmFsaXplciwKfTsKCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc190b2tlbl9wcm90b19mdW5jc1tdID0gewogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoImNoYXJMZW5ndGgiLCBqc190b2tlbl9nZXQsIE5VTEwsIFRPS0VOX1BST1BfQ0hBUkxFTkdUSCksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiYnl0ZUxlbmd0aCIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9CWVRFTEVOR1RIKSwKICAgIC8qICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJieXRlT2Zmc2V0IiwganNfdG9rZW5fZ2V0LCBOVUxMLCBUT0tFTl9QUk9QX0JZVEVPRkZTRVQpLAogICAgICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzdGFydCIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9TVEFSVCksCiAgICAgICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoImVuZCIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9FTkQpLCovCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiY2hhclJhbmdlIiwganNfdG9rZW5fZ2V0LCBOVUxMLCBUT0tFTl9QUk9QX0NIQVJSQU5HRSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiYnl0ZVJhbmdlIiwganNfdG9rZW5fZ2V0LCBOVUxMLCBUT0tFTl9QUk9QX0JZVEVSQU5HRSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigibG9jIiwganNfdG9rZW5fZ2V0LCBOVUxMLCBUT0tFTl9QUk9QX0xPQyksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiaWQiLCBqc190b2tlbl9nZXQsIE5VTEwsIFRPS0VOX1BST1BfSUQpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInNlcSIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9TRVEpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInR5cGUiLCBqc190b2tlbl9nZXQsIE5VTEwsIFRPS0VOX1BST1BfVFlQRSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigicnVsZSIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9SVUxFKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJsZXhlbWUiLCBqc190b2tlbl9nZXQsIE5VTEwsIFRPS0VOX1BST1BfTEVYRU1FKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJ2YWx1ZSIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9MRVhFTUUpLAogICAgLy8gSlNfQ0ZVTkNfREVGKCJ0b1N0cmluZyIsIDAsIGpzX3Rva2VuX3Rvc3RyaW5nKSwKICAgIC8vIEpTX0NGVU5DX0RFRigiW1N5bWJvbC50b1ByaW1pdGl2ZV0iLCAxLCBqc190b2tlbl90b3ByaW1pdGl2ZSksCiAgICBKU19BTElBU19ERUYoInBvc2l0aW9uIiwgImxvYyIpLAogICAgSlNfQUxJQVNfREVGKCJsZW5ndGgiLCAiY2hhckxlbmd0aCIpLAogICAgSlNfQUxJQVNfREVGKCJyYW5nZSIsICJjaGFyUmFuZ2UiKSwKICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiVG9rZW4iLCBKU19QUk9QX0NPTkZJR1VSQUJMRSksCn07CnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc190b2tlbl9zdGF0aWNfZnVuY3NbXSA9IHsKICAgIEpTX1BST1BfSU5UMzJfREVGKCJFT0YiLCBMRVhFUl9FT0YsIEpTX1BST1BfRU5VTUVSQUJMRSksCn07CgpzdGF0aWMgSlNWYWx1ZQpsZXhlcl9jb250aW51ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCBKU1ZhbHVlIGRhdGFbXSkgewogIEpTVmFsdWUgdmFsID0gYXJnYyA+PSAxID8gSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzBdKSA6IEpTX05ld0Jvb2woY3R4LCBUUlVFKTsKCiAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBkYXRhWzBdLCAwLCB2YWwpOwoKICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpzdGF0aWMgaW50MzJfdApsZXhlcl90b19zdGF0ZShMZXhlciogbGV4LCBKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgaW50MzJfdCBudW07CiAgaWYoSlNfSXNOdW1iZXIodmFsdWUpKSB7CiAgICBKU19Ub0ludDMyKGN0eCwgJm51bSwgdmFsdWUpOwogIH0gZWxzZSB7CiAgICBjb25zdCBjaGFyKiBzdHIgPSBKU19Ub0NTdHJpbmcoY3R4LCB2YWx1ZSk7CiAgICBudW0gPSBsZXhlcl9zdGF0ZV9maW5kKGxleCwgc3RyKTsKICB9CiAgaWYobnVtID49IDAgJiYgKHNpemVfdCludW0gPCBsZXhlcl9udW1fc3RhdGVzKGxleCkpCiAgICByZXR1cm4gbnVtOwogIHJldHVybiAtMTsKfQoKc3RhdGljIEJPT0wKbGV4ZXJfaGFuZGxlKExleGVyKiBsZXgsIEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIEpTVmFsdWVDb25zdCBoYW5kbGVyKSB7CiAgQk9PTCByZXN1bHQgPSBGQUxTRTsKICBKU1ZhbHVlIGRhdGFbMV0gPSB7SlNfTmV3QXJyYXkoY3R4KX07CiAgSlNWYWx1ZSBhcmdzW10gPSB7CiAgICAgIEpTX0R1cFZhbHVlKGN0eCwgdGhpc192YWwpLAogICAgICBKU19OZXdDRnVuY3Rpb25EYXRhKGN0eCwgbGV4ZXJfY29udGludWUsIDAsIDAsIDEsIGRhdGEpLAogIH07CiAgSlNWYWx1ZSByZXQsIGRvX3Jlc3VtZSA9IEpTX0ZBTFNFOwoKICByZXQgPSBKU19DYWxsKGN0eCwgaGFuZGxlciwgdGhpc192YWwsIGNvdW50b2YoYXJncyksIGFyZ3MpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHJldCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1swXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CgogIGRvX3Jlc3VtZSA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgZGF0YVswXSwgMCk7CgogIGlmKEpTX0lzQm9vbChkb19yZXN1bWUpKQogICAgcmVzdWx0ID0gSlNfVG9Cb29sKGN0eCwgZG9fcmVzdW1lKTsKCiAgSlNfRnJlZVZhbHVlKGN0eCwgZGF0YVswXSk7CgogIHJldHVybiByZXN1bHQ7Cn0KCnN0YXRpYyBpbnQKbGV4ZXJfbGV4KExleGVyKiBsZXgsIEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgaW50IGlkID0gMDsKICBpbnQ2NF90IGZsYWdzID0gMDsKICBKU1ZhbHVlIGNhbGxiYWNrID0gSlNfVU5ERUZJTkVEOwoKICBpZihhcmdjID49IDEgJiYgKGZsYWdzID0gbGV4ZXJfdG9fc3RhdGUobGV4LCBjdHgsIGFyZ3ZbMF0pKSkge30KCiAgY2FsbGJhY2sgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHRoaXNfdmFsLCAiY2FsbGJhY2siKTsKCiAgaWYobGV4LT5ieXRlX2xlbmd0aCA+IDAgJiYgbGV4LT50b2tlbl9pZCAhPSAtMSkKICAgIGxleGVyX3NraXAobGV4KTsKCiAgZm9yKDs7KSB7CiAgICBpZigoaWQgPSBsZXhlcl9wZWVrKGxleCwgaWQsIGN0eCkpID49IDApIHsKICAgICAgTGV4ZXJSdWxlKiBydWxlID0gbGV4ZXJfcnVsZV9hdChsZXgsIGlkKTsKCiAgICAgIC8vICBwcmludGYoInN0YXRlICVpIHJ1bGUgJXNcbiIsIGxleC0+c3RhdGUsIHJ1bGUtPm5hbWUpOwoKICAgICAgSlNMZXhlclJ1bGUqIGpzcnVsZSA9IHJ1bGUtPm9wYXF1ZTsKCiAgICAgIGlmKChydWxlLT5tYXNrICYgZmxhZ3MpKSB7CiAgICAgICAgbGV4ZXJfc2tpcChsZXgpOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICBpZihqc3J1bGUpIHsKICAgICAgICBCT09MIHNraXAgPSBGQUxTRTsKCiAgICAgICAgaWYoSlNfSXNGdW5jdGlvbihjdHgsIGpzcnVsZS0+YWN0aW9uKSkKICAgICAgICAgIHNraXAgPSBsZXhlcl9oYW5kbGUobGV4LCBjdHgsIHRoaXNfdmFsLCBqc3J1bGUtPmFjdGlvbik7CgogICAgICAgIGlmKHNraXAgfHwganNydWxlLT5za2lwKSB7CiAgICAgICAgICBsZXhlcl9za2lwKGxleCk7CiAgICAgICAgICBpZCA9IDA7IC8vKytpZDsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLyogaWYoSlNfSXNGdW5jdGlvbihjdHgsIGNhbGxiYWNrKSkgewogICAgICAgICBsZXhlcl9oYW5kbGUobGV4LCBjdHgsIHRoaXNfdmFsLCBjYWxsYmFjayk7CiAgICAgICB9Ki8KCiAgICB9IGVsc2UgaWYoaWQgPT0gTEVYRVJfRVJST1JfTk9NQVRDSCkgewogICAgICBKU1ZhbHVlIGhhbmRsZXIgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHRoaXNfdmFsLCAiaGFuZGxlciIpOwoKICAgICAgaWYoSlNfSXNGdW5jdGlvbihjdHgsIGhhbmRsZXIpKSB7CiAgICAgICAgaWYobGV4ZXJfaGFuZGxlKGxleCwgY3R4LCB0aGlzX3ZhbCwgaGFuZGxlcikgPT0gVFJVRSkKICAgICAgICAgIGNvbnRpbnVlOwoKICAgICAgICBpZCA9IExFWEVSX0VSUk9SX05PTUFUQ0g7CiAgICAgIH0KICAgIH0KCiAgICBicmVhazsKICB9CgogIHJldHVybiBpZDsKfQoKc3RhdGljIEJPT0wKbGV4ZXJfZXNjYXBlX3ByZWQoaW50IGMpIHsKICBzd2l0Y2goYykgewogICAgY2FzZSAnKic6CiAgICBjYXNlICc/JzoKICAgIGNhc2UgJysnOgogICAgY2FzZSAnWyc6CiAgICBjYXNlICddJzoKICAgIGNhc2UgJygnOgogICAgY2FzZSAnKSc6CiAgICBjYXNlICcuJzoKICAgIGNhc2UgJ14nOgogICAgY2FzZSAnJCc6CiAgICBjYXNlICd8JzoKICAgIGNhc2UgJ1xyJzoKICAgIGNhc2UgJ1xuJzoKICAgIGNhc2UgJ1x0JzoKICAgIGNhc2UgJ1x2JzoKICAgIGNhc2UgJ1xmJzoKICAgIGNhc2UgJ1xcJzogcmV0dXJuIFRSVUU7CiAgfQogIHJldHVybiBGQUxTRTsKfQpzdGF0aWMgQk9PTApsZXhlcl91bmVzY2FwZV9wcmVkKGludCBjKSB7CiAgc3dpdGNoKGMpIHsKICAgIGNhc2UgJ3InOiByZXR1cm4gJ1xyJzsKICAgIGNhc2UgJ24nOiByZXR1cm4gJ1xuJzsKICAgIGNhc2UgJ3QnOiByZXR1cm4gJ1x0JzsKICAgIGNhc2UgJ3YnOiByZXR1cm4gJ1x2JzsKICAgIGNhc2UgJ2YnOiByZXR1cm4gJ1xmJzsKICAgIGNhc2UgJy8nOgogICAgICByZXR1cm4gJy8nOwogICAgICAvLyBjYXNlICdcXCc6IHJldHVybiAnXFwnOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGNoYXIqCmxleGVyX2N1cnJlbnRfbGluZShMZXhlciogbGV4LCBKU0NvbnRleHQqIGN0eCkgewogIHNpemVfdCBzdGFydCwgc2l6ZTsKICBzdGFydCA9IGxleC0+cG9zOwogIC8vIGVuZCA9IHN0YXJ0ICsgbGV4LT5ieXRlX2xlbmd0aDsKICB3aGlsZShzdGFydCA+IDAgJiYgbGV4LT5kYXRhW3N0YXJ0IC0gMV0gIT0gJ1xuJykgc3RhcnQtLTsKICBzaXplID0gYnl0ZV9jaHIoKGNvbnN0IGNoYXIqKSZsZXgtPmRhdGFbc3RhcnRdLCBsZXgtPnNpemUgLSBzdGFydCwgJ1xuJyk7CiAgLy8gd2hpbGUoZW5kIDwgbGV4LT5zaXplICYmIGxleC0+ZGF0YVtlbmRdICE9ICdcbicpIGVuZCsrOwogIHJldHVybiBqc19zdHJuZHVwKGN0eCwgKGNvbnN0IGNoYXIqKSZsZXgtPmRhdGFbc3RhcnRdLCBzaXplKTsKfQoKc3RhdGljIGNoYXIqCmxleGVyX2xleGVtZV9zKExleGVyKiBsZXgsIEpTQ29udGV4dCogY3R4KSB7CiAgc2l6ZV90IGxlbjsKICBjaGFyKiBzOwogIER5bkJ1ZiBvdXRwdXQ7CiAganNfZGJ1Zl9pbml0KGN0eCwgJm91dHB1dCk7CgogIHMgPSBsZXhlcl9sZXhlbWUobGV4LCAmbGVuKTsKCiAgZGJ1Zl9wdXRfZXNjYXBlZF9wcmVkKCZvdXRwdXQsIHMsIGxlbiwgbGV4ZXJfZXNjYXBlX3ByZWQpOwogIGRidWZfMCgmb3V0cHV0KTsKCiAgcmV0dXJuIChjaGFyKilvdXRwdXQuYnVmOwp9CgpzdGF0aWMgVG9rZW4qCmxleGVyX3Rva2VuKExleGVyKiBsZXgsIGludDMyX3QgaWQsIEpTQ29udGV4dCogY3R4KSB7CiAgc2l6ZV90IGxlbjsKICBjb25zdCBjaGFyKiBsZXhlbWU7CiAgVG9rZW4qIHRvazsKCiAgaWYoIShsZXhlbWUgPSBsZXhlcl9sZXhlbWUobGV4LCAmbGVuKSkpCiAgICByZXR1cm4gMDsKCiAgaWYoISh0b2sgPSB0b2tlbl9jcmVhdGUoaWQsIGxvY2F0aW9uX2Nsb25lKCZsZXgtPmxvYywgY3R4KSwgbGV4ZW1lLCBsZW4sIGN0eCkpKQogICAgcmV0dXJuIDA7CgogIHRvay0+bGV4ZXIgPSBsZXhlcl9kdXAobGV4KTsKICB0b2stPnNlcSA9IGxleC0+c2VxOwoKICByZXR1cm4gdG9rOwp9CgpKU1ZhbHVlCmpzX2xleGVyX25ldyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHByb3RvLCBKU1ZhbHVlQ29uc3QgdmlucHV0LCBKU1ZhbHVlQ29uc3Qgdm1vZGUpIHsKICBMZXhlciogbGV4OwogIGludDMyX3QgbW9kZSA9IDA7CiAgSlNWYWx1ZSBvYmogPSBKU19VTkRFRklORUQ7CiAgaWYoIShsZXggPSBqc19tYWxsb2N6KGN0eCwgc2l6ZW9mKExleGVyKSkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgaWYoSlNfSXNOdW1iZXIodm1vZGUpKQogICAgSlNfVG9JbnQzMihjdHgsICZtb2RlLCB2bW9kZSk7CiAgbGV4ZXJfaW5pdChsZXgsIG1vZGUsIGN0eCk7CgogIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCBwcm90bywganNfbGV4ZXJfY2xhc3NfaWQpOwoKICBpZihKU19Jc0V4Y2VwdGlvbihvYmopKQogICAgZ290byBmYWlsOwogIEpTX1NldE9wYXF1ZShvYmosIGxleCk7CgogIGxleC0+aW5wdXQgPSBqc19pbnB1dF9jaGFycyhjdHgsIHZpbnB1dCk7CgogIHJldHVybiBvYmo7CmZhaWw6CiAganNfZnJlZShjdHgsIGxleCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgb2JqKTsKICByZXR1cm4gSlNfRVhDRVBUSU9OOwp9CgpKU1ZhbHVlCmpzX2xleGVyX3dyYXAoSlNDb250ZXh0KiBjdHgsIExleGVyKiBsZXgpIHsKICBKU1ZhbHVlIG9iajsKCiAgb2JqID0gSlNfTmV3T2JqZWN0UHJvdG9DbGFzcyhjdHgsIGxleGVyX3Byb3RvLCBqc19sZXhlcl9jbGFzc19pZCk7CiAgSlNfU2V0T3BhcXVlKG9iaiwgbGV4KTsKICByZXR1cm4gb2JqOwp9CgpKU1ZhbHVlCmpzX2xleGVyX2FkZF9ydWxlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgbWFnaWMpIHsKICBMZXhlciogbGV4OwogIGNoYXIqIG5hbWU7CiAgaW50NjRfdCBtYXNrID0gLTEsIHNraXAgPSAwOwogIFJlZ0V4cCBleHByOwogIEpTTGV4ZXJSdWxlKiBqc3J1bGUgPSAwOwoKICBpZighKGxleCA9IGpzX2xleGVyX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIG5hbWUgPSAobWFnaWMgfHwgSlNfSXNTdHJpbmcoYXJndlswXSkpID8ganNfdG9zdHJpbmcoY3R4LCBhcmd2WzBdKSA6IDA7CiAgZXhwciA9IHJlZ2V4cF9mcm9tX2FyZ3YoYXJnYyAtIDEsICZhcmd2WzFdLCBjdHgpOwoKICBpZihhcmdjID49IDMgJiYgSlNfSXNOdW1iZXIoYXJndlsyXSkpCiAgICBKU19Ub0ludDY0KGN0eCwgJm1hc2ssIGFyZ3ZbMl0pOwoKICBKU1ZhbHVlIHNraXB2ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCB0aGlzX3ZhbCwgInNraXAiKTsKICBpZihKU19Jc051bWJlcihza2lwdikpCiAgICBKU19Ub0ludDY0KGN0eCwgJnNraXAsIHNraXB2KTsKICBKU19GcmVlVmFsdWUoY3R4LCBza2lwdik7CgogIGlmKGFyZ2MgPiAzIHx8IEpTX0lzRnVuY3Rpb24oY3R4LCBhcmd2W2FyZ2MgLSAxXSkpIHsKICAgIGpzcnVsZSA9IGpzX21hbGxvYyhjdHgsIHNpemVvZihKU0xleGVyUnVsZSkpOwoKICAgIGpzcnVsZS0+YWN0aW9uID0gSlNfRHVwVmFsdWUoY3R4LCBhcmd2W2FyZ2MgLSAxXSk7CiAgICBqc3J1bGUtPnNraXAgPSAhIShtYXNrICYgc2tpcCk7CiAgfQoKICBpZihtYWdpYykgewogICAgaW50IGluZGV4OwogICAgTGV4ZXJSdWxlKiBydWxlOwoKICAgIGlmKChpbmRleCA9IGxleGVyX3J1bGVfYWRkKGxleCwgbmFtZSwgZXhwci5zb3VyY2UpKSA9PSAtMSkKICAgICAgcmV0dXJuIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJMZXhlciBydWxlICclcycgbm90IHVuaXF1ZSIsIG5hbWUpOwoKICAgIHJ1bGUgPSBsZXhlcl9ydWxlX2F0KGxleCwgaW5kZXgpOwogICAgcnVsZS0+b3BhcXVlID0ganNydWxlOwoKICAgIHJldHVybiBKU19OZXdJbnQzMihjdHgsIGluZGV4KTsKICB9IGVsc2UgewogICAgbGV4ZXJfZGVmaW5lKGxleCwgbmFtZSwgZXhwci5zb3VyY2UpOwogIH0KCiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKSlNWYWx1ZQpqc19sZXhlcl9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG5ld190YXJnZXQsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgSlNWYWx1ZSBwcm90bywgcmV0OwogIExleGVyKiBsZXg7CiAgaW50NjRfdCBtYXNrID0gTUFTS19BTEw7CiAgLyogdXNpbmcgbmV3X3RhcmdldCB0byBnZXQgdGhlIHByb3RvdHlwZSBpcyBuZWNlc3Nhcnkgd2hlbiB0aGUKICAgICAgY2xhc3MgaXMgZXh0ZW5kZWQuICovCiAgcHJvdG8gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG5ld190YXJnZXQsICJwcm90b3R5cGUiKTsKICBpZihKU19Jc0V4Y2VwdGlvbihwcm90bykpCiAgICBwcm90byA9IGxleGVyX3Byb3RvOyAvLyBKU19EdXBWYWx1ZShjdHgsIGxleGVyX3Byb3RvKTsKCiAgcmV0ID0ganNfbGV4ZXJfbmV3KGN0eCwgcHJvdG8sIGFyZ2MgPiAwID8gYXJndlswXSA6IEpTX1VOREVGSU5FRCwgYXJnYyA+IDEgPyBhcmd2WzFdIDogSlNfVU5ERUZJTkVEKTsKCiAgaWYoKGxleCA9IEpTX0dldE9wYXF1ZShyZXQsIGpzX2xleGVyX2NsYXNzX2lkKSkpIHsKICAgIGludCBpID0gMjsKCiAgICBpZihsZXgtPmxvYy5maWxlID09IC0xICYmIGkgPCBhcmdjICYmIEpTX0lzU3RyaW5nKGFyZ3ZbaV0pKQogICAgICBsZXgtPmxvYy5maWxlID0gSlNfVmFsdWVUb0F0b20oY3R4LCBhcmd2W2krK10pOwoKICAgIGlmKGkgPCBhcmdjICYmIEpTX0lzTnVtYmVyKGFyZ3ZbaV0pKSB7CiAgICAgIHVpbnQzMl90IG1vZGUgPSAwOwogICAgICBKU19Ub1VpbnQzMihjdHgsICZtb2RlLCBhcmd2W2krK10pOwogICAgICBsZXgtPm1vZGUgfD0gbW9kZTsKICAgIH0KICAgIGlmKGkgPCBhcmdjICYmIEpTX0lzTnVtYmVyKGFyZ3ZbaV0pKQogICAgICBKU19Ub0ludDY0KGN0eCwgJm1hc2ssIGFyZ3ZbaSsrXSk7CiAgfQogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAibWFzayIsIEpTX05ld0ludDY0KGN0eCwgbWFzaykpOwoKICByZXR1cm4gcmV0Owp9CgplbnVtIHsKICBNRVRIT0RfU0VUX0lOUFVUID0gMCwKICBNRVRIT0RfU0tJUF9CWVRFUywKICBNRVRIT0RfU0tJUF9UT0tFTiwKICBNRVRIT0RfQkFDSywKICBNRVRIT0RfUEVFS0MsCiAgTUVUSE9EX0dFVEMsCiAgTUVUSE9EX1NLSVBfQ0hBUlMsCiAgTUVUSE9EX0dFVF9SQU5HRSwKICBNRVRIT0RfQ1VSUkVOVF9MSU5FLAogIE1FVEhPRF9UT0tFTl9DTEFTUywKICBNRVRIT0RfR0VUX1JVTEUsCiAgTUVUSE9EX1NLSVBfVU5USUwsCiAgTUVUSE9EX0VSUk9SLAogIE1FVEhPRF9QVVNIX1NUQVRFLAogIE1FVEhPRF9QT1BfU1RBVEUsCiAgTUVUSE9EX1RPUF9TVEFURSwKfTsKCkpTVmFsdWUKanNfbGV4ZXJfbWV0aG9kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgbWFnaWMpIHsKICBMZXhlciogbGV4OwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZighKGxleCA9IGpzX2xleGVyX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIHN3aXRjaChtYWdpYykgewogICAgY2FzZSBNRVRIT0RfU0VUX0lOUFVUOiB7CiAgICAgIExleGVyKiBvdGhlcjsKICAgICAgSW5wdXRCdWZmZXIgaW5wdXQ7CiAgICAgIExvY2F0aW9uIGxvYyA9IHswLCAwLCAwLCAtMSwgMH07CgogICAgICBpZigob3RoZXIgPSBKU19HZXRPcGFxdWUoYXJndlswXSwganNfbGV4ZXJfY2xhc3NfaWQpKSkgewogICAgICAgIGlucHV0ID0gaW5wdXRfYnVmZmVyX2Nsb25lKCZvdGhlci0+aW5wdXQsIGN0eCk7CiAgICAgICAgbG9jID0gb3RoZXItPmxvYzsKICAgICAgICAvLyBsZXgtPnN0YXJ0ID0gb3RoZXItPnN0YXJ0OwogICAgICB9IGVsc2UgewogICAgICAgIGlucHV0ID0ganNfaW5wdXRfY2hhcnMoY3R4LCBhcmd2WzBdKTsKICAgICAgfQoKICAgICAgaW5wdXRfYnVmZmVyX2ZyZWUoJmxleC0+aW5wdXQsIGN0eCk7CiAgICAgIGxleC0+aW5wdXQgPSBpbnB1dDsKICAgICAgbG9jYXRpb25fcmVsZWFzZV9ydCgmbGV4LT5sb2MsIEpTX0dldFJ1bnRpbWUoY3R4KSk7CiAgICAgIGxleC0+bG9jID0gbG9jOwoKICAgICAgaWYoYXJnYyA+IDEgJiYgSlNfSXNTdHJpbmcoYXJndlsxXSkpIHsKICAgICAgICBpZihsZXgtPmxvYy5maWxlID4gLTEpCiAgICAgICAgICBKU19GcmVlQXRvbShjdHgsIGxleC0+bG9jLmZpbGUpOwogICAgICAgIGxleC0+bG9jLmZpbGUgPSBKU19WYWx1ZVRvQXRvbShjdHgsIGFyZ3ZbMV0pOwogICAgICB9CgogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9TS0lQX0JZVEVTOiB7CiAgICAgIHVpbnQzMl90IG4gPSAwOwogICAgICBKU19Ub1VpbnQzMihjdHgsICZuLCBhcmd2WzBdKTsKCiAgICAgIGlmKG4gPiBsZXgtPmJ5dGVfbGVuZ3RoKQogICAgICAgIHJldCA9IEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJza2lwQnl0ZXMoKTogY291bnQgbiA+ICV6dSIsIGxleC0+Ynl0ZV9sZW5ndGgpOwogICAgICBlbHNlCiAgICAgICAgcmV0ID0gSlNfTmV3VWludDMyKGN0eCwgbGV4ZXJfc2tpcF9uKGxleCwgbikpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9TS0lQX1RPS0VOOiB7CiAgICAgIGlmKGxleC0+dG9rZW5faWQgPT0gLTEpCiAgICAgICAgcmV0ID0gSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgInNraXBUb2tlbigpOiBsZXhlciB0b2tlbiBpZCBpcyAtMSIpOwogICAgICBlbHNlIGlmKGxleC0+Ynl0ZV9sZW5ndGggPT0gMCkKICAgICAgICByZXQgPSBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAic2tpcFRva2VuKCk6IGxleGVyIHRva2VuIGxlbmd0aCBpcyAwIik7CiAgICAgIGVsc2UKICAgICAgICByZXQgPSBKU19OZXdVaW50MzIoY3R4LCBsZXhlcl9za2lwKGxleCkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9CQUNLOiB7CiAgICAgIGludCBpOwogICAgICBmb3IoaSA9IDA7IGkgPCBhcmdjOyBpKyspIHsKICAgICAgICBUb2tlbiogdG9rOwogICAgICAgIExvY2F0aW9uKiBsb2M7CiAgICAgICAgaWYoKGxvYyA9IGpzX2xvY2F0aW9uX2RhdGEyKGN0eCwgYXJndltpXSkpKSB7CiAgICAgICAgICBsZXhlcl9zZXRfbG9jYXRpb24obGV4LCBsb2MsIGN0eCk7CiAgICAgICAgICBpZihsZXgtPmJ5dGVfbGVuZ3RoID4gMCAmJiBsZXgtPnRva2VuX2lkICE9IC0xKQogICAgICAgICAgICBsZXhlcl9jbGVhcl90b2tlbihsZXgpOwogICAgICAgICAgcmV0ID0gSlNfTmV3SW50MzIoY3R4LCBsZXhlcl9wZWVrKGxleCwgLyoxIDw8IGxleC0+c3RhdGUsKi8gMCwgY3R4KSk7CiAgICAgICAgfSBlbHNlIGlmKCh0b2sgPSBqc190b2tlbl9kYXRhKGFyZ3ZbaV0pKSkgewogICAgICAgICAgbGV4ZXJfc2V0X2xvY2F0aW9uKGxleCwgdG9rLT5sb2MsIGN0eCk7CiAgICAgICAgICBsZXgtPmJ5dGVfbGVuZ3RoID0gdG9rLT5ieXRlX2xlbmd0aDsKICAgICAgICAgIGxleC0+c2VxID0gdG9rLT5zZXE7CiAgICAgICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIHRvay0+aWQpOwogICAgICAgIH0gLyplbHNlIGlmKEpTX0lzU3RyaW5nKGFyZ3ZbaV0pKSB7CiAgICAgICAgICBzaXplX3QgbGVuOwogICAgICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nTGVuKGN0eCwgJmxlbiwgYXJndltpXSk7CiAgICAgICAgICBpZihsZXgtPnBvcyA+PSBsZW4gJiYgIW1lbWNtcCgmbGV4LT5kYXRhW2xleC0+cG9zIC0gbGVuXSwgc3RyLCBsZW4pKSB7CiAgICAgICAgICAgIExvY2F0aW9uIGRpZmY7CiAgICAgICAgICAgIGxvY2F0aW9uX3plcm8oJmRpZmYpOwogICAgICAgICAgICBsb2NhdGlvbl9jb3VudCgmZGlmZiwgKGNvbnN0IHVpbnQ4X3QqKSZsZXgtPmRhdGFbbGV4LT5wb3MgLSBsZW5dLCBsZW4pOwogICAgICAgICAgICBsb2NhdGlvbl9zdWIoJmxleC0+bG9jLCAmZGlmZik7CiAgICAgICAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgbGV4ZXJfcGVlayhsZXgsIDEgPDwgbGV4LT5zdGF0ZSwgMCwgY3R4KSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjaGFyKiBidWYgPSBieXRlX2VzY2FwZSgoY29uc3QgY2hhciopJmxleC0+ZGF0YVtsZXgtPnBvcyAtIGxlbl0sIGxlbik7CiAgICAgICAgICAgIHJldCA9IEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJMZXhlci5wcm90b3R5cGUuYmFjaygnJXMnKSBgJXNgIC4uLiIsIHN0ciwgYnVmKTsKICAgICAgICAgICAgZnJlZShidWYpOwogICAgICAgICAgfQogICAgICAgICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdHIpOwogICAgICAgIH0qLwogICAgICAgIGVsc2UgewogICAgICAgICAgcmV0ID0gSlNfVGhyb3dUeXBlRXJyb3IoY3R4LCAiTGV4ZXIucHJvdG90eXBlLmJhY2soKSBuZWVkcyB0b2tlbiBvciBsb2NhdGlvbiIpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBNRVRIT0RfUEVFS0M6IHsKICAgICAgaWYoIWlucHV0X2J1ZmZlcl9lb2YoJmxleC0+aW5wdXQpKSB7CiAgICAgICAgc2l6ZV90IGxlbjsKICAgICAgICBjb25zdCB1aW50OF90KiBidWYgPSBpbnB1dF9idWZmZXJfcGVlaygmbGV4LT5pbnB1dCwgJmxlbik7CiAgICAgICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKWJ1ZiwgbGVuKTsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9HRVRDOiB7CiAgICAgIGlmKCFpbnB1dF9idWZmZXJfZW9mKCZsZXgtPmlucHV0KSkgewogICAgICAgIHNpemVfdCBsZW47CiAgICAgICAgY29uc3QgdWludDhfdCogYnVmID0gaW5wdXRfYnVmZmVyX2dldCgmbGV4LT5pbnB1dCwgJmxlbik7CiAgICAgICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKWJ1ZiwgbGVuKTsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9TS0lQX0NIQVJTOiB7CiAgICAgIGlmKCFpbnB1dF9idWZmZXJfZW9mKCZsZXgtPmlucHV0KSkgewogICAgICAgIGludDMyX3QgbnRpbWVzID0gMTsKICAgICAgICBjb25zdCB1aW50OF90KiBwID0gMDsKICAgICAgICBzaXplX3QgbjsKICAgICAgICBpZihhcmdjID4gMCkKICAgICAgICAgIEpTX1RvSW50MzIoY3R4LCAmbnRpbWVzLCBhcmd2WzBdKTsKICAgICAgICB3aGlsZShudGltZXMtLSA+IDApIHsgcCA9IGlucHV0X2J1ZmZlcl9nZXQoJmxleC0+aW5wdXQsICZuKTsgfQogICAgICAgIGlmKHApCiAgICAgICAgICByZXQgPSBKU19OZXdTdHJpbmdMZW4oY3R4LCAoY29uc3QgY2hhciopcCwgbik7CiAgICAgIH0KICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBNRVRIT0RfU0tJUF9VTlRJTDogewogICAgICBpZighaW5wdXRfYnVmZmVyX2VvZigmbGV4LT5pbnB1dCkpIHsKICAgICAgICBKU1ZhbHVlQ29uc3QgcHJlZDsKICAgICAgICBpZighSlNfSXNGdW5jdGlvbihjdHgsIGFyZ3ZbMF0pKQogICAgICAgICAgcmV0dXJuIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgImFyZ3VtZW50IDEgaXMgbm90IGEgZnVuY3Rpb24iKTsKICAgICAgICBwcmVkID0gYXJndlswXTsKICAgICAgICB3aGlsZShsZXgtPnBvcyA8IGxleC0+c2l6ZSkgewogICAgICAgICAgc2l6ZV90IG47CiAgICAgICAgICBjb25zdCB1aW50OF90KiBwID0gaW5wdXRfYnVmZmVyX3BlZWsoJmxleC0+aW5wdXQsICZuKTsKICAgICAgICAgIEpTVmFsdWUgc3RyID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKXAsIG4pOwogICAgICAgICAgSlNWYWx1ZSByZXQgPSBKU19DYWxsKGN0eCwgcHJlZCwgdGhpc192YWwsIDEsICZzdHIpOwogICAgICAgICAgQk9PTCBiID0gSlNfVG9Cb29sKGN0eCwgcmV0KTsKICAgICAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHJldCk7CiAgICAgICAgICBpZihiKSB7CiAgICAgICAgICAgIHJldCA9IHN0cjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCBzdHIpOwogICAgICAgICAgaW5wdXRfYnVmZmVyX2dldGMoJmxleC0+aW5wdXQpOwogICAgICAgICAgLy8gbGV4LT5zdGFydCA9IGxleC0+cG9zOwogICAgICAgIH0KICAgICAgfQogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9HRVRfUkFOR0U6IHsKICAgICAgc2l6ZV90IHN0YXJ0LCBlbmQ7CiAgICAgIHN0YXJ0ID0gbGV4LT5wb3M7CiAgICAgIGVuZCA9IHN0YXJ0ICsgbGV4LT5ieXRlX2xlbmd0aDsKICAgICAgaWYoYXJnYyA+IDApIHsKICAgICAgICBqc192YWx1ZV90b3NpemUoY3R4LCAmc3RhcnQsIGFyZ3ZbMF0pOwogICAgICAgIGlmKGFyZ2MgPiAxKQogICAgICAgICAganNfdmFsdWVfdG9zaXplKGN0eCwgJmVuZCwgYXJndlsxXSk7CiAgICAgIH0KICAgICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKSZsZXgtPmRhdGFbc3RhcnRdLCBlbmQgLSBzdGFydCk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTUVUSE9EX0NVUlJFTlRfTElORTogewogICAgICByZXQgPSBKU19OZXdTdHJpbmcoY3R4LCBsZXhlcl9jdXJyZW50X2xpbmUobGV4LCBjdHgpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBNRVRIT0RfVE9LRU5fQ0xBU1M6IHsKICAgICAgVG9rZW4qIHRvazsKICAgICAgTGV4ZXJSdWxlKiBydWxlOwogICAgICBpbnQzMl90IGlkID0gLTE7CgogICAgICBpZigodG9rID0gSlNfR2V0T3BhcXVlKGFyZ3ZbMF0sIGpzX3Rva2VuX2NsYXNzX2lkKSkpCiAgICAgICAgaWQgPSB0b2stPmlkOwogICAgICBlbHNlCiAgICAgICAgSlNfVG9JbnQzMihjdHgsICZpZCwgYXJndlswXSk7CgogICAgICBpZigocnVsZSA9IGxleGVyX3J1bGVfYXQobGV4LCBpZCkpKQogICAgICAgIHJldCA9IEpTX05ld1N0cmluZyhjdHgsIHJ1bGUtPm5hbWUpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9HRVRfUlVMRTogewogICAgICBMZXhlclJ1bGUqIHJ1bGU7CgogICAgICBpZihKU19Jc1N0cmluZyhhcmd2WzBdKSkgewogICAgICAgIHNpemVfdCBsZW47CiAgICAgICAgY29uc3QgY2hhciogbmFtZSA9IEpTX1RvQ1N0cmluZ0xlbihjdHgsICZsZW4sIGFyZ3ZbMF0pOwogICAgICAgIGlmKCEocnVsZSA9IGxleGVyX3J1bGVfZmluZChsZXgsIG5hbWUpKSkKICAgICAgICAgIHJ1bGUgPSBsZXhlcl9maW5kX2RlZmluaXRpb24obGV4LCBuYW1lLCBsZW4pOwogICAgICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgbmFtZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaW50MzJfdCBpZCA9IC0xOwogICAgICAgIEpTX1RvSW50MzIoY3R4LCAmaWQsIGFyZ3ZbMF0pOwogICAgICAgIHJ1bGUgPSBsZXhlcl9ydWxlX2F0KGxleCwgaWQpOwogICAgICB9CgogICAgICBpZihydWxlKSB7CiAgICAgICAgcmV0ID0ganNfbGV4ZXJfcnVsZV9uZXcoY3R4LCBsZXgsIHJ1bGUpOwogICAgICB9CgogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9FUlJPUjogewogICAgICBjb25zdCBjaGFyKiBtZXNzYWdlID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlswXSk7CiAgICAgIGNoYXIqIGxvY2F0aW9uID0gbG9jYXRpb25fdG9zdHJpbmcoJmxleC0+bG9jLCBjdHgpOwoKICAgICAgcmV0ID0gSlNfVGhyb3dTeW50YXhFcnJvcihjdHgsICIlcyBhdCAlcyIsIG1lc3NhZ2UsIGxvY2F0aW9uKTsKCiAgICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgbWVzc2FnZSk7CiAgICAgIGpzX2ZyZWUoY3R4LCBsb2NhdGlvbik7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTUVUSE9EX1BVU0hfU1RBVEU6IHsKICAgICAgY29uc3QgY2hhciogc3RhdGUgPSBKU19Ub0NTdHJpbmcoY3R4LCBhcmd2WzBdKTsKICAgICAgaW50IGlkOwoKICAgICAgaWQgPSBsZXhlcl9zdGF0ZV9wdXNoKGxleCwgc3RhdGUpOwogICAgICAvLyBwcmludGYoIlslenVdIHB1c2hTdGF0ZSgnJXMnKVxuIiwgbGV4ZXJfc3RhdGVfZGVwdGgobGV4KSwgc3RhdGUpOwogICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIGlkKTsKICAgICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdGF0ZSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTUVUSE9EX1BPUF9TVEFURTogewogICAgICBpbnQgaWQ7CiAgICAgIGlmKGxleGVyX3N0YXRlX2RlcHRoKGxleCkgPiAwKSB7CiAgICAgICAgaWQgPSBsZXhlcl9zdGF0ZV9wb3AobGV4KTsKICAgICAgICAvLyBwcmludGYoIlslenVdIHBvcFN0YXRlKCkgPSAnJXMnXG4iLCBsZXhlcl9zdGF0ZV9kZXB0aChsZXgpLAogICAgICAgIC8vIGxleGVyX3N0YXRlX25hbWUobGV4LCBpZCkpOwogICAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgaWQpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldCA9IEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJsZXhlciAoJXMpIGRlcHRoICV6dSIsIGxleGVyX3N0YXRlX3RvcG5hbWUobGV4KSwgbGV4ZXJfc3RhdGVfZGVwdGgobGV4KSk7CiAgICAgIH0KCiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTUVUSE9EX1RPUF9TVEFURTogewogICAgICBpbnQzMl90IGluZGV4ID0gMCwgaWQ7CiAgICAgIGlmKGFyZ2MgPiAwICYmIEpTX0lzTnVtYmVyKGFyZ3ZbMF0pKQogICAgICAgIEpTX1RvSW50MzIoY3R4LCAmaW5kZXgsIGFyZ3ZbMF0pOwoKICAgICAgaWYoKGlkID0gaW5kZXggPiAwID8gbGV4ZXJfc3RhdGVfdG9wKGxleCwgaW5kZXgpIDogbGV4LT5zdGF0ZSkgPj0gMCkKICAgICAgICByZXQgPSBKU19OZXdTdHJpbmcoY3R4LCBsZXhlcl9zdGF0ZV9uYW1lKGxleCwgaWQpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgfQogIHJldHVybiByZXQ7Cn0KCmVudW0gewogIFBST1BfU0laRSA9IDAsCiAgUFJPUF9QT1MsCiAgUFJPUF9FT0YsCiAgUFJPUF9GSUxFTkFNRSwKICBQUk9QX0xPQywKICBQUk9QX1JVTEVOQU1FUywKICBQUk9QX1JVTEVTLAogIFBST1BfTU9ERSwKICBQUk9QX1NFUSwKICBQUk9QX0JZVEVfTEVOR1RILAogIFBST1BfQ0hBUl9MRU5HVEgsCiAgUFJPUF9TVEFURSwKICBQUk9QX1NUQVRFUywKICBQUk9QX1NUQVRFX0RFUFRILAogIFBST1BfU1RBVEVfU1RBQ0ssCiAgUFJPUF9TT1VSQ0UsCiAgUFJPUF9MRVhFTUUsCiAgUFJPUF9UT0tFTiwKfTsKCkpTVmFsdWUKanNfbGV4ZXJfZ2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBtYWdpYykgewogIExleGVyKiBsZXg7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIGlmKCEobGV4ID0ganNfbGV4ZXJfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgc3dpdGNoKG1hZ2ljKSB7CiAgICBjYXNlIFBST1BfUE9TOiB7CiAgICAgIHJldCA9IEpTX05ld0ludDY0KGN0eCwgbGV4LT5wb3MpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfU0laRTogewogICAgICByZXQgPSBKU19OZXdJbnQ2NChjdHgsIGxleC0+c2l6ZSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgICAgLyogICAgY2FzZSBQUk9QX1NUQVJUOiB7CiAgICAgICAgICAgIHJldCA9IEpTX05ld0ludDY0KGN0eCwgbGV4LT5zdGFydCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfSovCgogICAgY2FzZSBQUk9QX0VPRjogewogICAgICByZXQgPSBKU19OZXdCb29sKGN0eCwgaW5wdXRfYnVmZmVyX2VvZigmbGV4LT5pbnB1dCkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfRklMRU5BTUU6IHsKICAgICAgcmV0ID0gbGV4LT5sb2MuZmlsZSA+IC0xID8gSlNfQXRvbVRvVmFsdWUoY3R4LCBsZXgtPmxvYy5maWxlKSA6IEpTX1VOREVGSU5FRDsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX0xPQzogewogICAgICBMb2NhdGlvbiogbG9jOwoKICAgICAgaWYoKGxvYyA9IGxvY2F0aW9uX25ldyhjdHgpKSkgewogICAgICAgIGxvY2F0aW9uX2NvcHkobG9jLCAmbGV4LT5sb2MsIGN0eCk7CiAgICAgICAgcmV0ID0ganNfbG9jYXRpb25fd3JhcChjdHgsIGxvYyk7CiAgICAgIH0KICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX1JVTEVOQU1FUzogewogICAgICBMZXhlclJ1bGUqIHJ1bGU7CiAgICAgIHVpbnQzMl90IGkgPSAwOwogICAgICByZXQgPSBKU19OZXdBcnJheShjdHgpOwoKICAgICAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5ydWxlcywgcnVsZSkgeyBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSsrLCBKU19OZXdTdHJpbmcoY3R4LCBydWxlLT5uYW1lKSk7IH0KICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX1JVTEVTOiB7CiAgICAgIExleGVyUnVsZSogcnVsZTsKICAgICAgdWludDMyX3QgaSA9IDA7CiAgICAgIHJldCA9IEpTX05ld09iamVjdChjdHgpOwoKICAgICAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5ydWxlcywgcnVsZSkgewogICAgICAgIC8vIHByaW50ZigicnVsZSAjJSIgUFJJdTMyICIgJyVzJyAnJXMnXG4iLCBpLCBydWxlLT5uYW1lLCBydWxlLT5leHByKTsKICAgICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHJldCwgcnVsZS0+bmFtZSwgSlNfTmV3VWludDMyKGN0eCwgaSkpOwogICAgICAgIGkrKzsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfTU9ERTogewogICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIGxleC0+bW9kZSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9TRVE6IHsKICAgICAgcmV0ID0gSlNfTmV3SW50NjQoY3R4LCBsZXgtPnNlcSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9CWVRFX0xFTkdUSDogewogICAgICByZXQgPSBKU19OZXdVaW50MzIoY3R4LCBsZXgtPmJ5dGVfbGVuZ3RoKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX0NIQVJfTEVOR1RIOiB7CiAgICAgIHJldCA9IEpTX05ld1VpbnQzMihjdHgsIGxleGVyX2NoYXJsZW4obGV4KSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9TVEFURTogewogICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIGxleC0+c3RhdGUpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfU1RBVEVTOiB7CiAgICAgIHNpemVfdCBpID0gMDsKICAgICAgcmV0ID0gSlNfTmV3QXJyYXkoY3R4KTsKICAgICAgZm9yKDs7KSB7CiAgICAgICAgY2hhciogbmFtZTsKICAgICAgICBpZigobmFtZSA9IGxleGVyX3N0YXRlX25hbWUobGV4LCBpKSkgPT0gMCkKICAgICAgICAgIGJyZWFrOwogICAgICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpKyssIEpTX05ld1N0cmluZyhjdHgsIG5hbWUpKTsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfU1RBVEVfREVQVEg6IHsKICAgICAgcmV0ID0gSlNfTmV3VWludDMyKGN0eCwgbGV4ZXJfc3RhdGVfZGVwdGgobGV4KSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9TVEFURV9TVEFDSzogewogICAgICBzaXplX3QgaSA9IDAsIG4gPSB2ZWN0b3Jfc2l6ZSgmbGV4LT5zdGF0ZV9zdGFjaywgc2l6ZW9mKGludDMyX3QpKTsKICAgICAgcmV0ID0gSlNfTmV3QXJyYXkoY3R4KTsKICAgICAgZm9yKDsgaSA8IG47IGkrKykgewogICAgICAgIGludDMyX3Qgc3RhdGUgPSAqKGludDMyX3QqKXZlY3Rvcl9hdCgmbGV4LT5zdGF0ZV9zdGFjaywgc2l6ZW9mKGludDMyX3QpLCBpKTsKICAgICAgICBjaGFyKiBuYW1lOwogICAgICAgIGlmKChuYW1lID0gbGV4ZXJfc3RhdGVfbmFtZShsZXgsIHN0YXRlKSkgPT0gMCkKICAgICAgICAgIGJyZWFrOwogICAgICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpLCBKU19OZXdTdHJpbmcoY3R4LCBuYW1lKSk7CiAgICAgIH0KICAgICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIGksIEpTX05ld1N0cmluZyhjdHgsIGxleGVyX3N0YXRlX25hbWUobGV4LCBsZXgtPnN0YXRlKSkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfU09VUkNFOiB7CiAgICAgIHJldCA9IEpTX05ld1N0cmluZ0xlbihjdHgsIChjb25zdCBjaGFyKilsZXgtPmRhdGEsIGxleC0+c2l6ZSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBQUk9QX0xFWEVNRTogewogICAgICByZXQgPSBKU19OZXdTdHJpbmdMZW4oY3R4LCAoY29uc3QgY2hhciopbGV4LT5kYXRhICsgbGV4LT5wb3MsIGxleC0+Ynl0ZV9sZW5ndGgpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJPUF9UT0tFTjogewogICAgICBUb2tlbiogdG9rOwoKICAgICAgaWYobGV4LT50b2tlbl9pZCA8IDApCiAgICAgICAgcmV0ID0gSlNfTlVMTDsKICAgICAgZWxzZSBpZigodG9rID0gbGV4ZXJfdG9rZW4obGV4LCBsZXgtPnRva2VuX2lkLCBjdHgpKSkKICAgICAgICByZXQgPSBqc190b2tlbl93cmFwKGN0eCwgdG9rKTsKCiAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2xleGVyX3NldChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBKU1ZhbHVlQ29uc3QgdmFsdWUsIGludCBtYWdpYykgewogIExleGVyKiBsZXg7CgogIGlmKCEobGV4ID0ganNfbGV4ZXJfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgc3dpdGNoKG1hZ2ljKSB7CiAgICBjYXNlIFBST1BfUE9TOiB7CiAgICAgIFRva2VuKiB0b2s7CgogICAgICBpZigodG9rID0ganNfdG9rZW5fZGF0YSh2YWx1ZSkpKSB7CiAgICAgICAgbGV4LT5wb3MgPSB0b2stPmxvYy0+Y2hhcl9vZmZzZXQ7CgogICAgICAgIGxvY2F0aW9uX3JlbGVhc2UoJmxleC0+bG9jLCBjdHgpOwogICAgICAgIGxvY2F0aW9uX2NvcHkoJmxleC0+bG9jLCB0b2stPmxvYywgY3R4KTsKICAgICAgICAvLyAgICAgICAgbGV4LT5sb2MgPSB0b2stPmxvYzsKICAgICAgfSAvKiBlbHNlIGlmKEpTX0lzTnVtYmVyKHZhbHVlKSkgewogICAgICAgICB1aW50NjRfdCBuZXdwb3MgPSBsZXgtPnBvczsKICAgICAgICAgSlNfVG9JbmRleChjdHgsICZuZXdwb3MsIHZhbHVlKTsKICAgICAgICAgbGV4LT5wb3MgPSBuZXdwb3M7CiAgICAgICB9ICovCiAgICAgIGVsc2UgewogICAgICAgIHJldHVybiBKU19UaHJvd1R5cGVFcnJvcihjdHgsICJsZXhlci5wb3MgbXVzdCBiZSBhIExvY2F0aW9uIG9iamVjdCIpOwogICAgICB9CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9CWVRFX0xFTkdUSDogewogICAgICBUb2tlbiogdG9rOwogICAgICBpZihKU19Jc051bWJlcih2YWx1ZSkpIHsKICAgICAgICBqc192YWx1ZV90b3NpemUoY3R4LCAmbGV4LT5ieXRlX2xlbmd0aCwgdmFsdWUpOwogICAgICB9IGVsc2UgaWYoKHRvayA9IGpzX3Rva2VuX2RhdGEodmFsdWUpKSkgewogICAgICAgIGxleC0+Ynl0ZV9sZW5ndGggPSB0b2stPmJ5dGVfbGVuZ3RoOwogICAgICB9CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9GSUxFTkFNRTogewogICAgICBpZihsZXgtPmxvYy5maWxlID4gLTEpCiAgICAgICAgSlNfRnJlZUF0b20oY3R4LCBsZXgtPmxvYy5maWxlKTsKICAgICAgbGV4LT5sb2MuZmlsZSA9IEpTX1ZhbHVlVG9BdG9tKGN0eCwgdmFsdWUpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfTU9ERTogewogICAgICBpbnQzMl90IG07CiAgICAgIEpTX1RvSW50MzIoY3R4LCAmbSwgdmFsdWUpOwogICAgICBsZXgtPm1vZGUgPSBtOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJPUF9TRVE6IHsKICAgICAgdWludDY0X3QgczsKICAgICAgSlNfVG9JbmRleChjdHgsICZzLCB2YWx1ZSk7CiAgICAgIGxleC0+c2VxID0gczsKICAgICAgYnJlYWs7CiAgICB9CiAgfQogIHJldHVybiBKU19VTkRFRklORUQ7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfdG9rZW5zKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwpIHsKICBMZXhlciogbGV4OwogIExleGVyUnVsZSogcnVsZTsKICBpbnQgaSA9IDA7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIGlmKCEobGV4ID0ganNfbGV4ZXJfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgcmV0ID0gSlNfTmV3QXJyYXkoY3R4KTsKCiAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5ydWxlcywgcnVsZSkgewogICAgY29uc3QgY2hhciogbmFtZSA9IHJ1bGUtPm5hbWU7CgogICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIGkrKywgSlNfTmV3U3RyaW5nKGN0eCwgbmFtZSkpOwogIH0KICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2xleGVyX3N0YXRlcyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsKSB7CiAgTGV4ZXIqIGxleDsKICBjaGFyKiogY29uZDsKICB1aW50MzJfdCBpID0gMDsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKCiAgaWYoIShsZXggPSBqc19sZXhlcl9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICByZXQgPSBKU19OZXdBcnJheShjdHgpOwoKICB2ZWN0b3JfZm9yZWFjaF90KCZsZXgtPnN0YXRlcywgY29uZCkgeyBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSsrLCBKU19OZXdTdHJpbmcoY3R4LCAqY29uZCkpOyB9CgogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfc3RhdGVzdGFjayhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsKSB7CiAgTGV4ZXIqIGxleDsKICBpbnQzMl90KiBzdGFjazsKICBzaXplX3Qgc2l6ZTsKICBKU1ZhbHVlIGN0b3IsIGJ1ZiwgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZighKGxleCA9IGpzX2xleGVyX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIHNpemUgPSB2ZWN0b3Jfc2l6ZSgmbGV4LT5zdGF0ZV9zdGFjaywgc2l6ZW9mKGludDMyX3QpKSArIDE7CiAgc3RhY2sgPSBqc19tYWxsb2NfcnQoSlNfR2V0UnVudGltZShjdHgpLCBzaXplb2YoaW50MzJfdCkgKiBzaXplKTsKCiAgbWVtY3B5KHN0YWNrLCB2ZWN0b3JfYmVnaW4oJmxleC0+c3RhdGVfc3RhY2spLCBzaXplb2YoaW50MzJfdCkgKiAoc2l6ZSAtIDEpKTsKCiAgc3RhY2tbc2l6ZSAtIDFdID0gbGV4LT5zdGF0ZTsKCiAgYnVmID0gSlNfTmV3QXJyYXlCdWZmZXIoY3R4LCAodm9pZCopc3RhY2ssIHNpemVvZihpbnQzMl90KSAqIHNpemUsIChKU0ZyZWVBcnJheUJ1ZmZlckRhdGFGdW5jKikmanNfZnJlZV9ydCwgc3RhY2ssIEZBTFNFKTsKCiAgY3RvciA9IGpzX2dsb2JhbF9nZXRfc3RyKGN0eCwgIkludDMyQXJyYXkiKTsKCiAgcmV0ID0gSlNfQ2FsbENvbnN0cnVjdG9yKGN0eCwgY3RvciwgMSwgJmJ1Zik7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIGN0b3IpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGJ1Zik7CgogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfZXNjYXBlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgbWFnaWMpIHsKICBJbnB1dEJ1ZmZlciBpbnB1dCA9IGpzX2lucHV0X2NoYXJzKGN0eCwgYXJndlswXSk7CiAgRHluQnVmIG91dHB1dDsKICBqc19kYnVmX2luaXQoY3R4LCAmb3V0cHV0KTsKCiAgbWFnaWMgPyBkYnVmX3B1dF91bmVzY2FwZWRfcHJlZCgmb3V0cHV0LCAoY29uc3QgY2hhciopaW5wdXQuZGF0YSwgaW5wdXQuc2l6ZSwgbGV4ZXJfdW5lc2NhcGVfcHJlZCkKICAgICAgICA6IGRidWZfcHV0X2VzY2FwZWRfcHJlZCgmb3V0cHV0LCAoY29uc3QgY2hhciopaW5wdXQuZGF0YSwgaW5wdXQuc2l6ZSwgbGV4ZXJfZXNjYXBlX3ByZWQpOwoKICByZXR1cm4gZGJ1Zl90b3N0cmluZ19mcmVlKCZvdXRwdXQsIGN0eCk7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfdG9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKCiAgaWYoanNfaXNfcmVnZXhwKGN0eCwgYXJndlswXSkgfHwgSlNfSXNTdHJpbmcoYXJndlswXSkpIHsKICAgIFJlZ0V4cCByZTsKICAgIHJlID0gcmVnZXhwX2Zyb21fYXJndihhcmdjLCBhcmd2LCBjdHgpOwogICAgcmV0ID0gSlNfTmV3U3RyaW5nKGN0eCwgcmUuc291cmNlKTsKICB9IGVsc2UgewogICAgSW5wdXRCdWZmZXIgaW5wdXQ7CiAgICBpbnB1dCA9IGpzX2lucHV0X2NoYXJzKGN0eCwgYXJndlswXSk7CiAgICByZXQgPSBKU19OZXdTdHJpbmdMZW4oY3R4LCAoY29uc3QgY2hhciopaW5wdXQuZGF0YSwgaW5wdXQuc2l6ZSk7CiAgICBpbnB1dF9idWZmZXJfZnJlZSgmaW5wdXQsIGN0eCk7CiAgfQogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfbGV4KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgTGV4ZXIqIGxleDsKICBpbnQgaWQsIHN0YXRlID0gLTE7CgogIGlmKCEobGV4ID0ganNfbGV4ZXJfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgaWYoYXJnYyA+IDAgJiYgSlNfSXNTdHJpbmcoYXJndlswXSkpIHsKICAgIGNvbnN0IGNoYXIqIG5hbWUgPSBKU19Ub0NTdHJpbmcoY3R4LCBhcmd2WzBdKTsKICAgIHN0YXRlID0gbGV4ZXJfc3RhdGVfcHVzaChsZXgsIG5hbWUpOwogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBuYW1lKTsKICB9CgogIGlkID0gbGV4ZXJfbGV4KGxleCwgY3R4LCB0aGlzX3ZhbCwgYXJnYywgYXJndik7CgogIGlmKHN0YXRlID4gLTEpCiAgICBsZXhlcl9zdGF0ZV9wb3AobGV4KTsKCiAgc3dpdGNoKGlkKSB7CiAgICBjYXNlIExFWEVSX0VSUk9SX05PTUFUQ0g6IHsKICAgICAgY2hhciogbGV4ZW1lID0gbGV4ZXJfbGV4ZW1lX3MobGV4LCBjdHgpOwogICAgICBjaGFyKiBmaWxlID0gbG9jYXRpb25fZmlsZSgmbGV4LT5sb2MsIGN0eCk7CgogICAgICByZXQgPSBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiVzOiUiIFBSSXUzMiAiOiUiIFBSSXUzMiAiOiBObyBtYXRjaGluZyB0b2tlbiAoJWQ6ICVzKVxuJS4qc1xuJSpzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXgtPmxvYy5saW5lICsgMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxleC0+bG9jLmNvbHVtbiArIDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXhlcl9zdGF0ZV90b3AobGV4LCAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxleGVyX3N0YXRlX25hbWUobGV4LCBsZXhlcl9zdGF0ZV90b3AobGV4LCAwKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgIGxleGVtZSwqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGludCkoYnl0ZV9jaHIoKGNvbnN0IGNoYXIqKSZsZXgtPmRhdGFbbGV4LT5wb3NdLCBsZXgtPnNpemUgLSBsZXgtPnBvcywgJ1xuJykgKyBsZXgtPmxvYy5jb2x1bW4pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmxleC0+ZGF0YVtsZXgtPnBvcyAtIGxleC0+bG9jLmNvbHVtbl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXgtPmxvYy5jb2x1bW4gKyAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIl4iKTsKICAgICAgaWYoZmlsZSkKICAgICAgICBqc19mcmVlKGN0eCwgZmlsZSk7CiAgICAgIGpzX2ZyZWUoY3R4LCBsZXhlbWUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgTEVYRVJfRU9GOiB7CiAgICAgIHJldCA9IEpTX05VTEw7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBMRVhFUl9FWENFUFRJT046IHsKICAgICAgcmV0ID0gSlNfRVhDRVBUSU9OOwogICAgICBicmVhazsKICAgIH0KICAgIGRlZmF1bHQ6IHsKICAgICAgcmV0ID0gSlNfTmV3SW50MzIoY3R4LCBpZCk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIHJldDsKfQoKZW51bSB7CiAgWUlFTERfSUQgPSAwLAogIFlJRUxEX09CSiA9IDEsCiAgWUlFTERfRE9ORV9WQUxVRSA9IDIsCn07CgpKU1ZhbHVlCmpzX2xleGVyX25leHRmbihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljKSB7CiAgSlNWYWx1ZSByZXQsIHZhbHVlID0gSlNfVU5ERUZJTkVEOwogIExleGVyKiBsZXg7CgogIGlmKCEobGV4ID0ganNfbGV4ZXJfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgcmV0ID0ganNfbGV4ZXJfbGV4KGN0eCwgdGhpc192YWwsIGFyZ2MsIGFyZ3YpOwoKICBpZihKU19Jc051bWJlcihyZXQpKSB7CiAgICBpbnQzMl90IGlkOwoKICAgIEpTX1RvSW50MzIoY3R4LCAmaWQsIHJldCk7CgogICAgaWYobWFnaWMgJiBZSUVMRF9PQkopIHsKICAgICAgVG9rZW4qIHRvayA9IGxleGVyX3Rva2VuKGxleCwgaWQsIGN0eCk7CiAgICAgIHZhbHVlID0ganNfdG9rZW5fd3JhcChjdHgsIHRvayk7CiAgICB9IGVsc2UgewogICAgICB2YWx1ZSA9IEpTX05ld0ludDMyKGN0eCwgaWQpOwogICAgfQogIH0gZWxzZSB7CiAgICB2YWx1ZSA9IEpTX0R1cFZhbHVlKGN0eCwgcmV0KTsKICB9CiAgSlNfRnJlZVZhbHVlKGN0eCwgcmV0KTsKCiAgaWYobWFnaWMgJiBZSUVMRF9ET05FX1ZBTFVFKSB7CiAgICBKU1ZhbHVlIHJldCA9IEpTX05ld09iamVjdChjdHgpOwogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCByZXQsICJ2YWx1ZSIsIHZhbHVlKTsKICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAiZG9uZSIsIEpTX05ld0Jvb2woY3R4LCBKU19Jc1VuZGVmaW5lZCh2YWx1ZSkpKTsKICAgIHJldHVybiByZXQ7CiAgfQoKICByZXR1cm4gdmFsdWU7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfbmV4dChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgQk9PTCogcGRvbmUsIGludCBtYWdpYykgewogIEpTVmFsdWUgcmV0ID0ganNfbGV4ZXJfbmV4dGZuKGN0eCwgdGhpc192YWwsIGFyZ2MsIGFyZ3YsIG1hZ2ljKTsKCiAgKnBkb25lID0gSlNfSXNVbmRlZmluZWQocmV0KTsKCiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19sZXhlcl9jYWxsKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgZnVuY19vYmosIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIGludCBmbGFncykgewogIExleGVyKiBsZXg7CiAgaW50MzJfdCByZXN1bHQ7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgSlNWYWx1ZUNvbnN0IGFyZyA9IGFyZ2MgPiAwID8gYXJndlswXSA6IEpTX1VOREVGSU5FRDsKCiAgaWYoIShsZXggPSBKU19HZXRPcGFxdWUyKGN0eCwgZnVuY19vYmosIGpzX2xleGVyX2NsYXNzX2lkKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICBpZihhcmdjID4gMCAmJiBKU19Jc051bWJlcihhcmd2WzBdKSkgewogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBmdW5jX29iaiwgIm1hc2siLCBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbMF0pKTsKICB9CgogIC8qaWYoYXJnYyA+IDEgJiYgSlNfSXNOdW1iZXIoYXJndlsxXSkpIHsKICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgZnVuY19vYmosICJza2lwIiwgSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSk7CiAgfSovCgogIHJldHVybiBKU19EdXBWYWx1ZShjdHgsIGZ1bmNfb2JqKTsKfQoKSlNWYWx1ZQpqc19sZXhlcl9pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIEpTVmFsdWUgbmV4dCwgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CgogIG5leHQgPSBKU19OZXdDRnVuY3Rpb24yKGN0eCwgKEpTQ0Z1bmN0aW9uKikmanNfbGV4ZXJfbmV4dGZuLCAibmV4dCIsIDAsIEpTX0NGVU5DX2dlbmVyaWNfbWFnaWMsIFlJRUxEX0lEIHwgWUlFTERfRE9ORV9WQUxVRSk7CgogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgcmV0LCAibmV4dCIsIGpzX2Z1bmN0aW9uX2JpbmRfdGhpcyhjdHgsIG5leHQsIHRoaXNfdmFsKSk7CiAgcmV0dXJuIHJldDsKCiAgcmV0dXJuIEpTX0R1cFZhbHVlKGN0eCwgdGhpc192YWwpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc19sZXhlcl9pbnNwZWN0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgTGV4ZXIqIGxleDsKCiAgaWYoIShsZXggPSBqc19sZXhlcl9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICBKU1ZhbHVlIG9iaiA9IEpTX05ld09iamVjdENsYXNzKGN0eCwganNfbGV4ZXJfY2xhc3NfaWQpOwoKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiYnl0ZWxlbiIsIEpTX05ld1VpbnQzMihjdHgsIGxleC0+Ynl0ZV9sZW5ndGgpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJ0b2tpZCIsIEpTX05ld0ludDMyKGN0eCwgbGV4LT50b2tlbl9pZCksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgInN0YXRlIiwgSlNfTmV3SW50MzIoY3R4LCBsZXgtPnN0YXRlKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiZW9mIiwgSlNfTmV3Qm9vbChjdHgsIGlucHV0X2J1ZmZlcl9lb2YoJmxleC0+aW5wdXQpKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICAvLyBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAibG9jIiwganNfbG9jYXRpb25fbmV3KGN0eCwgJmxleC0+bG9jKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAicG9zIiwgSlNfTmV3VWludDMyKGN0eCwgbGV4LT5wb3MpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJzaXplIiwgSlNfTmV3VWludDMyKGN0eCwgbGV4LT5zaXplKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAic2VxIiwgSlNfTmV3SW50NjQoY3R4LCBsZXgtPnNlcSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CgogIHJldHVybiBvYmo7Cn0KCnZvaWQKanNfbGV4ZXJfZmluYWxpemVyKEpTUnVudGltZSogcnQsIEpTVmFsdWUgdmFsKSB7CiAgTGV4ZXIqIGxleDsKCiAgaWYoKGxleCA9IEpTX0dldE9wYXF1ZSh2YWwsIGpzX2xleGVyX2NsYXNzX2lkKSkpIHsKICAgIGlmKC0tbGV4LT5yZWZfY291bnQgPT0gMCkKICAgICAgbG9jYXRpb25fcmVsZWFzZV9ydCgmbGV4LT5sb2MsIHJ0KTsKICAgIGxleGVyX3JlbGVhc2VfcnQobGV4LCBydCk7CgogICAgaWYobGV4LT5yZWZfY291bnQgPT0gMCkKICAgICAganNfZnJlZV9ydChydCwgbGV4KTsKICB9CiAgLy8gSlNfRnJlZVZhbHVlUlQocnQsIHZhbCk7Cn0KCnN0YXRpYyBKU0NsYXNzRGVmIGpzX2xleGVyX2NsYXNzID0gewogICAgLmNsYXNzX25hbWUgPSAiTGV4ZXIiLAogICAgLmZpbmFsaXplciA9IGpzX2xleGVyX2ZpbmFsaXplciwKICAgIC5jYWxsID0ganNfbGV4ZXJfY2FsbCwKfTsKCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc19sZXhlcl9wcm90b19mdW5jc1tdID0gewogICAgLy8gSlNfSVRFUkFUT1JfTkVYVF9ERUYoIm5leHQiLCAwLCBqc19sZXhlcl9uZXh0LCBZSUVMRF9PQkopLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJuZXh0IiwgMCwganNfbGV4ZXJfbmV4dGZuLCBZSUVMRF9JRCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoIm5leHRUb2tlbiIsIDAsIGpzX2xleGVyX25leHRmbiwgWUlFTERfT0JKKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzaXplIiwganNfbGV4ZXJfZ2V0LCBqc19sZXhlcl9zZXQsIFBST1BfU0laRSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigicG9zIiwganNfbGV4ZXJfZ2V0LCBqc19sZXhlcl9zZXQsIFBST1BfUE9TKSwKICAgIC8vIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzdGFydCIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9TVEFSVCksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigibG9jIiwganNfbGV4ZXJfZ2V0LCAwLCBQUk9QX0xPQyksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiZW9mIiwganNfbGV4ZXJfZ2V0LCAwLCBQUk9QX0VPRiksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigibW9kZSIsIGpzX2xleGVyX2dldCwganNfbGV4ZXJfc2V0LCBQUk9QX01PREUpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInNlcSIsIGpzX2xleGVyX2dldCwganNfbGV4ZXJfc2V0LCBQUk9QX1NFUSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiYnl0ZUxlbmd0aCIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9CWVRFX0xFTkdUSCksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiY2hhckxlbmd0aCIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9DSEFSX0xFTkdUSCksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigic3RhdGUiLCBqc19sZXhlcl9nZXQsIDAsIFBST1BfU1RBVEUpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInN0YXRlcyIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9TVEFURVMpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInN0YXRlRGVwdGgiLCBqc19sZXhlcl9nZXQsIDAsIFBST1BfU1RBVEVfREVQVEgpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInN0YXRlU3RhY2siLCBqc19sZXhlcl9nZXQsIDAsIFBST1BfU1RBVEVfU1RBQ0spLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInNvdXJjZSIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9TT1VSQ0UpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoImxleGVtZSIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9MRVhFTUUpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInRva2VuIiwganNfbGV4ZXJfZ2V0LCAwLCBQUk9QX1RPS0VOKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJmaWxlTmFtZSIsIGpzX2xleGVyX2dldCwganNfbGV4ZXJfc2V0LCBQUk9QX0ZJTEVOQU1FKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigic2V0SW5wdXQiLCAxLCBqc19sZXhlcl9tZXRob2QsIE1FVEhPRF9TRVRfSU5QVVQpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJza2lwQnl0ZXMiLCAwLCBqc19sZXhlcl9tZXRob2QsIE1FVEhPRF9TS0lQX0JZVEVTKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigic2tpcFRva2VuIiwgMCwganNfbGV4ZXJfbWV0aG9kLCBNRVRIT0RfU0tJUF9UT0tFTiksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInNraXBDaGFycyIsIDAsIGpzX2xleGVyX21ldGhvZCwgTUVUSE9EX1NLSVBfQ0hBUlMpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJza2lwVW50aWwiLCAxLCBqc19sZXhlcl9tZXRob2QsIE1FVEhPRF9TS0lQX1VOVElMKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigidG9rZW5DbGFzcyIsIDEsIGpzX2xleGVyX21ldGhvZCwgTUVUSE9EX1RPS0VOX0NMQVNTKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZGVmaW5lIiwgMiwganNfbGV4ZXJfYWRkX3J1bGUsIDApLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJhZGRSdWxlIiwgMiwganNfbGV4ZXJfYWRkX3J1bGUsIDEpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJnZXRSdWxlIiwgMSwganNfbGV4ZXJfbWV0aG9kLCBNRVRIT0RfR0VUX1JVTEUpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJwdXNoU3RhdGUiLCAxLCBqc19sZXhlcl9tZXRob2QsIE1FVEhPRF9QVVNIX1NUQVRFKSwKICAgIEpTX0FMSUFTX0RFRigiYmVnaW4iLCAicHVzaFN0YXRlIiksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInBvcFN0YXRlIiwgMCwganNfbGV4ZXJfbWV0aG9kLCBNRVRIT0RfUE9QX1NUQVRFKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigidG9wU3RhdGUiLCAwLCBqc19sZXhlcl9tZXRob2QsIE1FVEhPRF9UT1BfU1RBVEUpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJjdXJyZW50TGluZSIsIDAsIGpzX2xleGVyX21ldGhvZCwgTUVUSE9EX0NVUlJFTlRfTElORSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImJhY2siLCAwLCBqc19sZXhlcl9tZXRob2QsIE1FVEhPRF9CQUNLKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJydWxlTmFtZXMiLCBqc19sZXhlcl9nZXQsIDAsIFBST1BfUlVMRU5BTUVTKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJydWxlcyIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9SVUxFUyksCiAgICBKU19DRlVOQ19ERUYoImxleCIsIDAsIGpzX2xleGVyX2xleCksCiAgICBKU19DRlVOQ19ERUYoImluc3BlY3QiLCAwLCBqc19sZXhlcl9pbnNwZWN0KSwKICAgIEpTX0NHRVRTRVRfREVGKCJ0b2tlbnMiLCBqc19sZXhlcl90b2tlbnMsIDApLAogICAgSlNfQ0dFVFNFVF9ERUYoInN0YXRlcyIsIGpzX2xleGVyX3N0YXRlcywgMCksCiAgICAvLyBKU19DR0VUU0VUX0RFRigic3RhdGVTdGFjayIsIGpzX2xleGVyX3N0YXRlc3RhY2ssIDApLAogICAgLy8gSlNfQUxJQVNfREVGKCJwb3NpdGlvbiIsICJsb2MiKSwKICAgIEpTX0NGVU5DX0RFRigiW1N5bWJvbC5pdGVyYXRvcl0iLCAwLCBqc19sZXhlcl9pdGVyYXRvciksCiAgICBKU19QUk9QX1NUUklOR19ERUYoIltTeW1ib2wudG9TdHJpbmdUYWddIiwgIkxleGVyIiwgSlNfUFJPUF9DT05GSUdVUkFCTEUpLAp9OwoKc3RhdGljIGNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IGpzX2xleGVyX3N0YXRpY19mdW5jc1tdID0gewogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJlc2NhcGUiLCAxLCBqc19sZXhlcl9lc2NhcGUsIDApLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJ1bmVzY2FwZSIsIDEsIGpzX2xleGVyX2VzY2FwZSwgMSksCiAgICBKU19DRlVOQ19ERUYoInRvU3RyaW5nIiwgMSwganNfbGV4ZXJfdG9zdHJpbmcpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIkZJUlNUIiwgTEVYRVJfRklSU1QsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTE9OR0VTVCIsIExFWEVSX0xPTkdFU1QsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTEFTVCIsIExFWEVSX0xBU1QsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiWUlFTERfSUQiLCBZSUVMRF9JRCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJZSUVMRF9PQkoiLCBZSUVMRF9PQkosIEpTX1BST1BfRU5VTUVSQUJMRSksCn07CgppbnQKanNfbGV4ZXJfaW5pdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKCiAganNfbG9jYXRpb25faW5pdChjdHgsIG0pOwoKICBKU19OZXdDbGFzc0lEKCZqc190b2tlbl9jbGFzc19pZCk7CiAgSlNfTmV3Q2xhc3MoSlNfR2V0UnVudGltZShjdHgpLCBqc190b2tlbl9jbGFzc19pZCwgJmpzX3Rva2VuX2NsYXNzKTsKCiAgdG9rZW5fcHJvdG8gPSBKU19OZXdPYmplY3QoY3R4KTsKICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIHRva2VuX3Byb3RvLCBqc190b2tlbl9wcm90b19mdW5jcywgY291bnRvZihqc190b2tlbl9wcm90b19mdW5jcykpOwogIEpTX1NldENsYXNzUHJvdG8oY3R4LCBqc190b2tlbl9jbGFzc19pZCwgdG9rZW5fcHJvdG8pOwoKICB0b2tlbl9jdG9yID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIGpzX3Rva2VuX2NvbnN0cnVjdG9yLCAiVG9rZW4iLCAxLCBKU19DRlVOQ19jb25zdHJ1Y3RvciwgMCk7CgogIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgdG9rZW5fY3RvciwgdG9rZW5fcHJvdG8pOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgdG9rZW5fY3RvciwganNfdG9rZW5fc3RhdGljX2Z1bmNzLCBjb3VudG9mKGpzX3Rva2VuX3N0YXRpY19mdW5jcykpOwoKICBqc19zZXRfaW5zcGVjdF9tZXRob2QoY3R4LCB0b2tlbl9wcm90bywganNfdG9rZW5faW5zcGVjdCk7CgogIEpTX05ld0NsYXNzSUQoJmpzX2xleGVyX2NsYXNzX2lkKTsKICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIGpzX2xleGVyX2NsYXNzX2lkLCAmanNfbGV4ZXJfY2xhc3MpOwoKICBsZXhlcl9wcm90byA9IEpTX05ld09iamVjdChjdHgpOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgbGV4ZXJfcHJvdG8sIGpzX2xleGVyX3Byb3RvX2Z1bmNzLCBjb3VudG9mKGpzX2xleGVyX3Byb3RvX2Z1bmNzKSk7CiAgSlNfU2V0Q2xhc3NQcm90byhjdHgsIGpzX2xleGVyX2NsYXNzX2lkLCBsZXhlcl9wcm90byk7CgogIGpzX3NldF9pbnNwZWN0X21ldGhvZChjdHgsIGxleGVyX3Byb3RvLCBqc19sZXhlcl9pbnNwZWN0KTsKCiAgbGV4ZXJfY3RvciA9IEpTX05ld0NGdW5jdGlvbjIoY3R4LCBqc19sZXhlcl9jb25zdHJ1Y3RvciwgIkxleGVyIiwgMSwgSlNfQ0ZVTkNfY29uc3RydWN0b3IsIDApOwoKICBKU19TZXRDb25zdHJ1Y3RvcihjdHgsIGxleGVyX2N0b3IsIGxleGVyX3Byb3RvKTsKICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIGxleGVyX2N0b3IsIGpzX2xleGVyX3N0YXRpY19mdW5jcywgY291bnRvZihqc19sZXhlcl9zdGF0aWNfZnVuY3MpKTsKCiAgaWYobSkgewogICAgSlNfU2V0TW9kdWxlRXhwb3J0KGN0eCwgbSwgIlRva2VuIiwgdG9rZW5fY3Rvcik7CiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiTGV4ZXIiLCBsZXhlcl9jdG9yKTsKICB9CgogIHJldHVybiAwOwp9CgojaWZkZWYgSlNfU0hBUkVEX0xJQlJBUlkKI2RlZmluZSBKU19JTklUX01PRFVMRSBqc19pbml0X21vZHVsZQojZWxzZQojZGVmaW5lIEpTX0lOSVRfTU9EVUxFIGpzX2luaXRfbW9kdWxlX2xleGVyCiNlbmRpZgoKVklTSUJMRSBKU01vZHVsZURlZioKSlNfSU5JVF9NT0RVTEUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG1vZHVsZV9uYW1lKSB7CiAgSlNNb2R1bGVEZWYqIG07CiAgaWYoIShtID0gSlNfTmV3Q01vZHVsZShjdHgsIG1vZHVsZV9uYW1lLCAmanNfbGV4ZXJfaW5pdCkpKQogICAgcmV0dXJuIG07CgogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJMb2NhdGlvbiIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJUb2tlbiIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJMZXhlciIpOwogIHJldHVybiBtOwp9CgovKioKICogQH0KICovCgAAAAAAAAAACqsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiz8AAAAAAACTPwAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAGIoAAAAAAABpigAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/src/lexer.c",
			"settings":
			{
				"buffer_size": 12658,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAGQgAAAAAAAAZSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZCAAAAAAAABkIAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAALMgAAAAAAAAsyAAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAtCAAAAAAAAC0IAAAAAAAAAAAAAAAIGNA"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "%s"
					},
					"AgAAALMgAAAAAAAAtCAAAAAAAAAAAAAAtCAAAAAAAAC1IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsyAAAAAAAACzIAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "filename"
					},
					"CAAAAAUhAAAAAAAABiEAAAAAAAAAAAAABiEAAAAAAAAHIQAAAAAAAAAAAAAHIQAAAAAAAAghAAAAAAAAAAAAAAghAAAAAAAACSEAAAAAAAAAAAAACSEAAAAAAAAKIQAAAAAAAAAAAAAKIQAAAAAAAAshAAAAAAAAAAAAAAshAAAAAAAADCEAAAAAAAAAAAAADCEAAAAAAAANIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABSEAAAAAAAAFIQAAAAAAAP///////+9/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAA0hAAAAAAAADiEAAAAAAAAAAAAADiEAAAAAAAAPIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADSEAAAAAAAANIQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA8hAAAAAAAAECEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADyEAAAAAAAAPIQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABAhAAAAAAAAEiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAECEAAAAAAAAQIQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABEhAAAAAAAAEiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAESEAAAAAAAARIQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAABMhAAAAAAAAFCEAAAAAAAAAAAAAFCEAAAAAAAAVIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEyEAAAAAAAATIQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUhAAAAAAAAFiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSEAAAAAAAAVIQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABYhAAAAAAAAGCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFiEAAAAAAAAWIQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABghAAAAAAAAGSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGCEAAAAAAAAYIQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"cut",
					null,
					"AQAAAAUhAAAAAAAABSEAAAAAAAAUAAAAZmlsZW5hbWUgPyAiOiIgOiAiIiw",
					"AQAAAAAAAAABAAAABSEAAAAAAAAZIQAAAAAAAP///////+9/"
				],
				[
					58,
					1,
					"paste",
					null,
					"AQAAAAUhAAAAAAAAGSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABSEAAAAAAAAFIQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"paste",
					null,
					"AgAAAPwgAAAAAAAAECEAAAAAAAAAAAAAECEAAAAAAAAQIQAAAAAAAAgAAABmaWxlbmFtZQ",
					"AQAAAAAAAAABAAAABCEAAAAAAAD8IAAAAAAAAAAAAAAAQF1A"
				],
				[
					66,
					3,
					"left_delete",
					null,
					"AwAAAAkhAAAAAAAACSEAAAAAAAABAAAAIgghAAAAAAAACCEAAAAAAAABAAAAOgchAAAAAAAAByEAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAACiEAAAAAAAAKIQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "fioöle"
					},
					"BgAAAAchAAAAAAAACCEAAAAAAAAAAAAACCEAAAAAAAAJIQAAAAAAAAAAAAAJIQAAAAAAAAohAAAAAAAAAAAAAAohAAAAAAAACyEAAAAAAAAAAAAACyEAAAAAAAAMIQAAAAAAAAAAAAAMIQAAAAAAAA0hAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAByEAAAAAAAAHIQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					4,
					"left_delete",
					null,
					"BAAAAAwhAAAAAAAADCEAAAAAAAABAAAAZQshAAAAAAAACyEAAAAAAAABAAAAbAohAAAAAAAACiEAAAAAAAACAAAAw7YJIQAAAAAAAAkhAAAAAAAAAQAAAG8",
					"AQAAAAAAAAABAAAADSEAAAAAAAANIQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "lename"
					},
					"BgAAAAkhAAAAAAAACiEAAAAAAAAAAAAACiEAAAAAAAALIQAAAAAAAAAAAAALIQAAAAAAAAwhAAAAAAAAAAAAAAwhAAAAAAAADSEAAAAAAAAAAAAADSEAAAAAAAAOIQAAAAAAAAAAAAAOIQAAAAAAAA8hAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACSEAAAAAAAAJIQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAABUhAAAAAAAAFSEAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAFiEAAAAAAAAWIQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAFSEAAAAAAAAVIQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADAgAAAAAAAAMSAAAAAAAAAAAAAAMSAAAAAAAAA1IAAAAAAAAAAAAAA1IAAAAAAAADcgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMCAAAAAAAAAwIAAAAAAAAAAAAAAAkIJA"
				]
			]
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 14135,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/grammars/c11-scanner.l",
			"settings":
			{
				"buffer_size": 4198,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/ecmascript.js",
			"settings":
			{
				"buffer_size": 1743,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/include/lexer.h",
			"redo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": " q"
					},
					"AgAAAL4EAAAAAAAAvgQAAAAAAAABAAAAcb0EAAAAAAAAvQQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAvwQAAAAAAAC/BAAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 3431,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/src/buffer-utils.c",
			"settings":
			{
				"buffer_size": 18391,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/list-exports.js",
			"settings":
			{
				"buffer_size": 16213,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWPwAAAAAAAFY/AAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWPwAAAAAAAFY/AAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/misc.js",
			"settings":
			{
				"buffer_size": 47966,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWbAAAAAAAAJ1sAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\nm"
					},
					"BgAAAFdrAAAAAAAAWGsAAAAAAAAAAAAAWGsAAAAAAABaawAAAAAAAAAAAABaawAAAAAAAFprAAAAAAAABAAAAG1pc2NYawAAAAAAAFhrAAAAAAAAAgAAACAgWGsAAAAAAABcawAAAAAAAAAAAABcawAAAAAAAF1rAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXawAAAAAAAFtrAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAAFxrAAAAAAAAXGsAAAAAAAABAAAAbVprAAAAAAAAWmsAAAAAAAACAAAAICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdawAAAAAAAF1rAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"right_delete",
					null,
					"AQAAAFprAAAAAAAAWmsAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaawAAAAAAAFprAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWYwAAAAAAABZjAAAAAAAAAAAAAAAANEA"
				]
			]
		},
		{
			"file": "quickjs/qjscalc.js",
			"settings":
			{
				"buffer_size": 58529,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6pgAAAAAAAPqmAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "quickjs/quickjs.c",
			"redo_stack":
			[
				[
					46,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKsIAQAAAAAAqwgBAAAAAAACAAAAICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtCAEAAAAAAK0IAQAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 1770607,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs/quickjs-libc.c",
			"settings":
			{
				"buffer_size": 97640,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Project: Edit Project"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/grammars",
		"/home/roman/Projects/plot-cv/react-sortable-hoc"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/getModuleProps.js",
		"/home/roman/Projects/plot-cv/test-operators.js",
		"/home/roman/Projects/plot-cv/data/test-websocket.functions.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/lib/alea.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/usr/include/sqlite3.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/test-sqlite3.js",
		"/home/roman/Projects/plot-cv/sqlite3.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/mysql_system_tables.sql",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/fill_help_tables.sql",
		"/home/roman/Projects/plot-cv/quickjs/run-test262.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build-libwebsockets.sh",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/build.ninja",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-schematic.svg",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-board.svg",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/dsp/util.js",
		"/home/roman/Projects/plot-cv/Zeichnung.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/svg/ZoomRedraw.svg",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/elementProxy.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wirePath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/quickjs/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/lib/container/spatial-hash.js",
		"/home/roman/Projects/plot-cv/lib/container/Hash-Multimap.js",
		"/home/roman/Projects/plot-cv/lib/container/componentMap.js",
		"/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util-w-2.diff",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/new.diff",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/lib/delegate.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/package.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/origin.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/board.js",
		"/home/roman/Projects/plot-cv/lib/json/pathMapper.js",
		"/home/roman/Projects/plot-cv/eagle-query.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Dokumente/Electronics/example.circuit",
		"/home/roman/Projects/plot-cv/circuit.js",
		"/home/roman/Projects/pictest/eagle/OpenProg-18F2550.brd",
		"/home/roman/Projects/plot-cv/OpenProg-18F2550.circuit",
		"/home/roman/Projects/plot-cv/read.hex",
		"/home/roman/Projects/plot-cv/test-bitset.js",
		"/home/roman/Projects/plot-cv/example.circuit",
		"/home/roman/Projects/plot-cv/test-circuit.js",
		"/home/roman/Projects/plot-cv/OProg-18F2550.hex",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/lib/async/websocket.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/eagle2gerber.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/svg-crop-pad.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/plugins/mirror.c",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/lib/stream/utils.js",
		"/home/roman/Projects/plot-cv/string-helpers.js",
		"/home/roman/Projects/plot-cv/bjson.js",
		"/home/roman/Projects/plot-cv/openlayers/examples/wms-tiled-wrap-180.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js,-*/build/*,-*/inst/*",
			"<open files>,/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"DEBUG_OUTPUT",
			"nextfn",
			"^lexer_lex",
			"rule_add",
			"%\\.\\*s",
			"lexer_rule_match",
			"regexp",
			"lex.js",
			"FAIL:",
			"^js_is_arraybuffer",
			"JS_IsInstanceOf",
			"InstanceOf",
			"^js_is_arraybuffer",
			"js_is_arraybuffer",
			"^js_lexer_constructor",
			"_constructor",
			"new .*Lexer",
			"#!/",
			"MovementIterator",
			"'onFd'",
			"},/*\n",
			"canvas",
			"width",
			"ResizeHandler",
			"h;",
			"h\\(",
			"canvasRect",
			"canvasRec",
			"Reparent",
			"SVG",
			"Element",
			"'svg'",
			"onMessage",
			"connect",
			"globalThis",
			"StartREPL",
			"StartRPL",
			"createWS",
			"StartREPL",
			"repl.start",
			"StartREPL",
			"$",
			"StartREPL",
			"REPL",
			"^(\\s*)console\\.log",
			"onHttp",
			"9000",
			"js_poll_inter",
			"js_poll_intter",
			"js_poll_",
			"__js_poll",
			"interrupt_handler",
			"interrupt_ha",
			"interrupt_handler",
			"JSOSTimer",
			"timer",
			"Timer",
			"cid",
			"uuid",
			"MakeUUID",
			"MakeClientId",
			"randStr",
			"MakeUUID",
			"$",
			"MakeUUID",
			"uuid ",
			"setTimer",
			"ws.send",
			"MakeUUID",
			"ws",
			"ws.ws",
			"MakeUUID",
			"EventPositions",
			"mouseTransform",
			"PositionProcessor",
			"rect",
			"rect.inside",
			"rect =",
			"\\.client",
			"MovementIterator",
			"MouseIter",
			"console.log",
			"Token",
			"console.log",
			"Token",
			"showToken",
			"showToken\n",
			"showToken",
			"Lexer",
			"Kexer",
			"exportedNames",
			"\\.(read)",
			"\\.(read|get)",
			"\\.(read|gets)",
			"ArrayBuffer",
			"FileMap",
			"written to",
			"\\.(write|puts)",
			"$",
			"\\.(write|puts)",
			"FdWriter",
			"os\\.write",
			"\\.write",
			"puts\\(",
			"stream =",
			"written to",
			"isArray",
			"PutsF",
			"PutsFunction",
			"PutsFunc",
			"PutsFuc",
			"PutsFunction",
			"write:",
			"written to",
			"viewBox",
			"'svg'",
			"mouse pos",
			"randStr",
			"MouseIterator",
			"mousePos",
			"mouseEven",
			"mouseEvent",
			"MouseIterator",
			"MouseIter",
			"Mouse",
			"send\\(",
			"NewWS",
			"WebSock"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\1//console.log",
			"8998",
			"cid",
			"MovementIter",
			"3.0.2",
			"$srcdir/",
			"",
			"'EagleSVGRenderer",
			"this.debug",
			"\\1//console.",
			"isFunction(\\1)",
			"",
			"\\1",
			"is",
			"define",
			"!isString(\\1)",
			"!isFunction(\\1)",
			"isObject(\\1)",
			"isFunction(\\1)",
			"diff --git a/lib/util.js b/lib/util.js\nindex ab76720..001e53e 100644\n--- a/lib/util.js\n+++ b/lib/util.js\n@@",
			"function \\1(\\2) {",
			"function \\1(\\2)",
			"!isString(\\1)",
			"types.isBigInt(\\1)",
			"!isObject(\\1)",
			"isSymbol(\\1)",
			"isString(\\1)",
			"isObject(\\1)",
			"isNumber(\\1)",
			"!isFunction(\\1)",
			"!isString(\\1)",
			"isNumber(\\1)",
			"isString(\\1)",
			"isObject(\\1)",
			"isFunction(\\1)",
			"",
			"^\\1//this.debug",
			"'./components",
			"}\\n\\n\\1",
			"this.circuit",
			"",
			"\\1//console",
			"packageToPosMap",
			"(this.parse",
			"line",
			"maxDepthOrPred",
			"define",
			"isObject",
			"\\1//\\2",
			""
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 94,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/grammars/c11-scanner.l",
							"function_name_status_row": 10,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									74,
									76
								],
								[
									3789,
									3794
								],
								[
									3982,
									3992
								]
							],
							"symlist":
							[
								"—Ⓕ– IS ( ) { … } — function",
								"—Ⓕ– count ( ) { … } — function",
								"—Ⓕ– check_type ( ) { … } — function"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680110344.58,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34102,
						"regions":
						{
						},
						"selection":
						[
							[
								30589,
								30589
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 890,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680107940.32,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14297.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "fire.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14472,
						"regions":
						{
						},
						"selection":
						[
							[
								13322,
								13322
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 477,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680107939.85,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7221.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/dom.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6598,
						"regions":
						{
						},
						"selection":
						[
							[
								518,
								518
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 11,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680107942.78,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/dom/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36040,
						"regions":
						{
						},
						"selection":
						[
							[
								1440,
								1462
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 53,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680107943.01,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 476.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "debugger-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15241,
						"regions":
						{
						},
						"selection":
						[
							[
								7344,
								7344
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 217,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680078816.46,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3600.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "debugger-client.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14360,
						"regions":
						{
						},
						"selection":
						[
							[
								8125,
								8132
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 158,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680075553.97,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2240.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "draw.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 500,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680107950.64,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7109,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										160,
										180
									],
									[
										477,
										494
									],
									[
										659,
										676
									],
									[
										998,
										1015
									],
									[
										1383,
										1400
									],
									[
										1573,
										1590
									],
									[
										1781,
										1798
									],
									[
										2075,
										2092
									],
									[
										2180,
										2197
									],
									[
										2440,
										2457
									],
									[
										2723,
										2740
									],
									[
										2945,
										2962
									],
									[
										3181,
										3198
									],
									[
										3377,
										3394
									],
									[
										3762,
										3779
									],
									[
										3926,
										3943
									],
									[
										4133,
										4150
									],
									[
										4275,
										4292
									],
									[
										4479,
										4496
									],
									[
										4596,
										4613
									],
									[
										4808,
										4825
									],
									[
										5024,
										5041
									],
									[
										5198,
										5215
									],
									[
										5436,
										5453
									],
									[
										5668,
										5685
									],
									[
										5962,
										5979
									],
									[
										6289,
										6306
									],
									[
										6482,
										6499
									],
									[
										6774,
										6791
									],
									[
										6967,
										6984
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								6785,
								6785
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 201,
							"line_numbers": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1680108551.46,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3332.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "quickjs/qjs-net/lib/jsutils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25008,
						"regions":
						{
						},
						"selection":
						[
							[
								21149,
								21149
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 842,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680108550.52,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13785.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "quickjs/qjs-modules/src/utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 93368,
						"regions":
						{
						},
						"selection":
						[
							[
								77978,
								77978
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680113190.89,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 47736.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "quickjs/qjs-modules/tests/test_lexer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14983,
						"regions":
						{
						},
						"selection":
						[
							[
								8262,
								8262
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 262,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680108548.6,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3927.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "quickjs/quickjs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42139,
						"regions":
						{
						},
						"selection":
						[
							[
								28415,
								28430
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 788,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"tabs_extra_last_activated": 1680108236.18,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12971.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "draw.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13788,
						"regions":
						{
						},
						"selection":
						[
							[
								8329,
								8329
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 307,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680107943.44,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4722.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "quickjs/qjs-modules/resolve-imports.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46874,
						"regions":
						{
						},
						"selection":
						[
							[
								8561,
								8561
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 313,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680107937.18,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4981.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "quickjs/qjs-modules/quickjs-lexer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43795,
						"regions":
						{
						},
						"selection":
						[
							[
								35352,
								35433
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1355,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680211845.39,
							"tabs_extra_last_activated_sheet_index": 14,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 22508.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "quickjs/qjs-modules/src/lexer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12658,
						"regions":
						{
						},
						"selection":
						[
							[
								8248,
								8248
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 365,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680212314.2,
							"tabs_extra_last_activated_sheet_index": 15,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5780.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14135,
						"regions":
						{
						},
						"selection":
						[
							[
								8577,
								8624
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 261,
							"syntax": "Packages/User/Themes/CMake.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680217086.26,
							"tabs_extra_last_activated_sheet_index": 16,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3689.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "lib/grammars/c11-scanner.l",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 4198,
						"regions":
						{
						},
						"selection":
						[
							[
								3481,
								2655
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 85,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680217287.35,
							"tabs_extra_last_activated_sheet_index": 17,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "lib/ecmascript.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1743,
						"regions":
						{
						},
						"selection":
						[
							[
								1743,
								1743
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 80,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680110192.52,
							"tabs_extra_last_activated_sheet_index": 17,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 935.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "quickjs/qjs-modules/include/lexer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3431,
						"regions":
						{
						},
						"selection":
						[
							[
								304,
								313
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 18,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680113191.73,
							"tabs_extra_last_activated_sheet_index": 17,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "quickjs/qjs-modules/src/buffer-utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18391,
						"regions":
						{
						},
						"selection":
						[
							[
								12464,
								12481
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 485,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680108103.97,
							"tabs_extra_last_activated_sheet_index": 12,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8073.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "quickjs/qjs-modules/list-exports.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16213,
						"regions":
						{
						},
						"selection":
						[
							[
								16213,
								16213
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 567,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680015515.78,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10336.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "lib/misc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47966,
						"regions":
						{
						},
						"selection":
						[
							[
								25366,
								25366
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 839,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680075240.18,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15499.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "quickjs/qjscalc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58529,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1766,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680011534.04,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 29665.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "quickjs/quickjs.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1770607,
						"regions":
						{
						},
						"selection":
						[
							[
								223016,
								223039
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 7038,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680108263.72,
							"tabs_extra_last_activated_sheet_index": 18,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 118524.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "quickjs/quickjs-libc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 97640,
						"regions":
						{
						},
						"selection":
						[
							[
								19260,
								19265
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 741,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680075239.69,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13813.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 303.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Run with qjsm",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"lexer.c",
				"quickjs/qjs-modules/src/lexer.c"
			],
			[
				"-lexer.c",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"ecma",
				"lib/ecmascript.js"
			],
			[
				"lexer.c ",
				"quickjs/qjs-modules/src/lexer.c"
			],
			[
				"lexer.h",
				"quickjs/qjs-modules/include/lexer.h"
			],
			[
				"quickjs-lex",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"test_lexer",
				"quickjs/qjs-modules/tests/test_lexer.js"
			],
			[
				"buffer-u",
				"quickjs/qjs-modules/src/buffer-utils.c"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"debugger-cli",
				"debugger-client.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-lib",
				"quickjs/quickjs-libc.c"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"list-ex",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"getMod",
				"getModuleProps.js"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"nanovg",
				"test-nanovg.js"
			],
			[
				"alea",
				"lib/alea.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"jsut",
				"quickjs/qjs-modules/src/js-utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"run-test",
				"quickjs/run-test262.c"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"build-libwe",
				"quickjs/qjs-net/build-libwebsockets.sh"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"transform",
				"lib/geom/transformation.js"
			],
			[
				"pin.js",
				"lib/eagle/components/pin.js"
			],
			[
				"",
				"~/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"symb",
				"lib/eagle/components/symbol.js"
			],
			[
				"schematicren",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardren",
				"lib/eagle/boardRenderer.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"svgRend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"renderUtil",
				"lib/eagle/renderUtils.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"text.js",
				"lib/eagle/components/text.js"
			],
			[
				"project",
				"lib/eagle/project.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"common",
				"lib/eagle/common.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"common.j",
				"lib/eagle/common.js"
			],
			[
				"nodeLi",
				"lib/eagle/nodeList.js"
			],
			[
				"common.js",
				"lib/eagle/common.js"
			],
			[
				"elementP",
				"lib/eagle/elementProxy.js"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"wirePa",
				"lib/eagle/components/wirePath.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"renderer.js",
				"lib/eagle/renderer.js"
			],
			[
				"functions.cmake",
				"qjs-opencv/cmake/functions.cmake"
			],
			[
				"textEle",
				"lib/eagle/components/textElement.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"drawing",
				"lib/eagle/components/drawing.js"
			],
			[
				"pathMapper",
				"lib/json/pathMapper.js"
			],
			[
				"xml-shell",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				"server.js",
				"upload-server.js"
			],
			[
				"delega",
				"lib/delegate.js"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"colorCod",
				"lib/eda/colorCoding.js"
			],
			[
				"eagle-qu",
				"eagle-query.js"
			],
			[
				"eagle-q",
				"eagle-query.js"
			],
			[
				"read.hex",
				"read.hex"
			],
			[
				"exam",
				"example.circuit"
			],
			[
				"xpath.js",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"Document",
				"lib/eagle/document.js"
			],
			[
				"test-",
				"test-bitset.js"
			],
			[
				"circuit",
				"circuit.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"eagle2ger",
				"eagle2gerber.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"websock",
				"lib/async/websocket.js"
			],
			[
				"websocket.js",
				"lib/async/websocket.js"
			],
			[
				"test-bj",
				"test-bjson.js"
			],
			[
				"bjson",
				"bjson.js"
			],
			[
				"string-he",
				"string-helpers.js"
			],
			[
				"quickjs-po",
				"quickjs/qjs-modules/quickjs-pointer.c"
			],
			[
				"list-exp",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"utils.js",
				"lib/stream/utils.js"
			],
			[
				"mirror",
				"quickjs/qjs-net/src/plugins/mirror.c"
			],
			[
				"fire.html",
				"fire.html"
			],
			[
				"server-htt",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"-ws.c",
				"quickjs/qjs-net/minnet-server-ws.c"
			],
			[
				"filelist",
				"filelist.js"
			],
			[
				"filelist.js",
				"filelist.js"
			],
			[
				"extendGe",
				"quickjs/qjs-modules/lib/extendGenerator.js"
			],
			[
				"test-debugger",
				"test-debuggerprotocol.js"
			],
			[
				"fire.htm",
				"fire.html"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"fontsample",
				"fontsample.js"
			],
			[
				"upload.htm",
				"upload.html"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"test-gpio",
				"test-gpio.js"
			],
			[
				"index.html",
				"index.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 784.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
