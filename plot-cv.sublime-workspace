{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Transform",
				"TransformationList"
			],
			[
				"trans",
				"transformation"
			]
		]
	},
	"buffers":
	[
		{
<<<<<<< HEAD
			"contents": "ImVec2_ImVec2\nImVec2_destroy\nImVec2_ImVec2Float\nImVec4_ImVec4\nImVec4_destroy\nImVec4_ImVec4Float\n  igCreateContext\n  igDestroyContext\n  igGetCurrentContext\n  igSetCurrentContext\n  igDebugCheckVersionAndDataLayout\n  igGetIO\n  igGetStyle\n  igNewFrame\n  igEndFrame\n  igRender\n  igGetDrawData\n  igShowDemoWindow\n  igShowAboutWindow\n  igShowMetricsWindow\n  igShowStyleEditor\n  igShowStyleSelector\n  igShowFontSelector\n  igShowUserGuide\n  igGetVersion\n  igStyleColorsDark\n  igStyleColorsClassic\n  igStyleColorsLight\n  igBegin\n  igEnd\n  igBeginChild\n  igBeginChildID\n  igEndChild\n  igIsWindowAppearing\n  igIsWindowCollapsed\n  igIsWindowFocused\n  igIsWindowHovered\n  igGetWindowDrawList\n  igGetWindowPos\n  igGetWindowSize\n  igGetWindowWidth\n  igGetWindowHeight\n  igGetContentRegionMax\n  igGetContentRegionAvail\n  igGetContentRegionAvailWidth\n  igGetWindowContentRegionMin\n  igGetWindowContentRegionMax\n  igGetWindowContentRegionWidth\n  igSetNextWindowPos\n  igSetNextWindowSize\n  igSetNextWindowSizeConstraints\n  igSetNextWindowContentSize\n  igSetNextWindowCollapsed\n  igSetNextWindowFocus\n  igSetNextWindowBgAlpha\n  igSetWindowPosVec2\n  igSetWindowSizeVec2\n  igSetWindowCollapsedBool\n  igSetWindowFocus\n  igSetWindowFontScale\n  igSetWindowPosStr\n  igSetWindowSizeStr\n  igSetWindowCollapsedStr\n  igSetWindowFocusStr\n  igGetScrollX\n  igGetScrollY\n  igGetScrollMaxX\n  igGetScrollMaxY\n  igSetScrollX\n  igSetScrollY\n  igSetScrollHereY\n  igSetScrollFromPosY\n  igPushFont\n  igPopFont\n  igPushStyleColorU32\n  igPushStyleColor\n  igPopStyleColor\n  igPushStyleVarFloat\n  igPushStyleVarVec2\n  igPopStyleVar\n  igGetStyleColorVec4\n  igGetFont\n  igGetFontSize\n  igGetFontTexUvWhitePixel\n  igGetColorU32\n  igGetColorU32Vec4\n  igGetColorU32U32\n  igPushItemWidth\n  igPopItemWidth\n  igCalcItemWidth\n  igPushTextWrapPos\n  igPopTextWrapPos\n  igPushAllowKeyboardFocus\n  igPopAllowKeyboardFocus\n  igPushButtonRepeat\n  igPopButtonRepeat\n  igSeparator\n  igSameLine\n  igNewLine\n  igSpacing\n  igDummy\n  igIndent\n  igUnindent\n  igBeginGroup\n  igEndGroup\n  igGetCursorPos\n  igGetCursorPosX\n  igGetCursorPosY\n  igSetCursorPos\n  igSetCursorPosX\n  igSetCursorPosY\n  igGetCursorStartPos\n  igGetCursorScreenPos\n  igSetCursorScreenPos\n  igAlignTextToFramePadding\n  igGetTextLineHeight\n  igGetTextLineHeightWithSpacing\n  igGetFrameHeight\n  igGetFrameHeightWithSpacing\n  igPushIDStr\n  igPushIDRange\n  igPushIDPtr\n  igPushIDInt\n  igPopID\n  igGetIDStr\n  igGetIDRange\n  igGetIDPtr\n  igTextUnformatted\n  igText\n  igTextV\n  igTextColored\n  igTextColoredV\n  igTextDisabled\n  igTextDisabledV\n  igTextWrapped\n  igTextWrappedV\n  igLabelText\n  igLabelTextV\n  igBulletText\n  igBulletTextV\n  igButton\n  igSmallButton\n  igInvisibleButton\n  igArrowButton\n  igImage\n  igImageButton\n  igCheckbox\n  igCheckboxFlags\n  igRadioButtonBool\n  igRadioButtonIntPtr\n  igProgressBar\n  igBullet\n  igBeginCombo\n  igEndCombo\n  igCombo\n  igComboStr\n  igComboFnPtr\n  igDragFloat\n  igDragFloat2\n  igDragFloat3\n  igDragFloat4\n  igDragFloatRange2\n  igDragInt\n  igDragInt2\n  igDragInt3\n  igDragInt4\n  igDragIntRange2\n  igDragScalar\n  igDragScalarN\n  igSliderFloat\n  igSliderFloat2\n  igSliderFloat3\n  igSliderFloat4\n  igSliderAngle\n  igSliderInt\n  igSliderInt2\n  igSliderInt3\n  igSliderInt4\n  igSliderScalar\n  igSliderScalarN\n  igVSliderFloat\n  igVSliderInt\n  igVSliderScalar\n  igInputText\n  igInputTextMultiline\n  igInputFloat\n  igInputFloat2\n  igInputFloat3\n  igInputFloat4\n  igInputInt\n  igInputInt2\n  igInputInt3\n  igInputInt4\n  igInputDouble\n  igInputScalar\n  igInputScalarN\n  igColorEdit3\n  igColorEdit4\n  igColorPicker3\n  igColorPicker4\n  igColorButton\n  igSetColorEditOptions\n  igTreeNodeStr\n  igTreeNodeStrStr\n  igTreeNodePtr\n  igTreeNodeVStr\n  igTreeNodeVPtr\n  igTreeNodeExStr\n  igTreeNodeExStrStr\n  igTreeNodeExPtr\n  igTreeNodeExVStr\n  igTreeNodeExVPtr\n  igTreePushStr\n  igTreePushPtr\n  igTreePop\n  igTreeAdvanceToLabelPos\n  igGetTreeNodeToLabelSpacing\n  igSetNextTreeNodeOpen\n  igCollapsingHeader\n  igCollapsingHeaderBoolPtr\n  igSelectable\n  igSelectableBoolPtr\n  igListBoxStr_arr\n  igListBoxFnPtr\n  igListBoxHeaderVec2\n  igListBoxHeaderInt\n  igListBoxFooter\n  igPlotLines\n  igPlotLinesFnPtr\n  igPlotHistogramFloatPtr\n  igPlotHistogramFnPtr\n  igValueBool\n  igValueInt\n  igValueUint\n  igValueFloat\n  igBeginMainMenuBar\n  igEndMainMenuBar\n  igBeginMenuBar\n  igEndMenuBar\n  igBeginMenu\n  igEndMenu\n  igMenuItemBool\n  igMenuItemBoolPtr\n  igBeginTooltip\n  igEndTooltip\n  igSetTooltip\n  igSetTooltipV\n  igOpenPopup\n  igBeginPopup\n  igBeginPopupContextItem\n  igBeginPopupContextWindow\n  igBeginPopupContextVoid\n  igBeginPopupModal\n  igEndPopup\n  igOpenPopupOnItemClick\n  igIsPopupOpen\n  igCloseCurrentPopup\n  igColumns\n  igNextColumn\n  igGetColumnIndex\n  igGetColumnWidth\n  igSetColumnWidth\n  igGetColumnOffset\n  igSetColumnOffset\n  igGetColumnsCount\n  igBeginTabBar\n  igEndTabBar\n  igBeginTabItem\n  igEndTabItem\n  igSetTabItemClosed\n  igLogToTTY\n  igLogToFile\n  igLogToClipboard\n  igLogFinish\n  igLogButtons\n  igBeginDragDropSource\n  igSetDragDropPayload\n  igEndDragDropSource\n  igBeginDragDropTarget\n  igAcceptDragDropPayload\n  igEndDragDropTarget\n  igGetDragDropPayload\n  igPushClipRect\n  igPopClipRect\n  igSetItemDefaultFocus\n  igSetKeyboardFocusHere\n  igIsItemHovered\n  igIsItemActive\n  igIsItemFocused\n  igIsItemClicked\n  igIsItemVisible\n  igIsItemEdited\n  igIsItemActivated\n  igIsItemDeactivated\n  igIsItemDeactivatedAfterEdit\n  igIsAnyItemHovered\n  igIsAnyItemActive\n  igIsAnyItemFocused\n  igGetItemRectMin\n  igGetItemRectMax\n  igGetItemRectSize\n  igSetItemAllowOverlap\n  igIsRectVisible\n  igIsRectVisibleVec2\n  igGetTime\n  igGetFrameCount\n  igGetOverlayDrawList\n  igGetDrawListSharedData\n  igGetStyleColorName\n  igSetStateStorage\n  igGetStateStorage\n  igCalcTextSize\n  igCalcListClipping\n  igBeginChildFrame\n  igEndChildFrame\n  igColorConvertU32ToFloat4\n  igColorConvertFloat4ToU32\n  igGetKeyIndex\n  igIsKeyDown\n  igIsKeyPressed\n  igIsKeyReleased\n  igGetKeyPressedAmount\n  igIsMouseDown\n  igIsAnyMouseDown\n  igIsMouseClicked\n  igIsMouseDoubleClicked\n  igIsMouseReleased\n  igIsMouseDragging\n  igIsMouseHoveringRect\n  igIsMousePosValid\n  igGetMousePos\n  igGetMousePosOnOpeningCurrentPopup\n  igGetMouseDragDelta\n  igResetMouseDragDelta\n  igGetMouseCursor\n  igSetMouseCursor\n  igCaptureKeyboardFromApp\n  igCaptureMouseFromApp\n  igGetClipboardText\n  igSetClipboardText\n  igLoadIniSettingsFromDisk\n  igLoadIniSettingsFromMemory\n  igSaveIniSettingsToDisk\n  igSaveIniSettingsToMemory\n  igSetAllocatorFunctions\n  igMemAlloc\n  igMemFree\nImGuiStyle_ImGuiStyle\nImGuiStyle_destroy\nImGuiStyle_ScaleAllSizes\nImGuiIO_AddInputCharacter\nImGuiIO_AddInputCharactersUTF8\nImGuiIO_ClearInputCharacters\nImGuiIO_ImGuiIO\nImGuiIO_destroy\nImGuiInputTextCallbackData_ImGuiInputTextCallbackData\nImGuiInputTextCallbackData_destroy\nImGuiInputTextCallbackData_DeleteChars\nImGuiInputTextCallbackData_InsertChars\nImGuiInputTextCallbackData_HasSelection\nImGuiPayload_ImGuiPayload\nImGuiPayload_destroy\nImGuiPayload_Clear\nImGuiPayload_IsDataType\nImGuiPayload_IsPreview\nImGuiPayload_IsDelivery\nImGuiOnceUponAFrame_ImGuiOnceUponAFrame\nImGuiOnceUponAFrame_destroy\nImGuiTextFilter_ImGuiTextFilter\nImGuiTextFilter_destroy\nImGuiTextFilter_Draw\nImGuiTextFilter_PassFilter\nImGuiTextFilter_Build\nImGuiTextFilter_Clear\nImGuiTextFilter_IsActive\nTextRange_TextRange\nTextRange_destroy\nTextRange_TextRangeStr\nTextRange_begin\nTextRange_end\nTextRange_empty\nTextRange_split\nImGuiTextBuffer_ImGuiTextBuffer\nImGuiTextBuffer_destroy\nImGuiTextBuffer_begin\nImGuiTextBuffer_end\nImGuiTextBuffer_size\nImGuiTextBuffer_empty\nImGuiTextBuffer_clear\nImGuiTextBuffer_reserve\nImGuiTextBuffer_c_str\nImGuiTextBuffer_append\nImGuiTextBuffer_appendfv\nPair_PairInt\nPair_destroy\nPair_PairFloat\nPair_PairPtr\nImGuiStorage_Clear\nImGuiStorage_GetInt\nImGuiStorage_SetInt\nImGuiStorage_GetBool\nImGuiStorage_SetBool\nImGuiStorage_GetFloat\nImGuiStorage_SetFloat\nImGuiStorage_GetVoidPtr\nImGuiStorage_SetVoidPtr\nImGuiStorage_GetIntRef\nImGuiStorage_GetBoolRef\nImGuiStorage_GetFloatRef\nImGuiStorage_GetVoidPtrRef\nImGuiStorage_SetAllInt\nImGuiStorage_BuildSortByKey\nImGuiListClipper_ImGuiListClipper\nImGuiListClipper_destroy\nImGuiListClipper_Step\nImGuiListClipper_Begin\nImGuiListClipper_End\nImColor_ImColor\nImColor_destroy\nImColor_ImColorInt\nImColor_ImColorU32\nImColor_ImColorFloat\nImColor_ImColorVec4\nImColor_SetHSV\nImColor_HSV\nImDrawCmd_ImDrawCmd\nImDrawCmd_destroy\nImDrawList_ImDrawList\nImDrawList_destroy\nImDrawList_PushClipRect\nImDrawList_PushClipRectFullScreen\nImDrawList_PopClipRect\nImDrawList_PushTextureID\nImDrawList_PopTextureID\nImDrawList_GetClipRectMin\nImDrawList_GetClipRectMax\nImDrawList_AddLine\nImDrawList_AddRect\nImDrawList_AddRectFilled\nImDrawList_AddRectFilledMultiColor\nImDrawList_AddQuad\nImDrawList_AddQuadFilled\nImDrawList_AddTriangle\nImDrawList_AddTriangleFilled\nImDrawList_AddCircle\nImDrawList_AddCircleFilled\nImDrawList_AddText\nImDrawList_AddTextFontPtr\nImDrawList_AddImage\nImDrawList_AddImageQuad\nImDrawList_AddImageRounded\nImDrawList_AddPolyline\nImDrawList_AddConvexPolyFilled\nImDrawList_AddBezierCurve\nImDrawList_PathClear\nImDrawList_PathLineTo\nImDrawList_PathLineToMergeDuplicate\nImDrawList_PathFillConvex\nImDrawList_PathStroke\nImDrawList_PathArcTo\nImDrawList_PathArcToFast\nImDrawList_PathBezierCurveTo\nImDrawList_PathRect\nImDrawList_ChannelsSplit\nImDrawList_ChannelsMerge\nImDrawList_ChannelsSetCurrent\nImDrawList_AddCallback\nImDrawList_AddDrawCmd\nImDrawList_CloneOutput\nImDrawList_Clear\nImDrawList_ClearFreeMemory\nImDrawList_PrimReserve\nImDrawList_PrimRect\nImDrawList_PrimRectUV\nImDrawList_PrimQuadUV\nImDrawList_PrimWriteVtx\nImDrawList_PrimWriteIdx\nImDrawList_PrimVtx\nImDrawList_UpdateClipRect\nImDrawList_UpdateTextureID\nImDrawData_ImDrawData\nImDrawData_destroy\nImDrawData_Clear\nImDrawData_DeIndexAllBuffers\nImDrawData_ScaleClipRects\nImFontConfig_ImFontConfig\nImFontConfig_destroy\nImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder\nImFontGlyphRangesBuilder_destroy\nImFontGlyphRangesBuilder_GetBit\nImFontGlyphRangesBuilder_SetBit\nImFontGlyphRangesBuilder_AddChar\nImFontGlyphRangesBuilder_AddText\nImFontGlyphRangesBuilder_AddRanges\nImFontGlyphRangesBuilder_BuildRanges\nImFontAtlas_ImFontAtlas\nImFontAtlas_destroy\nImFontAtlas_AddFont\nImFontAtlas_AddFontDefault\nImFontAtlas_AddFontFromFileTTF\nImFontAtlas_AddFontFromMemoryTTF\nImFontAtlas_AddFontFromMemoryCompressedTTF\nImFontAtlas_AddFontFromMemoryCompressedBase85TTF\nImFontAtlas_ClearInputData\nImFontAtlas_ClearTexData\nImFontAtlas_ClearFonts\nImFontAtlas_Clear\nImFontAtlas_Build\nImFontAtlas_GetTexDataAsAlpha8\nImFontAtlas_GetTexDataAsRGBA32\nImFontAtlas_IsBuilt\nImFontAtlas_SetTexID\nImFontAtlas_GetGlyphRangesDefault\nImFontAtlas_GetGlyphRangesKorean\nImFontAtlas_GetGlyphRangesJapanese\nImFontAtlas_GetGlyphRangesChineseFull\nImFontAtlas_GetGlyphRangesChineseSimplifiedCommon\nImFontAtlas_GetGlyphRangesCyrillic\nImFontAtlas_GetGlyphRangesThai\nCustomRect_CustomRect\nCustomRect_destroy\nCustomRect_IsPacked\nImFontAtlas_AddCustomRectRegular\nImFontAtlas_AddCustomRectFontGlyph\nImFontAtlas_GetCustomRectByIndex\nImFontAtlas_CalcCustomRectUV\nImFontAtlas_GetMouseCursorTexData\nImFont_ImFont\nImFont_destroy\nImFont_FindGlyph\nImFont_FindGlyphNoFallback\nImFont_GetCharAdvance\nImFont_IsLoaded\nImFont_GetDebugName\nImFont_CalcTextSizeA\nImFont_CalcWordWrapPositionA\nImFont_RenderChar\nImFont_RenderText\nImFont_BuildLookupTable\nImFont_ClearOutputData\nImFont_GrowIndex\nImFont_AddGlyph\nImFont_AddRemapChar\nImFont_SetFallbackChar\nImVector_float_ImVector_float\nImVector_float_destroy\nImVector_ImWchar_ImVector_ImWchar\nImVector_ImWchar_destroy\nImVector_ImFontConfig_ImVector_ImFontConfig\nImVector_ImFontConfig_destroy\nImVector_ImFontGlyph_ImVector_ImFontGlyph\nImVector_ImFontGlyph_destroy\nImVector_TextRange_ImVector_TextRange\nImVector_TextRange_destroy\nImVector_CustomRect_ImVector_CustomRect\nImVector_CustomRect_destroy\nImVector_ImDrawChannel_ImVector_ImDrawChannel\nImVector_ImDrawChannel_destroy\nImVector_char_ImVector_char\nImVector_char_destroy\nImVector_ImTextureID_ImVector_ImTextureID\nImVector_ImTextureID_destroy\nImVector_ImDrawVert_ImVector_ImDrawVert\nImVector_ImDrawVert_destroy\nImVector_int_ImVector_int\nImVector_int_destroy\nImVector_Pair_ImVector_Pair\nImVector_Pair_destroy\nImVector_ImFontPtr_ImVector_ImFontPtr\nImVector_ImFontPtr_destroy\nImVector_ImVec4_ImVector_ImVec4\nImVector_ImVec4_destroy\nImVector_ImDrawCmd_ImVector_ImDrawCmd\nImVector_ImDrawCmd_destroy\nImVector_ImDrawIdx_ImVector_ImDrawIdx\nImVector_ImDrawIdx_destroy\nImVector_ImVec2_ImVector_ImVec2\nImVector_ImVec2_destroy\nImVector_float_ImVector_floatVector\nImVector_ImWchar_ImVector_ImWcharVector\nImVector_ImFontConfig_ImVector_ImFontConfigVector\nImVector_ImFontGlyph_ImVector_ImFontGlyphVector\nImVector_TextRange_ImVector_TextRangeVector\nImVector_CustomRect_ImVector_CustomRectVector\nImVector_ImDrawChannel_ImVector_ImDrawChannelVector\nImVector_char_ImVector_charVector\nImVector_ImTextureID_ImVector_ImTextureIDVector\nImVector_ImDrawVert_ImVector_ImDrawVertVector\nImVector_int_ImVector_intVector\nImVector_Pair_ImVector_PairVector\nImVector_ImFontPtr_ImVector_ImFontPtrVector\nImVector_ImVec4_ImVector_ImVec4Vector\nImVector_ImDrawCmd_ImVector_ImDrawCmdVector\nImVector_ImDrawIdx_ImVector_ImDrawIdxVector\nImVector_ImVec2_ImVector_ImVec2Vector\nImVector_float_empty\nImVector_ImWchar_empty\nImVector_ImFontConfig_empty\nImVector_ImFontGlyph_empty\nImVector_TextRange_empty\nImVector_CustomRect_empty\nImVector_ImDrawChannel_empty\nImVector_char_empty\nImVector_ImTextureID_empty\nImVector_ImDrawVert_empty\nImVector_int_empty\nImVector_Pair_empty\nImVector_ImFontPtr_empty\nImVector_ImVec4_empty\nImVector_ImDrawCmd_empty\nImVector_ImDrawIdx_empty\nImVector_ImVec2_empty\nImVector_float_size\nImVector_ImWchar_size\nImVector_ImFontConfig_size\nImVector_ImFontGlyph_size\nImVector_TextRange_size\nImVector_CustomRect_size\nImVector_ImDrawChannel_size\nImVector_char_size\nImVector_ImTextureID_size\nImVector_ImDrawVert_size\nImVector_int_size\nImVector_Pair_size\nImVector_ImFontPtr_size\nImVector_ImVec4_size\nImVector_ImDrawCmd_size\nImVector_ImDrawIdx_size\nImVector_ImVec2_size\nImVector_float_size_in_bytes\nImVector_ImWchar_size_in_bytes\nImVector_ImFontConfig_size_in_bytes\nImVector_ImFontGlyph_size_in_bytes\nImVector_TextRange_size_in_bytes\nImVector_CustomRect_size_in_bytes\nImVector_ImDrawChannel_size_in_bytes\nImVector_char_size_in_bytes\nImVector_ImTextureID_size_in_bytes\nImVector_ImDrawVert_size_in_bytes\nImVector_int_size_in_bytes\nImVector_Pair_size_in_bytes\nImVector_ImFontPtr_size_in_bytes\nImVector_ImVec4_size_in_bytes\nImVector_ImDrawCmd_size_in_bytes\nImVector_ImDrawIdx_size_in_bytes\nImVector_ImVec2_size_in_bytes\nImVector_float_capacity\nImVector_ImWchar_capacity\nImVector_ImFontConfig_capacity\nImVector_ImFontGlyph_capacity\nImVector_TextRange_capacity\nImVector_CustomRect_capacity\nImVector_ImDrawChannel_capacity\nImVector_char_capacity\nImVector_ImTextureID_capacity\nImVector_ImDrawVert_capacity\nImVector_int_capacity\nImVector_Pair_capacity\nImVector_ImFontPtr_capacity\nImVector_ImVec4_capacity\nImVector_ImDrawCmd_capacity\nImVector_ImDrawIdx_capacity\nImVector_ImVec2_capacity\nImVector_float_clear\nImVector_ImWchar_clear\nImVector_ImFontConfig_clear\nImVector_ImFontGlyph_clear\nImVector_TextRange_clear\nImVector_CustomRect_clear\nImVector_ImDrawChannel_clear\nImVector_char_clear\nImVector_ImTextureID_clear\nImVector_ImDrawVert_clear\nImVector_int_clear\nImVector_Pair_clear\nImVector_ImFontPtr_clear\nImVector_ImVec4_clear\nImVector_ImDrawCmd_clear\nImVector_ImDrawIdx_clear\nImVector_ImVec2_clear\nImVector_float_begin\nImVector_ImWchar_begin\nImVector_ImFontConfig_begin\nImVector_ImFontGlyph_begin\nImVector_TextRange_begin\nImVector_CustomRect_begin\nImVector_ImDrawChannel_begin\nImVector_char_begin\nImVector_ImTextureID_begin\nImVector_ImDrawVert_begin\nImVector_int_begin\nImVector_Pair_begin\nImVector_ImFontPtr_begin\nImVector_ImVec4_begin\nImVector_ImDrawCmd_begin\nImVector_ImDrawIdx_begin\nImVector_ImVec2_begin\nImVector_float_begin_const\nImVector_ImWchar_begin_const\nImVector_ImFontConfig_begin_const\nImVector_ImFontGlyph_begin_const\nImVector_TextRange_begin_const\nImVector_CustomRect_begin_const\nImVector_ImDrawChannel_begin_const\nImVector_char_begin_const\nImVector_ImTextureID_begin_const\nImVector_ImDrawVert_begin_const\nImVector_int_begin_const\nImVector_Pair_begin_const\nImVector_ImFontPtr_begin_const\nImVector_ImVec4_begin_const\nImVector_ImDrawCmd_begin_const\nImVector_ImDrawIdx_begin_const\nImVector_ImVec2_begin_const\nImVector_float_end\nImVector_ImWchar_end\nImVector_ImFontConfig_end\nImVector_ImFontGlyph_end\nImVector_TextRange_end\nImVector_CustomRect_end\nImVector_ImDrawChannel_end\nImVector_char_end\nImVector_ImTextureID_end\nImVector_ImDrawVert_end\nImVector_int_end\nImVector_Pair_end\nImVector_ImFontPtr_end\nImVector_ImVec4_end\nImVector_ImDrawCmd_end\nImVector_ImDrawIdx_end\nImVector_ImVec2_end\nImVector_float_end_const\nImVector_ImWchar_end_const\nImVector_ImFontConfig_end_const\nImVector_ImFontGlyph_end_const\nImVector_TextRange_end_const\nImVector_CustomRect_end_const\nImVector_ImDrawChannel_end_const\nImVector_char_end_const\nImVector_ImTextureID_end_const\nImVector_ImDrawVert_end_const\nImVector_int_end_const\nImVector_Pair_end_const\nImVector_ImFontPtr_end_const\nImVector_ImVec4_end_const\nImVector_ImDrawCmd_end_const\nImVector_ImDrawIdx_end_const\nImVector_ImVec2_end_const\nImVector_float_front\nImVector_ImWchar_front\nImVector_ImFontConfig_front\nImVector_ImFontGlyph_front\nImVector_TextRange_front\nImVector_CustomRect_front\nImVector_ImDrawChannel_front\nImVector_char_front\nImVector_ImTextureID_front\nImVector_ImDrawVert_front\nImVector_int_front\nImVector_Pair_front\nImVector_ImFontPtr_front\nImVector_ImVec4_front\nImVector_ImDrawCmd_front\nImVector_ImDrawIdx_front\nImVector_ImVec2_front\nImVector_float_front_const\nImVector_ImWchar_front_const\nImVector_ImFontConfig_front_const\nImVector_ImFontGlyph_front_const\nImVector_TextRange_front_const\nImVector_CustomRect_front_const\nImVector_ImDrawChannel_front_const\nImVector_char_front_const\nImVector_ImTextureID_front_const\nImVector_ImDrawVert_front_const\nImVector_int_front_const\nImVector_Pair_front_const\nImVector_ImFontPtr_front_const\nImVector_ImVec4_front_const\nImVector_ImDrawCmd_front_const\nImVector_ImDrawIdx_front_const\nImVector_ImVec2_front_const\nImVector_float_back\nImVector_ImWchar_back\nImVector_ImFontConfig_back\nImVector_ImFontGlyph_back\nImVector_TextRange_back\nImVector_CustomRect_back\nImVector_ImDrawChannel_back\nImVector_char_back\nImVector_ImTextureID_back\nImVector_ImDrawVert_back\nImVector_int_back\nImVector_Pair_back\nImVector_ImFontPtr_back\nImVector_ImVec4_back\nImVector_ImDrawCmd_back\nImVector_ImDrawIdx_back\nImVector_ImVec2_back\nImVector_float_back_const\nImVector_ImWchar_back_const\nImVector_ImFontConfig_back_const\nImVector_ImFontGlyph_back_const\nImVector_TextRange_back_const\nImVector_CustomRect_back_const\nImVector_ImDrawChannel_back_const\nImVector_char_back_const\nImVector_ImTextureID_back_const\nImVector_ImDrawVert_back_const\nImVector_int_back_const\nImVector_Pair_back_const\nImVector_ImFontPtr_back_const\nImVector_ImVec4_back_const\nImVector_ImDrawCmd_back_const\nImVector_ImDrawIdx_back_const\nImVector_ImVec2_back_const\nImVector_float_swap\nImVector_ImWchar_swap\nImVector_ImFontConfig_swap\nImVector_ImFontGlyph_swap\nImVector_TextRange_swap\nImVector_CustomRect_swap\nImVector_ImDrawChannel_swap\nImVector_char_swap\nImVector_ImTextureID_swap\nImVector_ImDrawVert_swap\nImVector_int_swap\nImVector_Pair_swap\nImVector_ImFontPtr_swap\nImVector_ImVec4_swap\nImVector_ImDrawCmd_swap\nImVector_ImDrawIdx_swap\nImVector_ImVec2_swap\nImVector_float__grow_capacity\nImVector_ImWchar__grow_capacity\nImVector_ImFontConfig__grow_capacity\nImVector_ImFontGlyph__grow_capacity\nImVector_TextRange__grow_capacity\nImVector_CustomRect__grow_capacity\nImVector_ImDrawChannel__grow_capacity\nImVector_char__grow_capacity\nImVector_ImTextureID__grow_capacity\nImVector_ImDrawVert__grow_capacity\nImVector_int__grow_capacity\nImVector_Pair__grow_capacity\nImVector_ImFontPtr__grow_capacity\nImVector_ImVec4__grow_capacity\nImVector_ImDrawCmd__grow_capacity\nImVector_ImDrawIdx__grow_capacity\nImVector_ImVec2__grow_capacity\nImVector_float_resize\nImVector_ImWchar_resize\nImVector_ImFontConfig_resize\nImVector_ImFontGlyph_resize\nImVector_TextRange_resize\nImVector_CustomRect_resize\nImVector_ImDrawChannel_resize\nImVector_char_resize\nImVector_ImTextureID_resize\nImVector_ImDrawVert_resize\nImVector_int_resize\nImVector_Pair_resize\nImVector_ImFontPtr_resize\nImVector_ImVec4_resize\nImVector_ImDrawCmd_resize\nImVector_ImDrawIdx_resize\nImVector_ImVec2_resize\nImVector_float_resizeT\nImVector_ImWchar_resizeT\nImVector_ImFontConfig_resizeT\nImVector_ImFontGlyph_resizeT\nImVector_TextRange_resizeT\nImVector_CustomRect_resizeT\nImVector_ImDrawChannel_resizeT\nImVector_char_resizeT\nImVector_ImTextureID_resizeT\nImVector_ImDrawVert_resizeT\nImVector_int_resizeT\nImVector_Pair_resizeT\nImVector_ImFontPtr_resizeT\nImVector_ImVec4_resizeT\nImVector_ImDrawCmd_resizeT\nImVector_ImDrawIdx_resizeT\nImVector_ImVec2_resizeT\nImVector_float_reserve\nImVector_ImWchar_reserve\nImVector_ImFontConfig_reserve\nImVector_ImFontGlyph_reserve\nImVector_TextRange_reserve\nImVector_CustomRect_reserve\nImVector_ImDrawChannel_reserve\nImVector_char_reserve\nImVector_ImTextureID_reserve\nImVector_ImDrawVert_reserve\nImVector_int_reserve\nImVector_Pair_reserve\nImVector_ImFontPtr_reserve\nImVector_ImVec4_reserve\nImVector_ImDrawCmd_reserve\nImVector_ImDrawIdx_reserve\nImVector_ImVec2_reserve\nImVector_float_push_back\nImVector_ImWchar_push_back\nImVector_ImFontConfig_push_back\nImVector_ImFontGlyph_push_back\nImVector_TextRange_push_back\nImVector_CustomRect_push_back\nImVector_ImDrawChannel_push_back\nImVector_char_push_back\nImVector_ImTextureID_push_back\nImVector_ImDrawVert_push_back\nImVector_int_push_back\nImVector_Pair_push_back\nImVector_ImFontPtr_push_back\nImVector_ImVec4_push_back\nImVector_ImDrawCmd_push_back\nImVector_ImDrawIdx_push_back\nImVector_ImVec2_push_back\nImVector_float_pop_back\nImVector_ImWchar_pop_back\nImVector_ImFontConfig_pop_back\nImVector_ImFontGlyph_pop_back\nImVector_TextRange_pop_back\nImVector_CustomRect_pop_back\nImVector_ImDrawChannel_pop_back\nImVector_char_pop_back\nImVector_ImTextureID_pop_back\nImVector_ImDrawVert_pop_back\nImVector_int_pop_back\nImVector_Pair_pop_back\nImVector_ImFontPtr_pop_back\nImVector_ImVec4_pop_back\nImVector_ImDrawCmd_pop_back\nImVector_ImDrawIdx_pop_back\nImVector_ImVec2_pop_back\nImVector_float_push_front\nImVector_ImWchar_push_front\nImVector_ImFontConfig_push_front\nImVector_ImFontGlyph_push_front\nImVector_TextRange_push_front\nImVector_CustomRect_push_front\nImVector_ImDrawChannel_push_front\nImVector_char_push_front\nImVector_ImTextureID_push_front\nImVector_ImDrawVert_push_front\nImVector_int_push_front\nImVector_Pair_push_front\nImVector_ImFontPtr_push_front\nImVector_ImVec4_push_front\nImVector_ImDrawCmd_push_front\nImVector_ImDrawIdx_push_front\nImVector_ImVec2_push_front\nImVector_float_erase\nImVector_ImWchar_erase\nImVector_ImFontConfig_erase\nImVector_ImFontGlyph_erase\nImVector_TextRange_erase\nImVector_CustomRect_erase\nImVector_ImDrawChannel_erase\nImVector_char_erase\nImVector_ImTextureID_erase\nImVector_ImDrawVert_erase\nImVector_int_erase\nImVector_Pair_erase\nImVector_ImFontPtr_erase\nImVector_ImVec4_erase\nImVector_ImDrawCmd_erase\nImVector_ImDrawIdx_erase\nImVector_ImVec2_erase\nImVector_float_eraseTPtr\nImVector_ImWchar_eraseTPtr\nImVector_ImFontConfig_eraseTPtr\nImVector_ImFontGlyph_eraseTPtr\nImVector_TextRange_eraseTPtr\nImVector_CustomRect_eraseTPtr\nImVector_ImDrawChannel_eraseTPtr\nImVector_char_eraseTPtr\nImVector_ImTextureID_eraseTPtr\nImVector_ImDrawVert_eraseTPtr\nImVector_int_eraseTPtr\nImVector_Pair_eraseTPtr\nImVector_ImFontPtr_eraseTPtr\nImVector_ImVec4_eraseTPtr\nImVector_ImDrawCmd_eraseTPtr\nImVector_ImDrawIdx_eraseTPtr\nImVector_ImVec2_eraseTPtr\nImVector_float_erase_unsorted\nImVector_ImWchar_erase_unsorted\nImVector_ImFontConfig_erase_unsorted\nImVector_ImFontGlyph_erase_unsorted\nImVector_TextRange_erase_unsorted\nImVector_CustomRect_erase_unsorted\nImVector_ImDrawChannel_erase_unsorted\nImVector_char_erase_unsorted\nImVector_ImTextureID_erase_unsorted\nImVector_ImDrawVert_erase_unsorted\nImVector_int_erase_unsorted\nImVector_Pair_erase_unsorted\nImVector_ImFontPtr_erase_unsorted\nImVector_ImVec4_erase_unsorted\nImVector_ImDrawCmd_erase_unsorted\nImVector_ImDrawIdx_erase_unsorted\nImVector_ImVec2_erase_unsorted\nImVector_float_insert\nImVector_ImWchar_insert\nImVector_ImFontConfig_insert\nImVector_ImFontGlyph_insert\nImVector_TextRange_insert\nImVector_CustomRect_insert\nImVector_ImDrawChannel_insert\nImVector_char_insert\nImVector_ImTextureID_insert\nImVector_ImDrawVert_insert\nImVector_int_insert\nImVector_Pair_insert\nImVector_ImFontPtr_insert\nImVector_ImVec4_insert\nImVector_ImDrawCmd_insert\nImVector_ImDrawIdx_insert\nImVector_ImVec2_insert\nImVector_float_contains\nImVector_ImWchar_contains\nImVector_char_contains\nImVector_int_contains\nImVector_float_index_from_ptr\nImVector_ImWchar_index_from_ptr\nImVector_ImFontConfig_index_from_ptr\nImVector_ImFontGlyph_index_from_ptr\nImVector_TextRange_index_from_ptr\nImVector_CustomRect_index_from_ptr\nImVector_ImDrawChannel_index_from_ptr\nImVector_char_index_from_ptr\nImVector_ImTextureID_index_from_ptr\nImVector_ImDrawVert_index_from_ptr\nImVector_int_index_from_ptr\nImVector_Pair_index_from_ptr\nImVector_ImFontPtr_index_from_ptr\nImVector_ImVec4_index_from_ptr\nImVector_ImDrawCmd_index_from_ptr\nImVector_ImDrawIdx_index_from_ptr\nImVector_ImVec2_index_from_ptr\n  igLogText\nImGuiTextBuffer_appendf\nImGuiTextBuffer\n  igGET_FLT_MAX\n  igColorConvertRGBtoHSV\n  igColorConvertHSVtoRGB\nImVector_ImWchar_create\nImVector_ImWchar_Init\nImVector_ImWchar_UnInit",
			"settings":
			{
				"buffer_size": 25326,
=======
			"contents": "  render(doc, filename)\n  main(...args)\n  value =>\n  f =>",
			"settings":
			{
				"buffer_size": 57,
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
<<<<<<< HEAD
					56,
					2,
=======
					322,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/polygon.js",
						"symkeys":
						[
							[
								263,
								307
							],
							[
								369,
								387
							],
							[
								687,
								692
							],
							[
								819,
								823
							]
						],
						"symlist":
						[
							"Polygon = ({ data, opts = {}, ...props }) =>",
							"async function* ()",
							" i =>",
							"v =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAAOwAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					323,
					1,
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3134,
								3139
							],
							[
								3202,
								3208
							],
							[
								3310,
								3329
							],
							[
								3351,
								3356
							],
							[
								3459,
								3490
							],
							[
								3541,
								3584
							],
							[
								3629,
								3636
							],
							[
								3737,
								3822
							],
							[
								3974,
								3979
							],
							[
								4024,
								4042
							],
							[
								4081,
								4088
							],
							[
								4137,
								4144
							],
							[
								4183,
								4200
							],
							[
								4247,
								4254
							],
							[
								4291,
								4309
							],
							[
								4332,
								4341
							],
							[
								4364,
								4382
							],
							[
								4393,
								4454
							],
							[
								4574,
								4583
							],
							[
								4620,
								4631
							],
							[
								4642,
								4666
							],
							[
								4747,
								4755
							],
							[
								4938,
								4992
							],
							[
								5211,
								5241
							],
							[
								5893,
								5939
							],
							[
								5979,
								5983
							],
							[
								6010,
								6017
							],
							[
								6103,
								6142
							],
							[
								6227,
								6272
							],
							[
								6310,
								6314
							],
							[
								6338,
								6381
							],
							[
								6460,
								6505
							],
							[
								6550,
								6554
							],
							[
								6604,
								6608
							],
							[
								6615,
								6619
							],
							[
								6651,
								6684
							],
							[
								6716,
								6759
							],
							[
								6834,
								6838
							],
							[
								6877,
								6916
							],
							[
								6962,
								7005
							],
							[
								7050,
								7089
							],
							[
								7185,
								7218
							],
							[
								7250,
								7270
							],
							[
								7517,
								7539
							],
							[
								9831,
								9842
							],
							[
								10970,
								10983
							],
							[
								11363,
								11397
							],
							[
								11901,
								11945
							],
							[
								12064,
								12084
							],
							[
								12399,
								12409
							],
							[
								12437,
								12447
							],
							[
								12483,
								12496
							],
							[
								12746,
								12760
							],
							[
								13652,
								13661
							],
							[
								13902,
								13921
							],
							[
								14463,
								14476
							],
							[
								14494,
								14499
							],
							[
								14550,
								14563
							],
							[
								14614,
								14635
							],
							[
								15032,
								15048
							],
							[
								15436,
								15441
							],
							[
								15479,
								15494
							],
							[
								15641,
								15649
							],
							[
								15690,
								15698
							],
							[
								15975,
								16003
							],
							[
								16070,
								16104
							],
							[
								16138,
								16143
							],
							[
								16165,
								16195
							],
							[
								16437,
								16445
							],
							[
								16512,
								16516
							],
							[
								16606,
								16613
							],
							[
								16953,
								16977
							],
							[
								17222,
								17227
							],
							[
								18957,
								19001
							],
							[
								19448,
								19474
							],
							[
								20176,
								20199
							],
							[
								20319,
								20341
							],
							[
								20592,
								20596
							],
							[
								21084,
								21088
							],
							[
								21705,
								21734
							],
							[
								21759,
								21763
							],
							[
								21839,
								21862
							],
							[
								21906,
								21912
							],
							[
								21940,
								21944
							],
							[
								21960,
								21997
							],
							[
								22019,
								22035
							],
							[
								22055,
								22062
							],
							[
								22119,
								22147
							],
							[
								22201,
								22212
							],
							[
								22295,
								22303
							],
							[
								22399,
								22403
							],
							[
								22553,
								22557
							],
							[
								22655,
								22660
							],
							[
								22720,
								22731
							],
							[
								22803,
								22814
							],
							[
								22901,
								22906
							],
							[
								22956,
								22962
							],
							[
								23059,
								23067
							],
							[
								23242,
								23271
							],
							[
								23364,
								23417
							],
							[
								23570,
								23574
							],
							[
								23628,
								23632
							],
							[
								23908,
								23915
							],
							[
								23937,
								23943
							],
							[
								23972,
								24003
							],
							[
								24137,
								24161
							],
							[
								24287,
								24298
							],
							[
								24316,
								24332
							],
							[
								24491,
								24496
							],
							[
								24520,
								24524
							],
							[
								24572,
								24581
							],
							[
								24649,
								24654
							],
							[
								24792,
								24797
							],
							[
								24919,
								24930
							],
							[
								25019,
								25026
							],
							[
								25672,
								25688
							],
							[
								27742,
								27781
							],
							[
								27823,
								27837
							],
							[
								28086,
								28120
							],
							[
								28459,
								28473
							],
							[
								28568,
								28572
							],
							[
								28594,
								28608
							],
							[
								28639,
								28643
							],
							[
								29943,
								29959
							],
							[
								30009,
								30024
							],
							[
								30083,
								30102
							],
							[
								30125,
								30137
							],
							[
								30226,
								30230
							],
							[
								30329,
								30333
							],
							[
								30552,
								30558
							],
							[
								30648,
								30662
							],
							[
								30691,
								30709
							],
							[
								30846,
								30858
							],
							[
								30888,
								30953
							],
							[
								30982,
								30987
							],
							[
								31126,
								31164
							],
							[
								31189,
								31209
							],
							[
								31238,
								31287
							],
							[
								31334,
								31344
							],
							[
								31517,
								31527
							],
							[
								31600,
								31610
							],
							[
								31681,
								31691
							],
							[
								32218,
								32299
							],
							[
								32310,
								32333
							],
							[
								32551,
								32556
							],
							[
								32639,
								32648
							],
							[
								32678,
								32684
							],
							[
								32700,
								32729
							],
							[
								32765,
								32778
							],
							[
								33009,
								33015
							],
							[
								33024,
								33035
							],
							[
								33103,
								33125
							],
							[
								33342,
								33365
							],
							[
								33777,
								33806
							],
							[
								34128,
								34155
							],
							[
								34189,
								34202
							],
							[
								34229,
								34234
							],
							[
								34258,
								34263
							],
							[
								34308,
								34318
							],
							[
								34348,
								34358
							],
							[
								34444,
								34449
							],
							[
								34569,
								34574
							],
							[
								34588,
								34596
							],
							[
								34818,
								34822
							],
							[
								34875,
								34879
							],
							[
								34967,
								34980
							],
							[
								35081,
								35094
							],
							[
								35355,
								35388
							],
							[
								35442,
								35446
							],
							[
								35560,
								35586
							],
							[
								35929,
								35962
							],
							[
								36309,
								36354
							],
							[
								36395,
								36399
							],
							[
								36416,
								36445
							],
							[
								36481,
								36487
							],
							[
								36871,
								36941
							],
							[
								37541,
								37613
							],
							[
								37846,
								37851
							],
							[
								38573,
								38577
							],
							[
								38799,
								38838
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
<<<<<<< HEAD
							"e =>",
							"function MakeGraph(board=project.board)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABTDAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQ9cHJvamVjdC5ib2FyZCkAAAAAAAAAAFMMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTDAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQ9cHJvamVjdC5ib2FyZCkAAAAAAAAAAFMMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
=======
							"e =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA7AAAAUG9seWdvbiA9ICh7IGRhdGEsIG9wdHMgPSB7fSwgLi4ucHJvcHMgfSkgPT4KKCkKaSA9PgogIHYgPT4AAAAAAAAAADQMAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					324,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				],
				[
					57,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3134,
								3139
							],
							[
								3202,
								3208
							],
							[
								3310,
								3329
							],
							[
								3351,
								3356
							],
							[
								3459,
								3490
							],
							[
								3541,
								3584
							],
							[
								3629,
								3636
							],
							[
								3737,
								3822
							],
							[
								3974,
								3979
							],
							[
								4024,
								4042
							],
							[
								4081,
								4088
							],
							[
								4137,
								4144
							],
							[
								4183,
								4200
							],
							[
								4247,
								4254
							],
							[
								4291,
								4309
							],
							[
								4332,
								4341
							],
							[
								4364,
								4382
							],
							[
								4393,
								4454
							],
							[
								4574,
								4583
							],
							[
								4620,
								4631
							],
							[
								4642,
								4666
							],
							[
								4747,
								4755
							],
							[
								4938,
								4992
							],
							[
								5211,
								5241
							],
							[
								5893,
								5939
							],
							[
								5979,
								5983
							],
							[
								6010,
								6017
							],
							[
								6103,
								6142
							],
							[
								6227,
								6272
							],
							[
								6310,
								6314
							],
							[
								6338,
								6381
							],
							[
								6460,
								6505
							],
							[
								6550,
								6554
							],
							[
								6604,
								6608
							],
							[
								6615,
								6619
							],
							[
								6651,
								6684
							],
							[
								6716,
								6759
							],
							[
								6834,
								6838
							],
							[
								6877,
								6916
							],
							[
								6962,
								7005
							],
							[
								7050,
								7089
							],
							[
								7185,
								7218
							],
							[
								7250,
								7270
							],
							[
								7517,
								7539
							],
							[
								9831,
								9842
							],
							[
								10975,
								10988
							],
							[
								11368,
								11402
							],
							[
								11906,
								11950
							],
							[
								12069,
								12089
							],
							[
								12404,
								12414
							],
							[
								12442,
								12452
							],
							[
								12488,
								12501
							],
							[
								12751,
								12765
							],
							[
								13657,
								13666
							],
							[
								13907,
								13926
							],
							[
								14468,
								14481
							],
							[
								14499,
								14504
							],
							[
								14555,
								14568
							],
							[
								14619,
								14640
							],
							[
								15037,
								15053
							],
							[
								15441,
								15446
							],
							[
								15484,
								15499
							],
							[
								15646,
								15654
							],
							[
								15695,
								15703
							],
							[
								15980,
								16008
							],
							[
								16075,
								16109
							],
							[
								16143,
								16148
							],
							[
								16170,
								16200
							],
							[
								16442,
								16450
							],
							[
								16517,
								16521
							],
							[
								16611,
								16618
							],
							[
								16958,
								16982
							],
							[
								17227,
								17232
							],
							[
								18962,
								19006
							],
							[
								19453,
								19479
							],
							[
								20181,
								20204
							],
							[
								20324,
								20346
							],
							[
								20597,
								20601
							],
							[
								21089,
								21093
							],
							[
								21710,
								21739
							],
							[
								21764,
								21768
							],
							[
								21844,
								21867
							],
							[
								21911,
								21917
							],
							[
								21945,
								21949
							],
							[
								21965,
								22002
							],
							[
								22024,
								22040
							],
							[
								22060,
								22067
							],
							[
								22124,
								22152
							],
							[
								22206,
								22217
							],
							[
								22300,
								22308
							],
							[
								22404,
								22408
							],
							[
								22558,
								22562
							],
							[
								22660,
								22665
							],
							[
								22725,
								22736
							],
							[
								22808,
								22819
							],
							[
								22906,
								22911
							],
							[
								22961,
								22967
							],
							[
								23064,
								23072
							],
							[
								23247,
								23276
							],
							[
								23369,
								23422
							],
							[
								23575,
								23579
							],
							[
								23633,
								23637
							],
							[
								23913,
								23920
							],
							[
								23942,
								23948
							],
							[
								23977,
								24008
							],
							[
								24142,
								24166
							],
							[
								24292,
								24303
							],
							[
								24321,
								24337
							],
							[
								24496,
								24501
							],
							[
								24525,
								24529
							],
							[
								24577,
								24586
							],
							[
								24654,
								24659
							],
							[
								24797,
								24802
							],
							[
								24924,
								24935
							],
							[
								25024,
								25031
							],
							[
								25677,
								25693
							],
							[
								27747,
								27786
							],
							[
								27828,
								27842
							],
							[
								28091,
								28125
							],
							[
								28464,
								28478
							],
							[
								28573,
								28577
							],
							[
								28599,
								28613
							],
							[
								28644,
								28648
							],
							[
								29948,
								29964
							],
							[
								30014,
								30029
							],
							[
								30088,
								30107
							],
							[
								30130,
								30142
							],
							[
								30231,
								30235
							],
							[
								30334,
								30338
							],
							[
								30557,
								30563
							],
							[
								30653,
								30667
							],
							[
								30696,
								30714
							],
							[
								30851,
								30863
							],
							[
								30893,
								30958
							],
							[
								30987,
								30992
							],
							[
								31131,
								31169
							],
							[
								31194,
								31214
							],
							[
								31243,
								31292
							],
							[
								31339,
								31349
							],
							[
								31522,
								31532
							],
							[
								31605,
								31615
							],
							[
								31686,
								31696
							],
							[
								32223,
								32304
							],
							[
								32315,
								32338
							],
							[
								32556,
								32561
							],
							[
								32644,
								32653
							],
							[
								32683,
								32689
							],
							[
								32705,
								32734
							],
							[
								32770,
								32783
							],
							[
								33014,
								33020
							],
							[
								33029,
								33040
							],
							[
								33108,
								33130
							],
							[
								33347,
								33370
							],
							[
								33782,
								33811
							],
							[
								34133,
								34160
							],
							[
								34194,
								34207
							],
							[
								34234,
								34239
							],
							[
								34263,
								34268
							],
							[
								34313,
								34323
							],
							[
								34353,
								34363
							],
							[
								34449,
								34454
							],
							[
								34574,
								34579
							],
							[
								34593,
								34601
							],
							[
								34823,
								34827
							],
							[
								34880,
								34884
							],
							[
								34972,
								34985
							],
							[
								35086,
								35099
							],
							[
								35360,
								35393
							],
							[
								35447,
								35451
							],
							[
								35565,
								35591
							],
							[
								35934,
								35967
							],
							[
								36314,
								36359
							],
							[
								36400,
								36404
							],
							[
								36421,
								36450
							],
							[
								36486,
								36492
							],
							[
								36876,
								36946
							],
							[
								37546,
								37618
							],
							[
								37851,
								37856
							],
							[
								38578,
								38582
							],
							[
								38803,
								38844
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
<<<<<<< HEAD
							"e =>",
							"function MakeGraph(board = project.board)"
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
=======
							"e =>"
						]
					},
					"AQAAAAAAAAAAAAAANAwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					326,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/project.js",
						"symkeys":
						[
							[
								343,
								355
							],
							[
								360,
								381
							],
							[
								596,
								614
							],
							[
								1306,
								1332
							],
							[
								1480,
								1494
							],
							[
								1665,
								1671
							],
							[
								1835,
								1839
							],
							[
								1966,
								1977
							],
							[
								2182,
								2192
							],
							[
								2270,
								2288
							],
							[
								2613,
								2623
							],
							[
								3225,
								3254
							],
							[
								3732,
								3750
							],
							[
								3913,
								3927
							],
							[
								4086,
								4102
							],
							[
								4157,
								4172
							],
							[
								4204,
								4211
							],
							[
								4241,
								4252
							],
							[
								4284,
								4291
							],
							[
								4321,
								4336
							],
							[
								4367,
								4373
							],
							[
								4400,
								4410
							],
							[
								4474,
								4488
							],
							[
								4559,
								4577
							],
							[
								4793,
								4819
							],
							[
								4890,
								4911
							],
							[
								5116,
								5140
							],
							[
								5180,
								5187
							],
							[
								5217,
								5233
							],
							[
								5328,
								5334
							],
							[
								5434,
								5451
							],
							[
								5496,
								5507
							],
							[
								5541,
								5555
							],
							[
								5621,
								5632
							],
							[
								5662,
								5676
							],
							[
								5769,
								5811
							],
							[
								5997,
								6016
							],
							[
								6295,
								6312
							],
							[
								6912,
								6920
							],
							[
								7465,
								7501
							],
							[
								7527,
								7547
							],
							[
								7585,
								7591
							],
							[
								7713,
								7722
							],
							[
								7795,
								7807
							]
						],
						"symlist":
						[
							"EagleProject",
							"constructor(file, fs)",
							"loadFile = file =>",
							"load(name = this.basename)",
							"lazyOpen(file)",
							" () =>",
							"l =>",
							"close(file)",
							"closeAll()",
							"addLibraries(libs)",
							"open(file)",
							"static determineEaglePath(fs)",
							"findDocument(pred)",
							"pred = name =>",
							"getLibrary(name)",
							"get schematic()",
							"name =>",
							"get board()",
							"name =>",
							"get libraries()",
							"doc =>",
							"get root()",
							"get children()",
							"t = ([v, l, d]) =>",
							"static documentLocation(d)",
							"static documentKey(d)",
							"getDocumentDirectories()",
							"file =>",
							"getLibraryPath()",
							"dir =>",
							"getLibraryNames()",
							" () =>",
							" names =>",
							" () =>",
							" names =>",
							"findLibrary(name, dirs = this.libraryPath)",
							"updateLibrary(name)",
							"libProps = lib =>",
							"index(l)",
							"saveTo(dir = '.', overwrite = false)",
							"(resolve, reject) =>",
							"doc =>",
							"result =>",
							"EagleProject"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAA9AIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				],
				[
					58,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3134,
								3139
							],
							[
								3202,
								3208
							],
							[
								3310,
								3329
							],
							[
								3351,
								3356
							],
							[
								3459,
								3490
							],
							[
								3541,
								3584
							],
							[
								3629,
								3636
							],
							[
								3737,
								3822
							],
							[
								3974,
								3979
							],
							[
								4024,
								4042
							],
							[
								4081,
								4088
							],
							[
								4137,
								4144
							],
							[
								4183,
								4200
							],
							[
								4247,
								4254
							],
							[
								4291,
								4309
							],
							[
								4332,
								4341
							],
							[
								4364,
								4382
							],
							[
								4393,
								4454
							],
							[
								4574,
								4583
							],
							[
								4620,
								4631
							],
							[
								4642,
								4666
							],
							[
								4747,
								4755
							],
							[
								4938,
								4992
							],
							[
								5211,
								5241
							],
							[
								5893,
								5939
							],
							[
								5979,
								5983
							],
							[
								6010,
								6017
							],
							[
								6103,
								6142
							],
							[
								6227,
								6272
							],
							[
								6310,
								6314
							],
							[
								6338,
								6381
							],
							[
								6460,
								6505
							],
							[
								6550,
								6554
							],
							[
								6604,
								6608
							],
							[
								6615,
								6619
							],
							[
								6651,
								6684
							],
							[
								6716,
								6759
							],
							[
								6834,
								6838
							],
							[
								6877,
								6916
							],
							[
								6962,
								7005
							],
							[
								7050,
								7089
							],
							[
								7185,
								7218
							],
							[
								7250,
								7270
							],
							[
								7517,
								7539
							],
							[
								9831,
								9842
							],
							[
								10975,
								10988
							],
							[
								11368,
								11402
							],
							[
								11906,
								11950
							],
							[
								12069,
								12089
							],
							[
								12404,
								12414
							],
							[
								12442,
								12452
							],
							[
								12488,
								12501
							],
							[
								12751,
								12765
							],
							[
								13657,
								13666
							],
							[
								13907,
								13926
							],
							[
								14468,
								14481
							],
							[
								14499,
								14504
							],
							[
								14555,
								14568
							],
							[
								14619,
								14640
							],
							[
								15037,
								15053
							],
							[
								15441,
								15446
							],
							[
								15484,
								15499
							],
							[
								15646,
								15654
							],
							[
								15695,
								15703
							],
							[
								15980,
								16008
							],
							[
								16075,
								16109
							],
							[
								16143,
								16148
							],
							[
								16170,
								16200
							],
							[
								16442,
								16450
							],
							[
								16517,
								16521
							],
							[
								16611,
								16618
							],
							[
								16958,
								16982
							],
							[
								17227,
								17232
							],
							[
								18962,
								19006
							],
							[
								19453,
								19479
							],
							[
								20181,
								20204
							],
							[
								20324,
								20346
							],
							[
								20597,
								20601
							],
							[
								21089,
								21093
							],
							[
								21710,
								21739
							],
							[
								21764,
								21768
							],
							[
								21844,
								21867
							],
							[
								21911,
								21917
							],
							[
								21945,
								21949
							],
							[
								21965,
								22002
							],
							[
								22024,
								22040
							],
							[
								22060,
								22067
							],
							[
								22124,
								22152
							],
							[
								22206,
								22217
							],
							[
								22300,
								22308
							],
							[
								22404,
								22408
							],
							[
								22558,
								22562
							],
							[
								22660,
								22665
							],
							[
								22725,
								22736
							],
							[
								22808,
								22819
							],
							[
								22906,
								22911
							],
							[
								22961,
								22967
							],
							[
								23064,
								23072
							],
							[
								23247,
								23276
							],
							[
								23369,
								23422
							],
							[
								23575,
								23579
							],
							[
								23633,
								23637
							],
							[
								23913,
								23920
							],
							[
								23942,
								23948
							],
							[
								23977,
								24008
							],
							[
								24142,
								24166
							],
							[
								24292,
								24303
							],
							[
								24321,
								24337
							],
							[
								24496,
								24501
							],
							[
								24525,
								24529
							],
							[
								24577,
								24586
							],
							[
								24654,
								24659
							],
							[
								24797,
								24802
							],
							[
								24924,
								24935
							],
							[
								25024,
								25031
							],
							[
								25677,
								25693
							],
							[
								27747,
								27786
							],
							[
								27828,
								27842
							],
							[
								28091,
								28125
							],
							[
								28464,
								28478
							],
							[
								28573,
								28577
							],
							[
								28599,
								28613
							],
							[
								28644,
								28648
							],
							[
								29948,
								29964
							],
							[
								30014,
								30029
							],
							[
								30088,
								30107
							],
							[
								30130,
								30142
							],
							[
								30231,
								30235
							],
							[
								30334,
								30338
							],
							[
								30557,
								30563
							],
							[
								30653,
								30667
							],
							[
								30696,
								30714
							],
							[
								30851,
								30863
							],
							[
								30893,
								30958
							],
							[
								30987,
								30992
							],
							[
								31131,
								31169
							],
							[
								31194,
								31214
							],
							[
								31243,
								31292
							],
							[
								31339,
								31349
							],
							[
								31522,
								31532
							],
							[
								31605,
								31615
							],
							[
								31686,
								31696
							],
							[
								32223,
								32304
							],
							[
								32315,
								32338
							],
							[
								32556,
								32561
							],
							[
								32644,
								32653
							],
							[
								32683,
								32689
							],
							[
								32705,
								32734
							],
							[
								32770,
								32783
							],
							[
								33014,
								33020
							],
							[
								33029,
								33040
							],
							[
								33108,
								33130
							],
							[
								33347,
								33370
							],
							[
								33782,
								33811
							],
							[
								34133,
								34160
							],
							[
								34194,
								34207
							],
							[
								34234,
								34239
							],
							[
								34263,
								34268
							],
							[
								34313,
								34323
							],
							[
								34353,
								34363
							],
							[
								34449,
								34454
							],
							[
								34574,
								34579
							],
							[
								34593,
								34601
							],
							[
								34823,
								34827
							],
							[
								34880,
								34884
							],
							[
								34972,
								34985
							],
							[
								35086,
								35099
							],
							[
								35360,
								35393
							],
							[
								35447,
								35451
							],
							[
								35565,
								35591
							],
							[
								35934,
								35967
							],
							[
								36314,
								36359
							],
							[
								36400,
								36404
							],
							[
								36421,
								36450
							],
							[
								36486,
								36492
							],
							[
								36876,
								36946
							],
							[
								37546,
								37618
							],
							[
								37851,
								37856
							],
							[
								38578,
								38582
							],
							[
								38803,
								38844
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
<<<<<<< HEAD
							"e =>",
							"function MakeGraph(board = project.board)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVDAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQgPSBwcm9qZWN0LmJvYXJkKQAAAAAAAAAAVQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
=======
							"e =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD0AgAARWFnbGVQcm9qZWN0CiAgY29uc3RydWN0b3IoZmlsZSwgZnMpCiAgbG9hZEZpbGUgPSBmaWxlID0+CiAgbG9hZChuYW1lID0gdGhpcy5iYXNlbmFtZSkKICBsYXp5T3BlbihmaWxlKQooKSA9PgogIGwgPT4KICBjbG9zZShmaWxlKQogIGNsb3NlQWxsKCkKICBhZGRMaWJyYXJpZXMobGlicykKICBvcGVuKGZpbGUpCiAgc3RhdGljIGRldGVybWluZUVhZ2xlUGF0aChmcykKICBmaW5kRG9jdW1lbnQocHJlZCkKICBwcmVkID0gbmFtZSA9PgogIGdldExpYnJhcnkobmFtZSkKICBnZXQgc2NoZW1hdGljKCkKICBuYW1lID0+CiAgZ2V0IGJvYXJkKCkKICBuYW1lID0+CiAgZ2V0IGxpYnJhcmllcygpCiAgZG9jID0+CiAgZ2V0IHJvb3QoKQogIGdldCBjaGlsZHJlbigpCiAgdCA9IChbdiwgbCwgZF0pID0+CiAgc3RhdGljIGRvY3VtZW50TG9jYXRpb24oZCkKICBzdGF0aWMgZG9jdW1lbnRLZXkoZCkKICBnZXREb2N1bWVudERpcmVjdG9yaWVzKCkKICBmaWxlID0+CiAgZ2V0TGlicmFyeVBhdGgoKQogIGRpciA9PgogIGdldExpYnJhcnlOYW1lcygpCigpID0+Cm5hbWVzID0+CigpID0+Cm5hbWVzID0+CiAgZmluZExpYnJhcnkobmFtZSwgZGlycyA9IHRoaXMubGlicmFyeVBhdGgpCiAgdXBkYXRlTGlicmFyeShuYW1lKQogIGxpYlByb3BzID0gbGliID0+CiAgaW5kZXgobCkKICBzYXZlVG8oZGlyID0gJy4nLCBvdmVyd3JpdGUgPSBmYWxzZSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICBkb2MgPT4KICByZXN1bHQgPT4KRWFnbGVQcm9qZWN0AAAAAAAAAAA0DAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					328,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/ref.js",
						"symkeys":
						[
							[
								331,
								345
							],
							[
								350,
								387
							],
							[
								1171,
								1181
							],
							[
								1254,
								1267
							],
							[
								1459,
								1479
							],
							[
								1805,
								1819
							],
							[
								1928,
								1935
							],
							[
								2145,
								2157
							],
							[
								2223,
								2240
							],
							[
								2304,
								2321
							],
							[
								2386,
								2402
							],
							[
								2465,
								2480
							],
							[
								2543,
								2556
							],
							[
								2694,
								2703
							],
							[
								2930,
								2942
							],
							[
								3330,
								3339
							],
							[
								3402,
								3447
							],
							[
								3716,
								3730
							],
							[
								3751,
								3765
							]
						],
						"symlist":
						[
							"EagleReference",
							"constructor(root, path, check = true)",
							"get type()",
							"getPath(root)",
							"dereference(noThrow)",
							"replace(value)",
							"entry()",
							"get parent()",
							"get prevSibling()",
							"get nextSibling()",
							"get firstChild()",
							"get lastChild()",
							"down(...args)",
							"up(n = 1)",
							"shift(n = 1)",
							"inspect()",
							" function EagleRef(root, path, check = false)",
							"EagleReference",
							"EagleReference"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAAWgEAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				],
				[
					59,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3134,
								3139
							],
							[
								3202,
								3208
							],
							[
								3310,
								3329
							],
							[
								3351,
								3356
							],
							[
								3459,
								3490
							],
							[
								3541,
								3584
							],
							[
								3629,
								3636
							],
							[
								3737,
								3822
							],
							[
								3974,
								3979
							],
							[
								4024,
								4042
							],
							[
								4081,
								4088
							],
							[
								4137,
								4144
							],
							[
								4183,
								4200
							],
							[
								4247,
								4254
							],
							[
								4291,
								4309
							],
							[
								4332,
								4341
							],
							[
								4364,
								4382
							],
							[
								4393,
								4454
							],
							[
								4574,
								4583
							],
							[
								4620,
								4631
							],
							[
								4642,
								4666
							],
							[
								4747,
								4755
							],
							[
								4938,
								4992
							],
							[
								5211,
								5241
							],
							[
								5893,
								5939
							],
							[
								5979,
								5983
							],
							[
								6010,
								6017
							],
							[
								6103,
								6142
							],
							[
								6227,
								6272
							],
							[
								6310,
								6314
							],
							[
								6338,
								6381
							],
							[
								6460,
								6505
							],
							[
								6550,
								6554
							],
							[
								6604,
								6608
							],
							[
								6615,
								6619
							],
							[
								6651,
								6684
							],
							[
								6716,
								6759
							],
							[
								6834,
								6838
							],
							[
								6877,
								6916
							],
							[
								6962,
								7005
							],
							[
								7050,
								7089
							],
							[
								7185,
								7218
							],
							[
								7250,
								7270
							],
							[
								7517,
								7539
							],
							[
								9831,
								9842
							],
							[
								10975,
								10988
							],
							[
								11368,
								11402
							],
							[
								11906,
								11950
							],
							[
								12069,
								12089
							],
							[
								12404,
								12414
							],
							[
								12442,
								12452
							],
							[
								12488,
								12501
							],
							[
								12751,
								12765
							],
							[
								13657,
								13666
							],
							[
								13907,
								13926
							],
							[
								14468,
								14481
							],
							[
								14499,
								14504
							],
							[
								14555,
								14568
							],
							[
								14619,
								14640
							],
							[
								15037,
								15053
							],
							[
								15441,
								15446
							],
							[
								15484,
								15499
							],
							[
								15646,
								15654
							],
							[
								15695,
								15703
							],
							[
								15980,
								16008
							],
							[
								16075,
								16109
							],
							[
								16143,
								16148
							],
							[
								16170,
								16200
							],
							[
								16442,
								16450
							],
							[
								16517,
								16521
							],
							[
								16611,
								16618
							],
							[
								16958,
								16982
							],
							[
								17227,
								17232
							],
							[
								18962,
								19006
							],
							[
								19453,
								19479
							],
							[
								20181,
								20204
							],
							[
								20324,
								20346
							],
							[
								20597,
								20601
							],
							[
								21089,
								21093
							],
							[
								21710,
								21739
							],
							[
								21764,
								21768
							],
							[
								21844,
								21867
							],
							[
								21911,
								21917
							],
							[
								21945,
								21949
							],
							[
								21965,
								22002
							],
							[
								22024,
								22040
							],
							[
								22060,
								22067
							],
							[
								22124,
								22152
							],
							[
								22206,
								22217
							],
							[
								22300,
								22308
							],
							[
								22404,
								22408
							],
							[
								22558,
								22562
							],
							[
								22660,
								22665
							],
							[
								22725,
								22736
							],
							[
								22808,
								22819
							],
							[
								22906,
								22911
							],
							[
								22961,
								22967
							],
							[
								23064,
								23072
							],
							[
								23247,
								23276
							],
							[
								23369,
								23422
							],
							[
								23575,
								23579
							],
							[
								23633,
								23637
							],
							[
								23913,
								23920
							],
							[
								23942,
								23948
							],
							[
								23977,
								24008
							],
							[
								24142,
								24166
							],
							[
								24292,
								24303
							],
							[
								24321,
								24337
							],
							[
								24496,
								24501
							],
							[
								24525,
								24529
							],
							[
								24577,
								24586
							],
							[
								24654,
								24659
							],
							[
								24797,
								24802
							],
							[
								24924,
								24935
							],
							[
								25024,
								25031
							],
							[
								25677,
								25693
							],
							[
								27747,
								27786
							],
							[
								27828,
								27842
							],
							[
								28091,
								28125
							],
							[
								28464,
								28478
							],
							[
								28573,
								28577
							],
							[
								28599,
								28613
							],
							[
								28644,
								28648
							],
							[
								29948,
								29964
							],
							[
								30014,
								30029
							],
							[
								30088,
								30107
							],
							[
								30130,
								30142
							],
							[
								30231,
								30235
							],
							[
								30334,
								30338
							],
							[
								30557,
								30563
							],
							[
								30653,
								30667
							],
							[
								30696,
								30714
							],
							[
								30851,
								30863
							],
							[
								30893,
								30958
							],
							[
								30987,
								30992
							],
							[
								31131,
								31169
							],
							[
								31194,
								31214
							],
							[
								31243,
								31292
							],
							[
								31339,
								31349
							],
							[
								31522,
								31532
							],
							[
								31605,
								31615
							],
							[
								31686,
								31696
							],
							[
								32223,
								32304
							],
							[
								32315,
								32338
							],
							[
								32556,
								32561
							],
							[
								32644,
								32653
							],
							[
								32683,
								32689
							],
							[
								32705,
								32734
							],
							[
								32770,
								32783
							],
							[
								33014,
								33020
							],
							[
								33029,
								33040
							],
							[
								33108,
								33130
							],
							[
								33347,
								33370
							],
							[
								33782,
								33811
							],
							[
								34133,
								34160
							],
							[
								34194,
								34207
							],
							[
								34234,
								34239
							],
							[
								34263,
								34268
							],
							[
								34313,
								34323
							],
							[
								34353,
								34363
							],
							[
								34449,
								34454
							],
							[
								34574,
								34579
							],
							[
								34593,
								34601
							],
							[
								34823,
								34827
							],
							[
								34880,
								34884
							],
							[
								34972,
								34985
							],
							[
								35086,
								35099
							],
							[
								35360,
								35393
							],
							[
								35447,
								35451
							],
							[
								35565,
								35591
							],
							[
								35934,
								35967
							],
							[
								36314,
								36359
							],
							[
								36400,
								36404
							],
							[
								36421,
								36450
							],
							[
								36486,
								36492
							],
							[
								36876,
								36946
							],
							[
								37546,
								37618
							],
							[
								37851,
								37856
							],
							[
								38578,
								38582
							],
							[
								38803,
								38844
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board)"
						]
					},
<<<<<<< HEAD
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVDAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQgPSBwcm9qZWN0LmJvYXJkKQAAAAAAAAAAVQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
=======
					"AgAAAAAAAAAAAAAAAAAAAAAAAABaAQAARWFnbGVSZWZlcmVuY2UKICBjb25zdHJ1Y3Rvcihyb290LCBwYXRoLCBjaGVjayA9IHRydWUpCiAgZ2V0IHR5cGUoKQogIGdldFBhdGgocm9vdCkKICBkZXJlZmVyZW5jZShub1Rocm93KQogIHJlcGxhY2UodmFsdWUpCiAgZW50cnkoKQogIGdldCBwYXJlbnQoKQogIGdldCBwcmV2U2libGluZygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgZG93biguLi5hcmdzKQogIHVwKG4gPSAxKQogIHNoaWZ0KG4gPSAxKQogIGluc3BlY3QoKQpFYWdsZVJlZihyb290LCBwYXRoLCBjaGVjayA9IGZhbHNlKQpFYWdsZVJlZmVyZW5jZQpFYWdsZVJlZmVyZW5jZQAAAAAAAAAANAwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				],
				[
					60,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/graph.js",
						"symkeys":
						[
							[
								13,
								18
							],
							[
								23,
								36
							],
							[
								94,
								118
							],
							[
								370,
								400
							],
							[
								682,
								700
							],
							[
								946,
								953
							],
							[
								1063,
								1086
							],
							[
								1137,
								1150
							],
							[
								1270,
								1283
							],
							[
								1427,
								1455
							],
							[
								1493,
								1506
							],
							[
								1571,
								1596
							],
							[
								1719,
								1736
							],
							[
								1988,
								2013
							],
							[
								2049,
								2062
							],
							[
								2193,
								2220
							],
							[
								2375,
								2382
							],
							[
								2464,
								2471
							],
							[
								3171,
								3184
							],
							[
								3472,
								3488
							],
							[
								3534,
								3541
							],
							[
								3785,
								3838
							],
							[
<<<<<<< HEAD
								4260,
								4272
							],
=======
								4870,
								4883
							]
						],
						"symlist":
						[
							"EagleNodeList",
							"constructor(owner, ref, pred, getOrCreate = EagleElement.get)",
							"pred : () =>",
							"item(pos)",
							"([i, v]) =>",
							"get length()",
							"get iterator()",
							"remove(cond)",
							"pred = i =>",
							"cond = (child, i, list) =>",
							"append(...args)",
							"({ tagName, attributes, children }) =>",
							"toXML(depth = Infinity)",
							"static create(owner, ref, pred, getOrCreate)",
							"set(target, prop, value)",
							"get(target, prop, receiver)",
							"EagleNodeList",
							"EagleNodeList",
							" name =>",
							"e =>",
							"getPrototypeOf(target)",
							"EagleNodeList",
							"EagleNodeList"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAA6QEAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					331,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								4486,
								4505
							],
							[
								4861,
								4869
							],
							[
								7342,
								7353
							],
							[
								7532,
								7539
							],
							[
								8342,
								8354
							],
							[
								8637,
								8645
							],
							[
								9193,
								9243
							],
							[
								9469,
								9523
							],
							[
								10624,
								10628
							],
							[
								10633,
								10664
							],
							[
								10782,
								10794
							],
							[
								10853,
								10857
							],
							[
								10896,
								10900
							],
							[
								10905,
								10930
							],
							[
								10988,
								11006
							]
						],
						"symlist":
						[
							"Graph",
							"constructor()",
							"checkForDuplicateNodes()",
							"checkForDuplicateConnections()",
							"getAdjacencyList()",
							"node =>",
							"getConnectedNodes(node)",
							"connection =>",
							"connection =>",
							"getConnectionsFromNode(node)",
							"connection =>",
							"getNeighboringNodes(node)",
							"nodeConnection =>",
							"isConnected(node1, node2)",
							"connection =>",
							"addConnection(node1, node2)",
							"node =>",
							"node =>",
							"connection =>",
							"addNode(newNode)",
							"node =>",
							"findMinimumCyclesFromSource(adjacencyListSourceIndex)",
							"nodeIndex =>",
							"findMinimumCycles()",
							"cycle =>",
							"edgePair =>",
							"edge =>",
							"nodeIndex =>",
							"cycle =>",
							"static doArraysContainSameElements(array1, array2)",
							"static findShortestPath(adjacencyList, source, target)",
							"Node",
							"constructor(point, connections)",
							"equals(node)",
							"Node",
							"Edge",
							"constructor(node1, node2)",
							"equals(connection)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVDAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQgPSBwcm9qZWN0LmJvYXJkKQAAAAAAAAAADQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/leafletjs.com/SlavaUkraini/examples/custom-icons/example.html",
						"symkeys":
						[
							[
								692,
								702
							],
							[
								742,
								760
							],
							[
								881,
								884
							]
						],
						"symlist":
						[
							"html, body",
							".leaflet-container",
							"map"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANAwAAR3JhcGgKICBjb25zdHJ1Y3RvcigpCiAgY2hlY2tGb3JEdXBsaWNhdGVOb2RlcygpCiAgY2hlY2tGb3JEdXBsaWNhdGVDb25uZWN0aW9ucygpCiAgZ2V0QWRqYWNlbmN5TGlzdCgpCiAgbm9kZSA9PgogIGdldENvbm5lY3RlZE5vZGVzKG5vZGUpCiAgY29ubmVjdGlvbiA9PgogIGNvbm5lY3Rpb24gPT4KICBnZXRDb25uZWN0aW9uc0Zyb21Ob2RlKG5vZGUpCiAgY29ubmVjdGlvbiA9PgogIGdldE5laWdoYm9yaW5nTm9kZXMobm9kZSkKICBub2RlQ29ubmVjdGlvbiA9PgogIGlzQ29ubmVjdGVkKG5vZGUxLCBub2RlMikKICBjb25uZWN0aW9uID0+CiAgYWRkQ29ubmVjdGlvbihub2RlMSwgbm9kZTIpCiAgbm9kZSA9PgogIG5vZGUgPT4KICBjb25uZWN0aW9uID0+CiAgYWRkTm9kZShuZXdOb2RlKQogIG5vZGUgPT4KICBmaW5kTWluaW11bUN5Y2xlc0Zyb21Tb3VyY2UoYWRqYWNlbmN5TGlzdFNvdXJjZUluZGV4KQogIG5vZGVJbmRleCA9PgogIGZpbmRNaW5pbXVtQ3ljbGVzKCkKICBjeWNsZSA9PgogIGVkZ2VQYWlyID0+CiAgZWRnZSA9PgogIG5vZGVJbmRleCA9PgogIGN5Y2xlID0+CiAgc3RhdGljIGRvQXJyYXlzQ29udGFpblNhbWVFbGVtZW50cyhhcnJheTEsIGFycmF5MikKICBzdGF0aWMgZmluZFNob3J0ZXN0UGF0aChhZGphY2VuY3lMaXN0LCBzb3VyY2UsIHRhcmdldCkKTm9kZQogIGNvbnN0cnVjdG9yKHBvaW50LCBjb25uZWN0aW9ucykKICBlcXVhbHMobm9kZSkKTm9kZQpFZGdlCiAgY29uc3RydWN0b3Iobm9kZTEsIG5vZGUyKQogIGVxdWFscyhjb25uZWN0aW9uKQAAAAAAAAAAJwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/cubic-spline/index.ts",
						"symkeys":
						[
							[
								6,
								12
							],
							[
								97,
								108
							],
							[
								249,
								261
							],
							[
								1484,
								1498
							],
							[
								1960,
								1962
							],
							[
								2458,
								2463
							],
							[
								3374,
								3382
							],
							[
								3522,
								3530
							]
						],
						"symlist":
						[
							"Spline",
							"constructor",
							"getNaturalKs",
							"getIndexBefore",
							"at",
							"solve",
							"zerosMat",
							"swapRows"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAnAAAAICBodG1sLCBib2R5CiAgLmxlYWZsZXQtY29udGFpbmVyCiAgbWFwAAAAAAAAAABXAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/cubic-spline/LICENSE",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABXAAAAU3BsaW5lCiAgY29uc3RydWN0b3IKICBnZXROYXR1cmFsS3MKICBnZXRJbmRleEJlZm9yZQogIGF0CiAgc29sdmUKICB6ZXJvc01hdAogIHN3YXBSb3dzAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/cubic-spline/README.md",
						"symkeys":
						[
							[
								0,
								14
							],
							[
								254,
								269
							],
							[
								307,
								315
							],
							[
								652,
								659
							],
							[
								681,
								688
							]
						],
						"symlist":
						[
							" cubic-spline",
							"   installation",
							"   usage",
							"   test",
							"   lint"
						]
					},
					"AQAAAAAAAAAAAAAAKQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/cubic-spline/test.js",
						"symkeys":
						[
							[
								75,
								88
							],
							[
								460,
								473
							],
							[
								721,
								734
							]
						],
						"symlist":
						[
							" function (t)",
							" function (t)",
							" function (t)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAApAAAAY3ViaWMtc3BsaW5lCmluc3RhbGxhdGlvbgp1c2FnZQp0ZXN0CmxpbnQAAAAAAAAAAAsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/cubic-spline/README.md",
						"symkeys":
						[
							[
								0,
								14
							],
							[
								254,
								269
							],
							[
								307,
								315
							],
							[
								652,
								659
							],
							[
								681,
								688
							]
						],
						"symlist":
						[
							" cubic-spline",
							"   installation",
							"   usage",
							"   test",
							"   lint"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAALAAAAKHQpCih0KQoodCkAAAAAAAAAACkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/.---config",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAApAAAAY3ViaWMtc3BsaW5lCmluc3RhbGxhdGlvbgp1c2FnZQp0ZXN0CmxpbnQAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/graph.js",
						"symkeys":
						[
							[
								13,
								18
							],
							[
								23,
								36
							],
							[
								94,
								118
							],
							[
								370,
								400
							],
							[
								682,
								700
							],
							[
								946,
								953
							],
							[
								1063,
								1086
							],
							[
								1137,
								1150
							],
							[
								1270,
								1283
							],
							[
								1427,
								1455
							],
							[
								1493,
								1506
							],
							[
								1571,
								1596
							],
							[
								1719,
								1736
							],
							[
								1988,
								2013
							],
							[
								2049,
								2062
							],
							[
								2193,
								2220
							],
							[
								2375,
								2382
							],
							[
								2464,
								2471
							],
							[
								3171,
								3184
							],
							[
								3472,
								3488
							],
							[
								3534,
								3541
							],
							[
								3785,
								3838
							],
							[
								4260,
								4272
							],
							[
								4486,
								4505
							],
							[
								4861,
								4869
							],
							[
								7342,
								7353
							],
							[
								7532,
								7539
							],
							[
								8342,
								8354
							],
							[
								8637,
								8645
							],
							[
								9193,
								9243
							],
							[
								9469,
								9523
							],
							[
								10624,
								10628
							],
							[
								10633,
								10664
							],
							[
								10782,
								10794
							],
							[
								10853,
								10857
							],
							[
								10896,
								10900
							],
							[
								10905,
								10930
							],
							[
								10988,
								11006
							]
						],
						"symlist":
						[
							"Graph",
							"constructor()",
							"checkForDuplicateNodes()",
							"checkForDuplicateConnections()",
							"getAdjacencyList()",
							"node =>",
							"getConnectedNodes(node)",
							"connection =>",
							"connection =>",
							"getConnectionsFromNode(node)",
							"connection =>",
							"getNeighboringNodes(node)",
							"nodeConnection =>",
							"isConnected(node1, node2)",
							"connection =>",
							"addConnection(node1, node2)",
							"node =>",
							"node =>",
							"connection =>",
							"addNode(newNode)",
							"node =>",
							"findMinimumCyclesFromSource(adjacencyListSourceIndex)",
							"nodeIndex =>",
							"findMinimumCycles()",
							"cycle =>",
							"edgePair =>",
							"edge =>",
							"nodeIndex =>",
							"cycle =>",
							"static doArraysContainSameElements(array1, array2)",
							"static findShortestPath(adjacencyList, source, target)",
							"Node",
							"constructor(point, connections)",
							"equals(node)",
							"Node",
							"Edge",
							"constructor(node1, node2)",
							"equals(connection)"
						]
					},
					"AQAAAAAAAAAAAAAADQMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/CToy",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANAwAAR3JhcGgKICBjb25zdHJ1Y3RvcigpCiAgY2hlY2tGb3JEdXBsaWNhdGVOb2RlcygpCiAgY2hlY2tGb3JEdXBsaWNhdGVDb25uZWN0aW9ucygpCiAgZ2V0QWRqYWNlbmN5TGlzdCgpCiAgbm9kZSA9PgogIGdldENvbm5lY3RlZE5vZGVzKG5vZGUpCiAgY29ubmVjdGlvbiA9PgogIGNvbm5lY3Rpb24gPT4KICBnZXRDb25uZWN0aW9uc0Zyb21Ob2RlKG5vZGUpCiAgY29ubmVjdGlvbiA9PgogIGdldE5laWdoYm9yaW5nTm9kZXMobm9kZSkKICBub2RlQ29ubmVjdGlvbiA9PgogIGlzQ29ubmVjdGVkKG5vZGUxLCBub2RlMikKICBjb25uZWN0aW9uID0+CiAgYWRkQ29ubmVjdGlvbihub2RlMSwgbm9kZTIpCiAgbm9kZSA9PgogIG5vZGUgPT4KICBjb25uZWN0aW9uID0+CiAgYWRkTm9kZShuZXdOb2RlKQogIG5vZGUgPT4KICBmaW5kTWluaW11bUN5Y2xlc0Zyb21Tb3VyY2UoYWRqYWNlbmN5TGlzdFNvdXJjZUluZGV4KQogIG5vZGVJbmRleCA9PgogIGZpbmRNaW5pbXVtQ3ljbGVzKCkKICBjeWNsZSA9PgogIGVkZ2VQYWlyID0+CiAgZWRnZSA9PgogIG5vZGVJbmRleCA9PgogIGN5Y2xlID0+CiAgc3RhdGljIGRvQXJyYXlzQ29udGFpblNhbWVFbGVtZW50cyhhcnJheTEsIGFycmF5MikKICBzdGF0aWMgZmluZFNob3J0ZXN0UGF0aChhZGphY2VuY3lMaXN0LCBzb3VyY2UsIHRhcmdldCkKTm9kZQogIGNvbnN0cnVjdG9yKHBvaW50LCBjb25uZWN0aW9ucykKICBlcXVhbHMobm9kZSkKTm9kZQpFZGdlCiAgY29uc3RydWN0b3Iobm9kZTEsIG5vZGUyKQogIGVxdWFscyhjb25uZWN0aW9uKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/main.c",
						"symkeys":
						[
							[
								9,
								20
							]
						],
						"symlist":
						[
							" Ⓜ  CTOY_SAMPLE … — macro object"
						]
					},
					"AQAAAAAAAAAAAAAAHwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include/ctoy.h",
						"symkeys":
						[
							[
								1158,
								1164
							],
							[
								1374,
								1387
							],
							[
								1433,
								1450
							],
							[
								1532,
								1542
							],
							[
								1597,
								1611
							],
							[
								1667,
								1675
							],
							[
								1747,
								1753
							],
							[
								1835,
								1848
							],
							[
								1926,
								1936
							],
							[
								2018,
								2027
							],
							[
								2066,
								2075
							],
							[
								2135,
								2152
							],
							[
								2189,
								2207
							],
							[
								2247,
								2263
							],
							[
								2314,
								2331
							],
							[
								2379,
								2401
							],
							[
								2470,
								2493
							],
							[
								2560,
								2584
							],
							[
								2653,
								2670
							],
							[
								2678,
								2685
							],
							[
								2737,
								2753
							],
							[
								2761,
								2768
							],
							[
								2871,
								2885
							],
							[
								2938,
								2954
							],
							[
								3009,
								3025
							],
							[
								3093,
								3107
							],
							[
								3221,
								3233
							],
							[
								3274,
								3286
							],
							[
								3325,
								3348
							],
							[
								3413,
								3438
							],
							[
								3505,
								3530
							],
							[
								3633,
								3646
							],
							[
								3688,
								3701
							],
							[
								3765,
								3786
							],
							[
								3849,
								3873
							],
							[
								3924,
								3950
							],
							[
								4004,
								4030
							],
							[
								4107,
								4135
							],
							[
								4214,
								4242
							],
							[
								4336,
								4354
							],
							[
								4439,
								4452
							],
							[
								4503,
								4520
							],
							[
								4528,
								4541
							],
							[
								4649,
								4669
							],
							[
								4725,
								4745
							],
							[
								4842,
								4856
							],
							[
								4881,
								4900
							],
							[
								4920,
								4934
							],
							[
								4959,
								4973
							],
							[
								4998,
								5013
							],
							[
								5037,
								5051
							],
							[
								5076,
								5086
							],
							[
								5115,
								5125
							],
							[
								5154,
								5164
							],
							[
								5193,
								5203
							],
							[
								5232,
								5242
							],
							[
								5271,
								5281
							],
							[
								5310,
								5320
							],
							[
								5349,
								5359
							],
							[
								5388,
								5398
							],
							[
								5427,
								5437
							],
							[
								5466,
								5484
							],
							[
								5505,
								5519
							],
							[
								5544,
								5554
							],
							[
								5583,
								5593
							],
							[
								5622,
								5632
							],
							[
								5661,
								5671
							],
							[
								5700,
								5710
							],
							[
								5739,
								5749
							],
							[
								5778,
								5788
							],
							[
								5817,
								5827
							],
							[
								5856,
								5866
							],
							[
								5895,
								5905
							],
							[
								5934,
								5944
							],
							[
								5973,
								5983
							],
							[
								6012,
								6022
							],
							[
								6051,
								6061
							],
							[
								6090,
								6100
							],
							[
								6129,
								6139
							],
							[
								6168,
								6178
							],
							[
								6207,
								6217
							],
							[
								6246,
								6256
							],
							[
								6285,
								6295
							],
							[
								6324,
								6334
							],
							[
								6363,
								6373
							],
							[
								6402,
								6412
							],
							[
								6441,
								6451
							],
							[
								6480,
								6490
							],
							[
								6519,
								6529
							],
							[
								6558,
								6579
							],
							[
								6597,
								6615
							],
							[
								6636,
								6658
							],
							[
								6675,
								6696
							],
							[
								6714,
								6730
							],
							[
								6754,
								6770
							],
							[
								6794,
								6809
							],
							[
								6834,
								6848
							],
							[
								6874,
								6886
							],
							[
								6914,
								6932
							],
							[
								6954,
								6969
							],
							[
								6994,
								7009
							],
							[
								7034,
								7048
							],
							[
								7074,
								7087
							],
							[
								7114,
								7127
							],
							[
								7154,
								7165
							],
							[
								7194,
								7210
							],
							[
								7234,
								7252
							],
							[
								7274,
								7287
							],
							[
<<<<<<< HEAD
								7314,
								7326
							],
=======
								38563,
								38567
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpAQAARWFnbGVOb2RlTGlzdAogIGNvbnN0cnVjdG9yKG93bmVyLCByZWYsIHByZWQsIGdldE9yQ3JlYXRlID0gRWFnbGVFbGVtZW50LmdldCkKICBwcmVkIDogKCkgPT4KICBpdGVtKHBvcykKKFtpLCB2XSkgPT4KICBnZXQgbGVuZ3RoKCkKICBnZXQgaXRlcmF0b3IoKQogIHJlbW92ZShjb25kKQogIHByZWQgPSBpID0+CiAgY29uZCA9IChjaGlsZCwgaSwgbGlzdCkgPT4KICBhcHBlbmQoLi4uYXJncykKKHsgdGFnTmFtZSwgYXR0cmlidXRlcywgY2hpbGRyZW4gfSkgPT4KICB0b1hNTChkZXB0aCA9IEluZmluaXR5KQogIHN0YXRpYyBjcmVhdGUob3duZXIsIHJlZiwgcHJlZCwgZ2V0T3JDcmVhdGUpCiAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpCiAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpCkVhZ2xlTm9kZUxpc3QKRWFnbGVOb2RlTGlzdApuYW1lID0+CiAgZSA9PgogIGdldFByb3RvdHlwZU9mKHRhcmdldCkKRWFnbGVOb2RlTGlzdApFYWdsZU5vZGVMaXN0AAAAAAAAAAA0DAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					332,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/transformation.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								7354,
								7372
							],
							[
								7394,
								7414
							],
							[
								7434,
								7451
							],
							[
								7474,
								7495
							],
							[
								7514,
								7528
							],
							[
								7554,
								7565
							],
							[
								7594,
								7605
							],
							[
								7634,
								7645
							],
							[
								7674,
								7685
							],
							[
								7714,
								7725
							],
							[
								7754,
								7765
							],
							[
								7794,
								7805
							],
							[
								7834,
								7845
							],
							[
								7874,
								7885
							],
							[
								7914,
								7926
							],
							[
								7954,
								7966
							],
							[
								7994,
								8006
							],
							[
								8034,
								8046
							],
							[
								8074,
								8086
							],
							[
								8114,
								8126
							],
							[
								8154,
								8166
							],
							[
								8194,
								8206
							],
							[
								8234,
								8246
							],
							[
								8274,
								8286
							],
							[
								8314,
								8326
							],
							[
								8354,
								8366
							],
							[
								8394,
								8406
							],
							[
								8434,
								8446
							],
							[
								8474,
								8486
							],
							[
								8514,
								8526
							],
							[
								8554,
								8567
							],
							[
								8594,
								8607
							],
							[
								8634,
								8647
							],
							[
								8674,
								8687
							],
							[
								8714,
								8727
							],
							[
								8754,
								8767
							],
							[
								8794,
								8807
							],
							[
								8834,
								8847
							],
							[
								8874,
								8887
							],
							[
								8914,
								8927
							],
							[
								8954,
								8973
							],
							[
								8994,
								9012
							],
							[
								9034,
								9054
							],
							[
								9074,
								9094
							],
							[
								9114,
								9129
							],
							[
								9154,
								9171
							],
							[
								9194,
								9211
							],
							[
								9234,
								9253
							],
							[
								9274,
								9295
							],
							[
								9314,
								9331
							],
							[
								9354,
								9373
							],
							[
								9394,
								9414
							],
							[
								9434,
								9456
							],
							[
								9474,
								9492
							],
							[
								9514,
								9534
							],
							[
								9554,
								9567
							],
							[
								9615,
								9634
							],
							[
								9653,
								9672
							],
							[
								9691,
								9710
							],
							[
								9729,
								9748
							],
							[
								9767,
								9786
							],
							[
								9805,
								9824
							],
							[
								9843,
								9862
							],
							[
								9881,
								9900
							],
							[
								9919,
								9941
							],
							[
								9975,
								9998
							],
							[
								10031,
								10055
							],
							[
								10104,
								10119
							],
							[
								10142,
								10157
							],
							[
								10180,
								10195
							],
							[
								10218,
								10233
							],
							[
								10256,
								10271
							],
							[
								10294,
								10309
							],
							[
								10332,
								10347
							],
							[
								10370,
								10385
							],
							[
								10408,
								10423
							],
							[
								10446,
								10462
							],
							[
								10484,
								10500
							],
							[
								10523,
								10539
							],
							[
								10562,
								10578
							],
							[
								10601,
								10617
							],
							[
								10640,
								10656
							],
							[
								10679,
								10695
							]
						],
						"symlist":
						[
							"CTOY_H",
							"CTOY_CHAR_MAX",
							"CTOY_PEN_DATA_MAX",
							"ctoy_begin",
							"ctoy_main_loop",
							"ctoy_end",
							"ctoy_t",
							"ctoy_get_time",
							"ctoy_sleep",
							"ctoy_argc",
							"ctoy_argv",
							"ctoy_window_width",
							"ctoy_window_height",
							"ctoy_window_size",
							"ctoy_window_title",
							"ctoy_window_fullscreen",
							"ctoy_frame_buffer_width",
							"ctoy_frame_buffer_height",
							"ctoy_render_image",
							"m_image",
							"ctoy_swap_buffer",
							"m_image",
							"ctoy_key_press",
							"ctoy_key_release",
							"ctoy_key_pressed",
							"ctoy_get_chars",
							"ctoy_mouse_x",
							"ctoy_mouse_y",
							"ctoy_mouse_button_press",
							"ctoy_mouse_button_release",
							"ctoy_mouse_button_pressed",
							"ctoy_scroll_x",
							"ctoy_scroll_y",
							"ctoy_joystick_present",
							"ctoy_joystick_axis_count",
							"ctoy_joystick_button_count",
							"ctoy_joystick_button_press",
							"ctoy_joystick_button_release",
							"ctoy_joystick_button_pressed",
							"ctoy_joystick_axis",
							"ctoy_pen_data",
							"ctoy_get_pen_data",
							"ctoy_pen_data",
							"ctoy_register_memory",
							"ctoy_retrieve_memory",
							"CTOY_KEY_SPACE",
							"CTOY_KEY_APOSTROPHE",
							"CTOY_KEY_COMMA",
							"CTOY_KEY_MINUS",
							"CTOY_KEY_PERIOD",
							"CTOY_KEY_SLASH",
							"CTOY_KEY_0",
							"CTOY_KEY_1",
							"CTOY_KEY_2",
							"CTOY_KEY_3",
							"CTOY_KEY_4",
							"CTOY_KEY_5",
							"CTOY_KEY_6",
							"CTOY_KEY_7",
							"CTOY_KEY_8",
							"CTOY_KEY_9",
							"CTOY_KEY_SEMICOLON",
							"CTOY_KEY_EQUAL",
							"CTOY_KEY_A",
							"CTOY_KEY_B",
							"CTOY_KEY_C",
							"CTOY_KEY_D",
							"CTOY_KEY_E",
							"CTOY_KEY_F",
							"CTOY_KEY_G",
							"CTOY_KEY_H",
							"CTOY_KEY_I",
							"CTOY_KEY_J",
							"CTOY_KEY_K",
							"CTOY_KEY_L",
							"CTOY_KEY_M",
							"CTOY_KEY_N",
							"CTOY_KEY_O",
							"CTOY_KEY_P",
							"CTOY_KEY_Q",
							"CTOY_KEY_R",
							"CTOY_KEY_S",
							"CTOY_KEY_T",
							"CTOY_KEY_U",
							"CTOY_KEY_V",
							"CTOY_KEY_W",
							"CTOY_KEY_X",
							"CTOY_KEY_Y",
							"CTOY_KEY_Z",
							"CTOY_KEY_LEFT_BRACKET",
							"CTOY_KEY_BACKSLASH",
							"CTOY_KEY_RIGHT_BRACKET",
							"CTOY_KEY_GRAVE_ACCENT",
							"CTOY_KEY_WORLD_1",
							"CTOY_KEY_WORLD_2",
							"CTOY_KEY_ESCAPE",
							"CTOY_KEY_ENTER",
							"CTOY_KEY_TAB",
							"CTOY_KEY_BACKSPACE",
							"CTOY_KEY_INSERT",
							"CTOY_KEY_DELETE",
							"CTOY_KEY_RIGHT",
							"CTOY_KEY_LEFT",
							"CTOY_KEY_DOWN",
							"CTOY_KEY_UP",
							"CTOY_KEY_PAGE_UP",
							"CTOY_KEY_PAGE_DOWN",
							"CTOY_KEY_HOME",
							"CTOY_KEY_END",
							"CTOY_KEY_CAPS_LOCK",
							"CTOY_KEY_SCROLL_LOCK",
							"CTOY_KEY_NUM_LOCK",
							"CTOY_KEY_PRINT_SCREEN",
							"CTOY_KEY_PAUSE",
							"CTOY_KEY_F1",
							"CTOY_KEY_F2",
							"CTOY_KEY_F3",
							"CTOY_KEY_F4",
							"CTOY_KEY_F5",
							"CTOY_KEY_F6",
							"CTOY_KEY_F7",
							"CTOY_KEY_F8",
							"CTOY_KEY_F9",
							"CTOY_KEY_F10",
							"CTOY_KEY_F11",
							"CTOY_KEY_F12",
							"CTOY_KEY_F13",
							"CTOY_KEY_F14",
							"CTOY_KEY_F15",
							"CTOY_KEY_F16",
							"CTOY_KEY_F17",
							"CTOY_KEY_F18",
							"CTOY_KEY_F19",
							"CTOY_KEY_F20",
							"CTOY_KEY_F21",
							"CTOY_KEY_F22",
							"CTOY_KEY_F23",
							"CTOY_KEY_F24",
							"CTOY_KEY_F25",
							"CTOY_KEY_KP_0",
							"CTOY_KEY_KP_1",
							"CTOY_KEY_KP_2",
							"CTOY_KEY_KP_3",
							"CTOY_KEY_KP_4",
							"CTOY_KEY_KP_5",
							"CTOY_KEY_KP_6",
							"CTOY_KEY_KP_7",
							"CTOY_KEY_KP_8",
							"CTOY_KEY_KP_9",
							"CTOY_KEY_KP_DECIMAL",
							"CTOY_KEY_KP_DIVIDE",
							"CTOY_KEY_KP_MULTIPLY",
							"CTOY_KEY_KP_SUBTRACT",
							"CTOY_KEY_KP_ADD",
							"CTOY_KEY_KP_ENTER",
							"CTOY_KEY_KP_EQUAL",
							"CTOY_KEY_LEFT_SHIFT",
							"CTOY_KEY_LEFT_CONTROL",
							"CTOY_KEY_LEFT_ALT",
							"CTOY_KEY_LEFT_SUPER",
							"CTOY_KEY_RIGHT_SHIFT",
							"CTOY_KEY_RIGHT_CONTROL",
							"CTOY_KEY_RIGHT_ALT",
							"CTOY_KEY_RIGHT_SUPER",
							"CTOY_KEY_MENU",
							"CTOY_MOUSE_BUTTON_1",
							"CTOY_MOUSE_BUTTON_2",
							"CTOY_MOUSE_BUTTON_3",
							"CTOY_MOUSE_BUTTON_4",
							"CTOY_MOUSE_BUTTON_5",
							"CTOY_MOUSE_BUTTON_6",
							"CTOY_MOUSE_BUTTON_7",
							"CTOY_MOUSE_BUTTON_8",
							"CTOY_MOUSE_BUTTON_LEFT",
							"CTOY_MOUSE_BUTTON_RIGHT",
							"CTOY_MOUSE_BUTTON_MIDDLE",
							"CTOY_JOYSTICK_1",
							"CTOY_JOYSTICK_2",
							"CTOY_JOYSTICK_3",
							"CTOY_JOYSTICK_4",
							"CTOY_JOYSTICK_5",
							"CTOY_JOYSTICK_6",
							"CTOY_JOYSTICK_7",
							"CTOY_JOYSTICK_8",
							"CTOY_JOYSTICK_9",
							"CTOY_JOYSTICK_10",
							"CTOY_JOYSTICK_11",
							"CTOY_JOYSTICK_12",
							"CTOY_JOYSTICK_13",
							"CTOY_JOYSTICK_14",
							"CTOY_JOYSTICK_15",
							"CTOY_JOYSTICK_16"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAA4pOCICBDVE9ZX1NBTVBMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAACAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/util/imgui_ctoy.c",
						"symkeys":
						[
							[
								25,
								35
							],
							[
								46,
								68
							],
							[
								122,
								144
							],
							[
								179,
								200
							],
							[
								235,
								266
							],
							[
								360,
								391
							],
							[
								495,
								514
							],
							[
								1761,
								1784
							]
						],
						"symlist":
						[
							" Ⓜ  GLFWwindow … — macro object",
							" ⒡  glfwSetClipboardString ( ) ; — function declaration",
							" ⒡  glfwGetClipboardString ( ) ; — function declaration",
							" ⒡  ctoy__get_glfw_window ( ) ; — function declaration",
							"—Ⓕ– ImGui_ImplGlfw_GetClipboardText ( ) { … } — function",
							"—Ⓕ– ImGui_ImplGlfw_SetClipboardText ( ) { … } — function",
							"—Ⓕ– ImGui_ImplCToy_Init ( ) { … } — function",
							"—Ⓕ– ImGui_ImplCToy_NewFrame ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIDAAAQ1RPWV9ICkNUT1lfQ0hBUl9NQVgKQ1RPWV9QRU5fREFUQV9NQVgKICBjdG95X2JlZ2luCiAgY3RveV9tYWluX2xvb3AKICBjdG95X2VuZAogIGN0b3lfdAogIGN0b3lfZ2V0X3RpbWUKICBjdG95X3NsZWVwCiAgY3RveV9hcmdjCiAgY3RveV9hcmd2CiAgY3RveV93aW5kb3dfd2lkdGgKICBjdG95X3dpbmRvd19oZWlnaHQKICBjdG95X3dpbmRvd19zaXplCiAgY3RveV93aW5kb3dfdGl0bGUKICBjdG95X3dpbmRvd19mdWxsc2NyZWVuCiAgY3RveV9mcmFtZV9idWZmZXJfd2lkdGgKICBjdG95X2ZyYW1lX2J1ZmZlcl9oZWlnaHQKICBjdG95X3JlbmRlcl9pbWFnZQogIG1faW1hZ2UKICBjdG95X3N3YXBfYnVmZmVyCiAgbV9pbWFnZQogIGN0b3lfa2V5X3ByZXNzCiAgY3RveV9rZXlfcmVsZWFzZQogIGN0b3lfa2V5X3ByZXNzZWQKICBjdG95X2dldF9jaGFycwogIGN0b3lfbW91c2VfeAogIGN0b3lfbW91c2VfeQogIGN0b3lfbW91c2VfYnV0dG9uX3ByZXNzCiAgY3RveV9tb3VzZV9idXR0b25fcmVsZWFzZQogIGN0b3lfbW91c2VfYnV0dG9uX3ByZXNzZWQKICBjdG95X3Njcm9sbF94CiAgY3RveV9zY3JvbGxfeQogIGN0b3lfam95c3RpY2tfcHJlc2VudAogIGN0b3lfam95c3RpY2tfYXhpc19jb3VudAogIGN0b3lfam95c3RpY2tfYnV0dG9uX2NvdW50CiAgY3RveV9qb3lzdGlja19idXR0b25fcHJlc3MKICBjdG95X2pveXN0aWNrX2J1dHRvbl9yZWxlYXNlCiAgY3RveV9qb3lzdGlja19idXR0b25fcHJlc3NlZAogIGN0b3lfam95c3RpY2tfYXhpcwogIGN0b3lfcGVuX2RhdGEKICBjdG95X2dldF9wZW5fZGF0YQogIGN0b3lfcGVuX2RhdGEKICBjdG95X3JlZ2lzdGVyX21lbW9yeQogIGN0b3lfcmV0cmlldmVfbWVtb3J5CkNUT1lfS0VZX1NQQUNFCkNUT1lfS0VZX0FQT1NUUk9QSEUKQ1RPWV9LRVlfQ09NTUEKQ1RPWV9LRVlfTUlOVVMKQ1RPWV9LRVlfUEVSSU9ECkNUT1lfS0VZX1NMQVNICkNUT1lfS0VZXzAKQ1RPWV9LRVlfMQpDVE9ZX0tFWV8yCkNUT1lfS0VZXzMKQ1RPWV9LRVlfNApDVE9ZX0tFWV81CkNUT1lfS0VZXzYKQ1RPWV9LRVlfNwpDVE9ZX0tFWV84CkNUT1lfS0VZXzkKQ1RPWV9LRVlfU0VNSUNPTE9OCkNUT1lfS0VZX0VRVUFMCkNUT1lfS0VZX0EKQ1RPWV9LRVlfQgpDVE9ZX0tFWV9DCkNUT1lfS0VZX0QKQ1RPWV9LRVlfRQpDVE9ZX0tFWV9GCkNUT1lfS0VZX0cKQ1RPWV9LRVlfSApDVE9ZX0tFWV9JCkNUT1lfS0VZX0oKQ1RPWV9LRVlfSwpDVE9ZX0tFWV9MCkNUT1lfS0VZX00KQ1RPWV9LRVlfTgpDVE9ZX0tFWV9PCkNUT1lfS0VZX1AKQ1RPWV9LRVlfUQpDVE9ZX0tFWV9SCkNUT1lfS0VZX1MKQ1RPWV9LRVlfVApDVE9ZX0tFWV9VCkNUT1lfS0VZX1YKQ1RPWV9LRVlfVwpDVE9ZX0tFWV9YCkNUT1lfS0VZX1kKQ1RPWV9LRVlfWgpDVE9ZX0tFWV9MRUZUX0JSQUNLRVQKQ1RPWV9LRVlfQkFDS1NMQVNICkNUT1lfS0VZX1JJR0hUX0JSQUNLRVQKQ1RPWV9LRVlfR1JBVkVfQUNDRU5UCkNUT1lfS0VZX1dPUkxEXzEKQ1RPWV9LRVlfV09STERfMgpDVE9ZX0tFWV9FU0NBUEUKQ1RPWV9LRVlfRU5URVIKQ1RPWV9LRVlfVEFCCkNUT1lfS0VZX0JBQ0tTUEFDRQpDVE9ZX0tFWV9JTlNFUlQKQ1RPWV9LRVlfREVMRVRFCkNUT1lfS0VZX1JJR0hUCkNUT1lfS0VZX0xFRlQKQ1RPWV9LRVlfRE9XTgpDVE9ZX0tFWV9VUApDVE9ZX0tFWV9QQUdFX1VQCkNUT1lfS0VZX1BBR0VfRE9XTgpDVE9ZX0tFWV9IT01FCkNUT1lfS0VZX0VORApDVE9ZX0tFWV9DQVBTX0xPQ0sKQ1RPWV9LRVlfU0NST0xMX0xPQ0sKQ1RPWV9LRVlfTlVNX0xPQ0sKQ1RPWV9LRVlfUFJJTlRfU0NSRUVOCkNUT1lfS0VZX1BBVVNFCkNUT1lfS0VZX0YxCkNUT1lfS0VZX0YyCkNUT1lfS0VZX0YzCkNUT1lfS0VZX0Y0CkNUT1lfS0VZX0Y1CkNUT1lfS0VZX0Y2CkNUT1lfS0VZX0Y3CkNUT1lfS0VZX0Y4CkNUT1lfS0VZX0Y5CkNUT1lfS0VZX0YxMApDVE9ZX0tFWV9GMTEKQ1RPWV9LRVlfRjEyCkNUT1lfS0VZX0YxMwpDVE9ZX0tFWV9GMTQKQ1RPWV9LRVlfRjE1CkNUT1lfS0VZX0YxNgpDVE9ZX0tFWV9GMTcKQ1RPWV9LRVlfRjE4CkNUT1lfS0VZX0YxOQpDVE9ZX0tFWV9GMjAKQ1RPWV9LRVlfRjIxCkNUT1lfS0VZX0YyMgpDVE9ZX0tFWV9GMjMKQ1RPWV9LRVlfRjI0CkNUT1lfS0VZX0YyNQpDVE9ZX0tFWV9LUF8wCkNUT1lfS0VZX0tQXzEKQ1RPWV9LRVlfS1BfMgpDVE9ZX0tFWV9LUF8zCkNUT1lfS0VZX0tQXzQKQ1RPWV9LRVlfS1BfNQpDVE9ZX0tFWV9LUF82CkNUT1lfS0VZX0tQXzcKQ1RPWV9LRVlfS1BfOApDVE9ZX0tFWV9LUF85CkNUT1lfS0VZX0tQX0RFQ0lNQUwKQ1RPWV9LRVlfS1BfRElWSURFCkNUT1lfS0VZX0tQX01VTFRJUExZCkNUT1lfS0VZX0tQX1NVQlRSQUNUCkNUT1lfS0VZX0tQX0FERApDVE9ZX0tFWV9LUF9FTlRFUgpDVE9ZX0tFWV9LUF9FUVVBTApDVE9ZX0tFWV9MRUZUX1NISUZUCkNUT1lfS0VZX0xFRlRfQ09OVFJPTApDVE9ZX0tFWV9MRUZUX0FMVApDVE9ZX0tFWV9MRUZUX1NVUEVSCkNUT1lfS0VZX1JJR0hUX1NISUZUCkNUT1lfS0VZX1JJR0hUX0NPTlRST0wKQ1RPWV9LRVlfUklHSFRfQUxUCkNUT1lfS0VZX1JJR0hUX1NVUEVSCkNUT1lfS0VZX01FTlUKQ1RPWV9NT1VTRV9CVVRUT05fMQpDVE9ZX01PVVNFX0JVVFRPTl8yCkNUT1lfTU9VU0VfQlVUVE9OXzMKQ1RPWV9NT1VTRV9CVVRUT05fNApDVE9ZX01PVVNFX0JVVFRPTl81CkNUT1lfTU9VU0VfQlVUVE9OXzYKQ1RPWV9NT1VTRV9CVVRUT05fNwpDVE9ZX01PVVNFX0JVVFRPTl84CkNUT1lfTU9VU0VfQlVUVE9OX0xFRlQKQ1RPWV9NT1VTRV9CVVRUT05fUklHSFQKQ1RPWV9NT1VTRV9CVVRUT05fTUlERExFCkNUT1lfSk9ZU1RJQ0tfMQpDVE9ZX0pPWVNUSUNLXzIKQ1RPWV9KT1lTVElDS18zCkNUT1lfSk9ZU1RJQ0tfNApDVE9ZX0pPWVNUSUNLXzUKQ1RPWV9KT1lTVElDS182CkNUT1lfSk9ZU1RJQ0tfNwpDVE9ZX0pPWVNUSUNLXzgKQ1RPWV9KT1lTVElDS185CkNUT1lfSk9ZU1RJQ0tfMTAKQ1RPWV9KT1lTVElDS18xMQpDVE9ZX0pPWVNUSUNLXzEyCkNUT1lfSk9ZU1RJQ0tfMTMKQ1RPWV9KT1lTVElDS18xNApDVE9ZX0pPWVNUSUNLXzE1CkNUT1lfSk9ZU1RJQ0tfMTYAAAAAAAAAAJIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgEAAAAAAACWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/cimgui/LICENSE",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAQAA4pOCICBHTEZXd2luZG93IOKApiDigJQgbWFjcm8gb2JqZWN0CuKSoSAgZ2xmd1NldENsaXBib2FyZFN0cmluZyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICBnbGZ3R2V0Q2xpcGJvYXJkU3RyaW5nICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrikqEgIGN0b3lfX2dldF9nbGZ3X3dpbmRvdyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIEltR3VpX0ltcGxHbGZ3X0dldENsaXBib2FyZFRleHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBJbUd1aV9JbXBsR2xmd19TZXRDbGlwYm9hcmRUZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgSW1HdWlfSW1wbENUb3lfSW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIEltR3VpX0ltcGxDVG95X05ld0ZyYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/cimgui/cimgui.cpp",
						"symkeys":
						[
							[
								329,
								342
							],
							[
								398,
								412
							],
							[
								471,
								489
							],
							[
								566,
								579
							],
							[
								635,
								649
							],
							[
								708,
								726
							],
							[
								833,
								848
							],
							[
								953,
								969
							],
							[
								1057,
								1076
							],
							[
								1138,
								1157
							],
							[
								1238,
								1270
							],
							[
								1504,
								1511
							],
							[
								1569,
								1579
							],
							[
								1633,
								1643
							],
							[
								1696,
								1706
							],
							[
								1759,
								1767
							],
							[
								1825,
								1838
							],
							[
								1929,
								1945
							],
							[
								2022,
								2039
							],
							[
								2117,
								2136
							],
							[
								2216,
								2233
							],
							[
								2310,
								2329
							],
							[
								2413,
								2431
							],
							[
								2514,
								2529
							],
							[
								2601,
								2613
							],
							[
								2668,
								2685
							],
							[
								2763,
								2783
							],
							[
								2864,
								2882
							],
							[
								2960,
								2967
							],
							[
								3086,
								3091
							],
							[
								3138,
								3150
							],
							[
								3299,
								3313
							],
							[
								3451,
								3461
							],
							[
								3513,
								3532
							],
							[
								3593,
								3612
							],
							[
								3673,
								3690
							],
							[
								3777,
								3794
							],
							[
								3889,
								3908
							],
							[
								3979,
								3993
							],
							[
								4092,
								4107
							],
							[
								4199,
								4215
							],
							[
								4275,
								4292
							],
							[
								4361,
								4382
							],
							[
								4488,
								4511
							],
							[
								4611,
								4639
							],
							[
								4719,
								4746
							],
							[
								4858,
								4885
							],
							[
								4989,
								5018
							],
							[
								5090,
								5108
							],
							[
								5233,
								5252
							],
							[
								5355,
								5385
							],
							[
								5616,
								5642
							],
							[
<<<<<<< HEAD
								5732,
								5756
							],
=======
								21865,
								21871
							]
						],
						"symlist":
						[
							"Transformation",
							"constructor(transformation)",
							"get type()",
							"TransformationList",
							"get axes()",
							"axis =>",
							"get props()",
							"key =>",
							"has(axis)",
							"get is3D()",
							"entries()",
							"prop =>",
							"toJSON()",
							"vector(unit)",
							" axis =>",
							" axis =>",
							"toString(tUnit)",
							"clone()",
							"(acc, prop) =>",
							"static fromString(arg)",
							"arg =>",
							"arg =>",
							"static get rotation()",
							"static get translation()",
							"static get scaling()",
							"static get matrix()",
							"value(inst)",
							"ctor =>",
							"ctor",
							"Rotation",
							"constructor(angle, x, y)",
							"invert()",
							"get values()",
							"get is3D()",
							"isZero()",
							"toString(rUnit)",
							"coord =>",
							"toSource()",
							"coord =>",
							"accumulate(other)",
							"static convertAngle(angle, unit)",
							"Rotation",
							"Translation",
							"constructor(...args)",
							"a =>",
							"get values()",
							"isZero()",
							"invert()",
							"accumulate(other)",
							"Translation",
							"Scaling",
							"constructor(...args)",
							"get values()",
							"isZero()",
							"toString()",
							"invert()",
							"accumulate(other)",
							"Scaling",
							"MatrixTransformation",
							"constructor(init)",
							"get values()",
							"toString()",
							"invert()",
							"isZero()",
							"accumulate(other)",
							"MatrixTransformation",
							"TransformationList",
							"constructor(init, tUnit, rUnit)",
							"initialize(init)",
							"TransformationList",
							"TransformationList",
							"fromString(str)",
							"fromArray(arr)",
							"get translationUnit()",
							"set translationUnit(value)",
							"get rotationUnit()",
							"set rotationUnit(value)",
							"static fromString(str)",
							"static fromArray(arr)",
							"static fromMatrix(matrix)",
							"toArray()",
							"toArray()",
							"push(...args)",
							"clone()",
							"t =>",
							"map(fn)",
							"slice(...args)",
							"splice(...args)",
							"concat(...args)",
							"filter(pred)",
							"baseCall(c = Array.prototype.map)",
							" (...args) =>",
							"unshift(...args)",
							"rotate(...args)",
							"translate(x, y)",
							"t =>",
							"scale(...args)",
							"matrix(...args)",
							"toString(tUnit, rUnit)",
							"t =>",
							"toDOM()",
							"toSource()",
							"t =>",
							"toMatrices()",
							"t =>",
							"toMatrix()",
							"undo()",
							"merge(...args)",
							"TransformationList",
							"decompose(degrees = true, transformationList = true)",
							".toArray = function toArray()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"get rotation()",
							"item =>",
							"set rotation(value)",
							"item =>",
							"get scaling()",
							"item =>",
							"set scaling(value)",
							"item =>",
							"get translation()",
							"item =>",
							"set translation(value)",
							"item =>",
							"get last()",
							"get first()",
							"at(pos)",
							"collapse()",
							"collapseAll()",
							"get angle()",
							"invert()",
							"(acc, t) =>",
							"join(sep = ' ')",
							"clear()",
							"apply(obj, round = true)",
							"TransformationList",
							"TransformationList",
							"ImmutableTransformationList.prototype.rotate = function(...args)",
							"ImmutableTransformationList.prototype.translate = function(...args)",
							"ImmutableTransformationList.prototype.scale = function(...args)",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAAiAkAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					333,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								5866,
								5886
							],
							[
								5949,
								5971
							],
							[
								6052,
								6070
							],
							[
								6166,
								6185
							],
							[
								6284,
								6308
							],
							[
								6414,
								6430
							],
							[
								6489,
								6509
							],
							[
								6588,
								6605
							],
							[
								6723,
								6741
							],
							[
								6862,
								6885
							],
							[
								7013,
								7032
							],
							[
								7112,
								7124
							],
							[
								7180,
								7192
							],
							[
								7248,
								7263
							],
							[
								7322,
								7337
							],
							[
								7395,
								7407
							],
							[
								7484,
								7496
							],
							[
								7573,
								7589
							],
							[
								7682,
								7701
							],
							[
								7819,
								7829
							],
							[
								7898,
								7907
							],
							[
								7959,
								7978
							],
							[
								8066,
								8082
							],
							[
								8177,
								8192
							],
							[
								8264,
								8283
							],
							[
								8374,
								8392
							],
							[
								8490,
								8503
							],
							[
								8582,
								8601
							],
							[
								8682,
								8691
							],
							[
								8744,
								8757
							],
							[
								8822,
								8846
							],
							[
								8947,
								8960
							],
							[
								9058,
								9075
							],
							[
								9151,
								9167
							],
							[
								9235,
								9250
							],
							[
								9334,
								9348
							],
							[
								9406,
								9421
							],
							[
								9479,
								9496
							],
							[
								9594,
								9610
							],
							[
								9669,
								9693
							],
							[
								9805,
								9828
							],
							[
								9894,
								9912
							],
							[
								9990,
								10007
							],
							[
								10067,
								10078
							],
							[
								10132,
								10142
							],
							[
								10249,
								10258
							],
							[
								10310,
								10319
							],
							[
								10371,
								10378
							],
							[
								10449,
								10457
							],
							[
								10530,
								10540
							],
							[
								10615,
								10627
							],
							[
								10682,
								10692
							],
							[
								10754,
								10768
							],
							[
								10859,
								10874
							],
							[
								10933,
								10948
							],
							[
								11006,
								11020
							],
							[
								11108,
								11123
							],
							[
								11201,
								11216
							],
							[
								11303,
								11322
							],
							[
								11426,
								11446
							],
							[
								11542,
								11562
							],
							[
								11644,
								11669
							],
							[
								11738,
								11757
							],
							[
								11820,
								11850
							],
							[
								11924,
								11940
							],
							[
								12000,
								12027
							],
							[
								12097,
								12108
							],
							[
								12183,
								12196
							],
							[
								12317,
								12328
							],
							[
								12403,
								12414
							],
							[
								12481,
								12488
							],
							[
								12541,
								12551
							],
							[
								12628,
								12640
							],
							[
								12763,
								12773
							],
							[
								12847,
								12864
							],
							[
								12974,
								12980
							],
							[
								13111,
								13118
							],
							[
								13204,
								13217
							],
							[
								13376,
								13390
							],
							[
								13504,
								13518
							],
							[
								13657,
								13672
							],
							[
								13766,
								13779
							],
							[
								13917,
								13931
							],
							[
								14024,
								14035
							],
							[
								14195,
								14207
							],
							[
								14322,
								14334
							],
							[
								14471,
								14484
							],
							[
								14575,
								14583
							],
							[
								14678,
								14691
							],
							[
								14768,
								14785
							],
							[
								14891,
								14904
							],
							[
								15001,
								15008
							],
							[
								15230,
								15243
							],
							[
								15495,
								15505
							],
							[
								15589,
								15604
							],
							[
								15746,
								15763
							],
							[
								15859,
								15878
							],
							[
								15987,
								16000
							],
							[
								16137,
								16145
							],
							[
								16195,
								16207
							],
							[
								16352,
								16362
							],
							[
								16414,
								16421
							],
							[
								16639,
								16649
							],
							[
								16869,
								16881
							],
							[
								17158,
								17169
							],
							[
								17357,
								17369
							],
							[
								17560,
								17572
							],
							[
								17763,
								17775
							],
							[
								17966,
								17983
							],
							[
								18270,
								18279
							],
							[
								18441,
								18451
							],
							[
								18616,
								18626
							],
							[
								18791,
								18801
							],
							[
								18966,
								18981
							],
							[
								19240,
								19252
							],
							[
								19486,
								19499
							],
							[
								19760,
								19773
							],
							[
								19941,
								19955
							],
							[
								20126,
								20140
							],
							[
								20311,
								20325
							],
							[
								20496,
								20509
							],
							[
								20699,
								20710
							],
							[
								20852,
								20864
							],
							[
								21009,
								21021
							],
							[
								21166,
								21178
							],
							[
								21323,
								21337
							],
							[
								21551,
								21566
							],
							[
								21807,
								21821
							],
							[
								22013,
								22025
							],
							[
								22191,
								22206
							],
							[
								22444,
								22455
							],
							[
								22668,
								22688
							],
							[
								22933,
								22945
							],
							[
								23132,
								23145
							],
							[
								23293,
								23306
							],
							[
								23454,
								23467
							],
							[
								23615,
								23625
							],
							[
								23778,
								23789
							],
							[
								23907,
								23918
							],
							[
								24036,
								24047
							],
							[
								24165,
								24178
							],
							[
								24369,
								24382
							],
							[
								24615,
								24629
							],
							[
								24889,
								24901
							],
							[
								25026,
								25038
							],
							[
								25163,
								25177
							],
							[
								25304,
								25318
							],
							[
								25474,
								25487
							],
							[
								25639,
								25660
							],
							[
								25753,
								25766
							],
							[
								25840,
								25856
							],
							[
								26043,
								26056
							],
							[
								26243,
								26257
							],
							[
								26372,
								26386
							],
							[
								26501,
								26516
							],
							[
								26623,
								26641
							],
							[
								26861,
								26876
							],
							[
								27096,
								27112
							],
							[
								27260,
								27276
							],
							[
								27425,
								27438
							],
							[
								27515,
								27528
							],
							[
								27605,
								27614
							],
							[
								27666,
								27689
							],
							[
								27756,
								27783
							],
							[
								27853,
								27874
							],
							[
								27976,
								27994
							],
							[
								28107,
								28132
							],
							[
								28265,
								28277
							],
							[
								28432,
								28451
							],
							[
								28611,
								28627
							],
							[
								28827,
								28841
							],
							[
								29100,
								29119
							],
							[
								29221,
								29239
							],
							[
								29383,
								29398
							],
							[
								29456,
								29467
							],
							[
								29769,
								29785
							],
							[
								30114,
								30137
							],
							[
								30443,
								30463
							],
							[
								30796,
								30807
							],
							[
								30890,
								30900
							],
							[
								30982,
								30993
							],
							[
								31084,
								31096
							],
							[
								31217,
								31235
							],
							[
								31296,
								31312
							],
							[
								31370,
								31384
							],
							[
								31441,
								31453
							],
							[
								31507,
								31518
							],
							[
								31615,
								31624
							],
							[
								31675,
								31689
							],
							[
								31837,
								31854
							],
							[
								32008,
								32022
							],
							[
								32079,
								32091
							],
							[
								32146,
								32158
							],
							[
								32295,
								32308
							],
							[
								32400,
								32411
							],
							[
								32488,
								32500
							],
							[
								32607,
								32630
							],
							[
								32749,
								32774
							],
							[
								32932,
								32955
							],
							[
								33074,
								33091
							],
							[
								33220,
								33230
							],
							[
								33282,
								33304
							],
							[
								33422,
								33435
							],
							[
								33515,
								33534
							],
							[
								33596,
								33605
							],
							[
								33708,
								33720
							],
							[
								33774,
								33790
							],
							[
								33850,
								33866
							],
							[
								33953,
								33969
							],
							[
								34075,
								34092
							],
							[
								34180,
								34197
							],
							[
								34308,
								34325
							],
							[
								34384,
								34397
							],
							[
								34506,
								34517
							],
							[
								34570,
								34584
							],
							[
								34713,
								34725
							],
							[
								34780,
								34798
							],
							[
								34923,
								34933
							],
							[
								35008,
								35019
							],
							[
								35125,
								35141
							],
							[
								35222,
								35233
							],
							[
								35287,
								35299
							],
							[
								35353,
								35374
							],
							[
								35466,
								35486
							],
							[
								35628,
								35647
							],
							[
<<<<<<< HEAD
								35708,
								35729
							],
=======
								38563,
								38567
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACICQAAVHJhbnNmb3JtYXRpb24KICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm1hdGlvbikKICBnZXQgdHlwZSgpClRyYW5zZm9ybWF0aW9uTGlzdAogIGdldCBheGVzKCkKICBheGlzID0+CiAgZ2V0IHByb3BzKCkKICBrZXkgPT4KICBoYXMoYXhpcykKICBnZXQgaXMzRCgpCiAgZW50cmllcygpCiAgcHJvcCA9PgogIHRvSlNPTigpCiAgdmVjdG9yKHVuaXQpCmF4aXMgPT4KYXhpcyA9PgogIHRvU3RyaW5nKHRVbml0KQogIGNsb25lKCkKKGFjYywgcHJvcCkgPT4KICBzdGF0aWMgZnJvbVN0cmluZyhhcmcpCiAgYXJnID0+CiAgYXJnID0+CiAgc3RhdGljIGdldCByb3RhdGlvbigpCiAgc3RhdGljIGdldCB0cmFuc2xhdGlvbigpCiAgc3RhdGljIGdldCBzY2FsaW5nKCkKICBzdGF0aWMgZ2V0IG1hdHJpeCgpCiAgdmFsdWUoaW5zdCkKICBjdG9yID0+CiAgY3RvcgpSb3RhdGlvbgogIGNvbnN0cnVjdG9yKGFuZ2xlLCB4LCB5KQogIGludmVydCgpCiAgZ2V0IHZhbHVlcygpCiAgZ2V0IGlzM0QoKQogIGlzWmVybygpCiAgdG9TdHJpbmcoclVuaXQpCiAgY29vcmQgPT4KICB0b1NvdXJjZSgpCiAgY29vcmQgPT4KICBhY2N1bXVsYXRlKG90aGVyKQogIHN0YXRpYyBjb252ZXJ0QW5nbGUoYW5nbGUsIHVuaXQpClJvdGF0aW9uClRyYW5zbGF0aW9uCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBhID0+CiAgZ2V0IHZhbHVlcygpCiAgaXNaZXJvKCkKICBpbnZlcnQoKQogIGFjY3VtdWxhdGUob3RoZXIpClRyYW5zbGF0aW9uClNjYWxpbmcKICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIGdldCB2YWx1ZXMoKQogIGlzWmVybygpCiAgdG9TdHJpbmcoKQogIGludmVydCgpCiAgYWNjdW11bGF0ZShvdGhlcikKU2NhbGluZwpNYXRyaXhUcmFuc2Zvcm1hdGlvbgogIGNvbnN0cnVjdG9yKGluaXQpCiAgZ2V0IHZhbHVlcygpCiAgdG9TdHJpbmcoKQogIGludmVydCgpCiAgaXNaZXJvKCkKICBhY2N1bXVsYXRlKG90aGVyKQpNYXRyaXhUcmFuc2Zvcm1hdGlvbgpUcmFuc2Zvcm1hdGlvbkxpc3QKICBjb25zdHJ1Y3Rvcihpbml0LCB0VW5pdCwgclVuaXQpCiAgaW5pdGlhbGl6ZShpbml0KQpUcmFuc2Zvcm1hdGlvbkxpc3QKVHJhbnNmb3JtYXRpb25MaXN0CiAgZnJvbVN0cmluZyhzdHIpCiAgZnJvbUFycmF5KGFycikKICBnZXQgdHJhbnNsYXRpb25Vbml0KCkKICBzZXQgdHJhbnNsYXRpb25Vbml0KHZhbHVlKQogIGdldCByb3RhdGlvblVuaXQoKQogIHNldCByb3RhdGlvblVuaXQodmFsdWUpCiAgc3RhdGljIGZyb21TdHJpbmcoc3RyKQogIHN0YXRpYyBmcm9tQXJyYXkoYXJyKQogIHN0YXRpYyBmcm9tTWF0cml4KG1hdHJpeCkKICB0b0FycmF5KCkKICB0b0FycmF5KCkKICBwdXNoKC4uLmFyZ3MpCiAgY2xvbmUoKQogIHQgPT4KICBtYXAoZm4pCiAgc2xpY2UoLi4uYXJncykKICBzcGxpY2UoLi4uYXJncykKICBjb25jYXQoLi4uYXJncykKICBmaWx0ZXIocHJlZCkKICBiYXNlQ2FsbChjID0gQXJyYXkucHJvdG90eXBlLm1hcCkKKC4uLmFyZ3MpID0+CiAgdW5zaGlmdCguLi5hcmdzKQogIHJvdGF0ZSguLi5hcmdzKQogIHRyYW5zbGF0ZSh4LCB5KQogIHQgPT4KICBzY2FsZSguLi5hcmdzKQogIG1hdHJpeCguLi5hcmdzKQogIHRvU3RyaW5nKHRVbml0LCByVW5pdCkKICB0ID0+CiAgdG9ET00oKQogIHRvU291cmNlKCkKICB0ID0+CiAgdG9NYXRyaWNlcygpCiAgdCA9PgogIHRvTWF0cml4KCkKICB1bmRvKCkKICBtZXJnZSguLi5hcmdzKQpUcmFuc2Zvcm1hdGlvbkxpc3QKICBkZWNvbXBvc2UoZGVncmVlcyA9IHRydWUsIHRyYW5zZm9ybWF0aW9uTGlzdCA9IHRydWUpCiAgLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KCkKICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICBmaW5kTGFzdChwcmVkaWNhdGUpCiAgZ2V0IHJvdGF0aW9uKCkKICBpdGVtID0+CiAgc2V0IHJvdGF0aW9uKHZhbHVlKQogIGl0ZW0gPT4KICBnZXQgc2NhbGluZygpCiAgaXRlbSA9PgogIHNldCBzY2FsaW5nKHZhbHVlKQogIGl0ZW0gPT4KICBnZXQgdHJhbnNsYXRpb24oKQogIGl0ZW0gPT4KICBzZXQgdHJhbnNsYXRpb24odmFsdWUpCiAgaXRlbSA9PgogIGdldCBsYXN0KCkKICBnZXQgZmlyc3QoKQogIGF0KHBvcykKICBjb2xsYXBzZSgpCiAgY29sbGFwc2VBbGwoKQogIGdldCBhbmdsZSgpCiAgaW52ZXJ0KCkKKGFjYywgdCkgPT4KICBqb2luKHNlcCA9ICcgJykKICBjbGVhcigpCiAgYXBwbHkob2JqLCByb3VuZCA9IHRydWUpClRyYW5zZm9ybWF0aW9uTGlzdApUcmFuc2Zvcm1hdGlvbkxpc3QKSW1tdXRhYmxlVHJhbnNmb3JtYXRpb25MaXN0LnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbiguLi5hcmdzKQpJbW11dGFibGVUcmFuc2Zvcm1hdGlvbkxpc3QucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpCkltbXV0YWJsZVRyYW5zZm9ybWF0aW9uTGlzdC5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbiguLi5hcmdzKQooKSA9PgAAAAAAAAAANAwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					334,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								35808,
								35831
							],
							[
								35948,
								35967
							],
							[
								36044,
								36064
							],
							[
								36127,
								36141
							],
							[
								36349,
								36362
							],
							[
								36418,
								36439
							],
							[
								36503,
								36525
							],
							[
								36605,
								36620
							],
							[
								36734,
								36748
							],
							[
								36804,
								36819
							],
							[
								36876,
								36891
							],
							[
								36976,
								36991
							],
							[
								37048,
								37062
							],
							[
								37118,
								37135
							],
							[
								37194,
								37213
							],
							[
								37274,
								37302
							],
							[
								37372,
								37390
							],
							[
								37450,
								37467
							],
							[
								37526,
								37544
							],
							[
								37614,
								37630
							],
							[
								37731,
								37747
							],
							[
								37848,
								37865
							],
							[
								37958,
								37979
							],
							[
								38042,
								38057
							],
							[
								38135,
								38154
							],
							[
								38274,
								38283
							],
							[
								38334,
								38349
							],
							[
								38414,
								38434
							],
							[
								38514,
								38537
							],
							[
								38610,
								38629
							],
							[
								38706,
								38723
							],
							[
								38820,
								38837
							],
							[
								38906,
								38920
							],
							[
								39149,
								39167
							],
							[
								39387,
								39404
							],
							[
								39528,
								39543
							],
							[
								39610,
								39635
							],
							[
								39747,
								39772
							],
							[
								39856,
								39869
							],
							[
								39951,
								39962
							],
							[
								40047,
								40061
							],
							[
								40168,
								40183
							],
							[
								40272,
								40293
							],
							[
								40426,
								40439
							],
							[
<<<<<<< HEAD
								40510,
								40526
							],
=======
								15641,
								15650
							]
						],
						"symlist":
						[
							" () =>",
							"setDebug = state =>",
							" () =>",
							"EscapeClassName = name =>",
							"UnescapeClassName = name =>",
							"LayerToClass = layer =>",
							"ElementToClass = (element, layerName) =>",
							"ClampAngle = (a, mod = 360) =>",
							"AlignmentAngle = a =>",
							"MakeRotation = (rot, f = 1) =>",
							"ExtractRotation = transformation =>",
							"t =>",
							"InferRotation = transformation =>",
							"t =>",
							"Alignment = (align, rot = 0, scaling = null, def = 'bottom-left') =>",
							"AlignmentAttrs = (align, hv = HORIZONTAL_VERTICAL, rot = 0) =>",
							"RotateTransformation = (rot, f = 1) =>",
							"LayerAttributes = layer =>",
							"InvertY = item =>",
							"PolarToCartesian = ([radius, angle], origin = { x: 0, y: 0 }) =>",
							"CartesianToPolar = ({ x, y }, origin = { x: 0, y: 0 }) =>",
							"RenderArc = (x, y, radius, startAngle, endAngle) =>",
							"RenderArcTo = (distance, radius, theta, sweep, to) =>",
							"RenderArcFromTo = (start, radius, theta, end) =>",
							"CalculateArcRadius = (d, angle) =>",
							" function LinesToPath(lines, lineFn)",
							"(point, curve) =>",
							"lineFn = (point, curve) =>",
							"lineTo = (...args) =>",
							" function MakeCoordTransformer(matrix)",
							" obj =>",
							" obj =>",
							"(acc, k) =>",
							"(acc, k) =>",
							"useAttributes = (element, attributeNames) =>",
							"useTransformation = transformation =>",
							"useTransform = ({ transform, transformation, ...props }) =>",
							" function accumulate(opts = {})",
							"RenderShape = (shape, ro, ri) =>",
							"p =>",
							"p =>",
							"(p, i) =>",
							"i =>",
							"p =>",
							"(p, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAA9AQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					335,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								40584,
								40600
							],
							[
								40693,
								40715
							],
							[
								40795,
								40812
							],
							[
								40887,
								40904
							],
							[
								41015,
								41036
							],
							[
								41162,
								41179
							],
							[
								41280,
								41293
							],
							[
								41391,
								41425
							],
							[
								41544,
								41563
							],
							[
								41710,
								41731
							],
							[
								41823,
								41839
							],
							[
								41898,
								41914
							],
							[
								41998,
								42022
							],
							[
								42148,
								42169
							],
							[
								42293,
								42311
							],
							[
								42372,
								42390
							],
							[
								42471,
								42496
							],
							[
								42600,
								42627
							],
							[
								42750,
								42773
							],
							[
								42882,
								42907
							],
							[
								43007,
								43030
							],
							[
								43232,
								43242
							],
							[
								43310,
								43319
							],
							[
								43390,
								43411
							],
							[
								43471,
								43489
							],
							[
								43549,
								43573
							],
							[
								43677,
								43702
							],
							[
								43787,
								43817
							],
							[
								43915,
								43943
							],
							[
								44024,
								44039
							],
							[
								44096,
								44111
							],
							[
								44191,
								44244
							],
							[
								44320,
								44354
							],
							[
								44430,
								44468
							],
							[
								44594,
								44632
							],
							[
								44781,
								44820
							],
							[
								44917,
								44942
							],
							[
								45004,
								45024
							],
							[
								45086,
								45104
							],
							[
								45170,
								45193
							],
							[
								45285,
								45307
							],
							[
								45377,
								45400
							],
							[
								45488,
								45527
							],
							[
								45596,
								45623
							],
							[
								45704,
								45735
							],
							[
								45836,
								45859
							],
							[
								45923,
								45943
							],
							[
								46052,
								46078
							],
							[
								46204,
								46225
							],
							[
								46295,
								46316
							],
							[
								46385,
								46409
							],
							[
								46488,
								46507
							],
							[
								46566,
								46583
							],
							[
								46648,
								46670
							],
							[
								46766,
								46781
							],
							[
								46852,
								46865
							],
							[
								46926,
								46941
							],
							[
								47005,
								47020
							],
							[
								47148,
								47179
							],
							[
								47244,
								47267
							],
							[
								47339,
								47360
							],
							[
								47437,
								47456
							],
							[
								47523,
								47543
							],
							[
								47611,
								47632
							],
							[
								47702,
								47723
							],
							[
								47793,
								47816
							],
							[
								47916,
								47937
							],
							[
								48007,
								48029
							],
							[
								48147,
								48171
							],
							[
								48282,
								48294
							],
							[
								48378,
								48390
							],
							[
								48445,
								48459
							],
							[
								48546,
								48558
							],
							[
								48644,
								48662
							],
							[
								48728,
								48747
							],
							[
								48858,
								48877
							],
							[
								48971,
								48991
							],
							[
								49104,
								49124
							],
							[
								49222,
								49243
							],
							[
								49358,
								49379
							],
							[
								49479,
								49502
							],
							[
								49589,
								49612
							],
							[
								49713,
								49735
							],
							[
								49850,
								49873
							],
							[
								49991,
								50015
							],
							[
								50135,
								50161
							],
							[
								50281,
								50303
							],
							[
								50385,
								50412
							],
							[
								50501,
								50534
							],
							[
								50654,
								50678
							],
							[
								50743,
								50764
							],
							[
								50834,
								50856
							],
							[
								50986,
								51006
							],
							[
								51079,
								51094
							],
							[
								51151,
								51166
							],
							[
								51227,
								51245
							],
							[
								51332,
								51350
							],
							[
								51421,
								51441
							],
							[
								51536,
								51555
							],
							[
								51627,
								51641
							],
							[
								51753,
								51764
							],
							[
								51904,
								51923
							],
							[
								51982,
								51999
							],
							[
								52065,
								52086
							],
							[
								52192,
								52210
							],
							[
								52270,
								52293
							],
							[
								52505,
								52538
							],
							[
								52620,
								52642
							],
							[
								52713,
								52737
							],
							[
								52843,
								52866
							],
							[
								52947,
								52972
							],
							[
								53088,
								53113
							],
							[
								53220,
								53238
							],
							[
								53378,
								53396
							],
							[
								53610,
								53634
							],
							[
								53828,
								53862
							],
							[
								54110,
								54128
							],
							[
								54302,
								54326
							],
							[
								54480,
								54502
							],
							[
								54663,
								54691
							],
							[
								54832,
								54852
							],
							[
								55037,
								55063
							],
							[
								55228,
								55246
							],
							[
								55411,
								55436
							],
							[
								55731,
								55750
							],
							[
								55955,
								55978
							],
							[
								56267,
								56293
							],
							[
								56567,
								56589
							],
							[
								56778,
								56808
							],
							[
								56960,
								56985
							],
							[
								57216,
								57236
							],
							[
								57305,
								57326
							],
							[
								57416,
								57451
							],
							[
								57555,
								57580
							],
							[
								57667,
								57688
							],
							[
								57816,
								57836
							],
							[
								58017,
								58041
							],
							[
								58216,
								58244
							],
							[
								58407,
								58426
							],
							[
								58629,
								58653
							],
							[
								58759,
								58783
							],
							[
								58856,
								58885
							],
							[
								58994,
								59016
							],
							[
								59153,
								59174
							],
							[
								59251,
								59273
							],
							[
								59344,
								59360
							],
							[
								59425,
								59451
							],
							[
								59526,
								59548
							],
							[
								59666,
								59685
							],
							[
								59800,
								59821
							],
							[
								59984,
								60005
							],
							[
								60248,
								60271
							],
							[
								60396,
								60419
							],
							[
								60508,
								60526
							],
							[
								60646,
								60671
							],
							[
								60745,
								60771
							],
							[
								60853,
								60874
							],
							[
								60934,
								60952
							],
							[
								61012,
								61028
							],
							[
								61093,
								61121
							],
							[
								61198,
								61223
							],
							[
								61336,
								61361
							],
							[
								61423,
								61443
							],
							[
								61526,
								61575
							],
							[
								61649,
								61681
							],
							[
								61754,
								61785
							],
							[
								61872,
								61903
							],
							[
								61990,
								62022
							],
							[
								62114,
								62146
							],
							[
								62278,
								62312
							],
							[
								62423,
								62459
							],
							[
								62591,
								62614
							],
							[
								62675,
								62694
							],
							[
								62758,
								62777
							],
							[
								62885,
								62911
							],
							[
								63026,
								63056
							],
							[
								63276,
								63308
							],
							[
								63550,
								63592
							],
							[
<<<<<<< HEAD
								63894,
								63942
							],
=======
								38563,
								38567
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD0BAAAKCkgPT4KICBzZXREZWJ1ZyA9IHN0YXRlID0+CigpID0+CkVzY2FwZUNsYXNzTmFtZSA9IG5hbWUgPT4KVW5lc2NhcGVDbGFzc05hbWUgPSBuYW1lID0+CkxheWVyVG9DbGFzcyA9IGxheWVyID0+CkVsZW1lbnRUb0NsYXNzID0gKGVsZW1lbnQsIGxheWVyTmFtZSkgPT4KQ2xhbXBBbmdsZSA9IChhLCBtb2QgPSAzNjApID0+CkFsaWdubWVudEFuZ2xlID0gYSA9PgpNYWtlUm90YXRpb24gPSAocm90LCBmID0gMSkgPT4KRXh0cmFjdFJvdGF0aW9uID0gdHJhbnNmb3JtYXRpb24gPT4KICB0ID0+CkluZmVyUm90YXRpb24gPSB0cmFuc2Zvcm1hdGlvbiA9PgogIHQgPT4KQWxpZ25tZW50ID0gKGFsaWduLCByb3QgPSAwLCBzY2FsaW5nID0gbnVsbCwgZGVmID0gJ2JvdHRvbS1sZWZ0JykgPT4KQWxpZ25tZW50QXR0cnMgPSAoYWxpZ24sIGh2ID0gSE9SSVpPTlRBTF9WRVJUSUNBTCwgcm90ID0gMCkgPT4KUm90YXRlVHJhbnNmb3JtYXRpb24gPSAocm90LCBmID0gMSkgPT4KTGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXIgPT4KSW52ZXJ0WSA9IGl0ZW0gPT4KUG9sYXJUb0NhcnRlc2lhbiA9IChbcmFkaXVzLCBhbmdsZV0sIG9yaWdpbiA9IHsgeDogMCwgeTogMCB9KSA9PgpDYXJ0ZXNpYW5Ub1BvbGFyID0gKHsgeCwgeSB9LCBvcmlnaW4gPSB7IHg6IDAsIHk6IDAgfSkgPT4KUmVuZGVyQXJjID0gKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUpID0+ClJlbmRlckFyY1RvID0gKGRpc3RhbmNlLCByYWRpdXMsIHRoZXRhLCBzd2VlcCwgdG8pID0+ClJlbmRlckFyY0Zyb21UbyA9IChzdGFydCwgcmFkaXVzLCB0aGV0YSwgZW5kKSA9PgpDYWxjdWxhdGVBcmNSYWRpdXMgPSAoZCwgYW5nbGUpID0+CkxpbmVzVG9QYXRoKGxpbmVzLCBsaW5lRm4pCihwb2ludCwgY3VydmUpID0+CiAgbGluZUZuID0gKHBvaW50LCBjdXJ2ZSkgPT4KICBsaW5lVG8gPSAoLi4uYXJncykgPT4KTWFrZUNvb3JkVHJhbnNmb3JtZXIobWF0cml4KQpvYmogPT4Kb2JqID0+CihhY2MsIGspID0+CihhY2MsIGspID0+CiAgdXNlQXR0cmlidXRlcyA9IChlbGVtZW50LCBhdHRyaWJ1dGVOYW1lcykgPT4KICB1c2VUcmFuc2Zvcm1hdGlvbiA9IHRyYW5zZm9ybWF0aW9uID0+CiAgdXNlVHJhbnNmb3JtID0gKHsgdHJhbnNmb3JtLCB0cmFuc2Zvcm1hdGlvbiwgLi4ucHJvcHMgfSkgPT4KICBhY2N1bXVsYXRlKG9wdHMgPSB7fSkKUmVuZGVyU2hhcGUgPSAoc2hhcGUsIHJvLCByaSkgPT4KICBwID0+CiAgcCA9PgoocCwgaSkgPT4KICBpID0+CiAgcCA9PgoocCwgaSkgPT4AAAAAAAAAADQMAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					336,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								64215,
								64241
							],
							[
								64316,
								64340
							],
							[
								64413,
								64435
							],
							[
								64506,
								64523
							],
							[
								64588,
								64605
							],
							[
								64671,
								64701
							],
							[
								64914,
								64944
							],
							[
<<<<<<< HEAD
								65156,
								65175
							],
=======
								2452,
								2530
							]
						],
						"symlist":
						[
							"useGrid = data =>",
							"calcDist = (value, unit) =>",
							"Pattern = ({ data, id = 'pattern', attrs = { color: '#0000aa', width: 0.01 }, ...props }) =>",
							"() =>",
							"ret = function(value)",
							"get current()",
							"set current(value)",
							"Grid = ({ data, rect, id, attrs = { visible: true }, opts = {}, ...props }) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAAIAEAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					337,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								65243,
								65263
							],
							[
								65359,
								65392
							],
							[
								65484,
								65516
							],
							[
								65607,
								65641
							],
							[
								65734,
								65771
							],
							[
								65867,
								65916
							],
							[
								66024,
								66058
							],
							[
								66151,
								66181
							],
							[
								66267,
								66288
							],
							[
								66348,
								66366
							],
							[
								66425,
								66444
							],
							[
								66511,
								66543
							],
							[
								66675,
								66709
							],
							[
								66923,
								66955
							],
							[
								67051,
								67079
							],
							[
								67242,
								67275
							],
							[
								67518,
								67531
							],
							[
								67587,
								67601
							],
							[
								67671,
								67687
							],
							[
								67777,
								67803
							],
							[
								67890,
								67911
							],
							[
								67991,
								68006
							],
							[
								68077,
								68096
							],
							[
								68173,
								68193
							],
							[
								68468,
								68496
							],
							[
								68670,
								68687
							],
							[
								68841,
								68858
							],
							[
								69158,
								69181
							],
							[
								69253,
								69275
							],
							[
								69346,
								69362
							],
							[
								69448,
								69463
							],
							[
								69660,
								69679
							],
							[
								69811,
								69833
							],
							[
								69926,
								69955
							],
							[
								70019,
								70041
							],
							[
								70118,
								70151
							],
							[
								70217,
								70241
							],
							[
								70325,
								70368
							],
							[
								70439,
								70468
							],
							[
								70556,
								70597
							],
							[
								70667,
								70695
							],
							[
								70780,
								70817
							],
							[
								70885,
								70911
							],
							[
								70995,
								71034
							],
							[
								71103,
								71130
							],
							[
								71218,
								71263
							],
							[
								71335,
								71365
							],
							[
								71447,
								71474
							],
							[
								71537,
								71558
							],
							[
								71638,
								71679
							],
							[
								71749,
								71777
							],
							[
								71863,
								71902
							],
							[
								71971,
								71998
							],
							[
								72076,
								72101
							],
							[
								72163,
								72183
							],
							[
								72255,
								72282
							],
							[
								72345,
								72366
							],
							[
								72444,
								72481
							],
							[
								72549,
								72575
							],
							[
								72655,
								72686
							],
							[
								72751,
								72774
							],
							[
								72854,
								72891
							],
							[
								72959,
								72985
							],
							[
								73068,
								73105
							],
							[
								73173,
								73199
							],
							[
								73279,
								73310
							],
							[
								73375,
								73398
							],
							[
								73474,
								73509
							],
							[
								73609,
								73648
							],
							[
								73757,
								73806
							],
							[
								73924,
								73971
							],
							[
								74085,
								74128
							],
							[
								74239,
								74284
							],
							[
								74400,
								74451
							],
							[
								74564,
								74597
							],
							[
								74699,
								74746
							],
							[
								74861,
								74906
							],
							[
								75012,
								75043
							],
							[
								75136,
								75169
							],
							[
								75269,
								75312
							],
							[
								75419,
								75456
							],
							[
								75560,
								75603
							],
							[
								75713,
								75756
							],
							[
								75863,
								75900
							],
							[
								75988,
								76008
							],
							[
								76082,
								76104
							],
							[
								76180,
								76207
							],
							[
								76288,
								76314
							],
							[
								76394,
								76418
							],
							[
								76496,
								76521
							],
							[
								76600,
								76628
							],
							[
								76710,
								76729
							],
							[
								76802,
								76828
							],
							[
								76908,
								76933
							],
							[
								77012,
								77030
							],
							[
								77102,
								77121
							],
							[
								77194,
								77218
							],
							[
								77296,
								77317
							],
							[
								77392,
								77416
							],
							[
								77494,
								77518
							],
							[
								77596,
								77617
							],
							[
								77692,
								77711
							],
							[
								77784,
								77805
							],
							[
								77880,
								77906
							],
							[
								77986,
								78011
							],
							[
								78090,
								78113
							],
							[
								78190,
								78214
							],
							[
								78292,
								78319
							],
							[
								78400,
								78418
							],
							[
								78490,
								78515
							],
							[
								78594,
								78618
							],
							[
								78696,
								78713
							],
							[
								78784,
								78802
							],
							[
								78874,
								78897
							],
							[
								78974,
								78994
							],
							[
								79068,
								79091
							],
							[
								79168,
								79191
							],
							[
								79268,
								79288
							],
							[
								79362,
								79390
							],
							[
								79472,
								79502
							],
							[
								79586,
								79621
							],
							[
								79710,
								79744
							],
							[
								79832,
								79864
							],
							[
								79950,
								79983
							],
							[
								80070,
								80106
							],
							[
								80196,
								80223
							],
							[
								80304,
								80338
							],
							[
								80426,
								80459
							],
							[
								80546,
								80572
							],
							[
								80652,
								80679
							],
							[
								80760,
								80792
							],
							[
								80878,
								80907
							],
							[
								80990,
								81022
							],
							[
								81108,
								81140
							],
							[
								81226,
								81255
							],
							[
								81338,
								81361
							],
							[
								81438,
								81463
							],
							[
								81542,
								81572
							],
							[
								81656,
								81685
							],
							[
								81768,
								81795
							],
							[
								81876,
								81904
							],
							[
								81986,
								82017
							],
							[
								82102,
								82124
							],
							[
								82200,
								82229
							],
							[
								82312,
								82340
							],
							[
								82422,
								82443
							],
							[
								82518,
								82540
							],
							[
								82616,
								82643
							],
							[
								82724,
								82748
							],
							[
								82826,
								82853
							],
							[
								82934,
								82961
							],
							[
								83042,
								83066
							],
							[
								83145,
								83165
							],
							[
								83234,
								83256
							],
							[
								83327,
								83354
							],
							[
								83430,
								83456
							],
							[
								83531,
								83555
							],
							[
								83628,
								83653
							],
							[
								83727,
								83755
							],
							[
								83832,
								83851
							],
							[
								83919,
								83945
							],
							[
								84020,
								84045
							],
							[
								84119,
								84137
							],
							[
								84204,
								84223
							],
							[
								84291,
								84315
							],
							[
								84388,
								84409
							],
							[
								84479,
								84503
							],
							[
								84576,
								84600
							],
							[
								84673,
								84694
							],
							[
								84766,
								84786
							],
							[
								84859,
								84881
							],
							[
								84961,
								84988
							],
							[
								85072,
								85098
							],
							[
								85179,
								85203
							],
							[
								85283,
								85308
							],
							[
								85392,
								85420
							],
							[
								85498,
								85517
							],
							[
								85593,
								85619
							],
							[
<<<<<<< HEAD
								85701,
								85726
							],
=======
								38563,
								38567
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAICB1c2VHcmlkID0gZGF0YSA9PgogIGNhbGNEaXN0ID0gKHZhbHVlLCB1bml0KSA9PgpQYXR0ZXJuID0gKHsgZGF0YSwgaWQgPSAncGF0dGVybicsIGF0dHJzID0geyBjb2xvcjogJyMwMDAwYWEnLCB3aWR0aDogMC4wMSB9LCAuLi5wcm9wcyB9KSA9PgooKSA9PgogIHJldCA9IGZ1bmN0aW9uKHZhbHVlKQogIGdldCBjdXJyZW50KCkKICBzZXQgY3VycmVudCh2YWx1ZSkKR3JpZCA9ICh7IGRhdGEsIHJlY3QsIGlkLCBhdHRycyA9IHsgdmlzaWJsZTogdHJ1ZSB9LCBvcHRzID0ge30sIC4uLnByb3BzIH0pID0+AAAAAAAAAAA0DAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					338,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								85800,
								85818
							],
							[
								85886,
								85905
							],
							[
								85977,
								86001
							],
							[
								86077,
								86098
							],
							[
								86174,
								86198
							],
							[
								86277,
								86301
							],
							[
								86377,
								86398
							],
							[
								86477,
								86503
							],
							[
								86589,
								86617
							],
							[
								86710,
								86743
							],
							[
								86840,
								86872
							],
							[
								86966,
								86996
							],
							[
								87089,
								87120
							],
							[
<<<<<<< HEAD
								87217,
								87251
							],
=======
								5507,
								5511
							]
						],
						"symlist":
						[
							"SchematicRenderer",
							"(r, g, b) =>",
							"constructor(doc, factory)",
							"renderCollection(collection, parent, opts)",
							"item =>",
							"item =>",
							"renderItem(item, parent, options = {})",
							" i =>",
							"svg = (elem, attr, parent) =>",
							"renderNet(net, parent)",
							"renderSheet(sheet, parent)",
							"data =>",
							"render(doc = this.doc, parent, props = {}, sheetNo = 0)",
							"Rect"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAASAEAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					339,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								87342,
								87367
							],
							[
								87456,
								87488
							],
							[
								87583,
								87614
							],
							[
								87701,
								87725
							],
							[
								87806,
								87831
							],
							[
								87916,
								87946
							],
							[
								88035,
								88062
							],
							[
								88151,
								88181
							],
							[
								88273,
								88303
							],
							[
								88392,
								88419
							],
							[
								88497,
								88515
							],
							[
								88586,
								88606
							],
							[
								88684,
								88709
							],
							[
								88791,
								88815
							],
							[
								88894,
								88916
							],
							[
								88994,
								89017
							],
							[
								89099,
								89125
							],
							[
								89201,
								89218
							],
							[
								89292,
								89316
							],
							[
								89396,
								89419
							],
							[
								89491,
								89507
							],
							[
								89573,
								89590
							],
							[
								89660,
								89682
							],
							[
								89756,
								89775
							],
							[
								89849,
								89871
							],
							[
								89948,
								89970
							],
							[
								90044,
								90063
							],
							[
								90140,
								90164
							],
							[
								90248,
								90274
							],
							[
								90365,
								90396
							],
							[
								90491,
								90521
							],
							[
								90613,
								90641
							],
							[
								90732,
								90761
							],
							[
								90856,
								90888
							],
							[
								90977,
								91000
							],
							[
								91087,
								91117
							],
							[
								91210,
								91239
							],
							[
								91324,
								91346
							],
							[
								91425,
								91448
							],
							[
								91531,
								91559
							],
							[
								91646,
								91671
							],
							[
								91758,
								91786
							],
							[
								91876,
								91904
							],
							[
								91991,
								92016
							],
							[
								92092,
								92112
							],
							[
								92186,
								92208
							],
							[
								92289,
								92316
							],
							[
								92401,
								92427
							],
							[
								92509,
								92533
							],
							[
								92614,
								92639
							],
							[
								92724,
								92752
							],
							[
								92831,
								92850
							],
							[
								92927,
								92953
							],
							[
								93036,
								93061
							],
							[
								93136,
								93154
							],
							[
								93223,
								93242
							],
							[
								93315,
								93339
							],
							[
								93416,
								93437
							],
							[
								93514,
								93538
							],
							[
								93618,
								93642
							],
							[
								93719,
								93740
							],
							[
								93820,
								93846
							],
							[
								93933,
								93961
							],
							[
								94055,
								94088
							],
							[
								94186,
								94218
							],
							[
								94313,
								94343
							],
							[
								94437,
								94468
							],
							[
								94566,
								94600
							],
							[
								94692,
								94717
							],
							[
								94807,
								94839
							],
							[
								94935,
								94966
							],
							[
								95054,
								95078
							],
							[
								95160,
								95185
							],
							[
								95271,
								95301
							],
							[
								95391,
								95418
							],
							[
								95508,
								95538
							],
							[
								95631,
								95661
							],
							[
								95751,
								95778
							],
							[
								95857,
								95876
							],
							[
								95949,
								95970
							],
							[
								96050,
								96076
							],
							[
								96160,
								96185
							],
							[
								96266,
								96289
							],
							[
								96369,
								96393
							],
							[
								96477,
								96504
							],
							[
								96582,
								96600
							],
							[
								96676,
								96701
							],
							[
								96783,
								96807
							],
							[
								96881,
								96898
							],
							[
								96966,
								96984
							],
							[
								97056,
								97079
							],
							[
								97155,
								97175
							],
							[
								97251,
								97274
							],
							[
								97353,
								97376
							],
							[
								97452,
								97472
							],
							[
								97551,
								97576
							],
							[
								97662,
								97689
							],
							[
								97782,
								97814
							],
							[
								97911,
								97942
							],
							[
								98036,
								98065
							],
							[
								98158,
								98188
							],
							[
								98285,
								98318
							],
							[
								98409,
								98433
							],
							[
								98522,
								98553
							],
							[
								98648,
								98678
							],
							[
								98765,
								98788
							],
							[
								98869,
								98893
							],
							[
								98978,
								99007
							],
							[
								99096,
								99122
							],
							[
								99211,
								99240
							],
							[
								99332,
								99361
							],
							[
								99450,
								99476
							],
							[
								99552,
								99571
							],
							[
								99661,
								99682
							],
							[
								99776,
								99802
							],
							[
								99906,
								99931
							],
							[
								100033,
								100056
							],
							[
								100154,
								100178
							],
							[
								100278,
								100305
							],
							[
								100411,
								100429
							],
							[
								100517,
								100542
							],
							[
								100644,
								100668
							],
							[
								100768,
								100785
							],
							[
								100871,
								100889
							],
							[
								100977,
								101000
							],
							[
								101098,
								101118
							],
							[
								101210,
								101233
							],
							[
								101331,
								101354
							],
							[
								101452,
								101472
							],
							[
								101563,
								101592
							],
							[
								101684,
								101715
							],
							[
								101809,
								101845
							],
							[
								101944,
								101979
							],
							[
								102077,
								102110
							],
							[
								102206,
								102240
							],
							[
								102337,
								102374
							],
							[
								102474,
								102502
							],
							[
								102593,
								102628
							],
							[
								102726,
								102760
							],
							[
								102857,
								102884
							],
							[
								102974,
								103002
							],
							[
								103093,
								103126
							],
							[
								103222,
								103252
							],
							[
								103345,
								103378
							],
							[
								103474,
								103507
							],
							[
								103603,
								103633
							],
							[
								103727,
								103748
							],
							[
								103839,
								103862
							],
							[
								103955,
								103983
							],
							[
								104081,
								104108
							],
							[
								104205,
								104230
							],
							[
								104325,
								104351
							],
							[
								104447,
								104476
							],
							[
								104575,
								104595
							],
							[
								104685,
								104712
							],
							[
								104809,
								104835
							],
							[
								104931,
								104950
							],
							[
								105039,
								105059
							],
							[
								105149,
								105174
							],
							[
								105269,
								105291
							],
							[
								105383,
								105408
							],
							[
								105503,
								105528
							],
							[
								105623,
								105645
							],
							[
								105737,
								105759
							],
							[
								105866,
								105890
							],
							[
								106001,
								106030
							],
							[
								106151,
								106179
							],
							[
								106298,
								106324
							],
							[
								106439,
								106466
							],
							[
								106583,
								106613
							],
							[
								106736,
								106757
							],
							[
								106862,
								106890
							],
							[
								107009,
								107036
							],
							[
								107153,
								107173
							],
							[
								107276,
								107297
							],
							[
								107402,
								107428
							],
							[
								107542,
								107565
							],
							[
								107674,
								107700
							],
							[
<<<<<<< HEAD
								107815,
								107841
							],
=======
								38563,
								38567
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABIAQAAU2NoZW1hdGljUmVuZGVyZXIKKHIsIGcsIGIpID0+CiAgY29uc3RydWN0b3IoZG9jLCBmYWN0b3J5KQogIHJlbmRlckNvbGxlY3Rpb24oY29sbGVjdGlvbiwgcGFyZW50LCBvcHRzKQogIGl0ZW0gPT4KICBpdGVtID0+CiAgcmVuZGVySXRlbShpdGVtLCBwYXJlbnQsIG9wdGlvbnMgPSB7fSkKaSA9PgogIHN2ZyA9IChlbGVtLCBhdHRyLCBwYXJlbnQpID0+CiAgcmVuZGVyTmV0KG5ldCwgcGFyZW50KQogIHJlbmRlclNoZWV0KHNoZWV0LCBwYXJlbnQpCiAgZGF0YSA9PgogIHJlbmRlcihkb2MgPSB0aGlzLmRvYywgcGFyZW50LCBwcm9wcyA9IHt9LCBzaGVldE5vID0gMCkKUmVjdAAAAAAAAAAANAwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					340,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle2svg.js",
						"symkeys":
						[
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							[
								107956,
								107979
							],
							[
								108088,
								108110
							],
							[
								108210,
								108234
							],
							[
<<<<<<< HEAD
								108336,
								108365
							],
							[
								108472,
								108500
							],
							[
								108606,
								108632
							],
							[
								108736,
								108763
							],
							[
								108868,
								108898
							],
							[
								109006,
								109027
							],
							[
								109126,
								109154
							],
							[
								109260,
								109287
							],
							[
								109392,
								109412
							],
							[
								109510,
								109531
							],
							[
								109630,
								109656
							],
							[
								109760,
								109783
							],
							[
								109884,
								109910
							],
							[
								110014,
								110040
							],
							[
								110144,
								110167
							],
							[
								110268,
								110292
							],
							[
								110380,
								110406
							],
							[
								110498,
								110529
							],
							[
								110631,
								110661
							],
							[
								110761,
								110789
							],
							[
								110885,
								110914
							],
							[
								111012,
								111044
							],
							[
								111148,
								111171
							],
							[
								111257,
								111287
							],
							[
								111387,
								111416
							],
							[
								111514,
								111536
							],
							[
								111620,
								111643
							],
							[
								111729,
								111757
							],
							[
								111852,
								111877
							],
							[
								111967,
								111995
							],
							[
								112091,
								112119
							],
							[
								112215,
								112240
							],
							[
								112330,
								112353
							],
							[
								112425,
								112450
							],
							[
								112524,
								112554
							],
							[
								112633,
								112662
							],
							[
								112740,
								112767
							],
							[
								112843,
								112871
							],
							[
								112948,
								112979
							],
							[
								113059,
								113081
							],
							[
								113152,
								113181
							],
							[
								113259,
								113287
							],
							[
								113364,
								113385
							],
							[
								113455,
								113477
							],
							[
								113548,
								113575
							],
							[
								113651,
								113675
							],
							[
								113748,
								113775
							],
							[
								113851,
								113878
							],
							[
								113954,
								113978
							],
							[
								114051,
								114076
							],
							[
								114165,
								114192
							],
							[
								114285,
								114317
							],
							[
								114420,
								114451
							],
							[
								114552,
								114581
							],
							[
								114678,
								114708
							],
							[
								114807,
								114840
							],
							[
								114945,
								114969
							],
							[
								115056,
								115087
							],
							[
								115188,
								115218
							],
							[
								115317,
								115340
							],
							[
								115425,
								115449
							],
							[
								115536,
								115565
							],
							[
								115661,
								115687
							],
							[
								115778,
								115807
							],
							[
								115904,
								115933
							],
							[
								116030,
								116056
							],
							[
								116149,
								116169
							],
							[
								116261,
								116283
							],
							[
								116384,
								116411
							],
							[
								116521,
								116547
							],
							[
								116653,
								116677
							],
							[
								116780,
								116805
							],
							[
								116913,
								116941
							],
							[
								117046,
								117065
							],
							[
								117159,
								117185
							],
							[
								117292,
								117317
							],
							[
								117415,
								117433
							],
							[
								117518,
								117537
							],
							[
								117627,
								117651
							],
							[
								117748,
								117769
							],
							[
								117865,
								117889
							],
							[
								117991,
								118015
							],
							[
								118114,
								118135
							],
							[
								118227,
								118251
							],
							[
								118373,
								118399
							],
							[
								118532,
								118563
							],
							[
								118710,
								118740
							],
							[
								118882,
								118910
							],
							[
								119047,
								119076
							],
							[
								119219,
								119251
							],
							[
								119394,
								119417
							],
							[
								119540,
								119570
							],
							[
								119713,
								119742
							],
							[
								119875,
								119897
							],
							[
								120010,
								120033
							],
							[
								120152,
								120180
							],
							[
								120309,
								120334
							],
							[
								120461,
								120489
							],
							[
								120625,
								120653
							],
							[
								120786,
								120811
							],
							[
								120934,
								120963
							],
							[
								121064,
								121095
							],
							[
								121205,
								121241
							],
							[
								121360,
								121395
							],
							[
								121510,
								121543
							],
							[
								121655,
								121689
							],
							[
								121806,
								121843
							],
							[
								121957,
								121985
							],
							[
								122088,
								122123
							],
							[
								122239,
								122273
							],
							[
								122380,
								122407
							],
							[
								122501,
								122529
							],
							[
								122628,
								122661
							],
							[
								122767,
								122797
							],
							[
								122902,
								122935
							],
							[
								123046,
								123079
							],
							[
								123187,
								123217
							],
							[
								123318,
								123339
							],
							[
								123448,
								123471
							],
							[
								123591,
								123619
							],
							[
								123753,
								123780
							],
							[
								123909,
								123934
							],
							[
								124058,
								124084
							],
							[
								124214,
								124243
							],
							[
								124373,
								124393
							],
							[
								124503,
								124530
							],
							[
								124660,
								124686
							],
							[
								124806,
								124825
							],
							[
								124925,
								124945
							],
							[
								125051,
								125076
							],
							[
								125193,
								125215
							],
							[
								125329,
								125354
							],
							[
								125477,
								125502
							],
							[
								125622,
								125644
							],
							[
								125751,
								125774
							],
							[
								125866,
								125891
							],
							[
								125987,
								126009
							],
							[
								126099,
								126120
							],
							[
								126208,
								126237
							],
							[
								126339,
								126370
							],
							[
								126476,
								126512
							],
							[
								126628,
								126663
							],
							[
								126777,
								126810
							],
							[
								126920,
								126954
							],
							[
								127066,
								127103
							],
							[
								127221,
								127249
							],
							[
								127349,
								127384
							],
							[
								127498,
								127532
							],
							[
								127644,
								127671
							],
							[
								127769,
								127797
							],
							[
								127897,
								127930
							],
							[
								128038,
								128068
							],
							[
								128172,
								128205
							],
							[
								128315,
								128348
							],
							[
								128458,
								128488
							],
							[
								128649,
								128658
							],
							[
								128858,
								128881
							],
							[
								128889,
								128904
							],
							[
								129052,
								129065
							],
							[
								129108,
								129130
							],
							[
								129276,
								129298
							],
							[
								129458,
								129481
							],
							[
								129543,
								129564
							],
							[
								129648,
								129671
							]
						],
						"symlist":
						[
							"ImVec2_ImVec2",
							"ImVec2_destroy",
							"ImVec2_ImVec2Float",
							"ImVec4_ImVec4",
							"ImVec4_destroy",
							"ImVec4_ImVec4Float",
							"igCreateContext",
							"igDestroyContext",
							"igGetCurrentContext",
							"igSetCurrentContext",
							"igDebugCheckVersionAndDataLayout",
							"igGetIO",
							"igGetStyle",
							"igNewFrame",
							"igEndFrame",
							"igRender",
							"igGetDrawData",
							"igShowDemoWindow",
							"igShowAboutWindow",
							"igShowMetricsWindow",
							"igShowStyleEditor",
							"igShowStyleSelector",
							"igShowFontSelector",
							"igShowUserGuide",
							"igGetVersion",
							"igStyleColorsDark",
							"igStyleColorsClassic",
							"igStyleColorsLight",
							"igBegin",
							"igEnd",
							"igBeginChild",
							"igBeginChildID",
							"igEndChild",
							"igIsWindowAppearing",
							"igIsWindowCollapsed",
							"igIsWindowFocused",
							"igIsWindowHovered",
							"igGetWindowDrawList",
							"igGetWindowPos",
							"igGetWindowSize",
							"igGetWindowWidth",
							"igGetWindowHeight",
							"igGetContentRegionMax",
							"igGetContentRegionAvail",
							"igGetContentRegionAvailWidth",
							"igGetWindowContentRegionMin",
							"igGetWindowContentRegionMax",
							"igGetWindowContentRegionWidth",
							"igSetNextWindowPos",
							"igSetNextWindowSize",
							"igSetNextWindowSizeConstraints",
							"igSetNextWindowContentSize",
							"igSetNextWindowCollapsed",
							"igSetNextWindowFocus",
							"igSetNextWindowBgAlpha",
							"igSetWindowPosVec2",
							"igSetWindowSizeVec2",
							"igSetWindowCollapsedBool",
							"igSetWindowFocus",
							"igSetWindowFontScale",
							"igSetWindowPosStr",
							"igSetWindowSizeStr",
							"igSetWindowCollapsedStr",
							"igSetWindowFocusStr",
							"igGetScrollX",
							"igGetScrollY",
							"igGetScrollMaxX",
							"igGetScrollMaxY",
							"igSetScrollX",
							"igSetScrollY",
							"igSetScrollHereY",
							"igSetScrollFromPosY",
							"igPushFont",
							"igPopFont",
							"igPushStyleColorU32",
							"igPushStyleColor",
							"igPopStyleColor",
							"igPushStyleVarFloat",
							"igPushStyleVarVec2",
							"igPopStyleVar",
							"igGetStyleColorVec4",
							"igGetFont",
							"igGetFontSize",
							"igGetFontTexUvWhitePixel",
							"igGetColorU32",
							"igGetColorU32Vec4",
							"igGetColorU32U32",
							"igPushItemWidth",
							"igPopItemWidth",
							"igCalcItemWidth",
							"igPushTextWrapPos",
							"igPopTextWrapPos",
							"igPushAllowKeyboardFocus",
							"igPopAllowKeyboardFocus",
							"igPushButtonRepeat",
							"igPopButtonRepeat",
							"igSeparator",
							"igSameLine",
							"igNewLine",
							"igSpacing",
							"igDummy",
							"igIndent",
							"igUnindent",
							"igBeginGroup",
							"igEndGroup",
							"igGetCursorPos",
							"igGetCursorPosX",
							"igGetCursorPosY",
							"igSetCursorPos",
							"igSetCursorPosX",
							"igSetCursorPosY",
							"igGetCursorStartPos",
							"igGetCursorScreenPos",
							"igSetCursorScreenPos",
							"igAlignTextToFramePadding",
							"igGetTextLineHeight",
							"igGetTextLineHeightWithSpacing",
							"igGetFrameHeight",
							"igGetFrameHeightWithSpacing",
							"igPushIDStr",
							"igPushIDRange",
							"igPushIDPtr",
							"igPushIDInt",
							"igPopID",
							"igGetIDStr",
							"igGetIDRange",
							"igGetIDPtr",
							"igTextUnformatted",
							"igText",
							"igTextV",
							"igTextColored",
							"igTextColoredV",
							"igTextDisabled",
							"igTextDisabledV",
							"igTextWrapped",
							"igTextWrappedV",
							"igLabelText",
							"igLabelTextV",
							"igBulletText",
							"igBulletTextV",
							"igButton",
							"igSmallButton",
							"igInvisibleButton",
							"igArrowButton",
							"igImage",
							"igImageButton",
							"igCheckbox",
							"igCheckboxFlags",
							"igRadioButtonBool",
							"igRadioButtonIntPtr",
							"igProgressBar",
							"igBullet",
							"igBeginCombo",
							"igEndCombo",
							"igCombo",
							"igComboStr",
							"igComboFnPtr",
							"igDragFloat",
							"igDragFloat2",
							"igDragFloat3",
							"igDragFloat4",
							"igDragFloatRange2",
							"igDragInt",
							"igDragInt2",
							"igDragInt3",
							"igDragInt4",
							"igDragIntRange2",
							"igDragScalar",
							"igDragScalarN",
							"igSliderFloat",
							"igSliderFloat2",
							"igSliderFloat3",
							"igSliderFloat4",
							"igSliderAngle",
							"igSliderInt",
							"igSliderInt2",
							"igSliderInt3",
							"igSliderInt4",
							"igSliderScalar",
							"igSliderScalarN",
							"igVSliderFloat",
							"igVSliderInt",
							"igVSliderScalar",
							"igInputText",
							"igInputTextMultiline",
							"igInputFloat",
							"igInputFloat2",
							"igInputFloat3",
							"igInputFloat4",
							"igInputInt",
							"igInputInt2",
							"igInputInt3",
							"igInputInt4",
							"igInputDouble",
							"igInputScalar",
							"igInputScalarN",
							"igColorEdit3",
							"igColorEdit4",
							"igColorPicker3",
							"igColorPicker4",
							"igColorButton",
							"igSetColorEditOptions",
							"igTreeNodeStr",
							"igTreeNodeStrStr",
							"igTreeNodePtr",
							"igTreeNodeVStr",
							"igTreeNodeVPtr",
							"igTreeNodeExStr",
							"igTreeNodeExStrStr",
							"igTreeNodeExPtr",
							"igTreeNodeExVStr",
							"igTreeNodeExVPtr",
							"igTreePushStr",
							"igTreePushPtr",
							"igTreePop",
							"igTreeAdvanceToLabelPos",
							"igGetTreeNodeToLabelSpacing",
							"igSetNextTreeNodeOpen",
							"igCollapsingHeader",
							"igCollapsingHeaderBoolPtr",
							"igSelectable",
							"igSelectableBoolPtr",
							"igListBoxStr_arr",
							"igListBoxFnPtr",
							"igListBoxHeaderVec2",
							"igListBoxHeaderInt",
							"igListBoxFooter",
							"igPlotLines",
							"igPlotLinesFnPtr",
							"igPlotHistogramFloatPtr",
							"igPlotHistogramFnPtr",
							"igValueBool",
							"igValueInt",
							"igValueUint",
							"igValueFloat",
							"igBeginMainMenuBar",
							"igEndMainMenuBar",
							"igBeginMenuBar",
							"igEndMenuBar",
							"igBeginMenu",
							"igEndMenu",
							"igMenuItemBool",
							"igMenuItemBoolPtr",
							"igBeginTooltip",
							"igEndTooltip",
							"igSetTooltip",
							"igSetTooltipV",
							"igOpenPopup",
							"igBeginPopup",
							"igBeginPopupContextItem",
							"igBeginPopupContextWindow",
							"igBeginPopupContextVoid",
							"igBeginPopupModal",
							"igEndPopup",
							"igOpenPopupOnItemClick",
							"igIsPopupOpen",
							"igCloseCurrentPopup",
							"igColumns",
							"igNextColumn",
							"igGetColumnIndex",
							"igGetColumnWidth",
							"igSetColumnWidth",
							"igGetColumnOffset",
							"igSetColumnOffset",
							"igGetColumnsCount",
							"igBeginTabBar",
							"igEndTabBar",
							"igBeginTabItem",
							"igEndTabItem",
							"igSetTabItemClosed",
							"igLogToTTY",
							"igLogToFile",
							"igLogToClipboard",
							"igLogFinish",
							"igLogButtons",
							"igBeginDragDropSource",
							"igSetDragDropPayload",
							"igEndDragDropSource",
							"igBeginDragDropTarget",
							"igAcceptDragDropPayload",
							"igEndDragDropTarget",
							"igGetDragDropPayload",
							"igPushClipRect",
							"igPopClipRect",
							"igSetItemDefaultFocus",
							"igSetKeyboardFocusHere",
							"igIsItemHovered",
							"igIsItemActive",
							"igIsItemFocused",
							"igIsItemClicked",
							"igIsItemVisible",
							"igIsItemEdited",
							"igIsItemActivated",
							"igIsItemDeactivated",
							"igIsItemDeactivatedAfterEdit",
							"igIsAnyItemHovered",
							"igIsAnyItemActive",
							"igIsAnyItemFocused",
							"igGetItemRectMin",
							"igGetItemRectMax",
							"igGetItemRectSize",
							"igSetItemAllowOverlap",
							"igIsRectVisible",
							"igIsRectVisibleVec2",
							"igGetTime",
							"igGetFrameCount",
							"igGetOverlayDrawList",
							"igGetDrawListSharedData",
							"igGetStyleColorName",
							"igSetStateStorage",
							"igGetStateStorage",
							"igCalcTextSize",
							"igCalcListClipping",
							"igBeginChildFrame",
							"igEndChildFrame",
							"igColorConvertU32ToFloat4",
							"igColorConvertFloat4ToU32",
							"igGetKeyIndex",
							"igIsKeyDown",
							"igIsKeyPressed",
							"igIsKeyReleased",
							"igGetKeyPressedAmount",
							"igIsMouseDown",
							"igIsAnyMouseDown",
							"igIsMouseClicked",
							"igIsMouseDoubleClicked",
							"igIsMouseReleased",
							"igIsMouseDragging",
							"igIsMouseHoveringRect",
							"igIsMousePosValid",
							"igGetMousePos",
							"igGetMousePosOnOpeningCurrentPopup",
							"igGetMouseDragDelta",
							"igResetMouseDragDelta",
							"igGetMouseCursor",
							"igSetMouseCursor",
							"igCaptureKeyboardFromApp",
							"igCaptureMouseFromApp",
							"igGetClipboardText",
							"igSetClipboardText",
							"igLoadIniSettingsFromDisk",
							"igLoadIniSettingsFromMemory",
							"igSaveIniSettingsToDisk",
							"igSaveIniSettingsToMemory",
							"igSetAllocatorFunctions",
							"igMemAlloc",
							"igMemFree",
							"ImGuiStyle_ImGuiStyle",
							"ImGuiStyle_destroy",
							"ImGuiStyle_ScaleAllSizes",
							"ImGuiIO_AddInputCharacter",
							"ImGuiIO_AddInputCharactersUTF8",
							"ImGuiIO_ClearInputCharacters",
							"ImGuiIO_ImGuiIO",
							"ImGuiIO_destroy",
							"ImGuiInputTextCallbackData_ImGuiInputTextCallbackData",
							"ImGuiInputTextCallbackData_destroy",
							"ImGuiInputTextCallbackData_DeleteChars",
							"ImGuiInputTextCallbackData_InsertChars",
							"ImGuiInputTextCallbackData_HasSelection",
							"ImGuiPayload_ImGuiPayload",
							"ImGuiPayload_destroy",
							"ImGuiPayload_Clear",
							"ImGuiPayload_IsDataType",
							"ImGuiPayload_IsPreview",
							"ImGuiPayload_IsDelivery",
							"ImGuiOnceUponAFrame_ImGuiOnceUponAFrame",
							"ImGuiOnceUponAFrame_destroy",
							"ImGuiTextFilter_ImGuiTextFilter",
							"ImGuiTextFilter_destroy",
							"ImGuiTextFilter_Draw",
							"ImGuiTextFilter_PassFilter",
							"ImGuiTextFilter_Build",
							"ImGuiTextFilter_Clear",
							"ImGuiTextFilter_IsActive",
							"TextRange_TextRange",
							"TextRange_destroy",
							"TextRange_TextRangeStr",
							"TextRange_begin",
							"TextRange_end",
							"TextRange_empty",
							"TextRange_split",
							"ImGuiTextBuffer_ImGuiTextBuffer",
							"ImGuiTextBuffer_destroy",
							"ImGuiTextBuffer_begin",
							"ImGuiTextBuffer_end",
							"ImGuiTextBuffer_size",
							"ImGuiTextBuffer_empty",
							"ImGuiTextBuffer_clear",
							"ImGuiTextBuffer_reserve",
							"ImGuiTextBuffer_c_str",
							"ImGuiTextBuffer_append",
							"ImGuiTextBuffer_appendfv",
							"Pair_PairInt",
							"Pair_destroy",
							"Pair_PairFloat",
							"Pair_PairPtr",
							"ImGuiStorage_Clear",
							"ImGuiStorage_GetInt",
							"ImGuiStorage_SetInt",
							"ImGuiStorage_GetBool",
							"ImGuiStorage_SetBool",
							"ImGuiStorage_GetFloat",
							"ImGuiStorage_SetFloat",
							"ImGuiStorage_GetVoidPtr",
							"ImGuiStorage_SetVoidPtr",
							"ImGuiStorage_GetIntRef",
							"ImGuiStorage_GetBoolRef",
							"ImGuiStorage_GetFloatRef",
							"ImGuiStorage_GetVoidPtrRef",
							"ImGuiStorage_SetAllInt",
							"ImGuiStorage_BuildSortByKey",
							"ImGuiListClipper_ImGuiListClipper",
							"ImGuiListClipper_destroy",
							"ImGuiListClipper_Step",
							"ImGuiListClipper_Begin",
							"ImGuiListClipper_End",
							"ImColor_ImColor",
							"ImColor_destroy",
							"ImColor_ImColorInt",
							"ImColor_ImColorU32",
							"ImColor_ImColorFloat",
							"ImColor_ImColorVec4",
							"ImColor_SetHSV",
							"ImColor_HSV",
							"ImDrawCmd_ImDrawCmd",
							"ImDrawCmd_destroy",
							"ImDrawList_ImDrawList",
							"ImDrawList_destroy",
							"ImDrawList_PushClipRect",
							"ImDrawList_PushClipRectFullScreen",
							"ImDrawList_PopClipRect",
							"ImDrawList_PushTextureID",
							"ImDrawList_PopTextureID",
							"ImDrawList_GetClipRectMin",
							"ImDrawList_GetClipRectMax",
							"ImDrawList_AddLine",
							"ImDrawList_AddRect",
							"ImDrawList_AddRectFilled",
							"ImDrawList_AddRectFilledMultiColor",
							"ImDrawList_AddQuad",
							"ImDrawList_AddQuadFilled",
							"ImDrawList_AddTriangle",
							"ImDrawList_AddTriangleFilled",
							"ImDrawList_AddCircle",
							"ImDrawList_AddCircleFilled",
							"ImDrawList_AddText",
							"ImDrawList_AddTextFontPtr",
							"ImDrawList_AddImage",
							"ImDrawList_AddImageQuad",
							"ImDrawList_AddImageRounded",
							"ImDrawList_AddPolyline",
							"ImDrawList_AddConvexPolyFilled",
							"ImDrawList_AddBezierCurve",
							"ImDrawList_PathClear",
							"ImDrawList_PathLineTo",
							"ImDrawList_PathLineToMergeDuplicate",
							"ImDrawList_PathFillConvex",
							"ImDrawList_PathStroke",
							"ImDrawList_PathArcTo",
							"ImDrawList_PathArcToFast",
							"ImDrawList_PathBezierCurveTo",
							"ImDrawList_PathRect",
							"ImDrawList_ChannelsSplit",
							"ImDrawList_ChannelsMerge",
							"ImDrawList_ChannelsSetCurrent",
							"ImDrawList_AddCallback",
							"ImDrawList_AddDrawCmd",
							"ImDrawList_CloneOutput",
							"ImDrawList_Clear",
							"ImDrawList_ClearFreeMemory",
							"ImDrawList_PrimReserve",
							"ImDrawList_PrimRect",
							"ImDrawList_PrimRectUV",
							"ImDrawList_PrimQuadUV",
							"ImDrawList_PrimWriteVtx",
							"ImDrawList_PrimWriteIdx",
							"ImDrawList_PrimVtx",
							"ImDrawList_UpdateClipRect",
							"ImDrawList_UpdateTextureID",
							"ImDrawData_ImDrawData",
							"ImDrawData_destroy",
							"ImDrawData_Clear",
							"ImDrawData_DeIndexAllBuffers",
							"ImDrawData_ScaleClipRects",
							"ImFontConfig_ImFontConfig",
							"ImFontConfig_destroy",
							"ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder",
							"ImFontGlyphRangesBuilder_destroy",
							"ImFontGlyphRangesBuilder_GetBit",
							"ImFontGlyphRangesBuilder_SetBit",
							"ImFontGlyphRangesBuilder_AddChar",
							"ImFontGlyphRangesBuilder_AddText",
							"ImFontGlyphRangesBuilder_AddRanges",
							"ImFontGlyphRangesBuilder_BuildRanges",
							"ImFontAtlas_ImFontAtlas",
							"ImFontAtlas_destroy",
							"ImFontAtlas_AddFont",
							"ImFontAtlas_AddFontDefault",
							"ImFontAtlas_AddFontFromFileTTF",
							"ImFontAtlas_AddFontFromMemoryTTF",
							"ImFontAtlas_AddFontFromMemoryCompressedTTF",
							"ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",
							"ImFontAtlas_ClearInputData",
							"ImFontAtlas_ClearTexData",
							"ImFontAtlas_ClearFonts",
							"ImFontAtlas_Clear",
							"ImFontAtlas_Build",
							"ImFontAtlas_GetTexDataAsAlpha8",
							"ImFontAtlas_GetTexDataAsRGBA32",
							"ImFontAtlas_IsBuilt",
							"ImFontAtlas_SetTexID",
							"ImFontAtlas_GetGlyphRangesDefault",
							"ImFontAtlas_GetGlyphRangesKorean",
							"ImFontAtlas_GetGlyphRangesJapanese",
							"ImFontAtlas_GetGlyphRangesChineseFull",
							"ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon",
							"ImFontAtlas_GetGlyphRangesCyrillic",
							"ImFontAtlas_GetGlyphRangesThai",
							"CustomRect_CustomRect",
							"CustomRect_destroy",
							"CustomRect_IsPacked",
							"ImFontAtlas_AddCustomRectRegular",
							"ImFontAtlas_AddCustomRectFontGlyph",
							"ImFontAtlas_GetCustomRectByIndex",
							"ImFontAtlas_CalcCustomRectUV",
							"ImFontAtlas_GetMouseCursorTexData",
							"ImFont_ImFont",
							"ImFont_destroy",
							"ImFont_FindGlyph",
							"ImFont_FindGlyphNoFallback",
							"ImFont_GetCharAdvance",
							"ImFont_IsLoaded",
							"ImFont_GetDebugName",
							"ImFont_CalcTextSizeA",
							"ImFont_CalcWordWrapPositionA",
							"ImFont_RenderChar",
							"ImFont_RenderText",
							"ImFont_BuildLookupTable",
							"ImFont_ClearOutputData",
							"ImFont_GrowIndex",
							"ImFont_AddGlyph",
							"ImFont_AddRemapChar",
							"ImFont_SetFallbackChar",
							"ImVector_float_ImVector_float",
							"ImVector_float_destroy",
							"ImVector_ImWchar_ImVector_ImWchar",
							"ImVector_ImWchar_destroy",
							"ImVector_ImFontConfig_ImVector_ImFontConfig",
							"ImVector_ImFontConfig_destroy",
							"ImVector_ImFontGlyph_ImVector_ImFontGlyph",
							"ImVector_ImFontGlyph_destroy",
							"ImVector_TextRange_ImVector_TextRange",
							"ImVector_TextRange_destroy",
							"ImVector_CustomRect_ImVector_CustomRect",
							"ImVector_CustomRect_destroy",
							"ImVector_ImDrawChannel_ImVector_ImDrawChannel",
							"ImVector_ImDrawChannel_destroy",
							"ImVector_char_ImVector_char",
							"ImVector_char_destroy",
							"ImVector_ImTextureID_ImVector_ImTextureID",
							"ImVector_ImTextureID_destroy",
							"ImVector_ImDrawVert_ImVector_ImDrawVert",
							"ImVector_ImDrawVert_destroy",
							"ImVector_int_ImVector_int",
							"ImVector_int_destroy",
							"ImVector_Pair_ImVector_Pair",
							"ImVector_Pair_destroy",
							"ImVector_ImFontPtr_ImVector_ImFontPtr",
							"ImVector_ImFontPtr_destroy",
							"ImVector_ImVec4_ImVector_ImVec4",
							"ImVector_ImVec4_destroy",
							"ImVector_ImDrawCmd_ImVector_ImDrawCmd",
							"ImVector_ImDrawCmd_destroy",
							"ImVector_ImDrawIdx_ImVector_ImDrawIdx",
							"ImVector_ImDrawIdx_destroy",
							"ImVector_ImVec2_ImVector_ImVec2",
							"ImVector_ImVec2_destroy",
							"ImVector_float_ImVector_floatVector",
							"ImVector_ImWchar_ImVector_ImWcharVector",
							"ImVector_ImFontConfig_ImVector_ImFontConfigVector",
							"ImVector_ImFontGlyph_ImVector_ImFontGlyphVector",
							"ImVector_TextRange_ImVector_TextRangeVector",
							"ImVector_CustomRect_ImVector_CustomRectVector",
							"ImVector_ImDrawChannel_ImVector_ImDrawChannelVector",
							"ImVector_char_ImVector_charVector",
							"ImVector_ImTextureID_ImVector_ImTextureIDVector",
							"ImVector_ImDrawVert_ImVector_ImDrawVertVector",
							"ImVector_int_ImVector_intVector",
							"ImVector_Pair_ImVector_PairVector",
							"ImVector_ImFontPtr_ImVector_ImFontPtrVector",
							"ImVector_ImVec4_ImVector_ImVec4Vector",
							"ImVector_ImDrawCmd_ImVector_ImDrawCmdVector",
							"ImVector_ImDrawIdx_ImVector_ImDrawIdxVector",
							"ImVector_ImVec2_ImVector_ImVec2Vector",
							"ImVector_float_empty",
							"ImVector_ImWchar_empty",
							"ImVector_ImFontConfig_empty",
							"ImVector_ImFontGlyph_empty",
							"ImVector_TextRange_empty",
							"ImVector_CustomRect_empty",
							"ImVector_ImDrawChannel_empty",
							"ImVector_char_empty",
							"ImVector_ImTextureID_empty",
							"ImVector_ImDrawVert_empty",
							"ImVector_int_empty",
							"ImVector_Pair_empty",
							"ImVector_ImFontPtr_empty",
							"ImVector_ImVec4_empty",
							"ImVector_ImDrawCmd_empty",
							"ImVector_ImDrawIdx_empty",
							"ImVector_ImVec2_empty",
							"ImVector_float_size",
							"ImVector_ImWchar_size",
							"ImVector_ImFontConfig_size",
							"ImVector_ImFontGlyph_size",
							"ImVector_TextRange_size",
							"ImVector_CustomRect_size",
							"ImVector_ImDrawChannel_size",
							"ImVector_char_size",
							"ImVector_ImTextureID_size",
							"ImVector_ImDrawVert_size",
							"ImVector_int_size",
							"ImVector_Pair_size",
							"ImVector_ImFontPtr_size",
							"ImVector_ImVec4_size",
							"ImVector_ImDrawCmd_size",
							"ImVector_ImDrawIdx_size",
							"ImVector_ImVec2_size",
							"ImVector_float_size_in_bytes",
							"ImVector_ImWchar_size_in_bytes",
							"ImVector_ImFontConfig_size_in_bytes",
							"ImVector_ImFontGlyph_size_in_bytes",
							"ImVector_TextRange_size_in_bytes",
							"ImVector_CustomRect_size_in_bytes",
							"ImVector_ImDrawChannel_size_in_bytes",
							"ImVector_char_size_in_bytes",
							"ImVector_ImTextureID_size_in_bytes",
							"ImVector_ImDrawVert_size_in_bytes",
							"ImVector_int_size_in_bytes",
							"ImVector_Pair_size_in_bytes",
							"ImVector_ImFontPtr_size_in_bytes",
							"ImVector_ImVec4_size_in_bytes",
							"ImVector_ImDrawCmd_size_in_bytes",
							"ImVector_ImDrawIdx_size_in_bytes",
							"ImVector_ImVec2_size_in_bytes",
							"ImVector_float_capacity",
							"ImVector_ImWchar_capacity",
							"ImVector_ImFontConfig_capacity",
							"ImVector_ImFontGlyph_capacity",
							"ImVector_TextRange_capacity",
							"ImVector_CustomRect_capacity",
							"ImVector_ImDrawChannel_capacity",
							"ImVector_char_capacity",
							"ImVector_ImTextureID_capacity",
							"ImVector_ImDrawVert_capacity",
							"ImVector_int_capacity",
							"ImVector_Pair_capacity",
							"ImVector_ImFontPtr_capacity",
							"ImVector_ImVec4_capacity",
							"ImVector_ImDrawCmd_capacity",
							"ImVector_ImDrawIdx_capacity",
							"ImVector_ImVec2_capacity",
							"ImVector_float_clear",
							"ImVector_ImWchar_clear",
							"ImVector_ImFontConfig_clear",
							"ImVector_ImFontGlyph_clear",
							"ImVector_TextRange_clear",
							"ImVector_CustomRect_clear",
							"ImVector_ImDrawChannel_clear",
							"ImVector_char_clear",
							"ImVector_ImTextureID_clear",
							"ImVector_ImDrawVert_clear",
							"ImVector_int_clear",
							"ImVector_Pair_clear",
							"ImVector_ImFontPtr_clear",
							"ImVector_ImVec4_clear",
							"ImVector_ImDrawCmd_clear",
							"ImVector_ImDrawIdx_clear",
							"ImVector_ImVec2_clear",
							"ImVector_float_begin",
							"ImVector_ImWchar_begin",
							"ImVector_ImFontConfig_begin",
							"ImVector_ImFontGlyph_begin",
							"ImVector_TextRange_begin",
							"ImVector_CustomRect_begin",
							"ImVector_ImDrawChannel_begin",
							"ImVector_char_begin",
							"ImVector_ImTextureID_begin",
							"ImVector_ImDrawVert_begin",
							"ImVector_int_begin",
							"ImVector_Pair_begin",
							"ImVector_ImFontPtr_begin",
							"ImVector_ImVec4_begin",
							"ImVector_ImDrawCmd_begin",
							"ImVector_ImDrawIdx_begin",
							"ImVector_ImVec2_begin",
							"ImVector_float_begin_const",
							"ImVector_ImWchar_begin_const",
							"ImVector_ImFontConfig_begin_const",
							"ImVector_ImFontGlyph_begin_const",
							"ImVector_TextRange_begin_const",
							"ImVector_CustomRect_begin_const",
							"ImVector_ImDrawChannel_begin_const",
							"ImVector_char_begin_const",
							"ImVector_ImTextureID_begin_const",
							"ImVector_ImDrawVert_begin_const",
							"ImVector_int_begin_const",
							"ImVector_Pair_begin_const",
							"ImVector_ImFontPtr_begin_const",
							"ImVector_ImVec4_begin_const",
							"ImVector_ImDrawCmd_begin_const",
							"ImVector_ImDrawIdx_begin_const",
							"ImVector_ImVec2_begin_const",
							"ImVector_float_end",
							"ImVector_ImWchar_end",
							"ImVector_ImFontConfig_end",
							"ImVector_ImFontGlyph_end",
							"ImVector_TextRange_end",
							"ImVector_CustomRect_end",
							"ImVector_ImDrawChannel_end",
							"ImVector_char_end",
							"ImVector_ImTextureID_end",
							"ImVector_ImDrawVert_end",
							"ImVector_int_end",
							"ImVector_Pair_end",
							"ImVector_ImFontPtr_end",
							"ImVector_ImVec4_end",
							"ImVector_ImDrawCmd_end",
							"ImVector_ImDrawIdx_end",
							"ImVector_ImVec2_end",
							"ImVector_float_end_const",
							"ImVector_ImWchar_end_const",
							"ImVector_ImFontConfig_end_const",
							"ImVector_ImFontGlyph_end_const",
							"ImVector_TextRange_end_const",
							"ImVector_CustomRect_end_const",
							"ImVector_ImDrawChannel_end_const",
							"ImVector_char_end_const",
							"ImVector_ImTextureID_end_const",
							"ImVector_ImDrawVert_end_const",
							"ImVector_int_end_const",
							"ImVector_Pair_end_const",
							"ImVector_ImFontPtr_end_const",
							"ImVector_ImVec4_end_const",
							"ImVector_ImDrawCmd_end_const",
							"ImVector_ImDrawIdx_end_const",
							"ImVector_ImVec2_end_const",
							"ImVector_float_front",
							"ImVector_ImWchar_front",
							"ImVector_ImFontConfig_front",
							"ImVector_ImFontGlyph_front",
							"ImVector_TextRange_front",
							"ImVector_CustomRect_front",
							"ImVector_ImDrawChannel_front",
							"ImVector_char_front",
							"ImVector_ImTextureID_front",
							"ImVector_ImDrawVert_front",
							"ImVector_int_front",
							"ImVector_Pair_front",
							"ImVector_ImFontPtr_front",
							"ImVector_ImVec4_front",
							"ImVector_ImDrawCmd_front",
							"ImVector_ImDrawIdx_front",
							"ImVector_ImVec2_front",
							"ImVector_float_front_const",
							"ImVector_ImWchar_front_const",
							"ImVector_ImFontConfig_front_const",
							"ImVector_ImFontGlyph_front_const",
							"ImVector_TextRange_front_const",
							"ImVector_CustomRect_front_const",
							"ImVector_ImDrawChannel_front_const",
							"ImVector_char_front_const",
							"ImVector_ImTextureID_front_const",
							"ImVector_ImDrawVert_front_const",
							"ImVector_int_front_const",
							"ImVector_Pair_front_const",
							"ImVector_ImFontPtr_front_const",
							"ImVector_ImVec4_front_const",
							"ImVector_ImDrawCmd_front_const",
							"ImVector_ImDrawIdx_front_const",
							"ImVector_ImVec2_front_const",
							"ImVector_float_back",
							"ImVector_ImWchar_back",
							"ImVector_ImFontConfig_back",
							"ImVector_ImFontGlyph_back",
							"ImVector_TextRange_back",
							"ImVector_CustomRect_back",
							"ImVector_ImDrawChannel_back",
							"ImVector_char_back",
							"ImVector_ImTextureID_back",
							"ImVector_ImDrawVert_back",
							"ImVector_int_back",
							"ImVector_Pair_back",
							"ImVector_ImFontPtr_back",
							"ImVector_ImVec4_back",
							"ImVector_ImDrawCmd_back",
							"ImVector_ImDrawIdx_back",
							"ImVector_ImVec2_back",
							"ImVector_float_back_const",
							"ImVector_ImWchar_back_const",
							"ImVector_ImFontConfig_back_const",
							"ImVector_ImFontGlyph_back_const",
							"ImVector_TextRange_back_const",
							"ImVector_CustomRect_back_const",
							"ImVector_ImDrawChannel_back_const",
							"ImVector_char_back_const",
							"ImVector_ImTextureID_back_const",
							"ImVector_ImDrawVert_back_const",
							"ImVector_int_back_const",
							"ImVector_Pair_back_const",
							"ImVector_ImFontPtr_back_const",
							"ImVector_ImVec4_back_const",
							"ImVector_ImDrawCmd_back_const",
							"ImVector_ImDrawIdx_back_const",
							"ImVector_ImVec2_back_const",
							"ImVector_float_swap",
							"ImVector_ImWchar_swap",
							"ImVector_ImFontConfig_swap",
							"ImVector_ImFontGlyph_swap",
							"ImVector_TextRange_swap",
							"ImVector_CustomRect_swap",
							"ImVector_ImDrawChannel_swap",
							"ImVector_char_swap",
							"ImVector_ImTextureID_swap",
							"ImVector_ImDrawVert_swap",
							"ImVector_int_swap",
							"ImVector_Pair_swap",
							"ImVector_ImFontPtr_swap",
							"ImVector_ImVec4_swap",
							"ImVector_ImDrawCmd_swap",
							"ImVector_ImDrawIdx_swap",
							"ImVector_ImVec2_swap",
							"ImVector_float__grow_capacity",
							"ImVector_ImWchar__grow_capacity",
							"ImVector_ImFontConfig__grow_capacity",
							"ImVector_ImFontGlyph__grow_capacity",
							"ImVector_TextRange__grow_capacity",
							"ImVector_CustomRect__grow_capacity",
							"ImVector_ImDrawChannel__grow_capacity",
							"ImVector_char__grow_capacity",
							"ImVector_ImTextureID__grow_capacity",
							"ImVector_ImDrawVert__grow_capacity",
							"ImVector_int__grow_capacity",
							"ImVector_Pair__grow_capacity",
							"ImVector_ImFontPtr__grow_capacity",
							"ImVector_ImVec4__grow_capacity",
							"ImVector_ImDrawCmd__grow_capacity",
							"ImVector_ImDrawIdx__grow_capacity",
							"ImVector_ImVec2__grow_capacity",
							"ImVector_float_resize",
							"ImVector_ImWchar_resize",
							"ImVector_ImFontConfig_resize",
							"ImVector_ImFontGlyph_resize",
							"ImVector_TextRange_resize",
							"ImVector_CustomRect_resize",
							"ImVector_ImDrawChannel_resize",
							"ImVector_char_resize",
							"ImVector_ImTextureID_resize",
							"ImVector_ImDrawVert_resize",
							"ImVector_int_resize",
							"ImVector_Pair_resize",
							"ImVector_ImFontPtr_resize",
							"ImVector_ImVec4_resize",
							"ImVector_ImDrawCmd_resize",
							"ImVector_ImDrawIdx_resize",
							"ImVector_ImVec2_resize",
							"ImVector_float_resizeT",
							"ImVector_ImWchar_resizeT",
							"ImVector_ImFontConfig_resizeT",
							"ImVector_ImFontGlyph_resizeT",
							"ImVector_TextRange_resizeT",
							"ImVector_CustomRect_resizeT",
							"ImVector_ImDrawChannel_resizeT",
							"ImVector_char_resizeT",
							"ImVector_ImTextureID_resizeT",
							"ImVector_ImDrawVert_resizeT",
							"ImVector_int_resizeT",
							"ImVector_Pair_resizeT",
							"ImVector_ImFontPtr_resizeT",
							"ImVector_ImVec4_resizeT",
							"ImVector_ImDrawCmd_resizeT",
							"ImVector_ImDrawIdx_resizeT",
							"ImVector_ImVec2_resizeT",
							"ImVector_float_reserve",
							"ImVector_ImWchar_reserve",
							"ImVector_ImFontConfig_reserve",
							"ImVector_ImFontGlyph_reserve",
							"ImVector_TextRange_reserve",
							"ImVector_CustomRect_reserve",
							"ImVector_ImDrawChannel_reserve",
							"ImVector_char_reserve",
							"ImVector_ImTextureID_reserve",
							"ImVector_ImDrawVert_reserve",
							"ImVector_int_reserve",
							"ImVector_Pair_reserve",
							"ImVector_ImFontPtr_reserve",
							"ImVector_ImVec4_reserve",
							"ImVector_ImDrawCmd_reserve",
							"ImVector_ImDrawIdx_reserve",
							"ImVector_ImVec2_reserve",
							"ImVector_float_push_back",
							"ImVector_ImWchar_push_back",
							"ImVector_ImFontConfig_push_back",
							"ImVector_ImFontGlyph_push_back",
							"ImVector_TextRange_push_back",
							"ImVector_CustomRect_push_back",
							"ImVector_ImDrawChannel_push_back",
							"ImVector_char_push_back",
							"ImVector_ImTextureID_push_back",
							"ImVector_ImDrawVert_push_back",
							"ImVector_int_push_back",
							"ImVector_Pair_push_back",
							"ImVector_ImFontPtr_push_back",
							"ImVector_ImVec4_push_back",
							"ImVector_ImDrawCmd_push_back",
							"ImVector_ImDrawIdx_push_back",
							"ImVector_ImVec2_push_back",
							"ImVector_float_pop_back",
							"ImVector_ImWchar_pop_back",
							"ImVector_ImFontConfig_pop_back",
							"ImVector_ImFontGlyph_pop_back",
							"ImVector_TextRange_pop_back",
							"ImVector_CustomRect_pop_back",
							"ImVector_ImDrawChannel_pop_back",
							"ImVector_char_pop_back",
							"ImVector_ImTextureID_pop_back",
							"ImVector_ImDrawVert_pop_back",
							"ImVector_int_pop_back",
							"ImVector_Pair_pop_back",
							"ImVector_ImFontPtr_pop_back",
							"ImVector_ImVec4_pop_back",
							"ImVector_ImDrawCmd_pop_back",
							"ImVector_ImDrawIdx_pop_back",
							"ImVector_ImVec2_pop_back",
							"ImVector_float_push_front",
							"ImVector_ImWchar_push_front",
							"ImVector_ImFontConfig_push_front",
							"ImVector_ImFontGlyph_push_front",
							"ImVector_TextRange_push_front",
							"ImVector_CustomRect_push_front",
							"ImVector_ImDrawChannel_push_front",
							"ImVector_char_push_front",
							"ImVector_ImTextureID_push_front",
							"ImVector_ImDrawVert_push_front",
							"ImVector_int_push_front",
							"ImVector_Pair_push_front",
							"ImVector_ImFontPtr_push_front",
							"ImVector_ImVec4_push_front",
							"ImVector_ImDrawCmd_push_front",
							"ImVector_ImDrawIdx_push_front",
							"ImVector_ImVec2_push_front",
							"ImVector_float_erase",
							"ImVector_ImWchar_erase",
							"ImVector_ImFontConfig_erase",
							"ImVector_ImFontGlyph_erase",
							"ImVector_TextRange_erase",
							"ImVector_CustomRect_erase",
							"ImVector_ImDrawChannel_erase",
							"ImVector_char_erase",
							"ImVector_ImTextureID_erase",
							"ImVector_ImDrawVert_erase",
							"ImVector_int_erase",
							"ImVector_Pair_erase",
							"ImVector_ImFontPtr_erase",
							"ImVector_ImVec4_erase",
							"ImVector_ImDrawCmd_erase",
							"ImVector_ImDrawIdx_erase",
							"ImVector_ImVec2_erase",
							"ImVector_float_eraseTPtr",
							"ImVector_ImWchar_eraseTPtr",
							"ImVector_ImFontConfig_eraseTPtr",
							"ImVector_ImFontGlyph_eraseTPtr",
							"ImVector_TextRange_eraseTPtr",
							"ImVector_CustomRect_eraseTPtr",
							"ImVector_ImDrawChannel_eraseTPtr",
							"ImVector_char_eraseTPtr",
							"ImVector_ImTextureID_eraseTPtr",
							"ImVector_ImDrawVert_eraseTPtr",
							"ImVector_int_eraseTPtr",
							"ImVector_Pair_eraseTPtr",
							"ImVector_ImFontPtr_eraseTPtr",
							"ImVector_ImVec4_eraseTPtr",
							"ImVector_ImDrawCmd_eraseTPtr",
							"ImVector_ImDrawIdx_eraseTPtr",
							"ImVector_ImVec2_eraseTPtr",
							"ImVector_float_erase_unsorted",
							"ImVector_ImWchar_erase_unsorted",
							"ImVector_ImFontConfig_erase_unsorted",
							"ImVector_ImFontGlyph_erase_unsorted",
							"ImVector_TextRange_erase_unsorted",
							"ImVector_CustomRect_erase_unsorted",
							"ImVector_ImDrawChannel_erase_unsorted",
							"ImVector_char_erase_unsorted",
							"ImVector_ImTextureID_erase_unsorted",
							"ImVector_ImDrawVert_erase_unsorted",
							"ImVector_int_erase_unsorted",
							"ImVector_Pair_erase_unsorted",
							"ImVector_ImFontPtr_erase_unsorted",
							"ImVector_ImVec4_erase_unsorted",
							"ImVector_ImDrawCmd_erase_unsorted",
							"ImVector_ImDrawIdx_erase_unsorted",
							"ImVector_ImVec2_erase_unsorted",
							"ImVector_float_insert",
							"ImVector_ImWchar_insert",
							"ImVector_ImFontConfig_insert",
							"ImVector_ImFontGlyph_insert",
							"ImVector_TextRange_insert",
							"ImVector_CustomRect_insert",
							"ImVector_ImDrawChannel_insert",
							"ImVector_char_insert",
							"ImVector_ImTextureID_insert",
							"ImVector_ImDrawVert_insert",
							"ImVector_int_insert",
							"ImVector_Pair_insert",
							"ImVector_ImFontPtr_insert",
							"ImVector_ImVec4_insert",
							"ImVector_ImDrawCmd_insert",
							"ImVector_ImDrawIdx_insert",
							"ImVector_ImVec2_insert",
							"ImVector_float_contains",
							"ImVector_ImWchar_contains",
							"ImVector_char_contains",
							"ImVector_int_contains",
							"ImVector_float_index_from_ptr",
							"ImVector_ImWchar_index_from_ptr",
							"ImVector_ImFontConfig_index_from_ptr",
							"ImVector_ImFontGlyph_index_from_ptr",
							"ImVector_TextRange_index_from_ptr",
							"ImVector_CustomRect_index_from_ptr",
							"ImVector_ImDrawChannel_index_from_ptr",
							"ImVector_char_index_from_ptr",
							"ImVector_ImTextureID_index_from_ptr",
							"ImVector_ImDrawVert_index_from_ptr",
							"ImVector_int_index_from_ptr",
							"ImVector_Pair_index_from_ptr",
							"ImVector_ImFontPtr_index_from_ptr",
							"ImVector_ImVec4_index_from_ptr",
							"ImVector_ImDrawCmd_index_from_ptr",
							"ImVector_ImDrawIdx_index_from_ptr",
							"ImVector_ImVec2_index_from_ptr",
							"igLogText",
							"ImGuiTextBuffer_appendf",
							"ImGuiTextBuffer",
							"igGET_FLT_MAX",
							"igColorConvertRGBtoHSV",
							"igColorConvertHSVtoRGB",
							"ImVector_ImWchar_create",
							"ImVector_ImWchar_Init",
							"ImVector_ImWchar_UnInit"
						]
					},
					"AQAAAAAAAAAAAAAA7mIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "eagle2svg.js",
			"settings":
			{
				"buffer_size": 2302,
				"line_ending": "Unix"
			}
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 39261,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1592,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAHYtAAAAAAAAeC0AAAAAAAAAAAAAcy0AAAAAAAB1LQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMtAAAAAAAAdi0AAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n\nf"
					},
					"AwAAAIOXAAAAAAAAhJcAAAAAAAAAAAAAhJcAAAAAAACFlwAAAAAAAAAAAACFlwAAAAAAAIaXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDlwAAAAAAAIOXAAAAAAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAAIWXAAAAAAAAhZcAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGlwAAAAAAAIaXAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "function"
					},
					"CAAAAIWXAAAAAAAAhpcAAAAAAAAAAAAAhpcAAAAAAACHlwAAAAAAAAAAAACHlwAAAAAAAIiXAAAAAAAAAAAAAIiXAAAAAAAAiZcAAAAAAAAAAAAAiZcAAAAAAACKlwAAAAAAAAAAAACKlwAAAAAAAIuXAAAAAAAAAAAAAIuXAAAAAAAAjJcAAAAAAAAAAAAAjJcAAAAAAACNlwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFlwAAAAAAAIWXAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " MakeGraph"
					},
					"CgAAAI2XAAAAAAAAjpcAAAAAAAAAAAAAjpcAAAAAAACPlwAAAAAAAAAAAACPlwAAAAAAAJCXAAAAAAAAAAAAAJCXAAAAAAAAkZcAAAAAAAAAAAAAkZcAAAAAAACSlwAAAAAAAAAAAACSlwAAAAAAAJOXAAAAAAAAAAAAAJOXAAAAAAAAlJcAAAAAAAAAAAAAlJcAAAAAAACVlwAAAAAAAAAAAACVlwAAAAAAAJaXAAAAAAAAAAAAAJaXAAAAAAAAl5cAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNlwAAAAAAAI2XAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJeXAAAAAAAAmZcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXlwAAAAAAAJeXAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAAJiXAAAAAAAAmJcAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZlwAAAAAAAJmXAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "pr"
					},
					"AgAAAJiXAAAAAAAAmZcAAAAAAAAAAAAAmZcAAAAAAACalwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYlwAAAAAAAJiXAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					2,
					"left_delete",
					null,
					"AgAAAJmXAAAAAAAAmZcAAAAAAAABAAAAcpiXAAAAAAAAmJcAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACalwAAAAAAAJqXAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAJiXAAAAAAAAmZcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYlwAAAAAAAJiXAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAJiXAAAAAAAAmJcAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZlwAAAAAAAJmXAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "br"
					},
					"AgAAAJiXAAAAAAAAmZcAAAAAAAAAAAAAmZcAAAAAAACalwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYlwAAAAAAAJiXAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAJmXAAAAAAAAmZcAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACalwAAAAAAAJqXAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "oard=o"
					},
					"BgAAAJmXAAAAAAAAmpcAAAAAAAAAAAAAmpcAAAAAAACblwAAAAAAAAAAAACblwAAAAAAAJyXAAAAAAAAAAAAAJyXAAAAAAAAnZcAAAAAAAAAAAAAnZcAAAAAAACelwAAAAAAAAAAAACelwAAAAAAAJ+XAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZlwAAAAAAAJmXAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAJ6XAAAAAAAAnpcAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACflwAAAAAAAJ+XAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "project.boad"
					},
					"DAAAAJ6XAAAAAAAAn5cAAAAAAAAAAAAAn5cAAAAAAACglwAAAAAAAAAAAACglwAAAAAAAKGXAAAAAAAAAAAAAKGXAAAAAAAAopcAAAAAAAAAAAAAopcAAAAAAACjlwAAAAAAAAAAAACjlwAAAAAAAKSXAAAAAAAAAAAAAKSXAAAAAAAApZcAAAAAAAAAAAAApZcAAAAAAACmlwAAAAAAAAAAAACmlwAAAAAAAKeXAAAAAAAAAAAAAKeXAAAAAAAAqJcAAAAAAAAAAAAAqJcAAAAAAACplwAAAAAAAAAAAACplwAAAAAAAKqXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACelwAAAAAAAJ6XAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAKmXAAAAAAAAqZcAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqlwAAAAAAAKqXAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "rd)"
					},
					"AwAAAKmXAAAAAAAAqpcAAAAAAAAAAAAAqpcAAAAAAACrlwAAAAAAAAAAAACrlwAAAAAAAKyXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACplwAAAAAAAKmXAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKyXAAAAAAAArZcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACslwAAAAAAAKyXAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAK2XAAAAAAAAr5cAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtlwAAAAAAAK2XAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAK6XAAAAAAAAr5cAAAAAAAAAAAAAr5cAAAAAAACwlwAAAAAAAAAAAACvlwAAAAAAALCXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACulwAAAAAAAK6XAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALKXAAAAAAAAs5cAAAAAAAAAAAAAr5cAAAAAAACvlwAAAAAAAAEAAAAJ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACylwAAAAAAALKXAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALCXAAAAAAAAsZcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwlwAAAAAAALCXAAAAAAAAAAAAAAAAAAA"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAK+XAAAAAAAAsJcAAAAAAAAAAAAAsJcAAAAAAACxlwAAAAAAAAAAAACxlwAAAAAAALKXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvlwAAAAAAAK+XAAAAAAAAAAAAAAAANEA"
				],
				[
					50,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALKXAAAAAAAAtJcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACylwAAAAAAALKXAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "elt"
					},
					"AwAAALOXAAAAAAAAtJcAAAAAAAAAAAAAtJcAAAAAAAC1lwAAAAAAAAAAAAC1lwAAAAAAALaXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzlwAAAAAAALOXAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALaXAAAAAAAAt5cAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2lwAAAAAAALaXAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					4,
					"left_delete",
					null,
					"BAAAALaXAAAAAAAAtpcAAAAAAAABAAAAILWXAAAAAAAAtZcAAAAAAAABAAAAdLSXAAAAAAAAtJcAAAAAAAABAAAAbLOXAAAAAAAAs5cAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3lwAAAAAAALeXAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAALOXAAAAAAAAtJcAAAAAAAAAAAAAtJcAAAAAAAC1lwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzlwAAAAAAALOXAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALWXAAAAAAAAtpcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1lwAAAAAAALWXAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					3,
					"left_delete",
					null,
					"AwAAALWXAAAAAAAAtZcAAAAAAAABAAAAILSXAAAAAAAAtJcAAAAAAAABAAAAdLOXAAAAAAAAs5cAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2lwAAAAAAALaXAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAALOXAAAAAAAAtJcAAAAAAAAAAAAAtJcAAAAAAAC1lwAAAAAAAAAAAAC1lwAAAAAAALaXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzlwAAAAAAALOXAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALaXAAAAAAAAt5cAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2lwAAAAAAALaXAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALeXAAAAAAAAuZcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3lwAAAAAAALeXAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "name,element"
					},
					"DAAAALiXAAAAAAAAuZcAAAAAAAAAAAAAuZcAAAAAAAC6lwAAAAAAAAAAAAC6lwAAAAAAALuXAAAAAAAAAAAAALuXAAAAAAAAvJcAAAAAAAAAAAAAvJcAAAAAAAC9lwAAAAAAAAAAAAC9lwAAAAAAAL6XAAAAAAAAAAAAAL6XAAAAAAAAv5cAAAAAAAAAAAAAv5cAAAAAAADAlwAAAAAAAAAAAADAlwAAAAAAAMGXAAAAAAAAAAAAAMGXAAAAAAAAwpcAAAAAAAAAAAAAwpcAAAAAAADDlwAAAAAAAAAAAADDlwAAAAAAAMSXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4lwAAAAAAALiXAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAMWXAAAAAAAAxpcAAAAAAAAAAAAAxpcAAAAAAADHlwAAAAAAAAAAAADHlwAAAAAAAMiXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFlwAAAAAAAMWXAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMiXAAAAAAAAyZcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIlwAAAAAAAMiXAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"",
					null,
					"AQAAAMmXAAAAAAAA5JcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJlwAAAAAAAMmXAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"left_delete",
					null,
					"AQAAAOOXAAAAAAAA45cAAAAAAAABAAAAXQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADklwAAAAAAAOSXAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					4,
					"left_delete",
					null,
					"BAAAAMyXAAAAAAAAzJcAAAAAAAABAAAALsuXAAAAAAAAy5cAAAAAAAABAAAALsqXAAAAAAAAypcAAAAAAAABAAAALsmXAAAAAAAAyZcAAAAAAAABAAAAWw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNlwAAAAAAAM2XAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOCXAAAAAAAA4ZcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADglwAAAAAAAOCXAAAAAAAA////////738"
				],
				[
					71,
					1,
					"wrap_block",
					{
						"begin": "{",
						"end": "}"
					},
					"AgAAAOGXAAAAAAAA4pcAAAAAAAAAAAAA5pcAAAAAAADolwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhlwAAAAAAAOGXAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOKXAAAAAAAA45cAAAAAAAAAAAAA45cAAAAAAADklwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADilwAAAAAAAOKXAAAAAAAAAAAAAADgf0A"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAAK6XAAAAAAAAr5cAAAAAAAAAAAAAr5cAAAAAAACwlwAAAAAAAAAAAADllwAAAAAAAOWXAAAAAAAAAQAAAAmwlwAAAAAAALGXAAAAAAAAAAAAALGXAAAAAAAAspcAAAAAAAAAAAAAspcAAAAAAACzlwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACulwAAAAAAAK6XAAAAAAAA////////738"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " g=new"
					},
					"BgAAALOXAAAAAAAAtJcAAAAAAAAAAAAAtJcAAAAAAAC1lwAAAAAAAAAAAAC1lwAAAAAAALaXAAAAAAAAAAAAALaXAAAAAAAAt5cAAAAAAAAAAAAAt5cAAAAAAAC4lwAAAAAAAAAAAAC4lwAAAAAAALmXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzlwAAAAAAALOXAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " Graph"
					},
					"BgAAALmXAAAAAAAAupcAAAAAAAAAAAAAupcAAAAAAAC7lwAAAAAAAAAAAAC7lwAAAAAAALyXAAAAAAAAAAAAALyXAAAAAAAAvZcAAAAAAAAAAAAAvZcAAAAAAAC+lwAAAAAAAAAAAAC+lwAAAAAAAL+XAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5lwAAAAAAALmXAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAL+XAAAAAAAAwZcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/lwAAAAAAAL+XAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMGXAAAAAAAAwpcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBlwAAAAAAAMGXAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAPeXAAAAAAAA+JcAAAAAAAAAAAAA+JcAAAAAAAD5lwAAAAAAAAAAAAD5lwAAAAAAAPqXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3lwAAAAAAAPeXAAAAAAAAAAAAAAAAaUA"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " n=nwe"
					},
					"BgAAAPqXAAAAAAAA+5cAAAAAAAAAAAAA+5cAAAAAAAD8lwAAAAAAAAAAAAD8lwAAAAAAAP2XAAAAAAAAAAAAAP2XAAAAAAAA/pcAAAAAAAAAAAAA/pcAAAAAAAD/lwAAAAAAAAAAAAD/lwAAAAAAAACYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6lwAAAAAAAPqXAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					2,
					"left_delete",
					null,
					"AgAAAP+XAAAAAAAA/5cAAAAAAAABAAAAZf6XAAAAAAAA/pcAAAAAAAABAAAAdw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAmAAAAAAAAACYAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "ew"
					},
					"AgAAAP6XAAAAAAAA/5cAAAAAAAAAAAAA/5cAAAAAAAAAmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+lwAAAAAAAP6XAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": " Node"
					},
					"BQAAAACYAAAAAAAAAZgAAAAAAAAAAAAAAZgAAAAAAAACmAAAAAAAAAAAAAACmAAAAAAAAAOYAAAAAAAAAAAAAAOYAAAAAAAABJgAAAAAAAAAAAAABJgAAAAAAAAFmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAmAAAAAAAAACYAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAWYAAAAAAAAB5gAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFmAAAAAAAAAWYAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAAaYAAAAAAAAB5gAAAAAAAAAAAAAB5gAAAAAAAAImAAAAAAAAAAAAAAImAAAAAAAAAmYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGmAAAAAAAAAaYAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " POint"
					},
					"BgAAAAmYAAAAAAAACpgAAAAAAAAAAAAACpgAAAAAAAALmAAAAAAAAAAAAAALmAAAAAAAAAyYAAAAAAAAAAAAAAyYAAAAAAAADZgAAAAAAAAAAAAADZgAAAAAAAAOmAAAAAAAAAAAAAAOmAAAAAAAAA+YAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJmAAAAAAAAAmYAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA+YAAAAAAAAEZgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPmAAAAAAAAA+YAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAA+YAAAAAAAAD5gAAAAAAAABAAAAKA+YAAAAAAAAD5gAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQmAAAAAAAABCYAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					4,
					"left_delete",
					null,
					"BAAAAA6YAAAAAAAADpgAAAAAAAABAAAAdA2YAAAAAAAADZgAAAAAAAABAAAAbgyYAAAAAAAADJgAAAAAAAABAAAAaQuYAAAAAAAAC5gAAAAAAAABAAAATw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPmAAAAAAAAA+YAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "oint"
					},
					"BAAAAAuYAAAAAAAADJgAAAAAAAAAAAAADJgAAAAAAAANmAAAAAAAAAAAAAANmAAAAAAAAA6YAAAAAAAAAAAAAA6YAAAAAAAAD5gAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALmAAAAAAAAAuYAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA+YAAAAAAAAEZgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPmAAAAAAAAA+YAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "ERl"
					},
					"AwAAABCYAAAAAAAAEZgAAAAAAAAAAAAAEZgAAAAAAAASmAAAAAAAAAAAAAASmAAAAAAAABOYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQmAAAAAAAABCYAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					3,
					"left_delete",
					null,
					"AwAAABKYAAAAAAAAEpgAAAAAAAABAAAAbBGYAAAAAAAAEZgAAAAAAAABAAAAUhCYAAAAAAAAEJgAAAAAAAABAAAARQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATmAAAAAAAABOYAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "elemnt"
					},
					"BgAAABCYAAAAAAAAEZgAAAAAAAAAAAAAEZgAAAAAAAASmAAAAAAAAAAAAAASmAAAAAAAABOYAAAAAAAAAAAAABOYAAAAAAAAFJgAAAAAAAAAAAAAFJgAAAAAAAAVmAAAAAAAAAAAAAAVmAAAAAAAABaYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQmAAAAAAAABCYAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					2,
					"left_delete",
					null,
					"AgAAABWYAAAAAAAAFZgAAAAAAAABAAAAdBSYAAAAAAAAFJgAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWmAAAAAAAABaYAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "ent"
					},
					"AwAAABSYAAAAAAAAFZgAAAAAAAAAAAAAFZgAAAAAAAAWmAAAAAAAAAAAAAAWmAAAAAAAABeYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUmAAAAAAAABSYAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABmYAAAAAAAAGpgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZmAAAAAAAABmYAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABqYAAAAAAAAG5gAAAAAAAAAAAAAG5gAAAAAAAAcmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAamAAAAAAAABqYAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "n.name=name;"
					},
					"DAAAAByYAAAAAAAAHZgAAAAAAAAAAAAAHZgAAAAAAAAemAAAAAAAAAAAAAAemAAAAAAAAB+YAAAAAAAAAAAAAB+YAAAAAAAAIJgAAAAAAAAAAAAAIJgAAAAAAAAhmAAAAAAAAAAAAAAhmAAAAAAAACKYAAAAAAAAAAAAACKYAAAAAAAAI5gAAAAAAAAAAAAAI5gAAAAAAAAkmAAAAAAAAAAAAAAkmAAAAAAAACWYAAAAAAAAAAAAACWYAAAAAAAAJpgAAAAAAAAAAAAAJpgAAAAAAAAnmAAAAAAAAAAAAAAnmAAAAAAAACiYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcmAAAAAAAAByYAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "\n\n\ng.addNo"
					},
					"CgAAACiYAAAAAAAAKZgAAAAAAAAAAAAAKZgAAAAAAAAqmAAAAAAAAAAAAAAqmAAAAAAAACuYAAAAAAAAAAAAACuYAAAAAAAALJgAAAAAAAAAAAAALJgAAAAAAAAtmAAAAAAAAAAAAAAtmAAAAAAAAC6YAAAAAAAAAAAAAC6YAAAAAAAAL5gAAAAAAAAAAAAAL5gAAAAAAAAwmAAAAAAAAAAAAAAwmAAAAAAAADGYAAAAAAAAAAAAADGYAAAAAAAAMpgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAomAAAAAAAACiYAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "de"
					},
					"AgAAADKYAAAAAAAAM5gAAAAAAAAAAAAAM5gAAAAAAAA0mAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAymAAAAAAAADKYAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADSYAAAAAAAANpgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0mAAAAAAAADSYAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAADWYAAAAAAAANpgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1mAAAAAAAADWYAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": ":;"
					},
					"AgAAADeYAAAAAAAAOJgAAAAAAAAAAAAAOJgAAAAAAAA5mAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3mAAAAAAAADeYAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					2,
					"left_delete",
					null,
					"AgAAADiYAAAAAAAAOJgAAAAAAAABAAAAOzeYAAAAAAAAN5gAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5mAAAAAAAADmYAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADeYAAAAAAAAOJgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3mAAAAAAAADeYAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAADuYAAAAAAAAPJgAAAAAAAAAAAAAPJgAAAAAAAA9mAAAAAAAAAAAAAA9mAAAAAAAAD6YAAAAAAAAAAAAAD6YAAAAAAAAP5gAAAAAAAAAAAAAP5gAAAAAAABAmAAAAAAAAAAAAABAmAAAAAAAAEGYAAAAAAAAAAAAAEGYAAAAAAAAQpgAAAAAAAAAAAAAQpgAAAAAAABDmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7mAAAAAAAADuYAAAAAAAAAAAAAABAYEA"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": " g;"
					},
					"AwAAAEOYAAAAAAAARJgAAAAAAAAAAAAARJgAAAAAAABFmAAAAAAAAAAAAABFmAAAAAAAAEaYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDmAAAAAAAAEOYAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": ",MakeGraph"
					},
					"CgAAAKYqAAAAAAAApyoAAAAAAAAAAAAApyoAAAAAAACoKgAAAAAAAAAAAACoKgAAAAAAAKkqAAAAAAAAAAAAAKkqAAAAAAAAqioAAAAAAAAAAAAAqioAAAAAAACrKgAAAAAAAAAAAACrKgAAAAAAAKwqAAAAAAAAAAAAAKwqAAAAAAAArSoAAAAAAAAAAAAArSoAAAAAAACuKgAAAAAAAAAAAACuKgAAAAAAAK8qAAAAAAAAAAAAAK8qAAAAAAAAsCoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmKgAAAAAAAKYqAAAAAAAA////////738"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAMyXAAAAAAAAzZcAAAAAAAAAAAAAzZcAAAAAAADOlwAAAAAAAAAAAADOlwAAAAAAAM+XAAAAAAAAAAAAAM+XAAAAAAAA0JcAAAAAAAAAAAAA0JcAAAAAAADRlwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMlwAAAAAAAMyXAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " nodes="
					},
					"BwAAANGXAAAAAAAA0pcAAAAAAAAAAAAA0pcAAAAAAADTlwAAAAAAAAAAAADTlwAAAAAAANSXAAAAAAAAAAAAANSXAAAAAAAA1ZcAAAAAAAAAAAAA1ZcAAAAAAADWlwAAAAAAAAAAAADWlwAAAAAAANeXAAAAAAAAAAAAANeXAAAAAAAA2JcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRlwAAAAAAANGXAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANiXAAAAAAAA2pcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYlwAAAAAAANiXAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": ";:"
					},
					"AgAAANqXAAAAAAAA25cAAAAAAAAAAAAA25cAAAAAAADclwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADalwAAAAAAANqXAAAAAAAAAAAAAAAA8L8"
				],
				[
					185,
					1,
					"left_delete",
					null,
					"AQAAANuXAAAAAAAA25cAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADclwAAAAAAANyXAAAAAAAAAAAAAAAA8L8"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "nodes"
					},
					"BQAAADSYAAAAAAAANZgAAAAAAAAAAAAANZgAAAAAAAA2mAAAAAAAAAAAAAA2mAAAAAAAADeYAAAAAAAAAAAAADeYAAAAAAAAOJgAAAAAAAAAAAAAOJgAAAAAAAA5mAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0mAAAAAAAADSYAAAAAAAAAAAAAADAYkA"
				],
				[
					189,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAADmYAAAAAAAAO5gAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5mAAAAAAAADmYAAAAAAAAAAAAAAAA8L8"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAADqYAAAAAAAAO5gAAAAAAAAAAAAAO5gAAAAAAAA8mAAAAAAAAAAAAAA8mAAAAAAAAD2YAAAAAAAAAAAAAD2YAAAAAAAAPpgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6mAAAAAAAADqYAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "=n;"
					},
					"AwAAAD+YAAAAAAAAQJgAAAAAAAAAAAAAQJgAAAAAAABBmAAAAAAAAAAAAABBmAAAAAAAAEKYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/mAAAAAAAAD+YAAAAAAAAAAAAAAAA8L8"
				],
				[
					195,
					1,
					"cut",
					null,
					"AQAAADSYAAAAAAAANJgAAAAAAAANAAAAbm9kZXNbbmFtZV09bg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBmAAAAAAAADSYAAAAAAAAAAAAAAAAAAA"
				],
				[
					196,
					1,
					"paste",
					null,
					"AQAAADSYAAAAAAAAQZgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0mAAAAAAAADSYAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"paste",
					null,
					"AQAAABaYAAAAAAAAI5gAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWmAAAAAAAABaYAAAAAAAAAAAAAAAATkA"
				],
				[
					201,
					1,
					"left_delete",
					null,
					"AQAAACKYAAAAAAAAIpgAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjmAAAAAAAACOYAAAAAAAAAAAAAAAA8L8"
				],
				[
					206,
					1,
					"cut",
					null,
					"AQAAAECYAAAAAAAAQJgAAAAAAAAcAAAAbm9kZXNbbmFtZV09bjsKbi5uYW1lPW5hbWU7Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAmAAAAAAAAFyYAAAAAAAAAAAAAAAAAAA"
				],
				[
					207,
					1,
					"left_delete",
					null,
					"AQAAAD+YAAAAAAAAP5gAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAmAAAAAAAAECYAAAAAAAAAAAAAAAA8L8"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFGYAAAAAAAAUpgAAAAAAAAAAAAAUpgAAAAAAABTmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRmAAAAAAAAFGYAAAAAAAAAAAAAABgfUA"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANyXAAAAAAAA3ZcAAAAAAAAAAAAAU5gAAAAAAABTmAAAAAAAAAEAAAAJ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADclwAAAAAAANyXAAAAAAAAAAAAAAAAAAA"
				],
				[
					221,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdlwAAAAAAAN2XAAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHCYAAAAAAAAcZgAAAAAAAAAAAAAcZgAAAAAAABzmAAAAAAAAAAAAABzmAAAAAAAAHSYAAAAAAAAAAAAAHSYAAAAAAAAdpgAAAAAAAAAAAAAcZgAAAAAAABxmAAAAAAAAAIAAAAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwmAAAAAAAAHCYAAAAAAAAAAAAAACAUUA"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAHSYAAAAAAAAdZgAAAAAAAAAAAAAdZgAAAAAAAB2mAAAAAAAAAAAAAB2mAAAAAAAAHeYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0mAAAAAAAAHSYAAAAAAAAAAAAAAAA8L8"
				],
				[
					233,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHeYAAAAAAAAeZgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3mAAAAAAAAHeYAAAAAAAAAAAAAAAA8L8"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAHiYAAAAAAAAeZgAAAAAAAAAAAAAeZgAAAAAAAB6mAAAAAAAAAAAAAB6mAAAAAAAAHuYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4mAAAAAAAAHiYAAAAAAAAAAAAAAAA8L8"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHuYAAAAAAAAfJgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7mAAAAAAAAHuYAAAAAAAAAAAAAAAA8L8"
				],
				[
					236,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAHyYAAAAAAAAfpgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8mAAAAAAAAHyYAAAAAAAAAAAAAAAA8L8"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": "name,signal"
					},
					"CwAAAH2YAAAAAAAAfpgAAAAAAAAAAAAAfpgAAAAAAAB/mAAAAAAAAAAAAAB/mAAAAAAAAICYAAAAAAAAAAAAAICYAAAAAAAAgZgAAAAAAAAAAAAAgZgAAAAAAACCmAAAAAAAAAAAAACCmAAAAAAAAIOYAAAAAAAAAAAAAIOYAAAAAAAAhJgAAAAAAAAAAAAAhJgAAAAAAACFmAAAAAAAAAAAAACFmAAAAAAAAIaYAAAAAAAAAAAAAIaYAAAAAAAAh5gAAAAAAAAAAAAAh5gAAAAAAACImAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9mAAAAAAAAH2YAAAAAAAAAAAAAAAA8L8"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAImYAAAAAAAAipgAAAAAAAAAAAAAipgAAAAAAACLmAAAAAAAAAAAAACLmAAAAAAAAIyYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJmAAAAAAAAImYAAAAAAAAAAAAAAAA8L8"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": " project.board."
					},
					"DwAAAIyYAAAAAAAAjZgAAAAAAAAAAAAAjZgAAAAAAACOmAAAAAAAAAAAAACOmAAAAAAAAI+YAAAAAAAAAAAAAI+YAAAAAAAAkJgAAAAAAAAAAAAAkJgAAAAAAACRmAAAAAAAAAAAAACRmAAAAAAAAJKYAAAAAAAAAAAAAJKYAAAAAAAAk5gAAAAAAAAAAAAAk5gAAAAAAACUmAAAAAAAAAAAAACUmAAAAAAAAJWYAAAAAAAAAAAAAJWYAAAAAAAAlpgAAAAAAAAAAAAAlpgAAAAAAACXmAAAAAAAAAAAAACXmAAAAAAAAJiYAAAAAAAAAAAAAJiYAAAAAAAAmZgAAAAAAAAAAAAAmZgAAAAAAACamAAAAAAAAAAAAACamAAAAAAAAJuYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMmAAAAAAAAIyYAAAAAAAAAAAAAAAA8L8"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "signal"
					},
					"BgAAAJuYAAAAAAAAnJgAAAAAAAAAAAAAnJgAAAAAAACdmAAAAAAAAAAAAACdmAAAAAAAAJ6YAAAAAAAAAAAAAJ6YAAAAAAAAn5gAAAAAAAAAAAAAn5gAAAAAAACgmAAAAAAAAAAAAACgmAAAAAAAAKGYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbmAAAAAAAAJuYAAAAAAAAAAAAAAAA8L8"
				],
				[
					243,
					1,
					"left_delete",
					null,
					"AQAAAKGYAAAAAAAAoZgAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACimAAAAAAAAKKYAAAAAAAAAAAAAAAA8L8"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "s)"
					},
					"AgAAAKGYAAAAAAAAopgAAAAAAAAAAAAAopgAAAAAAACjmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChmAAAAAAAAKGYAAAAAAAAAAAAAAAA8L8"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKOYAAAAAAAApJgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjmAAAAAAAAKOYAAAAAAAAAAAAAAAA8L8"
				],
				[
					246,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKSYAAAAAAAAppgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkmAAAAAAAAKSYAAAAAAAAAAAAAAAA8L8"
				],
				[
					247,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAKWYAAAAAAAAppgAAAAAAAAAAAAAppgAAAAAAAComAAAAAAAAAAAAAComAAAAAAAAKmYAAAAAAAAAAAAAKmYAAAAAAAAq5gAAAAAAAAAAAAAppgAAAAAAACmmAAAAAAAAAIAAAAgIKaYAAAAAAAAqZgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClmAAAAAAAAKWYAAAAAAAAAAAAAAAA8L8"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKmYAAAAAAAAqpgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpmAAAAAAAAKmYAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/geom/graph.js",
			"settings":
			{
				"buffer_size": 11223,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					44,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKwpAAAAAAAArSkAAAAAAAAAAAAArSkAAAAAAACuKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsKQAAAAAAAKwpAAAAAAAAAAAAAAAAAAA"
				],
				[
					46,
					2,
					"left_delete",
					null,
					"AgAAAKwpAAAAAAAArCkAAAAAAAABAAAACqspAAAAAAAAqykAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtKQAAAAAAAK0pAAAAAAAAAAAAAAAAAAA"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "\nObject"
					},
					"CQAAAKspAAAAAAAArCkAAAAAAAAAAAAArCkAAAAAAACuKQAAAAAAAAAAAACuKQAAAAAAALApAAAAAAAAAAAAALApAAAAAAAAsSkAAAAAAAAAAAAAsSkAAAAAAACyKQAAAAAAAAAAAACyKQAAAAAAALMpAAAAAAAAAAAAALMpAAAAAAAAtCkAAAAAAAAAAAAAtCkAAAAAAAC1KQAAAAAAAAAAAAC1KQAAAAAAALYpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrKQAAAAAAAKspAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					9,
					"left_delete",
					null,
					"CQAAALUpAAAAAAAAtSkAAAAAAAABAAAAdLQpAAAAAAAAtCkAAAAAAAABAAAAY7MpAAAAAAAAsykAAAAAAAABAAAAZbIpAAAAAAAAsikAAAAAAAABAAAAarEpAAAAAAAAsSkAAAAAAAABAAAAYrApAAAAAAAAsCkAAAAAAAABAAAAT64pAAAAAAAArikAAAAAAAACAAAAICCsKQAAAAAAAKwpAAAAAAAAAgAAACAgqykAAAAAAACrKQAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2KQAAAAAAALYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\nNode.t"
					},
					"BwAAABAqAAAAAAAAESoAAAAAAAAAAAAAESoAAAAAAAASKgAAAAAAAAAAAAASKgAAAAAAABMqAAAAAAAAAAAAABMqAAAAAAAAFCoAAAAAAAAAAAAAFCoAAAAAAAAVKgAAAAAAAAAAAAAVKgAAAAAAABYqAAAAAAAAAAAAABYqAAAAAAAAFyoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQKgAAAAAAABAqAAAAAAAAAAAAAADgdUA"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAABYqAAAAAAAAFioAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXKgAAAAAAABcqAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "protyo"
					},
					"BgAAABYqAAAAAAAAFyoAAAAAAAAAAAAAFyoAAAAAAAAYKgAAAAAAAAAAAAAYKgAAAAAAABkqAAAAAAAAAAAAABkqAAAAAAAAGioAAAAAAAAAAAAAGioAAAAAAAAbKgAAAAAAAAAAAAAbKgAAAAAAABwqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWKgAAAAAAABYqAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					2,
					"left_delete",
					null,
					"AgAAABsqAAAAAAAAGyoAAAAAAAABAAAAbxoqAAAAAAAAGioAAAAAAAABAAAAeQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcKgAAAAAAABwqAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "otype.point=nl"
					},
					"DgAAABoqAAAAAAAAGyoAAAAAAAAAAAAAGyoAAAAAAAAcKgAAAAAAAAAAAAAcKgAAAAAAAB0qAAAAAAAAAAAAAB0qAAAAAAAAHioAAAAAAAAAAAAAHioAAAAAAAAfKgAAAAAAAAAAAAAfKgAAAAAAACAqAAAAAAAAAAAAACAqAAAAAAAAISoAAAAAAAAAAAAAISoAAAAAAAAiKgAAAAAAAAAAAAAiKgAAAAAAACMqAAAAAAAAAAAAACMqAAAAAAAAJCoAAAAAAAAAAAAAJCoAAAAAAAAlKgAAAAAAAAAAAAAlKgAAAAAAACYqAAAAAAAAAAAAACYqAAAAAAAAJyoAAAAAAAAAAAAAJyoAAAAAAAAoKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaKgAAAAAAABoqAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAACgqAAAAAAAAKSoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoKgAAAAAAACgqAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					2,
					"left_delete",
					null,
					"AgAAACgqAAAAAAAAKCoAAAAAAAABAAAAbCcqAAAAAAAAJyoAAAAAAAABAAAAbA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApKgAAAAAAACkqAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "ull;"
					},
					"BAAAACcqAAAAAAAAKCoAAAAAAAAAAAAAKCoAAAAAAAApKgAAAAAAAAAAAAApKgAAAAAAACoqAAAAAAAAAAAAACoqAAAAAAAAKyoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnKgAAAAAAACcqAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
=======
								1910,
								1915
							]
						],
						"symlist":
						[
							"function render(doc, filename)",
							"function main(...args)",
							" value =>",
							" f =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgAAAAAAAAAANQAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Projects/plot-cv/eagle2svg.js",
						"symkeys":
						[
							[
								526,
								556
							],
							[
								1508,
								1530
							],
							[
								1731,
								1740
							],
							[
								1910,
								1915
							]
						],
						"symlist":
						[
							"function render(doc, filename)",
							"function main(...args)",
							" value =>",
							" f =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA1AAAAICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKICBtYWluKC4uLmFyZ3MpCnZhbHVlID0+CmYgPT4AAAAAAAAAADkAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1AAAAAAAAADUAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "eagle2svg.js",
			"settings":
			{
				"buffer_size": 2302,
				"line_ending": "Unix"
			}
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 38946,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1337,
					1,
					"insert",
					{
						"characters": " width;"
					},
					"BwAAAHgsAAAAAAAAeSwAAAAAAAAAAAAAeSwAAAAAAAB6LAAAAAAAAAAAAAB6LAAAAAAAAHssAAAAAAAAAAAAAHssAAAAAAAAfCwAAAAAAAAAAAAAfCwAAAAAAAB9LAAAAAAAAAAAAAB9LAAAAAAAAH4sAAAAAAAAAAAAAH4sAAAAAAAAfywAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgsAAAAAAAAeCwAAAAAAAAAAAAAAADwvw"
				],
				[
					1338,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAH8sAAAAAAAAgCwAAAAAAAAAAAAAgCwAAAAAAACGLAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8sAAAAAAAAfywAAAAAAAAAAAAAAADwvw"
				],
				[
					1345,
					1,
					"cut",
					null,
					"AQAAAG8sAAAAAAAAbywAAAAAAAARAAAAICAgICAgbGV0IHdpZHRoOwo",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8sAAAAAAAAgCwAAAAAAAAAAAAAAAAAAA"
				],
				[
					1349,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJIsAAAAAAAAkywAAAAAAAAAAAAAbywAAAAAAABvLAAAAAAAAAYAAAAgICAgICA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIsAAAAAAAAkiwAAAAAAAAAAAAAAADwvw"
				],
				[
					1350,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAI0sAAAAAAAAjywAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0sAAAAAAAAjSwAAAAAAAAAAAAAAADwvw"
				],
				[
					1351,
					1,
					"right_delete",
					null,
					"AQAAAI4sAAAAAAAAjiwAAAAAAAABAAAAfQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4sAAAAAAAAjiwAAAAAAAAAAAAAAADwvw"
				],
				[
					1356,
					1,
					"left_delete",
					null,
					"AQAAAI0sAAAAAAAAjSwAAAAAAAABAAAAew",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4sAAAAAAAAjiwAAAAAAAD////////vfw"
				],
				[
					1366,
					1,
					"insert",
					{
						"characters": "width"
					},
					"BgAAAN0tAAAAAAAA3i0AAAAAAAAAAAAA3i0AAAAAAADeLQAAAAAAAAQAAABzdGVw3i0AAAAAAADfLQAAAAAAAAAAAADfLQAAAAAAAOAtAAAAAAAAAAAAAOAtAAAAAAAA4S0AAAAAAAAAAAAA4S0AAAAAAADiLQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0tAAAAAAAA4S0AAAAAAAAAAAAAAADwvw"
				],
				[
					1404,
					1,
					"revert",
					null,
					"",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0tAAAAAAAA4i0AAAAAAAAAAAAAAADwvw"
				],
				[
					1407,
					1,
					"insert",
					{
						"characters": " /"
					},
					"AgAAAOItAAAAAAAA4y0AAAAAAAAAAAAA4y0AAAAAAADkLQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOItAAAAAAAA4i0AAAAAAAAAAAAAAADwvw"
				],
				[
					1408,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAOQtAAAAAAAA5S0AAAAAAAAAAAAA5S0AAAAAAADmLQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQtAAAAAAAA5C0AAAAAAAAAAAAAAADwvw"
				],
				[
					1460,
					1,
					"insert",
					{
						"characters": "rect"
					},
					"BAAAAP8sAAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAABLQAAAAAAAAAAAAABLQAAAAAAAAItAAAAAAAAAAAAAAItAAAAAAAAAy0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8sAAAAAAAA/ywAAAAAAAAAAAAAAADwvw"
				],
				[
					1461,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAMtAAAAAAAABC0AAAAAAAAAAAAABC0AAAAAAAAFLQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMtAAAAAAAAAy0AAAAAAAAAAAAAAADwvw"
				],
				[
					1462,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUtAAAAAAAABi0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUtAAAAAAAABS0AAAAAAAAAAAAAAADwvw"
				],
				[
					1487,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AgAAAN0tAAAAAAAA3i0AAAAAAAAAAAAA3i0AAAAAAADeLQAAAAAAAAEAAAAy",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0tAAAAAAAA3i0AAAAAAAAAAAAAAADwvw"
				],
				[
					1490,
					1,
					"cut",
					null,
					"AQAAANMtAAAAAAAA0y0AAAAAAAALAAAAICsgc3RlcCAvIDQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4tAAAAAAAA0y0AAAAAAAAAAAAAAADwvw"
				],
				[
					1491,
					1,
					"paste",
					null,
					"AQAAANMtAAAAAAAA3i0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMtAAAAAAAA0y0AAAAAAAAAAAAAAADwvw"
				],
				[
					1496,
					1,
					"paste",
					null,
					"AQAAAMctAAAAAAAA0i0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMctAAAAAAAAxy0AAAAAAAAAAAAAAADwvw"
				],
				[
					1499,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AgAAAMgtAAAAAAAAyS0AAAAAAAAAAAAAyS0AAAAAAADJLQAAAAAAAAEAAAAr",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMktAAAAAAAAyC0AAAAAAAAAAAAAAADwvw"
				],
				[
					1523,
					2,
					"left_delete",
					null,
					"AgAAAFgtAAAAAAAAWC0AAAAAAAABAAAAKlctAAAAAAAAVy0AAAAAAAABAAAALw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFktAAAAAAAAWS0AAAAAAAAAAAAAAADwvw"
				],
				[
					1525,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAFUtAAAAAAAAVi0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUtAAAAAAAAVS0AAAAAAAAAAAAAAADwvw"
				],
				[
					1528,
					2,
					"left_delete",
					null,
					"AgAAAFwtAAAAAAAAXC0AAAAAAAABAAAAL1stAAAAAAAAWy0AAAAAAAABAAAAKg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0tAAAAAAAAXS0AAAAAAAAAAAAAAADwvw"
				],
				[
					1529,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFstAAAAAAAAXS0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFstAAAAAAAAWy0AAAAAAAAAAAAAAADwvw"
				],
				[
					1531,
					2,
					"left_delete",
					null,
					"AgAAAFwtAAAAAAAAXC0AAAAAAAABAAAAKVstAAAAAAAAWy0AAAAAAAABAAAAKA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0tAAAAAAAAXS0AAAAAAAAAAAAAAADwvw"
				],
				[
					1532,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFstAAAAAAAAXC0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFstAAAAAAAAWy0AAAAAAAAAAAAAAADwvw"
				],
				[
					1548,
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
					1,
					"insert",
					{
						"characters": "\n"
					},
<<<<<<< HEAD
					"AQAAABAqAAAAAAAAESoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQKgAAAAAAABAqAAAAAAAAAAAAAABAcEA"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "\nOje"
					},
					"BQAAAMMpAAAAAAAAxCkAAAAAAAAAAAAAxCkAAAAAAADIKQAAAAAAAAAAAADIKQAAAAAAAMkpAAAAAAAAAAAAAMkpAAAAAAAAyikAAAAAAAAAAAAAyikAAAAAAADLKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDKQAAAAAAAMMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					2,
					"left_delete",
					null,
					"AgAAAMopAAAAAAAAyikAAAAAAAABAAAAZckpAAAAAAAAySkAAAAAAAABAAAAag",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLKQAAAAAAAMspAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "bejct."
					},
					"BgAAAMkpAAAAAAAAyikAAAAAAAAAAAAAyikAAAAAAADLKQAAAAAAAAAAAADLKQAAAAAAAMwpAAAAAAAAAAAAAMwpAAAAAAAAzSkAAAAAAAAAAAAAzSkAAAAAAADOKQAAAAAAAAAAAADOKQAAAAAAAM8pAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJKQAAAAAAAMkpAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					4,
					"left_delete",
					null,
					"BAAAAM4pAAAAAAAAzikAAAAAAAABAAAALs0pAAAAAAAAzSkAAAAAAAABAAAAdMwpAAAAAAAAzCkAAAAAAAABAAAAY8spAAAAAAAAyykAAAAAAAABAAAAag",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPKQAAAAAAAM8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "jec"
					},
					"AwAAAMspAAAAAAAAzCkAAAAAAAAAAAAAzCkAAAAAAADNKQAAAAAAAAAAAADNKQAAAAAAAM4pAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLKQAAAAAAAMspAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					4,
					"left_delete",
					null,
					"BAAAAM0pAAAAAAAAzSkAAAAAAAABAAAAY8wpAAAAAAAAzCkAAAAAAAABAAAAZcspAAAAAAAAyykAAAAAAAABAAAAasopAAAAAAAAyikAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOKQAAAAAAAM4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "ject.def"
					},
					"CAAAAMopAAAAAAAAyykAAAAAAAAAAAAAyykAAAAAAADMKQAAAAAAAAAAAADMKQAAAAAAAM0pAAAAAAAAAAAAAM0pAAAAAAAAzikAAAAAAAAAAAAAzikAAAAAAADPKQAAAAAAAAAAAADPKQAAAAAAANApAAAAAAAAAAAAANApAAAAAAAA0SkAAAAAAAAAAAAA0SkAAAAAAADSKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKKQAAAAAAAMopAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert_completion",
					{
						"completion": "defineProperty($1)",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "defineProperty(...)"
					},
					"AgAAAM8pAAAAAAAAzykAAAAAAAADAAAAZGVmzykAAAAAAADfKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSKQAAAAAAANIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAN0pAAAAAAAA3SkAAAAAAAABAAAAKN0pAAAAAAAA3SkAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeKQAAAAAAAN4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"left_delete",
					null,
					"AQAAANwpAAAAAAAA3CkAAAAAAAABAAAAeQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdKQAAAAAAAN0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "ei"
					},
					"AgAAANwpAAAAAAAA3SkAAAAAAAAAAAAA3SkAAAAAAADeKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcKQAAAAAAANwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					2,
					"left_delete",
					null,
					"AgAAAN0pAAAAAAAA3SkAAAAAAAABAAAAadwpAAAAAAAA3CkAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeKQAAAAAAAN4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "ies"
					},
					"AwAAANwpAAAAAAAA3SkAAAAAAAAAAAAA3SkAAAAAAADeKQAAAAAAAAAAAADeKQAAAAAAAN8pAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcKQAAAAAAANwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN8pAAAAAAAA4SkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfKQAAAAAAAN8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "this,"
					},
					"BQAAAOApAAAAAAAA4SkAAAAAAAAAAAAA4SkAAAAAAADiKQAAAAAAAAAAAADiKQAAAAAAAOMpAAAAAAAAAAAAAOMpAAAAAAAA5CkAAAAAAAAAAAAA5CkAAAAAAADlKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgKQAAAAAAAOApAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOUpAAAAAAAA5ikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlKQAAAAAAAOUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOYpAAAAAAAA6CkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmKQAAAAAAAOYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " point:"
					},
					"BwAAAOcpAAAAAAAA6CkAAAAAAAAAAAAA6CkAAAAAAADpKQAAAAAAAAAAAADpKQAAAAAAAOopAAAAAAAAAAAAAOopAAAAAAAA6ykAAAAAAAAAAAAA6ykAAAAAAADsKQAAAAAAAAAAAADsKQAAAAAAAO0pAAAAAAAAAAAAAO0pAAAAAAAA7ikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnKQAAAAAAAOcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					2,
					"left_delete",
					null,
					"AgAAAO0pAAAAAAAA7SkAAAAAAAABAAAAOuwpAAAAAAAA7CkAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuKQAAAAAAAO4pAAAAAAAAAAAAAAAA8L8"
=======
					"AgAAAF0tAAAAAAAAXi0AAAAAAAAAAAAAXi0AAAAAAABkLQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0tAAAAAAAAXS0AAAAAAAAAAAAAAADwvw"
				],
				[
					1551,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAGQtAAAAAAAAZS0AAAAAAAAAAAAAZS0AAAAAAABmLQAAAAAAAAAAAABmLQAAAAAAAGctAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQtAAAAAAAAZC0AAAAAAAAAAAAAAADwvw"
				],
				[
					1552,
					1,
					"insert",
					{
						"characters": " slope="
					},
					"BwAAAGctAAAAAAAAaC0AAAAAAAAAAAAAaC0AAAAAAABpLQAAAAAAAAAAAABpLQAAAAAAAGotAAAAAAAAAAAAAGotAAAAAAAAay0AAAAAAAAAAAAAay0AAAAAAABsLQAAAAAAAAAAAABsLQAAAAAAAG0tAAAAAAAAAAAAAG0tAAAAAAAAbi0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGctAAAAAAAAZy0AAAAAAAAAAAAAAADwvw"
				],
				[
					1553,
					1,
					"paste",
					null,
					"AQAAAG4tAAAAAAAAdi0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4tAAAAAAAAbi0AAAAAAAAAAAAAAADwvw"
				],
				[
					1554,
					1,
					"left_delete",
					null,
					"AQAAAHUtAAAAAAAAdS0AAAAAAAABAAAANA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYtAAAAAAAAdi0AAAAAAAAAAAAAAADwvw"
				],
				[
					1555,
					1,
					"insert",
					{
						"characters": "2;"
					},
					"AgAAAHUtAAAAAAAAdi0AAAAAAAAAAAAAdi0AAAAAAAB3LQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUtAAAAAAAAdS0AAAAAAAAAAAAAAADwvw"
				],
				[
					1565,
					1,
					"paste",
					null,
					"AgAAAOItAAAAAAAA5y0AAAAAAAAAAAAA5y0AAAAAAADnLQAAAAAAAAQAAABzdGVw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOItAAAAAAAA5i0AAAAAAAAAAAAAAADwvw"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "t"
					},
<<<<<<< HEAD
					"AQAAAOwpAAAAAAAA7SkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsKQAAAAAAAOwpAAAAAAAAAAAAAAAA8L8"
=======
					"AgAAAOotAAAAAAAA6y0AAAAAAAAAAAAA6y0AAAAAAADrLQAAAAAAAAEAAAA0",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOotAAAAAAAA6y0AAAAAAAAAAAAAAADwvw"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO0pAAAAAAAA7ikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtKQAAAAAAAO0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"left_delete",
					null,
<<<<<<< HEAD
					"AQAAAO0pAAAAAAAA7SkAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuKQAAAAAAAO4pAAAAAAAAAAAAAAAA8L8"
=======
					"AgAAAPotAAAAAAAA/y0AAAAAAAAAAAAA/y0AAAAAAAD/LQAAAAAAAAQAAABzdGVw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPotAAAAAAAA/i0AAAAAAAAAAAAAAADwvw"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				],
				[
					91,
					1,
					"insert",
					{
						"characters": ":"
					},
<<<<<<< HEAD
					"AQAAAO0pAAAAAAAA7ikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtKQAAAAAAAO0pAAAAAAAAAAAAAAAA8L8"
=======
					"AgAAAAIuAAAAAAAAAy4AAAAAAAAAAAAAAy4AAAAAAAADLgAAAAAAAAEAAAA0",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIuAAAAAAAAAy4AAAAAAAAAAAAAAADwvw"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " "
					},
<<<<<<< HEAD
					"AQAAAO4pAAAAAAAA7ykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuKQAAAAAAAO4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAO8pAAAAAAAA8SkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvKQAAAAAAAO8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": " value:"
					},
					"BwAAAPApAAAAAAAA8SkAAAAAAAAAAAAA8SkAAAAAAADyKQAAAAAAAAAAAADyKQAAAAAAAPMpAAAAAAAAAAAAAPMpAAAAAAAA9CkAAAAAAAAAAAAA9CkAAAAAAAD1KQAAAAAAAAAAAAD1KQAAAAAAAPYpAAAAAAAAAAAAAPYpAAAAAAAA9ykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwKQAAAAAAAPApAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": " poiont"
					},
					"BwAAAPcpAAAAAAAA+CkAAAAAAAAAAAAA+CkAAAAAAAD5KQAAAAAAAAAAAAD5KQAAAAAAAPopAAAAAAAAAAAAAPopAAAAAAAA+ykAAAAAAAAAAAAA+ykAAAAAAAD8KQAAAAAAAAAAAAD8KQAAAAAAAP0pAAAAAAAAAAAAAP0pAAAAAAAA/ikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3KQAAAAAAAPcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					3,
					"left_delete",
					null,
					"AwAAAP0pAAAAAAAA/SkAAAAAAAABAAAAdPwpAAAAAAAA/CkAAAAAAAABAAAAbvspAAAAAAAA+ykAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+KQAAAAAAAP4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "nt,"
					},
					"AwAAAPspAAAAAAAA/CkAAAAAAAAAAAAA/CkAAAAAAAD9KQAAAAAAAAAAAAD9KQAAAAAAAP4pAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7KQAAAAAAAPspAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " enumerable:"
					},
					"DAAAAP4pAAAAAAAA/ykAAAAAAAAAAAAA/ykAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAEqAAAAAAAAAAAAAAEqAAAAAAAAAioAAAAAAAAAAAAAAioAAAAAAAADKgAAAAAAAAAAAAADKgAAAAAAAAQqAAAAAAAAAAAAAAQqAAAAAAAABSoAAAAAAAAAAAAABSoAAAAAAAAGKgAAAAAAAAAAAAAGKgAAAAAAAAcqAAAAAAAAAAAAAAcqAAAAAAAACCoAAAAAAAAAAAAACCoAAAAAAAAJKgAAAAAAAAAAAAAJKgAAAAAAAAoqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+KQAAAAAAAP4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " fale"
					},
					"BQAAAAoqAAAAAAAACyoAAAAAAAAAAAAACyoAAAAAAAAMKgAAAAAAAAAAAAAMKgAAAAAAAA0qAAAAAAAAAAAAAA0qAAAAAAAADioAAAAAAAAAAAAADioAAAAAAAAPKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKKgAAAAAAAAoqAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"left_delete",
					null,
					"AQAAAA4qAAAAAAAADioAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPKgAAAAAAAA8qAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "se"
					},
					"AgAAAA4qAAAAAAAADyoAAAAAAAAAAAAADyoAAAAAAAAQKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOKgAAAAAAAA4qAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABEqAAAAAAAAEioAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARKgAAAAAAABEqAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABQqAAAAAAAAFSoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUKgAAAAAAABQqAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAALApAAAAAAAAsSkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwKQAAAAAAALApAAAAAAAAAAAAAAAAREA"
				],
				[
					109,
					1,
					"left_delete",
					null,
					"AQAAALApAAAAAAAAsCkAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxKQAAAAAAALEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALApAAAAAAAAsSkAAAAAAAAAAAAAsSkAAAAAAACyKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwKQAAAAAAALApAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "/("
					},
					"AgAAAMopAAAAAAAAyykAAAAAAAAAAAAAyykAAAAAAADMKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKKQAAAAAAAMopAAAAAAAAAAAAAAAAREA"
				],
				[
					126,
					1,
					"left_delete",
					null,
					"AQAAAMspAAAAAAAAyykAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMKQAAAAAAAMwpAAAAAAAAAAAAAAAA8L8"
=======
					"AgAAAHYtAAAAAAAAeC0AAAAAAAAAAAAAcy0AAAAAAAB1LQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMtAAAAAAAAdi0AAAAAAAAAAAAAAADwvw"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAMspAAAAAAAAzCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLKQAAAAAAAMspAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					2,
					"left_delete",
					null,
					"AgAAALEpAAAAAAAAsSkAAAAAAAABAAAAL7ApAAAAAAAAsCkAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyKQAAAAAAALIpAAAAAAAAAAAAAAAATkA"
				],
				[
					156,
					1,
					"revert",
					null,
<<<<<<< HEAD
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcKgAAAAAAABwqAAAAAAAAAAAAAAAAAAA"
=======
					"",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
				]
			]
		},
		{
			"file": "CToy-1.05-Linux64-x86_64/src/cimgui/cimgui.hpp",
			"settings":
			{
				"buffer_size": 85929,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prettier",
				"Build With: prettier"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"prett",
				"Pretty Shell: Minify"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
<<<<<<< HEAD
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/cimgui",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/util",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/x86-64",
		"/home/roman/Projects/plot-cv/cubic-spline"
=======
		"/home/janos/Projects/plot-cv"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/polygon.js",
		"/home/roman/Projects/plot-cv/lib/geom/polygon.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/hole.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser.js",
		"/home/roman/Projects/plot-cv/github-userscript.js",
		"/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/an-tronics/eagle/lbr/l.lbr",
		"/home/roman/Projects/an-tronics/eagle/github-userscript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/close.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/callback.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/janos/Projects/plot-cv/test-sourcemap.js",
		"/home/janos/Projects/plot-cv/ws-worker.js",
		"/home/janos/Projects/plot-cv/tokmap.c",
		"/home/janos/Projects/plot-cv/count-neighbours.js",
		"/home/janos/Projects/plot-cv/findsig.c",
		"/home/janos/Projects/plot-cv/getModuleProps.js",
		"/home/janos/Projects/plot-cv/midi-tcp.js",
		"/home/janos/Projects/plot-cv/portal.js",
		"/home/janos/Projects/plot-cv/resolve-imports.js",
		"/home/janos/Projects/plot-cv/palette.css",
		"/home/janos/Projects/plot-cv/get-res.c",
		"/home/janos/Projects/plot-cv/get-msys-packages.js",
		"/home/janos/Projects/plot-cv/gerber2gcode.js",
		"/home/janos/Projects/plot-cv/ftrace.js",
		"/home/janos/Projects/plot-cv/filelist.js",
		"/home/janos/Projects/plot-cv/coil.js",
		"/home/janos/Projects/plot-cv/eagle-server.js",
		"/home/janos/Projects/plot-cv/eagle-query.js",
		"/home/janos/Projects/plot-cv/dump-structs.js",
		"/home/janos/Projects/plot-cv/doc-scanner.js",
		"/home/janos/Projects/plot-cv/config.js",
		"/home/janos/Projects/plot-cv/deconflict.js",
		"/home/janos/Projects/plot-cv/debuggerprotocol.js",
		"/home/janos/Projects/plot-cv/debugger.js",
		"/home/janos/Projects/plot-cv/convert-imports.js",
		"/home/janos/Projects/plot-cv/esparse.js",
		"/home/janos/Projects/plot-cv/extract-structs.js",
		"/home/janos/Projects/plot-cv/fetch-post-prices.js",
		"/home/janos/Projects/plot-cv/ffi.js",
		"/home/janos/Projects/plot-cv/fontsample.js",
		"/home/janos/Projects/plot-cv/grammar-arith.js",
		"/home/janos/Projects/plot-cv/grammar-C.js",
		"/home/janos/Projects/plot-cv/grammar-c.js",
		"/home/janos/Projects/plot-cv/grammar-css3.js",
		"/home/janos/Projects/plot-cv/grammar-geda-netlist.js",
		"/home/janos/Projects/plot-cv/grammar-INI.js",
		"/home/janos/Projects/plot-cv/httpd.js",
		"/home/janos/Projects/plot-cv/ini-grammar.js",
		"/home/janos/Projects/plot-cv/io-helpers.js",
		"/home/janos/Projects/plot-cv/list-directory.js",
		"/home/janos/Projects/plot-cv/list-exports.js",
		"/home/janos/Projects/plot-cv/list-exports2.js",
		"/home/janos/Projects/plot-cv/load-ast.js",
		"/home/janos/Projects/plot-cv/meriyah.js",
		"/home/janos/Projects/plot-cv/workertest.js",
		"/home/janos/Projects/plot-cv/worker.js",
		"/home/janos/Projects/plot-cv/userscript-test.js",
		"/home/janos/Projects/plot-cv/upload.html",
		"/home/janos/Projects/plot-cv/upload-server.js",
		"/home/janos/Projects/plot-cv/untar.c",
		"/home/janos/Projects/plot-cv/tmpx.js",
		"/home/janos/Projects/plot-cv/test-xml.js",
		"/home/janos/Projects/plot-cv/test-wru.js",
		"/home/janos/Projects/plot-cv/test-websocket.js",
		"/home/janos/Projects/plot-cv/test-voronoi.js",
		"/home/janos/Projects/plot-cv/test-video.js",
		"/home/janos/Projects/plot-cv/test-util.js",
		"/home/janos/Projects/plot-cv/test-utf8.js",
		"/home/janos/Projects/plot-cv/test-umat.js",
		"/home/janos/Projects/plot-cv/test-trkl.js",
		"/home/janos/Projects/plot-cv/test-sqlite3.js",
		"/home/janos/Projects/plot-cv/test-spawn.js",
		"/home/janos/Projects/plot-cv/test-sockets.js",
		"/home/janos/Projects/plot-cv/test-shparse.js",
		"/home/janos/Projects/plot-cv/test-rpc.js",
		"/home/janos/Projects/plot-cv/test-repl.js",
		"/home/janos/Projects/plot-cv/test-renderer.js",
		"/home/janos/Projects/plot-cv/test-readline.js",
		"/home/janos/Projects/plot-cv/test-readdir.js",
		"/home/janos/Projects/plot-cv/test-quickjs.js",
		"/home/janos/Projects/plot-cv/test-proxy.js",
		"/home/janos/Projects/plot-cv/test-pointlist.js",
		"/home/janos/Projects/plot-cv/test-pointer.js",
		"/home/janos/Projects/plot-cv/test-path.js",
		"/home/janos/Projects/plot-cv/test-parsexml.js",
		"/home/janos/Projects/plot-cv/test-parse.js",
		"/home/janos/Projects/plot-cv/test-opencv.js",
		"/home/janos/Projects/plot-cv/test-octagon.js",
		"/home/janos/Projects/plot-cv/test-ngql.js",
		"/home/janos/Projects/plot-cv/test-net.js",
		"/home/janos/Projects/plot-cv/test-mmap.js",
		"/home/janos/Projects/plot-cv/test-minnet.js",
		"/home/janos/Projects/plot-cv/test-meriyah.js",
		"/home/janos/Projects/plot-cv/ol-marker.js",
		"/home/janos/Projects/plot-cv/ol-map.js",
		"/home/janos/Projects/plot-cv/make-bitmap.js",
		"/home/janos/Projects/plot-cv/list-proxies.js",
		"/home/janos/Projects/plot-cv/eagle2gerber.js",
		"/home/janos/Projects/plot-cv/test-exception.js",
		"/home/janos/Projects/plot-cv/test-childprocess.js",
		"/home/janos/Projects/plot-cv/test-bjson.js"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/lib/eagle,*.js",
			"/home/roman/Projects/plot-cv/lib,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"MakeGraph",
			"moveTo",
			"MakeGraph",
			"moveTo",
			"Edge",
			"libName",
			"'element'",
			" = 'element'",
			"'element'",
			"\\('element'",
			"'element'",
			"'element",
			"element",
			"^(\\s*)//(console\\.(log|debug)\\(')",
			"^(\\s*)(console\\.(log|debug)\\(')",
			"^(\\s*)(console\\.)",
			"^\\s*console.log",
			"^\\s*console.log.*element",
			"^\\s*console.log",
			"'element'",
			"\\belement\\b",
			"\\(['\"`]element['\"`]",
			"debug.*['\"`]element['\"`]",
			"log.*['\"`]element['\"`]",
			"['\"`]element['\"`]",
			"'element'",
			"log.*'element'",
			"'element'",
			"tagName ==",
			"'polygon'",
			"layer",
			"\\buseTransform\\b",
			"No such tra",
			"\\buseTransform\\b",
			"useTransform",
			"props\\.opts",
			"'deviceset'",
			"tagName == 'library'",
			"\\.(gates|devices)\\b",
			"\\.(gates|devices)",
			"'),\n",
			"tagName.*deviceset",
			"'deviceset'",
			"querySele",
			"align = ",
			"align",
			"round",
			"roun",
			"round",
			"<wire",
			"Line",
			"\\bLine\\b",
			"loadSaveOptions",
			"new REPL",
			"config",
			"width?=\"0\\.0",
			"width?=\"",
			"useValue",
			"await ",
			"client_finalize",
			"onClose",
			"exception",
			"current_exce",
			"}\\n\n",
			"}\\n\n([^\\n])",
			"}\\n([^\\n])",
			"}\\n\n([^\\n])",
			"remove",
			"ZipFolder",
			"<<<<",
			"ExecTool",
			"outdir",
			"'str'",
			"optionsArray",
			"Bottom",
			"compact",
			"boxes",
			"join",
			"\nfunction outputBytes(mat) {\n  return '['+[...rowIterator(mat)].map(a => '[ '+[...a].map(n => '0x'+n.toString(16).padStart(2, \n'0')).join(',')+' ],').join('\\n')+']';\n}",
			"cv\\.",
			"writeROI",
			"cvtColor",
			"g",
			"=> ",
			"));",
			"mod\\(",
			"toMap",
			"Util\\."
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\1//\\2",
			"opts",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
<<<<<<< HEAD
						"buffer_size": 25326,
=======
						"buffer_size": 57,
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
						"regions":
						{
						},
						"selection":
						[
<<<<<<< HEAD
=======
							[
								0,
								0
							]
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
<<<<<<< HEAD
							"current_file": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/cimgui/cimgui.cpp",
							"function_name_status_row": 24,
=======
							"current_file": "/home/janos/Projects/plot-cv/eagle2svg.js",
							"function_name_status_row": 3,
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
								[
									329,
									342
								],
								[
									398,
									412
								],
								[
									471,
									489
								],
								[
									566,
									579
								],
								[
									635,
									649
								],
								[
									708,
									726
								],
								[
									833,
									848
								],
								[
									953,
									969
								],
								[
									1057,
									1076
								],
								[
									1138,
									1157
								],
								[
									1238,
									1270
								],
								[
									1504,
									1511
								],
								[
									1569,
									1579
								],
								[
									1633,
									1643
								],
								[
									1696,
									1706
								],
								[
									1759,
									1767
								],
								[
									1825,
									1838
								],
								[
									1929,
									1945
								],
								[
									2022,
									2039
								],
								[
									2117,
									2136
								],
								[
									2216,
									2233
								],
								[
									2310,
									2329
								],
								[
									2413,
									2431
								],
								[
									2514,
									2529
								],
								[
									2601,
									2613
								],
								[
									2668,
									2685
								],
								[
									2763,
									2783
								],
								[
									2864,
									2882
								],
								[
									2960,
									2967
								],
								[
									3086,
									3091
								],
								[
									3138,
									3150
								],
								[
									3299,
									3313
								],
								[
									3451,
									3461
								],
								[
									3513,
									3532
								],
								[
									3593,
									3612
								],
								[
									3673,
									3690
								],
								[
									3777,
									3794
								],
								[
									3889,
									3908
								],
								[
									3979,
									3993
								],
								[
									4092,
									4107
								],
								[
									4199,
									4215
								],
								[
									4275,
									4292
								],
								[
									4361,
									4382
								],
								[
									4488,
									4511
								],
								[
									4611,
									4639
								],
								[
									4719,
									4746
								],
								[
									4858,
									4885
								],
								[
									4989,
									5018
								],
								[
									5090,
									5108
								],
								[
									5233,
									5252
								],
								[
									5355,
									5385
								],
								[
									5616,
									5642
								],
								[
									5732,
									5756
								],
								[
									5866,
									5886
								],
								[
									5949,
									5971
								],
								[
									6052,
									6070
								],
								[
									6166,
									6185
								],
								[
									6284,
									6308
								],
								[
									6414,
									6430
								],
								[
									6489,
									6509
								],
								[
									6588,
									6605
								],
								[
									6723,
									6741
								],
								[
									6862,
									6885
								],
								[
									7013,
									7032
								],
								[
									7112,
									7124
								],
								[
									7180,
									7192
								],
								[
									7248,
									7263
								],
								[
									7322,
									7337
								],
								[
									7395,
									7407
								],
								[
									7484,
									7496
								],
								[
									7573,
									7589
								],
								[
									7682,
									7701
								],
								[
									7819,
									7829
								],
								[
									7898,
									7907
								],
								[
									7959,
									7978
								],
								[
									8066,
									8082
								],
								[
									8177,
									8192
								],
								[
									8264,
									8283
								],
								[
									8374,
									8392
								],
								[
									8490,
									8503
								],
								[
									8582,
									8601
								],
								[
									8682,
									8691
								],
								[
									8744,
									8757
								],
								[
									8822,
									8846
								],
								[
									8947,
									8960
								],
								[
									9058,
									9075
								],
								[
									9151,
									9167
								],
								[
									9235,
									9250
								],
								[
									9334,
									9348
								],
								[
									9406,
									9421
								],
								[
									9479,
									9496
								],
								[
									9594,
									9610
								],
								[
									9669,
									9693
								],
								[
									9805,
									9828
								],
								[
									9894,
									9912
								],
								[
									9990,
									10007
								],
								[
									10067,
									10078
								],
								[
									10132,
									10142
								],
								[
									10249,
									10258
								],
								[
									10310,
									10319
								],
								[
									10371,
									10378
								],
								[
									10449,
									10457
								],
								[
									10530,
									10540
								],
								[
									10615,
									10627
								],
								[
									10682,
									10692
								],
								[
									10754,
									10768
								],
								[
									10859,
									10874
								],
								[
									10933,
									10948
								],
								[
									11006,
									11020
								],
								[
									11108,
									11123
								],
								[
									11201,
									11216
								],
								[
									11303,
									11322
								],
								[
									11426,
									11446
								],
								[
									11542,
									11562
								],
								[
									11644,
									11669
								],
								[
									11738,
									11757
								],
								[
									11820,
									11850
								],
								[
									11924,
									11940
								],
								[
									12000,
									12027
								],
								[
									12097,
									12108
								],
								[
									12183,
									12196
								],
								[
									12317,
									12328
								],
								[
									12403,
									12414
								],
								[
									12481,
									12488
								],
								[
									12541,
									12551
								],
								[
									12628,
									12640
								],
								[
									12763,
									12773
								],
								[
									12847,
									12864
								],
								[
									12974,
									12980
								],
								[
									13111,
									13118
								],
								[
									13204,
									13217
								],
								[
									13376,
									13390
								],
								[
									13504,
									13518
								],
								[
									13657,
									13672
								],
								[
									13766,
									13779
								],
								[
									13917,
									13931
								],
								[
									14024,
									14035
								],
								[
									14195,
									14207
								],
								[
									14322,
									14334
								],
								[
									14471,
									14484
								],
								[
									14575,
									14583
								],
								[
									14678,
									14691
								],
								[
									14768,
									14785
								],
								[
									14891,
									14904
								],
								[
									15001,
									15008
								],
								[
									15230,
									15243
								],
								[
									15495,
									15505
								],
								[
									15589,
									15604
								],
								[
									15746,
									15763
								],
								[
									15859,
									15878
								],
								[
									15987,
									16000
								],
								[
									16137,
									16145
								],
								[
									16195,
									16207
								],
								[
									16352,
									16362
								],
								[
									16414,
									16421
								],
								[
									16639,
									16649
								],
								[
									16869,
									16881
								],
								[
									17158,
									17169
								],
								[
									17357,
									17369
								],
								[
									17560,
									17572
								],
								[
									17763,
									17775
								],
								[
									17966,
									17983
								],
								[
									18270,
									18279
								],
								[
									18441,
									18451
								],
								[
									18616,
									18626
								],
								[
									18791,
									18801
								],
								[
									18966,
									18981
								],
								[
									19240,
									19252
								],
								[
									19486,
									19499
								],
								[
									19760,
									19773
								],
								[
									19941,
									19955
								],
								[
									20126,
									20140
								],
								[
									20311,
									20325
								],
								[
									20496,
									20509
								],
								[
									20699,
									20710
								],
								[
									20852,
									20864
								],
								[
									21009,
									21021
								],
								[
									21166,
									21178
								],
								[
									21323,
									21337
								],
								[
									21551,
									21566
								],
								[
									21807,
									21821
								],
								[
									22013,
									22025
								],
								[
									22191,
									22206
								],
								[
									22444,
									22455
								],
								[
									22668,
									22688
								],
								[
									22933,
									22945
								],
								[
									23132,
									23145
								],
								[
									23293,
									23306
								],
								[
									23454,
									23467
								],
								[
									23615,
									23625
								],
								[
									23778,
									23789
								],
								[
									23907,
									23918
								],
								[
									24036,
									24047
								],
								[
									24165,
									24178
								],
								[
									24369,
									24382
								],
								[
									24615,
									24629
								],
								[
									24889,
									24901
								],
								[
									25026,
									25038
								],
								[
									25163,
									25177
								],
								[
									25304,
									25318
								],
								[
									25474,
									25487
								],
								[
									25639,
									25660
								],
								[
									25753,
									25766
								],
								[
									25840,
									25856
								],
								[
									26043,
									26056
								],
								[
									26243,
									26257
								],
								[
									26372,
									26386
								],
								[
									26501,
									26516
								],
								[
									26623,
									26641
								],
								[
									26861,
									26876
								],
								[
									27096,
									27112
								],
								[
									27260,
									27276
								],
								[
									27425,
									27438
								],
								[
									27515,
									27528
								],
								[
									27605,
									27614
								],
								[
									27666,
									27689
								],
								[
									27756,
									27783
								],
								[
									27853,
									27874
								],
								[
									27976,
									27994
								],
								[
									28107,
									28132
								],
								[
									28265,
									28277
								],
								[
									28432,
									28451
								],
								[
									28611,
									28627
								],
								[
									28827,
									28841
								],
								[
									29100,
									29119
								],
								[
									29221,
									29239
								],
								[
									29383,
									29398
								],
								[
									29456,
									29467
								],
								[
									29769,
									29785
								],
								[
									30114,
									30137
								],
								[
									30443,
									30463
								],
								[
									30796,
									30807
								],
								[
									30890,
									30900
								],
								[
									30982,
									30993
								],
								[
									31084,
									31096
								],
								[
									31217,
									31235
								],
								[
									31296,
									31312
								],
								[
									31370,
									31384
								],
								[
									31441,
									31453
								],
								[
									31507,
									31518
								],
								[
									31615,
									31624
								],
								[
									31675,
									31689
								],
								[
									31837,
									31854
								],
								[
									32008,
									32022
								],
								[
									32079,
									32091
								],
								[
									32146,
									32158
								],
								[
									32295,
									32308
								],
								[
									32400,
									32411
								],
								[
									32488,
									32500
								],
								[
									32607,
									32630
								],
								[
									32749,
									32774
								],
								[
									32932,
									32955
								],
								[
									33074,
									33091
								],
								[
									33220,
									33230
								],
								[
									33282,
									33304
								],
								[
									33422,
									33435
								],
								[
									33515,
									33534
								],
								[
									33596,
									33605
								],
								[
									33708,
									33720
								],
								[
									33774,
									33790
								],
								[
									33850,
									33866
								],
								[
									33953,
									33969
								],
								[
									34075,
									34092
								],
								[
									34180,
									34197
								],
								[
									34308,
									34325
								],
								[
									34384,
									34397
								],
								[
									34506,
									34517
								],
								[
									34570,
									34584
								],
								[
									34713,
									34725
								],
								[
									34780,
									34798
								],
								[
									34923,
									34933
								],
								[
									35008,
									35019
								],
								[
									35125,
									35141
								],
								[
									35222,
									35233
								],
								[
									35287,
									35299
								],
								[
									35353,
									35374
								],
								[
									35466,
									35486
								],
								[
									35628,
									35647
								],
								[
									35708,
									35729
								],
								[
									35808,
									35831
								],
								[
									35948,
									35967
								],
								[
									36044,
									36064
								],
								[
									36127,
									36141
								],
								[
									36349,
									36362
								],
								[
									36418,
									36439
								],
								[
									36503,
									36525
								],
								[
									36605,
									36620
								],
								[
									36734,
									36748
								],
								[
									36804,
									36819
								],
								[
									36876,
									36891
								],
								[
									36976,
									36991
								],
								[
									37048,
									37062
								],
								[
									37118,
									37135
								],
								[
									37194,
									37213
								],
								[
									37274,
									37302
								],
								[
									37372,
									37390
								],
								[
									37450,
									37467
								],
								[
									37526,
									37544
								],
								[
									37614,
									37630
								],
								[
									37731,
									37747
								],
								[
									37848,
									37865
								],
								[
									37958,
									37979
								],
								[
									38042,
									38057
								],
								[
									38135,
									38154
								],
								[
									38274,
									38283
								],
								[
									38334,
									38349
								],
								[
									38414,
									38434
								],
								[
									38514,
									38537
								],
								[
									38610,
									38629
								],
								[
									38706,
									38723
								],
								[
									38820,
									38837
								],
								[
									38906,
									38920
								],
								[
									39149,
									39167
								],
								[
									39387,
									39404
								],
								[
									39528,
									39543
								],
								[
									39610,
									39635
								],
								[
									39747,
									39772
								],
								[
									39856,
									39869
								],
								[
									39951,
									39962
								],
								[
									40047,
									40061
								],
								[
									40168,
									40183
								],
								[
									40272,
									40293
								],
								[
									40426,
									40439
								],
								[
									40510,
									40526
								],
								[
									40584,
									40600
								],
								[
									40693,
									40715
								],
								[
									40795,
									40812
								],
								[
									40887,
									40904
								],
								[
									41015,
									41036
								],
								[
									41162,
									41179
								],
								[
									41280,
									41293
								],
								[
									41391,
									41425
								],
								[
									41544,
									41563
								],
								[
									41710,
									41731
								],
								[
									41823,
									41839
								],
								[
									41898,
									41914
								],
								[
									41998,
									42022
								],
								[
									42148,
									42169
								],
								[
									42293,
									42311
								],
								[
									42372,
									42390
								],
								[
									42471,
									42496
								],
								[
									42600,
									42627
								],
								[
									42750,
									42773
								],
								[
									42882,
									42907
								],
								[
									43007,
									43030
								],
								[
									43232,
									43242
								],
								[
									43310,
									43319
								],
								[
									43390,
									43411
								],
								[
									43471,
									43489
								],
								[
									43549,
									43573
								],
								[
									43677,
									43702
								],
								[
									43787,
									43817
								],
								[
									43915,
									43943
								],
								[
									44024,
									44039
								],
								[
									44096,
									44111
								],
								[
									44191,
									44244
								],
								[
									44320,
									44354
								],
								[
									44430,
									44468
								],
								[
									44594,
									44632
								],
								[
									44781,
									44820
								],
								[
									44917,
									44942
								],
								[
									45004,
									45024
								],
								[
									45086,
									45104
								],
								[
									45170,
									45193
								],
								[
									45285,
									45307
								],
								[
									45377,
									45400
								],
								[
									45488,
									45527
								],
								[
									45596,
									45623
								],
								[
									45704,
									45735
								],
								[
									45836,
									45859
								],
								[
									45923,
									45943
								],
								[
									46052,
									46078
								],
								[
									46204,
									46225
								],
								[
									46295,
									46316
								],
								[
									46385,
									46409
								],
								[
									46488,
									46507
								],
								[
									46566,
									46583
								],
								[
									46648,
									46670
								],
								[
									46766,
									46781
								],
								[
									46852,
									46865
								],
								[
									46926,
									46941
								],
								[
									47005,
									47020
								],
								[
									47148,
									47179
								],
								[
									47244,
									47267
								],
								[
									47339,
									47360
								],
								[
									47437,
									47456
								],
								[
									47523,
									47543
								],
								[
									47611,
									47632
								],
								[
									47702,
									47723
								],
								[
									47793,
									47816
								],
								[
									47916,
									47937
								],
								[
									48007,
									48029
								],
								[
									48147,
									48171
								],
								[
									48282,
									48294
								],
								[
									48378,
									48390
								],
								[
									48445,
									48459
								],
								[
									48546,
									48558
								],
								[
									48644,
									48662
								],
								[
									48728,
									48747
								],
								[
									48858,
									48877
								],
								[
									48971,
									48991
								],
								[
									49104,
									49124
								],
								[
									49222,
									49243
								],
								[
									49358,
									49379
								],
								[
									49479,
									49502
								],
								[
									49589,
									49612
								],
								[
									49713,
									49735
								],
								[
									49850,
									49873
								],
								[
									49991,
									50015
								],
								[
									50135,
									50161
								],
								[
									50281,
									50303
								],
								[
									50385,
									50412
								],
								[
									50501,
									50534
								],
								[
									50654,
									50678
								],
								[
									50743,
									50764
								],
								[
									50834,
									50856
								],
								[
									50986,
									51006
								],
								[
									51079,
									51094
								],
								[
									51151,
									51166
								],
								[
									51227,
									51245
								],
								[
									51332,
									51350
								],
								[
									51421,
									51441
								],
								[
									51536,
									51555
								],
								[
									51627,
									51641
								],
								[
									51753,
									51764
								],
								[
									51904,
									51923
								],
								[
									51982,
									51999
								],
								[
									52065,
									52086
								],
								[
									52192,
									52210
								],
								[
									52270,
									52293
								],
								[
									52505,
									52538
								],
								[
									52620,
									52642
								],
								[
									52713,
									52737
								],
								[
									52843,
									52866
								],
								[
									52947,
									52972
								],
								[
									53088,
									53113
								],
								[
									53220,
									53238
								],
								[
									53378,
									53396
								],
								[
									53610,
									53634
								],
								[
									53828,
									53862
								],
								[
									54110,
									54128
								],
								[
									54302,
									54326
								],
								[
									54480,
									54502
								],
								[
									54663,
									54691
								],
								[
									54832,
									54852
								],
								[
									55037,
									55063
								],
								[
									55228,
									55246
								],
								[
									55411,
									55436
								],
								[
									55731,
									55750
								],
								[
									55955,
									55978
								],
								[
									56267,
									56293
								],
								[
									56567,
									56589
								],
								[
									56778,
									56808
								],
								[
									56960,
									56985
								],
								[
									57216,
									57236
								],
								[
									57305,
									57326
								],
								[
									57416,
									57451
								],
								[
									57555,
									57580
								],
								[
									57667,
									57688
								],
								[
									57816,
									57836
								],
								[
									58017,
									58041
								],
								[
									58216,
									58244
								],
								[
									58407,
									58426
								],
								[
									58629,
									58653
								],
								[
									58759,
									58783
								],
								[
									58856,
									58885
								],
								[
									58994,
									59016
								],
								[
									59153,
									59174
								],
								[
									59251,
									59273
								],
								[
									59344,
									59360
								],
								[
									59425,
									59451
								],
								[
									59526,
									59548
								],
								[
									59666,
									59685
								],
								[
									59800,
									59821
								],
								[
									59984,
									60005
								],
								[
									60248,
									60271
								],
								[
									60396,
									60419
								],
								[
									60508,
									60526
								],
								[
									60646,
									60671
								],
								[
									60745,
									60771
								],
								[
									60853,
									60874
								],
								[
									60934,
									60952
								],
								[
									61012,
									61028
								],
								[
									61093,
									61121
								],
								[
									61198,
									61223
								],
								[
									61336,
									61361
								],
								[
									61423,
									61443
								],
								[
									61526,
									61575
								],
								[
									61649,
									61681
								],
								[
									61754,
									61785
								],
								[
									61872,
									61903
								],
								[
									61990,
									62022
								],
								[
									62114,
									62146
								],
								[
									62278,
									62312
								],
								[
									62423,
									62459
								],
								[
									62591,
									62614
								],
								[
									62675,
									62694
								],
								[
									62758,
									62777
								],
								[
									62885,
									62911
								],
								[
									63026,
									63056
								],
								[
									63276,
									63308
								],
								[
									63550,
									63592
								],
								[
									63894,
									63942
								],
								[
									64215,
									64241
								],
								[
									64316,
									64340
								],
								[
									64413,
									64435
								],
								[
									64506,
									64523
								],
								[
									64588,
									64605
								],
								[
									64671,
									64701
								],
								[
									64914,
									64944
								],
								[
									65156,
									65175
								],
								[
									65243,
									65263
								],
								[
									65359,
									65392
								],
								[
									65484,
									65516
								],
								[
									65607,
									65641
								],
								[
									65734,
									65771
								],
								[
									65867,
									65916
								],
								[
									66024,
									66058
								],
								[
									66151,
									66181
								],
								[
									66267,
									66288
								],
								[
									66348,
									66366
								],
								[
									66425,
									66444
								],
								[
									66511,
									66543
								],
								[
									66675,
									66709
								],
								[
									66923,
									66955
								],
								[
									67051,
									67079
								],
								[
									67242,
									67275
								],
								[
									67518,
									67531
								],
								[
									67587,
									67601
								],
								[
									67671,
									67687
								],
								[
									67777,
									67803
								],
								[
									67890,
									67911
								],
								[
									67991,
									68006
								],
								[
									68077,
									68096
								],
								[
									68173,
									68193
								],
								[
									68468,
									68496
								],
								[
									68670,
									68687
								],
								[
									68841,
									68858
								],
								[
									69158,
									69181
								],
								[
									69253,
									69275
								],
								[
									69346,
									69362
								],
								[
									69448,
									69463
								],
								[
									69660,
									69679
								],
								[
									69811,
									69833
								],
								[
									69926,
									69955
								],
								[
									70019,
									70041
								],
								[
									70118,
									70151
								],
								[
									70217,
									70241
								],
								[
									70325,
									70368
								],
								[
									70439,
									70468
								],
								[
									70556,
									70597
								],
								[
									70667,
									70695
								],
								[
									70780,
									70817
								],
								[
									70885,
									70911
								],
								[
									70995,
									71034
								],
								[
									71103,
									71130
								],
								[
									71218,
									71263
								],
								[
									71335,
									71365
								],
								[
									71447,
									71474
								],
								[
									71537,
									71558
								],
								[
									71638,
									71679
								],
								[
									71749,
									71777
								],
								[
									71863,
									71902
								],
								[
									71971,
									71998
								],
								[
									72076,
									72101
								],
								[
									72163,
									72183
								],
								[
									72255,
									72282
								],
								[
									72345,
									72366
								],
								[
									72444,
									72481
								],
								[
									72549,
									72575
								],
								[
									72655,
									72686
								],
								[
									72751,
									72774
								],
								[
									72854,
									72891
								],
								[
									72959,
									72985
								],
								[
									73068,
									73105
								],
								[
									73173,
									73199
								],
								[
									73279,
									73310
								],
								[
									73375,
									73398
								],
								[
									73474,
									73509
								],
								[
									73609,
									73648
								],
								[
									73757,
									73806
								],
								[
									73924,
									73971
								],
								[
									74085,
									74128
								],
								[
									74239,
									74284
								],
								[
									74400,
									74451
								],
								[
									74564,
									74597
								],
								[
									74699,
									74746
								],
								[
									74861,
									74906
								],
								[
									75012,
									75043
								],
								[
									75136,
									75169
								],
								[
									75269,
									75312
								],
								[
									75419,
									75456
								],
								[
									75560,
									75603
								],
								[
									75713,
									75756
								],
								[
									75863,
									75900
								],
								[
									75988,
									76008
								],
								[
									76082,
									76104
								],
								[
									76180,
									76207
								],
								[
									76288,
									76314
								],
								[
									76394,
									76418
								],
								[
									76496,
									76521
								],
								[
									76600,
									76628
								],
								[
									76710,
									76729
								],
								[
									76802,
									76828
								],
								[
									76908,
									76933
								],
								[
									77012,
									77030
								],
								[
									77102,
									77121
								],
								[
									77194,
									77218
								],
								[
									77296,
									77317
								],
								[
									77392,
									77416
								],
								[
									77494,
									77518
								],
								[
									77596,
									77617
								],
								[
									77692,
									77711
								],
								[
									77784,
									77805
								],
								[
									77880,
									77906
								],
								[
									77986,
									78011
								],
								[
									78090,
									78113
								],
								[
									78190,
									78214
								],
								[
									78292,
									78319
								],
								[
									78400,
									78418
								],
								[
									78490,
									78515
								],
								[
									78594,
									78618
								],
								[
									78696,
									78713
								],
								[
									78784,
									78802
								],
								[
									78874,
									78897
								],
								[
									78974,
									78994
								],
								[
									79068,
									79091
								],
								[
									79168,
									79191
								],
								[
									79268,
									79288
								],
								[
									79362,
									79390
								],
								[
									79472,
									79502
								],
								[
									79586,
									79621
								],
								[
									79710,
									79744
								],
								[
									79832,
									79864
								],
								[
									79950,
									79983
								],
								[
									80070,
									80106
								],
								[
									80196,
									80223
								],
								[
									80304,
									80338
								],
								[
									80426,
									80459
								],
								[
									80546,
									80572
								],
								[
									80652,
									80679
								],
								[
									80760,
									80792
								],
								[
									80878,
									80907
								],
								[
									80990,
									81022
								],
								[
									81108,
									81140
								],
								[
									81226,
									81255
								],
								[
									81338,
									81361
								],
								[
									81438,
									81463
								],
								[
									81542,
									81572
								],
								[
									81656,
									81685
								],
								[
									81768,
									81795
								],
								[
									81876,
									81904
								],
								[
									81986,
									82017
								],
								[
									82102,
									82124
								],
								[
									82200,
									82229
								],
								[
									82312,
									82340
								],
								[
									82422,
									82443
								],
								[
									82518,
									82540
								],
								[
									82616,
									82643
								],
								[
									82724,
									82748
								],
								[
									82826,
									82853
								],
								[
									82934,
									82961
								],
								[
									83042,
									83066
								],
								[
									83145,
									83165
								],
								[
									83234,
									83256
								],
								[
									83327,
									83354
								],
								[
									83430,
									83456
								],
								[
									83531,
									83555
								],
								[
									83628,
									83653
								],
								[
									83727,
									83755
								],
								[
									83832,
									83851
								],
								[
									83919,
									83945
								],
								[
									84020,
									84045
								],
								[
									84119,
									84137
								],
								[
									84204,
									84223
								],
								[
									84291,
									84315
								],
								[
									84388,
									84409
								],
								[
									84479,
									84503
								],
								[
									84576,
									84600
								],
								[
									84673,
									84694
								],
								[
									84766,
									84786
								],
								[
									84859,
									84881
								],
								[
									84961,
									84988
								],
								[
									85072,
									85098
								],
								[
									85179,
									85203
								],
								[
									85283,
									85308
								],
								[
									85392,
									85420
								],
								[
									85498,
									85517
								],
								[
									85593,
									85619
								],
								[
									85701,
									85726
								],
								[
									85800,
									85818
								],
								[
									85886,
									85905
								],
								[
									85977,
									86001
								],
								[
									86077,
									86098
								],
								[
									86174,
									86198
								],
								[
									86277,
									86301
								],
								[
									86377,
									86398
								],
								[
									86477,
									86503
								],
								[
									86589,
									86617
								],
								[
									86710,
									86743
								],
								[
									86840,
									86872
								],
								[
									86966,
									86996
								],
								[
									87089,
									87120
								],
								[
									87217,
									87251
								],
								[
									87342,
									87367
								],
								[
									87456,
									87488
								],
								[
									87583,
									87614
								],
								[
									87701,
									87725
								],
								[
									87806,
									87831
								],
								[
									87916,
									87946
								],
								[
									88035,
									88062
								],
								[
									88151,
									88181
								],
								[
									88273,
									88303
								],
								[
									88392,
									88419
								],
								[
									88497,
									88515
								],
								[
									88586,
									88606
								],
								[
									88684,
									88709
								],
								[
									88791,
									88815
								],
								[
									88894,
									88916
								],
								[
									88994,
									89017
								],
								[
									89099,
									89125
								],
								[
									89201,
									89218
								],
								[
									89292,
									89316
								],
								[
									89396,
									89419
								],
								[
									89491,
									89507
								],
								[
									89573,
									89590
								],
								[
									89660,
									89682
								],
								[
									89756,
									89775
								],
								[
									89849,
									89871
								],
								[
									89948,
									89970
								],
								[
									90044,
									90063
								],
								[
									90140,
									90164
								],
								[
									90248,
									90274
								],
								[
									90365,
									90396
								],
								[
									90491,
									90521
								],
								[
									90613,
									90641
								],
								[
									90732,
									90761
								],
								[
									90856,
									90888
								],
								[
									90977,
									91000
								],
								[
									91087,
									91117
								],
								[
									91210,
									91239
								],
								[
									91324,
									91346
								],
								[
									91425,
									91448
								],
								[
									91531,
									91559
								],
								[
									91646,
									91671
								],
								[
									91758,
									91786
								],
								[
									91876,
									91904
								],
								[
									91991,
									92016
								],
								[
									92092,
									92112
								],
								[
									92186,
									92208
								],
								[
									92289,
									92316
								],
								[
									92401,
									92427
								],
								[
									92509,
									92533
								],
								[
									92614,
									92639
								],
								[
									92724,
									92752
								],
								[
									92831,
									92850
								],
								[
									92927,
									92953
								],
								[
									93036,
									93061
								],
								[
									93136,
									93154
								],
								[
									93223,
									93242
								],
								[
									93315,
									93339
								],
								[
									93416,
									93437
								],
								[
									93514,
									93538
								],
								[
									93618,
									93642
								],
								[
									93719,
									93740
								],
								[
									93820,
									93846
								],
								[
									93933,
									93961
								],
								[
									94055,
									94088
								],
								[
									94186,
									94218
								],
								[
									94313,
									94343
								],
								[
									94437,
									94468
								],
								[
									94566,
									94600
								],
								[
									94692,
									94717
								],
								[
									94807,
									94839
								],
								[
									94935,
									94966
								],
								[
									95054,
									95078
								],
								[
									95160,
									95185
								],
								[
									95271,
									95301
								],
								[
									95391,
									95418
								],
								[
									95508,
									95538
								],
								[
									95631,
									95661
								],
								[
									95751,
									95778
								],
								[
									95857,
									95876
								],
								[
									95949,
									95970
								],
								[
									96050,
									96076
								],
								[
									96160,
									96185
								],
								[
									96266,
									96289
								],
								[
									96369,
									96393
								],
								[
									96477,
									96504
								],
								[
									96582,
									96600
								],
								[
									96676,
									96701
								],
								[
									96783,
									96807
								],
								[
									96881,
									96898
								],
								[
									96966,
									96984
								],
								[
									97056,
									97079
								],
								[
									97155,
									97175
								],
								[
									97251,
									97274
								],
								[
									97353,
									97376
								],
								[
									97452,
									97472
								],
								[
									97551,
									97576
								],
								[
									97662,
									97689
								],
								[
									97782,
									97814
								],
								[
									97911,
									97942
								],
								[
									98036,
									98065
								],
								[
									98158,
									98188
								],
								[
									98285,
									98318
								],
								[
									98409,
									98433
								],
								[
									98522,
									98553
								],
								[
									98648,
									98678
								],
								[
									98765,
									98788
								],
								[
									98869,
									98893
								],
								[
									98978,
									99007
								],
								[
									99096,
									99122
								],
								[
									99211,
									99240
								],
								[
									99332,
									99361
								],
								[
									99450,
									99476
								],
								[
									99552,
									99571
								],
								[
									99661,
									99682
								],
								[
									99776,
									99802
								],
								[
									99906,
									99931
								],
								[
									100033,
									100056
								],
								[
									100154,
									100178
								],
								[
									100278,
									100305
								],
								[
									100411,
									100429
								],
								[
									100517,
									100542
								],
								[
									100644,
									100668
								],
								[
									100768,
									100785
								],
								[
									100871,
									100889
								],
								[
									100977,
									101000
								],
								[
									101098,
									101118
								],
								[
									101210,
									101233
								],
								[
									101331,
									101354
								],
								[
									101452,
									101472
								],
								[
									101563,
									101592
								],
								[
									101684,
									101715
								],
								[
									101809,
									101845
								],
								[
									101944,
									101979
								],
								[
									102077,
									102110
								],
								[
									102206,
									102240
								],
								[
									102337,
									102374
								],
								[
									102474,
									102502
								],
								[
									102593,
									102628
								],
								[
									102726,
									102760
								],
								[
									102857,
									102884
								],
								[
									102974,
									103002
								],
								[
									103093,
									103126
								],
								[
									103222,
									103252
								],
								[
									103345,
									103378
								],
								[
									103474,
									103507
								],
								[
									103603,
									103633
								],
								[
									103727,
									103748
								],
								[
									103839,
									103862
								],
								[
									103955,
									103983
								],
								[
									104081,
									104108
								],
								[
									104205,
									104230
								],
								[
									104325,
									104351
								],
								[
									104447,
									104476
								],
								[
									104575,
									104595
								],
								[
									104685,
									104712
								],
								[
									104809,
									104835
								],
								[
									104931,
									104950
								],
								[
									105039,
									105059
								],
								[
									105149,
									105174
								],
								[
									105269,
									105291
								],
								[
									105383,
									105408
								],
								[
									105503,
									105528
								],
								[
									105623,
									105645
								],
								[
									105737,
									105759
								],
								[
									105866,
									105890
								],
								[
									106001,
									106030
								],
								[
									106151,
									106179
								],
								[
									106298,
									106324
								],
								[
									106439,
									106466
								],
								[
									106583,
									106613
								],
								[
									106736,
									106757
								],
								[
									106862,
									106890
								],
								[
									107009,
									107036
								],
								[
									107153,
									107173
								],
								[
									107276,
									107297
								],
								[
									107402,
									107428
								],
								[
									107542,
									107565
								],
								[
									107674,
									107700
								],
								[
									107815,
									107841
								],
								[
									107956,
									107979
								],
								[
									108088,
									108110
								],
								[
									108210,
									108234
								],
								[
									108336,
									108365
								],
								[
									108472,
									108500
								],
								[
									108606,
									108632
								],
								[
									108736,
									108763
								],
								[
									108868,
									108898
								],
								[
									109006,
									109027
								],
								[
									109126,
									109154
								],
								[
									109260,
									109287
								],
								[
									109392,
									109412
								],
								[
									109510,
									109531
								],
								[
									109630,
									109656
								],
								[
									109760,
									109783
								],
								[
									109884,
									109910
								],
								[
									110014,
									110040
								],
								[
									110144,
									110167
								],
								[
									110268,
									110292
								],
								[
									110380,
									110406
								],
								[
									110498,
									110529
								],
								[
									110631,
									110661
								],
								[
									110761,
									110789
								],
								[
									110885,
									110914
								],
								[
									111012,
									111044
								],
								[
									111148,
									111171
								],
								[
									111257,
									111287
								],
								[
									111387,
									111416
								],
								[
									111514,
									111536
								],
								[
									111620,
									111643
								],
								[
									111729,
									111757
								],
								[
									111852,
									111877
								],
								[
									111967,
									111995
								],
								[
									112091,
									112119
								],
								[
									112215,
									112240
								],
								[
									112330,
									112353
								],
								[
									112425,
									112450
								],
								[
									112524,
									112554
								],
								[
									112633,
									112662
								],
								[
									112740,
									112767
								],
								[
									112843,
									112871
								],
								[
									112948,
									112979
								],
								[
									113059,
									113081
								],
								[
									113152,
									113181
								],
								[
									113259,
									113287
								],
								[
									113364,
									113385
								],
								[
									113455,
									113477
								],
								[
									113548,
									113575
								],
								[
									113651,
									113675
								],
								[
									113748,
									113775
								],
								[
									113851,
									113878
								],
								[
									113954,
									113978
								],
								[
									114051,
									114076
								],
								[
									114165,
									114192
								],
								[
									114285,
									114317
								],
								[
									114420,
									114451
								],
								[
									114552,
									114581
								],
								[
									114678,
									114708
								],
								[
									114807,
									114840
								],
								[
									114945,
									114969
								],
								[
									115056,
									115087
								],
								[
									115188,
									115218
								],
								[
									115317,
									115340
								],
								[
									115425,
									115449
								],
								[
									115536,
									115565
								],
								[
									115661,
									115687
								],
								[
									115778,
									115807
								],
								[
									115904,
									115933
								],
								[
									116030,
									116056
								],
								[
									116149,
									116169
								],
								[
									116261,
									116283
								],
								[
									116384,
									116411
								],
								[
									116521,
									116547
								],
								[
									116653,
									116677
								],
								[
									116780,
									116805
								],
								[
									116913,
									116941
								],
								[
									117046,
									117065
								],
								[
									117159,
									117185
								],
								[
									117292,
									117317
								],
								[
									117415,
									117433
								],
								[
									117518,
									117537
								],
								[
									117627,
									117651
								],
								[
									117748,
									117769
								],
								[
									117865,
									117889
								],
								[
									117991,
									118015
								],
								[
									118114,
									118135
								],
								[
									118227,
									118251
								],
								[
									118373,
									118399
								],
								[
									118532,
									118563
								],
								[
									118710,
									118740
								],
								[
									118882,
									118910
								],
								[
									119047,
									119076
								],
								[
									119219,
									119251
								],
								[
									119394,
									119417
								],
								[
									119540,
									119570
								],
								[
									119713,
									119742
								],
								[
									119875,
									119897
								],
								[
									120010,
									120033
								],
								[
									120152,
									120180
								],
								[
									120309,
									120334
								],
								[
									120461,
									120489
								],
								[
									120625,
									120653
								],
								[
									120786,
									120811
								],
								[
									120934,
									120963
								],
								[
									121064,
									121095
								],
								[
									121205,
									121241
								],
								[
									121360,
									121395
								],
								[
									121510,
									121543
								],
								[
									121655,
									121689
								],
								[
									121806,
									121843
								],
								[
									121957,
									121985
								],
								[
									122088,
									122123
								],
								[
									122239,
									122273
								],
								[
									122380,
									122407
								],
								[
									122501,
									122529
								],
								[
									122628,
									122661
								],
								[
									122767,
									122797
								],
								[
									122902,
									122935
								],
								[
									123046,
									123079
								],
								[
									123187,
									123217
								],
								[
									123318,
									123339
								],
								[
									123448,
									123471
								],
								[
									123591,
									123619
								],
								[
									123753,
									123780
								],
								[
									123909,
									123934
								],
								[
									124058,
									124084
								],
								[
									124214,
									124243
								],
								[
									124373,
									124393
								],
								[
									124503,
									124530
								],
								[
									124660,
									124686
								],
								[
									124806,
									124825
								],
								[
									124925,
									124945
								],
								[
									125051,
									125076
								],
								[
									125193,
									125215
								],
								[
									125329,
									125354
								],
								[
									125477,
									125502
								],
								[
									125622,
									125644
								],
								[
									125751,
									125774
								],
								[
									125866,
									125891
								],
								[
									125987,
									126009
								],
								[
									126099,
									126120
								],
								[
									126208,
									126237
								],
								[
									126339,
									126370
								],
								[
									126476,
									126512
								],
								[
									126628,
									126663
								],
								[
									126777,
									126810
								],
								[
									126920,
									126954
								],
								[
									127066,
									127103
								],
								[
									127221,
									127249
								],
								[
									127349,
									127384
								],
								[
									127498,
									127532
								],
								[
									127644,
									127671
								],
								[
									127769,
									127797
								],
								[
									127897,
									127930
								],
								[
									128038,
									128068
								],
								[
									128172,
									128205
								],
								[
									128315,
									128348
								],
								[
									128458,
									128488
								],
								[
									128649,
									128658
								],
								[
									128858,
									128881
								],
								[
									128889,
									128904
								],
								[
									129052,
									129065
								],
								[
									129108,
									129130
								],
								[
									129276,
									129298
								],
								[
									129458,
									129481
								],
								[
									129543,
									129564
								],
								[
									129648,
									129671
								]
							],
							"symlist":
							[
<<<<<<< HEAD
								"ImVec2_ImVec2",
								"ImVec2_destroy",
								"ImVec2_ImVec2Float",
								"ImVec4_ImVec4",
								"ImVec4_destroy",
								"ImVec4_ImVec4Float",
								"  igCreateContext",
								"  igDestroyContext",
								"  igGetCurrentContext",
								"  igSetCurrentContext",
								"  igDebugCheckVersionAndDataLayout",
								"  igGetIO",
								"  igGetStyle",
								"  igNewFrame",
								"  igEndFrame",
								"  igRender",
								"  igGetDrawData",
								"  igShowDemoWindow",
								"  igShowAboutWindow",
								"  igShowMetricsWindow",
								"  igShowStyleEditor",
								"  igShowStyleSelector",
								"  igShowFontSelector",
								"  igShowUserGuide",
								"  igGetVersion",
								"  igStyleColorsDark",
								"  igStyleColorsClassic",
								"  igStyleColorsLight",
								"  igBegin",
								"  igEnd",
								"  igBeginChild",
								"  igBeginChildID",
								"  igEndChild",
								"  igIsWindowAppearing",
								"  igIsWindowCollapsed",
								"  igIsWindowFocused",
								"  igIsWindowHovered",
								"  igGetWindowDrawList",
								"  igGetWindowPos",
								"  igGetWindowSize",
								"  igGetWindowWidth",
								"  igGetWindowHeight",
								"  igGetContentRegionMax",
								"  igGetContentRegionAvail",
								"  igGetContentRegionAvailWidth",
								"  igGetWindowContentRegionMin",
								"  igGetWindowContentRegionMax",
								"  igGetWindowContentRegionWidth",
								"  igSetNextWindowPos",
								"  igSetNextWindowSize",
								"  igSetNextWindowSizeConstraints",
								"  igSetNextWindowContentSize",
								"  igSetNextWindowCollapsed",
								"  igSetNextWindowFocus",
								"  igSetNextWindowBgAlpha",
								"  igSetWindowPosVec2",
								"  igSetWindowSizeVec2",
								"  igSetWindowCollapsedBool",
								"  igSetWindowFocus",
								"  igSetWindowFontScale",
								"  igSetWindowPosStr",
								"  igSetWindowSizeStr",
								"  igSetWindowCollapsedStr",
								"  igSetWindowFocusStr",
								"  igGetScrollX",
								"  igGetScrollY",
								"  igGetScrollMaxX",
								"  igGetScrollMaxY",
								"  igSetScrollX",
								"  igSetScrollY",
								"  igSetScrollHereY",
								"  igSetScrollFromPosY",
								"  igPushFont",
								"  igPopFont",
								"  igPushStyleColorU32",
								"  igPushStyleColor",
								"  igPopStyleColor",
								"  igPushStyleVarFloat",
								"  igPushStyleVarVec2",
								"  igPopStyleVar",
								"  igGetStyleColorVec4",
								"  igGetFont",
								"  igGetFontSize",
								"  igGetFontTexUvWhitePixel",
								"  igGetColorU32",
								"  igGetColorU32Vec4",
								"  igGetColorU32U32",
								"  igPushItemWidth",
								"  igPopItemWidth",
								"  igCalcItemWidth",
								"  igPushTextWrapPos",
								"  igPopTextWrapPos",
								"  igPushAllowKeyboardFocus",
								"  igPopAllowKeyboardFocus",
								"  igPushButtonRepeat",
								"  igPopButtonRepeat",
								"  igSeparator",
								"  igSameLine",
								"  igNewLine",
								"  igSpacing",
								"  igDummy",
								"  igIndent",
								"  igUnindent",
								"  igBeginGroup",
								"  igEndGroup",
								"  igGetCursorPos",
								"  igGetCursorPosX",
								"  igGetCursorPosY",
								"  igSetCursorPos",
								"  igSetCursorPosX",
								"  igSetCursorPosY",
								"  igGetCursorStartPos",
								"  igGetCursorScreenPos",
								"  igSetCursorScreenPos",
								"  igAlignTextToFramePadding",
								"  igGetTextLineHeight",
								"  igGetTextLineHeightWithSpacing",
								"  igGetFrameHeight",
								"  igGetFrameHeightWithSpacing",
								"  igPushIDStr",
								"  igPushIDRange",
								"  igPushIDPtr",
								"  igPushIDInt",
								"  igPopID",
								"  igGetIDStr",
								"  igGetIDRange",
								"  igGetIDPtr",
								"  igTextUnformatted",
								"  igText",
								"  igTextV",
								"  igTextColored",
								"  igTextColoredV",
								"  igTextDisabled",
								"  igTextDisabledV",
								"  igTextWrapped",
								"  igTextWrappedV",
								"  igLabelText",
								"  igLabelTextV",
								"  igBulletText",
								"  igBulletTextV",
								"  igButton",
								"  igSmallButton",
								"  igInvisibleButton",
								"  igArrowButton",
								"  igImage",
								"  igImageButton",
								"  igCheckbox",
								"  igCheckboxFlags",
								"  igRadioButtonBool",
								"  igRadioButtonIntPtr",
								"  igProgressBar",
								"  igBullet",
								"  igBeginCombo",
								"  igEndCombo",
								"  igCombo",
								"  igComboStr",
								"  igComboFnPtr",
								"  igDragFloat",
								"  igDragFloat2",
								"  igDragFloat3",
								"  igDragFloat4",
								"  igDragFloatRange2",
								"  igDragInt",
								"  igDragInt2",
								"  igDragInt3",
								"  igDragInt4",
								"  igDragIntRange2",
								"  igDragScalar",
								"  igDragScalarN",
								"  igSliderFloat",
								"  igSliderFloat2",
								"  igSliderFloat3",
								"  igSliderFloat4",
								"  igSliderAngle",
								"  igSliderInt",
								"  igSliderInt2",
								"  igSliderInt3",
								"  igSliderInt4",
								"  igSliderScalar",
								"  igSliderScalarN",
								"  igVSliderFloat",
								"  igVSliderInt",
								"  igVSliderScalar",
								"  igInputText",
								"  igInputTextMultiline",
								"  igInputFloat",
								"  igInputFloat2",
								"  igInputFloat3",
								"  igInputFloat4",
								"  igInputInt",
								"  igInputInt2",
								"  igInputInt3",
								"  igInputInt4",
								"  igInputDouble",
								"  igInputScalar",
								"  igInputScalarN",
								"  igColorEdit3",
								"  igColorEdit4",
								"  igColorPicker3",
								"  igColorPicker4",
								"  igColorButton",
								"  igSetColorEditOptions",
								"  igTreeNodeStr",
								"  igTreeNodeStrStr",
								"  igTreeNodePtr",
								"  igTreeNodeVStr",
								"  igTreeNodeVPtr",
								"  igTreeNodeExStr",
								"  igTreeNodeExStrStr",
								"  igTreeNodeExPtr",
								"  igTreeNodeExVStr",
								"  igTreeNodeExVPtr",
								"  igTreePushStr",
								"  igTreePushPtr",
								"  igTreePop",
								"  igTreeAdvanceToLabelPos",
								"  igGetTreeNodeToLabelSpacing",
								"  igSetNextTreeNodeOpen",
								"  igCollapsingHeader",
								"  igCollapsingHeaderBoolPtr",
								"  igSelectable",
								"  igSelectableBoolPtr",
								"  igListBoxStr_arr",
								"  igListBoxFnPtr",
								"  igListBoxHeaderVec2",
								"  igListBoxHeaderInt",
								"  igListBoxFooter",
								"  igPlotLines",
								"  igPlotLinesFnPtr",
								"  igPlotHistogramFloatPtr",
								"  igPlotHistogramFnPtr",
								"  igValueBool",
								"  igValueInt",
								"  igValueUint",
								"  igValueFloat",
								"  igBeginMainMenuBar",
								"  igEndMainMenuBar",
								"  igBeginMenuBar",
								"  igEndMenuBar",
								"  igBeginMenu",
								"  igEndMenu",
								"  igMenuItemBool",
								"  igMenuItemBoolPtr",
								"  igBeginTooltip",
								"  igEndTooltip",
								"  igSetTooltip",
								"  igSetTooltipV",
								"  igOpenPopup",
								"  igBeginPopup",
								"  igBeginPopupContextItem",
								"  igBeginPopupContextWindow",
								"  igBeginPopupContextVoid",
								"  igBeginPopupModal",
								"  igEndPopup",
								"  igOpenPopupOnItemClick",
								"  igIsPopupOpen",
								"  igCloseCurrentPopup",
								"  igColumns",
								"  igNextColumn",
								"  igGetColumnIndex",
								"  igGetColumnWidth",
								"  igSetColumnWidth",
								"  igGetColumnOffset",
								"  igSetColumnOffset",
								"  igGetColumnsCount",
								"  igBeginTabBar",
								"  igEndTabBar",
								"  igBeginTabItem",
								"  igEndTabItem",
								"  igSetTabItemClosed",
								"  igLogToTTY",
								"  igLogToFile",
								"  igLogToClipboard",
								"  igLogFinish",
								"  igLogButtons",
								"  igBeginDragDropSource",
								"  igSetDragDropPayload",
								"  igEndDragDropSource",
								"  igBeginDragDropTarget",
								"  igAcceptDragDropPayload",
								"  igEndDragDropTarget",
								"  igGetDragDropPayload",
								"  igPushClipRect",
								"  igPopClipRect",
								"  igSetItemDefaultFocus",
								"  igSetKeyboardFocusHere",
								"  igIsItemHovered",
								"  igIsItemActive",
								"  igIsItemFocused",
								"  igIsItemClicked",
								"  igIsItemVisible",
								"  igIsItemEdited",
								"  igIsItemActivated",
								"  igIsItemDeactivated",
								"  igIsItemDeactivatedAfterEdit",
								"  igIsAnyItemHovered",
								"  igIsAnyItemActive",
								"  igIsAnyItemFocused",
								"  igGetItemRectMin",
								"  igGetItemRectMax",
								"  igGetItemRectSize",
								"  igSetItemAllowOverlap",
								"  igIsRectVisible",
								"  igIsRectVisibleVec2",
								"  igGetTime",
								"  igGetFrameCount",
								"  igGetOverlayDrawList",
								"  igGetDrawListSharedData",
								"  igGetStyleColorName",
								"  igSetStateStorage",
								"  igGetStateStorage",
								"  igCalcTextSize",
								"  igCalcListClipping",
								"  igBeginChildFrame",
								"  igEndChildFrame",
								"  igColorConvertU32ToFloat4",
								"  igColorConvertFloat4ToU32",
								"  igGetKeyIndex",
								"  igIsKeyDown",
								"  igIsKeyPressed",
								"  igIsKeyReleased",
								"  igGetKeyPressedAmount",
								"  igIsMouseDown",
								"  igIsAnyMouseDown",
								"  igIsMouseClicked",
								"  igIsMouseDoubleClicked",
								"  igIsMouseReleased",
								"  igIsMouseDragging",
								"  igIsMouseHoveringRect",
								"  igIsMousePosValid",
								"  igGetMousePos",
								"  igGetMousePosOnOpeningCurrentPopup",
								"  igGetMouseDragDelta",
								"  igResetMouseDragDelta",
								"  igGetMouseCursor",
								"  igSetMouseCursor",
								"  igCaptureKeyboardFromApp",
								"  igCaptureMouseFromApp",
								"  igGetClipboardText",
								"  igSetClipboardText",
								"  igLoadIniSettingsFromDisk",
								"  igLoadIniSettingsFromMemory",
								"  igSaveIniSettingsToDisk",
								"  igSaveIniSettingsToMemory",
								"  igSetAllocatorFunctions",
								"  igMemAlloc",
								"  igMemFree",
								"ImGuiStyle_ImGuiStyle",
								"ImGuiStyle_destroy",
								"ImGuiStyle_ScaleAllSizes",
								"ImGuiIO_AddInputCharacter",
								"ImGuiIO_AddInputCharactersUTF8",
								"ImGuiIO_ClearInputCharacters",
								"ImGuiIO_ImGuiIO",
								"ImGuiIO_destroy",
								"ImGuiInputTextCallbackData_ImGuiInputTextCallbackData",
								"ImGuiInputTextCallbackData_destroy",
								"ImGuiInputTextCallbackData_DeleteChars",
								"ImGuiInputTextCallbackData_InsertChars",
								"ImGuiInputTextCallbackData_HasSelection",
								"ImGuiPayload_ImGuiPayload",
								"ImGuiPayload_destroy",
								"ImGuiPayload_Clear",
								"ImGuiPayload_IsDataType",
								"ImGuiPayload_IsPreview",
								"ImGuiPayload_IsDelivery",
								"ImGuiOnceUponAFrame_ImGuiOnceUponAFrame",
								"ImGuiOnceUponAFrame_destroy",
								"ImGuiTextFilter_ImGuiTextFilter",
								"ImGuiTextFilter_destroy",
								"ImGuiTextFilter_Draw",
								"ImGuiTextFilter_PassFilter",
								"ImGuiTextFilter_Build",
								"ImGuiTextFilter_Clear",
								"ImGuiTextFilter_IsActive",
								"TextRange_TextRange",
								"TextRange_destroy",
								"TextRange_TextRangeStr",
								"TextRange_begin",
								"TextRange_end",
								"TextRange_empty",
								"TextRange_split",
								"ImGuiTextBuffer_ImGuiTextBuffer",
								"ImGuiTextBuffer_destroy",
								"ImGuiTextBuffer_begin",
								"ImGuiTextBuffer_end",
								"ImGuiTextBuffer_size",
								"ImGuiTextBuffer_empty",
								"ImGuiTextBuffer_clear",
								"ImGuiTextBuffer_reserve",
								"ImGuiTextBuffer_c_str",
								"ImGuiTextBuffer_append",
								"ImGuiTextBuffer_appendfv",
								"Pair_PairInt",
								"Pair_destroy",
								"Pair_PairFloat",
								"Pair_PairPtr",
								"ImGuiStorage_Clear",
								"ImGuiStorage_GetInt",
								"ImGuiStorage_SetInt",
								"ImGuiStorage_GetBool",
								"ImGuiStorage_SetBool",
								"ImGuiStorage_GetFloat",
								"ImGuiStorage_SetFloat",
								"ImGuiStorage_GetVoidPtr",
								"ImGuiStorage_SetVoidPtr",
								"ImGuiStorage_GetIntRef",
								"ImGuiStorage_GetBoolRef",
								"ImGuiStorage_GetFloatRef",
								"ImGuiStorage_GetVoidPtrRef",
								"ImGuiStorage_SetAllInt",
								"ImGuiStorage_BuildSortByKey",
								"ImGuiListClipper_ImGuiListClipper",
								"ImGuiListClipper_destroy",
								"ImGuiListClipper_Step",
								"ImGuiListClipper_Begin",
								"ImGuiListClipper_End",
								"ImColor_ImColor",
								"ImColor_destroy",
								"ImColor_ImColorInt",
								"ImColor_ImColorU32",
								"ImColor_ImColorFloat",
								"ImColor_ImColorVec4",
								"ImColor_SetHSV",
								"ImColor_HSV",
								"ImDrawCmd_ImDrawCmd",
								"ImDrawCmd_destroy",
								"ImDrawList_ImDrawList",
								"ImDrawList_destroy",
								"ImDrawList_PushClipRect",
								"ImDrawList_PushClipRectFullScreen",
								"ImDrawList_PopClipRect",
								"ImDrawList_PushTextureID",
								"ImDrawList_PopTextureID",
								"ImDrawList_GetClipRectMin",
								"ImDrawList_GetClipRectMax",
								"ImDrawList_AddLine",
								"ImDrawList_AddRect",
								"ImDrawList_AddRectFilled",
								"ImDrawList_AddRectFilledMultiColor",
								"ImDrawList_AddQuad",
								"ImDrawList_AddQuadFilled",
								"ImDrawList_AddTriangle",
								"ImDrawList_AddTriangleFilled",
								"ImDrawList_AddCircle",
								"ImDrawList_AddCircleFilled",
								"ImDrawList_AddText",
								"ImDrawList_AddTextFontPtr",
								"ImDrawList_AddImage",
								"ImDrawList_AddImageQuad",
								"ImDrawList_AddImageRounded",
								"ImDrawList_AddPolyline",
								"ImDrawList_AddConvexPolyFilled",
								"ImDrawList_AddBezierCurve",
								"ImDrawList_PathClear",
								"ImDrawList_PathLineTo",
								"ImDrawList_PathLineToMergeDuplicate",
								"ImDrawList_PathFillConvex",
								"ImDrawList_PathStroke",
								"ImDrawList_PathArcTo",
								"ImDrawList_PathArcToFast",
								"ImDrawList_PathBezierCurveTo",
								"ImDrawList_PathRect",
								"ImDrawList_ChannelsSplit",
								"ImDrawList_ChannelsMerge",
								"ImDrawList_ChannelsSetCurrent",
								"ImDrawList_AddCallback",
								"ImDrawList_AddDrawCmd",
								"ImDrawList_CloneOutput",
								"ImDrawList_Clear",
								"ImDrawList_ClearFreeMemory",
								"ImDrawList_PrimReserve",
								"ImDrawList_PrimRect",
								"ImDrawList_PrimRectUV",
								"ImDrawList_PrimQuadUV",
								"ImDrawList_PrimWriteVtx",
								"ImDrawList_PrimWriteIdx",
								"ImDrawList_PrimVtx",
								"ImDrawList_UpdateClipRect",
								"ImDrawList_UpdateTextureID",
								"ImDrawData_ImDrawData",
								"ImDrawData_destroy",
								"ImDrawData_Clear",
								"ImDrawData_DeIndexAllBuffers",
								"ImDrawData_ScaleClipRects",
								"ImFontConfig_ImFontConfig",
								"ImFontConfig_destroy",
								"ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder",
								"ImFontGlyphRangesBuilder_destroy",
								"ImFontGlyphRangesBuilder_GetBit",
								"ImFontGlyphRangesBuilder_SetBit",
								"ImFontGlyphRangesBuilder_AddChar",
								"ImFontGlyphRangesBuilder_AddText",
								"ImFontGlyphRangesBuilder_AddRanges",
								"ImFontGlyphRangesBuilder_BuildRanges",
								"ImFontAtlas_ImFontAtlas",
								"ImFontAtlas_destroy",
								"ImFontAtlas_AddFont",
								"ImFontAtlas_AddFontDefault",
								"ImFontAtlas_AddFontFromFileTTF",
								"ImFontAtlas_AddFontFromMemoryTTF",
								"ImFontAtlas_AddFontFromMemoryCompressedTTF",
								"ImFontAtlas_AddFontFromMemoryCompressedBase85TTF",
								"ImFontAtlas_ClearInputData",
								"ImFontAtlas_ClearTexData",
								"ImFontAtlas_ClearFonts",
								"ImFontAtlas_Clear",
								"ImFontAtlas_Build",
								"ImFontAtlas_GetTexDataAsAlpha8",
								"ImFontAtlas_GetTexDataAsRGBA32",
								"ImFontAtlas_IsBuilt",
								"ImFontAtlas_SetTexID",
								"ImFontAtlas_GetGlyphRangesDefault",
								"ImFontAtlas_GetGlyphRangesKorean",
								"ImFontAtlas_GetGlyphRangesJapanese",
								"ImFontAtlas_GetGlyphRangesChineseFull",
								"ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon",
								"ImFontAtlas_GetGlyphRangesCyrillic",
								"ImFontAtlas_GetGlyphRangesThai",
								"CustomRect_CustomRect",
								"CustomRect_destroy",
								"CustomRect_IsPacked",
								"ImFontAtlas_AddCustomRectRegular",
								"ImFontAtlas_AddCustomRectFontGlyph",
								"ImFontAtlas_GetCustomRectByIndex",
								"ImFontAtlas_CalcCustomRectUV",
								"ImFontAtlas_GetMouseCursorTexData",
								"ImFont_ImFont",
								"ImFont_destroy",
								"ImFont_FindGlyph",
								"ImFont_FindGlyphNoFallback",
								"ImFont_GetCharAdvance",
								"ImFont_IsLoaded",
								"ImFont_GetDebugName",
								"ImFont_CalcTextSizeA",
								"ImFont_CalcWordWrapPositionA",
								"ImFont_RenderChar",
								"ImFont_RenderText",
								"ImFont_BuildLookupTable",
								"ImFont_ClearOutputData",
								"ImFont_GrowIndex",
								"ImFont_AddGlyph",
								"ImFont_AddRemapChar",
								"ImFont_SetFallbackChar",
								"ImVector_float_ImVector_float",
								"ImVector_float_destroy",
								"ImVector_ImWchar_ImVector_ImWchar",
								"ImVector_ImWchar_destroy",
								"ImVector_ImFontConfig_ImVector_ImFontConfig",
								"ImVector_ImFontConfig_destroy",
								"ImVector_ImFontGlyph_ImVector_ImFontGlyph",
								"ImVector_ImFontGlyph_destroy",
								"ImVector_TextRange_ImVector_TextRange",
								"ImVector_TextRange_destroy",
								"ImVector_CustomRect_ImVector_CustomRect",
								"ImVector_CustomRect_destroy",
								"ImVector_ImDrawChannel_ImVector_ImDrawChannel",
								"ImVector_ImDrawChannel_destroy",
								"ImVector_char_ImVector_char",
								"ImVector_char_destroy",
								"ImVector_ImTextureID_ImVector_ImTextureID",
								"ImVector_ImTextureID_destroy",
								"ImVector_ImDrawVert_ImVector_ImDrawVert",
								"ImVector_ImDrawVert_destroy",
								"ImVector_int_ImVector_int",
								"ImVector_int_destroy",
								"ImVector_Pair_ImVector_Pair",
								"ImVector_Pair_destroy",
								"ImVector_ImFontPtr_ImVector_ImFontPtr",
								"ImVector_ImFontPtr_destroy",
								"ImVector_ImVec4_ImVector_ImVec4",
								"ImVector_ImVec4_destroy",
								"ImVector_ImDrawCmd_ImVector_ImDrawCmd",
								"ImVector_ImDrawCmd_destroy",
								"ImVector_ImDrawIdx_ImVector_ImDrawIdx",
								"ImVector_ImDrawIdx_destroy",
								"ImVector_ImVec2_ImVector_ImVec2",
								"ImVector_ImVec2_destroy",
								"ImVector_float_ImVector_floatVector",
								"ImVector_ImWchar_ImVector_ImWcharVector",
								"ImVector_ImFontConfig_ImVector_ImFontConfigVector",
								"ImVector_ImFontGlyph_ImVector_ImFontGlyphVector",
								"ImVector_TextRange_ImVector_TextRangeVector",
								"ImVector_CustomRect_ImVector_CustomRectVector",
								"ImVector_ImDrawChannel_ImVector_ImDrawChannelVector",
								"ImVector_char_ImVector_charVector",
								"ImVector_ImTextureID_ImVector_ImTextureIDVector",
								"ImVector_ImDrawVert_ImVector_ImDrawVertVector",
								"ImVector_int_ImVector_intVector",
								"ImVector_Pair_ImVector_PairVector",
								"ImVector_ImFontPtr_ImVector_ImFontPtrVector",
								"ImVector_ImVec4_ImVector_ImVec4Vector",
								"ImVector_ImDrawCmd_ImVector_ImDrawCmdVector",
								"ImVector_ImDrawIdx_ImVector_ImDrawIdxVector",
								"ImVector_ImVec2_ImVector_ImVec2Vector",
								"ImVector_float_empty",
								"ImVector_ImWchar_empty",
								"ImVector_ImFontConfig_empty",
								"ImVector_ImFontGlyph_empty",
								"ImVector_TextRange_empty",
								"ImVector_CustomRect_empty",
								"ImVector_ImDrawChannel_empty",
								"ImVector_char_empty",
								"ImVector_ImTextureID_empty",
								"ImVector_ImDrawVert_empty",
								"ImVector_int_empty",
								"ImVector_Pair_empty",
								"ImVector_ImFontPtr_empty",
								"ImVector_ImVec4_empty",
								"ImVector_ImDrawCmd_empty",
								"ImVector_ImDrawIdx_empty",
								"ImVector_ImVec2_empty",
								"ImVector_float_size",
								"ImVector_ImWchar_size",
								"ImVector_ImFontConfig_size",
								"ImVector_ImFontGlyph_size",
								"ImVector_TextRange_size",
								"ImVector_CustomRect_size",
								"ImVector_ImDrawChannel_size",
								"ImVector_char_size",
								"ImVector_ImTextureID_size",
								"ImVector_ImDrawVert_size",
								"ImVector_int_size",
								"ImVector_Pair_size",
								"ImVector_ImFontPtr_size",
								"ImVector_ImVec4_size",
								"ImVector_ImDrawCmd_size",
								"ImVector_ImDrawIdx_size",
								"ImVector_ImVec2_size",
								"ImVector_float_size_in_bytes",
								"ImVector_ImWchar_size_in_bytes",
								"ImVector_ImFontConfig_size_in_bytes",
								"ImVector_ImFontGlyph_size_in_bytes",
								"ImVector_TextRange_size_in_bytes",
								"ImVector_CustomRect_size_in_bytes",
								"ImVector_ImDrawChannel_size_in_bytes",
								"ImVector_char_size_in_bytes",
								"ImVector_ImTextureID_size_in_bytes",
								"ImVector_ImDrawVert_size_in_bytes",
								"ImVector_int_size_in_bytes",
								"ImVector_Pair_size_in_bytes",
								"ImVector_ImFontPtr_size_in_bytes",
								"ImVector_ImVec4_size_in_bytes",
								"ImVector_ImDrawCmd_size_in_bytes",
								"ImVector_ImDrawIdx_size_in_bytes",
								"ImVector_ImVec2_size_in_bytes",
								"ImVector_float_capacity",
								"ImVector_ImWchar_capacity",
								"ImVector_ImFontConfig_capacity",
								"ImVector_ImFontGlyph_capacity",
								"ImVector_TextRange_capacity",
								"ImVector_CustomRect_capacity",
								"ImVector_ImDrawChannel_capacity",
								"ImVector_char_capacity",
								"ImVector_ImTextureID_capacity",
								"ImVector_ImDrawVert_capacity",
								"ImVector_int_capacity",
								"ImVector_Pair_capacity",
								"ImVector_ImFontPtr_capacity",
								"ImVector_ImVec4_capacity",
								"ImVector_ImDrawCmd_capacity",
								"ImVector_ImDrawIdx_capacity",
								"ImVector_ImVec2_capacity",
								"ImVector_float_clear",
								"ImVector_ImWchar_clear",
								"ImVector_ImFontConfig_clear",
								"ImVector_ImFontGlyph_clear",
								"ImVector_TextRange_clear",
								"ImVector_CustomRect_clear",
								"ImVector_ImDrawChannel_clear",
								"ImVector_char_clear",
								"ImVector_ImTextureID_clear",
								"ImVector_ImDrawVert_clear",
								"ImVector_int_clear",
								"ImVector_Pair_clear",
								"ImVector_ImFontPtr_clear",
								"ImVector_ImVec4_clear",
								"ImVector_ImDrawCmd_clear",
								"ImVector_ImDrawIdx_clear",
								"ImVector_ImVec2_clear",
								"ImVector_float_begin",
								"ImVector_ImWchar_begin",
								"ImVector_ImFontConfig_begin",
								"ImVector_ImFontGlyph_begin",
								"ImVector_TextRange_begin",
								"ImVector_CustomRect_begin",
								"ImVector_ImDrawChannel_begin",
								"ImVector_char_begin",
								"ImVector_ImTextureID_begin",
								"ImVector_ImDrawVert_begin",
								"ImVector_int_begin",
								"ImVector_Pair_begin",
								"ImVector_ImFontPtr_begin",
								"ImVector_ImVec4_begin",
								"ImVector_ImDrawCmd_begin",
								"ImVector_ImDrawIdx_begin",
								"ImVector_ImVec2_begin",
								"ImVector_float_begin_const",
								"ImVector_ImWchar_begin_const",
								"ImVector_ImFontConfig_begin_const",
								"ImVector_ImFontGlyph_begin_const",
								"ImVector_TextRange_begin_const",
								"ImVector_CustomRect_begin_const",
								"ImVector_ImDrawChannel_begin_const",
								"ImVector_char_begin_const",
								"ImVector_ImTextureID_begin_const",
								"ImVector_ImDrawVert_begin_const",
								"ImVector_int_begin_const",
								"ImVector_Pair_begin_const",
								"ImVector_ImFontPtr_begin_const",
								"ImVector_ImVec4_begin_const",
								"ImVector_ImDrawCmd_begin_const",
								"ImVector_ImDrawIdx_begin_const",
								"ImVector_ImVec2_begin_const",
								"ImVector_float_end",
								"ImVector_ImWchar_end",
								"ImVector_ImFontConfig_end",
								"ImVector_ImFontGlyph_end",
								"ImVector_TextRange_end",
								"ImVector_CustomRect_end",
								"ImVector_ImDrawChannel_end",
								"ImVector_char_end",
								"ImVector_ImTextureID_end",
								"ImVector_ImDrawVert_end",
								"ImVector_int_end",
								"ImVector_Pair_end",
								"ImVector_ImFontPtr_end",
								"ImVector_ImVec4_end",
								"ImVector_ImDrawCmd_end",
								"ImVector_ImDrawIdx_end",
								"ImVector_ImVec2_end",
								"ImVector_float_end_const",
								"ImVector_ImWchar_end_const",
								"ImVector_ImFontConfig_end_const",
								"ImVector_ImFontGlyph_end_const",
								"ImVector_TextRange_end_const",
								"ImVector_CustomRect_end_const",
								"ImVector_ImDrawChannel_end_const",
								"ImVector_char_end_const",
								"ImVector_ImTextureID_end_const",
								"ImVector_ImDrawVert_end_const",
								"ImVector_int_end_const",
								"ImVector_Pair_end_const",
								"ImVector_ImFontPtr_end_const",
								"ImVector_ImVec4_end_const",
								"ImVector_ImDrawCmd_end_const",
								"ImVector_ImDrawIdx_end_const",
								"ImVector_ImVec2_end_const",
								"ImVector_float_front",
								"ImVector_ImWchar_front",
								"ImVector_ImFontConfig_front",
								"ImVector_ImFontGlyph_front",
								"ImVector_TextRange_front",
								"ImVector_CustomRect_front",
								"ImVector_ImDrawChannel_front",
								"ImVector_char_front",
								"ImVector_ImTextureID_front",
								"ImVector_ImDrawVert_front",
								"ImVector_int_front",
								"ImVector_Pair_front",
								"ImVector_ImFontPtr_front",
								"ImVector_ImVec4_front",
								"ImVector_ImDrawCmd_front",
								"ImVector_ImDrawIdx_front",
								"ImVector_ImVec2_front",
								"ImVector_float_front_const",
								"ImVector_ImWchar_front_const",
								"ImVector_ImFontConfig_front_const",
								"ImVector_ImFontGlyph_front_const",
								"ImVector_TextRange_front_const",
								"ImVector_CustomRect_front_const",
								"ImVector_ImDrawChannel_front_const",
								"ImVector_char_front_const",
								"ImVector_ImTextureID_front_const",
								"ImVector_ImDrawVert_front_const",
								"ImVector_int_front_const",
								"ImVector_Pair_front_const",
								"ImVector_ImFontPtr_front_const",
								"ImVector_ImVec4_front_const",
								"ImVector_ImDrawCmd_front_const",
								"ImVector_ImDrawIdx_front_const",
								"ImVector_ImVec2_front_const",
								"ImVector_float_back",
								"ImVector_ImWchar_back",
								"ImVector_ImFontConfig_back",
								"ImVector_ImFontGlyph_back",
								"ImVector_TextRange_back",
								"ImVector_CustomRect_back",
								"ImVector_ImDrawChannel_back",
								"ImVector_char_back",
								"ImVector_ImTextureID_back",
								"ImVector_ImDrawVert_back",
								"ImVector_int_back",
								"ImVector_Pair_back",
								"ImVector_ImFontPtr_back",
								"ImVector_ImVec4_back",
								"ImVector_ImDrawCmd_back",
								"ImVector_ImDrawIdx_back",
								"ImVector_ImVec2_back",
								"ImVector_float_back_const",
								"ImVector_ImWchar_back_const",
								"ImVector_ImFontConfig_back_const",
								"ImVector_ImFontGlyph_back_const",
								"ImVector_TextRange_back_const",
								"ImVector_CustomRect_back_const",
								"ImVector_ImDrawChannel_back_const",
								"ImVector_char_back_const",
								"ImVector_ImTextureID_back_const",
								"ImVector_ImDrawVert_back_const",
								"ImVector_int_back_const",
								"ImVector_Pair_back_const",
								"ImVector_ImFontPtr_back_const",
								"ImVector_ImVec4_back_const",
								"ImVector_ImDrawCmd_back_const",
								"ImVector_ImDrawIdx_back_const",
								"ImVector_ImVec2_back_const",
								"ImVector_float_swap",
								"ImVector_ImWchar_swap",
								"ImVector_ImFontConfig_swap",
								"ImVector_ImFontGlyph_swap",
								"ImVector_TextRange_swap",
								"ImVector_CustomRect_swap",
								"ImVector_ImDrawChannel_swap",
								"ImVector_char_swap",
								"ImVector_ImTextureID_swap",
								"ImVector_ImDrawVert_swap",
								"ImVector_int_swap",
								"ImVector_Pair_swap",
								"ImVector_ImFontPtr_swap",
								"ImVector_ImVec4_swap",
								"ImVector_ImDrawCmd_swap",
								"ImVector_ImDrawIdx_swap",
								"ImVector_ImVec2_swap",
								"ImVector_float__grow_capacity",
								"ImVector_ImWchar__grow_capacity",
								"ImVector_ImFontConfig__grow_capacity",
								"ImVector_ImFontGlyph__grow_capacity",
								"ImVector_TextRange__grow_capacity",
								"ImVector_CustomRect__grow_capacity",
								"ImVector_ImDrawChannel__grow_capacity",
								"ImVector_char__grow_capacity",
								"ImVector_ImTextureID__grow_capacity",
								"ImVector_ImDrawVert__grow_capacity",
								"ImVector_int__grow_capacity",
								"ImVector_Pair__grow_capacity",
								"ImVector_ImFontPtr__grow_capacity",
								"ImVector_ImVec4__grow_capacity",
								"ImVector_ImDrawCmd__grow_capacity",
								"ImVector_ImDrawIdx__grow_capacity",
								"ImVector_ImVec2__grow_capacity",
								"ImVector_float_resize",
								"ImVector_ImWchar_resize",
								"ImVector_ImFontConfig_resize",
								"ImVector_ImFontGlyph_resize",
								"ImVector_TextRange_resize",
								"ImVector_CustomRect_resize",
								"ImVector_ImDrawChannel_resize",
								"ImVector_char_resize",
								"ImVector_ImTextureID_resize",
								"ImVector_ImDrawVert_resize",
								"ImVector_int_resize",
								"ImVector_Pair_resize",
								"ImVector_ImFontPtr_resize",
								"ImVector_ImVec4_resize",
								"ImVector_ImDrawCmd_resize",
								"ImVector_ImDrawIdx_resize",
								"ImVector_ImVec2_resize",
								"ImVector_float_resizeT",
								"ImVector_ImWchar_resizeT",
								"ImVector_ImFontConfig_resizeT",
								"ImVector_ImFontGlyph_resizeT",
								"ImVector_TextRange_resizeT",
								"ImVector_CustomRect_resizeT",
								"ImVector_ImDrawChannel_resizeT",
								"ImVector_char_resizeT",
								"ImVector_ImTextureID_resizeT",
								"ImVector_ImDrawVert_resizeT",
								"ImVector_int_resizeT",
								"ImVector_Pair_resizeT",
								"ImVector_ImFontPtr_resizeT",
								"ImVector_ImVec4_resizeT",
								"ImVector_ImDrawCmd_resizeT",
								"ImVector_ImDrawIdx_resizeT",
								"ImVector_ImVec2_resizeT",
								"ImVector_float_reserve",
								"ImVector_ImWchar_reserve",
								"ImVector_ImFontConfig_reserve",
								"ImVector_ImFontGlyph_reserve",
								"ImVector_TextRange_reserve",
								"ImVector_CustomRect_reserve",
								"ImVector_ImDrawChannel_reserve",
								"ImVector_char_reserve",
								"ImVector_ImTextureID_reserve",
								"ImVector_ImDrawVert_reserve",
								"ImVector_int_reserve",
								"ImVector_Pair_reserve",
								"ImVector_ImFontPtr_reserve",
								"ImVector_ImVec4_reserve",
								"ImVector_ImDrawCmd_reserve",
								"ImVector_ImDrawIdx_reserve",
								"ImVector_ImVec2_reserve",
								"ImVector_float_push_back",
								"ImVector_ImWchar_push_back",
								"ImVector_ImFontConfig_push_back",
								"ImVector_ImFontGlyph_push_back",
								"ImVector_TextRange_push_back",
								"ImVector_CustomRect_push_back",
								"ImVector_ImDrawChannel_push_back",
								"ImVector_char_push_back",
								"ImVector_ImTextureID_push_back",
								"ImVector_ImDrawVert_push_back",
								"ImVector_int_push_back",
								"ImVector_Pair_push_back",
								"ImVector_ImFontPtr_push_back",
								"ImVector_ImVec4_push_back",
								"ImVector_ImDrawCmd_push_back",
								"ImVector_ImDrawIdx_push_back",
								"ImVector_ImVec2_push_back",
								"ImVector_float_pop_back",
								"ImVector_ImWchar_pop_back",
								"ImVector_ImFontConfig_pop_back",
								"ImVector_ImFontGlyph_pop_back",
								"ImVector_TextRange_pop_back",
								"ImVector_CustomRect_pop_back",
								"ImVector_ImDrawChannel_pop_back",
								"ImVector_char_pop_back",
								"ImVector_ImTextureID_pop_back",
								"ImVector_ImDrawVert_pop_back",
								"ImVector_int_pop_back",
								"ImVector_Pair_pop_back",
								"ImVector_ImFontPtr_pop_back",
								"ImVector_ImVec4_pop_back",
								"ImVector_ImDrawCmd_pop_back",
								"ImVector_ImDrawIdx_pop_back",
								"ImVector_ImVec2_pop_back",
								"ImVector_float_push_front",
								"ImVector_ImWchar_push_front",
								"ImVector_ImFontConfig_push_front",
								"ImVector_ImFontGlyph_push_front",
								"ImVector_TextRange_push_front",
								"ImVector_CustomRect_push_front",
								"ImVector_ImDrawChannel_push_front",
								"ImVector_char_push_front",
								"ImVector_ImTextureID_push_front",
								"ImVector_ImDrawVert_push_front",
								"ImVector_int_push_front",
								"ImVector_Pair_push_front",
								"ImVector_ImFontPtr_push_front",
								"ImVector_ImVec4_push_front",
								"ImVector_ImDrawCmd_push_front",
								"ImVector_ImDrawIdx_push_front",
								"ImVector_ImVec2_push_front",
								"ImVector_float_erase",
								"ImVector_ImWchar_erase",
								"ImVector_ImFontConfig_erase",
								"ImVector_ImFontGlyph_erase",
								"ImVector_TextRange_erase",
								"ImVector_CustomRect_erase",
								"ImVector_ImDrawChannel_erase",
								"ImVector_char_erase",
								"ImVector_ImTextureID_erase",
								"ImVector_ImDrawVert_erase",
								"ImVector_int_erase",
								"ImVector_Pair_erase",
								"ImVector_ImFontPtr_erase",
								"ImVector_ImVec4_erase",
								"ImVector_ImDrawCmd_erase",
								"ImVector_ImDrawIdx_erase",
								"ImVector_ImVec2_erase",
								"ImVector_float_eraseTPtr",
								"ImVector_ImWchar_eraseTPtr",
								"ImVector_ImFontConfig_eraseTPtr",
								"ImVector_ImFontGlyph_eraseTPtr",
								"ImVector_TextRange_eraseTPtr",
								"ImVector_CustomRect_eraseTPtr",
								"ImVector_ImDrawChannel_eraseTPtr",
								"ImVector_char_eraseTPtr",
								"ImVector_ImTextureID_eraseTPtr",
								"ImVector_ImDrawVert_eraseTPtr",
								"ImVector_int_eraseTPtr",
								"ImVector_Pair_eraseTPtr",
								"ImVector_ImFontPtr_eraseTPtr",
								"ImVector_ImVec4_eraseTPtr",
								"ImVector_ImDrawCmd_eraseTPtr",
								"ImVector_ImDrawIdx_eraseTPtr",
								"ImVector_ImVec2_eraseTPtr",
								"ImVector_float_erase_unsorted",
								"ImVector_ImWchar_erase_unsorted",
								"ImVector_ImFontConfig_erase_unsorted",
								"ImVector_ImFontGlyph_erase_unsorted",
								"ImVector_TextRange_erase_unsorted",
								"ImVector_CustomRect_erase_unsorted",
								"ImVector_ImDrawChannel_erase_unsorted",
								"ImVector_char_erase_unsorted",
								"ImVector_ImTextureID_erase_unsorted",
								"ImVector_ImDrawVert_erase_unsorted",
								"ImVector_int_erase_unsorted",
								"ImVector_Pair_erase_unsorted",
								"ImVector_ImFontPtr_erase_unsorted",
								"ImVector_ImVec4_erase_unsorted",
								"ImVector_ImDrawCmd_erase_unsorted",
								"ImVector_ImDrawIdx_erase_unsorted",
								"ImVector_ImVec2_erase_unsorted",
								"ImVector_float_insert",
								"ImVector_ImWchar_insert",
								"ImVector_ImFontConfig_insert",
								"ImVector_ImFontGlyph_insert",
								"ImVector_TextRange_insert",
								"ImVector_CustomRect_insert",
								"ImVector_ImDrawChannel_insert",
								"ImVector_char_insert",
								"ImVector_ImTextureID_insert",
								"ImVector_ImDrawVert_insert",
								"ImVector_int_insert",
								"ImVector_Pair_insert",
								"ImVector_ImFontPtr_insert",
								"ImVector_ImVec4_insert",
								"ImVector_ImDrawCmd_insert",
								"ImVector_ImDrawIdx_insert",
								"ImVector_ImVec2_insert",
								"ImVector_float_contains",
								"ImVector_ImWchar_contains",
								"ImVector_char_contains",
								"ImVector_int_contains",
								"ImVector_float_index_from_ptr",
								"ImVector_ImWchar_index_from_ptr",
								"ImVector_ImFontConfig_index_from_ptr",
								"ImVector_ImFontGlyph_index_from_ptr",
								"ImVector_TextRange_index_from_ptr",
								"ImVector_CustomRect_index_from_ptr",
								"ImVector_ImDrawChannel_index_from_ptr",
								"ImVector_char_index_from_ptr",
								"ImVector_ImTextureID_index_from_ptr",
								"ImVector_ImDrawVert_index_from_ptr",
								"ImVector_int_index_from_ptr",
								"ImVector_Pair_index_from_ptr",
								"ImVector_ImFontPtr_index_from_ptr",
								"ImVector_ImVec4_index_from_ptr",
								"ImVector_ImDrawCmd_index_from_ptr",
								"ImVector_ImDrawIdx_index_from_ptr",
								"ImVector_ImVec2_index_from_ptr",
								"  igLogText",
								"ImGuiTextBuffer_appendf",
								"ImGuiTextBuffer",
								"  igGET_FLT_MAX",
								"  igColorConvertRGBtoHSV",
								"  igColorConvertHSVtoRGB",
								"ImVector_ImWchar_create",
								"ImVector_ImWchar_Init",
								"ImVector_ImWchar_UnInit"
=======
								"  render(doc, filename)",
								"  main(...args)",
								"\tvalue =>",
								"\tf =>"
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1706825354.61,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "eagle2svg.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2302,
						"regions":
						{
						},
						"selection":
						[
							[
								1796,
								1796
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 68,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
<<<<<<< HEAD
							"tabs_extra_last_activated": 1705107473.49,
=======
							"tabs_extra_last_activated": 1706435692.32,
>>>>>>> 7cc55fff637e961748587a20f6cf4a182d0e8fc8
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 25.0,
						"translation.y": 1098.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "eagle-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39261,
						"regions":
						{
							"col_00AFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										14319,
										14332
									]
								],
								"scope": "col_00AFFFFF"
							},
							"col_00AFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00AFFFFF_circle.png",
								"regions":
								[
									[
										14253,
										14253
									]
								],
								"scope": "col_gutter"
							},
							"col_D700FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										14295,
										14309
									]
								],
								"scope": "col_D700FFFF"
							},
							"col_D700FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D700FFFF_circle.png",
								"regions":
								[
									[
										14253,
										14253
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										31283,
										31290
									],
									[
										32143,
										32147
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										31243,
										31243
									],
									[
										32128,
										32128
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								39082,
								39082
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1373,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1705108425.92,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26818.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/geom/graph.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11223,
						"regions":
						{
						},
						"selection":
						[
							[
								10780,
								10780
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 316,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1706825339.75,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6078.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "CToy-1.05-Linux64-x86_64/src/cimgui/cimgui.hpp",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 85929,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19615.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"smd.jy",
				"quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll"
			],
			[
				"via.js",
				"lib/eagle/components/via.js"
			],
			[
				"hole.js",
				"lib/eagle/components/hole.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"polygon",
				"lib/eagle/components/polygon.js"
			],
			[
				"polygon.js",
				"lib/geom/polygon.js"
			],
			[
				"symbol",
				"lib/eagle/components/symbol.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"components/sym",
				"lib/eagle/components/symbol.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"github-user",
				"github-userscript.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"minnet-clie",
				"quickjs/qjs-net/src/minnet-client.c"
			],
			[
				"callbaCK.C",
				"quickjs/qjs-net/lib/callback.c"
			],
			[
				"internal",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"eagle2",
				"eagle2gerber.js"
			],
			[
				"pcb-con",
				"pcb-conversion.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"param.js",
				"param.js"
			],
			[
				"make",
				"make-bitmap.js"
			],
			[
				"test_png",
				"qjs-opencv/tests/test_png.js"
			],
			[
				"stream/utils",
				"lib/stream/utils.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 330.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
