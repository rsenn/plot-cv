{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"js_",
				"js_mysqlresult_class_id"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			],
			[
				"defineP",
				"defineProperties(...)"
			],
			[
				"CMAKE_CURR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"gener",
				"generate_module_header"
			],
			[
				"RINGBUFFER_C",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"RINGBUFFER_CONSU",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"JS_NewArra",
				"JS_NewArrayBufferCopy"
			],
			[
				"RINGBU",
				"RINGBUFFER_INSERT"
			],
			[
				"hea",
				"headers_sent"
			],
			[
				"PR",
				"PRIi64"
			],
			[
				"db",
				"dbuf_init2"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  source =>\n  line =>\n   e =>\n() =>\n   e =>\nSourceLine = ({ lineno, text, active, children }) =>\nSourceText = ({ text, filename }) =>\n  line =>\n(acc, tokens, i) =>\n([type, token]) =>\n(acc, [type, token]) =>\nSourceFile = props =>\n   resp =>\nLoadSource(filename)\nStart(args, address)\nConnect(address)\nInitiate(command, address, connect = false, args)\nTokenizeJS(data, filename)\n(acc, [type, c]) =>\n(acc, l) =>\nCreateSocket(endpoint)\nReadSocket()\n  .sendMessage = function(msg)\nGetVariables(ref = 0)\nUpdatePosition()\nStepIn()\nStepOut()\nNext()\nContinue()\nPause()\nEvaluate(expression)\nStackTrace()\nSendRequest(command, args = {})\n(resolve, reject) =>\nRenderUI()",
			"settings":
			{
				"buffer_size": 656,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					724,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								2001,
								2009
							],
							[
								2025,
								2045
							],
							[
								2574,
								2607
							],
							[
								2697,
								2728
							],
							[
								3054,
								3076
							],
							[
								3290,
								3331
							],
							[
								3342,
								3355
							],
							[
								3433,
								3468
							],
							[
								3513,
								3531
							],
							[
								3567,
								3609
							],
							[
								3675,
								3708
							],
							[
								3730,
								3734
							],
							[
								4123,
								4128
							],
							[
								4178,
								4182
							],
							[
								4209,
								4213
							],
							[
								4241,
								4245
							],
							[
								4268,
								4288
							],
							[
								4342,
								4346
							],
							[
								4416,
								4438
							],
							[
								4528,
								4533
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6487,
								6534
							],
							[
								7070,
								7106
							],
							[
								7219,
								7228
							],
							[
								7464,
								7472
							],
							[
								7578,
								7585
							],
							[
								7635,
								7659
							],
							[
								8040,
								8051
							],
							[
								8141,
								8152
							],
							[
								8216,
								8227
							],
							[
								8281,
								8290
							],
							[
								8328,
								8339
							],
							[
								8427,
								8454
							],
							[
								8592,
								8596
							],
							[
								8620,
								8627
							],
							[
								8660,
								8676
							],
							[
								8805,
								8850
							],
							[
								9066,
								9124
							],
							[
								9436,
								9458
							],
							[
								9831,
								9841
							],
							[
								10085,
								10099
							],
							[
								11034,
								11058
							],
							[
								11184,
								11188
							],
							[
								11280,
								11294
							],
							[
								11394,
								11410
							],
							[
								11842,
								11855
							],
							[
								11873,
								11878
							],
							[
								11960,
								11967
							],
							[
								11995,
								12000
							],
							[
								12122,
								12147
							],
							[
								12322,
								12353
							],
							[
								12430,
								12441
							],
							[
								14029,
								14060
							],
							[
								14590,
								14623
							],
							[
								14895,
								14930
							],
							[
								15015,
								15048
							],
							[
								15992,
								16002
							],
							[
								16796,
								16800
							],
							[
								17216,
								17223
							],
							[
								17616,
								17652
							],
							[
								17864,
								17868
							],
							[
								18493,
								18525
							],
							[
								18818,
								18822
							],
							[
								19292,
								19309
							],
							[
								19454,
								19489
							],
							[
								20243,
								20248
							],
							[
								20975,
								20979
							],
							[
								21073,
								21077
							],
							[
								21197,
								21206
							],
							[
								21336,
								21343
							],
							[
								21624,
								21631
							],
							[
								21712,
								21719
							],
							[
								21783,
								21799
							],
							[
								21864,
								21884
							],
							[
								22583,
								22595
							],
							[
								22694,
								22706
							],
							[
								22908,
								22924
							],
							[
								23018,
								23031
							],
							[
								23307,
								23325
							],
							[
								23515,
								23544
							],
							[
								23952,
								23971
							],
							[
								24404,
								24428
							],
							[
								26037,
								26059
							],
							[
								26532,
								26553
							],
							[
								27104,
								27123
							],
							[
								27557,
								27565
							],
							[
								30268,
								30280
							],
							[
								32101,
								32136
							],
							[
								32725,
								32744
							],
							[
								32926,
								32943
							],
							[
								32988,
								33001
							],
							[
								33037,
								33047
							],
							[
								33892,
								33908
							],
							[
								34040,
								34059
							],
							[
								34070,
								34089
							],
							[
								34115,
								34135
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"([dir]) =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							"s =>",
							"async function* files(req, resp)",
							"n =>",
							"([name, type]) =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onRequest(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMBwAAICB2YWx1ZSA9PgogICAobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpFeGVjVG9vbChjbWQsIC4uLmFyZ3MpCkdldE1pbWUoZmlsZSkKTWF0Y2hlcihwYXR0ZXJuLCB0ID0gYXJnID0+IGFyZykKICAgKC4uLmFyZ3MpID0+CktleU9yVmFsdWVNYXRjaGVyKHBhdHRlcm4pCiAgIChba2V5LCB2YWx1ZV0pID0+CkdldFJvb3REaXJlY3RvcmllcyhwYXR0ZXJuID0gJyonKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CiAgZCA9PgogIGQgPT4KR2V0RGlyKGRpcikKICBuID0+CkRpck5hbWUobmFtZSkKICBpdCA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAgKGEsIHYpID0+CiAgICh2LCBwdiwgbykgPT4KICAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MpID0+CiAgLm91dCA9IHMgPT4KICB0ZXN0KHJlcSwgcmVzcCkKICBwcm94eShyZXEsIHJlc3ApCiAgY29uZmlnKHJlcSwgcmVzcCkKICBmaWxlKHJlcSwgcmVzcCkKKFtkaXJdKSA9PgogIGYgPT4KICBmaWxlID0+CiAgdXBsb2FkcyhyZXEsIHJlc3ApCiAgcyA9PgogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CihbbmFtZSwgdHlwZV0pID0+CiAgZmlsZXMyKHJlcSwgcmVzcCkKICAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUsIHJlbF0pID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgc3RyaW5nKGEsIGIpCiAgbnVtYmVyKGEsIGIpCihbbmFtZSwgb2JqXSkgPT4KKHsgbmFtZSB9KSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uUmVxdWVzdCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICBvbkZpbmFsaXplKCkKICAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACMBwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					725,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMBwAAICB2YWx1ZSA9PgogICAobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpFeGVjVG9vbChjbWQsIC4uLmFyZ3MpCkdldE1pbWUoZmlsZSkKTWF0Y2hlcihwYXR0ZXJuLCB0ID0gYXJnID0+IGFyZykKICAgKC4uLmFyZ3MpID0+CktleU9yVmFsdWVNYXRjaGVyKHBhdHRlcm4pCiAgIChba2V5LCB2YWx1ZV0pID0+CkdldFJvb3REaXJlY3RvcmllcyhwYXR0ZXJuID0gJyonKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CiAgZCA9PgogIGQgPT4KR2V0RGlyKGRpcikKICBuID0+CkRpck5hbWUobmFtZSkKICBpdCA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAgKGEsIHYpID0+CiAgICh2LCBwdiwgbykgPT4KICAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MpID0+CiAgLm91dCA9IHMgPT4KICB0ZXN0KHJlcSwgcmVzcCkKICBwcm94eShyZXEsIHJlc3ApCiAgY29uZmlnKHJlcSwgcmVzcCkKICBmaWxlKHJlcSwgcmVzcCkKKFtkaXJdKSA9PgogIGYgPT4KICBmaWxlID0+CiAgdXBsb2FkcyhyZXEsIHJlc3ApCiAgcyA9PgogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CihbbmFtZSwgdHlwZV0pID0+CiAgZmlsZXMyKHJlcSwgcmVzcCkKICAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUsIHJlbF0pID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgc3RyaW5nKGEsIGIpCiAgbnVtYmVyKGEsIGIpCihbbmFtZSwgb2JqXSkgPT4KKHsgbmFtZSB9KSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uUmVxdWVzdCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICBvbkZpbmFsaXplKCkKICAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					726,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/aluminiumknopf-silber-o22mm-schwarze-linie-rnd-components-rnd-210-00345.html",
						"symkeys":
						[
							[
								13520,
								13539
							],
							[
								14998,
								15004
							],
							[
								15035,
								15046
							],
							[
								16883,
								16892
							],
							[
								17102,
								17122
							],
							[
								17386,
								17409
							],
							[
								17692,
								17715
							],
							[
								19657,
								19691
							],
							[
								19746,
								19784
							],
							[
								20237,
								20254
							],
							[
								20329,
								20352
							],
							[
								20426,
								20436
							],
							[
								20750,
								20763
							],
							[
								23555,
								23560
							],
							[
								23626,
								23644
							],
							[
								150204,
								150211
							],
							[
								151335,
								151343
							],
							[
								165220,
								165249
							],
							[
								166723,
								166759
							],
							[
								166918,
								166946
							],
							[
								167341,
								167355
							],
							[
								167377,
								167393
							],
							[
								168305,
								168331
							],
							[
								168540,
								168568
							],
							[
								174762,
								174793
							],
							[
								175047,
								175076
							],
							[
								175317,
								175350
							],
							[
								175925,
								175935
							],
							[
								184407,
								184426
							],
							[
								184473,
								184479
							],
							[
								184774,
								184789
							],
							[
								185047,
								185059
							],
							[
								185366,
								185383
							],
							[
								187286,
								187297
							],
							[
								187822,
								187826
							],
							[
								190631,
								190643
							],
							[
								191107,
								191118
							],
							[
								191412,
								191428
							],
							[
								192851,
								192865
							],
							[
								194728,
								194742
							],
							[
								197186,
								197200
							],
							[
								197891,
								197917
							],
							[
								198164,
								198172
							],
							[
								198255,
								198286
							],
							[
								198516,
								198534
							],
							[
								198795,
								198825
							],
							[
								199035,
								199077
							],
							[
								199221,
								199249
							],
							[
								199471,
								199511
							],
							[
								199636,
								199678
							],
							[
								199814,
								199847
							],
							[
								200415,
								200457
							],
							[
								200606,
								200653
							],
							[
								200995,
								201042
							],
							[
								201202,
								201249
							],
							[
								205142,
								205152
							],
							[
								205204,
								205223
							],
							[
								205279,
								205298
							],
							[
								205359,
								205377
							],
							[
								205438,
								205452
							],
							[
								205521,
								205541
							],
							[
								206240,
								206250
							],
							[
								206338,
								206356
							],
							[
								207439,
								207473
							],
							[
								207585,
								207599
							],
							[
								209090,
								209119
							],
							[
								211249,
								211259
							],
							[
								212046,
								212060
							],
							[
								212871,
								212893
							],
							[
								213847,
								213868
							],
							[
								214246,
								214272
							],
							[
								214916,
								214933
							],
							[
								217115,
								217118
							],
							[
								217119,
								217122
							],
							[
								217123,
								217139
							],
							[
								217610,
								217619
							],
							[
								218038,
								218047
							],
							[
								218048,
								218060
							],
							[
								218061,
								218074
							],
							[
								218575,
								218587
							],
							[
								219025,
								219042
							],
							[
								219487,
								219507
							],
							[
								219977,
								219988
							],
							[
								220413,
								220417
							],
							[
								222709,
								222721
							],
							[
								222879,
								222891
							],
							[
								223048,
								223060
							],
							[
								223196,
								223208
							],
							[
								223329,
								223341
							],
							[
								224379,
								224406
							],
							[
								224487,
								224522
							],
							[
								224616,
								224643
							],
							[
								224715,
								224742
							],
							[
								224827,
								224855
							],
							[
								225065,
								225083
							],
							[
								225771,
								225781
							],
							[
								226193,
								226206
							],
							[
								226327,
								226335
							],
							[
								226336,
								226347
							],
							[
								226402,
								226416
							],
							[
								226507,
								226521
							],
							[
								228001,
								228034
							],
							[
								228373,
								228398
							],
							[
								228539,
								228553
							],
							[
								230238,
								230267
							],
							[
								232740,
								232748
							],
							[
								233750,
								233758
							],
							[
								233918,
								233930
							],
							[
								234575,
								234588
							],
							[
								235025,
								235031
							],
							[
								235368,
								235396
							],
							[
								235484,
								235491
							],
							[
								235716,
								235743
							],
							[
								236118,
								236139
							],
							[
								236538,
								236568
							],
							[
								236879,
								236915
							],
							[
								237104,
								237132
							],
							[
								238319,
								238355
							],
							[
								239903,
								239946
							],
							[
								240105,
								240140
							],
							[
								260065,
								260090
							],
							[
								260387,
								260409
							],
							[
								260657,
								260679
							],
							[
								260962,
								260972
							],
							[
								261503,
								261545
							],
							[
								261617,
								261659
							],
							[
								262217,
								262230
							],
							[
								262527,
								262537
							],
							[
								262754,
								262764
							],
							[
								262891,
								262916
							],
							[
								263400,
								263414
							],
							[
								263711,
								263753
							],
							[
								263825,
								263867
							],
							[
								264017,
								264034
							],
							[
								265496,
								265532
							],
							[
								265820,
								265877
							],
							[
								266024,
								266035
							],
							[
								266537,
								266547
							],
							[
								267120,
								267130
							],
							[
								267403,
								267414
							],
							[
								268067,
								268077
							],
							[
								269370,
								269387
							],
							[
								269624,
								269642
							],
							[
								269764,
								269782
							],
							[
								270071,
								270078
							],
							[
								270455,
								270460
							],
							[
								270782,
								270806
							],
							[
								271080,
								271098
							],
							[
								271149,
								271170
							],
							[
								271599,
								271631
							],
							[
								271801,
								271829
							],
							[
								273080,
								273112
							],
							[
								273276,
								273308
							],
							[
								273526,
								273536
							],
							[
								275095,
								275119
							],
							[
								275178,
								275193
							],
							[
								275418,
								275451
							]
						],
						"symlist":
						[
							"function(w,d,s,l,i)",
							"header",
							"wt_refpoint",
							"loginForm",
							"metahd-account-login",
							"metahd-account-password",
							"metahd-account-remember",
							"template-metahd-item-cart-is-empty",
							"template-metahd-item-cart-product-item",
							"placeholder-value",
							"placeholder-value-empty",
							"searchForm",
							"metahd-search",
							"f_fid",
							"selected-cat-field",
							"spinner",
							"man-feat",
							"template-lightboxshopsettings",
							"template-lightboxshopsettings-option",
							"template-servicenav-settings",
							"suggest-target",
							"template-suggest",
							"template-suggest-row-terms",
							"template-suggest-row-product",
							"template-suggest-row-searchTerm",
							"template-suggest-row-category",
							"template-suggest-row-manufacturer",
							"breadcrumb",
							"article-number-text",
							"myText",
							"article-tooltip",
							"copyTypeName",
							"article-tooltip-1",
							"zoom-item-v",
							"gal1",
							"product_code",
							"inStockText",
							"deliveryTimeText",
							"leadTimeFlyout",
							"leadTimeFlyout",
							"leadTimeFlyout",
							"pdp.availability.notify.me",
							"modalLog",
							"popup.availability.get.notified",
							"stock_notification",
							"popup.availability.enter.email",
							"popup.stock.notification.email.placeholder",
							"popup.availability.notify.me",
							"popup.stock.notification.email.blankText",
							"popup.stock.notification.email.invalidText",
							"popup.availability.privacy.policy",
							"popup.stock.notification.email.successText",
							"popup.success.rohs.underReview.continueShopping",
							"popup.stock.notification.email.existingUserText",
							"popup.failure.rohs.underReview.continueShopping",
							"hidden-pos",
							"hidden-origPosition",
							"hidden-origPageSize",
							"hidden-searchQuery",
							"hiddenPageType",
							"hidden-filterapplied",
							"countItems",
							"pdpSearchDatalayer",
							"product-alternatives-list-carousel",
							"alternativesVm",
							"product-alternatives-template",
							"modalImage",
							"modalQuotation",
							"modalQuotationQuantity",
							"modalQuotationMessage",
							"modalQuotationConfirmation",
							"info-tab_download",
							"Art",
							"des",
							"Schalterzubeh√∂rs",
							"Schaftart",
							"Geeignete",
							"Schaftgr√∂sse",
							"(Durchmesser)",
							"Beschriftung",
							"Kappe/Linsenfarbe",
							"Kappe/Linsenmaterial",
							"Durchmesser",
							"H√∂he",
							"error-type-1",
							"error-type-2",
							"error-type-3",
							"error-type-4",
							"error-type-5",
							"tmpl-validation-error-radio",
							"tmpl-validation-error-checkboxgroup",
							"tmpl-validation-error-empty",
							"tmpl-validation-error-email",
							"tmpl-validation-error-length",
							"info-tab_technical",
							"ROHS-title",
							"ROHS-pdf-link",
							"REACH-id",
							"flex-holder",
							"REACH-title-id",
							"REACH-id-empty",
							"rohs.underReview.continueShopping",
							"product-alternatives-list",
							"alternativesVm",
							"product-alternatives-template",
							"appfirst",
							"wrapper3",
							"rightColumn2",
							"reevoo_tabbed",
							"footer",
							"footerNewsletterHeaderTeaser",
							"command",
							"footerNewsletterInfoMessage",
							"newsletterFooterEmail",
							"footerNewsletterSuccessMessage",
							"tmpl-newslettersubscribe-error-email",
							"onCaptchaSubmit = function()",
							"template-lightboxshopsettings-mobile",
							"template-lightboxshopsettings-option-mobile",
							"template-servicenav-settings-mobile",
							"metaLoginForm_import_tool",
							"j_username_import_tool",
							"j_password_import_tool",
							"j_remember",
							"tmpl-lightbox-login-validation-error-empty",
							"tmpl-lightbox-login-validation-error-email",
							"metaLoginForm",
							"j_username",
							"j_password",
							"j_remember_login-required",
							"customredirect",
							"tmpl-lightbox-login-validation-error-empty",
							"tmpl-lightbox-login-validation-error-email",
							"modalShoppingList",
							"tmpl-lightbox-shoppinglist-list-item",
							"tmpl-lightbox-shoppinglist-validation-error-checkboxgroup",
							"modalStatus",
							"modalYesNo",
							"modalVideo",
							"backenddata",
							"hotjardata",
							"popupSubInfoTitle",
							"popupSubInfoNotice",
							"popupSubInfoUpdate",
							"command",
							"email",
							"subscribe.popup.thankyou",
							"popupSubDataChoice",
							"popupSubPrivacyPolicy",
							"tmpl-subscribe-popup-error-email",
							"onCaptchaSubmit = function()",
							"setup: function( _, ns, handle )",
							"setup: function( _, ns, handle )",
							"function()",
							"function (w, d, t, r, u)",
							"f = function ()",
							".onreadystatechange = function ()"
						]
					},
					"AQAAAAAAAAAAAAAAKw4AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					727,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAuDgAAICBmdW5jdGlvbih3LGQscyxsLGkpCiAgaGVhZGVyCiAgd3RfcmVmcG9pbnQKICBsb2dpbkZvcm0KICBtZXRhaGQtYWNjb3VudC1sb2dpbgogIG1ldGFoZC1hY2NvdW50LXBhc3N3b3JkCiAgbWV0YWhkLWFjY291bnQtcmVtZW1iZXIKICB0ZW1wbGF0ZS1tZXRhaGQtaXRlbS1jYXJ0LWlzLWVtcHR5CiAgdGVtcGxhdGUtbWV0YWhkLWl0ZW0tY2FydC1wcm9kdWN0LWl0ZW0KICBwbGFjZWhvbGRlci12YWx1ZQogIHBsYWNlaG9sZGVyLXZhbHVlLWVtcHR5CiAgc2VhcmNoRm9ybQogIG1ldGFoZC1zZWFyY2gKICBmX2ZpZAogIHNlbGVjdGVkLWNhdC1maWVsZAogIHNwaW5uZXIKICBtYW4tZmVhdAogIHRlbXBsYXRlLWxpZ2h0Ym94c2hvcHNldHRpbmdzCiAgdGVtcGxhdGUtbGlnaHRib3hzaG9wc2V0dGluZ3Mtb3B0aW9uCiAgdGVtcGxhdGUtc2VydmljZW5hdi1zZXR0aW5ncwogIHN1Z2dlc3QtdGFyZ2V0CiAgdGVtcGxhdGUtc3VnZ2VzdAogIHRlbXBsYXRlLXN1Z2dlc3Qtcm93LXRlcm1zCiAgdGVtcGxhdGUtc3VnZ2VzdC1yb3ctcHJvZHVjdAogIHRlbXBsYXRlLXN1Z2dlc3Qtcm93LXNlYXJjaFRlcm0KICB0ZW1wbGF0ZS1zdWdnZXN0LXJvdy1jYXRlZ29yeQogIHRlbXBsYXRlLXN1Z2dlc3Qtcm93LW1hbnVmYWN0dXJlcgogIGJyZWFkY3J1bWIKICBhcnRpY2xlLW51bWJlci10ZXh0CiAgbXlUZXh0CiAgYXJ0aWNsZS10b29sdGlwCiAgY29weVR5cGVOYW1lCiAgYXJ0aWNsZS10b29sdGlwLTEKICB6b29tLWl0ZW0tdgogIGdhbDEKICBwcm9kdWN0X2NvZGUKICBpblN0b2NrVGV4dAogIGRlbGl2ZXJ5VGltZVRleHQKICBsZWFkVGltZUZseW91dAogIGxlYWRUaW1lRmx5b3V0CiAgbGVhZFRpbWVGbHlvdXQKICBwZHAuYXZhaWxhYmlsaXR5Lm5vdGlmeS5tZQogIG1vZGFsTG9nCiAgcG9wdXAuYXZhaWxhYmlsaXR5LmdldC5ub3RpZmllZAogIHN0b2NrX25vdGlmaWNhdGlvbgogIHBvcHVwLmF2YWlsYWJpbGl0eS5lbnRlci5lbWFpbAogIHBvcHVwLnN0b2NrLm5vdGlmaWNhdGlvbi5lbWFpbC5wbGFjZWhvbGRlcgogIHBvcHVwLmF2YWlsYWJpbGl0eS5ub3RpZnkubWUKICBwb3B1cC5zdG9jay5ub3RpZmljYXRpb24uZW1haWwuYmxhbmtUZXh0CiAgcG9wdXAuc3RvY2subm90aWZpY2F0aW9uLmVtYWlsLmludmFsaWRUZXh0CiAgcG9wdXAuYXZhaWxhYmlsaXR5LnByaXZhY3kucG9saWN5CiAgcG9wdXAuc3RvY2subm90aWZpY2F0aW9uLmVtYWlsLnN1Y2Nlc3NUZXh0CiAgcG9wdXAuc3VjY2Vzcy5yb2hzLnVuZGVyUmV2aWV3LmNvbnRpbnVlU2hvcHBpbmcKICBwb3B1cC5zdG9jay5ub3RpZmljYXRpb24uZW1haWwuZXhpc3RpbmdVc2VyVGV4dAogIHBvcHVwLmZhaWx1cmUucm9ocy51bmRlclJldmlldy5jb250aW51ZVNob3BwaW5nCiAgaGlkZGVuLXBvcwogIGhpZGRlbi1vcmlnUG9zaXRpb24KICBoaWRkZW4tb3JpZ1BhZ2VTaXplCiAgaGlkZGVuLXNlYXJjaFF1ZXJ5CiAgaGlkZGVuUGFnZVR5cGUKICBoaWRkZW4tZmlsdGVyYXBwbGllZAogIGNvdW50SXRlbXMKICBwZHBTZWFyY2hEYXRhbGF5ZXIKICBwcm9kdWN0LWFsdGVybmF0aXZlcy1saXN0LWNhcm91c2VsCiAgYWx0ZXJuYXRpdmVzVm0KICBwcm9kdWN0LWFsdGVybmF0aXZlcy10ZW1wbGF0ZQogIG1vZGFsSW1hZ2UKICBtb2RhbFF1b3RhdGlvbgogIG1vZGFsUXVvdGF0aW9uUXVhbnRpdHkKICBtb2RhbFF1b3RhdGlvbk1lc3NhZ2UKICBtb2RhbFF1b3RhdGlvbkNvbmZpcm1hdGlvbgogIGluZm8tdGFiX2Rvd25sb2FkCkFydAogIGRlcwpTY2hhbHRlcnp1YmVow7ZycwpTY2hhZnRhcnQKR2VlaWduZXRlClNjaGFmdGdyw7Zzc2UKKER1cmNobWVzc2VyKQpCZXNjaHJpZnR1bmcKS2FwcGUvTGluc2VuZmFyYmUKS2FwcGUvTGluc2VubWF0ZXJpYWwKRHVyY2htZXNzZXIKSMO2aGUKICBlcnJvci10eXBlLTEKICBlcnJvci10eXBlLTIKICBlcnJvci10eXBlLTMKICBlcnJvci10eXBlLTQKICBlcnJvci10eXBlLTUKICB0bXBsLXZhbGlkYXRpb24tZXJyb3ItcmFkaW8KICB0bXBsLXZhbGlkYXRpb24tZXJyb3ItY2hlY2tib3hncm91cAogIHRtcGwtdmFsaWRhdGlvbi1lcnJvci1lbXB0eQogIHRtcGwtdmFsaWRhdGlvbi1lcnJvci1lbWFpbAogIHRtcGwtdmFsaWRhdGlvbi1lcnJvci1sZW5ndGgKICBpbmZvLXRhYl90ZWNobmljYWwKUk9IUy10aXRsZQpST0hTLXBkZi1saW5rClJFQUNILWlkCiAgZmxleC1ob2xkZXIKUkVBQ0gtdGl0bGUtaWQKUkVBQ0gtaWQtZW1wdHkKICByb2hzLnVuZGVyUmV2aWV3LmNvbnRpbnVlU2hvcHBpbmcKICBwcm9kdWN0LWFsdGVybmF0aXZlcy1saXN0CiAgYWx0ZXJuYXRpdmVzVm0KICBwcm9kdWN0LWFsdGVybmF0aXZlcy10ZW1wbGF0ZQogIGFwcGZpcnN0CiAgd3JhcHBlcjMKICByaWdodENvbHVtbjIKICByZWV2b29fdGFiYmVkCiAgZm9vdGVyCiAgZm9vdGVyTmV3c2xldHRlckhlYWRlclRlYXNlcgogIGNvbW1hbmQKICBmb290ZXJOZXdzbGV0dGVySW5mb01lc3NhZ2UKICBuZXdzbGV0dGVyRm9vdGVyRW1haWwKICBmb290ZXJOZXdzbGV0dGVyU3VjY2Vzc01lc3NhZ2UKICB0bXBsLW5ld3NsZXR0ZXJzdWJzY3JpYmUtZXJyb3ItZW1haWwKICBvbkNhcHRjaGFTdWJtaXQgPSBmdW5jdGlvbigpCiAgdGVtcGxhdGUtbGlnaHRib3hzaG9wc2V0dGluZ3MtbW9iaWxlCiAgdGVtcGxhdGUtbGlnaHRib3hzaG9wc2V0dGluZ3Mtb3B0aW9uLW1vYmlsZQogIHRlbXBsYXRlLXNlcnZpY2VuYXYtc2V0dGluZ3MtbW9iaWxlCiAgbWV0YUxvZ2luRm9ybV9pbXBvcnRfdG9vbAogIGpfdXNlcm5hbWVfaW1wb3J0X3Rvb2wKICBqX3Bhc3N3b3JkX2ltcG9ydF90b29sCiAgal9yZW1lbWJlcgogIHRtcGwtbGlnaHRib3gtbG9naW4tdmFsaWRhdGlvbi1lcnJvci1lbXB0eQogIHRtcGwtbGlnaHRib3gtbG9naW4tdmFsaWRhdGlvbi1lcnJvci1lbWFpbAogIG1ldGFMb2dpbkZvcm0KICBqX3VzZXJuYW1lCiAgal9wYXNzd29yZAogIGpfcmVtZW1iZXJfbG9naW4tcmVxdWlyZWQKICBjdXN0b21yZWRpcmVjdAogIHRtcGwtbGlnaHRib3gtbG9naW4tdmFsaWRhdGlvbi1lcnJvci1lbXB0eQogIHRtcGwtbGlnaHRib3gtbG9naW4tdmFsaWRhdGlvbi1lcnJvci1lbWFpbAogIG1vZGFsU2hvcHBpbmdMaXN0CiAgdG1wbC1saWdodGJveC1zaG9wcGluZ2xpc3QtbGlzdC1pdGVtCiAgdG1wbC1saWdodGJveC1zaG9wcGluZ2xpc3QtdmFsaWRhdGlvbi1lcnJvci1jaGVja2JveGdyb3VwCiAgbW9kYWxTdGF0dXMKICBtb2RhbFllc05vCiAgbW9kYWxWaWRlbwogIGJhY2tlbmRkYXRhCiAgaG90amFyZGF0YQogIHBvcHVwU3ViSW5mb1RpdGxlCiAgcG9wdXBTdWJJbmZvTm90aWNlCiAgcG9wdXBTdWJJbmZvVXBkYXRlCiAgY29tbWFuZAogIGVtYWlsCiAgc3Vic2NyaWJlLnBvcHVwLnRoYW5reW91CiAgcG9wdXBTdWJEYXRhQ2hvaWNlCiAgcG9wdXBTdWJQcml2YWN5UG9saWN5CiAgdG1wbC1zdWJzY3JpYmUtcG9wdXAtZXJyb3ItZW1haWwKICBvbkNhcHRjaGFTdWJtaXQgPSBmdW5jdGlvbigpCiAgc2V0dXA6IGZ1bmN0aW9uKCBfLCBucywgaGFuZGxlICkKICBzZXR1cDogZnVuY3Rpb24oIF8sIG5zLCBoYW5kbGUgKQogIGZ1bmN0aW9uKCkKKHcsIGQsIHQsIHIsIHUpCiAgZiA9IGZ1bmN0aW9uICgpCiAgLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					728,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								258,
								262
							],
							[
								283,
								288
							],
							[
								327,
								331
							],
							[
								351,
								356
							],
							[
								393,
								397
							],
							[
								416,
								421
							],
							[
								434,
								458
							],
							[
								652,
								689
							],
							[
								720,
								726
							],
							[
								792,
								805
							],
							[
								836,
								864
							],
							[
								1112,
								1134
							],
							[
								1214,
								1247
							],
							[
								1329,
								1341
							],
							[
								1709,
								1741
							],
							[
								2058,
								2088
							],
							[
								2191,
								2222
							],
							[
								2290,
								2303
							],
							[
								2523,
								2531
							],
							[
								2616,
								2644
							],
							[
								2813,
								2840
							],
							[
								3025,
								3052
							],
							[
								3300,
								3331
							],
							[
								3540,
								3583
							],
							[
								3723,
								3771
							],
							[
								4084,
								4116
							],
							[
								4223,
								4263
							],
							[
								4425,
								4464
							],
							[
								4527,
								4556
							],
							[
								4898,
								4930
							],
							[
								5187,
								5223
							],
							[
								5291,
								5318
							],
							[
								5371,
								5412
							],
							[
								5438,
								5447
							],
							[
								5489,
								5514
							],
							[
								5639,
								5649
							],
							[
								5765,
								5770
							],
							[
								5870,
								5880
							],
							[
								5957,
								5972
							],
							[
								6043,
								6057
							],
							[
								6175,
								6222
							],
							[
								6646,
								6677
							],
							[
								7100,
								7143
							],
							[
								7204,
								7210
							],
							[
								7432,
								7462
							],
							[
								7494,
								7512
							],
							[
								7631,
								7637
							],
							[
								7742,
								7783
							],
							[
								8449,
								8460
							],
							[
								8502,
								8514
							],
							[
								8556,
								8568
							],
							[
								8610,
								8616
							],
							[
								8780,
								8817
							],
							[
								8998,
								9014
							],
							[
								9890,
								9898
							],
							[
								9986,
								9994
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function WriteXML(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							"get stdin()",
							"get stdout()",
							"get stderr()",
							"wait()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AQAAAAAAAAAAAAAA6wMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					729,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADrAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgICgpID0+CiAgICguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpCldyaXRlWE1MKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCkNvcHlUb0NsaXBib2FyZCh0ZXh0KQpSZWFkQ2FsbGJhY2soZmQsIGZuID0gZGF0YSA9PiB7fSkKICAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICAgZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4KU3Bhd24oZmlsZSwgYXJncywgb3B0aW9ucyA9IHt9KQogIGdldCBzdGRpbigpCiAgZ2V0IHN0ZG91dCgpCiAgZ2V0IHN0ZGVycigpCiAgd2FpdCgpCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgIGRhdGEgPT4KICAgZGF0YSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					730,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					731,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								258,
								262
							],
							[
								283,
								288
							],
							[
								327,
								331
							],
							[
								351,
								356
							],
							[
								393,
								397
							],
							[
								416,
								421
							],
							[
								434,
								458
							],
							[
								652,
								689
							],
							[
								720,
								726
							],
							[
								792,
								805
							],
							[
								836,
								864
							],
							[
								1112,
								1134
							],
							[
								1218,
								1251
							],
							[
								1333,
								1345
							],
							[
								1713,
								1745
							],
							[
								2074,
								2104
							],
							[
								2207,
								2238
							],
							[
								2306,
								2319
							],
							[
								2539,
								2547
							],
							[
								2632,
								2660
							],
							[
								2829,
								2856
							],
							[
								3041,
								3068
							],
							[
								3316,
								3347
							],
							[
								3556,
								3599
							],
							[
								3739,
								3787
							],
							[
								4100,
								4132
							],
							[
								4239,
								4279
							],
							[
								4441,
								4480
							],
							[
								4543,
								4572
							],
							[
								4914,
								4946
							],
							[
								5203,
								5239
							],
							[
								5307,
								5334
							],
							[
								5387,
								5428
							],
							[
								5454,
								5463
							],
							[
								5505,
								5530
							],
							[
								5655,
								5665
							],
							[
								5781,
								5786
							],
							[
								5886,
								5896
							],
							[
								5973,
								5988
							],
							[
								6059,
								6073
							],
							[
								6191,
								6238
							],
							[
								6662,
								6693
							],
							[
								7116,
								7159
							],
							[
								7220,
								7226
							],
							[
								7448,
								7478
							],
							[
								7510,
								7528
							],
							[
								7647,
								7653
							],
							[
								7758,
								7799
							],
							[
								8465,
								8476
							],
							[
								8518,
								8530
							],
							[
								8572,
								8584
							],
							[
								8626,
								8632
							],
							[
								8796,
								8833
							],
							[
								9014,
								9030
							],
							[
								9906,
								9914
							],
							[
								10002,
								10010
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function WriteXML(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							"get stdin()",
							"get stdout()",
							"get stderr()",
							"wait()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AQAAAAAAAAAAAAAA6wMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					732,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								146,
								150
							],
							[
								171,
								176
							],
							[
								215,
								219
							],
							[
								239,
								244
							],
							[
								281,
								285
							],
							[
								304,
								309
							],
							[
								322,
								346
							],
							[
								540,
								577
							],
							[
								608,
								614
							],
							[
								680,
								693
							],
							[
								724,
								752
							],
							[
								1000,
								1022
							],
							[
								1106,
								1139
							],
							[
								1221,
								1233
							],
							[
								1601,
								1633
							],
							[
								1962,
								1992
							],
							[
								2095,
								2126
							],
							[
								2194,
								2207
							],
							[
								2427,
								2435
							],
							[
								2520,
								2548
							],
							[
								2717,
								2744
							],
							[
								2929,
								2956
							],
							[
								3204,
								3235
							],
							[
								3444,
								3487
							],
							[
								3627,
								3675
							],
							[
								3988,
								4020
							],
							[
								4127,
								4167
							],
							[
								4329,
								4368
							],
							[
								4431,
								4460
							],
							[
								4802,
								4834
							],
							[
								5091,
								5127
							],
							[
								5195,
								5222
							],
							[
								5275,
								5316
							],
							[
								5342,
								5351
							],
							[
								5393,
								5418
							],
							[
								5543,
								5553
							],
							[
								5669,
								5674
							],
							[
								5774,
								5784
							],
							[
								5861,
								5876
							],
							[
								5947,
								5961
							],
							[
								6079,
								6126
							],
							[
								6550,
								6581
							],
							[
								7004,
								7047
							],
							[
								7108,
								7114
							],
							[
								7336,
								7366
							],
							[
								7398,
								7416
							],
							[
								7535,
								7541
							],
							[
								7646,
								7687
							],
							[
								8353,
								8364
							],
							[
								8406,
								8418
							],
							[
								8460,
								8472
							],
							[
								8514,
								8520
							],
							[
								8684,
								8721
							],
							[
								8902,
								8918
							],
							[
								9794,
								9802
							],
							[
								9890,
								9898
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function WriteXML(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							"get stdin()",
							"get stdout()",
							"get stderr()",
							"wait()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADrAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgICgpID0+CiAgICguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpCldyaXRlWE1MKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCkNvcHlUb0NsaXBib2FyZCh0ZXh0KQpSZWFkQ2FsbGJhY2soZmQsIGZuID0gZGF0YSA9PiB7fSkKICAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICAgZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4KU3Bhd24oZmlsZSwgYXJncywgb3B0aW9ucyA9IHt9KQogIGdldCBzdGRpbigpCiAgZ2V0IHN0ZG91dCgpCiAgZ2V0IHN0ZGVycigpCiAgd2FpdCgpCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgIGRhdGEgPT4KICAgZGF0YSA9PgAAAAAAAAAA6wMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					733,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADrAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgICgpID0+CiAgICguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpCldyaXRlWE1MKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCkNvcHlUb0NsaXBib2FyZCh0ZXh0KQpSZWFkQ2FsbGJhY2soZmQsIGZuID0gZGF0YSA9PiB7fSkKICAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICAgZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4KU3Bhd24oZmlsZSwgYXJncywgb3B0aW9ucyA9IHt9KQogIGdldCBzdGRpbigpCiAgZ2V0IHN0ZG91dCgpCiAgZ2V0IHN0ZGVycigpCiAgd2FpdCgpCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgIGRhdGEgPT4KICAgZGF0YSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					734,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								70,
								90
							],
							[
								280,
								296
							],
							[
								350,
								369
							],
							[
								404,
								420
							],
							[
								480,
								496
							],
							[
								517,
								521
							],
							[
								559,
								593
							],
							[
								616,
								648
							],
							[
								671,
								714
							],
							[
								2543,
								2562
							],
							[
								2660,
								2676
							],
							[
								2738,
								2756
							],
							[
								2820,
								2839
							],
							[
								2904,
								2913
							],
							[
								2968,
								2985
							],
							[
								3048,
								3065
							],
							[
								3128,
								3142
							],
							[
								3202,
								3217
							],
							[
								3278,
								3293
							],
							[
								3354,
								3362
							],
							[
								3416,
								3428
							],
							[
								3486,
								3496
							],
							[
								3552,
								3563
							],
							[
								3620,
								3628
							],
							[
								3682,
								3704
							],
							[
								3772,
								3787
							],
							[
								3848,
								3870
							],
							[
								3938,
								3954
							],
							[
								4016,
								4032
							],
							[
								4094,
								4106
							],
							[
								4164,
								4176
							],
							[
								4234,
								4247
							],
							[
								4306,
								4324
							],
							[
								4382,
								4400
							],
							[
								4464,
								4486
							],
							[
								4554,
								4581
							],
							[
								4654,
								4671
							],
							[
								4728,
								4745
							],
							[
								4802,
								4819
							],
							[
								4866,
								4882
							],
							[
								4965,
								4981
							],
							[
								5053,
								5069
							],
							[
								5141,
								5158
							],
							[
								5215,
								5235
							],
							[
								5294,
								5314
							],
							[
								5394,
								5413
							],
							[
								5489,
								5496
							],
							[
								5524,
								5544
							],
							[
								5614,
								5629
							],
							[
								5690,
								5716
							],
							[
								5787,
								5803
							],
							[
								5859,
								5872
							],
							[
								5940,
								5958
							],
							[
								6031,
								6044
							],
							[
								6100,
								6114
							],
							[
								6216,
								6239
							],
							[
								6300,
								6321
							],
							[
								8205,
								8244
							],
							[
								8666,
								8678
							],
							[
								8712,
								8724
							],
							[
								8740,
								8753
							],
							[
								8935,
								8983
							],
							[
								11317,
								11321
							],
							[
								11352,
								11361
							],
							[
								11499,
								11518
							],
							[
								12032,
								12051
							],
							[
								12665,
								12708
							],
							[
								13089,
								13122
							],
							[
								13400,
								13429
							],
							[
								13476,
								13497
							],
							[
								13526,
								13542
							],
							[
								13635,
								13665
							],
							[
								13689,
								13705
							],
							[
								13706,
								13729
							],
							[
								13826,
								13861
							],
							[
								13885,
								13901
							],
							[
								13902,
								13925
							],
							[
								14024,
								14057
							],
							[
								14107,
								14130
							],
							[
								14224,
								14257
							],
							[
								14511,
								14532
							],
							[
								14610,
								14616
							],
							[
								14633,
								14649
							],
							[
								14801,
								14813
							],
							[
								14826,
								14837
							],
							[
								14850,
								14871
							],
							[
								14907,
								14918
							],
							[
								15164,
								15170
							],
							[
								15183,
								15199
							],
							[
								15372,
								15377
							],
							[
								15391,
								15400
							],
							[
								15463,
								15469
							],
							[
								15517,
								15523
							],
							[
								15541,
								15554
							],
							[
								15610,
								15615
							],
							[
								15649,
								15655
							],
							[
								15686,
								15708
							],
							[
								15778,
								15784
							],
							[
								15800,
								15816
							],
							[
								15842,
								15848
							],
							[
								15868,
								15889
							],
							[
								15995,
								16007
							],
							[
								16108,
								16135
							],
							[
								16180,
								16186
							],
							[
								16231,
								16243
							],
							[
								16273,
								16306
							],
							[
								16439,
								16445
							],
							[
								16556,
								16568
							],
							[
								16622,
								16634
							],
							[
								16782,
								16793
							],
							[
								16835,
								16868
							],
							[
								17001,
								17010
							],
							[
								17128,
								17149
							],
							[
								17210,
								17231
							],
							[
								17389,
								17403
							],
							[
								17452,
								17491
							],
							[
								17568,
								17585
							],
							[
								17708,
								17722
							],
							[
								17884,
								17901
							],
							[
								18042,
								18059
							],
							[
								18090,
								18107
							],
							[
								18207,
								18224
							],
							[
								18516,
								18530
							],
							[
								18576,
								18599
							],
							[
								18656,
								18663
							],
							[
								18681,
								18688
							],
							[
								18713,
								18738
							],
							[
								18798,
								18805
							],
							[
								18826,
								18833
							],
							[
								18863,
								18918
							],
							[
								19023,
								19030
							],
							[
								19168,
								19192
							],
							[
								19242,
								19246
							],
							[
								19286,
								19313
							],
							[
								19543,
								19563
							],
							[
								19593,
								19604
							],
							[
								19703,
								19738
							],
							[
								19778,
								19796
							],
							[
								20034,
								20045
							],
							[
								20296,
								20307
							],
							[
								20410,
								20421
							],
							[
								20572,
								20584
							],
							[
								20694,
								20714
							],
							[
								20812,
								20817
							],
							[
								20885,
								20906
							],
							[
								20930,
								20940
							],
							[
								20976,
								21006
							],
							[
								21332,
								21388
							],
							[
								21549,
								21613
							],
							[
								21761,
								21812
							],
							[
								22479,
								22541
							],
							[
								22723,
								22748
							],
							[
								22845,
								22870
							],
							[
								22983,
								23052
							],
							[
								23141,
								23163
							],
							[
								23197,
								23208
							],
							[
								23231,
								23253
							],
							[
								23495,
								23567
							],
							[
								23670,
								23741
							],
							[
								23837,
								23888
							],
							[
								24060,
								24107
							],
							[
								24174,
								24217
							],
							[
								24347,
								24404
							],
							[
								24498,
								24504
							],
							[
								24518,
								24524
							],
							[
								24828,
								24862
							],
							[
								25163,
								25218
							],
							[
								25494,
								25538
							],
							[
								25705,
								25739
							],
							[
								25805,
								25841
							],
							[
								25916,
								25933
							],
							[
								26254,
								26299
							],
							[
								26433,
								26446
							],
							[
								26544,
								26557
							],
							[
								26631,
								26674
							],
							[
								26675,
								26694
							],
							[
								26709,
								26713
							],
							[
								26836,
								26856
							],
							[
								26902,
								26934
							],
							[
								26962,
								26988
							],
							[
								27330,
								27349
							],
							[
								27556,
								27605
							],
							[
								27674,
								27681
							],
							[
								27766,
								27780
							],
							[
								27861,
								27871
							],
							[
								27977,
								27981
							],
							[
								28012,
								28032
							],
							[
								28078,
								28091
							],
							[
								28141,
								28153
							],
							[
								28293,
								28308
							],
							[
								28719,
								28759
							],
							[
								28908,
								28912
							],
							[
								28945,
								28953
							],
							[
								28982,
								28986
							],
							[
								29323,
								29336
							],
							[
								29389,
								29409
							],
							[
								29622,
								29769
							],
							[
								29778,
								29827
							],
							[
								29834,
								29870
							],
							[
								30119,
								30139
							],
							[
								30341,
								30356
							],
							[
								30642,
								30665
							],
							[
								30870,
								30888
							],
							[
								31101,
								31115
							],
							[
								31176,
								31188
							],
							[
								31286,
								31295
							],
							[
								31571,
								31587
							],
							[
								32022,
								32058
							],
							[
								32153,
								32162
							],
							[
								32338,
								32349
							],
							[
								32360,
								32368
							],
							[
								32417,
								32429
							],
							[
								32674,
								32686
							],
							[
								32867,
								32893
							],
							[
								32912,
								32916
							],
							[
								33003,
								33027
							],
							[
								33105,
								33134
							],
							[
								33188,
								33219
							],
							[
								33226,
								33229
							],
							[
								33273,
								33286
							],
							[
								33386,
								33448
							],
							[
								33474,
								33500
							],
							[
								33588,
								33623
							],
							[
								33789,
								33816
							],
							[
								33904,
								33937
							],
							[
								34094,
								34145
							],
							[
								34515,
								34579
							],
							[
								34639,
								34654
							],
							[
								34720,
								34734
							],
							[
								34772,
								34795
							],
							[
								34987,
								35005
							],
							[
								35196,
								35266
							],
							[
								35415,
								35439
							],
							[
								35458,
								35466
							],
							[
								35502,
								35517
							],
							[
								35643,
								35656
							],
							[
								35811,
								35827
							],
							[
								36022,
								36048
							],
							[
								36063,
								36085
							],
							[
								36301,
								36305
							],
							[
								36491,
								36513
							],
							[
								36535,
								36545
							],
							[
								36563,
								36576
							],
							[
								36700,
								36722
							],
							[
								36744,
								36754
							],
							[
								36772,
								36785
							],
							[
								36891,
								36913
							],
							[
								36939,
								36949
							],
							[
								36967,
								36980
							],
							[
								37016,
								37038
							],
							[
								37059,
								37069
							],
							[
								37087,
								37100
							],
							[
								37120,
								37161
							],
							[
								37450,
								37473
							],
							[
								37554,
								37576
							],
							[
								37650,
								37670
							],
							[
								37797,
								37808
							],
							[
								37841,
								37858
							],
							[
								38022,
								38041
							],
							[
								38076,
								38098
							],
							[
								38230,
								38251
							],
							[
								38389,
								38409
							],
							[
								38476,
								38499
							],
							[
								38575,
								38597
							],
							[
								38706,
								38730
							],
							[
								38787,
								38799
							],
							[
								38970,
								38988
							],
							[
								39045,
								39057
							],
							[
								39209,
								39232
							],
							[
								39364,
								39380
							],
							[
								39427,
								39440
							],
							[
								39477,
								39544
							],
							[
								39580,
								39602
							],
							[
								39631,
								39641
							],
							[
								39657,
								39670
							],
							[
								39721,
								39734
							],
							[
								39801,
								39824
							],
							[
								39943,
								39965
							],
							[
								40053,
								40066
							],
							[
								40119,
								40135
							],
							[
								40173,
								40177
							],
							[
								40287,
								40324
							],
							[
								40335,
								40345
							],
							[
								40354,
								40383
							],
							[
								40600,
								40616
							],
							[
								40638,
								40649
							],
							[
								40704,
								40731
							],
							[
								40778,
								40796
							],
							[
								40870,
								40905
							],
							[
								41038,
								41060
							],
							[
								41098,
								41114
							],
							[
								41129,
								41136
							],
							[
								41158,
								41174
							],
							[
								41212,
								41240
							],
							[
								41459,
								41476
							],
							[
								41477,
								41486
							],
							[
								41538,
								41555
							],
							[
								41556,
								41565
							],
							[
								41625,
								41642
							],
							[
								41643,
								41666
							],
							[
								41722,
								41746
							],
							[
								44373,
								44401
							],
							[
								44832,
								44836
							],
							[
								44964,
								44977
							],
							[
								45293,
								45305
							],
							[
								45568,
								45581
							],
							[
								45686,
								45700
							],
							[
								46593,
								46621
							],
							[
								46737,
								46750
							],
							[
								46862,
								46886
							],
							[
								46979,
								47013
							],
							[
								47134,
								47173
							],
							[
								47220,
								47257
							],
							[
								47304,
								47330
							],
							[
								47520,
								47568
							],
							[
								47616,
								47660
							],
							[
								47841,
								47864
							],
							[
								48008,
								48040
							],
							[
								48353,
								48407
							],
							[
								48765,
								48817
							],
							[
								48911,
								48927
							],
							[
								49019,
								49030
							],
							[
								49151,
								49155
							],
							[
								49434,
								49467
							],
							[
								49581,
								49633
							],
							[
								49807,
								49843
							],
							[
								50000,
								50016
							],
							[
								50030,
								50052
							],
							[
								50165,
								50171
							],
							[
								51533,
								51553
							],
							[
								51753,
								51795
							],
							[
								51990,
								52021
							],
							[
								52071,
								52113
							],
							[
								52233,
								52257
							],
							[
								52515,
								52525
							],
							[
								52578,
								52582
							],
							[
								52621,
								52648
							],
							[
								52695,
								52707
							],
							[
								52777,
								52789
							],
							[
								52852,
								52877
							],
							[
								52922,
								52953
							],
							[
								52964,
								52981
							],
							[
								53122,
								53144
							],
							[
								53264,
								53286
							],
							[
								53406,
								53441
							],
							[
								53489,
								53516
							],
							[
								53607,
								53645
							],
							[
								53854,
								53902
							],
							[
								54490,
								54517
							],
							[
								54720,
								54734
							],
							[
								54783,
								54789
							],
							[
								54830,
								54896
							],
							[
								54898,
								54902
							],
							[
								55060,
								55067
							],
							[
								55159,
								55169
							],
							[
								55280,
								55289
							],
							[
								55395,
								55421
							],
							[
								55554,
								55585
							],
							[
								55760,
								55779
							],
							[
								55830,
								55838
							],
							[
								55867,
								55901
							],
							[
								56045,
								56090
							],
							[
								56156,
								56166
							],
							[
								56205,
								56215
							],
							[
								56235,
								56245
							],
							[
								56273,
								56298
							],
							[
								56429,
								56454
							],
							[
								56552,
								56587
							],
							[
								56640,
								56674
							],
							[
								56756,
								56792
							],
							[
								56921,
								56925
							],
							[
								56952,
								56956
							],
							[
								56995,
								56999
							],
							[
								57027,
								57031
							],
							[
								57060,
								57088
							],
							[
								57218,
								57222
							],
							[
								57279,
								57310
							],
							[
								57649,
								57685
							],
							[
								57934,
								57992
							],
							[
								58258,
								58266
							],
							[
								58365,
								58390
							],
							[
								58475,
								58517
							],
							[
								58651,
								58691
							],
							[
								61620,
								61646
							],
							[
								61880,
								61904
							],
							[
								62097,
								62120
							],
							[
								62219,
								62257
							],
							[
								62439,
								62450
							],
							[
								62485,
								62506
							],
							[
								62575,
								62582
							],
							[
								62627,
								62641
							],
							[
								62674,
								62685
							],
							[
								62807,
								62814
							],
							[
								62897,
								62907
							],
							[
								63009,
								63018
							],
							[
								63115,
								63141
							],
							[
								63265,
								63296
							],
							[
								63592,
								63614
							],
							[
								63879,
								63923
							],
							[
								64013,
								64037
							],
							[
								64067,
								64095
							],
							[
								64161,
								64188
							],
							[
								64280,
								64305
							],
							[
								64393,
								64416
							],
							[
								64502,
								64525
							],
							[
								64573,
								64599
							],
							[
								64653,
								64678
							],
							[
								64731,
								64758
							],
							[
								64825,
								64855
							],
							[
								64890,
								64914
							],
							[
								65006,
								65034
							],
							[
								65062,
								65091
							],
							[
								65186,
								65213
							],
							[
								65262,
								65288
							],
							[
								65316,
								65351
							],
							[
								65522,
								65548
							],
							[
								65595,
								65621
							],
							[
								65649,
								65676
							],
							[
								65703,
								65726
							],
							[
								65763,
								65788
							],
							[
								65834,
								65862
							],
							[
								65912,
								65937
							],
							[
								65983,
								66015
							],
							[
								66043,
								66068
							],
							[
								66156,
								66191
							],
							[
								66219,
								66250
							],
							[
								66277,
								66293
							],
							[
								66339,
								66356
							],
							[
								66395,
								66412
							],
							[
								66448,
								66469
							],
							[
								66480,
								66510
							],
							[
								66795,
								66867
							],
							[
								66996,
								67004
							],
							[
								67050,
								67058
							],
							[
								67087,
								67100
							],
							[
								67211,
								67260
							],
							[
								67362,
								67401
							],
							[
								67426,
								67434
							],
							[
								67466,
								67481
							],
							[
								67574,
								67582
							],
							[
								67636,
								67654
							],
							[
								67874,
								67882
							],
							[
								67920,
								67932
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function isObject(arg)",
							" function isAsync(fn)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function toString(arrayBuf, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							"getset",
							"getset",
							"bind(...args)",
							"fn =>",
							"getset",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							"getset",
							" function(...args)",
							"get object()",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"function* (re, str)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms`), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set, rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"isArray = a =>",
							"ArrayFacade",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function bits(buffer)",
							" function dupArrayBuffer(buf, start, length)",
							" function getTypeName(v)",
							" function isArrayBuffer(buf)",
							" function isBigDecimal(num)",
							" function isBigFloat(num)",
							" function isBigInt(num)",
							" function isBool(value)",
							" function isJSFunction(fn)",
							" function isCFunction(fn)",
							" function isConstructor(fn)",
							" function isEmptyString(value)",
							" function isError(value)",
							" function isException(value)",
							" function isExtensible(value)",
							" function isFunction(value)",
							" function isHTMLDDA(value)",
							" function isInstanceOf(value, ctor)",
							" function isInteger(value)",
							" function isJobPending(id)",
							" function isLiveObject(obj)",
							" function isNull(value)",
							" function isNumber(value)",
							" function isUndefined(value)",
							" function isString(value)",
							" function isUninitialized(value)",
							" function isSymbol(value)",
							" function isUncatchableError(value)",
							" function isRegisteredClass(id)",
							" function rand()",
							" function randi()",
							" function randf()",
							" function srand(seed)",
							" function toArrayBuffer(value)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AQAAAAAAAAAAAAAAQiQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					735,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					736,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					737,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								146,
								150
							],
							[
								171,
								176
							],
							[
								215,
								219
							],
							[
								239,
								244
							],
							[
								281,
								285
							],
							[
								304,
								309
							],
							[
								322,
								346
							],
							[
								540,
								577
							],
							[
								608,
								614
							],
							[
								680,
								693
							],
							[
								724,
								752
							],
							[
								1000,
								1022
							],
							[
								1106,
								1139
							],
							[
								1221,
								1233
							],
							[
								1601,
								1633
							],
							[
								1962,
								1992
							],
							[
								2095,
								2126
							],
							[
								2194,
								2207
							],
							[
								2427,
								2435
							],
							[
								2520,
								2548
							],
							[
								2717,
								2744
							],
							[
								2929,
								2956
							],
							[
								3204,
								3235
							],
							[
								3444,
								3487
							],
							[
								3627,
								3675
							],
							[
								3988,
								4020
							],
							[
								4127,
								4167
							],
							[
								4329,
								4368
							],
							[
								4431,
								4460
							],
							[
								4802,
								4834
							],
							[
								5091,
								5127
							],
							[
								5195,
								5222
							],
							[
								5275,
								5316
							],
							[
								5342,
								5351
							],
							[
								5393,
								5418
							],
							[
								5543,
								5553
							],
							[
								5669,
								5674
							],
							[
								5774,
								5784
							],
							[
								5861,
								5876
							],
							[
								5947,
								5961
							],
							[
								6079,
								6126
							],
							[
								6550,
								6581
							],
							[
								7004,
								7047
							],
							[
								7108,
								7114
							],
							[
								7336,
								7366
							],
							[
								7398,
								7416
							],
							[
								7535,
								7541
							],
							[
								7646,
								7687
							],
							[
								8353,
								8364
							],
							[
								8406,
								8418
							],
							[
								8460,
								8472
							],
							[
								8514,
								8520
							],
							[
								8684,
								8721
							],
							[
								8902,
								8918
							],
							[
								9794,
								9802
							],
							[
								9890,
								9898
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function WriteXML(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							"get stdin()",
							"get stdout()",
							"get stderr()",
							"wait()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AQAAAAAAAAAAAAAA6wMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					738,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								143,
								152
							],
							[
								180,
								190
							],
							[
								279,
								283
							],
							[
								304,
								309
							],
							[
								348,
								352
							],
							[
								372,
								377
							],
							[
								414,
								418
							],
							[
								437,
								442
							],
							[
								455,
								479
							],
							[
								673,
								710
							],
							[
								741,
								747
							],
							[
								813,
								826
							],
							[
								857,
								885
							],
							[
								1133,
								1155
							],
							[
								1239,
								1272
							],
							[
								1354,
								1366
							],
							[
								1734,
								1766
							],
							[
								2095,
								2125
							],
							[
								2228,
								2259
							],
							[
								2327,
								2340
							],
							[
								2560,
								2568
							],
							[
								2653,
								2681
							],
							[
								2850,
								2877
							],
							[
								3062,
								3089
							],
							[
								3337,
								3368
							],
							[
								3577,
								3620
							],
							[
								3760,
								3808
							],
							[
								4121,
								4153
							],
							[
								4260,
								4300
							],
							[
								4462,
								4501
							],
							[
								4564,
								4593
							],
							[
								4935,
								4967
							],
							[
								5224,
								5260
							],
							[
								5328,
								5355
							],
							[
								5408,
								5449
							],
							[
								5475,
								5484
							],
							[
								5526,
								5551
							],
							[
								5676,
								5686
							],
							[
								5802,
								5807
							],
							[
								5907,
								5917
							],
							[
								5994,
								6009
							],
							[
								6080,
								6094
							],
							[
								6212,
								6259
							],
							[
								6683,
								6714
							],
							[
								7137,
								7180
							],
							[
								7241,
								7247
							],
							[
								7469,
								7499
							],
							[
								7531,
								7549
							],
							[
								7668,
								7674
							],
							[
								7779,
								7820
							],
							[
								8486,
								8497
							],
							[
								8539,
								8551
							],
							[
								8593,
								8605
							],
							[
								8647,
								8653
							],
							[
								8817,
								8854
							],
							[
								9035,
								9051
							],
							[
								9927,
								9935
							],
							[
								10023,
								10031
							]
						],
						"symlist":
						[
							"os: () =>",
							"std: () =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function WriteXML(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							"get stdin()",
							"get stdout()",
							"get stderr()",
							"wait()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADrAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgICgpID0+CiAgICguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpCldyaXRlWE1MKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCkNvcHlUb0NsaXBib2FyZCh0ZXh0KQpSZWFkQ2FsbGJhY2soZmQsIGZuID0gZGF0YSA9PiB7fSkKICAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICAgZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4KU3Bhd24oZmlsZSwgYXJncywgb3B0aW9ucyA9IHt9KQogIGdldCBzdGRpbigpCiAgZ2V0IHN0ZG91dCgpCiAgZ2V0IHN0ZGVycigpCiAgd2FpdCgpCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgIGRhdGEgPT4KICAgZGF0YSA9PgAAAAAAAAAABAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					739,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								162,
								171
							],
							[
								199,
								209
							],
							[
								298,
								302
							],
							[
								323,
								328
							],
							[
								367,
								371
							],
							[
								391,
								396
							],
							[
								433,
								437
							],
							[
								456,
								461
							],
							[
								474,
								498
							],
							[
								692,
								729
							],
							[
								760,
								766
							],
							[
								832,
								845
							],
							[
								876,
								904
							],
							[
								1152,
								1174
							],
							[
								1258,
								1291
							],
							[
								1373,
								1385
							],
							[
								1753,
								1785
							],
							[
								2114,
								2144
							],
							[
								2247,
								2278
							],
							[
								2346,
								2359
							],
							[
								2579,
								2587
							],
							[
								2672,
								2700
							],
							[
								2869,
								2896
							],
							[
								3081,
								3108
							],
							[
								3356,
								3387
							],
							[
								3596,
								3639
							],
							[
								3779,
								3827
							],
							[
								4140,
								4172
							],
							[
								4279,
								4319
							],
							[
								4481,
								4520
							],
							[
								4583,
								4612
							],
							[
								4954,
								4986
							],
							[
								5243,
								5279
							],
							[
								5347,
								5374
							],
							[
								5427,
								5468
							],
							[
								5494,
								5503
							],
							[
								5545,
								5570
							],
							[
								5695,
								5705
							],
							[
								5821,
								5826
							],
							[
								5926,
								5936
							],
							[
								6013,
								6028
							],
							[
								6099,
								6113
							],
							[
								6231,
								6278
							],
							[
								6702,
								6733
							],
							[
								7156,
								7199
							],
							[
								7260,
								7266
							],
							[
								7488,
								7518
							],
							[
								7550,
								7568
							],
							[
								7687,
								7693
							],
							[
								7798,
								7839
							],
							[
								8505,
								8516
							],
							[
								8558,
								8570
							],
							[
								8612,
								8624
							],
							[
								8666,
								8672
							],
							[
								8836,
								8873
							],
							[
								9054,
								9070
							],
							[
								9946,
								9954
							],
							[
								10042,
								10050
							]
						],
						"symlist":
						[
							"os: () =>",
							"std: () =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function WriteXML(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							"get stdin()",
							"get stdout()",
							"get stderr()",
							"wait()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAEBAAAICBvczogKCkgPT4KICBzdGQ6ICgpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICAoKSA9PgogICAoLi4uYXJncykgPT4KUmVhZEZkKGZkLCBiaW5hcnkpCklzU3RkaW8ob2JqKQpSZWFkQ2xvc2UoZmlsZSwgYmluYXJ5KQooKQpSZWFkRmlsZShuYW1lLCBiaW5hcnkpClJlYWRBbnkob2JqLCBiaW5hcnkpCkxvYWRIaXN0b3J5KGZpbGVuYW1lKQogIHBhcnNlID0gKCkgPT4KICBlbnRyeSA9PgpSZWFkSlNPTihmaWxlbmFtZSkKUmVhZFhNTChmaWxlbmFtZSkKTWFwRmlsZShmaWxlbmFtZSkKV3JpdGVGaWxlKGZpbGUsIGRhdGEpCldyaXRlRmQoZmQsIGRhdGEsIG9mZnNldCwgbGVuZ3RoKQpXcml0ZUNsb3NlKGZpbGUsIGRhdGEsIG9mZnNldCwgbGVuZ3RoKQpXcml0ZUFueShvYmosIC4uLmFyZ3MpCldyaXRlSlNPTihuYW1lLCBkYXRhLCAuLi5hcmdzKQpXcml0ZVhNTChuYW1lLCBkYXRhLCAuLi5hcmdzKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgICgpID0+CkxvZ0NhbGwoZm4sIHRoaXNPYmopCiAgIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgYXJnID0+ClNwYXduKGZpbGUsIGFyZ3MsIG9wdGlvbnMgPSB7fSkKICBnZXQgc3RkaW4oKQogIGdldCBzdGRvdXQoKQogIGdldCBzdGRlcnIoKQogIHdhaXQoKQpGZXRjaFVSTCh1cmwsIG9wdGlvbnMgPSB7fSkKKGFjYywgW2ssIHZdKSA9PgogICBkYXRhID0+CiAgIGRhdGEgPT4AAAAAAAAAAAQEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					740,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								162,
								171
							],
							[
								200,
								210
							],
							[
								299,
								303
							],
							[
								324,
								329
							],
							[
								368,
								372
							],
							[
								392,
								397
							],
							[
								434,
								438
							],
							[
								457,
								462
							],
							[
								475,
								499
							],
							[
								693,
								730
							],
							[
								761,
								767
							],
							[
								833,
								846
							],
							[
								877,
								905
							],
							[
								1153,
								1175
							],
							[
								1259,
								1292
							],
							[
								1374,
								1386
							],
							[
								1754,
								1786
							],
							[
								2115,
								2145
							],
							[
								2248,
								2279
							],
							[
								2347,
								2360
							],
							[
								2580,
								2588
							],
							[
								2673,
								2701
							],
							[
								2870,
								2897
							],
							[
								3082,
								3109
							],
							[
								3357,
								3388
							],
							[
								3597,
								3640
							],
							[
								3780,
								3828
							],
							[
								4141,
								4173
							],
							[
								4280,
								4320
							],
							[
								4482,
								4521
							],
							[
								4584,
								4613
							],
							[
								4955,
								4987
							],
							[
								5244,
								5280
							],
							[
								5348,
								5375
							],
							[
								5428,
								5469
							],
							[
								5495,
								5504
							],
							[
								5546,
								5571
							],
							[
								5696,
								5706
							],
							[
								5822,
								5827
							],
							[
								5927,
								5937
							],
							[
								6014,
								6029
							],
							[
								6100,
								6114
							],
							[
								6232,
								6279
							],
							[
								6703,
								6734
							],
							[
								7157,
								7200
							],
							[
								7261,
								7267
							],
							[
								7489,
								7519
							],
							[
								7551,
								7569
							],
							[
								7688,
								7694
							],
							[
								7799,
								7840
							],
							[
								8506,
								8517
							],
							[
								8559,
								8571
							],
							[
								8613,
								8625
							],
							[
								8667,
								8673
							],
							[
								8837,
								8874
							],
							[
								9055,
								9071
							],
							[
								9947,
								9955
							],
							[
								10043,
								10051
							]
						],
						"symlist":
						[
							"os: () =>",
							"std: () =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function WriteXML(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							"get stdin()",
							"get stdout()",
							"get stderr()",
							"wait()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAEBAAAICBvczogKCkgPT4KICBzdGQ6ICgpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICAoKSA9PgogICAoLi4uYXJncykgPT4KUmVhZEZkKGZkLCBiaW5hcnkpCklzU3RkaW8ob2JqKQpSZWFkQ2xvc2UoZmlsZSwgYmluYXJ5KQooKQpSZWFkRmlsZShuYW1lLCBiaW5hcnkpClJlYWRBbnkob2JqLCBiaW5hcnkpCkxvYWRIaXN0b3J5KGZpbGVuYW1lKQogIHBhcnNlID0gKCkgPT4KICBlbnRyeSA9PgpSZWFkSlNPTihmaWxlbmFtZSkKUmVhZFhNTChmaWxlbmFtZSkKTWFwRmlsZShmaWxlbmFtZSkKV3JpdGVGaWxlKGZpbGUsIGRhdGEpCldyaXRlRmQoZmQsIGRhdGEsIG9mZnNldCwgbGVuZ3RoKQpXcml0ZUNsb3NlKGZpbGUsIGRhdGEsIG9mZnNldCwgbGVuZ3RoKQpXcml0ZUFueShvYmosIC4uLmFyZ3MpCldyaXRlSlNPTihuYW1lLCBkYXRhLCAuLi5hcmdzKQpXcml0ZVhNTChuYW1lLCBkYXRhLCAuLi5hcmdzKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgICgpID0+CkxvZ0NhbGwoZm4sIHRoaXNPYmopCiAgIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgYXJnID0+ClNwYXduKGZpbGUsIGFyZ3MsIG9wdGlvbnMgPSB7fSkKICBnZXQgc3RkaW4oKQogIGdldCBzdGRvdXQoKQogIGdldCBzdGRlcnIoKQogIHdhaXQoKQpGZXRjaFVSTCh1cmwsIG9wdGlvbnMgPSB7fSkKKGFjYywgW2ssIHZdKSA9PgogICBkYXRhID0+CiAgIGRhdGEgPT4AAAAAAAAAAAQEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					741,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								70,
								90
							],
							[
								280,
								296
							],
							[
								350,
								369
							],
							[
								404,
								420
							],
							[
								480,
								496
							],
							[
								517,
								521
							],
							[
								559,
								593
							],
							[
								616,
								648
							],
							[
								671,
								714
							],
							[
								2543,
								2562
							],
							[
								2660,
								2676
							],
							[
								2738,
								2756
							],
							[
								2820,
								2839
							],
							[
								2904,
								2913
							],
							[
								2968,
								2985
							],
							[
								3048,
								3065
							],
							[
								3128,
								3142
							],
							[
								3202,
								3217
							],
							[
								3278,
								3293
							],
							[
								3354,
								3362
							],
							[
								3416,
								3428
							],
							[
								3486,
								3496
							],
							[
								3552,
								3563
							],
							[
								3620,
								3628
							],
							[
								3682,
								3704
							],
							[
								3772,
								3787
							],
							[
								3848,
								3870
							],
							[
								3938,
								3954
							],
							[
								4016,
								4032
							],
							[
								4094,
								4106
							],
							[
								4164,
								4176
							],
							[
								4234,
								4247
							],
							[
								4306,
								4324
							],
							[
								4382,
								4400
							],
							[
								4464,
								4486
							],
							[
								4554,
								4581
							],
							[
								4654,
								4671
							],
							[
								4728,
								4745
							],
							[
								4802,
								4819
							],
							[
								4866,
								4882
							],
							[
								4965,
								4981
							],
							[
								5053,
								5069
							],
							[
								5141,
								5158
							],
							[
								5215,
								5235
							],
							[
								5294,
								5314
							],
							[
								5394,
								5413
							],
							[
								5489,
								5496
							],
							[
								5524,
								5544
							],
							[
								5614,
								5629
							],
							[
								5690,
								5716
							],
							[
								5787,
								5803
							],
							[
								5859,
								5872
							],
							[
								5940,
								5958
							],
							[
								6031,
								6044
							],
							[
								6100,
								6114
							],
							[
								6216,
								6239
							],
							[
								6300,
								6321
							],
							[
								8205,
								8244
							],
							[
								8666,
								8678
							],
							[
								8712,
								8724
							],
							[
								8740,
								8753
							],
							[
								8935,
								8983
							],
							[
								11317,
								11321
							],
							[
								11352,
								11361
							],
							[
								11499,
								11518
							],
							[
								12032,
								12051
							],
							[
								12665,
								12708
							],
							[
								13089,
								13122
							],
							[
								13400,
								13429
							],
							[
								13476,
								13497
							],
							[
								13526,
								13542
							],
							[
								13635,
								13665
							],
							[
								13689,
								13705
							],
							[
								13706,
								13729
							],
							[
								13826,
								13861
							],
							[
								13885,
								13901
							],
							[
								13902,
								13925
							],
							[
								14024,
								14057
							],
							[
								14107,
								14130
							],
							[
								14224,
								14257
							],
							[
								14511,
								14532
							],
							[
								14610,
								14616
							],
							[
								14633,
								14649
							],
							[
								14801,
								14813
							],
							[
								14826,
								14837
							],
							[
								14850,
								14871
							],
							[
								14907,
								14918
							],
							[
								15164,
								15170
							],
							[
								15183,
								15199
							],
							[
								15372,
								15377
							],
							[
								15391,
								15400
							],
							[
								15463,
								15469
							],
							[
								15517,
								15523
							],
							[
								15541,
								15554
							],
							[
								15610,
								15615
							],
							[
								15649,
								15655
							],
							[
								15686,
								15708
							],
							[
								15778,
								15784
							],
							[
								15800,
								15816
							],
							[
								15842,
								15848
							],
							[
								15868,
								15889
							],
							[
								15995,
								16007
							],
							[
								16108,
								16135
							],
							[
								16180,
								16186
							],
							[
								16231,
								16243
							],
							[
								16273,
								16306
							],
							[
								16439,
								16445
							],
							[
								16556,
								16568
							],
							[
								16622,
								16634
							],
							[
								16782,
								16793
							],
							[
								16835,
								16868
							],
							[
								17001,
								17010
							],
							[
								17128,
								17149
							],
							[
								17210,
								17231
							],
							[
								17389,
								17403
							],
							[
								17452,
								17491
							],
							[
								17568,
								17585
							],
							[
								17708,
								17722
							],
							[
								17884,
								17901
							],
							[
								18042,
								18059
							],
							[
								18090,
								18107
							],
							[
								18207,
								18224
							],
							[
								18516,
								18530
							],
							[
								18576,
								18599
							],
							[
								18656,
								18663
							],
							[
								18681,
								18688
							],
							[
								18713,
								18738
							],
							[
								18798,
								18805
							],
							[
								18826,
								18833
							],
							[
								18863,
								18918
							],
							[
								19023,
								19030
							],
							[
								19168,
								19192
							],
							[
								19242,
								19246
							],
							[
								19286,
								19313
							],
							[
								19543,
								19563
							],
							[
								19593,
								19604
							],
							[
								19703,
								19738
							],
							[
								19778,
								19796
							],
							[
								20034,
								20045
							],
							[
								20296,
								20307
							],
							[
								20410,
								20421
							],
							[
								20572,
								20584
							],
							[
								20694,
								20714
							],
							[
								20812,
								20817
							],
							[
								20885,
								20906
							],
							[
								20930,
								20940
							],
							[
								20976,
								21006
							],
							[
								21332,
								21388
							],
							[
								21549,
								21613
							],
							[
								21761,
								21812
							],
							[
								22479,
								22541
							],
							[
								22723,
								22748
							],
							[
								22845,
								22870
							],
							[
								22983,
								23052
							],
							[
								23141,
								23163
							],
							[
								23197,
								23208
							],
							[
								23231,
								23253
							],
							[
								23495,
								23567
							],
							[
								23670,
								23741
							],
							[
								23837,
								23888
							],
							[
								24060,
								24107
							],
							[
								24174,
								24217
							],
							[
								24347,
								24404
							],
							[
								24498,
								24504
							],
							[
								24518,
								24524
							],
							[
								24828,
								24862
							],
							[
								25163,
								25218
							],
							[
								25494,
								25538
							],
							[
								25705,
								25739
							],
							[
								25805,
								25841
							],
							[
								25916,
								25933
							],
							[
								26254,
								26299
							],
							[
								26433,
								26446
							],
							[
								26544,
								26557
							],
							[
								26631,
								26674
							],
							[
								26675,
								26694
							],
							[
								26709,
								26713
							],
							[
								26836,
								26856
							],
							[
								26902,
								26934
							],
							[
								26962,
								26988
							],
							[
								27330,
								27349
							],
							[
								27556,
								27605
							],
							[
								27674,
								27681
							],
							[
								27766,
								27780
							],
							[
								27861,
								27871
							],
							[
								27977,
								27981
							],
							[
								28012,
								28032
							],
							[
								28078,
								28091
							],
							[
								28141,
								28153
							],
							[
								28293,
								28308
							],
							[
								28719,
								28759
							],
							[
								28908,
								28912
							],
							[
								28945,
								28953
							],
							[
								28982,
								28986
							],
							[
								29323,
								29336
							],
							[
								29389,
								29409
							],
							[
								29622,
								29769
							],
							[
								29778,
								29827
							],
							[
								29834,
								29870
							],
							[
								30119,
								30139
							],
							[
								30341,
								30356
							],
							[
								30642,
								30665
							],
							[
								30870,
								30888
							],
							[
								31101,
								31115
							],
							[
								31176,
								31188
							],
							[
								31286,
								31295
							],
							[
								31571,
								31587
							],
							[
								32022,
								32058
							],
							[
								32153,
								32162
							],
							[
								32338,
								32349
							],
							[
								32360,
								32368
							],
							[
								32417,
								32429
							],
							[
								32674,
								32686
							],
							[
								32867,
								32893
							],
							[
								32912,
								32916
							],
							[
								33003,
								33027
							],
							[
								33105,
								33134
							],
							[
								33188,
								33219
							],
							[
								33226,
								33229
							],
							[
								33273,
								33286
							],
							[
								33386,
								33448
							],
							[
								33474,
								33500
							],
							[
								33588,
								33623
							],
							[
								33789,
								33816
							],
							[
								33904,
								33937
							],
							[
								34094,
								34145
							],
							[
								34515,
								34579
							],
							[
								34639,
								34654
							],
							[
								34720,
								34734
							],
							[
								34772,
								34795
							],
							[
								34987,
								35005
							],
							[
								35196,
								35266
							],
							[
								35415,
								35439
							],
							[
								35458,
								35466
							],
							[
								35502,
								35517
							],
							[
								35643,
								35656
							],
							[
								35811,
								35827
							],
							[
								36022,
								36048
							],
							[
								36063,
								36085
							],
							[
								36301,
								36305
							],
							[
								36491,
								36513
							],
							[
								36535,
								36545
							],
							[
								36563,
								36576
							],
							[
								36700,
								36722
							],
							[
								36744,
								36754
							],
							[
								36772,
								36785
							],
							[
								36891,
								36913
							],
							[
								36939,
								36949
							],
							[
								36967,
								36980
							],
							[
								37016,
								37038
							],
							[
								37059,
								37069
							],
							[
								37087,
								37100
							],
							[
								37120,
								37161
							],
							[
								37450,
								37473
							],
							[
								37554,
								37576
							],
							[
								37650,
								37670
							],
							[
								37797,
								37808
							],
							[
								37841,
								37858
							],
							[
								38022,
								38041
							],
							[
								38076,
								38098
							],
							[
								38230,
								38251
							],
							[
								38389,
								38409
							],
							[
								38476,
								38499
							],
							[
								38575,
								38597
							],
							[
								38706,
								38730
							],
							[
								38787,
								38799
							],
							[
								38970,
								38988
							],
							[
								39045,
								39057
							],
							[
								39209,
								39232
							],
							[
								39364,
								39380
							],
							[
								39427,
								39440
							],
							[
								39477,
								39544
							],
							[
								39580,
								39602
							],
							[
								39631,
								39641
							],
							[
								39657,
								39670
							],
							[
								39721,
								39734
							],
							[
								39801,
								39824
							],
							[
								39943,
								39965
							],
							[
								40053,
								40066
							],
							[
								40119,
								40135
							],
							[
								40173,
								40177
							],
							[
								40287,
								40324
							],
							[
								40335,
								40345
							],
							[
								40354,
								40383
							],
							[
								40600,
								40616
							],
							[
								40638,
								40649
							],
							[
								40704,
								40731
							],
							[
								40778,
								40796
							],
							[
								40870,
								40905
							],
							[
								41038,
								41060
							],
							[
								41098,
								41114
							],
							[
								41129,
								41136
							],
							[
								41158,
								41174
							],
							[
								41212,
								41240
							],
							[
								41459,
								41476
							],
							[
								41477,
								41486
							],
							[
								41538,
								41555
							],
							[
								41556,
								41565
							],
							[
								41625,
								41642
							],
							[
								41643,
								41666
							],
							[
								41722,
								41746
							],
							[
								44373,
								44401
							],
							[
								44832,
								44836
							],
							[
								44964,
								44977
							],
							[
								45293,
								45305
							],
							[
								45568,
								45581
							],
							[
								45686,
								45700
							],
							[
								46593,
								46621
							],
							[
								46737,
								46750
							],
							[
								46862,
								46886
							],
							[
								46979,
								47013
							],
							[
								47134,
								47173
							],
							[
								47220,
								47257
							],
							[
								47304,
								47330
							],
							[
								47520,
								47568
							],
							[
								47616,
								47660
							],
							[
								47841,
								47864
							],
							[
								48008,
								48040
							],
							[
								48353,
								48407
							],
							[
								48765,
								48817
							],
							[
								48911,
								48927
							],
							[
								49019,
								49030
							],
							[
								49151,
								49155
							],
							[
								49434,
								49467
							],
							[
								49581,
								49633
							],
							[
								49807,
								49843
							],
							[
								50000,
								50016
							],
							[
								50030,
								50052
							],
							[
								50165,
								50171
							],
							[
								51533,
								51553
							],
							[
								51753,
								51795
							],
							[
								51990,
								52021
							],
							[
								52071,
								52113
							],
							[
								52233,
								52257
							],
							[
								52515,
								52525
							],
							[
								52578,
								52582
							],
							[
								52621,
								52648
							],
							[
								52695,
								52707
							],
							[
								52777,
								52789
							],
							[
								52852,
								52877
							],
							[
								52922,
								52953
							],
							[
								52964,
								52981
							],
							[
								53122,
								53144
							],
							[
								53264,
								53286
							],
							[
								53406,
								53441
							],
							[
								53489,
								53516
							],
							[
								53607,
								53645
							],
							[
								53854,
								53902
							],
							[
								54490,
								54517
							],
							[
								54720,
								54734
							],
							[
								54783,
								54789
							],
							[
								54830,
								54896
							],
							[
								54898,
								54902
							],
							[
								55060,
								55067
							],
							[
								55159,
								55169
							],
							[
								55280,
								55289
							],
							[
								55395,
								55421
							],
							[
								55554,
								55585
							],
							[
								55760,
								55779
							],
							[
								55830,
								55838
							],
							[
								55867,
								55901
							],
							[
								56045,
								56090
							],
							[
								56156,
								56166
							],
							[
								56205,
								56215
							],
							[
								56235,
								56245
							],
							[
								56273,
								56298
							],
							[
								56429,
								56454
							],
							[
								56552,
								56587
							],
							[
								56640,
								56674
							],
							[
								56756,
								56792
							],
							[
								56921,
								56925
							],
							[
								56952,
								56956
							],
							[
								56995,
								56999
							],
							[
								57027,
								57031
							],
							[
								57060,
								57088
							],
							[
								57218,
								57222
							],
							[
								57279,
								57310
							],
							[
								57649,
								57685
							],
							[
								57934,
								57992
							],
							[
								58258,
								58266
							],
							[
								58365,
								58390
							],
							[
								58475,
								58517
							],
							[
								58651,
								58691
							],
							[
								61620,
								61646
							],
							[
								61880,
								61904
							],
							[
								62097,
								62120
							],
							[
								62219,
								62257
							],
							[
								62439,
								62450
							],
							[
								62485,
								62506
							],
							[
								62575,
								62582
							],
							[
								62627,
								62641
							],
							[
								62674,
								62685
							],
							[
								62807,
								62814
							],
							[
								62897,
								62907
							],
							[
								63009,
								63018
							],
							[
								63115,
								63141
							],
							[
								63265,
								63296
							],
							[
								63592,
								63614
							],
							[
								63879,
								63923
							],
							[
								64013,
								64037
							],
							[
								64067,
								64095
							],
							[
								64161,
								64188
							],
							[
								64280,
								64305
							],
							[
								64393,
								64416
							],
							[
								64502,
								64525
							],
							[
								64573,
								64599
							],
							[
								64653,
								64678
							],
							[
								64731,
								64758
							],
							[
								64825,
								64855
							],
							[
								64890,
								64914
							],
							[
								65006,
								65034
							],
							[
								65062,
								65091
							],
							[
								65186,
								65213
							],
							[
								65262,
								65288
							],
							[
								65316,
								65351
							],
							[
								65522,
								65548
							],
							[
								65595,
								65621
							],
							[
								65649,
								65676
							],
							[
								65703,
								65726
							],
							[
								65763,
								65788
							],
							[
								65834,
								65862
							],
							[
								65912,
								65937
							],
							[
								65983,
								66015
							],
							[
								66043,
								66068
							],
							[
								66156,
								66191
							],
							[
								66219,
								66250
							],
							[
								66277,
								66293
							],
							[
								66339,
								66356
							],
							[
								66395,
								66412
							],
							[
								66448,
								66469
							],
							[
								66480,
								66510
							],
							[
								66795,
								66867
							],
							[
								66996,
								67004
							],
							[
								67050,
								67058
							],
							[
								67087,
								67100
							],
							[
								67211,
								67260
							],
							[
								67362,
								67401
							],
							[
								67426,
								67434
							],
							[
								67466,
								67481
							],
							[
								67574,
								67582
							],
							[
								67636,
								67654
							],
							[
								67874,
								67882
							],
							[
								67920,
								67932
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function isObject(arg)",
							" function isAsync(fn)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function toString(arrayBuf, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							"getset",
							"getset",
							"bind(...args)",
							"fn =>",
							"getset",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							"getset",
							" function(...args)",
							"get object()",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"function* (re, str)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms`), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set, rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"isArray = a =>",
							"ArrayFacade",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function bits(buffer)",
							" function dupArrayBuffer(buf, start, length)",
							" function getTypeName(v)",
							" function isArrayBuffer(buf)",
							" function isBigDecimal(num)",
							" function isBigFloat(num)",
							" function isBigInt(num)",
							" function isBool(value)",
							" function isJSFunction(fn)",
							" function isCFunction(fn)",
							" function isConstructor(fn)",
							" function isEmptyString(value)",
							" function isError(value)",
							" function isException(value)",
							" function isExtensible(value)",
							" function isFunction(value)",
							" function isHTMLDDA(value)",
							" function isInstanceOf(value, ctor)",
							" function isInteger(value)",
							" function isJobPending(id)",
							" function isLiveObject(obj)",
							" function isNull(value)",
							" function isNumber(value)",
							" function isUndefined(value)",
							" function isString(value)",
							" function isUninitialized(value)",
							" function isSymbol(value)",
							" function isUncatchableError(value)",
							" function isRegisteredClass(id)",
							" function rand()",
							" function randi()",
							" function randf()",
							" function srand(seed)",
							" function toArrayBuffer(value)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAEBAAAICBvczogKCkgPT4KICBzdGQ6ICgpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICAoKSA9PgogICAoLi4uYXJncykgPT4KUmVhZEZkKGZkLCBiaW5hcnkpCklzU3RkaW8ob2JqKQpSZWFkQ2xvc2UoZmlsZSwgYmluYXJ5KQooKQpSZWFkRmlsZShuYW1lLCBiaW5hcnkpClJlYWRBbnkob2JqLCBiaW5hcnkpCkxvYWRIaXN0b3J5KGZpbGVuYW1lKQogIHBhcnNlID0gKCkgPT4KICBlbnRyeSA9PgpSZWFkSlNPTihmaWxlbmFtZSkKUmVhZFhNTChmaWxlbmFtZSkKTWFwRmlsZShmaWxlbmFtZSkKV3JpdGVGaWxlKGZpbGUsIGRhdGEpCldyaXRlRmQoZmQsIGRhdGEsIG9mZnNldCwgbGVuZ3RoKQpXcml0ZUNsb3NlKGZpbGUsIGRhdGEsIG9mZnNldCwgbGVuZ3RoKQpXcml0ZUFueShvYmosIC4uLmFyZ3MpCldyaXRlSlNPTihuYW1lLCBkYXRhLCAuLi5hcmdzKQpXcml0ZVhNTChuYW1lLCBkYXRhLCAuLi5hcmdzKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgICgpID0+CkxvZ0NhbGwoZm4sIHRoaXNPYmopCiAgIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgYXJnID0+ClNwYXduKGZpbGUsIGFyZ3MsIG9wdGlvbnMgPSB7fSkKICBnZXQgc3RkaW4oKQogIGdldCBzdGRvdXQoKQogIGdldCBzdGRlcnIoKQogIHdhaXQoKQpGZXRjaFVSTCh1cmwsIG9wdGlvbnMgPSB7fSkKKGFjYywgW2ssIHZdKSA9PgogICBkYXRhID0+CiAgIGRhdGEgPT4AAAAAAAAAAEIkAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					742,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debuggerprotocol.js",
						"symkeys":
						[
							[
								242,
								261
							],
							[
								343,
								359
							],
							[
								385,
								402
							],
							[
								615,
								628
							],
							[
								764,
								781
							],
							[
								1072,
								1095
							],
							[
								1951,
								1977
							],
							[
								2140,
								2162
							],
							[
								2536,
								2554
							],
							[
								3329,
								3352
							],
							[
								3699,
								3707
							],
							[
								3761,
								3792
							],
							[
								4249,
								4272
							],
							[
								4985,
								5007
							],
							[
								5136,
								5148
							],
							[
								5478,
								5497
							],
							[
								6165,
								6196
							],
							[
								6320,
								6344
							],
							[
								6443,
								6476
							],
							[
								6699,
								6740
							],
							[
								6881,
								6893
							]
						],
						"symlist":
						[
							"cfg = (obj = {}) =>",
							"DebuggerProtocol",
							"constructor(sock)",
							"readCommand()",
							"getFile(filename)",
							"handleResponse(message)",
							"handleBreakpoints(message)",
							"handleMessage(message)",
							"handleEvent(event)",
							"sendMessage(type, args)",
							"getSeq()",
							"sendRequest(command, args = {})",
							"static async read(sock)",
							"static send(sock, msg)",
							"async read()",
							"async readHandler()",
							"function retValue(ret, ...args)",
							"function toHex(n, b = 2)",
							"function MakeArray(buf, numBytes)",
							"function ArrayBufToHex(buf, numBytes = 8)",
							"(s, code) =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					743,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-client.js",
						"symkeys":
						[
							[
								2693,
								2702
							],
							[
								2771,
								2778
							],
							[
								2895,
								2900
							],
							[
								3087,
								3098
							],
							[
								3250,
								3255
							],
							[
								3699,
								3751
							],
							[
								4013,
								4049
							],
							[
								4294,
								4301
							],
							[
								4371,
								4390
							],
							[
								4432,
								4450
							],
							[
								4504,
								4527
							],
							[
								4846,
								4867
							],
							[
								5128,
								5136
							],
							[
								5663,
								5698
							],
							[
								7630,
								7659
							],
							[
								7715,
								7740
							],
							[
								7791,
								7849
							],
							[
								8557,
								8593
							],
							[
								8730,
								8749
							],
							[
								9205,
								9216
							],
							[
								9701,
								9738
							],
							[
								9853,
								9880
							],
							[
								11273,
								11301
							],
							[
								11531,
								11561
							],
							[
								11631,
								11662
							],
							[
								11966,
								11989
							],
							[
								12052,
								12076
							],
							[
								12140,
								12161
							],
							[
								12222,
								12247
							],
							[
								12287,
								12309
							],
							[
								12371,
								12406
							],
							[
								12462,
								12489
							],
							[
								12788,
								12828
							],
							[
								12961,
								12981
							],
							[
								13278,
								13297
							]
						],
						"symlist":
						[
							"source =>",
							"line =>",
							" e =>",
							"async () =>",
							" e =>",
							"SourceLine = ({ lineno, text, active, children }) =>",
							"SourceText = ({ text, filename }) =>",
							"line =>",
							"(acc, tokens, i) =>",
							"([type, token]) =>",
							"(acc, [type, token]) =>",
							"SourceFile = props =>",
							" resp =>",
							"async function LoadSource(filename)",
							"function Start(args, address)",
							"function Connect(address)",
							"function Initiate(command, address, connect = false, args)",
							"function* TokenizeJS(data, filename)",
							"(acc, [type, c]) =>",
							"(acc, l) =>",
							"async function CreateSocket(endpoint)",
							"async function ReadSocket()",
							".sendMessage = function(msg)",
							"function GetVariables(ref = 0)",
							"async function UpdatePosition()",
							"async function StepIn()",
							"async function StepOut()",
							"async function Next()",
							"async function Continue()",
							"async function Pause()",
							"async function Evaluate(expression)",
							"async function StackTrace()",
							"function SendRequest(command, args = {})",
							"(resolve, reject) =>",
							"function RenderUI()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADCAQAAICBjZmcgPSAob2JqID0ge30pID0+CkRlYnVnZ2VyUHJvdG9jb2wKICBjb25zdHJ1Y3Rvcihzb2NrKQogIHJlYWRDb21tYW5kKCkKICBnZXRGaWxlKGZpbGVuYW1lKQogIGhhbmRsZVJlc3BvbnNlKG1lc3NhZ2UpCiAgaGFuZGxlQnJlYWtwb2ludHMobWVzc2FnZSkKICBoYW5kbGVNZXNzYWdlKG1lc3NhZ2UpCiAgaGFuZGxlRXZlbnQoZXZlbnQpCiAgc2VuZE1lc3NhZ2UodHlwZSwgYXJncykKICBnZXRTZXEoKQogIHNlbmRSZXF1ZXN0KGNvbW1hbmQsIGFyZ3MgPSB7fSkKICBzdGF0aWMgcmVhZChzb2NrKQogIHN0YXRpYyBzZW5kKHNvY2ssIG1zZykKICByZWFkKCkKICByZWFkSGFuZGxlcigpCiAgcmV0VmFsdWUocmV0LCAuLi5hcmdzKQogIHRvSGV4KG4sIGIgPSAyKQpNYWtlQXJyYXkoYnVmLCBudW1CeXRlcykKQXJyYXlCdWZUb0hleChidWYsIG51bUJ5dGVzID0gOCkKKHMsIGNvZGUpID0+AAAAAAAAAACQAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					744,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAgAAICBzb3VyY2UgPT4KICBsaW5lID0+CiAgIGUgPT4KKCkgPT4KICAgZSA9PgpTb3VyY2VMaW5lID0gKHsgbGluZW5vLCB0ZXh0LCBhY3RpdmUsIGNoaWxkcmVuIH0pID0+ClNvdXJjZVRleHQgPSAoeyB0ZXh0LCBmaWxlbmFtZSB9KSA9PgogIGxpbmUgPT4KKGFjYywgdG9rZW5zLCBpKSA9PgooW3R5cGUsIHRva2VuXSkgPT4KKGFjYywgW3R5cGUsIHRva2VuXSkgPT4KU291cmNlRmlsZSA9IHByb3BzID0+CiAgIHJlc3AgPT4KTG9hZFNvdXJjZShmaWxlbmFtZSkKU3RhcnQoYXJncywgYWRkcmVzcykKQ29ubmVjdChhZGRyZXNzKQpJbml0aWF0ZShjb21tYW5kLCBhZGRyZXNzLCBjb25uZWN0ID0gZmFsc2UsIGFyZ3MpClRva2VuaXplSlMoZGF0YSwgZmlsZW5hbWUpCihhY2MsIFt0eXBlLCBjXSkgPT4KKGFjYywgbCkgPT4KQ3JlYXRlU29ja2V0KGVuZHBvaW50KQpSZWFkU29ja2V0KCkKICAuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpCkdldFZhcmlhYmxlcyhyZWYgPSAwKQpVcGRhdGVQb3NpdGlvbigpClN0ZXBJbigpClN0ZXBPdXQoKQpOZXh0KCkKQ29udGludWUoKQpQYXVzZSgpCkV2YWx1YXRlKGV4cHJlc3Npb24pClN0YWNrVHJhY2UoKQpTZW5kUmVxdWVzdChjb21tYW5kLCBhcmdzID0ge30pCihyZXNvbHZlLCByZWplY3QpID0+ClJlbmRlclVJKCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					745,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-client.js",
						"symkeys":
						[
							[
								2693,
								2702
							],
							[
								2771,
								2778
							],
							[
								2895,
								2900
							],
							[
								3087,
								3098
							],
							[
								3250,
								3255
							],
							[
								3699,
								3751
							],
							[
								4013,
								4049
							],
							[
								4294,
								4301
							],
							[
								4371,
								4390
							],
							[
								4432,
								4450
							],
							[
								4504,
								4527
							],
							[
								4846,
								4867
							],
							[
								5128,
								5136
							],
							[
								5663,
								5698
							],
							[
								7630,
								7659
							],
							[
								7715,
								7740
							],
							[
								7791,
								7849
							],
							[
								8557,
								8593
							],
							[
								8730,
								8749
							],
							[
								9205,
								9216
							],
							[
								9701,
								9738
							],
							[
								9853,
								9880
							],
							[
								11273,
								11301
							],
							[
								11531,
								11561
							],
							[
								11631,
								11662
							],
							[
								11966,
								11989
							],
							[
								12052,
								12076
							],
							[
								12140,
								12161
							],
							[
								12222,
								12247
							],
							[
								12287,
								12309
							],
							[
								12371,
								12406
							],
							[
								12462,
								12489
							],
							[
								12788,
								12828
							],
							[
								12961,
								12981
							],
							[
								13278,
								13297
							]
						],
						"symlist":
						[
							"source =>",
							"line =>",
							" e =>",
							"async () =>",
							" e =>",
							"SourceLine = ({ lineno, text, active, children }) =>",
							"SourceText = ({ text, filename }) =>",
							"line =>",
							"(acc, tokens, i) =>",
							"([type, token]) =>",
							"(acc, [type, token]) =>",
							"SourceFile = props =>",
							" resp =>",
							"async function LoadSource(filename)",
							"function Start(args, address)",
							"function Connect(address)",
							"function Initiate(command, address, connect = false, args)",
							"function* TokenizeJS(data, filename)",
							"(acc, [type, c]) =>",
							"(acc, l) =>",
							"async function CreateSocket(endpoint)",
							"async function ReadSocket()",
							".sendMessage = function(msg)",
							"function GetVariables(ref = 0)",
							"async function UpdatePosition()",
							"async function StepIn()",
							"async function StepOut()",
							"async function Next()",
							"async function Continue()",
							"async function Pause()",
							"async function Evaluate(expression)",
							"async function StackTrace()",
							"function SendRequest(command, args = {})",
							"(resolve, reject) =>",
							"function RenderUI()"
						]
					},
					"AQAAAAAAAAAAAAAAkAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					746,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAgAAICBzb3VyY2UgPT4KICBsaW5lID0+CiAgIGUgPT4KKCkgPT4KICAgZSA9PgpTb3VyY2VMaW5lID0gKHsgbGluZW5vLCB0ZXh0LCBhY3RpdmUsIGNoaWxkcmVuIH0pID0+ClNvdXJjZVRleHQgPSAoeyB0ZXh0LCBmaWxlbmFtZSB9KSA9PgogIGxpbmUgPT4KKGFjYywgdG9rZW5zLCBpKSA9PgooW3R5cGUsIHRva2VuXSkgPT4KKGFjYywgW3R5cGUsIHRva2VuXSkgPT4KU291cmNlRmlsZSA9IHByb3BzID0+CiAgIHJlc3AgPT4KTG9hZFNvdXJjZShmaWxlbmFtZSkKU3RhcnQoYXJncywgYWRkcmVzcykKQ29ubmVjdChhZGRyZXNzKQpJbml0aWF0ZShjb21tYW5kLCBhZGRyZXNzLCBjb25uZWN0ID0gZmFsc2UsIGFyZ3MpClRva2VuaXplSlMoZGF0YSwgZmlsZW5hbWUpCihhY2MsIFt0eXBlLCBjXSkgPT4KKGFjYywgbCkgPT4KQ3JlYXRlU29ja2V0KGVuZHBvaW50KQpSZWFkU29ja2V0KCkKICAuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpCkdldFZhcmlhYmxlcyhyZWYgPSAwKQpVcGRhdGVQb3NpdGlvbigpClN0ZXBJbigpClN0ZXBPdXQoKQpOZXh0KCkKQ29udGludWUoKQpQYXVzZSgpCkV2YWx1YXRlKGV4cHJlc3Npb24pClN0YWNrVHJhY2UoKQpTZW5kUmVxdWVzdChjb21tYW5kLCBhcmdzID0ge30pCihyZXNvbHZlLCByZWplY3QpID0+ClJlbmRlclVJKCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					747,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-client.js",
						"symkeys":
						[
							[
								2680,
								2689
							],
							[
								2758,
								2765
							],
							[
								2882,
								2887
							],
							[
								3074,
								3085
							],
							[
								3237,
								3242
							],
							[
								3686,
								3738
							],
							[
								4000,
								4036
							],
							[
								4281,
								4288
							],
							[
								4358,
								4377
							],
							[
								4419,
								4437
							],
							[
								4491,
								4514
							],
							[
								4833,
								4854
							],
							[
								5115,
								5123
							],
							[
								5650,
								5685
							],
							[
								7617,
								7646
							],
							[
								7702,
								7727
							],
							[
								7778,
								7836
							],
							[
								8544,
								8580
							],
							[
								8717,
								8736
							],
							[
								9192,
								9203
							],
							[
								9688,
								9725
							],
							[
								9840,
								9867
							],
							[
								11260,
								11288
							],
							[
								11518,
								11548
							],
							[
								11618,
								11649
							],
							[
								11953,
								11976
							],
							[
								12039,
								12063
							],
							[
								12127,
								12148
							],
							[
								12209,
								12234
							],
							[
								12274,
								12296
							],
							[
								12358,
								12393
							],
							[
								12449,
								12476
							],
							[
								12775,
								12815
							],
							[
								12948,
								12968
							],
							[
								13265,
								13284
							]
						],
						"symlist":
						[
							"source =>",
							"line =>",
							" e =>",
							"async () =>",
							" e =>",
							"SourceLine = ({ lineno, text, active, children }) =>",
							"SourceText = ({ text, filename }) =>",
							"line =>",
							"(acc, tokens, i) =>",
							"([type, token]) =>",
							"(acc, [type, token]) =>",
							"SourceFile = props =>",
							" resp =>",
							"async function LoadSource(filename)",
							"function Start(args, address)",
							"function Connect(address)",
							"function Initiate(command, address, connect = false, args)",
							"function* TokenizeJS(data, filename)",
							"(acc, [type, c]) =>",
							"(acc, l) =>",
							"async function CreateSocket(endpoint)",
							"async function ReadSocket()",
							".sendMessage = function(msg)",
							"function GetVariables(ref = 0)",
							"async function UpdatePosition()",
							"async function StepIn()",
							"async function StepOut()",
							"async function Next()",
							"async function Continue()",
							"async function Pause()",
							"async function Evaluate(expression)",
							"async function StackTrace()",
							"function SendRequest(command, args = {})",
							"(resolve, reject) =>",
							"function RenderUI()"
						]
					},
					"AQAAAAAAAAAAAAAAkAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					748,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-client.js",
						"symkeys":
						[
							[
								2680,
								2689
							],
							[
								2758,
								2765
							],
							[
								2882,
								2887
							],
							[
								3074,
								3085
							],
							[
								3237,
								3242
							],
							[
								3686,
								3738
							],
							[
								4000,
								4036
							],
							[
								4281,
								4288
							],
							[
								4358,
								4377
							],
							[
								4419,
								4437
							],
							[
								4491,
								4514
							],
							[
								4833,
								4854
							],
							[
								5115,
								5123
							],
							[
								5650,
								5685
							],
							[
								7603,
								7632
							],
							[
								7688,
								7713
							],
							[
								7764,
								7822
							],
							[
								8530,
								8566
							],
							[
								8703,
								8722
							],
							[
								9178,
								9189
							],
							[
								9674,
								9711
							],
							[
								9826,
								9853
							],
							[
								11246,
								11274
							],
							[
								11504,
								11534
							],
							[
								11604,
								11635
							],
							[
								11939,
								11962
							],
							[
								12025,
								12049
							],
							[
								12113,
								12134
							],
							[
								12195,
								12220
							],
							[
								12260,
								12282
							],
							[
								12344,
								12379
							],
							[
								12435,
								12462
							],
							[
								12761,
								12801
							],
							[
								12934,
								12954
							],
							[
								13251,
								13270
							]
						],
						"symlist":
						[
							"source =>",
							"line =>",
							" e =>",
							"async () =>",
							" e =>",
							"SourceLine = ({ lineno, text, active, children }) =>",
							"SourceText = ({ text, filename }) =>",
							"line =>",
							"(acc, tokens, i) =>",
							"([type, token]) =>",
							"(acc, [type, token]) =>",
							"SourceFile = props =>",
							" resp =>",
							"async function LoadSource(filename)",
							"function Start(args, address)",
							"function Connect(address)",
							"function Initiate(command, address, connect = false, args)",
							"function* TokenizeJS(data, filename)",
							"(acc, [type, c]) =>",
							"(acc, l) =>",
							"async function CreateSocket(endpoint)",
							"async function ReadSocket()",
							".sendMessage = function(msg)",
							"function GetVariables(ref = 0)",
							"async function UpdatePosition()",
							"async function StepIn()",
							"async function StepOut()",
							"async function Next()",
							"async function Continue()",
							"async function Pause()",
							"async function Evaluate(expression)",
							"async function StackTrace()",
							"function SendRequest(command, args = {})",
							"(resolve, reject) =>",
							"function RenderUI()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAgAAICBzb3VyY2UgPT4KICBsaW5lID0+CiAgIGUgPT4KKCkgPT4KICAgZSA9PgpTb3VyY2VMaW5lID0gKHsgbGluZW5vLCB0ZXh0LCBhY3RpdmUsIGNoaWxkcmVuIH0pID0+ClNvdXJjZVRleHQgPSAoeyB0ZXh0LCBmaWxlbmFtZSB9KSA9PgogIGxpbmUgPT4KKGFjYywgdG9rZW5zLCBpKSA9PgooW3R5cGUsIHRva2VuXSkgPT4KKGFjYywgW3R5cGUsIHRva2VuXSkgPT4KU291cmNlRmlsZSA9IHByb3BzID0+CiAgIHJlc3AgPT4KTG9hZFNvdXJjZShmaWxlbmFtZSkKU3RhcnQoYXJncywgYWRkcmVzcykKQ29ubmVjdChhZGRyZXNzKQpJbml0aWF0ZShjb21tYW5kLCBhZGRyZXNzLCBjb25uZWN0ID0gZmFsc2UsIGFyZ3MpClRva2VuaXplSlMoZGF0YSwgZmlsZW5hbWUpCihhY2MsIFt0eXBlLCBjXSkgPT4KKGFjYywgbCkgPT4KQ3JlYXRlU29ja2V0KGVuZHBvaW50KQpSZWFkU29ja2V0KCkKICAuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpCkdldFZhcmlhYmxlcyhyZWYgPSAwKQpVcGRhdGVQb3NpdGlvbigpClN0ZXBJbigpClN0ZXBPdXQoKQpOZXh0KCkKQ29udGludWUoKQpQYXVzZSgpCkV2YWx1YXRlKGV4cHJlc3Npb24pClN0YWNrVHJhY2UoKQpTZW5kUmVxdWVzdChjb21tYW5kLCBhcmdzID0ge30pCihyZXNvbHZlLCByZWplY3QpID0+ClJlbmRlclVJKCkAAAAAAAAAAJACAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					749,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAgAAICBzb3VyY2UgPT4KICBsaW5lID0+CiAgIGUgPT4KKCkgPT4KICAgZSA9PgpTb3VyY2VMaW5lID0gKHsgbGluZW5vLCB0ZXh0LCBhY3RpdmUsIGNoaWxkcmVuIH0pID0+ClNvdXJjZVRleHQgPSAoeyB0ZXh0LCBmaWxlbmFtZSB9KSA9PgogIGxpbmUgPT4KKGFjYywgdG9rZW5zLCBpKSA9PgooW3R5cGUsIHRva2VuXSkgPT4KKGFjYywgW3R5cGUsIHRva2VuXSkgPT4KU291cmNlRmlsZSA9IHByb3BzID0+CiAgIHJlc3AgPT4KTG9hZFNvdXJjZShmaWxlbmFtZSkKU3RhcnQoYXJncywgYWRkcmVzcykKQ29ubmVjdChhZGRyZXNzKQpJbml0aWF0ZShjb21tYW5kLCBhZGRyZXNzLCBjb25uZWN0ID0gZmFsc2UsIGFyZ3MpClRva2VuaXplSlMoZGF0YSwgZmlsZW5hbWUpCihhY2MsIFt0eXBlLCBjXSkgPT4KKGFjYywgbCkgPT4KQ3JlYXRlU29ja2V0KGVuZHBvaW50KQpSZWFkU29ja2V0KCkKICAuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpCkdldFZhcmlhYmxlcyhyZWYgPSAwKQpVcGRhdGVQb3NpdGlvbigpClN0ZXBJbigpClN0ZXBPdXQoKQpOZXh0KCkKQ29udGludWUoKQpQYXVzZSgpCkV2YWx1YXRlKGV4cHJlc3Npb24pClN0YWNrVHJhY2UoKQpTZW5kUmVxdWVzdChjb21tYW5kLCBhcmdzID0ge30pCihyZXNvbHZlLCByZWplY3QpID0+ClJlbmRlclVJKCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					750,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-client.js",
						"symkeys":
						[
							[
								2680,
								2689
							],
							[
								2758,
								2765
							],
							[
								2882,
								2887
							],
							[
								3074,
								3085
							],
							[
								3237,
								3242
							],
							[
								3686,
								3738
							],
							[
								4000,
								4036
							],
							[
								4281,
								4288
							],
							[
								4358,
								4377
							],
							[
								4419,
								4437
							],
							[
								4491,
								4514
							],
							[
								4833,
								4854
							],
							[
								5115,
								5123
							],
							[
								5650,
								5685
							],
							[
								7603,
								7632
							],
							[
								7688,
								7713
							],
							[
								7764,
								7822
							],
							[
								8530,
								8566
							],
							[
								8703,
								8722
							],
							[
								9178,
								9189
							],
							[
								9674,
								9711
							],
							[
								9826,
								9853
							],
							[
								11246,
								11274
							],
							[
								11504,
								11534
							],
							[
								11604,
								11635
							],
							[
								11939,
								11962
							],
							[
								12025,
								12049
							],
							[
								12113,
								12134
							],
							[
								12195,
								12220
							],
							[
								12260,
								12282
							],
							[
								12344,
								12379
							],
							[
								12435,
								12462
							],
							[
								12761,
								12801
							],
							[
								12934,
								12954
							],
							[
								13251,
								13270
							]
						],
						"symlist":
						[
							"source =>",
							"line =>",
							" e =>",
							"async () =>",
							" e =>",
							"SourceLine = ({ lineno, text, active, children }) =>",
							"SourceText = ({ text, filename }) =>",
							"line =>",
							"(acc, tokens, i) =>",
							"([type, token]) =>",
							"(acc, [type, token]) =>",
							"SourceFile = props =>",
							" resp =>",
							"async function LoadSource(filename)",
							"function Start(args, address)",
							"function Connect(address)",
							"function Initiate(command, address, connect = false, args)",
							"function* TokenizeJS(data, filename)",
							"(acc, [type, c]) =>",
							"(acc, l) =>",
							"async function CreateSocket(endpoint)",
							"async function ReadSocket()",
							".sendMessage = function(msg)",
							"function GetVariables(ref = 0)",
							"async function UpdatePosition()",
							"async function StepIn()",
							"async function StepOut()",
							"async function Next()",
							"async function Continue()",
							"async function Pause()",
							"async function Evaluate(expression)",
							"async function StackTrace()",
							"function SendRequest(command, args = {})",
							"(resolve, reject) =>",
							"function RenderUI()"
						]
					},
					"AwAAAAAAAAAAAAAAkAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJACAAAgIHNvdXJjZSA9PgogIGxpbmUgPT4KICAgZSA9PgooKSA9PgogICBlID0+ClNvdXJjZUxpbmUgPSAoeyBsaW5lbm8sIHRleHQsIGFjdGl2ZSwgY2hpbGRyZW4gfSkgPT4KU291cmNlVGV4dCA9ICh7IHRleHQsIGZpbGVuYW1lIH0pID0+CiAgbGluZSA9PgooYWNjLCB0b2tlbnMsIGkpID0+CihbdHlwZSwgdG9rZW5dKSA9PgooYWNjLCBbdHlwZSwgdG9rZW5dKSA9PgpTb3VyY2VGaWxlID0gcHJvcHMgPT4KICAgcmVzcCA9PgpMb2FkU291cmNlKGZpbGVuYW1lKQpTdGFydChhcmdzLCBhZGRyZXNzKQpDb25uZWN0KGFkZHJlc3MpCkluaXRpYXRlKGNvbW1hbmQsIGFkZHJlc3MsIGNvbm5lY3QgPSBmYWxzZSwgYXJncykKVG9rZW5pemVKUyhkYXRhLCBmaWxlbmFtZSkKKGFjYywgW3R5cGUsIGNdKSA9PgooYWNjLCBsKSA9PgpDcmVhdGVTb2NrZXQoZW5kcG9pbnQpClJlYWRTb2NrZXQoKQogIC5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykKR2V0VmFyaWFibGVzKHJlZiA9IDApClVwZGF0ZVBvc2l0aW9uKCkKU3RlcEluKCkKU3RlcE91dCgpCk5leHQoKQpDb250aW51ZSgpClBhdXNlKCkKRXZhbHVhdGUoZXhwcmVzc2lvbikKU3RhY2tUcmFjZSgpClNlbmRSZXF1ZXN0KGNvbW1hbmQsIGFyZ3MgPSB7fSkKKHJlc29sdmUsIHJlamVjdCkgPT4KUmVuZGVyVUkoKQAAAAAAAAAAkAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					751,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAACQAgAAICBzb3VyY2UgPT4KICBsaW5lID0+CiAgIGUgPT4KKCkgPT4KICAgZSA9PgpTb3VyY2VMaW5lID0gKHsgbGluZW5vLCB0ZXh0LCBhY3RpdmUsIGNoaWxkcmVuIH0pID0+ClNvdXJjZVRleHQgPSAoeyB0ZXh0LCBmaWxlbmFtZSB9KSA9PgogIGxpbmUgPT4KKGFjYywgdG9rZW5zLCBpKSA9PgooW3R5cGUsIHRva2VuXSkgPT4KKGFjYywgW3R5cGUsIHRva2VuXSkgPT4KU291cmNlRmlsZSA9IHByb3BzID0+CiAgIHJlc3AgPT4KTG9hZFNvdXJjZShmaWxlbmFtZSkKU3RhcnQoYXJncywgYWRkcmVzcykKQ29ubmVjdChhZGRyZXNzKQpJbml0aWF0ZShjb21tYW5kLCBhZGRyZXNzLCBjb25uZWN0ID0gZmFsc2UsIGFyZ3MpClRva2VuaXplSlMoZGF0YSwgZmlsZW5hbWUpCihhY2MsIFt0eXBlLCBjXSkgPT4KKGFjYywgbCkgPT4KQ3JlYXRlU29ja2V0KGVuZHBvaW50KQpSZWFkU29ja2V0KCkKICAuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpCkdldFZhcmlhYmxlcyhyZWYgPSAwKQpVcGRhdGVQb3NpdGlvbigpClN0ZXBJbigpClN0ZXBPdXQoKQpOZXh0KCkKQ29udGludWUoKQpQYXVzZSgpCkV2YWx1YXRlKGV4cHJlc3Npb24pClN0YWNrVHJhY2UoKQpTZW5kUmVxdWVzdChjb21tYW5kLCBhcmdzID0ge30pCihyZXNvbHZlLCByZWplY3QpID0+ClJlbmRlclVJKCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					752,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					753,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-client.js",
						"symkeys":
						[
							[
								2680,
								2689
							],
							[
								2758,
								2765
							],
							[
								2882,
								2887
							],
							[
								3074,
								3085
							],
							[
								3237,
								3242
							],
							[
								3686,
								3738
							],
							[
								4000,
								4036
							],
							[
								4281,
								4288
							],
							[
								4358,
								4377
							],
							[
								4419,
								4437
							],
							[
								4491,
								4514
							],
							[
								4833,
								4854
							],
							[
								5115,
								5123
							],
							[
								5650,
								5685
							],
							[
								7603,
								7632
							],
							[
								7688,
								7713
							],
							[
								7764,
								7822
							],
							[
								8530,
								8566
							],
							[
								8703,
								8722
							],
							[
								9178,
								9189
							],
							[
								9674,
								9711
							],
							[
								9826,
								9853
							],
							[
								11246,
								11274
							],
							[
								11504,
								11534
							],
							[
								11604,
								11635
							],
							[
								11939,
								11962
							],
							[
								12025,
								12049
							],
							[
								12113,
								12134
							],
							[
								12195,
								12220
							],
							[
								12260,
								12282
							],
							[
								12344,
								12379
							],
							[
								12435,
								12462
							],
							[
								12761,
								12801
							],
							[
								12934,
								12954
							],
							[
								13251,
								13270
							]
						],
						"symlist":
						[
							"source =>",
							"line =>",
							" e =>",
							"async () =>",
							" e =>",
							"SourceLine = ({ lineno, text, active, children }) =>",
							"SourceText = ({ text, filename }) =>",
							"line =>",
							"(acc, tokens, i) =>",
							"([type, token]) =>",
							"(acc, [type, token]) =>",
							"SourceFile = props =>",
							" resp =>",
							"async function LoadSource(filename)",
							"function Start(args, address)",
							"function Connect(address)",
							"function Initiate(command, address, connect = false, args)",
							"function* TokenizeJS(data, filename)",
							"(acc, [type, c]) =>",
							"(acc, l) =>",
							"async function CreateSocket(endpoint)",
							"async function ReadSocket()",
							".sendMessage = function(msg)",
							"function GetVariables(ref = 0)",
							"async function UpdatePosition()",
							"async function StepIn()",
							"async function StepOut()",
							"async function Next()",
							"async function Continue()",
							"async function Pause()",
							"async function Evaluate(expression)",
							"async function StackTrace()",
							"function SendRequest(command, args = {})",
							"(resolve, reject) =>",
							"function RenderUI()"
						]
					},
					"AQAAAAAAAAAAAAAAkAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "fire.js",
			"redo_stack":
			[
				[
					5821,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AgAAAPA5AAAAAAAA8TkAAAAAAAAAAAAA7zkAAAAAAADvOQAAAAAAAAEAAAA3",
					"AQAAAAAAAAABAAAA8DkAAAAAAADwOQAAAAAAAAAAAAAAAPC/"
				],
				[
					5816,
					1,
					"insert",
					{
						"characters": "31"
					},
					"AwAAAOg5AAAAAAAA6DkAAAAAAAABAAAAMeg5AAAAAAAA6jkAAAAAAAAAAAAA5zkAAAAAAADnOQAAAAAAAAEAAAAz",
					"AQAAAAAAAAABAAAA6TkAAAAAAADpOQAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 27923,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5411,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAALBYAAAAAAAAslgAAAAAAAAAAAAAdFgAAAAAAAB2WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdFgAAAAAAACwWAAAAAAAAAAAAAAAAPC/"
				],
				[
					5449,
					1,
					"",
					null,
					"AgAAAMZWAAAAAAAAelgAAAAAAAAAAAAAelgAAAAAAAB6WAAAAAAAAIsCAAAKZnVuY3Rpb24gUmVzaXplSGFuZGxlcihldmVudCkgewogIGxldCB7IGJvZHkgfSA9IGRvY3VtZW50OwogIGxldCByZWN0ID0gRWxlbWVudC5yZWN0KCdjYW52YXMnKTsKCiAgbGV0IHsgd2lkdGgsIGhlaWdodCB9ID0gRWxlbWVudC5nZXRSZWN0KGJvZHkpOwoKICBjb25zb2xlLmxvZygnUmVzaXplSGFuZGxlcicsIHsgZXZlbnQsIHJlY3QsIHdpZHRoLCBoZWlnaHQgfSk7CgogIEVsZW1lbnQuc2V0Q1NTKHN2ZywgeyB3aWR0aDogY2FudmFzRWxlbWVudC5vZmZzZXRXaWR0aCArICdweCcsIGhlaWdodDogY2FudmFzRWxlbWVudC5vZmZzZXRIZWlnaHQgKyAncHgnLCB0cmFuc2Zvcm06ICdyb3RhdGUoOTBkZWcpJyB9KTsKCiAgLy9tb3VzZVRyYW5zZm9ybSA9IFBvc2l0aW9uUHJvY2Vzc29yKCk7Cn0KCmZ1bmN0aW9uIE9yaWVudGF0aW9uQ2hhbmdlKGUpIHsKLyogIHJlY3QgPSBjYW52YXNSZWN0OwogIG1vdXNlVHJhbnNmb3JtID0gUG9zaXRpb25Qcm9jZXNzb3IoKTsqLwogIGNvbnNvbGUubG9nKCdPcmllbnRhdGlvbkNoYW5nZScsIHsgZSwgcmVjdCB9KTsKfQoKLypmdW5jdGlvbiBnZXRSZWN0KGVsZW0pIHsKICByZXR1cm4gbmV3IFJlY3QoKGVsZW0gPz8gZGl2RWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLnJvdW5kKDEpOwp9Ki8",
					"AQAAAAAAAAABAAAAUVkAAAAAAADGVgAAAAAAAAAAAAAAAPC/"
				],
				[
					5452,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMVWAAAAAAAAxlYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxVYAAAAAAADFVgAAAAAAAAAAAAAAAPC/"
				],
				[
					5491,
					1,
					"cut",
					null,
					"AQAAAJlXAAAAAAAAmVcAAAAAAACLAAAAICBFbGVtZW50LnNldENTUyhzdmcsIHsgd2lkdGg6IGNhbnZhc0VsZW1lbnQub2Zmc2V0V2lkdGggKyAncHgnLCBoZWlnaHQ6IGNhbnZhc0VsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgJ3B4JywgdHJhbnNmb3JtOiAncm90YXRlKDkwZGVnKScgfSk7Cg",
					"AQAAAAAAAAABAAAAmVcAAAAAAAAkWAAAAAAAAAAAAAAAAPC/"
				],
				[
					5494,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAANWAAAAAAAABFYAAAAAAAAAAAAABFYAAAAAAAAIVgAAAAAAAAAAAAAIVgAAAAAAAApWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAA1YAAAAAAAADVgAAAAAAAAAAAAAAAPC/"
				],
				[
					5495,
					1,
					"paste",
					null,
					"AQAAAApWAAAAAAAAlVYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAClYAAAAAAAAKVgAAAAAAAAAAAAAAAPC/"
				],
				[
					5499,
					1,
					"cut",
					null,
					"AQAAAJVWAAAAAAAAlVYAAAAAAABdAAAACiAgICAgICh7IHJlc2l6ZTogUmVzaXplSGFuZGxlciwgb3JpZW50YXRpb25jaGFuZ2U6IE9yaWVudGF0aW9uQ2hhbmdlIH1bZXZlbnQudHlwZV0oZXZlbnQpKTsK",
					"AQAAAAAAAAABAAAAlVYAAAAAAADyVgAAAAAAAAAAAAAAAAAA"
				],
				[
					5504,
					1,
					"cut",
					null,
					"AQAAAARWAAAAAAAABFYAAAAAAACRAAAAICAgICAgICBFbGVtZW50LnNldENTUyhzdmcsIHsgd2lkdGg6IGNhbnZhc0VsZW1lbnQub2Zmc2V0V2lkdGggKyAncHgnLCBoZWlnaHQ6IGNhbnZhc0VsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgJ3B4JywgdHJhbnNmb3JtOiAncm90YXRlKDkwZGVnKScgfSk7Cg",
					"AQAAAAAAAAABAAAABFYAAAAAAACVVgAAAAAAAAAAAAAAAAAA"
				],
				[
					5505,
					1,
					"paste",
					null,
					"AQAAAARWAAAAAAAAlVYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABFYAAAAAAAAEVgAAAAAAAAAAAAAAAPC/"
				],
				[
					5510,
					1,
					"cut",
					null,
					"AQAAAARWAAAAAAAABFYAAAAAAACRAAAAICAgICAgICBFbGVtZW50LnNldENTUyhzdmcsIHsgd2lkdGg6IGNhbnZhc0VsZW1lbnQub2Zmc2V0V2lkdGggKyAncHgnLCBoZWlnaHQ6IGNhbnZhc0VsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgJ3B4JywgdHJhbnNmb3JtOiAncm90YXRlKDkwZGVnKScgfSk7Cg",
					"AQAAAAAAAAABAAAABFYAAAAAAACVVgAAAAAAAAAAAAAAAAAA"
				],
				[
					5511,
					1,
					"paste",
					null,
					"AQAAAARWAAAAAAAAlVYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABFYAAAAAAAAEVgAAAAAAAAAAAAAAAPC/"
				],
				[
					5519,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANFXAAAAAAAA0lcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0VcAAAAAAADRVwAAAAAAAAAAAAAAAAAA"
				],
				[
					5521,
					1,
					"paste",
					null,
					"AQAAAM5XAAAAAAAAX1gAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzlcAAAAAAADOVwAAAAAAAAAAAAAAAAAA"
				],
				[
					5527,
					1,
					"",
					null,
					"AgAAABxXAAAAAAAAMFcAAAAAAAAAAAAAMFcAAAAAAAAwVwAAAAAAAEAAAAAgIGxldCB7IGJvZHkgfSA9IGRvY3VtZW50OwogIGxldCByZWN0ID0gRWxlbWVudC5yZWN0KCdjYW52YXMnKTsK",
					"AQAAAAAAAAABAAAAHFcAAAAAAABcVwAAAAAAAAAAAAAAAAAA"
				],
				[
					5529,
					1,
					"cut",
					null,
					"AQAAABxXAAAAAAAAHFcAAAAAAAAUAAAARWxlbWVudC5yZWN0KCdib2R5Jyk",
					"AQAAAAAAAAABAAAAMFcAAAAAAAAcVwAAAAAAAAAAAAAAAAAA"
				],
				[
					5532,
					1,
					"paste",
					null,
					"AQAAADZXAAAAAAAASlcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANlcAAAAAAAA2VwAAAAAAAAAAAAAAAPC/"
				],
				[
					5534,
					1,
					"cut",
					null,
					"AQAAAEpXAAAAAAAASlcAAAAAAAAWAAAARWxlbWVudC5nZXRSZWN0KGJvZHkpOw",
					"AQAAAAAAAAABAAAASlcAAAAAAABgVwAAAAAAAP///////+9/"
				],
				[
					5535,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEpXAAAAAAAAS1cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASlcAAAAAAABKVwAAAAAAAAAAAAAAAPC/"
				],
				[
					5544,
					12,
					"right_delete",
					null,
					"DAAAAG5XAAAAAAAAblcAAAAAAAABAAAAZW5XAAAAAAAAblcAAAAAAAABAAAAdm5XAAAAAAAAblcAAAAAAAABAAAAZW5XAAAAAAAAblcAAAAAAAABAAAAbm5XAAAAAAAAblcAAAAAAAABAAAAdG5XAAAAAAAAblcAAAAAAAABAAAALG5XAAAAAAAAblcAAAAAAAABAAAAIG5XAAAAAAAAblcAAAAAAAABAAAAcm5XAAAAAAAAblcAAAAAAAABAAAAZW5XAAAAAAAAblcAAAAAAAABAAAAY25XAAAAAAAAblcAAAAAAAABAAAAdG5XAAAAAAAAblcAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAblcAAAAAAABuVwAAAAAAAAAAAAAAAPC/"
				],
				[
					5547,
					5,
					"left_delete",
					null,
					"BQAAABdXAAAAAAAAF1cAAAAAAAABAAAAdBZXAAAAAAAAFlcAAAAAAAABAAAAbhVXAAAAAAAAFVcAAAAAAAABAAAAZRRXAAAAAAAAFFcAAAAAAAABAAAAdhNXAAAAAAAAE1cAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAGFcAAAAAAAAYVwAAAAAAAAAAAAAAAPC/"
				],
				[
					5550,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHtXAAAAAAAAfFcAAAAAAAAAAAAAfFcAAAAAAAB+VwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe1cAAAAAAAB7VwAAAAAAAP///////+9/"
				],
				[
					5552,
					3,
					"right_delete",
					null,
					"BAAAAH9XAAAAAAAAf1cAAAAAAAACAAAAICB8VwAAAAAAAHxXAAAAAAAAAgAAACAgfVcAAAAAAAB9VwAAAAAAAAIAAAAgIH1XAAAAAAAAfVcAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAf1cAAAAAAAB/VwAAAAAAAAAAAAAAAPC/"
				],
				[
					5554,
					1,
					"left_delete",
					null,
					"AQAAAAdYAAAAAAAAB1gAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAACFgAAAAAAAAIWAAAAAAAAAAAAAAAAAAA"
				],
				[
					5564,
					1,
					"left_delete",
					null,
					"AQAAAAtYAAAAAAAAC1gAAAAAAABUAAAAZnVuY3Rpb24gT3JpZW50YXRpb25DaGFuZ2UoZSkgewoKICBjb25zb2xlLmxvZygnT3JpZW50YXRpb25DaGFuZ2UnLCB7IGUsIHJlY3QgfSk7Cn0K",
					"AQAAAAAAAAABAAAAC1gAAAAAAABfWAAAAAAAAAAAAAAAAAAA"
				],
				[
					5594,
					1,
					"paste",
					null,
					"AgAAAARWAAAAAAAAGVYAAAAAAAAAAAAAGVYAAAAAAAAZVgAAAAAAAJEAAAAgICAgICAgIEVsZW1lbnQuc2V0Q1NTKHN2ZywgeyB3aWR0aDogY2FudmFzRWxlbWVudC5vZmZzZXRXaWR0aCArICdweCcsIGhlaWdodDogY2FudmFzRWxlbWVudC5vZmZzZXRIZWlnaHQgKyAncHgnLCB0cmFuc2Zvcm06ICdyb3RhdGUoOTBkZWcpJyB9KTsK",
					"AQAAAAAAAAABAAAABFYAAAAAAACVVgAAAAAAAAAAAAAAAPC/"
				],
				[
					5643,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADJHAAAAAAAAM0cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMkcAAAAAAAAyRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5645,
					1,
					"insert",
					{
						"characters": "GenericPrinter"
					},
					"DgAAADJHAAAAAAAAM0cAAAAAAAAAAAAAM0cAAAAAAAA0RwAAAAAAAAAAAAA0RwAAAAAAADVHAAAAAAAAAAAAADVHAAAAAAAANkcAAAAAAAAAAAAANkcAAAAAAAA3RwAAAAAAAAAAAAA3RwAAAAAAADhHAAAAAAAAAAAAADhHAAAAAAAAOUcAAAAAAAAAAAAAOUcAAAAAAAA6RwAAAAAAAAAAAAA6RwAAAAAAADtHAAAAAAAAAAAAADtHAAAAAAAAPEcAAAAAAAAAAAAAPEcAAAAAAAA9RwAAAAAAAAAAAAA9RwAAAAAAAD5HAAAAAAAAAAAAAD5HAAAAAAAAP0cAAAAAAAAAAAAAP0cAAAAAAABARwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMkcAAAAAAAAyRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5646,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEBHAAAAAAAAQkcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQEcAAAAAAABARwAAAAAAAAAAAAAAAPC/"
				],
				[
					5647,
					1,
					"right_delete",
					null,
					"AQAAAEFHAAAAAAAAQUcAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAQUcAAAAAAABBRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5650,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFlHAAAAAAAAW0cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWUcAAAAAAABZRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5652,
					2,
					"left_delete",
					null,
					"AgAAAFpHAAAAAAAAWkcAAAAAAAABAAAAKVlHAAAAAAAAWUcAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAW0cAAAAAAABbRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5653,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFlHAAAAAAAAWkcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWUcAAAAAAABZRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5664,
					1,
					"right_delete",
					null,
					"AQAAAPdGAAAAAAAA90YAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA90YAAAAAAAD3RgAAAAAAAAAAAAAAAPC/"
				],
				[
					5665,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAPdGAAAAAAAA+EYAAAAAAAAAAAAA+EYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAAFHAAAAAAAAAAAAAAFHAAAAAAAACUcAAAAAAAAAAAAA+EYAAAAAAAD4RgAAAAAAAAgAAAAgICAgICAgIAFHAAAAAAAAAkcAAAAAAAAAAAAAAkcAAAAAAAAKRwAAAAAAAAAAAAD5RgAAAAAAAPlGAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAA90YAAAAAAAD3RgAAAAAAAAAAAAAAAPC/"
				],
				[
					5671,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPZGAAAAAAAA90YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9kYAAAAAAAD2RgAAAAAAAAAAAAAAAPC/"
				],
				[
					5672,
					1,
					"insert",
					{
						"characters": " itre"
					},
					"BQAAAPdGAAAAAAAA+EYAAAAAAAAAAAAA+EYAAAAAAAD5RgAAAAAAAAAAAAD5RgAAAAAAAPpGAAAAAAAAAAAAAPpGAAAAAAAA+0YAAAAAAAAAAAAA+0YAAAAAAAD8RgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA90YAAAAAAAD3RgAAAAAAAAAAAAAAAPC/"
				],
				[
					5673,
					2,
					"left_delete",
					null,
					"AgAAAPtGAAAAAAAA+0YAAAAAAAABAAAAZfpGAAAAAAAA+kYAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA/EYAAAAAAAD8RgAAAAAAAAAAAAAAAPC/"
				],
				[
					5674,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAPpGAAAAAAAA+0YAAAAAAAAAAAAA+0YAAAAAAAD8RgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+kYAAAAAAAD6RgAAAAAAAAAAAAAAAPC/"
				],
				[
					5675,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPxGAAAAAAAA/UYAAAAAAAAAAAAA/UYAAAAAAAD+RgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/EYAAAAAAAD8RgAAAAAAAAAAAAAAAPC/"
				],
				[
					5676,
					1,
					"insert",
					{
						"characters": " chain"
					},
					"BgAAAP5GAAAAAAAA/0YAAAAAAAAAAAAA/0YAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAAFHAAAAAAAAAAAAAAFHAAAAAAAAAkcAAAAAAAAAAAAAAkcAAAAAAAADRwAAAAAAAAAAAAADRwAAAAAAAARHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/kYAAAAAAAD+RgAAAAAAAAAAAAAAAPC/"
				],
				[
					5677,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAARHAAAAAAAABUcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABEcAAAAAAAAERwAAAAAAAAAAAAAAAPC/"
				],
				[
					5678,
					1,
					"left_delete",
					null,
					"AQAAAARHAAAAAAAABEcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAABUcAAAAAAAAFRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5679,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAARHAAAAAAAABkcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABEcAAAAAAAAERwAAAAAAAAAAAAAAAPC/"
				],
				[
					5680,
					1,
					"insert",
					{
						"characters": "MoveIterator,"
					},
					"DQAAAAVHAAAAAAAABkcAAAAAAAAAAAAABkcAAAAAAAAHRwAAAAAAAAAAAAAHRwAAAAAAAAhHAAAAAAAAAAAAAAhHAAAAAAAACUcAAAAAAAAAAAAACUcAAAAAAAAKRwAAAAAAAAAAAAAKRwAAAAAAAAtHAAAAAAAAAAAAAAtHAAAAAAAADEcAAAAAAAAAAAAADEcAAAAAAAANRwAAAAAAAAAAAAANRwAAAAAAAA5HAAAAAAAAAAAAAA5HAAAAAAAAD0cAAAAAAAAAAAAAD0cAAAAAAAAQRwAAAAAAAAAAAAAQRwAAAAAAABFHAAAAAAAAAAAAABFHAAAAAAAAEkcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABUcAAAAAAAAFRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5681,
					1,
					"insert",
					{
						"characters": " GenericP"
					},
					"CQAAABJHAAAAAAAAE0cAAAAAAAAAAAAAE0cAAAAAAAAURwAAAAAAAAAAAAAURwAAAAAAABVHAAAAAAAAAAAAABVHAAAAAAAAFkcAAAAAAAAAAAAAFkcAAAAAAAAXRwAAAAAAAAAAAAAXRwAAAAAAABhHAAAAAAAAAAAAABhHAAAAAAAAGUcAAAAAAAAAAAAAGUcAAAAAAAAaRwAAAAAAAAAAAAAaRwAAAAAAABtHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEkcAAAAAAAASRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5682,
					1,
					"insert",
					{
						"characters": "rinter,Touch"
					},
					"DAAAABtHAAAAAAAAHEcAAAAAAAAAAAAAHEcAAAAAAAAdRwAAAAAAAAAAAAAdRwAAAAAAAB5HAAAAAAAAAAAAAB5HAAAAAAAAH0cAAAAAAAAAAAAAH0cAAAAAAAAgRwAAAAAAAAAAAAAgRwAAAAAAACFHAAAAAAAAAAAAACFHAAAAAAAAIkcAAAAAAAAAAAAAIkcAAAAAAAAjRwAAAAAAAAAAAAAjRwAAAAAAACRHAAAAAAAAAAAAACRHAAAAAAAAJUcAAAAAAAAAAAAAJUcAAAAAAAAmRwAAAAAAAAAAAAAmRwAAAAAAACdHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAG0cAAAAAAAAbRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5683,
					1,
					"insert",
					{
						"characters": "Iterator"
					},
					"CAAAACdHAAAAAAAAKEcAAAAAAAAAAAAAKEcAAAAAAAApRwAAAAAAAAAAAAApRwAAAAAAACpHAAAAAAAAAAAAACpHAAAAAAAAK0cAAAAAAAAAAAAAK0cAAAAAAAAsRwAAAAAAAAAAAAAsRwAAAAAAAC1HAAAAAAAAAAAAAC1HAAAAAAAALkcAAAAAAAAAAAAALkcAAAAAAAAvRwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ0cAAAAAAAAnRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5685,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADBHAAAAAAAAMUcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMEcAAAAAAAAwRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5686,
					1,
					"left_delete",
					null,
					"AQAAADBHAAAAAAAAMEcAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAMUcAAAAAAAAxRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5694,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADBHAAAAAAAAMkcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMEcAAAAAAAAwRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5695,
					1,
					"insert",
					{
						"characters": "window"
					},
					"BgAAADFHAAAAAAAAMkcAAAAAAAAAAAAAMkcAAAAAAAAzRwAAAAAAAAAAAAAzRwAAAAAAADRHAAAAAAAAAAAAADRHAAAAAAAANUcAAAAAAAAAAAAANUcAAAAAAAA2RwAAAAAAAAAAAAA2RwAAAAAAADdHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMUcAAAAAAAAxRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5700,
					1,
					"insert",
					{
						"characters": "iter"
					},
					"BQAAAF5HAAAAAAAAX0cAAAAAAAAAAAAAX0cAAAAAAABfRwAAAAAAAEcAAAAvKkdlbmVyaWNQcmludGVyKi8gTW92ZUl0ZXJhdG9yKEdlbmVyaWNQcmludGVyKCBUb3VjaEl0ZXJhdG9yKHdpbmRvdykpKV9HAAAAAAAAYEcAAAAAAAAAAAAAYEcAAAAAAABhRwAAAAAAAAAAAABhRwAAAAAAAGJHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXkcAAAAAAAClRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5712,
					1,
					"insert",
					{
						"characters": "Rio"
					},
					"AwAAAARHAAAAAAAABUcAAAAAAAAAAAAABUcAAAAAAAAGRwAAAAAAAAAAAAAGRwAAAAAAAAdHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABEcAAAAAAAAERwAAAAAAAAAAAAAAAPC/"
				],
				[
					5713,
					1,
					"left_delete",
					null,
					"AQAAAAZHAAAAAAAABkcAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAB0cAAAAAAAAHRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5714,
					1,
					"insert",
					{
						"characters": "ght"
					},
					"AwAAAAZHAAAAAAAAB0cAAAAAAAAAAAAAB0cAAAAAAAAIRwAAAAAAAAAAAAAIRwAAAAAAAAlHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABkcAAAAAAAAGRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5738,
					1,
					"left_delete",
					null,
					"AQAAAD5HAAAAAAAAPkcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAP0cAAAAAAAA/RwAAAAAAAAAAAAAAAPC/"
				],
				[
					5758,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA6kYAAAAAAAA/RwAAAAAAAAAAAAAAAPC/"
				],
				[
					5766,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAADBHAAAAAAAAMkcAAAAAAAAAAAAAIEcAAAAAAAAiRwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIEcAAAAAAAAwRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5769,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAIkcAAAAAAAAyRwAAAAAAAAAAAAAAAPC/"
				],
				[
					5805,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADdawAAaW1wb3J0IHsgY3Jvc3NraXQsIENBTlZBUyB9IGZyb20gJy4vbGliL2Nyb3Nza2l0LmpzJzsKaW1wb3J0IHsgUkdCQSwgSFNMQSB9IGZyb20gJy4vbGliL2NvbG9yLmpzJzsKaW1wb3J0IHsgdGltZXIgfSBmcm9tICcuL2xpYi9hc3luYy9oZWxwZXJzLmpzJzsKaW1wb3J0IHsgV2ViU29ja2V0SXRlcmF0b3IsIFdlYlNvY2tldFVSTCwgQ3JlYXRlV2ViU29ja2V0LCBSZWNvbm5lY3RpbmdXZWJTb2NrZXQsIFN0cmVhbVJlYWRJdGVyYXRvciB9IGZyb20gJy4vbGliL2FzeW5jL3dlYnNvY2tldC5qcyc7CmltcG9ydCB7IG9uY2UsIHN0cmVhbWlmeSwgdGhyb3R0bGUsIGRpc3RpbmN0LCBzdWJzY3JpYmUgfSBmcm9tICcuL2xpYi9hc3luYy9ldmVudHMuanMnOwppbXBvcnQgeyBwcm9wZXJ0eUxvb2t1cCwgdHJ5Q2F0Y2gsIHRyeUZ1bmN0aW9uLCBjaGFpbiwgY2hhaW5SaWdodCwgZ2V0c2V0LCBnZXR0ZXJzZXR0ZXIsIGxhenlQcm9wZXJ0aWVzLCBtZW1vaXplLCBkZWZpbmUsIGlzVW5kZWZpbmVkLCBwcm9wZXJ0aWVzLCBrZXlzLCB1bmlxdWUsIHJhbmRTdHIsIHJhbmRJbnQsIHdhaXRGb3IsIGlzRnVuY3Rpb24sIGdldFByb3RvdHlwZUNoYWluLCBnZXRDb25zdHJ1Y3RvckNoYWluLCBpc0NGdW5jdGlvbiwgaXNKU0Z1bmN0aW9uLCBpc09iamVjdCB9IGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgeyBpc1N0cmVhbSwgQWNxdWlyZVJlYWRlciwgQWNxdWlyZVdyaXRlciwgQXJyYXlXcml0ZXIsIHJlYWRTdHJlYW0sIFBpcGVUbywgV3JpdGFibGVSZXBlYXRlciwgV3JpdGVJdGVyYXRvciwgQXN5bmNXcml0ZSwgQXN5bmNSZWFkLCBSZWFkRnJvbUl0ZXJhdG9yLCBXcml0ZVRvUmVwZWF0ZXIsIExvZ1NpbmssIFN0cmluZ1JlYWRlciwgTGluZVJlYWRlciwgRGVidWdUcmFuc2Zvcm1TdHJlYW0sIENyZWF0ZVdyaXRhYmxlU3RyZWFtLCBDcmVhdGVUcmFuc2Zvcm1TdHJlYW0sIFJlcGVhdGVyU291cmNlLCBSZXBlYXRlclNpbmssIExpbmVCdWZmZXJTdHJlYW0sIFRleHRUcmFuc2Zvcm1TdHJlYW0sIENodW5rUmVhZGVyLCBCeXRlUmVhZGVyLCBQaXBlVG9SZXBlYXRlciwgUmVhZGVyLCBSZWFkQWxsIH0gZnJvbSAnLi9saWIvc3RyZWFtL3V0aWxzLmpzJzsKaW1wb3J0IHsgSW50ZXJzZWN0aW9uLCBNYXRyaXgsIGlzUmVjdCwgUmVjdCwgU2l6ZSwgUG9pbnQsIExpbmUsIFRyYW5zZm9ybWF0aW9uTGlzdCwgVmVjdG9yIH0gZnJvbSAnLi9saWIvZ2VvbS5qcyc7CmltcG9ydCB7IEVsZW1lbnQsIGlzRWxlbWVudCwgU1ZHIH0gZnJvbSAnLi9saWIvZG9tLmpzJzsKaW1wb3J0IFJlYWN0LCB7IGgsIGh0bWwsIHJlbmRlciwgRnJhZ21lbnQsIENvbXBvbmVudCwgY3JlYXRlUmVmLCB1c2VTdGF0ZSwgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYsIHRvQ2hpbGRBcnJheSB9IGZyb20gJy4vbGliL2RvbS9wcmVhY3RDb21wb25lbnQuanMnOwppbXBvcnQgbWlzY2ZpeGVkNngxMyBmcm9tICcuL3N0YXRpYy9qc29uL21pc2NmaXhlZDZ4MTMuanMnOwppbXBvcnQgeyBMaXN0IH0gZnJvbSAnLi9saWIvbGlzdC5qcyc7Ci8vaW1wb3J0IHsgZmlyZSB9IGZyb20gJy4vZmlyZS9idWlsZC9maXJlLWRlYnVnLmpzJzsKaW1wb3J0IHsgTGlua2VkTGlzdCB9IGZyb20gJy4vbGliL2NvbnRhaW5lci9saW5rZWRMaXN0LmpzJzsKaW1wb3J0IHsgd2FzbUJyb3dzZXJJbnN0YW50aWF0ZSB9IGZyb20gJy4vd2FzbS1oZWxwZXJzLmpzJzsKLy9pbXBvcnQgbHNjYWNoZSBmcm9tICcuL2xpYi9sc2NhY2hlLmpzJzsKaW1wb3J0IHsgdXNlVHJrbCB9IGZyb20gJy4vbGliL2hvb2tzL3VzZVRya2wuanMnOwppbXBvcnQgdHJrbCBmcm9tICcuL2xpYi90cmtsLmpzJzsKCmxldCBsc2dzID0gKGdsb2JhbFRoaXMubHNncyA9IGdldHNldChba2V5ID0+IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSksIChrZXksIHZhbHVlKSA9PiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKV0pKTsKCmNvbnN0IGxzdG9yZSA9IChnbG9iYWxUaGlzLmxzdG9yZSA9IHByb3BlcnR5TG9va3VwKAogIC4uLihnbG9iYWxUaGlzLmxzZ3MyID0gbHNncy50cmFuc2Zvcm0oCiAgICB0cnlGdW5jdGlvbigKICAgICAgdiA9PiBKU09OLnBhcnNlKHYgPz8gJycpLAogICAgICB2ID0+IHYsCiAgICAgICgpID0+IG51bGwKICAgICksCiAgICBvID0+IEpTT04uc3RyaW5naWZ5KG8gfHwgbnVsbCkKICApKQopKTsKCi8qZnVuY3Rpb24gU2V0TG9ja2VkKHN0YXRlKSB7CiAgaHRtbEVsZW1lbnQuY2xhc3NMaXN0W3N0YXRlID8gJ2FkZCcgOiAncmVtb3ZlJ10oJ2lzLWxvY2tlZCcpOwp9Ki8KCi8vIEZvciByYW5kb20gbnVtYmVycywgdXNlICJ4ID0gMTgxICogeCArIDM1OSIgZnJvbQovLyBUb20gRGlja2VucyAiUmFuZG9tIE51bWJlciBHZW5lcmF0b3IgZm9yIE1pY3JvY29udHJvbGxlcnMiCi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE3MDMyMzIwNDkxNy9odHRwOi8vaG9tZS5lYXJ0aGxpbmsubmV0L350ZGlja2Vucy82OGhjMTEvcmFuZG9tLzY4aGMxMXJhbmRvbS5odG1sCmxldCBzY3JhdGNoID0gMDsKCmZ1bmN0aW9uIFJhbmRvbUJ5dGUoKSB7CiAgY29uc3QgdmFsdWUgPSAxODEgKiBzY3JhdGNoICsgMzU5OwogIHNjcmF0Y2ggPSB2YWx1ZSA+Pj4gMDsKICByZXR1cm4gKHZhbHVlID4+PiA4KSAmIDB4ZmY7Cn0KCmZ1bmN0aW9uIE1vZHVsbyhuLCBtKSB7CiAgcmV0dXJuICgobiAlIG0pICsgbSkgJSBtOwp9CgpmdW5jdGlvbiBpc05hdGl2ZU9iamVjdChvYmopIHsKICByZXR1cm4gaXNDRnVuY3Rpb24ob2JqLmNvbnN0cnVjdG9yKTsKfQoKZnVuY3Rpb24gT2JqZWN0MkpTT04ob2JqKSB7CiAgaWYodHlwZW9mIG9iai50YWdOYW1lID09ICdzdHJpbmcnKSByZXR1cm4gRWxlbWVudE5hbWUob2JqKTsKICBpZihvYmogaW5zdGFuY2VvZiBFdmVudFRhcmdldCkgcmV0dXJuICcjJyArIFRhcmdldE5hbWUob2JqKS50b0xvd2VyQ2FzZSgpOwp9CgpmdW5jdGlvbiBDb3B5T2JqZWN0KG9iaikgewogIGxldCByZXQgPSB7fTsKICBmb3IobGV0IHByb3RvIG9mIFtvYmosIC4uLmdldFByb3RvdHlwZUNoYWluKG9iaildLnJldmVyc2UoKSkgewogICAgZm9yKGxldCBwcm9wIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKSkgewogICAgICBpZihwcm9wID09ICdfX3Byb3RvX18nKSBjb250aW51ZTsKICAgICAgaWYodHlwZW9mIHByb3AgPT0gJ3N5bWJvbCcpIGNvbnRpbnVlOwogICAgICBpZihpc0Z1bmN0aW9uKG9ialtwcm9wXSkpIGNvbnRpbnVlOwogICAgICBsZXQgdiA9IG9ialtwcm9wXTsKICAgICAgaWYoaXNPYmplY3QodikpIHsKICAgICAgICB2ID0gT2JqZWN0MkpTT04odik7CgogICAgICAgIHYgPz89IGlzTmF0aXZlT2JqZWN0KHYpID8ge30gOiBDb3B5T2JqZWN0KHYpOwogICAgICB9CiAgICAgIHJldFtwcm9wXSA9IHY7CiAgICB9CiAgfQogIHJldHVybiByZXQ7Cn0KCmZ1bmN0aW9uIENyZWF0ZVBhbGV0dGUoKSB7CiAgY29uc3QgY29sb3JzID0gbmV3IEFycmF5KDI1Nik7CgogIGZvcihsZXQgaSA9IDA7IGkgPCA2NDsgaSsrKSB7CiAgICBjb25zdCB2YWx1ZSA9IGkgKiA0OwoKICAgIGNvbG9yc1tpXSA9IG5ldyBSR0JBKHZhbHVlLCAwLCAwKTsKICAgIGNvbG9yc1tpICsgNjRdID0gbmV3IFJHQkEoMjU1LCB2YWx1ZSwgMCk7CiAgICBjb2xvcnNbaSArIDEyOF0gPSBuZXcgUkdCQSgyNTUsIDI1NSwgdmFsdWUpOwogICAgY29sb3JzW2kgKyAxOTJdID0gbmV3IFJHQkEoMjU1LCAyNTUsIDI1NSk7CiAgfQogIHJldHVybiBjb2xvcnM7Cn0KCmZ1bmN0aW9uIENyZWF0ZVBhbGV0dGVIU0woKSB7CiAgY29uc3QgY29sb3JzID0gbmV3IEFycmF5KDI1Nik7CgogIGNvbnN0IGh1ZXMgPSBbbmV3IEhTTEEoMCwgMTAwLCAwKSwgbmV3IEhTTEEoMCwgMTAwLCA1MCksIG5ldyBIU0xBKDMwLCAxMDAsIDUwKSwgbmV3IEhTTEEoNjAsIDEwMCwgNTApLCBuZXcgSFNMQSg2MCwgMTAwLCAxMDApLCBuZXcgSFNMQSg2MCwgMTAwLCAxMDApXTsKCiAgY29uc3QgYnJlYWtwb2ludHMgPSBbMCwgNTEsIDgwLCAxNTQsIDIwNSwgMjU2XTsKICBjb25zb2xlLmxvZygnYnJlYWtwb2ludHM6JywgYnJlYWtwb2ludHMpOwoKICBmb3IobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHsKICAgIGNvbnN0IGh1ZSA9ICh2ID0+ICh2ID09IC0xID8gKCkgPT4gaHVlcy5sZW5ndGggLSAyIDogdiA9PiB2KSkoYnJlYWtwb2ludHMuZmluZEluZGV4KGIgPT4gaSA8IGIpKTsKICAgIGNvbnN0IHJhbmdlID0gYnJlYWtwb2ludHNbaHVlXSAtIDEgLSBicmVha3BvaW50c1todWUgLSAxXTsKCiAgICBjb2xvcnNbaV0gPSBIU0xBLmJsZW5kKGh1ZXNbaHVlIC0gMV0sIGh1ZXNbaHVlXSwgKGkgLSBicmVha3BvaW50c1todWUgLSAxXSkgLyByYW5nZSkudG9SR0JBKCk7CiAgfQogIHJldHVybiBjb2xvcnM7Cn0KCmNsYXNzIERyYXdMaXN0IGV4dGVuZHMgTGlua2VkTGlzdCB7CiAgY29uc3RydWN0b3IoKSB7CiAgICBzdXBlcigpOwogIH0KCiAgaW5zZXJ0KGl0ZW0pIHsKICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShpdGVtLCBpdCA9PiBpdC50aW1lID4gaXRlbS50aW1lKTsKICB9CgogIHByZXYodXB0byA9IHBlcmZvcm1hbmNlLm5vdygpKSB7CiAgICBsZXQgcHJldjsKICAgIGZvcihsZXQgaXRlbSBvZiB0aGlzKSB7CiAgICAgIGlmKGl0ZW0udGltZSA+PSB1cHRvKSByZXR1cm4gcHJldjsKICAgICAgcHJldiA9IGl0ZW07CiAgICB9CiAgfQoKICBuZXh0KHVwdG8gPSBwZXJmb3JtYW5jZS5ub3coKSkgewogICAgZm9yKGxldCBpdGVtIG9mIHRoaXMpIGlmKGl0ZW0udGltZSA+PSB1cHRvKSByZXR1cm4gaXRlbTsKICB9CgogIGRpZmYodXB0byA9IHBlcmZvcm1hbmNlLm5vdygpKSB7CiAgICBsZXQgcCA9IHRoaXMucHJldih1cHRvKSwKICAgICAgbiA9IHRoaXMubmV4dCh1cHRvKTsKCiAgICByZXR1cm4gewogICAgICB4OiBuLnggLSBwLngsCiAgICAgIHk6IG4ueSAtIHAueSwKICAgICAgdGltZTogbi50aW1lIC0gcC50aW1lCiAgICB9OwogIH0KCiAgKmRlcXVldWUodXB0byA9IHBlcmZvcm1hbmNlLm5vdygpKSB7CiAgICBsZXQgaGVhZCwKICAgICAgcHJlZGljYXRlID0gdHlwZW9mIHVwdG8gPT0gJ251bWJlcicgPyBpdCA9PiBpdC50aW1lIDwgdXB0byA6IHVwdG87CiAgICB3aGlsZSgoaGVhZCA9IHRoaXMuaGVhZCkpIHsKICAgICAgaWYoIXByZWRpY2F0ZShoZWFkKSkgYnJlYWs7CiAgICAgIHlpZWxkIHRoaXMucmVtb3ZlSGVhZCgpOwogICAgfQogIH0KCiAgcXVldWUodHJhaWwsIHQgPSBwZXJmb3JtYW5jZS5ub3coKSkgewogICAgdHJhaWxbMF0udGltZSA9IDA7CiAgICBmb3IobGV0IGl0ZW0gb2YgdHJhaWwpIHsKICAgICAgdCArPSBpdGVtLnRpbWU7CiAgICAgIHRoaXMuaW5zZXJ0KHsgLi4uaXRlbSwgdGltZTogdCB9KTsKICAgIH0KICB9Cn0KCmxldCBkcmF3TGlzdCA9IChnbG9iYWxUaGlzLmRyYXdMaXN0ID0gbmV3IERyYXdMaXN0KCkpOwoKZnVuY3Rpb24qIEFsbFBhcmVudHMoZWxlbSkgewogIGxldCBvYmogPSBlbGVtLm93bmVyRG9jdW1lbnQ7CgogIHdoaWxlKGVsZW0pIHsKICAgIHlpZWxkIGVsZW07CiAgICBpZihlbGVtLmlzU2FtZU5vZGUob2JqKSkgYnJlYWs7CiAgICBlbGVtID0gZWxlbS5wYXJlbnRFbGVtZW50OwogIH0KfQoKZnVuY3Rpb24gZ2V0VHJhbnNmb3JtYXRpb25MaXN0KGUpIHsKICBsZXQgY3NzID0gRWxlbWVudC5nZXRDU1MoZSk7CiAgaWYoY3NzLnRyYW5zZm9ybSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoY3NzLnRyYW5zZm9ybSk7Cn0KZnVuY3Rpb24gRGVjb21wb3NlVHJhbnNmb3JtTGlzdChlbGVtKSB7CiAgbGV0IGxpc3QgPSBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZWxlbSk7CgogIGlmKGxpc3QgJiYgbGlzdC5sZW5ndGggPT0gMSAmJiBsaXN0WzBdLnR5cGUgPT0gJ21hdHJpeCcpIHsKICAgIGxldCB0bCA9IGxpc3QuZGVjb21wb3NlKCk7CiAgICBjb25zb2xlLmxvZyhgU2V0dGluZyAnJHtsaXN0fScgdG8gJHt0bH1gKTsKICAgIGVsZW0uc3R5bGUudHJhbnNmb3JtID0gdGw7CiAgfQp9CgpmdW5jdGlvbiBkcmF3UmVjdChyZWN0LCBzdHJva2UgPSAnIzBmMCcpIHsKICBsZXQgc3ZnID0gc3ZnTGF5ZXI7CiAgY29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSBuZXcgUmVjdChyZWN0KTsKICByZXR1cm4gU1ZHLmNyZWF0ZSgncmVjdCcsIHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgc3Ryb2tlLCAnc3Ryb2tlLXdpZHRoJzogJzEnLCBmaWxsOiAnbm9uZScgfSwgc3ZnKTsKfQoKZnVuY3Rpb24gR2V0RWxlbWVudE1hdHJpeChlbGVtZW50KSB7CiAgbGV0IHsgdHJhbnNmb3JtIH0gPSBFbGVtZW50LmdldENTUyhlbGVtZW50KTsKCiAgcmV0dXJuIE1hdHJpeC5mcm9tQ1NTKHRyYW5zZm9ybSB8fCAnJyk7Cn0KCmZ1bmN0aW9uIFNldENyb3NzaGFpcihwb3MpIHsKICBsZXQgY2ggPSBFbGVtZW50LmZpbmQoJyNjcm9zc2hhaXInKTsKICBsZXQgcmVjdCA9IEVsZW1lbnQuZ2V0UmVjdChjaCk7CgogIGNvbnNvbGUubG9nKCdTZXRDcm9zc2hhaXInLCB7IGNoLCByZWN0LCBwb3MgfSk7CiAgcmVjdC54ID0gcG9zLnggLSByZWN0LndpZHRoIC8gMjsKICByZWN0LnkgPSBwb3MueSAtIHJlY3QuaGVpZ2h0IC8gMjsKCiAgRWxlbWVudC5zZXRSZWN0KGNoLCByZWN0KTsKfQoKZnVuY3Rpb24gRXZlbnRQb3NpdGlvbnMoZXZlbnRPclRvdWNoKSB7CiAgbGV0IHBvc2l0aW9ucyA9IHVuaXF1ZSgKICAgIGtleXMoZXZlbnRPclRvdWNoLCAyKQogICAgICAuZmlsdGVyKG4gPT4gdHlwZW9mIG4gPT0gJ3N0cmluZycgJiYgL1tYWV0kLy50ZXN0KG4pKQogICAgICAubWFwKG4gPT4gbi5zbGljZSgwLCAtMSkpCiAgKTsKCiAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7CiAgICBhY2Nba2V5XSA9IG5ldyBQb2ludChldmVudE9yVG91Y2hba2V5ICsgJ1gnXSwgZXZlbnRPclRvdWNoW2tleSArICdZJ10pOwogICAgcmV0dXJuIGFjYzsKICB9LCB7fSk7Cn0KCmZ1bmN0aW9uIFBvc2l0aW9uTWF0cml4KGNhbnZhcyA9IEVsZW1lbnQuZmluZCgnY2FudmFzJyksIHJlY3QpIHsKICByZWN0ID8/PSBFbGVtZW50LnJlY3QoY2FudmFzKTsKICBsZXQgdmVydGljYWwgPSByZWN0LmFzcGVjdCgpIDwgMTsKICBsZXQgdG9wTGVmdCA9IHJlY3QudG9Qb2ludHMoKVt2ZXJ0aWNhbCA/IDEgOiAwXTsKICBsZXQgbSA9IE1hdHJpeC5pZGVudGl0eSgpOwoKICBtID0gbS5zY2FsZShjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpOwoKICBpZih2ZXJ0aWNhbCkgbSA9IG0ucm90YXRlKC1NYXRoLlBJIC8gMik7CgogIG0gPSBtLnNjYWxlKDEgLyByZWN0LndpZHRoLCAxIC8gcmVjdC5oZWlnaHQpOwogIG0gPSBtLnRyYW5zbGF0ZSgtdG9wTGVmdC54LCAtdG9wTGVmdC55KTsKCiAgcmV0dXJuIG07Cn0KCmZ1bmN0aW9uIFBvc2l0aW9uTWF0cml4MihlbGVtZW50ID0gY2FudmFzRWxlbWVudCkgewogIGxldCB7IHJvdGF0ZSB9ID0gR2V0RWxlbWVudE1hdHJpeChlbGVtZW50KS5kZWNvbXBvc2UoKTsKICBsZXQgbSA9IE1hdHJpeC5pZGVudGl0eSgpOwoKICBtID0gbS5zY2FsZShlbGVtZW50LndpZHRoLCBlbGVtZW50LmhlaWdodCk7CiAgbSA9IG0uc2NhbGUoMSAvIGVsZW1lbnQub2Zmc2V0V2lkdGgsIDEgLyBlbGVtZW50Lm9mZnNldEhlaWdodCk7CgogIG0gPSBtLnJvdGF0ZSgtcm90YXRlKTsKCiAgbGV0IHsgeCwgeSB9ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKCiAgbSA9IG0udHJhbnNsYXRlKC14LCAteSk7CgogIGlmKE1hdGguYWJzKHJvdGF0ZSkgPiBOdW1iZXIuRVBTSUxPTikgbSA9IG0udHJhbnNsYXRlKC1jYW52YXNFbGVtZW50Lm9mZnNldEhlaWdodCwgMCk7CgogIHJldHVybiBtOwp9CgpmdW5jdGlvbiBQb3NpdGlvblByb2Nlc3NvcihjYW52YXMgPSBFbGVtZW50LmZpbmQoJ2NhbnZhcycpLCByZWN0KSB7CiAgcmVjdCA/Pz0gRWxlbWVudC5yZWN0KGNhbnZhcyk7CiAgbGV0IG0gPSBQb3NpdGlvbk1hdHJpeChjYW52YXMsIHJlY3QpOwogIHJldHVybiBwb3MgPT4gbmV3IFBvaW50KC4uLm0udHJhbnNmb3JtUG9pbnQobmV3IFBvaW50KHBvcykpKS5yb3VuZCgxKTsKfQoKZnVuY3Rpb24gUHJvY2Vzc1Bvc2l0aW9uKHBvcykgewogIHJldHVybiBQb3NpdGlvblByb2Nlc3NvcigpKHBvcyk7Cn0KCmZ1bmN0aW9uIFRvdWNoVHJhbnNmb3JtZXIodGZuID0gKHgsIHkpID0+IFt4LCB5XSkgewogIHJldHVybiB0b3VjaCA9PiB7CiAgICBsZXQgW3gsIHldID0gdGZuKHRvdWNoLmNsaWVudFgsIHRvdWNoLmNsaWVudFkpOwoKICAgIHRvdWNoLnggPSB4OwogICAgdG91Y2gueSA9IHk7CiAgICByZXR1cm4gdG91Y2g7CiAgfTsKfQoKYXN5bmMgZnVuY3Rpb24qIFRvdWNoUHJpbnRlcihpdGVyKSB7CiAgZm9yIGF3YWl0KGxldCBldmVudCBvZiBpdGVyKSB7CiAgICBsZXQgbiA9IGV2ZW50LnRvdWNoZXM/Lmxlbmd0aDsKICAgIC8vIGNvbnNvbGUubG9nKCdUb3VjaFByaW50ZXInLCBldmVudCk7CiAgICAvLwoKICAgIGxldCB0ID0gW107CiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7CiAgICAgIGNvbnN0IHsgeCwgeSB9ID0gZXZlbnQudG91Y2hlc1tpXTsKICAgICAgdC5wdXNoKHsgeCwgeSB9KTsKICAgIH0KICAgIGNvbnNvbGUubG9nKCdUb3VjaFByaW50ZXInLCAuLi50KTsKICAgIHlpZWxkIGV2ZW50OwogIH0KfQoKYXN5bmMgZnVuY3Rpb24qIEdlbmVyaWNQcmludGVyKGl0ZXIpIHsKICBmb3IgYXdhaXQobGV0IGl0ZW0gb2YgaXRlcikgewogICAgY29uc29sZS5sb2coJ0dlbmVyaWNQcmludGVyJywgaXRlbSk7CiAgICB5aWVsZCBpdGVtOwogIH0KfQoKZnVuY3Rpb24gVHJhbnNmb3JtZXIodCkgewogIHJldHVybiBhc3luYyBmdW5jdGlvbiogKGl0ZXIpIHsKICAgIGZvciBhd2FpdChsZXQgaXRlbSBvZiBpdGVyKSB5aWVsZCB0KGl0ZW0pOwogIH07Cn0KCmZ1bmN0aW9uIE1vdXNlVG9Ub3VjaChldmVudCkgewogIHN3aXRjaCAoZXZlbnQudHlwZSkgewogICAgY2FzZSAnbW91c2V1cCc6CiAgICAgIGRlbGV0ZSBldmVudC50eXBlOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0eXBlJywgeyB2YWx1ZTogJ3RvdWNoZW5kJywgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwogICAgICBicmVhazsKICAgIGNhc2UgJ21vdXNlZG93bic6CiAgICAgIGRlbGV0ZSBldmVudC50eXBlOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0eXBlJywgeyB2YWx1ZTogJ3RvdWNoc3RhcnQnLCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUgfSk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnbW91c2Vtb3ZlJzoKICAgICAgZGVsZXRlIGV2ZW50LnR5cGU7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgJ3R5cGUnLCB7IHZhbHVlOiAndG91Y2htb3ZlJywgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwogICAgICBicmVhazsKICB9CiAgaWYoISgndG91Y2hlcycgaW4gZXZlbnQpKSB7CiAgICBldmVudC50b3VjaGVzID0gW3sgY2xpZW50WDogZXZlbnQuY2xpZW50WCwgY2xpZW50WTogZXZlbnQuY2xpZW50WSwgeDogZXZlbnQueCwgeTogZXZlbnQueSB9XTsKICB9CgogIHJldHVybiBldmVudDsKfQphc3luYyBmdW5jdGlvbiogQ2F0Y2hJdGVyYXRvcihpdCkgewogIHRyeSB7CiAgICBmb3IgYXdhaXQobGV0IGl0ZW0gb2YgaXQpIHlpZWxkIGl0ZW07CiAgfSBjYXRjaChlcnJvcikgewogICAgY29uc29sZS5sb2coJ0NhdGNoSXRlcmF0b3IgRVJST1I6ICcgKyBlcnJvci5tZXNzYWdlICsgJ1xuJyArIGVycm9yLnN0YWNrKTsKICB9Cn0KCmFzeW5jIGZ1bmN0aW9uKiBUb3VjaEl0ZXJhdG9yKGVsZW1lbnQsIHQpIHsKICBsZXQgcmVjdCA9IEVsZW1lbnQucmVjdChlbGVtZW50KTsKICBsZXQgZXYgPSBNb3VzZVRvVG91Y2goYXdhaXQgb25jZShlbGVtZW50LCBbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10pKTsKICBsZXQgdHlwZSA9IGV2LnR5cGUuc2xpY2UoMCwgNSk7CgogIGdsb2JhbFRoaXMucHJlc3NlZCA9IHRydWU7CgogIGlmKCF0KSB7CiAgICBsZXQgbWF0cml4ID0gUG9zaXRpb25NYXRyaXgyKCk7CiAgICAvL2NvbnNvbGUubG9nKCdUb3VjaEl0ZXJhdG9yJywgeyBtYXRyaXggfSwgbWF0cml4LmRlY29tcG9zZSgpKTsKICAgIHQgPSBUb3VjaFRyYW5zZm9ybWVyKCh4LCB5KSA9PiBtYXRyaXgudHJhbnNmb3JtWFkoeCwgeSkubWFwKE1hdGguZmxvb3IpKTsKICB9CgogIGlmKGV2LnRvdWNoZXMpIFsuLi5ldi50b3VjaGVzXS5mb3JFYWNoKHQpOwogIHlpZWxkIGV2OwoKICBmb3IgYXdhaXQobGV0IGV2ZW50IG9mIHN0cmVhbWlmeShbJ3RvdWNoZW5kJywgJ3RvdWNobW92ZScsICdtb3VzZXVwJywgJ21vdXNlbW92ZSddLCBlbGVtZW50LCB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiB0cnVlIH0pKSB7CiAgICBpZihldmVudC5jYW5jZWxhYmxlKSBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICBNb3VzZVRvVG91Y2goZXZlbnQpOwogICAgaWYoZXZlbnQudG91Y2hlcykgWy4uLmV2ZW50LnRvdWNoZXNdLmZvckVhY2godCk7CiAgICB5aWVsZCBldmVudDsKICAgIGlmKGV2ZW50LnR5cGUuZW5kc1dpdGgoJ2VuZCcpKSBicmVhazsKICB9CgogIGdsb2JhbFRoaXMucHJlc3NlZCA9IGZhbHNlOwp9Cgphc3luYyBmdW5jdGlvbiogTW92ZUl0ZXJhdG9yKGV2ZW50SXRlcmF0b3IpIHsKICBmb3IgYXdhaXQobGV0IGV2ZW50IG9mIGV2ZW50SXRlcmF0b3IpIHsKICAgIGlmKCd0b3VjaGVzJyBpbiBldmVudCkgewogICAgICBpZihldmVudC50b3VjaGVzLmxlbmd0aCkgewogICAgICAgIGxldCBpID0gMDsKICAgICAgICBmb3IobGV0IHRvdWNoIG9mIGV2ZW50LnRvdWNoZXMpIHsKICAgICAgICAgIGNvbnN0IHsgZm9yY2UsIHJhZGl1c1gsIHJhZGl1c1ksIC4uLm9iaiB9ID0gdG91Y2g7CiAgICAgICAgICB5aWVsZCB7IC4uLm9iaiwgdHlwZTogJ3RvdWNoJywgaW5kZXg6IGksIGZvcmNlLCByYWRpdXNYLCByYWRpdXNZIH07CiAgICAgICAgICArK2k7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIHByb3BlcnR5OiB0b3VjaGVzYCk7CiAgfQp9CgpmdW5jdGlvbiBtYWluKCkgewogIGRlZmluZSgKICAgIGdsb2JhbFRoaXMsCiAgICB7IEJyZXNlbmhhbSwgTGlua2VkTGlzdCwgTGlzdCwgQWxsUGFyZW50cywgVHJhbnNmb3JtYXRpb25MaXN0LCBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QsIERlY29tcG9zZVRyYW5zZm9ybUxpc3QsIGRyYXdSZWN0LCBtaXNjZml4ZWQ2eDEzIH0sCiAgICBwcm9wZXJ0aWVzKAogICAgICB7CiAgICAgICAgY2lkOiAoKSA9PiBsc3RvcmUuY2lkIHx8IChsc3RvcmUuY2lkID0gcmFuZFN0cigxNiwgJzAxMjM0NTY3ODlhYmNkZWYnKSksCiAgICAgICAgY3VycmVudFVSTDogKCkgPT4gbmV3IFVSTChpbXBvcnQubWV0YS51cmwpLAogICAgICAgIGN1cnJlbnRGaWxlOiAoKSA9PiBnbG9iYWxUaGlzLmN1cnJlbnRVUkwucGF0aG5hbWUucmVwbGFjZSgvXlwvLywgJycpCiAgICAgIH0sCiAgICAgIHsgbWVtb2l6ZTogdHJ1ZSB9CiAgICApCiAgKTsKCiAgTG9hZFdBU00oKTsKCiAgY29uc3Qgd2lkdGggPSAzMjA7CiAgY29uc3QgaGVpZ2h0ID0gMjAwOwogIGNvbnN0IHBhcmVudCA9IGRvY3VtZW50LmJvZHk7CgogIGNyb3Nza2l0LmluaXQoewogICAgcmVuZGVyZXI6IENBTlZBUywKICAgIHBhcmVudCwKICAgIHc6IHdpZHRoLAogICAgaDogaGVpZ2h0LAogICAgYWxwaGE6IGZhbHNlCiAgfSk7CgogIGZ1bmN0aW9uIFJlcGFyZW50KGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdjYW52YXMnKVswXSkgewogICAgY2FudmFzLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoY2FudmFzKTsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKS5hcHBlbmRDaGlsZChjYW52YXMpOwogIH0KCiAgUmVwYXJlbnQoKTsKCiAgY3Jvc3NraXQuY2xlYXIoKTsKICBjcm9zc2tpdC5yZWN0KHsKICAgIHg6IDAsCiAgICB5OiAwLAogICAgd2lkdGgsCiAgICBoZWlnaHQsCiAgICBmaWxsOiAnYmxhY2snLAogICAgc3Ryb2tlOiAnYmxhY2snLAogICAgYW5nbGU6IDAKICB9KTsKCiAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHdpZHRoICogKGhlaWdodCArIDIpKTsKICBjb25zdCBwYWxldHRlID0gQ3JlYXRlUGFsZXR0ZSgpOwogIGNvbnN0IHBhbGV0dGVIU0wgPSBDcmVhdGVQYWxldHRlSFNMKCk7CgogIGNvbnN0IHBpeGVscyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGhlaWdodCArIDIgfSkubWFwKCh2LCBpKSA9PiBuZXcgVWludDhDbGFtcGVkQXJyYXkoYnVmZmVyLCBpICogd2lkdGgsIHdpZHRoKSk7CiAgY29uc3Qgc2VlZGxpc3QgPSAoZ2xvYmFsVGhpcy5zZWVkbGlzdCA9IG5ldyBEcmF3TGlzdCgpKTsKICBjb25zdCB7IGNvbnRleHQgfSA9IGNyb3Nza2l0OwogIGNvbnN0IGltYWdlID0gY29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7CgogIGNvbnN0IHsgbm93LCB3YWl0Rm9yLCBhbmltYXRpb25GcmFtZSB9ID0gVXRpbDsKICBjb25zdCBmcHMgPSA1MDsKICBjb25zdCBtYXRyaXggPSBuZXcgTWF0cml4KCkudHJhbnNsYXRlKDE2MCwgMTAwKS5zY2FsZSgwLjUpOwoKICAvKiAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7CiAgICBidWZmZXIsCiAgICBwYWxldHRlLAogICAgcGFsZXR0ZUhTTCwKICAgIHBpeGVscywKICAgIGNvbnRleHQsCiAgICBpbWFnZSwKICAgIGZwcywKICAgIG1hdHJpeCwKICAgIFJlcGFyZW50LAogICAgZG9tOiB7IEVsZW1lbnQgfSwKICAgIGdlb206IHsgUmVjdCB9LAogICAgTW91c2VUb1RvdWNoLAogICAgQ2F0Y2hJdGVyYXRvciwKICAgIFRvdWNoSXRlcmF0b3IsCiAgICBUb3VjaFByaW50ZXIsCiAgICBHZXRFbGVtZW50TWF0cml4LAogICAgU2V0Q3Jvc3NoYWlyLAogICAgRXZlbnRQb3NpdGlvbnMsCiAgICBQb3NpdGlvblByb2Nlc3NvciwKICAgIFBvc2l0aW9uTWF0cml4LAogICAgUHJvY2Vzc1Bvc2l0aW9uLAogICAgUHV0QXJyYXksCiAgICB3YWl0Rm9yLAogICAgUmVwbGF5VHJhaWwsCiAgICBCbGF6ZQogIH0pOyovCgogIGFzeW5jIGZ1bmN0aW9uIExvb3AoKSB7CiAgICBjb25zdCBkZWxheSA9IDEwMDAgLyBmcHM7CiAgICBjb25zdCBsb2cgPSAodCwgbmFtZSkgPT4gZ2xvYmFsVGhpcy5kb0xvZyAmJiBjb25zb2xlLmxvZyhgJHtuYW1lfSB0aW1pbmc6ICR7dC50b0ZpeGVkKDMpfW1zYCk7CiAgICBjb25zdCBmaXJlID0gKC4uLmFyZ3MpID0+IEZpcmUoLi4uYXJncyk7CiAgICBjb25zdCByZWRyYXcgPSAoLi4uYXJncykgPT4gUmVkcmF3KC4uLmFyZ3MpOwoKICAgIGF3YWl0IG9uY2Uod2luZG93LCAnbG9hZCcpOwoKICAgIEluaXQoKTsKCiAgICBmb3IoOzspIHsKICAgICAgZmlyZSgpOwogICAgICByZWRyYXcoKTsKICAgICAgYXdhaXQgYW5pbWF0aW9uRnJhbWUoZGVsYXkpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gRmlyZSgpIHsKICAgIGZvcihsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7CiAgICAgIHBpeGVsc1toZWlnaHRdW3hdID0gMjU1IC0gKFJhbmRvbUJ5dGUoKSAlIDEyOCk7CiAgICAgIHBpeGVsc1toZWlnaHQgKyAxXVt4XSA9IDI1NSAtIChSYW5kb21CeXRlKCkgJSAxMjgpOwogICAgfQoKICAgIGZvcihsZXQgc2VlZCBvZiBzZWVkbGlzdCkgewogICAgICB0cnkgewogICAgICAgIHBpeGVsc1tzZWVkLnldW3NlZWQueF0gPSAyNTUgLSAoUmFuZG9tQnl0ZSgpICUgMTI4KTsKICAgICAgfSBjYXRjaChlKSB7fQogICAgfQoKICAgIGZvcihsZXQgc2VlZCBvZiBzZWVkbGlzdC5kZXF1ZXVlKCkpIHsKICAgIH0KCiAgICBmb3IobGV0IGRyYXcgb2YgZHJhd0xpc3QuZGVxdWV1ZSgpKSB7CiAgICAgIGRyYXcudmFsdWUgPSAyNTUgLSAweDEwOyAvLyhSYW5kb21CeXRlKCkgJSAxMjgpOwoKICAgICAgdHJ5IHsKICAgICAgICBwaXhlbHNbZHJhdy55XVtkcmF3LnhdID0gZHJhdy52YWx1ZTsKCiAgICAgICAgaWYoZHJhdy5zaXplID4gMSkgewogICAgICAgICAgaWYoZHJhdy54ID4gMCkgcGl4ZWxzW2RyYXcueV1bZHJhdy54IC0gMV0gPSBkcmF3LnZhbHVlOwogICAgICAgICAgaWYoZHJhdy54IDwgMzE5KSBwaXhlbHNbZHJhdy55XVtkcmF3LnggKyAxXSA9IGRyYXcudmFsdWU7CiAgICAgICAgICBpZihkcmF3LnkgPiAwKSBwaXhlbHNbZHJhdy55IC0gMV1bZHJhdy54XSA9IGRyYXcudmFsdWU7CgogICAgICAgICAgaWYoZHJhdy55IDwgMTk5KSBwaXhlbHNbZHJhdy55ICsgMV1bZHJhdy54XSA9IGRyYXcudmFsdWU7CiAgICAgICAgfQogICAgICB9IGNhdGNoKGUpIHt9CiAgICAgIGRyYXcudGltZSArPSA0MDsKCiAgICAgIHNlZWRsaXN0Lmluc2VydChkcmF3KTsKCiAgICAgIC8vQmxhemUoZHJhdy54LCBkcmF3LnksIDI1NSAtIChSYW5kb21CeXRlKCkgJSAxMjgpKTsKICAgIH0KCiAgICBmb3IobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHsKICAgICAgZm9yKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHsKICAgICAgICBjb25zdCBzdW0gPSBbcGl4ZWxzW3kgKyAxXVtNb2R1bG8oeCAtIDEsIHdpZHRoKV0sIHBpeGVsc1t5ICsgMV1beF0sIHBpeGVsc1t5ICsgMV1bTW9kdWxvKHggKyAxLCB3aWR0aCldLCBwaXhlbHNbeSArIDJdW3hdXS5yZWR1Y2UoKGEsIHApID0+IGEgKyAocCB8IDApLCAwKTsKCiAgICAgICAgcGl4ZWxzW3ldW3hdID0gKHN1bSAqIDE1KSA+Pj4gNjsKICAgICAgfQogICAgfQogIH0KCiAgYXN5bmMgZnVuY3Rpb24gUmVkcmF3KCkgewogICAgY29uc3QgeyBkYXRhIH0gPSBpbWFnZTsKCiAgICBsZXQgaSA9IDA7CiAgICBsZXQgdCA9IFsuLi5tYXRyaXhdOwoKICAgIGZvcihsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykgewogICAgICBmb3IobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykgewogICAgICAgIGNvbnN0IGMgPSBwYWxldHRlW3BpeGVsc1t5XVt4XV07CiAgICAgICAgZGF0YVtpKytdID0gYy5yOwogICAgICAgIGRhdGFbaSsrXSA9IGMuZzsKICAgICAgICBkYXRhW2krK10gPSBjLmI7CiAgICAgICAgZGF0YVtpKytdID0gYy5hOwogICAgICB9CiAgICB9CgogICAgY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2UsIDAsIDApOwogIH0KCiAgbGV0IGVsZW1lbnQsIHJlY3QsIHJjLCBtb3VzZVRyYW5zZm9ybTsKCiAgZnVuY3Rpb24gRHJhdyh4LCB5LCB0aW1lID0gcGVyZm9ybWFuY2Uubm93KCkpIHsKICAgIHJldHVybiBkcmF3TGlzdC5pbnNlcnQoeyB4LCB5LCB0aW1lIH0pOwogIH0KCiAgZnVuY3Rpb24qIEJyZXNlbmhhbSh4MCwgeTAsIHgxLCB5MSkgewogICAgdmFyIGR4ID0gTWF0aC5hYnMoeDEgLSB4MCksCiAgICAgIGR5ID0gTWF0aC5hYnMoeTEgLSB5MCksCiAgICAgIHN4ID0geDAgPCB4MSA/IDEgOiAtMSwKICAgICAgc3kgPSB5MCA8IHkxID8gMSA6IC0xLAogICAgICBlcnIgPSBkeCAtIGR5OwoKICAgIHdoaWxlKHgwICE9IHgxIHx8IHkwICE9IHkxKSB7CiAgICAgIHZhciBlMiA9IDIgKiBlcnI7CiAgICAgIGlmKGUyID4gZHkgKiAtMSkgewogICAgICAgIGVyciAtPSBkeTsKICAgICAgICB4MCArPSBzeDsKICAgICAgfQogICAgICBpZihlMiA8IGR4KSB7CiAgICAgICAgZXJyICs9IGR4OwogICAgICAgIHkwICs9IHN5OwogICAgICB9CiAgICAgIHlpZWxkIFt4MCwgeTBdOwogICAgfQogIH0KCiAgZnVuY3Rpb24gQmxhemUoeCwgeSwgcikgewogICAgbGV0IHYgPSBwaXhlbHNbeV1beF07CiAgICByID8/PSAyNTUgLSB2OwogICAgUHV0QXJyYXkoeCAtIDEsIHkgLSAxLCBbCiAgICAgIFswLCByLCAwXSwKICAgICAgW3IsIHIsIHJdLAogICAgICBbMCwgciwgMF0KICAgIF0pOwoKICAgIC8qICAgIGZvcihsZXQgdHkgPSB5IC0gMTsgdHkgPCB5ICsgMTsgdHkrKykgCiAgICAgIGZvcihsZXQgdHggPSB4IC0gMTsgdHggPCB4ICsgMTsgdHgrKykgCiAgICAgICAgcGl4ZWxzW3R5XVt0eF0gPSByOyovCgogICAgLy8gcGl4ZWxzW3kgKyAxXVt4XSA9IHI7CiAgfQogIGZ1bmN0aW9uIFB1dEFycmF5KHgsIHksIGEpIHsKICAgIGxldCByb3dzID0gYS5sZW5ndGg7CiAgICBsZXQgY29scyA9IGFbMF0ubGVuZ3RoOwogICAgbGV0IHcgPSBwaXhlbHNbMF0ubGVuZ3RoOwogICAgbGV0IGggPSBwaXhlbHMubGVuZ3RoOwoKICAgIGZvcihsZXQgdHkgPSAwOyB0eSA8IHJvd3M7ICsrdHkpIHsKICAgICAgZm9yKGxldCB0eCA9IDA7IHR4IDwgY29sczsgKyt0eCkgewogICAgICAgIHBpeGVsc1soeSArIHR5KSAlIGhdWyh4ICsgdHgpICUgd10gKz0gYVt0eV1bdHhdIC8gMjsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gUHV0QXJyYXkyKHgsIHksIGEpIHsKICAgIGxldCByb3dzID0gYS5sZW5ndGggKiAyOwogICAgbGV0IGNvbHMgPSBhWzBdLmxlbmd0aCAqIDI7CiAgICBsZXQgdyA9IHBpeGVsc1swXS5sZW5ndGg7CiAgICBsZXQgaCA9IHBpeGVscy5sZW5ndGg7CgogICAgZm9yKGxldCB0eSA9IDA7IHR5IDwgcm93czsgKyt0eSkgewogICAgICBmb3IobGV0IHR4ID0gMDsgdHggPCBjb2xzOyArK3R4KSB7CiAgICAgICAgcGl4ZWxzWyh5ICsgdHkpICUgaF1bKHggKyB0eCkgJSB3XSA9IGFbdHkgPj4gMV1bdHggPj4gMV07CiAgICAgIH0KICAgIH0KICB9CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgeyBSYW5kb21CeXRlIH0pOwoKICBnbG9iYWxUaGlzLndzID0gKGdsb2JhbFRoaXMucndzID8/PSBOZXdXUyh7CiAgICBvbk9wZW4oKSB7CiAgICAgIGNvbnNvbGUubG9nKCdXUyBjb25uZWN0ZWQhJyk7CiAgICAgIC8qIGlmKCFnbG9iYWxUaGlzLmNpZCkgCiAgICAgICAgZ2xvYmFsVGhpcy5jaWQgPSBsc3RvcmUuY2lkIHx8IChsc3RvcmUuY2lkPU1ha2VDbGllbnRJRCgpKTsqLwogICAgICBjb25zdCB7IGNpZCB9ID0gZ2xvYmFsVGhpczsKICAgICAgU2VuZFdTKHsgdHlwZTogJ2hlbGxvJywgY2lkIH0pOwoKICAgICAgU2VuZFdTKHsgdHlwZTogJ3JlY3RzJywgY2lkLCByZWN0czogR2V0UmVjdHMoKSB9KTsKICAgIH0KICB9KSkud3M7CgogIGxldCBzdHIgPSAnJzsKICBsZXQgeHBvcyA9IDA7CiAgZnVuY3Rpb24gS2V5SGFuZGxlcihrZXkpIHsKICAgIC8vc3RyKz1rZXk7CiAgICBjb25zb2xlLmxvZygnS2V5SGFuZGxlcicsIHsgeHBvcywga2V5IH0pOwoKICAgIGlmKGtleSBpbiBtaXNjZml4ZWQ2eDEzKSB7CiAgICAgIFB1dEFycmF5Mih4cG9zLCAxMDAsIG1pc2NmaXhlZDZ4MTNba2V5XSk7CiAgICAgIHhwb3MgKz0gMTQ7CiAgICB9CiAgfQoKICAoYXN5bmMgKCkgPT4gewogICAgZm9yIGF3YWl0KGxldCBlIG9mIHN0cmVhbWlmeShbJ2tleWRvd24nLCAna2V5dXAnXSwgd2luZG93LCB7IHBhc3NpdmU6IGZhbHNlIH0pKSB7CiAgICAgIGNvbnN0IHsgdHlwZSwga2V5LCBrZXlDb2RlLCByZXBlYXQsIGN0cmxLZXksIHNoaWZ0S2V5LCBhbHRLZXksIG1ldGFLZXkgfSA9IChnbG9iYWxUaGlzLmtleUV2ZW50ID0gZSk7CgogICAgICBpZighY3RybEtleSAmJiAhYWx0S2V5ICYmICFtZXRhS2V5KSB7CiAgICAgICAgaWYoZS5jYW5jZWxhYmxlKSBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIH0KCiAgICAgIC8vIGNvbnNvbGUubG9nKCdldmVudCcsIHsgdHlwZSwga2V5LCBjaGFyQ29kZToga2V5LmNvZGVQb2ludEF0KDApLCBrZXlDb2RlLCByZXBlYXQsIGN0cmxLZXksIHNoaWZ0S2V5LCBhbHRLZXksIG1ldGFLZXkgfSk7CgogICAgICAvL2lmKGtleSBpbiBtaXNjZml4ZWQ2eDEzIHx8IGtleUNvZGUgPCAweDIwKSB7CiAgICAgIEtleUhhbmRsZXIoa2V5KTsKICAgIH0KICB9KSgpOwoKICBJbnB1dEhhbmRsZXIoKTsKCiAgLy8KICBhc3luYyBmdW5jdGlvbiBJbnB1dEhhbmRsZXIoKSB7CiAgICBjb25zdCB0aW1lZ2VuID0gKCgpID0+IHsKICAgICAgbGV0IHQgPSBEYXRlLm5vdygpOwogICAgICBsZXQgcHJldiA9IDA7CiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKAogICAgICAgICgpID0+IHsKICAgICAgICAgIGxldCB0bXAgPSB0OwogICAgICAgICAgdCA9IERhdGUubm93KCkgLSBwcmV2OwogICAgICAgICAgcHJldiArPSB0OwogICAgICAgICAgcmV0dXJuIHQ7CiAgICAgICAgfSwKICAgICAgICB7IHN0YXJ0OiB0IH0KICAgICAgKTsKICAgIH0pKCk7CgogICAgY29uc3QgdHJhaWwgPSAoZ2xvYmFsVGhpcy50cmFpbCA9IFtdKTsKCiAgICBmb3IoOzspIHsKICAgICAgbGV0IHByZXYsCiAgICAgICAgcHQsCiAgICAgICAgc3RhcnQgPSB0aW1lZ2VuKCksCiAgICAgICAgbGFzdCwKICAgICAgICBpdGVyID0gY2hhaW5SaWdodChNb3ZlSXRlcmF0b3IsIC8qR2VuZXJpY1ByaW50ZXIsICovIFRvdWNoSXRlcmF0b3IpKHdpbmRvdyk7CgogICAgICBmb3IgYXdhaXQobGV0IGV2IG9mIGl0ZXIpIHsKICAgICAgICBnbG9iYWxUaGlzLm1vdmVtZW50ID0gZXY7CiAgICAgICAgaWYoZ2Z4UmVjdC5pbnNpZGUoZXYpKSB7CiAgICAgICAgICBsZXQgcHQgPSAoZ2xvYmFsVGhpcy5tb3VzZVBvcyA9IG5ldyBQb2ludChldikpOwogICAgICAgICAgbGV0IGRpZmYgPSBwdCwKICAgICAgICAgICAgdDsKICAgICAgICAgIGlmKHByZXYpIGRpZmYgPSBwdC5kaWZmKHByZXYpOwogICAgICAgICAgbGV0IHRpbWUgPSB0aW1lZ2VuKCk7CiAgICAgICAgICBsZXQgb2JqID0geyAuLi5wdCwgdGltZSB9OwogICAgICAgICAgdHJhaWwucHVzaChvYmopOwogICAgICAgICAgaWYocHJldikgewogICAgICAgICAgICBmb3IobGV0IFt4LCB5XSBvZiBCcmVzZW5oYW0ocHJldi54LCBwcmV2LnksIHB0LngsIHB0LnkpKSB7CiAgICAgICAgICAgICAgZHJhd0xpc3QuaW5zZXJ0KHsgeCwgeSwgdGltZSB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGRyYXdMaXN0Lmluc2VydChvYmopOwogICAgICAgICAgbGFzdCA9IHQ7CiAgICAgICAgICB0cnkgewogICAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgICAgcHJldiA9IHB0OwogICAgICAgIH0KICAgICAgfQogICAgICBTZW5kVHJhaWwoKTsKCiAgICAgIGZ1bmN0aW9uIFNlbmRUcmFpbChzdGFydCA9IHRpbWVnZW4uc3RhcnQpIHsKICAgICAgICBpZih0cmFpbC5sZW5ndGgpIHsKICAgICAgICAgIHRyYWlsWzBdLnRpbWUgPSAwOwogICAgICAgICAgY29uc3QgcGF5bG9hZCA9IChnbG9iYWxUaGlzLnBheWxvYWQgPSB7IHR5cGU6ICdibGF6ZScsIGNpZDogZ2xvYmFsVGhpcy5jaWQsIHN0YXJ0LCB0cmFpbDogWy4uLnRyYWlsXSB9KTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdTZW5kVHJhaWwnLCBwYXlsb2FkKTsKICAgICAgICAgIFNlbmRXUyhwYXlsb2FkKTsKICAgICAgICB9CiAgICAgICAgdHJhaWwuc3BsaWNlKDAsIHRyYWlsLmxlbmd0aCk7CiAgICAgICAgc3RhcnQgPSB1bmRlZmluZWQ7CiAgICAgICAgcHJldiA9IHVuZGVmaW5lZDsKICAgICAgfQogICAgfQogIH0KCiAgdHJ5Q2F0Y2goCiAgICAoKSA9PiBMb29wKCksCiAgICAoKSA9PiBudWxsLAogICAgZXJyb3IgPT4gU2VuZFdTKHsgdHlwZTogJ2V4Y2VwdGlvbicsIGNpZDogZ2xvYmFsVGhpcy5jaWQsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsIHN0YWNrOiBlcnJvci5zdGFjayB9KQogICk7Cn0KCmZ1bmN0aW9uIEluaXQoKSB7CiAgLy8gd2luZG93LmNhbnZhcyA9IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKTsKCiAgZGVmaW5lKAogICAgZ2xvYmFsVGhpcywKICAgIHByb3BlcnRpZXMoCiAgICAgIHsKICAgICAgICBjYW52YXNFbGVtZW50OiAoKSA9PiBFbGVtZW50LmZpbmQoJ2NhbnZhcycpLAogICAgICAgIGRpdkVsZW1lbnQ6ICgpID0+IEVsZW1lbnQuZmluZCgnYm9keSA+IGRpdjpmaXJzdC1jaGlsZCcpLAogICAgICAgIGh0bWxFbGVtZW50OiAoKSA9PiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsCiAgICAgICAgZ2Z4UmVjdDogKCkgPT4gbmV3IFJlY3QoMCwgMCwgY2FudmFzRWxlbWVudC53aWR0aCwgY2FudmFzRWxlbWVudC5oZWlnaHQpCiAgICAgIH0sCiAgICAgIHsgbWVtb2l6ZTogdHJ1ZSB9CiAgICApLAogICAgcHJvcGVydGllcyh7CiAgICAgIHdpbmRvd1JlY3Q6ICgpID0+IG5ldyBSZWN0KDAsIDAsIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpLAogICAgICB3aW5kb3dTaXplOiAoKSA9PiBuZXcgU2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KSwKICAgICAgc2Nyb2xsUG9zOiAoKSA9PiBuZXcgUG9pbnQod2luZG93LnNjcm9sbFgsIHdpbmRvdy5zY3JvbGxZKSwKICAgICAgYm9keVJlY3Q6ICgpID0+IEVsZW1lbnQucmVjdCgnYm9keScpLnJvdW5kKDApLAogICAgICBjYW52YXNSZWN0OiAoKSA9PiBFbGVtZW50LnJlY3QoJ2NhbnZhcycpLnJvdW5kKDApCiAgICB9KSwKICAgIHByb3BlcnRpZXMoewogICAgICB0cmFuc2Zvcm06IFsoKSA9PiBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KEVsZW1lbnQuZ2V0Q1NTKCdib2R5ID4gZGl2OmZpcnN0LWNoaWxkJykudHJhbnNmb3JtKSwgdmFsdWUgPT4gRWxlbWVudC5zZXRDU1MoJ2JvZHkgPiBkaXY6Zmlyc3QtY2hpbGQnLCB7IHRyYW5zZm9ybTogdmFsdWUgKyAnJyB9KV0KICAgIH0pCiAgKTsKCiAgY29uc3QgU2V0TG9ja2VkID0gVG9nZ2xlQ2xhc3MoaHRtbEVsZW1lbnQsICdpcy1sb2NrZWQnKTsKICBjb25zdCBTZXRQcmVzc2VkID0gVG9nZ2xlQ2xhc3MoY2FudmFzRWxlbWVudCwgJ3ByZXNzZWQnKTsKCiAgZGVmaW5lKGdsb2JhbFRoaXMsIHByb3BlcnRpZXMoeyBwcmVzc2VkOiBbU2V0UHJlc3NlZCwgU2V0UHJlc3NlZF0gfSkpOwoKICBnbG9iYWxUaGlzLmNpcmNsZSA9IHRya2wobmV3IFBvaW50KDAsIDApKTsKICBnbG9iYWxUaGlzLnBvaW50cyA9IHRya2woW10pOwoKICBjb25zdCBTVkdQb2x5bGluZSA9ICh7IHBvaW50cywgLi4ucHJvcHMgfSkgPT4gaCgncG9seWxpbmUnLCB7IHBvaW50czogcG9pbnRzLm1hcChwdCA9PiBbLi4ucHRdLmpvaW4oJywnKSkuam9pbignICcpLCAuLi5wcm9wcyB9KTsKCiAgY29uc3QgU1ZHQ29tcG9uZW50ID0gKHsgY2lyY2xlLCBwb2ludHMsIC4uLnByb3BzIH0pID0+IHsKICAgIGxldCByZWN0ID0gbmV3IFJlY3QoMCwgMCwgY2FudmFzRWxlbWVudC53aWR0aCwgY2FudmFzRWxlbWVudC5oZWlnaHQpOwoKICAgIGNvbnN0IHsgciA9IDEwLCB4LCB5LCB3aWR0aCA9ICcxJywgc3Ryb2tlID0gJyMwZjAnLCBmaWxsID0gYHJnYmEoODAsODAsODAsMC4zKWAgfSA9IHVzZVRya2woY2lyY2xlKTsKCiAgICByZXR1cm4gaCgnc3ZnJywgeyB2ZXJzaW9uOiAnMS4xJywgeG1sbnM6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIHZpZXdCb3g6IFsuLi5yZWN0XS5qb2luKCcgJyksIHdpZHRoOiByZWN0LndpZHRoLCBoZWlnaHQ6IHJlY3QuaGVpZ2h0IH0sIFsKICAgICAgaCgnY2lyY2xlJywgewogICAgICAgIGN4OiB4LAogICAgICAgIGN5OiB5LAogICAgICAgIHIsCiAgICAgICAgc3Ryb2tlLAogICAgICAgICdzdHJva2Utd2lkdGgnOiB3aWR0aCwKICAgICAgICBmaWxsCiAgICAgIH0pLAogICAgICBoKFNWR1BvbHlsaW5lLCB7IHBvaW50czogdXNlVHJrbChwb2ludHMpLCBzdHJva2UsICdzdHJva2Utd2lkdGgnOiB3aWR0aCB9KQogICAgXSk7CiAgfTsKCiAgbGV0IHN2Z0NvbnRhaW5lciA9IChnbG9iYWxUaGlzLnN2Z0NvbnRhaW5lciA9IEVsZW1lbnQuY3JlYXRlKCdkaXYnLCB7IGNsYXNzOiAnb3ZlcmxheScgfSwgZG9jdW1lbnQuYm9keSkpOwoKICByZW5kZXIoaChTVkdDb21wb25lbnQsIHsgY2lyY2xlOiBnbG9iYWxUaGlzLmNpcmNsZSwgcG9pbnRzOiBnbG9iYWxUaGlzLnBvaW50cyB9KSwgc3ZnQ29udGFpbmVyKTsKCiAgZ2xvYmFsVGhpcy5zdmcgPSBzdmdDb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQ7CgogIC8vICBFbGVtZW50LnNldENTUyhzdmdDb250YWluZXIsIHsgcG9zaXRpb246ICdhYnNvbHV0ZScsIGxlZnQ6IGNhbnZhc1JlY3QueCArICdweCcsIHRvcDogY2FudmFzUmVjdC55ICsgJ3B4JyB9KTsKICAvKiAgcmVjdCA9IGNhbnZhc1JlY3Q7CiAgICBtb3VzZVRyYW5zZm9ybSA9IFBvc2l0aW9uUHJvY2Vzc29yKCk7Ki8KCiAgKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgUmVzaXplSGFuZGxlcigpOwoKICAgIGZvciBhd2FpdChsZXQgZXZlbnQgb2Ygc3RyZWFtaWZ5KFsnb3JpZW50YXRpb25jaGFuZ2UnLCAncmVzaXplJ10sIHdpbmRvdykpIHsKICAgICAgUmVzaXplSGFuZGxlcigpOwogICAgfQogIH0pKCk7CgogIHN5bmNIZWlnaHQoKTsKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3luY0hlaWdodCk7CgogIFNldExvY2tlZCh0cnVlKTsKfQoKZnVuY3Rpb24gUmVzaXplSGFuZGxlcigpIHsKICBsZXQgeyB3aWR0aCwgaGVpZ2h0IH0gPSBFbGVtZW50LnJlY3QoJ2JvZHknKTsKCiAgY29uc29sZS5sb2coJ1Jlc2l6ZUhhbmRsZXInLCB7IHdpZHRoLCBoZWlnaHQgfSk7CgogIEVsZW1lbnQuc2V0Q1NTKHN2ZywgeyB3aWR0aDogY2FudmFzRWxlbWVudC5vZmZzZXRXaWR0aCArICdweCcsIGhlaWdodDogY2FudmFzRWxlbWVudC5vZmZzZXRIZWlnaHQgKyAncHgnLCB0cmFuc2Zvcm06ICdyb3RhdGUoOTBkZWcpJyB9KTsKfQoKZnVuY3Rpb24gUGFyc2VKU09OKHMpIHsKICBsZXQgcjsKICB0cnkgewogICAgciA9IEpTT04ucGFyc2Uocyk7CiAgfSBjYXRjaChlcnJvcikgewogICAgY29uc29sZS5sb2coJ0pTT04gcGFyc2UgZXJyb3I6ICcgKyBlcnJvci5tZXNzYWdlICsgJ1xuJyArIGVycm9yLnN0YWNrKTsKICB9CiAgcmV0dXJuIHI7Cn0KCmZ1bmN0aW9uIFJlcGxheVRyYWlsKHRyYWlsLCB0aW1lID0gcGVyZm9ybWFuY2Uubm93KCkgKyAyMCkgewogIGxldCBwcmV2LAogICAgcmV0ID0gW107CgogIGZvcihsZXQgcHQgb2YgdHJhaWwpIHsKICAgIC8vIGNvbnNvbGUubG9nKCdSZXBsYXlUcmFpbCcsIHtwdH0pOwoKICAgIGlmKHByZXYpIHsKICAgICAgbGV0IGluZGV4ID0gcmV0Lmxlbmd0aDsKICAgICAgbGV0IGkgPSAwOwogICAgICBmb3IobGV0IFt4LCB5XSBvZiBCcmVzZW5oYW0ocHJldi54LCBwcmV2LnksIHB0LngsIHB0LnkpKSB7CiAgICAgICAgLyogICAgICBpZihpKysgPiAwKSAqLyByZXQucHVzaCh7IHgsIHksIHRpbWU6IDAsIHNpemU6IDIgfSk7CiAgICAgIH0KICAgICAgaWYocmV0W2luZGV4XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0W2luZGV4XS50aW1lID0gcHQudGltZTsKICAgICAgfQogICAgICBpZihyZXRbcmV0Lmxlbmd0aCAtIDFdKSByZXRbcmV0Lmxlbmd0aCAtIDFdLnNpemUgPSAyOwogICAgfSBlbHNlIHsKICAgICAgcHQuc2l6ZSA9IDI7CiAgICAgIHJldC5wdXNoKHB0KTsKICAgIH0KICAgIHByZXYgPSBwdDsKICB9CgogIGlmKHJldFswXSAhPT0gdW5kZWZpbmVkKSB7CiAgICByZXRbMF0udGltZSA9IDA7CiAgICBkcmF3TGlzdC5xdWV1ZShyZXQsIHRpbWUpOwogIH0KfQoKZnVuY3Rpb24gTmV3V1MoaGFuZGxlcnMpIHsKICBsZXQgdXJsID0gV2ViU29ja2V0VVJMKCcvd3MnLCB7IG1pcnJvcjogY3VycmVudEZpbGUgfSk7CiAgbGV0IHdzID0gbmV3IFJlY29ubmVjdGluZ1dlYlNvY2tldCh1cmwsICdsd3MtbWlycm9yLXByb3RvY29sJywgaGFuZGxlcnMgPz8ge30pOwoKICAoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICBsZXQgY2h1bmtzID0gJycsCiAgICAgIGRhdGE7CiAgICBmb3IgYXdhaXQobGV0IGNodW5rIG9mIHdzKSB7CiAgICAgIGNodW5rcyArPSBjaHVuazsKCiAgICAgIGlmKC99XHMqJC8udGVzdChjaHVua3MpKSB7CiAgICAgICAgaWYoIShkYXRhID0gZ2xvYmFsVGhpcy5yZWNlaXZlZCA9IFBhcnNlSlNPTihjaHVua3MpKSkgY29udGludWU7CgogICAgICAgIGlmKGRhdGEudHlwZSAhPSAnZXZlbnQnKSBpZiAoIWRhdGEuY2lkIHx8IGdsb2JhbFRoaXMuY2lkICE9IGRhdGEuY2lkKSBjb25zb2xlLmxvZygnV1MgcmVjZWl2ZTonLCBkYXRhKTsKCiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHsKICAgICAgICAgIGNhc2UgJ2V2ZW50JzoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdibGF6ZSc6IHsKICAgICAgICAgICAgUmVwbGF5VHJhaWwoZGF0YS50cmFpbCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgY2FzZSAnZXZhbCc6IHsKICAgICAgICAgICAgaWYoZGF0YS5jaWQgJiYgZ2xvYmFsVGhpcy5jaWQgIT0gZGF0YS5jaWQpIGJyZWFrOwoKICAgICAgICAgICAgbGV0IHJlc3VsdCwgZXhjZXB0aW9uOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXN1bHQgPSBldmFsKGRhdGEuY29kZSk7CiAgICAgICAgICAgIH0gY2F0Y2goZXJyb3IpIHsKICAgICAgICAgICAgICBleGNlcHRpb24gPSBlcnJvcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgU2VuZFdTKHsgdHlwZTogJ3Jlc3VsdCcsIC4uLihleGNlcHRpb24gPyB7IGVycm9yOiBleGNlcHRpb24ubWVzc2FnZSB9IDogeyByZXN1bHQgfSkgfSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY2h1bmtzID0gJyc7CiAgICAgIH0KICAgIH0KICB9KSgpOwoKICByZXR1cm4gKGdsb2JhbFRoaXMud3MgPSB3cyk7Cn0KCmZ1bmN0aW9uIE1ha2VVVUlEKHJuZyA9IE1hdGgucmFuZG9tKSB7CiAgcmV0dXJuIFs4LCA0LCA0LCA0LCAxMl0ubWFwKG4gPT4gcmFuZFN0cihuLCAnMDEyMzQ1Njc4OWFiY2RlZicpLCBybmcpLmpvaW4oJy0nKTsKfQpmdW5jdGlvbiBNYWtlQ2xpZW50SUQocm5nID0gTWF0aC5yYW5kb20pIHsKICByZXR1cm4gWzQsIDQsIDQsIDRdLm1hcChuID0+IHJhbmRTdHIobiwgWydBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicsICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicsICcuLSQnXVtyYW5kSW50KDAsIDMpXSksIHJuZykuam9pbignJyk7Cn0KCmFzeW5jIGZ1bmN0aW9uIExvYWRXQVNNKGZpbGUgPSAnZmlyZS9idWlsZC9maXJlLndhc20nKSB7CiAgbGV0IHQgPSBEYXRlLm5vdygpOwogIGxldCB7CiAgICBtb2R1bGUsCiAgICBpbnN0YW5jZTogeyBleHBvcnRzIH0KICB9ID0gYXdhaXQgd2FzbUJyb3dzZXJJbnN0YW50aWF0ZShmaWxlKTsKCiAgY29uc29sZS5sb2coYFdBU00gbW9kdWxlIGxvYWRlZC4gVG9vayAke0RhdGUubm93KCkgLSB0fW1zYCk7CgogIHJldHVybiAoZ2xvYmFsVGhpcy53YXNtID0geyBtb2R1bGUsIGV4cG9ydHMgfSk7Cn0KCmZ1bmN0aW9uIEVsZW1lbnROYW1lKGUpIHsKICBsZXQgcyA9IGUub3V0ZXJIVE1MLnN1YnN0cmluZygxKS5zdWJzdHJpbmcoMCwgZS50YWdOYW1lLmxlbmd0aCk7CiAgaWYoZS5pZCkgcyArPSAnIycgKyBlLmlkOwogIHJldHVybiBzOwp9CgpmdW5jdGlvbiBUYXJnZXROYW1lKGUpIHsKICByZXR1cm4gZ2V0Q29uc3RydWN0b3JDaGFpbihlKVswXS5uYW1lLnJlcGxhY2UoJ0hUTUwnLCAnJyk7Cn0KCmZ1bmN0aW9uIEdldFJlY3RzKCkgewogIGxldCByZWN0cyA9IFtdOwogIGZvcihsZXQgZWxlbWVudCBvZiBbLi4uQWxsUGFyZW50cyhFbGVtZW50LmZpbmQoJ2NhbnZhcycpKV0pIHsKICAgIHJlY3RzLnB1c2goW0VsZW1lbnROYW1lKGVsZW1lbnQpLCBFbGVtZW50LnJlY3QoZWxlbWVudCksIG5ldyBQb2ludChlbGVtZW50LnNjcm9sbExlZnQsIGVsZW1lbnQuc2Nyb2xsVG9wKV0pOwogIH0KICByZWN0cy5wdXNoKFsnd2luZG93JywgbmV3IFJlY3QoMCwgMCwgd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCksIG5ldyBQb2ludCh3aW5kb3cuc2Nyb2xsWCwgd2luZG93LnNjcm9sbFkpXSk7CgogIHJldHVybiByZWN0czsKfQoKZnVuY3Rpb24gU2VuZFdTKG1zZykgewogIGlmKHdzLnJlYWR5U3RhdGUgIT0gd3MuT1BFTikgcmV0dXJuOwogIGlmKCEoJ2NpZCcgaW4gbXNnKSkgbXNnID0geyBjaWQ6IGdsb2JhbFRoaXMuY2lkLCAuLi5tc2cgfTsKCiAgaWYodHlwZW9mIG1zZyAhPSAnc3RyaW5nJykgbXNnID0gSlNPTi5zdHJpbmdpZnkobXNnKTsKCiAgLy9jb25zb2xlLmxvZygnV1Mgc2VuZDonLCBKU09OLnBhcnNlKG1zZykpOwoKICByZXR1cm4gd3Muc2VuZChtc2cpOwp9CgpmdW5jdGlvbiBUb2dnbGVDbGFzcyhlbGVtZW50LCBuYW1lKSB7CiAgcmV0dXJuICguLi5hcmdzKSA9PiBlbGVtZW50LmNsYXNzTGlzdFthcmdzLmxlbmd0aCA+IDAgPyAoYXJnc1swXSA/ICdhZGQnIDogJ3JlbW92ZScpIDogJ2NvbnRhaW5zJ10obmFtZSk7Cn0KCmZ1bmN0aW9uIHN5bmNIZWlnaHQoKSB7CiAgaHRtbEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0td2luZG93LWlubmVyLWhlaWdodCcsIGAke3dpbmRvdy5pbm5lckhlaWdodH1weGApOwp9CgpkZWZpbmUoZ2xvYmFsVGhpcywgeyBjcm9zc2tpdCwgUkdCQSwgSFNMQSwgVXRpbCwgTWF0cml4LCBUcmFuc2Zvcm1hdGlvbkxpc3QgfSk7CmRlZmluZShnbG9iYWxUaGlzLCB7IFdlYlNvY2tldEl0ZXJhdG9yLCBXZWJTb2NrZXRVUkwsIENyZWF0ZVdlYlNvY2tldCwgTmV3V1MsIFJlY29ubmVjdGluZ1dlYlNvY2tldCB9KTsKZGVmaW5lKGdsb2JhbFRoaXMsIHsgZGVmaW5lLCBpc1VuZGVmaW5lZCwgcHJvcGVydGllcywga2V5cyB9KTsKZGVmaW5lKGdsb2JhbFRoaXMsIHsgb25jZSwgc3RyZWFtaWZ5LCB0aHJvdHRsZSwgZGlzdGluY3QsIHN1YnNjcmliZSB9KTsKZGVmaW5lKGdsb2JhbFRoaXMsIHsgSW50ZXJzZWN0aW9uLCBNYXRyaXgsIGlzUmVjdCwgUmVjdCwgU2l6ZSwgUG9pbnQsIExpbmUsIFRyYW5zZm9ybWF0aW9uTGlzdCwgVmVjdG9yIH0pOwpkZWZpbmUoZ2xvYmFsVGhpcywgewogIEdldEVsZW1lbnRNYXRyaXgsCiAgUG9zaXRpb25NYXRyaXgsCiAgUG9zaXRpb25NYXRyaXgyLAogIHN5bmNIZWlnaHQsCiAgVG9nZ2xlQ2xhc3MsCiAgTG9hZFdBU00sCiAgdGltZXIsCiAgTWFrZVVVSUQsCiAgTWFrZUNsaWVudElELAogIGlzU3RyZWFtLAogIEFjcXVpcmVSZWFkZXIsCiAgQWNxdWlyZVdyaXRlciwKICBBcnJheVdyaXRlciwKICByZWFkU3RyZWFtLAogIFBpcGVUbywKICBXcml0YWJsZVJlcGVhdGVyLAogIFdyaXRlSXRlcmF0b3IsCiAgQXN5bmNXcml0ZSwKICBBc3luY1JlYWQsCiAgUmVhZEZyb21JdGVyYXRvciwKICBXcml0ZVRvUmVwZWF0ZXIsCiAgTG9nU2luaywKICBTdHJpbmdSZWFkZXIsCiAgTGluZVJlYWRlciwKICBEZWJ1Z1RyYW5zZm9ybVN0cmVhbSwKICBDcmVhdGVXcml0YWJsZVN0cmVhbSwKICBDcmVhdGVUcmFuc2Zvcm1TdHJlYW0sCiAgUmVwZWF0ZXJTb3VyY2UsCiAgUmVwZWF0ZXJTaW5rLAogIExpbmVCdWZmZXJTdHJlYW0sCiAgVGV4dFRyYW5zZm9ybVN0cmVhbSwKICBDaHVua1JlYWRlciwKICBCeXRlUmVhZGVyLAogIFBpcGVUb1JlcGVhdGVyLAogIFJlYWRlciwKICBSZWFkQWxsLAogIFN0cmVhbVJlYWRJdGVyYXRvcgp9KTsKCmRlZmluZShnbG9iYWxUaGlzLCB7CiAgRWxlbWVudCwKICBpc0VsZW1lbnQsCiAgU1ZHLAogIFJlYWN0LAogIGgsCiAgaHRtbCwKICByZW5kZXIsCiAgRnJhZ21lbnQsCiAgQ29tcG9uZW50LAogIGNyZWF0ZVJlZiwKICB1c2VTdGF0ZSwKICB1c2VMYXlvdXRFZmZlY3QsCiAgdXNlUmVmLAogIHRvQ2hpbGRBcnJheSwKICByYW5kSW50LAogIHdhc21Ccm93c2VySW5zdGFudGlhdGUsCiAgQ29weU9iamVjdCwKICBnZXRQcm90b3R5cGVDaGFpbiwKICBnZXRDb25zdHJ1Y3RvckNoYWluLAogIGlzSlNGdW5jdGlvbiwKICBpc0NGdW5jdGlvbiwKICBFbGVtZW50TmFtZSwKICBUYXJnZXROYW1lLAogIEdldFJlY3RzLAogIFNlbmRXUywKICBnZXRzZXQsCiAgZ2V0dGVyc2V0dGVyLAogIGNoYWluLAogIGNoYWluUmlnaHQKfSk7CgptYWluKCk7CgAAAAAAAAAAE20AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoDgAAAAAAACgOAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "debuggerprotocol.js",
			"settings":
			{
				"buffer_size": 7044,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "ui"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					2,
					"left_delete",
					null,
					"AgAAAAEAAAAAAAAAAQAAAAAAAAABAAAAaQAAAAAAAAAAAAAAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "./lib/"
					},
					"BwAAAE8AAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABQAAAAAAAAAAIAAABmc1AAAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABSAAAAAAAAAAAAAABSAAAAAAAAAFMAAAAAAAAAAAAAAFMAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABVAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "fileys"
					},
					"BgAAAFUAAAAAAAAAVgAAAAAAAAAAAAAAVgAAAAAAAABXAAAAAAAAAAAAAABXAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAWQAAAAAAAAAAAAAAWQAAAAAAAABaAAAAAAAAAAAAAABaAAAAAAAAAFsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					2,
					"left_delete",
					null,
					"AgAAAFoAAAAAAAAAWgAAAAAAAAABAAAAc1kAAAAAAAAAWQAAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAWwAAAAAAAABbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "system.js"
					},
					"CQAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAXQAAAAAAAAAAAAAAXQAAAAAAAABeAAAAAAAAAAAAAABeAAAAAAAAAF8AAAAAAAAAAAAAAF8AAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABhAAAAAAAAAAAAAABhAAAAAAAAAGIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"right_delete",
					null,
					"AQAAADcAAAAAAAAANwAAAAAAAAAuAAAAaW1wb3J0IGZpbGVzeXN0ZW0gZnJvbSAnLi9saWIvZmlsZXN5c3RlbS5qcyc7Cg",
					"AQAAAAAAAAABAAAANwAAAAAAAABlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"right_delete",
					null,
					"AQAAAF4AAAAAAAAAXgAAAAAAAAArAAAAaW1wb3J0ICogYXMgZnMgZnJvbSAnLi9saWIvZmlsZXN5c3RlbS5qcyc7Cg",
					"AQAAAAAAAAABAAAAXgAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					3,
					"left_delete",
					null,
					"AwAAABMAAAAAAAAAEwAAAAAAAAAJAAAAV3JpdGVGaWxlEgAAAAAAAAASAAAAAAAAAAEAAAAgEQAAAAAAAAARAAAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAAEwAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "debugger.html",
			"settings":
			{
				"buffer_size": 441,
				"line_ending": "Unix"
			}
		},
		{
			"file": "debugger-client.js",
			"settings":
			{
				"buffer_size": 14234,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					28,
					2,
					"right_delete",
					null,
					"AgAAADcXAAAAAAAANxcAAAAAAAAFAAAAUmVhY3Q3FwAAAAAAADcXAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAANxcAAAAAAAA8FwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					3,
					"right_delete",
					null,
					"AwAAABUBAAAAAAAAFQEAAAAAAAAFAAAAUmVhY3QVAQAAAAAAABUBAAAAAAAAAQAAACwVAQAAAAAAABUBAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAAFQEAAAAAAAAaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					3,
					"left_delete",
					null,
					"AwAAANQAAAAAAAAA1AAAAAAAAAALAAAAZXh0ZW5kQXJyYXnTAAAAAAAAANMAAAAAAAAAAQAAACDSAAAAAAAAANIAAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAA1AAAAAAAAADfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					4,
					"right_delete",
					null,
					"BAAAABYXAAAAAAAAFhcAAAAAAAALAAAAZXh0ZW5kQXJyYXkWFwAAAAAAABYXAAAAAAAAAQAAACwWFwAAAAAAABYXAAAAAAAAAQAAACAWFwAAAAAAABYXAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAAFhcAAAAAAAAhFwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "",
			"file": "upload-server.js",
			"file_size": 34705,
			"file_write_time": 133267339624647767,
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "defauolt"
					},
					"CQAAALwCAAAAAAAAvQIAAAAAAAAAAAAAvQIAAAAAAAC9AgAAAAAAAA4AAABjbGllbnQsIHNlcnZlcr0CAAAAAAAAvgIAAAAAAAAAAAAAvgIAAAAAAAC/AgAAAAAAAAAAAAC/AgAAAAAAAMACAAAAAAAAAAAAAMACAAAAAAAAwQIAAAAAAAAAAAAAwQIAAAAAAADCAgAAAAAAAAAAAADCAgAAAAAAAMMCAAAAAAAAAAAAAMMCAAAAAAAAxAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAIAAAAAAADKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAMQCAAAAAAAAxQIAAAAAAAAAAAAAxQIAAAAAAADGAgAAAAAAAAAAAADGAgAAAAAAAMcCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAIAAAAAAADEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					6,
					"left_delete",
					null,
					"BgAAAMYCAAAAAAAAxgIAAAAAAAABAAAAc8UCAAAAAAAAxQIAAAAAAAABAAAAYcQCAAAAAAAAxAIAAAAAAAABAAAAIMMCAAAAAAAAwwIAAAAAAAABAAAAdMICAAAAAAAAwgIAAAAAAAABAAAAbMECAAAAAAAAwQIAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAxwIAAAAAAADHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "lt"
					},
					"AgAAAMECAAAAAAAAwgIAAAAAAAAAAAAAwgIAAAAAAADDAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQIAAAAAAADBAgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAMMCAAAAAAAAxAIAAAAAAAAAAAAAxAIAAAAAAADFAgAAAAAAAAAAAADFAgAAAAAAAMYCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwIAAAAAAADDAgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " net"
					},
					"BAAAAMYCAAAAAAAAxwIAAAAAAAAAAAAAxwIAAAAAAADIAgAAAAAAAAAAAADIAgAAAAAAAMkCAAAAAAAAAAAAAMkCAAAAAAAAygIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgIAAAAAAADGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"right_delete",
					null,
					"AQAAANGDAAAAAAAA0YMAAAAAAAARAAAAIGNsaWVudCwgc2VydmVyLCA",
					"AQAAAAAAAAABAAAA0YMAAAAAAADigwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPODAAAAAAAA9IMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA84MAAAAAAADzgwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " ...net"
					},
					"BwAAAPSDAAAAAAAA9YMAAAAAAAAAAAAA9YMAAAAAAAD2gwAAAAAAAAAAAAD2gwAAAAAAAPeDAAAAAAAAAAAAAPeDAAAAAAAA+IMAAAAAAAAAAAAA+IMAAAAAAAD5gwAAAAAAAAAAAAD5gwAAAAAAAPqDAAAAAAAAAAAAAPqDAAAAAAAA+4MAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9IMAAAAAAAD0gwAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "net."
					},
					"BAAAAGAxAAAAAAAAYTEAAAAAAAAAAAAAYTEAAAAAAABiMQAAAAAAAAAAAABiMQAAAAAAAGMxAAAAAAAAAAAAAGMxAAAAAAAAZDEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYDEAAAAAAABgMQAAAAAAAAAAAAAAAFVA"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "net."
					},
					"BAAAAGwxAAAAAAAAbTEAAAAAAAAAAAAAbTEAAAAAAABuMQAAAAAAAAAAAABuMQAAAAAAAG8xAAAAAAAAAAAAAG8xAAAAAAAAcDEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbDEAAAAAAABsMQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"cut",
					null,
					"AQAAACwxAAAAAAAALDEAAAAAAAAnAAAAY29uc29sZS5sb2coJ2NyZWF0ZVdTJywgeyBsb2dMZXZlbCB9KTsK",
					"AQAAAAAAAAABAAAALDEAAAAAAABTMQAAAAAAAAAAAAAAADxA"
				],
				[
					73,
					1,
					"paste",
					null,
					"AQAAACwxAAAAAAAAUzEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALDEAAAAAAAAsMQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFAxAAAAAAAAUTEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUDEAAAAAAABQMQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " net.srever"
					},
					"CwAAAFExAAAAAAAAUjEAAAAAAAAAAAAAUjEAAAAAAABTMQAAAAAAAAAAAABTMQAAAAAAAFQxAAAAAAAAAAAAAFQxAAAAAAAAVTEAAAAAAAAAAAAAVTEAAAAAAABWMQAAAAAAAAAAAABWMQAAAAAAAFcxAAAAAAAAAAAAAFcxAAAAAAAAWDEAAAAAAAAAAAAAWDEAAAAAAABZMQAAAAAAAAAAAABZMQAAAAAAAFoxAAAAAAAAAAAAAFoxAAAAAAAAWzEAAAAAAAAAAAAAWzEAAAAAAABcMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUTEAAAAAAABRMQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					5,
					"left_delete",
					null,
					"BQAAAFsxAAAAAAAAWzEAAAAAAAABAAAAcloxAAAAAAAAWjEAAAAAAAABAAAAZVkxAAAAAAAAWTEAAAAAAAABAAAAdlgxAAAAAAAAWDEAAAAAAAABAAAAZVcxAAAAAAAAVzEAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAXDEAAAAAAABcMQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "erver"
					},
					"BQAAAFcxAAAAAAAAWDEAAAAAAAAAAAAAWDEAAAAAAABZMQAAAAAAAAAAAABZMQAAAAAAAFoxAAAAAAAAAAAAAFoxAAAAAAAAWzEAAAAAAAAAAAAAWzEAAAAAAABcMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzEAAAAAAABXMQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "net.server"
					},
					"CgAAAGsxAAAAAAAAbDEAAAAAAAAAAAAAbDEAAAAAAABtMQAAAAAAAAAAAABtMQAAAAAAAG4xAAAAAAAAAAAAAG4xAAAAAAAAbzEAAAAAAAAAAAAAbzEAAAAAAABwMQAAAAAAAAAAAABwMQAAAAAAAHExAAAAAAAAAAAAAHExAAAAAAAAcjEAAAAAAAAAAAAAcjEAAAAAAABzMQAAAAAAAAAAAABzMQAAAAAAAHQxAAAAAAAAAAAAAHQxAAAAAAAAdTEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAazEAAAAAAABrMQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"cut",
					null,
					"AQAAAHUxAAAAAAAAdTEAAAAAAAAhAAAAW25ldC5jbGllbnQsIG5ldC5zZXJ2ZXJdWytsaXN0ZW5d",
					"AQAAAAAAAAABAAAAdTEAAAAAAACWMQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					8,
					"left_delete",
					null,
					"CAAAAE8wAAAAAAAATzAAAAAAAAABAAAAbk4wAAAAAAAATjAAAAAAAAABAAAAZU0wAAAAAAAATTAAAAAAAAABAAAAdEwwAAAAAAAATDAAAAAAAAABAAAAc0swAAAAAAAASzAAAAAAAAABAAAAaUowAAAAAAAASjAAAAAAAAABAAAAbEkwAAAAAAAASTAAAAAAAAABAAAAIEgwAAAAAAAASDAAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAUDAAAAAAAABQMAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "net"
					},
					"AwAAAIgCAAAAAAAAiQIAAAAAAAAAAAAAiQIAAAAAAACKAgAAAAAAAAAAAACKAgAAAAAAAIsCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAIAAAAAAACIAgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " ,"
					},
					"AgAAAIsCAAAAAAAAjAIAAAAAAAAAAAAAjAIAAAAAAACNAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwIAAAAAAACLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					2,
					"left_delete",
					null,
					"AgAAAIwCAAAAAAAAjAIAAAAAAAABAAAALIsCAAAAAAAAiwIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAjQIAAAAAAACNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIsCAAAAAAAAjAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwIAAAAAAACLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIwCAAAAAAAAjQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAIAAAAAAACMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAMECAAAAAAAAwgIAAAAAAAAAAAAAwgIAAAAAAADCAgAAAAAAAA8AAABkZWZhdWx0IGFzIG5ldCw",
					"AQAAAAAAAAABAAAAwQIAAAAAAADQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					2,
					"left_delete",
					null,
					"AgAAAMECAAAAAAAAwQIAAAAAAAABAAAAIMACAAAAAAAAwAIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAwgIAAAAAAADCAgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "createS"
					},
					"BwAAAEMxAAAAAAAARDEAAAAAAAAAAAAARDEAAAAAAABFMQAAAAAAAAAAAABFMQAAAAAAAEYxAAAAAAAAAAAAAEYxAAAAAAAARzEAAAAAAAAAAAAARzEAAAAAAABIMQAAAAAAAAAAAABIMQAAAAAAAEkxAAAAAAAAAAAAAEkxAAAAAAAASjEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQzEAAAAAAABDMQAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"right_delete",
					null,
					"AQAAAEoxAAAAAAAASjEAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAASjEAAAAAAABKMQAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "createS"
					},
					"BwAAAGIxAAAAAAAAYzEAAAAAAAAAAAAAYzEAAAAAAABkMQAAAAAAAAAAAABkMQAAAAAAAGUxAAAAAAAAAAAAAGUxAAAAAAAAZjEAAAAAAAAAAAAAZjEAAAAAAABnMQAAAAAAAAAAAABnMQAAAAAAAGgxAAAAAAAAAAAAAGgxAAAAAAAAaTEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYjEAAAAAAABiMQAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"right_delete",
					null,
					"AQAAAGkxAAAAAAAAaTEAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAaTEAAAAAAABpMQAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA9i4AAAAAAAD2LgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "aluminiumknopf-silber-o22mm-schwarze-linie-rnd-components-rnd-210-00345.html",
			"settings":
			{
				"buffer_size": 276450,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "io-helpers.js",
			"file_size": 10441,
			"file_write_time": 133267339619967767,
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					61,
					1,
					"",
					null,
					"AQAAAK8EAAAAAAAAtgQAAAAAAAADAAAAb3V0",
					"AQAAAAAAAAABAAAArwQAAAAAAACyBAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"",
					null,
					"AQAAAP4GAAAAAAAACgcAAAAAAAAIAAAAbG9hZEZpbGU",
					"AQAAAAAAAAABAAAA/gYAAAAAAAAGBwAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"",
					null,
					"AQAAACcHAAAAAAAALwcAAAAAAAAEAAAAb3Blbg",
					"AQAAAAAAAAABAAAAJwcAAAAAAAArBwAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"",
					null,
					"AQAAAE4HAAAAAAAAWgcAAAAAAAAIAAAAU0VFS19FTkQ",
					"AQAAAAAAAAABAAAATgcAAAAAAABWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"right_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABYAAAAaW1wb3J0IHsgZXJyLCBnZXRlbnYsIGdldGVudmlyb24sIGxvYWRGaWxlLCBvcGVuLCBTRUVLX0VORCwgb3V0LCBzdHJlcnJvciB9IGZyb20gJ3N0ZCc7Cg",
					"AQAAAAAAAAABAAAAAAAAAAAAAABYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnOwo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAA"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAG0AAAAAAAAAbgAAAAAAAAAAAAAAbgAAAAAAAABvAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAAAA"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "define"
					},
					"BgAAAG4AAAAAAAAAbwAAAAAAAAAAAAAAbwAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAAAA"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHQAAAAAAAAAdQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAAAAAAAAAB0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAAHQAAAAAAAAAdAAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAdQAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHQAAAAAAAAAdgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAAAAAAAAAB0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "Globa"
					},
					"BQAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAB3AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					5,
					"left_delete",
					null,
					"BQAAAHkAAAAAAAAAeQAAAAAAAAABAAAAYXgAAAAAAAAAeAAAAAAAAAABAAAAYncAAAAAAAAAdwAAAAAAAAABAAAAb3YAAAAAAAAAdgAAAAAAAAABAAAAbHUAAAAAAAAAdQAAAAAAAAABAAAARw",
					"AQAAAAAAAAABAAAAegAAAAAAAAB6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "globalThis,"
					},
					"CwAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAB3AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAHsAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAAB9AAAAAAAAAAAAAAB9AAAAAAAAAH4AAAAAAAAAAAAAAH4AAAAAAAAAfwAAAAAAAAAAAAAAfwAAAAAAAACAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " propt"
					},
					"BgAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAACCAAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAAIUAAAAAAAAAhQAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "erties"
					},
					"BgAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAIsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQAAAAAAAACFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIsAAAAAAAAAjQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIwAAAAAAAAAjQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"left_delete",
					null,
					"AQAAAIwAAAAAAAAAjAAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIwAAAAAAAAAjgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAI4AAAAAAAAAjwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI8AAAAAAAAAkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJAAAAAAAAAAkgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " memoize:"
					},
					"CQAAAJEAAAAAAAAAkgAAAAAAAAAAAAAAkgAAAAAAAACTAAAAAAAAAAAAAACTAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAlQAAAAAAAAAAAAAAlQAAAAAAAACWAAAAAAAAAAAAAACWAAAAAAAAAJcAAAAAAAAAAAAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAACZAAAAAAAAAJoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQAAAAAAAACRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAJ0AAAAAAAAAAAAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwAAAAAAAACfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKMAAAAAAAAApAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACOAAAAAAAAAJAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACTAAAAAAAAAAAAAACOAAAAAAAAAI4AAAAAAAAAAgAAACAgkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJQAAAAAAAAAAAAAAI8AAAAAAAAAjwAAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkQAAAAAAAACRAAAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAACxA"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "os:"
					},
					"AwAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAJkAAAAAAAAAmgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJoAAAAAAAAAnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJsAAAAAAAAAnQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwAAAAAAAACbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "os"
					},
					"AgAAAJwAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert_snippet",
					{
						"contents": "(${0:$SELECTION})"
					},
					"AgAAAJQAAAAAAAAAlAAAAAAAAAAMAAAAaW1wb3J0KCdvcycplAAAAAAAAACiAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AgAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACWAAAAAAAAAAwAAABpbXBvcnQoJ29zJyk",
					"AQAAAAAAAAABAAAAlQAAAAAAAAChAAAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJkAAAAAAAAAmgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"",
					null,
					"AQAAAJoAAAAAAAAAtAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"right_delete",
					null,
					"AQAAALQAAAAAAAAAtAAAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAtAAAAAAAAAC0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"left_delete",
					null,
					"AQAAAI4AAAAAAAAAjgAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAgG9A"
				],
				[
					146,
					1,
					"cut",
					null,
					"AQAAAI8AAAAAAAAAjwAAAAAAAAAlAAAAb3M6ICgpID0+IHByb2Nlc3MuaW1wb3J0TW9kdWxlKCdvcycpCg",
					"AQAAAAAAAAABAAAAjwAAAAAAAAC0AAAAAAAAAAAAAAAAAAAA"
				],
				[
					147,
					2,
					"paste",
					null,
					"AgAAAI8AAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAADZAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					2,
					"right_delete",
					null,
					"AgAAALQAAAAAAAAAtAAAAAAAAAABAAAAb7QAAAAAAAAAtAAAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAtAAAAAAAAAC0AAAAAAAAAAAAAAAAAAAA"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "std"
					},
					"AwAAALQAAAAAAAAAtQAAAAAAAAAAAAAAtQAAAAAAAAC2AAAAAAAAAAAAAAC2AAAAAAAAALcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAAAAAAAAAC0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					2,
					"left_delete",
					null,
					"AgAAANYAAAAAAAAA1gAAAAAAAAABAAAAc9UAAAAAAAAA1QAAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "std"
					},
					"AwAAANUAAAAAAAAA1gAAAAAAAAAAAAAA1gAAAAAAAADXAAAAAAAAAAAAAADXAAAAAAAAANgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACoAAAAAAAAAKwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "define,proper"
					},
					"DQAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwAAAAAAAAArAAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert_completion",
					{
						"completion": "properties",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "properties"
					},
					"AgAAADIAAAAAAAAAMgAAAAAAAAAGAAAAcHJvcGVyMgAAAAAAAAA8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADwAAAAAAAAAPQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMYAAAAAAAAAxwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgAAAAAAAADGAAAAAAAAAP///////+9/"
				],
				[
					176,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "//export { types } from  '../quickjs/qjs-modules/lib/util.js';\n\nconst slice = (x, s, e) =>\n  typeof x == 'object' ? (isArrayBuffer(x) ? dupArrayBuffer(x, s, e) : Array.isArray(x) ? Array.prototype.slice.call(x, s, e) : x.slice(s, e)) : String.prototype.slice.call(x, s, e);\nconst stringify = v => `${v}`;\nconst protoOf = Object.getPrototypeOf;\nconst formatNumber = n => (n === -0 ? '-0' : `${n}`);\nconst isNative = fn => /\\[native\\scode\\]/.test(stringify(fn));\n\n/*export default*/ function util() {\n  return util;\n}\n\nutil.prototype.constructor = util;\n\nconst AsyncFunction = async function x() {}.constructor;\nconst GeneratorFunction = function* () {}.constructor;\nconst AsyncGeneratorFunction = async function* () {}.constructor;\nconst TypedArray = protoOf(protoOf(new Uint16Array(10))).constructor;\n\nconst SetIteratorPrototype = protoOf(new Set().values());\nconst MapIteratorPrototype = protoOf(new Map().entries());\n//const GeneratorPrototype = protoOf((function* () {})());\n\n// prettier-ignore\nexport const errors = [null, 'EPERM', 'ENOENT', 'ESRCH', 'EINTR', 'EIO', 'ENXIO', 'E2BIG', 'ENOEXEC', 'EBADF', 'ECHILD', 'EAGAIN', 'ENOMEM', 'EACCES', 'EFAULT', 'ENOTBLK', 'EBUSY', 'EEXIST', 'EXDEV', 'ENODEV', 'ENOTDIR', 'EISDIR', 'EINVAL', 'ENFILE', 'EMFILE', 'ENOTTY', 'ETXTBSY', 'EFBIG', 'ENOSPC', 'ESPIPE', 'EROFS', 'EMLINK', 'EPIPE', 'EDOM', 'ERANGE', 'EDEADLK', 'ENAMETOOLONG', 'ENOLCK', 'ENOSYS', 'ENOTEMPTY', null, null, 'ENOMSG', 'EIDRM', 'ECHRNG', 'EL2NSYNC', 'EL3HLT', 'EL3RST', 'ELNRNG', 'EUNATCH', 'ENOCSI', 'EL2HLT', 'EBADE', 'EBADR', 'EXFULL', 'ENOANO', 'EBADRQC', null, '', 'EBFONT', 'ENOSTR', 'ENODATA', 'ETIME', 'ENOSR', 'ENONET', 'ENOPKG', 'EREMOTE', 'ENOLINK', 'EADV', 'ESRMNT', 'ECOMM', 'EPROTO', 'EMULTIHOP', 'EDOTDOT', 'EBADMSG', 'EOVERFLOW', 'ENOTUNIQ', 'EBADFD', 'EREMCHG', 'ELIBACC', 'ELIBBAD', 'ELIBSCN', 'ELIBMAX', 'ELIBEXEC', 'EILSEQ', 'ERESTART', 'ESTRPIPE', 'EUSERS', 'ENOTSOCK', 'EDESTADDRREQ', 'EMSGSIZE', 'EPROTOTYPE', 'ENOPROTOOPT', 'EPROTONOSUPPORT', 'ESOCKTNOSUPPORT', 'EOPNOTSUPP', 'EPFNOSUPPORT', 'EAFNOSUPPORT', 'EADDRINUSE', 'EADDRNOTAVAIL', 'ENETDOWN', 'ENETUNREACH', 'ENETRESET', 'ECONNABORTED', 'ECONNRESET', 'ENOBUFS', 'EISCONN', 'ENOTCONN', 'ESHUTDOWN', 'ETOOMANYREFS', 'ETIMEDOUT', 'ECONNREFUSED', 'EHOSTDOWN', 'EHOSTUNREACH', 'EALREADY', 'EINPROGRESS', 'ESTALE', 'EUCLEAN', 'ENOTNAM', 'ENAVAIL', 'EISNAM', 'EREMOTEIO', 'EDQUOT', 'ENOMEDIUM', 'EMEDIUMTYPE', 'ECANCELED', 'ENOKEY', 'EKEYEXPIRED', 'EKEYREVOKED', 'EKEYREJECTED', 'EOWNERDEAD', 'ENOTRECOVERABLE', 'ERFKILL'];\n\nexport const types = {\n  isAnyArrayBuffer(v) {\n    return isObject(v) && (v instanceof ArrayBuffer || v instanceof SharedArrayBuffer);\n  },\n  isArrayBuffer(v) {\n    return isObject(v) && v instanceof ArrayBuffer;\n  },\n  isBigInt64Array(v) {\n    return isObject(v) && v instanceof BigInt64Array;\n  },\n  isBigUint64Array(v) {\n    return isObject(v) && v instanceof BigUint64Array;\n  },\n  isDate(v) {\n    return isObject(v) && v instanceof Date;\n  },\n  isFloat32Array(v) {\n    return isObject(v) && v instanceof Float32Array;\n  },\n  isFloat64Array(v) {\n    return isObject(v) && v instanceof Float64Array;\n  },\n  isInt8Array(v) {\n    return isObject(v) && v instanceof Int8Array;\n  },\n  isInt16Array(v) {\n    return isObject(v) && v instanceof Int16Array;\n  },\n  isInt32Array(v) {\n    return isObject(v) && v instanceof Int32Array;\n  },\n  isMap(v) {\n    return isObject(v) && v instanceof Map;\n  },\n  isPromise(v) {\n    return isObject(v) && v instanceof Promise;\n  },\n  isProxy(v) {\n    return isObject(v) && v instanceof Proxy;\n  },\n  isRegExp(v) {\n    return isObject(v) && v instanceof RegExp;\n  },\n  isSet(v) {\n    return isObject(v) && v instanceof Set;\n  },\n  isSharedArrayBuffer(v) {\n    return isObject(v) && v instanceof SharedArrayBuffer;\n  },\n  isUint8Array(v) {\n    return isObject(v) && v instanceof Uint8Array;\n  },\n  isUint8ClampedArray(v) {\n    return isObject(v) && v instanceof Uint8ClampedArray;\n  },\n  isUint16Array(v) {\n    return isObject(v) && v instanceof Uint16Array;\n  },\n  isUint32Array(v) {\n    return isObject(v) && v instanceof Uint32Array;\n  },\n  isWeakMap(v) {\n    return isObject(v) && v instanceof WeakMap;\n  },\n  isWeakSet(v) {\n    return isObject(v) && v instanceof WeakSet;\n  },\n  isDataView(v) {\n    return isObject(v) && v instanceof DataView;\n  },\n  isBooleanObject(v) {\n    return isObject(v) && v instanceof Boolean;\n  },\n  isAsyncFunction(v) {\n    return isObject(v) && v instanceof AsyncFunction;\n  },\n  isGeneratorFunction(v) {\n    return isObject(v) && v instanceof GeneratorFunction;\n  },\n  isAsyncGeneratorFunction(v) {\n    return isObject(v) && v instanceof AsyncGeneratorFunction;\n  },\n  isNumberObject(v) {\n    return isObject(v) && v instanceof Number;\n  },\n  isBigIntObject(v) {\n    return isObject(v) && v instanceof BigInt;\n  },\n  isSymbolObject(v) {\n    return v && v instanceof Symbol;\n  },\n  isNativeError(v) {\n    return isObject(v) && v instanceof Error && isNative(v.constructor);\n  },\n  isMapIterator(v) {\n    return isObject(v) && protoOf(v) == MapIteratorPrototype;\n  },\n  isSetIterator(v) {\n    return isObject(v) && protoOf(v) == SetIteratorPrototype;\n  },\n  isStringObject(v) {\n    return isObject(v) && v instanceof String;\n  },\n  isArrayBufferView(v) {\n    return isObject(v) && ArrayBuffer.isView(v);\n  },\n  isArgumentsObject(v) {\n    return Object.prototype.toString.call(v) == '[object Arguments]';\n  },\n  isBoxedPrimitive(v) {\n    return isObject(v) && [Number, String, Boolean, BigInt, Symbol].some(ctor => v instanceof ctor);\n  },\n  isGeneratorObject(v) {\n    return isObject(v) && protoOf(v) == GeneratorPrototype;\n  },\n  isTypedArray(v) {\n    return isObject(v) && v instanceof TypedArray;\n  },\n  isModuleNamespaceObject(v) {\n    return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  },\n  isConstructor(v) {\n    return isFunction(v) && 'prototype' in v;\n  },\n  isIterable(v) {\n    return isObject(v) && isFunction(v[Symbol.iterator]);\n  },\n  isAsyncIterable(v) {\n    return isObject(v) && isFunction(v[Symbol.asyncIterator]);\n  },\n  isIterator(v) {\n    return isObject(v) && isFunction(v.next);\n  },\n  isArrayLike(v) {\n    return isObject(v) && typeof v.length == 'number' && Number.isInteger(v.length);\n  }\n};\n\nexport function isObject(arg) {\n  return typeof arg == 'object' && arg !== null;\n}\n\nexport function isAsync(fn) {\n  if(types.isAsyncFunction(fn) || types.isAsyncGeneratorFunction(fn)) return true;\n\n  if(isFunction(fn)) return /^async\\s+function/.test(fn + '');\n}\n\nexport const inspectSymbol = Symbol.for('nodejs.util.inspect.custom');\n\nconst UTF8FirstCodeMask = [0x1f, 0xf, 0x7, 0x3, 0x1];\nconst UTF8MinCode = [0x80, 0x800, 0x10000, 0x00200000, 0x04000000];\n\n/* prettier-ignore */ const errorSymbols = [ 0, 'EPERM', 'ENOENT', 'ESRCH', 'EINTR', 'EIO', 'ENXIO', 'E2BIG', 'ENOEXEC', 'EBADF', 'ECHILD', 'EAGAIN', 'ENOMEM', 'EACCES', 'EFAULT', 'ENOTBLK', 'EBUSY', 'EEXIST', 'EXDEV', 'ENODEV', 'ENOTDIR', 'EISDIR', 'EINVAL', 'ENFILE', 'EMFILE', 'ENOTTY', 'ETXTBSY', 'EFBIG', 'ENOSPC', 'ESPIPE', 'EROFS', 'EMLINK', 'EPIPE', 'EDOM', 'ERANGE', 'EDEADLK', 'ENAMETOOLONG', 'ENOLCK', 'ENOSYS', 'ENOTEMPTY', 0, 0, 'ENOMSG', 'EIDRM', 'ECHRNG', 'EL2NSYNC', 'EL3HLT', 'EL3RST', 'ELNRNG', 'EUNATCH', 'ENOCSI', 'EL2HLT', 'EBADE', 'EBADR', 'EXFULL', 'ENOANO', 'EBADRQC', 0, 0, 'EBFONT', 'ENOSTR', 'ENODATA', 'ETIME', 'ENOSR', 'ENONET', 'ENOPKG', 'EREMOTE', 'ENOLINK', 'EADV', 'ESRMNT', 'ECOMM', 'EPROTO', 'EMULTIHOP', 'EDOTDOT', 'EBADMSG', 'EOVERFLOW', 'ENOTUNIQ', 'EBADFD', 'EREMCHG', 'ELIBACC', 'ELIBBAD', 'ELIBSCN', 'ELIBMAX', 'ELIBEXEC', 'EILSEQ', 'ERESTART', 'ESTRPIPE', 'EUSERS', 'ENOTSOCK', 'EDESTADDRREQ', 'EMSGSIZE', 'EPROTOTYPE', 'ENOPROTOOPT', 'EPROTONOSUPPORT', 'ESOCKTNOSUPPORT', 'EOPNOTSUPP', 'EPFNOSUPPORT', 'EAFNOSUPPORT', 'EADDRINUSE', 'EADDRNOTAVAIL', 'ENETDOWN', 'ENETUNREACH', 'ENETRESET', 'ECONNABORTED', 'ECONNRESET', 'ENOBUFS', 'EISCONN', 'ENOTCONN', 'ESHUTDOWN', 'ETOOMANYREFS', 'ETIMEDOUT', 'ECONNREFUSED', 'EHOSTDOWN', 'EHOSTUNREACH', 'EALREADY', 'EINPROGRESS', 'ESTALE', 'EUCLEAN', 'ENOTNAM', 'ENAVAIL', 'EISNAM', 'EREMOTEIO', 'EDQUOT', 'ENOMEDIUM', 'EMEDIUMTYPE', 'ECANCELED', 'ENOKEY', 'EKEYEXPIRED', 'EKEYREVOKED', 'EKEYREJECTED', 'EOWNERDEAD', 'ENOTRECOVERABLE', 'ERFKILL' ];\n\nexport function SyscallError(syscall, errnum) {\n  let obj = new.target ? this : new SyscallError();\n  if(syscall) obj.syscall = syscall;\n  if(errnum != undefined) {\n    if(typeof errnum == 'number') {\n      obj.errno = errnum;\n      obj.code = errorSymbols[errnum];\n    } else {\n      obj.errno = errorSymbols.indexOf(errnum);\n      obj.code = errnum;\n    }\n  }\n  Error.call(obj, `SyscallError: '${obj.syscall}' errno = ${obj.code} (${obj.errno})`);\n  return obj;\n}\n\nSyscallError.prototype = new Error();\n\ndefine(SyscallError.prototype, {\n  get message() {\n    return `SyscallError: '${this.syscall}' errno = ${this.code} (${this.errno})`;\n  },\n  [Symbol.toStringTag]: 'SyscallError'\n});\n\nglobalThis.SyscallError = SyscallError;\n\nexport function toString(arrayBuf, encoding = 'utf-8') {\n  if(globalThis.TextDecoder) {\n    let dec = new TextDecoder(encoding);\n    return dec.decode(arrayBuf);\n  }\n\n  if(encoding == 'latin1') {\n    let binary = '';\n    let bytes = new Uint8Array(arrayBuf);\n    let len = bytes.byteLength;\n    for(let i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return binary;\n  }\n\n  let a = new Uint8Array(arrayBuf);\n  let p = 0;\n  let o = '';\n  let len = a.length;\n  for(p = 0; p < len; ) {\n    let max_len = len - p;\n    let l, c, b, i;\n\n    c = a[p++];\n    if(c < 0x80) {\n      o += String.fromCodePoint(c);\n      continue;\n    }\n\n    switch (c) {\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 0xc6:\n      case 0xc7:\n      case 0xc8:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd0:\n      case 0xd1:\n      case 0xd2:\n      case 0xd3:\n      case 0xd4:\n      case 0xd5:\n      case 0xd6:\n      case 0xd7:\n      case 0xd8:\n      case 0xd9:\n      case 0xda:\n      case 0xdb:\n      case 0xdc:\n      case 0xdd:\n      case 0xde:\n      case 0xdf:\n        l = 1;\n        break;\n      case 0xe0:\n      case 0xe1:\n      case 0xe2:\n      case 0xe3:\n      case 0xe4:\n      case 0xe5:\n      case 0xe6:\n      case 0xe7:\n      case 0xe8:\n      case 0xe9:\n      case 0xea:\n      case 0xeb:\n      case 0xec:\n      case 0xed:\n      case 0xee:\n      case 0xef:\n        l = 2;\n        break;\n      case 0xf0:\n      case 0xf1:\n      case 0xf2:\n      case 0xf3:\n      case 0xf4:\n      case 0xf5:\n      case 0xf6:\n      case 0xf7:\n        l = 3;\n        break;\n      case 0xf8:\n      case 0xf9:\n      case 0xfa:\n      case 0xfb:\n        l = 4;\n        break;\n      case 0xfc:\n      case 0xfd:\n        l = 5;\n        break;\n      default:\n        return null;\n    }\n    /* check that we have enough characters */\n    if(l > max_len - 1) return -1;\n\n    c &= UTF8FirstCodeMask[l - 1];\n    for(i = 0; i < l; i++) {\n      b = a[p++];\n      if(b < 0x80 || b >= 0xc0) return -1;\n\n      c = (c << 6) | (b & 0x3f);\n    }\n    if(c < UTF8MinCode[l - 1]) return -1;\n    o += String.fromCodePoint(c);\n  }\n  return o;\n}\n\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = [...b64ch];\nconst b64tab = (a => {\n  let tab = {};\n  a.forEach((c, i) => (tab[c] = i));\n  return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n\nexport function btoa(bin) {\n  let u32,\n    c0,\n    c1,\n    c2,\n    asc = '';\n  const pad = bin.length % 3;\n  for(let i = 0; i < bin.length; i += 0) {\n    if((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError('invalid character found');\n    u32 = (c0 << 16) | (c1 << 8) | c2;\n    asc += b64chs[(u32 >> 18) & 63] + b64chs[(u32 >> 12) & 63] + b64chs[(u32 >> 6) & 63] + b64chs[u32 & 63];\n  }\n  return pad ? asc.slice(0, pad - 3) + '==='.substring(pad) : asc;\n}\n\nexport function atob(asc) {\n  asc = asc.replace(/\\s+/g, '');\n  if(!b64re.test(asc)) throw new TypeError('malformed base64.');\n  asc += '=='.slice(2 - (asc.length & 3));\n  let u24,\n    bin = '',\n    r1,\n    r2;\n  for(let i = 0; i < asc.length; i += 0) {\n    u24 = (b64tab[asc.charAt(i++)] << 18) | (b64tab[asc.charAt(i++)] << 12) | ((r1 = b64tab[asc.charAt(i++)]) << 6) | (r2 = b64tab[asc.charAt(i++)]);\n    bin +=\n      r1 === 64 ? String.fromCharCode((u24 >> 16) & 255) : r2 === 64 ? String.fromCharCode((u24 >> 16) & 255, (u24 >> 8) & 255) : String.fromCharCode((u24 >> 16) & 255, (u24 >> 8) & 255, u24 & 255);\n  }\n  return bin;\n}\nexport function assert(actual, expected, message) {\n  if(arguments.length == 1) expected = true;\n\n  if(actual === expected) return;\n\n  if(actual !== null && expected !== null && typeof actual == 'object' && typeof expected == 'object' && actual.toString() === expected.toString()) return;\n\n  throw Error('assertion failed: got |' + actual + '|' + ', expected |' + expected + '|' + (message ? ' (' + message + ')' : ''));\n}\n\nexport function escape(str, chars = []) {\n  const table = {\n    ['\\n']: 'n',\n    ['\\r']: 'r',\n    ['\\t']: 't',\n    ['\\v']: 'v',\n    ['\\b']: 'b'\n  };\n  for(let ch of chars) table[ch] = ch;\n  let s = '';\n  for(let ch of str) {\n    if(table[ch]) s += '\\\\' + (table[ch] ?? ch);\n    else s += ch;\n  }\n  return s;\n}\n\nexport function quote(str, q = '\"') {\n  return q + escape(str, [q]) + q;\n}\n\nexport function memoize(fn) {\n  let cache = {};\n  return (n, ...rest) => {\n    if(n in cache) return cache[n];\n    return (cache[n] = fn(n, ...rest));\n  };\n}\n\nexport function chain(first, ...fns) {\n  return fns.reduce(\n    (acc, fn) =>\n      function(...args) {\n        return fn.call(this, acc.call(this, ...args), args);\n      },\n    first\n  );\n}\n\nexport function chainRight(first, ...fns) {\n  return fns.reduce(\n    (acc, fn) =>\n      function(...args) {\n        return acc.call(this, fn.call(this, ...args), args);\n      },\n    first\n  );\n}\n\n  export function chainArray(tmp, ...fns) {\n  for(let fn of fns) {\n    let prev = tmp;\n    tmp = function(...args) {\n      return fn.call(this, ...prev.call(this, ...args));\n    };\n  }\n  return tmp;\n}\n\nexport function getset(target, ...args) {\n  let ret = [];\n  if(Array.isArray(target)) {\n    ret = target.slice(0, 2);\n  } else if(isFunction(target)) {\n    ret = [target, isFunction(args[0]) ? args[0] : target];\n  } else if(hasGetSet(target)) {\n    if(target.get === target.set) {\n      const GetSet = (...args) => target.set(...args);\n      ret = [GetSet, GetSet];\n    } else {\n      ret = [key => target.get(key), (key, value) => target.set(key, value)];\n      //console.log('getset', ret[1] + '', target.get === target.set);\n    }\n  } else if(Array.isArray(target)) {\n    ret = [\n      key => target.find(([k, v]) => key === k),\n      (key, value) => {\n        let i = target.findIndex(([k, v]) => k === key);\n        if(i != -1) {\n          if(value !== undefined) target[i][1] = value;\n          else delete target[i];\n        } else {\n          target.push([key, value]);\n        }\n      }\n    ];\n  } else if(isObject(target)) {\n    ret = [key => target[key], (key, value) => (target[key] = value)];\n  } else {\n    throw new TypeError(`getset unknown argument type '${typeof target}'`);\n  }\n  if(args.length) {\n    let [get, set] = ret;\n    ret = [() => get(...args), value => set(...args, value)];\n  }\n  return Object.setPrototypeOf(ret, getset.prototype);\n}\n\nObject.setPrototypeOf(\n  define(getset.prototype, {\n    bind(...args) {\n      return Object.setPrototypeOf(\n        this.map(fn => fn.bind(null, ...args)),\n        getset.prototype\n      );\n    },\n    transform(read, write) {\n      const [get, set] = this;\n      return Object.setPrototypeOf([key => read(get(key)), (key, value) => set(key, write(value))], getset.prototype);\n    },\n    function(...args) {\n      const [get, set] = this;\n      return args.length <= 1 ? get(...args) : set(...args);\n    },\n    get object() {\n      const [get, set] = this;\n      return { get, set };\n    }\n  }),\n  Array.prototype\n);\n\nexport function modifier(...args) {\n  let gs = gettersetter(...args);\n  return fn => {\n    let value = gs();\n    return fn(value, newValue => gs(newValue));\n  };\n}\n\nexport function getter(target, ...args) {\n  let ret;\n  if(Array.isArray(target)) {\n    ret = target[0];\n  } else if(isObject(target) && isFunction(target.get)) {\n    return () => target.get(...args);\n  } else if(isFunction(target)) {\n    ret = target;\n  } else if(hasGetSet(target)) {\n    ret = key => target.get(key);\n  } else if(isObject(target)) {\n    ret = key => target[key];\n  } else {\n    throw new TypeError(`getter unknown argument type '${typeof target}'`);\n  }\n  if(args.length) {\n    let get = ret;\n    ret = () => get(...args);\n  }\n  return ret;\n}\n\nexport function setter(target, ...args) {\n  let ret;\n  if(Array.isArray(target)) {\n    ret = target[1];\n  } else if(isObject(target) && isFunction(target.set)) {\n    return value => target.set(...args, value);\n  } else if(isFunction(target)) {\n    ret = target;\n  } else if(hasGetSet(target)) {\n    ret = (key, value) => target.set(key, value);\n  } else if(isObject(target)) {\n    ret = (key, value) => (target[key] = value);\n  } else {\n    throw new TypeError(`setter unknown argument type '${typeof target}'`);\n  }\n  if(args.length) {\n    let set = ret;\n    ret = value => set(...args, value);\n  }\n  return ret;\n}\n\nexport function gettersetter(target, ...args) {\n  let fn;\n\n  if(Array.isArray(target)) {\n    let [get, set] = target;\n    fn = (...args) => (args.length < 2 ? get(...args) : set(...args));\n  } else if(isObject(target) && isFunction(target.receiver)) {\n    return (...args2) => target.receiver(...args, ...args2);\n  } else if(isFunction(target)) {\n    if(isFunction(args[0]) && args[0] !== target) {\n      let setter = args.shift();\n      fn = (...args) => (args.length == 0 ? target() : setter(...args));\n    } else fn = target;\n  } else if(hasGetSet(target)) {\n    if(target.get === target.set) fn = (...args) => target.set(...args);\n    else fn = (...args) => (args.length < 2 ? target.get(...args) : target.set(...args));\n  } else if(isObject(target)) {\n    fn = (...args) => {\n      const [key, value] = args;\n      if(args.length == 1) return target[key];\n      target[key] = value;\n    };\n  } else {\n    throw new TypeError(`gettersetter unknown argument type '${typeof target}'`);\n  }\n  if(fn !== target) define(fn, { receiver: target });\n  if(args.length) return (...args2) => fn(...args, ...args2);\n  return fn;\n}\n\nexport function hasFn(target) {\n  if(isObject(target)) return isFunction(target.has) ? key => target.has(key) : key => key in target;\n}\n\nexport function remover(target) {\n  if(isObject(target)) return isFunction(target.delete) ? key => target.delete(key) : key => delete target[key];\n}\n\nexport function getOrCreate(target, create = () => ({}), set) {\n  const get = getter(target),\n    has = hasFn(target);\n  set ??= setter(target);\n  let value;\n  return key => (value = has.call(target, key) ? get.call(target, key) : ((value = create(key, target)), set.call(target, key, value), value));\n}\n\nexport function hasGetSet(obj) {\n  return isObject(obj) && ['get', 'set'].every(m => typeof obj[m] == 'function');\n}\n\nexport function mapObject(target) {\n  let obj;\n  if(hasGetSet(target.receiver)) return target.receiver;\n  if(hasGetSet(target)) obj = target;\n  else if(typeof target == 'function') obj = { get: target, set: target };\n  else if(isObject(target))\n    obj = {\n      set: (key, value) => (target[key] = value),\n      get: key => target[key]\n    };\n  if(obj !== target) define(obj, { receiver: target });\n  return obj;\n}\n\nexport function once(fn, thisArg, memoFn) {\n  let ret,\n    ran = false;\n\n  return function(...args) {\n    if(!ran) {\n      ran = true;\n      ret = fn.apply(thisArg || this, args);\n    } else if(typeof memoFn == 'function') {\n      ret = memoFn(ret);\n    }\n    return ret;\n  };\n}\n\nconst atexit_functions = [];\nconst atexit_install = once(callback => {\n  // attach user callback to the process event emitter\n  // if no callback, it will still exit gracefully on Ctrl-C\n  callback = callback || noOp;\n  process.on('cleanup', callback);\n\n  // do app specific cleaning before exiting\n  process.on('exit', function() {\n    process.emit('cleanup');\n  });\n\n  // catch ctrl+c event and exit normally\n  process.on('SIGINT', function() {\n    console.log('Ctrl-C...');\n    process.exit(2);\n  });\n\n  //catch uncaught exceptions, trace, then exit normally\n  process.on('uncaughtException', function(e) {\n    console.log('Uncaught Exception...');\n    console.log(e.stack);\n    process.exit(99);\n  });\n});\n\nexport function atexit(fn) {\n  atexit_functions.push(fn);\n\n  if(globalThis.process && 'on' in process) {\n    atexit_install(() => {\n      for(let fn of atexit_functions) fn();\n    });\n  }\n}\n\nexport function waitFor(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function define(obj, ...args) {\n  for(let props of args) {\n    let desc = Object.getOwnPropertyDescriptors(props);\n    for(let prop in desc) {\n      const { value } = desc[prop];\n      desc[prop].enumerable = false;\n      if(typeof value == 'function') desc[prop].writable = false;\n    }\n    Object.defineProperties(obj, desc);\n  }\n  return obj;\n}\n\nexport function defineGetter(obj, key, fn, enumerable = false) {\n  if(!obj.hasOwnProperty(key))\n    Object.defineProperty(obj, key, {\n      enumerable,\n      configurable: true,\n      get: fn\n    });\n  return obj;\n}\n\nexport function defineGetterSetter(obj, key, g, s, enumerable = false) {\n  if(!obj.hasOwnProperty(key))\n    Object.defineProperty(obj, key, {\n      get: g,\n      set: s,\n      enumerable\n    });\n  return obj;\n}\n\nexport function defineGettersSetters(obj, gettersSetters) {\n  for(let name in gettersSetters) defineGetterSetter(obj, name, gettersSetters[name], gettersSetters[name]);\n  return obj;\n}\n\n/*export function defineGettersSetters(obj, gettersSetters, enumerable = false) {\n  let props = {};\n  try {\n    for(let name in gettersSetters) props[name] = { get: gettersSetters[name], set: gettersSetters[name], enumerable };\n    return Object.defineProperties(obj, props);\n  } catch(e) {\n    for(let name in gettersSetters)\n      try {\n        defineGetterSetter(obj, name, gettersSetters[name], gettersSetters[name]);\n      } catch(e) {\n        console.log(`Failed setting property '${name}'`);\n      }\n    return obj;\n  }\n}*/\n\nexport function* prototypeIterator(obj, pred = (obj, depth) => true) {\n  let depth = 0;\n\n  while(obj) {\n    if(pred(obj, depth)) yield obj;\n    let tmp = Object.getPrototypeOf(obj);\n    if(tmp === obj) break;\n    obj = tmp;\n    ++depth;\n  }\n}\n\nexport function pick(obj, keys) {\n  const newObj = {};\n  for(let key of keys) newObj[key] = obj[key];\n  return newObj;\n}\n\nexport function omit(obj, keys) {\n  const newObj = Object.assign({}, obj);\n  for(let key of keys) delete newObj[key];\n  return newObj;\n}\n\nexport function keys(obj, start = 0, end = obj => obj === Object.prototype) {\n  let pred,\n    a = [],\n    depth = 0;\n\n  if(!isFunction(end)) {\n    let n = end;\n    pred = (obj, depth) => depth >= start && depth < n;\n    end = () => false;\n  } else {\n    pred = (obj, depth) => depth >= start;\n  }\n\n  for(let proto of prototypeIterator(obj, pred)) {\n    if(end(proto, depth++)) break;\n    a.push(...Object.getOwnPropertySymbols(proto).concat(Object.getOwnPropertyNames(proto)));\n  }\n\n  return [...new Set(a)];\n}\n\nexport function entries(obj, start = 0, end = obj => obj === Object.prototype) {\n  let a = [];\n  for(let key of keys(obj, start, end)) a.push([key, obj[key]]);\n  return a;\n}\n\nexport function values(obj, start = 0, end = obj => obj === Object.prototype) {\n  let a = [];\n  for(let key of keys(obj, start, end)) a.push(obj[key]);\n  return a;\n}\n\nexport function getMethodNames(obj, depth = 1, start = 0) {\n  let names = [];\n  for(let n of keys(obj, start, start + depth)) {\n    try {\n      if(isFunction(obj[n])) names.push(n);\n    } catch(e) {}\n  }\n  return names;\n}\n\nexport function getMethods(obj, depth = 1, start = 0) {\n  return pick(obj, getMethodNames(obj, depth, start));\n}\n\nexport function bindMethods(obj, methods, target) {\n  target ??= obj;\n  for(let name of getMethodNames(methods)) target[name] = methods[name].bind(obj);\n  return target;\n}\n\nexport function properties(obj, options = { enumerable: true }) {\n  let desc = {};\n  const { memoize: memo = false, ...opts } = options;\n  const mfn = memo ? fn => memoize(fn) : fn => fn;\n  for(let prop of keys(obj)) {\n    if(Array.isArray(obj[prop])) {\n      const [get, set] = obj[prop];\n      desc[prop] = { ...opts, get, set };\n    } else if(isFunction(obj[prop])) {\n      desc[prop] = { ...opts, get: mfn(obj[prop]) };\n    }\n  }\n  return Object.defineProperties({}, desc);\n}\n\nexport function weakAssign(obj, ...args) {\n  let desc = {};\n  for(let other of args) {\n    let otherDesc = Object.getOwnPropertyDescriptors(other);\n    for(let key in otherDesc) if(!(key in obj) && desc[key] === undefined && otherDesc[key] !== undefined) desc[key] = otherDesc[key];\n  }\n  return Object.defineProperties(obj, desc);\n}\n\nexport function getPrototypeChain(obj, limit = -1, start = 0) {\n  let i = -1,\n    ret = [];\n  do {\n    if(i >= start && (limit == -1 || i < start + limit)) ret.push(obj);\n    if(obj === Object.prototype || obj.constructor === Object) break;\n    ++i;\n  } while((obj = obj.__proto__ || Object.getPrototypeOf(obj)));\n  return ret;\n}\n\nexport function getConstructorChain(obj, ...range) {\n  let ret = [];\n  pushUnique(ret, obj.constructor);\n  for(let proto of getPrototypeChain(obj, ...range)) pushUnique(ret, proto.constructor);\n  return ret;\n}\n\nexport function hasPrototype(obj, proto) {\n  return getPrototypeChain(obj).indexOf(proto) != -1;\n}\n\nexport function filter(seq, pred, thisArg) {\n  if(isObject(pred) && pred instanceof RegExp) {\n    let re = pred;\n    pred = (el, i) => re.test(el);\n  }\n  if(types.isIterable(seq)) {\n    let r = [],\n      i = 0;\n    for(let el of seq) if(pred.call(thisArg, el, i++, seq)) r.push(el);\n    return r;\n  } else if(isObject(seq)) {\n    let r = {};\n    for(let key in seq) if(pred.call(thisArg, seq[key], key, seq)) r[key] = seq[key];\n    return r;\n  }\n}\n\nexport function filterKeys(r, needles, keep = true) {\n  let pred;\n  if(isFunction(needles)) {\n    pred = needles;\n  } else {\n    if(!Array.isArray(needles)) needles = [...needles];\n    pred = key => (needles.indexOf(key) != -1) === keep;\n  }\n  return Object.keys(r)\n    .filter(pred)\n    .reduce((obj, key) => {\n      obj[key] = r[key];\n      return obj;\n    }, {});\n}\n\nexport const curry = (f, arr = [], length = f.length) =>\n  function(...args) {\n    return (a => (a.length === length ? f.call(this, ...a) : curry(f.bind(this), a)))([...arr, ...args]);\n  };\n\nexport const clamp = curry((min, max, value) => Math.max(min, Math.min(max, value)));\n\nexport function* split(buf, ...points) {\n  points.sort();\n  const splitAt = (b, pos, len) => {\n    let r = pos < b.byteLength ? [slice(b, 0, pos), slice(b, pos)] : [null, b];\n    return r;\n  };\n  let prev,\n    len = 0;\n  for(let offset of points) {\n    let at = offset - len;\n    [prev, buf] = splitAt(buf, at, len);\n    if(prev) {\n      yield prev;\n      len = offset;\n    }\n  }\n  if(buf) yield buf;\n}\n\nexport const matchAll = curry(function* (re, str) {\n  let match;\n  re = re instanceof RegExp ? re : new RegExp(Array.isArray(re) ? '(' + re.join('|') + ')' : re, 'g');\n  do {\n    if((match = re.exec(str))) yield match;\n  } while(match != null);\n});\n\nexport function bindProperties(obj, target, props, gen) {\n  if(props instanceof Array) props = Object.fromEntries(props.map(name => [name, name]));\n  const [propMap, propNames] = Array.isArray(props) ? [props.reduce((acc, name) => ({ ...acc, [name]: name }), {}), props] : [props, Object.keys(props)];\n  gen ??= p => v => v === undefined ? target[propMap[p]] : (target[propMap[p]] = v);\n  const propGetSet = propNames\n    .map(k => [k, propMap[k]])\n    .reduce(\n      (a, [k, v]) => ({\n        ...a,\n        [k]: isFunction(v) ? (...args) => v.call(target, k, ...args) : (gen && gen(k)) || ((...args) => (args.length > 0 ? (target[k] = args[0]) : target[k]))\n      }),\n      {}\n    );\n  Object.defineProperties(\n    obj,\n    propNames.reduce(\n      (a, k) => {\n        const prop = props[k];\n        const get_set = propGetSet[k];\n        return {\n          ...a,\n          [k]: {\n            get: get_set,\n            set: get_set,\n            enumerable: true\n          }\n        };\n      },\n      {\n        __getter_setter__: { value: gen, enumerable: false },\n        __bound_target__: { value: target, enumerable: false }\n      }\n    )\n  );\n  return obj;\n}\n\nexport function immutableClass(orig, ...proto) {\n  let name = functionName(orig).replace(/Mutable/g, '');\n  let imName = 'Immutable' + name;\n  proto = proto || [];\n  let initialProto = proto.map(p =>\n    isArrow(p)\n      ? p\n      : ctor => {\n          for(let n in p) ctor.prototype[n] = p[n];\n        }\n  );\n  let body = `class ${imName} extends ${name} {\\n  constructor(...args) {\\n    super(...args);\\n    if(new.target === ${imName})\\n      return Object.freeze(this);\\n  }\\n};\\n\\n${imName}.prototype.constructor = ${imName};\\n\\nreturn ${imName};`;\n  for(let p of initialProto) p(orig);\n  let ctor;\n  let imm = base => {\n    let cls;\n    cls = class extends base {\n      constructor(...args) {\n        super(...args);\n        if(new.target === cls) return Object.freeze(this);\n      }\n    };\n    return cls;\n  };\n  ctor = imm(orig);\n  let species = ctor;\n  return ctor;\n}\n\n// time a given function\nexport function instrument(\n  fn,\n  log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').substring(0, 100) + '...'}}` : '') + ` timing: ${duration.toFixed(3)}ms`),\n  logInterval = 0 //1000\n) {\n  // const { now, hrtime, functionName } = Util;\n  let last = Date.now();\n  let duration = 0,\n    times = 0;\n  const name = functionName(fn) || '<anonymous>';\n  const asynchronous = isAsync(fn) || isAsync(now);\n  const doLog = asynchronous\n    ? async (args, ret) => {\n        let t = Date.now();\n        if(t - (await last) >= logInterval) {\n          log(duration / times, name, args, ret);\n          duration = times = 0;\n          last = t;\n        }\n      }\n    : (args, ret) => {\n        let t = Date.now();\n        //console.log('doLog', { passed: t - last, logInterval });\n        if(t - last >= logInterval) {\n          log(duration / times, name, args, ret);\n          duration = times = 0;\n          last = t;\n        }\n      };\n\n  return asynchronous\n    ? async function(...args) {\n        const start = Date.now();\n        let ret = await fn.apply(this, args);\n        duration += Date.now() - start;\n        times++;\n        await doLog(args, ret);\n        return ret;\n      }\n    : function(...args) {\n        const start = Date.now();\n        let ret = fn.apply(this, args);\n        duration += Date.now() - start;\n        times++;\n        doLog(args, ret);\n        return ret;\n      };\n}\n\nexport const hash = (newMap = () => new Map()) => {\n  let map = newMap();\n  let cache = memoize((...args) => gettersetter(newMap(...args)), new Map());\n\n  // let [get, set] = getset(cache);\n\n  return {\n    get(path) {\n      let i = 0,\n        obj = map;\n      for(let part of path) {\n        let cachefn = cache(obj) ?? getter(obj);\n        console.log('cache', { i, cache });\n        obj = cachefn(part);\n        console.log('cachefn', { i, cachefn });\n      }\n      return obj;\n    },\n    set(path, value) {\n      let i = 0,\n        obj = map;\n      let key = path.pop();\n\n      for(let part of path) {\n        console.log('cache', { part, obj });\n        let cachefn = cache(obj.receiver ?? obj);\n        console.log('cachefn', { i, cachefn });\n        obj = cachefn(part) ?? (cachefn(part, gettersetter(newMap())), cachefn(part));\n        console.log('cachefn', { obj });\n      }\n      return obj(key, value);\n    }\n  };\n};\n\nexport const catchable = function Catchable(self) {\n  assert(isFunction(self));\n\n  if(!(self instanceof catchable)) Object.setPrototypeOf(self, catchable.prototype);\n  if('constructor' in self) self.constructor = catchable;\n\n  return self;\n};\n\nObject.assign(catchable, {\n  [Symbol.species]: catchable,\n  prototype: Object.assign(function () {}, {\n    then(fn) {\n      return this.constructor[Symbol.species]((...args) => {\n        let result;\n        try {\n          result = this(...args);\n        } catch(e) {\n          throw e;\n          return;\n        }\n        return fn(result);\n      });\n    },\n    catch(fn) {\n      return this.constructor[Symbol.species]((...args) => {\n        let result;\n        try {\n          result = this(...args);\n        } catch(e) {\n          return fn(e);\n        }\n        return result;\n      });\n    }\n  })\n});\n\nexport function isNumeric(value) {\n  for(let f of [v => +v, parseInt, parseFloat]) if(!isNaN(f(value))) return true;\n  return false;\n}\n\nexport function isIndex(value) {\n  return !isNaN(+value) && Math.floor(+value) + '' == value + '';\n}\n\nexport function numericIndex(value) {\n  return isIndex(value) ? +value : value;\n}\n\nexport function histogram(arr, out = new Map()) {\n  let [get, set] = getset(out);\n\n  const incr = key => set(key, (get(key) ?? 0) + 1);\n  for(let item of arr) {\n    incr(item);\n  }\n  return out;\n}\n\nexport function propertyLookupHandlers(getter = key => null, setter) {\n  let handlers = {\n    get(target, key, receiver) {\n      return getter(key);\n    }\n  };\n  let tmp = getter();\n\n  if(setter)\n    handlers.set = function(target, key, value) {\n      setter(key, value);\n      return true;\n    };\n\n  if(!isString(tmp))\n    try {\n      let a = Array.isArray(tmp) ? tmp : [...tmp];\n      if(a)\n        handlers.ownKeys = function(target) {\n          return getter();\n        };\n    } catch(e) {}\n\n  return handlers;\n}\n\nexport function propertyLookup(...args) {\n  let [obj = {}, getter, setter] = isFunction(args[0]) ? [{}, ...args] : args;\n\n  return new Proxy(obj, propertyLookupHandlers(getter, setter));\n}\n\nexport function abbreviate(str, max = 40, suffix = '...') {\n  max = +max;\n  if(isNaN(max)) max = Infinity;\n  if(Array.isArray(str)) {\n    return Array.prototype.slice.call(str, 0, Math.min(str.length, max)).concat([suffix]);\n  }\n  if(!isString(str) || !Number.isFinite(max) || max < 0) return str;\n  str = '' + str;\n  if(str.length > max) {\n    return str.substring(0, max - suffix.length) + suffix;\n  }\n  return str;\n}\n\nexport function tryFunction(fn, resolve = a => a, reject = () => null) {\n  if(!isFunction(resolve)) {\n    let rval = resolve;\n    resolve = () => rval;\n  }\n  if(!isFunction(reject)) {\n    let cval = reject;\n    reject = () => cval;\n  }\n  return isAsync(fn)\n    ? async function(...args) {\n        let ret;\n        try {\n          ret = await fn(...args);\n        } catch(err) {\n          return reject(err, ...args);\n        }\n        return resolve(ret, ...args);\n      }\n    : function(...args) {\n        let ret;\n        try {\n          ret = fn(...args);\n        } catch(err) {\n          return reject(err, ...args);\n        }\n        return resolve(ret, ...args);\n      };\n}\n\nexport function tryCatch(fn, resolve = a => a, reject = () => null, ...args) {\n  if(isAsync(fn))\n    return fn(...args)\n      .then(resolve)\n      .catch(reject);\n\n  return tryFunction(fn, resolve, reject)(...args);\n}\n\nexport function mapAdapter(fn) {\n  let r = {\n    get(key) {\n      return fn(key);\n    },\n    set(key, value) {\n      fn(key, value);\n      return this;\n    }\n  };\n  let tmp = fn();\n  if(types.isIterable(tmp) || types.isPromise(tmp)) r.keys = () => fn();\n\n  if(fn[Symbol.iterator]) r.entries = fn[Symbol.iterator];\n  else {\n    let g = fn();\n    if(types.isIterable(g) || types.isGeneratorFunction(g)) r.entries = () => fn();\n  }\n\n  return mapFunction(r);\n}\n\n/**\n * @param Array   forward\n * @param Array   backward\n *\n * component2path,  path2eagle  => component2eagle\n *  eagle2path, path2component =>\n */\nexport function mapFunction(map) {\n  let fn;\n  fn = function(...args) {\n    const [key, value] = args;\n    switch (args.length) {\n      case 0:\n        return fn.keys();\n      case 1:\n        return fn.get(key);\n      case 2:\n        return fn.set(key, value);\n    }\n  };\n\n  fn.map = (m => {\n    while(isFunction(m) && m.map !== undefined) m = m.map;\n    return m;\n  })(map);\n\n  if(map instanceof Map || (isObject(map) && isFunction(map.get) && isFunction(map.set))) {\n    fn.set = (key, value) => (map.set(key, value), (k, v) => fn(k, v));\n    fn.get = key => map.get(key);\n  } else if(map instanceof Cache || (isObject(map) && isFunction(map.match) && isFunction(map.put))) {\n    fn.set = (key, value) => (map.put(key, value), (k, v) => fn(k, v));\n    fn.get = key => map.match(key);\n  } else if(isObject(map) && isFunction(map.getItem) && isFunction(map.setItem)) {\n    fn.set = (key, value) => (map.setItem(key, value), (k, v) => fn(k, v));\n    fn.get = key => map.getItem(key);\n  } else {\n    fn.set = (key, value) => ((map[key] = value), (k, v) => fn(k, v));\n    fn.get = key => map[key];\n  }\n\n  fn.update = function(key, fn = (k, v) => v) {\n    let oldValue = this.get(key);\n    let newValue = fn(oldValue, key);\n    if(oldValue != newValue) {\n      if(newValue === undefined && isFunction(map.delete)) map.delete(key);\n      else this.set(key, newValue);\n    }\n    return newValue;\n  };\n\n  if(isFunction(map.entries)) {\n    fn.entries = function* () {\n      for(let [key, value] of map.entries()) yield [key, value];\n    };\n    fn.values = function* () {\n      for(let [key, value] of map.entries()) yield value;\n    };\n    fn.keys = function* () {\n      for(let [key, value] of map.entries()) yield key;\n    };\n    fn[Symbol.iterator] = fn.entries;\n    fn[inspectSymbol] = function() {\n      return new Map(this.map(([key, value]) => [Array.isArray(key) ? key.join('.') : key, value]));\n    };\n  } else if(isFunction(map.keys)) {\n    if(isAsync(map.keys) || types.isPromise(map.keys())) {\n      fn.keys = async () => [...(await map.keys())];\n\n      fn.entries = async () => {\n        let r = [];\n        for(let key of await fn.keys()) r.push([key, await fn.get(key)]);\n        return r;\n      };\n      fn.values = async () => {\n        let r = [];\n        for(let key of await fn.keys()) r.push(await fn.get(key));\n        return r;\n      };\n    } else {\n      fn.keys = function* () {\n        for(let key of map.keys()) yield key;\n      };\n\n      fn.entries = function* () {\n        for(let key of fn.keys()) yield [key, fn(key)];\n      };\n      fn.values = function* () {\n        for(let key of fn.keys()) yield fn(key);\n      };\n    }\n  }\n\n  if(isFunction(fn.entries)) {\n    fn.filter = function(pred) {\n      return mapFunction(\n        new Map(\n          (function* () {\n            let i = 0;\n            for(let [key, value] of fn.entries()) if(pred([key, value], i++)) yield [key, value];\n          })()\n        )\n      );\n    };\n    fn.map = function(t) {\n      return mapFunction(\n        new Map(\n          (function* () {\n            let i = 0;\n\n            for(let [key, value] of fn.entries()) yield t([key, value], i++);\n          })()\n        )\n      );\n    };\n    fn.forEach = function(fn) {\n      let i = 0;\n\n      for(let [key, value] of this.entries()) fn([key, value], i++);\n    };\n  }\n  if(isFunction(map.delete)) fn.delete = key => map.delete(key);\n\n  if(isFunction(map.has)) fn.has = key => map.has(key);\n  return fn;\n}\n\nexport function mapWrapper(map, toKey = key => key, fromKey = key => key) {\n  let fn = mapFunction(map);\n  fn.set = (key, value) => (map.set(toKey(key), value), (k, v) => fn(k, v));\n  fn.get = key => map.get(toKey(key));\n  if(isFunction(map.keys)) fn.keys = () => [...map.keys()].map(fromKey);\n  if(isFunction(map.entries))\n    fn.entries = function* () {\n      for(let [key, value] of map.entries()) yield [fromKey(key), value];\n    };\n  if(isFunction(map.values))\n    fn.values = function* () {\n      for(let value of map.values()) yield value;\n    };\n  if(isFunction(map.has)) fn.has = key => map.has(toKey(key));\n  if(isFunction(map.delete)) fn.delete = key => map.delete(toKey(key));\n\n  fn.map = (m => {\n    while(isFunction(m) && m.map !== undefined) m = m.map;\n    return m;\n  })(map);\n\n  return fn;\n}\n\nexport function weakMapper(createFn, map = new WeakMap(), hitFn) {\n  let self = function(obj, ...args) {\n    let ret;\n    if(map.has(obj)) {\n      ret = map.get(obj);\n      if(isFunction(hitFn)) hitFn(obj, ret);\n    } else {\n      ret = createFn(obj, ...args);\n      map.set(obj, ret);\n    }\n    return ret;\n  };\n  self.set = (k, v) => map.set(k, v);\n  self.get = k => map.get(k);\n  self.map = map;\n  return self;\n}\n\nexport function wrapGenerator(fn) {\n  return types.isGeneratorFunction(fn)\n    ? function(...args) {\n        return [...fn.call(this, ...args)];\n      }\n    : fn;\n}\n\nexport function wrapGeneratorMethods(obj) {\n  for(let name of keys(obj, 1, 0)) if(isFunction(obj[name])) obj[name] = wrapGenerator(obj[name]);\n\n  return obj;\n}\n\nexport const unique = (arr, cmp) => arr.filter(typeof cmp == 'function' ? (el, i, arr) => arr.findIndex(item => cmp(el, item)) == i : (el, i, arr) => arr.indexOf(el) == i);\n\nexport const getFunctionArguments = fn =>\n  (fn + '')\n    .replace(/\\n.*/g, '')\n    .replace(/(=>|{|\\n).*/g, '')\n    .replace(/^function\\s*/, '')\n    .replace(/^\\((.*)\\)\\s*$/g, '$1')\n    .split(/,\\s*/g);\n\nconst ANSI_BACKGROUND_OFFSET = 10;\n\nconst wrapAnsi16 =\n  (offset = 0) =>\n  code =>\n    `\\x1b[${code + offset}m`;\n\nconst wrapAnsi256 =\n  (offset = 0) =>\n  code =>\n    `\\x1b[${38 + offset};5;${code}m`;\n\nconst wrapAnsi16m =\n  (offset = 0) =>\n  (red, green, blue) =>\n    `\\x1b[${38 + offset};2;${red};${green};${blue}m`;\n\nfunction getAnsiStyles() {\n  const codes = new Map();\n  const styles = {\n    modifier: {\n      reset: [0, 0],\n      // 21 isn't widely supported and 22 does the same thing\n      bold: [1, 22],\n      dim: [2, 22],\n      italic: [3, 23],\n      underline: [4, 24],\n      overline: [53, 55],\n      inverse: [7, 27],\n      hidden: [8, 28],\n      strikethrough: [9, 29]\n    },\n    color: {\n      black: [30, 39],\n      red: [31, 39],\n      green: [32, 39],\n      yellow: [33, 39],\n      blue: [34, 39],\n      magenta: [35, 39],\n      cyan: [36, 39],\n      white: [37, 39],\n\n      // Bright color\n      blackBright: [90, 39],\n      redBright: [91, 39],\n      greenBright: [92, 39],\n      yellowBright: [93, 39],\n      blueBright: [94, 39],\n      magentaBright: [95, 39],\n      cyanBright: [96, 39],\n      whiteBright: [97, 39]\n    },\n    bgColor: {\n      bgBlack: [40, 49],\n      bgRed: [41, 49],\n      bgGreen: [42, 49],\n      bgYellow: [43, 49],\n      bgBlue: [44, 49],\n      bgMagenta: [45, 49],\n      bgCyan: [46, 49],\n      bgWhite: [47, 49],\n\n      // Bright color\n      bgBlackBright: [100, 49],\n      bgRedBright: [101, 49],\n      bgGreenBright: [102, 49],\n      bgYellowBright: [103, 49],\n      bgBlueBright: [104, 49],\n      bgMagentaBright: [105, 49],\n      bgCyanBright: [106, 49],\n      bgWhiteBright: [107, 49]\n    }\n  };\n\n  // Alias bright black as gray (and grey)\n  styles.color.gray = styles.color.blackBright;\n  styles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n  styles.color.grey = styles.color.blackBright;\n  styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n\n  for(const [groupName, group] of Object.entries(styles)) {\n    for(const [styleName, style] of Object.entries(group)) {\n      styles[styleName] = {\n        open: `\\u001B[${style[0]}m`,\n        close: `\\u001B[${style[1]}m`\n      };\n\n      group[styleName] = styles[styleName];\n\n      codes.set(style[0], style[1]);\n    }\n\n    Object.defineProperty(styles, groupName, {\n      value: group,\n      enumerable: false\n    });\n  }\n\n  Object.defineProperty(styles, 'codes', {\n    value: codes,\n    enumerable: false\n  });\n\n  styles.color.close = '\\u001B[39m';\n  styles.bgColor.close = '\\u001B[49m';\n\n  styles.color.ansi = wrapAnsi16();\n  styles.color.ansi256 = wrapAnsi256();\n  styles.color.ansi16m = wrapAnsi16m();\n  styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);\n  styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n  styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n\n  // From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n  Object.defineProperties(styles, {\n    rgbToAnsi256: {\n      value: (red, green, blue) => {\n        // We use the extended greyscale palette here, with the exception of\n        // black and white. normal palette only has 4 greyscale shades.\n        if(red === green && green === blue) {\n          if(red < 8) {\n            return 16;\n          }\n\n          if(red > 248) {\n            return 231;\n          }\n\n          return Math.round(((red - 8) / 247) * 24) + 232;\n        }\n        const c = [red, green, blue].map(c => (c / 255) * 5);\n        return 16 + 36 * c[0] + 6 * c[1] + c[2];\n      },\n      enumerable: false\n    },\n    hexToRgb: {\n      value: hex => {\n        const matches = /(?<colorString>[a-f\\d]{6}|[a-f\\d]{3})/i.exec(hex.toString(16));\n        if(!matches) {\n          return [0, 0, 0];\n        }\n\n        let { colorString } = matches.groups;\n\n        if(colorString.length === 3) {\n          colorString = colorString\n            .split('')\n            .map(character => character + character)\n            .join('');\n        }\n\n        const integer = Number.parseInt(colorString, 16);\n\n        return [(integer >> 16) & 0xff, (integer >> 8) & 0xff, integer & 0xff];\n      },\n      enumerable: false\n    },\n    hexToAnsi256: {\n      value: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n      enumerable: false\n    },\n    ansi256ToAnsi: {\n      value: code => {\n        if(code < 8) {\n          return 30 + code;\n        }\n\n        if(code < 16) {\n          return 90 + (code - 8);\n        }\n\n        let red;\n        let green;\n        let blue;\n\n        if(code >= 232) {\n          red = ((code - 232) * 10 + 8) / 255;\n          green = red;\n          blue = red;\n        } else {\n          code -= 16;\n\n          const remainder = code % 36;\n\n          red = Math.floor(code / 36) * 0.2;\n          green = Math.floor(remainder / 6) * 0.2;\n          blue = (remainder % 6) * 0.2;\n        }\n\n        const value = Math.max(red, green, blue) * 2;\n\n        if(value === 0) {\n          return 30;\n        }\n\n        let result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));\n\n        if(value === 2) {\n          result += 60;\n        }\n\n        return result;\n      },\n      enumerable: false\n    },\n    rgbToAnsi: {\n      value: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),\n      enumerable: false\n    },\n    hexToAnsi: {\n      value: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),\n      enumerable: false\n    }\n  });\n\n  return styles;\n}\n\nexport function stripAnsi(str) {\n  return (str + '').replace(new RegExp('\\x1b[[(?);]{0,2}(;?[0-9])*.', 'g'), '');\n}\n\nexport function padAnsi(str, n, s = ' ') {\n  let { length } = stripAnsi(str);\n  let pad = '';\n  for(let i = length; i < n; i++) pad += s;\n  return pad;\n}\n\nexport function padStartAnsi(str, n, s = ' ') {\n  return padAnsi(str, n, s) + str;\n}\n\nexport function padEndAnsi(str, n, s = ' ') {\n  return str + padAnsi(str, n, s);\n}\n\nexport function randInt(...args) {\n  let range = args.splice(0, 2);\n  let rng = args.shift() ?? Math.random;\n  if(range.length < 2) range.unshift(0);\n  return Math.round(rand(range[1] - range[0] + 1) + range[0]);\n}\n\nexport function randFloat(min, max, rng = Math.random) {\n  return rng() * (max - min) + min;\n}\n\nexport function randStr(n, set, rng = Math.random) {\n  let o = '';\n  set ??= '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  while(--n >= 0) o += set[Math.round(rng() * (set.length - 1))];\n  return o;\n}\n\nexport function toBigInt(arg) {\n  if(types.isArrayBuffer(arg)) {\n    const bits = misc.bits(arg).join('');\n    return eval(`0b${bits}n`);\n  }\n  return BigInt(arg);\n}\n\nexport function roundDigits(precision) {\n  if(typeof precision == 'number') return -Math.log10(precision);\n\n  precision = precision + '';\n  let index = precision.indexOf('.');\n  let frac = index == -1 ? '' : precision.slice(index + 1);\n  return frac.length;\n\n  return -clamp(-Infinity, 0, Math.floor(Math.log10(precision - Number.EPSILON)));\n}\n\nexport function roundTo(value, prec, digits, type = 'round') {\n  if(!Number.isFinite(value)) return value;\n  const fn = Math[type];\n  if(prec == 1) return fn(value);\n  if(prec < 1 && prec > 0 && !isNumber(digits)) digits = -Math.log10(prec);\n  let ret = prec >= Number.EPSILON ? fn(value / prec) * prec : value;\n  if(isNumber(digits) && digits >= 1 && digits <= 100) ret = +ret.toFixed(digits);\n  return ret;\n}\n\nexport function lazyProperty(obj, name, getter, opts = {}) {\n  return Object.defineProperty(obj, name, {\n    get: types.isAsyncFunction(getter)\n      ? async function() {\n          return replaceProperty(await getter.call(this ?? obj, name));\n        }\n      : function() {\n          const value = getter.call(this ?? obj, name);\n          if(types.isPromise(value)) {\n            value.then(v => {\n              replaceProperty(v);\n              console.log(`util.lazyProperty resolved `, obj[name]);\n              return v;\n            });\n            return value;\n          }\n          return replaceProperty(value);\n        },\n    configurable: true,\n    ...opts\n  });\n\n  function replaceProperty(value) {\n    delete obj[name];\n    Object.defineProperty(obj, name, { value, ...opts });\n    return value;\n  }\n}\n\nexport function lazyProperties(obj, gettersObj, opts = {}) {\n  opts = { enumerable: false, ...opts };\n  for(let prop of Object.getOwnPropertyNames(gettersObj)) lazyProperty(obj, prop, gettersObj[prop], opts);\n  return obj;\n}\n\nexport function getOpt(options = {}, args) {\n  let short, long;\n  let result = {};\n  let positional = (result['@'] = []);\n  if(!(options instanceof Array)) options = Object.entries(options);\n  const findOpt = arg => options.find(([optname, option]) => (Array.isArray(option) ? option.indexOf(arg) != -1 : false) || arg == optname);\n  let [, params] = options.find(opt => opt[0] == '@') || [];\n  if(typeof params == 'string') params = params.split(',');\n  for(let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    let opt;\n    if(arg[0] == '-') {\n      let name, value, start, end;\n      if(arg[1] == '-') long = true;\n      else short = true;\n      start = short ? 1 : 2;\n      if(short) end = 2;\n      else if((end = arg.indexOf('=')) == -1) end = arg.length;\n      name = arg.substring(start, end);\n      if((opt = findOpt(name))) {\n        const [has_arg, handler] = opt[1];\n        if(has_arg) {\n          if(arg.length > end) value = arg.substring(end + (arg[end] == '='));\n          else value = args[++i];\n        } else {\n          value = true;\n        }\n        try {\n          value = handler(value, result[opt[0]], options, result);\n        } catch(e) {}\n        result[opt[0]] = value;\n        continue;\n      }\n    }\n    if(params.length) {\n      const param = params.shift();\n      if((opt = findOpt(param))) {\n        const [, [, handler]] = opt;\n        let value = arg;\n        if(typeof handler == 'function') {\n          try {\n            value = handler(value, result[opt[0]], options, result);\n          } catch(e) {}\n        }\n        const name = opt[0];\n        result[opt[0]] = value;\n        continue;\n      }\n    }\n    result['@'] = [...(result['@'] ?? []), arg];\n  }\n  return result;\n}\n\nexport function isoDate(d) {\n  if(typeof d == 'number') d = new Date(d);\n  const tz = d.getTimezoneOffset();\n  const ms = d.valueOf() - tz * 60 * 1000;\n  d = new Date(ms);\n  return d.toISOString().replace(/T.*/, '');\n}\n\nexport function toUnixTime(dateObj, utc = false) {\n  if(!(dateObj instanceof Date)) dateObj = new Date(dateObj);\n  let epoch = Math.floor(dateObj.getTime() / 1000);\n  if(utc) epoch += dateObj.getTimezoneOffset() * 60;\n  return epoch;\n}\n\nexport function unixTime(utc = false) {\n  return toUnixTime(new Date(), utc);\n}\n\nexport function fromUnixTime(epoch, utc = false) {\n  let t = parseInt(epoch);\n  let d = new Date(0);\n  utc ? d.setUTCSeconds(t) : d.setSeconds(t);\n  return d;\n}\n\nexport function range(...args) {\n  let [start, end, step = 1] = args.length == 1 ? [0, args[0] - 1] : args;\n  let ret;\n  start /= step;\n  end /= step;\n  if(start > end) {\n    ret = [];\n    while(start >= end) ret.push(start--);\n  } else {\n    ret = Array.from({ length: end - start + 1 }, (v, k) => k + start);\n  }\n  if(step != 1) {\n    ret = ret.map(n => n * step);\n  }\n  return ret;\n}\n\nexport function repeater(n, what) {\n  if(typeof what == 'function')\n    return (function* () {\n      for(let i = 0; i < n; i++) yield what();\n    })();\n  return (function* () {\n    for(let i = 0; i < n; i++) yield what;\n  })();\n}\n\nexport function repeat(n, what) {\n  return [...repeater(n, what)];\n}\n\nexport function chunkArray(arr, size) {\n  const fn = (a, v, i) => {\n    const j = i % size;\n    if(j == 0) a.push([]);\n    a[a.length - 1].push(v);\n    return a;\n  };\n\n  return arr.reduce(fn, []);\n}\n\nexport function ucfirst(str) {\n  if(typeof str != 'string') str = str + '';\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\n\nexport function lcfirst(str) {\n  if(typeof str != 'string') str = str + '';\n  return str.substring(0, 1).toLowerCase() + str.substring(1);\n}\n\nexport function camelize(str, delim = '') {\n  return str.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2, offset) => {\n    if(p2) return delim + p2.toUpperCase();\n    return p1.toLowerCase();\n  });\n}\n\nexport function decamelize(str, delim = '-') {\n  return /.[A-Z]/.test(str)\n    ? str\n        .replace(/([a-z\\d])([A-Z])/g, '$1' + delim + '$2')\n        .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + delim + '$2')\n        .toLowerCase()\n    : str;\n}\n\nexport function shorten(str, max = 40, suffix = '...') {\n  max = +max;\n  if(isNaN(max)) max = Infinity;\n  if(Array.isArray(str)) return Array.prototype.slice.call(str, 0, Math.min(str.length, max)).concat([suffix]);\n  if(typeof str != 'string' || !Number.isFinite(max) || max < 0) return str;\n  str = '' + str;\n\n  if(str.length > max) {\n    let n = Math.floor((max - (2 + suffix.length)) / 2);\n    let tail = str.length - n;\n    let len = Math.min(n, tail);\n    let insert = ' ' + suffix + ' ' + (str.length - (len + n)) + ' bytes ' + suffix + ' ';\n\n    return str.substring(0, len) + insert + str.substring(tail);\n  }\n  return str;\n}\n\nexport function arraysInCommon(a) {\n  let i,\n    c,\n    n = a.length,\n    min = Infinity;\n  while(n) {\n    if(a[--n].length < min) {\n      min = a[n].length;\n      i = n;\n    }\n  }\n  c = Array.from(a.splice(i, 1)[0]);\n  return c.filter((itm, indx) => {\n    if(c.indexOf(itm) == indx) return a.every(arr => arr.indexOf(itm) != -1);\n  });\n}\n\nexport function arrayFacade(proto, itemFn = (container, i) => container.at(i)) {\n  return define(proto, {\n    *[Symbol.iterator]() {\n      const { length } = this;\n      for(let i = 0; i < length; i++) yield itemFn(this, i);\n    },\n    *keys() {\n      const { length } = this;\n      for(let i = 0; i < length; i++) yield i;\n    },\n    *entries() {\n      const { length } = this;\n      for(let i = 0; i < length; i++) yield [i, itemFn(this, i)];\n    },\n    *values() {\n      const { length } = this;\n      for(let i = 0; i < length; i++) yield itemFn(this, i);\n    },\n    forEach(callback, thisArg) {\n      const { length } = this;\n      for(let i = 0; i < length; i++) callback.call(thisArg, itemFn(this, i), i, this);\n    },\n    reduce(callback, accu, thisArg) {\n      const { length } = this;\n      for(let i = 0; i < length; i++) accu = callback.call(thisArg, accu, itemFn(this, i), i, this);\n      return accu;\n    }\n  });\n}\n\nexport function mod(a, b) {\n  return typeof b == 'number' ? ((a % b) + b) % b : n => ((n % a) + a) % a;\n}\n\nexport function pushUnique(arr, ...args) {\n  let reject = [];\n  for(let arg of args)\n    if(arr.indexOf(arg) == -1) arr.push(arg);\n    else reject.push(arg);\n  return reject;\n}\n\nexport function inserter(dest, next = (k, v) => {}) {\n  const insert = isFunction(dest.set) && dest.set.length >= 2 ? (k, v) => dest.set(k, v) : Array.isArray(dest) ? (k, v) => dest.push([k, v]) : (k, v) => (dest[k] = v);\n  let fn;\n  fn = function(key, value) {\n    insert(key, value);\n    next(key, value);\n    return fn;\n  };\n  fn.dest = dest;\n  fn.insert = insert;\n  return fn;\n}\n\nexport function intersect(a, b) {\n  if(!Array.isArray(a)) a = [...a];\n  return a.filter(Set.prototype.has, new Set(b));\n}\n\nexport function symmetricDifference(a, b) {\n  return [].concat(...difference(a, b));\n}\n\nexport function* partitionArray(a, size) {\n  for(let i = 0; i < a.length; i += size) yield a.slice(i, i + size);\n}\n\nexport function difference(a, b, includes) {\n  if(!Array.isArray(a)) a = [...a];\n  if(!Array.isArray(b)) b = [...b];\n\n  if(typeof includes != 'function') return [a.filter(x => !b.includes(x)), b.filter(x => !a.includes(x))];\n\n  return [a.filter(x => !includes(b, x)), b.filter(x => !includes(a, x))];\n}\n\nexport function intersection(a, b) {\n  if(!(a instanceof Set)) a = new Set(a);\n  if(!(b instanceof Set)) b = new Set(b);\n  let intersection = new Set([...a].filter(x => b.has(x)));\n  return Array.from(intersection);\n}\n\nexport function union(a, b, equality) {\n  if(equality === undefined) return [...new Set([...a, ...b])];\n\n  return unique([...a, ...b], equality);\n}\n\n/**\n * accepts array and function returning `true` or `false` for each element\n *\n * @param  {[type]}   array    [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nexport function partition(array, callback) {\n  const matches = [],\n    nonMatches = [];\n\n  // push each element into array depending on return value of `callback`\n  for(let element of array) (callback(element) ? matches : nonMatches).push(element);\n\n  return [matches, nonMatches];\n}\n\nexport function Location(line, column, pos, file, freeze = true) {\n  let obj = this || new.target.test || this ? this : {};\n\n  /*console.log(\"obj.constructor:\",obj.constructor);\n  //console.log(\"freeze:\",freeze);*/\n  Object.assign(obj, {\n    line,\n    column,\n    pos,\n    file\n  });\n  if(this !== obj) Object.setPrototypeOf(obj, Location.prototype);\n\n  return freeze && obj.constructor === Location ? Object.freeze(obj) : obj;\n}\n\nexport function format(...args) {\n  return formatWithOptionsInternal({ hideKeys: ['constructor'] }, args);\n}\n\nexport function formatWithOptions(opts, ...args) {\n  if(!isObject(opts)) throw new TypeError(`options argument is not an object`);\n  return formatWithOptionsInternal(opts, args);\n}\n\nfunction formatWithOptionsInternal(o, v) {\n  const x = v[0];\n  let a = 0;\n  let s = '';\n  let j = '';\n  if(typeof x === 'string') {\n    if(v.length === 1) return x;\n    let t;\n    let p = 0;\n    for(let i = 0; i < x.length - 1; i++) {\n      if(x[i] == '%') {\n        let f = '';\n        while('sjxdOoifc%'.indexOf(x[i + 1]) == -1) {\n          f += x[i + 1];\n          ++i;\n        }\n        if(p < i) s += slice(x, p, i);\n        p = i + 1;\n\n        const c = String.prototype.charCodeAt.call(x, ++i);\n        if(a + 1 !== v.length) {\n          switch (c) {\n            case 115: // %s\n              const y = v[++a];\n              if(typeof y === 'number') t = formatNumber(y);\n              else if(typeof y === 'bigint') t = `${y}n`;\n              else if(typeof y !== 'object' || y === null || !hasBuiltIn(y, 'toString')) t = String(y);\n              else t = inspect(y, { ...o, compact: 3, colors: false, depth: 0 });\n              break;\n            case 106: // %j\n              t = stringify(v[++a]);\n              break;\n            case 120: // %x\n            case 100: // %d\n              const n = v[++a];\n              if(typeof n === 'bigint') t = `${n}n`;\n              else if(typeof n === 'symbol') t = 'NaN';\n              else t = formatNumber(c == 120 ? Number(n).toString(16) : Number(n));\n              break;\n            case 79: // %O\n              t = inspect(v[++a], o);\n              break;\n            case 111: // %o\n              t = /*v[++a]+'' ?? */ inspect(v[++a], {\n                ...o,\n                showHidden: true,\n                showProxy: true,\n                depth: 1,\n                protoChain: false\n              });\n              break;\n            case 105: // %i\n              const k = v[++a];\n              if(typeof k === 'bigint') t = `${k}`;\n              else if(typeof k === 'symbol') t = 'NaN';\n              else t = formatNumber(parseInt(k));\n              break;\n            case 102: // %f\n              const d = v[++a];\n              if(typeof d === 'symbol') t = 'NaN';\n              else t = formatNumber(parseFloat(d));\n              break;\n            case 99: // %c\n              a += 1;\n              t = '';\n              break;\n            case 37: // %%\n              s += slice(x, p, i);\n              p = i + 1;\n              continue;\n            default:\n              continue;\n          }\n          if(p !== i - 1) s += slice(x, p, i - 1);\n          let pad = parseInt(f);\n          if(Math.abs(pad) > 0) t = t['pad' + (pad < 0 ? 'End' : 'Start')](Math.abs(pad), /^-?0/.test(f) ? '0' : ' ');\n          s += t;\n          p = i + 1;\n        } else if(c === 37) {\n          s += slice(x, p, i);\n          p = i + 1;\n        }\n      }\n    }\n    if(p !== 0) {\n      a++;\n      j = ' ';\n      if(p < x.length) s += slice(x, p);\n    }\n  }\n  while(a < v.length) {\n    const y = v[a];\n    s += j;\n    s += typeof y !== 'string' ? inspect(y, o) : y;\n    j = ' ';\n    a++;\n  }\n  return s;\n}\n\nexport function functionName(fn) {\n  if(typeof fn == 'function' && typeof fn.name == 'string') return fn.name;\n  try {\n    const matches = /function\\s*([^(]*)\\(.*/g.exec(fn + '');\n    if(matches && matches[1]) return matches[1];\n  } catch {}\n  return null;\n}\n\nexport function className(obj) {\n  if(isObject(obj)) {\n    if('constructor' in obj) return functionName(obj.constructor);\n    if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n  }\n  return null;\n}\n\nexport const isArrowFunction = fn => (isFunction(fn) && !('prototype' in fn)) || /\\ =>\\ /.test(('' + fn).replace(/\\n.*/g, ''));\n\nexport function predicate(fn_or_regex, pred) {\n  let fn = fn_or_regex;\n  if(typeof fn_or_regex == 'string') fn_or_regex = new RegExp('^' + fn_or_regex + '$');\n  if(isObject(fn_or_regex) && fn_or_regex instanceof RegExp) {\n    fn = arg => fn_or_regex.test(arg + '');\n    fn.valueOf = function() {\n      return fn_or_regex;\n    };\n  }\n  if(isFunction(pred)) return arg => pred(arg, fn);\n  return fn;\n}\n\nexport const isArray = a => Array.isArray(a);\n\nexport class ArrayFacade {\n  *[Symbol.iterator]() {\n    const { length } = this;\n    for(let i = 0; i < length; i++) yield itemFn(this, i);\n  }\n  *keys() {\n    const { length } = this;\n    for(let i = 0; i < length; i++) yield i;\n  }\n  *entries() {\n    const { length } = this;\n    for(let i = 0; i < length; i++) yield [i, itemFn(this, i)];\n  }\n  *values() {\n    const { length } = this;\n    for(let i = 0; i < length; i++) yield itemFn(this, i);\n  }\n  forEach(callback, thisArg) {\n    const { length } = this;\n    for(let i = 0; i < length; i++) callback.call(thisArg, itemFn(this, i), i, this);\n  }\n  reduce(callback, accu, thisArg) {\n    const { length } = this;\n    for(let i = 0; i < length; i++) accu = callback.call(thisArg, accu, itemFn(this, i), i, this);\n    return accu;\n  }\n}\n\n/*export function arrayFacade(proto, itemFn = (container, i) => container.at(i)) {\n  return define(proto, ArrayFacade.prototype);\n}*/\n\nexport function bits(buffer) {\n  let a = new Uint8Array(buffer);\n  let bit,\n    bits = buffer.byteLength << 3;\n  let ret = [];\n  for(bit = 0; bit < bits; bit++) {\n    let shift = bit & 0x7;\n    let bpos = bit >> 3;\n\n    ret.push(a[bit >> 3] & (1 << shift) ? 1 : 0);\n  }\n  return ret;\n}\n\nexport function dupArrayBuffer(buf, start, length) {\n  let a = new Uint8Array(buf, start, length);\n  return new Uint8Array([...a]);\n}\nexport function getTypeName(v) {\n  return typeof v;\n}\nexport function isArrayBuffer(buf) {\n  return isObject(buf) && buf instanceof ArrayBuffer;\n}\n\nexport function isBigDecimal(num) {\n  return typeof num == 'bigdecimal' || num[Symbol.toStringTag] == 'BigDecimal';\n}\n\nexport function isBigFloat(num) {\n  return typeof num == 'bigfloat' || num[Symbol.toStringTag] == 'BigFloat';\n}\n\nexport function isBigInt(num) {\n  return typeof num == 'bigint' || num[Symbol.toStringTag] == 'isBigInt';\n}\n\nexport function isBool(value) {\n  return typeof value == 'boolean';\n}\n\nexport function isJSFunction(fn) {\n  return isFunction(fn) && !isNative(fn);\n}\n\nexport function isCFunction(fn) {\n  return isFunction(fn) && isNative(fn);\n}\n\nexport function isConstructor(fn) {\n  return typeof fn == 'function' && 'prototype' in fn;\n}\n\nexport function isEmptyString(value) {\n  return value === '';\n}\n\nexport function isError(value) {\n  return value instanceof Error || value[Symbol.toStringTag].endsWith('Error');\n}\n\nexport function isException(value) {\n  return false;\n}\n\nexport function isExtensible(value) {\n  return typeof value == 'object' && value !== null && Object.isExtensible(value);\n}\n\nexport function isFunction(value) {\n  return typeof value == 'function';\n}\n\nexport function isHTMLDDA(value) {\n  return false;\n}\n\nexport function isInstanceOf(value, ctor) {\n  if(ctor[Symbol.hasInstance]) {\n    return ctor[Symbol.hasInstance](value);\n  }\n  return typeof value == 'object' && value !== null && value instanceof ctor;\n}\n\nexport function isInteger(value) {\n  return Math.abs(value) % 1 == 0;\n}\n\nexport function isJobPending(id) {\n  return false;\n}\n\nexport function isLiveObject(obj) {\n  return true;\n}\n\nexport function isNull(value) {\n  return value === null;\n}\n\nexport function isNumber(value) {\n  return typeof value == 'number';\n}\nexport function isUndefined(value) {\n  return typeof value == 'undefined';\n}\n\nexport function isString(value) {\n  return typeof value == 'string';\n}\nexport function isUninitialized(value) {\n  return false;\n}\n\nexport function isSymbol(value) {\n  return typeof value == 'symbol' || value[Symbol.toStringTag] == 'Symbol';\n}\n\nexport function isUncatchableError(value) {\n  return false;\n}\n\nexport function isRegisteredClass(id) {\n  return false;\n}\nexport function rand() {\n  return Math.random() * 2 ** 32;\n}\n\nexport function randi() {\n  return rand() - 2 ** 31;\n}\n\nexport function randf() {\n  return Math.random();\n}\n\nexport function srand(seed) {}\n\nexport function toArrayBuffer(value) {\n  if(typeof value == 'object' && value !== null && 'buffer' in value && isArrayBuffer(value.buffer)) return value.buffer;\n\n  if(typeof value == 'string') {\n    const encoder = new TextEncoder();\n    const view = encoder.encode(value);\n    return view.buffer;\n  }\n  return value;\n}\n\nLocation.prototype.clone = function(freeze = false, withFilename = true) {\n  const { line, column, pos, file } = this;\n\n  return new Location(line, column, pos, withFilename ? file : null, freeze);\n};\nLocation.prototype[Symbol.toStringTag] = 'Location';\n\nLocation.prototype[Symbol.iterator] = function* () {\n  let { file, line, column } = this;\n  let v = file ? [file, line, column] : [line, column];\n  yield* v;\n};\nLocation.prototype.toString = function(opts = {}) {\n  const { line, column, file } = this;\n  return (file ? file + ':' : '') + line + ':' + column;\n};\nLocation.prototype.valueOf = function() {\n  return this.pos;\n};\nLocation.prototype[Symbol.toPrimitive] = function(hint) {\n  if(hint == 'number') return this.pos;\n  if(hint == 'string') return this.toString();\n};\nLocation.prototype[Symbol.for('nodejs.util.inspect.custom')] = function(n, opts) {\n  return this.toString({ colors: true });\n  return inspect(this, {\n    colors: true,\n    ...opts,\n    toString: Symbol.toStringTag\n  });\n};\n/*\nLocation.prototype.valueOf = function() {\n  return this.pos;\n};*/\n\ndefine(Location.prototype, {\n  /* prettier-ignore */ get offset() {\n    return this.valueOf();\n  }\n});\n",
			"file": "lib/misc.js",
			"file_size": 67968,
			"file_write_time": 133266602989669262,
			"settings":
			{
				"buffer_size": 67970,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					27,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAHGDAAAAAAAAcoMAAAAAAAAAAAAAcoMAAAAAAAB4gwAAAAAAAAAAAAB4gwAAAAAAAHmDAAAAAAAAAAAAAHmDAAAAAAAAeoMAAAAAAAAAAAAAeoMAAAAAAAB7gwAAAAAAAAAAAAB7gwAAAAAAAHyDAAAAAAAAAAAAAHyDAAAAAAAAfYMAAAAAAAAAAAAAfYMAAAAAAAB+gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcYMAAAAAAABxgwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " true;"
					},
					"BgAAAH6DAAAAAAAAf4MAAAAAAAAAAAAAf4MAAAAAAACAgwAAAAAAAAAAAACAgwAAAAAAAIGDAAAAAAAAAAAAAIGDAAAAAAAAgoMAAAAAAAAAAAAAgoMAAAAAAACDgwAAAAAAAAAAAACDgwAAAAAAAISDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfoMAAAAAAAB+gwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"indent",
					null,
					"AQAAAMA2AAAAAAAAwjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwDYAAAAAAADqNgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "fire.html",
			"settings":
			{
				"buffer_size": 2541,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMIGAAAAAAAAwwYAAAAAAAAAAAAAwwYAAAAAAADJBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgYAAAAAAADCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"",
					null,
					"AQAAAMkGAAAAAAAA8AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQYAAAAAAADJBgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\n#canvas"
					},
					"CQAAADMCAAAAAAAANAIAAAAAAAAAAAAANAIAAAAAAAA6AgAAAAAAAAAAAAA6AgAAAAAAADsCAAAAAAAAAAAAADsCAAAAAAAAPAIAAAAAAAAAAAAAPAIAAAAAAAA9AgAAAAAAAAAAAAA9AgAAAAAAAD4CAAAAAAAAAAAAAD4CAAAAAAAAPwIAAAAAAAAAAAAAPwIAAAAAAABAAgAAAAAAAAAAAABAAgAAAAAAAEECAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwIAAAAAAAAzAgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEECAAAAAAAAQgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQIAAAAAAABBAgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEICAAAAAAAARAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgIAAAAAAABCAgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAEMCAAAAAAAARAIAAAAAAAAAAAAARAIAAAAAAABKAgAAAAAAAAAAAABKAgAAAAAAAEsCAAAAAAAAAAAAAEsCAAAAAAAAUQIAAAAAAAAAAAAARAIAAAAAAABEAgAAAAAAAAYAAAAgICAgICBEAgAAAAAAAEwCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwIAAAAAAABDAgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "position"
					},
					"CAAAAEwCAAAAAAAATQIAAAAAAAAAAAAATQIAAAAAAABOAgAAAAAAAAAAAABOAgAAAAAAAE8CAAAAAAAAAAAAAE8CAAAAAAAAUAIAAAAAAAAAAAAAUAIAAAAAAABRAgAAAAAAAAAAAABRAgAAAAAAAFICAAAAAAAAAAAAAFICAAAAAAAAUwIAAAAAAAAAAAAAUwIAAAAAAABUAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAIAAAAAAABMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAAFQCAAAAAAAAVwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAIAAAAAAABUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " absolute"
					},
					"CQAAAFYCAAAAAAAAVwIAAAAAAAAAAAAAVwIAAAAAAABYAgAAAAAAAAAAAABYAgAAAAAAAFkCAAAAAAAAAAAAAFkCAAAAAAAAWgIAAAAAAAAAAAAAWgIAAAAAAABbAgAAAAAAAAAAAABbAgAAAAAAAFwCAAAAAAAAAAAAAFwCAAAAAAAAXQIAAAAAAAAAAAAAXQIAAAAAAABeAgAAAAAAAAAAAABeAgAAAAAAAF8CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgIAAAAAAABWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " class="
					},
					"BwAAAN4HAAAAAAAA3wcAAAAAAAAAAAAA3wcAAAAAAADgBwAAAAAAAAAAAADgBwAAAAAAAOEHAAAAAAAAAAAAAOEHAAAAAAAA4gcAAAAAAAAAAAAA4gcAAAAAAADjBwAAAAAAAAAAAADjBwAAAAAAAOQHAAAAAAAAAAAAAOQHAAAAAAAA5QcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gcAAAAAAADeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAOUHAAAAAAAA5wcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QcAAAAAAADlBwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "measure"
					},
					"BwAAAOYHAAAAAAAA5wcAAAAAAAAAAAAA5wcAAAAAAADoBwAAAAAAAAAAAADoBwAAAAAAAOkHAAAAAAAAAAAAAOkHAAAAAAAA6gcAAAAAAAAAAAAA6gcAAAAAAADrBwAAAAAAAAAAAADrBwAAAAAAAOwHAAAAAAAAAAAAAOwHAAAAAAAA7QcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gcAAAAAAADmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\n#canvas"
					},
					"CQAAAO8GAAAAAAAA8AYAAAAAAAAAAAAA8AYAAAAAAAD4BgAAAAAAAAAAAAD4BgAAAAAAAPkGAAAAAAAAAAAAAPkGAAAAAAAA+gYAAAAAAAAAAAAA+gYAAAAAAAD7BgAAAAAAAAAAAAD7BgAAAAAAAPwGAAAAAAAAAAAAAPwGAAAAAAAA/QYAAAAAAAAAAAAA/QYAAAAAAAD+BgAAAAAAAAAAAAD+BgAAAAAAAP8GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wYAAAAAAADvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAP8GAAAAAAAAAQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wYAAAAAAAD/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAAAHAAAAAAAAAQcAAAAAAAAAAAAAAQcAAAAAAAAJBwAAAAAAAAAAAAAJBwAAAAAAAAoHAAAAAAAAAAAAAAoHAAAAAAAAEgcAAAAAAAAAAAAAAQcAAAAAAAABBwAAAAAAAAgAAAAgICAgICAgIAEHAAAAAAAACwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "height"
					},
					"BgAAAAsHAAAAAAAADAcAAAAAAAAAAAAADAcAAAAAAAANBwAAAAAAAAAAAAANBwAAAAAAAA4HAAAAAAAAAAAAAA4HAAAAAAAADwcAAAAAAAAAAAAADwcAAAAAAAAQBwAAAAAAAAAAAAAQBwAAAAAAABEHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwcAAAAAAAALBwAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAABEHAAAAAAAAFAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQcAAAAAAAARBwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " 100vh"
					},
					"BgAAABMHAAAAAAAAFAcAAAAAAAAAAAAAFAcAAAAAAAAVBwAAAAAAAAAAAAAVBwAAAAAAABYHAAAAAAAAAAAAABYHAAAAAAAAFwcAAAAAAAAAAAAAFwcAAAAAAAAYBwAAAAAAAAAAAAAYBwAAAAAAABkHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwcAAAAAAAATBwAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "\nwdth"
					},
					"BwAAAAAHAAAAAAAAAQcAAAAAAAAAAAAAAQcAAAAAAAAJBwAAAAAAAAAAAAAJBwAAAAAAAAsHAAAAAAAAAAAAAAsHAAAAAAAADAcAAAAAAAAAAAAADAcAAAAAAAANBwAAAAAAAAAAAAANBwAAAAAAAA4HAAAAAAAAAAAAAA4HAAAAAAAADwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAGhA"
				],
				[
					65,
					3,
					"left_delete",
					null,
					"AwAAAA4HAAAAAAAADgcAAAAAAAABAAAAaA0HAAAAAAAADQcAAAAAAAABAAAAdAwHAAAAAAAADAcAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAADwcAAAAAAAAPBwAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "idth"
					},
					"BAAAAAwHAAAAAAAADQcAAAAAAAAAAAAADQcAAAAAAAAOBwAAAAAAAAAAAAAOBwAAAAAAAA8HAAAAAAAAAAAAAA8HAAAAAAAAEAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAABAHAAAAAAAAEwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAcAAAAAAAAQBwAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " 100vvw"
					},
					"BwAAABIHAAAAAAAAEwcAAAAAAAAAAAAAEwcAAAAAAAAUBwAAAAAAAAAAAAAUBwAAAAAAABUHAAAAAAAAAAAAABUHAAAAAAAAFgcAAAAAAAAAAAAAFgcAAAAAAAAXBwAAAAAAAAAAAAAXBwAAAAAAABgHAAAAAAAAAAAAABgHAAAAAAAAGQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgcAAAAAAAASBwAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					2,
					"left_delete",
					null,
					"AgAAABgHAAAAAAAAGAcAAAAAAAABAAAAdxcHAAAAAAAAFwcAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAGQcAAAAAAAAZBwAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAABcHAAAAAAAAGAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwcAAAAAAAAXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "\n\n.cen"
					},
					"CQAAAGgCAAAAAAAAaQIAAAAAAAAAAAAAaQIAAAAAAABvAgAAAAAAAAAAAABvAgAAAAAAAHACAAAAAAAAAAAAAHACAAAAAAAAdgIAAAAAAAAAAAAAaQIAAAAAAABpAgAAAAAAAAYAAAAgICAgICBwAgAAAAAAAHECAAAAAAAAAAAAAHECAAAAAAAAcgIAAAAAAAAAAAAAcgIAAAAAAABzAgAAAAAAAAAAAABzAgAAAAAAAHQCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAIAAAAAAABoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "ter"
					},
					"AwAAAHQCAAAAAAAAdQIAAAAAAAAAAAAAdQIAAAAAAAB2AgAAAAAAAAAAAAB2AgAAAAAAAHcCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAIAAAAAAAB0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcCAAAAAAAAeAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwIAAAAAAAB3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHgCAAAAAAAAegIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAIAAAAAAAB4AgAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAHkCAAAAAAAAegIAAAAAAAAAAAAAegIAAAAAAACAAgAAAAAAAAAAAACAAgAAAAAAAIECAAAAAAAAAAAAAIECAAAAAAAAhwIAAAAAAAAAAAAAegIAAAAAAAB6AgAAAAAAAAYAAAAgICAgICB6AgAAAAAAAIICAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQIAAAAAAAB5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"",
					null,
					"AQAAAIICAAAAAAAAkgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggIAAAAAAACCAgAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJICAAAAAAAAkwIAAAAAAAAAAAAAkwIAAAAAAACdAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgIAAAAAAACSAgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"",
					null,
					"AQAAAJ0CAAAAAAAAsQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQIAAAAAAACdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALECAAAAAAAAsgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQIAAAAAAACxAgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALICAAAAAAAAswIAAAAAAAAAAAAAswIAAAAAAAC+AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgIAAAAAAACyAgAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"",
					null,
					"AQAAAL4CAAAAAAAA0AIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgIAAAAAAAC+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " center;"
					},
					"CAAAANACAAAAAAAA0QIAAAAAAAAAAAAA0QIAAAAAAADSAgAAAAAAAAAAAADSAgAAAAAAANMCAAAAAAAAAAAAANMCAAAAAAAA1AIAAAAAAAAAAAAA1AIAAAAAAADVAgAAAAAAAAAAAADVAgAAAAAAANYCAAAAAAAAAAAAANYCAAAAAAAA1wIAAAAAAAAAAAAA1wIAAAAAAADYAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AIAAAAAAADQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANgCAAAAAAAA2QIAAAAAAAAAAAAA2QIAAAAAAADmAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AIAAAAAAADYAgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"",
					null,
					"AQAAAOYCAAAAAAAAFQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gIAAAAAAADmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABQDAAAAAAAAFQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAMAAAAAAAAUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"right_delete",
					null,
					"AQAAAPYCAAAAAAAA9gIAAAAAAAAVAAAAdHJldGNoIHwgZmxleC1zdGFydCB8",
					"AQAAAAAAAAABAAAA9gIAAAAAAAALAwAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAAPUCAAAAAAAA9QIAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAA9gIAAAAAAAD2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": " center"
					},
					"BwAAANsIAAAAAAAA3AgAAAAAAAAAAAAA3AgAAAAAAADdCAAAAAAAAAAAAADdCAAAAAAAAN4IAAAAAAAAAAAAAN4IAAAAAAAA3wgAAAAAAAAAAAAA3wgAAAAAAADgCAAAAAAAAAAAAADgCAAAAAAAAOEIAAAAAAAAAAAAAOEIAAAAAAAA4ggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wgAAAAAAADbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAC0HAAAAAAAALwcAAAAAAAAAAAAABwcAAAAAAAAJBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwcAAAAAAAAtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAAHAAAAAAAAAQcAAAAAAAAAAAAAAQcAAAAAAAABBwAAAAAAADMAAAAgICAgICAgLyogcG9zaXRpb246IGZpeGVkOwogICAgICAgICAgYm90dG9tOiAwOyovCiA",
					"AQAAAAAAAAABAAAAAAcAAAAAAAAzBwAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAK4FAAAAAAAAsAUAAAAAAAAAAAAAcwUAAAAAAAB1BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwUAAAAAAACuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": ",#canvas"
					},
					"CAAAACcBAAAAAAAAKAEAAAAAAAAAAAAAKAEAAAAAAAApAQAAAAAAAAAAAAApAQAAAAAAACoBAAAAAAAAAAAAACoBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALgEAAAAAAAAAAAAALgEAAAAAAAAvAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwEAAAAAAAAnAQAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOsFAAAAAAAA7AUAAAAAAAAAAAAA7AUAAAAAAADsBQAAAAAAABwAAAAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsK",
					"AQAAAAAAAAABAAAA6wUAAAAAAAAHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAgGAAAAAAAACgYAAAAAAAAAAAAA7QUAAAAAAADvBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAYAAAAAAADtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAHACAAAAAAAAcgIAAAAAAAAAAAAAQgIAAAAAAABEAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgIAAAAAAABwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAJQGAAAAAAAAlgYAAAAAAAAAAAAANQYAAAAAAAA3BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQYAAAAAAACUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHsFAAAAAAAAfAUAAAAAAAAAAAAAfAUAAAAAAAB8BQAAAAAAAEMAAAAgICAgLyogICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgdG9wOiAwOyov",
					"AQAAAAAAAAABAAAAewUAAAAAAAC+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAK0FAAAAAAAArgUAAAAAAAAAAAAArgUAAAAAAACuBQAAAAAAACIAAAAgIC8qICAgICAgICAgbWF4LWhlaWdodDogMTAwdmg7Ki8K",
					"AQAAAAAAAAABAAAArQUAAAAAAADPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"cut",
					null,
					"AQAAAAAHAAAAAAAAAAcAAAAAAABJAAAAICAgICNjYW52YXN7CiAgICAgICAgICB3aWR0aDogIDEwMHZ3OwogICAgICAgICAgaGVpZ2h0OiAgMTAwdmg7CiAgICAgICAgfQ",
					"AQAAAAAAAAABAAAAAAcAAAAAAABJBwAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"paste",
					null,
					"AQAAABUDAAAAAAAAXgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQMAAAAAAAAVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADfCQAAPCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkZpcmU8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIHNpemVzPSIxNngxNiAzMngzMiAxMjh4MTI4IiBocmVmPSJzdGF0aWMvZmlyZS5pY28iIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICBib2R5LAogICAgICBodG1sIHsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgfQogICAgICBodG1sLAogICAgICBib2R5LAogICAgICAjcGFnZSwjY2FudmFzIHsKICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICB9CiAgICAgIGJvZHkgewogICAgICAgIGhlaWdodDogMTAwdmg7CiAgICAgICAgd2lkdGg6IDEwMHZ3OwogICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC45KTsKICAgICAgfQogICAgICBjYW52YXMsCiAgICAgICNjYW52YXMsCiAgICAgIHN2ZyB7CiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgIH0KICAgICAgc3ZnIHsKICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTsKICAgICAgfQogICAgICAvKiNjYW52YXMgewogICAgICAgIHBvc2l0aW9uOiAgYWJzb2x1dGU7CiAgICAgIH0qLwoKICAgICAgLmNlbnRlciB7CiAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6ICBmbGV4LWVuZDsgCiAgICAgIH0KICAgICNjYW52YXN7CiAgICAgICAgICB3aWR0aDogIDEwMHZ3OwogICAgICAgICAgaGVpZ2h0OiAgMTAwdmg7CiAgICAgICAgfQogICAgICAvKiAgQG1lZGlhIChvcmllbnRhdGlvbjogcG9ydHJhaXQpIHsKICAgICAgICBjYW52YXMgewogICAgICAgICAgaGVpZ2h0OiAxMDB2dzsKICAgICAgICAgIHdpZHRoOiBhdXRvOwogICAgICAgIH0KICAgICAgICAjY2FudmFzIHsKICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICB0b3A6IDA7CiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgfQogICAgICAgICNjYW52YXMgewogICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgfQogICAgICAgICNwYWdlIHsKICAgICAgICAgIG92ZXJmbG93OiB2aXNpYmxlOwogICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpOwogICAgICAgICAgaGVpZ2h0OiAxMDB2dzsKICAgICAgICAgIHdpZHRoOiAxMDB2aDsKICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgIHRvcDogNTguMTY0OHZ3OwogICAgICAgICAgbGVmdDogLTU4LjE2NDh2dzsKICAgICAgICB9CiAgICAgIH0gKi8KICAgICAgQG1lZGlhIChvcmllbnRhdGlvbjogcG9ydHJhaXQpIHsKICAgICAgICAjY2FudmFzIHsKICAgIAogICAgICAgICAgd2lkdGg6IDEwMHZ3OwogICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgICB9CiAgICAgICAgY2FudmFzIHsKICAgICAgICAgLyogdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgcm90YXRlKDkwZGVnKSB0cmFuc2xhdGUoNTB2aCwgLTUwdncpOwogICAgICAgICAgaGVpZ2h0OiA4MHZ3OyovCiAgICAgICAgICB3aWR0aDogYXV0bzsKICAgICAgICB9CiAgICAgIH0KICAgICAgQG1lZGlhIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7CiAgICAgICAgY2FudmFzIHsKICAgICAgICAgICAgaGVpZ2h0OiBhdXRvOwogICAgICAgICAgbWF4LWhlaWdodDogY2FsYygxMDB2aCk7CiAgICAgICAgICB3aWR0aDogY2FsYygxMDAlKTsKICAgICAgICB9CiAgICAKICAgICAgfQogICAgICAubWVhc3VyZSB7CiAgICBoZWlnaHQ6IHZhcigtLWhlaWdodCk7Cn0KICAgIDwvc3R5bGU+CiAgICA8c2NyaXB0IHR5cGU9Im1vZHVsZSIgc3JjPSIuL2ZpcmUuanMiPjwvc2NyaXB0PgogICAgPCEtLSAgPHNjcmlwdCB0eXBlPSJtb2R1bGUiIHNyYz0iLi9maXJlL2J1aWxkL2ZpcmUtZGVidWcuanMiPjwvc2NyaXB0PiAgLS0+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPGRpdiBpZD0iY2FudmFzIiBjbGFzcz0ibWVhc3VyZSBjZW50ZXIiPjwvZGl2PgogICAgPHN2ZyBpZD0iY3Jvc3NoYWlyIiB3aWR0aD0iMjUiIGhlaWdodD0iMjUiIHZlcnNpb249IjEuMSI+CiAgICAgIDxkZWZzPjwvZGVmcz4KICAgICAgPGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTEyNyAtMTI3KSI+CiAgICAgICAgPHBhdGggZD0iTTEzNyAxMjdoNXY5aC01em0tMTAgMTBoOXY1aC05em0xNiAwaDl2NWgtOXptLTYgNmg1djloLTV6IiBzdHlsZT0iZmlsbC1ydWxlOiBldmVub2RkIiAvPgogICAgICAgIDxwYXRoIGQ9Ik0xMzggMTI4aDN2N2gtM3ptLTEwIDEwaDd2M2gtN3ptMTYgMGg3djNoLTd6bS02IDZoM3Y3aC0zeiIgc3R5bGU9ImZpbGw6ICMxMWU1ZjQ7IGZpbGwtcnVsZTogZXZlbm9kZCIgLz4KICAgICAgPC9nPgogICAgPC9zdmc+CiAgPC9ib2R5Pgo8L2h0bWw+CgAAAAAAAAAAzAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAMAAAAAAAB4AgAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"cut",
					null,
					"AQAAAHwCAAAAAAAAfAIAAAAAAACMAAAACiAgICAgIC5jZW50ZXIgewogICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7CiAgICAgIH0",
					"AQAAAAAAAAABAAAACAMAAAAAAAB8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKAGAAAAAAAAoQYAAAAAAAAAAAAAoQYAAAAAAACpBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAYAAAAAAACgBgAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"paste",
					null,
					"AQAAAKkGAAAAAAAANQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQYAAAAAAACpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"indent",
					null,
					"BgAAAKoGAAAAAAAArAYAAAAAAAAAAAAAvAYAAAAAAAC+BgAAAAAAAAAAAADVBgAAAAAAANcGAAAAAAAAAAAAAPQGAAAAAAAA9gYAAAAAAAAAAAAAFwcAAAAAAAAZBwAAAAAAAAAAAAA4BwAAAAAAADoHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQcAAAAAAACuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"paste",
					null,
					"AQAAAP8FAAAAAAAAkwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wUAAAAAAAD/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJMGAAAAAAAAlAYAAAAAAAAAAAAAlAYAAAAAAACcBgAAAAAAAAAAAAA+BwAAAAAAAD4HAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAkwYAAAAAAACTBgAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2CgAAPCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkZpcmU8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIHNpemVzPSIxNngxNiAzMngzMiAxMjh4MTI4IiBocmVmPSJzdGF0aWMvZmlyZS5pY28iIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICBib2R5LAogICAgICBodG1sIHsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgfQogICAgICBodG1sLAogICAgICBib2R5LAogICAgICAjcGFnZSwKICAgICAgI2NhbnZhcyB7CiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgfQogICAgICBib2R5IHsKICAgICAgICBoZWlnaHQ6IDEwMHZoOwogICAgICAgIHdpZHRoOiAxMDB2dzsKICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOSk7CiAgICAgIH0KICAgICAgY2FudmFzLAogICAgICAjY2FudmFzLAogICAgICBzdmcgewogICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICB9CiAgICAgIHN2ZyB7CiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgICAgIH0KICAgICAgLyojY2FudmFzIHsKICAgICAgICBwb3NpdGlvbjogIGFic29sdXRlOwogICAgICB9Ki8KCiAgICAgICNjYW52YXMgewogICAgICAgIHdpZHRoOiAxMDB2dzsKICAgICAgICBoZWlnaHQ6IDEwMHZoOwogICAgICB9CiAgICAgIC8qICBAbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogICAgICAgIGNhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IDEwMHZ3OwogICAgICAgICAgd2lkdGg6IGF1dG87CiAgICAgICAgfQogICAgICAgICNjYW52YXMgewogICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgbGVmdDogMDsKICAgICAgICAgIHRvcDogMDsKICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICB9CiAgICAgICAgI2NhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICB9CiAgICAgICAgI3BhZ2UgewogICAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7CiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7CiAgICAgICAgICBoZWlnaHQ6IDEwMHZ3OwogICAgICAgICAgd2lkdGg6IDEwMHZoOwogICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgdG9wOiA1OC4xNjQ4dnc7CiAgICAgICAgICBsZWZ0OiAtNTguMTY0OHZ3OwogICAgICAgIH0KICAgICAgfSAqLwogICAgICBAbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogICAgICAgICNjYW52YXMgewogICAgICAgICAgd2lkdGg6IDEwMHZ3OwogICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIH0KICAgICAgICBjYW52YXMgewogICAgICAgICAgLyogdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgcm90YXRlKDkwZGVnKSB0cmFuc2xhdGUoNTB2aCwgLTUwdncpOwogICAgICAgICAgaGVpZ2h0OiA4MHZ3OyovCiAgICAgICAgICB3aWR0aDogYXV0bzsKICAgICAgICB9CiAgICAgIC5jZW50ZXIgewogICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDsKICAgICAgICB9CiAgICAgICAgICAgICB9CiAgICAgIEBtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSkgewogICAgICAgIGNhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IGF1dG87CiAgICAgICAgICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoKTsKICAgICAgICAgIHdpZHRoOiBjYWxjKDEwMCUpOwogICAgICAgIH0KCiAgICAgICAgLmNlbnRlciB7CiAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kOwogICAgICAgIH0KICAgICAgfQogICAgICAubWVhc3VyZSB7CiAgICAgICAgaGVpZ2h0OiB2YXIoLS1oZWlnaHQpOwogICAgICB9CiAgICA8L3N0eWxlPgogICAgPHNjcmlwdCB0eXBlPSJtb2R1bGUiIHNyYz0iLi9maXJlLmpzIj48L3NjcmlwdD4KICAgIDwhLS0gIDxzY3JpcHQgdHlwZT0ibW9kdWxlIiBzcmM9Ii4vZmlyZS9idWlsZC9maXJlLWRlYnVnLmpzIj48L3NjcmlwdD4gIC0tPgogIDwvaGVhZD4KICA8Ym9keT4KICAgIDxkaXYgaWQ9ImNhbnZhcyIgY2xhc3M9Im1lYXN1cmUgY2VudGVyIj48L2Rpdj4KICAgIDxzdmcgaWQ9ImNyb3NzaGFpciIgd2lkdGg9IjI1IiBoZWlnaHQ9IjI1IiB2ZXJzaW9uPSIxLjEiPgogICAgICA8ZGVmcz48L2RlZnM+CiAgICAgIDxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKC0xMjcgLTEyNykiPgogICAgICAgIDxwYXRoIGQ9Ik0xMzcgMTI3aDV2OWgtNXptLTEwIDEwaDl2NWgtOXptMTYgMGg5djVoLTl6bS02IDZoNXY5aC01eiIgc3R5bGU9ImZpbGwtcnVsZTogZXZlbm9kZCIgLz4KICAgICAgICA8cGF0aCBkPSJNMTM4IDEyOGgzdjdoLTN6bS0xMCAxMGg3djNoLTd6bTE2IDBoN3YzaC03em0tNiA2aDN2N2gtM3oiIHN0eWxlPSJmaWxsOiAjMTFlNWY0OyBmaWxsLXJ1bGU6IGV2ZW5vZGQiIC8+CiAgICAgIDwvZz4KICAgIDwvc3ZnPgogIDwvYm9keT4KPC9odG1sPgoAAAAAAAAAAHEKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAYAAAAAAACcBgAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": "column"
					},
					"BwAAAEMGAAAAAAAARAYAAAAAAAAAAAAARAYAAAAAAABEBgAAAAAAAAMAAAByb3dEBgAAAAAAAEUGAAAAAAAAAAAAAEUGAAAAAAAARgYAAAAAAAAAAAAARgYAAAAAAABHBgAAAAAAAAAAAABHBgAAAAAAAEgGAAAAAAAAAAAAAEgGAAAAAAAASQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwYAAAAAAABGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					389,
					3,
					"left_delete",
					null,
					"AwAAAIwGAAAAAAAAjAYAAAAAAAABAAAAZIsGAAAAAAAAiwYAAAAAAAABAAAAbooGAAAAAAAAigYAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAjQYAAAAAAACNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": "start"
					},
					"BQAAAIoGAAAAAAAAiwYAAAAAAAAAAAAAiwYAAAAAAACMBgAAAAAAAAAAAACMBgAAAAAAAI0GAAAAAAAAAAAAAI0GAAAAAAAAjgYAAAAAAAAAAAAAjgYAAAAAAACPBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigYAAAAAAACKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPMFAAAAAAAA9AUAAAAAAAAAAAAA9AUAAAAAAAD+BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wUAAAAAAADzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					403,
					1,
					"paste",
					null,
					"AQAAAP4FAAAAAAAARQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gUAAAAAAAD+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					1,
					"cut",
					null,
					"AQAAAAoGAAAAAAAACgYAAAAAAAAVAAAAdHJhbnNsYXRlKC01MCUsIC01MCUp",
					"AQAAAAAAAAABAAAACgYAAAAAAAAfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"right_delete",
					null,
					"AQAAABkGAAAAAAAAGQYAAAAAAAAWAAAAdHJhbnNsYXRlKDUwdmgsIC01MHZ3KQ",
					"AQAAAAAAAAABAAAAGQYAAAAAAAAvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": "\nheight"
					},
					"CAAAANwFAAAAAAAA3QUAAAAAAAAAAAAA3QUAAAAAAADnBQAAAAAAAAAAAADnBQAAAAAAAOgFAAAAAAAAAAAAAOgFAAAAAAAA6QUAAAAAAAAAAAAA6QUAAAAAAADqBQAAAAAAAAAAAADqBQAAAAAAAOsFAAAAAAAAAAAAAOsFAAAAAAAA7AUAAAAAAAAAAAAA7AUAAAAAAADtBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AUAAAAAAADcBQAAAAAAAAAAAAAAgHJA"
				],
				[
					424,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAAO0FAAAAAAAA8AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QUAAAAAAADtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					425,
					1,
					"insert",
					{
						"characters": " 100vmin"
					},
					"CAAAAO8FAAAAAAAA8AUAAAAAAAAAAAAA8AUAAAAAAADxBQAAAAAAAAAAAADxBQAAAAAAAPIFAAAAAAAAAAAAAPIFAAAAAAAA8wUAAAAAAAAAAAAA8wUAAAAAAAD0BQAAAAAAAAAAAAD0BQAAAAAAAPUFAAAAAAAAAAAAAPUFAAAAAAAA9gUAAAAAAAAAAAAA9gUAAAAAAAD3BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wUAAAAAAADvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					2,
					"left_delete",
					null,
					"AgAAAPYFAAAAAAAA9gUAAAAAAAABAAAAbvUFAAAAAAAA9QUAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA9wUAAAAAAAD3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": "ax"
					},
					"AgAAAPUFAAAAAAAA9gUAAAAAAAAAAAAA9gUAAAAAAAD3BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QUAAAAAAAD1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					2,
					"left_delete",
					null,
					"AgAAAPYFAAAAAAAA9gUAAAAAAAABAAAAePUFAAAAAAAA9QUAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAA9wUAAAAAAAD3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAPUFAAAAAAAA9gUAAAAAAAAAAAAA9gUAAAAAAAD3BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QUAAAAAAAD1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": "cebnt"
					},
					"BgAAAMgGAAAAAAAAyQYAAAAAAAAAAAAAyQYAAAAAAADJBgAAAAAAAAoAAABmbGV4LXN0YXJ0yQYAAAAAAADKBgAAAAAAAAAAAADKBgAAAAAAAMsGAAAAAAAAAAAAAMsGAAAAAAAAzAYAAAAAAAAAAAAAzAYAAAAAAADNBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAYAAAAAAADSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					3,
					"left_delete",
					null,
					"AwAAAMwGAAAAAAAAzAYAAAAAAAABAAAAdMsGAAAAAAAAywYAAAAAAAABAAAAbsoGAAAAAAAAygYAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAzQYAAAAAAADNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": "nter"
					},
					"BAAAAMoGAAAAAAAAywYAAAAAAAAAAAAAywYAAAAAAADMBgAAAAAAAAAAAADMBgAAAAAAAM0GAAAAAAAAAAAAAM0GAAAAAAAAzgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygYAAAAAAADKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABoFAAAAAAAAGwUAAAAAAAAAAAAAGwUAAAAAAAAbBQAAAAAAAEMAAAAjY2FudmFzIHsKICAgICAgICAgIHdpZHRoOiAxMDB2dzsKICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICB9",
					"AQAAAAAAAAABAAAAGgUAAAAAAABdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"right_delete",
					null,
					"AQAAADIFAAAAAAAAMgUAAAAAAABtAAAAICAgICAvKiB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSByb3RhdGUoOTBkZWcpIHRyYW5zbGF0ZSg1MHZoLCAtNTB2dyk7CiAgICAgICAgICBoZWlnaHQ6IDgwdnc7Ki8KICAgIA",
					"AQAAAAAAAAABAAAAMgUAAAAAAACfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					484,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEICAAAAAAAAQwIAAAAAAAAAAAAAQwIAAAAAAABDAgAAAAAAADoAAAAKICAgICAgLyojY2FudmFzIHsKICAgICAgICBwb3NpdGlvbjogIGFic29sdXRlOwogICAgICB9Ki8K",
					"AQAAAAAAAAABAAAAQgIAAAAAAAB8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADNCQAAPCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkZpcmU8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIHNpemVzPSIxNngxNiAzMngzMiAxMjh4MTI4IiBocmVmPSJzdGF0aWMvZmlyZS5pY28iIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICBib2R5LAogICAgICBodG1sIHsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgfQogICAgICBodG1sLAogICAgICBib2R5LAogICAgICAjcGFnZSwKICAgICAgI2NhbnZhcyB7CiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgfQogICAgICBib2R5IHsKICAgICAgICBoZWlnaHQ6IDEwMHZoOwogICAgICAgIHdpZHRoOiAxMDB2dzsKICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOSk7CiAgICAgIH0KICAgICAgY2FudmFzLAogICAgICAjY2FudmFzLAogICAgICBzdmcgewogICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICB9CiAgICAgIHN2ZyB7CiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgICAgIH0gCiAgICAgICNjYW52YXMgewogICAgICAgIHdpZHRoOiAxMDB2dzsKICAgICAgICBoZWlnaHQ6IDEwMHZoOwogICAgICB9CiAgICAgIC8qICBAbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogICAgICAgIGNhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IDEwMHZ3OwogICAgICAgICAgd2lkdGg6IGF1dG87CiAgICAgICAgfQogICAgICAgICNjYW52YXMgewogICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgbGVmdDogMDsKICAgICAgICAgIHRvcDogMDsKICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICB9CiAgICAgICAgI2NhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICB9CiAgICAgICAgI3BhZ2UgewogICAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7CiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7CiAgICAgICAgICBoZWlnaHQ6IDEwMHZ3OwogICAgICAgICAgd2lkdGg6IDEwMHZoOwogICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgdG9wOiA1OC4xNjQ4dnc7CiAgICAgICAgICBsZWZ0OiAtNTguMTY0OHZ3OwogICAgICAgIH0KICAgICAgfSAqLwogICAgICBAbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogICAgICAgICAKICAgICAgICBjYW52YXMgewogICAgICAgICAgIGhlaWdodDogIDEwMHZtaW47CiAgICAgICAgICB3aWR0aDogYXV0bzsKICAgICAgICAgICB0cmFuc2Zvcm06ICByb3RhdGUoOTBkZWcpIDsKICAgICAgICB9CiAgICAgICAgLmNlbnRlciB7CiAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgQG1lZGlhIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7CiAgICAgICAgY2FudmFzIHsKICAgICAgICAgIGhlaWdodDogYXV0bzsKICAgICAgICAgIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmgpOwogICAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSk7CiAgICAgICAgfQoKICAgICAgICAuY2VudGVyIHsKICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93OwogICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIC5tZWFzdXJlIHsKICAgICAgICBoZWlnaHQ6IHZhcigtLWhlaWdodCk7CiAgICAgIH0KICAgIDwvc3R5bGU+CiAgICA8c2NyaXB0IHR5cGU9Im1vZHVsZSIgc3JjPSIuL2ZpcmUuanMiPjwvc2NyaXB0PgogICAgPCEtLSAgPHNjcmlwdCB0eXBlPSJtb2R1bGUiIHNyYz0iLi9maXJlL2J1aWxkL2ZpcmUtZGVidWcuanMiPjwvc2NyaXB0PiAgLS0+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPGRpdiBpZD0iY2FudmFzIiBjbGFzcz0ibWVhc3VyZSBjZW50ZXIiPjwvZGl2PgogICAgPHN2ZyBpZD0iY3Jvc3NoYWlyIiB3aWR0aD0iMjUiIGhlaWdodD0iMjUiIHZlcnNpb249IjEuMSI+CiAgICAgIDxkZWZzPjwvZGVmcz4KICAgICAgPGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTEyNyAtMTI3KSI+CiAgICAgICAgPHBhdGggZD0iTTEzNyAxMjdoNXY5aC01em0tMTAgMTBoOXY1aC05em0xNiAwaDl2NWgtOXptLTYgNmg1djloLTV6IiBzdHlsZT0iZmlsbC1ydWxlOiBldmVub2RkIiAvPgogICAgICAgIDxwYXRoIGQ9Ik0xMzggMTI4aDN2N2gtM3ptLTEwIDEwaDd2M2gtN3ptMTYgMGg3djNoLTd6bS02IDZoM3Y3aC0zeiIgc3R5bGU9ImZpbGw6ICMxMWU1ZjQ7IGZpbGwtcnVsZTogZXZlbm9kZCIgLz4KICAgICAgPC9nPgogICAgPC9zdmc+CiAgPC9ib2R5Pgo8L2h0bWw+CgAAAAAAAAAAvQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegcAAAAAAAB6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAIwCAAAAAAAAjQIAAAAAAAAAAAAAjQIAAAAAAACNAgAAAAAAACQCAAAgIC8qICBAbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogICAgICAgIGNhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IDEwMHZ3OwogICAgICAgICAgd2lkdGg6IGF1dG87CiAgICAgICAgfQogICAgICAgICNjYW52YXMgewogICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgbGVmdDogMDsKICAgICAgICAgIHRvcDogMDsKICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICB9CiAgICAgICAgI2NhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICB9CiAgICAgICAgI3BhZ2UgewogICAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7CiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7CiAgICAgICAgICBoZWlnaHQ6IDEwMHZ3OwogICAgICAgICAgd2lkdGg6IDEwMHZoOwogICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgdG9wOiA1OC4xNjQ4dnc7CiAgICAgICAgICBsZWZ0OiAtNTguMTY0OHZ3OwogICAgICAgIH0KICAgICAgfSAqLw",
					"AQAAAAAAAAABAAAAjAIAAAAAAACwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					4,
					"left_delete",
					null,
					"BAAAAIwCAAAAAAAAjAIAAAAAAAABAAAAIIoCAAAAAAAAigIAAAAAAAACAAAAICCIAgAAAAAAAIgCAAAAAAAAAgAAACAghwIAAAAAAACHAgAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAjQIAAAAAAACNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIsCAAAAAAAAjAIAAAAAAAAAAAAAjAIAAAAAAACPAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwIAAAAAAACLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					583,
					1,
					"paste",
					null,
					"AQAAAIsCAAAAAAAAIgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwIAAAAAAACLAgAAAAAAAAAAAAAAADhA"
				],
				[
					590,
					1,
					"left_delete",
					null,
					"AQAAALYCAAAAAAAAtgIAAAAAAAAfAAAAICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7Cg",
					"AQAAAAAAAAABAAAAtgIAAAAAAADVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					599,
					1,
					"left_delete",
					null,
					"AQAAANkCAAAAAAAA2QIAAAAAAAAhAAAAICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDsK",
					"AQAAAAAAAAABAAAA2QIAAAAAAAD6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					633,
					1,
					"left_delete",
					null,
					"AQAAAMgDAAAAAAAAyAMAAAAAAAAjAAAAICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwo",
					"AQAAAAAAAAABAAAAyAMAAAAAAADrAwAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"left_delete",
					null,
					"AQAAAI0DAAAAAAAAjQMAAAAAAAAZAAAAICAgICAgICAgIGRpc3BsYXk6IGZsZXg7Cg",
					"AQAAAAAAAAABAAAAjQMAAAAAAACmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					650,
					1,
					"left_delete",
					null,
					"AQAAAI4EAAAAAAAAjgQAAAAAAAAZAAAAICAgICAgICAgIGRpc3BsYXk6IGZsZXg7Cg",
					"AQAAAAAAAAABAAAAjgQAAAAAAACnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					657,
					1,
					"left_delete",
					null,
					"AQAAAK0EAAAAAAAArQQAAAAAAAAjAAAAICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwo",
					"AQAAAAAAAAABAAAArQQAAAAAAADQBAAAAAAAAAAAAAAAAPC/"
				],
				[
					668,
					1,
					"insert",
					{
						"characters": "\n#crops"
					},
					"CAAAABcFAAAAAAAAGAUAAAAAAAAAAAAAGAUAAAAAAAAeBQAAAAAAAAAAAAAeBQAAAAAAAB8FAAAAAAAAAAAAAB8FAAAAAAAAIAUAAAAAAAAAAAAAIAUAAAAAAAAhBQAAAAAAAAAAAAAhBQAAAAAAACIFAAAAAAAAAAAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwUAAAAAAAAXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					669,
					2,
					"left_delete",
					null,
					"AgAAACMFAAAAAAAAIwUAAAAAAAABAAAAcyIFAAAAAAAAIgUAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAJAUAAAAAAAAkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					670,
					1,
					"insert",
					{
						"characters": "ssjha"
					},
					"BQAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAAkBQAAAAAAACUFAAAAAAAAAAAAACUFAAAAAAAAJgUAAAAAAAAAAAAAJgUAAAAAAAAnBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgUAAAAAAAAiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					671,
					3,
					"left_delete",
					null,
					"AwAAACYFAAAAAAAAJgUAAAAAAAABAAAAYSUFAAAAAAAAJQUAAAAAAAABAAAAaCQFAAAAAAAAJAUAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAAJwUAAAAAAAAnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					672,
					1,
					"insert",
					{
						"characters": "hair"
					},
					"BAAAACQFAAAAAAAAJQUAAAAAAAAAAAAAJQUAAAAAAAAmBQAAAAAAAAAAAAAmBQAAAAAAACcFAAAAAAAAAAAAACcFAAAAAAAAKAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAUAAAAAAAAkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					673,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACgFAAAAAAAAKQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAUAAAAAAAAoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACkFAAAAAAAAKwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQUAAAAAAAApBQAAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAACoFAAAAAAAAKwUAAAAAAAAAAAAAKwUAAAAAAAAxBQAAAAAAAAAAAAAxBQAAAAAAADIFAAAAAAAAAAAAADIFAAAAAAAAOAUAAAAAAAAAAAAAKwUAAAAAAAArBQAAAAAAAAYAAAAgICAgICArBQAAAAAAADMFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgUAAAAAAAAqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": "opacity"
					},
					"BwAAADMFAAAAAAAANAUAAAAAAAAAAAAANAUAAAAAAAA1BQAAAAAAAAAAAAA1BQAAAAAAADYFAAAAAAAAAAAAADYFAAAAAAAANwUAAAAAAAAAAAAANwUAAAAAAAA4BQAAAAAAAAAAAAA4BQAAAAAAADkFAAAAAAAAAAAAADkFAAAAAAAAOgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwUAAAAAAAAzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAADoFAAAAAAAAPQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgUAAAAAAAA6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					680,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAADwFAAAAAAAAPQUAAAAAAAAAAAAAPQUAAAAAAAA+BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAUAAAAAAAA8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": "\npointer-events"
					},
					"EAAAAD8FAAAAAAAAQAUAAAAAAAAAAAAAQAUAAAAAAABIBQAAAAAAAAAAAABIBQAAAAAAAEkFAAAAAAAAAAAAAEkFAAAAAAAASgUAAAAAAAAAAAAASgUAAAAAAABLBQAAAAAAAAAAAABLBQAAAAAAAEwFAAAAAAAAAAAAAEwFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABOBQAAAAAAAAAAAABOBQAAAAAAAE8FAAAAAAAAAAAAAE8FAAAAAAAAUAUAAAAAAAAAAAAAUAUAAAAAAABRBQAAAAAAAAAAAABRBQAAAAAAAFIFAAAAAAAAAAAAAFIFAAAAAAAAUwUAAAAAAAAAAAAAUwUAAAAAAABUBQAAAAAAAAAAAABUBQAAAAAAAFUFAAAAAAAAAAAAAFUFAAAAAAAAVgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwUAAAAAAAA/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					685,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAAFYFAAAAAAAAWQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgUAAAAAAABWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					686,
					1,
					"insert",
					{
						"characters": " none"
					},
					"BQAAAFgFAAAAAAAAWQUAAAAAAAAAAAAAWQUAAAAAAABaBQAAAAAAAAAAAABaBQAAAAAAAFsFAAAAAAAAAAAAAFsFAAAAAAAAXAUAAAAAAAAAAAAAXAUAAAAAAABdBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAUAAAAAAABYBQAAAAAAAAAAAAAAAPC/"
				],
				[
					688,
					1,
					"insert",
					{
						"characters": "\nuser-selcet"
					},
					"DQAAAF4FAAAAAAAAXwUAAAAAAAAAAAAAXwUAAAAAAABnBQAAAAAAAAAAAABnBQAAAAAAAGgFAAAAAAAAAAAAAGgFAAAAAAAAaQUAAAAAAAAAAAAAaQUAAAAAAABqBQAAAAAAAAAAAABqBQAAAAAAAGsFAAAAAAAAAAAAAGsFAAAAAAAAbAUAAAAAAAAAAAAAbAUAAAAAAABtBQAAAAAAAAAAAABtBQAAAAAAAG4FAAAAAAAAAAAAAG4FAAAAAAAAbwUAAAAAAAAAAAAAbwUAAAAAAABwBQAAAAAAAAAAAABwBQAAAAAAAHEFAAAAAAAAAAAAAHEFAAAAAAAAcgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgUAAAAAAABeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					689,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAAHIFAAAAAAAAdQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgUAAAAAAAByBQAAAAAAAAAAAAAAAPC/"
				],
				[
					690,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHQFAAAAAAAAdQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAUAAAAAAAB0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					691,
					2,
					"left_delete",
					null,
					"AgAAAHQFAAAAAAAAdAUAAAAAAAABAAAAIHMFAAAAAAAAcwUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAdQUAAAAAAAB1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					692,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAHIFAAAAAAAAcgUAAAAAAAABAAAAOnIFAAAAAAAAcgUAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAcwUAAAAAAABzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					693,
					2,
					"left_delete",
					null,
					"AgAAAHEFAAAAAAAAcQUAAAAAAAABAAAAdHAFAAAAAAAAcAUAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAcgUAAAAAAAByBQAAAAAAAAAAAAAAAPC/"
				],
				[
					694,
					1,
					"insert",
					{
						"characters": "ec"
					},
					"AgAAAHAFAAAAAAAAcQUAAAAAAAAAAAAAcQUAAAAAAAByBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAUAAAAAAABwBQAAAAAAAAAAAAAAAPC/"
				],
				[
					695,
					3,
					"left_delete",
					null,
					"AwAAAHEFAAAAAAAAcQUAAAAAAAABAAAAY3AFAAAAAAAAcAUAAAAAAAABAAAAZW8FAAAAAAAAbwUAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAcgUAAAAAAAByBQAAAAAAAAAAAAAAAPC/"
				],
				[
					696,
					1,
					"insert",
					{
						"characters": "ect"
					},
					"AwAAAG8FAAAAAAAAcAUAAAAAAAAAAAAAcAUAAAAAAABxBQAAAAAAAAAAAABxBQAAAAAAAHIFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwUAAAAAAABvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					697,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAAHIFAAAAAAAAdQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgUAAAAAAAByBQAAAAAAAAAAAAAAAPC/"
				],
				[
					698,
					1,
					"insert",
					{
						"characters": " none"
					},
					"BQAAAHQFAAAAAAAAdQUAAAAAAAAAAAAAdQUAAAAAAAB2BQAAAAAAAAAAAAB2BQAAAAAAAHcFAAAAAAAAAAAAAHcFAAAAAAAAeAUAAAAAAAAAAAAAeAUAAAAAAAB5BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAUAAAAAAAB0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					721,
					1,
					"insert",
					{
						"characters": "\n.overlay"
					},
					"CgAAAOEBAAAAAAAA4gEAAAAAAAAAAAAA4gEAAAAAAADoAQAAAAAAAAAAAADoAQAAAAAAAOkBAAAAAAAAAAAAAOkBAAAAAAAA6gEAAAAAAAAAAAAA6gEAAAAAAADrAQAAAAAAAAAAAADrAQAAAAAAAOwBAAAAAAAAAAAAAOwBAAAAAAAA7QEAAAAAAAAAAAAA7QEAAAAAAADuAQAAAAAAAAAAAADuAQAAAAAAAO8BAAAAAAAAAAAAAO8BAAAAAAAA8AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QEAAAAAAADhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					722,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPABAAAAAAAA8QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AEAAAAAAADwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					726,
					1,
					"cut",
					null,
					"AQAAAOIBAAAAAAAA4gEAAAAAAAAQAAAAICAgICAgLm92ZXJsYXksCg",
					"AQAAAAAAAAABAAAA4gEAAAAAAADyAQAAAAAAAAAAAAAAAAAA"
				],
				[
					727,
					1,
					"paste",
					null,
					"AQAAAOIBAAAAAAAA8gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gEAAAAAAADiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					731,
					1,
					"paste",
					null,
					"AQAAACECAAAAAAAAMQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQIAAAAAAAAhAgAAAAAAAAAAAAAAAPC/"
				],
				[
					770,
					1,
					"insert",
					{
						"characters": "\n.overlay"
					},
					"CgAAAAIDAAAAAAAAAwMAAAAAAAAAAAAAAwMAAAAAAAALAwAAAAAAAAAAAAALAwAAAAAAAAwDAAAAAAAAAAAAAAwDAAAAAAAADQMAAAAAAAAAAAAADQMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAARAwAAAAAAAAAAAAARAwAAAAAAABIDAAAAAAAAAAAAABIDAAAAAAAAEwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgMAAAAAAAACAwAAAAAAAAAAAAAAAPC/"
				],
				[
					771,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABMDAAAAAAAAFAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwMAAAAAAAATAwAAAAAAAAAAAAAAAPC/"
				],
				[
					772,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABQDAAAAAAAAFgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAMAAAAAAAAUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					773,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAABUDAAAAAAAAFgMAAAAAAAAAAAAAFgMAAAAAAAAeAwAAAAAAAAAAAAAeAwAAAAAAAB8DAAAAAAAAAAAAAB8DAAAAAAAAJwMAAAAAAAAAAAAAFgMAAAAAAAAWAwAAAAAAAAgAAAAgICAgICAgIBYDAAAAAAAAIAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQMAAAAAAAAVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					774,
					1,
					"insert",
					{
						"characters": "z-index"
					},
					"BwAAACADAAAAAAAAIQMAAAAAAAAAAAAAIQMAAAAAAAAiAwAAAAAAAAAAAAAiAwAAAAAAACMDAAAAAAAAAAAAACMDAAAAAAAAJAMAAAAAAAAAAAAAJAMAAAAAAAAlAwAAAAAAAAAAAAAlAwAAAAAAACYDAAAAAAAAAAAAACYDAAAAAAAAJwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAMAAAAAAAAgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					775,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAACcDAAAAAAAAKgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwMAAAAAAAAnAwAAAAAAAAAAAAAAAPC/"
				],
				[
					776,
					1,
					"insert",
					{
						"characters": " 9999999"
					},
					"CAAAACkDAAAAAAAAKgMAAAAAAAAAAAAAKgMAAAAAAAArAwAAAAAAAAAAAAArAwAAAAAAACwDAAAAAAAAAAAAACwDAAAAAAAALQMAAAAAAAAAAAAALQMAAAAAAAAuAwAAAAAAAAAAAAAuAwAAAAAAAC8DAAAAAAAAAAAAAC8DAAAAAAAAMAMAAAAAAAAAAAAAMAMAAAAAAAAxAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQMAAAAAAAApAwAAAAAAAAAAAAAAAPC/"
				],
				[
					777,
					1,
					"insert",
					{
						"characters": "99"
					},
					"AgAAADEDAAAAAAAAMgMAAAAAAAAAAAAAMgMAAAAAAAAzAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQMAAAAAAAAxAwAAAAAAAAAAAAAAAPC/"
				],
				[
					778,
					2,
					"left_delete",
					null,
					"AgAAADIDAAAAAAAAMgMAAAAAAAABAAAAOTEDAAAAAAAAMQMAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAAMwMAAAAAAAAzAwAAAAAAAAAAAAAAAPC/"
				],
				[
					781,
					1,
					"insert",
					{
						"characters": "9"
					},
					"AQAAADEDAAAAAAAAMgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQMAAAAAAAAxAwAAAAAAAAAAAAAAAPC/"
				],
				[
					788,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMQBAAAAAAAAxQEAAAAAAAAAAAAAxQEAAAAAAADLAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAEAAAAAAADEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					790,
					1,
					"",
					null,
					"AQAAAMsBAAAAAAAABQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywEAAAAAAADLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					791,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAAUCAAAAAAAABgIAAAAAAAAAAAAABgIAAAAAAAAKAgAAAAAAAAAAAAAKAgAAAAAAAAsCAAAAAAAAAAAAAAYCAAAAAAAABgIAAAAAAAAEAAAAICAgIAYCAAAAAAAACAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQIAAAAAAAAFAgAAAAAAAAAAAAAAAPC/"
				],
				[
					793,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMgBAAAAAAAAyQEAAAAAAAAAAAAAyQEAAAAAAADMAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAEAAAAAAADIAQAAAAAAAAAAAAAAADhA"
				],
				[
					795,
					1,
					"insert",
					{
						"characters": "vbo"
					},
					"AwAAAMgBAAAAAAAAyQEAAAAAAAAAAAAAyQEAAAAAAADKAQAAAAAAAAAAAADKAQAAAAAAAMsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAEAAAAAAADIAQAAAAAAAAAAAAAAADhA"
				],
				[
					796,
					3,
					"left_delete",
					null,
					"AwAAAMoBAAAAAAAAygEAAAAAAAABAAAAb8kBAAAAAAAAyQEAAAAAAAABAAAAYsgBAAAAAAAAyAEAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAywEAAAAAAADLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					797,
					1,
					"insert",
					{
						"characters": "body"
					},
					"BAAAAMgBAAAAAAAAyQEAAAAAAAAAAAAAyQEAAAAAAADKAQAAAAAAAAAAAADKAQAAAAAAAMsBAAAAAAAAAAAAAMsBAAAAAAAAzAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAEAAAAAAADIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					798,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMwBAAAAAAAAzQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAEAAAAAAADMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					799,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAM0BAAAAAAAAzwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQEAAAAAAADNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					800,
					1,
					"right_delete",
					null,
					"AQAAAM4BAAAAAAAAzgEAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAzgEAAAAAAADOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					804,
					1,
					"right_delete",
					null,
					"AQAAAGwBAAAAAAAAbAEAAAAAAAAtAAAAICAgIGhlaWdodDogMTAwdmg7CiAgICAgICAgd2lkdGg6IDEwMHZ3OwogICAg",
					"AQAAAAAAAAABAAAAbAEAAAAAAACZAQAAAAAAAAAAAAAAAEBA"
				],
				[
					825,
					1,
					"cut",
					null,
					"AQAAAMgGAAAAAAAAyAYAAAAAAAAGAAAAY2VudGVy",
					"AQAAAAAAAAABAAAAyAYAAAAAAADOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					826,
					1,
					"paste",
					null,
					"AQAAAMgGAAAAAAAAzgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAYAAAAAAADIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					835,
					1,
					"cut",
					null,
					"AQAAAMgGAAAAAAAAyAYAAAAAAAAGAAAAY2VudGVy",
					"AQAAAAAAAAABAAAAyAYAAAAAAADOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					836,
					1,
					"paste",
					null,
					"AQAAAMgGAAAAAAAAzgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAYAAAAAAADIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					843,
					1,
					"cut",
					null,
					"AQAAAMgGAAAAAAAAyAYAAAAAAAAGAAAAY2VudGVy",
					"AQAAAAAAAAABAAAAzgYAAAAAAADIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					849,
					1,
					"insert",
					{
						"characters": " class="
					},
					"BwAAAKIGAAAAAAAAowYAAAAAAAAAAAAAowYAAAAAAACkBgAAAAAAAAAAAACkBgAAAAAAAKUGAAAAAAAAAAAAAKUGAAAAAAAApgYAAAAAAAAAAAAApgYAAAAAAACnBgAAAAAAAAAAAACnBgAAAAAAAKgGAAAAAAAAAAAAAKgGAAAAAAAAqQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogYAAAAAAACiBgAAAAAAAAAAAAAAAPC/"
				],
				[
					850,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKkGAAAAAAAAqwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQYAAAAAAACpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					851,
					1,
					"paste",
					null,
					"AQAAAKoGAAAAAAAAsAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgYAAAAAAACqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					863,
					1,
					"cut",
					null,
					"AQAAAIsCAAAAAAAAiwIAAAAAAAA+AAAAI2NhbnZhcyB7CiAgICAgICAgd2lkdGg6IDEwMHZ3OwogICAgICAgIGhlaWdodDogMTAwdmg7CiAgICAgIH0",
					"AQAAAAAAAAABAAAAiwIAAAAAAADJAgAAAAAAAAAAAAAAAPC/"
				],
				[
					868,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAACEDAAAAAAAAIgMAAAAAAAAAAAAAIgMAAAAAAAAqAwAAAAAAAAAAAAAqAwAAAAAAACsDAAAAAAAAAAAAACsDAAAAAAAAMwMAAAAAAAAAAAAAIgMAAAAAAAAiAwAAAAAAAAgAAAAgICAgICAgICsDAAAAAAAALAMAAAAAAAAAAAAALAMAAAAAAAA0AwAAAAAAAAAAAAAjAwAAAAAAACMDAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAIQMAAAAAAAAhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					871,
					1,
					"",
					null,
					"AQAAACMDAAAAAAAASwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwMAAAAAAAAjAwAAAAAAAAAAAAAAAFBA"
				],
				[
					876,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABdCQAAPCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkZpcmU8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIHNpemVzPSIxNngxNiAzMngzMiAxMjh4MTI4IiBocmVmPSJzdGF0aWMvZmlyZS5pY28iIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICBib2R5LAogICAgICBodG1sIHsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgfQogICAgICBodG1sLAogICAgICBib2R5LAogICAgICAjcGFnZSwKICAgICAgI2NhbnZhcyB7CiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgfQogICAgICBib2R5IHsKICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOSk7CiAgICAgIH0KICAgYm9keSB7CiAgICAgICAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogMTAwJTsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB9CiAgICAgIGNhbnZhcywKICAgICAgI2NhbnZhcywKICAgICAgLm92ZXJsYXksCiAgICAgIHN2ZyB7CiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgIH0KICAgICAgLm92ZXJsYXksCiAgICAgIHN2ZyB7CiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgICAgIH0KICAgICAgCiAgICAgICAgICAgLmNlbnRlciB7CiAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgfQogICAgICAgIC5vdmVybGF5IHsKICAgICAgICAgIHotaW5kZXg6ICA5OTk5OTk5OTsKICAgICAgICB9CgpodG1sLmlzLWxvY2tlZCwKaHRtbC5pcy1sb2NrZWQgYm9keSB7CiAgICAvKiB3YW50IHRvIGZpeCB0aGUgaGVpZ2h0IHRvIHRoZSB3aW5kb3cgaGVpZ2h0ICovCiAgICBoZWlnaHQ6IGNhbGModmFyKC0td2luZG93LWlubmVyLWhlaWdodCkgLSAxcHgpOwoKICAgIC8qIHdhbnQgdG8gYmxvY2sgYWxsIG92ZXJmbG93aW5nIGNvbnRlbnQgKi8KICAgIG92ZXJmbG93OiBoaWRkZW47CgogICAgLyogd2FudCB0byBleGNsdWRlIHBhZGRpbmcgZnJvbSB0aGUgaGVpZ2h0ICovCiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9CgogICAgICAgIAogICAgICBAbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogICAgICAgIGNhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IDEwMHZtaW47CiAgICAgICAgICB3aWR0aDogYXV0bzsKICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTsKICAgICAgICB9CiAgICAgICAgLmNlbnRlciB7CiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgQG1lZGlhIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7CiAgICAgICAgY2FudmFzIHsKICAgICAgICAgIGhlaWdodDogYXV0bzsKICAgICAgICAgIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmgpOwogICAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSk7CiAgICAgICAgfQoKICAgICAgICAuY2VudGVyIHsKICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIC5tZWFzdXJlIHsKICAgICAgICBoZWlnaHQ6IHZhcigtLWhlaWdodCk7CiAgICAgIH0KICAgICAgI2Nyb3NzaGFpciB7CiAgICAgICAgb3BhY2l0eTogIDA7CiAgICAgICAgcG9pbnRlci1ldmVudHM6ICBub25lOwogICAgICAgIHVzZXItc2VsZWN0OiAgbm9uZTsKICAgICAgfQogICAgPC9zdHlsZT4KICAgIDxzY3JpcHQgdHlwZT0ibW9kdWxlIiBzcmM9Ii4vZmlyZS5qcyI+PC9zY3JpcHQ+CiAgICA8IS0tICA8c2NyaXB0IHR5cGU9Im1vZHVsZSIgc3JjPSIuL2ZpcmUvYnVpbGQvZmlyZS1kZWJ1Zy5qcyI+PC9zY3JpcHQ+ICAtLT4KICA8L2hlYWQ+CiAgPGJvZHkgY2xhc3M9ImNlbnRlciI+CiAgICA8ZGl2IGlkPSJjYW52YXMiIGNsYXNzPSJtZWFzdXJlICI+PC9kaXY+CiAgICA8c3ZnIGlkPSJjcm9zc2hhaXIiIHdpZHRoPSIyNSIgaGVpZ2h0PSIyNSIgdmVyc2lvbj0iMS4xIj4KICAgICAgPGRlZnM+PC9kZWZzPgogICAgICA8ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMTI3IC0xMjcpIj4KICAgICAgICA8cGF0aCBkPSJNMTM3IDEyN2g1djloLTV6bS0xMCAxMGg5djVoLTl6bTE2IDBoOXY1aC05em0tNiA2aDV2OWgtNXoiIHN0eWxlPSJmaWxsLXJ1bGU6IGV2ZW5vZGQiIC8+CiAgICAgICAgPHBhdGggZD0iTTEzOCAxMjhoM3Y3aC0zem0tMTAgMTBoN3YzaC03em0xNiAwaDd2M2gtN3ptLTYgNmgzdjdoLTN6IiBzdHlsZT0iZmlsbDogIzExZTVmNDsgZmlsbC1ydWxlOiBldmVub2RkIiAvPgogICAgICA8L2c+CiAgICA8L3N2Zz4KICA8L2JvZHk+CjwvaHRtbD4KAAAAAAAAAABvCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwQAAAAAAABLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					886,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALgHAAAAAAAAuQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAcAAAAAAAC4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					887,
					1,
					"paste",
					null,
					"AQAAALkHAAAAAAAAwwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQcAAAAAAAC5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					892,
					1,
					"left_delete",
					null,
					"AQAAALkHAAAAAAAAuQcAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAugcAAAAAAAC6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					905,
					1,
					"cut",
					null,
					"AQAAALkHAAAAAAAAuQcAAAAAAAAJAAAAaXMtbG9ja2Vk",
					"AQAAAAAAAAABAAAAuQcAAAAAAADCBwAAAAAAAAAAAAAAAPC/"
				],
				[
					906,
					1,
					"left_delete",
					null,
					"AQAAALgHAAAAAAAAuAcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAuQcAAAAAAAC5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					920,
					1,
					"",
					null,
					"AgAAAMEFAAAAAAAA+wUAAAAAAAAAAAAA+wUAAAAAAAD7BQAAAAAAADcAAAAgIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmgpOwogICAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSk7",
					"AQAAAAAAAAABAAAAwQUAAAAAAAD4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					929,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALkFAAAAAAAAugUAAAAAAAAAAAAAugUAAAAAAAC6BQAAAAAAABoAAAAgICAgICAgICAgICBoZWlnaHQ6IGF1dG87Cg",
					"AQAAAAAAAAABAAAAuQUAAAAAAADTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					936,
					1,
					"insert",
					{
						"characters": "%"
					},
					"AgAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA4AUAAAAAAADgBQAAAAAAAAIAAAB2dw",
					"AQAAAAAAAAABAAAA3wUAAAAAAADhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					940,
					1,
					"insert",
					{
						"characters": "%"
					},
					"AgAAAM0FAAAAAAAAzgUAAAAAAAAAAAAAzgUAAAAAAADOBQAAAAAAAAIAAAB2aA",
					"AQAAAAAAAAABAAAAzQUAAAAAAADPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					943,
					1,
					"left_delete",
					null,
					"AQAAAM0FAAAAAAAAzQUAAAAAAAABAAAAJQ",
					"AQAAAAAAAAABAAAAzgUAAAAAAADOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					948,
					1,
					"insert",
					{
						"characters": "vg"
					},
					"AgAAAM0FAAAAAAAAzgUAAAAAAAAAAAAAzgUAAAAAAADPBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQUAAAAAAADNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					949,
					1,
					"left_delete",
					null,
					"AQAAAM4FAAAAAAAAzgUAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAzwUAAAAAAADPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					950,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAM4FAAAAAAAAzwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgUAAAAAAADOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					954,
					1,
					"left_delete",
					null,
					"AQAAAN8FAAAAAAAA3wUAAAAAAAABAAAAJQ",
					"AQAAAAAAAAABAAAA4AUAAAAAAADgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					955,
					1,
					"insert",
					{
						"characters": "vw"
					},
					"AgAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA4AUAAAAAAADhBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wUAAAAAAADfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					960,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACcBAAAAAAAAKAEAAAAAAAAAAAAAKAEAAAAAAAAoAQAAAAAAAA8AAAAsCiAgICAgICNjYW52YXM",
					"AQAAAAAAAAABAAAANgEAAAAAAAAnAQAAAAAAAAAAAAAAAPC/"
				],
				[
					968,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABLCQAAPCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkZpcmU8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIHNpemVzPSIxNngxNiAzMngzMiAxMjh4MTI4IiBocmVmPSJzdGF0aWMvZmlyZS5pY28iIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICBib2R5LAogICAgICBodG1sIHsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgfQogICAgICBodG1sLAogICAgICBib2R5LAogICAgICAjcGFnZSAgewogICAgICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICAgIH0KICAgICAgYm9keSB7CiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjkpOwogICAgICB9CiAgICAgIGJvZHkgewogICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgIH0KICAgICAgY2FudmFzLAogICAgICAjY2FudmFzLAogICAgICAub3ZlcmxheSwKICAgICAgc3ZnIHsKICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTsKICAgICAgfQogICAgICAub3ZlcmxheSwKICAgICAgc3ZnIHsKICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTsKICAgICAgfQoKICAgICAgLmNlbnRlciB7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgfQogICAgICAub3ZlcmxheSB7CiAgICAgICAgei1pbmRleDogOTk5OTk5OTk7CiAgICAgIH0KCiAgICAgIGh0bWwuaXMtbG9ja2VkLAogICAgICBodG1sLmlzLWxvY2tlZCBib2R5IHsKICAgICAgICAvKiB3YW50IHRvIGZpeCB0aGUgaGVpZ2h0IHRvIHRoZSB3aW5kb3cgaGVpZ2h0ICovCiAgICAgICAgaGVpZ2h0OiBjYWxjKHZhcigtLXdpbmRvdy1pbm5lci1oZWlnaHQpIC0gMXB4KTsKCiAgICAgICAgLyogd2FudCB0byBibG9jayBhbGwgb3ZlcmZsb3dpbmcgY29udGVudCAqLwogICAgICAgIG92ZXJmbG93OiBoaWRkZW47CgogICAgICAgIC8qIHdhbnQgdG8gZXhjbHVkZSBwYWRkaW5nIGZyb20gdGhlIGhlaWdodCAqLwogICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgIH0KCiAgICAgIEBtZWRpYSAob3JpZW50YXRpb246IHBvcnRyYWl0KSB7CiAgICAgICAgY2FudmFzIHsKICAgICAgICAgIGhlaWdodDogMTAwdm1pbjsKICAgICAgICAgIHdpZHRoOiBhdXRvOwogICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpOwogICAgICAgIH0KICAgICAgICAuY2VudGVyIHsKICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgIH0KICAgICAgfQogICAgICBAbWVkaWEgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHsKICAgICAgICBjYW52YXMgewogICAgICAgICAgaGVpZ2h0OiBhdXRvOwogICAgIG1heC1oZWlnaHQ6IDEwMHZoOwogICAgd2lkdGg6IDEwMHZ3OwogICAgICAgIH0KCiAgICAgICAgLmNlbnRlciB7CiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93OwogICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kOwogICAgICAgIH0KICAgICAgfQogICAgICAubWVhc3VyZSB7CiAgICAgICAgaGVpZ2h0OiB2YXIoLS1oZWlnaHQpOwogICAgICB9CiAgICAgICNjcm9zc2hhaXIgewogICAgICAgIG9wYWNpdHk6IDA7CiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgIH0KICAgIDwvc3R5bGU+CiAgICA8c2NyaXB0IHR5cGU9Im1vZHVsZSIgc3JjPSIuL2ZpcmUuanMiPjwvc2NyaXB0PgogICAgPCEtLSAgPHNjcmlwdCB0eXBlPSJtb2R1bGUiIHNyYz0iLi9maXJlL2J1aWxkL2ZpcmUtZGVidWcuanMiPjwvc2NyaXB0PiAgLS0+CiAgPC9oZWFkPgogIDxib2R5IGNsYXNzPSJjZW50ZXIiPgogICAgPGRpdiBpZD0iY2FudmFzIiBjbGFzcz0ibWVhc3VyZSI+PC9kaXY+CiAgICA8c3ZnIGlkPSJjcm9zc2hhaXIiIHdpZHRoPSIyNSIgaGVpZ2h0PSIyNSIgdmVyc2lvbj0iMS4xIj4KICAgICAgPGRlZnM+PC9kZWZzPgogICAgICA8ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMTI3IC0xMjcpIj4KICAgICAgICA8cGF0aCBkPSJNMTM3IDEyN2g1djloLTV6bS0xMCAxMGg5djVoLTl6bTE2IDBoOXY1aC05em0tNiA2aDV2OWgtNXoiIHN0eWxlPSJmaWxsLXJ1bGU6IGV2ZW5vZGQiIC8+CiAgICAgICAgPHBhdGggZD0iTTEzOCAxMjhoM3Y3aC0zem0tMTAgMTBoN3YzaC03em0xNiAwaDd2M2gtN3ptLTYgNmgzdjdoLTN6IiBzdHlsZT0iZmlsbDogIzExZTVmNDsgZmlsbC1ydWxlOiBldmVub2RkIiAvPgogICAgICA8L2c+CiAgICA8L3N2Zz4KICA8L2JvZHk+CjwvaHRtbD4KAAAAAAAAAABVCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwAAAAAAAAAXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					979,
					1,
					"insert",
					{
						"characters": "\n\ncanvas"
					},
					"CwAAAAcDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAFQMAAAAAAAAAAAAACAMAAAAAAAAIAwAAAAAAAAYAAAAgICAgICAPAwAAAAAAABADAAAAAAAAAAAAABADAAAAAAAAEQMAAAAAAAAAAAAAEQMAAAAAAAASAwAAAAAAAAAAAAASAwAAAAAAABMDAAAAAAAAAAAAABMDAAAAAAAAFAMAAAAAAAAAAAAAFAMAAAAAAAAVAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwMAAAAAAAAHAwAAAAAAAAAAAAAAAPC/"
				],
				[
					980,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUDAAAAAAAAFgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQMAAAAAAAAVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					981,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABYDAAAAAAAAGAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgMAAAAAAAAWAwAAAAAAAAAAAAAAAPC/"
				],
				[
					982,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAABcDAAAAAAAAGAMAAAAAAAAAAAAAGAMAAAAAAAAeAwAAAAAAAAAAAAAeAwAAAAAAAB8DAAAAAAAAAAAAAB8DAAAAAAAAJQMAAAAAAAAAAAAAGAMAAAAAAAAYAwAAAAAAAAYAAAAgICAgICAYAwAAAAAAACADAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwMAAAAAAAAXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					983,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAACADAAAAAAAAIQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAMAAAAAAAAgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					984,
					1,
					"left_delete",
					null,
					"AQAAACADAAAAAAAAIAMAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAIQMAAAAAAAAhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					985,
					1,
					"insert",
					{
						"characters": "cursor"
					},
					"BgAAACADAAAAAAAAIQMAAAAAAAAAAAAAIQMAAAAAAAAiAwAAAAAAAAAAAAAiAwAAAAAAACMDAAAAAAAAAAAAACMDAAAAAAAAJAMAAAAAAAAAAAAAJAMAAAAAAAAlAwAAAAAAAAAAAAAlAwAAAAAAACYDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAMAAAAAAAAgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					986,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAACYDAAAAAAAAKQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgMAAAAAAAAmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					987,
					1,
					"insert",
					{
						"characters": " crosshair"
					},
					"CgAAACgDAAAAAAAAKQMAAAAAAAAAAAAAKQMAAAAAAAAqAwAAAAAAAAAAAAAqAwAAAAAAACsDAAAAAAAAAAAAACsDAAAAAAAALAMAAAAAAAAAAAAALAMAAAAAAAAtAwAAAAAAAAAAAAAtAwAAAAAAAC4DAAAAAAAAAAAAAC4DAAAAAAAALwMAAAAAAAAAAAAALwMAAAAAAAAwAwAAAAAAAAAAAAAwAwAAAAAAADEDAAAAAAAAAAAAADEDAAAAAAAAMgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAMAAAAAAAAoAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1023,
					1,
					"cut",
					null,
					"AQAAAAcDAAAAAAAABwMAAAAAAAA1AAAACgogICAgICBjYW52YXMgewogICAgICAgIGN1cnNvcjogIGNyb3NzaGFpcjsKICAgICAgfQo",
					"AQAAAAAAAAABAAAABwMAAAAAAAA8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1024,
					2,
					"paste",
					null,
					"AgAAAAcDAAAAAAAAPAMAAAAAAAAAAAAAPAMAAAAAAABxAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwMAAAAAAAAHAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1028,
					1,
					"insert",
					{
						"characters": ".opre"
					},
					"BQAAAEoDAAAAAAAASwMAAAAAAAAAAAAASwMAAAAAAABMAwAAAAAAAAAAAABMAwAAAAAAAE0DAAAAAAAAAAAAAE0DAAAAAAAATgMAAAAAAAAAAAAATgMAAAAAAABPAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgMAAAAAAABKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1029,
					4,
					"left_delete",
					null,
					"BAAAAE4DAAAAAAAATgMAAAAAAAABAAAAZU0DAAAAAAAATQMAAAAAAAABAAAAckwDAAAAAAAATAMAAAAAAAABAAAAcEsDAAAAAAAASwMAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAATwMAAAAAAABPAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1030,
					1,
					"insert",
					{
						"characters": "pressed"
					},
					"BwAAAEsDAAAAAAAATAMAAAAAAAAAAAAATAMAAAAAAABNAwAAAAAAAAAAAABNAwAAAAAAAE4DAAAAAAAAAAAAAE4DAAAAAAAATwMAAAAAAAAAAAAATwMAAAAAAABQAwAAAAAAAAAAAABQAwAAAAAAAFEDAAAAAAAAAAAAAFEDAAAAAAAAUgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwMAAAAAAABLAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1032,
					1,
					"left_delete",
					null,
					"AQAAADwDAAAAAAAAPAMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAPQMAAAAAAAA9AwAAAAAAAAAAAAAAAF5A"
				],
				[
					1039,
					1,
					"insert",
					{
						"characters": "grab"
					},
					"BQAAAGUDAAAAAAAAZgMAAAAAAAAAAAAAZgMAAAAAAABmAwAAAAAAAAkAAABjcm9zc2hhaXJmAwAAAAAAAGcDAAAAAAAAAAAAAGcDAAAAAAAAaAMAAAAAAAAAAAAAaAMAAAAAAABpAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQMAAAAAAABuAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1044,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALwGAAAAAAAAvQYAAAAAAAAAAAAAvQYAAAAAAAC9BgAAAAAAADQAAAAgICAubWVhc3VyZSB7CiAgICAgICAgaGVpZ2h0OiB2YXIoLS1oZWlnaHQpOwogICAgICB9",
					"AQAAAAAAAAABAAAAvAYAAAAAAADwBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1055,
					1,
					"left_delete",
					null,
					"AQAAAPUHAAAAAAAA9QcAAAAAAAAHAAAAbWVhc3VyZQ",
					"AQAAAAAAAAABAAAA9QcAAAAAAAD8BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1056,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAPQHAAAAAAAA9AcAAAAAAAABAAAAIvQHAAAAAAAA9AcAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAA9QcAAAAAAAD1BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1057,
					7,
					"left_delete",
					null,
					"BwAAAPMHAAAAAAAA8wcAAAAAAAABAAAAPfIHAAAAAAAA8gcAAAAAAAABAAAAc/EHAAAAAAAA8QcAAAAAAAABAAAAc/AHAAAAAAAA8AcAAAAAAAABAAAAYe8HAAAAAAAA7wcAAAAAAAABAAAAbO4HAAAAAAAA7gcAAAAAAAABAAAAY+0HAAAAAAAA7QcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA9AcAAAAAAAD0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1060,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB9CQAAPCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkZpcmU8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIHNpemVzPSIxNngxNiAzMngzMiAxMjh4MTI4IiBocmVmPSJzdGF0aWMvZmlyZS5pY28iIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICBib2R5LAogICAgICBodG1sIHsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgfQogICAgICBodG1sLAogICAgICBib2R5LAogICAgICAjcGFnZSB7CiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgfQogICAgICBib2R5IHsKICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOSk7CiAgICAgIH0KICAgICAgYm9keSB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgfQogICAgICBjYW52YXMsCiAgICAgICNjYW52YXMsCiAgICAgIC5vdmVybGF5LAogICAgICBzdmcgewogICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICB9CiAgICAgIC5vdmVybGF5LAogICAgICBzdmcgewogICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOwogICAgICB9CgogICAgICAuY2VudGVyIHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICB9CiAgICAgIC5vdmVybGF5IHsKICAgICAgICB6LWluZGV4OiA5OTk5OTk5OTsKICAgICAgfQoKICAgICAgY2FudmFzIHsKICAgICAgICBjdXJzb3I6ICBjcm9zc2hhaXI7CiAgICAgIH0KCiAgICAgIGNhbnZhcy5wcmVzc2VkIHsKICAgICAgICBjdXJzb3I6ICBncmFiOwogICAgICB9CgogICAgICBodG1sLmlzLWxvY2tlZCwKICAgICAgaHRtbC5pcy1sb2NrZWQgYm9keSB7CiAgICAgICAgLyogd2FudCB0byBmaXggdGhlIGhlaWdodCB0byB0aGUgd2luZG93IGhlaWdodCAqLwogICAgICAgIGhlaWdodDogY2FsYyh2YXIoLS13aW5kb3ctaW5uZXItaGVpZ2h0KSAtIDFweCk7CgogICAgICAgIC8qIHdhbnQgdG8gYmxvY2sgYWxsIG92ZXJmbG93aW5nIGNvbnRlbnQgKi8KICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwoKICAgICAgICAvKiB3YW50IHRvIGV4Y2x1ZGUgcGFkZGluZyBmcm9tIHRoZSBoZWlnaHQgKi8KICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICB9CgogICAgICBAbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogICAgICAgIGNhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IDEwMHZtaW47CiAgICAgICAgICB3aWR0aDogYXV0bzsKICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTsKICAgICAgICB9CiAgICAgICAgLmNlbnRlciB7CiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgQG1lZGlhIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7CiAgICAgICAgY2FudmFzIHsKICAgICAgICAgIGhlaWdodDogYXV0bzsKICAgICAgICAgIG1heC1oZWlnaHQ6IDEwMHZoOwogICAgICAgICAgd2lkdGg6IDEwMHZ3OwogICAgICAgIH0KCiAgICAgICAgLmNlbnRlciB7CiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93OwogICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kOwogICAgICAgIH0KICAgICAgfQogICAgCiAgICAgICNjcm9zc2hhaXIgewogICAgICAgIG9wYWNpdHk6IDA7CiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgIH0KICAgIDwvc3R5bGU+CiAgICA8c2NyaXB0IHR5cGU9Im1vZHVsZSIgc3JjPSIuL2ZpcmUuanMiPjwvc2NyaXB0PgogICAgPCEtLSAgPHNjcmlwdCB0eXBlPSJtb2R1bGUiIHNyYz0iLi9maXJlL2J1aWxkL2ZpcmUtZGVidWcuanMiPjwvc2NyaXB0PiAgLS0+CiAgPC9oZWFkPgogIDxib2R5IGNsYXNzPSJjZW50ZXIiPgogICAgPGRpdiBpZD0iY2FudmFzIj48L2Rpdj4KICAgIDxzdmcgaWQ9ImNyb3NzaGFpciIgd2lkdGg9IjI1IiBoZWlnaHQ9IjI1IiB2ZXJzaW9uPSIxLjEiPgogICAgICA8ZGVmcz48L2RlZnM+CiAgICAgIDxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKC0xMjcgLTEyNykiPgogICAgICAgIDxwYXRoIGQ9Ik0xMzcgMTI3aDV2OWgtNXptLTEwIDEwaDl2NWgtOXptMTYgMGg5djVoLTl6bS02IDZoNXY5aC01eiIgc3R5bGU9ImZpbGwtcnVsZTogZXZlbm9kZCIgLz4KICAgICAgICA8cGF0aCBkPSJNMTM4IDEyOGgzdjdoLTN6bS0xMCAxMGg3djNoLTd6bTE2IDBoN3YzaC03em0tNiA2aDN2N2gtM3oiIHN0eWxlPSJmaWxsOiAjMTFlNWY0OyBmaWxsLXJ1bGU6IGV2ZW5vZGQiIC8+CiAgICAgIDwvZz4KICAgIDwvc3ZnPgogIDwvYm9keT4KPC9odG1sPgoAAAAAAAAAAHcJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QcAAAAAAADtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1078,
					1,
					"insert",
					{
						"characters": "\n.overlay"
					},
					"CgAAAAcDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAARAwAAAAAAAAAAAAARAwAAAAAAABIDAAAAAAAAAAAAABIDAAAAAAAAEwMAAAAAAAAAAAAAEwMAAAAAAAAUAwAAAAAAAAAAAAAUAwAAAAAAABUDAAAAAAAAAAAAABUDAAAAAAAAFgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwMAAAAAAAAHAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1079,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABYDAAAAAAAAFwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgMAAAAAAAAWAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1080,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABcDAAAAAAAAGQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwMAAAAAAAAXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1081,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAABgDAAAAAAAAGQMAAAAAAAAAAAAAGQMAAAAAAAAfAwAAAAAAAAAAAAAfAwAAAAAAACADAAAAAAAAAAAAACADAAAAAAAAJgMAAAAAAAAAAAAAGQMAAAAAAAAZAwAAAAAAAAYAAAAgICAgICAZAwAAAAAAACEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAMAAAAAAAAYAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1082,
					1,
					"insert",
					{
						"characters": "position"
					},
					"CAAAACEDAAAAAAAAIgMAAAAAAAAAAAAAIgMAAAAAAAAjAwAAAAAAAAAAAAAjAwAAAAAAACQDAAAAAAAAAAAAACQDAAAAAAAAJQMAAAAAAAAAAAAAJQMAAAAAAAAmAwAAAAAAAAAAAAAmAwAAAAAAACcDAAAAAAAAAAAAACcDAAAAAAAAKAMAAAAAAAAAAAAAKAMAAAAAAAApAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQMAAAAAAAAhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1083,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAACkDAAAAAAAALAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQMAAAAAAAApAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1084,
					1,
					"insert",
					{
						"characters": " absolute"
					},
					"CQAAACsDAAAAAAAALAMAAAAAAAAAAAAALAMAAAAAAAAtAwAAAAAAAAAAAAAtAwAAAAAAAC4DAAAAAAAAAAAAAC4DAAAAAAAALwMAAAAAAAAAAAAALwMAAAAAAAAwAwAAAAAAAAAAAAAwAwAAAAAAADEDAAAAAAAAAAAAADEDAAAAAAAAMgMAAAAAAAAAAAAAMgMAAAAAAAAzAwAAAAAAAAAAAAAzAwAAAAAAADQDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwMAAAAAAAArAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1099,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAAcDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAFQMAAAAAAAAAAAAACAMAAAAAAAAIAwAAAAAAAAYAAAAgICAgICAPAwAAAAAAABADAAAAAAAAAAAAABADAAAAAAAAFgMAAAAAAAAAAAAACQMAAAAAAAAJAwAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAABwMAAAAAAAAHAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1101,
					1,
					"insert",
					{
						"characters": ".crosshair"
					},
					"CwAAAAkDAAAAAAAACgMAAAAAAAAAAAAACwMAAAAAAAALAwAAAAAAAAYAAAAgICAgICAKAwAAAAAAAAsDAAAAAAAAAAAAAAsDAAAAAAAADAMAAAAAAAAAAAAADAMAAAAAAAANAwAAAAAAAAAAAAANAwAAAAAAAA4DAAAAAAAAAAAAAA4DAAAAAAAADwMAAAAAAAAAAAAADwMAAAAAAAAQAwAAAAAAAAAAAAAQAwAAAAAAABEDAAAAAAAAAAAAABEDAAAAAAAAEgMAAAAAAAAAAAAAEgMAAAAAAAATAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQMAAAAAAAAJAwAAAAAAAAAAAAAAAEJA"
				],
				[
					1103,
					1,
					"insert",
					{
						"characters": " 3"
					},
					"AwAAAAkDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAAKAwAAAAAAAAoAAAAuY3Jvc3NoYWlyCgMAAAAAAAALAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwMAAAAAAAAJAwAAAAAAAAAAAAAAAAAA"
				],
				[
					1104,
					2,
					"left_delete",
					null,
					"AgAAAAoDAAAAAAAACgMAAAAAAAABAAAAMwkDAAAAAAAACQMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAACwMAAAAAAAALAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1105,
					1,
					"insert",
					{
						"characters": "3cr"
					},
					"AwAAAAkDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAALAwAAAAAAAAAAAAALAwAAAAAAAAwDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQMAAAAAAAAJAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1106,
					2,
					"left_delete",
					null,
					"AgAAAAsDAAAAAAAACwMAAAAAAAABAAAAcgoDAAAAAAAACgMAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAADAMAAAAAAAAMAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1107,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAAoDAAAAAAAACwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgMAAAAAAAAKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1108,
					2,
					"left_delete",
					null,
					"AgAAAAoDAAAAAAAACgMAAAAAAAABAAAAIwkDAAAAAAAACQMAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAACwMAAAAAAAALAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1109,
					1,
					"insert",
					{
						"characters": "#crosshair"
					},
					"CgAAAAkDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAALAwAAAAAAAAAAAAALAwAAAAAAAAwDAAAAAAAAAAAAAAwDAAAAAAAADQMAAAAAAAAAAAAADQMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAARAwAAAAAAAAAAAAARAwAAAAAAABIDAAAAAAAAAAAAABIDAAAAAAAAEwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQMAAAAAAAAJAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1110,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABMDAAAAAAAAFAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwMAAAAAAAATAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1111,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABQDAAAAAAAAFgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAMAAAAAAAAUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1112,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAABUDAAAAAAAAFgMAAAAAAAAAAAAAFgMAAAAAAAAXAwAAAAAAAAAAAAAWAwAAAAAAABgDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQMAAAAAAAAVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1113,
					1,
					"insert",
					{
						"characters": "position"
					},
					"CAAAABgDAAAAAAAAGQMAAAAAAAAAAAAAGQMAAAAAAAAaAwAAAAAAAAAAAAAaAwAAAAAAABsDAAAAAAAAAAAAABsDAAAAAAAAHAMAAAAAAAAAAAAAHAMAAAAAAAAdAwAAAAAAAAAAAAAdAwAAAAAAAB4DAAAAAAAAAAAAAB4DAAAAAAAAHwMAAAAAAAAAAAAAHwMAAAAAAAAgAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAMAAAAAAAAYAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1114,
					1,
					"insert_snippet",
					{
						"contents": ": $0;"
					},
					"AQAAACADAAAAAAAAIwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAMAAAAAAAAgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1115,
					1,
					"insert",
					{
						"characters": " fixed"
					},
					"BgAAACIDAAAAAAAAIwMAAAAAAAAAAAAAIwMAAAAAAAAkAwAAAAAAAAAAAAAkAwAAAAAAACUDAAAAAAAAAAAAACUDAAAAAAAAJgMAAAAAAAAAAAAAJgMAAAAAAAAnAwAAAAAAAAAAAAAnAwAAAAAAACgDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgMAAAAAAAAiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1144,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAL8JAAAAAAAAwwkAAAAAAAAAAAAATggAAAAAAABTCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATggAAAAAAAC/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1154,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADbCQAAPCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkZpcmU8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIHNpemVzPSIxNngxNiAzMngzMiAxMjh4MTI4IiBocmVmPSJzdGF0aWMvZmlyZS5pY28iIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICBib2R5LAogICAgICBodG1sIHsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgfQogICAgICBodG1sLAogICAgICBib2R5LAogICAgICAjcGFnZSB7CiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgfQogICAgICBib2R5IHsKICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOSk7CiAgICAgIH0KICAgICAgYm9keSB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgfQogICAgICBjYW52YXMsCiAgICAgICNjYW52YXMsCiAgICAgIC5vdmVybGF5LAogICAgICBzdmcgewogICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICB9CiAgICAgIC5vdmVybGF5LAogICAgICBzdmcgewogICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOwogICAgICB9CgogICAgICAuY2VudGVyIHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICB9CiAgICAgIC5vdmVybGF5IHsKICAgICAgICB6LWluZGV4OiA5OTk5OTk5OTsKICAgICAgfQoKI2Nyb3NzaGFpciB7CiAgcG9zaXRpb246ICBmaXhlZDsKfQoKICAgICAgLm92ZXJsYXkgewogICAgICAgIHBvc2l0aW9uOiAgYWJzb2x1dGU7CiAgICAgIH0KCiAgICAgIGNhbnZhcyB7CiAgICAgICAgY3Vyc29yOiBjcm9zc2hhaXI7CiAgICAgIH0KCiAgICAgIGNhbnZhcy5wcmVzc2VkIHsKICAgICAgICBjdXJzb3I6IGdyYWI7CiAgICAgIH0KCiAgICAgIGh0bWwuaXMtbG9ja2VkLAogICAgICBodG1sLmlzLWxvY2tlZCBib2R5IHsKICAgICAgICAvKiB3YW50IHRvIGZpeCB0aGUgaGVpZ2h0IHRvIHRoZSB3aW5kb3cgaGVpZ2h0ICovCiAgICAgICAgaGVpZ2h0OiBjYWxjKHZhcigtLXdpbmRvdy1pbm5lci1oZWlnaHQpIC0gMXB4KTsKCiAgICAgICAgLyogd2FudCB0byBibG9jayBhbGwgb3ZlcmZsb3dpbmcgY29udGVudCAqLwogICAgICAgIG92ZXJmbG93OiBoaWRkZW47CgogICAgICAgIC8qIHdhbnQgdG8gZXhjbHVkZSBwYWRkaW5nIGZyb20gdGhlIGhlaWdodCAqLwogICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgIH0KCiAgICAgIEBtZWRpYSAob3JpZW50YXRpb246IHBvcnRyYWl0KSB7CiAgICAgICAgY2FudmFzIHsKICAgICAgICAgIGhlaWdodDogMTAwdm1pbjsKICAgICAgICAgIHdpZHRoOiBhdXRvOwogICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpOwogICAgICAgIH0KICAgICAgICAuY2VudGVyIHsKICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgIH0KICAgICAgfQogICAgICBAbWVkaWEgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHsKICAgICAgICBjYW52YXMgewogICAgICAgICAgaGVpZ2h0OiBhdXRvOwogICAgICAgICAgbWF4LWhlaWdodDogMTAwdmg7CiAgICAgICAgICB3aWR0aDogMTAwdnc7CiAgICAgICAgfQoKICAgICAgICAuY2VudGVyIHsKICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7CiAgICAgICAgfQogICAgICB9CgogICAgICAjY3Jvc3NoYWlyIHsKICAgICAgICBvcGFjaXR5OiAwOwogICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOwogICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICB9CiAgICA8L3N0eWxlPgogICAgPHNjcmlwdCB0eXBlPSJtb2R1bGUiIHNyYz0iLi9maXJlLmpzIj48L3NjcmlwdD4KICAgIDwhLS0gIDxzY3JpcHQgdHlwZT0ibW9kdWxlIiBzcmM9Ii4vZmlyZS9idWlsZC9maXJlLWRlYnVnLmpzIj48L3NjcmlwdD4gIC0tPgogIDwvaGVhZD4KICA8Ym9keSBjbGFzcz0iY2VudGVyIj4KICAgIDxkaXYgaWQ9ImNhbnZhcyI+PC9kaXY+CiAgICA8IS0tIDxzdmcgaWQ9ImNyb3NzaGFpciIgd2lkdGg9IjI1IiBoZWlnaHQ9IjI1IiB2ZXJzaW9uPSIxLjEiPgogICAgICA8ZGVmcz48L2RlZnM+CiAgICAgIDxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKC0xMjcgLTEyNykiPgogICAgICAgIDxwYXRoIGQ9Ik0xMzcgMTI3aDV2OWgtNXptLTEwIDEwaDl2NWgtOXptMTYgMGg5djVoLTl6bS02IDZoNXY5aC01eiIgc3R5bGU9ImZpbGwtcnVsZTogZXZlbm9kZCIgLz4KICAgICAgICA8cGF0aCBkPSJNMTM4IDEyOGgzdjdoLTN6bS0xMCAxMGg3djNoLTd6bTE2IDBoN3YzaC03em0tNiA2aDN2N2gtM3oiIHN0eWxlPSJmaWxsOiAjMTFlNWY0OyBmaWxsLXJ1bGU6IGV2ZW5vZGQiIC8+CiAgICAgIDwvZz4KICAgIDwvc3ZnPiAtLT4KICA8L2JvZHk+CjwvaHRtbD4KAAAAAAAAAADrCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATggAAAAAAABSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1171,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAFsIAAAAAAAAXAgAAAAAAAAAAAAAXAgAAAAAAABcCAAAAAAAAAcAAAAgICA8IS0t",
					"AQAAAAAAAAABAAAAYggAAAAAAABbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1174,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAM8JAAAAAAAA0AkAAAAAAAAAAAAA0AkAAAAAAADQCQAAAAAAAAMAAAAtLT4",
					"AQAAAAAAAAABAAAAzwkAAAAAAADSCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1213,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAD8JAAAAAAAAQwkAAAAAAAAAAAAA3ggAAAAAAADjCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3ggAAAAAAAA/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1236,
					1,
					"insert",
					{
						"characters": "809"
					},
					"AwAAAKkJAAAAAAAAqgkAAAAAAAAAAAAAqgkAAAAAAACrCQAAAAAAAAAAAACrCQAAAAAAAKwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQkAAAAAAACpCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1237,
					1,
					"left_delete",
					null,
					"AQAAAKsJAAAAAAAAqwkAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAArAkAAAAAAACsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1242,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADuCQAAPCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPkZpcmU8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIHNpemVzPSIxNngxNiAzMngzMiAxMjh4MTI4IiBocmVmPSJzdGF0aWMvZmlyZS5pY28iIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICBib2R5LAogICAgICBodG1sIHsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIG1hcmdpbjogMDsKICAgICAgfQogICAgICBodG1sLAogICAgICBib2R5LAogICAgICAjcGFnZSB7CiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgfQogICAgICBib2R5IHsKICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOSk7CiAgICAgIH0KICAgICAgYm9keSB7CiAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgfQogICAgICBjYW52YXMsCiAgICAgICNjYW52YXMsCiAgICAgIC5vdmVybGF5LAogICAgICBzdmcgewogICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICB9CiAgICAgIC5vdmVybGF5LAogICAgICBzdmcgewogICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOwogICAgICB9CgogICAgICAuY2VudGVyIHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICB9CiAgICAgIC5vdmVybGF5IHsKICAgICAgICB6LWluZGV4OiA5OTk5OTk5OTsKICAgICAgfQoKICAgICAgI2Nyb3NzaGFpciB7CiAgICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICB9CgogICAgICAub3ZlcmxheSB7CiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICB9CgogICAgICBjYW52YXMgewogICAgICAgIGN1cnNvcjogY3Jvc3NoYWlyOwogICAgICB9CgogICAgICBjYW52YXMucHJlc3NlZCB7CiAgICAgICAgY3Vyc29yOiBncmFiOwogICAgICB9CgogICAgICBodG1sLmlzLWxvY2tlZCwKICAgICAgaHRtbC5pcy1sb2NrZWQgYm9keSB7CiAgICAgICAgLyogd2FudCB0byBmaXggdGhlIGhlaWdodCB0byB0aGUgd2luZG93IGhlaWdodCAqLwogICAgICAgIGhlaWdodDogY2FsYyh2YXIoLS13aW5kb3ctaW5uZXItaGVpZ2h0KSAtIDFweCk7CgogICAgICAgIC8qIHdhbnQgdG8gYmxvY2sgYWxsIG92ZXJmbG93aW5nIGNvbnRlbnQgKi8KICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwoKICAgICAgICAvKiB3YW50IHRvIGV4Y2x1ZGUgcGFkZGluZyBmcm9tIHRoZSBoZWlnaHQgKi8KICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICB9CgogICAgICBAbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogICAgICAgIGNhbnZhcyB7CiAgICAgICAgICBoZWlnaHQ6IDEwMHZtaW47CiAgICAgICAgICB3aWR0aDogYXV0bzsKICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTsKICAgICAgICB9CiAgICAgICAgLmNlbnRlciB7CiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgQG1lZGlhIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7CiAgICAgICAgY2FudmFzIHsKICAgICAgICAgIGhlaWdodDogYXV0bzsKICAgICAgICAgIG1heC1oZWlnaHQ6IDEwMHZoOwogICAgICAgICAgd2lkdGg6IDEwMHZ3OwogICAgICAgIH0KCiAgICAgICAgLmNlbnRlciB7CiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93OwogICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kOwogICAgICAgIH0KICAgICAgfQoKICAgICAgI2Nyb3NzaGFpciB7CiAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTsKICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTsKICAgICAgfQogICAgPC9zdHlsZT4KICAgIDxzY3JpcHQgdHlwZT0ibW9kdWxlIiBzcmM9Ii4vZmlyZS5qcyI+PC9zY3JpcHQ+CiAgICA8IS0tICA8c2NyaXB0IHR5cGU9Im1vZHVsZSIgc3JjPSIuL2ZpcmUvYnVpbGQvZmlyZS1kZWJ1Zy5qcyI+PC9zY3JpcHQ+ICAtLT4KICA8L2hlYWQ+CiAgPGJvZHkgY2xhc3M9ImNlbnRlciI+CiAgICA8ZGl2IGlkPSJjYW52YXMiPjwvZGl2PgogICA8c3ZnIGlkPSJjcm9zc2hhaXIiIHdpZHRoPSIyNSIgaGVpZ2h0PSIyNSIgdmVyc2lvbj0iMS4xIj4KICAgICAgPGRlZnM+PC9kZWZzPgogICAgICA8ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMTI3IC0xMjcpIj4KICAgICAgICA8IS0tIDxwYXRoIGQ9Ik0xMzcgMTI3aDV2OWgtNXptLTEwIDEwaDl2NWgtOXptMTYgMGg5djVoLTl6bS02IDZoNXY5aC01eiIgc3R5bGU9ImZpbGwtcnVsZTogZXZlbm9kZCIgLz4gLS0+CiAgICAgICAgPHBhdGggZD0iTTEzOCAxMjhoM3Y3aC0zem0tMTAgMTBoN3YzaC03em0xNiAwaDd2M2gtN3ptLTYgNmgzdjdoLTN6IiBzdHlsZT0iZmlsbDogIzExZTVmNDgwOyBmaWxsLXJ1bGU6IGV2ZW5vZGQiIC8+CiAgICAgIDwvZz4KICAgIDwvc3ZnPiAgCiAgPC9ib2R5Pgo8L2h0bWw+CgAAAAAAAAAA7QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQcAAAAAAAA1BwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/stream/utils.js",
			"settings":
			{
				"buffer_size": 15634,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/stream/transform.js",
			"settings":
			{
				"buffer_size": 3325,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAATQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABNDQAAZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybTIpIHsKICByZXR1cm4gbmV3IFRyYW5zZm9ybVN0cmVhbSh7IHRyYW5zZm9ybTogdHJhbnNmb3JtMiB9KTsKfQpmdW5jdGlvbiBtYXAobWFwcGVyKSB7CiAgcmV0dXJuIHRyYW5zZm9ybShhc3luYyAoZGF0YSwgY29udHJvbGxlcikgPT4gewogICAgY29udHJvbGxlci5lbnF1ZXVlKGF3YWl0IG1hcHBlcihkYXRhKSk7CiAgfSk7Cn0KZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSkgewogIHJldHVybiB0cmFuc2Zvcm0oYXN5bmMgKGRhdGEsIGNvbnRyb2xsZXIpID0+IHsKICAgIGlmIChhd2FpdCBwcmVkaWNhdGUoZGF0YSkpIHsKICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGRhdGEpOwogICAgfQogIH0pOwp9CmZ1bmN0aW9uIHRha2UoY291bnQpIHsKICByZXR1cm4gdHJhbnNmb3JtKGFzeW5jIChkYXRhLCBjb250cm9sbGVyKSA9PiB7CiAgICBpZiAoY291bnQgPiAwKSB7CiAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShkYXRhKTsKICAgICAgY291bnQtLTsKICAgIH0KICB9KTsKfQpmdW5jdGlvbiBkcm9wKGNvdW50KSB7CiAgcmV0dXJuIHRyYW5zZm9ybShhc3luYyAoZGF0YSwgY29udHJvbGxlcikgPT4gewogICAgaWYgKGNvdW50ID4gMCkgewogICAgICBjb3VudC0tOwogICAgICByZXR1cm47CiAgICB9CiAgICBjb250cm9sbGVyLmVucXVldWUoZGF0YSk7CiAgfSk7Cn0KZnVuY3Rpb24gY29uY2F0KC4uLnN0cmVhbXMpIHsKICBjb25zdCB7IHJlYWRhYmxlLCB3cml0YWJsZSB9ID0gbmV3IFRyYW5zZm9ybVN0cmVhbSgpOwogIHN0cmVhbXMucmVkdWNlKAogICAgKHByZXYsIHN0cmVhbSkgPT4gcHJldi50aGVuKCgpID0+IHN0cmVhbS5waXBlVG8od3JpdGFibGUsIHsgcHJldmVudENsb3NlOiB0cnVlIH0pKSwKICAgIFByb21pc2UucmVzb2x2ZSgpCiAgKS50aGVuKCgpID0+IHdyaXRhYmxlLmNsb3NlKCkpOwogIHJldHVybiByZWFkYWJsZTsKfQpmdW5jdGlvbiB6aXBXaXRoKHN0cmVhbSkgewogIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTsKICByZXR1cm4gbmV3IFRyYW5zZm9ybVN0cmVhbSh7CiAgICBmbHVzaCgpIHsKICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7CiAgICB9LAogICAgdHJhbnNmb3JtOiBhc3luYyAoZGF0YSwgY29udHJvbGxlcikgPT4gewogICAgICBpZiAoYXdhaXQgcmVhZGVyLmNsb3NlZCkKICAgICAgICByZXR1cm47CiAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcmVhZGVyLnJlYWQoKTsKICAgICAgaWYgKHZhbHVlLmRvbmUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29udHJvbGxlci5lbnF1ZXVlKFtkYXRhLCB2YWx1ZS52YWx1ZV0pOwogICAgfQogIH0pOwp9CmZ1bmN0aW9uIHppcChzdHJlYW0xLCBzdHJlYW0yKSB7CiAgY29uc3QgeyByZWFkYWJsZSwgd3JpdGFibGUgfSA9IG5ldyBUcmFuc2Zvcm1TdHJlYW0oKTsKICAoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICBjb25zdCByZWFkZXIxID0gc3RyZWFtMS5nZXRSZWFkZXIoKTsKICAgIGNvbnN0IHJlYWRlcjIgPSBzdHJlYW0yLmdldFJlYWRlcigpOwogICAgY29uc3Qgd3JpdGVyID0gd3JpdGFibGUuZ2V0V3JpdGVyKCk7CiAgICB0cnkgewogICAgICBmb3IgKDsgOyApIHsKICAgICAgICBjb25zdCBbaXRlbTEsIGl0ZW0yXSA9IGF3YWl0IFByb21pc2UuYWxsKFsKICAgICAgICAgIHJlYWRlcjEucmVhZCgpLAogICAgICAgICAgcmVhZGVyMi5yZWFkKCkKICAgICAgICBdKTsKICAgICAgICBpZiAoaXRlbTEuZG9uZSB8fCBpdGVtMi5kb25lKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgd3JpdGVyLndyaXRlKFtpdGVtMS52YWx1ZSwgaXRlbTIudmFsdWVdKTsKICAgICAgfQogICAgfSBmaW5hbGx5IHsKICAgICAgcmVhZGVyMS5yZWxlYXNlTG9jaygpOwogICAgICByZWFkZXIyLnJlbGVhc2VMb2NrKCk7CiAgICAgIHdyaXRlci5yZWxlYXNlTG9jaygpOwogICAgfQogIH0pKCk7CiAgcmV0dXJuIHJlYWRhYmxlOwp9CmZ1bmN0aW9uIGVudW1lcmF0ZSgpIHsKICBsZXQgaW5kZXggPSAwOwogIHJldHVybiBuZXcgVHJhbnNmb3JtU3RyZWFtKHsKICAgIHRyYW5zZm9ybShkYXRhLCBjb250cm9sbGVyKSB7CiAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShbaW5kZXgrKywgZGF0YV0pOwogICAgfQogIH0pOwp9CmZ1bmN0aW9uIGlvdGEobiA9IEluZmluaXR5KSB7CiAgbGV0IGluZGV4ID0gMDsKICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHsKICAgIHB1bGwoY29udHJvbGxlcikgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIGlmIChpbmRleCA8IG4pIHsKICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGluZGV4KyspOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpOwogICAgICAgICAgfQogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgIH0sIDApOwogICAgICB9KTsKICAgIH0KICB9KTsKfQpmdW5jdGlvbiBkZWJvdW5jZShtcykgewogIGxldCB0aW1lcjsKICByZXR1cm4gbmV3IFRyYW5zZm9ybVN0cmVhbSh7CiAgICB0cmFuc2Zvcm0oZGF0YSwgY29udHJvbGxlcikgewogICAgICBpZiAoIXRpbWVyKSB7CiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGRhdGEpOwogICAgICB9CiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7CiAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgdGltZXIgPSB2b2lkIDA7CiAgICAgIH0sIG1zKTsKICAgIH0sCiAgICBmbHVzaCgpIHsKICAgICAgaWYgKHRpbWVyKSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTsKICAgICAgICB0aW1lciA9IHZvaWQgMDsKICAgICAgfQogICAgfQogIH0pOwp9CmZ1bmN0aW9uIHRocm90dGxlKG1zKSB7CiAgbGV0IHRpbWVyOwogIHJldHVybiBuZXcgVHJhbnNmb3JtU3RyZWFtKHsKICAgIHRyYW5zZm9ybShkYXRhLCBjb250cm9sbGVyKSB7CiAgICAgIGlmICghdGltZXIpIHsKICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZGF0YSk7CiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIHRpbWVyID0gdm9pZCAwOwogICAgICAgIH0sIG1zKTsKICAgICAgfQogICAgfSwKICAgIGZsdXNoKCkgewogICAgICBpZiAodGltZXIpIHsKICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpOwogICAgICAgIHRpbWVyID0gdm9pZCAwOwogICAgICB9CiAgICB9CiAgfSk7Cn0KZXhwb3J0IHsKICBjb25jYXQsCiAgZGVib3VuY2UsCiAgZHJvcCwKICBlbnVtZXJhdGUsCiAgZmlsdGVyLAogIGlvdGEsCiAgbWFwLAogIHRha2UsCiAgdGhyb3R0bGUsCiAgdHJhbnNmb3JtLAogIHppcCwKICB6aXBXaXRoCn07Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbS5qcy5tYXAKAAAAAAAAAAD9DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQ0AAAAAAABNDQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/stream/transformStream.js",
			"settings":
			{
				"buffer_size": 14288,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/schematicRenderer.js",
			"settings":
			{
				"buffer_size": 6751,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYAAAAAAAAANgAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/eagle/components.js",
			"settings":
			{
				"buffer_size": 3776,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"cut",
					null,
					"AQAAAMcFAAAAAAAAxwUAAAAAAAA1AAAAaW1wb3J0IHsgV2lyZVBhdGggfSBmcm9tICcuL2NvbXBvbmVudHMvd2lyZVBhdGguanMnOwo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcFAAAAAAAA/AUAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					2,
					"paste",
					null,
					"AgAAAMcFAAAAAAAA/AUAAAAAAAAAAAAA/AUAAAAAAAAxBgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcFAAAAAAAAxwUAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "ucfirst"
					},
					"CAAAAAUGAAAAAAAABgYAAAAAAAAAAAAABgYAAAAAAAAGBgAAAAAAAAgAAABXaXJlUGF0aAYGAAAAAAAABwYAAAAAAAAAAAAABwYAAAAAAAAIBgAAAAAAAAAAAAAIBgAAAAAAAAkGAAAAAAAAAAAAAAkGAAAAAAAACgYAAAAAAAAAAAAACgYAAAAAAAALBgAAAAAAAAAAAAALBgAAAAAAAAwGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUGAAAAAAAADQYAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "./misc.js"
					},
					"CgAAABYGAAAAAAAAFwYAAAAAAAAAAAAAFwYAAAAAAAAXBgAAAAAAABcAAAAvY29tcG9uZW50cy93aXJlUGF0aC5qcxcGAAAAAAAAGAYAAAAAAAAAAAAAGAYAAAAAAAAZBgAAAAAAAAAAAAAZBgAAAAAAABoGAAAAAAAAAAAAABoGAAAAAAAAGwYAAAAAAAAAAAAAGwYAAAAAAAAcBgAAAAAAAAAAAAAcBgAAAAAAAB0GAAAAAAAAAAAAAB0GAAAAAAAAHgYAAAAAAAAAAAAAHgYAAAAAAAAfBgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYGAAAAAAAALQYAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "eagle2svg.js",
			"settings":
			{
				"buffer_size": 2511,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC7CAAAIyEvdXNyL2Jpbi9lbnYgcWpzbQoKCmltcG9ydCAqIGFzIHBhdGggZnJvbSAnLi9saWIvcGF0aC5qcyc7CgppbXBvcnQgeyBsb2csIEVhZ2xlRG9jdW1lbnQsIFJlbmRlcmVyLCBFYWdsZVByb2plY3QgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CgppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CgppbXBvcnQgeyBXcml0ZUZpbGUgfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwppbXBvcnQgeyBnZXRPcHQgfSBmcm9tICd1dGlsJzsKaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnOwppbXBvcnQgeyBSZWFjdENvbXBvbmVudCwgcmVuZGVyIH0gZnJvbSAnLi9saWIvZG9tL3ByZWFjdENvbXBvbmVudC5qcyc7CmltcG9ydCByZW5kZXJUb1N0cmluZyBmcm9tICcuL2xpYi9wcmVhY3QtcmVuZGVyLXRvLXN0cmluZy5qcyc7CgoKbGV0IGRlYnVnRmxhZyA9IGZhbHNlOwoKZnVuY3Rpb24gcmVuZGVyKGRvYywgZmlsZW5hbWUpIHsKICBpZihkb2MgaW5zdGFuY2VvZiBFYWdsZVByb2plY3QpIHsKICAgIHJlbmRlcihkb2Muc2NoZW1hdGljKTsKICAgIHJlbmRlcihkb2MuYm9hcmQpOwogICAgcmV0dXJuOwogIH0KICBsZXQgcmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoZG9jLCBSZWFjdENvbXBvbmVudC5hcHBlbmQsIGRlYnVnRmxhZyk7CgogIC8qIHJlbmRlcmVyLnNldFBhbGV0dGUoWwogICAgWzB4ZmYsIDB4ZmYsIDB4ZmZdLAogICAgWzB4NGIsIDB4NGIsIDB4YTVdLAogICAgWzAsIDAsIDBdLAogICAgWzB4NGIsIDB4YTUsIDB4YTVdLAogICAgWzAsIDAsIDBdLAogICAgWzB4YTUsIDB4NGIsIDB4YTVdLAogICAgWzB4YTUsIDB4YTUsIDB4NGJdLAogICAgWzAsIDAsIDBdLAogICAgWzB4NGIsIDB4NGIsIDB4ZmZdLAogICAgWzB4NGIsIDB4ZmYsIDB4NGJdLAogICAgWzB4NGIsIDB4ZmYsIDB4ZmZdLAogICAgWzB4ZmYsIDB4NGIsIDB4NGJdLAogICAgWzB4ZmYsIDB4NGIsIDB4ZmZdLAogICAgWzB4ZmYsIDB4ZmYsIDB4NGJdLAogICAgWzB4NGIsIDB4NGIsIDB4NGJdLAogICAgWzB4YTUsIDB4YTUsIDB4YTVdLAogICAgWzAsIDAsIDBdCiAgXS5tYXAoKFtyLGcsYl0pID0+IG5ldyBSR0JBKHIsZyxiKSkpOyovCgogIGxldCBzdHI7CiAgbGV0IHN2ZyA9IHJlbmRlcmVyLnJlbmRlcihkb2MpOwogIHRyeSB7CiAgICBzdHIgPSByZW5kZXJUb1N0cmluZyhzdmcpOwogIH0gY2F0Y2goZSkgewogICAgY29uc29sZS5sb2coJ0VSUk9SOicsIGUpOwogICAgY29uc29sZS5sb2coJ1NUQUNLOicsIGUuc3RhY2spOwogIH0KICBsZXQgeG1sID0gZnJvbVhNTChzdHIpOwoKICBpZihmaWxlbmFtZSkgewogICAgbGV0IHJldDsKICAgIHJldCA9IFdyaXRlRmlsZShmaWxlbmFtZSwgKHN0ciA9IHRvWE1MKHhtbCkpKTsKICAgIGNvbnNvbGUubG9nKGBTYXZpbmcgdG8gJyR7ZmlsZW5hbWV9Jy4uLmAsIHJldCk7CiAgfQogIHJldHVybiBzdHI7Cn0KCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsKICAgIGluc3BlY3RPcHRpb25zOiB7IG1heEFycmF5TGVuZ3RoOiAxMDAsIGNvbG9yczogdHJ1ZSwgZGVwdGg6IDIsIGNvbXBhY3Q6IDAsIGN1c3RvbUluc3BlY3Q6IHRydWUgfQogIH0pOwoKICBsZXQgcGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICBkZWJ1ZzogW2ZhbHNlLCB2YWx1ZSA9PiAoZGVidWdGbGFnID0gdmFsdWUpLCAneCddLAogICAgICAnb3V0cHV0LWRpcic6IFt0cnVlLCBudWxsLCAnZCddLAogICAgICAnQCc6ICdpbnB1dCcKICAgIH0sCiAgICBhcmdzCiAgKTsKCiAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgbGV0IGRvYyA9IEVhZ2xlRG9jdW1lbnQub3BlbihhcmcsIGYgPT4gIHJlYWRGaWxlU3luYyhmLCAndXRmLTgnKSk7CiAgICBsZXQgZmlsZSA9IHBhdGguYmFzZW5hbWUoZG9jLmZpbGVuYW1lLCAnLicgKyBkb2MudHlwZSkgKyAnLScgKyB7IHNjaDogJ3NjaGVtYXRpYycsIGJyZDogJ2JvYXJkJywgbGJyOiAnbGlicmFyeScgfVtkb2MudHlwZV0gKyAnLnN2Zyc7CgogICAgaWYocGFyYW1zWydvdXRwdXQtZGlyJ10pIGZpbGUgPSBwYXRoLmpvaW4ocGFyYW1zWydvdXRwdXQtZGlyJ10sIGZpbGUpOwoKICAgIHJlbmRlcihkb2MsIGZpbGUpOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7Cn0KAAAAAAAAAADQCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsAAAAAAAAAiwAAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADQCQAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgKiBhcyBkZWVwIGZyb20gJy4vbGliL2RlZXAuanMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCB7IGxvZywgRWFnbGVEb2N1bWVudCwgUmVuZGVyZXIsIEVhZ2xlUHJvamVjdCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZSc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgcmVhZCBhcyBmcm9tWE1MLCB3cml0ZSBhcyB0b1hNTCB9IGZyb20gJy4vbGliL3htbC5qcyc7CmltcG9ydCB7IFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCB7IGdldE9wdCB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IFJlYWN0Q29tcG9uZW50LCByZW5kZXIgfSBmcm9tICcuL2xpYi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vbGliL3ByZWFjdC1yZW5kZXItdG8tc3RyaW5nLmpzJzsKaW1wb3J0IHsgUkdCQSwgaXNSR0JBLCBJbW11dGFibGVSR0JBLCBkZWZhdWx0IGFzIHJnYmEgfSBmcm9tICcuL2xpYi9jb2xvci9yZ2JhLmpzJzsKCmxldCBkZWJ1Z0ZsYWcgPSBmYWxzZTsKCmZ1bmN0aW9uIHJlbmRlcihkb2MsIGZpbGVuYW1lKSB7CiAgaWYoZG9jIGluc3RhbmNlb2YgRWFnbGVQcm9qZWN0KSB7CiAgICByZW5kZXIoZG9jLnNjaGVtYXRpYyk7CiAgICByZW5kZXIoZG9jLmJvYXJkKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGRvYywgUmVhY3RDb21wb25lbnQuYXBwZW5kLCBkZWJ1Z0ZsYWcpOwoKICAvKiByZW5kZXJlci5zZXRQYWxldHRlKFsKICAgIFsweGZmLCAweGZmLCAweGZmXSwKICAgIFsweDRiLCAweDRiLCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweGE1LCAweDRiLCAweGE1XSwKICAgIFsweGE1LCAweGE1LCAweDRiXSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweDRiLCAweGZmXSwKICAgIFsweDRiLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweGZmLCAweGZmXSwKICAgIFsweGZmLCAweDRiLCAweDRiXSwKICAgIFsweGZmLCAweDRiLCAweGZmXSwKICAgIFsweGZmLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweDRiLCAweDRiXSwKICAgIFsweGE1LCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXQogIF0ubWFwKChbcixnLGJdKSA9PiBuZXcgUkdCQShyLGcsYikpKTsqLwoKICBsZXQgc3RyOwogIGxldCBzdmcgPSByZW5kZXJlci5yZW5kZXIoZG9jKTsKICB0cnkgewogICAgc3RyID0gcmVuZGVyVG9TdHJpbmcoc3ZnKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlKTsKICAgIGNvbnNvbGUubG9nKCdTVEFDSzonLCBlLnN0YWNrKTsKICB9CiAgbGV0IHhtbCA9IGZyb21YTUwoc3RyKTsKCiAgaWYoZmlsZW5hbWUpIHsKICAgIGxldCByZXQ7CiAgICByZXQgPSBXcml0ZUZpbGUoZmlsZW5hbWUsIChzdHIgPSB0b1hNTCh4bWwpKSk7CiAgICBjb25zb2xlLmxvZyhgU2F2aW5nIHRvICcke2ZpbGVuYW1lfScuLi5gLCByZXQpOwogIH0KICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBtYXhBcnJheUxlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiAyLCBjb21wYWN0OiAwLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgZGVidWc6IFtmYWxzZSwgdmFsdWUgPT4gKGRlYnVnRmxhZyA9IHZhbHVlKSwgJ3gnXSwKICAgICAgJ291dHB1dC1kaXInOiBbdHJ1ZSwgbnVsbCwgJ2QnXSwKICAgICAgJ0AnOiAnaW5wdXQnCiAgICB9LAogICAgYXJncwogICk7CgogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkb2MgPSBFYWdsZURvY3VtZW50Lm9wZW4oYXJnLCBmID0+ICByZWFkRmlsZVN5bmMoZiwgJ3V0Zi04JykpOwogICAgbGV0IGZpbGUgPSBwYXRoLmJhc2VuYW1lKGRvYy5maWxlbmFtZSwgJy4nICsgZG9jLnR5cGUpICsgJy0nICsgeyBzY2g6ICdzY2hlbWF0aWMnLCBicmQ6ICdib2FyZCcsIGxicjogJ2xpYnJhcnknIH1bZG9jLnR5cGVdICsgJy5zdmcnOwoKICAgIGlmKHBhcmFtc1snb3V0cHV0LWRpciddKSBmaWxlID0gcGF0aC5qb2luKHBhcmFtc1snb3V0cHV0LWRpciddLCBmaWxlKTsKCiAgICByZW5kZXIoZG9jLCBmaWxlKTsKICB9Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwp9CgAAAAAAAAAAzwkAAAAAAAAAAAAAAAAAAAAAAADPCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwIAAAAAAAATAgAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADPCQAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgKiBhcyBkZWVwIGZyb20gJy4vbGliL2RlZXAuanMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCB7IGxvZywgRWFnbGVEb2N1bWVudCwgUmVuZGVyZXIsIEVhZ2xlUHJvamVjdCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZSc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgcmVhZCBhcyBmcm9tWE1MLCB3cml0ZSBhcyB0b1hNTCB9IGZyb20gJy4vbGliL3htbC5qcyc7CmltcG9ydCB7IFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCB7IGdldE9wdCB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IFJlYWN0Q29tcG9uZW50LCByZW5kZXIgfSBmcm9tICcuL2xpYi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vbGliL3ByZWFjdC1yZW5kZXItdG8tc3RyaW5nLmpzJzsKaW1wb3J0IHsgUkdCQSwgaXNSR0JBLCBJbW11dGFibGVSR0JBLCBkZWZhdWx0IGFzIHJnYmEgfSBmcm9tICcuL2xpYi9jb2xvci9yZ2JhLmpzJzsKCmxldCBkZWJ1Z0ZsYWcgPSBmYWxzZTsKCmZ1bmN0aW9uIHJlbmRlcihkb2MsIGZpbGVuYW1lKSB7CiAgaWYoZG9jIGluc3RhbmNlb2YgRWFnbGVQcm9qZWN0KSB7CiAgICByZW5kZXIoZG9jLnNjaGVtYXRpYyk7CiAgICByZW5kZXIoZG9jLmJvYXJkKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGRvYywgUmVhY3RDb21wb25lbnQuYXBwZW5kLCBkZWJ1Z0ZsYWcpOwoKICAvKiByZW5kZXJlci5zZXRQYWxldHRlKFsKICAgIFsweGZmLCAweGZmLCAweGZmXSwKICAgIFsweDRiLCAweDRiLCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweGE1LCAweDRiLCAweGE1XSwKICAgIFsweGE1LCAweGE1LCAweDRiXSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweDRiLCAweGZmXSwKICAgIFsweDRiLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweGZmLCAweGZmXSwKICAgIFsweGZmLCAweDRiLCAweDRiXSwKICAgIFsweGZmLCAweDRiLCAweGZmXSwKICAgIFsweGZmLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweDRiLCAweDRiXSwKICAgIFsweGE1LCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXQogIF0ubWFwKChbcixnLGJdKSA9PiBuZXcgUkdCQShyLGcsYikpKTsqLwoKICBsZXQgc3RyOwogIGxldCBzdmcgPSByZW5kZXJlci5yZW5kZXIoZG9jKTsKICB0cnkgewogICAgc3RyID0gcmVuZGVyVG9TdHJpbmcoc3ZnKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlKTsKICAgIGNvbnNvbGUubG9nKCdTVEFDSzonLCBlLnN0YWNrKTsKICB9CiAgbGV0IHhtbCA9IGZyb21YTUwoc3RyKTsKCiAgaWYoZmlsZW5hbWUpIHsKICAgIGxldCByZXQ7CiAgICByZXQgPSBXcml0ZUZpbGUoZmlsZW5hbWUsIChzdHIgPSB0b1hNTCh4bWwpKSk7CiAgICBjb25zb2xlLmxvZyhgU2F2aW5nIHRvICcke2ZpbGVuYW1lfScuLi5gLCByZXQpOwogIH0KICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBtYXhBcnJheUxlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiAyLCBjb21wYWN0OiAwLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgZGVidWc6IFtmYWxzZSwgdmFsdWUgPT4gKGRlYnVnRmxhZyA9IHZhbHVlKSwgJ3gnXSwKICAgICAgJ291dHB1dC1kaXInOiBbdHJ1ZSwgbnVsbCwgJ2QnXSwKICAgICAgJ0AnOiAnaW5wdXQnCiAgICB9LAogICAgYXJncwogICk7CgogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkb2MgPSBFYWdsZURvY3VtZW50Lm9wZW4oYXJnLCBmID0+IHJlYWRGaWxlU3luYyhmLCAndXRmLTgnKSk7CiAgICBsZXQgZmlsZSA9IHBhdGguYmFzZW5hbWUoZG9jLmZpbGVuYW1lLCAnLicgKyBkb2MudHlwZSkgKyAnLScgKyB7IHNjaDogJ3NjaGVtYXRpYycsIGJyZDogJ2JvYXJkJywgbGJyOiAnbGlicmFyeScgfVtkb2MudHlwZV0gKyAnLnN2Zyc7CgogICAgaWYocGFyYW1zWydvdXRwdXQtZGlyJ10pIGZpbGUgPSBwYXRoLmpvaW4ocGFyYW1zWydvdXRwdXQtZGlyJ10sIGZpbGUpOwoKICAgIHJlbmRlcihkb2MsIGZpbGUpOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7Cn0KAAAAAAAAAADPCQAAAAAAAAAAAAAAAAAAAAAAAM8JAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMCAAAAAAAAEwIAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pcb-conversion.js",
			"settings":
			{
				"buffer_size": 5484,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAABsFQAAaW1wb3J0IHsgUmVhZEZpbGUsIFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7CmltcG9ydCB7IGV4ZWMsIHNwYXduIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0IGNoaWxkX3Byb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7CmltcG9ydCB7IEV4ZWNUb29sIH0gZnJvbSAnLi9vcy1oZWxwZXJzLmpzJzsKZXhwb3J0IHsgRXhlY1Rvb2wgfSBmcm9tICcuL29zLWhlbHBlcnMuanMnOwoKZXhwb3J0IGZ1bmN0aW9uIEVhZ2xlVG9HZXJiZXIoYm9hcmRGaWxlLCBvcHRzID0ge30pIHsKICBjb25zb2xlLmxvZygnY29udmVydFRvR2VyYmVyJywgeyBib2FyZEZpbGUsIG9wdHMgfSk7CiAgbGV0IHsKICAgIGxheWVycyA9IG9wdHMuc2lkZSA9PSAnb3V0bGluZScgPyBbJ01lYXN1cmVzJ10gOiBvcHRzLmRyaWxsID8gWydEcmlsbHMnLCAnSG9sZXMnXSA6IFtvcHRzLmZyb250ID8gJ1RvcCcgOiAnQm90dG9tJywgJ1BhZHMnLCAnVmlhcyddLAogICAgZm9ybWF0ID0gb3B0cy5kcmlsbCA/ICdFWENFTExPTicgOiAnR0VSQkVSX1JTMjc0WCcsCiAgICBkYXRhLAogICAgZmV0Y2ggPSBmYWxzZSwKICAgIGZyb250LAogICAgYmFjaywKICAgIG91dGRpciA9IHN0ZC5nZXRlbnYoJ1RNUERJUicpID8/ICcvdG1wJwogIH0gPSBvcHRzOwogIGNvbnN0IGJhc2UgPSBwYXRoLmJhc2VuYW1lKGJvYXJkRmlsZSwgJy5icmQnKTsKICBjb25zdCBmb3JtYXRUb0V4dCA9IChsYXllcnMsIGZvcm1hdCkgPT4gewogICAgaWYob3B0cy5kcmlsbCB8fCBmb3JtYXQuc3RhcnRzV2l0aCgnRVhDRUxMT04nKSB8fCBsYXllcnMuaW5kZXhPZignRHJpbGxzJykgIT0gLTEgfHwgbGF5ZXJzLmluZGV4T2YoJ0hvbGVzJykgIT0gLTEpIHJldHVybiAnVFhUJzsKICAgIGlmKGxheWVycy5pbmRleE9mKCdCb3R0b20nKSAhPSAtMSB8fCBmb3JtYXQuc3RhcnRzV2l0aCgnR0VSQkVSJykpIHJldHVybiBvcHRzLnNpZGUgPT0gJ291dGxpbmUnID8gJ0dLTycgOiBmcm9udCA/ICdHVEwnIDogJ0dCTCc7CgogICAgcmV0dXJuICdyczI3NHgnOwogIH07CiAgY29uc3QgZ2VyYmVyRmlsZSA9IGAke291dGRpcn0vJHtiYXNlfS4ke2Zvcm1hdFRvRXh0KGxheWVycywgZm9ybWF0KX1gOwogIGNvbnN0IGNtZCA9IGBlYWdsZSAtWCAtZCAke2Zvcm1hdH0gLW8gIiR7Z2VyYmVyRmlsZX0iICIke2JvYXJkRmlsZX0iICR7bGF5ZXJzLmpvaW4oJyAnKX1gOwogIGNvbnN0IGFyZ3MgPSBbJy1YJywgJy1kJywgZm9ybWF0LCAnLW8nLCBnZXJiZXJGaWxlLCBib2FyZEZpbGUsIC4uLmxheWVyc107CiAgY29uc3QgYmluID0gJy9vcHQvZWFnbGUtNy4yLjAvYmluL2VhZ2xlJzsKCiAgcmV0dXJuIFtiaW5dLmNvbmNhdChhcmdzKTsKCiAgLyogIGNvbnNvbGUubG9nKGBleGVjdXRpbmcgJyR7Y21kfSdgKTsKICAvLyAgY29uc3QgY2hpbGQgPSBleGVjKGAke2NtZH0gMj4mMSAwPC9kZXYvbnVsbGAsIHt9KTsKICBjb25zdCBjaGlsZCA9IHNwYXduKGJpbiwgYXJncywgewogICAgLy8gIHN0ZGlvOiBbICdpbmhlcml0JywnaW5oZXJpdCcsMV0KICB9KTsKICBjb25zb2xlLmxvZyhgY2hpbGQ6YCwgY2hpbGQpOwogIC8vIGRvIHdoYXRldmVyIHlvdSB3YW50IHdpdGggYGNoaWxkYCBoZXJlIC0gaXQncyBhIENoaWxkUHJvY2VzcyBpbnN0YW5jZSBqdXN0CiAgLy8gd2l0aCBwcm9taXNlLWZyaWVuZGx5IGAudGhlbigpYCAmIGAuY2F0Y2goKWAgZnVuY3Rpb25zIGFkZGVkIHRvIGl0IQogIGxldCBvdXRwdXQgPSAnJzsKCiAgbGV0IGNvZGUgPSBjaGlsZC53YWl0KCk7CgogIGNvbnNvbGUubG9nKGBjb2RlOiAke2NvZGV9YCk7CiAgLy8gIGNvbnNvbGUubG9nKGBvdXRwdXQ6ICR7b3V0cHV0fWApOwogIGlmKGNvZGUgIT09IDApIHRocm93IG5ldyBFcnJvcihvdXRwdXQpOwogIGlmKG91dHB1dCkgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1xzKlxyKlxuL2csICdcbicpOwogIGxldCByZXN1bHQgPSB7IGNvZGUsIG91dHB1dCB9OwogIGlmKG9wdHMuZmV0Y2gpIHJlc3VsdC5kYXRhID0gUmVhZEZpbGUoR2V0VkZTUGF0aChnZXJiZXJGaWxlKSk7IC8vIGF3YWl0IChhd2FpdCBmcy5yZWFkRmlsZShHZXRWRlNQYXRoKGdlcmJlckZpbGUpKSkudG9TdHJpbmcoKTsKICByZXN1bHQuZmlsZSA9IGdlcmJlckZpbGU7CiAgY29uc29sZS5sb2coJ2NvbnZlcnRUb0dlcmJlciByZXN1bHQgPScsIHJlc3VsdCk7CiAgcmV0dXJuIHJlc3VsdDsqLwp9CgpleHBvcnQgZnVuY3Rpb24gR2VyYmVyVG9HY29kZShnZXJiZXJGaWxlLCBhbGxPcHRzID0ge30pIHsKICBjb25zdCBiYXNlbmFtZSA9IGdlcmJlckZpbGUucmVwbGFjZSgvLipcLy9nLCAnJykucmVwbGFjZSgvXC5bXi5dKiQvLCAnJyk7CiAgbGV0IHsgZmV0Y2gsIGRhdGEsIHJhdywgLi4ub3B0cyB9ID0gYWxsT3B0czsKICBvcHRzID0gewogICAgYmFzZW5hbWUsCiAgICB6c2FmZTogJzFtbScsCiAgICB6Y2hhbmdlOiAnMm1tJywKICAgIHp3b3JrOiAnLTFtbScsCiAgICB6ZHJpbGw6ICctMm1tJywKICAgIHpjdXQ6ICctMm1tJywKICAgICdjdXR0ZXItZGlhbWV0ZXInOiAnMW1tJywKICAgICdkcmlsbC1mZWVkJzogMTAwMCwKICAgICdkcmlsbC1zcGVlZCc6IDEwMDAwLAogICAgJ21pbGwtZmVlZCc6IDYwMCwKICAgICdtaWxsLXNwZWVkJzogMTYwMDAsCiAgICAnY3V0LWZlZWQnOiAyMDAsCiAgICAnY3V0LXNwZWVkJzogMTAwMDAsCiAgICAnY3V0LWluZmVlZCc6ICcxbW0nLAoKICAgICdvdXRwdXQtZGlyJzogJy4vdG1wLycsCiAgICAuLi5vcHRzCiAgfTsKICBpZihvcHRzLmZyb250ID09IHVuZGVmaW5lZCAmJiBvcHRzLmJhY2sgPT0gdW5kZWZpbmVkICYmIG9wdHMuZHJpbGwgPT0gdW5kZWZpbmVkKSBvcHRzLmJhY2sgPSBnZXJiZXJGaWxlOwogIGxldCBzaWRlcyA9IFtdOwoKICBmb3IobGV0IHNpZGUgb2YgWydmcm9udCcsICdiYWNrJywgJ2RyaWxsJywgJ291dGxpbmUnXSkKICAgIGlmKHNpZGUgaW4gb3B0cykgewogICAgICBpZih0eXBlb2Ygb3B0c1tzaWRlXSAhPSAnc3RyaW5nJykgb3B0c1tzaWRlXSA9IGdlcmJlckZpbGU7CiAgICAgIHNpZGVzLnB1c2goc2lkZSk7CiAgICB9CgogIGlmKG9wdHMudm9yb25vaSAmJiAhb3B0cy52ZWN0b3JpYWwpIG9wdHMudmVjdG9yaWFsID0gMTsKCiAgY29uc29sZS5kZWJ1ZyhgZ2VyYmVyVG9HY29kZWAsIG9wdHMpOwogIGZ1bmN0aW9uIG1ha2VQYXRoKGV4dCwgc2lkZSwgYmFzZSA9IGJhc2VuYW1lKSB7CiAgICByZXR1cm4gcGF0aC5qb2luKG9wdHNbJ291dHB1dC1kaXInXSwgYCR7YmFzZX1fJHtzaWRlfS4ke2V4dH1gKTsKICB9CgogIGNvbnN0IHBhcmFtcyA9IFsuLi5PYmplY3QuZW50cmllcyhvcHRzKV0KICAgIC5maWx0ZXIoKFtrLCB2XSkgPT4gdHlwZW9mIHYgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHYgPT0gJ251bWJlcicgfHwgKHR5cGVvZiB2ID09ICdib29sZWFuJyAmJiB2ID09PSB0cnVlKSkKICAgIC5tYXAoKFtrLCB2XSkgPT4gYC0tJHtrfSR7dHlwZW9mIHYgIT0gJ2Jvb2xlYW4nICYmIHYgIT0gJycgPyAnPScgKyB2IDogJyd9YCk7CiAgLy9jb25zb2xlLmxvZygnUmVxdWVzdCAvZ2NvZGUnLCB7IGdlcmJlckZpbGUsIGZldGNoLCByYXcgfSk7CiAgLy9jb25zb2xlLndhcm4oYGdlcmJlclRvR2NvZGVgLCBVdGlsLmFiYnJldmlhdGUoZ2VyYmVyRmlsZSksIHsgZ2NvZGVGaWxlLCBvcHRzIH0pOwoKICByZXR1cm4gWydwY2IyZ2NvZGUnXS5jb25jYXQocGFyYW1zKTsKICAvKgogIGxldCB3YWl0OwogIHRyeSB7CiAgICBjb25zdCBjbWQgPSBgcGNiMmdjb2RlICR7cGFyYW1zLmpvaW4oJyAnKX0gMj4mMWA7CiAgICBjb25zb2xlLndhcm4oYGV4ZWN1dGluZyAnJHtjbWR9J2ApOwogICAgY29uc3QgY2hpbGQgPSBleGVjKGNtZCwge30pOwogICAgLy8gZG8gd2hhdGV2ZXIgeW91IHdhbnQgd2l0aCBgY2hpbGRgIGhlcmUgLSBpdCdzIGEgQ2hpbGRQcm9jZXNzIGluc3RhbmNlIGp1c3QKICAgIC8vIHdpdGggcHJvbWlzZS1mcmllbmRseSBgLnRoZW4oKWAgJiBgLmNhdGNoKClgIGZ1bmN0aW9ucyBhZGRlZCB0byBpdCEKICAgIGxldCBvdXRwdXQgPSAnJzsKICAgIGNoaWxkLnN0ZG91dC5vbignZGF0YScsIGRhdGEgPT4gKG91dHB1dCArPSBkYXRhKSk7CiAgICBjaGlsZC5zdGRlcnIub24oJ2RhdGEnLCBkYXRhID0+IChvdXRwdXQgKz0gZGF0YSkpOwogICAgd2FpdCA9IGF3YWl0IGNoaWxkLmNhdGNoKGVycm9yID0+ICh7IGNvZGU6IC0xLCBlcnJvciB9KSk7CgogICAgY29uc3QgeyBzdGRvdXQsIHN0ZGVyciwgY29kZSwgc2lnbmFsIH0gPSB3YWl0OwogICAgaWYob3V0cHV0KSBvdXRwdXQgPSBVdGlsLmFiYnJldmlhdGUob3V0cHV0LnJlcGxhY2UoL1xzKlxyKlxuL2csICdcbicpLCAyMDApOwogICAgY29uc29sZS5sb2coJ1Jlc3BvbnNlIC9nY29kZScsIHsgc3Rkb3V0LCBvdXRwdXQsIHNpZGVzIH0pOwoKICAgIC8vICAgaWYoY29kZSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKG91dHB1dCk7CgogICAgY29uc3QgZ2NvZGVGaWxlID0gbWFrZVBhdGgoJ25nYycsIHNpZGVzWzBdKTsKICAgIGNvbnN0IHN2Z0ZpbGUgPSBtYWtlUGF0aCgnc3ZnJywgc2lkZXNbMF0sICdwcm9jZXNzZWQnKTsKCiAgICBmb3IobGV0IFtmaWxlLCB0b10gb2Ygc2lkZXMubWFwKHNpZGUgPT4gW21ha2VQYXRoKCdzdmcnLCBzaWRlLCAncHJvY2Vzc2VkJyksIG1ha2VQYXRoKCdzdmcnLCBzaWRlKV0pKQogICAgICBpZihmcy5leGlzdHNTeW5jKGZpbGUpKSBmcy5yZW5hbWVTeW5jKGZpbGUsIHRvKTsKCiAgICBsZXQgZmlsZXMgPSBzaWRlcy5tYXAoc2lkZSA9PiBbc2lkZSwgbWFrZVBhdGgoJ25nYycsIHNpZGUpXSkuZmlsdGVyKChbc2lkZSwgZmlsZV0pID0+IGZzLmV4aXN0c1N5bmMoZmlsZSkpOwogICAgY29uc29sZS5sb2coJ1Jlc3BvbnNlIC9nY29kZScsIHsgZmlsZXMgfSk7CgogICAgbGV0IHJlc3VsdCA9IHsgY29kZSwgb3V0cHV0LCBjbWQgfTsKICAgIGlmKGZldGNoKSB7CiAgICAgIGZvcihsZXQgW3NpZGUsIGZpbGVdIG9mIGZpbGVzKSByZXN1bHRbc2lkZV0gPSBhd2FpdCAoYXdhaXQgZnNQcm9taXNlcy5yZWFkRmlsZShHZXRWRlNQYXRoKGZpbGUpKSkudG9TdHJpbmcoKTsKICAgIH0KICAgIGlmKHJhdykgewogICAgICBjb25zdCB7IGZpbGUgfSA9IHJlc3VsdDsKICAgICAgcmV0dXJuIFNlbmRSYXcocmVzLCBmaWxlLCByZXN1bHQuZGF0YSk7CiAgICB9CiAgICByZXN1bHQuZmlsZXMgPSBPYmplY3QuZnJvbUVudHJpZXMoZmlsZXMpOwogICAgY29uc29sZS5sb2coCiAgICAgICdSZXNwb25zZSAvZ2NvZGUnLAogICAgICB1dGlsLmZpbHRlcktleXMocmVzdWx0LCBrZXkgPT4gIS8oWG91dHB1dHxkYXRhKS8udGVzdChrZXkpKQogICAgKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfSBjYXRjaChlcnJvcikgewogICAgY29uc29sZS5sb2coYEVSUk9SOiAke2Vycm9yLm1lc3NhZ2V9YCk7CiAgfSovCn0KAAAAAAAAAABsFQAAAAAAAAAAAAAAAAAAAAAAAGwVAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/eagle/document.js",
			"settings":
			{
				"buffer_size": 11395,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					24,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAAHUHAAAAAAAAdgcAAAAAAAAAAAAAdgcAAAAAAAB3BwAAAAAAAAAAAAB3BwAAAAAAAHgHAAAAAAAAAAAAAHgHAAAAAAAAeQcAAAAAAAAAAAAAeQcAAAAAAAB6BwAAAAAAAAAAAAB6BwAAAAAAAHsHAAAAAAAAAAAAAHsHAAAAAAAAfAcAAAAAAAAAAAAAfAcAAAAAAAB9BwAAAAAAAAAAAAB9BwAAAAAAAH4HAAAAAAAAAAAAAH4HAAAAAAAAfwcAAAAAAAAAAAAAfwcAAAAAAACABwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUHAAAAAAAAdQcAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIAHAAAAAAAAggcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAHAAAAAAAAgAcAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIEHAAAAAAAAgwcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEHAAAAAAAAgQcAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "EagleCo"
					},
					"BwAAAIIHAAAAAAAAgwcAAAAAAAAAAAAAgwcAAAAAAACEBwAAAAAAAAAAAACEBwAAAAAAAIUHAAAAAAAAAAAAAIUHAAAAAAAAhgcAAAAAAAAAAAAAhgcAAAAAAACHBwAAAAAAAAAAAACHBwAAAAAAAIgHAAAAAAAAAAAAAIgHAAAAAAAAiQcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIHAAAAAAAAggcAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"left_delete",
					null,
					"AQAAAIgHAAAAAAAAiAcAAAAAAAABAAAAbw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkHAAAAAAAAiQcAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAIgHAAAAAAAAiQcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgHAAAAAAAAiAcAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					2,
					"left_delete",
					null,
					"AgAAAIgHAAAAAAAAiAcAAAAAAAABAAAARIcHAAAAAAAAhwcAAAAAAAABAAAAQw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkHAAAAAAAAiQcAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "Document.open"
					},
					"DQAAAIcHAAAAAAAAiAcAAAAAAAAAAAAAiAcAAAAAAACJBwAAAAAAAAAAAACJBwAAAAAAAIoHAAAAAAAAAAAAAIoHAAAAAAAAiwcAAAAAAAAAAAAAiwcAAAAAAACMBwAAAAAAAAAAAACMBwAAAAAAAI0HAAAAAAAAAAAAAI0HAAAAAAAAjgcAAAAAAAAAAAAAjgcAAAAAAACPBwAAAAAAAAAAAACPBwAAAAAAAJAHAAAAAAAAAAAAAJAHAAAAAAAAkQcAAAAAAAAAAAAAkQcAAAAAAACSBwAAAAAAAAAAAACSBwAAAAAAAJMHAAAAAAAAAAAAAJMHAAAAAAAAlAcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcHAAAAAAAAhwcAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJUHAAAAAAAAlgcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUHAAAAAAAAlQcAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJYHAAAAAAAAmAcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYHAAAAAAAAlgcAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "filename,"
					},
					"CQAAAJcHAAAAAAAAmAcAAAAAAAAAAAAAmAcAAAAAAACZBwAAAAAAAAAAAACZBwAAAAAAAJoHAAAAAAAAAAAAAJoHAAAAAAAAmwcAAAAAAAAAAAAAmwcAAAAAAACcBwAAAAAAAAAAAACcBwAAAAAAAJ0HAAAAAAAAAAAAAJ0HAAAAAAAAngcAAAAAAAAAAAAAngcAAAAAAACfBwAAAAAAAAAAAACfBwAAAAAAAKAHAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcHAAAAAAAAlwcAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAJ8HAAAAAAAAnwcAAAAAAAABAAAALA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAHAAAAAAAAoAcAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJ8HAAAAAAAAoAcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8HAAAAAAAAnwcAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAKAHAAAAAAAAoAcAAAAAAAABAAAAfQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEHAAAAAAAAoQcAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "mx"
					},
					"AgAAAKAHAAAAAAAAoQcAAAAAAAAAAAAAoQcAAAAAAACiBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAHAAAAAAAAoAcAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					2,
					"left_delete",
					null,
					"AgAAAKEHAAAAAAAAoQcAAAAAAAABAAAAeKAHAAAAAAAAoAcAAAAAAAABAAAAbQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIHAAAAAAAAogcAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "xml}"
					},
					"BAAAAKAHAAAAAAAAoQcAAAAAAAAAAAAAoQcAAAAAAACiBwAAAAAAAAAAAACiBwAAAAAAAKMHAAAAAAAAAAAAAKMHAAAAAAAApAcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAHAAAAAAAAoAcAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKUHAAAAAAAApgcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUHAAAAAAAApQcAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYHAAAAAAAApgcAAAAAAAAAAAAAAIB4QA"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/async",
		"/home/roman/Projects/plot-cv/lib/stream"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/ruler-draggable.js",
		"/home/roman/Projects/plot-cv/lib/async/helpers.js",
		"/home/roman/Projects/plot-cv/lib/async/iterify.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/async/websocket.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/lib/stream/utils.js",
		"/home/roman/Projects/plot-cv/lib/container/trieMap.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs-misc.c.ast.bjson",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/fire.es",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/asynciterator.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-asynciterator.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/remove-functions.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-asynciterator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/session.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/buffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/generator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-ws-state.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-client/minimal-ws-client-spam-tx-rx/minimal-ws-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-request.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-response.c",
		"/home/roman/Projects/plot-cv/fire/.prettierrc",
		"/home/roman/Projects/plot-cv/fire/asconfig.json",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/c.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_mysql.js",
		"/home/roman/Dokumente/Eagle-Layouts/VCO-8038-board.svg",
		"/home/roman/Projects/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/token.c",
		"/usr/local/bin/list-exports.js",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Luscious.tmTheme",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Deluxe.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/getdents.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/ecmascript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/an-tronics/eagle/ioboard2.brd",
		"/home/roman/Projects/an-tronics/eagle/mainboard2.brd",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser/ebnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/mariadb-10.3-10.3.38/include/mysql_com.h"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"ttySet",
			"setRaw",
			"extendArray",
			"\\b(err|getenv|getenviron|loadFile|open|SEEK_END|out|strerror)\\b",
			"on[A-Z][^ ]*\\(",
			"React",
			"WriteFile",
			"ReadFile",
			"filesystem\\.",
			"Fire\\(",
			"WriteAny",
			"ReadAny",
			"WriteFd",
			"WriteFD",
			"popen",
			"TouchIterat",
			"Touch",
			"OrientationChange",
			"ResizeHandler",
			"\\.overlay",
			"WS rece",
			"MakeClientID",
			"MakeClient",
			"Reconnecting",
			"handlers",
			"NewWS",
			"type: '",
			"cid:",
			"divElement",
			"divRect",
			"SetPressed",
			"TouchIterator",
			"TouchItera",
			"SetLock",
			"ToggleClass",
			"SetLocked",
			"NewWS",
			"ReplayTrail",
			"drawList",
			"ReplayTrail",
			"pixels",
			"ReplayTrail",
			"PositionMatrix2",
			"PositionMatrix\\(",
			"PositionMatrix\\)",
			"PositionMatrix,",
			"PositionMatrix",
			"TouchIterator",
			"= 320",
			"ResizeHandler",
			"TouchIterator\\(",
			"PositionMatrix",
			"TouchTransformer",
			"MoveIterat",
			"clientX",
			"MovementIterator",
			"TouchIterator",
			"TouchPrinter",
			"GenericPrinter",
			"mouseTransform",
			"MoveIterator",
			"GenericPrinter",
			"Printer",
			"TouchPrinter",
			"MoveIterator\\(",
			"TouchIterator",
			"Listener",
			"Init",
			"syncHeight",
			"Init",
			"properties\\(",
			"lazyProperties",
			"\\(globalThis, ",
			"ResizeHandler",
			"'resize'",
			"syncHeight",
			"window-inner",
			"'resize'",
			"WS send",
			"'resize",
			"measure",
			"SetCrosshair",
			"crosshair",
			"auto",
			"streamify",
			"preventDefa",
			"body",
			"bottom",
			"\\b(fixed|absolute|position|left|top|bottom)\\b",
			"\\b(position|left|top|bottom)\\b",
			"position",
			"\\.style",
			"Element\\.",
			"Element.move",
			"setRect",
			"text-align",
			"height:",
			"'resize'",
			"onRequest",
			"static open",
			"misc",
			"console",
			"lookup",
			"curry",
			"makeTrans",
			"normalize =",
			"ucfirst",
			"params.target",
			"'t'",
			"\\bflags\\b",
			"\\.flags",
			"flags =",
			"Compile\\b",
			"Compile",
			"Compile\\(",
			"Compile",
			"SpawnCom",
			"getOpt",
			"SpawnComp",
			"Table",
			"ReadJSON",
			"padTrunc",
			"Compile ERROR",
			"\\bspawn\\b",
			"Spawn",
			"\\bspawn\\b",
			"spawn\\b",
			"spawn\\("
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"std.\\1"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 656,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/debugger-client.js",
							"function_name_status_row": 19,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									2680,
									2689
								],
								[
									2758,
									2765
								],
								[
									2882,
									2887
								],
								[
									3074,
									3085
								],
								[
									3237,
									3242
								],
								[
									3686,
									3738
								],
								[
									4000,
									4036
								],
								[
									4281,
									4288
								],
								[
									4358,
									4377
								],
								[
									4419,
									4437
								],
								[
									4491,
									4514
								],
								[
									4833,
									4854
								],
								[
									5115,
									5123
								],
								[
									5650,
									5685
								],
								[
									7603,
									7632
								],
								[
									7688,
									7713
								],
								[
									7764,
									7822
								],
								[
									8530,
									8566
								],
								[
									8703,
									8722
								],
								[
									9178,
									9189
								],
								[
									9674,
									9711
								],
								[
									9826,
									9853
								],
								[
									11246,
									11274
								],
								[
									11504,
									11534
								],
								[
									11604,
									11635
								],
								[
									11939,
									11962
								],
								[
									12025,
									12049
								],
								[
									12113,
									12134
								],
								[
									12195,
									12220
								],
								[
									12260,
									12282
								],
								[
									12344,
									12379
								],
								[
									12435,
									12462
								],
								[
									12761,
									12801
								],
								[
									12934,
									12954
								],
								[
									13251,
									13270
								]
							],
							"symlist":
							[
								"  source =>",
								"  line =>",
								"\te =>",
								"() =>",
								"\te =>",
								"SourceLine = ({ lineno, text, active, children }) =>",
								"SourceText = ({ text, filename }) =>",
								"  line =>",
								"(acc, tokens, i) =>",
								"([type, token]) =>",
								"(acc, [type, token]) =>",
								"SourceFile = props =>",
								"\tresp =>",
								"LoadSource(filename)",
								"Start(args, address)",
								"Connect(address)",
								"Initiate(command, address, connect = false, args)",
								"TokenizeJS(data, filename)",
								"(acc, [type, c]) =>",
								"(acc, l) =>",
								"CreateSocket(endpoint)",
								"ReadSocket()",
								"  .sendMessage = function(msg)",
								"GetVariables(ref = 0)",
								"UpdatePosition()",
								"StepIn()",
								"StepOut()",
								"Next()",
								"Continue()",
								"Pause()",
								"Evaluate(expression)",
								"StackTrace()",
								"SendRequest(command, args = {})",
								"(resolve, reject) =>",
								"RenderUI()"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tabs_extra_last_activated": 1682196723.36,
							"tabs_extra_last_activated_sheet_index": 0
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "fire.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27923,
						"regions":
						{
						},
						"selection":
						[
							[
								13715,
								13715
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 509,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682258792.32,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6993.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "debuggerprotocol.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7044,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682260427.83,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1893.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "debugger.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 441,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682259209.98,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "debugger-client.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14234,
						"regions":
						{
						},
						"selection":
						[
							[
								5797,
								5799
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 130,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682260611.29,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1393.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 387,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tabs_extra_last_activated": 1682260047.23,
							"tabs_extra_last_activated_sheet_index": 4
						},
						"translation.x": 0.0,
						"translation.y": 5327.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "aluminiumknopf-silber-o22mm-schwarze-linie-rnd-components-rnd-210-00345.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 276450,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"tabs_extra_last_activated": 1682260049.96,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "io-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682260396.96,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/misc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 67970,
						"regions":
						{
						},
						"selection":
						[
							[
								24357,
								24367
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 804,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682260426.44,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "fire.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2541,
						"regions":
						{
						},
						"selection":
						[
							[
								1118,
								1144
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 62,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682205779.86,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 42.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/stream/utils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15634,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682205996.58,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 252.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/stream/transform.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3325,
						"regions":
						{
						},
						"selection":
						[
							[
								3325,
								3325
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 143,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682206015.09,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1401.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/stream/transformStream.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14288,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682206868.18,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5472.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "lib/eagle/schematicRenderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6751,
						"regions":
						{
						},
						"selection":
						[
							[
								54,
								54
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682180325.09,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "lib/eagle/components.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3776,
						"regions":
						{
						},
						"selection":
						[
							[
								1567,
								1567
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 30,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682180325.07,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "eagle2svg.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2511,
						"regions":
						{
						},
						"selection":
						[
							[
								2124,
								2124
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 79,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682180325.06,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 838.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "pcb-conversion.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5484,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682180325.03,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "lib/eagle/document.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11395,
						"regions":
						{
						},
						"selection":
						[
							[
								1056,
								1056
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 25,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682180325.0,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"util.js",
				"lib/util.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"io-help0",
				"aluminiumknopf-silber-o22mm-schwarze-linie-rnd-components-rnd-210-00345.html"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"ruler-dragg",
				"ruler-draggable.js"
			],
			[
				"debugger-clie",
				"debugger-client.js"
			],
			[
				"debugger.html",
				"debugger.html"
			],
			[
				"debuggerproto",
				"debuggerprotocol.js"
			],
			[
				"misc",
				"lib/misc.js"
			],
			[
				"websocket.js",
				"lib/async/websocket.js"
			],
			[
				"size.",
				"lib/geom/size.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"stream/utils",
				"lib/stream/utils.js"
			],
			[
				"fire.html",
				"fire.html"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"docu",
				"lib/eagle/document.js"
			],
			[
				"docum",
				"lib/eagle/document.js"
			],
			[
				"pcb-co",
				"pcb-conversion.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"eagle/compon",
				"lib/eagle/components.js"
			],
			[
				"components",
				"components.js"
			],
			[
				"schematicrend",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"size.j",
				"lib/geom/size.js"
			],
			[
				"node.",
				"lib/eagle/node.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"componen",
				"lib/eagle/components.js"
			],
			[
				"components.j",
				"components.js"
			],
			[
				"nodeLi",
				"lib/eagle/nodeList.js"
			],
			[
				"documen",
				"lib/eagle/document.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"repl.",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"eagle-shel",
				"eagle-shell.js"
			],
			[
				"misc.c",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-misc.c",
				"quickjs-misc.c.ast.bjson"
			],
			[
				"quickjs-inspe",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"document.js",
				"lib/eagle/document.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"rpc.js",
				"js/rpc.js"
			],
			[
				"wscli",
				"wscli.js"
			],
			[
				"asynciter",
				"lib/asynciterator.c"
			],
			[
				"asyn",
				"lib/asynciterator.c"
			],
			[
				"minnet-asy",
				"src/minnet-asynciterator.c"
			],
			[
				"asynciterat",
				"lib/asynciterator.c"
			],
			[
				"minnet-clie",
				"src/minnet-client.c"
			],
			[
				"async",
				"lib/asynciterator.c"
			],
			[
				"minnet-as",
				"src/minnet-asynciterator.h"
			],
			[
				"jsutils",
				"lib/jsutils.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"minnet-cli",
				"src/minnet-client.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"minnet-req",
				"src/minnet-request.c"
			],
			[
				"minnet-resp",
				"src/minnet-response.c"
			],
			[
				"index",
				"assembly/index.ts"
			],
			[
				"fire-debu",
				"~/Projects/plot-cv/fire/build/fire-debug.js"
			],
			[
				"fire.",
				"assembly/fire.ts"
			],
			[
				"packa",
				"package.json"
			],
			[
				"prettier",
				".prettierrc"
			],
			[
				"ascon",
				"asconfig.json"
			],
			[
				"index.",
				"assembly/index.ts"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"misc.",
				"lib/misc.js"
			],
			[
				"extendAr",
				"lib/extendArray.js"
			],
			[
				"extendArray",
				"lib/extendArray.js"
			],
			[
				"propery-enu",
				"src/property-enumeration.c"
			],
			[
				"vector.h",
				"include/vector.h"
			],
			[
				"vector.c",
				"src/vector.c"
			],
			[
				"tree-walk",
				"quickjs-tree-walker.c"
			],
			[
				"tree",
				"quickjs-tree-walker.c"
			],
			[
				"extendGener",
				"lib/extendGenerator.js"
			],
			[
				"",
				"quickjs-tree-walker.c"
			],
			[
				"quickjs-tree",
				"quickjs-tree-walker.c"
			],
			[
				"xpath.",
				"lib/xpath.js"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"repl.j",
				"lib/repl.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"require.js",
				"lib/require.js"
			],
			[
				"c.js",
				"lib/lexer/c.js"
			],
			[
				"test",
				"tests/test_mysql.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"xml-s",
				"xml-shell.js"
			],
			[
				"xml-she",
				"xml-shell.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"lexer.c",
				"src/lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"lexer.h",
				"include/lexer.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"lexer.",
				"quickjs-lexer.c"
			],
			[
				"token.h",
				"include/token.h"
			],
			[
				"token.c",
				"src/token.c"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"list-exports",
				"list-exports.js"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"predicate.h",
				"quickjs-predicate.h"
			],
			[
				"location.c",
				"src/location.c"
			],
			[
				"buffer-ut",
				"include/buffer-utils.h"
			],
			[
				"location.h",
				"include/location.h"
			],
			[
				"Loc",
				"include/location.h"
			],
			[
				"quickjs-le",
				"quickjs-lexer.c"
			],
			[
				"prop",
				"src/property-enumeration.c"
			],
			[
				"proper",
				"include/property-enumeration.h"
			],
			[
				"quickjs-dee",
				"quickjs-deep.c"
			],
			[
				"quickjs-inps",
				"quickjs-inspect.c"
			],
			[
				"-misc.c",
				"quickjs-misc.c"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"dom",
				"lib/dom.js"
			],
			[
				"-inspect",
				"quickjs-inspect.c"
			],
			[
				"cmake/",
				"cmake/QuickJSModule.cmake"
			],
			[
				"process",
				"lib/process.js"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 271.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1017.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 308.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
