{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"js_",
				"js_mysqlresult_class_id"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			],
			[
				"defineP",
				"defineProperties(...)"
			],
			[
				"CMAKE_CURR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"gener",
				"generate_module_header"
			],
			[
				"RINGBUFFER_C",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"RINGBUFFER_CONSU",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"JS_NewArra",
				"JS_NewArrayBufferCopy"
			],
			[
				"RINGBU",
				"RINGBUFFER_INSERT"
			],
			[
				"hea",
				"headers_sent"
			],
			[
				"PR",
				"PRIi64"
			],
			[
				"db",
				"dbuf_init2"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			]
		]
	},
	"buffers":
	[
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 34489,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAxQcAAAAAAADHBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/schematicRenderer.js",
			"settings":
			{
				"buffer_size": 6751,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AAAAAAAAADYAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/eagle/components.js",
			"settings":
			{
				"buffer_size": 3776,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"cut",
					null,
					"AQAAAMcFAAAAAAAAxwUAAAAAAAA1AAAAaW1wb3J0IHsgV2lyZVBhdGggfSBmcm9tICcuL2NvbXBvbmVudHMvd2lyZVBhdGguanMnOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHBQAAAAAAAPwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					2,
					"paste",
					null,
					"AgAAAMcFAAAAAAAA/AUAAAAAAAAAAAAA/AUAAAAAAAAxBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHBQAAAAAAAMcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "ucfirst"
					},
					"CAAAAAUGAAAAAAAABgYAAAAAAAAAAAAABgYAAAAAAAAGBgAAAAAAAAgAAABXaXJlUGF0aAYGAAAAAAAABwYAAAAAAAAAAAAABwYAAAAAAAAIBgAAAAAAAAAAAAAIBgAAAAAAAAkGAAAAAAAAAAAAAAkGAAAAAAAACgYAAAAAAAAAAAAACgYAAAAAAAALBgAAAAAAAAAAAAALBgAAAAAAAAwGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFBgAAAAAAAA0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "./misc.js"
					},
					"CgAAABYGAAAAAAAAFwYAAAAAAAAAAAAAFwYAAAAAAAAXBgAAAAAAABcAAAAvY29tcG9uZW50cy93aXJlUGF0aC5qcxcGAAAAAAAAGAYAAAAAAAAAAAAAGAYAAAAAAAAZBgAAAAAAAAAAAAAZBgAAAAAAABoGAAAAAAAAAAAAABoGAAAAAAAAGwYAAAAAAAAAAAAAGwYAAAAAAAAcBgAAAAAAAAAAAAAcBgAAAAAAAB0GAAAAAAAAAAAAAB0GAAAAAAAAHgYAAAAAAAAAAAAAHgYAAAAAAAAfBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWBgAAAAAAAC0GAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "eagle2svg.js",
			"settings":
			{
				"buffer_size": 2511,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC7CAAAIyEvdXNyL2Jpbi9lbnYgcWpzbQoKCmltcG9ydCAqIGFzIHBhdGggZnJvbSAnLi9saWIvcGF0aC5qcyc7CgppbXBvcnQgeyBsb2csIEVhZ2xlRG9jdW1lbnQsIFJlbmRlcmVyLCBFYWdsZVByb2plY3QgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CgppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CgppbXBvcnQgeyBXcml0ZUZpbGUgfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwppbXBvcnQgeyBnZXRPcHQgfSBmcm9tICd1dGlsJzsKaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnOwppbXBvcnQgeyBSZWFjdENvbXBvbmVudCwgcmVuZGVyIH0gZnJvbSAnLi9saWIvZG9tL3ByZWFjdENvbXBvbmVudC5qcyc7CmltcG9ydCByZW5kZXJUb1N0cmluZyBmcm9tICcuL2xpYi9wcmVhY3QtcmVuZGVyLXRvLXN0cmluZy5qcyc7CgoKbGV0IGRlYnVnRmxhZyA9IGZhbHNlOwoKZnVuY3Rpb24gcmVuZGVyKGRvYywgZmlsZW5hbWUpIHsKICBpZihkb2MgaW5zdGFuY2VvZiBFYWdsZVByb2plY3QpIHsKICAgIHJlbmRlcihkb2Muc2NoZW1hdGljKTsKICAgIHJlbmRlcihkb2MuYm9hcmQpOwogICAgcmV0dXJuOwogIH0KICBsZXQgcmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoZG9jLCBSZWFjdENvbXBvbmVudC5hcHBlbmQsIGRlYnVnRmxhZyk7CgogIC8qIHJlbmRlcmVyLnNldFBhbGV0dGUoWwogICAgWzB4ZmYsIDB4ZmYsIDB4ZmZdLAogICAgWzB4NGIsIDB4NGIsIDB4YTVdLAogICAgWzAsIDAsIDBdLAogICAgWzB4NGIsIDB4YTUsIDB4YTVdLAogICAgWzAsIDAsIDBdLAogICAgWzB4YTUsIDB4NGIsIDB4YTVdLAogICAgWzB4YTUsIDB4YTUsIDB4NGJdLAogICAgWzAsIDAsIDBdLAogICAgWzB4NGIsIDB4NGIsIDB4ZmZdLAogICAgWzB4NGIsIDB4ZmYsIDB4NGJdLAogICAgWzB4NGIsIDB4ZmYsIDB4ZmZdLAogICAgWzB4ZmYsIDB4NGIsIDB4NGJdLAogICAgWzB4ZmYsIDB4NGIsIDB4ZmZdLAogICAgWzB4ZmYsIDB4ZmYsIDB4NGJdLAogICAgWzB4NGIsIDB4NGIsIDB4NGJdLAogICAgWzB4YTUsIDB4YTUsIDB4YTVdLAogICAgWzAsIDAsIDBdCiAgXS5tYXAoKFtyLGcsYl0pID0+IG5ldyBSR0JBKHIsZyxiKSkpOyovCgogIGxldCBzdHI7CiAgbGV0IHN2ZyA9IHJlbmRlcmVyLnJlbmRlcihkb2MpOwogIHRyeSB7CiAgICBzdHIgPSByZW5kZXJUb1N0cmluZyhzdmcpOwogIH0gY2F0Y2goZSkgewogICAgY29uc29sZS5sb2coJ0VSUk9SOicsIGUpOwogICAgY29uc29sZS5sb2coJ1NUQUNLOicsIGUuc3RhY2spOwogIH0KICBsZXQgeG1sID0gZnJvbVhNTChzdHIpOwoKICBpZihmaWxlbmFtZSkgewogICAgbGV0IHJldDsKICAgIHJldCA9IFdyaXRlRmlsZShmaWxlbmFtZSwgKHN0ciA9IHRvWE1MKHhtbCkpKTsKICAgIGNvbnNvbGUubG9nKGBTYXZpbmcgdG8gJyR7ZmlsZW5hbWV9Jy4uLmAsIHJldCk7CiAgfQogIHJldHVybiBzdHI7Cn0KCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsKICAgIGluc3BlY3RPcHRpb25zOiB7IG1heEFycmF5TGVuZ3RoOiAxMDAsIGNvbG9yczogdHJ1ZSwgZGVwdGg6IDIsIGNvbXBhY3Q6IDAsIGN1c3RvbUluc3BlY3Q6IHRydWUgfQogIH0pOwoKICBsZXQgcGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICBkZWJ1ZzogW2ZhbHNlLCB2YWx1ZSA9PiAoZGVidWdGbGFnID0gdmFsdWUpLCAneCddLAogICAgICAnb3V0cHV0LWRpcic6IFt0cnVlLCBudWxsLCAnZCddLAogICAgICAnQCc6ICdpbnB1dCcKICAgIH0sCiAgICBhcmdzCiAgKTsKCiAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgbGV0IGRvYyA9IEVhZ2xlRG9jdW1lbnQub3BlbihhcmcsIGYgPT4gIHJlYWRGaWxlU3luYyhmLCAndXRmLTgnKSk7CiAgICBsZXQgZmlsZSA9IHBhdGguYmFzZW5hbWUoZG9jLmZpbGVuYW1lLCAnLicgKyBkb2MudHlwZSkgKyAnLScgKyB7IHNjaDogJ3NjaGVtYXRpYycsIGJyZDogJ2JvYXJkJywgbGJyOiAnbGlicmFyeScgfVtkb2MudHlwZV0gKyAnLnN2Zyc7CgogICAgaWYocGFyYW1zWydvdXRwdXQtZGlyJ10pIGZpbGUgPSBwYXRoLmpvaW4ocGFyYW1zWydvdXRwdXQtZGlyJ10sIGZpbGUpOwoKICAgIHJlbmRlcihkb2MsIGZpbGUpOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7Cn0KAAAAAAAAAADQCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLAAAAAAAAAIsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADQCQAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgKiBhcyBkZWVwIGZyb20gJy4vbGliL2RlZXAuanMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCB7IGxvZywgRWFnbGVEb2N1bWVudCwgUmVuZGVyZXIsIEVhZ2xlUHJvamVjdCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZSc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgcmVhZCBhcyBmcm9tWE1MLCB3cml0ZSBhcyB0b1hNTCB9IGZyb20gJy4vbGliL3htbC5qcyc7CmltcG9ydCB7IFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCB7IGdldE9wdCB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IFJlYWN0Q29tcG9uZW50LCByZW5kZXIgfSBmcm9tICcuL2xpYi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vbGliL3ByZWFjdC1yZW5kZXItdG8tc3RyaW5nLmpzJzsKaW1wb3J0IHsgUkdCQSwgaXNSR0JBLCBJbW11dGFibGVSR0JBLCBkZWZhdWx0IGFzIHJnYmEgfSBmcm9tICcuL2xpYi9jb2xvci9yZ2JhLmpzJzsKCmxldCBkZWJ1Z0ZsYWcgPSBmYWxzZTsKCmZ1bmN0aW9uIHJlbmRlcihkb2MsIGZpbGVuYW1lKSB7CiAgaWYoZG9jIGluc3RhbmNlb2YgRWFnbGVQcm9qZWN0KSB7CiAgICByZW5kZXIoZG9jLnNjaGVtYXRpYyk7CiAgICByZW5kZXIoZG9jLmJvYXJkKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGRvYywgUmVhY3RDb21wb25lbnQuYXBwZW5kLCBkZWJ1Z0ZsYWcpOwoKICAvKiByZW5kZXJlci5zZXRQYWxldHRlKFsKICAgIFsweGZmLCAweGZmLCAweGZmXSwKICAgIFsweDRiLCAweDRiLCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweGE1LCAweDRiLCAweGE1XSwKICAgIFsweGE1LCAweGE1LCAweDRiXSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweDRiLCAweGZmXSwKICAgIFsweDRiLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweGZmLCAweGZmXSwKICAgIFsweGZmLCAweDRiLCAweDRiXSwKICAgIFsweGZmLCAweDRiLCAweGZmXSwKICAgIFsweGZmLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweDRiLCAweDRiXSwKICAgIFsweGE1LCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXQogIF0ubWFwKChbcixnLGJdKSA9PiBuZXcgUkdCQShyLGcsYikpKTsqLwoKICBsZXQgc3RyOwogIGxldCBzdmcgPSByZW5kZXJlci5yZW5kZXIoZG9jKTsKICB0cnkgewogICAgc3RyID0gcmVuZGVyVG9TdHJpbmcoc3ZnKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlKTsKICAgIGNvbnNvbGUubG9nKCdTVEFDSzonLCBlLnN0YWNrKTsKICB9CiAgbGV0IHhtbCA9IGZyb21YTUwoc3RyKTsKCiAgaWYoZmlsZW5hbWUpIHsKICAgIGxldCByZXQ7CiAgICByZXQgPSBXcml0ZUZpbGUoZmlsZW5hbWUsIChzdHIgPSB0b1hNTCh4bWwpKSk7CiAgICBjb25zb2xlLmxvZyhgU2F2aW5nIHRvICcke2ZpbGVuYW1lfScuLi5gLCByZXQpOwogIH0KICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBtYXhBcnJheUxlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiAyLCBjb21wYWN0OiAwLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgZGVidWc6IFtmYWxzZSwgdmFsdWUgPT4gKGRlYnVnRmxhZyA9IHZhbHVlKSwgJ3gnXSwKICAgICAgJ291dHB1dC1kaXInOiBbdHJ1ZSwgbnVsbCwgJ2QnXSwKICAgICAgJ0AnOiAnaW5wdXQnCiAgICB9LAogICAgYXJncwogICk7CgogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkb2MgPSBFYWdsZURvY3VtZW50Lm9wZW4oYXJnLCBmID0+ICByZWFkRmlsZVN5bmMoZiwgJ3V0Zi04JykpOwogICAgbGV0IGZpbGUgPSBwYXRoLmJhc2VuYW1lKGRvYy5maWxlbmFtZSwgJy4nICsgZG9jLnR5cGUpICsgJy0nICsgeyBzY2g6ICdzY2hlbWF0aWMnLCBicmQ6ICdib2FyZCcsIGxicjogJ2xpYnJhcnknIH1bZG9jLnR5cGVdICsgJy5zdmcnOwoKICAgIGlmKHBhcmFtc1snb3V0cHV0LWRpciddKSBmaWxlID0gcGF0aC5qb2luKHBhcmFtc1snb3V0cHV0LWRpciddLCBmaWxlKTsKCiAgICByZW5kZXIoZG9jLCBmaWxlKTsKICB9Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwp9CgAAAAAAAAAAzwkAAAAAAAAAAAAAAAAAAAAAAADPCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMCAAAAAAAAEwIAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADPCQAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgKiBhcyBkZWVwIGZyb20gJy4vbGliL2RlZXAuanMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCB7IGxvZywgRWFnbGVEb2N1bWVudCwgUmVuZGVyZXIsIEVhZ2xlUHJvamVjdCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZSc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgcmVhZCBhcyBmcm9tWE1MLCB3cml0ZSBhcyB0b1hNTCB9IGZyb20gJy4vbGliL3htbC5qcyc7CmltcG9ydCB7IFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCB7IGdldE9wdCB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IFJlYWN0Q29tcG9uZW50LCByZW5kZXIgfSBmcm9tICcuL2xpYi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vbGliL3ByZWFjdC1yZW5kZXItdG8tc3RyaW5nLmpzJzsKaW1wb3J0IHsgUkdCQSwgaXNSR0JBLCBJbW11dGFibGVSR0JBLCBkZWZhdWx0IGFzIHJnYmEgfSBmcm9tICcuL2xpYi9jb2xvci9yZ2JhLmpzJzsKCmxldCBkZWJ1Z0ZsYWcgPSBmYWxzZTsKCmZ1bmN0aW9uIHJlbmRlcihkb2MsIGZpbGVuYW1lKSB7CiAgaWYoZG9jIGluc3RhbmNlb2YgRWFnbGVQcm9qZWN0KSB7CiAgICByZW5kZXIoZG9jLnNjaGVtYXRpYyk7CiAgICByZW5kZXIoZG9jLmJvYXJkKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGRvYywgUmVhY3RDb21wb25lbnQuYXBwZW5kLCBkZWJ1Z0ZsYWcpOwoKICAvKiByZW5kZXJlci5zZXRQYWxldHRlKFsKICAgIFsweGZmLCAweGZmLCAweGZmXSwKICAgIFsweDRiLCAweDRiLCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweGE1LCAweDRiLCAweGE1XSwKICAgIFsweGE1LCAweGE1LCAweDRiXSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweDRiLCAweGZmXSwKICAgIFsweDRiLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweGZmLCAweGZmXSwKICAgIFsweGZmLCAweDRiLCAweDRiXSwKICAgIFsweGZmLCAweDRiLCAweGZmXSwKICAgIFsweGZmLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweDRiLCAweDRiXSwKICAgIFsweGE1LCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXQogIF0ubWFwKChbcixnLGJdKSA9PiBuZXcgUkdCQShyLGcsYikpKTsqLwoKICBsZXQgc3RyOwogIGxldCBzdmcgPSByZW5kZXJlci5yZW5kZXIoZG9jKTsKICB0cnkgewogICAgc3RyID0gcmVuZGVyVG9TdHJpbmcoc3ZnKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlKTsKICAgIGNvbnNvbGUubG9nKCdTVEFDSzonLCBlLnN0YWNrKTsKICB9CiAgbGV0IHhtbCA9IGZyb21YTUwoc3RyKTsKCiAgaWYoZmlsZW5hbWUpIHsKICAgIGxldCByZXQ7CiAgICByZXQgPSBXcml0ZUZpbGUoZmlsZW5hbWUsIChzdHIgPSB0b1hNTCh4bWwpKSk7CiAgICBjb25zb2xlLmxvZyhgU2F2aW5nIHRvICcke2ZpbGVuYW1lfScuLi5gLCByZXQpOwogIH0KICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBtYXhBcnJheUxlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiAyLCBjb21wYWN0OiAwLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgZGVidWc6IFtmYWxzZSwgdmFsdWUgPT4gKGRlYnVnRmxhZyA9IHZhbHVlKSwgJ3gnXSwKICAgICAgJ291dHB1dC1kaXInOiBbdHJ1ZSwgbnVsbCwgJ2QnXSwKICAgICAgJ0AnOiAnaW5wdXQnCiAgICB9LAogICAgYXJncwogICk7CgogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkb2MgPSBFYWdsZURvY3VtZW50Lm9wZW4oYXJnLCBmID0+IHJlYWRGaWxlU3luYyhmLCAndXRmLTgnKSk7CiAgICBsZXQgZmlsZSA9IHBhdGguYmFzZW5hbWUoZG9jLmZpbGVuYW1lLCAnLicgKyBkb2MudHlwZSkgKyAnLScgKyB7IHNjaDogJ3NjaGVtYXRpYycsIGJyZDogJ2JvYXJkJywgbGJyOiAnbGlicmFyeScgfVtkb2MudHlwZV0gKyAnLnN2Zyc7CgogICAgaWYocGFyYW1zWydvdXRwdXQtZGlyJ10pIGZpbGUgPSBwYXRoLmpvaW4ocGFyYW1zWydvdXRwdXQtZGlyJ10sIGZpbGUpOwoKICAgIHJlbmRlcihkb2MsIGZpbGUpOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7Cn0KAAAAAAAAAADPCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAgAAAAAAABMCAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pcb-conversion.js",
			"settings":
			{
				"buffer_size": 5484,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABsFQAAaW1wb3J0IHsgUmVhZEZpbGUsIFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7CmltcG9ydCB7IGV4ZWMsIHNwYXduIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0IGNoaWxkX3Byb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7CmltcG9ydCB7IEV4ZWNUb29sIH0gZnJvbSAnLi9vcy1oZWxwZXJzLmpzJzsKZXhwb3J0IHsgRXhlY1Rvb2wgfSBmcm9tICcuL29zLWhlbHBlcnMuanMnOwoKZXhwb3J0IGZ1bmN0aW9uIEVhZ2xlVG9HZXJiZXIoYm9hcmRGaWxlLCBvcHRzID0ge30pIHsKICBjb25zb2xlLmxvZygnY29udmVydFRvR2VyYmVyJywgeyBib2FyZEZpbGUsIG9wdHMgfSk7CiAgbGV0IHsKICAgIGxheWVycyA9IG9wdHMuc2lkZSA9PSAnb3V0bGluZScgPyBbJ01lYXN1cmVzJ10gOiBvcHRzLmRyaWxsID8gWydEcmlsbHMnLCAnSG9sZXMnXSA6IFtvcHRzLmZyb250ID8gJ1RvcCcgOiAnQm90dG9tJywgJ1BhZHMnLCAnVmlhcyddLAogICAgZm9ybWF0ID0gb3B0cy5kcmlsbCA/ICdFWENFTExPTicgOiAnR0VSQkVSX1JTMjc0WCcsCiAgICBkYXRhLAogICAgZmV0Y2ggPSBmYWxzZSwKICAgIGZyb250LAogICAgYmFjaywKICAgIG91dGRpciA9IHN0ZC5nZXRlbnYoJ1RNUERJUicpID8/ICcvdG1wJwogIH0gPSBvcHRzOwogIGNvbnN0IGJhc2UgPSBwYXRoLmJhc2VuYW1lKGJvYXJkRmlsZSwgJy5icmQnKTsKICBjb25zdCBmb3JtYXRUb0V4dCA9IChsYXllcnMsIGZvcm1hdCkgPT4gewogICAgaWYob3B0cy5kcmlsbCB8fCBmb3JtYXQuc3RhcnRzV2l0aCgnRVhDRUxMT04nKSB8fCBsYXllcnMuaW5kZXhPZignRHJpbGxzJykgIT0gLTEgfHwgbGF5ZXJzLmluZGV4T2YoJ0hvbGVzJykgIT0gLTEpIHJldHVybiAnVFhUJzsKICAgIGlmKGxheWVycy5pbmRleE9mKCdCb3R0b20nKSAhPSAtMSB8fCBmb3JtYXQuc3RhcnRzV2l0aCgnR0VSQkVSJykpIHJldHVybiBvcHRzLnNpZGUgPT0gJ291dGxpbmUnID8gJ0dLTycgOiBmcm9udCA/ICdHVEwnIDogJ0dCTCc7CgogICAgcmV0dXJuICdyczI3NHgnOwogIH07CiAgY29uc3QgZ2VyYmVyRmlsZSA9IGAke291dGRpcn0vJHtiYXNlfS4ke2Zvcm1hdFRvRXh0KGxheWVycywgZm9ybWF0KX1gOwogIGNvbnN0IGNtZCA9IGBlYWdsZSAtWCAtZCAke2Zvcm1hdH0gLW8gIiR7Z2VyYmVyRmlsZX0iICIke2JvYXJkRmlsZX0iICR7bGF5ZXJzLmpvaW4oJyAnKX1gOwogIGNvbnN0IGFyZ3MgPSBbJy1YJywgJy1kJywgZm9ybWF0LCAnLW8nLCBnZXJiZXJGaWxlLCBib2FyZEZpbGUsIC4uLmxheWVyc107CiAgY29uc3QgYmluID0gJy9vcHQvZWFnbGUtNy4yLjAvYmluL2VhZ2xlJzsKCiAgcmV0dXJuIFtiaW5dLmNvbmNhdChhcmdzKTsKCiAgLyogIGNvbnNvbGUubG9nKGBleGVjdXRpbmcgJyR7Y21kfSdgKTsKICAvLyAgY29uc3QgY2hpbGQgPSBleGVjKGAke2NtZH0gMj4mMSAwPC9kZXYvbnVsbGAsIHt9KTsKICBjb25zdCBjaGlsZCA9IHNwYXduKGJpbiwgYXJncywgewogICAgLy8gIHN0ZGlvOiBbICdpbmhlcml0JywnaW5oZXJpdCcsMV0KICB9KTsKICBjb25zb2xlLmxvZyhgY2hpbGQ6YCwgY2hpbGQpOwogIC8vIGRvIHdoYXRldmVyIHlvdSB3YW50IHdpdGggYGNoaWxkYCBoZXJlIC0gaXQncyBhIENoaWxkUHJvY2VzcyBpbnN0YW5jZSBqdXN0CiAgLy8gd2l0aCBwcm9taXNlLWZyaWVuZGx5IGAudGhlbigpYCAmIGAuY2F0Y2goKWAgZnVuY3Rpb25zIGFkZGVkIHRvIGl0IQogIGxldCBvdXRwdXQgPSAnJzsKCiAgbGV0IGNvZGUgPSBjaGlsZC53YWl0KCk7CgogIGNvbnNvbGUubG9nKGBjb2RlOiAke2NvZGV9YCk7CiAgLy8gIGNvbnNvbGUubG9nKGBvdXRwdXQ6ICR7b3V0cHV0fWApOwogIGlmKGNvZGUgIT09IDApIHRocm93IG5ldyBFcnJvcihvdXRwdXQpOwogIGlmKG91dHB1dCkgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1xzKlxyKlxuL2csICdcbicpOwogIGxldCByZXN1bHQgPSB7IGNvZGUsIG91dHB1dCB9OwogIGlmKG9wdHMuZmV0Y2gpIHJlc3VsdC5kYXRhID0gUmVhZEZpbGUoR2V0VkZTUGF0aChnZXJiZXJGaWxlKSk7IC8vIGF3YWl0IChhd2FpdCBmcy5yZWFkRmlsZShHZXRWRlNQYXRoKGdlcmJlckZpbGUpKSkudG9TdHJpbmcoKTsKICByZXN1bHQuZmlsZSA9IGdlcmJlckZpbGU7CiAgY29uc29sZS5sb2coJ2NvbnZlcnRUb0dlcmJlciByZXN1bHQgPScsIHJlc3VsdCk7CiAgcmV0dXJuIHJlc3VsdDsqLwp9CgpleHBvcnQgZnVuY3Rpb24gR2VyYmVyVG9HY29kZShnZXJiZXJGaWxlLCBhbGxPcHRzID0ge30pIHsKICBjb25zdCBiYXNlbmFtZSA9IGdlcmJlckZpbGUucmVwbGFjZSgvLipcLy9nLCAnJykucmVwbGFjZSgvXC5bXi5dKiQvLCAnJyk7CiAgbGV0IHsgZmV0Y2gsIGRhdGEsIHJhdywgLi4ub3B0cyB9ID0gYWxsT3B0czsKICBvcHRzID0gewogICAgYmFzZW5hbWUsCiAgICB6c2FmZTogJzFtbScsCiAgICB6Y2hhbmdlOiAnMm1tJywKICAgIHp3b3JrOiAnLTFtbScsCiAgICB6ZHJpbGw6ICctMm1tJywKICAgIHpjdXQ6ICctMm1tJywKICAgICdjdXR0ZXItZGlhbWV0ZXInOiAnMW1tJywKICAgICdkcmlsbC1mZWVkJzogMTAwMCwKICAgICdkcmlsbC1zcGVlZCc6IDEwMDAwLAogICAgJ21pbGwtZmVlZCc6IDYwMCwKICAgICdtaWxsLXNwZWVkJzogMTYwMDAsCiAgICAnY3V0LWZlZWQnOiAyMDAsCiAgICAnY3V0LXNwZWVkJzogMTAwMDAsCiAgICAnY3V0LWluZmVlZCc6ICcxbW0nLAoKICAgICdvdXRwdXQtZGlyJzogJy4vdG1wLycsCiAgICAuLi5vcHRzCiAgfTsKICBpZihvcHRzLmZyb250ID09IHVuZGVmaW5lZCAmJiBvcHRzLmJhY2sgPT0gdW5kZWZpbmVkICYmIG9wdHMuZHJpbGwgPT0gdW5kZWZpbmVkKSBvcHRzLmJhY2sgPSBnZXJiZXJGaWxlOwogIGxldCBzaWRlcyA9IFtdOwoKICBmb3IobGV0IHNpZGUgb2YgWydmcm9udCcsICdiYWNrJywgJ2RyaWxsJywgJ291dGxpbmUnXSkKICAgIGlmKHNpZGUgaW4gb3B0cykgewogICAgICBpZih0eXBlb2Ygb3B0c1tzaWRlXSAhPSAnc3RyaW5nJykgb3B0c1tzaWRlXSA9IGdlcmJlckZpbGU7CiAgICAgIHNpZGVzLnB1c2goc2lkZSk7CiAgICB9CgogIGlmKG9wdHMudm9yb25vaSAmJiAhb3B0cy52ZWN0b3JpYWwpIG9wdHMudmVjdG9yaWFsID0gMTsKCiAgY29uc29sZS5kZWJ1ZyhgZ2VyYmVyVG9HY29kZWAsIG9wdHMpOwogIGZ1bmN0aW9uIG1ha2VQYXRoKGV4dCwgc2lkZSwgYmFzZSA9IGJhc2VuYW1lKSB7CiAgICByZXR1cm4gcGF0aC5qb2luKG9wdHNbJ291dHB1dC1kaXInXSwgYCR7YmFzZX1fJHtzaWRlfS4ke2V4dH1gKTsKICB9CgogIGNvbnN0IHBhcmFtcyA9IFsuLi5PYmplY3QuZW50cmllcyhvcHRzKV0KICAgIC5maWx0ZXIoKFtrLCB2XSkgPT4gdHlwZW9mIHYgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHYgPT0gJ251bWJlcicgfHwgKHR5cGVvZiB2ID09ICdib29sZWFuJyAmJiB2ID09PSB0cnVlKSkKICAgIC5tYXAoKFtrLCB2XSkgPT4gYC0tJHtrfSR7dHlwZW9mIHYgIT0gJ2Jvb2xlYW4nICYmIHYgIT0gJycgPyAnPScgKyB2IDogJyd9YCk7CiAgLy9jb25zb2xlLmxvZygnUmVxdWVzdCAvZ2NvZGUnLCB7IGdlcmJlckZpbGUsIGZldGNoLCByYXcgfSk7CiAgLy9jb25zb2xlLndhcm4oYGdlcmJlclRvR2NvZGVgLCBVdGlsLmFiYnJldmlhdGUoZ2VyYmVyRmlsZSksIHsgZ2NvZGVGaWxlLCBvcHRzIH0pOwoKICByZXR1cm4gWydwY2IyZ2NvZGUnXS5jb25jYXQocGFyYW1zKTsKICAvKgogIGxldCB3YWl0OwogIHRyeSB7CiAgICBjb25zdCBjbWQgPSBgcGNiMmdjb2RlICR7cGFyYW1zLmpvaW4oJyAnKX0gMj4mMWA7CiAgICBjb25zb2xlLndhcm4oYGV4ZWN1dGluZyAnJHtjbWR9J2ApOwogICAgY29uc3QgY2hpbGQgPSBleGVjKGNtZCwge30pOwogICAgLy8gZG8gd2hhdGV2ZXIgeW91IHdhbnQgd2l0aCBgY2hpbGRgIGhlcmUgLSBpdCdzIGEgQ2hpbGRQcm9jZXNzIGluc3RhbmNlIGp1c3QKICAgIC8vIHdpdGggcHJvbWlzZS1mcmllbmRseSBgLnRoZW4oKWAgJiBgLmNhdGNoKClgIGZ1bmN0aW9ucyBhZGRlZCB0byBpdCEKICAgIGxldCBvdXRwdXQgPSAnJzsKICAgIGNoaWxkLnN0ZG91dC5vbignZGF0YScsIGRhdGEgPT4gKG91dHB1dCArPSBkYXRhKSk7CiAgICBjaGlsZC5zdGRlcnIub24oJ2RhdGEnLCBkYXRhID0+IChvdXRwdXQgKz0gZGF0YSkpOwogICAgd2FpdCA9IGF3YWl0IGNoaWxkLmNhdGNoKGVycm9yID0+ICh7IGNvZGU6IC0xLCBlcnJvciB9KSk7CgogICAgY29uc3QgeyBzdGRvdXQsIHN0ZGVyciwgY29kZSwgc2lnbmFsIH0gPSB3YWl0OwogICAgaWYob3V0cHV0KSBvdXRwdXQgPSBVdGlsLmFiYnJldmlhdGUob3V0cHV0LnJlcGxhY2UoL1xzKlxyKlxuL2csICdcbicpLCAyMDApOwogICAgY29uc29sZS5sb2coJ1Jlc3BvbnNlIC9nY29kZScsIHsgc3Rkb3V0LCBvdXRwdXQsIHNpZGVzIH0pOwoKICAgIC8vICAgaWYoY29kZSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKG91dHB1dCk7CgogICAgY29uc3QgZ2NvZGVGaWxlID0gbWFrZVBhdGgoJ25nYycsIHNpZGVzWzBdKTsKICAgIGNvbnN0IHN2Z0ZpbGUgPSBtYWtlUGF0aCgnc3ZnJywgc2lkZXNbMF0sICdwcm9jZXNzZWQnKTsKCiAgICBmb3IobGV0IFtmaWxlLCB0b10gb2Ygc2lkZXMubWFwKHNpZGUgPT4gW21ha2VQYXRoKCdzdmcnLCBzaWRlLCAncHJvY2Vzc2VkJyksIG1ha2VQYXRoKCdzdmcnLCBzaWRlKV0pKQogICAgICBpZihmcy5leGlzdHNTeW5jKGZpbGUpKSBmcy5yZW5hbWVTeW5jKGZpbGUsIHRvKTsKCiAgICBsZXQgZmlsZXMgPSBzaWRlcy5tYXAoc2lkZSA9PiBbc2lkZSwgbWFrZVBhdGgoJ25nYycsIHNpZGUpXSkuZmlsdGVyKChbc2lkZSwgZmlsZV0pID0+IGZzLmV4aXN0c1N5bmMoZmlsZSkpOwogICAgY29uc29sZS5sb2coJ1Jlc3BvbnNlIC9nY29kZScsIHsgZmlsZXMgfSk7CgogICAgbGV0IHJlc3VsdCA9IHsgY29kZSwgb3V0cHV0LCBjbWQgfTsKICAgIGlmKGZldGNoKSB7CiAgICAgIGZvcihsZXQgW3NpZGUsIGZpbGVdIG9mIGZpbGVzKSByZXN1bHRbc2lkZV0gPSBhd2FpdCAoYXdhaXQgZnNQcm9taXNlcy5yZWFkRmlsZShHZXRWRlNQYXRoKGZpbGUpKSkudG9TdHJpbmcoKTsKICAgIH0KICAgIGlmKHJhdykgewogICAgICBjb25zdCB7IGZpbGUgfSA9IHJlc3VsdDsKICAgICAgcmV0dXJuIFNlbmRSYXcocmVzLCBmaWxlLCByZXN1bHQuZGF0YSk7CiAgICB9CiAgICByZXN1bHQuZmlsZXMgPSBPYmplY3QuZnJvbUVudHJpZXMoZmlsZXMpOwogICAgY29uc29sZS5sb2coCiAgICAgICdSZXNwb25zZSAvZ2NvZGUnLAogICAgICB1dGlsLmZpbHRlcktleXMocmVzdWx0LCBrZXkgPT4gIS8oWG91dHB1dHxkYXRhKS8udGVzdChrZXkpKQogICAgKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfSBjYXRjaChlcnJvcikgewogICAgY29uc29sZS5sb2coYEVSUk9SOiAke2Vycm9yLm1lc3NhZ2V9YCk7CiAgfSovCn0KAAAAAAAAAABsFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/document.js",
			"settings":
			{
				"buffer_size": 11395,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					24,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAAHUHAAAAAAAAdgcAAAAAAAAAAAAAdgcAAAAAAAB3BwAAAAAAAAAAAAB3BwAAAAAAAHgHAAAAAAAAAAAAAHgHAAAAAAAAeQcAAAAAAAAAAAAAeQcAAAAAAAB6BwAAAAAAAAAAAAB6BwAAAAAAAHsHAAAAAAAAAAAAAHsHAAAAAAAAfAcAAAAAAAAAAAAAfAcAAAAAAAB9BwAAAAAAAAAAAAB9BwAAAAAAAH4HAAAAAAAAAAAAAH4HAAAAAAAAfwcAAAAAAAAAAAAAfwcAAAAAAACABwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1BwAAAAAAAHUHAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIAHAAAAAAAAggcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACABwAAAAAAAIAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIEHAAAAAAAAgwcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBBwAAAAAAAIEHAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "EagleCo"
					},
					"BwAAAIIHAAAAAAAAgwcAAAAAAAAAAAAAgwcAAAAAAACEBwAAAAAAAAAAAACEBwAAAAAAAIUHAAAAAAAAAAAAAIUHAAAAAAAAhgcAAAAAAAAAAAAAhgcAAAAAAACHBwAAAAAAAAAAAACHBwAAAAAAAIgHAAAAAAAAAAAAAIgHAAAAAAAAiQcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBwAAAAAAAIIHAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"left_delete",
					null,
					"AQAAAIgHAAAAAAAAiAcAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJBwAAAAAAAIkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAIgHAAAAAAAAiQcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIBwAAAAAAAIgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					2,
					"left_delete",
					null,
					"AgAAAIgHAAAAAAAAiAcAAAAAAAABAAAARIcHAAAAAAAAhwcAAAAAAAABAAAAQw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJBwAAAAAAAIkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "Document.open"
					},
					"DQAAAIcHAAAAAAAAiAcAAAAAAAAAAAAAiAcAAAAAAACJBwAAAAAAAAAAAACJBwAAAAAAAIoHAAAAAAAAAAAAAIoHAAAAAAAAiwcAAAAAAAAAAAAAiwcAAAAAAACMBwAAAAAAAAAAAACMBwAAAAAAAI0HAAAAAAAAAAAAAI0HAAAAAAAAjgcAAAAAAAAAAAAAjgcAAAAAAACPBwAAAAAAAAAAAACPBwAAAAAAAJAHAAAAAAAAAAAAAJAHAAAAAAAAkQcAAAAAAAAAAAAAkQcAAAAAAACSBwAAAAAAAAAAAACSBwAAAAAAAJMHAAAAAAAAAAAAAJMHAAAAAAAAlAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHBwAAAAAAAIcHAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJUHAAAAAAAAlgcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVBwAAAAAAAJUHAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJYHAAAAAAAAmAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWBwAAAAAAAJYHAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "filename,"
					},
					"CQAAAJcHAAAAAAAAmAcAAAAAAAAAAAAAmAcAAAAAAACZBwAAAAAAAAAAAACZBwAAAAAAAJoHAAAAAAAAAAAAAJoHAAAAAAAAmwcAAAAAAAAAAAAAmwcAAAAAAACcBwAAAAAAAAAAAACcBwAAAAAAAJ0HAAAAAAAAAAAAAJ0HAAAAAAAAngcAAAAAAAAAAAAAngcAAAAAAACfBwAAAAAAAAAAAACfBwAAAAAAAKAHAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXBwAAAAAAAJcHAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAJ8HAAAAAAAAnwcAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgBwAAAAAAAKAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJ8HAAAAAAAAoAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfBwAAAAAAAJ8HAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAKAHAAAAAAAAoAcAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChBwAAAAAAAKEHAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "mx"
					},
					"AgAAAKAHAAAAAAAAoQcAAAAAAAAAAAAAoQcAAAAAAACiBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgBwAAAAAAAKAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					2,
					"left_delete",
					null,
					"AgAAAKEHAAAAAAAAoQcAAAAAAAABAAAAeKAHAAAAAAAAoAcAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiBwAAAAAAAKIHAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "xml}"
					},
					"BAAAAKAHAAAAAAAAoQcAAAAAAAAAAAAAoQcAAAAAAACiBwAAAAAAAAAAAACiBwAAAAAAAKMHAAAAAAAAAAAAAKMHAAAAAAAApAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgBwAAAAAAAKAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKUHAAAAAAAApgcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClBwAAAAAAAKUHAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmBwAAAAAAAKYHAAAAAAAAAAAAAACAeEA"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/container"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/container/trieMap.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs-misc.c.ast.bjson",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/fire.es",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/asynciterator.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-asynciterator.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/remove-functions.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-asynciterator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/session.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/buffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/generator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-ws-state.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-client/minimal-ws-client-spam-tx-rx/minimal-ws-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-request.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-response.c",
		"/home/roman/Projects/plot-cv/fire/.prettierrc",
		"/home/roman/Projects/plot-cv/fire/asconfig.json",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/c.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_mysql.js",
		"/home/roman/Dokumente/Eagle-Layouts/VCO-8038-board.svg",
		"/home/roman/Projects/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/token.c",
		"/usr/local/bin/list-exports.js",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Luscious.tmTheme",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Deluxe.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/getdents.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/ecmascript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/an-tronics/eagle/ioboard2.brd",
		"/home/roman/Projects/an-tronics/eagle/mainboard2.brd",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser/ebnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/mariadb-10.3-10.3.38/include/mysql_com.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"onRequest",
			"static open",
			"misc",
			"console",
			"lookup",
			"curry",
			"makeTrans",
			"normalize =",
			"ucfirst",
			"params.target",
			"'t'",
			"\\bflags\\b",
			"\\.flags",
			"flags =",
			"Compile\\b",
			"Compile",
			"Compile\\(",
			"Compile",
			"SpawnCom",
			"getOpt",
			"SpawnComp",
			"Table",
			"ReadJSON",
			"padTrunc",
			"Compile ERROR",
			"\\bspawn\\b",
			"Spawn",
			"\\bspawn\\b",
			"spawn\\b",
			"spawn\\(",
			"Compile ERROR",
			"spawn\\b",
			"spawn",
			"spawn\\(",
			"PortableSpawn",
			"hist",
			"ASTShel",
			"ReadFile",
			"ReadJSON",
			"JSON",
			"atexit",
			"findIndex",
			"pushUnique",
			"findIndex",
			"findIndex =",
			"util",
			"indMethods",
			"\n    ",
			"waitkey",
			"\\bbindMethods",
			"\\bbindMethods =",
			" bindMethods =",
			"function bindMethods",
			"bindMethods",
			"platform",
			"CommandRead",
			"platform",
			"getOpt",
			"getArgv",
			"getPlatform",
			"ASTShell",
			"main",
			"\"atomToString",
			"\"atomToStrng",
			"HasProperty",
			"JS_HasProperty",
			"js_inspect_custom_call",
			"custom_inspe",
			"text\\(",
			"entries",
			"inspectSym",
			"#keys",
			"show =",
			"defineGettersSetters",
			"cacheF",
			"cacheFields",
			"libraries'",
			"LoadHistory",
			"cmdhist",
			"static open",
			"\\.open",
			"ReadFile",
			"get board",
			"types",
			"dir-helpers",
			"weakMapper",
			"ArrayFac",
			"MoveIter",
			"'event'",
			"event'",
			"type:",
			"TouchIterator",
			"MovementIterator",
			"TouchIterator",
			"rects",
			"onMessage",
			"Print",
			"Message",
			"'resize'",
			"innerHeigh",
			"resize",
			"seedlist",
			"insert",
			"useTrkl"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "upload-server.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34489,
						"regions":
						{
							"col_0087FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										23452,
										23465
									],
									[
										31883,
										31896
									]
								],
								"scope": "col_0087FFFF"
							},
							"col_0087FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0087FFFF_circle.png",
								"regions":
								[
									[
										23431,
										23431
									],
									[
										31858,
										31858
									]
								],
								"scope": "col_gutter"
							},
							"col_00AFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										10873,
										10886
									]
								],
								"scope": "col_00AFFFFF"
							},
							"col_00AFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00AFFFFF_circle.png",
								"regions":
								[
									[
										10826,
										10826
									]
								],
								"scope": "col_gutter"
							},
							"col_D700FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										10849,
										10863
									]
								],
								"scope": "col_D700FFFF"
							},
							"col_D700FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D700FFFF_circle.png",
								"regions":
								[
									[
										10826,
										10826
									]
								],
								"scope": "col_gutter"
							},
							"col_FF87D7FF":
							{
								"flags": 16,
								"regions":
								[
									[
										32641,
										32655
									]
								],
								"scope": "col_FF87D7FF"
							},
							"col_FF87D7FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF87D7FF_circle.png",
								"regions":
								[
									[
										32616,
										32616
									]
								],
								"scope": "col_gutter"
							},
							"col_FFAF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										31680,
										31694
									]
								],
								"scope": "col_FFAF00FF"
							},
							"col_FFAF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFAF00FF_circle.png",
								"regions":
								[
									[
										31651,
										31651
									]
								],
								"scope": "col_gutter"
							},
							"col_FFD700FF":
							{
								"flags": 16,
								"regions":
								[
									[
										24570,
										24584
									],
									[
										24679,
										24693
									],
									[
										24802,
										24816
									]
								],
								"scope": "col_FFD700FF"
							},
							"col_FFD700FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFD700FF_circle.png",
								"regions":
								[
									[
										24543,
										24543
									],
									[
										24658,
										24658
									],
									[
										24771,
										24771
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								24493,
								24502
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 734,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682118462.05,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10487.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib/eagle/schematicRenderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6751,
						"regions":
						{
						},
						"selection":
						[
							[
								54,
								54
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682106649.58,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/eagle/components.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3776,
						"regions":
						{
						},
						"selection":
						[
							[
								1567,
								1567
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 30,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682106649.23,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "eagle2svg.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2511,
						"regions":
						{
						},
						"selection":
						[
							[
								2124,
								2124
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 79,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682106646.66,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 17.0,
						"translation.y": 838.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pcb-conversion.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5484,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682106647.73,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/eagle/document.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11395,
						"regions":
						{
						},
						"selection":
						[
							[
								1056,
								1056
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 25,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1682110022.37,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"docu",
				"lib/eagle/document.js"
			],
			[
				"docum",
				"lib/eagle/document.js"
			],
			[
				"pcb-co",
				"pcb-conversion.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"eagle/compon",
				"lib/eagle/components.js"
			],
			[
				"components",
				"components.js"
			],
			[
				"schematicrend",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"size.j",
				"lib/geom/size.js"
			],
			[
				"node.",
				"lib/eagle/node.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"componen",
				"lib/eagle/components.js"
			],
			[
				"components.j",
				"components.js"
			],
			[
				"nodeLi",
				"lib/eagle/nodeList.js"
			],
			[
				"documen",
				"lib/eagle/document.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"repl.",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"eagle-shel",
				"eagle-shell.js"
			],
			[
				"misc.c",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-misc.c",
				"quickjs-misc.c.ast.bjson"
			],
			[
				"quickjs-inspe",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"document.js",
				"lib/eagle/document.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"fire.html",
				"fire.html"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"fire",
				"fire.es"
			],
			[
				"rpc.js",
				"js/rpc.js"
			],
			[
				"wscli",
				"wscli.js"
			],
			[
				"asynciter",
				"lib/asynciterator.c"
			],
			[
				"asyn",
				"lib/asynciterator.c"
			],
			[
				"minnet-asy",
				"src/minnet-asynciterator.c"
			],
			[
				"asynciterat",
				"lib/asynciterator.c"
			],
			[
				"minnet-clie",
				"src/minnet-client.c"
			],
			[
				"async",
				"lib/asynciterator.c"
			],
			[
				"minnet-as",
				"src/minnet-asynciterator.h"
			],
			[
				"jsutils",
				"lib/jsutils.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"minnet-cli",
				"src/minnet-client.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"minnet-req",
				"src/minnet-request.c"
			],
			[
				"minnet-resp",
				"src/minnet-response.c"
			],
			[
				"index",
				"assembly/index.ts"
			],
			[
				"fire-debu",
				"~/Projects/plot-cv/fire/build/fire-debug.js"
			],
			[
				"fire.",
				"assembly/fire.ts"
			],
			[
				"packa",
				"package.json"
			],
			[
				"prettier",
				".prettierrc"
			],
			[
				"ascon",
				"asconfig.json"
			],
			[
				"index.",
				"assembly/index.ts"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"misc.",
				"lib/misc.js"
			],
			[
				"extendAr",
				"lib/extendArray.js"
			],
			[
				"extendArray",
				"lib/extendArray.js"
			],
			[
				"propery-enu",
				"src/property-enumeration.c"
			],
			[
				"vector.h",
				"include/vector.h"
			],
			[
				"vector.c",
				"src/vector.c"
			],
			[
				"tree-walk",
				"quickjs-tree-walker.c"
			],
			[
				"tree",
				"quickjs-tree-walker.c"
			],
			[
				"extendGener",
				"lib/extendGenerator.js"
			],
			[
				"",
				"quickjs-tree-walker.c"
			],
			[
				"quickjs-tree",
				"quickjs-tree-walker.c"
			],
			[
				"xpath.",
				"lib/xpath.js"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"repl.j",
				"lib/repl.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"require.js",
				"lib/require.js"
			],
			[
				"c.js",
				"lib/lexer/c.js"
			],
			[
				"test",
				"tests/test_mysql.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"xml-s",
				"xml-shell.js"
			],
			[
				"xml-she",
				"xml-shell.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"lexer.c",
				"src/lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"lexer.h",
				"include/lexer.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"lexer.",
				"quickjs-lexer.c"
			],
			[
				"token.h",
				"include/token.h"
			],
			[
				"token.c",
				"src/token.c"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"list-exports",
				"list-exports.js"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"predicate.h",
				"quickjs-predicate.h"
			],
			[
				"location.c",
				"src/location.c"
			],
			[
				"buffer-ut",
				"include/buffer-utils.h"
			],
			[
				"location.h",
				"include/location.h"
			],
			[
				"Loc",
				"include/location.h"
			],
			[
				"quickjs-le",
				"quickjs-lexer.c"
			],
			[
				"prop",
				"src/property-enumeration.c"
			],
			[
				"proper",
				"include/property-enumeration.h"
			],
			[
				"quickjs-dee",
				"quickjs-deep.c"
			],
			[
				"quickjs-inps",
				"quickjs-inspect.c"
			],
			[
				"-misc.c",
				"quickjs-misc.c"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"dom",
				"lib/dom.js"
			],
			[
				"-inspect",
				"quickjs-inspect.c"
			],
			[
				"cmake/",
				"cmake/QuickJSModule.cmake"
			],
			[
				"process",
				"lib/process.js"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"ecmascript.js",
				"lib/lexer/ecmascript.js"
			],
			[
				"quickjs-int",
				"quickjs-internal.h"
			],
			[
				"ecmas",
				"lib/lexer/ecmascript.js"
			],
			[
				"ecma",
				"lib/lexer/ecmascript.js"
			],
			[
				"ecmasc",
				"lib/lexer/ecmascript.js"
			],
			[
				"lib/util",
				"lib/util.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"path.c",
				"src/path.c"
			],
			[
				"char-utils",
				"src/char-utils.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"console.js",
				"lib/console.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 271.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1017.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 308.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
