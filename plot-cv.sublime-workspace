{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Property",
				"PropertyEnumeration"
			],
			[
				"PaStream",
				"PaStreamParameters"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"PaE",
				"PaHostErrorInfo"
			],
			[
				"hostApi",
				"hostApiSpecificStreamInfo"
			],
			[
				"host",
				"hostApiType"
			],
			[
				"defaultHi",
				"defaultHighOutputLatency"
			],
			[
				"Draw",
				"DrawCircle"
			],
			[
				"exi",
				"existsSync"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"crea",
				"createTextNode"
			],
			[
				"Transform",
				"TransformationList"
			],
			[
				"trans",
				"transformation"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  cpp_js(settings)\n  trim = function(str)\n  strip_cpp_comments = function(str)\n  is_string_boundary = function(text, idx)\n  warn_func(s)\n  error_func(s)\n  pragma_func(pragma)\n  .error_func = function(e)\n  clear()\n  defined(k)\n  define(k, v)\n  undefine(k)\n  define_multiple(dict)\n  run(text, name)\n  error = function(text)\n  warn = function(text)\n  process_directive = function(command, elem, i)\nfunction(contents)\n  .completion_func = function(data, lines, new_state)\n  process_block = function(i, elem)\n  subs(text, blacklist_in, error, warn, nest_sub)\n  _set_state(other)\n  _get_state(other)\n  _result(arr, state)\n  _is_identifier(identifier)\n  _is_macro(macro)\n  _is_pp_special_token(tok)\n  _get_macro_info(k)\n  _remove_sentinels(new_text)\n  _handle_pragma(text, error, warn)\nfunction(match, pragma)\n  _concatenate_strings(text)\n  _handle_ops(text, error, warn)\n  _subs_simple(text, macro_name, blacklist_in, error, warn, nest_sub, start_idx)\n  _subs_macro(text, macro_name, blacklist, error, warn, nest_sub, start_idx)\n  _masked_eval(scr)\n  _eval(val, error, warn)",
			"settings":
			{
				"buffer_size": 1068,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					178,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1867,
								1871
							],
							[
								1930,
								1934
							],
							[
								1970,
								2000
							],
							[
								2043,
								2064
							],
							[
								2213,
								2239
							],
							[
								2397,
								2416
							],
							[
								2744,
								2772
							],
							[
								3062,
								3070
							],
							[
								3071,
								3085
							],
							[
								3167,
								3177
							],
							[
								3239,
								3287
							],
							[
								3401,
								3410
							],
							[
								3520,
								3542
							],
							[
								4001,
								4023
							],
							[
								4418,
								4436
							],
							[
								4535,
								4553
							],
							[
								4658,
								4684
							],
							[
								4820,
								4824
							],
							[
								4942,
								4958
							],
							[
								5450,
								5469
							],
							[
								5533,
								5554
							],
							[
								5888,
								5893
							],
							[
								5968,
								5983
							],
							[
								6068,
								6076
							],
							[
								6117,
								6125
							],
							[
								6496,
								6569
							],
							[
								6573,
								6581
							],
							[
								6678,
								6708
							],
							[
								6737,
								6742
							],
							[
								6775,
								6782
							],
							[
								6811,
								6839
							],
							[
								7176,
								7183
							],
							[
								7202,
								7225
							],
							[
								7255,
								7262
							],
							[
								7293,
								7301
							],
							[
								7339,
								7346
							],
							[
								7546,
								7559
							],
							[
								7739,
								7782
							],
							[
								7815,
								7824
							],
							[
								7885,
								7889
							],
							[
								7991,
								7995
							],
							[
								8031,
								8045
							],
							[
								8157,
								8185
							],
							[
								8390,
								8415
							],
							[
								8513,
								8537
							],
							[
								8610,
								8614
							],
							[
								8732,
								8736
							],
							[
								8800,
								8814
							],
							[
								8870,
								8879
							],
							[
								9177,
								9191
							],
							[
								9314,
								9349
							],
							[
								9438,
								9443
							],
							[
								9566,
								9578
							],
							[
								9631,
								9656
							],
							[
								9705,
								9716
							],
							[
								9756,
								9767
							],
							[
								9905,
								9916
							],
							[
								10003,
								10016
							],
							[
								10097,
								10129
							],
							[
								10367,
								10396
							],
							[
								10407,
								10422
							],
							[
								10484,
								10503
							],
							[
								10711,
								10750
							],
							[
								10815,
								10855
							],
							[
								10938,
								10982
							],
							[
								11064,
								11103
							],
							[
								11165,
								11203
							],
							[
								11289,
								11317
							],
							[
								11380,
								11407
							],
							[
								11958,
								11984
							],
							[
								12251,
								12258
							],
							[
								14174,
								14232
							],
							[
								15268,
								15275
							],
							[
								15339,
								15346
							],
							[
								15356,
								15367
							],
							[
								15408,
								15434
							],
							[
								15550,
								15564
							],
							[
								15861,
								15880
							],
							[
								15907,
								15914
							],
							[
								16002,
								16032
							],
							[
								16098,
								16138
							],
							[
								16314,
								16365
							],
							[
								17354,
								17361
							],
							[
								17768,
								17788
							],
							[
								17964,
								18018
							],
							[
								18207,
								18219
							],
							[
								18247,
								18259
							],
							[
								18874,
								18934
							],
							[
								19545,
								19600
							],
							[
								19696,
								19708
							],
							[
								19713,
								19743
							],
							[
								20024,
								20046
							],
							[
								20092,
								20115
							],
							[
								20187,
								20202
							],
							[
								20337,
								20353
							],
							[
								20757,
								20770
							],
							[
								20895,
								20914
							],
							[
								20966,
								20974
							],
							[
								21031,
								21046
							],
							[
								21205,
								21217
							],
							[
								21562,
								21576
							],
							[
								21676,
								21693
							],
							[
								21920,
								21942
							],
							[
								22059,
								22084
							],
							[
								22184,
								22201
							],
							[
								22256,
								22260
							],
							[
								22348,
								22352
							],
							[
								22404,
								22428
							],
							[
								22544,
								22584
							],
							[
								22645,
								22666
							],
							[
								22950,
								22982
							],
							[
								23466,
								23481
							],
							[
								23592,
								23617
							],
							[
								23786,
								23821
							],
							[
								24041,
								24048
							],
							[
								24137,
								24144
							],
							[
								24173,
								24182
							],
							[
								24219,
								24228
							],
							[
								24278,
								24286
							],
							[
								24328,
								24352
							],
							[
								24448,
								24464
							],
							[
								24500,
								24540
							],
							[
								24838,
								24881
							],
							[
								25824,
								25835
							],
							[
								26580,
								26630
							],
							[
								26652,
								26678
							],
							[
								26713,
								26742
							],
							[
								27086,
								27129
							],
							[
								27242,
								27246
							],
							[
								27262,
								27266
							],
							[
								27311,
								27398
							],
							[
								27565,
								27598
							],
							[
								27657,
								27662
							],
							[
								27732,
								27774
							],
							[
								27850,
								27860
							],
							[
								27979,
								28019
							],
							[
								28160,
								28165
							],
							[
								28223,
								28230
							],
							[
								28347,
								28351
							],
							[
								28430,
								28434
							],
							[
								28588,
								28595
							],
							[
								28682,
								28687
							],
							[
								28795,
								28811
							],
							[
								28922,
								28929
							],
							[
								29008,
								29012
							],
							[
								29073,
								29080
							],
							[
								29156,
								29163
							],
							[
								29220,
								29266
							],
							[
								29306,
								29316
							],
							[
								29469,
								29505
							],
							[
								29546,
								29558
							],
							[
								31201,
								31233
							],
							[
								31729,
								31739
							],
							[
								31789,
								31799
							],
							[
								31847,
								31857
							],
							[
								32433,
								32444
							],
							[
								32538,
								32542
							],
							[
								32569,
								32573
							],
							[
								32597,
								32601
							],
							[
								32625,
								32629
							],
							[
								32657,
								32694
							],
							[
								33095,
								33150
							],
							[
								33357,
								33365
							],
							[
								33554,
								33562
							],
							[
								33651,
								33659
							],
							[
								33705,
								33713
							],
							[
								33783,
								33819
							],
							[
								33914,
								33957
							],
							[
								34248,
								34267
							],
							[
								34323,
								34328
							],
							[
								34592,
								34615
							],
							[
								34705,
								34710
							],
							[
								34828,
								34851
							],
							[
								34941,
								34946
							],
							[
								35054,
								35066
							],
							[
								35184,
								35189
							],
							[
								35244,
								35273
							],
							[
								35378,
								35383
							],
							[
								36330,
								36388
							],
							[
								37323,
								37334
							],
							[
								37367,
								37378
							],
							[
								37427,
								37433
							],
							[
								37486,
								37494
							],
							[
								37790,
								37794
							],
							[
								38510,
								38516
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							".debug = (...args) =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							" function nameOrIdPred(name_or_id, pred = n => true)",
							" node =>",
							" node =>",
							" node =>",
							" node =>",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AQAAAAAAAAAAAAAADw0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					179,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KICAuZGVidWcgPSAoLi4uYXJncykgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKQVNUU2hlbGwoLi4uYXJncykKKGEsIHApID0+CihhLCBwKSA9PgooYSwgcCkgPT4KICBnZXQgZmxhZ3MoKQogIHYgPT4KICB2ID0+CiAgZCA9PgogIGwgPT4KQ29tcGlsZShmaWxlLCAuLi5hcmdzKQogIG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQpub2RlID0+Cm5vZGUgPT4Kbm9kZSA9Pgpub2RlID0+CiAgc2VsZWN0KG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0QnlJZE9yTmFtZShuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQogIGdldFR5cGUobmFtZV9vcl9pZCkKbiA9PgogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					180,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/os-helpers.js",
						"symkeys":
						[
							[
								902,
								928
							],
							[
								1252,
								1279
							],
							[
								1290,
								1304
							],
							[
								1521,
								1536
							],
							[
								1566,
								1585
							],
							[
								1620,
								1644
							],
							[
								1919,
								1926
							],
							[
								2021,
								2029
							],
							[
								2124,
								2132
							],
							[
								2288,
								2308
							],
							[
								2443,
								2475
							]
						],
						"symlist":
						[
							" function Execute(...args)",
							" function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							" function Spawn(...args)",
							"stdin()",
							"stdout()",
							"stderr()",
							" function Shell(cmd)",
							" function ExecTool(cmd, ...args)"
						]
					},
					"AQAAAAAAAAAAAAAAqgAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					181,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/os-helpers.js",
						"symkeys":
						[
							[
								904,
								930
							],
							[
								1254,
								1281
							],
							[
								1292,
								1306
							],
							[
								1523,
								1538
							],
							[
								1568,
								1587
							],
							[
								1622,
								1646
							],
							[
								1921,
								1928
							],
							[
								2023,
								2031
							],
							[
								2126,
								2134
							],
							[
								2290,
								2310
							],
							[
								2445,
								2477
							]
						],
						"symlist":
						[
							" function Execute(...args)",
							" function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							" function Spawn(...args)",
							"stdin()",
							"stdout()",
							"stderr()",
							" function Shell(cmd)",
							" function ExecTool(cmd, ...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACqAAAARXhlY3V0ZSguLi5hcmdzKQpVUkxXb3JrZXIoc2NyaXB0KQogIGRhdGFVUkwgPSBzID0+CihwdXNoLCBzdG9wKSA9PgogIHBvc3RNZXNzYWdlOiBtc2cgPT4KU3Bhd24oLi4uYXJncykKICBzdGRpbigpCiAgc3Rkb3V0KCkKICBzdGRlcnIoKQpTaGVsbChjbWQpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykAAAAAAAAAAKoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					182,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/os-helpers.js",
						"symkeys":
						[
							[
								934,
								960
							],
							[
								1284,
								1311
							],
							[
								1322,
								1336
							],
							[
								1553,
								1568
							],
							[
								1598,
								1617
							],
							[
								1652,
								1676
							],
							[
								1951,
								1958
							],
							[
								2053,
								2061
							],
							[
								2156,
								2164
							],
							[
								2320,
								2340
							],
							[
								2475,
								2507
							]
						],
						"symlist":
						[
							" function Execute(...args)",
							" function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							" function Spawn(...args)",
							"stdin()",
							"stdout()",
							"stderr()",
							" function Shell(cmd)",
							" function ExecTool(cmd, ...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACqAAAARXhlY3V0ZSguLi5hcmdzKQpVUkxXb3JrZXIoc2NyaXB0KQogIGRhdGFVUkwgPSBzID0+CihwdXNoLCBzdG9wKSA9PgogIHBvc3RNZXNzYWdlOiBtc2cgPT4KU3Bhd24oLi4uYXJncykKICBzdGRpbigpCiAgc3Rkb3V0KCkKICBzdGRlcnIoKQpTaGVsbChjbWQpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykAAAAAAAAAAKoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					183,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/os-helpers.js",
						"symkeys":
						[
							[
								934,
								960
							],
							[
								1284,
								1311
							],
							[
								1322,
								1336
							],
							[
								1553,
								1568
							],
							[
								1598,
								1617
							],
							[
								1652,
								1676
							],
							[
								1951,
								1958
							],
							[
								2053,
								2061
							],
							[
								2156,
								2164
							],
							[
								2320,
								2340
							],
							[
								2475,
								2507
							]
						],
						"symlist":
						[
							" function Execute(...args)",
							" function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							" function Spawn(...args)",
							"stdin()",
							"stdout()",
							"stderr()",
							" function Shell(cmd)",
							" function ExecTool(cmd, ...args)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACqAAAARXhlY3V0ZSguLi5hcmdzKQpVUkxXb3JrZXIoc2NyaXB0KQogIGRhdGFVUkwgPSBzID0+CihwdXNoLCBzdG9wKSA9PgogIHBvc3RNZXNzYWdlOiBtc2cgPT4KU3Bhd24oLi4uYXJncykKICBzdGRpbigpCiAgc3Rkb3V0KCkKICBzdGRlcnIoKQpTaGVsbChjbWQpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykAAAAAAAAAAKoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACqAAAARXhlY3V0ZSguLi5hcmdzKQpVUkxXb3JrZXIoc2NyaXB0KQogIGRhdGFVUkwgPSBzID0+CihwdXNoLCBzdG9wKSA9PgogIHBvc3RNZXNzYWdlOiBtc2cgPT4KU3Bhd24oLi4uYXJncykKICBzdGRpbigpCiAgc3Rkb3V0KCkKICBzdGRlcnIoKQpTaGVsbChjbWQpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykAAAAAAAAAAKoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					184,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/os-helpers.js",
						"symkeys":
						[
							[
								902,
								928
							],
							[
								1252,
								1279
							],
							[
								1290,
								1304
							],
							[
								1521,
								1536
							],
							[
								1566,
								1585
							],
							[
								1620,
								1644
							],
							[
								1919,
								1926
							],
							[
								2021,
								2029
							],
							[
								2124,
								2132
							],
							[
								2288,
								2308
							],
							[
								2443,
								2475
							]
						],
						"symlist":
						[
							" function Execute(...args)",
							" function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							" function Spawn(...args)",
							"stdin()",
							"stdout()",
							"stderr()",
							" function Shell(cmd)",
							" function ExecTool(cmd, ...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACqAAAARXhlY3V0ZSguLi5hcmdzKQpVUkxXb3JrZXIoc2NyaXB0KQogIGRhdGFVUkwgPSBzID0+CihwdXNoLCBzdG9wKSA9PgogIHBvc3RNZXNzYWdlOiBtc2cgPT4KU3Bhd24oLi4uYXJncykKICBzdGRpbigpCiAgc3Rkb3V0KCkKICBzdGRlcnIoKQpTaGVsbChjbWQpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykAAAAAAAAAAKoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					185,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/os-helpers.js",
						"symkeys":
						[
							[
								902,
								928
							],
							[
								1252,
								1279
							],
							[
								1290,
								1304
							],
							[
								1521,
								1536
							],
							[
								1566,
								1585
							],
							[
								1620,
								1644
							],
							[
								1919,
								1926
							],
							[
								2021,
								2029
							],
							[
								2124,
								2132
							],
							[
								2288,
								2308
							],
							[
								2443,
								2475
							]
						],
						"symlist":
						[
							" function Execute(...args)",
							" function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							" function Spawn(...args)",
							"stdin()",
							"stdout()",
							"stderr()",
							" function Shell(cmd)",
							" function ExecTool(cmd, ...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACqAAAARXhlY3V0ZSguLi5hcmdzKQpVUkxXb3JrZXIoc2NyaXB0KQogIGRhdGFVUkwgPSBzID0+CihwdXNoLCBzdG9wKSA9PgogIHBvc3RNZXNzYWdlOiBtc2cgPT4KU3Bhd24oLi4uYXJncykKICBzdGRpbigpCiAgc3Rkb3V0KCkKICBzdGRlcnIoKQpTaGVsbChjbWQpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykAAAAAAAAAAKoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					186,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACqAAAARXhlY3V0ZSguLi5hcmdzKQpVUkxXb3JrZXIoc2NyaXB0KQogIGRhdGFVUkwgPSBzID0+CihwdXNoLCBzdG9wKSA9PgogIHBvc3RNZXNzYWdlOiBtc2cgPT4KU3Bhd24oLi4uYXJncykKICBzdGRpbigpCiAgc3Rkb3V0KCkKICBzdGRlcnIoKQpTaGVsbChjbWQpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					187,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								858,
								882
							],
							[
								918,
								943
							],
							[
								992,
								1014
							],
							[
								1252,
								1276
							],
							[
								1365,
								1377
							],
							[
								1443,
								1460
							],
							[
								1935,
								1947
							],
							[
								2086,
								2113
							],
							[
								3282,
								3336
							],
							[
								3531,
								3559
							],
							[
								4393,
								4402
							],
							[
								4541,
								4546
							],
							[
								4922,
								4934
							],
							[
								4964,
								4968
							],
							[
								5022,
								5036
							],
							[
								5066,
								5070
							],
							[
								5213,
								5224
							],
							[
								5413,
								5427
							],
							[
								5544,
								5554
							],
							[
								5912,
								5926
							],
							[
								6038,
								6043
							],
							[
								6274,
								6292
							],
							[
								6330,
								6344
							],
							[
								6438,
								6452
							],
							[
								6527,
								6532
							],
							[
								6746,
								6754
							],
							[
								6868,
								6876
							],
							[
								7205,
								7210
							],
							[
								7232,
								7239
							],
							[
								7391,
								7396
							],
							[
								8056,
								8067
							],
							[
								8465,
								8479
							],
							[
								8945,
								8956
							],
							[
								9043,
								9054
							],
							[
								9073,
								9077
							],
							[
								9217,
								9228
							],
							[
								9246,
								9250
							],
							[
								9390,
								9401
							],
							[
								9512,
								9523
							],
							[
								9541,
								9545
							],
							[
								10311,
								10322
							],
							[
								10341,
								10345
							],
							[
								10474,
								10485
							],
							[
								10508,
								10512
							],
							[
								10643,
								10654
							],
							[
								10738,
								10749
							],
							[
								10947,
								10959
							],
							[
								11060,
								11071
							],
							[
								11201,
								11212
							],
							[
								11909,
								11915
							],
							[
								12034,
								12040
							],
							[
								12058,
								12062
							],
							[
								12200,
								12206
							],
							[
								12428,
								12434
							],
							[
								12444,
								12448
							],
							[
								12546,
								12552
							],
							[
								12641,
								12647
							],
							[
								12737,
								12743
							],
							[
								12838,
								12844
							],
							[
								12943,
								12949
							],
							[
								13032,
								13038
							],
							[
								13126,
								13132
							],
							[
								13267,
								13273
							],
							[
								13362,
								13368
							],
							[
								13421,
								13427
							],
							[
								13520,
								13526
							],
							[
								14079,
								14094
							],
							[
								14345,
								14359
							],
							[
								14604,
								14616
							],
							[
								15353,
								15366
							],
							[
								15629,
								15641
							],
							[
								15790,
								15802
							],
							[
								16695,
								16705
							],
							[
								17050,
								17062
							],
							[
								17115,
								17119
							],
							[
								17193,
								17202
							],
							[
								17255,
								17259
							],
							[
								17470,
								17476
							],
							[
								17556,
								17561
							],
							[
								17834,
								17840
							],
							[
								17963,
								17983
							],
							[
								18002,
								18030
							],
							[
								18268,
								18274
							],
							[
								18471,
								18478
							],
							[
								18568,
								18574
							],
							[
								18771,
								18778
							],
							[
								18950,
								18956
							],
							[
								19015,
								19020
							],
							[
								19119,
								19125
							],
							[
								19184,
								19189
							],
							[
								19244,
								19250
							],
							[
								19330,
								19335
							],
							[
								19450,
								19456
							],
							[
								19515,
								19520
							],
							[
								19590,
								19612
							],
							[
								19709,
								19732
							],
							[
								19831,
								19853
							],
							[
								19979,
								19996
							],
							[
								20029,
								20037
							],
							[
								20236,
								20258
							],
							[
								20666,
								20675
							],
							[
								20724,
								20728
							],
							[
								21134,
								21140
							],
							[
								21255,
								21259
							],
							[
								21392,
								21397
							],
							[
								21467,
								21472
							],
							[
								21607,
								21621
							],
							[
								21736,
								21757
							],
							[
								21918,
								21938
							],
							[
								22037,
								22055
							],
							[
								22292,
								22299
							],
							[
								22435,
								22446
							],
							[
								22637,
								22655
							],
							[
								22740,
								22760
							],
							[
								22810,
								22814
							],
							[
								22857,
								22867
							],
							[
								23045,
								23061
							],
							[
								23096,
								23106
							],
							[
								23448,
								23469
							],
							[
								23502,
								23515
							],
							[
								23985,
								24011
							],
							[
								24108,
								24119
							],
							[
								24549,
								24553
							],
							[
								24583,
								24587
							],
							[
								24664,
								24668
							],
							[
								26028,
								26032
							],
							[
								26406,
								26410
							],
							[
								26645,
								26649
							],
							[
								26804,
								26808
							],
							[
								26837,
								26841
							],
							[
								27035,
								27039
							],
							[
								27716,
								27720
							],
							[
								28011,
								28023
							],
							[
								28062,
								28078
							],
							[
								28444,
								28458
							],
							[
								28550,
								28578
							],
							[
								28805,
								28809
							],
							[
								28900,
								28907
							],
							[
								28970,
								28980
							],
							[
								29207,
								29214
							],
							[
								29459,
								29466
							],
							[
								29646,
								29653
							],
							[
								29976,
								29982
							],
							[
								30212,
								30216
							],
							[
								30314,
								30337
							],
							[
								30397,
								30425
							],
							[
								30513,
								30520
							],
							[
								30683,
								30706
							],
							[
								30911,
								30927
							],
							[
								30968,
								30976
							],
							[
								31039,
								31047
							],
							[
								31266,
								31277
							],
							[
								31391,
								31409
							],
							[
								31521,
								31532
							],
							[
								31577,
								31594
							],
							[
								31706,
								31713
							],
							[
								31764,
								31785
							],
							[
								31883,
								31902
							],
							[
								31967,
								31988
							],
							[
								32055,
								32077
							],
							[
								32145,
								32163
							],
							[
								32514,
								32522
							],
							[
								32583,
								32591
							],
							[
								32863,
								32880
							],
							[
								32984,
								32994
							],
							[
								33104,
								33137
							],
							[
								33170,
								33188
							],
							[
								33268,
								33289
							],
							[
								33315,
								33326
							],
							[
								33434,
								33446
							],
							[
								33532,
								33561
							],
							[
								33591,
								33603
							],
							[
								33758,
								33788
							],
							[
								33821,
								33839
							],
							[
								33878,
								33899
							],
							[
								33920,
								33931
							],
							[
								33992,
								34017
							],
							[
								34147,
								34168
							],
							[
								34216,
								34225
							],
							[
								37083,
								37095
							],
							[
								37150,
								37162
							],
							[
								37225,
								37264
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"gates: () =>",
							"e =>",
							"devices: () =>",
							"e =>",
							"name: () =>",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"layer: () =>",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"elements: () =>",
							"signals: () =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"plain: () =>",
							"packages()",
							"devicesets()",
							"e =>",
							"symbols()",
							"e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							" () =>",
							"e =>",
							" e =>",
							" e =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							"pushEvent(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"n =>",
							"l =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AQAAAAAAAAAAAAAApQkAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					188,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClCQAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBkZWNvZGVIVE1MRW50aXRpZXMgPSBzID0+CihtYXRjaCwgZW50aXR5KSA9PgpUTGlzdCA9IChjaGlsZCwgZWxlbSkgPT4KICByb3VuZCA9IG4gPT4KICBnZXQodGFyZ2V0LCBwcm9wKQpFYWdsZUVsZW1lbnQKICBzdGF0aWMgZ2V0KG93bmVyLCByZWYsIHJhdykKICBzdGF0aWMgY3JlYXRlKHRhZ05hbWUsIGF0dHJpYnV0ZXMgPSB7fSwgY2hpbGRyZW4gPSBbXSkKICBjb25zdHJ1Y3Rvcihvd25lciwgcmVmLCByYXcpCkVhZ2xlTm9kZQogIGdldCgpCiAgZ2F0ZXM6ICgpID0+CiAgZSA9PgogIGRldmljZXM6ICgpID0+CiAgZSA9PgogIG5hbWU6ICgpID0+CiAgZWxlbWVudDogKCkgPT4KICBwYWQ6ICgpID0+CiAgaGFuZGxlciA9IHYgPT4KKCkgPT4KICBnZXREaWFtZXRlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9Pgp2ID0+CiAgbmFtZSA9Pgp2ID0+CiAgZ2V0IGNvbG9yKCkKICBoZm4gPSB2YWx1ZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgbGF5ZXI6ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgooKSA9PgooKSA9PgogIGUgPT4KKCkgPT4KKCkgPT4KICBlID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBwbGFpbjogKCkgPT4KICBzaGVldHM6ICgpID0+CiAgcGFydHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgcGFja2FnZXMoKQogIGRldmljZXNldHMoKQogIGUgPT4KICBzeW1ib2xzKCkKICBlID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgoobywgcCwgcikgPT4KKCkgPT4KICBjcmVmID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CiAgLmdldENvbG9yID0gZWxlbWVudCA9PgogIC5pc1Zpc2libGUgPSBlbGVtZW50ID0+CiAgLnNldFZpc2libGUgPSB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmID0+CiAgdmFsdWUgPT4KICAuZ2V0Q29sb3IgPSBmdW5jdGlvbigpCnZhbHVlID0+CiAgbiA9PgooKSA9PgogIGUgPT4KZSA9PgplID0+CiAgZ2V0IHJlcGVhdGVyKCkKKHB1c2gsIHN0b3ApID0+Cih7IHZhbHVlLCBkb25lIH0pID0+CiAgcHVzaEV2ZW50KC4uLmFyZ3MpCiAgZWxlbSA9PgogIGV2ZW50KG5hbWUpCiAgc3Vic2NyaWJlKGhhbmRsZXIpCiAgdW5zdWJzY3JpYmUoaGFuZGxlcikKICBoID0+CiAgZ2V0IHRleHQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRMYXllcigpCiAgbG9va3VwKHhwYXRoLCBjcmVhdGUpCihvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBuID0+CiAgbCA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKRWFnbGVFbGVtZW50CiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					189,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								858,
								882
							],
							[
								918,
								943
							],
							[
								992,
								1014
							],
							[
								1252,
								1276
							],
							[
								1365,
								1377
							],
							[
								1443,
								1460
							],
							[
								1935,
								1947
							],
							[
								2086,
								2113
							],
							[
								3282,
								3336
							],
							[
								3531,
								3559
							],
							[
								4393,
								4402
							],
							[
								4541,
								4546
							],
							[
								4922,
								4934
							],
							[
								4964,
								4968
							],
							[
								5022,
								5036
							],
							[
								5066,
								5070
							],
							[
								5213,
								5224
							],
							[
								5413,
								5427
							],
							[
								5544,
								5554
							],
							[
								5912,
								5926
							],
							[
								6038,
								6043
							],
							[
								6274,
								6292
							],
							[
								6330,
								6344
							],
							[
								6438,
								6452
							],
							[
								6527,
								6532
							],
							[
								6746,
								6754
							],
							[
								6868,
								6876
							],
							[
								7205,
								7210
							],
							[
								7232,
								7239
							],
							[
								7391,
								7396
							],
							[
								8056,
								8067
							],
							[
								8465,
								8479
							],
							[
								8945,
								8956
							],
							[
								9043,
								9054
							],
							[
								9073,
								9077
							],
							[
								9217,
								9228
							],
							[
								9246,
								9250
							],
							[
								9390,
								9401
							],
							[
								9512,
								9523
							],
							[
								9541,
								9545
							],
							[
								10311,
								10322
							],
							[
								10341,
								10345
							],
							[
								10474,
								10485
							],
							[
								10508,
								10512
							],
							[
								10643,
								10654
							],
							[
								10738,
								10749
							],
							[
								10947,
								10959
							],
							[
								11060,
								11071
							],
							[
								11201,
								11212
							],
							[
								11909,
								11915
							],
							[
								12034,
								12040
							],
							[
								12058,
								12062
							],
							[
								12200,
								12206
							],
							[
								12428,
								12434
							],
							[
								12444,
								12448
							],
							[
								12546,
								12552
							],
							[
								12641,
								12647
							],
							[
								12737,
								12743
							],
							[
								12838,
								12844
							],
							[
								12943,
								12949
							],
							[
								13032,
								13038
							],
							[
								13126,
								13132
							],
							[
								13267,
								13273
							],
							[
								13362,
								13368
							],
							[
								13421,
								13427
							],
							[
								13520,
								13526
							],
							[
								14079,
								14094
							],
							[
								14345,
								14359
							],
							[
								14604,
								14616
							],
							[
								15353,
								15366
							],
							[
								15629,
								15641
							],
							[
								15790,
								15802
							],
							[
								16695,
								16705
							],
							[
								17050,
								17062
							],
							[
								17115,
								17119
							],
							[
								17193,
								17202
							],
							[
								17255,
								17259
							],
							[
								17470,
								17476
							],
							[
								17556,
								17561
							],
							[
								17834,
								17840
							],
							[
								17963,
								17983
							],
							[
								18002,
								18030
							],
							[
								18268,
								18274
							],
							[
								18471,
								18478
							],
							[
								18568,
								18574
							],
							[
								18771,
								18778
							],
							[
								18950,
								18956
							],
							[
								19015,
								19020
							],
							[
								19119,
								19125
							],
							[
								19184,
								19189
							],
							[
								19244,
								19250
							],
							[
								19330,
								19335
							],
							[
								19450,
								19456
							],
							[
								19515,
								19520
							],
							[
								19590,
								19612
							],
							[
								19709,
								19732
							],
							[
								19831,
								19853
							],
							[
								19979,
								19996
							],
							[
								20029,
								20037
							],
							[
								20236,
								20258
							],
							[
								20666,
								20675
							],
							[
								20724,
								20728
							],
							[
								21134,
								21140
							],
							[
								21255,
								21259
							],
							[
								21392,
								21397
							],
							[
								21467,
								21472
							],
							[
								21607,
								21621
							],
							[
								21736,
								21757
							],
							[
								21918,
								21938
							],
							[
								22037,
								22055
							],
							[
								22292,
								22299
							],
							[
								22435,
								22446
							],
							[
								22637,
								22655
							],
							[
								22740,
								22760
							],
							[
								22810,
								22814
							],
							[
								22857,
								22867
							],
							[
								23045,
								23061
							],
							[
								23096,
								23106
							],
							[
								23448,
								23469
							],
							[
								23502,
								23515
							],
							[
								23985,
								24011
							],
							[
								24108,
								24119
							],
							[
								24549,
								24553
							],
							[
								24583,
								24587
							],
							[
								24664,
								24668
							],
							[
								26028,
								26032
							],
							[
								26406,
								26410
							],
							[
								26645,
								26649
							],
							[
								26804,
								26808
							],
							[
								26837,
								26841
							],
							[
								27035,
								27039
							],
							[
								27716,
								27720
							],
							[
								28011,
								28023
							],
							[
								28062,
								28078
							],
							[
								28444,
								28458
							],
							[
								28550,
								28578
							],
							[
								28805,
								28809
							],
							[
								28900,
								28907
							],
							[
								28970,
								28980
							],
							[
								29207,
								29214
							],
							[
								29459,
								29466
							],
							[
								29646,
								29653
							],
							[
								29976,
								29982
							],
							[
								30212,
								30216
							],
							[
								30314,
								30337
							],
							[
								30397,
								30425
							],
							[
								30513,
								30520
							],
							[
								30683,
								30706
							],
							[
								30911,
								30927
							],
							[
								30968,
								30976
							],
							[
								31039,
								31047
							],
							[
								31266,
								31277
							],
							[
								31391,
								31409
							],
							[
								31521,
								31532
							],
							[
								31577,
								31594
							],
							[
								31706,
								31713
							],
							[
								31764,
								31785
							],
							[
								31883,
								31902
							],
							[
								31967,
								31988
							],
							[
								32055,
								32077
							],
							[
								32145,
								32163
							],
							[
								32514,
								32522
							],
							[
								32583,
								32591
							],
							[
								32863,
								32880
							],
							[
								32984,
								32994
							],
							[
								33104,
								33137
							],
							[
								33170,
								33188
							],
							[
								33268,
								33289
							],
							[
								33315,
								33326
							],
							[
								33434,
								33446
							],
							[
								33532,
								33561
							],
							[
								33591,
								33603
							],
							[
								33758,
								33788
							],
							[
								33821,
								33839
							],
							[
								33878,
								33899
							],
							[
								33920,
								33931
							],
							[
								33992,
								34017
							],
							[
								34147,
								34168
							],
							[
								34216,
								34225
							],
							[
								37083,
								37095
							],
							[
								37150,
								37162
							],
							[
								37225,
								37264
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"gates: () =>",
							"e =>",
							"devices: () =>",
							"e =>",
							"name: () =>",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"layer: () =>",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"elements: () =>",
							"signals: () =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"plain: () =>",
							"packages()",
							"devicesets()",
							"e =>",
							"symbols()",
							"e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							" () =>",
							"e =>",
							" e =>",
							" e =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							"pushEvent(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"n =>",
							"l =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AQAAAAAAAAAAAAAApQkAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					190,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClCQAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBkZWNvZGVIVE1MRW50aXRpZXMgPSBzID0+CihtYXRjaCwgZW50aXR5KSA9PgpUTGlzdCA9IChjaGlsZCwgZWxlbSkgPT4KICByb3VuZCA9IG4gPT4KICBnZXQodGFyZ2V0LCBwcm9wKQpFYWdsZUVsZW1lbnQKICBzdGF0aWMgZ2V0KG93bmVyLCByZWYsIHJhdykKICBzdGF0aWMgY3JlYXRlKHRhZ05hbWUsIGF0dHJpYnV0ZXMgPSB7fSwgY2hpbGRyZW4gPSBbXSkKICBjb25zdHJ1Y3Rvcihvd25lciwgcmVmLCByYXcpCkVhZ2xlTm9kZQogIGdldCgpCiAgZ2F0ZXM6ICgpID0+CiAgZSA9PgogIGRldmljZXM6ICgpID0+CiAgZSA9PgogIG5hbWU6ICgpID0+CiAgZWxlbWVudDogKCkgPT4KICBwYWQ6ICgpID0+CiAgaGFuZGxlciA9IHYgPT4KKCkgPT4KICBnZXREaWFtZXRlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9Pgp2ID0+CiAgbmFtZSA9Pgp2ID0+CiAgZ2V0IGNvbG9yKCkKICBoZm4gPSB2YWx1ZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgbGF5ZXI6ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgooKSA9PgooKSA9PgogIGUgPT4KKCkgPT4KKCkgPT4KICBlID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBwbGFpbjogKCkgPT4KICBzaGVldHM6ICgpID0+CiAgcGFydHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgcGFja2FnZXMoKQogIGRldmljZXNldHMoKQogIGUgPT4KICBzeW1ib2xzKCkKICBlID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgoobywgcCwgcikgPT4KKCkgPT4KICBjcmVmID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CiAgLmdldENvbG9yID0gZWxlbWVudCA9PgogIC5pc1Zpc2libGUgPSBlbGVtZW50ID0+CiAgLnNldFZpc2libGUgPSB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmID0+CiAgdmFsdWUgPT4KICAuZ2V0Q29sb3IgPSBmdW5jdGlvbigpCnZhbHVlID0+CiAgbiA9PgooKSA9PgogIGUgPT4KZSA9PgplID0+CiAgZ2V0IHJlcGVhdGVyKCkKKHB1c2gsIHN0b3ApID0+Cih7IHZhbHVlLCBkb25lIH0pID0+CiAgcHVzaEV2ZW50KC4uLmFyZ3MpCiAgZWxlbSA9PgogIGV2ZW50KG5hbWUpCiAgc3Vic2NyaWJlKGhhbmRsZXIpCiAgdW5zdWJzY3JpYmUoaGFuZGxlcikKICBoID0+CiAgZ2V0IHRleHQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRMYXllcigpCiAgbG9va3VwKHhwYXRoLCBjcmVhdGUpCihvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBuID0+CiAgbCA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKRWFnbGVFbGVtZW50CiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					191,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								858,
								882
							],
							[
								918,
								943
							],
							[
								992,
								1014
							],
							[
								1252,
								1276
							],
							[
								1365,
								1377
							],
							[
								1443,
								1460
							],
							[
								1935,
								1947
							],
							[
								2086,
								2113
							],
							[
								3282,
								3336
							],
							[
								3531,
								3559
							],
							[
								4393,
								4402
							],
							[
								4541,
								4546
							],
							[
								4922,
								4934
							],
							[
								4964,
								4968
							],
							[
								5022,
								5036
							],
							[
								5066,
								5070
							],
							[
								5213,
								5224
							],
							[
								5413,
								5427
							],
							[
								5544,
								5554
							],
							[
								5912,
								5926
							],
							[
								6038,
								6043
							],
							[
								6274,
								6292
							],
							[
								6330,
								6344
							],
							[
								6438,
								6452
							],
							[
								6527,
								6532
							],
							[
								6746,
								6754
							],
							[
								6868,
								6876
							],
							[
								7205,
								7210
							],
							[
								7232,
								7239
							],
							[
								7391,
								7396
							],
							[
								8056,
								8067
							],
							[
								8465,
								8479
							],
							[
								8945,
								8956
							],
							[
								9043,
								9054
							],
							[
								9073,
								9077
							],
							[
								9217,
								9228
							],
							[
								9246,
								9250
							],
							[
								9390,
								9401
							],
							[
								9512,
								9523
							],
							[
								9541,
								9545
							],
							[
								10311,
								10322
							],
							[
								10341,
								10345
							],
							[
								10474,
								10485
							],
							[
								10508,
								10512
							],
							[
								10643,
								10654
							],
							[
								10738,
								10749
							],
							[
								10947,
								10959
							],
							[
								11060,
								11071
							],
							[
								11201,
								11212
							],
							[
								11909,
								11915
							],
							[
								12034,
								12040
							],
							[
								12058,
								12062
							],
							[
								12200,
								12206
							],
							[
								12428,
								12434
							],
							[
								12444,
								12448
							],
							[
								12546,
								12552
							],
							[
								12641,
								12647
							],
							[
								12737,
								12743
							],
							[
								12838,
								12844
							],
							[
								12943,
								12949
							],
							[
								13032,
								13038
							],
							[
								13126,
								13132
							],
							[
								13267,
								13273
							],
							[
								13362,
								13368
							],
							[
								13421,
								13427
							],
							[
								13520,
								13526
							],
							[
								14079,
								14094
							],
							[
								14345,
								14359
							],
							[
								14604,
								14616
							],
							[
								15353,
								15366
							],
							[
								15629,
								15641
							],
							[
								15790,
								15802
							],
							[
								16695,
								16705
							],
							[
								17050,
								17062
							],
							[
								17115,
								17119
							],
							[
								17193,
								17202
							],
							[
								17255,
								17259
							],
							[
								17470,
								17476
							],
							[
								17556,
								17561
							],
							[
								17834,
								17840
							],
							[
								17963,
								17983
							],
							[
								18002,
								18030
							],
							[
								18268,
								18274
							],
							[
								18471,
								18478
							],
							[
								18568,
								18574
							],
							[
								18771,
								18778
							],
							[
								18950,
								18956
							],
							[
								19015,
								19020
							],
							[
								19119,
								19125
							],
							[
								19184,
								19189
							],
							[
								19244,
								19250
							],
							[
								19330,
								19335
							],
							[
								19450,
								19456
							],
							[
								19515,
								19520
							],
							[
								19590,
								19612
							],
							[
								19709,
								19732
							],
							[
								19831,
								19853
							],
							[
								19979,
								19996
							],
							[
								20029,
								20037
							],
							[
								20236,
								20258
							],
							[
								20666,
								20675
							],
							[
								20724,
								20728
							],
							[
								21134,
								21140
							],
							[
								21255,
								21259
							],
							[
								21392,
								21397
							],
							[
								21467,
								21472
							],
							[
								21607,
								21621
							],
							[
								21736,
								21757
							],
							[
								21918,
								21938
							],
							[
								22037,
								22055
							],
							[
								22292,
								22299
							],
							[
								22435,
								22446
							],
							[
								22637,
								22655
							],
							[
								22740,
								22760
							],
							[
								22810,
								22814
							],
							[
								22857,
								22867
							],
							[
								23045,
								23061
							],
							[
								23096,
								23106
							],
							[
								23448,
								23469
							],
							[
								23502,
								23515
							],
							[
								23985,
								24011
							],
							[
								24108,
								24119
							],
							[
								24549,
								24553
							],
							[
								24583,
								24587
							],
							[
								24664,
								24668
							],
							[
								26028,
								26032
							],
							[
								26406,
								26410
							],
							[
								26645,
								26649
							],
							[
								26804,
								26808
							],
							[
								26837,
								26841
							],
							[
								27035,
								27039
							],
							[
								27716,
								27720
							],
							[
								28011,
								28023
							],
							[
								28062,
								28078
							],
							[
								28444,
								28458
							],
							[
								28550,
								28578
							],
							[
								28805,
								28809
							],
							[
								28900,
								28907
							],
							[
								28970,
								28980
							],
							[
								29207,
								29214
							],
							[
								29459,
								29466
							],
							[
								29646,
								29653
							],
							[
								29976,
								29982
							],
							[
								30212,
								30216
							],
							[
								30314,
								30337
							],
							[
								30397,
								30425
							],
							[
								30513,
								30520
							],
							[
								30683,
								30706
							],
							[
								30911,
								30927
							],
							[
								30968,
								30976
							],
							[
								31039,
								31047
							],
							[
								31266,
								31277
							],
							[
								31391,
								31409
							],
							[
								31521,
								31532
							],
							[
								31577,
								31594
							],
							[
								31706,
								31713
							],
							[
								31764,
								31785
							],
							[
								31883,
								31902
							],
							[
								31967,
								31988
							],
							[
								32055,
								32077
							],
							[
								32145,
								32163
							],
							[
								32514,
								32522
							],
							[
								32583,
								32591
							],
							[
								32863,
								32880
							],
							[
								32984,
								32994
							],
							[
								33104,
								33137
							],
							[
								33170,
								33188
							],
							[
								33268,
								33289
							],
							[
								33315,
								33326
							],
							[
								33434,
								33446
							],
							[
								33532,
								33561
							],
							[
								33591,
								33603
							],
							[
								33758,
								33788
							],
							[
								33821,
								33839
							],
							[
								33878,
								33899
							],
							[
								33920,
								33931
							],
							[
								33992,
								34017
							],
							[
								34147,
								34168
							],
							[
								34216,
								34225
							],
							[
								37083,
								37095
							],
							[
								37150,
								37162
							],
							[
								37225,
								37264
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"gates: () =>",
							"e =>",
							"devices: () =>",
							"e =>",
							"name: () =>",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"layer: () =>",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"elements: () =>",
							"signals: () =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"plain: () =>",
							"packages()",
							"devicesets()",
							"e =>",
							"symbols()",
							"e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							" () =>",
							"e =>",
							" e =>",
							" e =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							"pushEvent(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"n =>",
							"l =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AwAAAAAAAAAAAAAApQkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKUJAAAgIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgogIGRlY29kZUhUTUxFbnRpdGllcyA9IHMgPT4KKG1hdGNoLCBlbnRpdHkpID0+ClRMaXN0ID0gKGNoaWxkLCBlbGVtKSA9PgogIHJvdW5kID0gbiA9PgogIGdldCh0YXJnZXQsIHByb3ApCkVhZ2xlRWxlbWVudAogIHN0YXRpYyBnZXQob3duZXIsIHJlZiwgcmF3KQogIHN0YXRpYyBjcmVhdGUodGFnTmFtZSwgYXR0cmlidXRlcyA9IHt9LCBjaGlsZHJlbiA9IFtdKQogIGNvbnN0cnVjdG9yKG93bmVyLCByZWYsIHJhdykKRWFnbGVOb2RlCiAgZ2V0KCkKICBnYXRlczogKCkgPT4KICBlID0+CiAgZGV2aWNlczogKCkgPT4KICBlID0+CiAgbmFtZTogKCkgPT4KICBlbGVtZW50OiAoKSA9PgogIHBhZDogKCkgPT4KICBoYW5kbGVyID0gdiA9PgooKSA9PgogIGdldERpYW1ldGVyID0gdiA9PgogIGhhbmRsZXIgPSB2ID0+CiAgaGFuZGxlciA9IHYgPT4KKCkgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CnYgPT4KICBuYW1lID0+CnYgPT4KICBnZXQgY29sb3IoKQogIGhmbiA9IHZhbHVlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgZSA9PgogIGhmbiA9ICgpID0+CiAgZSA9PgogIGhmbiA9ICgpID0+CiAgZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBsYXllcjogKCkgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CigpID0+CigpID0+CiAgZSA9PgooKSA9PgooKSA9PgogIGUgPT4KKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KKCkgPT4KICBlbGVtZW50czogKCkgPT4KICBzaWduYWxzOiAoKSA9PgogIHBsYWluOiAoKSA9PgogIHNoZWV0czogKCkgPT4KICBwYXJ0czogKCkgPT4KICBwbGFpbjogKCkgPT4KICBwYWNrYWdlcygpCiAgZGV2aWNlc2V0cygpCiAgZSA9PgogIHN5bWJvbHMoKQogIGUgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CihvLCBwLCByKSA9PgooKSA9PgogIGNyZWYgPT4KKCkgPT4KICBjcmVmID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KICAuZ2V0Q29sb3IgPSBlbGVtZW50ID0+CiAgLmlzVmlzaWJsZSA9IGVsZW1lbnQgPT4KICAuc2V0VmlzaWJsZSA9IHZhbHVlID0+CiAgLnN1YnNjcmliZSA9IGYgPT4KICB2YWx1ZSA9PgogIC5nZXRDb2xvciA9IGZ1bmN0aW9uKCkKdmFsdWUgPT4KICBuID0+CigpID0+CiAgZSA9PgplID0+CmUgPT4KICBnZXQgcmVwZWF0ZXIoKQoocHVzaCwgc3RvcCkgPT4KKHsgdmFsdWUsIGRvbmUgfSkgPT4KICBwdXNoRXZlbnQoLi4uYXJncykKICBlbGVtID0+CiAgZXZlbnQobmFtZSkKICBzdWJzY3JpYmUoaGFuZGxlcikKICB1bnN1YnNjcmliZShoYW5kbGVyKQogIGggPT4KICBnZXQgdGV4dCgpCiAgZ2V0IGF0dHJpYnV0ZXMoKQogIGdldExheWVyKCkKICBsb29rdXAoeHBhdGgsIGNyZWF0ZSkKKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQsIG9wdHMgPSB7fSkKICBwcmVkID0gZSA9PgogIG4gPT4KICBsID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGIgPT4KICByID0+CiAgZSA9PgogIG4gPT4KICBnZXQgYm91bmRzKCkKICB0cmFuc2Zvcm1hdGlvbigpCiAgZ2V0IGdlb21ldHJ5KCkKICBtYWtlR2V0dGVyU2V0dGVyID0gayA9PiB2ID0+CiAgcCA9PgogIHByb3AgPT4KayA9PiB2ID0+CiAgcHJvcCA9PgogIHByb3AgPT4KICBwcm9wID0+CigpID0+CiAgZyA9PgogIHBvc2l0aW9uKG9mZnNldCA9IG51bGwpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBzdGF0aWMgaXNSZWxhdGlvbihuYW1lKQogIHQgPSAobywgcCwgdikgPT4KICByID0gZSA9PgogIHNjb3BlMigpCiAgZ2V0IGNoYWluKCkKICBnZXRQYXJlbnQodGFnTmFtZSkKICBnZXQgc2hlZXQoKQogIGdldCBzaGVldE51bWJlcigpCiAgbmFtZXMoKQooYWNjLCBlbnRyeSkgPT4KICBzdGF0aWMga2V5cyhlbnRpdHkpCiAgc3RhdGljIHZhbHVlcyhlbnRpdHkpCiAgc3RhdGljIGVudHJpZXMoZW50aXR5KQogIHN0YXRpYyB0b09iamVjdChlKQogIGNoaWxkID0+CiAgY2hpbGQgPT4KICBzdGF0aWMgdG9BcnJheShlKQogIHRvU3RyaW5nKCkKKmdldEFsbChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgoociwgdiwgcCwgbykgPT4KKCkgPT4KKHYsIHAsIG8pID0+CiAgZ2V0KHByZWQsIHRyYW5zZm9ybSA9IGEgPT4gYSkKKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgoociwgdiwgcCwgbykgPT4KKCkgPT4KICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgZ2V0IHBvcygpCkVhZ2xlRWxlbWVudApFYWdsZUVsZW1lbnQKICBtYWtlRWFnbGVFbGVtZW50ID0gKG93bmVyLCByZWYsIHJhdykgPT4AAAAAAAAAAKUJAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					192,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								858,
								882
							],
							[
								918,
								943
							],
							[
								992,
								1014
							],
							[
								1252,
								1276
							],
							[
								1365,
								1377
							],
							[
								1443,
								1460
							],
							[
								1935,
								1947
							],
							[
								2086,
								2113
							],
							[
								3282,
								3336
							],
							[
								3531,
								3559
							],
							[
								4393,
								4402
							],
							[
								4541,
								4546
							],
							[
								4922,
								4934
							],
							[
								4964,
								4968
							],
							[
								5022,
								5036
							],
							[
								5066,
								5070
							],
							[
								5213,
								5224
							],
							[
								5413,
								5427
							],
							[
								5544,
								5554
							],
							[
								5912,
								5926
							],
							[
								6038,
								6043
							],
							[
								6274,
								6292
							],
							[
								6330,
								6344
							],
							[
								6438,
								6452
							],
							[
								6527,
								6532
							],
							[
								6746,
								6754
							],
							[
								6868,
								6876
							],
							[
								7205,
								7210
							],
							[
								7232,
								7239
							],
							[
								7391,
								7396
							],
							[
								8056,
								8067
							],
							[
								8465,
								8479
							],
							[
								8945,
								8956
							],
							[
								9043,
								9054
							],
							[
								9073,
								9077
							],
							[
								9217,
								9228
							],
							[
								9246,
								9250
							],
							[
								9390,
								9401
							],
							[
								9512,
								9523
							],
							[
								9541,
								9545
							],
							[
								10311,
								10322
							],
							[
								10341,
								10345
							],
							[
								10474,
								10485
							],
							[
								10508,
								10512
							],
							[
								10643,
								10654
							],
							[
								10738,
								10749
							],
							[
								10947,
								10959
							],
							[
								11060,
								11071
							],
							[
								11201,
								11212
							],
							[
								11909,
								11915
							],
							[
								12034,
								12040
							],
							[
								12058,
								12062
							],
							[
								12200,
								12206
							],
							[
								12428,
								12434
							],
							[
								12444,
								12448
							],
							[
								12546,
								12552
							],
							[
								12641,
								12647
							],
							[
								12737,
								12743
							],
							[
								12838,
								12844
							],
							[
								12943,
								12949
							],
							[
								13032,
								13038
							],
							[
								13126,
								13132
							],
							[
								13267,
								13273
							],
							[
								13362,
								13368
							],
							[
								13421,
								13427
							],
							[
								13520,
								13526
							],
							[
								14079,
								14094
							],
							[
								14345,
								14359
							],
							[
								14604,
								14616
							],
							[
								15353,
								15366
							],
							[
								15629,
								15641
							],
							[
								15790,
								15802
							],
							[
								16695,
								16705
							],
							[
								17050,
								17062
							],
							[
								17115,
								17119
							],
							[
								17193,
								17202
							],
							[
								17255,
								17259
							],
							[
								17470,
								17476
							],
							[
								17556,
								17561
							],
							[
								17834,
								17840
							],
							[
								17963,
								17983
							],
							[
								18002,
								18030
							],
							[
								18268,
								18274
							],
							[
								18471,
								18478
							],
							[
								18568,
								18574
							],
							[
								18771,
								18778
							],
							[
								18950,
								18956
							],
							[
								19015,
								19020
							],
							[
								19119,
								19125
							],
							[
								19184,
								19189
							],
							[
								19244,
								19250
							],
							[
								19330,
								19335
							],
							[
								19450,
								19456
							],
							[
								19515,
								19520
							],
							[
								19590,
								19612
							],
							[
								19709,
								19732
							],
							[
								19831,
								19853
							],
							[
								19979,
								19996
							],
							[
								20029,
								20037
							],
							[
								20236,
								20258
							],
							[
								20666,
								20675
							],
							[
								20724,
								20728
							],
							[
								21134,
								21140
							],
							[
								21255,
								21259
							],
							[
								21392,
								21397
							],
							[
								21467,
								21472
							],
							[
								21607,
								21621
							],
							[
								21736,
								21757
							],
							[
								21918,
								21938
							],
							[
								22037,
								22055
							],
							[
								22292,
								22299
							],
							[
								22435,
								22446
							],
							[
								22637,
								22655
							],
							[
								22740,
								22760
							],
							[
								22810,
								22814
							],
							[
								22857,
								22867
							],
							[
								23045,
								23061
							],
							[
								23096,
								23106
							],
							[
								23448,
								23469
							],
							[
								23502,
								23515
							],
							[
								23985,
								24011
							],
							[
								24108,
								24119
							],
							[
								24549,
								24553
							],
							[
								24583,
								24587
							],
							[
								24664,
								24668
							],
							[
								26028,
								26032
							],
							[
								26406,
								26410
							],
							[
								26645,
								26649
							],
							[
								26804,
								26808
							],
							[
								26837,
								26841
							],
							[
								27035,
								27039
							],
							[
								27716,
								27720
							],
							[
								28011,
								28023
							],
							[
								28062,
								28078
							],
							[
								28444,
								28458
							],
							[
								28550,
								28578
							],
							[
								28805,
								28809
							],
							[
								28900,
								28907
							],
							[
								28970,
								28980
							],
							[
								29207,
								29214
							],
							[
								29459,
								29466
							],
							[
								29646,
								29653
							],
							[
								29976,
								29982
							],
							[
								30212,
								30216
							],
							[
								30314,
								30337
							],
							[
								30397,
								30425
							],
							[
								30513,
								30520
							],
							[
								30683,
								30706
							],
							[
								30911,
								30927
							],
							[
								30968,
								30976
							],
							[
								31039,
								31047
							],
							[
								31266,
								31277
							],
							[
								31391,
								31409
							],
							[
								31521,
								31532
							],
							[
								31577,
								31594
							],
							[
								31706,
								31713
							],
							[
								31764,
								31785
							],
							[
								31883,
								31902
							],
							[
								31967,
								31988
							],
							[
								32055,
								32077
							],
							[
								32145,
								32163
							],
							[
								32514,
								32522
							],
							[
								32583,
								32591
							],
							[
								32863,
								32880
							],
							[
								32984,
								32994
							],
							[
								33104,
								33137
							],
							[
								33170,
								33188
							],
							[
								33268,
								33289
							],
							[
								33315,
								33326
							],
							[
								33434,
								33446
							],
							[
								33532,
								33561
							],
							[
								33591,
								33603
							],
							[
								33758,
								33788
							],
							[
								33821,
								33839
							],
							[
								33878,
								33899
							],
							[
								33920,
								33931
							],
							[
								33992,
								34017
							],
							[
								34147,
								34168
							],
							[
								34216,
								34225
							],
							[
								37083,
								37095
							],
							[
								37150,
								37162
							],
							[
								37225,
								37264
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"gates: () =>",
							"e =>",
							"devices: () =>",
							"e =>",
							"name: () =>",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"layer: () =>",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"elements: () =>",
							"signals: () =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"plain: () =>",
							"packages()",
							"devicesets()",
							"e =>",
							"symbols()",
							"e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							" () =>",
							"e =>",
							" e =>",
							" e =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							"pushEvent(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"n =>",
							"l =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAClCQAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBkZWNvZGVIVE1MRW50aXRpZXMgPSBzID0+CihtYXRjaCwgZW50aXR5KSA9PgpUTGlzdCA9IChjaGlsZCwgZWxlbSkgPT4KICByb3VuZCA9IG4gPT4KICBnZXQodGFyZ2V0LCBwcm9wKQpFYWdsZUVsZW1lbnQKICBzdGF0aWMgZ2V0KG93bmVyLCByZWYsIHJhdykKICBzdGF0aWMgY3JlYXRlKHRhZ05hbWUsIGF0dHJpYnV0ZXMgPSB7fSwgY2hpbGRyZW4gPSBbXSkKICBjb25zdHJ1Y3Rvcihvd25lciwgcmVmLCByYXcpCkVhZ2xlTm9kZQogIGdldCgpCiAgZ2F0ZXM6ICgpID0+CiAgZSA9PgogIGRldmljZXM6ICgpID0+CiAgZSA9PgogIG5hbWU6ICgpID0+CiAgZWxlbWVudDogKCkgPT4KICBwYWQ6ICgpID0+CiAgaGFuZGxlciA9IHYgPT4KKCkgPT4KICBnZXREaWFtZXRlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9Pgp2ID0+CiAgbmFtZSA9Pgp2ID0+CiAgZ2V0IGNvbG9yKCkKICBoZm4gPSB2YWx1ZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgbGF5ZXI6ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgooKSA9PgooKSA9PgogIGUgPT4KKCkgPT4KKCkgPT4KICBlID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBwbGFpbjogKCkgPT4KICBzaGVldHM6ICgpID0+CiAgcGFydHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgcGFja2FnZXMoKQogIGRldmljZXNldHMoKQogIGUgPT4KICBzeW1ib2xzKCkKICBlID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgoobywgcCwgcikgPT4KKCkgPT4KICBjcmVmID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CiAgLmdldENvbG9yID0gZWxlbWVudCA9PgogIC5pc1Zpc2libGUgPSBlbGVtZW50ID0+CiAgLnNldFZpc2libGUgPSB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmID0+CiAgdmFsdWUgPT4KICAuZ2V0Q29sb3IgPSBmdW5jdGlvbigpCnZhbHVlID0+CiAgbiA9PgooKSA9PgogIGUgPT4KZSA9PgplID0+CiAgZ2V0IHJlcGVhdGVyKCkKKHB1c2gsIHN0b3ApID0+Cih7IHZhbHVlLCBkb25lIH0pID0+CiAgcHVzaEV2ZW50KC4uLmFyZ3MpCiAgZWxlbSA9PgogIGV2ZW50KG5hbWUpCiAgc3Vic2NyaWJlKGhhbmRsZXIpCiAgdW5zdWJzY3JpYmUoaGFuZGxlcikKICBoID0+CiAgZ2V0IHRleHQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRMYXllcigpCiAgbG9va3VwKHhwYXRoLCBjcmVhdGUpCihvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBuID0+CiAgbCA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKRWFnbGVFbGVtZW50CiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAAClCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApQkAACAgYWRkID0gKGFyciwgLi4uaXRlbXMpID0+CiAgZGVjb2RlSFRNTEVudGl0aWVzID0gcyA9PgoobWF0Y2gsIGVudGl0eSkgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogIGdhdGVzOiAoKSA9PgogIGUgPT4KICBkZXZpY2VzOiAoKSA9PgogIGUgPT4KICBuYW1lOiAoKSA9PgogIGVsZW1lbnQ6ICgpID0+CiAgcGFkOiAoKSA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgZ2V0RGlhbWV0ZXIgPSB2ID0+CiAgaGFuZGxlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgooKSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KdiA9PgogIG5hbWUgPT4KdiA9PgogIGdldCBjb2xvcigpCiAgaGZuID0gdmFsdWUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgZSA9PgogIGhmbiA9ICgpID0+CiAgZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGxheWVyOiAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KKCkgPT4KKCkgPT4KICBlID0+CigpID0+CigpID0+CiAgZSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgogIGVsZW1lbnRzOiAoKSA9PgogIHNpZ25hbHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgc2hlZXRzOiAoKSA9PgogIHBhcnRzOiAoKSA9PgogIHBsYWluOiAoKSA9PgogIHBhY2thZ2VzKCkKICBkZXZpY2VzZXRzKCkKICBlID0+CiAgc3ltYm9scygpCiAgZSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKG8sIHAsIHIpID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgogIGNyZWYgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgogIC5nZXRDb2xvciA9IGVsZW1lbnQgPT4KICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQp2YWx1ZSA9PgogIG4gPT4KKCkgPT4KICBlID0+CmUgPT4KZSA9PgogIGdldCByZXBlYXRlcigpCihwdXNoLCBzdG9wKSA9PgooeyB2YWx1ZSwgZG9uZSB9KSA9PgogIHB1c2hFdmVudCguLi5hcmdzKQogIGVsZW0gPT4KICBldmVudChuYW1lKQogIHN1YnNjcmliZShoYW5kbGVyKQogIHVuc3Vic2NyaWJlKGhhbmRsZXIpCiAgaCA9PgogIGdldCB0ZXh0KCkKICBnZXQgYXR0cmlidXRlcygpCiAgZ2V0TGF5ZXIoKQogIGxvb2t1cCh4cGF0aCwgY3JlYXRlKQoobywgcCwgdikgPT4KICBnZXRCb3VuZHMocHJlZCwgb3B0cyA9IHt9KQogIHByZWQgPSBlID0+CiAgbiA9PgogIGwgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgYiA9PgogIHIgPT4KICBlID0+CiAgbiA9PgogIGdldCBib3VuZHMoKQogIHRyYW5zZm9ybWF0aW9uKCkKICBnZXQgZ2VvbWV0cnkoKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwID0+CiAgcHJvcCA9PgprID0+IHYgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIHByb3AgPT4KKCkgPT4KICBnID0+CiAgcG9zaXRpb24ob2Zmc2V0ID0gbnVsbCkKICBtYWtlR2V0dGVyU2V0dGVyID0gayA9PiB2ID0+CiAgcHJvcCA9PgogIHN0YXRpYyBpc1JlbGF0aW9uKG5hbWUpCiAgdCA9IChvLCBwLCB2KSA9PgogIHIgPSBlID0+CiAgc2NvcGUyKCkKICBnZXQgY2hhaW4oKQogIGdldFBhcmVudCh0YWdOYW1lKQogIGdldCBzaGVldCgpCiAgZ2V0IHNoZWV0TnVtYmVyKCkKICBuYW1lcygpCihhY2MsIGVudHJ5KSA9PgogIHN0YXRpYyBrZXlzKGVudGl0eSkKICBzdGF0aWMgdmFsdWVzKGVudGl0eSkKICBzdGF0aWMgZW50cmllcyhlbnRpdHkpCiAgc3RhdGljIHRvT2JqZWN0KGUpCiAgY2hpbGQgPT4KICBjaGlsZCA9PgogIHN0YXRpYyB0b0FycmF5KGUpCiAgdG9TdHJpbmcoKQoqZ2V0QWxsKHByZWQsIHRyYW5zZm9ybSA9IGEgPT4gYSkKKHYsIHAsIG8pID0+CihyLCB2LCBwLCBvKSA9PgooKSA9PgoodiwgcCwgbykgPT4KICBnZXQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KICBmaW5kKHByZWQsIHRyYW5zZm9ybSA9IGEgPT4gYSkKKHYsIHAsIG8pID0+CihyLCB2LCBwLCBvKSA9PgooKSA9PgogIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkKICByZW1vdmVBdHRyaWJ1dGUobmFtZSkKICBnZXQgcG9zKCkKRWFnbGVFbGVtZW50CkVhZ2xlRWxlbWVudAogIG1ha2VFYWdsZUVsZW1lbnQgPSAob3duZXIsIHJlZiwgcmF3KSA9PgAAAAAAAAAApQkAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					193,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								858,
								882
							],
							[
								918,
								943
							],
							[
								992,
								1014
							],
							[
								1252,
								1276
							],
							[
								1365,
								1377
							],
							[
								1443,
								1460
							],
							[
								1935,
								1947
							],
							[
								2086,
								2113
							],
							[
								3282,
								3336
							],
							[
								3531,
								3559
							],
							[
								4393,
								4402
							],
							[
								4541,
								4546
							],
							[
								4922,
								4934
							],
							[
								4964,
								4968
							],
							[
								5022,
								5036
							],
							[
								5066,
								5070
							],
							[
								5213,
								5224
							],
							[
								5413,
								5427
							],
							[
								5544,
								5554
							],
							[
								5912,
								5926
							],
							[
								6038,
								6043
							],
							[
								6274,
								6292
							],
							[
								6330,
								6344
							],
							[
								6438,
								6452
							],
							[
								6527,
								6532
							],
							[
								6746,
								6754
							],
							[
								6868,
								6876
							],
							[
								7205,
								7210
							],
							[
								7232,
								7239
							],
							[
								7391,
								7396
							],
							[
								8056,
								8067
							],
							[
								8465,
								8479
							],
							[
								8945,
								8956
							],
							[
								9043,
								9054
							],
							[
								9073,
								9077
							],
							[
								9217,
								9228
							],
							[
								9246,
								9250
							],
							[
								9390,
								9401
							],
							[
								9512,
								9523
							],
							[
								9541,
								9545
							],
							[
								10311,
								10322
							],
							[
								10341,
								10345
							],
							[
								10474,
								10485
							],
							[
								10508,
								10512
							],
							[
								10643,
								10654
							],
							[
								10738,
								10749
							],
							[
								10947,
								10959
							],
							[
								11060,
								11071
							],
							[
								11201,
								11212
							],
							[
								11909,
								11915
							],
							[
								12034,
								12040
							],
							[
								12058,
								12062
							],
							[
								12200,
								12206
							],
							[
								12428,
								12434
							],
							[
								12444,
								12448
							],
							[
								12546,
								12552
							],
							[
								12641,
								12647
							],
							[
								12737,
								12743
							],
							[
								12838,
								12844
							],
							[
								12943,
								12949
							],
							[
								13032,
								13038
							],
							[
								13126,
								13132
							],
							[
								13267,
								13273
							],
							[
								13362,
								13368
							],
							[
								13421,
								13427
							],
							[
								13520,
								13526
							],
							[
								14079,
								14094
							],
							[
								14345,
								14359
							],
							[
								14604,
								14616
							],
							[
								15353,
								15366
							],
							[
								15629,
								15641
							],
							[
								15790,
								15802
							],
							[
								16695,
								16705
							],
							[
								17050,
								17062
							],
							[
								17115,
								17119
							],
							[
								17193,
								17202
							],
							[
								17255,
								17259
							],
							[
								17470,
								17476
							],
							[
								17556,
								17561
							],
							[
								17834,
								17840
							],
							[
								17963,
								17983
							],
							[
								18002,
								18030
							],
							[
								18268,
								18274
							],
							[
								18471,
								18478
							],
							[
								18568,
								18574
							],
							[
								18771,
								18778
							],
							[
								18950,
								18956
							],
							[
								19015,
								19020
							],
							[
								19119,
								19125
							],
							[
								19184,
								19189
							],
							[
								19244,
								19250
							],
							[
								19330,
								19335
							],
							[
								19450,
								19456
							],
							[
								19515,
								19520
							],
							[
								19590,
								19612
							],
							[
								19709,
								19732
							],
							[
								19831,
								19853
							],
							[
								19979,
								19996
							],
							[
								20029,
								20037
							],
							[
								20236,
								20258
							],
							[
								20666,
								20675
							],
							[
								20724,
								20728
							],
							[
								21134,
								21140
							],
							[
								21255,
								21259
							],
							[
								21392,
								21397
							],
							[
								21467,
								21472
							],
							[
								21607,
								21621
							],
							[
								21736,
								21757
							],
							[
								21918,
								21938
							],
							[
								22037,
								22055
							],
							[
								22292,
								22299
							],
							[
								22435,
								22446
							],
							[
								22637,
								22655
							],
							[
								22740,
								22760
							],
							[
								22810,
								22814
							],
							[
								22857,
								22867
							],
							[
								23045,
								23061
							],
							[
								23096,
								23106
							],
							[
								23448,
								23469
							],
							[
								23502,
								23515
							],
							[
								23985,
								24011
							],
							[
								24108,
								24119
							],
							[
								24549,
								24553
							],
							[
								24583,
								24587
							],
							[
								24664,
								24668
							],
							[
								26028,
								26032
							],
							[
								26406,
								26410
							],
							[
								26645,
								26649
							],
							[
								26804,
								26808
							],
							[
								26837,
								26841
							],
							[
								27035,
								27039
							],
							[
								27716,
								27720
							],
							[
								28011,
								28023
							],
							[
								28062,
								28078
							],
							[
								28444,
								28458
							],
							[
								28550,
								28578
							],
							[
								28805,
								28809
							],
							[
								28900,
								28907
							],
							[
								28970,
								28980
							],
							[
								29207,
								29214
							],
							[
								29459,
								29466
							],
							[
								29646,
								29653
							],
							[
								29976,
								29982
							],
							[
								30212,
								30216
							],
							[
								30314,
								30337
							],
							[
								30397,
								30425
							],
							[
								30513,
								30520
							],
							[
								30683,
								30706
							],
							[
								30911,
								30927
							],
							[
								30968,
								30976
							],
							[
								31039,
								31047
							],
							[
								31266,
								31277
							],
							[
								31391,
								31409
							],
							[
								31521,
								31532
							],
							[
								31577,
								31594
							],
							[
								31706,
								31713
							],
							[
								31764,
								31785
							],
							[
								31883,
								31902
							],
							[
								31967,
								31988
							],
							[
								32055,
								32077
							],
							[
								32145,
								32163
							],
							[
								32514,
								32522
							],
							[
								32583,
								32591
							],
							[
								32863,
								32880
							],
							[
								32984,
								32994
							],
							[
								33104,
								33137
							],
							[
								33170,
								33188
							],
							[
								33268,
								33289
							],
							[
								33315,
								33326
							],
							[
								33434,
								33446
							],
							[
								33532,
								33561
							],
							[
								33591,
								33603
							],
							[
								33758,
								33788
							],
							[
								33821,
								33839
							],
							[
								33878,
								33899
							],
							[
								33920,
								33931
							],
							[
								33992,
								34017
							],
							[
								34147,
								34168
							],
							[
								34216,
								34225
							],
							[
								37083,
								37095
							],
							[
								37150,
								37162
							],
							[
								37225,
								37264
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"gates: () =>",
							"e =>",
							"devices: () =>",
							"e =>",
							"name: () =>",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"layer: () =>",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"elements: () =>",
							"signals: () =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"plain: () =>",
							"packages()",
							"devicesets()",
							"e =>",
							"symbols()",
							"e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							" () =>",
							"e =>",
							" e =>",
							" e =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							"pushEvent(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"n =>",
							"l =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClCQAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBkZWNvZGVIVE1MRW50aXRpZXMgPSBzID0+CihtYXRjaCwgZW50aXR5KSA9PgpUTGlzdCA9IChjaGlsZCwgZWxlbSkgPT4KICByb3VuZCA9IG4gPT4KICBnZXQodGFyZ2V0LCBwcm9wKQpFYWdsZUVsZW1lbnQKICBzdGF0aWMgZ2V0KG93bmVyLCByZWYsIHJhdykKICBzdGF0aWMgY3JlYXRlKHRhZ05hbWUsIGF0dHJpYnV0ZXMgPSB7fSwgY2hpbGRyZW4gPSBbXSkKICBjb25zdHJ1Y3Rvcihvd25lciwgcmVmLCByYXcpCkVhZ2xlTm9kZQogIGdldCgpCiAgZ2F0ZXM6ICgpID0+CiAgZSA9PgogIGRldmljZXM6ICgpID0+CiAgZSA9PgogIG5hbWU6ICgpID0+CiAgZWxlbWVudDogKCkgPT4KICBwYWQ6ICgpID0+CiAgaGFuZGxlciA9IHYgPT4KKCkgPT4KICBnZXREaWFtZXRlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9Pgp2ID0+CiAgbmFtZSA9Pgp2ID0+CiAgZ2V0IGNvbG9yKCkKICBoZm4gPSB2YWx1ZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgbGF5ZXI6ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgooKSA9PgooKSA9PgogIGUgPT4KKCkgPT4KKCkgPT4KICBlID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBwbGFpbjogKCkgPT4KICBzaGVldHM6ICgpID0+CiAgcGFydHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgcGFja2FnZXMoKQogIGRldmljZXNldHMoKQogIGUgPT4KICBzeW1ib2xzKCkKICBlID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgoobywgcCwgcikgPT4KKCkgPT4KICBjcmVmID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CiAgLmdldENvbG9yID0gZWxlbWVudCA9PgogIC5pc1Zpc2libGUgPSBlbGVtZW50ID0+CiAgLnNldFZpc2libGUgPSB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmID0+CiAgdmFsdWUgPT4KICAuZ2V0Q29sb3IgPSBmdW5jdGlvbigpCnZhbHVlID0+CiAgbiA9PgooKSA9PgogIGUgPT4KZSA9PgplID0+CiAgZ2V0IHJlcGVhdGVyKCkKKHB1c2gsIHN0b3ApID0+Cih7IHZhbHVlLCBkb25lIH0pID0+CiAgcHVzaEV2ZW50KC4uLmFyZ3MpCiAgZWxlbSA9PgogIGV2ZW50KG5hbWUpCiAgc3Vic2NyaWJlKGhhbmRsZXIpCiAgdW5zdWJzY3JpYmUoaGFuZGxlcikKICBoID0+CiAgZ2V0IHRleHQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRMYXllcigpCiAgbG9va3VwKHhwYXRoLCBjcmVhdGUpCihvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBuID0+CiAgbCA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKRWFnbGVFbGVtZW50CiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAAClCQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					194,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								858,
								882
							],
							[
								918,
								943
							],
							[
								992,
								1014
							],
							[
								1252,
								1276
							],
							[
								1365,
								1377
							],
							[
								1443,
								1460
							],
							[
								1935,
								1947
							],
							[
								2086,
								2113
							],
							[
								3282,
								3336
							],
							[
								3531,
								3559
							],
							[
								4393,
								4402
							],
							[
								4541,
								4546
							],
							[
								4922,
								4934
							],
							[
								4964,
								4968
							],
							[
								5022,
								5036
							],
							[
								5066,
								5070
							],
							[
								5213,
								5224
							],
							[
								5413,
								5427
							],
							[
								5544,
								5554
							],
							[
								5912,
								5926
							],
							[
								6038,
								6043
							],
							[
								6274,
								6292
							],
							[
								6330,
								6344
							],
							[
								6438,
								6452
							],
							[
								6527,
								6532
							],
							[
								6746,
								6754
							],
							[
								6868,
								6876
							],
							[
								7205,
								7210
							],
							[
								7232,
								7239
							],
							[
								7391,
								7396
							],
							[
								8056,
								8067
							],
							[
								8465,
								8479
							],
							[
								8945,
								8956
							],
							[
								9043,
								9054
							],
							[
								9073,
								9077
							],
							[
								9217,
								9228
							],
							[
								9246,
								9250
							],
							[
								9390,
								9401
							],
							[
								9512,
								9523
							],
							[
								9541,
								9545
							],
							[
								10311,
								10322
							],
							[
								10341,
								10345
							],
							[
								10474,
								10485
							],
							[
								10508,
								10512
							],
							[
								10643,
								10654
							],
							[
								10738,
								10749
							],
							[
								10947,
								10959
							],
							[
								11060,
								11071
							],
							[
								11201,
								11212
							],
							[
								11909,
								11915
							],
							[
								12034,
								12040
							],
							[
								12058,
								12062
							],
							[
								12200,
								12206
							],
							[
								12428,
								12434
							],
							[
								12444,
								12448
							],
							[
								12546,
								12552
							],
							[
								12641,
								12647
							],
							[
								12737,
								12743
							],
							[
								12838,
								12844
							],
							[
								12943,
								12949
							],
							[
								13032,
								13038
							],
							[
								13126,
								13132
							],
							[
								13267,
								13273
							],
							[
								13362,
								13368
							],
							[
								13421,
								13427
							],
							[
								13520,
								13526
							],
							[
								14079,
								14094
							],
							[
								14345,
								14359
							],
							[
								14604,
								14616
							],
							[
								15353,
								15366
							],
							[
								15629,
								15641
							],
							[
								15790,
								15802
							],
							[
								16695,
								16705
							],
							[
								17050,
								17062
							],
							[
								17115,
								17119
							],
							[
								17193,
								17202
							],
							[
								17255,
								17259
							],
							[
								17470,
								17476
							],
							[
								17556,
								17561
							],
							[
								17834,
								17840
							],
							[
								17963,
								17983
							],
							[
								18002,
								18030
							],
							[
								18268,
								18274
							],
							[
								18471,
								18478
							],
							[
								18568,
								18574
							],
							[
								18771,
								18778
							],
							[
								18950,
								18956
							],
							[
								19015,
								19020
							],
							[
								19119,
								19125
							],
							[
								19184,
								19189
							],
							[
								19244,
								19250
							],
							[
								19330,
								19335
							],
							[
								19450,
								19456
							],
							[
								19515,
								19520
							],
							[
								19590,
								19612
							],
							[
								19709,
								19732
							],
							[
								19831,
								19853
							],
							[
								19979,
								19996
							],
							[
								20029,
								20037
							],
							[
								20236,
								20258
							],
							[
								20666,
								20675
							],
							[
								20724,
								20728
							],
							[
								21134,
								21140
							],
							[
								21255,
								21259
							],
							[
								21392,
								21397
							],
							[
								21467,
								21472
							],
							[
								21607,
								21621
							],
							[
								21736,
								21757
							],
							[
								21918,
								21938
							],
							[
								22037,
								22055
							],
							[
								22292,
								22299
							],
							[
								22435,
								22446
							],
							[
								22637,
								22655
							],
							[
								22740,
								22760
							],
							[
								22810,
								22814
							],
							[
								22857,
								22867
							],
							[
								23045,
								23061
							],
							[
								23096,
								23106
							],
							[
								23448,
								23469
							],
							[
								23502,
								23515
							],
							[
								23985,
								24011
							],
							[
								24108,
								24119
							],
							[
								24549,
								24553
							],
							[
								24583,
								24587
							],
							[
								24664,
								24668
							],
							[
								26028,
								26032
							],
							[
								26406,
								26410
							],
							[
								26645,
								26649
							],
							[
								26804,
								26808
							],
							[
								26837,
								26841
							],
							[
								27035,
								27039
							],
							[
								27716,
								27720
							],
							[
								28011,
								28023
							],
							[
								28062,
								28078
							],
							[
								28444,
								28458
							],
							[
								28550,
								28578
							],
							[
								28805,
								28809
							],
							[
								28900,
								28907
							],
							[
								28970,
								28980
							],
							[
								29207,
								29214
							],
							[
								29459,
								29466
							],
							[
								29646,
								29653
							],
							[
								29976,
								29982
							],
							[
								30212,
								30216
							],
							[
								30314,
								30337
							],
							[
								30397,
								30425
							],
							[
								30513,
								30520
							],
							[
								30683,
								30706
							],
							[
								30911,
								30927
							],
							[
								30968,
								30976
							],
							[
								31039,
								31047
							],
							[
								31266,
								31277
							],
							[
								31391,
								31409
							],
							[
								31521,
								31532
							],
							[
								31577,
								31594
							],
							[
								31706,
								31713
							],
							[
								31764,
								31785
							],
							[
								31883,
								31902
							],
							[
								31967,
								31988
							],
							[
								32055,
								32077
							],
							[
								32145,
								32163
							],
							[
								32514,
								32522
							],
							[
								32583,
								32591
							],
							[
								32863,
								32880
							],
							[
								32984,
								32994
							],
							[
								33104,
								33137
							],
							[
								33170,
								33188
							],
							[
								33268,
								33289
							],
							[
								33315,
								33326
							],
							[
								33434,
								33446
							],
							[
								33532,
								33561
							],
							[
								33591,
								33603
							],
							[
								33758,
								33788
							],
							[
								33821,
								33839
							],
							[
								33878,
								33899
							],
							[
								33920,
								33931
							],
							[
								33992,
								34017
							],
							[
								34147,
								34168
							],
							[
								34216,
								34225
							],
							[
								37083,
								37095
							],
							[
								37150,
								37162
							],
							[
								37225,
								37264
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"gates: () =>",
							"e =>",
							"devices: () =>",
							"e =>",
							"name: () =>",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"layer: () =>",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"elements: () =>",
							"signals: () =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"plain: () =>",
							"packages()",
							"devicesets()",
							"e =>",
							"symbols()",
							"e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							" () =>",
							"e =>",
							" e =>",
							" e =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							"pushEvent(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"n =>",
							"l =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClCQAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBkZWNvZGVIVE1MRW50aXRpZXMgPSBzID0+CihtYXRjaCwgZW50aXR5KSA9PgpUTGlzdCA9IChjaGlsZCwgZWxlbSkgPT4KICByb3VuZCA9IG4gPT4KICBnZXQodGFyZ2V0LCBwcm9wKQpFYWdsZUVsZW1lbnQKICBzdGF0aWMgZ2V0KG93bmVyLCByZWYsIHJhdykKICBzdGF0aWMgY3JlYXRlKHRhZ05hbWUsIGF0dHJpYnV0ZXMgPSB7fSwgY2hpbGRyZW4gPSBbXSkKICBjb25zdHJ1Y3Rvcihvd25lciwgcmVmLCByYXcpCkVhZ2xlTm9kZQogIGdldCgpCiAgZ2F0ZXM6ICgpID0+CiAgZSA9PgogIGRldmljZXM6ICgpID0+CiAgZSA9PgogIG5hbWU6ICgpID0+CiAgZWxlbWVudDogKCkgPT4KICBwYWQ6ICgpID0+CiAgaGFuZGxlciA9IHYgPT4KKCkgPT4KICBnZXREaWFtZXRlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9Pgp2ID0+CiAgbmFtZSA9Pgp2ID0+CiAgZ2V0IGNvbG9yKCkKICBoZm4gPSB2YWx1ZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgbGF5ZXI6ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgooKSA9PgooKSA9PgogIGUgPT4KKCkgPT4KKCkgPT4KICBlID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBwbGFpbjogKCkgPT4KICBzaGVldHM6ICgpID0+CiAgcGFydHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgcGFja2FnZXMoKQogIGRldmljZXNldHMoKQogIGUgPT4KICBzeW1ib2xzKCkKICBlID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgoobywgcCwgcikgPT4KKCkgPT4KICBjcmVmID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CiAgLmdldENvbG9yID0gZWxlbWVudCA9PgogIC5pc1Zpc2libGUgPSBlbGVtZW50ID0+CiAgLnNldFZpc2libGUgPSB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmID0+CiAgdmFsdWUgPT4KICAuZ2V0Q29sb3IgPSBmdW5jdGlvbigpCnZhbHVlID0+CiAgbiA9PgooKSA9PgogIGUgPT4KZSA9PgplID0+CiAgZ2V0IHJlcGVhdGVyKCkKKHB1c2gsIHN0b3ApID0+Cih7IHZhbHVlLCBkb25lIH0pID0+CiAgcHVzaEV2ZW50KC4uLmFyZ3MpCiAgZWxlbSA9PgogIGV2ZW50KG5hbWUpCiAgc3Vic2NyaWJlKGhhbmRsZXIpCiAgdW5zdWJzY3JpYmUoaGFuZGxlcikKICBoID0+CiAgZ2V0IHRleHQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRMYXllcigpCiAgbG9va3VwKHhwYXRoLCBjcmVhdGUpCihvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBuID0+CiAgbCA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKRWFnbGVFbGVtZW50CiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAAClCQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					195,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								858,
								882
							],
							[
								918,
								943
							],
							[
								992,
								1014
							],
							[
								1252,
								1276
							],
							[
								1365,
								1377
							],
							[
								1443,
								1460
							],
							[
								1935,
								1947
							],
							[
								2086,
								2113
							],
							[
								3282,
								3336
							],
							[
								3531,
								3559
							],
							[
								4393,
								4402
							],
							[
								4541,
								4546
							],
							[
								4922,
								4934
							],
							[
								4964,
								4968
							],
							[
								5022,
								5036
							],
							[
								5066,
								5070
							],
							[
								5213,
								5224
							],
							[
								5413,
								5427
							],
							[
								5544,
								5554
							],
							[
								5912,
								5926
							],
							[
								6038,
								6043
							],
							[
								6274,
								6292
							],
							[
								6330,
								6344
							],
							[
								6438,
								6452
							],
							[
								6527,
								6532
							],
							[
								6746,
								6754
							],
							[
								6868,
								6876
							],
							[
								7205,
								7210
							],
							[
								7232,
								7239
							],
							[
								7391,
								7396
							],
							[
								8056,
								8067
							],
							[
								8465,
								8479
							],
							[
								8945,
								8956
							],
							[
								9043,
								9054
							],
							[
								9073,
								9077
							],
							[
								9217,
								9228
							],
							[
								9246,
								9250
							],
							[
								9390,
								9401
							],
							[
								9512,
								9523
							],
							[
								9541,
								9545
							],
							[
								10311,
								10322
							],
							[
								10341,
								10345
							],
							[
								10474,
								10485
							],
							[
								10508,
								10512
							],
							[
								10643,
								10654
							],
							[
								10738,
								10749
							],
							[
								10947,
								10959
							],
							[
								11060,
								11071
							],
							[
								11201,
								11212
							],
							[
								11909,
								11915
							],
							[
								12034,
								12040
							],
							[
								12058,
								12062
							],
							[
								12200,
								12206
							],
							[
								12428,
								12434
							],
							[
								12444,
								12448
							],
							[
								12546,
								12552
							],
							[
								12641,
								12647
							],
							[
								12737,
								12743
							],
							[
								12838,
								12844
							],
							[
								12943,
								12949
							],
							[
								13032,
								13038
							],
							[
								13126,
								13132
							],
							[
								13267,
								13273
							],
							[
								13362,
								13368
							],
							[
								13421,
								13427
							],
							[
								13520,
								13526
							],
							[
								14079,
								14094
							],
							[
								14345,
								14359
							],
							[
								14604,
								14616
							],
							[
								15353,
								15366
							],
							[
								15629,
								15641
							],
							[
								15790,
								15802
							],
							[
								16695,
								16705
							],
							[
								17050,
								17062
							],
							[
								17115,
								17119
							],
							[
								17193,
								17202
							],
							[
								17255,
								17259
							],
							[
								17470,
								17476
							],
							[
								17556,
								17561
							],
							[
								17834,
								17840
							],
							[
								17963,
								17983
							],
							[
								18002,
								18030
							],
							[
								18268,
								18274
							],
							[
								18471,
								18478
							],
							[
								18568,
								18574
							],
							[
								18771,
								18778
							],
							[
								18950,
								18956
							],
							[
								19015,
								19020
							],
							[
								19119,
								19125
							],
							[
								19184,
								19189
							],
							[
								19244,
								19250
							],
							[
								19330,
								19335
							],
							[
								19450,
								19456
							],
							[
								19515,
								19520
							],
							[
								19590,
								19612
							],
							[
								19709,
								19732
							],
							[
								19831,
								19853
							],
							[
								19979,
								19996
							],
							[
								20029,
								20037
							],
							[
								20236,
								20258
							],
							[
								20666,
								20675
							],
							[
								20724,
								20728
							],
							[
								21134,
								21140
							],
							[
								21255,
								21259
							],
							[
								21392,
								21397
							],
							[
								21467,
								21472
							],
							[
								21607,
								21621
							],
							[
								21736,
								21757
							],
							[
								21918,
								21938
							],
							[
								22037,
								22055
							],
							[
								22292,
								22299
							],
							[
								22435,
								22446
							],
							[
								22637,
								22655
							],
							[
								22740,
								22760
							],
							[
								22810,
								22814
							],
							[
								22857,
								22867
							],
							[
								23045,
								23061
							],
							[
								23096,
								23106
							],
							[
								23448,
								23469
							],
							[
								23502,
								23515
							],
							[
								23985,
								24011
							],
							[
								24108,
								24119
							],
							[
								24549,
								24553
							],
							[
								24583,
								24587
							],
							[
								24664,
								24668
							],
							[
								26028,
								26032
							],
							[
								26406,
								26410
							],
							[
								26645,
								26649
							],
							[
								26804,
								26808
							],
							[
								26837,
								26841
							],
							[
								27035,
								27039
							],
							[
								27716,
								27720
							],
							[
								28011,
								28023
							],
							[
								28062,
								28078
							],
							[
								28444,
								28458
							],
							[
								28550,
								28578
							],
							[
								28805,
								28809
							],
							[
								28900,
								28907
							],
							[
								28970,
								28980
							],
							[
								29207,
								29214
							],
							[
								29459,
								29466
							],
							[
								29646,
								29653
							],
							[
								29976,
								29982
							],
							[
								30212,
								30216
							],
							[
								30314,
								30337
							],
							[
								30397,
								30425
							],
							[
								30513,
								30520
							],
							[
								30683,
								30706
							],
							[
								30911,
								30927
							],
							[
								30968,
								30976
							],
							[
								31039,
								31047
							],
							[
								31266,
								31277
							],
							[
								31391,
								31409
							],
							[
								31521,
								31532
							],
							[
								31577,
								31594
							],
							[
								31706,
								31713
							],
							[
								31764,
								31785
							],
							[
								31883,
								31902
							],
							[
								31967,
								31988
							],
							[
								32055,
								32077
							],
							[
								32145,
								32163
							],
							[
								32514,
								32522
							],
							[
								32583,
								32591
							],
							[
								32863,
								32880
							],
							[
								32984,
								32994
							],
							[
								33104,
								33137
							],
							[
								33170,
								33188
							],
							[
								33268,
								33289
							],
							[
								33315,
								33326
							],
							[
								33434,
								33446
							],
							[
								33532,
								33561
							],
							[
								33591,
								33603
							],
							[
								33758,
								33788
							],
							[
								33821,
								33839
							],
							[
								33878,
								33899
							],
							[
								33920,
								33931
							],
							[
								33992,
								34017
							],
							[
								34147,
								34168
							],
							[
								34216,
								34225
							],
							[
								37083,
								37095
							],
							[
								37150,
								37162
							],
							[
								37225,
								37264
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"gates: () =>",
							"e =>",
							"devices: () =>",
							"e =>",
							"name: () =>",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"layer: () =>",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"elements: () =>",
							"signals: () =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"plain: () =>",
							"packages()",
							"devicesets()",
							"e =>",
							"symbols()",
							"e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							" () =>",
							"e =>",
							" e =>",
							" e =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							"pushEvent(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"n =>",
							"l =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAClCQAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBkZWNvZGVIVE1MRW50aXRpZXMgPSBzID0+CihtYXRjaCwgZW50aXR5KSA9PgpUTGlzdCA9IChjaGlsZCwgZWxlbSkgPT4KICByb3VuZCA9IG4gPT4KICBnZXQodGFyZ2V0LCBwcm9wKQpFYWdsZUVsZW1lbnQKICBzdGF0aWMgZ2V0KG93bmVyLCByZWYsIHJhdykKICBzdGF0aWMgY3JlYXRlKHRhZ05hbWUsIGF0dHJpYnV0ZXMgPSB7fSwgY2hpbGRyZW4gPSBbXSkKICBjb25zdHJ1Y3Rvcihvd25lciwgcmVmLCByYXcpCkVhZ2xlTm9kZQogIGdldCgpCiAgZ2F0ZXM6ICgpID0+CiAgZSA9PgogIGRldmljZXM6ICgpID0+CiAgZSA9PgogIG5hbWU6ICgpID0+CiAgZWxlbWVudDogKCkgPT4KICBwYWQ6ICgpID0+CiAgaGFuZGxlciA9IHYgPT4KKCkgPT4KICBnZXREaWFtZXRlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9Pgp2ID0+CiAgbmFtZSA9Pgp2ID0+CiAgZ2V0IGNvbG9yKCkKICBoZm4gPSB2YWx1ZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgbGF5ZXI6ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgooKSA9PgooKSA9PgogIGUgPT4KKCkgPT4KKCkgPT4KICBlID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBwbGFpbjogKCkgPT4KICBzaGVldHM6ICgpID0+CiAgcGFydHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgcGFja2FnZXMoKQogIGRldmljZXNldHMoKQogIGUgPT4KICBzeW1ib2xzKCkKICBlID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgoobywgcCwgcikgPT4KKCkgPT4KICBjcmVmID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CiAgLmdldENvbG9yID0gZWxlbWVudCA9PgogIC5pc1Zpc2libGUgPSBlbGVtZW50ID0+CiAgLnNldFZpc2libGUgPSB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmID0+CiAgdmFsdWUgPT4KICAuZ2V0Q29sb3IgPSBmdW5jdGlvbigpCnZhbHVlID0+CiAgbiA9PgooKSA9PgogIGUgPT4KZSA9PgplID0+CiAgZ2V0IHJlcGVhdGVyKCkKKHB1c2gsIHN0b3ApID0+Cih7IHZhbHVlLCBkb25lIH0pID0+CiAgcHVzaEV2ZW50KC4uLmFyZ3MpCiAgZWxlbSA9PgogIGV2ZW50KG5hbWUpCiAgc3Vic2NyaWJlKGhhbmRsZXIpCiAgdW5zdWJzY3JpYmUoaGFuZGxlcikKICBoID0+CiAgZ2V0IHRleHQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRMYXllcigpCiAgbG9va3VwKHhwYXRoLCBjcmVhdGUpCihvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBuID0+CiAgbCA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKRWFnbGVFbGVtZW50CiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAAClCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApQkAACAgYWRkID0gKGFyciwgLi4uaXRlbXMpID0+CiAgZGVjb2RlSFRNTEVudGl0aWVzID0gcyA9PgoobWF0Y2gsIGVudGl0eSkgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogIGdhdGVzOiAoKSA9PgogIGUgPT4KICBkZXZpY2VzOiAoKSA9PgogIGUgPT4KICBuYW1lOiAoKSA9PgogIGVsZW1lbnQ6ICgpID0+CiAgcGFkOiAoKSA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgZ2V0RGlhbWV0ZXIgPSB2ID0+CiAgaGFuZGxlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgooKSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KdiA9PgogIG5hbWUgPT4KdiA9PgogIGdldCBjb2xvcigpCiAgaGZuID0gdmFsdWUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgZSA9PgogIGhmbiA9ICgpID0+CiAgZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGxheWVyOiAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KKCkgPT4KKCkgPT4KICBlID0+CigpID0+CigpID0+CiAgZSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgogIGVsZW1lbnRzOiAoKSA9PgogIHNpZ25hbHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgc2hlZXRzOiAoKSA9PgogIHBhcnRzOiAoKSA9PgogIHBsYWluOiAoKSA9PgogIHBhY2thZ2VzKCkKICBkZXZpY2VzZXRzKCkKICBlID0+CiAgc3ltYm9scygpCiAgZSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKG8sIHAsIHIpID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgogIGNyZWYgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgogIC5nZXRDb2xvciA9IGVsZW1lbnQgPT4KICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQp2YWx1ZSA9PgogIG4gPT4KKCkgPT4KICBlID0+CmUgPT4KZSA9PgogIGdldCByZXBlYXRlcigpCihwdXNoLCBzdG9wKSA9PgooeyB2YWx1ZSwgZG9uZSB9KSA9PgogIHB1c2hFdmVudCguLi5hcmdzKQogIGVsZW0gPT4KICBldmVudChuYW1lKQogIHN1YnNjcmliZShoYW5kbGVyKQogIHVuc3Vic2NyaWJlKGhhbmRsZXIpCiAgaCA9PgogIGdldCB0ZXh0KCkKICBnZXQgYXR0cmlidXRlcygpCiAgZ2V0TGF5ZXIoKQogIGxvb2t1cCh4cGF0aCwgY3JlYXRlKQoobywgcCwgdikgPT4KICBnZXRCb3VuZHMocHJlZCwgb3B0cyA9IHt9KQogIHByZWQgPSBlID0+CiAgbiA9PgogIGwgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgYiA9PgogIHIgPT4KICBlID0+CiAgbiA9PgogIGdldCBib3VuZHMoKQogIHRyYW5zZm9ybWF0aW9uKCkKICBnZXQgZ2VvbWV0cnkoKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwID0+CiAgcHJvcCA9PgprID0+IHYgPT4KICBwcm9wID0+CiAgcHJvcCA9PgogIHByb3AgPT4KKCkgPT4KICBnID0+CiAgcG9zaXRpb24ob2Zmc2V0ID0gbnVsbCkKICBtYWtlR2V0dGVyU2V0dGVyID0gayA9PiB2ID0+CiAgcHJvcCA9PgogIHN0YXRpYyBpc1JlbGF0aW9uKG5hbWUpCiAgdCA9IChvLCBwLCB2KSA9PgogIHIgPSBlID0+CiAgc2NvcGUyKCkKICBnZXQgY2hhaW4oKQogIGdldFBhcmVudCh0YWdOYW1lKQogIGdldCBzaGVldCgpCiAgZ2V0IHNoZWV0TnVtYmVyKCkKICBuYW1lcygpCihhY2MsIGVudHJ5KSA9PgogIHN0YXRpYyBrZXlzKGVudGl0eSkKICBzdGF0aWMgdmFsdWVzKGVudGl0eSkKICBzdGF0aWMgZW50cmllcyhlbnRpdHkpCiAgc3RhdGljIHRvT2JqZWN0KGUpCiAgY2hpbGQgPT4KICBjaGlsZCA9PgogIHN0YXRpYyB0b0FycmF5KGUpCiAgdG9TdHJpbmcoKQoqZ2V0QWxsKHByZWQsIHRyYW5zZm9ybSA9IGEgPT4gYSkKKHYsIHAsIG8pID0+CihyLCB2LCBwLCBvKSA9PgooKSA9PgoodiwgcCwgbykgPT4KICBnZXQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KICBmaW5kKHByZWQsIHRyYW5zZm9ybSA9IGEgPT4gYSkKKHYsIHAsIG8pID0+CihyLCB2LCBwLCBvKSA9PgooKSA9PgogIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkKICByZW1vdmVBdHRyaWJ1dGUobmFtZSkKICBnZXQgcG9zKCkKRWFnbGVFbGVtZW50CkVhZ2xlRWxlbWVudAogIG1ha2VFYWdsZUVsZW1lbnQgPSAob3duZXIsIHJlZiwgcmF3KSA9PgAAAAAAAAAApQkAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					196,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClCQAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBkZWNvZGVIVE1MRW50aXRpZXMgPSBzID0+CihtYXRjaCwgZW50aXR5KSA9PgpUTGlzdCA9IChjaGlsZCwgZWxlbSkgPT4KICByb3VuZCA9IG4gPT4KICBnZXQodGFyZ2V0LCBwcm9wKQpFYWdsZUVsZW1lbnQKICBzdGF0aWMgZ2V0KG93bmVyLCByZWYsIHJhdykKICBzdGF0aWMgY3JlYXRlKHRhZ05hbWUsIGF0dHJpYnV0ZXMgPSB7fSwgY2hpbGRyZW4gPSBbXSkKICBjb25zdHJ1Y3Rvcihvd25lciwgcmVmLCByYXcpCkVhZ2xlTm9kZQogIGdldCgpCiAgZ2F0ZXM6ICgpID0+CiAgZSA9PgogIGRldmljZXM6ICgpID0+CiAgZSA9PgogIG5hbWU6ICgpID0+CiAgZWxlbWVudDogKCkgPT4KICBwYWQ6ICgpID0+CiAgaGFuZGxlciA9IHYgPT4KKCkgPT4KICBnZXREaWFtZXRlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9Pgp2ID0+CiAgbmFtZSA9Pgp2ID0+CiAgZ2V0IGNvbG9yKCkKICBoZm4gPSB2YWx1ZSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgbGF5ZXI6ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgooKSA9PgooKSA9PgogIGUgPT4KKCkgPT4KKCkgPT4KICBlID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBwbGFpbjogKCkgPT4KICBzaGVldHM6ICgpID0+CiAgcGFydHM6ICgpID0+CiAgcGxhaW46ICgpID0+CiAgcGFja2FnZXMoKQogIGRldmljZXNldHMoKQogIGUgPT4KICBzeW1ib2xzKCkKICBlID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgoobywgcCwgcikgPT4KKCkgPT4KICBjcmVmID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CiAgLmdldENvbG9yID0gZWxlbWVudCA9PgogIC5pc1Zpc2libGUgPSBlbGVtZW50ID0+CiAgLnNldFZpc2libGUgPSB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmID0+CiAgdmFsdWUgPT4KICAuZ2V0Q29sb3IgPSBmdW5jdGlvbigpCnZhbHVlID0+CiAgbiA9PgooKSA9PgogIGUgPT4KZSA9PgplID0+CiAgZ2V0IHJlcGVhdGVyKCkKKHB1c2gsIHN0b3ApID0+Cih7IHZhbHVlLCBkb25lIH0pID0+CiAgcHVzaEV2ZW50KC4uLmFyZ3MpCiAgZWxlbSA9PgogIGV2ZW50KG5hbWUpCiAgc3Vic2NyaWJlKGhhbmRsZXIpCiAgdW5zdWJzY3JpYmUoaGFuZGxlcikKICBoID0+CiAgZ2V0IHRleHQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRMYXllcigpCiAgbG9va3VwKHhwYXRoLCBjcmVhdGUpCihvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBuID0+CiAgbCA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKRWFnbGVFbGVtZW50CiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					197,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/document.js",
						"symkeys":
						[
							[
								709,
								770
							],
							[
								813,
								840
							],
							[
								953,
								966
							],
							[
								1074,
								1088
							],
							[
								1194,
								1224
							],
							[
								1334,
								1357
							],
							[
								1421,
								1444
							],
							[
								1611,
								1625
							],
							[
								1739,
								1787
							],
							[
								2195,
								2215
							],
							[
								2456,
								2471
							],
							[
								2604,
								2619
							],
							[
								2705,
								2720
							],
							[
								3399,
								3411
							],
							[
								3738,
								3750
							],
							[
								3826,
								3839
							],
							[
								3870,
								3882
							],
							[
								3912,
								3928
							],
							[
								4052,
								4058
							],
							[
								4415,
								4427
							],
							[
								4503,
								4515
							],
							[
								4535,
								4550
							],
							[
								4579,
								4595
							],
							[
								4625,
								4639
							],
							[
								4842,
								4851
							],
							[
								5016,
								5030
							],
							[
								5096,
								5109
							],
							[
								5214,
								5228
							],
							[
								5312,
								5325
							],
							[
								5377,
								5390
							],
							[
								6566,
								6601
							],
							[
								7018,
								7053
							],
							[
								7177,
								7201
							],
							[
								7248,
								7260
							],
							[
								7300,
								7320
							],
							[
								7364,
								7376
							],
							[
								7416,
								7437
							],
							[
								7482,
								7494
							],
							[
								7534,
								7547
							],
							[
								7580,
								7603
							],
							[
								7807,
								7829
							],
							[
								7961,
								7965
							],
							[
								8303,
								8309
							],
							[
								8365,
								8369
							],
							[
								8438,
								8442
							],
							[
								8472,
								8476
							],
							[
								8634,
								8659
							],
							[
								9009,
								9013
							],
							[
								9309,
								9323
							],
							[
								9346,
								9351
							],
							[
								9408,
								9424
							],
							[
								9547,
								9558
							],
							[
								9609,
								9628
							],
							[
								9689,
								9697
							],
							[
								9741,
								9763
							],
							[
								9824,
								9846
							],
							[
								9911,
								9923
							],
							[
								10178,
								10190
							],
							[
								10453,
								10469
							],
							[
								10492,
								10496
							],
							[
								10583,
								10587
							],
							[
								10674,
								10687
							]
						],
						"symlist":
						[
							"function GetProxy(fn = (prop, target) => null, handlers = {})",
							"get(target, prop, receiver)",
							"EagleDocument",
							"get typeName()",
							"static typeName(fileExtension)",
							"static baseOf(filename)",
							"static typeOf(filename)",
							"readFn = fn =>",
							"constructor(xmlStr, project, filename, type, fs)",
							"(raw, owner, ref) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(r, g, b) =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"libraries: () =>",
							" () =>",
							"plain: () =>",
							"board: () =>",
							"elements: () =>",
							"libraries: () =>",
							"signals: () =>",
							"get raw()",
							"get filename()",
							"get dirname()",
							"get basename()",
							"get changes()",
							"cacheFields()",
							"saveTo(file, overwrite = false, fs)",
							"index(path, transform = arg => arg)",
							"*getAll(pred, transform)",
							"(v, p, o) =>",
							"get(pred, transform)",
							"(v, p, o) =>",
							"find(pred, transform)",
							"(v, p, o) =>",
							"lookup(xpath)",
							" (owner, ref, value) =>",
							"getBounds(sheetNo = 0)",
							"v =>",
							"sig =>",
							"c =>",
							"e =>",
							"Rect",
							"getMeasures(options = {})",
							"e =>",
							"get measures()",
							"() =>",
							"get dimensions()",
							"signalMap()",
							"([name, signal]) =>",
							"child =>",
							"([child, geometry]) =>",
							"([child, geometry]) =>",
							"getLayer(id)",
							"getSheet(id)",
							"getLibrary(name)",
							"e =>",
							"e =>",
							"EagleDocument"
						]
					},
					"AQAAAAAAAAAAAAAAaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					198,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAR2V0UHJveHkoZm4gPSAocHJvcCwgdGFyZ2V0KSA9PiBudWxsLCBoYW5kbGVycyA9IHt9KQogIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKQpFYWdsZURvY3VtZW50CiAgZ2V0IHR5cGVOYW1lKCkKICBzdGF0aWMgdHlwZU5hbWUoZmlsZUV4dGVuc2lvbikKICBzdGF0aWMgYmFzZU9mKGZpbGVuYW1lKQogIHN0YXRpYyB0eXBlT2YoZmlsZW5hbWUpCiAgcmVhZEZuID0gZm4gPT4KICBjb25zdHJ1Y3Rvcih4bWxTdHIsIHByb2plY3QsIGZpbGVuYW1lLCB0eXBlLCBmcykKKHJhdywgb3duZXIsIHJlZikgPT4KKGtleSwgdmFsdWUpID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKHIsIGcsIGIpID0+CiAgcGxhaW46ICgpID0+CiAgc2hlZXRzOiAoKSA9PgogIHBhcnRzOiAoKSA9PgogIGxpYnJhcmllczogKCkgPT4KKCkgPT4KICBwbGFpbjogKCkgPT4KICBib2FyZDogKCkgPT4KICBlbGVtZW50czogKCkgPT4KICBsaWJyYXJpZXM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBnZXQgcmF3KCkKICBnZXQgZmlsZW5hbWUoKQogIGdldCBkaXJuYW1lKCkKICBnZXQgYmFzZW5hbWUoKQogIGdldCBjaGFuZ2VzKCkKICBjYWNoZUZpZWxkcygpCiAgc2F2ZVRvKGZpbGUsIG92ZXJ3cml0ZSA9IGZhbHNlLCBmcykKICBpbmRleChwYXRoLCB0cmFuc2Zvcm0gPSBhcmcgPT4gYXJnKQoqZ2V0QWxsKHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZ2V0KHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGxvb2t1cCh4cGF0aCkKKG93bmVyLCByZWYsIHZhbHVlKSA9PgogIGdldEJvdW5kcyhzaGVldE5vID0gMCkKICB2ID0+CiAgc2lnID0+CiAgYyA9PgogIGUgPT4KUmVjdAogIGdldE1lYXN1cmVzKG9wdGlvbnMgPSB7fSkKICBlID0+CiAgZ2V0IG1lYXN1cmVzKCkKKCkgPT4KICBnZXQgZGltZW5zaW9ucygpCiAgc2lnbmFsTWFwKCkKKFtuYW1lLCBzaWduYWxdKSA9PgogIGNoaWxkID0+CihbY2hpbGQsIGdlb21ldHJ5XSkgPT4KKFtjaGlsZCwgZ2VvbWV0cnldKSA9PgogIGdldExheWVyKGlkKQogIGdldFNoZWV0KGlkKQogIGdldExpYnJhcnkobmFtZSkKICBlID0+CiAgZSA9PgpFYWdsZURvY3VtZW50AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					199,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					200,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					201,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/document.js",
						"symkeys":
						[
							[
								709,
								770
							],
							[
								813,
								840
							],
							[
								953,
								966
							],
							[
								1074,
								1088
							],
							[
								1194,
								1224
							],
							[
								1334,
								1357
							],
							[
								1421,
								1444
							],
							[
								1611,
								1625
							],
							[
								1739,
								1787
							],
							[
								2195,
								2215
							],
							[
								2456,
								2471
							],
							[
								2604,
								2619
							],
							[
								2705,
								2720
							],
							[
								3399,
								3411
							],
							[
								3738,
								3750
							],
							[
								3826,
								3839
							],
							[
								3870,
								3882
							],
							[
								3912,
								3928
							],
							[
								4052,
								4058
							],
							[
								4415,
								4427
							],
							[
								4503,
								4515
							],
							[
								4535,
								4550
							],
							[
								4579,
								4595
							],
							[
								4625,
								4639
							],
							[
								4842,
								4851
							],
							[
								5016,
								5030
							],
							[
								5096,
								5109
							],
							[
								5214,
								5228
							],
							[
								5312,
								5325
							],
							[
								5377,
								5390
							],
							[
								6566,
								6601
							],
							[
								7018,
								7053
							],
							[
								7177,
								7201
							],
							[
								7248,
								7260
							],
							[
								7300,
								7320
							],
							[
								7364,
								7376
							],
							[
								7416,
								7437
							],
							[
								7482,
								7494
							],
							[
								7534,
								7547
							],
							[
								7580,
								7603
							],
							[
								7807,
								7829
							],
							[
								7961,
								7965
							],
							[
								8303,
								8309
							],
							[
								8365,
								8369
							],
							[
								8438,
								8442
							],
							[
								8472,
								8476
							],
							[
								8634,
								8659
							],
							[
								9009,
								9013
							],
							[
								9309,
								9323
							],
							[
								9346,
								9351
							],
							[
								9408,
								9424
							],
							[
								9547,
								9558
							],
							[
								9609,
								9628
							],
							[
								9689,
								9697
							],
							[
								9741,
								9763
							],
							[
								9824,
								9846
							],
							[
								9911,
								9923
							],
							[
								10178,
								10190
							],
							[
								10453,
								10469
							],
							[
								10492,
								10496
							],
							[
								10583,
								10587
							],
							[
								10674,
								10687
							]
						],
						"symlist":
						[
							"function GetProxy(fn = (prop, target) => null, handlers = {})",
							"get(target, prop, receiver)",
							"EagleDocument",
							"get typeName()",
							"static typeName(fileExtension)",
							"static baseOf(filename)",
							"static typeOf(filename)",
							"readFn = fn =>",
							"constructor(xmlStr, project, filename, type, fs)",
							"(raw, owner, ref) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(r, g, b) =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"libraries: () =>",
							" () =>",
							"plain: () =>",
							"board: () =>",
							"elements: () =>",
							"libraries: () =>",
							"signals: () =>",
							"get raw()",
							"get filename()",
							"get dirname()",
							"get basename()",
							"get changes()",
							"cacheFields()",
							"saveTo(file, overwrite = false, fs)",
							"index(path, transform = arg => arg)",
							"*getAll(pred, transform)",
							"(v, p, o) =>",
							"get(pred, transform)",
							"(v, p, o) =>",
							"find(pred, transform)",
							"(v, p, o) =>",
							"lookup(xpath)",
							" (owner, ref, value) =>",
							"getBounds(sheetNo = 0)",
							"v =>",
							"sig =>",
							"c =>",
							"e =>",
							"Rect",
							"getMeasures(options = {})",
							"e =>",
							"get measures()",
							"() =>",
							"get dimensions()",
							"signalMap()",
							"([name, signal]) =>",
							"child =>",
							"([child, geometry]) =>",
							"([child, geometry]) =>",
							"getLayer(id)",
							"getSheet(id)",
							"getLibrary(name)",
							"e =>",
							"e =>",
							"EagleDocument"
						]
					},
					"AQAAAAAAAAAAAAAAaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					202,
					4,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/document.js",
						"symkeys":
						[
							[
								709,
								770
							],
							[
								813,
								840
							],
							[
								953,
								966
							],
							[
								1074,
								1088
							],
							[
								1194,
								1224
							],
							[
								1334,
								1357
							],
							[
								1421,
								1444
							],
							[
								1611,
								1625
							],
							[
								1739,
								1787
							],
							[
								2195,
								2215
							],
							[
								2456,
								2471
							],
							[
								2604,
								2619
							],
							[
								2705,
								2720
							],
							[
								3399,
								3411
							],
							[
								3738,
								3750
							],
							[
								3826,
								3839
							],
							[
								3870,
								3882
							],
							[
								3912,
								3928
							],
							[
								4052,
								4058
							],
							[
								4415,
								4427
							],
							[
								4503,
								4515
							],
							[
								4535,
								4550
							],
							[
								4579,
								4595
							],
							[
								4625,
								4639
							],
							[
								4842,
								4851
							],
							[
								5016,
								5030
							],
							[
								5096,
								5109
							],
							[
								5214,
								5228
							],
							[
								5312,
								5325
							],
							[
								5377,
								5390
							],
							[
								6566,
								6601
							],
							[
								7018,
								7053
							],
							[
								7177,
								7201
							],
							[
								7248,
								7260
							],
							[
								7300,
								7320
							],
							[
								7364,
								7376
							],
							[
								7416,
								7437
							],
							[
								7482,
								7494
							],
							[
								7534,
								7547
							],
							[
								7580,
								7603
							],
							[
								7807,
								7829
							],
							[
								7961,
								7965
							],
							[
								8303,
								8309
							],
							[
								8365,
								8369
							],
							[
								8438,
								8442
							],
							[
								8472,
								8476
							],
							[
								8634,
								8659
							],
							[
								9009,
								9013
							],
							[
								9309,
								9323
							],
							[
								9346,
								9351
							],
							[
								9408,
								9424
							],
							[
								9547,
								9558
							],
							[
								9609,
								9628
							],
							[
								9689,
								9697
							],
							[
								9741,
								9763
							],
							[
								9824,
								9846
							],
							[
								9911,
								9923
							],
							[
								10178,
								10190
							],
							[
								10453,
								10469
							],
							[
								10504,
								10508
							],
							[
								10595,
								10608
							]
						],
						"symlist":
						[
							"function GetProxy(fn = (prop, target) => null, handlers = {})",
							"get(target, prop, receiver)",
							"EagleDocument",
							"get typeName()",
							"static typeName(fileExtension)",
							"static baseOf(filename)",
							"static typeOf(filename)",
							"readFn = fn =>",
							"constructor(xmlStr, project, filename, type, fs)",
							"(raw, owner, ref) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(r, g, b) =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"libraries: () =>",
							" () =>",
							"plain: () =>",
							"board: () =>",
							"elements: () =>",
							"libraries: () =>",
							"signals: () =>",
							"get raw()",
							"get filename()",
							"get dirname()",
							"get basename()",
							"get changes()",
							"cacheFields()",
							"saveTo(file, overwrite = false, fs)",
							"index(path, transform = arg => arg)",
							"*getAll(pred, transform)",
							"(v, p, o) =>",
							"get(pred, transform)",
							"(v, p, o) =>",
							"find(pred, transform)",
							"(v, p, o) =>",
							"lookup(xpath)",
							" (owner, ref, value) =>",
							"getBounds(sheetNo = 0)",
							"v =>",
							"sig =>",
							"c =>",
							"e =>",
							"Rect",
							"getMeasures(options = {})",
							"e =>",
							"get measures()",
							"() =>",
							"get dimensions()",
							"signalMap()",
							"([name, signal]) =>",
							"child =>",
							"([child, geometry]) =>",
							"([child, geometry]) =>",
							"getLayer(id)",
							"getSheet(id)",
							"getLibrary(name)",
							"e =>",
							"EagleDocument"
						]
					},
					"CAAAAAAAAAAAAAAAAAAAAAAAAABoBAAAR2V0UHJveHkoZm4gPSAocHJvcCwgdGFyZ2V0KSA9PiBudWxsLCBoYW5kbGVycyA9IHt9KQogIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKQpFYWdsZURvY3VtZW50CiAgZ2V0IHR5cGVOYW1lKCkKICBzdGF0aWMgdHlwZU5hbWUoZmlsZUV4dGVuc2lvbikKICBzdGF0aWMgYmFzZU9mKGZpbGVuYW1lKQogIHN0YXRpYyB0eXBlT2YoZmlsZW5hbWUpCiAgcmVhZEZuID0gZm4gPT4KICBjb25zdHJ1Y3Rvcih4bWxTdHIsIHByb2plY3QsIGZpbGVuYW1lLCB0eXBlLCBmcykKKHJhdywgb3duZXIsIHJlZikgPT4KKGtleSwgdmFsdWUpID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKHIsIGcsIGIpID0+CiAgcGxhaW46ICgpID0+CiAgc2hlZXRzOiAoKSA9PgogIHBhcnRzOiAoKSA9PgogIGxpYnJhcmllczogKCkgPT4KKCkgPT4KICBwbGFpbjogKCkgPT4KICBib2FyZDogKCkgPT4KICBlbGVtZW50czogKCkgPT4KICBsaWJyYXJpZXM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBnZXQgcmF3KCkKICBnZXQgZmlsZW5hbWUoKQogIGdldCBkaXJuYW1lKCkKICBnZXQgYmFzZW5hbWUoKQogIGdldCBjaGFuZ2VzKCkKICBjYWNoZUZpZWxkcygpCiAgc2F2ZVRvKGZpbGUsIG92ZXJ3cml0ZSA9IGZhbHNlLCBmcykKICBpbmRleChwYXRoLCB0cmFuc2Zvcm0gPSBhcmcgPT4gYXJnKQoqZ2V0QWxsKHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZ2V0KHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGxvb2t1cCh4cGF0aCkKKG93bmVyLCByZWYsIHZhbHVlKSA9PgogIGdldEJvdW5kcyhzaGVldE5vID0gMCkKICB2ID0+CiAgc2lnID0+CiAgYyA9PgogIGUgPT4KUmVjdAogIGdldE1lYXN1cmVzKG9wdGlvbnMgPSB7fSkKICBlID0+CiAgZ2V0IG1lYXN1cmVzKCkKKCkgPT4KICBnZXQgZGltZW5zaW9ucygpCiAgc2lnbmFsTWFwKCkKKFtuYW1lLCBzaWduYWxdKSA9PgogIGNoaWxkID0+CihbY2hpbGQsIGdlb21ldHJ5XSkgPT4KKFtjaGlsZCwgZ2VvbWV0cnldKSA9PgogIGdldExheWVyKGlkKQogIGdldFNoZWV0KGlkKQogIGdldExpYnJhcnkobmFtZSkKICBlID0+CiAgZSA9PgpFYWdsZURvY3VtZW50AAAAAAAAAABhBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYQQAAEdldFByb3h5KGZuID0gKHByb3AsIHRhcmdldCkgPT4gbnVsbCwgaGFuZGxlcnMgPSB7fSkKICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikKRWFnbGVEb2N1bWVudAogIGdldCB0eXBlTmFtZSgpCiAgc3RhdGljIHR5cGVOYW1lKGZpbGVFeHRlbnNpb24pCiAgc3RhdGljIGJhc2VPZihmaWxlbmFtZSkKICBzdGF0aWMgdHlwZU9mKGZpbGVuYW1lKQogIHJlYWRGbiA9IGZuID0+CiAgY29uc3RydWN0b3IoeG1sU3RyLCBwcm9qZWN0LCBmaWxlbmFtZSwgdHlwZSwgZnMpCihyYXcsIG93bmVyLCByZWYpID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKGtleSwgdmFsdWUpID0+CihyLCBnLCBiKSA9PgogIHBsYWluOiAoKSA9PgogIHNoZWV0czogKCkgPT4KICBwYXJ0czogKCkgPT4KICBsaWJyYXJpZXM6ICgpID0+CigpID0+CiAgcGxhaW46ICgpID0+CiAgYm9hcmQ6ICgpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgbGlicmFyaWVzOiAoKSA9PgogIHNpZ25hbHM6ICgpID0+CiAgZ2V0IHJhdygpCiAgZ2V0IGZpbGVuYW1lKCkKICBnZXQgZGlybmFtZSgpCiAgZ2V0IGJhc2VuYW1lKCkKICBnZXQgY2hhbmdlcygpCiAgY2FjaGVGaWVsZHMoKQogIHNhdmVUbyhmaWxlLCBvdmVyd3JpdGUgPSBmYWxzZSwgZnMpCiAgaW5kZXgocGF0aCwgdHJhbnNmb3JtID0gYXJnID0+IGFyZykKKmdldEFsbChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtKQoodiwgcCwgbykgPT4KICBsb29rdXAoeHBhdGgpCihvd25lciwgcmVmLCB2YWx1ZSkgPT4KICBnZXRCb3VuZHMoc2hlZXRObyA9IDApCiAgdiA9PgogIHNpZyA9PgogIGMgPT4KICBlID0+ClJlY3QKICBnZXRNZWFzdXJlcyhvcHRpb25zID0ge30pCiAgZSA9PgogIGdldCBtZWFzdXJlcygpCigpID0+CiAgZ2V0IGRpbWVuc2lvbnMoKQogIHNpZ25hbE1hcCgpCihbbmFtZSwgc2lnbmFsXSkgPT4KICBjaGlsZCA9PgooW2NoaWxkLCBnZW9tZXRyeV0pID0+CihbY2hpbGQsIGdlb21ldHJ5XSkgPT4KICBnZXRMYXllcihpZCkKICBnZXRTaGVldChpZCkKICBnZXRMaWJyYXJ5KG5hbWUpCiAgZSA9PgpFYWdsZURvY3VtZW50AAAAAAAAAABhBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYQQAAEdldFByb3h5KGZuID0gKHByb3AsIHRhcmdldCkgPT4gbnVsbCwgaGFuZGxlcnMgPSB7fSkKICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikKRWFnbGVEb2N1bWVudAogIGdldCB0eXBlTmFtZSgpCiAgc3RhdGljIHR5cGVOYW1lKGZpbGVFeHRlbnNpb24pCiAgc3RhdGljIGJhc2VPZihmaWxlbmFtZSkKICBzdGF0aWMgdHlwZU9mKGZpbGVuYW1lKQogIHJlYWRGbiA9IGZuID0+CiAgY29uc3RydWN0b3IoeG1sU3RyLCBwcm9qZWN0LCBmaWxlbmFtZSwgdHlwZSwgZnMpCihyYXcsIG93bmVyLCByZWYpID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKGtleSwgdmFsdWUpID0+CihyLCBnLCBiKSA9PgogIHBsYWluOiAoKSA9PgogIHNoZWV0czogKCkgPT4KICBwYXJ0czogKCkgPT4KICBsaWJyYXJpZXM6ICgpID0+CigpID0+CiAgcGxhaW46ICgpID0+CiAgYm9hcmQ6ICgpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgbGlicmFyaWVzOiAoKSA9PgogIHNpZ25hbHM6ICgpID0+CiAgZ2V0IHJhdygpCiAgZ2V0IGZpbGVuYW1lKCkKICBnZXQgZGlybmFtZSgpCiAgZ2V0IGJhc2VuYW1lKCkKICBnZXQgY2hhbmdlcygpCiAgY2FjaGVGaWVsZHMoKQogIHNhdmVUbyhmaWxlLCBvdmVyd3JpdGUgPSBmYWxzZSwgZnMpCiAgaW5kZXgocGF0aCwgdHJhbnNmb3JtID0gYXJnID0+IGFyZykKKmdldEFsbChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtKQoodiwgcCwgbykgPT4KICBsb29rdXAoeHBhdGgpCihvd25lciwgcmVmLCB2YWx1ZSkgPT4KICBnZXRCb3VuZHMoc2hlZXRObyA9IDApCiAgdiA9PgogIHNpZyA9PgogIGMgPT4KICBlID0+ClJlY3QKICBnZXRNZWFzdXJlcyhvcHRpb25zID0ge30pCiAgZSA9PgogIGdldCBtZWFzdXJlcygpCigpID0+CiAgZ2V0IGRpbWVuc2lvbnMoKQogIHNpZ25hbE1hcCgpCihbbmFtZSwgc2lnbmFsXSkgPT4KICBjaGlsZCA9PgooW2NoaWxkLCBnZW9tZXRyeV0pID0+CihbY2hpbGQsIGdlb21ldHJ5XSkgPT4KICBnZXRMYXllcihpZCkKICBnZXRTaGVldChpZCkKICBnZXRMaWJyYXJ5KG5hbWUpCiAgZSA9PgpFYWdsZURvY3VtZW50AAAAAAAAAABhBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYQQAAEdldFByb3h5KGZuID0gKHByb3AsIHRhcmdldCkgPT4gbnVsbCwgaGFuZGxlcnMgPSB7fSkKICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikKRWFnbGVEb2N1bWVudAogIGdldCB0eXBlTmFtZSgpCiAgc3RhdGljIHR5cGVOYW1lKGZpbGVFeHRlbnNpb24pCiAgc3RhdGljIGJhc2VPZihmaWxlbmFtZSkKICBzdGF0aWMgdHlwZU9mKGZpbGVuYW1lKQogIHJlYWRGbiA9IGZuID0+CiAgY29uc3RydWN0b3IoeG1sU3RyLCBwcm9qZWN0LCBmaWxlbmFtZSwgdHlwZSwgZnMpCihyYXcsIG93bmVyLCByZWYpID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKGtleSwgdmFsdWUpID0+CihyLCBnLCBiKSA9PgogIHBsYWluOiAoKSA9PgogIHNoZWV0czogKCkgPT4KICBwYXJ0czogKCkgPT4KICBsaWJyYXJpZXM6ICgpID0+CigpID0+CiAgcGxhaW46ICgpID0+CiAgYm9hcmQ6ICgpID0+CiAgZWxlbWVudHM6ICgpID0+CiAgbGlicmFyaWVzOiAoKSA9PgogIHNpZ25hbHM6ICgpID0+CiAgZ2V0IHJhdygpCiAgZ2V0IGZpbGVuYW1lKCkKICBnZXQgZGlybmFtZSgpCiAgZ2V0IGJhc2VuYW1lKCkKICBnZXQgY2hhbmdlcygpCiAgY2FjaGVGaWVsZHMoKQogIHNhdmVUbyhmaWxlLCBvdmVyd3JpdGUgPSBmYWxzZSwgZnMpCiAgaW5kZXgocGF0aCwgdHJhbnNmb3JtID0gYXJnID0+IGFyZykKKmdldEFsbChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtKQoodiwgcCwgbykgPT4KICBsb29rdXAoeHBhdGgpCihvd25lciwgcmVmLCB2YWx1ZSkgPT4KICBnZXRCb3VuZHMoc2hlZXRObyA9IDApCiAgdiA9PgogIHNpZyA9PgogIGMgPT4KICBlID0+ClJlY3QKICBnZXRNZWFzdXJlcyhvcHRpb25zID0ge30pCiAgZSA9PgogIGdldCBtZWFzdXJlcygpCigpID0+CiAgZ2V0IGRpbWVuc2lvbnMoKQogIHNpZ25hbE1hcCgpCihbbmFtZSwgc2lnbmFsXSkgPT4KICBjaGlsZCA9PgooW2NoaWxkLCBnZW9tZXRyeV0pID0+CihbY2hpbGQsIGdlb21ldHJ5XSkgPT4KICBnZXRMYXllcihpZCkKICBnZXRTaGVldChpZCkKICBnZXRMaWJyYXJ5KG5hbWUpCiAgZSA9PgpFYWdsZURvY3VtZW50AAAAAAAAAABhBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					203,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/document.js",
						"symkeys":
						[
							[
								709,
								770
							],
							[
								813,
								840
							],
							[
								953,
								966
							],
							[
								1074,
								1088
							],
							[
								1194,
								1224
							],
							[
								1334,
								1357
							],
							[
								1421,
								1444
							],
							[
								1611,
								1625
							],
							[
								1739,
								1787
							],
							[
								2195,
								2215
							],
							[
								2456,
								2471
							],
							[
								2604,
								2619
							],
							[
								2705,
								2720
							],
							[
								3399,
								3411
							],
							[
								3738,
								3750
							],
							[
								3826,
								3839
							],
							[
								3870,
								3882
							],
							[
								3912,
								3928
							],
							[
								4052,
								4058
							],
							[
								4415,
								4427
							],
							[
								4503,
								4515
							],
							[
								4535,
								4550
							],
							[
								4579,
								4595
							],
							[
								4625,
								4639
							],
							[
								4842,
								4851
							],
							[
								5016,
								5030
							],
							[
								5096,
								5109
							],
							[
								5214,
								5228
							],
							[
								5312,
								5325
							],
							[
								5377,
								5390
							],
							[
								6566,
								6601
							],
							[
								7018,
								7053
							],
							[
								7177,
								7201
							],
							[
								7248,
								7260
							],
							[
								7300,
								7320
							],
							[
								7364,
								7376
							],
							[
								7416,
								7437
							],
							[
								7482,
								7494
							],
							[
								7534,
								7547
							],
							[
								7580,
								7603
							],
							[
								7807,
								7829
							],
							[
								7961,
								7965
							],
							[
								8303,
								8309
							],
							[
								8365,
								8369
							],
							[
								8438,
								8442
							],
							[
								8472,
								8476
							],
							[
								8634,
								8659
							],
							[
								9009,
								9013
							],
							[
								9309,
								9323
							],
							[
								9346,
								9351
							],
							[
								9408,
								9424
							],
							[
								9547,
								9558
							],
							[
								9609,
								9628
							],
							[
								9689,
								9697
							],
							[
								9741,
								9763
							],
							[
								9824,
								9846
							],
							[
								9911,
								9923
							],
							[
								10178,
								10190
							],
							[
								10453,
								10469
							],
							[
								10504,
								10508
							],
							[
								10595,
								10608
							]
						],
						"symlist":
						[
							"function GetProxy(fn = (prop, target) => null, handlers = {})",
							"get(target, prop, receiver)",
							"EagleDocument",
							"get typeName()",
							"static typeName(fileExtension)",
							"static baseOf(filename)",
							"static typeOf(filename)",
							"readFn = fn =>",
							"constructor(xmlStr, project, filename, type, fs)",
							"(raw, owner, ref) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(r, g, b) =>",
							"plain: () =>",
							"sheets: () =>",
							"parts: () =>",
							"libraries: () =>",
							" () =>",
							"plain: () =>",
							"board: () =>",
							"elements: () =>",
							"libraries: () =>",
							"signals: () =>",
							"get raw()",
							"get filename()",
							"get dirname()",
							"get basename()",
							"get changes()",
							"cacheFields()",
							"saveTo(file, overwrite = false, fs)",
							"index(path, transform = arg => arg)",
							"*getAll(pred, transform)",
							"(v, p, o) =>",
							"get(pred, transform)",
							"(v, p, o) =>",
							"find(pred, transform)",
							"(v, p, o) =>",
							"lookup(xpath)",
							" (owner, ref, value) =>",
							"getBounds(sheetNo = 0)",
							"v =>",
							"sig =>",
							"c =>",
							"e =>",
							"Rect",
							"getMeasures(options = {})",
							"e =>",
							"get measures()",
							"() =>",
							"get dimensions()",
							"signalMap()",
							"([name, signal]) =>",
							"child =>",
							"([child, geometry]) =>",
							"([child, geometry]) =>",
							"getLayer(id)",
							"getSheet(id)",
							"getLibrary(name)",
							"e =>",
							"EagleDocument"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABhBAAAR2V0UHJveHkoZm4gPSAocHJvcCwgdGFyZ2V0KSA9PiBudWxsLCBoYW5kbGVycyA9IHt9KQogIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKQpFYWdsZURvY3VtZW50CiAgZ2V0IHR5cGVOYW1lKCkKICBzdGF0aWMgdHlwZU5hbWUoZmlsZUV4dGVuc2lvbikKICBzdGF0aWMgYmFzZU9mKGZpbGVuYW1lKQogIHN0YXRpYyB0eXBlT2YoZmlsZW5hbWUpCiAgcmVhZEZuID0gZm4gPT4KICBjb25zdHJ1Y3Rvcih4bWxTdHIsIHByb2plY3QsIGZpbGVuYW1lLCB0eXBlLCBmcykKKHJhdywgb3duZXIsIHJlZikgPT4KKGtleSwgdmFsdWUpID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKHIsIGcsIGIpID0+CiAgcGxhaW46ICgpID0+CiAgc2hlZXRzOiAoKSA9PgogIHBhcnRzOiAoKSA9PgogIGxpYnJhcmllczogKCkgPT4KKCkgPT4KICBwbGFpbjogKCkgPT4KICBib2FyZDogKCkgPT4KICBlbGVtZW50czogKCkgPT4KICBsaWJyYXJpZXM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBnZXQgcmF3KCkKICBnZXQgZmlsZW5hbWUoKQogIGdldCBkaXJuYW1lKCkKICBnZXQgYmFzZW5hbWUoKQogIGdldCBjaGFuZ2VzKCkKICBjYWNoZUZpZWxkcygpCiAgc2F2ZVRvKGZpbGUsIG92ZXJ3cml0ZSA9IGZhbHNlLCBmcykKICBpbmRleChwYXRoLCB0cmFuc2Zvcm0gPSBhcmcgPT4gYXJnKQoqZ2V0QWxsKHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZ2V0KHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGxvb2t1cCh4cGF0aCkKKG93bmVyLCByZWYsIHZhbHVlKSA9PgogIGdldEJvdW5kcyhzaGVldE5vID0gMCkKICB2ID0+CiAgc2lnID0+CiAgYyA9PgogIGUgPT4KUmVjdAogIGdldE1lYXN1cmVzKG9wdGlvbnMgPSB7fSkKICBlID0+CiAgZ2V0IG1lYXN1cmVzKCkKKCkgPT4KICBnZXQgZGltZW5zaW9ucygpCiAgc2lnbmFsTWFwKCkKKFtuYW1lLCBzaWduYWxdKSA9PgogIGNoaWxkID0+CihbY2hpbGQsIGdlb21ldHJ5XSkgPT4KKFtjaGlsZCwgZ2VvbWV0cnldKSA9PgogIGdldExheWVyKGlkKQogIGdldFNoZWV0KGlkKQogIGdldExpYnJhcnkobmFtZSkKICBlID0+CkVhZ2xlRG9jdW1lbnQAAAAAAAAAAGEEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					204,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1867,
								1871
							],
							[
								1930,
								1934
							],
							[
								1970,
								2000
							],
							[
								2043,
								2064
							],
							[
								2213,
								2239
							],
							[
								2397,
								2416
							],
							[
								2744,
								2772
							],
							[
								3062,
								3070
							],
							[
								3071,
								3085
							],
							[
								3167,
								3177
							],
							[
								3239,
								3287
							],
							[
								3401,
								3410
							],
							[
								3520,
								3542
							],
							[
								4001,
								4023
							],
							[
								4418,
								4436
							],
							[
								4535,
								4553
							],
							[
								4658,
								4684
							],
							[
								4820,
								4824
							],
							[
								4942,
								4958
							],
							[
								5450,
								5469
							],
							[
								5533,
								5554
							],
							[
								5888,
								5893
							],
							[
								5968,
								5983
							],
							[
								6068,
								6076
							],
							[
								6117,
								6125
							],
							[
								6496,
								6569
							],
							[
								6573,
								6581
							],
							[
								6678,
								6708
							],
							[
								6737,
								6742
							],
							[
								6775,
								6782
							],
							[
								6811,
								6839
							],
							[
								7176,
								7183
							],
							[
								7202,
								7225
							],
							[
								7255,
								7262
							],
							[
								7293,
								7301
							],
							[
								7339,
								7346
							],
							[
								7546,
								7559
							],
							[
								7739,
								7782
							],
							[
								7815,
								7824
							],
							[
								7885,
								7889
							],
							[
								7991,
								7995
							],
							[
								8031,
								8045
							],
							[
								8157,
								8185
							],
							[
								8390,
								8415
							],
							[
								8513,
								8537
							],
							[
								8610,
								8614
							],
							[
								8732,
								8736
							],
							[
								8800,
								8814
							],
							[
								8870,
								8879
							],
							[
								9177,
								9191
							],
							[
								9314,
								9349
							],
							[
								9438,
								9443
							],
							[
								9566,
								9578
							],
							[
								9631,
								9656
							],
							[
								9705,
								9716
							],
							[
								9756,
								9767
							],
							[
								9905,
								9916
							],
							[
								10003,
								10016
							],
							[
								10097,
								10129
							],
							[
								10367,
								10396
							],
							[
								10407,
								10422
							],
							[
								10484,
								10503
							],
							[
								10711,
								10750
							],
							[
								10815,
								10855
							],
							[
								10938,
								10982
							],
							[
								11064,
								11103
							],
							[
								11165,
								11203
							],
							[
								11289,
								11317
							],
							[
								11380,
								11407
							],
							[
								11958,
								11984
							],
							[
								12251,
								12258
							],
							[
								14174,
								14232
							],
							[
								15268,
								15275
							],
							[
								15339,
								15346
							],
							[
								15356,
								15367
							],
							[
								15408,
								15434
							],
							[
								15550,
								15564
							],
							[
								15861,
								15880
							],
							[
								15907,
								15914
							],
							[
								16002,
								16032
							],
							[
								16098,
								16138
							],
							[
								16314,
								16365
							],
							[
								17354,
								17361
							],
							[
								17768,
								17788
							],
							[
								17964,
								18018
							],
							[
								18207,
								18219
							],
							[
								18247,
								18259
							],
							[
								18874,
								18934
							],
							[
								19545,
								19600
							],
							[
								19696,
								19708
							],
							[
								19713,
								19743
							],
							[
								20024,
								20046
							],
							[
								20092,
								20115
							],
							[
								20187,
								20202
							],
							[
								20337,
								20353
							],
							[
								20757,
								20770
							],
							[
								20895,
								20914
							],
							[
								20966,
								20974
							],
							[
								21031,
								21046
							],
							[
								21205,
								21217
							],
							[
								21562,
								21576
							],
							[
								21676,
								21693
							],
							[
								21920,
								21942
							],
							[
								22059,
								22084
							],
							[
								22184,
								22201
							],
							[
								22256,
								22260
							],
							[
								22348,
								22352
							],
							[
								22404,
								22428
							],
							[
								22544,
								22584
							],
							[
								22645,
								22666
							],
							[
								22950,
								22982
							],
							[
								23466,
								23481
							],
							[
								23592,
								23617
							],
							[
								23786,
								23821
							],
							[
								24041,
								24048
							],
							[
								24137,
								24144
							],
							[
								24173,
								24182
							],
							[
								24219,
								24228
							],
							[
								24278,
								24286
							],
							[
								24328,
								24352
							],
							[
								24448,
								24464
							],
							[
								24500,
								24540
							],
							[
								24838,
								24881
							],
							[
								25824,
								25835
							],
							[
								26580,
								26630
							],
							[
								26652,
								26678
							],
							[
								26713,
								26742
							],
							[
								27086,
								27129
							],
							[
								27242,
								27246
							],
							[
								27262,
								27266
							],
							[
								27311,
								27398
							],
							[
								27565,
								27598
							],
							[
								27657,
								27662
							],
							[
								27732,
								27774
							],
							[
								27850,
								27860
							],
							[
								27979,
								28019
							],
							[
								28160,
								28165
							],
							[
								28223,
								28230
							],
							[
								28347,
								28351
							],
							[
								28430,
								28434
							],
							[
								28588,
								28595
							],
							[
								28682,
								28687
							],
							[
								28795,
								28811
							],
							[
								28922,
								28929
							],
							[
								29008,
								29012
							],
							[
								29073,
								29080
							],
							[
								29156,
								29163
							],
							[
								29220,
								29266
							],
							[
								29306,
								29316
							],
							[
								29469,
								29505
							],
							[
								29546,
								29558
							],
							[
								31201,
								31233
							],
							[
								31729,
								31739
							],
							[
								31789,
								31799
							],
							[
								31847,
								31857
							],
							[
								32433,
								32444
							],
							[
								32538,
								32542
							],
							[
								32569,
								32573
							],
							[
								32597,
								32601
							],
							[
								32625,
								32629
							],
							[
								32657,
								32694
							],
							[
								33095,
								33150
							],
							[
								33357,
								33365
							],
							[
								33554,
								33562
							],
							[
								33651,
								33659
							],
							[
								33705,
								33713
							],
							[
								33783,
								33819
							],
							[
								33914,
								33957
							],
							[
								34248,
								34267
							],
							[
								34323,
								34328
							],
							[
								34592,
								34615
							],
							[
								34705,
								34710
							],
							[
								34828,
								34851
							],
							[
								34941,
								34946
							],
							[
								35054,
								35066
							],
							[
								35184,
								35189
							],
							[
								35244,
								35273
							],
							[
								35378,
								35383
							],
							[
								36330,
								36388
							],
							[
								37323,
								37334
							],
							[
								37367,
								37378
							],
							[
								37427,
								37433
							],
							[
								37486,
								37494
							],
							[
								37790,
								37794
							],
							[
								38510,
								38516
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							".debug = (...args) =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							" function nameOrIdPred(name_or_id, pred = n => true)",
							" node =>",
							" node =>",
							" node =>",
							" node =>",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABhBAAAR2V0UHJveHkoZm4gPSAocHJvcCwgdGFyZ2V0KSA9PiBudWxsLCBoYW5kbGVycyA9IHt9KQogIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKQpFYWdsZURvY3VtZW50CiAgZ2V0IHR5cGVOYW1lKCkKICBzdGF0aWMgdHlwZU5hbWUoZmlsZUV4dGVuc2lvbikKICBzdGF0aWMgYmFzZU9mKGZpbGVuYW1lKQogIHN0YXRpYyB0eXBlT2YoZmlsZW5hbWUpCiAgcmVhZEZuID0gZm4gPT4KICBjb25zdHJ1Y3Rvcih4bWxTdHIsIHByb2plY3QsIGZpbGVuYW1lLCB0eXBlLCBmcykKKHJhdywgb3duZXIsIHJlZikgPT4KKGtleSwgdmFsdWUpID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKHIsIGcsIGIpID0+CiAgcGxhaW46ICgpID0+CiAgc2hlZXRzOiAoKSA9PgogIHBhcnRzOiAoKSA9PgogIGxpYnJhcmllczogKCkgPT4KKCkgPT4KICBwbGFpbjogKCkgPT4KICBib2FyZDogKCkgPT4KICBlbGVtZW50czogKCkgPT4KICBsaWJyYXJpZXM6ICgpID0+CiAgc2lnbmFsczogKCkgPT4KICBnZXQgcmF3KCkKICBnZXQgZmlsZW5hbWUoKQogIGdldCBkaXJuYW1lKCkKICBnZXQgYmFzZW5hbWUoKQogIGdldCBjaGFuZ2VzKCkKICBjYWNoZUZpZWxkcygpCiAgc2F2ZVRvKGZpbGUsIG92ZXJ3cml0ZSA9IGZhbHNlLCBmcykKICBpbmRleChwYXRoLCB0cmFuc2Zvcm0gPSBhcmcgPT4gYXJnKQoqZ2V0QWxsKHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZ2V0KHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGxvb2t1cCh4cGF0aCkKKG93bmVyLCByZWYsIHZhbHVlKSA9PgogIGdldEJvdW5kcyhzaGVldE5vID0gMCkKICB2ID0+CiAgc2lnID0+CiAgYyA9PgogIGUgPT4KUmVjdAogIGdldE1lYXN1cmVzKG9wdGlvbnMgPSB7fSkKICBlID0+CiAgZ2V0IG1lYXN1cmVzKCkKKCkgPT4KICBnZXQgZGltZW5zaW9ucygpCiAgc2lnbmFsTWFwKCkKKFtuYW1lLCBzaWduYWxdKSA9PgogIGNoaWxkID0+CihbY2hpbGQsIGdlb21ldHJ5XSkgPT4KKFtjaGlsZCwgZ2VvbWV0cnldKSA9PgogIGdldExheWVyKGlkKQogIGdldFNoZWV0KGlkKQogIGdldExpYnJhcnkobmFtZSkKICBlID0+CkVhZ2xlRG9jdW1lbnQAAAAAAAAAAA8NAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					205,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/cpp.js",
						"symkeys":
						[
							[
								1649,
								1674
							],
							[
								1700,
								1720
							],
							[
								2008,
								2042
							],
							[
								3774,
								3814
							],
							[
								4071,
								4083
							],
							[
								4120,
								4133
							],
							[
								4280,
								4299
							],
							[
								4844,
								4869
							],
							[
								7723,
								7730
							],
							[
								7927,
								7937
							],
							[
								8283,
								8295
							],
							[
								9162,
								9173
							],
							[
								10135,
								10156
							],
							[
								10498,
								10513
							],
							[
								11067,
								11089
							],
							[
								11258,
								11279
							],
							[
								11432,
								11478
							],
							[
								13172,
								13191
							],
							[
								13476,
								13527
							],
							[
								14634,
								14667
							],
							[
								18233,
								18280
							],
							[
								22232,
								22249
							],
							[
								22572,
								22589
							],
							[
								23053,
								23072
							],
							[
								23528,
								23554
							],
							[
								23824,
								23840
							],
							[
								24116,
								24141
							],
							[
								24463,
								24481
							],
							[
								25515,
								25542
							],
							[
								26003,
								26036
							],
							[
								26205,
								26229
							],
							[
								26794,
								26820
							],
							[
								27641,
								27671
							],
							[
								32345,
								32423
							],
							[
								33106,
								33180
							],
							[
								37585,
								37602
							],
							[
								39045,
								39068
							]
						],
						"symlist":
						[
							"function cpp_js(settings)",
							"trim = function(str)",
							"strip_cpp_comments = function(str)",
							"is_string_boundary = function(text, idx)",
							"warn_func(s)",
							"error_func(s)",
							"pragma_func(pragma)",
							".error_func = function(e)",
							"clear()",
							"defined(k)",
							"define(k, v)",
							"undefine(k)",
							"define_multiple(dict)",
							"run(text, name)",
							"error = function(text)",
							"warn = function(text)",
							"process_directive = function(command, elem, i)",
							" function(contents)",
							".completion_func = function(data, lines, new_state)",
							"process_block = function(i, elem)",
							"subs(text, blacklist_in, error, warn, nest_sub)",
							"_set_state(other)",
							"_get_state(other)",
							"_result(arr, state)",
							"_is_identifier(identifier)",
							"_is_macro(macro)",
							"_is_pp_special_token(tok)",
							"_get_macro_info(k)",
							"_remove_sentinels(new_text)",
							"_handle_pragma(text, error, warn)",
							" function(match, pragma)",
							"_concatenate_strings(text)",
							"_handle_ops(text, error, warn)",
							"_subs_simple(text, macro_name, blacklist_in, error, warn, nest_sub, start_idx)",
							"_subs_macro(text, macro_name, blacklist, error, warn, nest_sub, start_idx)",
							"_masked_eval(scr)",
							"_eval(val, error, warn)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KICAuZGVidWcgPSAoLi4uYXJncykgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKQVNUU2hlbGwoLi4uYXJncykKKGEsIHApID0+CihhLCBwKSA9PgooYSwgcCkgPT4KICBnZXQgZmxhZ3MoKQogIHYgPT4KICB2ID0+CiAgZCA9PgogIGwgPT4KQ29tcGlsZShmaWxlLCAuLi5hcmdzKQogIG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQpub2RlID0+Cm5vZGUgPT4Kbm9kZSA9Pgpub2RlID0+CiAgc2VsZWN0KG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0QnlJZE9yTmFtZShuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQogIGdldFR5cGUobmFtZV9vcl9pZCkKbiA9PgogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAALAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					210,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAsBAAAICBjcHBfanMoc2V0dGluZ3MpCiAgdHJpbSA9IGZ1bmN0aW9uKHN0cikKICBzdHJpcF9jcHBfY29tbWVudHMgPSBmdW5jdGlvbihzdHIpCiAgaXNfc3RyaW5nX2JvdW5kYXJ5ID0gZnVuY3Rpb24odGV4dCwgaWR4KQogIHdhcm5fZnVuYyhzKQogIGVycm9yX2Z1bmMocykKICBwcmFnbWFfZnVuYyhwcmFnbWEpCiAgLmVycm9yX2Z1bmMgPSBmdW5jdGlvbihlKQogIGNsZWFyKCkKICBkZWZpbmVkKGspCiAgZGVmaW5lKGssIHYpCiAgdW5kZWZpbmUoaykKICBkZWZpbmVfbXVsdGlwbGUoZGljdCkKICBydW4odGV4dCwgbmFtZSkKICBlcnJvciA9IGZ1bmN0aW9uKHRleHQpCiAgd2FybiA9IGZ1bmN0aW9uKHRleHQpCiAgcHJvY2Vzc19kaXJlY3RpdmUgPSBmdW5jdGlvbihjb21tYW5kLCBlbGVtLCBpKQpmdW5jdGlvbihjb250ZW50cykKICAuY29tcGxldGlvbl9mdW5jID0gZnVuY3Rpb24oZGF0YSwgbGluZXMsIG5ld19zdGF0ZSkKICBwcm9jZXNzX2Jsb2NrID0gZnVuY3Rpb24oaSwgZWxlbSkKICBzdWJzKHRleHQsIGJsYWNrbGlzdF9pbiwgZXJyb3IsIHdhcm4sIG5lc3Rfc3ViKQogIF9zZXRfc3RhdGUob3RoZXIpCiAgX2dldF9zdGF0ZShvdGhlcikKICBfcmVzdWx0KGFyciwgc3RhdGUpCiAgX2lzX2lkZW50aWZpZXIoaWRlbnRpZmllcikKICBfaXNfbWFjcm8obWFjcm8pCiAgX2lzX3BwX3NwZWNpYWxfdG9rZW4odG9rKQogIF9nZXRfbWFjcm9faW5mbyhrKQogIF9yZW1vdmVfc2VudGluZWxzKG5ld190ZXh0KQogIF9oYW5kbGVfcHJhZ21hKHRleHQsIGVycm9yLCB3YXJuKQpmdW5jdGlvbihtYXRjaCwgcHJhZ21hKQogIF9jb25jYXRlbmF0ZV9zdHJpbmdzKHRleHQpCiAgX2hhbmRsZV9vcHModGV4dCwgZXJyb3IsIHdhcm4pCiAgX3N1YnNfc2ltcGxlKHRleHQsIG1hY3JvX25hbWUsIGJsYWNrbGlzdF9pbiwgZXJyb3IsIHdhcm4sIG5lc3Rfc3ViLCBzdGFydF9pZHgpCiAgX3N1YnNfbWFjcm8odGV4dCwgbWFjcm9fbmFtZSwgYmxhY2tsaXN0LCBlcnJvciwgd2FybiwgbmVzdF9zdWIsIHN0YXJ0X2lkeCkKICBfbWFza2VkX2V2YWwoc2NyKQogIF9ldmFsKHZhbCwgZXJyb3IsIHdhcm4pAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgIAAAAAAAAyAgAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					212,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/cpp.js",
						"symkeys":
						[
							[
								1649,
								1674
							],
							[
								1700,
								1720
							],
							[
								2008,
								2042
							],
							[
								3774,
								3814
							],
							[
								4071,
								4083
							],
							[
								4120,
								4133
							],
							[
								4280,
								4299
							],
							[
								4844,
								4869
							],
							[
								7723,
								7730
							],
							[
								7927,
								7937
							],
							[
								8283,
								8295
							],
							[
								9162,
								9173
							],
							[
								10135,
								10156
							],
							[
								10498,
								10513
							],
							[
								11067,
								11089
							],
							[
								11258,
								11279
							],
							[
								11432,
								11478
							],
							[
								13172,
								13191
							],
							[
								13476,
								13527
							],
							[
								14634,
								14667
							],
							[
								18233,
								18280
							],
							[
								22232,
								22249
							],
							[
								22572,
								22589
							],
							[
								23053,
								23072
							],
							[
								23528,
								23554
							],
							[
								23824,
								23840
							],
							[
								24116,
								24141
							],
							[
								24463,
								24481
							],
							[
								25515,
								25542
							],
							[
								26003,
								26036
							],
							[
								26205,
								26229
							],
							[
								26794,
								26820
							],
							[
								27641,
								27671
							],
							[
								32345,
								32423
							],
							[
								33106,
								33180
							],
							[
								37585,
								37602
							],
							[
								39045,
								39068
							]
						],
						"symlist":
						[
							"function cpp_js(settings)",
							"trim = function(str)",
							"strip_cpp_comments = function(str)",
							"is_string_boundary = function(text, idx)",
							"warn_func(s)",
							"error_func(s)",
							"pragma_func(pragma)",
							".error_func = function(e)",
							"clear()",
							"defined(k)",
							"define(k, v)",
							"undefine(k)",
							"define_multiple(dict)",
							"run(text, name)",
							"error = function(text)",
							"warn = function(text)",
							"process_directive = function(command, elem, i)",
							" function(contents)",
							".completion_func = function(data, lines, new_state)",
							"process_block = function(i, elem)",
							"subs(text, blacklist_in, error, warn, nest_sub)",
							"_set_state(other)",
							"_get_state(other)",
							"_result(arr, state)",
							"_is_identifier(identifier)",
							"_is_macro(macro)",
							"_is_pp_special_token(tok)",
							"_get_macro_info(k)",
							"_remove_sentinels(new_text)",
							"_handle_pragma(text, error, warn)",
							" function(match, pragma)",
							"_concatenate_strings(text)",
							"_handle_ops(text, error, warn)",
							"_subs_simple(text, macro_name, blacklist_in, error, warn, nest_sub, start_idx)",
							"_subs_macro(text, macro_name, blacklist, error, warn, nest_sub, start_idx)",
							"_masked_eval(scr)",
							"_eval(val, error, warn)"
						]
					},
					"AQAAAAAAAAAAAAAALAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "import { existsSync, reader, readerSync, readSync, writeSync } from 'fs';\nimport { createServer, getSessions, LLL_INFO, LLL_NOTICE, LLL_USER, LLL_WARN, logLevels, setLog } from 'net';\nimport { kill, setReadHandler, SIGTERM, sleep, ttySetRaw, Worker } from 'os';\nimport { clearInterval, setInterval, setTimeout } from 'timers';\nimport { atexit, bindMethods, btoa, define, keys, filterKeys, getOpt, isObject, lazyProperties, memoize, mod, once, propertyLookup, quote, toString, tryCatch, types, mapWrapper } from 'util';\nimport { List, Table } from './cli-helpers.js';\nimport { DebuggerDispatcher, FindFunctions, GetFunctionName, TrivialSyntaxHighlighter } from './debugger.js';\nimport { DebuggerProtocol } from './debuggerprotocol.js';\nimport { ReadFile, ReadJSON, WriteJSON } from './io-helpers.js';\nimport { consume, map } from './lib/async/helpers.js';\nimport { absolute, basename, extname, relative } from './lib/path.js';\nimport { Repeater } from './lib/repeater/repeater.js';\nimport { Spawn, WNOHANG } from './os-helpers.js';\nimport { F_GETFL, F_SETFL, fcntl, O_NONBLOCK } from './quickjs/qjs-ffi/lib/fcntl.js';\nimport { REPL } from './quickjs/qjs-modules/lib/repl.js';\nimport { Console } from 'console';\nimport { Location } from 'location';\nimport process from 'process';\nimport * as path from 'path';\nimport extendArray from 'extendArray';\nimport { AF_INET, AsyncSocket, IPPROTO_TCP, SOCK_STREAM, SockAddr } from 'sockets';\nimport { err as stderr } from 'std';\nimport { codecs, RPCApi, RPCProxy, RPCObject, RPCFactory, Connection, RPCServer, RPCClient, RPCSocket, RPCConnect, RPCListen } from './quickjs/qjs-net/js/rpc.js';\n\nfunction decorate(decorators, obj, ...args) {\n  if(!Array.isArray(decorators)) decorators = [decorators];\n\n  for(let decorator of decorators)\n    for(let prop of keys(obj))\n      if(typeof obj[prop] == 'function') {\n        let newfn = decorator(obj[prop], obj, prop, ...args);\n        if(obj[prop] !== newfn) obj[prop] = newfn;\n      }\n\n  return obj;\n}\n\nextendArray(Array.prototype);\n\nconst scriptName = (arg = scriptArgs[0]) => basename(arg, extname(arg));\n\nconst children = new Set();\n\natexit(() => {\n  for(let pid of children) {\n    console.log('atexit killing child', pid);\n    kill(pid, SIGTERM);\n  }\n});\n\nObject.assign(globalThis, {\n  codecs,\n  RPCApi,\n  RPCProxy,\n  RPCObject,\n  RPCFactory,\n  Connection,\n  RPCServer,\n  RPCClient,\n  RPCSocket,\n  RPCConnect,\n  RPCListen\n});\n\nconst signalName = n =>\n  'SIG' +\n  [\n    ,\n    'HUP',\n    'INT',\n    'QUIT',\n    'ILL',\n    'TRAP',\n    'ABRT',\n    'BUS',\n    'FPE',\n    'KILL',\n    'USR1',\n    'SEGV',\n    'USR2',\n    'PIPE',\n    'ALRM',\n    'TERM',\n    'STKFLT',\n    'CHLD',\n    'CONT',\n    'STOP',\n    'TSTP',\n    'TTIN',\n    'TTOU',\n    'URG',\n    'XCPU',\n    'XFSZ',\n    'VTALRM',\n    'PROF',\n    'WINCH',\n    'IO',\n    'PWR',\n    'SYS'\n  ][n];\n\nfunction checkChildExited(child) {\n  const { exited, termsig, signaled, exitcode } = child;\n\n  return exited ? (signaled ? `signalled ${signalName(termsig)}` : `exitcode ${exitcode}`) : null;\n}\n\nfunction GetLoc(node) {\n  if(node.loc?.start?.line) {\n    const { line, column } = node.loc.start;\n    const [charOffset] = node.range ?? [node.start];\n    return new Location(line, column + 1, charOffset);\n  }\n}\n\nasync function LoadAST(source) {\n  if(!existsSync(source)) return null;\n  const child = Spawn('meriyah', ['-l', source], { block: false, stdio: ['inherit', 'pipe', 'inherit'] });\n\n  let s = '';\n  for(let chunk of readerSync(child.stdout)) s += toString(chunk);\n\n  const status = child.wait();\n  const { length } = s;\n  //console.log('loadAST', { source, length, status });\n\n  return JSON.parse(s);\n}\n\nfunction StartREPL(prefix = scriptName(), suffix = '') {\n  let repl = new REPL(`\\x1b[38;5;165m${prefix} \\x1b[38;5;39m${suffix}\\x1b[0m`, false);\n  repl.historyLoad(null);\n  let { log } = console;\n\n  console.log = repl.printFunction(log.bind(console, console.config({ compact: 2 })));\n  let { show } = repl;\n\n  repl.show = arg => {\n    if(isObject(arg)) {\n      if(arg[Symbol.for('print')]) return arg.toString ? arg.toString() : arg + '';\n\n      //if(Array.isArray(arg) && typeof arg[0] == 'object' &&  Array.isArray(arg[0])) {\n      if(Array.isArray(arg) && typeof arg[0] == 'object') {\n        if(!Array.isArray(arg[0]) && (arg.length !== 2 || !Array.isArray(arg[1]))) {\n          if(arg.length == 2 && Array.isArray(arg[1])) {\n            const [event, stack] = arg;\n            if(['type', 'reason'].every(k => k in event)) if (['id', 'name', 'line'].every(k => k in stack[0])) return [List([event]), List(stack)];\n          }\n\n          if(\n            arg.length >= 2 /*Object.keys(arg[0]).some(key => arg.every(a => key in a)) ||*/ &&\n            arg.map(item => Object.keys(item)).reduce((acc, keys, i) => (i == 0 ? keys : acc ? keys.equal(acc) && keys : false))\n          )\n            return repl.show(Table(arg));\n        }\n      }\n    }\n\n    return show.call(repl, arg);\n  };\n\n  repl.loadSaveOptions();\n  //repl.printPromise = () => {};\n  repl.run();\n  return repl;\n}\n\nexport function StartDebugger(args, connect, address) {\n  let env = {};\n\n  address ??= '127.0.0.1:9901';\n\n  env['DISPLAY'] ??= ':0.0';\n\n  if(connect) env['QUICKJS_DEBUG_ADDRESS'] = address;\n  else env['QUICKJS_DEBUG_LISTEN_ADDRESS'] = address;\n\n  const child = Spawn('qjsm', args, { block: false, env: { ...process.env, ...env }, stdio: ['pipe', 'pipe', 'pipe'] });\n\n  if(!connect) listeners[address] = child;\n\n  if(process.env.DEBUG) console.log('StartDebugger', { args, connect, address, env }, child);\n\n  children.add(child.pid);\n\n  return define(child, { args });\n}\n\nexport async function ConnectDebugger(address, skipToMain = true, callback) {\n  const addr = new SockAddr(AF_INET, ...address.split(':'));\n  const sock = new AsyncSocket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n\n  const ret = await sock.connect(addr);\n\n  if(typeof callback != 'function' && typeof callback == 'object') callback = callback.onMessage;\n\n  if(process.env.DEBUG) console.log('ConnectDebugger', { address, skipToMain, sock });\n\n  if(ret >= 0) {\n    if(process.env.DEBUG) console.log('Connected', +sock, 'to', sock.remote);\n    sockets.add(sock);\n  }\n\n  const dbg = this ?? {};\n\n  define(dbg, {\n    sock,\n    addr,\n    async process(callback) {\n      if(process.env.DEBUG) console.log('Debugger process()', callback);\n\n      let ret,\n        lenBuf = new ArrayBuffer(9);\n\n      try {\n        while((ret = await sock.recv(lenBuf, 0, 9)) > 0) {\n          let len = parseInt(toString(lenBuf, 0, ret), 16);\n\n          let dataBuf = new ArrayBuffer(len);\n          let offset = 0;\n\n          while(offset < len) {\n            ret = await sock.recv(dataBuf, offset, len - offset);\n\n            if(ret <= 0) {\n              sock.close();\n              break;\n            }\n            offset += ret;\n          }\n          if(ret <= 0) break;\n\n          let s = toString(dataBuf);\n          let obj = JSON.parse(s);\n\n          if(process.env.DEBUG) console.log('process() read:',obj);\n\n\n          const funcName = '\\x1b[38;5;208mPROCESS\\x1b[0m';\n\n          if(process.env.DEBUG) console.log(funcName + ' \\x1b[38;5;196mbefore callback\\x1b[0m', obj);\n          let result = callback(obj);\n          await result;\n        }\n      } catch(error) {\n        console.log('Socket error:', error.message + '\\n' + error.stack);\n      } finally {\n        sock.close();\n        return ret;\n      }\n    },\n    async sendMessage(msg) {\n      if(typeof msg != 'string') msg = JSON.stringify(msg);\n      const ret = sock.send(msg.length.toString(16).padStart(8, '0') + '\\n' + msg);\n\n      if(process.env.DEBUG) console.log('\\x1b[38;5;33mSEND\\x1b[0m[' + sock.fd + '] (' + ret + ') ' + msg);\n\n      return ret;\n    }\n  });\n\n  if(process.env.DEBUG) console.log('ConnectDebugger', console.config({ depth: 1, compact: 0 }), dbg);\n\n  LaunchDebugger(dbg, skipToMain);\n\n  return dbg;\n}\n\nfunction LaunchDebugger(dbg, skipToMain = true) {\n  if(process.env.DEBUG) console.log('LaunchDebugger', console.config({ depth: 1, compact: 0 }), { dbg, skipToMain });\n\n  if(skipToMain) {\n    dbg.onstopped = once(async (...args) => {\n      let st = await dispatch.stackTrace();\n\n      script ??= st[0].filename;\n\n      let fns = await files[script].match(/main$/gi);\n      console.log('matched /main$/gi', fns /*.map(({ name }) => name)*/);\n\n      dbg.onstopped = null;\n      let resp;\n      console.log('breakpoints()', console.config({ compact: 0 }), { script, fns });\n      resp = await dispatch.breakpoints(script, fns);\n      console.log('breakpoints() response:', console.config({ compact: 0 }), resp);\n\n      setTimeout(async () => {\n        resp = await dispatch.continue();\n        console.log('continue() response:', console.config({ compact: 0 }), resp);\n      }, 100);\n    });\n  }\n  //dbg.onstopped ??= OnStopped;\n  let dispatch = (dbg.dispatch = globalThis.dispatch = new DebuggerDispatcher(dbg));\n\n  Object.assign(globalThis, bindMethods(dispatch, DebuggerDispatcher.prototype, {}));\n  Object.assign(globalThis, {\n    GetLoc,\n    PrintStackFrame,\n    PrintStack,\n    async value(name) {\n      let stack = await dispatch.stackTrace();\n\n      for(let frame of stack) {\n        let { local } = await dispatch.variables(frame.id, 1);\n\n        let v = local.find(v => v.name == name);\n\n        return v;\n      }\n    }\n  });\n\n  return dbg;\n}\n\nasync function PrintStackFrame(frame) {\n  if(frame === undefined) frame = 0;\n\n  let { id, name, filename, line } = frame;\n  let params;\n\n  try {\n    params = (await files[filename].functions).find(f => f.name == name)?.params;\n  } catch(e) {}\n\n  if(params) name += `(${params.join(', ')})`;\n  let loc = line !== undefined ? new Location(filename, line) : undefined;\n  let code = line !== undefined ? files[filename].line(line - 1) : undefined;\n  return [`#${id}`, ` at ${name.padEnd(30)}`, loc ? ' in ' + loc : ''].concat(code ? [code] : []);\n}\n\nasync function PrintStack(stack) {\n  stack ??= await stackTrace();\n  let frames = [];\n  for(let frame of stack) {\n    frames.push(await PrintStackFrame(frame));\n  }\n  return List(frames);\n}\n\ndecorate(\n  (member, obj, prop) =>\n    ({\n      async breakpoints(...args) {\n        if(!(typeof args[0] == 'string')) args.unshift(globalThis.script);\n\n        let [file, breakpoints] = args;\n        \n        file = absolute(file);\n        \n        if(types.isPromise(breakpoints)) breakpoints = await breakpoints;\n        if(Array.isArray(breakpoints)) breakpoints = breakpoints.map(b => filterKeys(b, ['name', 'line', 'column']));\n        \n        let ret = await member.call(this, file, breakpoints);\n        \n        if(ret.path) ret.path = relative(ret.path);\n        if(ret?.breakpoints?.path) ret.breakpoints.path = relative(ret.breakpoints.path);\n        \n       // console.log('breakpoints =', ret);\n\n        return ret;\n      },\n      async stackTrace(frame) {\n        let ret = (await member.call(this, frame)).map(frame => (typeof frame.filename == 'string' && (frame.filename = relative(absolute(frame.filename))), frame));\n        console.log('stackTrace =', ret);\n        return ret;\n      },\n      async scopes(n) {\n        let stack = await this.stackTrace();\n        if(n >= stack.length) return null;\n        let scopes = [];\n\n        for(let scope of await member.call(this, n)) {\n          const variables = await this.variables(scope.reference);\n          scope.variables = variables.length;\n          scopes.push(scope);\n        }\n\n        return scopes;\n      },\n      async waitRun() {\n        const [event, stack] = await member.call(this);\n        define(globalThis, { event, stack });\n        //console.log('waitRun', { event, stack });\n\n        repl.printStatus((await PrintStackFrame(stack[0])).join(' ') + '\\n');\n\n        const { filename, line } = stack[0];\n\n        define(globalThis, { file: filename, line });\n        return [event, stack];\n      },\n      async variables(n, depth = 0) {\n        const list = await member.call(this, n);\n        const ret = [];\n        const add = item => (item.variablesReference === 0 && delete item.variablesReference, ret.push(item));\n\n        for(let item of list) {\n          add(item);\n\n          if(depth > 0) {\n            if(item.variablesReference > 0) {\n              let children = await this.variables(item.variablesReference, depth - 1);\n\n              for(let child of children) {\n                if(!isNaN(child.name)) child.name = '  [' + child.name + ']';\n                else child.name = '  .' + child.name;\n\n                if(child.value?.startsWith('function ')) continue;\n                add(child);\n              }\n            }\n          }\n        }\n\n        return define(ret, {\n          [Symbol.for('print')]: true,\n          toString() {\n            return Table(this, ['name', 'value', 'type', 'variablesReference']);\n          }\n        });\n      }\n    }[prop] || member),\n\n  DebuggerDispatcher.prototype\n);\n\nconst mkaddr = (\n  (port = 8777) =>\n  () =>\n    `127.0.0.1:${port--}`\n)();\n\nasync function NewDebugger(args, skipToMain = false, address) {\n  address ??= mkaddr();\n\n  const child = (globalThis.child = globalThis.listeners[address] || StartDebugger(args, false, address));\n  let dispatch;\n\n  globalThis.script = args[0];\n\n  sleep(500);\n\n  const dbg = this ?? {};\n\n  define(dbg, {\n    child,\n    args,\n    kill: () => (children.delete(child.pid), kill(child.pid, SIGTERM))\n  });\n\n  await ConnectDebugger.call(dbg, address, skipToMain);\n\n  return dbg; //dispatch;\n}\n\nasync function OnStopped(msg) {\n  const st = (globalThis.stack = await dispatch.stackTrace());\n  let [top] = st;\n  let { id, name, filename, line } = top;\n  repl.printStatus(`#${id} ${name}@${filename}:${line}  ` + files[filename].line(line));\n}\n\nfunction URLWorker(script) {\n  const dataURL = s => `data:application/javascript;charset=utf-8;base64,` + btoa(s).replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', '');\n\n  const url = dataURL(script);\n  const w = new Worker(url);\n\n  return define(new Repeater((push, stop) => (w.onmessage = push)), {\n    postMessage: msg => w.postMessage(msg)\n  });\n}\n\nfunction main(...args) {\n  const base = scriptName().replace(/\\.[a-z]*$/, '');\n\n  const config = ReadJSON(`.${base}-config`) ?? {};\n\n  globalThis.console = new Console(stderr, {\n    inspectOptions: { depth: Infinity, compact: 1, maxArrayLength: Infinity, customInspect: true }\n  });\n\n  let params = getOpt(\n    {\n      verbose: [false, (a, v) => (v | 0) + 1, 'v'],\n      listen: [false, null, 'l'],\n      connect: [false, null, 'c'],\n      client: [false, null, 'C'],\n      server: [false, null, 'S'],\n      debug: [false, null, 'x'],\n      tls: [false, (v, pv, o) => ((o.tls = true), true), 't'],\n      'no-tls': [false, (v, pv, o) => ((o.tls = false), true), 'T'],\n      address: [true, null, 'a'],\n      port: [true, null, 'p'],\n      quiet: [false, null, 'q'],\n      'ssl-cert': [true, null],\n      'ssl-private-key': [true, null],\n      'ssl-ca': [true, null],\n      '@': 'address,port'\n    },\n    args\n  );\n  if(params['no-tls'] === true) params.tls = false;\n  const {\n    address = '0.0.0.0',\n    port = 8999,\n    'ssl-cert': sslCert = 'localhost.crt',\n    'ssl-private-key': sslPrivateKey = 'localhost.key',\n    'ssl-ca': sslCA = '/etc/ssl/certs/ca-certificates.crt',\n    quiet = false,\n    debug = false,\n    tls = true\n  } = params;\n\n  const listen = params.connect && !params.listen ? false : true;\n\n  let name = scriptArgs[0];\n  name = name\n    .replace(/.*\\//, '')\n    .replace(/-/g, ' ')\n    .replace(/\\.[^\\/.]*$/, '');\n\n  let [prefix, suffix] = name.split(' ');\n\n  let protocol = new WeakMap();\n  let ws2dbg = (globalThis.ws2dbg = mapWrapper(new WeakMap()));\n  let dbg2ws = (globalThis.dbg2ws = mapWrapper(new WeakMap()));\n\n  let sockets = (globalThis.sockets ??= new Set());\n  //console.log(name, params['@']);\n\n  function createWS(url, callbacks, listen) {\n    //console.log('createWS', { url, callbacks, listen });\n\n    setLog(\n      quiet ? 0 : LLL_USER | (((debug > 1 ? LLL_INFO : LLL_WARN) << 1) - 1),\n      quiet || params.debug <= 1\n        ? () => {}\n        : (level, str) => {\n            if(/BIND_PROTOCOL|DROP_PROTOCOL|CHECK_ACCESS_RIGHTS|ADD_HEADERS/.test(str)) return;\n            console.log(logLevels[level].padEnd(10), str.trim());\n          }\n    );\n\n    let options;\n    let dbg;\n    console.log('createWS', { url });\n    return createServer(\n      url,\n      (options = {\n        tls: params.tls,\n        sslCert,\n        sslPrivateKey,\n        sslCA,\n        mimetypes: [\n          ['.svgz', 'application/gzip'],\n          ['.mjs', 'application/javascript'],\n          ['.es', 'application/javascript'],\n          ['.wasm', 'application/octet-stream'],\n          ['.eot', 'application/vnd.ms-fontobject'],\n          ['.lib', 'application/x-archive'],\n          ['.bz2', 'application/x-bzip2'],\n          ['.gitignore', 'text/plain'],\n          ['.cmake', 'text/plain'],\n          ['.hex', 'text/plain'],\n          ['.md', 'text/plain'],\n          ['.pbxproj', 'text/plain'],\n          ['.wat', 'text/plain'],\n          ['.c', 'text/x-c'],\n          ['.h', 'text/x-c'],\n          ['.cpp', 'text/x-c++'],\n          ['.hpp', 'text/x-c++'],\n          ['.filters', 'text/xml'],\n          ['.plist', 'text/xml'],\n          ['.storyboard', 'text/xml'],\n          ['.vcxproj', 'text/xml'],\n          ['.bat', 'text/x-msdos-batch'],\n          ['.mm', 'text/x-objective-c'],\n          ['.m', 'text/x-objective-c'],\n          ['.sh', 'text/x-shellscript']\n        ],\n        mounts: [\n          ['/proxy', 'ipv4:127.0.0.1:22', null, 'proxy-ws-raw-ws'],\n          ['/lws', 'https://www.google.ch/', null, ''],\n          ['/', '.', 'debugger.html'],\n          function* config(req, res) {\n            const { body, headers } = req;\n            console.log('/config', { req, res });\n            console.log('*config', { body, headers });\n            yield '{}';\n          },\n          function* files(req, res) {\n            const { body, headers } = req;\n            yield fs\n              .readdirSync('.')\n              .sort()\n              .map(f => f + '\\n')\n              .join('');\n          }\n        ],\n        ...url,\n        ...callbacks,\n        block: false,\n        onConnect(ws, req) {\n          console.log('onConnect', { ws, req }, req && req.headers);\n\n          Object.defineProperties(ws, {\n            sendMessage: {\n              value: async function sendMessage(msg) {\n                let ret = await this.send(JSON.stringify(msg));\n                console.log(`ws.sendMessage(`, console.config({ compact: 1 }), msg, `) = ${ret}`);\n                return ret;\n              },\n              enumerable: false\n            },\n            dbg: { value: null, writable: true, enumerable: false }\n          });\n\n          sockets.add(ws);\n        },\n        onClose(ws) {\n          console.log('onClose', { ws, dbg });\n          dbg?.close();\n\n          protocol.delete(ws);\n          sockets.delete(ws);\n        },\n        onError(ws) {\n          console.log('onError', ws);\n        },\n        onRequest(req, resp) {\n          const { method, headers } = req;\n          //console.log('\\x1b[38;5;33monRequest\\x1b[0m [\\n  ', req, ',\\n  ', resp, '\\n]');\n          const { body, url } = resp;\n\n          const file = url.path.slice(1);\n          const dir = file.replace(/\\/[^\\/]*$/g, '');\n          console.log('\\x1b[38;5;33monRequest\\x1b[0m', { file, dir, body });\n\n          if(file.endsWith('.js') && resp.body) {\n            //console.log('onRequest', { file, dir });\n            const re = /^(\\s*(im|ex)port[^\\n]*from ['\"])([^./'\"]*)(['\"]\\s*;[\\t ]*\\n?)/gm;\n\n            resp.body = body.replaceAll(re, (match, p1, p0, p2, p3, offset) => {\n              if(!/[\\/\\.]/.test(p2)) {\n                let fname = `${p2}.js`;\n\n                if(!existsSync(dir + '/' + fname)) return `/* ${match} */`;\n\n                match = [p1, './' + fname, p3].join('');\n\n                //console.log('args', { match, p1, p2, p3, offset });\n              }\n              return match;\n            });\n          }\n\n          return resp;\n        },\n        onMessage(ws, data) {\n          dbg = ws2dbg(ws);\n\n          // showSessions();\n\n          handleCommand(ws, data);\n\n          async function handleCommand(ws, data) {\n            let obj = JSON.parse(data);\n\n            console.log('onMessage(x)', obj);\n\n            const { command, ...rest } = obj;\n            // console.log('onMessage', command, rest);\n            const { connect = true, address = '127.0.0.1:' + Math.round(Math.random() * (65535 - 1024)) + 1024, args = [] } = rest;\n\n            switch (obj.type ?? command) {\n              case 'start': {\n                dbg = globalThis.dbg = { child: StartDebugger(args, connect, address) };\n\n                ws2dbg(ws, dbg);\n                dbg2ws(dbg, ws);\n\n                const [stdin, stdout, stderr] = child.stdio;\n                for(let fd of [stdout, stderr]) {\n                  let flags = fcntl(fd, F_GETFL);\n                  flags |= O_NONBLOCK;\n                  fcntl(fd, F_SETFL, flags);\n                }\n\n                console.log('stdout flags', fcntl(stdout, F_GETFL) & O_NONBLOCK, 'O_NONBLOCK=', O_NONBLOCK);\n\n                const forward = (fd, name) =>\n                  consume(reader(fd), buf => {\n                    let data = toString(buf.slice(0, r));\n                    //console.log(`read(${fd}, buf) = ${r} (${quote(data, \"'\")})`);\n\n                    ws.sendMessage({\n                      type: 'output',\n                      channel: name,\n                      data\n                    });\n                  });\n                forward(stdout, 'stdout');\n                forward(stderr, 'stderr');\n                define(globalThis, { stdout, stderr, reader });\n\n                sleep(1000);\n\n                let tid, exited;\n\n                tid = setInterval(() => {\n                  let pid = child.wait(WNOHANG);\n\n                  if((exited = checkChildExited(child))) {\n                    ws.sendMessage({\n                      type: 'error',\n                      command: 'start',\n                      message: `child process ${pid} ${exited}`\n                    });\n                    clearInterval(tid);\n                  }\n                }, 1000);\n\n                let pid = child.wait(WNOHANG);\n\n                if((exited = checkChildExited(child))) {\n                  ws.sendMessage({\n                    type: 'error',\n                    command: 'start',\n                    message: `unable to start debugger: ${exited}`\n                  });\n                  break;\n                }\n\n                const cwd = process.cwd();\n                ws.sendMessage({\n                  type: 'response',\n                  response: {\n                    command: 'start',\n                    args,\n                    cwd,\n                    address\n                  }\n                });\n\n                break;\n              }\n\n              case 'connect': {\n                dbg = globalThis.dbg = await ConnectDebugger.call(globalThis.dbg, address, false, (dbg, sock) => {\n                  console.log('wait(WNOHANG) =', child.wait(WNOHANG));\n                  console.log('child', child);\n                });\n\n                ws2dbg(ws, dbg);\n                dbg2ws(dbg, ws);\n\n                console.log('connect command', { ws, dbg });\n                sockets.add(dbg.sock);\n\n                const cwd = process.cwd();\n                let connected;\n\n                console.log('dbg', dbg);\n                break;\n              }\n\n              case 'file': {\n                const { path } = rest;\n                const data = ReadFile(path, 'utf-8');\n                //ws.send(JSON.stringify({ type: 'response', response: { command: 'file', path, data } }));\n\n                const lexer = new Lexer(data, path);\n                console.log('lexer', lexer);\n                const lines = [];\n\n                for(;;) {\n                  const { pos, size } = lexer;\n                  console.log('lexer', { pos, size });\n                  let result = lexer.next();\n                  if(result.done) break;\n                  const token = result.value;\n                  console.log('token', {\n                    lexeme: token.lexeme,\n                    id: token.id,\n                    loc: token.loc + ''\n                  });\n                  const { type, id, lexeme, loc } = token;\n                  const { line, column, file } = loc;\n                  //console.log('token', {lexeme,id,line});\n\n                  if(!lines[line - 1]) lines.push([]);\n                  let a = lines[line - 1];\n                  a.push([lexeme, id]);\n                }\n                console.log('lines', lines);\n                break;\n              }\n\n              case 'request': {\n                const { request } = obj;\n                const { request_seq, command, args } = request;\n\n                let response = await dbg.dispatch.sendRequest(command, args, request_seq);\n\n                if(command == 'stackTrace') {\n                  response.body = response.body.map(frame => {\n                    if(frame.filename) frame.filename = path.relative(frame.filename);\n\n                    return frame;\n                  });\n                }\n                console.log('Request', { request, response });\n\n                ws.sendMessage(response);\n\n                break;\n              }\n\n              default: {\n                /*  console.log('send to debugger', { obj });\n                dbg.sendMessage(obj);*/\n                const dbg = ws2dbg(ws);\n                const { pid } = dbg.child;\n                console.log('send to debugger', { pid, obj });\n\n                dbg.sendMessage(obj);\n\n                //DebuggerProtocol.send(dbg, data);\n                break;\n              }\n            }\n          }\n        },\n        ...(url && url.host ? url : {})\n      })\n    );\n  }\n\n  console.log('XX');\n\n  delete globalThis.DEBUG;\n\n  let inputBuf = new ArrayBuffer(10);\n  ttySetRaw(0);\n\n  setReadHandler(0, () => {\n    let r = readSync(0, inputBuf, 0, inputBuf.byteLength);\n\n    if(r > 0) {\n      let a = new Uint8Array(inputBuf.slice(0, r));\n\n      //console.log('a', a);\n\n      for(let i = 0; i < a.length; i++) if(a[i] == 13) a[i] = 10;\n\n      if(a.length == 1 && a[0] == 127) a = new Uint8Array([8, 0x20, 8]);\n\n      if(a.length == 1 && a[0] == 27) showSessions();\n      else writeSync(1, a.buffer);\n    }\n  });\n\n  function showSessions() {\n    let sessions = getSessions();\n    console.log('sessions', console.config({ maxArrayLength: Infinity, depth: 4, customInspect: true, compact: 0 }), sessions);\n  }\n\n  //setInterval(() => console.log('interval'), 5000);\n\n  globalThis.server = createWS(`wss://${address}:8998/ws`, {}, true);\n\n  define(globalThis, {\n    get connections() {\n      return [...globalThis.sockets].map(ws => ws2dbg(ws));\n    },\n    get socklist() {\n      return [...globalThis.sockets];\n    },\n    net: { setLog, LLL_USER, LLL_NOTICE, LLL_WARN, createServer },\n    TrivialSyntaxHighlighter,\n    NewDebugger,\n    LaunchDebugger,\n    StartDebugger,\n    ConnectDebugger,\n    DebuggerDispatcher,\n    DebuggerProtocol,\n    GetFunctionName,\n    FindFunctions,\n    LoadAST,\n    Table,\n    List,\n    get file() {\n      return this.files[this.script];\n    },\n    files: propertyLookup(\n      (globalThis.fileCache = {}),\n      memoize((file, source) => {\n        source ??= tryCatch(\n          () => TrivialSyntaxHighlighter(ReadFile(file)),\n          s => s,\n          () => ReadFile(file)\n        );\n        return define(\n          {\n            source,\n            indexlist: [...source.matchAll(/^[^\\n]*/gm)].map(m => m.index)\n          },\n          lazyProperties(\n            {\n              line(i, j) {\n                if(i === undefined) return '';\n                const { source, indexlist } = this;\n                j ??= i + 1;\n                const m = mod(indexlist.length - 1);\n                const [start, end] = [indexlist[m(i)], indexlist[m(j)]];\n                let line = source.slice(start, (end ?? 0) - 1);\n\n                if([...line.matchAll(/\\x1b([^A-Za-z]*[A-Za-z])/g)].last != '\\x1b[0m') line += '\\x1b[0m';\n\n                return line;\n              },\n              match(re) {\n                if(typeof re == 'string') re = new RegExp(re, 'gi');\n\n                return this.functions.then(fns =>\n                  define(\n                    fns.filter(({ name }) => re.test(name)),\n                    { [Symbol.toStringTag]: 'FunctionList', file }\n                  )\n                );\n              }\n            },\n            {\n              // estree: () => ,\n              async functions() {\n                return (globalThis.functionCache = [...FindFunctions((globalThis.ast = await LoadAST(file)))].map(([name, loc, params, expression, path]) =>\n                  define(\n                    {\n                      name,\n                      params,\n                      ...loc,\n                      expression\n                    },\n                    { path }\n                  )\n                ));\n              }\n            },\n            { async: false }\n          )\n        );\n      })\n    ),\n    async repeat(cond, fn, ...args) {\n      let r;\n      if(typeof cond == 'number') {\n        let n = cond;\n        cond = (r, i) => i >= n || r === true;\n      }\n      for(let i = 0; ; i++) {\n        r = await fn(...args);\n\n        if(cond(r, i)) break;\n      }\n      return r;\n    },\n    repl: StartREPL()\n  });\n\n  function quit(why) {\n    console.log(`quit('${why}')`);\n\n    let cfg = { inspectOptions: console.options };\n    WriteJSON(`.${base}-config`, cfg);\n    // repl.cleanup(why);\n  }\n}\n\ntry {\n  main(...scriptArgs.slice(1));\n} catch(error) {\n  console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n} finally {\n  //console.log('SUCCESS');\n}\n",
			"file": "debugger-server.js",
			"file_size": 29755,
			"file_write_time": 133861370719188489,
			"settings":
			{
				"buffer_size": 29794,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					448,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALQpAAAAAAAAtSkAAAAAAAAAAAAAtSkAAAAAAAC9KQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtCkAAAAAAAC0KQAAAAAAAP///////+9/"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BQAAABopAAAAAAAAGykAAAAAAAAAAAAAGykAAAAAAAAbKQAAAAAAAAYAAAByZXR1cm6wKQAAAAAAALApAAAAAAAACAAAACAgICAgICAgGykAAAAAAAAcKQAAAAAAAAAAAAAcKQAAAAAAAB0pAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAICkAAAAAAAAaKQAAAAAAAAAAAAAAAFJA"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAAB0pAAAAAAAAHikAAAAAAAAAAAAAHikAAAAAAAAfKQAAAAAAAAAAAAAfKQAAAAAAACApAAAAAAAAAAAAACApAAAAAAAAISkAAAAAAAAAAAAAISkAAAAAAAAiKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHSkAAAAAAAAdKQAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAALYpAAAAAAAAtykAAAAAAAAAAAAAtykAAAAAAAC/KQAAAAAAAAAAAAC/KQAAAAAAAMApAAAAAAAAAAAAAMApAAAAAAAAyCkAAAAAAAAAAAAAtykAAAAAAAC3KQAAAAAAAAgAAAAgICAgICAgIMApAAAAAAAAwSkAAAAAAAAAAAAAwSkAAAAAAADCKQAAAAAAAAAAAADCKQAAAAAAAMMpAAAAAAAAAAAAAMMpAAAAAAAAxCkAAAAAAAAAAAAAxCkAAAAAAADFKQAAAAAAAAAAAADFKQAAAAAAAMYpAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtikAAAAAAAC2KQAAAAAAAP///////+9/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": " ret;"
					},
					"BQAAAMYpAAAAAAAAxykAAAAAAAAAAAAAxykAAAAAAADIKQAAAAAAAAAAAADIKQAAAAAAAMkpAAAAAAAAAAAAAMkpAAAAAAAAyikAAAAAAAAAAAAAyikAAAAAAADLKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxikAAAAAAADGKQAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DAAAALcpAAAAAAAAuCkAAAAAAAAAAAAAuCkAAAAAAAC5KQAAAAAAAAAAAAC5KQAAAAAAALopAAAAAAAAAAAAALopAAAAAAAAuykAAAAAAAAAAAAAuykAAAAAAAC8KQAAAAAAAAAAAAC8KQAAAAAAAL0pAAAAAAAAAAAAAL0pAAAAAAAAvikAAAAAAAAAAAAAvikAAAAAAAC/KQAAAAAAAAAAAAC/KQAAAAAAAMApAAAAAAAAAAAAAMApAAAAAAAAwSkAAAAAAAAAAAAAwSkAAAAAAADCKQAAAAAAAAAAAADCKQAAAAAAAMMpAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtykAAAAAAAC3KQAAAAAAAAAAAAAAYGVA"
				],
				[
					466,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMMpAAAAAAAAxSkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwykAAAAAAADDKQAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMQpAAAAAAAAxikAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxCkAAAAAAADEKQAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAMUpAAAAAAAAxikAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxSkAAAAAAADFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"left_delete",
					null,
					"AQAAAMUpAAAAAAAAxSkAAAAAAAABAAAAMA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxikAAAAAAADGKQAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "Stack:"
					},
					"BgAAAMUpAAAAAAAAxikAAAAAAAAAAAAAxikAAAAAAADHKQAAAAAAAAAAAADHKQAAAAAAAMgpAAAAAAAAAAAAAMgpAAAAAAAAySkAAAAAAAAAAAAAySkAAAAAAADKKQAAAAAAAAAAAADKKQAAAAAAAMspAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxSkAAAAAAADFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					6,
					"left_delete",
					null,
					"BgAAAMopAAAAAAAAyikAAAAAAAABAAAAOskpAAAAAAAAySkAAAAAAAABAAAAa8gpAAAAAAAAyCkAAAAAAAABAAAAY8cpAAAAAAAAxykAAAAAAAABAAAAYcYpAAAAAAAAxikAAAAAAAABAAAAdMUpAAAAAAAAxSkAAAAAAAABAAAAUw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyykAAAAAAADLKQAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": "stackTrace"
					},
					"CgAAAMUpAAAAAAAAxikAAAAAAAAAAAAAxikAAAAAAADHKQAAAAAAAAAAAADHKQAAAAAAAMgpAAAAAAAAAAAAAMgpAAAAAAAAySkAAAAAAAAAAAAAySkAAAAAAADKKQAAAAAAAAAAAADKKQAAAAAAAMspAAAAAAAAAAAAAMspAAAAAAAAzCkAAAAAAAAAAAAAzCkAAAAAAADNKQAAAAAAAAAAAADNKQAAAAAAAM4pAAAAAAAAAAAAAM4pAAAAAAAAzykAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxSkAAAAAAADFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAM8pAAAAAAAA0CkAAAAAAAAAAAAA0CkAAAAAAADRKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzykAAAAAAADPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAANIpAAAAAAAA0ykAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0ikAAAAAAADSKQAAAAAAAAAAAAAAAPC/"
				],
				[
					476,
					1,
					"left_delete",
					null,
					"AQAAANIpAAAAAAAA0ikAAAAAAAABAAAAbQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0ykAAAAAAADTKQAAAAAAAAAAAAAAAPC/"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": ",ret"
					},
					"BAAAANIpAAAAAAAA0ykAAAAAAAAAAAAA0ykAAAAAAADUKQAAAAAAAAAAAADUKQAAAAAAANUpAAAAAAAAAAAAANUpAAAAAAAA1ikAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0ikAAAAAAADSKQAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANcpAAAAAAAA2CkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1ykAAAAAAADXKQAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"left_delete",
					null,
					"AQAAALYpAAAAAAAAtikAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtykAAAAAAAC3KQAAAAAAAAAAAAAAAHJA"
				],
				[
					496,
					6,
					"left_delete",
					null,
					"BgAAAKsoAAAAAAAAqygAAAAAAAABAAAAfakoAAAAAAAAqSgAAAAAAAACAAAAICCnKAAAAAAAAKcoAAAAAAAAAgAAACAgpSgAAAAAAAClKAAAAAAAAAIAAAAgIKMoAAAAAAAAoygAAAAAAAACAAAAICCiKAAAAAAAAKIoAAAAAAAAAQAAAAo",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArCgAAAAAAACsKAAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					2,
					"left_delete",
					null,
					"AgAAAEgoAAAAAAAASCgAAAAAAAABAAAAe0coAAAAAAAARygAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASSgAAAAAAABJKAAAAAAAAAAAAAAAwIhA"
				],
				[
					500,
					1,
					"left_delete",
					null,
					"AQAAAB8oAAAAAAAAHygAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAICgAAAAAAAAgKAAAAAAAAAAAAAAAYHVA"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB8oAAAAAAAAICgAAAAAAAAAAAAAICgAAAAAAAAoKAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHygAAAAAAAAfKAAAAAAAAAAAAAAAiIRA"
				],
				[
					508,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyC8AAAAAAADILwAAAAAAAAAAAAAAAFJA"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": "ket"
					},
					"BAAAAKAoAAAAAAAAoSgAAAAAAAAAAAAAoSgAAAAAAAChKAAAAAAAAAYAAAByZXR1cm6hKAAAAAAAAKIoAAAAAAAAAAAAAKIoAAAAAAAAoygAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoCgAAAAAAACmKAAAAAAAAAAAAAAAAPC/"
				],
				[
					528,
					3,
					"left_delete",
					null,
					"AwAAAKIoAAAAAAAAoigAAAAAAAABAAAAdKEoAAAAAAAAoSgAAAAAAAABAAAAZaAoAAAAAAAAoCgAAAAAAAABAAAAaw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoygAAAAAAACjKAAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKAoAAAAAAAAoSgAAAAAAAAAAAAAoSgAAAAAAACiKAAAAAAAAAAAAACiKAAAAAAAAKMoAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoCgAAAAAAACgKAAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAAKMoAAAAAAAApCgAAAAAAAAAAAAApCgAAAAAAAClKAAAAAAAAAAAAAClKAAAAAAAAKYoAAAAAAAAAAAAAKYoAAAAAAAApygAAAAAAAAAAAAApygAAAAAAACoKAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoygAAAAAAACjKAAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAANQoAAAAAAAA1SgAAAAAAAAAAAAA1SgAAAAAAADdKAAAAAAAAAAAAADdKAAAAAAAAN4oAAAAAAAAAAAAAN4oAAAAAAAA5igAAAAAAAAAAAAA1SgAAAAAAADVKAAAAAAAAAgAAAAgICAgICAgIN4oAAAAAAAA3ygAAAAAAAAAAAAA3ygAAAAAAADgKAAAAAAAAAAAAADgKAAAAAAAAOEoAAAAAAAAAAAAAOEoAAAAAAAA4igAAAAAAAAAAAAA4igAAAAAAADjKAAAAAAAAAAAAADjKAAAAAAAAOQoAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1CgAAAAAAADUKAAAAAAAAP///////+9/"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": " ret;"
					},
					"BQAAAOQoAAAAAAAA5SgAAAAAAAAAAAAA5SgAAAAAAADmKAAAAAAAAAAAAADmKAAAAAAAAOcoAAAAAAAAAAAAAOcoAAAAAAAA6CgAAAAAAAAAAAAA6CgAAAAAAADpKAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5CgAAAAAAADkKAAAAAAAAAAAAAAAAPC/"
				],
				[
					545,
					1,
					"paste",
					null,
					"AQAAANUoAAAAAAAA/ygAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1SgAAAAAAADVKAAAAAAAAAAAAAAAAPC/"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": "breajk"
					},
					"BwAAAOooAAAAAAAA6ygAAAAAAAAAAAAA6ygAAAAAAADrKAAAAAAAAAoAAABzdGFja1RyYWNl6ygAAAAAAADsKAAAAAAAAAAAAADsKAAAAAAAAO0oAAAAAAAAAAAAAO0oAAAAAAAA7igAAAAAAAAAAAAA7igAAAAAAADvKAAAAAAAAAAAAADvKAAAAAAAAPAoAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6igAAAAAAAD0KAAAAAAAAAAAAAAAAPC/"
				],
				[
					555,
					2,
					"left_delete",
					null,
					"AgAAAO8oAAAAAAAA7ygAAAAAAAABAAAAa+4oAAAAAAAA7igAAAAAAAABAAAAag",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8CgAAAAAAADwKAAAAAAAAAAAAAAAAPC/"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": "kpoints"
					},
					"BwAAAO4oAAAAAAAA7ygAAAAAAAAAAAAA7ygAAAAAAADwKAAAAAAAAAAAAADwKAAAAAAAAPEoAAAAAAAAAAAAAPEoAAAAAAAA8igAAAAAAAAAAAAA8igAAAAAAADzKAAAAAAAAAAAAADzKAAAAAAAAPQoAAAAAAAAAAAAAPQoAAAAAAAA9SgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7igAAAAAAADuKAAAAAAAAAAAAAAAAPC/"
				],
				[
					624,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAP8oAAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAIKQAAAAAAAAAAAAAIKQAAAAAAAAkpAAAAAAAAAAAAAAkpAAAAAAAAESkAAAAAAAAAAAAAACkAAAAAAAAAKQAAAAAAAAgAAAAgICAgICAgIAkpAAAAAAAACikAAAAAAAAAAAAACikAAAAAAAALKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/ygAAAAAAAD/KAAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAspAAAAAAAADSkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACykAAAAAAAALKQAAAAAAAAAAAAAAAPC/"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": "ret.path"
					},
					"CAAAAAwpAAAAAAAADSkAAAAAAAAAAAAADSkAAAAAAAAOKQAAAAAAAAAAAAAOKQAAAAAAAA8pAAAAAAAAAAAAAA8pAAAAAAAAECkAAAAAAAAAAAAAECkAAAAAAAARKQAAAAAAAAAAAAARKQAAAAAAABIpAAAAAAAAAAAAABIpAAAAAAAAEykAAAAAAAAAAAAAEykAAAAAAAAUKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADCkAAAAAAAAMKQAAAAAAAAAAAAAAAPC/"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": "\npr"
					},
					"BgAAABUpAAAAAAAAFikAAAAAAAAAAAAAFikAAAAAAAAeKQAAAAAAAAAAAAAWKQAAAAAAABYpAAAAAAAACAAAACAgICAgICAgFikAAAAAAAAgKQAAAAAAAAAAAAAgKQAAAAAAACEpAAAAAAAAAAAAACEpAAAAAAAAIikAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFSkAAAAAAAAVKQAAAAAAAAAAAAAAAPC/"
				],
				[
					629,
					2,
					"left_delete",
					null,
					"AgAAACEpAAAAAAAAISkAAAAAAAABAAAAciApAAAAAAAAICkAAAAAAAABAAAAcA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIikAAAAAAAAiKQAAAAAAAAAAAAAAAPC/"
				],
				[
					630,
					1,
					"insert",
					{
						"characters": "ret.path=relative"
					},
					"EQAAACApAAAAAAAAISkAAAAAAAAAAAAAISkAAAAAAAAiKQAAAAAAAAAAAAAiKQAAAAAAACMpAAAAAAAAAAAAACMpAAAAAAAAJCkAAAAAAAAAAAAAJCkAAAAAAAAlKQAAAAAAAAAAAAAlKQAAAAAAACYpAAAAAAAAAAAAACYpAAAAAAAAJykAAAAAAAAAAAAAJykAAAAAAAAoKQAAAAAAAAAAAAAoKQAAAAAAACkpAAAAAAAAAAAAACkpAAAAAAAAKikAAAAAAAAAAAAAKikAAAAAAAArKQAAAAAAAAAAAAArKQAAAAAAACwpAAAAAAAAAAAAACwpAAAAAAAALSkAAAAAAAAAAAAALSkAAAAAAAAuKQAAAAAAAAAAAAAuKQAAAAAAAC8pAAAAAAAAAAAAAC8pAAAAAAAAMCkAAAAAAAAAAAAAMCkAAAAAAAAxKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAICkAAAAAAAAgKQAAAAAAAAAAAAAAAPC/"
				],
				[
					631,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADEpAAAAAAAAMykAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMSkAAAAAAAAxKQAAAAAAAAAAAAAAAPC/"
				],
				[
					632,
					1,
					"insert",
					{
						"characters": "ret.path"
					},
					"CAAAADIpAAAAAAAAMykAAAAAAAAAAAAAMykAAAAAAAA0KQAAAAAAAAAAAAA0KQAAAAAAADUpAAAAAAAAAAAAADUpAAAAAAAANikAAAAAAAAAAAAANikAAAAAAAA3KQAAAAAAAAAAAAA3KQAAAAAAADgpAAAAAAAAAAAAADgpAAAAAAAAOSkAAAAAAAAAAAAAOSkAAAAAAAA6KQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMikAAAAAAAAyKQAAAAAAAAAAAAAAAPC/"
				],
				[
					634,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADspAAAAAAAAPCkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOykAAAAAAAA7KQAAAAAAAAAAAAAAAPC/"
				],
				[
					641,
					1,
					"cut",
					null,
					"AQAAAAEpAAAAAAAAASkAAAAAAAA9AAAAICAgICAgICBpZihyZXQucGF0aCkKICAgICAgICAgIHJldC5wYXRoPXJlbGF0aXZlKHJldC5wYXRoKTsKCg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAASkAAAAAAAA+KQAAAAAAAAAAAAAAAAAA"
				],
				[
					643,
					1,
					"paste",
					null,
					"AQAAANUoAAAAAAAAEikAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1SgAAAAAAADVKAAAAAAAAAAAAAAAAAAA"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABIpAAAAAAAAEykAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEikAAAAAAAASKQAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					2,
					"left_delete",
					null,
					"AgAAABIpAAAAAAAAEikAAAAAAAABAAAAChEpAAAAAAAAESkAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEykAAAAAAAATKQAAAAAAAAAAAAAAAPC/"
				],
				[
					693,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANUoAAAAAAAA1igAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1SgAAAAAAADVKAAAAAAAAAAAAAAAAAAA"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAABEpAAAAAAAAEikAAAAAAAAAAAAAEikAAAAAAAAcKQAAAAAAAAAAAAASKQAAAAAAABIpAAAAAAAACgAAACAgICAgICAgICASKQAAAAAAABopAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAESkAAAAAAAARKQAAAAAAAAAAAAAAAPC/"
				],
				[
					753,
					1,
					"cut",
					null,
					"AQAAANUoAAAAAAAA1SgAAAAAAAA9AAAACiAgICAgICAgaWYocmV0LnBhdGgpCiAgICAgICAgICByZXQucGF0aD1yZWxhdGl2ZShyZXQucGF0aCk7Cg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1SgAAAAAAAASKQAAAAAAAAAAAAAAAAAA"
				],
				[
					754,
					2,
					"paste",
					null,
					"AgAAANUoAAAAAAAAEikAAAAAAAAAAAAAEikAAAAAAABPKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1SgAAAAAAADVKAAAAAAAAAAAAAAAAPC/"
				],
				[
					759,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AwAAACIpAAAAAAAAIykAAAAAAAAAAAAAIykAAAAAAAAjKQAAAAAAAAQAAABwYXRoTCkAAAAAAABMKQAAAAAAAAgAAAAgICAgICAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIikAAAAAAAAmKQAAAAAAAAAAAAAAAPC/"
				],
				[
					760,
					2,
					"left_delete",
					null,
					"AgAAACIpAAAAAAAAIikAAAAAAAABAAAAYiEpAAAAAAAAISkAAAAAAAABAAAALg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIykAAAAAAAAjKQAAAAAAAAAAAAAAAPC/"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": "?b"
					},
					"AgAAACEpAAAAAAAAIikAAAAAAAAAAAAAIikAAAAAAAAjKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAISkAAAAAAAAhKQAAAAAAAAAAAAAAAPC/"
				],
				[
					762,
					1,
					"left_delete",
					null,
					"AQAAACIpAAAAAAAAIikAAAAAAAABAAAAYg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIykAAAAAAAAjKQAAAAAAAAAAAAAAAPC/"
				],
				[
					763,
					1,
					"insert",
					{
						"characters": ".breakpoinst?.path"
					},
					"EgAAACIpAAAAAAAAIykAAAAAAAAAAAAAIykAAAAAAAAkKQAAAAAAAAAAAAAkKQAAAAAAACUpAAAAAAAAAAAAACUpAAAAAAAAJikAAAAAAAAAAAAAJikAAAAAAAAnKQAAAAAAAAAAAAAnKQAAAAAAACgpAAAAAAAAAAAAACgpAAAAAAAAKSkAAAAAAAAAAAAAKSkAAAAAAAAqKQAAAAAAAAAAAAAqKQAAAAAAACspAAAAAAAAAAAAACspAAAAAAAALCkAAAAAAAAAAAAALCkAAAAAAAAtKQAAAAAAAAAAAAAtKQAAAAAAAC4pAAAAAAAAAAAAAC4pAAAAAAAALykAAAAAAAAAAAAALykAAAAAAAAwKQAAAAAAAAAAAAAwKQAAAAAAADEpAAAAAAAAAAAAADEpAAAAAAAAMikAAAAAAAAAAAAAMikAAAAAAAAzKQAAAAAAAAAAAAAzKQAAAAAAADQpAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIikAAAAAAAAiKQAAAAAAAAAAAAAAAPC/"
				],
				[
					765,
					1,
					"left_delete",
					null,
					"AQAAACwpAAAAAAAALCkAAAAAAAABAAAAcw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALSkAAAAAAAAtKQAAAAAAAAAAAAAAAPC/"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAC0pAAAAAAAALikAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALSkAAAAAAAAtKQAAAAAAAAAAAAAAAPC/"
				],
				[
					777,
					1,
					"paste",
					null,
					"AQAAAEQpAAAAAAAATykAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARCkAAAAAAABEKQAAAAAAAAAAAAAAAPC/"
				],
				[
					778,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAE8pAAAAAAAAUCkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATykAAAAAAABPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					784,
					1,
					"paste",
					null,
					"AQAAAGIpAAAAAAAAbikAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYikAAAAAAABiKQAAAAAAAAAAAAAAAPC/"
				],
				[
					809,
					1,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AQAAANUnAAAAAAAAmikAAAAAAADMAQAACiAgICAgICAgaWYodHlwZXMuaXNQcm9taXNlKGJyZWFrcG9pbnRzKSkgYnJlYWtwb2ludHMgPSBhd2FpdCBicmVha3BvaW50czsKCiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShicmVha3BvaW50cykpIGJyZWFrcG9pbnRzID0gYnJlYWtwb2ludHMubWFwKGIgPT4gZmlsdGVyS2V5cyhiLCBbJ25hbWUnLCAnbGluZScsICdjb2x1bW4nXSkpOwoKICAgICAgICBsZXQgcmV0PSBhd2FpdCBtZW1iZXIuY2FsbCh0aGlzLCBmaWxlLCBicmVha3BvaW50cyk7CgogICAgICAgIGlmKHJldC5wYXRoKQogICAgICAgICAgcmV0LnBhdGg9cmVsYXRpdmUocmV0LnBhdGgpOwoKICAgICAgICBpZihyZXQ/LmJyZWFrcG9pbnRzPy5wYXRoKQogICAgICAgICAgcmV0LmJyZWFrcG9pbnRzLnBhdGg9cmVsYXRpdmUocmV0LmJyZWFrcG9pbnRzLnBhdGgpOwoKICAgICAgICBjb25zb2xlLmxvZygnYnJlYWtwb2ludHMgPScsIHJldCk7Cg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1ScAAAAAAAChKQAAAAAAAAAAAAAAAPC/"
				],
				[
					810,
					1,
					"delete_blank_lines",
					{
						"surplus": true
					},
					"AQAAANUnAAAAAAAAmikAAAAAAADFAQAAICAgICAgICBpZih0eXBlcy5pc1Byb21pc2UoYnJlYWtwb2ludHMpKSBicmVha3BvaW50cyA9IGF3YWl0IGJyZWFrcG9pbnRzOwogICAgICAgIGlmKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludHMpKSBicmVha3BvaW50cyA9IGJyZWFrcG9pbnRzLm1hcChiID0+IGZpbHRlcktleXMoYiwgWyduYW1lJywgJ2xpbmUnLCAnY29sdW1uJ10pKTsKICAgICAgICBsZXQgcmV0PSBhd2FpdCBtZW1iZXIuY2FsbCh0aGlzLCBmaWxlLCBicmVha3BvaW50cyk7CiAgICAgICAgaWYocmV0LnBhdGgpCiAgICAgICAgICByZXQucGF0aD1yZWxhdGl2ZShyZXQucGF0aCk7CiAgICAgICAgaWYocmV0Py5icmVha3BvaW50cz8ucGF0aCkKICAgICAgICAgIHJldC5icmVha3BvaW50cy5wYXRoPXJlbGF0aXZlKHJldC5icmVha3BvaW50cy5wYXRoKTsKICAgICAgICBjb25zb2xlLmxvZygnYnJlYWtwb2ludHMgPScsIHJldCk7",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1ScAAAAAAACaKQAAAAAAAAAAAAAAAPC/"
				],
				[
					820,
					1,
					"delete_blank_lines",
					{
						"surplus": true
					},
					"AQAAAPIsAAAAAAAApS0AAAAAAAC0AAAACiAgICAgICAgcmVwbC5wcmludFN0YXR1cygoYXdhaXQgUHJpbnRTdGFja0ZyYW1lKHN0YWNrWzBdKSkuam9pbignICcpICsgJ1xuJyk7CgogICAgICAgIGNvbnN0IHsgZmlsZW5hbWUsIGxpbmUgfSA9IHN0YWNrWzBdOwoKICAgICAgICBkZWZpbmUoZ2xvYmFsVGhpcywgeyBmaWxlOiBmaWxlbmFtZSwgbGluZSB9KTsK",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8iwAAAAAAACmLQAAAAAAAAAAAAAAAPC/"
				],
				[
					825,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArS8AAAAAAACtLwAAAAAAAAAAAAAAAPC/"
				],
				[
					844,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALMaAAAAAAAAtBoAAAAAAAAAAAAAtBoAAAAAAAC+GgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsxoAAAAAAACzGgAAAAAAAAAAAAAAAPC/"
				],
				[
					859,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAAYbAAAAAAAABxsAAAAAAAAAAAAABxsAAAAAAAARGwAAAAAAAAAAAAC0GgAAAAAAALQaAAAAAAAACgAAACAgICAgICAgICAHGwAAAAAAAAgbAAAAAAAAAAAAAAgbAAAAAAAAEhsAAAAAAAAAAAAA/RoAAAAAAAD9GgAAAAAAAAoAAAAgICAgICAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABhsAAAAAAAAGGwAAAAAAAAAAAAAAQHRA"
				],
				[
					860,
					1,
					"paste",
					null,
					"AQAAAAgbAAAAAAAAURsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACBsAAAAAAAAIGwAAAAAAAAAAAAAAAPC/"
				],
				[
					865,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AgAAADEbAAAAAAAAMhsAAAAAAAAAAAAAMhsAAAAAAAAyGwAAAAAAAAgAAABEZWJ1Z2dlcg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMRsAAAAAAAA5GwAAAAAAAAAAAAAAAPC/"
				],
				[
					866,
					1,
					"left_delete",
					null,
					"AQAAADEbAAAAAAAAMRsAAAAAAAABAAAARA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMhsAAAAAAAAyGwAAAAAAAAAAAAAAAPC/"
				],
				[
					867,
					1,
					"insert",
					{
						"characters": "process"
					},
					"BwAAADEbAAAAAAAAMhsAAAAAAAAAAAAAMhsAAAAAAAAzGwAAAAAAAAAAAAAzGwAAAAAAADQbAAAAAAAAAAAAADQbAAAAAAAANRsAAAAAAAAAAAAANRsAAAAAAAA2GwAAAAAAAAAAAAA2GwAAAAAAADcbAAAAAAAAAAAAADcbAAAAAAAAOBsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMRsAAAAAAAAxGwAAAAAAAAAAAAAAAPC/"
				],
				[
					868,
					7,
					"left_delete",
					null,
					"BwAAADcbAAAAAAAANxsAAAAAAAABAAAAczYbAAAAAAAANhsAAAAAAAABAAAAczUbAAAAAAAANRsAAAAAAAABAAAAZTQbAAAAAAAANBsAAAAAAAABAAAAYzMbAAAAAAAAMxsAAAAAAAABAAAAbzIbAAAAAAAAMhsAAAAAAAABAAAAcjEbAAAAAAAAMRsAAAAAAAABAAAAcA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOBsAAAAAAAA4GwAAAAAAAAAAAAAAAPC/"
				],
				[
					869,
					1,
					"right_delete",
					null,
					"AQAAADEbAAAAAAAAMRsAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMRsAAAAAAAAxGwAAAAAAAAAAAAAAAPC/"
				],
				[
					872,
					1,
					"insert",
					{
						"characters": " read:"
					},
					"BgAAADobAAAAAAAAOxsAAAAAAAAAAAAAOxsAAAAAAAA8GwAAAAAAAAAAAAA8GwAAAAAAAD0bAAAAAAAAAAAAAD0bAAAAAAAAPhsAAAAAAAAAAAAAPhsAAAAAAAA/GwAAAAAAAAAAAAA/GwAAAAAAAEAbAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOhsAAAAAAAA6GwAAAAAAAAAAAAAAAPC/"
				],
				[
					873,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEAbAAAAAAAAQRsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQBsAAAAAAABAGwAAAAAAAAAAAAAAAPC/"
				],
				[
					874,
					1,
					"left_delete",
					null,
					"AQAAAEAbAAAAAAAAQBsAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQRsAAAAAAABBGwAAAAAAAAAAAAAAAPC/"
				],
				[
					878,
					1,
					"insert",
					{
						"characters": "obj"
					},
					"BAAAAEIbAAAAAAAAQxsAAAAAAAAAAAAAQxsAAAAAAABDGwAAAAAAAAkAAAAgY2FsbGJhY2tDGwAAAAAAAEQbAAAAAAAAAAAAAEQbAAAAAAAARRsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQhsAAAAAAABLGwAAAAAAAAAAAAAAAPC/"
				],
				[
					887,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAACMbAAAAAAAAJRsAAAAAAAAAAAAADhsAAAAAAAAQGwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADhsAAAAAAAAjGwAAAAAAAAAAAAAAAPC/"
				],
				[
					910,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANwpAAAAAAAA3SkAAAAAAAAAAAAA3SkAAAAAAADlKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3CkAAAAAAADcKQAAAAAAAAAAAAAAAPC/"
				],
				[
					912,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAALopAAAAAAAAuykAAAAAAAAAAAAAuykAAAAAAADDKQAAAAAAAAAAAADmKQAAAAAAAOYpAAAAAAAACAAAACAgICAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuikAAAAAAAC6KQAAAAAAAAAAAAAAAFJA"
				],
				[
					914,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACwpAAAAAAAALSkAAAAAAAAAAAAALSkAAAAAAAA1KQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALCkAAAAAAAAsKQAAAAAAAAAAAAAAAFJA"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO4oAAAAAAAA7ygAAAAAAAAAAAAA7ygAAAAAAAD3KAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7igAAAAAAADuKAAAAAAAAAAAAAAAAFJA"
				],
				[
					924,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC4oAAAAAAAALygAAAAAAAAAAAAALygAAAAAAAA3KAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALigAAAAAAAAuKAAAAAAAAAAAAAAAAFJA"
				],
				[
					933,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA8oAAAAAAAAECgAAAAAAAAAAAAAECgAAAAAAAAYKAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADygAAAAAAAAPKAAAAAAAAAAAAAAAAFJA"
				],
				[
					958,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAOYpAAAAAAAA5ykAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5ikAAAAAAADmKQAAAAAAAAAAAAAAAPC/"
				],
				[
					959,
					1,
					"left_delete",
					null,
					"AQAAAOYpAAAAAAAA5ikAAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5ykAAAAAAADnKQAAAAAAAAAAAAAAAPC/"
				],
				[
					960,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOYpAAAAAAAA5ykAAAAAAAAAAAAA5ykAAAAAAADoKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5ikAAAAAAADmKQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					2,
					"right_delete",
					null,
					"AgAAAA4bAAAAAAAADhsAAAAAAAABAAAALw4bAAAAAAAADhsAAAAAAAABAAAAKg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4bAAAAAAAADhsAAAAAAAAAAAAAAABiQA"
				],
				[
					20,
					2,
					"right_delete",
					null,
					"AgAAACMbAAAAAAAAIxsAAAAAAAABAAAAKiMbAAAAAAAAIxsAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMbAAAAAAAAIxsAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					3,
					"left_delete",
					null,
					"AwAAAAwbAAAAAAAADBsAAAAAAAACAAAAICAKGwAAAAAAAAobAAAAAAAAAgAAACAgCBsAAAAAAAAIGwAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4bAAAAAAAADhsAAAAAAAAAAAAAAABiQA"
				]
			]
		},
		{
			"file": "CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/examples/gears.c",
			"settings":
			{
				"buffer_size": 9910,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 185305,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/cpp.js",
			"settings":
			{
				"buffer_size": 41019,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAcAcAAAAAAABwBwAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\nexport"
					},
					"BwAAAGShAAAAAAAAZaEAAAAAAAAAAAAAZaEAAAAAAABmoQAAAAAAAAAAAABmoQAAAAAAAGehAAAAAAAAAAAAAGehAAAAAAAAaKEAAAAAAAAAAAAAaKEAAAAAAABpoQAAAAAAAAAAAABpoQAAAAAAAGqhAAAAAAAAAAAAAGqhAAAAAAAAa6EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZKEAAAAAAABkoQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " default"
					},
					"CAAAAGuhAAAAAAAAbKEAAAAAAAAAAAAAbKEAAAAAAABtoQAAAAAAAAAAAABtoQAAAAAAAG6hAAAAAAAAAAAAAG6hAAAAAAAAb6EAAAAAAAAAAAAAb6EAAAAAAABwoQAAAAAAAAAAAABwoQAAAAAAAHGhAAAAAAAAAAAAAHGhAAAAAAAAcqEAAAAAAAAAAAAAcqEAAAAAAABzoQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa6EAAAAAAABroQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHOhAAAAAAAAdKEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc6EAAAAAAABzoQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					6,
					"left_delete",
					null,
					"BgAAAHOhAAAAAAAAc6EAAAAAAAABAAAAIHKhAAAAAAAAcqEAAAAAAAABAAAAdHGhAAAAAAAAcaEAAAAAAAABAAAAbHChAAAAAAAAcKEAAAAAAAABAAAAdW+hAAAAAAAAb6EAAAAAAAABAAAAYW6hAAAAAAAAbqEAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAdKEAAAAAAAB0oQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "fault"
					},
					"BQAAAG6hAAAAAAAAb6EAAAAAAAAAAAAAb6EAAAAAAABwoQAAAAAAAAAAAABwoQAAAAAAAHGhAAAAAAAAAAAAAHGhAAAAAAAAcqEAAAAAAAAAAAAAcqEAAAAAAABzoQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbqEAAAAAAABuoQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " cpp_js;"
					},
					"CAAAAHOhAAAAAAAAdKEAAAAAAAAAAAAAdKEAAAAAAAB1oQAAAAAAAAAAAAB1oQAAAAAAAHahAAAAAAAAAAAAAHahAAAAAAAAd6EAAAAAAAAAAAAAd6EAAAAAAAB4oQAAAAAAAAAAAAB4oQAAAAAAAHmhAAAAAAAAAAAAAHmhAAAAAAAAeqEAAAAAAAAAAAAAeqEAAAAAAAB7oQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc6EAAAAAAABzoQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"right_delete",
					null,
					"AQAAAPWgAAAAAAAA9aAAAAAAAABwAAAALy8gbm9kZS5qcyBpbnRlcmZhY2UKaWYodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICBtb2R1bGUuZXhwb3J0cy5jcmVhdGUgPSBjcHBfanM7Cn0KCg",
					"AQAAAAAAAAABAAAA9aAAAAAAAABloQAAAAAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAAuhAAAAAAAADKEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9aAAAAAAAAD1oAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "export"
					},
					"BgAAAHEGAAAAAAAAcgYAAAAAAAAAAAAAcgYAAAAAAABzBgAAAAAAAAAAAABzBgAAAAAAAHQGAAAAAAAAAAAAAHQGAAAAAAAAdQYAAAAAAAAAAAAAdQYAAAAAAAB2BgAAAAAAAAAAAAB2BgAAAAAAAHcGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQYAAAAAAABxBgAAAAAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcGAAAAAAAAeAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwYAAAAAAAB3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					2,
					"right_delete",
					null,
					"AgAAAHEGAAAAAAAAcQYAAAAAAAAGAAAAZXhwb3J0cQYAAAAAAABxBgAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAcQYAAAAAAAB3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "\n\nconsole.log"
					},
					"EAAAAOIRAAAAAAAA4xEAAAAAAAAAAAAA4xEAAAAAAADlEQAAAAAAAAAAAADlEQAAAAAAAOYRAAAAAAAAAAAAAOYRAAAAAAAA6BEAAAAAAAAAAAAA4xEAAAAAAADjEQAAAAAAAAIAAAAgIOYRAAAAAAAA5xEAAAAAAAAAAAAA5xEAAAAAAADoEQAAAAAAAAAAAADoEQAAAAAAAOkRAAAAAAAAAAAAAOkRAAAAAAAA6hEAAAAAAAAAAAAA6hEAAAAAAADrEQAAAAAAAAAAAADrEQAAAAAAAOwRAAAAAAAAAAAAAOwRAAAAAAAA7REAAAAAAAAAAAAA7REAAAAAAADuEQAAAAAAAAAAAADuEQAAAAAAAO8RAAAAAAAAAAAAAO8RAAAAAAAA8BEAAAAAAAAAAAAA8BEAAAAAAADxEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hEAAAAAAADiEQAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPERAAAAAAAA8xEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8REAAAAAAADxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPIRAAAAAAAA9BEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hEAAAAAAADyEQAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "settings"
					},
					"CAAAAPMRAAAAAAAA9BEAAAAAAAAAAAAA9BEAAAAAAAD1EQAAAAAAAAAAAAD1EQAAAAAAAPYRAAAAAAAAAAAAAPYRAAAAAAAA9xEAAAAAAAAAAAAA9xEAAAAAAAD4EQAAAAAAAAAAAAD4EQAAAAAAAPkRAAAAAAAAAAAAAPkRAAAAAAAA+hEAAAAAAAAAAAAA+hEAAAAAAAD7EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8xEAAAAAAADzEQAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": ",settings"
					},
					"CQAAAPwRAAAAAAAA/REAAAAAAAAAAAAA/REAAAAAAAD+EQAAAAAAAAAAAAD+EQAAAAAAAP8RAAAAAAAAAAAAAP8RAAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAABEgAAAAAAAAAAAAABEgAAAAAAAAISAAAAAAAAAAAAAAISAAAAAAAAAxIAAAAAAAAAAAAAAxIAAAAAAAAEEgAAAAAAAAAAAAAEEgAAAAAAAAUSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/BEAAAAAAAD8EQAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAYSAAAAAAAABxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhIAAAAAAAAGEgAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOYRAAAAAAAA5xEAAAAAAAAAAAAA5xEAAAAAAADoEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hEAAAAAAADmEQAAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					1,
					"",
					null,
					"GQAAAHiZAAAAAAAAeJkAAAAAAAAKAAAAOiBmdW5jdGlvbsGTAAAAAAAAwZMAAAAAAAAKAAAAOiBmdW5jdGlvbjeCAAAAAAAAN4IAAAAAAAAKAAAAOiBmdW5jdGlvbjV/AAAAAAAANX8AAAAAAAAKAAAAOiBmdW5jdGlvbspsAAAAAAAAymwAAAAAAAAKAAAAOiBmdW5jdGlvbnppAAAAAAAAemkAAAAAAAAKAAAAOiBmdW5jdGlvblNmAAAAAAAAU2YAAAAAAAAKAAAAOiBmdW5jdGlvbmRkAAAAAAAAZGQAAAAAAAAKAAAAOiBmdW5jdGlvbjxgAAAAAAAAPGAAAAAAAAAKAAAAOiBmdW5jdGlvbtxeAAAAAAAA3F4AAAAAAAAKAAAAOiBmdW5jdGlvbqNdAAAAAAAAo10AAAAAAAAKAAAAOiBmdW5jdGlvbnZcAAAAAAAAdlwAAAAAAAAKAAAAOiBmdW5jdGlvbopaAAAAAAAAiloAAAAAAAAKAAAAOiBmdW5jdGlvbqJYAAAAAAAAolgAAAAAAAAKAAAAOiBmdW5jdGlvbkRXAAAAAAAARFcAAAAAAAAKAAAAOiBmdW5jdGlvbpVHAAAAAAAAlUcAAAAAAAAKAAAAOiBmdW5jdGlvblUpAAAAAAAAVSkAAAAAAAAKAAAAOiBmdW5jdGlvbuwnAAAAAAAA7CcAAAAAAAAKAAAAOiBmdW5jdGlvbg4kAAAAAAAADiQAAAAAAAAKAAAAOiBmdW5jdGlvbpMgAAAAAAAAkyAAAAAAAAAKAAAAOiBmdW5jdGlvbiYfAAAAAAAAJh8AAAAAAAAKAAAAOiBmdW5jdGlvbk4eAAAAAAAATh4AAAAAAAAKAAAAOiBmdW5jdGlvbtcQAAAAAAAA1xAAAAAAAAAKAAAAOiBmdW5jdGlvbiwQAAAAAAAALBAAAAAAAAAKAAAAOiBmdW5jdGlvbvAPAAAAAAAA8A8AAAAAAAAKAAAAOiBmdW5jdGlvbg",
					"AQAAAAAAAAABAAAATh4AAAAAAABYHgAAAAAAAAAAAAAAAPC/"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFY5AAAAAAAAVzkAAAAAAAAAAAAAVzkAAAAAAABYOQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVjkAAAAAAABWOQAAAAAAAAAAAAAAAPC/"
				],
				[
					420,
					1,
					"",
					null,
					"cwAAAIGfAAAAAAAAhJ8AAAAAAAADAAAAdmFypZgAAAAAAAComAAAAAAAAAMAAAB2YXJylgAAAAAAAHWWAAAAAAAAAwAAAHZhckGWAAAAAAAARJYAAAAAAAADAAAAdmFy+5MAAAAAAAD+kwAAAAAAAAMAAAB2YXKVjgAAAAAAAJiOAAAAAAAAAwAAAHZhcs6NAAAAAAAA0Y0AAAAAAAADAAAAdmFyco0AAAAAAAB1jQAAAAAAAAMAAAB2YXI2jQAAAAAAADmNAAAAAAAAAwAAAHZhcn+MAAAAAAAAgowAAAAAAAADAAAAdmFyxooAAAAAAADJigAAAAAAAAMAAAB2YXKdigAAAAAAAKCKAAAAAAAAAwAAAHZhcgGJAAAAAAAABIkAAAAAAAADAAAAdmFyXYMAAAAAAABggwAAAAAAAAMAAAB2YXKZggAAAAAAAJyCAAAAAAAAAwAAAHZhch+CAAAAAAAAIoIAAAAAAAADAAAAdmFy2IEAAAAAAADbgQAAAAAAAAMAAAB2YXKlgQAAAAAAAKiBAAAAAAAAAwAAAHZhcnx/AAAAAAAAf38AAAAAAAADAAAAdmFy6H4AAAAAAADrfgAAAAAAAAMAAAB2YXJKdgAAAAAAAE12AAAAAAAAAwAAAHZhcplyAAAAAAAAnHIAAAAAAAADAAAAdmFydXIAAAAAAAB4cgAAAAAAAAMAAAB2YXLYbwAAAAAAANtvAAAAAAAAAwAAAHZhcoFvAAAAAAAAhG8AAAAAAAADAAAAdmFy1m4AAAAAAADZbgAAAAAAAAMAAAB2YXKobgAAAAAAAKtuAAAAAAAAAwAAAHZhcr9tAAAAAAAAwm0AAAAAAAADAAAAdmFyfW0AAAAAAACAbQAAAAAAAAMAAAB2YXI0aQAAAAAAADdpAAAAAAAAAwAAAHZhchdpAAAAAAAAGmkAAAAAAAADAAAAdmFyzWgAAAAAAADQaAAAAAAAAAMAAAB2YXK9ZQAAAAAAAMBlAAAAAAAAAwAAAHZhcldiAAAAAAAAWmIAAAAAAAADAAAAdmFyTWEAAAAAAABQYQAAAAAAAAMAAAB2YXIeYQAAAAAAACFhAAAAAAAAAwAAAHZhcmhgAAAAAAAAa2AAAAAAAAADAAAAdmFy7V8AAAAAAADwXwAAAAAAAAMAAAB2YXLfWgAAAAAAAOJaAAAAAAAAAwAAAHZhclJaAAAAAAAAVVoAAAAAAAADAAAAdmFyLFIAAAAAAAAvUgAAAAAAAAMAAAB2YXIdTwAAAAAAACBPAAAAAAAAAwAAAHZhcrdNAAAAAAAAuk0AAAAAAAADAAAAdmFyk0sAAAAAAACWSwAAAAAAAAMAAAB2YXLySgAAAAAAAPVKAAAAAAAAAwAAAHZhcjZKAAAAAAAAOUoAAAAAAAADAAAAdmFyvkkAAAAAAADBSQAAAAAAAAMAAAB2YXIoSQAAAAAAACtJAAAAAAAAAwAAAHZhcg1JAAAAAAAAEEkAAAAAAAADAAAAdmFykkgAAAAAAACVSAAAAAAAAAMAAAB2YXJZSAAAAAAAAFxIAAAAAAAAAwAAAHZhcsdHAAAAAAAAykcAAAAAAAADAAAAdmFyTUQAAAAAAABQRAAAAAAAAAMAAAB2YXKePgAAAAAAAKE+AAAAAAAAAwAAAHZhcro7AAAAAAAAvTsAAAAAAAADAAAAdmFyWDkAAAAAAABbOQAAAAAAAAMAAAB2YXImOQAAAAAAACk5AAAAAAAAAwAAAHZhcoU0AAAAAAAAiDQAAAAAAAADAAAAdmFyLTQAAAAAAAAwNAAAAAAAAAMAAAB2YXIPNAAAAAAAABI0AAAAAAAAAwAAAHZhcn8yAAAAAAAAgjIAAAAAAAADAAAAdmFy4jEAAAAAAADlMQAAAAAAAAMAAAB2YXKBLQAAAAAAAIQtAAAAAAAAAwAAAHZhclYtAAAAAAAAWS0AAAAAAAADAAAAdmFyGS0AAAAAAAAcLQAAAAAAAAMAAAB2YXKkLAAAAAAAAKcsAAAAAAAAAwAAAHZhcowsAAAAAAAAjywAAAAAAAADAAAAdmFydCwAAAAAAAB3LAAAAAAAAAMAAAB2YXL2KwAAAAAAAPkrAAAAAAAAAwAAAHZhcjcrAAAAAAAAOisAAAAAAAADAAAAdmFy3ioAAAAAAADhKgAAAAAAAAMAAAB2YXJwKgAAAAAAAHMqAAAAAAAAAwAAAHZhcioqAAAAAAAALSoAAAAAAAADAAAAdmFy1ikAAAAAAADZKQAAAAAAAAMAAAB2YXKsKQAAAAAAAK8pAAAAAAAAAwAAAHZhcrknAAAAAAAAvCcAAAAAAAADAAAAdmFykSYAAAAAAACUJgAAAAAAAAMAAAB2YXLGJAAAAAAAAMkkAAAAAAAAAwAAAHZhcjYkAAAAAAAAOSQAAAAAAAADAAAAdmFycCAAAAAAAABzIAAAAAAAAAMAAAB2YXKVHQAAAAAAAJgdAAAAAAAAAwAAAHZhcnkdAAAAAAAAfB0AAAAAAAADAAAAdmFyYB0AAAAAAABjHQAAAAAAAAMAAAB2YXJHHQAAAAAAAEodAAAAAAAAAwAAAHZhcjUdAAAAAAAAOB0AAAAAAAADAAAAdmFyCBwAAAAAAAALHAAAAAAAAAMAAAB2YXKfGwAAAAAAAKIbAAAAAAAAAwAAAHZhcnUbAAAAAAAAeBsAAAAAAAADAAAAdmFyMRsAAAAAAAA0GwAAAAAAAAMAAAB2YXIDGwAAAAAAAAYbAAAAAAAAAwAAAHZhcr8aAAAAAAAAwhoAAAAAAAADAAAAdmFyjBoAAAAAAACPGgAAAAAAAAMAAAB2YXLaGQAAAAAAAN0ZAAAAAAAAAwAAAHZhcqAZAAAAAAAAoxkAAAAAAAADAAAAdmFy+hgAAAAAAAD9GAAAAAAAAAMAAAB2YXKoGAAAAAAAAKsYAAAAAAAAAwAAAHZhckIYAAAAAAAARRgAAAAAAAADAAAAdmFy3BcAAAAAAADfFwAAAAAAAAMAAAB2YXJxFwAAAAAAAHQXAAAAAAAAAwAAAHZhcq8WAAAAAAAAshYAAAAAAAADAAAAdmFy6RUAAAAAAADsFQAAAAAAAAMAAAB2YXKSFQAAAAAAAJUVAAAAAAAAAwAAAHZhcisVAAAAAAAALhUAAAAAAAADAAAAdmFyshQAAAAAAAC1FAAAAAAAAAMAAAB2YXIvFAAAAAAAADIUAAAAAAAAAwAAAHZhcmcTAAAAAAAAahMAAAAAAAADAAAAdmFyvhIAAAAAAADBEgAAAAAAAAMAAAB2YXIiEQAAAAAAACURAAAAAAAAAwAAAHZhcrMPAAAAAAAAtg8AAAAAAAADAAAAdmFyug4AAAAAAAC9DgAAAAAAAAMAAAB2YXKpCQAAAAAAAKwJAAAAAAAAAwAAAHZhcj8JAAAAAAAAQgkAAAAAAAADAAAAdmFy1AcAAAAAAADXBwAAAAAAAAMAAAB2YXIsBwAAAAAAAC8HAAAAAAAAAwAAAHZhcqAGAAAAAAAAowYAAAAAAAADAAAAdmFy",
					"AQAAAAAAAAABAAAAWDkAAAAAAABbOQAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					3,
					"right_delete",
					null,
					"AwAAAIGfAAAAAAAAgZ8AAAAAAAABAAAAbIGfAAAAAAAAgZ8AAAAAAAABAAAAZYGfAAAAAAAAgZ8AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAgZ8AAAAAAACBnwAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": "var"
					},
					"AwAAAIGfAAAAAAAAgp8AAAAAAAAAAAAAgp8AAAAAAACDnwAAAAAAAAAAAACDnwAAAAAAAISfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgZ8AAAAAAACBnwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "ast-shell.js",
			"settings":
			{
				"buffer_size": 38633,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					107,
					1,
					"insert",
					{
						"characters": "√∂"
					},
					"AgAAAPQDAAAAAAAA9QMAAAAAAAAAAAAA9QMAAAAAAAD1AwAAAAAAAAQAAABVdGls",
					"AQAAAAAAAAABAAAA9AMAAAAAAAD4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"left_delete",
					null,
					"AQAAAPQDAAAAAAAA9AMAAAAAAAACAAAAw7Y",
					"AQAAAAAAAAABAAAA9QMAAAAAAAD1AwAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPQDAAAAAAAA9gMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AMAAAAAAAD0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "split"
					},
					"BQAAAPUDAAAAAAAA9gMAAAAAAAAAAAAA9gMAAAAAAAD3AwAAAAAAAAAAAAD3AwAAAAAAAPgDAAAAAAAAAAAAAPgDAAAAAAAA+QMAAAAAAAAAAAAA+QMAAAAAAAD6AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QMAAAAAAAD1AwAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					5,
					"right_delete",
					null,
					"BQAAAAMEAAAAAAAAAwQAAAAAAAABAAAALwMEAAAAAAAAAwQAAAAAAAABAAAAbAMEAAAAAAAAAwQAAAAAAAABAAAAaQMEAAAAAAAAAwQAAAAAAAABAAAAYgMEAAAAAAAAAwQAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"left_delete",
					null,
					"AQAAAAIEAAAAAAAAAgQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					3,
					"right_delete",
					null,
					"AwAAAAYEAAAAAAAABgQAAAAAAAABAAAALgYEAAAAAAAABgQAAAAAAAABAAAAagYEAAAAAAAABgQAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAABgQAAAAAAAAGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					2,
					"right_delete",
					null,
					"AgAAAO03AAAAAAAA7TcAAAAAAAAEAAAAVXRpbO03AAAAAAAA7TcAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA7TcAAAAAAADxNwAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					2,
					"right_delete",
					null,
					"AgAAAPI3AAAAAAAA8jcAAAAAAAABAAAAQfI3AAAAAAAA8jcAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAA8jcAAAAAAADyNwAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA8jcAAAAAAADyNwAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"paste",
					null,
					"AQAAAKsHAAAAAAAAqgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwcAAAAAAACrBwAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "\nconst"
					},
					"BgAAAKsHAAAAAAAArAcAAAAAAAAAAAAArAcAAAAAAACtBwAAAAAAAAAAAACtBwAAAAAAAK4HAAAAAAAAAAAAAK4HAAAAAAAArwcAAAAAAAAAAAAArwcAAAAAAACwBwAAAAAAAAAAAACwBwAAAAAAALEHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwcAAAAAAACrBwAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALEHAAAAAAAAsgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQcAAAAAAACxBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/element.js",
			"settings":
			{
				"buffer_size": 37300,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/eagle/document.js",
			"settings":
			{
				"buffer_size": 10664,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					33,
					2,
					"right_delete",
					null,
					"AgAAAOgoAAAAAAAA6CgAAAAAAABOAAAAICAgIHJldHVybiB0aGlzLmdldChlID0+IGUudGFnTmFtZSA9PSAnbGlicmFyeScgJiYgZS5hdHRyaWJ1dGVzLm5hbWUgPT0gJ2MnKTsK6CgAAAAAAADoKAAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAA6CgAAAAAAAA2KQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 78524,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "clang-list.js",
			"settings":
			{
				"buffer_size": 8033,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/dom/css.js",
			"settings":
			{
				"buffer_size": 6945,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJsBAAAAAAAAnAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbAQAAAAAAAJsBAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/bpg/bpgdec8.js",
			"settings":
			{
				"buffer_size": 21381,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/bpg/bpgdec.js",
			"settings":
			{
				"buffer_size": 21380,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/container/multiMap.js",
			"settings":
			{
				"buffer_size": 4122,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs/qjs-modules/lib/repl.js",
			"settings":
			{
				"buffer_size": 62945,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "debugger-client.js",
			"settings":
			{
				"buffer_size": 10822,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					34,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAOQSAAAAAAAA5RIAAAAAAAAAAAAA5RIAAAAAAADnEgAAAAAAAAAAAADnEgAAAAAAAOgSAAAAAAAAAAAAAOgSAAAAAAAA6RIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5BIAAAAAAADkEgAAAAAAAAAAAAAAkHJA"
				],
				[
					35,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOkSAAAAAAAA6xIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6RIAAAAAAADpEgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "!address"
					},
					"CAAAAOoSAAAAAAAA6xIAAAAAAAAAAAAA6xIAAAAAAADsEgAAAAAAAAAAAADsEgAAAAAAAO0SAAAAAAAAAAAAAO0SAAAAAAAA7hIAAAAAAAAAAAAA7hIAAAAAAADvEgAAAAAAAAAAAADvEgAAAAAAAPASAAAAAAAAAAAAAPASAAAAAAAA8RIAAAAAAAAAAAAA8RIAAAAAAADyEgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6hIAAAAAAADqEgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPMSAAAAAAAA9BIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8xIAAAAAAADzEgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPQSAAAAAAAA9hIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9BIAAAAAAAD0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAPUSAAAAAAAA9hIAAAAAAAAAAAAA9hIAAAAAAAD4EgAAAAAAAAAAAAD4EgAAAAAAAPkSAAAAAAAAAAAAAPkSAAAAAAAA+xIAAAAAAAAAAAAA9hIAAAAAAAD2EgAAAAAAAAIAAAAgIPYSAAAAAAAA+hIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9RIAAAAAAAD1EgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "globalThis.addr"
					},
					"DwAAAPoSAAAAAAAA+xIAAAAAAAAAAAAA+xIAAAAAAAD8EgAAAAAAAAAAAAD8EgAAAAAAAP0SAAAAAAAAAAAAAP0SAAAAAAAA/hIAAAAAAAAAAAAA/hIAAAAAAAD/EgAAAAAAAAAAAAD/EgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAARMAAAAAAAAAAAAAARMAAAAAAAACEwAAAAAAAAAAAAACEwAAAAAAAAMTAAAAAAAAAAAAAAMTAAAAAAAABBMAAAAAAAAAAAAABBMAAAAAAAAFEwAAAAAAAAAAAAAFEwAAAAAAAAYTAAAAAAAAAAAAAAYTAAAAAAAABxMAAAAAAAAAAAAABxMAAAAAAAAIEwAAAAAAAAAAAAAIEwAAAAAAAAkTAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+hIAAAAAAAD6EgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "ess=address="
					},
					"DAAAAAkTAAAAAAAAChMAAAAAAAAAAAAAChMAAAAAAAALEwAAAAAAAAAAAAALEwAAAAAAAAwTAAAAAAAAAAAAAAwTAAAAAAAADRMAAAAAAAAAAAAADRMAAAAAAAAOEwAAAAAAAAAAAAAOEwAAAAAAAA8TAAAAAAAAAAAAAA8TAAAAAAAAEBMAAAAAAAAAAAAAEBMAAAAAAAAREwAAAAAAAAAAAAAREwAAAAAAABITAAAAAAAAAAAAABITAAAAAAAAExMAAAAAAAAAAAAAExMAAAAAAAAUEwAAAAAAAAAAAAAUEwAAAAAAABUTAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACRMAAAAAAAAJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"",
					null,
					"AQAAABUTAAAAAAAAOBMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFRMAAAAAAAAVEwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADgTAAAAAAAAOhMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOBMAAAAAAAA4EwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					2,
					"left_delete",
					null,
					"AgAAADkTAAAAAAAAORMAAAAAAAABAAAAKTgTAAAAAAAAOBMAAAAAAAABAAAAKA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOhMAAAAAAAA6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAADgTAAAAAAAAORMAAAAAAAAAAAAAORMAAAAAAAA6EwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOBMAAAAAAAA4EwAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAABUTAAAAAAAAFhMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFRMAAAAAAAAVEwAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAABUTAAAAAAAAFRMAAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFhMAAAAAAAAWEwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAABUTAAAAAAAAFhMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFRMAAAAAAAAVEwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "'127.0.0.1:"
					},
					"CwAAABUTAAAAAAAAFhMAAAAAAAAAAAAAFhMAAAAAAAAXEwAAAAAAAAAAAAAXEwAAAAAAABgTAAAAAAAAAAAAABgTAAAAAAAAGRMAAAAAAAAAAAAAGRMAAAAAAAAaEwAAAAAAAAAAAAAaEwAAAAAAABsTAAAAAAAAAAAAABsTAAAAAAAAHBMAAAAAAAAAAAAAHBMAAAAAAAAdEwAAAAAAAAAAAAAdEwAAAAAAAB4TAAAAAAAAAAAAAB4TAAAAAAAAHxMAAAAAAAAAAAAAHxMAAAAAAAAgEwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFRMAAAAAAAAVEwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "'¬∞+"
					},
					"AwAAACATAAAAAAAAIRMAAAAAAAAAAAAAIRMAAAAAAAAiEwAAAAAAAAAAAAAiEwAAAAAAACMTAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIBMAAAAAAAAgEwAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					2,
					"left_delete",
					null,
					"AgAAACITAAAAAAAAIhMAAAAAAAABAAAAKyETAAAAAAAAIRMAAAAAAAACAAAAwrA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIxMAAAAAAAAjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAACETAAAAAAAAIhMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIRMAAAAAAAAhEwAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEwTAAAAAAAATRMAAAAAAAAAAAAATRMAAAAAAABPEwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATBMAAAAAAABMEwAAAAAAAP///////+9/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AwAAAJ0TAAAAAAAAnhMAAAAAAAAAAAAATRMAAAAAAABNEwAAAAAAAAIAAAAgIJwTAAAAAAAAnRMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnRMAAAAAAACdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " globalThis.addr"
					},
					"EAAAAJ0TAAAAAAAAnhMAAAAAAAAAAAAAnhMAAAAAAACfEwAAAAAAAAAAAACfEwAAAAAAAKATAAAAAAAAAAAAAKATAAAAAAAAoRMAAAAAAAAAAAAAoRMAAAAAAACiEwAAAAAAAAAAAACiEwAAAAAAAKMTAAAAAAAAAAAAAKMTAAAAAAAApBMAAAAAAAAAAAAApBMAAAAAAAClEwAAAAAAAAAAAAClEwAAAAAAAKYTAAAAAAAAAAAAAKYTAAAAAAAApxMAAAAAAAAAAAAApxMAAAAAAACoEwAAAAAAAAAAAACoEwAAAAAAAKkTAAAAAAAAAAAAAKkTAAAAAAAAqhMAAAAAAAAAAAAAqhMAAAAAAACrEwAAAAAAAAAAAACrEwAAAAAAAKwTAAAAAAAAAAAAAKwTAAAAAAAArRMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnRMAAAAAAACdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "ess"
					},
					"AwAAAK0TAAAAAAAArhMAAAAAAAAAAAAArhMAAAAAAACvEwAAAAAAAAAAAACvEwAAAAAAALATAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArRMAAAAAAACtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL0lAAAAAAAAviUAAAAAAAAAAAAAviUAAAAAAADGJQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvSUAAAAAAAC9JQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAIYlAAAAAAAAhyUAAAAAAAAAAAAAhyUAAAAAAACPJQAAAAAAAAAAAADHJQAAAAAAAMclAAAAAAAACAAAACAgICAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhiUAAAAAAACGJQAAAAAAAAAAAAAAAFJA"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANgkAAAAAAAA2SQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2CQAAAAAAADYJAAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					5,
					"left_delete",
					null,
					"BQAAANgkAAAAAAAA2CQAAAAAAAABAAAACtckAAAAAAAA1yQAAAAAAAABAAAAL9YkAAAAAAAA1iQAAAAAAAABAAAAKtUkAAAAAAAA1SQAAAAAAAABAAAACtQkAAAAAAAA1CQAAAAAAAABAAAAOw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2SQAAAAAAADZJAAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": ";*/"
					},
					"AwAAANQkAAAAAAAA1SQAAAAAAAAAAAAA1SQAAAAAAADWJAAAAAAAAAAAAADWJAAAAAAAANckAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1CQAAAAAAADUJAAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAANckAAAAAAAA2CQAAAAAAAAAAAAA2CQAAAAAAADaJAAAAAAAAAAAAADaJAAAAAAAANskAAAAAAAAAAAAANskAAAAAAAA3SQAAAAAAAAAAAAA2CQAAAAAAADYJAAAAAAAAAIAAAAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1yQAAAAAAADXJAAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEQeAAAAAAAARR4AAAAAAAAAAAAA2iQAAAAAAADaJAAAAAAAAAIAAAAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARB4AAAAAAABEHgAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": "\n\nresponses"
					},
					"DgAAAPYlAAAAAAAA9yUAAAAAAAAAAAAA9yUAAAAAAAD5JQAAAAAAAAAAAAD5JQAAAAAAAPolAAAAAAAAAAAAAPolAAAAAAAA/CUAAAAAAAAAAAAA9yUAAAAAAAD3JQAAAAAAAAIAAAAgIPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAD8JQAAAAAAAP0lAAAAAAAAAAAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA/iUAAAAAAAD/JQAAAAAAAAAAAAD/JQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9iUAAAAAAAD2JQAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "gl√∂o"
					},
					"BQAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD7JQAAAAAAAAkAAAByZXNwb25zZXP7JQAAAAAAAPwlAAAAAAAAAAAAAPwlAAAAAAAA/SUAAAAAAAAAAAAA/SUAAAAAAAD+JQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAyYAAAAAAAD6JQAAAAAAAAAAAAAAADJA"
				],
				[
					306,
					4,
					"left_delete",
					null,
					"BAAAAP0lAAAAAAAA/SUAAAAAAAABAAAAb/wlAAAAAAAA/CUAAAAAAAACAAAAw7b7JQAAAAAAAPslAAAAAAAAAQAAAGz6JQAAAAAAAPolAAAAAAAAAQAAAGc",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/iUAAAAAAAD+JQAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "responses=dispatch"
					},
					"EgAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAD8JQAAAAAAAP0lAAAAAAAAAAAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA/iUAAAAAAAD/JQAAAAAAAAAAAAD/JQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAAMmAAAAAAAABCYAAAAAAAAAAAAABCYAAAAAAAAFJgAAAAAAAAAAAAAFJgAAAAAAAAYmAAAAAAAAAAAAAAYmAAAAAAAAByYAAAAAAAAAAAAAByYAAAAAAAAIJgAAAAAAAAAAAAAIJgAAAAAAAAkmAAAAAAAAAAAAAAkmAAAAAAAACiYAAAAAAAAAAAAACiYAAAAAAAALJgAAAAAAAAAAAAALJgAAAAAAAAwmAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+iUAAAAAAAD6JQAAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": ".responses;"
					},
					"CwAAAAwmAAAAAAAADSYAAAAAAAAAAAAADSYAAAAAAAAOJgAAAAAAAAAAAAAOJgAAAAAAAA8mAAAAAAAAAAAAAA8mAAAAAAAAECYAAAAAAAAAAAAAECYAAAAAAAARJgAAAAAAAAAAAAARJgAAAAAAABImAAAAAAAAAAAAABImAAAAAAAAEyYAAAAAAAAAAAAAEyYAAAAAAAAUJgAAAAAAAAAAAAAUJgAAAAAAABUmAAAAAAAAAAAAABUmAAAAAAAAFiYAAAAAAAAAAAAAFiYAAAAAAAAXJgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADCYAAAAAAAAMJgAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABcmAAAAAAAAGCYAAAAAAAAAAAAAGCYAAAAAAAAaJgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFyYAAAAAAAAXJgAAAAAAAAAAAAAAAPC/"
				],
				[
					316,
					2,
					"left_delete",
					null,
					"AgAAABgmAAAAAAAAGCYAAAAAAAACAAAAICAXJgAAAAAAABcmAAAAAAAAAQAAAAo",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGiYAAAAAAAAaJgAAAAAAAAAAAAAAAPC/"
				],
				[
					388,
					1,
					"cut",
					null,
					"AQAAAK8bAAAAAAAArxsAAAAAAAAKAAAAcmVzcG9uc2VzLA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArxsAAAAAAAC5GwAAAAAAAAAAAAAAAPC/"
				],
				[
					394,
					1,
					"insert",
					{
						"characters": "globalThis.responses"
					},
					"FAAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAD8JQAAAAAAAP0lAAAAAAAAAAAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA/iUAAAAAAAD/JQAAAAAAAAAAAAD/JQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAAMmAAAAAAAABCYAAAAAAAAAAAAABCYAAAAAAAAFJgAAAAAAAAAAAAAFJgAAAAAAAAYmAAAAAAAAAAAAAAYmAAAAAAAAByYAAAAAAAAAAAAAByYAAAAAAAAIJgAAAAAAAAAAAAAIJgAAAAAAAAkmAAAAAAAAAAAAAAkmAAAAAAAACiYAAAAAAAAAAAAACiYAAAAAAAALJgAAAAAAAAAAAAALJgAAAAAAAAwmAAAAAAAAAAAAAAwmAAAAAAAADSYAAAAAAAAAAAAADSYAAAAAAAAOJgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+iUAAAAAAAD6JQAAAAAAAAAAAAAAAPC/"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAA4mAAAAAAAADyYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADiYAAAAAAAAOJgAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "36"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					2,
					"left_delete",
					null,
					"AgAAAAEAAAAAAAAAAQAAAAAAAAABAAAANgAAAAAAAAAAAAAAAAAAAAABAAAAMw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					1,
					"cut",
					null,
					"AQAAAGgGAAAAAAAAaAYAAAAAAAAUAAAARWxlbWVudC5maW5kKCdtYWluJyk",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaAYAAAAAAAB8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAGgGAAAAAAAAaQYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaAYAAAAAAABoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAEkGAAAAAAAASgYAAAAAAAAAAAAASgYAAAAAAABMBgAAAAAAAAAAAABMBgAAAAAAAE0GAAAAAAAAAAAAAE0GAAAAAAAATgYAAAAAAAAAAAAATgYAAAAAAABPBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQYAAAAAAABJBgAAAAAAAAAAAAAAcHFA"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": " e;"
					},
					"AwAAAE8GAAAAAAAAUAYAAAAAAAAAAAAAUAYAAAAAAABRBgAAAAAAAAAAAABRBgAAAAAAAFIGAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwYAAAAAAABPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAFIGAAAAAAAAUwYAAAAAAAAAAAAAUwYAAAAAAABVBgAAAAAAAAAAAABVBgAAAAAAAFYGAAAAAAAAAAAAAFYGAAAAAAAAWAYAAAAAAAAAAAAAUwYAAAAAAABTBgAAAAAAAAIAAAAgIFYGAAAAAAAAVwYAAAAAAAAAAAAAVwYAAAAAAABYBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUgYAAAAAAABSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFgGAAAAAAAAWgYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWAYAAAAAAABYBgAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFkGAAAAAAAAWgYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQYAAAAAAABZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					1,
					"left_delete",
					null,
					"AQAAAFkGAAAAAAAAWQYAAAAAAAABAAAAZQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgYAAAAAAABaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFkGAAAAAAAAWwYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQYAAAAAAABZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": "e="
					},
					"AgAAAFoGAAAAAAAAWwYAAAAAAAAAAAAAWwYAAAAAAABcBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgYAAAAAAABaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFwGAAAAAAAAXQYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAYAAAAAAABcBgAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"paste",
					null,
					"AQAAAF0GAAAAAAAAcQYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQYAAAAAAABdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMGAAAAAAAAdAYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwYAAAAAAABzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHQGAAAAAAAAdgYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdAYAAAAAAAB0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"right_delete",
					null,
					"AQAAAHUGAAAAAAAAdQYAAAAAAAABAAAAfQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQYAAAAAAAB1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAACwHAAAAAAAALQcAAAAAAAAAAAAALQcAAAAAAAAvBwAAAAAAAAAAAAAvBwAAAAAAADAHAAAAAAAAAAAAAC0HAAAAAAAALQcAAAAAAAACAAAAICAtBwAAAAAAAC0HAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALAcAAAAAAAAsBwAAAAAAAP///////+9/"
				],
				[
					515,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0wYAAAAAAADTBgAAAAAAAAAAAAAAACJA"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIkPAAAAAAAAig8AAAAAAAAAAAAAig8AAAAAAACMDwAAAAAAAAAAAACMDwAAAAAAAI0PAAAAAAAAAAAAAI0PAAAAAAAAjw8AAAAAAAAAAAAAig8AAAAAAACKDwAAAAAAAAIAAAAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiQ8AAAAAAACJDwAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					2,
					"left_delete",
					null,
					"AgAAAIsPAAAAAAAAiw8AAAAAAAACAAAAICCKDwAAAAAAAIoPAAAAAAAAAQAAAAo",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQ8AAAAAAACNDwAAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANEPAAAAAAAA0g8AAAAAAAAAAAAA0g8AAAAAAADUDwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0Q8AAAAAAADRDwAAAAAAAAAAAAAAADJA"
				],
				[
					667,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcRIAAAAAAABxEgAAAAAAAAAAAAAAAPC/"
				],
				[
					723,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABcgAAAAAAAAGCAAAAAAAAAAAAAAGCAAAAAAAAAYIAAAAAAAAOYEAAAKICAvKiAoYXN5bmMgZnVuY3Rpb24gUmVhZFNvY2tldCgpIHsKICAgIGZvciBhd2FpdChsZXQgbXNnIG9mIHdzKSB7CiAgICAgIGxldCBkYXRhOwogICAgICB0cnkgewogICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG1zZy5kYXRhKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1dTIEVSUk9SIHBhcnNpbmcnLCBtc2cuZGF0YSk7CiAgICAgIH0KICAgICAgZ2xvYmFsVGhpcy5yZXNwb25zZSA9IGRhdGE7CiAgICAgIGlmKGRhdGEpIHsKICAgICAgICBjb25zb2xlLmxvZygnd3MgcmVjZWl2ZWQgJywgZGF0YSk7CiAgICAgICAgY29uc3QgeyByZXNwb25zZSwgcmVxdWVzdF9zZXEgfSA9IGRhdGE7CiAgICAgICAgaWYocmVzcG9uc2UpIHsKICAgICAgICAgIGNvbnN0IHsgY29tbWFuZCB9ID0gcmVzcG9uc2U7CiAgICAgICAgICBpZihbJ3N0YXJ0JywgJ2Nvbm5lY3QnXS5pbmRleE9mKGNvbW1hbmQpID49IDApIHsKICAgICAgICAgICAgY3dkID0gcmVzcG9uc2UuY3dkOwogICAgICAgICAgICBjb25zb2xlLmxvZygnY29tbWFuZDonLCBjb21tYW5kKTsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3Jlc3BvbnNlOicsIHJlc3BvbnNlKTsKICAgICAgICAgICAgaWYocmVzcG9uc2UuYXJnc1swXSkgewogICAgICAgICAgICAgIGN1cnJlbnRTb3VyY2UocmVzcG9uc2UuYXJnc1swXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgVXBkYXRlUG9zaXRpb24oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBSZW5kZXJVSSgpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGNvbW1hbmQgPT0gJ3N0YXJ0JykgewogICAgICAgICAgICBjd2QgPSByZXNwb25zZS5jd2Q7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGFydCcsIHJlc3BvbnNlKTsKICAgICAgICAgICAgUmVuZGVyVUkocmVzcG9uc2UuYXJnc1swXSk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZihyZXNwb25zZXNbcmVxdWVzdF9zZXFdKSByZXNwb25zZXNbcmVxdWVzdF9zZXFdKGRhdGEpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUubG9nKCdXUycsIHdzKTsKICAgICAgfQogICAgICBpZihbJ2VuZCcsICdlcnJvciddLmluZGV4T2YoZGF0YS50eXBlKSA+PSAwKSB7CiAgICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSAnJzsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgfQogIH0pKCk7Ki8",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFyAAAAAAAAD9JAAAAAAAAAAAAAAAAPC/"
				],
				[
					731,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPUhAAAAAAAA9iEAAAAAAAAAAAAA9iEAAAAAAAD2IQAAAAAAAMMAAAAKICAvKiBpZih1cmwuc2VhcmNoUGFyYW1zLmhhcygncG9ydCcpKSBhd2FpdCBDb25uZWN0KCk7CiAgZWxzZSBhd2FpdCBTdGFydChbdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3NjcmlwdCcpID8/ICdxdWlja2pzL3Fqcy1tb2R1bGVzL3Rlc3RzL3Rlc3RfZG9tLmpzJ10pOyAvLyAndGVzdC12aWRlby5qcycsICduaWdodHdhdGNoLm1wNCddKTsKKi8",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuCIAAAAAAAD1IQAAAAAAAAAAAAAAAPC/"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPYhAAAAAAAA9yEAAAAAAAAAAAAA9yEAAAAAAAD5IQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9iEAAAAAAAD2IQAAAAAAAAAAAAAAAPC/"
				],
				[
					735,
					1,
					"left_delete",
					null,
					"AgAAAHEjAAAAAAAAcSMAAAAAAABLAAAACiAgLy8gZG9SZW5kZXIoY3VycmVudFNvdXJjZSk7CgogIC8vd2luZG93LmxvY2F0aW9uLmhhc2ggPSBgI2xpbmUtJHtsaW5lfWA79yEAAAAAAAD3IQAAAAAAAAIAAAAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvCMAAAAAAABxIwAAAAAAAAAAAAAAAPC/"
				],
				[
					738,
					2,
					"left_delete",
					null,
					"AgAAAMQlAAAAAAAAxCUAAAAAAADjAAAACi8qCiAgewogICAgInR5cGUiOiAiYnJlYWtwb2ludHMiLAogICAgImJyZWFrcG9pbnRzIjogewogICAgICAicGF0aCI6ICJsaWIvZWNtYXNjcmlwdC9wYXJzZXIyLmpzIiwKICAgICAgImJyZWFrcG9pbnRzIjogWyB7ICJsaW5lIjogNDcwLCAiY29sdW1uIjogMCB9LCB7ICJsaW5lIjogMjE1MSwgImNvbHVtbiI6IDAgfSwgeyAibGluZSI6IDI0MDEsICJjb2x1bW4iOiAwIH0gXQogICAgfQogIH0KKi/DJQAAAAAAAMMlAAAAAAAAAQAAAAo",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxCUAAAAAAACnJgAAAAAAAAAAAAAAAPC/"
				],
				[
					741,
					1,
					"left_delete",
					null,
					"AQAAALAmAAAAAAAAsCYAAAAAAAD+AAAACi8qY29uc3QgQnV0dG9uID0gKHtpbWFnZX0pID0+IHsKY29uc3QgcmVmID0gdXNlQ2xpY2soZSA9PiB7CiAgY29uc29sZS5sb2coJ2NsaWNrISEhIScpOwp9KTsKIHJldHVybiAgaCgnYnV0dG9uJywgeyByZWYsIGNsYXNzOiAnYnV0dG9uJyB9LCBoKCdpbWcnLCB7IHNyYzogaW1hZ2UgfSkpOwp9Ki8KLypjb25zdCBCdXR0b25CYXI9ICAoe2NoaWxkcmVufSkgPT4gCmgoJ2RpdicsIHtjbGFzczogJ2J1dHRvbi1iYXInIH0sIGNoaWxkcmVuKTsqLwo",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsCYAAAAAAACuJwAAAAAAAAAAAAAAAPC/"
				],
				[
					744,
					1,
					"left_delete",
					null,
					"AQAAAOEmAAAAAAAA4SYAAAAAAAA+AAAACiAgLyogaWYoY3VycmVudFNvdXJjZSgpICE9IGZpbGUpIAogICAgY3VycmVudFNvdXJjZShmaWxlKTsqLwo",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHycAAAAAAADhJgAAAAAAAAAAAAAAAPC/"
				],
				[
					756,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACSkAAAAAAAAJKQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "test-video.js",
			"settings":
			{
				"buffer_size": 26264,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"right",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				":q",
				"Coffee: Quick Run Bar"
			],
			[
				"clang",
				"Clang Format: Format Selection"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"mode",
				"HTML: Encode Special Characters"
			],
			[
				"insert",
				"Snippet: Insert livereload.js script"
			],
			[
				":w",
				":w - Save"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/data",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include/AL",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include/GLES2",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/util",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/dirent",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/dirent/include",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/examples",
		"/home/roman/Projects/plot-cv/ol-layerswitcher"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec8.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/test-alea.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/async/debounce.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.wat",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.mjs",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.html.symbols",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec8.wat",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/lib/async/websocket.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/property-enumeration.h",
		"/home/roman/Projects/plot-cv/lib/build/compileCommand.js",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/cmake/BuildGLFW.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildBrotli.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildLibwebsockets.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/cmake/BuildGLFW.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildCURL.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/cmake/BuildGL3W.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-sound/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/plugin-standalone/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/brotli/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindLibreSSL.cmake",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/debugger-client.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/test-repeater.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs.c",
		"/home/roman/Projects/plot-cv/repredator/pre8.png",
		"/home/roman/Projects/plot-cv/repredator/pre7.png",
		"/home/roman/Projects/plot-cv/repredator/pre2.png",
		"/home/roman/Projects/plot-cv/repredator/pre1.png",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/test-rpc.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/portaudio2.js",
		"/usr/include/portaudio.h",
		"/home/roman/Projects/plot-cv/portaudio.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/usr/include/portmidi.h",
		"/home/roman/Projects/plot-cv/portmidi.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/out.tmp",
		"/home/roman/Projects/plot-cv/webakeit.js",
		"/home/roman/Projects/plot-cv/webakeit-telegram.js",
		"/home/roman/Downloads/Telegram Desktop/ChatExport_2024-04-09/messages.html",
		"/home/roman/Projects/plot-cv/static/css/webakeit.css",
		"/home/roman/Projects/plot-cv/webakeit.tmp",
		"/home/roman/Projects/plot-cv/webakeit.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.es",
		"/home/roman/Projects/plot-cv/lib/geom/splines.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/numbers2.c",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/lib/autoStore.js",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/static/css/draw.css",
		"/home/roman/Projects/plot-cv/qjs-opencv/point.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/svg-box.js",
		"/home/roman/Projects/plot-cv/numbers.c",
		"/home/roman/Projects/plot-cv/hex.c",
		"/home/roman/Projects/plot-cv/upload-worker.js",
		"/home/roman/Projects/plot-cv/mailcow-db.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/examples/ssl-client.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/workertest.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/static/css/upload.css",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/directory.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/directory.html",
		"/home/roman/Projects/plot-cv/coil.html",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/noise.js",
		"/home/roman/Projects/plot-cv/pinkNoise.js",
		"/home/roman/Projects/plot-cv/noise.html",
		"/home/roman/Projects/plot-cv/landing.html",
		"/home/roman/Projects/plot-cv/404.html",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/lib/lscache.js"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt,-*/inst/*,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.jsx,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.jsx,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js",
			"/home/roman/Projects/plot-cv/lib,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"completion_func",
			"\\bdf\\b",
			"\\bCompile\\b",
			"AstDump",
			"Compile",
			"AstDump",
			"\\bCompile\\b",
			"Compile",
			"traceProxy",
			"Util\\.split ",
			"\\.split ",
			"splitAt",
			"\\bUtil\\.",
			"\\bUtil\\b",
			"Util",
			"util.js",
			"\\bwindow\\b",
			"\\bvar\\b",
			"process_block",
			"\\bvar\\b",
			": function\\b",
			"settings",
			"console.log",
			"settings.complet",
			"lines",
			"new_state",
			"completion_func",
			"completion_func\\(",
			"settings",
			"include_func",
			"_handl",
			"_handler",
			"run",
			"\\bsettings\\b",
			"settings\\.",
			"defer\\b",
			"defer",
			"getWait",
			"currentWait",
			"\\bwait\\b",
			"getWait",
			"\\bwait\\b",
			"getWait",
			"debounce",
			"options_numhidden",
			"options_hidden",
			"options_numhidden",
			"options_hidden",
			"tostringtag",
			"\\[Symbol.toStringTag\\] =",
			"\\[Symbol.toStringTag\\]",
			"toStringTag",
			"ion define\\b",
			"define\\b",
			"property_enumeration_next",
			"_next\\b",
			"property_recursion_top",
			"\\bindex\\b",
			"Inspector",
			"Writer",
			"setReadHandler",
			"loadModule",
			"main",
			"\n    ",
			"get output\\b",
			"outputFile",
			"CommandOutput",
			"type:",
			"\\btype\\b",
			"\n          ",
			"relative",
			"'L'",
			"'-L'",
			"undefined",
			"\\bundefined\\b",
			"isAbsolute",
			"relative",
			"ArgumentType",
			"ArgumentIs",
			"CompileCommand",
			"ArgumentType",
			"ArgumentIs",
			"relative",
			"\\bthis\\b",
			"MakeCommand",
			"CommandType",
			"MakeCommands",
			"MakeComma",
			"CommandOutput",
			"run",
			"\\[\\.\\.\\.this\\]",
			"\\[\\.\\.\\.this\\]\\.",
			"\\[\\.\\.\\.this",
			"commonCmd",
			"\\bcommands\\b",
			"commands",
			"globalThis",
			"globalThis\\.",
			"Console",
			"\\bdefine\\b",
			"toJSON",
			"inspect",
			"extendArray",
			"this\\.",
			"this\\[",
			"this\\.",
			"this\\[",
			"this[\\[\\.]",
			"this\\[",
			"CompileCommand",
			"\n",
			"CompileCommand",
			"toStringTag",
			"\\bsvg\\b",
			"svgContainer",
			"SVGCom",
			"SVGComponent",
			"overlay",
			"\\bsvg\\b",
			"svgContainer",
			"overlay",
			"GetRects",
			"hello",
			"'hello'",
			"rects",
			"'rects'",
			"'hello'",
			"'rects'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"let",
			"",
			"'file'",
			"this.argv",
			"this.argv.",
			"this.argv[",
			"this.argv.",
			"this.argv[",
			"sendMessage",
			"responses",
			"import",
			"",
			"{ArrayBuffer}   buffer",
			"{ArrayBuffer}      buffer",
			"{Object|null}   outputDriverInfo",
			"{ArrayBuffer}   stream",
			", ",
			"m",
			"{ ",
			"export const ",
			"nameKey",
			", GetStream(stream)",
			"GetStream",
			"DereferenceStream",
			"export ",
			"export class ",
			"export class",
			"}\\n\n  get ",
			"); /**",
			"",
			"export const \\1 = ",
			"export function ",
			"&auml;",
			"&uuml;",
			"&ouml;",
			"\\1",
			"let",
			"this",
			"ret",
			"factor",
			"GetCirclePosition",
			"index",
			"dist",
			"}\\n\\n\\1",
			"}\\n\\1",
			"Log",
			"format_base",
			"\\1u",
			"format",
			"GREEN",
			"c",
			"output",
			"TYPE_MASK",
			" + (obj?.cacheBucket ?? '') + ",
			"\\1//\\2",
			"opts",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1068,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/cpp.js",
							"function_name_status_row": 21,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1649,
									1674
								],
								[
									1700,
									1720
								],
								[
									2008,
									2042
								],
								[
									3774,
									3814
								],
								[
									4071,
									4083
								],
								[
									4120,
									4133
								],
								[
									4280,
									4299
								],
								[
									4844,
									4869
								],
								[
									7723,
									7730
								],
								[
									7927,
									7937
								],
								[
									8283,
									8295
								],
								[
									9162,
									9173
								],
								[
									10135,
									10156
								],
								[
									10498,
									10513
								],
								[
									11067,
									11089
								],
								[
									11258,
									11279
								],
								[
									11432,
									11478
								],
								[
									13172,
									13191
								],
								[
									13476,
									13527
								],
								[
									14634,
									14667
								],
								[
									18233,
									18280
								],
								[
									22232,
									22249
								],
								[
									22572,
									22589
								],
								[
									23053,
									23072
								],
								[
									23528,
									23554
								],
								[
									23824,
									23840
								],
								[
									24116,
									24141
								],
								[
									24463,
									24481
								],
								[
									25515,
									25542
								],
								[
									26003,
									26036
								],
								[
									26205,
									26229
								],
								[
									26794,
									26820
								],
								[
									27641,
									27671
								],
								[
									32345,
									32423
								],
								[
									33106,
									33180
								],
								[
									37585,
									37602
								],
								[
									39045,
									39068
								]
							],
							"symlist":
							[
								"  cpp_js(settings)",
								"  trim = function(str)",
								"  strip_cpp_comments = function(str)",
								"  is_string_boundary = function(text, idx)",
								"  warn_func(s)",
								"  error_func(s)",
								"  pragma_func(pragma)",
								"  .error_func = function(e)",
								"  clear()",
								"  defined(k)",
								"  define(k, v)",
								"  undefine(k)",
								"  define_multiple(dict)",
								"  run(text, name)",
								"  error = function(text)",
								"  warn = function(text)",
								"  process_directive = function(command, elem, i)",
								"function(contents)",
								"  .completion_func = function(data, lines, new_state)",
								"  process_block = function(i, elem)",
								"  subs(text, blacklist_in, error, warn, nest_sub)",
								"  _set_state(other)",
								"  _get_state(other)",
								"  _result(arr, state)",
								"  _is_identifier(identifier)",
								"  _is_macro(macro)",
								"  _is_pp_special_token(tok)",
								"  _get_macro_info(k)",
								"  _remove_sentinels(new_text)",
								"  _handle_pragma(text, error, warn)",
								"function(match, pragma)",
								"  _concatenate_strings(text)",
								"  _handle_ops(text, error, warn)",
								"  _subs_simple(text, macro_name, blacklist_in, error, warn, nest_sub, start_idx)",
								"  _subs_macro(text, macro_name, blacklist, error, warn, nest_sub, start_idx)",
								"  _masked_eval(scr)",
								"  _eval(val, error, warn)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1742522114.99,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "debugger-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29794,
						"regions":
						{
						},
						"selection":
						[
							[
								13172,
								13143
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 439,
							"rulers":
							[
							],
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741992179.23,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true,
							"wrap_width": 0
						},
						"translation.x": 0.0,
						"translation.y": 13040.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/examples/gears.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9910,
						"regions":
						{
						},
						"selection":
						[
							[
								661,
								661
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 30,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741996672.83,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 185305,
						"regions":
						{
							"col_000000CC":
							{
								"flags": 16,
								"regions":
								[
									[
										48828,
										48843
									]
								],
								"scope": "col_000000CC"
							},
							"col_000000CC_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_000000CC_circle.png",
								"regions":
								[
									[
										48765,
										48765
									]
								],
								"scope": "col_gutter"
							},
							"col_000050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135899,
										135910
									]
								],
								"scope": "col_000050FF"
							},
							"col_000050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_000050FF_circle.png",
								"regions":
								[
									[
										135888,
										135888
									]
								],
								"scope": "col_gutter"
							},
							"col_0000A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136107,
										136119
									]
								],
								"scope": "col_0000A0FF"
							},
							"col_0000A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000A0FF_circle.png",
								"regions":
								[
									[
										136096,
										136096
									]
								],
								"scope": "col_gutter"
							},
							"col_005000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135848,
										135859
									]
								],
								"scope": "col_005000FF"
							},
							"col_005000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_005000FF_circle.png",
								"regions":
								[
									[
										135837,
										135837
									]
								],
								"scope": "col_gutter"
							},
							"col_005050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135950,
										135962
									]
								],
								"scope": "col_005050FF"
							},
							"col_005050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_005050FF_circle.png",
								"regions":
								[
									[
										135939,
										135939
									]
								],
								"scope": "col_gutter"
							},
							"col_00A000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136053,
										136065
									]
								],
								"scope": "col_00A000FF"
							},
							"col_00A000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00A000FF_circle.png",
								"regions":
								[
									[
										136042,
										136042
									]
								],
								"scope": "col_gutter"
							},
							"col_00A0A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136161,
										136175
									]
								],
								"scope": "col_00A0A0FF"
							},
							"col_00A0A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00A0A0FF_circle.png",
								"regions":
								[
									[
										136150,
										136150
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										49292,
										49297
									],
									[
										126015,
										126020
									],
									[
										135799,
										135809
									],
									[
										136003,
										136013
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										49278,
										49278
									],
									[
										125976,
										125976
									],
									[
										135788,
										135788
									],
									[
										135992,
										135992
									]
								],
								"scope": "col_gutter"
							},
							"col_4444DDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										48879,
										48886
									]
								],
								"scope": "col_4444DDFF"
							},
							"col_4444DDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4444DDFF_circle.png",
								"regions":
								[
									[
										48765,
										48765
									]
								],
								"scope": "col_gutter"
							},
							"col_500000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135823,
										135834
									]
								],
								"scope": "col_500000FF"
							},
							"col_500000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_500000FF_circle.png",
								"regions":
								[
									[
										135812,
										135812
									]
								],
								"scope": "col_gutter"
							},
							"col_500050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135924,
										135936
									]
								],
								"scope": "col_500050FF"
							},
							"col_500050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_500050FF_circle.png",
								"regions":
								[
									[
										135913,
										135913
									]
								],
								"scope": "col_gutter"
							},
							"col_505000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135873,
										135885
									]
								],
								"scope": "col_505000FF"
							},
							"col_505000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_505000FF_circle.png",
								"regions":
								[
									[
										135862,
										135862
									]
								],
								"scope": "col_gutter"
							},
							"col_505050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135976,
										135989
									]
								],
								"scope": "col_505050FF"
							},
							"col_505050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_505050FF_circle.png",
								"regions":
								[
									[
										135965,
										135965
									]
								],
								"scope": "col_gutter"
							},
							"col_7FFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										122834,
										122844
									]
								],
								"scope": "col_7FFFFFFF"
							},
							"col_7FFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7FFFFFFF_circle.png",
								"regions":
								[
									[
										122819,
										122819
									]
								],
								"scope": "col_gutter"
							},
							"col_A00000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136027,
										136039
									]
								],
								"scope": "col_A00000FF"
							},
							"col_A00000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A00000FF_circle.png",
								"regions":
								[
									[
										136016,
										136016
									]
								],
								"scope": "col_gutter"
							},
							"col_A000A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136133,
										136147
									]
								],
								"scope": "col_A000A0FF"
							},
							"col_A000A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A000A0FF_circle.png",
								"regions":
								[
									[
										136122,
										136122
									]
								],
								"scope": "col_gutter"
							},
							"col_A0A000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136079,
										136093
									]
								],
								"scope": "col_A0A000FF"
							},
							"col_A0A000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A0A000FF_circle.png",
								"regions":
								[
									[
										136068,
										136068
									]
								],
								"scope": "col_gutter"
							},
							"col_A0A0A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136189,
										136205
									]
								],
								"scope": "col_A0A0A0FF"
							},
							"col_A0A0A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A0A0A0FF_circle.png",
								"regions":
								[
									[
										136178,
										136178
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										122598,
										122608
									],
									[
										126022,
										126027
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										122545,
										122545
									],
									[
										125976,
										125976
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								131239,
								130472
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 4358,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1742520119.55,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 86907.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/cpp.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41019,
						"regions":
						{
						},
						"selection":
						[
							[
								8741,
								8741
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 298,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1742523987.25,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5387.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "ast-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38633,
						"regions":
						{
						},
						"selection":
						[
							[
								1126,
								1161
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 14,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1742522085.07,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/eagle/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37300,
						"regions":
						{
						},
						"selection":
						[
							[
								7745,
								7745
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 240,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1742521816.91,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4386.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/eagle/document.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10664,
						"regions":
						{
						},
						"selection":
						[
							[
								10472,
								10472
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 373,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1742521967.19,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7007.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 78524,
						"regions":
						{
						},
						"selection":
						[
							[
								35605,
								35612
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1221,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1742521001.27,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 23947.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "clang-list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8033,
						"regions":
						{
						},
						"selection":
						[
							[
								8033,
								8033
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 251,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1742521000.85,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4114.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/dom/css.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6945,
						"regions":
						{
						},
						"selection":
						[
							[
								2671,
								2671
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 102,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741992178.38,
							"tabs_extra_last_activated_sheet_index": 1,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2040.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/bpg/bpgdec8.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21381,
						"regions":
						{
						},
						"selection":
						[
							[
								629,
								648
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 22,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741989399.35,
							"tabs_extra_last_activated_sheet_index": 2,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1500.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/bpg/bpgdec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21380,
						"regions":
						{
						},
						"selection":
						[
							[
								8469,
								8562
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 272,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741989398.52,
							"tabs_extra_last_activated_sheet_index": 3,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5060.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "lib/container/multiMap.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4122,
						"regions":
						{
						},
						"selection":
						[
							[
								27,
								27
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741989543.7,
							"tabs_extra_last_activated_sheet_index": 4,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "quickjs/qjs-modules/lib/repl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 62945,
						"regions":
						{
							"col_000080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2097,
										2105
									]
								],
								"scope": "col_000080FF"
							},
							"col_000080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_000080FF_circle.png",
								"regions":
								[
									[
										2084,
										2084
									]
								],
								"scope": "col_gutter"
							},
							"col_0000DDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2353,
										2363
									]
								],
								"scope": "col_0000DDFF"
							},
							"col_0000DDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000DDFF_circle.png",
								"regions":
								[
									[
										2334,
										2334
									]
								],
								"scope": "col_gutter"
							},
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2090,
										2094
									],
									[
										2566,
										2570
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										2084,
										2084
									],
									[
										2560,
										2560
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2039,
										2044
									],
									[
										2047,
										2055
									],
									[
										2531,
										2536
									],
									[
										3221,
										3226
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										2033,
										2033
									],
									[
										2525,
										2525
									],
									[
										3210,
										3210
									]
								],
								"scope": "col_gutter"
							},
							"col_008080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2148,
										2156
									]
								],
								"scope": "col_008080FF"
							},
							"col_008080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008080FF_circle.png",
								"regions":
								[
									[
										2135,
										2135
									]
								],
								"scope": "col_gutter"
							},
							"col_00DD00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2287,
										2297
									]
								],
								"scope": "col_00DD00FF"
							},
							"col_00DD00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00DD00FF_circle.png",
								"regions":
								[
									[
										2267,
										2267
									]
								],
								"scope": "col_gutter"
							},
							"col_00DDDDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2420,
										2430
									]
								],
								"scope": "col_00DDDDFF"
							},
							"col_00DDDDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00DDDDFF_circle.png",
								"regions":
								[
									[
										2401,
										2401
									]
								],
								"scope": "col_gutter"
							},
							"col_00FFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2141,
										2145
									],
									[
										2601,
										2605
									]
								],
								"scope": "col_00FFFFFF"
							},
							"col_00FFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00FFFFFF_circle.png",
								"regions":
								[
									[
										2135,
										2135
									],
									[
										2595,
										2595
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1991,
										1996
									],
									[
										1999,
										2007
									],
									[
										2197,
										2207
									],
									[
										2223,
										2233
									],
									[
										2499,
										2504
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										1985,
										1985
									],
									[
										2184,
										2184
									],
									[
										2210,
										2210
									],
									[
										2493,
										2493
									]
								],
								"scope": "col_gutter"
							},
							"col_800000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2022,
										2030
									]
								],
								"scope": "col_800000FF"
							},
							"col_800000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_800000FF_circle.png",
								"regions":
								[
									[
										2010,
										2010
									]
								],
								"scope": "col_gutter"
							},
							"col_800080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2124,
										2132
									]
								],
								"scope": "col_800080FF"
							},
							"col_800080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_800080FF_circle.png",
								"regions":
								[
									[
										2108,
										2108
									]
								],
								"scope": "col_gutter"
							},
							"col_808000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2073,
										2081
									]
								],
								"scope": "col_808000FF"
							},
							"col_808000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_808000FF_circle.png",
								"regions":
								[
									[
										2058,
										2058
									]
								],
								"scope": "col_gutter"
							},
							"col_808080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2190,
										2194
									],
									[
										2216,
										2220
									],
									[
										2634,
										2638
									],
									[
										2650,
										2654
									]
								],
								"scope": "col_808080FF"
							},
							"col_808080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_808080FF_circle.png",
								"regions":
								[
									[
										2184,
										2184
									],
									[
										2210,
										2210
									],
									[
										2628,
										2628
									],
									[
										2644,
										2644
									]
								],
								"scope": "col_gutter"
							},
							"col_C0C0C0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2173,
										2181
									]
								],
								"scope": "col_C0C0C0FF"
							},
							"col_C0C0C0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_C0C0C0FF_circle.png",
								"regions":
								[
									[
										2159,
										2159
									]
								],
								"scope": "col_gutter"
							},
							"col_DD0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2254,
										2264
									]
								],
								"scope": "col_DD0000FF"
							},
							"col_DD0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD0000FF_circle.png",
								"regions":
								[
									[
										2236,
										2236
									]
								],
								"scope": "col_gutter"
							},
							"col_DD00DDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2388,
										2398
									]
								],
								"scope": "col_DD00DDFF"
							},
							"col_DD00DDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD00DDFF_circle.png",
								"regions":
								[
									[
										2366,
										2366
									]
								],
								"scope": "col_gutter"
							},
							"col_DD8800FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2321,
										2331
									]
								],
								"scope": "col_DD8800FF"
							},
							"col_DD8800FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD8800FF_circle.png",
								"regions":
								[
									[
										2300,
										2300
									]
								],
								"scope": "col_gutter"
							},
							"col_DDDDDDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2453,
										2463
									]
								],
								"scope": "col_DDDDDDFF"
							},
							"col_DDDDDDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DDDDDDFF_circle.png",
								"regions":
								[
									[
										2433,
										2433
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2016,
										2019
									],
									[
										2516,
										2519
									],
									[
										3342,
										3345
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										2010,
										2010
									],
									[
										2510,
										2510
									],
									[
										3332,
										3332
									]
								],
								"scope": "col_gutter"
							},
							"col_FF00FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2114,
										2121
									],
									[
										2582,
										2589
									]
								],
								"scope": "col_FF00FFFF"
							},
							"col_FF00FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF00FFFF_circle.png",
								"regions":
								[
									[
										2108,
										2108
									],
									[
										2576,
										2576
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2064,
										2070
									],
									[
										2548,
										2554
									]
								],
								"scope": "col_FFFF00FF"
							},
							"col_FFFF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFF00FF_circle.png",
								"regions":
								[
									[
										2058,
										2058
									],
									[
										2542,
										2542
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2165,
										2170
									],
									[
										2617,
										2622
									],
									[
										3359,
										3364
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										2159,
										2159
									],
									[
										2611,
										2611
									],
									[
										3348,
										3348
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1742520999.95,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 41486.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "debugger-client.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10822,
						"regions":
						{
						},
						"selection":
						[
							[
								10505,
								10505
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 384,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741989287.37,
							"tabs_extra_last_activated_sheet_index": 7,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6562.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "test-video.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26264,
						"regions":
						{
						},
						"selection":
						[
							[
								5485,
								5489
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 134,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741992176.86,
							"tabs_extra_last_activated_sheet_index": 7,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3301.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 300.0
	},
	"output.Debugger Console":
	{
		"height": 300.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"os-he",
				"os-helpers.js"
			],
			[
				"clang- js",
				"clang-list.js"
			],
			[
				"",
				"clang-ast.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"lib/util",
				"lib/util.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"cpp.js",
				"lib/cpp.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"async/deb",
				"lib/async/debounce.js"
			],
			[
				"inspect.c",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"propery",
				"quickjs/qjs-modules/include/property-enumeration.h"
			],
			[
				"roperty",
				"quickjs/qjs-modules/src/property-enumeration.c"
			],
			[
				"property-",
				"quickjs/qjs-modules/include/property-enumeration.h"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"compile_comm",
				"compile_commands.js"
			],
			[
				"lib/compileCom",
				"lib/compileCommand.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"rpc.js",
				"quickjs/qjs-net/js/rpc.js"
			],
			[
				"draw",
				"draw.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"async/web",
				"lib/async/websocket.js"
			],
			[
				"websocket",
				"webSocket.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"test-vide",
				"test-video.js"
			],
			[
				"test-alea",
				"test-alea.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"debugger.ht",
				"debugger.html"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"utils.h",
				"quickjs/qjs-modules/include/utils.h"
			],
			[
				"quickjs-socket",
				"quickjs/qjs-modules/quickjs-sockets.c"
			],
			[
				"debugger-clie",
				"debugger-client.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-nanovg",
				"test-nanovg.js"
			],
			[
				"repeater",
				"lib/repeater/repeater.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"quickjs.c",
				"quickjs.c"
			],
			[
				"test-repea",
				"test-repeater.js"
			],
			[
				"debugger.htm",
				"debugger.html"
			],
			[
				"debugger",
				"debuggerprotocol.js"
			],
			[
				"portmidi",
				"/usr/include/portmidi.h"
			],
			[
				"portmidi.js",
				"portmidi.js"
			],
			[
				"portmidi.h",
				"/usr/include/portmidi.h"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-helpers",
				"os-helpers.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"portaudio.h",
				"/usr/include/portaudio.h"
			],
			[
				"portaudio",
				"portaudio.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"portaudio.js",
				"portaudio.js"
			],
			[
				"portaudio2.js",
				"portaudio2.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"webka",
				"webakeit-telegram.js"
			],
			[
				"xml-she",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				".html",
				"fire.html"
			],
			[
				"numbers2",
				"numbers2.c"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"splines",
				"lib/geom/splines.js"
			],
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"ointlist",
				"lib/geom/pointList.js"
			],
			[
				"events.js",
				"lib/async/events.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"draw.css",
				"static/css/draw.css"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"autoStore",
				"lib/autoStore.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"svg-box",
				"svg-box.js"
			],
			[
				"fd-graph",
				"lib/fd-graph.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"draw-util",
				"draw-utils.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"graph.js",
				"lib/geom/graph.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"quickjs-mysql.c",
				"quickjs/qjs-modules/quickjs-mysql.c"
			],
			[
				"mailcow-db",
				"mailcow-db.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"workertest",
				"workertest.js"
			],
			[
				"promise-wor",
				"promise-worker.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"noise.js",
				"noise.js"
			],
			[
				"noise",
				"noise.html"
			],
			[
				"dire",
				"directory.html"
			],
			[
				"upload",
				"upload.html"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"landing",
				"landing.html"
			],
			[
				"fire",
				"fire.html"
			],
			[
				"filelist",
				"filelist.html"
			],
			[
				"coil",
				"coil.html"
			],
			[
				"inde",
				"index.html"
			],
			[
				"404.ht",
				"404.html"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"direcot",
				"directory.html"
			],
			[
				"direc",
				"directory.html"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"smd.jy",
				"quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll"
			],
			[
				"via.js",
				"lib/eagle/components/via.js"
			],
			[
				"hole.js",
				"lib/eagle/components/hole.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"polygon",
				"lib/eagle/components/polygon.js"
			],
			[
				"polygon.js",
				"lib/geom/polygon.js"
			],
			[
				"symbol",
				"lib/eagle/components/symbol.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"components/sym",
				"lib/eagle/components/symbol.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"github-user",
				"github-userscript.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 230.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
