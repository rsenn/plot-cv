{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pathTo",
				"pathToPointIterator"
			],
			[
				"Element",
				"ElementTransformMatrix"
			],
			[
				"Elemen",
				"ElementTransformList"
			],
			[
				"getTra",
				"getTransformationList"
			],
			[
				"serialize",
				"serializeToString"
			],
			[
				"unitConv",
				"unitConvToMM"
			],
			[
				"lazy",
				"lazyProperties"
			],
			[
				"ex",
				"expansion"
			],
			[
				"isArra",
				"isArrayBuffer"
			],
			[
				"Extra",
				"ExtractRotation"
			],
			[
				"tra",
				"transformation"
			],
			[
				"define",
				"defineProperties"
			],
			[
				"getters",
				"gettersSetters"
			],
			[
				"circui",
				"circuitFilePath"
			],
			[
				"Conn",
				"ConnectionPoint"
			],
			[
				"parseCom",
				"parseCommentOrEmpty"
			],
			[
				"circ",
				"circuitFilePath"
			],
			[
				"built",
				"builtin_attr"
			],
			[
				"dep",
				"depthOrPred"
			],
			[
				"exte",
				"extendAsyncGenerator"
			],
			[
				"extend",
				"extendArray"
			],
			[
				"allo",
				"allowedDirs"
			],
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  parseSVGPath(s)\n  parseValues = args =>\n  (_, c, args) =>\n  splitPath(ps)\n  pathToAbsolute(path)\n  pathToPoints(path)\n  isUpper = s =>\nMakePoint=(x,y) =>\n  n =>\n  pointsToAbsolute(it)\n  isUpper = s =>\n  save(filename)\nNumericArgs(s, t = a => a)\n  deref = p => obj =>\n(o, k) =>\nParentPaths(p)\nCumulativePaths(p)\nAllParents(elem)\nAllTransforms(elem, getter = getTransformationMatrix)\nElementTransformList(elem)\nElementTransformMatrix(elem)\nGetXY(elem)\nGetPoints(elem)\n  c =>\n  a =>\n([x, y]) =>\nGetTransformedPoints(elem)\nGetMatrix(elem)\nPositionedElements(svgElem = svg, skip)\n() =>\n  (v, p) =>\n  e =>\n  n =>\nHasParent(elem, other)\nGetBounds(svgElem = svg)\nProcessPath(d)\n  unitConvToMM(value)\n  pc: mm =>\n  px: mm =>\n  pt: mm =>\n  in: mm =>\n  mil: mm =>\n  cm: mm =>\n  mm: mm =>\n  m: mm =>\n  unitConv(unit)\n  value =>\n  unitConvTo(value, unit)\n  getViewBox(svgElem = svg)\nXML2String(elem)\n  getWidthHeight(svgElem = svg, t = a => a)\n  getTransformationList(e)\n  getTransformationMatrix(e)\n  main(...args)\n  (_x, _y, opts) =>\n  () =>\n  a =>\n  a =>\n  a =>\n  print = (file, ...args) =>\n  print = (file, ...args) =>\n  u =>\n(a, i) =>",
			"settings":
			{
				"buffer_size": 1128,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					747,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					748,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1485,
								1509
							],
							[
								1729,
								1750
							],
							[
								1976,
								1992
							],
							[
								2546,
								2568
							],
							[
								2867,
								2897
							],
							[
								3057,
								3084
							],
							[
								3221,
								3235
							],
							[
								3337,
								3355
							],
							[
								3766,
								3770
							],
							[
								3870,
								3900
							],
							[
								3952,
								3966
							],
							[
								4990,
								5004
							],
							[
								5255,
								5291
							],
							[
								5402,
								5421
							],
							[
								5431,
								5440
							],
							[
								5454,
								5478
							],
							[
								5564,
								5592
							],
							[
								5682,
								5708
							],
							[
								5868,
								5930
							],
							[
								6105,
								6140
							],
							[
								6232,
								6269
							],
							[
								6350,
								6370
							],
							[
								6446,
								6470
							],
							[
								7231,
								7235
							],
							[
								7260,
								7264
							],
							[
								7329,
								7340
							],
							[
								7545,
								7580
							],
							[
								7707,
								7731
							],
							[
								7787,
								7836
							],
							[
								7851,
								7856
							],
							[
								7984,
								7994
							],
							[
								8107,
								8112
							],
							[
								8134,
								8138
							],
							[
								8235,
								8266
							],
							[
								8555,
								8588
							],
							[
								8988,
								9012
							],
							[
								9367,
								9395
							],
							[
								10011,
								10020
							],
							[
								10037,
								10046
							],
							[
								10078,
								10087
							],
							[
								10106,
								10115
							],
							[
								10129,
								10139
							],
							[
								10155,
								10164
							],
							[
								10178,
								10187
							],
							[
								10194,
								10202
							],
							[
								10217,
								10240
							],
							[
								10251,
								10260
							],
							[
								10305,
								10337
							],
							[
								10415,
								10449
							],
							[
								10645,
								10670
							],
							[
								10727,
								10777
							],
							[
								11047,
								11080
							],
							[
								11180,
								11215
							],
							[
								11292,
								11314
							],
							[
								11931,
								11949
							],
							[
								11992,
								11998
							],
							[
								12032,
								12037
							],
							[
								12079,
								12084
							],
							[
								12167,
								12172
							],
							[
								12467,
								12493
							],
							[
								12594,
								12620
							],
							[
								13820,
								13824
							],
							[
								13914,
								13923
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AQAAAAAAAAAAAAAAaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					749,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1485,
								1509
							],
							[
								1729,
								1750
							],
							[
								1976,
								1992
							],
							[
								2546,
								2568
							],
							[
								2867,
								2897
							],
							[
								3057,
								3084
							],
							[
								3221,
								3235
							],
							[
								3337,
								3355
							],
							[
								3766,
								3770
							],
							[
								3870,
								3900
							],
							[
								3952,
								3966
							],
							[
								4990,
								5004
							],
							[
								5255,
								5291
							],
							[
								5402,
								5421
							],
							[
								5431,
								5440
							],
							[
								5454,
								5478
							],
							[
								5564,
								5592
							],
							[
								5682,
								5708
							],
							[
								5868,
								5930
							],
							[
								6105,
								6140
							],
							[
								6232,
								6269
							],
							[
								6350,
								6370
							],
							[
								6446,
								6470
							],
							[
								7231,
								7235
							],
							[
								7260,
								7264
							],
							[
								7329,
								7340
							],
							[
								7545,
								7580
							],
							[
								7722,
								7746
							],
							[
								7802,
								7851
							],
							[
								7866,
								7871
							],
							[
								7999,
								8009
							],
							[
								8122,
								8127
							],
							[
								8149,
								8153
							],
							[
								8250,
								8281
							],
							[
								8570,
								8603
							],
							[
								9003,
								9027
							],
							[
								9382,
								9410
							],
							[
								10026,
								10035
							],
							[
								10052,
								10061
							],
							[
								10093,
								10102
							],
							[
								10121,
								10130
							],
							[
								10144,
								10154
							],
							[
								10170,
								10179
							],
							[
								10193,
								10202
							],
							[
								10209,
								10217
							],
							[
								10232,
								10255
							],
							[
								10266,
								10275
							],
							[
								10320,
								10352
							],
							[
								10430,
								10464
							],
							[
								10660,
								10685
							],
							[
								10742,
								10792
							],
							[
								11062,
								11095
							],
							[
								11195,
								11230
							],
							[
								11307,
								11329
							],
							[
								11946,
								11964
							],
							[
								12007,
								12013
							],
							[
								12047,
								12052
							],
							[
								12094,
								12099
							],
							[
								12182,
								12187
							],
							[
								12482,
								12508
							],
							[
								12609,
								12635
							],
							[
								13835,
								13839
							],
							[
								13929,
								13938
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					750,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1485,
								1509
							],
							[
								1729,
								1750
							],
							[
								1976,
								1992
							],
							[
								2546,
								2568
							],
							[
								2867,
								2897
							],
							[
								3057,
								3084
							],
							[
								3221,
								3235
							],
							[
								3337,
								3355
							],
							[
								3766,
								3770
							],
							[
								3870,
								3900
							],
							[
								3952,
								3966
							],
							[
								4990,
								5004
							],
							[
								5255,
								5291
							],
							[
								5402,
								5421
							],
							[
								5431,
								5440
							],
							[
								5454,
								5478
							],
							[
								5564,
								5592
							],
							[
								5682,
								5708
							],
							[
								5868,
								5930
							],
							[
								6105,
								6140
							],
							[
								6232,
								6269
							],
							[
								6350,
								6370
							],
							[
								6446,
								6470
							],
							[
								7231,
								7235
							],
							[
								7260,
								7264
							],
							[
								7329,
								7340
							],
							[
								7545,
								7580
							],
							[
								7722,
								7746
							],
							[
								7802,
								7851
							],
							[
								7866,
								7871
							],
							[
								7999,
								8009
							],
							[
								8122,
								8127
							],
							[
								8149,
								8153
							],
							[
								8250,
								8281
							],
							[
								8570,
								8603
							],
							[
								9003,
								9027
							],
							[
								9382,
								9410
							],
							[
								10026,
								10035
							],
							[
								10052,
								10061
							],
							[
								10093,
								10102
							],
							[
								10121,
								10130
							],
							[
								10144,
								10154
							],
							[
								10170,
								10179
							],
							[
								10193,
								10202
							],
							[
								10209,
								10217
							],
							[
								10232,
								10255
							],
							[
								10266,
								10275
							],
							[
								10320,
								10352
							],
							[
								10430,
								10464
							],
							[
								10660,
								10685
							],
							[
								10742,
								10792
							],
							[
								11062,
								11095
							],
							[
								11195,
								11230
							],
							[
								11307,
								11329
							],
							[
								11946,
								11964
							],
							[
								12007,
								12013
							],
							[
								12047,
								12052
							],
							[
								12094,
								12099
							],
							[
								12182,
								12187
							],
							[
								12482,
								12508
							],
							[
								12609,
								12635
							],
							[
								13835,
								13839
							],
							[
								13929,
								13938
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					751,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					752,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1485,
								1509
							],
							[
								1729,
								1750
							],
							[
								1976,
								1992
							],
							[
								2546,
								2568
							],
							[
								2867,
								2897
							],
							[
								3057,
								3084
							],
							[
								3221,
								3235
							],
							[
								3337,
								3355
							],
							[
								3766,
								3770
							],
							[
								3870,
								3900
							],
							[
								3952,
								3966
							],
							[
								4990,
								5004
							],
							[
								5255,
								5291
							],
							[
								5402,
								5421
							],
							[
								5431,
								5440
							],
							[
								5454,
								5478
							],
							[
								5564,
								5592
							],
							[
								5682,
								5708
							],
							[
								5868,
								5930
							],
							[
								6105,
								6140
							],
							[
								6232,
								6269
							],
							[
								6350,
								6370
							],
							[
								6446,
								6470
							],
							[
								7231,
								7235
							],
							[
								7260,
								7264
							],
							[
								7329,
								7340
							],
							[
								7545,
								7580
							],
							[
								7722,
								7746
							],
							[
								7802,
								7851
							],
							[
								7866,
								7871
							],
							[
								7999,
								8009
							],
							[
								8122,
								8127
							],
							[
								8149,
								8153
							],
							[
								8250,
								8281
							],
							[
								8570,
								8603
							],
							[
								9003,
								9027
							],
							[
								9382,
								9410
							],
							[
								10026,
								10035
							],
							[
								10052,
								10061
							],
							[
								10093,
								10102
							],
							[
								10121,
								10130
							],
							[
								10144,
								10154
							],
							[
								10170,
								10179
							],
							[
								10193,
								10202
							],
							[
								10209,
								10217
							],
							[
								10232,
								10255
							],
							[
								10266,
								10275
							],
							[
								10320,
								10352
							],
							[
								10430,
								10464
							],
							[
								10660,
								10685
							],
							[
								10742,
								10792
							],
							[
								11062,
								11095
							],
							[
								11195,
								11230
							],
							[
								11307,
								11329
							],
							[
								11946,
								11964
							],
							[
								12007,
								12013
							],
							[
								12047,
								12052
							],
							[
								12094,
								12099
							],
							[
								12182,
								12187
							],
							[
								12482,
								12508
							],
							[
								12609,
								12635
							],
							[
								13835,
								13839
							],
							[
								13929,
								13938
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AQAAAAAAAAAAAAAAaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					753,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1485,
								1509
							],
							[
								1729,
								1750
							],
							[
								1976,
								1992
							],
							[
								2546,
								2568
							],
							[
								2867,
								2897
							],
							[
								3057,
								3084
							],
							[
								3221,
								3235
							],
							[
								3337,
								3355
							],
							[
								3766,
								3770
							],
							[
								3870,
								3900
							],
							[
								3952,
								3966
							],
							[
								4990,
								5004
							],
							[
								5255,
								5291
							],
							[
								5402,
								5421
							],
							[
								5431,
								5440
							],
							[
								5454,
								5478
							],
							[
								5564,
								5592
							],
							[
								5682,
								5708
							],
							[
								5868,
								5930
							],
							[
								6105,
								6140
							],
							[
								6232,
								6269
							],
							[
								6350,
								6370
							],
							[
								6446,
								6470
							],
							[
								7244,
								7248
							],
							[
								7273,
								7277
							],
							[
								7342,
								7353
							],
							[
								7558,
								7593
							],
							[
								7735,
								7759
							],
							[
								7815,
								7864
							],
							[
								7879,
								7884
							],
							[
								8012,
								8022
							],
							[
								8135,
								8140
							],
							[
								8162,
								8166
							],
							[
								8263,
								8294
							],
							[
								8583,
								8616
							],
							[
								9016,
								9040
							],
							[
								9395,
								9423
							],
							[
								10039,
								10048
							],
							[
								10065,
								10074
							],
							[
								10106,
								10115
							],
							[
								10134,
								10143
							],
							[
								10157,
								10167
							],
							[
								10183,
								10192
							],
							[
								10206,
								10215
							],
							[
								10222,
								10230
							],
							[
								10245,
								10268
							],
							[
								10279,
								10288
							],
							[
								10333,
								10365
							],
							[
								10443,
								10477
							],
							[
								10673,
								10698
							],
							[
								10755,
								10805
							],
							[
								11075,
								11108
							],
							[
								11208,
								11243
							],
							[
								11320,
								11342
							],
							[
								11959,
								11977
							],
							[
								12020,
								12026
							],
							[
								12060,
								12065
							],
							[
								12107,
								12112
							],
							[
								12195,
								12200
							],
							[
								12495,
								12521
							],
							[
								12622,
								12648
							],
							[
								13848,
								13852
							],
							[
								13942,
								13951
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					754,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					755,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1485,
								1509
							],
							[
								1729,
								1750
							],
							[
								1976,
								1992
							],
							[
								2546,
								2568
							],
							[
								2867,
								2897
							],
							[
								3057,
								3084
							],
							[
								3221,
								3235
							],
							[
								3337,
								3355
							],
							[
								3766,
								3770
							],
							[
								3870,
								3900
							],
							[
								3952,
								3966
							],
							[
								4990,
								5004
							],
							[
								5255,
								5291
							],
							[
								5402,
								5421
							],
							[
								5431,
								5440
							],
							[
								5454,
								5478
							],
							[
								5564,
								5592
							],
							[
								5682,
								5708
							],
							[
								5868,
								5930
							],
							[
								6105,
								6140
							],
							[
								6232,
								6269
							],
							[
								6350,
								6370
							],
							[
								6446,
								6470
							],
							[
								7244,
								7248
							],
							[
								7273,
								7277
							],
							[
								7342,
								7353
							],
							[
								7558,
								7593
							],
							[
								7735,
								7759
							],
							[
								7815,
								7864
							],
							[
								7879,
								7884
							],
							[
								8012,
								8022
							],
							[
								8135,
								8140
							],
							[
								8162,
								8166
							],
							[
								8263,
								8294
							],
							[
								8583,
								8616
							],
							[
								9016,
								9040
							],
							[
								9395,
								9423
							],
							[
								10039,
								10048
							],
							[
								10065,
								10074
							],
							[
								10106,
								10115
							],
							[
								10134,
								10143
							],
							[
								10157,
								10167
							],
							[
								10183,
								10192
							],
							[
								10206,
								10215
							],
							[
								10222,
								10230
							],
							[
								10245,
								10268
							],
							[
								10279,
								10288
							],
							[
								10333,
								10365
							],
							[
								10443,
								10477
							],
							[
								10673,
								10698
							],
							[
								10755,
								10805
							],
							[
								11075,
								11108
							],
							[
								11208,
								11243
							],
							[
								11320,
								11342
							],
							[
								11959,
								11977
							],
							[
								12020,
								12026
							],
							[
								12060,
								12065
							],
							[
								12107,
								12112
							],
							[
								12195,
								12200
							],
							[
								12495,
								12521
							],
							[
								12622,
								12648
							],
							[
								13848,
								13852
							],
							[
								13942,
								13951
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AwAAAAAAAAAAAAAAaAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgEAAAgIHBhcnNlU1ZHUGF0aChzKQogIHBhcnNlVmFsdWVzID0gYXJncyA9PgogIChfLCBjLCBhcmdzKSA9PgogIHNwbGl0UGF0aChwcykKICBwYXRoVG9BYnNvbHV0ZShwYXRoKQogIHBhdGhUb1BvaW50cyhwYXRoKQogIGlzVXBwZXIgPSBzID0+Ck1ha2VQb2ludD0oeCx5KSA9PgogIG4gPT4KICBwb2ludHNUb0Fic29sdXRlKGl0KQogIGlzVXBwZXIgPSBzID0+CiAgc2F2ZShmaWxlbmFtZSkKTnVtZXJpY0FyZ3MocywgdCA9IGEgPT4gYSkKICBkZXJlZiA9IHAgPT4gb2JqID0+CihvLCBrKSA9PgpQYXJlbnRQYXRocyhwKQpDdW11bGF0aXZlUGF0aHMocCkKQWxsUGFyZW50cyhlbGVtKQpBbGxUcmFuc2Zvcm1zKGVsZW0sIGdldHRlciA9IGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KQpFbGVtZW50VHJhbnNmb3JtTGlzdChlbGVtKQpFbGVtZW50VHJhbnNmb3JtTWF0cml4KGVsZW0pCkdldFhZKGVsZW0pCkdldFBvaW50cyhlbGVtKQogIGMgPT4KICBhID0+CihbeCwgeV0pID0+CkdldFRyYW5zZm9ybWVkUG9pbnRzKGVsZW0pCkdldE1hdHJpeChlbGVtKQpQb3NpdGlvbmVkRWxlbWVudHMoc3ZnRWxlbSA9IHN2Zywgc2tpcCkKKCkgPT4KICAodiwgcCkgPT4KICBlID0+CiAgbiA9PgpIYXNQYXJlbnQoZWxlbSwgb3RoZXIpCkdldEJvdW5kcyhzdmdFbGVtID0gc3ZnKQpQcm9jZXNzUGF0aChkKQogIHVuaXRDb252VG9NTSh2YWx1ZSkKICBwYzogbW0gPT4KICBweDogbW0gPT4KICBwdDogbW0gPT4KICBpbjogbW0gPT4KICBtaWw6IG1tID0+CiAgY206IG1tID0+CiAgbW06IG1tID0+CiAgbTogbW0gPT4KICB1bml0Q29udih1bml0KQogIHZhbHVlID0+CiAgdW5pdENvbnZUbyh2YWx1ZSwgdW5pdCkKICBnZXRWaWV3Qm94KHN2Z0VsZW0gPSBzdmcpClhNTDJTdHJpbmcoZWxlbSkKICBnZXRXaWR0aEhlaWdodChzdmdFbGVtID0gc3ZnLCB0ID0gYSA9PiBhKQogIGdldFRyYW5zZm9ybWF0aW9uTGlzdChlKQogIGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KGUpCiAgbWFpbiguLi5hcmdzKQogIChfeCwgX3ksIG9wdHMpID0+CiAgKCkgPT4KICBhID0+CiAgYSA9PgogIGEgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHByaW50ID0gKGZpbGUsIC4uLmFyZ3MpID0+CiAgdSA9PgooYSwgaSkgPT4AAAAAAAAAAGgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					756,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1485,
								1509
							],
							[
								1729,
								1750
							],
							[
								1976,
								1992
							],
							[
								2546,
								2568
							],
							[
								2867,
								2897
							],
							[
								3057,
								3084
							],
							[
								3221,
								3235
							],
							[
								3337,
								3355
							],
							[
								3766,
								3770
							],
							[
								3870,
								3900
							],
							[
								3952,
								3966
							],
							[
								4990,
								5004
							],
							[
								5255,
								5291
							],
							[
								5402,
								5421
							],
							[
								5431,
								5440
							],
							[
								5454,
								5478
							],
							[
								5564,
								5592
							],
							[
								5682,
								5708
							],
							[
								5868,
								5930
							],
							[
								6105,
								6140
							],
							[
								6232,
								6269
							],
							[
								6350,
								6370
							],
							[
								6446,
								6470
							],
							[
								7247,
								7251
							],
							[
								7276,
								7280
							],
							[
								7345,
								7356
							],
							[
								7561,
								7596
							],
							[
								7738,
								7762
							],
							[
								7818,
								7867
							],
							[
								7882,
								7887
							],
							[
								8015,
								8025
							],
							[
								8138,
								8143
							],
							[
								8165,
								8169
							],
							[
								8266,
								8297
							],
							[
								8586,
								8619
							],
							[
								9019,
								9043
							],
							[
								9398,
								9426
							],
							[
								10042,
								10051
							],
							[
								10068,
								10077
							],
							[
								10109,
								10118
							],
							[
								10137,
								10146
							],
							[
								10160,
								10170
							],
							[
								10186,
								10195
							],
							[
								10209,
								10218
							],
							[
								10225,
								10233
							],
							[
								10248,
								10271
							],
							[
								10282,
								10291
							],
							[
								10336,
								10368
							],
							[
								10446,
								10480
							],
							[
								10676,
								10701
							],
							[
								10758,
								10808
							],
							[
								11078,
								11111
							],
							[
								11211,
								11246
							],
							[
								11323,
								11345
							],
							[
								11962,
								11980
							],
							[
								12023,
								12029
							],
							[
								12063,
								12068
							],
							[
								12110,
								12115
							],
							[
								12198,
								12203
							],
							[
								12498,
								12524
							],
							[
								12625,
								12651
							],
							[
								13851,
								13855
							],
							[
								13945,
								13954
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAQAACAgcGFyc2VTVkdQYXRoKHMpCiAgcGFyc2VWYWx1ZXMgPSBhcmdzID0+CiAgKF8sIGMsIGFyZ3MpID0+CiAgc3BsaXRQYXRoKHBzKQogIHBhdGhUb0Fic29sdXRlKHBhdGgpCiAgcGF0aFRvUG9pbnRzKHBhdGgpCiAgaXNVcHBlciA9IHMgPT4KTWFrZVBvaW50PSh4LHkpID0+CiAgbiA9PgogIHBvaW50c1RvQWJzb2x1dGUoaXQpCiAgaXNVcHBlciA9IHMgPT4KICBzYXZlKGZpbGVuYW1lKQpOdW1lcmljQXJncyhzLCB0ID0gYSA9PiBhKQogIGRlcmVmID0gcCA9PiBvYmogPT4KKG8sIGspID0+ClBhcmVudFBhdGhzKHApCkN1bXVsYXRpdmVQYXRocyhwKQpBbGxQYXJlbnRzKGVsZW0pCkFsbFRyYW5zZm9ybXMoZWxlbSwgZ2V0dGVyID0gZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXgpCkVsZW1lbnRUcmFuc2Zvcm1MaXN0KGVsZW0pCkVsZW1lbnRUcmFuc2Zvcm1NYXRyaXgoZWxlbSkKR2V0WFkoZWxlbSkKR2V0UG9pbnRzKGVsZW0pCiAgYyA9PgogIGEgPT4KKFt4LCB5XSkgPT4KR2V0VHJhbnNmb3JtZWRQb2ludHMoZWxlbSkKR2V0TWF0cml4KGVsZW0pClBvc2l0aW9uZWRFbGVtZW50cyhzdmdFbGVtID0gc3ZnLCBza2lwKQooKSA9PgogICh2LCBwKSA9PgogIGUgPT4KICBuID0+Ckhhc1BhcmVudChlbGVtLCBvdGhlcikKR2V0Qm91bmRzKHN2Z0VsZW0gPSBzdmcpClByb2Nlc3NQYXRoKGQpCiAgdW5pdENvbnZUb01NKHZhbHVlKQogIHBjOiBtbSA9PgogIHB4OiBtbSA9PgogIHB0OiBtbSA9PgogIGluOiBtbSA9PgogIG1pbDogbW0gPT4KICBjbTogbW0gPT4KICBtbTogbW0gPT4KICBtOiBtbSA9PgogIHVuaXRDb252KHVuaXQpCiAgdmFsdWUgPT4KICB1bml0Q29udlRvKHZhbHVlLCB1bml0KQogIGdldFZpZXdCb3goc3ZnRWxlbSA9IHN2ZykKWE1MMlN0cmluZyhlbGVtKQogIGdldFdpZHRoSGVpZ2h0KHN2Z0VsZW0gPSBzdmcsIHQgPSBhID0+IGEpCiAgZ2V0VHJhbnNmb3JtYXRpb25MaXN0KGUpCiAgZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXgoZSkKICBtYWluKC4uLmFyZ3MpCiAgKF94LCBfeSwgb3B0cykgPT4KICAoKSA9PgogIGEgPT4KICBhID0+CiAgYSA9PgogIHByaW50ID0gKGZpbGUsIC4uLmFyZ3MpID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICB1ID0+CihhLCBpKSA9PgAAAAAAAAAAaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					757,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					758,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1485,
								1509
							],
							[
								1729,
								1750
							],
							[
								1976,
								1992
							],
							[
								2546,
								2568
							],
							[
								2867,
								2897
							],
							[
								3057,
								3084
							],
							[
								3221,
								3235
							],
							[
								3337,
								3355
							],
							[
								3766,
								3770
							],
							[
								3870,
								3900
							],
							[
								3952,
								3966
							],
							[
								4990,
								5004
							],
							[
								5255,
								5291
							],
							[
								5402,
								5421
							],
							[
								5431,
								5440
							],
							[
								5454,
								5478
							],
							[
								5564,
								5592
							],
							[
								5682,
								5708
							],
							[
								5868,
								5930
							],
							[
								6105,
								6140
							],
							[
								6232,
								6269
							],
							[
								6350,
								6370
							],
							[
								6446,
								6470
							],
							[
								7247,
								7251
							],
							[
								7276,
								7280
							],
							[
								7345,
								7356
							],
							[
								7561,
								7596
							],
							[
								7738,
								7762
							],
							[
								7818,
								7867
							],
							[
								7882,
								7887
							],
							[
								8015,
								8025
							],
							[
								8138,
								8143
							],
							[
								8165,
								8169
							],
							[
								8266,
								8297
							],
							[
								8586,
								8619
							],
							[
								9019,
								9043
							],
							[
								9398,
								9426
							],
							[
								10042,
								10051
							],
							[
								10068,
								10077
							],
							[
								10109,
								10118
							],
							[
								10137,
								10146
							],
							[
								10160,
								10170
							],
							[
								10186,
								10195
							],
							[
								10209,
								10218
							],
							[
								10225,
								10233
							],
							[
								10248,
								10271
							],
							[
								10282,
								10291
							],
							[
								10336,
								10368
							],
							[
								10446,
								10480
							],
							[
								10676,
								10701
							],
							[
								10758,
								10808
							],
							[
								11078,
								11111
							],
							[
								11211,
								11246
							],
							[
								11323,
								11345
							],
							[
								11962,
								11980
							],
							[
								12023,
								12029
							],
							[
								12063,
								12068
							],
							[
								12110,
								12115
							],
							[
								12198,
								12203
							],
							[
								12498,
								12524
							],
							[
								12625,
								12651
							],
							[
								13851,
								13855
							],
							[
								13945,
								13954
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AQAAAAAAAAAAAAAAaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					759,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3773,
								3777
							],
							[
								3877,
								3907
							],
							[
								3959,
								3973
							],
							[
								4997,
								5011
							],
							[
								5262,
								5298
							],
							[
								5409,
								5428
							],
							[
								5438,
								5447
							],
							[
								5461,
								5485
							],
							[
								5571,
								5599
							],
							[
								5689,
								5715
							],
							[
								5875,
								5937
							],
							[
								6112,
								6147
							],
							[
								6239,
								6276
							],
							[
								6357,
								6377
							],
							[
								6453,
								6477
							],
							[
								7254,
								7258
							],
							[
								7283,
								7287
							],
							[
								7352,
								7363
							],
							[
								7568,
								7603
							],
							[
								7745,
								7769
							],
							[
								7825,
								7874
							],
							[
								7889,
								7894
							],
							[
								8022,
								8032
							],
							[
								8145,
								8150
							],
							[
								8172,
								8176
							],
							[
								8273,
								8304
							],
							[
								8593,
								8626
							],
							[
								9026,
								9050
							],
							[
								9405,
								9433
							],
							[
								10049,
								10058
							],
							[
								10075,
								10084
							],
							[
								10116,
								10125
							],
							[
								10144,
								10153
							],
							[
								10167,
								10177
							],
							[
								10193,
								10202
							],
							[
								10216,
								10225
							],
							[
								10232,
								10240
							],
							[
								10255,
								10278
							],
							[
								10289,
								10298
							],
							[
								10343,
								10375
							],
							[
								10453,
								10487
							],
							[
								10683,
								10708
							],
							[
								10765,
								10815
							],
							[
								11085,
								11118
							],
							[
								11218,
								11253
							],
							[
								11330,
								11352
							],
							[
								11969,
								11987
							],
							[
								12030,
								12036
							],
							[
								12070,
								12075
							],
							[
								12117,
								12122
							],
							[
								12205,
								12210
							],
							[
								12505,
								12531
							],
							[
								12632,
								12658
							],
							[
								13858,
								13862
							],
							[
								13952,
								13961
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					760,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					761,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3773,
								3777
							],
							[
								3877,
								3907
							],
							[
								3959,
								3973
							],
							[
								4997,
								5011
							],
							[
								5262,
								5298
							],
							[
								5409,
								5428
							],
							[
								5438,
								5447
							],
							[
								5461,
								5485
							],
							[
								5571,
								5599
							],
							[
								5689,
								5715
							],
							[
								5875,
								5937
							],
							[
								6112,
								6147
							],
							[
								6239,
								6276
							],
							[
								6357,
								6377
							],
							[
								6453,
								6477
							],
							[
								7254,
								7258
							],
							[
								7283,
								7287
							],
							[
								7352,
								7363
							],
							[
								7568,
								7603
							],
							[
								7745,
								7769
							],
							[
								7825,
								7874
							],
							[
								7889,
								7894
							],
							[
								8022,
								8032
							],
							[
								8145,
								8150
							],
							[
								8172,
								8176
							],
							[
								8273,
								8304
							],
							[
								8593,
								8626
							],
							[
								9026,
								9050
							],
							[
								9405,
								9433
							],
							[
								10049,
								10058
							],
							[
								10075,
								10084
							],
							[
								10116,
								10125
							],
							[
								10144,
								10153
							],
							[
								10167,
								10177
							],
							[
								10193,
								10202
							],
							[
								10216,
								10225
							],
							[
								10232,
								10240
							],
							[
								10255,
								10278
							],
							[
								10289,
								10298
							],
							[
								10343,
								10375
							],
							[
								10453,
								10487
							],
							[
								10683,
								10708
							],
							[
								10765,
								10815
							],
							[
								11085,
								11118
							],
							[
								11218,
								11253
							],
							[
								11330,
								11352
							],
							[
								11969,
								11987
							],
							[
								12030,
								12036
							],
							[
								12070,
								12075
							],
							[
								12117,
								12122
							],
							[
								12205,
								12210
							],
							[
								12505,
								12531
							],
							[
								12632,
								12658
							],
							[
								13858,
								13862
							],
							[
								13952,
								13961
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AwAAAAAAAAAAAAAAaAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgEAAAgIHBhcnNlU1ZHUGF0aChzKQogIHBhcnNlVmFsdWVzID0gYXJncyA9PgogIChfLCBjLCBhcmdzKSA9PgogIHNwbGl0UGF0aChwcykKICBwYXRoVG9BYnNvbHV0ZShwYXRoKQogIHBhdGhUb1BvaW50cyhwYXRoKQogIGlzVXBwZXIgPSBzID0+Ck1ha2VQb2ludD0oeCx5KSA9PgogIG4gPT4KICBwb2ludHNUb0Fic29sdXRlKGl0KQogIGlzVXBwZXIgPSBzID0+CiAgc2F2ZShmaWxlbmFtZSkKTnVtZXJpY0FyZ3MocywgdCA9IGEgPT4gYSkKICBkZXJlZiA9IHAgPT4gb2JqID0+CihvLCBrKSA9PgpQYXJlbnRQYXRocyhwKQpDdW11bGF0aXZlUGF0aHMocCkKQWxsUGFyZW50cyhlbGVtKQpBbGxUcmFuc2Zvcm1zKGVsZW0sIGdldHRlciA9IGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KQpFbGVtZW50VHJhbnNmb3JtTGlzdChlbGVtKQpFbGVtZW50VHJhbnNmb3JtTWF0cml4KGVsZW0pCkdldFhZKGVsZW0pCkdldFBvaW50cyhlbGVtKQogIGMgPT4KICBhID0+CihbeCwgeV0pID0+CkdldFRyYW5zZm9ybWVkUG9pbnRzKGVsZW0pCkdldE1hdHJpeChlbGVtKQpQb3NpdGlvbmVkRWxlbWVudHMoc3ZnRWxlbSA9IHN2Zywgc2tpcCkKKCkgPT4KICAodiwgcCkgPT4KICBlID0+CiAgbiA9PgpIYXNQYXJlbnQoZWxlbSwgb3RoZXIpCkdldEJvdW5kcyhzdmdFbGVtID0gc3ZnKQpQcm9jZXNzUGF0aChkKQogIHVuaXRDb252VG9NTSh2YWx1ZSkKICBwYzogbW0gPT4KICBweDogbW0gPT4KICBwdDogbW0gPT4KICBpbjogbW0gPT4KICBtaWw6IG1tID0+CiAgY206IG1tID0+CiAgbW06IG1tID0+CiAgbTogbW0gPT4KICB1bml0Q29udih1bml0KQogIHZhbHVlID0+CiAgdW5pdENvbnZUbyh2YWx1ZSwgdW5pdCkKICBnZXRWaWV3Qm94KHN2Z0VsZW0gPSBzdmcpClhNTDJTdHJpbmcoZWxlbSkKICBnZXRXaWR0aEhlaWdodChzdmdFbGVtID0gc3ZnLCB0ID0gYSA9PiBhKQogIGdldFRyYW5zZm9ybWF0aW9uTGlzdChlKQogIGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KGUpCiAgbWFpbiguLi5hcmdzKQogIChfeCwgX3ksIG9wdHMpID0+CiAgKCkgPT4KICBhID0+CiAgYSA9PgogIGEgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHByaW50ID0gKGZpbGUsIC4uLmFyZ3MpID0+CiAgdSA9PgooYSwgaSkgPT4AAAAAAAAAAGgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					762,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3773,
								3777
							],
							[
								3877,
								3907
							],
							[
								3959,
								3973
							],
							[
								4997,
								5011
							],
							[
								5262,
								5298
							],
							[
								5409,
								5428
							],
							[
								5438,
								5447
							],
							[
								5461,
								5485
							],
							[
								5571,
								5599
							],
							[
								5689,
								5715
							],
							[
								5875,
								5937
							],
							[
								6112,
								6147
							],
							[
								6239,
								6276
							],
							[
								6357,
								6377
							],
							[
								6453,
								6477
							],
							[
								7254,
								7258
							],
							[
								7283,
								7287
							],
							[
								7352,
								7363
							],
							[
								7568,
								7603
							],
							[
								7745,
								7769
							],
							[
								7825,
								7874
							],
							[
								7889,
								7894
							],
							[
								8022,
								8032
							],
							[
								8145,
								8150
							],
							[
								8172,
								8176
							],
							[
								8273,
								8304
							],
							[
								8593,
								8626
							],
							[
								9026,
								9050
							],
							[
								9405,
								9433
							],
							[
								10049,
								10058
							],
							[
								10075,
								10084
							],
							[
								10116,
								10125
							],
							[
								10144,
								10153
							],
							[
								10167,
								10177
							],
							[
								10193,
								10202
							],
							[
								10216,
								10225
							],
							[
								10232,
								10240
							],
							[
								10255,
								10278
							],
							[
								10289,
								10298
							],
							[
								10343,
								10375
							],
							[
								10453,
								10487
							],
							[
								10683,
								10708
							],
							[
								10765,
								10815
							],
							[
								11085,
								11118
							],
							[
								11218,
								11253
							],
							[
								11330,
								11352
							],
							[
								11969,
								11987
							],
							[
								12030,
								12036
							],
							[
								12070,
								12075
							],
							[
								12117,
								12122
							],
							[
								12205,
								12210
							],
							[
								12505,
								12531
							],
							[
								12632,
								12658
							],
							[
								13858,
								13862
							],
							[
								13952,
								13961
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					763,
					4,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3773,
								3777
							],
							[
								3931,
								3961
							],
							[
								4013,
								4027
							],
							[
								5051,
								5065
							],
							[
								5316,
								5352
							],
							[
								5463,
								5482
							],
							[
								5492,
								5501
							],
							[
								5515,
								5539
							],
							[
								5625,
								5653
							],
							[
								5743,
								5769
							],
							[
								5929,
								5991
							],
							[
								6166,
								6201
							],
							[
								6293,
								6330
							],
							[
								6411,
								6431
							],
							[
								6507,
								6531
							],
							[
								7308,
								7312
							],
							[
								7337,
								7341
							],
							[
								7406,
								7417
							],
							[
								7622,
								7657
							],
							[
								7799,
								7823
							],
							[
								7879,
								7928
							],
							[
								7943,
								7948
							],
							[
								8076,
								8086
							],
							[
								8199,
								8204
							],
							[
								8226,
								8230
							],
							[
								8327,
								8358
							],
							[
								8647,
								8680
							],
							[
								9080,
								9104
							],
							[
								9459,
								9487
							],
							[
								10103,
								10112
							],
							[
								10129,
								10138
							],
							[
								10170,
								10179
							],
							[
								10198,
								10207
							],
							[
								10221,
								10231
							],
							[
								10247,
								10256
							],
							[
								10270,
								10279
							],
							[
								10286,
								10294
							],
							[
								10309,
								10332
							],
							[
								10343,
								10352
							],
							[
								10397,
								10429
							],
							[
								10507,
								10541
							],
							[
								10737,
								10762
							],
							[
								10819,
								10869
							],
							[
								11139,
								11172
							],
							[
								11272,
								11307
							],
							[
								11384,
								11406
							],
							[
								12023,
								12041
							],
							[
								12084,
								12090
							],
							[
								12124,
								12129
							],
							[
								12171,
								12176
							],
							[
								12259,
								12264
							],
							[
								12559,
								12585
							],
							[
								12686,
								12712
							],
							[
								13912,
								13916
							],
							[
								14006,
								14015
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"CAAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAQAACAgcGFyc2VTVkdQYXRoKHMpCiAgcGFyc2VWYWx1ZXMgPSBhcmdzID0+CiAgKF8sIGMsIGFyZ3MpID0+CiAgc3BsaXRQYXRoKHBzKQogIHBhdGhUb0Fic29sdXRlKHBhdGgpCiAgcGF0aFRvUG9pbnRzKHBhdGgpCiAgaXNVcHBlciA9IHMgPT4KTWFrZVBvaW50PSh4LHkpID0+CiAgbiA9PgogIHBvaW50c1RvQWJzb2x1dGUoaXQpCiAgaXNVcHBlciA9IHMgPT4KICBzYXZlKGZpbGVuYW1lKQpOdW1lcmljQXJncyhzLCB0ID0gYSA9PiBhKQogIGRlcmVmID0gcCA9PiBvYmogPT4KKG8sIGspID0+ClBhcmVudFBhdGhzKHApCkN1bXVsYXRpdmVQYXRocyhwKQpBbGxQYXJlbnRzKGVsZW0pCkFsbFRyYW5zZm9ybXMoZWxlbSwgZ2V0dGVyID0gZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXgpCkVsZW1lbnRUcmFuc2Zvcm1MaXN0KGVsZW0pCkVsZW1lbnRUcmFuc2Zvcm1NYXRyaXgoZWxlbSkKR2V0WFkoZWxlbSkKR2V0UG9pbnRzKGVsZW0pCiAgYyA9PgogIGEgPT4KKFt4LCB5XSkgPT4KR2V0VHJhbnNmb3JtZWRQb2ludHMoZWxlbSkKR2V0TWF0cml4KGVsZW0pClBvc2l0aW9uZWRFbGVtZW50cyhzdmdFbGVtID0gc3ZnLCBza2lwKQooKSA9PgogICh2LCBwKSA9PgogIGUgPT4KICBuID0+Ckhhc1BhcmVudChlbGVtLCBvdGhlcikKR2V0Qm91bmRzKHN2Z0VsZW0gPSBzdmcpClByb2Nlc3NQYXRoKGQpCiAgdW5pdENvbnZUb01NKHZhbHVlKQogIHBjOiBtbSA9PgogIHB4OiBtbSA9PgogIHB0OiBtbSA9PgogIGluOiBtbSA9PgogIG1pbDogbW0gPT4KICBjbTogbW0gPT4KICBtbTogbW0gPT4KICBtOiBtbSA9PgogIHVuaXRDb252KHVuaXQpCiAgdmFsdWUgPT4KICB1bml0Q29udlRvKHZhbHVlLCB1bml0KQogIGdldFZpZXdCb3goc3ZnRWxlbSA9IHN2ZykKWE1MMlN0cmluZyhlbGVtKQogIGdldFdpZHRoSGVpZ2h0KHN2Z0VsZW0gPSBzdmcsIHQgPSBhID0+IGEpCiAgZ2V0VHJhbnNmb3JtYXRpb25MaXN0KGUpCiAgZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXgoZSkKICBtYWluKC4uLmFyZ3MpCiAgKF94LCBfeSwgb3B0cykgPT4KICAoKSA9PgogIGEgPT4KICBhID0+CiAgYSA9PgogIHByaW50ID0gKGZpbGUsIC4uLmFyZ3MpID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICB1ID0+CihhLCBpKSA9PgAAAAAAAAAAaAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgEAAAgIHBhcnNlU1ZHUGF0aChzKQogIHBhcnNlVmFsdWVzID0gYXJncyA9PgogIChfLCBjLCBhcmdzKSA9PgogIHNwbGl0UGF0aChwcykKICBwYXRoVG9BYnNvbHV0ZShwYXRoKQogIHBhdGhUb1BvaW50cyhwYXRoKQogIGlzVXBwZXIgPSBzID0+Ck1ha2VQb2ludD0oeCx5KSA9PgogIG4gPT4KICBwb2ludHNUb0Fic29sdXRlKGl0KQogIGlzVXBwZXIgPSBzID0+CiAgc2F2ZShmaWxlbmFtZSkKTnVtZXJpY0FyZ3MocywgdCA9IGEgPT4gYSkKICBkZXJlZiA9IHAgPT4gb2JqID0+CihvLCBrKSA9PgpQYXJlbnRQYXRocyhwKQpDdW11bGF0aXZlUGF0aHMocCkKQWxsUGFyZW50cyhlbGVtKQpBbGxUcmFuc2Zvcm1zKGVsZW0sIGdldHRlciA9IGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KQpFbGVtZW50VHJhbnNmb3JtTGlzdChlbGVtKQpFbGVtZW50VHJhbnNmb3JtTWF0cml4KGVsZW0pCkdldFhZKGVsZW0pCkdldFBvaW50cyhlbGVtKQogIGMgPT4KICBhID0+CihbeCwgeV0pID0+CkdldFRyYW5zZm9ybWVkUG9pbnRzKGVsZW0pCkdldE1hdHJpeChlbGVtKQpQb3NpdGlvbmVkRWxlbWVudHMoc3ZnRWxlbSA9IHN2Zywgc2tpcCkKKCkgPT4KICAodiwgcCkgPT4KICBlID0+CiAgbiA9PgpIYXNQYXJlbnQoZWxlbSwgb3RoZXIpCkdldEJvdW5kcyhzdmdFbGVtID0gc3ZnKQpQcm9jZXNzUGF0aChkKQogIHVuaXRDb252VG9NTSh2YWx1ZSkKICBwYzogbW0gPT4KICBweDogbW0gPT4KICBwdDogbW0gPT4KICBpbjogbW0gPT4KICBtaWw6IG1tID0+CiAgY206IG1tID0+CiAgbW06IG1tID0+CiAgbTogbW0gPT4KICB1bml0Q29udih1bml0KQogIHZhbHVlID0+CiAgdW5pdENvbnZUbyh2YWx1ZSwgdW5pdCkKICBnZXRWaWV3Qm94KHN2Z0VsZW0gPSBzdmcpClhNTDJTdHJpbmcoZWxlbSkKICBnZXRXaWR0aEhlaWdodChzdmdFbGVtID0gc3ZnLCB0ID0gYSA9PiBhKQogIGdldFRyYW5zZm9ybWF0aW9uTGlzdChlKQogIGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KGUpCiAgbWFpbiguLi5hcmdzKQogIChfeCwgX3ksIG9wdHMpID0+CiAgKCkgPT4KICBhID0+CiAgYSA9PgogIGEgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHByaW50ID0gKGZpbGUsIC4uLmFyZ3MpID0+CiAgdSA9PgooYSwgaSkgPT4AAAAAAAAAAGgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					764,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3773,
								3777
							],
							[
								3931,
								3961
							],
							[
								4013,
								4027
							],
							[
								5051,
								5065
							],
							[
								5316,
								5352
							],
							[
								5463,
								5482
							],
							[
								5492,
								5501
							],
							[
								5515,
								5539
							],
							[
								5625,
								5653
							],
							[
								5743,
								5769
							],
							[
								5929,
								5991
							],
							[
								6166,
								6201
							],
							[
								6293,
								6330
							],
							[
								6411,
								6431
							],
							[
								6507,
								6531
							],
							[
								7308,
								7312
							],
							[
								7337,
								7341
							],
							[
								7406,
								7417
							],
							[
								7622,
								7657
							],
							[
								7799,
								7823
							],
							[
								7879,
								7928
							],
							[
								7943,
								7948
							],
							[
								8076,
								8086
							],
							[
								8199,
								8204
							],
							[
								8226,
								8230
							],
							[
								8327,
								8358
							],
							[
								8647,
								8680
							],
							[
								9080,
								9104
							],
							[
								9459,
								9487
							],
							[
								10103,
								10112
							],
							[
								10129,
								10138
							],
							[
								10170,
								10179
							],
							[
								10198,
								10207
							],
							[
								10221,
								10231
							],
							[
								10247,
								10256
							],
							[
								10270,
								10279
							],
							[
								10286,
								10294
							],
							[
								10309,
								10332
							],
							[
								10343,
								10352
							],
							[
								10397,
								10429
							],
							[
								10507,
								10541
							],
							[
								10737,
								10762
							],
							[
								10819,
								10869
							],
							[
								11139,
								11172
							],
							[
								11272,
								11307
							],
							[
								11384,
								11406
							],
							[
								12023,
								12041
							],
							[
								12084,
								12090
							],
							[
								12124,
								12129
							],
							[
								12171,
								12176
							],
							[
								12259,
								12264
							],
							[
								12559,
								12585
							],
							[
								12686,
								12712
							],
							[
								13912,
								13916
							],
							[
								14006,
								14015
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					765,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3773,
								3777
							],
							[
								3931,
								3961
							],
							[
								4013,
								4027
							],
							[
								5051,
								5065
							],
							[
								5316,
								5352
							],
							[
								5463,
								5482
							],
							[
								5492,
								5501
							],
							[
								5515,
								5539
							],
							[
								5625,
								5653
							],
							[
								5743,
								5769
							],
							[
								5929,
								5991
							],
							[
								6166,
								6201
							],
							[
								6293,
								6330
							],
							[
								6411,
								6431
							],
							[
								6507,
								6531
							],
							[
								7308,
								7312
							],
							[
								7337,
								7341
							],
							[
								7406,
								7417
							],
							[
								7622,
								7657
							],
							[
								7799,
								7823
							],
							[
								7879,
								7928
							],
							[
								7943,
								7948
							],
							[
								8076,
								8086
							],
							[
								8199,
								8204
							],
							[
								8226,
								8230
							],
							[
								8327,
								8358
							],
							[
								8647,
								8680
							],
							[
								9080,
								9104
							],
							[
								9459,
								9487
							],
							[
								10103,
								10112
							],
							[
								10129,
								10138
							],
							[
								10170,
								10179
							],
							[
								10198,
								10207
							],
							[
								10221,
								10231
							],
							[
								10247,
								10256
							],
							[
								10270,
								10279
							],
							[
								10286,
								10294
							],
							[
								10309,
								10332
							],
							[
								10343,
								10352
							],
							[
								10397,
								10429
							],
							[
								10507,
								10541
							],
							[
								10737,
								10762
							],
							[
								10819,
								10869
							],
							[
								11139,
								11172
							],
							[
								11272,
								11307
							],
							[
								11384,
								11406
							],
							[
								12023,
								12041
							],
							[
								12084,
								12090
							],
							[
								12124,
								12129
							],
							[
								12171,
								12176
							],
							[
								12259,
								12264
							],
							[
								12559,
								12585
							],
							[
								12686,
								12712
							],
							[
								13912,
								13916
							],
							[
								14006,
								14015
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					766,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3782,
								3786
							],
							[
								3940,
								3970
							],
							[
								4022,
								4036
							],
							[
								5060,
								5074
							],
							[
								5325,
								5361
							],
							[
								5472,
								5491
							],
							[
								5501,
								5510
							],
							[
								5524,
								5548
							],
							[
								5634,
								5662
							],
							[
								5752,
								5778
							],
							[
								5938,
								6000
							],
							[
								6175,
								6210
							],
							[
								6302,
								6339
							],
							[
								6420,
								6440
							],
							[
								6516,
								6540
							],
							[
								7317,
								7321
							],
							[
								7346,
								7350
							],
							[
								7415,
								7426
							],
							[
								7631,
								7666
							],
							[
								7808,
								7832
							],
							[
								7888,
								7937
							],
							[
								7952,
								7957
							],
							[
								8085,
								8095
							],
							[
								8208,
								8213
							],
							[
								8235,
								8239
							],
							[
								8336,
								8367
							],
							[
								8656,
								8689
							],
							[
								9089,
								9113
							],
							[
								9468,
								9496
							],
							[
								10112,
								10121
							],
							[
								10138,
								10147
							],
							[
								10179,
								10188
							],
							[
								10207,
								10216
							],
							[
								10230,
								10240
							],
							[
								10256,
								10265
							],
							[
								10279,
								10288
							],
							[
								10295,
								10303
							],
							[
								10318,
								10341
							],
							[
								10352,
								10361
							],
							[
								10406,
								10438
							],
							[
								10516,
								10550
							],
							[
								10746,
								10771
							],
							[
								10828,
								10878
							],
							[
								11148,
								11181
							],
							[
								11281,
								11316
							],
							[
								11393,
								11415
							],
							[
								12032,
								12050
							],
							[
								12093,
								12099
							],
							[
								12133,
								12138
							],
							[
								12180,
								12185
							],
							[
								12268,
								12273
							],
							[
								12568,
								12594
							],
							[
								12695,
								12721
							],
							[
								13921,
								13925
							],
							[
								14015,
								14024
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					767,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3782,
								3786
							],
							[
								3940,
								3970
							],
							[
								4022,
								4036
							],
							[
								5060,
								5074
							],
							[
								5325,
								5361
							],
							[
								5472,
								5491
							],
							[
								5501,
								5510
							],
							[
								5524,
								5548
							],
							[
								5634,
								5662
							],
							[
								5752,
								5778
							],
							[
								5938,
								6000
							],
							[
								6175,
								6210
							],
							[
								6302,
								6339
							],
							[
								6420,
								6440
							],
							[
								6516,
								6540
							],
							[
								7317,
								7321
							],
							[
								7346,
								7350
							],
							[
								7415,
								7426
							],
							[
								7631,
								7666
							],
							[
								7808,
								7832
							],
							[
								7888,
								7937
							],
							[
								7952,
								7957
							],
							[
								8085,
								8095
							],
							[
								8208,
								8213
							],
							[
								8235,
								8239
							],
							[
								8336,
								8367
							],
							[
								8656,
								8689
							],
							[
								9089,
								9113
							],
							[
								9468,
								9496
							],
							[
								10112,
								10121
							],
							[
								10138,
								10147
							],
							[
								10179,
								10188
							],
							[
								10207,
								10216
							],
							[
								10230,
								10240
							],
							[
								10256,
								10265
							],
							[
								10279,
								10288
							],
							[
								10295,
								10303
							],
							[
								10318,
								10341
							],
							[
								10352,
								10361
							],
							[
								10406,
								10438
							],
							[
								10516,
								10550
							],
							[
								10746,
								10771
							],
							[
								10828,
								10878
							],
							[
								11148,
								11181
							],
							[
								11281,
								11316
							],
							[
								11393,
								11415
							],
							[
								12032,
								12050
							],
							[
								12093,
								12099
							],
							[
								12133,
								12138
							],
							[
								12180,
								12185
							],
							[
								12268,
								12273
							],
							[
								12568,
								12594
							],
							[
								12695,
								12721
							],
							[
								13921,
								13925
							],
							[
								14015,
								14024
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAQAACAgcGFyc2VTVkdQYXRoKHMpCiAgcGFyc2VWYWx1ZXMgPSBhcmdzID0+CiAgKF8sIGMsIGFyZ3MpID0+CiAgc3BsaXRQYXRoKHBzKQogIHBhdGhUb0Fic29sdXRlKHBhdGgpCiAgcGF0aFRvUG9pbnRzKHBhdGgpCiAgaXNVcHBlciA9IHMgPT4KTWFrZVBvaW50PSh4LHkpID0+CiAgbiA9PgogIHBvaW50c1RvQWJzb2x1dGUoaXQpCiAgaXNVcHBlciA9IHMgPT4KICBzYXZlKGZpbGVuYW1lKQpOdW1lcmljQXJncyhzLCB0ID0gYSA9PiBhKQogIGRlcmVmID0gcCA9PiBvYmogPT4KKG8sIGspID0+ClBhcmVudFBhdGhzKHApCkN1bXVsYXRpdmVQYXRocyhwKQpBbGxQYXJlbnRzKGVsZW0pCkFsbFRyYW5zZm9ybXMoZWxlbSwgZ2V0dGVyID0gZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXgpCkVsZW1lbnRUcmFuc2Zvcm1MaXN0KGVsZW0pCkVsZW1lbnRUcmFuc2Zvcm1NYXRyaXgoZWxlbSkKR2V0WFkoZWxlbSkKR2V0UG9pbnRzKGVsZW0pCiAgYyA9PgogIGEgPT4KKFt4LCB5XSkgPT4KR2V0VHJhbnNmb3JtZWRQb2ludHMoZWxlbSkKR2V0TWF0cml4KGVsZW0pClBvc2l0aW9uZWRFbGVtZW50cyhzdmdFbGVtID0gc3ZnLCBza2lwKQooKSA9PgogICh2LCBwKSA9PgogIGUgPT4KICBuID0+Ckhhc1BhcmVudChlbGVtLCBvdGhlcikKR2V0Qm91bmRzKHN2Z0VsZW0gPSBzdmcpClByb2Nlc3NQYXRoKGQpCiAgdW5pdENvbnZUb01NKHZhbHVlKQogIHBjOiBtbSA9PgogIHB4OiBtbSA9PgogIHB0OiBtbSA9PgogIGluOiBtbSA9PgogIG1pbDogbW0gPT4KICBjbTogbW0gPT4KICBtbTogbW0gPT4KICBtOiBtbSA9PgogIHVuaXRDb252KHVuaXQpCiAgdmFsdWUgPT4KICB1bml0Q29udlRvKHZhbHVlLCB1bml0KQogIGdldFZpZXdCb3goc3ZnRWxlbSA9IHN2ZykKWE1MMlN0cmluZyhlbGVtKQogIGdldFdpZHRoSGVpZ2h0KHN2Z0VsZW0gPSBzdmcsIHQgPSBhID0+IGEpCiAgZ2V0VHJhbnNmb3JtYXRpb25MaXN0KGUpCiAgZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXgoZSkKICBtYWluKC4uLmFyZ3MpCiAgKF94LCBfeSwgb3B0cykgPT4KICAoKSA9PgogIGEgPT4KICBhID0+CiAgYSA9PgogIHByaW50ID0gKGZpbGUsIC4uLmFyZ3MpID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICB1ID0+CihhLCBpKSA9PgAAAAAAAAAAaAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgEAAAgIHBhcnNlU1ZHUGF0aChzKQogIHBhcnNlVmFsdWVzID0gYXJncyA9PgogIChfLCBjLCBhcmdzKSA9PgogIHNwbGl0UGF0aChwcykKICBwYXRoVG9BYnNvbHV0ZShwYXRoKQogIHBhdGhUb1BvaW50cyhwYXRoKQogIGlzVXBwZXIgPSBzID0+Ck1ha2VQb2ludD0oeCx5KSA9PgogIG4gPT4KICBwb2ludHNUb0Fic29sdXRlKGl0KQogIGlzVXBwZXIgPSBzID0+CiAgc2F2ZShmaWxlbmFtZSkKTnVtZXJpY0FyZ3MocywgdCA9IGEgPT4gYSkKICBkZXJlZiA9IHAgPT4gb2JqID0+CihvLCBrKSA9PgpQYXJlbnRQYXRocyhwKQpDdW11bGF0aXZlUGF0aHMocCkKQWxsUGFyZW50cyhlbGVtKQpBbGxUcmFuc2Zvcm1zKGVsZW0sIGdldHRlciA9IGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KQpFbGVtZW50VHJhbnNmb3JtTGlzdChlbGVtKQpFbGVtZW50VHJhbnNmb3JtTWF0cml4KGVsZW0pCkdldFhZKGVsZW0pCkdldFBvaW50cyhlbGVtKQogIGMgPT4KICBhID0+CihbeCwgeV0pID0+CkdldFRyYW5zZm9ybWVkUG9pbnRzKGVsZW0pCkdldE1hdHJpeChlbGVtKQpQb3NpdGlvbmVkRWxlbWVudHMoc3ZnRWxlbSA9IHN2Zywgc2tpcCkKKCkgPT4KICAodiwgcCkgPT4KICBlID0+CiAgbiA9PgpIYXNQYXJlbnQoZWxlbSwgb3RoZXIpCkdldEJvdW5kcyhzdmdFbGVtID0gc3ZnKQpQcm9jZXNzUGF0aChkKQogIHVuaXRDb252VG9NTSh2YWx1ZSkKICBwYzogbW0gPT4KICBweDogbW0gPT4KICBwdDogbW0gPT4KICBpbjogbW0gPT4KICBtaWw6IG1tID0+CiAgY206IG1tID0+CiAgbW06IG1tID0+CiAgbTogbW0gPT4KICB1bml0Q29udih1bml0KQogIHZhbHVlID0+CiAgdW5pdENvbnZUbyh2YWx1ZSwgdW5pdCkKICBnZXRWaWV3Qm94KHN2Z0VsZW0gPSBzdmcpClhNTDJTdHJpbmcoZWxlbSkKICBnZXRXaWR0aEhlaWdodChzdmdFbGVtID0gc3ZnLCB0ID0gYSA9PiBhKQogIGdldFRyYW5zZm9ybWF0aW9uTGlzdChlKQogIGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KGUpCiAgbWFpbiguLi5hcmdzKQogIChfeCwgX3ksIG9wdHMpID0+CiAgKCkgPT4KICBhID0+CiAgYSA9PgogIGEgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHByaW50ID0gKGZpbGUsIC4uLmFyZ3MpID0+CiAgdSA9PgooYSwgaSkgPT4AAAAAAAAAAGgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					768,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3789,
								3793
							],
							[
								3947,
								3977
							],
							[
								4029,
								4043
							],
							[
								5067,
								5081
							],
							[
								5332,
								5368
							],
							[
								5479,
								5498
							],
							[
								5508,
								5517
							],
							[
								5531,
								5555
							],
							[
								5641,
								5669
							],
							[
								5759,
								5785
							],
							[
								5945,
								6007
							],
							[
								6182,
								6217
							],
							[
								6309,
								6346
							],
							[
								6427,
								6447
							],
							[
								6523,
								6547
							],
							[
								7324,
								7328
							],
							[
								7353,
								7357
							],
							[
								7422,
								7433
							],
							[
								7638,
								7673
							],
							[
								7815,
								7839
							],
							[
								7895,
								7944
							],
							[
								7959,
								7964
							],
							[
								8092,
								8102
							],
							[
								8215,
								8220
							],
							[
								8242,
								8246
							],
							[
								8343,
								8374
							],
							[
								8663,
								8696
							],
							[
								9096,
								9120
							],
							[
								9475,
								9503
							],
							[
								10119,
								10128
							],
							[
								10145,
								10154
							],
							[
								10186,
								10195
							],
							[
								10214,
								10223
							],
							[
								10237,
								10247
							],
							[
								10263,
								10272
							],
							[
								10286,
								10295
							],
							[
								10302,
								10310
							],
							[
								10325,
								10348
							],
							[
								10359,
								10368
							],
							[
								10413,
								10445
							],
							[
								10523,
								10557
							],
							[
								10753,
								10778
							],
							[
								10835,
								10885
							],
							[
								11155,
								11188
							],
							[
								11288,
								11323
							],
							[
								11400,
								11422
							],
							[
								12039,
								12057
							],
							[
								12100,
								12106
							],
							[
								12140,
								12145
							],
							[
								12187,
								12192
							],
							[
								12275,
								12280
							],
							[
								12575,
								12601
							],
							[
								12702,
								12728
							],
							[
								13928,
								13932
							],
							[
								14022,
								14031
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					769,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3789,
								3793
							],
							[
								3947,
								3977
							],
							[
								4029,
								4043
							],
							[
								5067,
								5081
							],
							[
								5332,
								5368
							],
							[
								5479,
								5498
							],
							[
								5508,
								5517
							],
							[
								5531,
								5555
							],
							[
								5641,
								5669
							],
							[
								5759,
								5785
							],
							[
								5945,
								6007
							],
							[
								6182,
								6217
							],
							[
								6309,
								6346
							],
							[
								6427,
								6447
							],
							[
								6523,
								6547
							],
							[
								7324,
								7328
							],
							[
								7353,
								7357
							],
							[
								7422,
								7433
							],
							[
								7638,
								7673
							],
							[
								7815,
								7839
							],
							[
								7895,
								7944
							],
							[
								7959,
								7964
							],
							[
								8092,
								8102
							],
							[
								8215,
								8220
							],
							[
								8242,
								8246
							],
							[
								8343,
								8374
							],
							[
								8663,
								8696
							],
							[
								9096,
								9120
							],
							[
								9475,
								9503
							],
							[
								10119,
								10128
							],
							[
								10145,
								10154
							],
							[
								10186,
								10195
							],
							[
								10214,
								10223
							],
							[
								10237,
								10247
							],
							[
								10263,
								10272
							],
							[
								10286,
								10295
							],
							[
								10302,
								10310
							],
							[
								10325,
								10348
							],
							[
								10359,
								10368
							],
							[
								10413,
								10445
							],
							[
								10523,
								10557
							],
							[
								10753,
								10778
							],
							[
								10835,
								10885
							],
							[
								11155,
								11188
							],
							[
								11288,
								11323
							],
							[
								11400,
								11422
							],
							[
								12039,
								12057
							],
							[
								12100,
								12106
							],
							[
								12140,
								12145
							],
							[
								12187,
								12192
							],
							[
								12275,
								12280
							],
							[
								12575,
								12601
							],
							[
								12702,
								12728
							],
							[
								13928,
								13932
							],
							[
								14022,
								14031
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					770,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3789,
								3793
							],
							[
								3947,
								3977
							],
							[
								4029,
								4043
							],
							[
								5067,
								5081
							],
							[
								5332,
								5368
							],
							[
								5479,
								5498
							],
							[
								5508,
								5517
							],
							[
								5531,
								5555
							],
							[
								5641,
								5669
							],
							[
								5759,
								5785
							],
							[
								5945,
								6007
							],
							[
								6182,
								6217
							],
							[
								6309,
								6346
							],
							[
								6427,
								6447
							],
							[
								6523,
								6547
							],
							[
								7324,
								7328
							],
							[
								7353,
								7357
							],
							[
								7422,
								7433
							],
							[
								7638,
								7673
							],
							[
								7815,
								7839
							],
							[
								7895,
								7944
							],
							[
								7959,
								7964
							],
							[
								8092,
								8102
							],
							[
								8215,
								8220
							],
							[
								8242,
								8246
							],
							[
								8343,
								8374
							],
							[
								8663,
								8696
							],
							[
								9096,
								9120
							],
							[
								9475,
								9503
							],
							[
								10119,
								10128
							],
							[
								10145,
								10154
							],
							[
								10186,
								10195
							],
							[
								10214,
								10223
							],
							[
								10237,
								10247
							],
							[
								10263,
								10272
							],
							[
								10286,
								10295
							],
							[
								10302,
								10310
							],
							[
								10325,
								10348
							],
							[
								10359,
								10368
							],
							[
								10413,
								10445
							],
							[
								10523,
								10557
							],
							[
								10753,
								10778
							],
							[
								10835,
								10885
							],
							[
								11155,
								11188
							],
							[
								11288,
								11323
							],
							[
								11400,
								11422
							],
							[
								12039,
								12057
							],
							[
								12100,
								12106
							],
							[
								12140,
								12145
							],
							[
								12187,
								12192
							],
							[
								12275,
								12280
							],
							[
								12575,
								12601
							],
							[
								12702,
								12728
							],
							[
								13928,
								13932
							],
							[
								14022,
								14031
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					771,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3789,
								3793
							],
							[
								3947,
								3977
							],
							[
								4029,
								4043
							],
							[
								5067,
								5081
							],
							[
								5332,
								5368
							],
							[
								5479,
								5498
							],
							[
								5508,
								5517
							],
							[
								5531,
								5555
							],
							[
								5641,
								5669
							],
							[
								5759,
								5785
							],
							[
								5945,
								6007
							],
							[
								6182,
								6217
							],
							[
								6309,
								6346
							],
							[
								6427,
								6447
							],
							[
								6523,
								6547
							],
							[
								7324,
								7328
							],
							[
								7353,
								7357
							],
							[
								7422,
								7433
							],
							[
								7638,
								7673
							],
							[
								7815,
								7839
							],
							[
								7895,
								7944
							],
							[
								7959,
								7964
							],
							[
								8092,
								8102
							],
							[
								8215,
								8220
							],
							[
								8242,
								8246
							],
							[
								8343,
								8374
							],
							[
								8663,
								8696
							],
							[
								9096,
								9120
							],
							[
								9475,
								9503
							],
							[
								10119,
								10128
							],
							[
								10145,
								10154
							],
							[
								10186,
								10195
							],
							[
								10214,
								10223
							],
							[
								10237,
								10247
							],
							[
								10263,
								10272
							],
							[
								10286,
								10295
							],
							[
								10302,
								10310
							],
							[
								10325,
								10348
							],
							[
								10359,
								10368
							],
							[
								10413,
								10445
							],
							[
								10523,
								10557
							],
							[
								10753,
								10778
							],
							[
								10835,
								10885
							],
							[
								11155,
								11188
							],
							[
								11288,
								11323
							],
							[
								11400,
								11422
							],
							[
								12039,
								12057
							],
							[
								12100,
								12106
							],
							[
								12140,
								12145
							],
							[
								12187,
								12192
							],
							[
								12275,
								12280
							],
							[
								12575,
								12601
							],
							[
								12702,
								12728
							],
							[
								13928,
								13932
							],
							[
								14022,
								14031
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					772,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3789,
								3793
							],
							[
								3947,
								3977
							],
							[
								4029,
								4043
							],
							[
								5067,
								5081
							],
							[
								5332,
								5368
							],
							[
								5479,
								5498
							],
							[
								5508,
								5517
							],
							[
								5531,
								5555
							],
							[
								5641,
								5669
							],
							[
								5759,
								5785
							],
							[
								5945,
								6007
							],
							[
								6182,
								6217
							],
							[
								6309,
								6346
							],
							[
								6427,
								6447
							],
							[
								6523,
								6547
							],
							[
								7324,
								7328
							],
							[
								7353,
								7357
							],
							[
								7422,
								7433
							],
							[
								7638,
								7673
							],
							[
								7815,
								7839
							],
							[
								7895,
								7944
							],
							[
								7959,
								7964
							],
							[
								8092,
								8102
							],
							[
								8215,
								8220
							],
							[
								8242,
								8246
							],
							[
								8343,
								8374
							],
							[
								8663,
								8696
							],
							[
								9096,
								9120
							],
							[
								9475,
								9503
							],
							[
								10119,
								10128
							],
							[
								10145,
								10154
							],
							[
								10186,
								10195
							],
							[
								10214,
								10223
							],
							[
								10237,
								10247
							],
							[
								10263,
								10272
							],
							[
								10286,
								10295
							],
							[
								10302,
								10310
							],
							[
								10325,
								10348
							],
							[
								10359,
								10368
							],
							[
								10413,
								10445
							],
							[
								10523,
								10557
							],
							[
								10753,
								10778
							],
							[
								10835,
								10885
							],
							[
								11155,
								11188
							],
							[
								11288,
								11323
							],
							[
								11400,
								11422
							],
							[
								12039,
								12057
							],
							[
								12100,
								12106
							],
							[
								12140,
								12145
							],
							[
								12187,
								12192
							],
							[
								12275,
								12280
							],
							[
								12575,
								12601
							],
							[
								12702,
								12728
							],
							[
								13928,
								13932
							],
							[
								14022,
								14031
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					773,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3789,
								3793
							],
							[
								3947,
								3977
							],
							[
								4029,
								4043
							],
							[
								5067,
								5081
							],
							[
								5332,
								5368
							],
							[
								5479,
								5498
							],
							[
								5508,
								5517
							],
							[
								5531,
								5555
							],
							[
								5641,
								5669
							],
							[
								5759,
								5785
							],
							[
								5945,
								6007
							],
							[
								6182,
								6217
							],
							[
								6309,
								6346
							],
							[
								6427,
								6447
							],
							[
								6523,
								6547
							],
							[
								7324,
								7328
							],
							[
								7353,
								7357
							],
							[
								7422,
								7433
							],
							[
								7638,
								7673
							],
							[
								7815,
								7839
							],
							[
								7895,
								7944
							],
							[
								7959,
								7964
							],
							[
								8092,
								8102
							],
							[
								8215,
								8220
							],
							[
								8242,
								8246
							],
							[
								8343,
								8374
							],
							[
								8663,
								8696
							],
							[
								9096,
								9120
							],
							[
								9475,
								9503
							],
							[
								10119,
								10128
							],
							[
								10145,
								10154
							],
							[
								10186,
								10195
							],
							[
								10214,
								10223
							],
							[
								10237,
								10247
							],
							[
								10263,
								10272
							],
							[
								10286,
								10295
							],
							[
								10302,
								10310
							],
							[
								10325,
								10348
							],
							[
								10359,
								10368
							],
							[
								10413,
								10445
							],
							[
								10523,
								10557
							],
							[
								10753,
								10778
							],
							[
								10835,
								10885
							],
							[
								11155,
								11188
							],
							[
								11288,
								11323
							],
							[
								11400,
								11422
							],
							[
								12039,
								12057
							],
							[
								12100,
								12106
							],
							[
								12140,
								12145
							],
							[
								12187,
								12192
							],
							[
								12275,
								12280
							],
							[
								12575,
								12601
							],
							[
								12702,
								12728
							],
							[
								13928,
								13932
							],
							[
								14022,
								14031
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					774,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3791,
								3795
							],
							[
								3949,
								3979
							],
							[
								4031,
								4045
							],
							[
								5069,
								5083
							],
							[
								5334,
								5370
							],
							[
								5481,
								5500
							],
							[
								5510,
								5519
							],
							[
								5533,
								5557
							],
							[
								5643,
								5671
							],
							[
								5761,
								5787
							],
							[
								5947,
								6009
							],
							[
								6184,
								6219
							],
							[
								6311,
								6348
							],
							[
								6429,
								6449
							],
							[
								6525,
								6549
							],
							[
								7326,
								7330
							],
							[
								7355,
								7359
							],
							[
								7424,
								7435
							],
							[
								7640,
								7675
							],
							[
								7817,
								7841
							],
							[
								7897,
								7946
							],
							[
								7961,
								7966
							],
							[
								8094,
								8104
							],
							[
								8217,
								8222
							],
							[
								8244,
								8248
							],
							[
								8345,
								8376
							],
							[
								8665,
								8698
							],
							[
								9098,
								9122
							],
							[
								9477,
								9505
							],
							[
								10121,
								10130
							],
							[
								10147,
								10156
							],
							[
								10188,
								10197
							],
							[
								10216,
								10225
							],
							[
								10239,
								10249
							],
							[
								10265,
								10274
							],
							[
								10288,
								10297
							],
							[
								10304,
								10312
							],
							[
								10327,
								10350
							],
							[
								10361,
								10370
							],
							[
								10415,
								10447
							],
							[
								10525,
								10559
							],
							[
								10755,
								10780
							],
							[
								10837,
								10887
							],
							[
								11157,
								11190
							],
							[
								11290,
								11325
							],
							[
								11402,
								11424
							],
							[
								12041,
								12059
							],
							[
								12102,
								12108
							],
							[
								12142,
								12147
							],
							[
								12189,
								12194
							],
							[
								12277,
								12282
							],
							[
								12577,
								12603
							],
							[
								12704,
								12730
							],
							[
								13930,
								13934
							],
							[
								14024,
								14033
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAQAACAgcGFyc2VTVkdQYXRoKHMpCiAgcGFyc2VWYWx1ZXMgPSBhcmdzID0+CiAgKF8sIGMsIGFyZ3MpID0+CiAgc3BsaXRQYXRoKHBzKQogIHBhdGhUb0Fic29sdXRlKHBhdGgpCiAgcGF0aFRvUG9pbnRzKHBhdGgpCiAgaXNVcHBlciA9IHMgPT4KTWFrZVBvaW50PSh4LHkpID0+CiAgbiA9PgogIHBvaW50c1RvQWJzb2x1dGUoaXQpCiAgaXNVcHBlciA9IHMgPT4KICBzYXZlKGZpbGVuYW1lKQpOdW1lcmljQXJncyhzLCB0ID0gYSA9PiBhKQogIGRlcmVmID0gcCA9PiBvYmogPT4KKG8sIGspID0+ClBhcmVudFBhdGhzKHApCkN1bXVsYXRpdmVQYXRocyhwKQpBbGxQYXJlbnRzKGVsZW0pCkFsbFRyYW5zZm9ybXMoZWxlbSwgZ2V0dGVyID0gZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXgpCkVsZW1lbnRUcmFuc2Zvcm1MaXN0KGVsZW0pCkVsZW1lbnRUcmFuc2Zvcm1NYXRyaXgoZWxlbSkKR2V0WFkoZWxlbSkKR2V0UG9pbnRzKGVsZW0pCiAgYyA9PgogIGEgPT4KKFt4LCB5XSkgPT4KR2V0VHJhbnNmb3JtZWRQb2ludHMoZWxlbSkKR2V0TWF0cml4KGVsZW0pClBvc2l0aW9uZWRFbGVtZW50cyhzdmdFbGVtID0gc3ZnLCBza2lwKQooKSA9PgogICh2LCBwKSA9PgogIGUgPT4KICBuID0+Ckhhc1BhcmVudChlbGVtLCBvdGhlcikKR2V0Qm91bmRzKHN2Z0VsZW0gPSBzdmcpClByb2Nlc3NQYXRoKGQpCiAgdW5pdENvbnZUb01NKHZhbHVlKQogIHBjOiBtbSA9PgogIHB4OiBtbSA9PgogIHB0OiBtbSA9PgogIGluOiBtbSA9PgogIG1pbDogbW0gPT4KICBjbTogbW0gPT4KICBtbTogbW0gPT4KICBtOiBtbSA9PgogIHVuaXRDb252KHVuaXQpCiAgdmFsdWUgPT4KICB1bml0Q29udlRvKHZhbHVlLCB1bml0KQogIGdldFZpZXdCb3goc3ZnRWxlbSA9IHN2ZykKWE1MMlN0cmluZyhlbGVtKQogIGdldFdpZHRoSGVpZ2h0KHN2Z0VsZW0gPSBzdmcsIHQgPSBhID0+IGEpCiAgZ2V0VHJhbnNmb3JtYXRpb25MaXN0KGUpCiAgZ2V0VHJhbnNmb3JtYXRpb25NYXRyaXgoZSkKICBtYWluKC4uLmFyZ3MpCiAgKF94LCBfeSwgb3B0cykgPT4KICAoKSA9PgogIGEgPT4KICBhID0+CiAgYSA9PgogIHByaW50ID0gKGZpbGUsIC4uLmFyZ3MpID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICB1ID0+CihhLCBpKSA9PgAAAAAAAAAAaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					775,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3792,
								3796
							],
							[
								3950,
								3980
							],
							[
								4032,
								4046
							],
							[
								5070,
								5084
							],
							[
								5335,
								5371
							],
							[
								5482,
								5501
							],
							[
								5511,
								5520
							],
							[
								5534,
								5558
							],
							[
								5644,
								5672
							],
							[
								5762,
								5788
							],
							[
								5948,
								6010
							],
							[
								6185,
								6220
							],
							[
								6312,
								6349
							],
							[
								6430,
								6450
							],
							[
								6526,
								6550
							],
							[
								7327,
								7331
							],
							[
								7356,
								7360
							],
							[
								7425,
								7436
							],
							[
								7641,
								7676
							],
							[
								7818,
								7842
							],
							[
								7898,
								7947
							],
							[
								7962,
								7967
							],
							[
								8095,
								8105
							],
							[
								8218,
								8223
							],
							[
								8245,
								8249
							],
							[
								8346,
								8377
							],
							[
								8666,
								8699
							],
							[
								9099,
								9123
							],
							[
								9478,
								9506
							],
							[
								10122,
								10131
							],
							[
								10148,
								10157
							],
							[
								10189,
								10198
							],
							[
								10217,
								10226
							],
							[
								10240,
								10250
							],
							[
								10266,
								10275
							],
							[
								10289,
								10298
							],
							[
								10305,
								10313
							],
							[
								10328,
								10351
							],
							[
								10362,
								10371
							],
							[
								10416,
								10448
							],
							[
								10526,
								10560
							],
							[
								10756,
								10781
							],
							[
								10838,
								10888
							],
							[
								11158,
								11191
							],
							[
								11291,
								11326
							],
							[
								11403,
								11425
							],
							[
								12042,
								12060
							],
							[
								12103,
								12109
							],
							[
								12143,
								12148
							],
							[
								12190,
								12195
							],
							[
								12278,
								12283
							],
							[
								12578,
								12604
							],
							[
								12705,
								12731
							],
							[
								13931,
								13935
							],
							[
								14025,
								14034
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					776,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3792,
								3796
							],
							[
								3950,
								3980
							],
							[
								4032,
								4046
							],
							[
								5070,
								5084
							],
							[
								5335,
								5371
							],
							[
								5482,
								5501
							],
							[
								5511,
								5520
							],
							[
								5534,
								5558
							],
							[
								5644,
								5672
							],
							[
								5762,
								5788
							],
							[
								5948,
								6010
							],
							[
								6185,
								6220
							],
							[
								6312,
								6349
							],
							[
								6430,
								6450
							],
							[
								6526,
								6550
							],
							[
								7327,
								7331
							],
							[
								7356,
								7360
							],
							[
								7425,
								7436
							],
							[
								7641,
								7676
							],
							[
								7818,
								7842
							],
							[
								7898,
								7947
							],
							[
								7962,
								7967
							],
							[
								8095,
								8105
							],
							[
								8218,
								8223
							],
							[
								8245,
								8249
							],
							[
								8346,
								8377
							],
							[
								8666,
								8699
							],
							[
								9099,
								9123
							],
							[
								9478,
								9506
							],
							[
								10122,
								10131
							],
							[
								10148,
								10157
							],
							[
								10189,
								10198
							],
							[
								10217,
								10226
							],
							[
								10240,
								10250
							],
							[
								10266,
								10275
							],
							[
								10289,
								10298
							],
							[
								10305,
								10313
							],
							[
								10328,
								10351
							],
							[
								10362,
								10371
							],
							[
								10416,
								10448
							],
							[
								10526,
								10560
							],
							[
								10756,
								10781
							],
							[
								10838,
								10888
							],
							[
								11158,
								11191
							],
							[
								11291,
								11326
							],
							[
								11403,
								11425
							],
							[
								12042,
								12060
							],
							[
								12103,
								12109
							],
							[
								12143,
								12148
							],
							[
								12190,
								12195
							],
							[
								12278,
								12283
							],
							[
								12578,
								12604
							],
							[
								12705,
								12731
							],
							[
								13931,
								13935
							],
							[
								14025,
								14034
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					777,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					778,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3792,
								3796
							],
							[
								3950,
								3980
							],
							[
								4032,
								4046
							],
							[
								5070,
								5084
							],
							[
								5335,
								5371
							],
							[
								5482,
								5501
							],
							[
								5511,
								5520
							],
							[
								5534,
								5558
							],
							[
								5644,
								5672
							],
							[
								5762,
								5788
							],
							[
								5948,
								6010
							],
							[
								6185,
								6220
							],
							[
								6312,
								6349
							],
							[
								6430,
								6450
							],
							[
								6526,
								6550
							],
							[
								7327,
								7331
							],
							[
								7356,
								7360
							],
							[
								7425,
								7436
							],
							[
								7641,
								7676
							],
							[
								7818,
								7842
							],
							[
								7898,
								7947
							],
							[
								7962,
								7967
							],
							[
								8095,
								8105
							],
							[
								8218,
								8223
							],
							[
								8245,
								8249
							],
							[
								8346,
								8377
							],
							[
								8666,
								8699
							],
							[
								9099,
								9123
							],
							[
								9478,
								9506
							],
							[
								10122,
								10131
							],
							[
								10148,
								10157
							],
							[
								10189,
								10198
							],
							[
								10217,
								10226
							],
							[
								10240,
								10250
							],
							[
								10266,
								10275
							],
							[
								10289,
								10298
							],
							[
								10305,
								10313
							],
							[
								10328,
								10351
							],
							[
								10362,
								10371
							],
							[
								10416,
								10448
							],
							[
								10526,
								10560
							],
							[
								10756,
								10781
							],
							[
								10838,
								10888
							],
							[
								11158,
								11191
							],
							[
								11291,
								11326
							],
							[
								11403,
								11425
							],
							[
								12042,
								12060
							],
							[
								12103,
								12109
							],
							[
								12143,
								12148
							],
							[
								12190,
								12195
							],
							[
								12278,
								12283
							],
							[
								12578,
								12604
							],
							[
								12705,
								12731
							],
							[
								13931,
								13935
							],
							[
								14025,
								14034
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AwAAAAAAAAAAAAAAaAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgEAAAgIHBhcnNlU1ZHUGF0aChzKQogIHBhcnNlVmFsdWVzID0gYXJncyA9PgogIChfLCBjLCBhcmdzKSA9PgogIHNwbGl0UGF0aChwcykKICBwYXRoVG9BYnNvbHV0ZShwYXRoKQogIHBhdGhUb1BvaW50cyhwYXRoKQogIGlzVXBwZXIgPSBzID0+Ck1ha2VQb2ludD0oeCx5KSA9PgogIG4gPT4KICBwb2ludHNUb0Fic29sdXRlKGl0KQogIGlzVXBwZXIgPSBzID0+CiAgc2F2ZShmaWxlbmFtZSkKTnVtZXJpY0FyZ3MocywgdCA9IGEgPT4gYSkKICBkZXJlZiA9IHAgPT4gb2JqID0+CihvLCBrKSA9PgpQYXJlbnRQYXRocyhwKQpDdW11bGF0aXZlUGF0aHMocCkKQWxsUGFyZW50cyhlbGVtKQpBbGxUcmFuc2Zvcm1zKGVsZW0sIGdldHRlciA9IGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KQpFbGVtZW50VHJhbnNmb3JtTGlzdChlbGVtKQpFbGVtZW50VHJhbnNmb3JtTWF0cml4KGVsZW0pCkdldFhZKGVsZW0pCkdldFBvaW50cyhlbGVtKQogIGMgPT4KICBhID0+CihbeCwgeV0pID0+CkdldFRyYW5zZm9ybWVkUG9pbnRzKGVsZW0pCkdldE1hdHJpeChlbGVtKQpQb3NpdGlvbmVkRWxlbWVudHMoc3ZnRWxlbSA9IHN2Zywgc2tpcCkKKCkgPT4KICAodiwgcCkgPT4KICBlID0+CiAgbiA9PgpIYXNQYXJlbnQoZWxlbSwgb3RoZXIpCkdldEJvdW5kcyhzdmdFbGVtID0gc3ZnKQpQcm9jZXNzUGF0aChkKQogIHVuaXRDb252VG9NTSh2YWx1ZSkKICBwYzogbW0gPT4KICBweDogbW0gPT4KICBwdDogbW0gPT4KICBpbjogbW0gPT4KICBtaWw6IG1tID0+CiAgY206IG1tID0+CiAgbW06IG1tID0+CiAgbTogbW0gPT4KICB1bml0Q29udih1bml0KQogIHZhbHVlID0+CiAgdW5pdENvbnZUbyh2YWx1ZSwgdW5pdCkKICBnZXRWaWV3Qm94KHN2Z0VsZW0gPSBzdmcpClhNTDJTdHJpbmcoZWxlbSkKICBnZXRXaWR0aEhlaWdodChzdmdFbGVtID0gc3ZnLCB0ID0gYSA9PiBhKQogIGdldFRyYW5zZm9ybWF0aW9uTGlzdChlKQogIGdldFRyYW5zZm9ybWF0aW9uTWF0cml4KGUpCiAgbWFpbiguLi5hcmdzKQogIChfeCwgX3ksIG9wdHMpID0+CiAgKCkgPT4KICBhID0+CiAgYSA9PgogIGEgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHByaW50ID0gKGZpbGUsIC4uLmFyZ3MpID0+CiAgdSA9PgooYSwgaSkgPT4AAAAAAAAAAGgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					781,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
						"symkeys":
						[
							[
								1492,
								1516
							],
							[
								1736,
								1757
							],
							[
								1983,
								1999
							],
							[
								2553,
								2575
							],
							[
								2874,
								2904
							],
							[
								3064,
								3091
							],
							[
								3228,
								3242
							],
							[
								3344,
								3362
							],
							[
								3792,
								3796
							],
							[
								3950,
								3980
							],
							[
								4032,
								4046
							],
							[
								5070,
								5084
							],
							[
								5335,
								5371
							],
							[
								5482,
								5501
							],
							[
								5511,
								5520
							],
							[
								5534,
								5558
							],
							[
								5644,
								5672
							],
							[
								5762,
								5788
							],
							[
								5948,
								6010
							],
							[
								6185,
								6220
							],
							[
								6312,
								6349
							],
							[
								6430,
								6450
							],
							[
								6526,
								6550
							],
							[
								7327,
								7331
							],
							[
								7356,
								7360
							],
							[
								7425,
								7436
							],
							[
								7641,
								7676
							],
							[
								7818,
								7842
							],
							[
								7898,
								7947
							],
							[
								7962,
								7967
							],
							[
								8095,
								8105
							],
							[
								8218,
								8223
							],
							[
								8245,
								8249
							],
							[
								8346,
								8377
							],
							[
								8666,
								8699
							],
							[
								9099,
								9123
							],
							[
								9478,
								9506
							],
							[
								10122,
								10131
							],
							[
								10148,
								10157
							],
							[
								10189,
								10198
							],
							[
								10217,
								10226
							],
							[
								10240,
								10250
							],
							[
								10266,
								10275
							],
							[
								10289,
								10298
							],
							[
								10305,
								10313
							],
							[
								10328,
								10351
							],
							[
								10362,
								10371
							],
							[
								10416,
								10448
							],
							[
								10526,
								10560
							],
							[
								10756,
								10781
							],
							[
								10838,
								10888
							],
							[
								11158,
								11191
							],
							[
								11291,
								11326
							],
							[
								11403,
								11425
							],
							[
								12042,
								12060
							],
							[
								12103,
								12109
							],
							[
								12143,
								12148
							],
							[
								12190,
								12195
							],
							[
								12278,
								12283
							],
							[
								12578,
								12604
							],
							[
								12705,
								12731
							],
							[
								13931,
								13935
							],
							[
								14025,
								14034
							]
						],
						"symlist":
						[
							"function parseSVGPath(s)",
							"parseValues = args =>",
							" (_, c, args) =>",
							"function splitPath(ps)",
							"function* pathToAbsolute(path)",
							"function pathToPoints(path)",
							"isUpper = s =>",
							"MakePoint=(x,y) =>",
							"n =>",
							"function* pointsToAbsolute(it)",
							"isUpper = s =>",
							"save(filename)",
							"function* NumericArgs(s, t = a => a)",
							"deref = p => obj =>",
							"(o, k) =>",
							"function* ParentPaths(p)",
							"function* CumulativePaths(p)",
							"function* AllParents(elem)",
							"function AllTransforms(elem, getter = getTransformationMatrix)",
							"function ElementTransformList(elem)",
							"function ElementTransformMatrix(elem)",
							"function GetXY(elem)",
							"function GetPoints(elem)",
							"c =>",
							"a =>",
							"([x, y]) =>",
							"function GetTransformedPoints(elem)",
							"function GetMatrix(elem)",
							"function* PositionedElements(svgElem = svg, skip)",
							"() =>",
							" (v, p) =>",
							" e =>",
							"n =>",
							"function HasParent(elem, other)",
							"function GetBounds(svgElem = svg)",
							"function* ProcessPath(d)",
							"function unitConvToMM(value)",
							"pc: mm =>",
							"px: mm =>",
							"pt: mm =>",
							"in: mm =>",
							"mil: mm =>",
							"cm: mm =>",
							"mm: mm =>",
							"m: mm =>",
							"function unitConv(unit)",
							" value =>",
							"function unitConvTo(value, unit)",
							"function getViewBox(svgElem = svg)",
							"function XML2String(elem)",
							"function getWidthHeight(svgElem = svg, t = a => a)",
							"function getTransformationList(e)",
							"function getTransformationMatrix(e)",
							"function main(...args)",
							" (_x, _y, opts) =>",
							" () =>",
							" a =>",
							" a =>",
							" a =>",
							"print = (file, ...args) =>",
							"print = (file, ...args) =>",
							"u =>",
							"(a, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoBAAAICBwYXJzZVNWR1BhdGgocykKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAoXywgYywgYXJncykgPT4KICBzcGxpdFBhdGgocHMpCiAgcGF0aFRvQWJzb2x1dGUocGF0aCkKICBwYXRoVG9Qb2ludHMocGF0aCkKICBpc1VwcGVyID0gcyA9PgpNYWtlUG9pbnQ9KHgseSkgPT4KICBuID0+CiAgcG9pbnRzVG9BYnNvbHV0ZShpdCkKICBpc1VwcGVyID0gcyA9PgogIHNhdmUoZmlsZW5hbWUpCk51bWVyaWNBcmdzKHMsIHQgPSBhID0+IGEpCiAgZGVyZWYgPSBwID0+IG9iaiA9PgoobywgaykgPT4KUGFyZW50UGF0aHMocCkKQ3VtdWxhdGl2ZVBhdGhzKHApCkFsbFBhcmVudHMoZWxlbSkKQWxsVHJhbnNmb3JtcyhlbGVtLCBnZXR0ZXIgPSBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeCkKRWxlbWVudFRyYW5zZm9ybUxpc3QoZWxlbSkKRWxlbWVudFRyYW5zZm9ybU1hdHJpeChlbGVtKQpHZXRYWShlbGVtKQpHZXRQb2ludHMoZWxlbSkKICBjID0+CiAgYSA9PgooW3gsIHldKSA9PgpHZXRUcmFuc2Zvcm1lZFBvaW50cyhlbGVtKQpHZXRNYXRyaXgoZWxlbSkKUG9zaXRpb25lZEVsZW1lbnRzKHN2Z0VsZW0gPSBzdmcsIHNraXApCigpID0+CiAgKHYsIHApID0+CiAgZSA9PgogIG4gPT4KSGFzUGFyZW50KGVsZW0sIG90aGVyKQpHZXRCb3VuZHMoc3ZnRWxlbSA9IHN2ZykKUHJvY2Vzc1BhdGgoZCkKICB1bml0Q29udlRvTU0odmFsdWUpCiAgcGM6IG1tID0+CiAgcHg6IG1tID0+CiAgcHQ6IG1tID0+CiAgaW46IG1tID0+CiAgbWlsOiBtbSA9PgogIGNtOiBtbSA9PgogIG1tOiBtbSA9PgogIG06IG1tID0+CiAgdW5pdENvbnYodW5pdCkKICB2YWx1ZSA9PgogIHVuaXRDb252VG8odmFsdWUsIHVuaXQpCiAgZ2V0Vmlld0JveChzdmdFbGVtID0gc3ZnKQpYTUwyU3RyaW5nKGVsZW0pCiAgZ2V0V2lkdGhIZWlnaHQoc3ZnRWxlbSA9IHN2ZywgdCA9IGEgPT4gYSkKICBnZXRUcmFuc2Zvcm1hdGlvbkxpc3QoZSkKICBnZXRUcmFuc2Zvcm1hdGlvbk1hdHJpeChlKQogIG1haW4oLi4uYXJncykKICAoX3gsIF95LCBvcHRzKSA9PgogICgpID0+CiAgYSA9PgogIGEgPT4KICBhID0+CiAgcHJpbnQgPSAoZmlsZSwgLi4uYXJncykgPT4KICBwcmludCA9IChmaWxlLCAuLi5hcmdzKSA9PgogIHUgPT4KKGEsIGkpID0+AAAAAAAAAABoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQIAAAAAAAAhAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "svg-crop-pad.js",
			"settings":
			{
				"buffer_size": 15143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3555,
					1,
					"left_delete",
					null,
					"AQAAALkOAAAAAAAAuQ4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAug4AAAAAAAC6DgAAAAAAAAAAAAAAAGBA"
				],
				[
					3571,
					1,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AQAAAF4MAAAAAAAASA4AAAAAAADvAQAACiAgbGV0IGxhc3Rtb3ZlOwoKICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgIGxldCBwdCwKICAgICAgY21kID0gc3BsaXR0ZWRbaV07CgogICAgc3dpdGNoIChjbWRbMF0udG9Mb3dlckNhc2UoKSkgewogICAgICBjYXNlICd6JzoKICAgICAgICBwdCA9IG5ldyBQb2ludCgrbGFzdG1vdmVbMV0sICtsYXN0bW92ZVsyXSk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ3YnOgogICAgICAgIHB0ID0gbmV3IFBvaW50KDAsICtjbWRbMV0pOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdoJzoKICAgICAgICBwdCA9IG5ldyBQb2ludCgrY21kWzFdLCAwKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnbSc6CiAgICAgICAgbGFzdG1vdmUgPSBjbWQ7CgogICAgICBkZWZhdWx0OgogICAgICAgIHB0ID0gbmV3IFBvaW50KC4uLmNtZC5zbGljZSgtMikubWFwKG4gPT4gK24pKTsKICAgICAgICBicmVhazsKICAgIH0KICAgIHB0LmNtZCA9IGNtZDsK",
					"AQAAAAAAAAABAAAAXgwAAAAAAABNDgAAAAAAAAAAAAAAAPC/"
				],
				[
					3640,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAALcZAAAAAAAAuBkAAAAAAAAAAAAAuBkAAAAAAAC6GQAAAAAAAAAAAAC6GQAAAAAAALwZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxkAAAAAAAC3GQAAAAAAAAAAAAAAAPC/"
				],
				[
					3644,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAALIaAAAAAAAAtBoAAAAAAAAAAAAAvRkAAAAAAAC/GQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRkAAAAAAACyGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3647,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAALoZAAAAAAAAuxkAAAAAAAAAAAAAuxkAAAAAAAC9GQAAAAAAAAAAAAC4GQAAAAAAALgZAAAAAAAAAgAAACAg",
					"AQAAAAAAAAABAAAAuhkAAAAAAAC6GQAAAAAAAAAAAAAAADBA"
				],
				[
					3651,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAALgZAAAAAAAAuRkAAAAAAAAAAAAAuRkAAAAAAAC6GQAAAAAAAAAAAAC6GQAAAAAAALsZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBkAAAAAAAC4GQAAAAAAAAAAAAAAADBA"
				],
				[
					3652,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALsZAAAAAAAAvBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuxkAAAAAAAC7GQAAAAAAAAAAAAAAAPC/"
				],
				[
					3656,
					1,
					"",
					null,
					"AQAAALwZAAAAAAAA4RkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvBkAAAAAAAC8GQAAAAAAAAAAAAAAAPC/"
				],
				[
					3657,
					1,
					"left_delete",
					null,
					"AQAAAOAZAAAAAAAA4BkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA4RkAAAAAAADhGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3658,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOAZAAAAAAAA4RkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BkAAAAAAADgGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3659,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOEZAAAAAAAA4hkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RkAAAAAAADhGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3662,
					1,
					"insert",
					{
						"characters": "elt"
					},
					"AwAAAOIZAAAAAAAA4xkAAAAAAAAAAAAA4xkAAAAAAADkGQAAAAAAAAAAAADkGQAAAAAAAOUZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hkAAAAAAADiGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3663,
					1,
					"insert",
					{
						"characters": " pa"
					},
					"AwAAAOUZAAAAAAAA5hkAAAAAAAAAAAAA5hkAAAAAAADnGQAAAAAAAAAAAADnGQAAAAAAAOgZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RkAAAAAAADlGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3664,
					6,
					"left_delete",
					null,
					"BgAAAOcZAAAAAAAA5xkAAAAAAAABAAAAYeYZAAAAAAAA5hkAAAAAAAABAAAAcOUZAAAAAAAA5RkAAAAAAAABAAAAIOQZAAAAAAAA5BkAAAAAAAABAAAAdOMZAAAAAAAA4xkAAAAAAAABAAAAbOIZAAAAAAAA4hkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA6BkAAAAAAADoGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3665,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAOIZAAAAAAAA4xkAAAAAAAAAAAAA4xkAAAAAAADkGQAAAAAAAAAAAADkGQAAAAAAAOUZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hkAAAAAAADiGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3666,
					1,
					"insert",
					{
						"characters": " pa="
					},
					"BAAAAOUZAAAAAAAA5hkAAAAAAAAAAAAA5hkAAAAAAADnGQAAAAAAAAAAAADnGQAAAAAAAOgZAAAAAAAAAAAAAOgZAAAAAAAA6RkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RkAAAAAAADlGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3668,
					1,
					"",
					null,
					"AQAAAOkZAAAAAAAABxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RkAAAAAAADpGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3671,
					4,
					"right_delete",
					null,
					"BAAAAOYZAAAAAAAA5hkAAAAAAAABAAAAcOYZAAAAAAAA5hkAAAAAAAABAAAAYeYZAAAAAAAA5hkAAAAAAAABAAAAPeYZAAAAAAAA5hkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA5hkAAAAAAADmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3674,
					1,
					"insert",
					{
						"characters": "M"
					},
					"AQAAAAIaAAAAAAAAAxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAhoAAAAAAAACGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3675,
					1,
					"left_delete",
					null,
					"AQAAAAIaAAAAAAAAAhoAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAAxoAAAAAAAADGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3676,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAIaAAAAAAAAAxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAhoAAAAAAAACGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3680,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAQaAAAAAAAABRoAAAAAAAAAAAAABRoAAAAAAAAGGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBoAAAAAAAAEGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3684,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAAUaAAAAAAAABhoAAAAAAAAAAAAABhoAAAAAAAAHGgAAAAAAAAAAAAAHGgAAAAAAAAgaAAAAAAAAAAAAAAgaAAAAAAAACRoAAAAAAAAAAAAACRoAAAAAAAAKGgAAAAAAAAAAAAAKGgAAAAAAAAsaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABRoAAAAAAAAFGgAAAAAAAAAAAAAAAAAA"
				],
				[
					3768,
					1,
					"insert",
					{
						"characters": " pa;"
					},
					"BAAAAAsaAAAAAAAADBoAAAAAAAAAAAAADBoAAAAAAAANGgAAAAAAAAAAAAANGgAAAAAAAA4aAAAAAAAAAAAAAA4aAAAAAAAADxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACxoAAAAAAAALGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3771,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"AgAAAA8aAAAAAAAAEBoAAAAAAAAAAAAAEBoAAAAAAAARGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxoAAAAAAAAPGgAAAAAAAAAAAAAAAFRA"
				],
				[
					3776,
					1,
					"left_delete",
					null,
					"AQAAABAaAAAAAAAAEBoAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAERoAAAAAAAARGgAAAAAAAAAAAAAAACBA"
				],
				[
					3783,
					2,
					"right_delete",
					null,
					"AgAAABcaAAAAAAAAFxoAAAAAAAABAAAALxcaAAAAAAAAFxoAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAFxoAAAAAAAAXGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3788,
					2,
					"right_delete",
					null,
					"AgAAAAwbAAAAAAAADBsAAAAAAAABAAAAKgwbAAAAAAAADBsAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAADBsAAAAAAAAMGwAAAAAAAAAAAAAAAPC/"
				],
				[
					3792,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA4hoAAAAAAADiGgAAAAAAAAAAAAAAAEhA"
				],
				[
					3797,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAACAaAAAAAAAAIhoAAAAAAAAAAAAAvRkAAAAAAAC/GQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRkAAAAAAAAgGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3810,
					1,
					"insert",
					{
						"characters": "globalThis"
					},
					"CgAAABEUAAAAAAAAEhQAAAAAAAAAAAAAEhQAAAAAAAATFAAAAAAAAAAAAAATFAAAAAAAABQUAAAAAAAAAAAAABQUAAAAAAAAFRQAAAAAAAAAAAAAFRQAAAAAAAAWFAAAAAAAAAAAAAAWFAAAAAAAABcUAAAAAAAAAAAAABcUAAAAAAAAGBQAAAAAAAAAAAAAGBQAAAAAAAAZFAAAAAAAAAAAAAAZFAAAAAAAABoUAAAAAAAAAAAAABoUAAAAAAAAGxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERQAAAAAAAARFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3811,
					10,
					"left_delete",
					null,
					"CgAAABoUAAAAAAAAGhQAAAAAAAABAAAAcxkUAAAAAAAAGRQAAAAAAAABAAAAaRgUAAAAAAAAGBQAAAAAAAABAAAAaBcUAAAAAAAAFxQAAAAAAAABAAAAVBYUAAAAAAAAFhQAAAAAAAABAAAAbBUUAAAAAAAAFRQAAAAAAAABAAAAYRQUAAAAAAAAFBQAAAAAAAABAAAAYhMUAAAAAAAAExQAAAAAAAABAAAAbxIUAAAAAAAAEhQAAAAAAAABAAAAbBEUAAAAAAAAERQAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAGxQAAAAAAAAbFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3820,
					1,
					"insert",
					{
						"characters": ",deref"
					},
					"BgAAAA4sAAAAAAAADywAAAAAAAAAAAAADywAAAAAAAAQLAAAAAAAAAAAAAAQLAAAAAAAABEsAAAAAAAAAAAAABEsAAAAAAAAEiwAAAAAAAAAAAAAEiwAAAAAAAATLAAAAAAAAAAAAAATLAAAAAAAABQsAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADiwAAAAAAAAOLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3850,
					2,
					"left_delete",
					null,
					"AgAAAL4ZAAAAAAAAvhkAAAAAAAABAAAAKr0ZAAAAAAAAvRkAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAvxkAAAAAAAC/GQAAAAAAAAAAAAAAAPC/"
				],
				[
					3851,
					1,
					"insert",
					{
						"characters": "try"
					},
					"AwAAAL0ZAAAAAAAAvhkAAAAAAAAAAAAAvhkAAAAAAAC/GQAAAAAAAAAAAAC/GQAAAAAAAMAZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRkAAAAAAAC9GQAAAAAAAAAAAAAAAPC/"
				],
				[
					3852,
					1,
					"insert",
					{
						"characters": " {"
					},
					"AgAAAMAZAAAAAAAAwRkAAAAAAAAAAAAAwRkAAAAAAADCGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwBkAAAAAAADAGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3853,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAMIZAAAAAAAAwxkAAAAAAAAAAAAAwxkAAAAAAADHGQAAAAAAAAAAAADDGQAAAAAAAMMZAAAAAAAABAAAACAgICDDGQAAAAAAAMkZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhkAAAAAAADCGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3856,
					2,
					"left_delete",
					null,
					"AgAAAC0aAAAAAAAALRoAAAAAAAABAAAALywaAAAAAAAALBoAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAALhoAAAAAAAAuGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3857,
					1,
					"run_macro_file",
					{
						"event":
						{
							"modifier_keys":
							{
							}
						},
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AgAAACwaAAAAAAAALRoAAAAAAAAAAAAALRoAAAAAAAAxGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBoAAAAAAAAsGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3858,
					1,
					"insert",
					{
						"characters": "}catch"
					},
					"CAAAADEaAAAAAAAAMhoAAAAAAAAAAAAALRoAAAAAAAAtGgAAAAAAAAQAAAAgICAgLRoAAAAAAAAvGgAAAAAAAAAAAAAwGgAAAAAAADEaAAAAAAAAAAAAADEaAAAAAAAAMhoAAAAAAAAAAAAAMhoAAAAAAAAzGgAAAAAAAAAAAAAzGgAAAAAAADQaAAAAAAAAAAAAADQaAAAAAAAANRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMRoAAAAAAAAxGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3859,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADUaAAAAAAAANxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANRoAAAAAAAA1GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3860,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAADYaAAAAAAAANxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhoAAAAAAAA2GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3862,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADgaAAAAAAAAORoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBoAAAAAAAA4GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3863,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADkaAAAAAAAAOxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORoAAAAAAAA5GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3865,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADsaAAAAAAAAPBoAAAAAAAAAAAAAPBoAAAAAAAA+GgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxoAAAAAAAA7GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3870,
					1,
					"left_delete",
					null,
					"AQAAADwaAAAAAAAAPBoAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAPhoAAAAAAAA+GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3871,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAADsaAAAAAAAAOxoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAPBoAAAAAAAA8GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3874,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOxoAAAAAAAA7GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3886,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAAQaAAAAAAAABRoAAAAAAAAAAAAABRoAAAAAAAAGGgAAAAAAAAAAAAAGGgAAAAAAAAcaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBoAAAAAAAAEGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3887,
					1,
					"insert",
					{
						"characters": " PointList("
					},
					"CwAAAAcaAAAAAAAACBoAAAAAAAAAAAAACBoAAAAAAAAJGgAAAAAAAAAAAAAJGgAAAAAAAAoaAAAAAAAAAAAAAAoaAAAAAAAACxoAAAAAAAAAAAAACxoAAAAAAAAMGgAAAAAAAAAAAAAMGgAAAAAAAA0aAAAAAAAAAAAAAA0aAAAAAAAADhoAAAAAAAAAAAAADhoAAAAAAAAPGgAAAAAAAAAAAAAPGgAAAAAAABAaAAAAAAAAAAAAABAaAAAAAAAAERoAAAAAAAAAAAAAERoAAAAAAAASGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABxoAAAAAAAAHGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3888,
					4,
					"right_delete",
					null,
					"BAAAABIaAAAAAAAAEhoAAAAAAAABAAAAWxIaAAAAAAAAEhoAAAAAAAABAAAALhIaAAAAAAAAEhoAAAAAAAABAAAALhIaAAAAAAAAEhoAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAEhoAAAAAAAASGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3891,
					1,
					"left_delete",
					null,
					"AQAAACYaAAAAAAAAJhoAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAJxoAAAAAAAAnGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3892,
					1,
					"insert",
					{
						"characters": "‚Åæ"
					},
					"AQAAACYaAAAAAAAAJxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJhoAAAAAAAAmGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3893,
					1,
					"left_delete",
					null,
					"AQAAACYaAAAAAAAAJhoAAAAAAAADAAAA4oG+",
					"AQAAAAAAAAABAAAAJxoAAAAAAAAnGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3894,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAACYaAAAAAAAAJxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJhoAAAAAAAAmGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3898,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACkaAAAAAAAAKhoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKRoAAAAAAAApGgAAAAAAAAAAAAAAAHlA"
				],
				[
					3900,
					1,
					"insert",
					{
						"characters": "\npa."
					},
					"BAAAACkaAAAAAAAAKhoAAAAAAAAAAAAAKhoAAAAAAAArGgAAAAAAAAAAAAArGgAAAAAAACwaAAAAAAAAAAAAACwaAAAAAAAALRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKRoAAAAAAAApGgAAAAAAAAAAAAAAAAAA"
				],
				[
					3905,
					1,
					"insert",
					{
						"characters": "points"
					},
					"BgAAAC0aAAAAAAAALhoAAAAAAAAAAAAALhoAAAAAAAAvGgAAAAAAAAAAAAAvGgAAAAAAADAaAAAAAAAAAAAAADAaAAAAAAAAMRoAAAAAAAAAAAAAMRoAAAAAAAAyGgAAAAAAAAAAAAAyGgAAAAAAADMaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRoAAAAAAAAtGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3906,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADMaAAAAAAAANRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMxoAAAAAAAAzGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3907,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAADMaAAAAAAAAMxoAAAAAAAABAAAAKDMaAAAAAAAAMxoAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAANBoAAAAAAAA0GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3908,
					1,
					"insert",
					{
						"characters": "=pp;:"
					},
					"BQAAADMaAAAAAAAANBoAAAAAAAAAAAAANBoAAAAAAAA1GgAAAAAAAAAAAAA1GgAAAAAAADYaAAAAAAAAAAAAADYaAAAAAAAANxoAAAAAAAAAAAAANxoAAAAAAAA4GgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMxoAAAAAAAAzGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3909,
					1,
					"left_delete",
					null,
					"AQAAADcaAAAAAAAANxoAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAOBoAAAAAAAA4GgAAAAAAAAAAAAAAAPC/"
				],
				[
					3929,
					1,
					"insert",
					{
						"characters": "pt.cmd.t"
					},
					"CAAAANgOAAAAAAAA2Q4AAAAAAAAAAAAA2Q4AAAAAAADaDgAAAAAAAAAAAADaDgAAAAAAANsOAAAAAAAAAAAAANsOAAAAAAAA3A4AAAAAAAAAAAAA3A4AAAAAAADdDgAAAAAAAAAAAADdDgAAAAAAAN4OAAAAAAAAAAAAAN4OAAAAAAAA3w4AAAAAAAAAAAAA3w4AAAAAAADgDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2A4AAAAAAADYDgAAAAAAAAAAAAAAAPC/"
				],
				[
					3930,
					2,
					"left_delete",
					null,
					"AgAAAN8OAAAAAAAA3w4AAAAAAAABAAAAdN4OAAAAAAAA3g4AAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA4A4AAAAAAADgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					3931,
					1,
					"insert",
					{
						"characters": "[0].toLowerCase"
					},
					"DwAAAN4OAAAAAAAA3w4AAAAAAAAAAAAA3w4AAAAAAADgDgAAAAAAAAAAAADgDgAAAAAAAOEOAAAAAAAAAAAAAOEOAAAAAAAA4g4AAAAAAAAAAAAA4g4AAAAAAADjDgAAAAAAAAAAAADjDgAAAAAAAOQOAAAAAAAAAAAAAOQOAAAAAAAA5Q4AAAAAAAAAAAAA5Q4AAAAAAADmDgAAAAAAAAAAAADmDgAAAAAAAOcOAAAAAAAAAAAAAOcOAAAAAAAA6A4AAAAAAAAAAAAA6A4AAAAAAADpDgAAAAAAAAAAAADpDgAAAAAAAOoOAAAAAAAAAAAAAOoOAAAAAAAA6w4AAAAAAAAAAAAA6w4AAAAAAADsDgAAAAAAAAAAAADsDgAAAAAAAO0OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3g4AAAAAAADeDgAAAAAAAAAAAAAAAPC/"
				],
				[
					3932,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAAO0OAAAAAAAA7g4AAAAAAAAAAAAA7g4AAAAAAADvDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7Q4AAAAAAADtDgAAAAAAAAAAAAAAAPC/"
				],
				[
					3933,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAO8OAAAAAAAA8A4AAAAAAAAAAAAA8A4AAAAAAADxDgAAAAAAAAAAAADxDgAAAAAAAPIOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7w4AAAAAAADvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					3934,
					1,
					"insert",
					{
						"characters": " 'm?"
					},
					"BAAAAPIOAAAAAAAA8w4AAAAAAAAAAAAA8w4AAAAAAAD0DgAAAAAAAAAAAAD0DgAAAAAAAPUOAAAAAAAAAAAAAPUOAAAAAAAA9g4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8g4AAAAAAADyDgAAAAAAAAAAAAAAAPC/"
				],
				[
					3935,
					1,
					"left_delete",
					null,
					"AQAAAPUOAAAAAAAA9Q4AAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAA9g4AAAAAAAD2DgAAAAAAAAAAAAAAAPC/"
				],
				[
					3936,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAPUOAAAAAAAA9g4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9Q4AAAAAAAD1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					3937,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAPYOAAAAAAAA9w4AAAAAAAAAAAAA9w4AAAAAAAD4DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9g4AAAAAAAD2DgAAAAAAAAAAAAAAAPC/"
				],
				[
					3938,
					1,
					"insert",
					{
						"characters": " pt"
					},
					"AwAAAPgOAAAAAAAA+Q4AAAAAAAAAAAAA+Q4AAAAAAAD6DgAAAAAAAAAAAAD6DgAAAAAAAPsOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+A4AAAAAAAD4DgAAAAAAAAAAAAAAAPC/"
				],
				[
					3939,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAPsOAAAAAAAA/A4AAAAAAAAAAAAA/A4AAAAAAAD9DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+w4AAAAAAAD7DgAAAAAAAAAAAAAAAPC/"
				],
				[
					3940,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP0OAAAAAAAA/g4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/Q4AAAAAAAD9DgAAAAAAAAAAAAAAAPC/"
				],
				[
					3948,
					1,
					"insert",
					{
						"characters": ".clone"
					},
					"BgAAAPsOAAAAAAAA/A4AAAAAAAAAAAAA/A4AAAAAAAD9DgAAAAAAAAAAAAD9DgAAAAAAAP4OAAAAAAAAAAAAAP4OAAAAAAAA/w4AAAAAAAAAAAAA/w4AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAEPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+w4AAAAAAAD7DgAAAAAAAAAAAAAAAPC/"
				],
				[
					3949,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAEPAAAAAAAAAw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQ8AAAAAAAABDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4003,
					1,
					"insert",
					{
						"characters": "\np.round"
					},
					"CQAAACcPAAAAAAAAKA8AAAAAAAAAAAAAKA8AAAAAAAAsDwAAAAAAAAAAAAAsDwAAAAAAAC0PAAAAAAAAAAAAAC0PAAAAAAAALg8AAAAAAAAAAAAALg8AAAAAAAAvDwAAAAAAAAAAAAAvDwAAAAAAADAPAAAAAAAAAAAAADAPAAAAAAAAMQ8AAAAAAAAAAAAAMQ8AAAAAAAAyDwAAAAAAAAAAAAAyDwAAAAAAADMPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJw8AAAAAAAAnDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4004,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADMPAAAAAAAANQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMw8AAAAAAAAzDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4006,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADUPAAAAAAAANg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQ8AAAAAAAA1DwAAAAAAAAAAAAAAAPC/"
				],
				[
					4014,
					1,
					"cut",
					null,
					"AQAAABgPAAAAAAAAGA8AAAAAAAAUAAAAcC5jbWQgPSBwdC5jbWQ7CiAgICA",
					"AQAAAAAAAAABAAAAGA8AAAAAAAAsDwAAAAAAAAAAAAAAAEBA"
				],
				[
					4016,
					1,
					"paste",
					null,
					"AQAAACcPAAAAAAAAOw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJw8AAAAAAAAnDwAAAAAAAAAAAAAAAEBA"
				],
				[
					4060,
					1,
					"insert_snippet",
					{
						"contents": "[${0:$SELECTION}]"
					},
					"AgAAAEEaAAAAAAAAQRoAAAAAAAAOAAAAbmV3IFBvaW50TGlzdChBGgAAAAAAAFEaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQRoAAAAAAABPGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4061,
					1,
					"insert",
					{
						"characters": "..."
					},
					"BAAAAEIaAAAAAAAAQxoAAAAAAAAAAAAAQxoAAAAAAABDGgAAAAAAAA4AAABuZXcgUG9pbnRMaXN0KEMaAAAAAAAARBoAAAAAAAAAAAAARBoAAAAAAABFGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQhoAAAAAAABQGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4062,
					1,
					"right_delete",
					null,
					"AQAAAEUaAAAAAAAARRoAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAARRoAAAAAAABFGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4064,
					1,
					"insert",
					{
						"characters": "Object.setP"
					},
					"CwAAAEEaAAAAAAAAQhoAAAAAAAAAAAAAQhoAAAAAAABDGgAAAAAAAAAAAABDGgAAAAAAAEQaAAAAAAAAAAAAAEQaAAAAAAAARRoAAAAAAAAAAAAARRoAAAAAAABGGgAAAAAAAAAAAABGGgAAAAAAAEcaAAAAAAAAAAAAAEcaAAAAAAAASBoAAAAAAAAAAAAASBoAAAAAAABJGgAAAAAAAAAAAABJGgAAAAAAAEoaAAAAAAAAAAAAAEoaAAAAAAAASxoAAAAAAAAAAAAASxoAAAAAAABMGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQRoAAAAAAABBGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4065,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAEwaAAAAAAAATRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBoAAAAAAABMGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4066,
					1,
					"insert_completion",
					{
						"completion": "setPrototypeOf($1)",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setPrototypeOf(...)"
					},
					"AgAAAEgaAAAAAAAASBoAAAAAAAAFAAAAc2V0UHJIGgAAAAAAAFgaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRoAAAAAAABNGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4067,
					1,
					"right_delete",
					null,
					"AQAAAFcaAAAAAAAAVxoAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAVxoAAAAAAABXGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4069,
					2,
					"left_delete",
					null,
					"AgAAAHAaAAAAAAAAcBoAAAAAAAABAAAAO28aAAAAAAAAbxoAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAcRoAAAAAAABxGgAAAAAAAP///////+9/"
				],
				[
					4070,
					1,
					"insert",
					{
						"characters": "],"
					},
					"AgAAAG8aAAAAAAAAcBoAAAAAAAAAAAAAcBoAAAAAAABxGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbxoAAAAAAABvGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4071,
					1,
					"insert",
					{
						"characters": " Points"
					},
					"BwAAAHEaAAAAAAAAchoAAAAAAAAAAAAAchoAAAAAAABzGgAAAAAAAAAAAABzGgAAAAAAAHQaAAAAAAAAAAAAAHQaAAAAAAAAdRoAAAAAAAAAAAAAdRoAAAAAAAB2GgAAAAAAAAAAAAB2GgAAAAAAAHcaAAAAAAAAAAAAAHcaAAAAAAAAeBoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRoAAAAAAABxGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4072,
					1,
					"insert",
					{
						"characters": "L"
					},
					"AQAAAHgaAAAAAAAAeRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBoAAAAAAAB4GgAAAAAAAAAAAAAAAPC/"
				],
				[
					4073,
					2,
					"left_delete",
					null,
					"AgAAAHgaAAAAAAAAeBoAAAAAAAABAAAATHcaAAAAAAAAdxoAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAeRoAAAAAAAB5GgAAAAAAAAAAAAAAAPC/"
				],
				[
					4074,
					1,
					"insert",
					{
						"characters": "List.prototype);"
					},
					"EAAAAHcaAAAAAAAAeBoAAAAAAAAAAAAAeBoAAAAAAAB5GgAAAAAAAAAAAAB5GgAAAAAAAHoaAAAAAAAAAAAAAHoaAAAAAAAAexoAAAAAAAAAAAAAexoAAAAAAAB8GgAAAAAAAAAAAAB8GgAAAAAAAH0aAAAAAAAAAAAAAH0aAAAAAAAAfhoAAAAAAAAAAAAAfhoAAAAAAAB/GgAAAAAAAAAAAAB/GgAAAAAAAIAaAAAAAAAAAAAAAIAaAAAAAAAAgRoAAAAAAAAAAAAAgRoAAAAAAACCGgAAAAAAAAAAAACCGgAAAAAAAIMaAAAAAAAAAAAAAIMaAAAAAAAAhBoAAAAAAAAAAAAAhBoAAAAAAACFGgAAAAAAAAAAAACFGgAAAAAAAIYaAAAAAAAAAAAAAIYaAAAAAAAAhxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxoAAAAAAAB3GgAAAAAAAAAAAAAAAPC/"
				],
				[
					4094,
					1,
					"insert",
					{
						"characters": " l"
					},
					"AgAAALUOAAAAAAAAtg4AAAAAAAAAAAAAtg4AAAAAAAC3DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQ4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4095,
					3,
					"left_delete",
					null,
					"AwAAALYOAAAAAAAAtg4AAAAAAAABAAAAbLUOAAAAAAAAtQ4AAAAAAAABAAAAILQOAAAAAAAAtA4AAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAtw4AAAAAAAC3DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4096,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALQOAAAAAAAAtQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtA4AAAAAAAC0DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4097,
					1,
					"insert",
					{
						"characters": " i0"
					},
					"AwAAALUOAAAAAAAAtg4AAAAAAAAAAAAAtg4AAAAAAAC3DgAAAAAAAAAAAAC3DgAAAAAAALgOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQ4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4098,
					1,
					"left_delete",
					null,
					"AQAAALcOAAAAAAAAtw4AAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAuA4AAAAAAAC4DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4099,
					1,
					"insert",
					{
						"characters": "=0;"
					},
					"AwAAALcOAAAAAAAAuA4AAAAAAAAAAAAAuA4AAAAAAAC5DgAAAAAAAAAAAAC5DgAAAAAAALoOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtw4AAAAAAAC3DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4105,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAPsOAAAAAAAA/A4AAAAAAAAAAAAA/A4AAAAAAAD9DgAAAAAAAAAAAAD9DgAAAAAAAP4OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+w4AAAAAAAD7DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4106,
					2,
					"left_delete",
					null,
					"AgAAAP0OAAAAAAAA/Q4AAAAAAAABAAAAJvwOAAAAAAAA/A4AAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAA/g4AAAAAAAD+DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4136,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALwOAAAAAAAAvQ4AAAAAAAAAAAAAvQ4AAAAAAAC+DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvA4AAAAAAAC8DgAAAAAAAAAAAAAAACBA"
				],
				[
					4138,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAALwOAAAAAAAAvQ4AAAAAAAAAAAAAvQ4AAAAAAAC+DgAAAAAAAAAAAAC+DgAAAAAAAL8OAAAAAAAAAAAAAL8OAAAAAAAAwA4AAAAAAAAAAAAAwA4AAAAAAADBDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvA4AAAAAAAC8DgAAAAAAAAAAAAAAACBA"
				],
				[
					4139,
					1,
					"insert",
					{
						"characters": " isUpper"
					},
					"CAAAAMEOAAAAAAAAwg4AAAAAAAAAAAAAwg4AAAAAAADDDgAAAAAAAAAAAADDDgAAAAAAAMQOAAAAAAAAAAAAAMQOAAAAAAAAxQ4AAAAAAAAAAAAAxQ4AAAAAAADGDgAAAAAAAAAAAADGDgAAAAAAAMcOAAAAAAAAAAAAAMcOAAAAAAAAyA4AAAAAAAAAAAAAyA4AAAAAAADJDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQ4AAAAAAADBDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4140,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAMkOAAAAAAAAyg4AAAAAAAAAAAAAyg4AAAAAAADLDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQ4AAAAAAADJDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4141,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAMsOAAAAAAAAzA4AAAAAAAAAAAAAzA4AAAAAAADNDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyw4AAAAAAADLDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4142,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAM0OAAAAAAAAzg4AAAAAAAAAAAAAzg4AAAAAAADPDgAAAAAAAAAAAADPDgAAAAAAANAOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQ4AAAAAAADNDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4143,
					1,
					"insert",
					{
						"characters": " s.toi"
					},
					"BgAAANAOAAAAAAAA0Q4AAAAAAAAAAAAA0Q4AAAAAAADSDgAAAAAAAAAAAADSDgAAAAAAANMOAAAAAAAAAAAAANMOAAAAAAAA1A4AAAAAAAAAAAAA1A4AAAAAAADVDgAAAAAAAAAAAADVDgAAAAAAANYOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0A4AAAAAAADQDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4144,
					1,
					"left_delete",
					null,
					"AQAAANUOAAAAAAAA1Q4AAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA1g4AAAAAAADWDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4145,
					1,
					"insert",
					{
						"characters": "UpperCase"
					},
					"CQAAANUOAAAAAAAA1g4AAAAAAAAAAAAA1g4AAAAAAADXDgAAAAAAAAAAAADXDgAAAAAAANgOAAAAAAAAAAAAANgOAAAAAAAA2Q4AAAAAAAAAAAAA2Q4AAAAAAADaDgAAAAAAAAAAAADaDgAAAAAAANsOAAAAAAAAAAAAANsOAAAAAAAA3A4AAAAAAAAAAAAA3A4AAAAAAADdDgAAAAAAAAAAAADdDgAAAAAAAN4OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1Q4AAAAAAADVDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4146,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN4OAAAAAAAA4A4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3g4AAAAAAADeDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4148,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAOAOAAAAAAAA4Q4AAAAAAAAAAAAA4Q4AAAAAAADiDgAAAAAAAAAAAADiDgAAAAAAAOMOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4A4AAAAAAADgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4149,
					1,
					"insert",
					{
						"characters": " s;"
					},
					"AwAAAOMOAAAAAAAA5A4AAAAAAAAAAAAA5A4AAAAAAADlDgAAAAAAAAAAAADlDgAAAAAAAOYOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4w4AAAAAAADjDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4150,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOYOAAAAAAAA5w4AAAAAAAAAAAAA5w4AAAAAAADoDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5g4AAAAAAADmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4162,
					1,
					"paste",
					null,
					"AQAAAAsPAAAAAAAAEg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACw8AAAAAAAALDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4163,
					1,
					"insert",
					{
						"characters": ")("
					},
					"AwAAABIPAAAAAAAAEw8AAAAAAAAAAAAA5w4AAAAAAADnDgAAAAAAAAEAAAAgEg8AAAAAAAATDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEg8AAAAAAAASDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4164,
					2,
					"left_delete",
					null,
					"AgAAABIPAAAAAAAAEg8AAAAAAAABAAAAKBEPAAAAAAAAEQ8AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAEw8AAAAAAAATDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4165,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAABEPAAAAAAAAEg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQ8AAAAAAAARDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4167,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABsPAAAAAAAAHA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGw8AAAAAAAAbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4169,
					1,
					"cut",
					null,
					"AQAAABwPAAAAAAAAHA8AAAAAAAAVAAAALnRvTG93ZXJDYXNlKCkgPT0gJ20n",
					"AQAAAAAAAAABAAAAHA8AAAAAAAAxDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4174,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAHA8AAAAAAAAcDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4192,
					1,
					"insert",
					{
						"characters": "\ni"
					},
					"AwAAACIOAAAAAAAAIw4AAAAAAAAAAAAAIw4AAAAAAAArDgAAAAAAAAAAAAArDgAAAAAAACwOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIg4AAAAAAAAiDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4193,
					1,
					"left_delete",
					null,
					"AQAAACsOAAAAAAAAKw4AAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAALA4AAAAAAAAsDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4200,
					1,
					"cut",
					null,
					"AQAAAMQMAAAAAAAAxAwAAAAAAAAUAAAAY21kWzBdLnRvTG93ZXJDYXNlKCk",
					"AQAAAAAAAAABAAAAxAwAAAAAAADYDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4201,
					1,
					"paste",
					null,
					"AQAAAMQMAAAAAAAA2AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAwAAAAAAADEDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4232,
					1,
					"paste",
					null,
					"AQAAAHEMAAAAAAAAjwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQwAAAAAAABxDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4237,
					1,
					"left_delete",
					null,
					"AgAAAI0MAAAAAAAAjQwAAAAAAAABAAAALEAOAAAAAAAAQA4AAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAAjgwAAAAAAACODAAAAAAAAP///////+9/"
				],
				[
					4238,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAI0MAAAAAAAAjgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQwAAAAAAACNDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4253,
					1,
					"paste",
					null,
					"AQAAAI8MAAAAAAAAvAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwwAAAAAAACPDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4254,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALwMAAAAAAAAvQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAwAAAAAAAC8DAAAAAAAAAAAAAAAAPC/"
				],
				[
					4273,
					1,
					"right_delete",
					null,
					"AQAAAAEOAAAAAAAAAQ4AAAAAAAAoAAAAICAgICAgY2FzZSAnbSc6CiAgICAgICAgbGFzdG1vdmUgPSBjbWQ7Cg",
					"AQAAAAAAAAABAAAAAQ4AAAAAAAApDgAAAAAAAAAAAAAAAAAA"
				],
				[
					4275,
					1,
					"left_delete",
					null,
					"AQAAAEYOAAAAAAAARg4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAARw4AAAAAAABHDgAAAAAAAAAAAAAAAAAA"
				],
				[
					4277,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAFsOAAAAAAAAXA4AAAAAAAAAAAAAXA4AAAAAAABgDgAAAAAAAAAAAABgDgAAAAAAAGEOAAAAAAAAAAAAAGEOAAAAAAAAZQ4AAAAAAAAAAAAAXA4AAAAAAABcDgAAAAAAAAQAAAAgICAgYQ4AAAAAAABiDgAAAAAAAAAAAABiDgAAAAAAAGYOAAAAAAAAAAAAAF0OAAAAAAAAXQ4AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAWw4AAAAAAABbDgAAAAAAAAAAAAAAAHtA"
				],
				[
					4308,
					1,
					"cut",
					null,
					"AQAAAL4NAAAAAAAAvg0AAAAAAABDAAAAICAgICAgY2FzZSAnaCc6CiAgICAgICAgcHQgPSBuZXcgUG9pbnQoK2NtZFsxXSwgMCk7CiAgICAgICAgYnJlYWs7Cg",
					"AQAAAAAAAAABAAAAvg0AAAAAAAABDgAAAAAAAAAAAAAAAAAA"
				],
				[
					4309,
					2,
					"paste",
					null,
					"AgAAAL4NAAAAAAAAAQ4AAAAAAAAAAAAAAQ4AAAAAAABEDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvg0AAAAAAAC+DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4313,
					1,
					"left_delete",
					null,
					"AgAAAA0OAAAAAAAADQ4AAAAAAAABAAAAaKAOAAAAAAAAoA4AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAADg4AAAAAAAAODgAAAAAAAAAAAAAAAPC/"
				],
				[
					4314,
					1,
					"insert",
					{
						"characters": "z"
					},
					"AQAAAA0OAAAAAAAADg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQ4AAAAAAAANDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4321,
					1,
					"insert",
					{
						"characters": "undefined,undefined"
					},
					"FAAAACgOAAAAAAAAKQ4AAAAAAAAAAAAAKQ4AAAAAAAApDgAAAAAAAAoAAAArY21kWzFdLCAwKQ4AAAAAAAAqDgAAAAAAAAAAAAAqDgAAAAAAACsOAAAAAAAAAAAAACsOAAAAAAAALA4AAAAAAAAAAAAALA4AAAAAAAAtDgAAAAAAAAAAAAAtDgAAAAAAAC4OAAAAAAAAAAAAAC4OAAAAAAAALw4AAAAAAAAAAAAALw4AAAAAAAAwDgAAAAAAAAAAAAAwDgAAAAAAADEOAAAAAAAAAAAAADEOAAAAAAAAMg4AAAAAAAAAAAAAMg4AAAAAAAAzDgAAAAAAAAAAAAAzDgAAAAAAADQOAAAAAAAAAAAAADQOAAAAAAAANQ4AAAAAAAAAAAAANQ4AAAAAAAA2DgAAAAAAAAAAAAA2DgAAAAAAADcOAAAAAAAAAAAAADcOAAAAAAAAOA4AAAAAAAAAAAAAOA4AAAAAAAA5DgAAAAAAAAAAAAA5DgAAAAAAADoOAAAAAAAAAAAAADoOAAAAAAAAOw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKA4AAAAAAAAyDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4348,
					5,
					"left_delete",
					null,
					"BQAAAPsaAAAAAAAA+xoAAAAAAAAQAAAAcG9pbnRzVG9BYnNvbHV0ZfoaAAAAAAAA+hoAAAAAAAABAAAALvkaAAAAAAAA+RoAAAAAAAABAAAALvgaAAAAAAAA+BoAAAAAAAABAAAALvcaAAAAAAAA9xoAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAA+xoAAAAAAAALGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4349,
					1,
					"right_delete",
					null,
					"AQAAAPcaAAAAAAAA9xoAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA9xoAAAAAAAD3GgAAAAAAAAAAAAAAAPC/"
				],
				[
					4351,
					1,
					"right_delete",
					null,
					"AQAAAPkaAAAAAAAA+RoAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA+RoAAAAAAAD5GgAAAAAAAAAAAAAAAPC/"
				],
				[
					4354,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAPkaAAAAAAAA+hoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RoAAAAAAAD5GgAAAAAAAAAAAAAAAPC/"
				],
				[
					4357,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAPoaAAAAAAAA/BoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+hoAAAAAAAD6GgAAAAAAAAAAAAAAAPC/"
				],
				[
					4381,
					4,
					"right_delete",
					null,
					"BAAAAPkaAAAAAAAA+RoAAAAAAAABAAAAKfkaAAAAAAAA+RoAAAAAAAABAAAAIPkaAAAAAAAA+RoAAAAAAAABAAAAIPkaAAAAAAAA+RoAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAA+RoAAAAAAAD5GgAAAAAAAAAAAAAAAPC/"
				],
				[
					4462,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANcaAAAAAAAA2BoAAAAAAAAAAAAA2BoAAAAAAADdGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xoAAAAAAADXGgAAAAAAAAAAAAAAAERA"
				],
				[
					4464,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAANcaAAAAAAAA2BoAAAAAAAAAAAAA2BoAAAAAAADZGgAAAAAAAAAAAADZGgAAAAAAANoaAAAAAAAAAAAAANoaAAAAAAAA2xoAAAAAAAAAAAAA2xoAAAAAAADcGgAAAAAAAAAAAADcGgAAAAAAAN0aAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xoAAAAAAADXGgAAAAAAAAAAAAAAAERA"
				],
				[
					4465,
					1,
					"insert",
					{
						"characters": " pp;"
					},
					"BAAAAN0aAAAAAAAA3hoAAAAAAAAAAAAA3hoAAAAAAADfGgAAAAAAAAAAAADfGgAAAAAAAOAaAAAAAAAAAAAAAOAaAAAAAAAA4RoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RoAAAAAAADdGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4469,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAEkbAAAAAAAASxsAAAAAAAAAAAAA4hoAAAAAAADkGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hoAAAAAAABJGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4519,
					2,
					"left_delete",
					null,
					"AgAAAKkOAAAAAAAAqQ4AAAAAAAABAAAACqgOAAAAAAAAqA4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAqg4AAAAAAACqDgAAAAAAAAAAAAAAAFJA"
				],
				[
					4524,
					1,
					"insert",
					{
						"characters": "\ndefine"
					},
					"BwAAAKgOAAAAAAAAqQ4AAAAAAAAAAAAAqQ4AAAAAAACqDgAAAAAAAAAAAACqDgAAAAAAAKsOAAAAAAAAAAAAAKsOAAAAAAAArA4AAAAAAAAAAAAArA4AAAAAAACtDgAAAAAAAAAAAACtDgAAAAAAAK4OAAAAAAAAAAAAAK4OAAAAAAAArw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqA4AAAAAAACoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4525,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAK8OAAAAAAAAsQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArw4AAAAAAACvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4526,
					1,
					"insert",
					{
						"characters": "pt,"
					},
					"AwAAALAOAAAAAAAAsQ4AAAAAAAAAAAAAsQ4AAAAAAACyDgAAAAAAAAAAAACyDgAAAAAAALMOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsA4AAAAAAACwDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4527,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALMOAAAAAAAAtA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsw4AAAAAAACzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4528,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALQOAAAAAAAAtg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtA4AAAAAAAC0DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4529,
					1,
					"insert",
					{
						"characters": "cmd"
					},
					"AwAAALUOAAAAAAAAtg4AAAAAAAAAAAAAtg4AAAAAAAC3DgAAAAAAAAAAAAC3DgAAAAAAALgOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQ4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4531,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALoOAAAAAAAAuw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAug4AAAAAAAC6DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4534,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALwOAAAAAAAAvQ4AAAAAAAAAAAAAvQ4AAAAAAAC9DgAAAAAAABIAAAAgICAgcHQuY21kID0gY21kOwo",
					"AQAAAAAAAAABAAAAvA4AAAAAAADODgAAAAAAAAAAAAAAAAAA"
				],
				[
					4539,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAvQ4AAAAAAAC9DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4575,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAALoMAAAAAAAAuwwAAAAAAAAAAAAAuwwAAAAAAAC8DAAAAAAAAAAAAAC8DAAAAAAAAL0MAAAAAAAAAAAAAL0MAAAAAAAAvgwAAAAAAAAAAAAAvgwAAAAAAAC/DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugwAAAAAAAC6DAAAAAAAAAAAAAAAAGdA"
				],
				[
					4576,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAL8MAAAAAAAAwAwAAAAAAAAAAAAAwAwAAAAAAADBDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwwAAAAAAAC/DAAAAAAAAAAAAAAAAPC/"
				],
				[
					4577,
					1,
					"left_delete",
					null,
					"AQAAAMAMAAAAAAAAwAwAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAwQwAAAAAAADBDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4578,
					1,
					"insert",
					{
						"characters": "MakeP"
					},
					"BQAAAMAMAAAAAAAAwQwAAAAAAAAAAAAAwQwAAAAAAADCDAAAAAAAAAAAAADCDAAAAAAAAMMMAAAAAAAAAAAAAMMMAAAAAAAAxAwAAAAAAAAAAAAAxAwAAAAAAADFDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAwAAAAAAADADAAAAAAAAAAAAAAAAPC/"
				],
				[
					4579,
					1,
					"insert",
					{
						"characters": "oint="
					},
					"BQAAAMUMAAAAAAAAxgwAAAAAAAAAAAAAxgwAAAAAAADHDAAAAAAAAAAAAADHDAAAAAAAAMgMAAAAAAAAAAAAAMgMAAAAAAAAyQwAAAAAAAAAAAAAyQwAAAAAAADKDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQwAAAAAAADFDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4580,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMoMAAAAAAAAzAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygwAAAAAAADKDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4581,
					1,
					"insert",
					{
						"characters": "x,y"
					},
					"AwAAAMsMAAAAAAAAzAwAAAAAAAAAAAAAzAwAAAAAAADNDAAAAAAAAAAAAADNDAAAAAAAAM4MAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywwAAAAAAADLDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4583,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAM8MAAAAAAAA0AwAAAAAAAAAAAAA0AwAAAAAAADRDAAAAAAAAAAAAADRDAAAAAAAANIMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwwAAAAAAADPDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4584,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAANIMAAAAAAAA0wwAAAAAAAAAAAAA0wwAAAAAAADUDAAAAAAAAAAAAADUDAAAAAAAANUMAAAAAAAAAAAAANUMAAAAAAAA1gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gwAAAAAAADSDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4585,
					1,
					"insert",
					{
						"characters": " Point"
					},
					"BgAAANYMAAAAAAAA1wwAAAAAAAAAAAAA1wwAAAAAAADYDAAAAAAAAAAAAADYDAAAAAAAANkMAAAAAAAAAAAAANkMAAAAAAAA2gwAAAAAAAAAAAAA2gwAAAAAAADbDAAAAAAAAAAAAADbDAAAAAAAANwMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gwAAAAAAADWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4586,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANwMAAAAAAAA3gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AwAAAAAAADcDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4587,
					1,
					"insert",
					{
						"characters": "x,y"
					},
					"AwAAAN0MAAAAAAAA3gwAAAAAAAAAAAAA3gwAAAAAAADfDAAAAAAAAAAAAADfDAAAAAAAAOAMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QwAAAAAAADdDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4589,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOEMAAAAAAAA4gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QwAAAAAAADhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4599,
					1,
					"",
					null,
					"AQAAAG0NAAAAAAAAdg0AAAAAAAAJAAAAbmV3IFBvaW50",
					"AQAAAAAAAAABAAAAbQ0AAAAAAAB2DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4600,
					1,
					"",
					null,
					"AQAAAMANAAAAAAAAyQ0AAAAAAAAJAAAAbmV3IFBvaW50",
					"AQAAAAAAAAABAAAAwA0AAAAAAADJDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4601,
					1,
					"",
					null,
					"AQAAAAMOAAAAAAAADA4AAAAAAAAJAAAAbmV3IFBvaW50",
					"AQAAAAAAAAABAAAAAw4AAAAAAAAMDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4602,
					1,
					"",
					null,
					"AQAAAEYOAAAAAAAATw4AAAAAAAAJAAAAbmV3IFBvaW50",
					"AQAAAAAAAAABAAAARg4AAAAAAABPDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4603,
					1,
					"",
					null,
					"AQAAAJIOAAAAAAAAmw4AAAAAAAAJAAAAbmV3IFBvaW50",
					"AQAAAAAAAAABAAAAkg4AAAAAAACbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4613,
					1,
					"insert",
					{
						"characters": "[x,y]"
					},
					"BQAAANMMAAAAAAAA1AwAAAAAAAAAAAAA1AwAAAAAAADVDAAAAAAAAAAAAADVDAAAAAAAANYMAAAAAAAAAAAAANYMAAAAAAAA1wwAAAAAAAAAAAAA1wwAAAAAAADYDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wwAAAAAAADTDAAAAAAAAAAAAAAAAGlA"
				],
				[
					4616,
					1,
					"cut",
					null,
					"AQAAANgMAAAAAAAA2AwAAAAAAAAOAAAAbmV3IFBvaW50KHgseSk",
					"AQAAAAAAAAABAAAA2AwAAAAAAADmDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4618,
					1,
					"insert",
					{
						"characters": "define("
					},
					"BwAAANMMAAAAAAAA1AwAAAAAAAAAAAAA1AwAAAAAAADVDAAAAAAAAAAAAADVDAAAAAAAANYMAAAAAAAAAAAAANYMAAAAAAAA1wwAAAAAAAAAAAAA1wwAAAAAAADYDAAAAAAAAAAAAADYDAAAAAAAANkMAAAAAAAAAAAAANkMAAAAAAAA2gwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wwAAAAAAADTDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4621,
					1,
					"insert",
					{
						"characters": ",{"
					},
					"AgAAAN8MAAAAAAAA4AwAAAAAAAAAAAAA4AwAAAAAAADhDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wwAAAAAAADfDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4622,
					1,
					"insert",
					{
						"characters": "cmd})"
					},
					"BQAAAOEMAAAAAAAA4gwAAAAAAAAAAAAA4gwAAAAAAADjDAAAAAAAAAAAAADjDAAAAAAAAOQMAAAAAAAAAAAAAOQMAAAAAAAA5QwAAAAAAAAAAAAA5QwAAAAAAADmDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QwAAAAAAADhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4626,
					1,
					"cut",
					null,
					"AQAAALoMAAAAAAAAugwAAAAAAAAuAAAAY29uc3QgTWFrZVBvaW50PSh4LHkpID0+IGRlZmluZShbeCx5XSx7Y21kfSk7Cg",
					"AQAAAAAAAAABAAAAugwAAAAAAADoDAAAAAAAAAAAAAAAAAAA"
				],
				[
					4628,
					1,
					"paste",
					null,
					"AQAAAAMNAAAAAAAAMQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAw0AAAAAAAADDQAAAAAAAAAAAAAAAAAA"
				],
				[
					4638,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAC8NAAAAAAAAMA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALw0AAAAAAAAvDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4641,
					1,
					"left_delete",
					null,
					"AQAAAC8NAAAAAAAALw0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAMA0AAAAAAAAwDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4683,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJkbAAAAAAAAmhsAAAAAAAAAAAAAmhsAAAAAAACeGwAAAAAAAAAAAACeGwAAAAAAAJ8bAAAAAAAAAAAAAJ8bAAAAAAAAoxsAAAAAAAAAAAAAmhsAAAAAAACaGwAAAAAAAAQAAAAgICAgmhsAAAAAAACgGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmRsAAAAAAACZGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4684,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKAbAAAAAAAAoRsAAAAAAAAAAAAAoRsAAAAAAACnGwAAAAAAAAAAAACaGwAAAAAAAJobAAAAAAAABgAAACAgICAgIA",
					"AQAAAAAAAAABAAAAoBsAAAAAAACgGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4686,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"DAAAAJobAAAAAAAAmxsAAAAAAAAAAAAAnBsAAAAAAACcGwAAAAAAAAYAAAAgICAgICCbGwAAAAAAAJwbAAAAAAAAAAAAAJwbAAAAAAAAnRsAAAAAAAAAAAAAnRsAAAAAAACeGwAAAAAAAAAAAACeGwAAAAAAAJ8bAAAAAAAAAAAAAJ8bAAAAAAAAoBsAAAAAAAAAAAAAoBsAAAAAAAChGwAAAAAAAAAAAAChGwAAAAAAAKIbAAAAAAAAAAAAAKIbAAAAAAAAoxsAAAAAAAAAAAAAoxsAAAAAAACkGwAAAAAAAAAAAACkGwAAAAAAAKUbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmhsAAAAAAACaGwAAAAAAAAAAAAAAAEhA"
				],
				[
					4687,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKUbAAAAAAAApxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApRsAAAAAAAClGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4688,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAKYbAAAAAAAAqBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphsAAAAAAACmGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4689,
					1,
					"insert",
					{
						"characters": "ERROR"
					},
					"BQAAAKcbAAAAAAAAqBsAAAAAAAAAAAAAqBsAAAAAAACpGwAAAAAAAAAAAACpGwAAAAAAAKobAAAAAAAAAAAAAKobAAAAAAAAqxsAAAAAAAAAAAAAqxsAAAAAAACsGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxsAAAAAAACnGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4691,
					1,
					"insert",
					{
						"characters": ",e.messsage"
					},
					"CwAAAK0bAAAAAAAArhsAAAAAAAAAAAAArhsAAAAAAACvGwAAAAAAAAAAAACvGwAAAAAAALAbAAAAAAAAAAAAALAbAAAAAAAAsRsAAAAAAAAAAAAAsRsAAAAAAACyGwAAAAAAAAAAAACyGwAAAAAAALMbAAAAAAAAAAAAALMbAAAAAAAAtBsAAAAAAAAAAAAAtBsAAAAAAAC1GwAAAAAAAAAAAAC1GwAAAAAAALYbAAAAAAAAAAAAALYbAAAAAAAAtxsAAAAAAAAAAAAAtxsAAAAAAAC4GwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRsAAAAAAACtGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4693,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALkbAAAAAAAAuhsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuRsAAAAAAAC5GwAAAAAAAAAAAAAAAPC/"
				],
				[
					4694,
					1,
					"insert",
					{
						"characters": "\nreturn;"
					},
					"CAAAALobAAAAAAAAuxsAAAAAAAAAAAAAuxsAAAAAAAC8GwAAAAAAAAAAAAC8GwAAAAAAAL0bAAAAAAAAAAAAAL0bAAAAAAAAvhsAAAAAAAAAAAAAvhsAAAAAAAC/GwAAAAAAAAAAAAC/GwAAAAAAAMAbAAAAAAAAAAAAAMAbAAAAAAAAwRsAAAAAAAAAAAAAwRsAAAAAAADCGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuhsAAAAAAAC6GwAAAAAAAAAAAAAAAPC/"
				],
				[
					4703,
					1,
					"left_delete",
					null,
					"AQAAALQbAAAAAAAAtBsAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAtRsAAAAAAAC1GwAAAAAAAAAAAAAAAPC/"
				],
				[
					4706,
					1,
					"insert",
					{
						"characters": " nlul"
					},
					"BQAAAMAbAAAAAAAAwRsAAAAAAAAAAAAAwRsAAAAAAADCGwAAAAAAAAAAAADCGwAAAAAAAMMbAAAAAAAAAAAAAMMbAAAAAAAAxBsAAAAAAAAAAAAAxBsAAAAAAADFGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwBsAAAAAAADAGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4707,
					3,
					"left_delete",
					null,
					"AwAAAMQbAAAAAAAAxBsAAAAAAAABAAAAbMMbAAAAAAAAwxsAAAAAAAABAAAAdcIbAAAAAAAAwhsAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAxRsAAAAAAADFGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4708,
					1,
					"insert",
					{
						"characters": "ull"
					},
					"AwAAAMIbAAAAAAAAwxsAAAAAAAAAAAAAwxsAAAAAAADEGwAAAAAAAAAAAADEGwAAAAAAAMUbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhsAAAAAAADCGwAAAAAAAAAAAAAAAPC/"
				],
				[
					4722,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAANsdAAAAAAAA3B0AAAAAAAAAAAAA3B0AAAAAAADdHQAAAAAAAAAAAADdHQAAAAAAAN4dAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2x0AAAAAAADbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					4723,
					1,
					"insert",
					{
						"characters": " PointList("
					},
					"CwAAAN4dAAAAAAAA3x0AAAAAAAAAAAAA3x0AAAAAAADgHQAAAAAAAAAAAADgHQAAAAAAAOEdAAAAAAAAAAAAAOEdAAAAAAAA4h0AAAAAAAAAAAAA4h0AAAAAAADjHQAAAAAAAAAAAADjHQAAAAAAAOQdAAAAAAAAAAAAAOQdAAAAAAAA5R0AAAAAAAAAAAAA5R0AAAAAAADmHQAAAAAAAAAAAADmHQAAAAAAAOcdAAAAAAAAAAAAAOcdAAAAAAAA6B0AAAAAAAAAAAAA6B0AAAAAAADpHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3h0AAAAAAADeHQAAAAAAAAAAAAAAAPC/"
				],
				[
					4726,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAPgdAAAAAAAA+R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+B0AAAAAAAD4HQAAAAAAAAAAAAAAAPC/"
				],
				[
					4741,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAALcbAAAAAAAAuBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxsAAAAAAAC3GwAAAAAAAAAAAAAAAPC/"
				],
				[
					4742,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAALgbAAAAAAAAuhsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBsAAAAAAAC4GwAAAAAAAAAAAAAAAPC/"
				],
				[
					4743,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAALkbAAAAAAAAuhsAAAAAAAAAAAAAuhsAAAAAAAC7GwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuRsAAAAAAAC5GwAAAAAAAAAAAAAAAPC/"
				],
				[
					4745,
					1,
					"insert",
					{
						"characters": "+e.stack"
					},
					"CAAAALwbAAAAAAAAvRsAAAAAAAAAAAAAvRsAAAAAAAC+GwAAAAAAAAAAAAC+GwAAAAAAAL8bAAAAAAAAAAAAAL8bAAAAAAAAwBsAAAAAAAAAAAAAwBsAAAAAAADBGwAAAAAAAAAAAADBGwAAAAAAAMIbAAAAAAAAAAAAAMIbAAAAAAAAwxsAAAAAAAAAAAAAwxsAAAAAAADEGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvBsAAAAAAAC8GwAAAAAAAAAAAAAAAPC/"
				],
				[
					4759,
					1,
					"insert",
					{
						"characters": "lem"
					},
					"AwAAAPEaAAAAAAAA8hoAAAAAAAAAAAAA8hoAAAAAAADzGgAAAAAAAAAAAADzGgAAAAAAAPQaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RoAAAAAAADxGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4769,
					1,
					"insert",
					{
						"characters": ",defionm"
					},
					"CAAAAJwAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACeAAAAAAAAAAAAAACeAAAAAAAAAJ8AAAAAAAAAAAAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAAChAAAAAAAAAAAAAAChAAAAAAAAAKIAAAAAAAAAAAAAAKIAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4770,
					4,
					"left_delete",
					null,
					"BAAAAKMAAAAAAAAAowAAAAAAAAABAAAAbaIAAAAAAAAAogAAAAAAAAABAAAAbqEAAAAAAAAAoQAAAAAAAAABAAAAb6AAAAAAAAAAoAAAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAApAAAAAAAAACkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4771,
					1,
					"insert",
					{
						"characters": "ine"
					},
					"AwAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAACiAAAAAAAAAKMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4791,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAJAOAAAAAAAAkQ4AAAAAAAAAAAAAkQ4AAAAAAACXDgAAAAAAAAAAAACXDgAAAAAAAJgOAAAAAAAAAAAAAJgOAAAAAAAAmQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkA4AAAAAAACQDgAAAAAAAAAAAAAAAFxA"
				],
				[
					4792,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJkOAAAAAAAAmw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQ4AAAAAAACZDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4793,
					1,
					"insert",
					{
						"characters": "cmd"
					},
					"AwAAAJoOAAAAAAAAmw4AAAAAAAAAAAAAmw4AAAAAAACcDgAAAAAAAAAAAACcDgAAAAAAAJ0OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmg4AAAAAAACaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4794,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJ0OAAAAAAAAnw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQ4AAAAAAACdDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4795,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAJ4OAAAAAAAAnw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAng4AAAAAAACeDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4797,
					1,
					"insert",
					{
						"characters": ".toLowe"
					},
					"BwAAAKAOAAAAAAAAoQ4AAAAAAAAAAAAAoQ4AAAAAAACiDgAAAAAAAAAAAACiDgAAAAAAAKMOAAAAAAAAAAAAAKMOAAAAAAAApA4AAAAAAAAAAAAApA4AAAAAAAClDgAAAAAAAAAAAAClDgAAAAAAAKYOAAAAAAAAAAAAAKYOAAAAAAAApw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoA4AAAAAAACgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4798,
					1,
					"insert",
					{
						"characters": "rCase"
					},
					"BQAAAKcOAAAAAAAAqA4AAAAAAAAAAAAAqA4AAAAAAACpDgAAAAAAAAAAAACpDgAAAAAAAKoOAAAAAAAAAAAAAKoOAAAAAAAAqw4AAAAAAAAAAAAAqw4AAAAAAACsDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApw4AAAAAAACnDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4799,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKwOAAAAAAAArg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArA4AAAAAAACsDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4801,
					1,
					"insert",
					{
						"characters": "=="
					},
					"AgAAAK4OAAAAAAAArw4AAAAAAAAAAAAArw4AAAAAAACwDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArg4AAAAAAACuDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4802,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAALAOAAAAAAAAsg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsA4AAAAAAACwDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4803,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAALEOAAAAAAAAsg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQ4AAAAAAACxDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4805,
					1,
					"insert",
					{
						"characters": " lastM"
					},
					"BgAAALQOAAAAAAAAtQ4AAAAAAAAAAAAAtQ4AAAAAAAC2DgAAAAAAAAAAAAC2DgAAAAAAALcOAAAAAAAAAAAAALcOAAAAAAAAuA4AAAAAAAAAAAAAuA4AAAAAAAC5DgAAAAAAAAAAAAC5DgAAAAAAALoOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtA4AAAAAAAC0DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4806,
					1,
					"left_delete",
					null,
					"AQAAALkOAAAAAAAAuQ4AAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAug4AAAAAAAC6DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4807,
					1,
					"insert",
					{
						"characters": "move=w"
					},
					"BgAAALkOAAAAAAAAug4AAAAAAAAAAAAAug4AAAAAAAC7DgAAAAAAAAAAAAC7DgAAAAAAALwOAAAAAAAAAAAAALwOAAAAAAAAvQ4AAAAAAAAAAAAAvQ4AAAAAAAC+DgAAAAAAAAAAAAC+DgAAAAAAAL8OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQ4AAAAAAAC5DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4808,
					1,
					"left_delete",
					null,
					"AQAAAL4OAAAAAAAAvg4AAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAvw4AAAAAAAC/DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4809,
					1,
					"insert",
					{
						"characters": "pt.cl"
					},
					"BQAAAL4OAAAAAAAAvw4AAAAAAAAAAAAAvw4AAAAAAADADgAAAAAAAAAAAADADgAAAAAAAMEOAAAAAAAAAAAAAMEOAAAAAAAAwg4AAAAAAAAAAAAAwg4AAAAAAADDDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvg4AAAAAAAC+DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4810,
					3,
					"left_delete",
					null,
					"AwAAAMIOAAAAAAAAwg4AAAAAAAABAAAAbMEOAAAAAAAAwQ4AAAAAAAABAAAAY8AOAAAAAAAAwA4AAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAww4AAAAAAADDDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4811,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMAOAAAAAAAAwQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwA4AAAAAAADADgAAAAAAAAAAAAAAAPC/"
				],
				[
					4816,
					1,
					"cut",
					null,
					"AQAAAJEOAAAAAAAAkQ4AAAAAAAAxAAAAICAgICAgaWYoY21kWzBdLnRvTG93ZXJDYXNlKCk9PSdtJykgbGFzdG1vdmU9cHQ7Cg",
					"AQAAAAAAAAABAAAAkQ4AAAAAAADCDgAAAAAAAAAAAAAAAAAA"
				],
				[
					4818,
					1,
					"paste",
					null,
					"AQAAAMgOAAAAAAAA+Q4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyA4AAAAAAADIDgAAAAAAAAAAAAAAAAAA"
				],
				[
					4820,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAAPUOAAAAAAAA9g4AAAAAAAAAAAAA9g4AAAAAAAD3DgAAAAAAAAAAAAD3DgAAAAAAAPgOAAAAAAAAAAAAAPgOAAAAAAAA+Q4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9Q4AAAAAAAD1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4822,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAPsOAAAAAAAA/A4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+w4AAAAAAAD7DgAAAAAAAAAAAAAAAPC/"
				],
				[
					4849,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAACoNAAAAAAAAKw0AAAAAAAAAAAAAKw0AAAAAAAAsDQAAAAAAAAAAAAAsDQAAAAAAAC0NAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKg0AAAAAAAAqDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4850,
					1,
					"insert",
					{
						"characters": " Point8"
					},
					"BwAAAC0NAAAAAAAALg0AAAAAAAAAAAAALg0AAAAAAAAvDQAAAAAAAAAAAAAvDQAAAAAAADANAAAAAAAAAAAAADANAAAAAAAAMQ0AAAAAAAAAAAAAMQ0AAAAAAAAyDQAAAAAAAAAAAAAyDQAAAAAAADMNAAAAAAAAAAAAADMNAAAAAAAANA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQ0AAAAAAAAtDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4851,
					1,
					"left_delete",
					null,
					"AQAAADMNAAAAAAAAMw0AAAAAAAABAAAAOA",
					"AQAAAAAAAAABAAAANA0AAAAAAAA0DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4852,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAADMNAAAAAAAANA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMw0AAAAAAAAzDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4853,
					1,
					"right_delete",
					null,
					"AQAAADQNAAAAAAAANA0AAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAANA0AAAAAAAA0DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4855,
					1,
					"left_delete",
					null,
					"AQAAADcNAAAAAAAANw0AAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAOA0AAAAAAAA4DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4856,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADcNAAAAAAAAOA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANw0AAAAAAAA3DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4867,
					1,
					"insert",
					{
						"characters": "Object.assign"
					},
					"DgAAACMNAAAAAAAAJA0AAAAAAAAAAAAAJA0AAAAAAAAkDQAAAAAAAAYAAABkZWZpbmUkDQAAAAAAACUNAAAAAAAAAAAAACUNAAAAAAAAJg0AAAAAAAAAAAAAJg0AAAAAAAAnDQAAAAAAAAAAAAAnDQAAAAAAACgNAAAAAAAAAAAAACgNAAAAAAAAKQ0AAAAAAAAAAAAAKQ0AAAAAAAAqDQAAAAAAAAAAAAAqDQAAAAAAACsNAAAAAAAAAAAAACsNAAAAAAAALA0AAAAAAAAAAAAALA0AAAAAAAAtDQAAAAAAAAAAAAAtDQAAAAAAAC4NAAAAAAAAAAAAAC4NAAAAAAAALw0AAAAAAAAAAAAALw0AAAAAAAAwDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQ0AAAAAAAAjDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4881,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEcNAAAAAAAASA0AAAAAAAAAAAAASA0AAAAAAABJDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARw0AAAAAAABHDQAAAAAAAP///////+9/"
				],
				[
					4887,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEgNAAAAAAAASQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASA0AAAAAAABIDQAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/dom/svg.js",
			"settings":
			{
				"buffer_size": 17260,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "40106-4069-Synth.cropped.svg",
			"settings":
			{
				"buffer_size": 395694,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/misc.js",
			"settings":
			{
				"buffer_size": 64185,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					48,
					1,
					"insert",
					{
						"characters": "\nstr="
					},
					"BgAAAMysAAAAAAAAzawAAAAAAAAAAAAAzawAAAAAAADPrAAAAAAAAAAAAADPrAAAAAAAANCsAAAAAAAAAAAAANCsAAAAAAAA0awAAAAAAAAAAAAA0awAAAAAAADSrAAAAAAAAAAAAADSrAAAAAAAANOsAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMysAAAAAAAAzKwAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANOsAAAAAAAA1awAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANOsAAAAAAAA06wAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANWsAAAAAAAA1qwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANWsAAAAAAAA1awAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"paste",
					null,
					"AgAAAH6sAAAAAAAAuq0AAAAAAAAAAAAAuq0AAAAAAAC6rQAAAAAAAJUAAAAKZXhwb3J0IGZ1bmN0aW9uIHBhZEFuc2koc3RyLCBuLCBzID0gJyAnKSB7CiAgbGV0IHsgbGVuZ3RoIH0gPSBzdHJpcEFuc2koc3RyKTsKICBzdHI9Jyc7CiAgZm9yKGxldCBpID0gbGVuZ3RoOyBpIDwgbjsgaSsrKSBzdHIgKz0gczsKICByZXR1cm4gc3RyOwp9Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH6sAAAAAAAAE60AAAAAAAAAAAAAAAAAAA"
				],
				[
					72,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALqtAAAAAAAAuq0AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "// ==UserScript==\n\n// @name         util.js\n// @namespace    util\n// @version      0.2\n// @description  geom.js, align.js, bbox.js, util.js, graph.js, intersection.js, point.js, line.js, lineList.js, element.js, node.js, trbl.js, rect.js, size.js, iterator.js, pointList.js, matrix.js, circle.js, polygonFinder.js, polygon.js, sweepLine.js, transformation.js, vector.js, simplify.js\n// @author       You\n// @match        *://*/*\n// @exclude      *://127.0.0.1*/*\n// @updateURL    http://127.0.0.1:9000/lib/util.js\n// @grant        none\n// @run-at       document-end\n// ==/UserScript==\n\n/* jshint esversion: 6 */\n/* jshint ignore:start */\n\n/**\n * Class for utility.\n *\n * @class      Util (name)\n */\n\nexport function Util(g) {\n  const globalObject = g || Util.getGlobalObject();\n  globalObject.Util = Util;\n  return Util;\n}\n\nUtil.toString = undefined;\n//export const Util = {};\n\nconst lineSplit = new RegExp('\\\\n', 'g');\n\nUtil.inspectSymbol = Symbol.for('nodejs.util.inspect.custom');\n\nUtil.formatAnnotatedObject = function(subject, o) {\n  const { indent = '  ', spacing = ' ', separator = ',', newline = '\\n', maxlen = 30, depth = 1, level = 0 } = o;\n  const i = indent.repeat(o.level || 0);\n  let nl = newline != '' ? newline + i : spacing;\n  const opts = {\n    ...o,\n    newline: depth >= 0 ? newline : '',\n    depth: depth - 1,\n    level: level + 1\n  };\n  if(subject && subject.toSource !== undefined) return subject.toSource();\n  if(subject instanceof Date) return 'new Date(' + new Date().toISOString() + ')';\n  if(typeof subject == 'string') return \"'\" + subject + \"'\";\n  if(typeof subject == 'number') return subject;\n  if(subject != null && subject.y2 !== undefined) return `rect[${spacing}${subject.x}${separator}${subject.y} | ${subject.x2}${separator}${subject.y2} (${subject.w}x${subject.h}) ]`;\n  if(Util.isObject(subject) && 'map' in subject && typeof subject.map == 'function') return `[${nl}${subject.map(i => Util.formatAnnotatedObject(i, opts)).join(separator + nl)}]`;\n  if(typeof subject === 'string' || subject instanceof String) return `'${subject}'`;\n  let longest = '';\n  let r = [];\n  for(let k in subject) {\n    const v = subject[k];\n    if(k.length > longest.length) longest = k;\n    let s = '';\n    if(typeof v === 'symbol') {\n      s = 'Symbol';\n    } else if(typeof v === 'string' || v instanceof String) {\n      s = `'${v}'`;\n    } else if(typeof v === 'function') {\n      s = (v + '').replace(lineSplit, '\\n' + i);\n      s = (Util.fnName(s) || 'function') + '()';\n    } else if(typeof v === 'number' || typeof v === 'boolean') {\n      s = `${v}`;\n    } else if(v === null) {\n      s = 'null';\n    } else if(v && v.length !== undefined) {\n      try {\n        s = depth <= 0 ? `Array(${v.length})` : `[ ${v.map(item => Util.formatAnnotatedObject(item, opts)).join(', ')} ]`;\n      } catch(err) {\n        s = `[${v}]`;\n      }\n    } else if(v && v.toSource !== undefined) {\n      s = v.toSource();\n    } else if(opts.depth >= 0) {\n      s = s.length > maxlen ? `[Object ${Util.objName(v)}]` : Util.formatAnnotatedObject(v, opts);\n    } else {\n      let c = Util.className(v);\n      let t = Util.ucfirst(typeof v);\n\n      s = `[${t}${c !== t ? ' ' : ''}${c !== t ? c : ''}]`;\n    }\n    if(s == '') s = typeof v;\n    r.push([k, s]);\n  }\n  let padding = x => indent + (opts.newline != '' ? Util.pad(x, longest.length, spacing) : spacing);\n  let j = separator + spacing;\n  if(r.length > 6) {\n    nl = opts.newline + i;\n    j = separator + (opts.newline != '' ? nl : spacing);\n  }\n  let ret = '{' + opts.newline + r.map(arr => padding(arr[0]) + arr[0] + ':' + spacing + arr[1]).join(j) + opts.newline + i + '}';\n  return ret;\n};\nUtil.curry = (fn, arity) => {\n  if(arity == null) arity = fn.length;\n  let ret = function curried(...args) {\n    let thisObj = this;\n    if(args.length >= arity) return fn.apply(this, args);\n\n    let n = arity - args.length;\n    let a = Array.from({ length: n }, (v, i) => String.fromCharCode(65 + i));\n    let Curried = function(...a) {\n      return curried.apply(thisObj, a);\n    }; //;\n    return [\n      function() {\n        return Curried(...args);\n      },\n      function(a) {\n        return Curried(...args, a);\n      },\n      function(a, b) {\n        return Curried(...args, a, b);\n      },\n      function(a, b, c) {\n        return r(...args, a, b, c);\n      },\n      function(a, b, c, d) {\n        return Curried(...args, a, b, c, d);\n      }\n    ][n];\n    return new Function(...a, `const { curried,thisObj,args} = this; return curried.apply(thisObj, args.concat([${a.join(',')}]))`).bind({ args, thisObj, curried });\n  };\n  Object.defineProperties(ret, {\n    length: {\n      value: arity,\n      configurable: true,\n      writable: true,\n      enumerable: false\n    },\n    orig: {\n      get() {\n        return fn;\n      }\n    }\n  });\n  return ret;\n};\nUtil.arityN = (fn, n) => {\n  const arityFn = [\n    function(fn) {\n      return function() {\n        return fn();\n      };\n    },\n    function(fn) {\n      return function(a) {\n        return fn(a);\n      };\n    },\n    function(fn) {\n      return function(a, b) {\n        return fn(a, b);\n      };\n    },\n    function(fn) {\n      return function(a, b, c) {\n        return fn(a, b, c);\n      };\n    },\n    function(fn) {\n      return function(a, b, c, d) {\n        return fn(a, b, c, d);\n      };\n    },\n    function(fn) {\n      return function(a, b, c, d, e) {\n        return fn(a, b, c, d, e);\n        H;\n      };\n    }\n  ];\n  if(n && n <= 5) return arityFn[n](fn);\n  return fn;\n};\n\nUtil.getter = target => {\n  let self;\n  if(typeof target.get == 'function') self = target.get;\n  else\n    self = function(key) {\n      if(!target) {\n        if(this !== self && this) target = this;\n        self.target = target;\n      }\n      let obj = target;\n      if(!self.fn) {\n        if(typeof obj == 'object' && obj !== null) {\n          if(typeof obj.get == 'function') self.fn = key => obj.get(key);\n        }\n        if(!self.fn) self.fn = key => obj[key];\n      }\n      return self.fn(key);\n    };\n  if(target !== undefined) self.target = target;\n  return self;\n};\nUtil.setter = target => {\n  if(typeof target.set == 'function') return target.set;\n  let set;\n  set = function(key, value) {\n    if(!target) {\n      if(this !== set && this) target = this;\n      set.target = target;\n    }\n    let obj = target;\n    if(!set.fn) {\n      if(typeof obj == 'object' && obj !== null) {\n        if(typeof obj.set == 'function') set.fn = (key, value) => obj.set(key, value);\n      }\n    }\n    if(!set.fn) set.fn = (key, value) => ((obj[key] = value), obj);\n    return set.fn(key, value);\n  };\n  if(target !== undefined) set.target = target;\n  return set;\n};\nUtil.remover = target => (typeof target == 'object' && target !== null ? (typeof target.delete == 'function' ? key => target.delete(key) : key => delete target[key]) : null);\nUtil.hasFn = target => (typeof target == 'object' && target !== null ? (typeof target.has == 'function' ? key => target.has(key) : key => key in target) : null);\nUtil.adder = target => {\n  let self;\n\n  if(target instanceof Set) return arg => target.add(arg);\n  if(target instanceof Array) return arg => (target.push(arg), target);\n\n  self = function(obj, arg = 1) {\n    if(!target) if (obj) target = obj;\n\n    if(!self.fn) ChooseFn(arg, obj);\n    //console.debug('adder', self.fn + '');\n\n    // if(!self.fn) console.log('adder', { target, thisObj: this, fn: self.fn + '', arg });\n    return self.fn(obj, arg);\n  };\n  if(target && !self.fn) {\n    ChooseFn(',', target);\n    target = null;\n  }\n\n  return self;\n\n  function ChooseFn(a, o) {\n    if(!self.fn) {\n      if(typeof target == 'object' && target !== null) {\n        if(typeof target.add == 'function') self.fn = (obj, arg) => (obj.add(arg), undefined);\n        else if(typeof target.push == 'function') self.fn = (obj, arg) => (obj.push(arg), undefined);\n      }\n    }\n    let isNum = Util.isNumeric(a);\n    //console.debug('ChooseFn', { a, o, f: self.fn });\n    if(!self.fn) {\n      if(typeof o == 'string') self.fn = (obj, arg) => (obj == '' ? '' : obj + ', ') + arg;\n      else if(typeof o == 'number') self.fn = (num, arg) => (typeof num == 'number' ? num : 0) + +arg;\n      else if(a) self.fn = (obj, arg) => ((obj || (isNum || typeof arg == 'number' ? 0 : '')) + isNum ? +arg : ',' + arg);\n    }\n  }\n};\nUtil.updater = (target, get, set, fn) => {\n  let value;\n\n  /* prettier-ignore */ get = get || Util.getter(target);\n  /* prettier-ignore */ set = set || Util.setter(target);\n\n  return (k, f, i) => doUpdate(k, f || fn, i);\n  function doUpdate(key, func, i) {\n    value = get.call(target, key);\n    let tmp = func(value, i, key);\n\n    if(tmp !== undefined && tmp != value) {\n      set.call(target, key, tmp);\n\n      value = get.call(target, key);\n    }\n    return value;\n  }\n};\nUtil.getOrCreate = (target, create = () => ({}), set) => {\n  const get = Util.getter(target),\n    has = Util.hasFn(target);\n  /* prettier-ignore */ set = set || Util.setter(target);\n  let value;\n  return key => (value = has.call(target, key) ? get.call(target, key) : ((value = create(key, target)), set.call(target, key, value), value));\n};\nUtil.accumulate = (entries, dest = new Map()) => {\n  let get = Util.getOrCreate(dest, () => []);\n  for(let [key, value] of entries) Util.adder(get(key))(value);\n  return dest;\n};\nUtil.memoize = (fn, storage = new Map()) => {\n  let self;\n  const getter = typeof storage.get == 'function' ? storage.get : typeof storage == 'function' ? storage : Util.getter(storage);\n  const setter = typeof storage.set == 'function' ? storage.set : typeof storage == 'function' ? storage : Util.setter(storage);\n  self = function(...args) {\n    // let n = args[0]; // just taking one argument here\n    let cached;\n    let key = args[0];\n\n    if((cached = getter.call(storage, key))) {\n      //console.log('Fetching from cache');\n      return cached;\n    }\n    let result = fn.call(this, ...args);\n    setter.call(storage, key, result);\n    return result;\n  };\n  self.cache = storage;\n  return Object.freeze(self);\n};\nUtil.once = (fn, thisArg, memoFn) => {\n  let ran = false;\n  let ret;\n\n  return function(...args) {\n    if(!ran) {\n      ran = true;\n      ret = fn.call(thisArg || this, ...args);\n    } else if(typeof memoFn == 'function') {\n      ret = memoFn(ret);\n    }\n    return ret;\n  };\n};\nUtil.delay = (func, wait, thisObj) => {\n  if(typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);\n  return function(...args) {\n    setTimeout(function () {\n      func.apply(thisObj || this, args);\n    }, wait);\n  };\n};\nUtil.throttle = (f, t, thisObj) => {\n  let lastCall;\n  return function(...args) {\n    let previousCall = lastCall;\n    lastCall = Date.now();\n    if(\n      previousCall === undefined || // function is being called for the first time\n      lastCall - previousCall > t\n    )\n      // throttle time has elapsed\n      f.apply(thisObj || this, args);\n  };\n};\nUtil.debounce = (func, wait, options = {}) => {\n  if(!Number.isFinite(wait)) throw new TypeError('Expected `wait` to be a finite number');\n  let id, args, ctx, timestamp, r;\n  const { leading, thisObj } = options;\n  if(null == wait) wait = 100;\n  function later() {\n    let last = Date.now() - timestamp;\n    if(last < wait && last >= 0) {\n      id = setTimeout(later, wait - last);\n    } else {\n      id = null;\n      if(!leading) {\n        r = func.apply(ctx, args);\n        ctx = args = null;\n      }\n    }\n  }\n  function debounced(...a) {\n    ctx = thisObj || this;\n    args = a;\n    timestamp = Date.now();\n    let callNow = leading && !id;\n    if(!id) id = setTimeout(later, wait);\n    if(callNow) {\n      r = func.apply(ctx, args);\n      ctx = args = null;\n    }\n    return r;\n  }\n  debounced.clear = function() {\n    if(id) {\n      clearTimeout(id);\n      id = null;\n    }\n  };\n  debounced.flush = function() {\n    if(id) {\n      r = func.apply(ctx, args);\n      ctx = args = null;\n      clearTimeout(id);\n      id = null;\n    }\n  };\n  return debounced;\n};\n\nUtil.debounceAsync = (fn, wait, options = {}) => {\n  if(!Number.isFinite(wait)) throw new TypeError('Expected `wait` to be a finite number');\n  let r,\n    id,\n    resolveList = [];\n  const { thisObj, leading } = options;\n  return function(...a) {\n    return new Promise(resolve => {\n      const callNow = leading && !id;\n      clearTimeout(id);\n      id = setTimeout(() => {\n        id = null;\n        const result = leading ? r : fn.apply(thisObj || this, a);\n        for(resolve of resolveList) resolve(result);\n        resolveList = [];\n      }, wait);\n      if(callNow) {\n        r = fn.apply(thisObj || this, a);\n        resolve(r);\n      } else {\n        resolveList.push(resolve);\n      }\n    });\n  };\n};\n\n/*Util.debounce = (f, t, thisObj) => {\n  let lastCall, lastCallTimer;\n  return function(...args) {\n    let previousCall = lastCall;\n    lastCall = Date.now();\n    if(previousCall && lastCall - previousCall <= t) clearTimeout(lastCallTimer);\n\n    return new Promise((resolve, reject) => {\n      lastCallTimer = setTimeout(() => resolve(f.apply(thisObj || this, args)), t);\n    });\n  };\n};*/\nUtil.getGlobalObject = Util.memoize(arg => {\n  const retfn = typeof arg == 'function' ? arg : typeof arg == 'string' ? g => g[arg] : g => g;\n\n  return Util.tryCatch(\n    () => globalThis,\n    retfn,\n    err =>\n      Util.tryCatch(\n        () => globalThis,\n        retfn,\n        err =>\n          Util.tryCatch(\n            () => window,\n            retfn,\n            err => console.log('Util.getGlobalObject:', err)\n          )\n      )\n  );\n});\n\nUtil.isDebug = Util.memoize(() => {\n  if(process !== undefined && process.env.NODE_ENV === 'production') return false;\n  return true;\n});\n\n/*Util.log = Util.curry(function(n, base) {\n  return Math.log(n) / (base ? Math.log(base) : 1);\n});*/\nUtil.log = (...args) => {\n  let location;\n  if(args[0] instanceof Util.location) location = args.shift();\n  else {\n    let stack = Util.getStackFrames(2);\n    if(/\\/util\\.js$/.test(stack[0].fileName)) stack = stack.slice(1);\n    location = stack[0].getLocation();\n  }\n  let locationStr = location.toString(true);\n  let c = [(locationStr[Util.inspectSymbol] || locationStr.toString).call(locationStr)];\n  c.push(' ');\n  let filters = Util.log.filters;\n  let results = filters.map(f => f.test(locationStr));\n  if(filters.every(f => !f.test(locationStr))) return;\n  console.log('log', { args, c });\n  Util.putStack();\n  args = args.reduce((a, p, i) => {\n    if(Util.isObject(p) && p[Util.log.methodName]) p = p[Util.log.methodName]();\n    else if(Util.isObject(p) && p[Util.inspectSymbol]) p = p[Util.inspectSymbol]();\n    else if(typeof p != 'string') {\n      if(Util.isObject(p) && typeof p.toString == 'function' && !Util.isNativeFunction(p.toString)) p = p.toString();\n      else p = Util.inspect(p, { multiline: false });\n    }\n\n    //  if(i > 0) a.push(',');\n    a.push(p);\n    //    a.append([p]);\n    return a;\n  }, c);\n  if(args.toConsole) args.toConsole();\n  else console.log(...args);\n};\n\nObject.defineProperty(Util.log, 'methodName', {\n  get: () => (Util.isBrowser() ? 'toConsole' : 'toAnsi256')\n});\n\nUtil.log.filters = [/.*/];\nUtil.log.setFilters = function(args) {\n  this.filters = [...args].map(arg => (arg instanceof RegExp ? arg : new RegExp(arg)));\n};\nUtil.log.getFilters = function() {\n  return this.filters;\n};\n\nUtil.msg = (strings, ...substitutions) => {\n  let i,\n    o = [];\n  for(i = 0; i < Math.max(strings.length, substitutions.length); i++) {\n    if(strings[i] !== undefined) o.push(strings[i].trim());\n    if(substitutions[i] !== undefined) o.push(substitutions[i]);\n  }\n  console.log(...o);\n};\n\nUtil.logBase = Util.curry((base, n) => Math.log(n) / Math.log(base));\n\nUtil.generalLog = function(n, x) {\n  return Math.log(x) / Math.log(n);\n};\nUtil.toSource = function(arg, opts = {}) {\n  const { quote = \"'\", colors = false, multiline = false, json = false } = opts;\n  const { c = Util.coloring(colors) } = opts;\n  let o = [];\n  const { print = (...args) => (o = c.concat(o, c.text(...args))) } = opts;\n  if(Array.isArray(arg)) {\n    print('[', 1, 36);\n    for(let item of arg) {\n      if(o.length > 0) print(', ');\n      Util.toSource(item, { ...opts, c, print });\n    }\n    print(']', 1, 36);\n  } else if(typeof arg == 'number' || arg === undefined || arg === null) print(arg, 1, 35);\n  else if(typeof arg == 'string') print(`${quote}${arg}${quote}`, 1, 36);\n  else if(arg && arg.x !== undefined && arg.y !== undefined) {\n    print('[', 1, 36);\n    print(arg.x, 1, 32);\n    print(',', 1, 36);\n    print(arg.y, 1, 32);\n    print(']', 1, 36);\n  } else if(typeof arg == 'object') {\n    let i = 0;\n    let m = arg instanceof Map;\n    if(m) {\n      print('new ', 1, 31);\n      print('Map', 1, 33);\n    }\n    print((m ? '([[' : '{') + (multiline ? '\\n  ' : ' '), 1, 36);\n    for(const [prop, value] of Util.entries(arg)) {\n      if(i > 0) {\n        let s = multiline ? ',\\n  ' : ', ';\n        if(m) s = ' ]' + s + '[ ';\n        print(s, 1, 36);\n      }\n      if(!m) print(json ? `\"${prop}\"` : prop, 1, 33);\n      else Util.toSource(prop, { ...opts, c, print });\n      print(m ? ', ' : ': ', 1, 36);\n      Util.toSource(value, { ...opts, c, print });\n      i++;\n    }\n    print(multiline ? '\\n' : ' ' + (m ? ']])' : '}'), 1, 36);\n  }\n  return o;\n};\nUtil.debug = function(message) {\n  const args = [...arguments];\n  let cache = [];\n  const removeCircular = function(key, value) {\n    if(typeof value === 'object' && value !== null) {\n      if(cache.indexOf(value) !== -1) return;\n      cache.push(value);\n    }\n    return value;\n  };\n  const str = args\n    .map(arg => (typeof arg === 'object' ? JSON.toString(arg, removeCircular) : arg))\n    .join(' ')\n    .replace(lineSplit, '');\n  //console.log(\"STR: \"+str);\n  //console.log.call(console, str);\n  //Util.log.apply(Util, args)\n};\nUtil.type = function({ type }) {\n  return (type && String(type).split(new RegExp('[ ()]', 'g'))[1]) || '';\n};\nUtil.functionName = function(fn) {\n  if(typeof fn == 'function' && typeof fn.name == 'string') return fn.name;\n  try {\n    const matches = /function\\s*([^(]*)\\(.*/g.exec(fn + '');\n    if(matches && matches[1]) return matches[1];\n  } catch {}\n  return null;\n};\nUtil.className = function(obj) {\n  let proto;\n  //console.log(\"class:\", obj);\n  try {\n    proto = Object.getPrototypeOf(obj);\n  } catch(err) {\n    try {\n      proto = obj.prototype;\n    } catch(err) {}\n  }\n  if(Util.isObject(proto) && 'constructor' in proto) return Util.functionName(proto.constructor);\n};\nUtil.unwrapComponent = function(c) {\n  for(;;) {\n    if(c.wrappedComponent) c = c.wrappedComponent;\n    else if(c.WrappedComponent) c = c.WrappedComponent;\n    else break;\n  }\n  return c;\n};\nUtil.componentName = function(c) {\n  for(;;) {\n    if(c.displayName || c.name) {\n      return (c.displayName || c.name).replace(/.*\\(([A-Za-z0-9_]+).*/, '$1');\n    } else if(c.wrappedComponent) c = c.wrappedComponent;\n    else if(c.WrappedComponent) c = c.WrappedComponent;\n    else break;\n  }\n  return Util.fnName(c);\n};\nUtil.count = function(s, ch) {\n  return (String(s).match(new RegExp(ch, 'g')) || Util.array()).length;\n};\nUtil.parseNum = function(str) {\n  let num = parseFloat(str);\n  if(isNaN(num)) num = 0;\n  return num;\n};\nUtil.minmax = function(num, min, max) {\n  return Math.min(Math.max(num, min), max);\n};\nUtil.getExponential = function(num) {\n  let str = typeof num == 'string' ? num : num.toExponential();\n  const matches = /e\\+?(.*)$/.exec(str);\n  //console.log(\"matches: \", matches);\n  return parseInt(matches[1]);\n};\nUtil.getNumberParts = function(num) {\n  let str = typeof num == 'string' ? num : num.toExponential();\n  const matches = /^(-?)(.*)e\\+?(.*)$/.exec(str);\n  //console.log(\"matches: \", matches);\n  const negative = matches[1] == '-';\n  return {\n    negative,\n    mantissa: parseFloat(matches[2]),\n    exponent: parseInt(matches[3])\n  };\n};\nUtil.pow2 = function(n) {\n  return Math.pow(2, n);\n};\nUtil.pow10 = function(n) {\n  return n >= 0 ? Math.pow(10, n) : 1 / Math.pow(10, -n);\n};\nUtil.bitValue = function(n) {\n  return Util.pow2(n - 1);\n};\nUtil.bitMask = function(bits, start = 0) {\n  let r = 0;\n  let b = 1 << start;\n\n  for(let i = 0; i < bits; i++) {\n    r |= b;\n    b <<= 1;\n  }\n  return r;\n};\n\nUtil.bitGroups = function(num, bpp, minLen) {\n  let m = Util.bitMask(bpp, 0);\n  let n = Math.floor(64 / bpp);\n  let r = [];\n  for(let i = 0; i < n; i++) {\n    r.push(num & m);\n    num /= m + 1;\n  }\n  while(r.length > 0 && r[r.length - 1] == 0 /* && Util.mod(r.length *bpp, 8) > 0*/) r.pop();\n  while(r.length < minLen) r.push(0);\n  return r;\n};\n\nUtil.bitStuff = (arr, bpp) => {\n  const m = Util.bitMask(bpp, 0);\n  return arr.reduce(([b, f], n) => [b + (n & m) * f, f * (m + 1)], [0, 1])[0];\n};\n\nUtil.toBinary = function(num) {\n  return parseInt(num).toString(2);\n};\nUtil.toBits = function(num) {\n  let a = Util.toBinary(num).split('').reverse();\n  return Array.from(Object.assign({}, a, { length: 50 }), bit => (bit ? 1 : 0));\n};\nUtil.getBit = function(v, n) {\n  let s = v.toString(2);\n  return n < s.length ? parseInt(s[s.length - n - 1]) : 0;\n};\nUtil.isSet = function(v, n) {\n  return Util.getBit(v, n) == 1;\n};\nUtil.bitCount = function(n) {\n  return Util.count(Util.toBinary(n), '1');\n};\nUtil.bitNo = function(n) {\n  for(let i = 0; n; i++) {\n    if(n & 1) return i;\n    n >>= 1;\n  }\n};\n\nUtil.toggleBit = function(num, bit) {\n  const n = Number(num);\n  return Util.isSet(n, bit) ? n - Util.pow2(bit) : n + Util.pow2(bit);\n};\nUtil.setBit = function(num, bit) {\n  const n = Number(num);\n  return Util.isSet(n, bit) ? n : n + Util.pow2(bit);\n};\nUtil.clearBit = function(num, bit) {\n  const n = Number(num);\n  return Util.isSet(n, bit) ? n - Util.pow2(bit) : n;\n};\nUtil.range = function(...args) {\n  let [start, end, step = 1] = args;\n  let ret;\n  start /= step;\n  end /= step;\n  if(start > end) {\n    ret = [];\n    while(start >= end) ret.push(start--);\n  } else {\n    ret = Array.from({ length: end - start + 1 }, (v, k) => k + start);\n  }\n  if(step != 1) {\n    ret = ret.map(n => n * step);\n  }\n  //console.log(\"Util.range \", r);\n  return ret;\n};\nUtil.set = function(obj, prop, value) {\n  const set = obj instanceof Map ? (prop, value) => obj.set(prop, value) : (prop, value) => (obj[prop] = value);\n  if(arguments.length == 1)\n    return (prop, value) => {\n      set(prop, value);\n      return set;\n    };\n  if(arguments.length == 2) return value => set(prop, value);\n  return set(prop, value);\n};\n\nUtil.get = Util.curry((obj, prop) => (obj instanceof Map ? obj.get(prop) : obj[prop]));\nUtil.symbols = (() => {\n  const { asyncIterator, hasInstance, isConcatSpreadable, iterator, match, matchAll, replace, search, species, split, toPrimitive, toStringTag, unscopables } = Symbol;\n  return {\n    inspect: Util.inspectSymbol,\n    asyncIterator,\n    hasInstance,\n    isConcatSpreadable,\n    iterator,\n    match,\n    matchAll,\n    replace,\n    search,\n    species,\n    split,\n    toPrimitive,\n    toStringTag,\n    unscopables\n  };\n})();\n\n/*\n  const { indent = '  ', newline = '\\n', depth = 2, spacing = ' ' } = typeof opts == 'object' ? opts : { indent: '', newline: '', depth: typeof opts == 'number' ? opts : 10, spacing: ' ' };\n\n  return Util.formatAnnotatedObject(obj, { indent, newline, depth, spacing });\n};*/\nUtil.bitArrayToNumbers = function(arr) {\n  let numbers = [];\n  for(let i = 0; i < arr.length; i++) {\n    const number = i + 1;\n    if(arr[i]) numbers.push(number);\n  }\n  return numbers;\n};\nUtil.bitsToNumbers = function(bits) {\n  let a = Util.toBinary(bits).split('');\n  let r = [];\n  //return a;\n  a.forEach((val, key, arr) => val == '1' && r.unshift(a.length - key));\n  return r;\n};\nUtil.shuffle = function(arr, rnd = Util.rng) {\n  arr.sort((a, b) => 0.5 - rnd());\n  return arr;\n};\nUtil.sortNum = function(arr) {\n  arr.sort((a, b) => a - b);\n  //console.log(\"Util.sortNum \", { arr });\n  return arr;\n};\nUtil.draw = (arr, n = 1, rnd = Util.rng) => {\n  let pos = Util.randInt(0, arr.length - n - 1, rnd);\n  const r = arr.splice(pos, n);\n  return n == 1 ? r[0] : r;\n};\nUtil.is = function(what, ...pred) {\n  let fnlist = pred.map(type => (Util.isConstructor(type) ? what instanceof type : this.is[type]));\n  //console.debug('fnlist:', fnlist);\n  return fnlist.every(fn => fn(what));\n};\n\nUtil.instanceOf = (value, ctor) => Util.isObject(value) && Util.isConstructor(ctor) && value instanceof ctor;\n\nUtil.onoff = function(val) {\n  if(Util.is.on(val)) return true;\n  if(Util.is.off(val)) return false;\n  return undefined;\n};\nUtil.numbersToBits = function(arr) {\n  return arr.reduce((bits, num) => bits + Util.bitValue(num), 0);\n};\nUtil.randomNumbers = function([start, end], draws) {\n  const r = Util.draw(Util.range(start, end), draws);\n  //console.log(\"Util.randomNumbers \", { start, end, draws, r });\n  return r;\n};\nUtil.randomBits = function(r = [1, 50], n = 5) {\n  return Util.numbersToBits(Util.randomNumbers(r, n));\n};\nUtil.padFn = function(len, char = ' ', fn = (str, pad) => pad) {\n  return (s, n = len) => {\n    let m = Util.stripAnsi(s).length;\n    s = s ? s.toString() : '' + s;\n    return fn(s, m < n ? char.repeat(n - m) : '');\n  };\n};\nUtil.pad = function(s, n, char = ' ') {\n  return Util.padFn(n, char)(s);\n};\nUtil.abbreviate = function(str, max = 40, suffix = '...') {\n  max = +max;\n  if(isNaN(max)) max = Infinity;\n  if(Array.isArray(str)) {\n    return Array.prototype.slice.call(str, 0, Math.min(str.length, max)).concat([suffix]);\n  }\n  if(typeof str != 'string' || !Number.isFinite(max) || max < 0) return str;\n  str = '' + str;\n  if(str.length > max) {\n    return str.substring(0, max - suffix.length) + suffix;\n  }\n  return str;\n};\nUtil.trim = function(str, charset) {\n  const r1 = RegExp('^[' + charset + ']*');\n  const r2 = RegExp('[' + charset + ']*$');\n  return str.replace(r1, '').replace(r2, '');\n};\nUtil.trimRight = function(str, charset) {\n  const r2 = RegExp('[' + charset + ']*$');\n  return str.replace(r2, '');\n};\nUtil.indent = (text, space = '  ') => {\n  text = text.trim();\n  if(!/\\n/.test(text)) return text;\n  return text.replace(/(\\n)/g, '\\n' + space) + '\\n';\n};\nUtil.define = (obj, ...args) => {\n  if(typeof args[0] == 'object') {\n    const [arg, overwrite = true] = args;\n    let adecl = Object.getOwnPropertyDescriptors(arg);\n    let odecl = {};\n    for(let prop in adecl) {\n      if(prop in obj) {\n        if(!overwrite) continue;\n        else delete obj[prop];\n      }\n      if(Object.getOwnPropertyDescriptor(obj, prop)) delete odecl[prop];\n      else\n        odecl[prop] = {\n          ...adecl[prop],\n          enumerable: false,\n          configurable: true,\n          writeable: true\n        };\n    }\n    Object.defineProperties(obj, odecl);\n    return obj;\n  }\n  const [key, value, enumerable = false] = args;\n  Object.defineProperty(obj, key, {\n    enumerable,\n    configurable: true,\n    writable: true,\n    value\n  });\n  return obj;\n};\nUtil.memoizedProperties = (obj, methods) => {\n  let decls = {};\n  for(let method in methods) {\n    const memoize = Util.memoize(methods[method]);\n    decls[method] = {\n      get() {\n        return memoize.call(this);\n      },\n      enumerable: true,\n      configurable: true\n    };\n  }\n  return Object.defineProperties(obj, decls);\n};\nUtil.copyWhole = (dst, ...args) => {\n  let chain = [];\n  for(let src of args) chain = chain.concat(Util.getPrototypeChain(src).reverse());\n  //console.debug('chain:', ...chain);\n  for(let obj of chain) Util.define(dst, obj);\n  return dst;\n};\nUtil.copyEntries = (obj, entries) => {\n  for(let [k, v] of entries) obj[k] = v;\n  return obj;\n};\n\nUtil.extend = (...args) => {\n  let deep = false;\n  if(typeof args[0] == 'boolean') deep = args.shift();\n\n  let result = args[0];\n  if(Util.isUnextendable(result)) throw new Error('extendee must be an object');\n  let extenders = args.slice(1);\n  let len = extenders.length;\n  for(let i = 0; i < len; i++) {\n    let extender = extenders[i];\n    for(let key in extender) {\n      if(true || extender.hasOwnProperty(key)) {\n        let value = extender[key];\n        if(deep && Util.isCloneable(value)) {\n          let base = Array.isArray(value) ? [] : {};\n          result[key] = Util.extend(true, result.hasOwnProperty(key) && !Util.isUnextendable(result[key]) ? result[key] : base, value);\n        } else {\n          result[key] = value;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nUtil.isCloneable = obj => Array.isArray(obj) || {}.toString.call(obj) == '[object Object]';\n\nUtil.isUnextendable = val => !val || (typeof val != 'object' && typeof val != 'function');\n\n/*\nUtil.extend = (obj, ...args) => {\n  for(let other of args) {\n    for(let key of Util.iterateMembers(other, (k, value) => obj[k] === undefined && [k, value])) {\n      const value = other[key];\n      try {\n        Object.defineProperty(obj, key, {\n          value,\n          enumerable: false,\n          configurable: false,\n          writable: false\n        });\n      } catch(err) {\n        console.log('extend:' + err + '\\n', { obj, key, value });\n      }\n    }\n  }\n  return obj;\n};*/\n\nUtil.static = (obj, functions, thisObj, pred = (k, v, f) => true) => {\n  for(let [name, fn] of Util.iterateMembers(\n    functions,\n\n    Util.tryPredicate((key, depth) => obj[key] === undefined && typeof functions[key] == 'function' && pred(key, depth, functions) && [key, value])\n  )) {\n    const value = function(...args) {\n      return fn.call(thisObj || obj, this, ...args);\n    };\n    try {\n      obj[name] = value;\n\n      /*        Object.defineProperty(obj, name, { value, enumerable: false, configurable: false, writable: false });*/\n    } catch(err) {\n      console.log('static:', err);\n    }\n  }\n  return obj;\n};\nUtil.defineGetter = (obj, key, fn, enumerable = false) =>\n  obj[key] === undefined &&\n  Object.defineProperty(obj, key, {\n    enumerable,\n    configurable: true,\n    get: fn\n  });\nUtil.defineGetterSetter = (obj, key, g, s, enumerable = false) =>\n  obj[key] === undefined &&\n  Object.defineProperty(obj, key, {\n    get: g,\n    set: s,\n    enumerable\n  });\nUtil.defineGettersSetters = (obj, gettersSetters) => {\n  for(let name in gettersSetters) Util.defineGetterSetter(obj, name, gettersSetters[name], gettersSetters[name]);\n};\n\nUtil.extendArray = function(arr = Array.prototype) {\n  /*  Util.define(arr, 'tail', function() {\n    return this[this.length - 1];\n  });*/\n  Util.define(arr, 'match', function(pred) {\n    return Util.match(this, pred);\n  });\n  Util.define(arr, 'clear', function() {\n    this.splice(0, this, length);\n    return this;\n  });\n  Util.define(arr, 'unique', function() {\n    return this.filter((item, i, a) => a.indexOf(item) == i);\n  });\n  Util.defineGetterSetter(\n    arr,\n    'tail',\n    function() {\n      return Util.tail(this);\n    },\n    function(value) {\n      if(this.length == 0) this.push(value);\n      else this[this.length - 1] = value;\n    }\n  );\n\n  /*Util.define(arr, 'inspect', function(opts = {}) {\n    return Util.inspect(this, { depth: 100, ...opts });\n  });*/\n};\nUtil.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.key(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value)) {\n  const adapter = obj && {\n    /* prettier-ignore */ get length() {\n      return getLength(obj);\n    },\n    /* prettier-ignore */ get instance() {\n      return obj;\n    },\n    key(i) {\n      return getKey(obj, i);\n    },\n    get(key) {\n      return getItem(obj, key);\n    },\n    has(key) {\n      return this.get(key) !== undefined;\n    },\n    set(key, value) {\n      return setItem(obj, key, value);\n    },\n    *keys() {\n      const length = getLength(obj);\n      for(let i = 0; i < length; i++) yield getKey(obj, i);\n    },\n    *entries() {\n      for(let key of this.keys()) yield [key, getItem(obj, key)];\n    },\n    [Symbol.iterator]() {\n      return this.entries();\n    },\n    toObject() {\n      return Object.fromEntries(this.entries());\n    },\n    toMap() {\n      return new Map(this.entries());\n    }\n  };\n  return adapter;\n};\nUtil.adapter.localStorage = function(s) {\n  s = Util.tryCatch(\n    () => !s && globalThis.window,\n    w => w.localStorage,\n    () => s\n  );\n\n  return Util.adapter(\n    s,\n    l => l.length,\n    (l, i) => l.key(i),\n    (l, key) => JSON.parse(l.getItem(key)),\n    (l, key, v) => l.setItem(key, JSON.toString(v))\n  );\n};\nlet doExtendArray = Util.extendArray;\nUtil.array = function(a) {\n  if(!(a instanceof Array)) {\n    if(Util.isObject(a) && 'length' in a) a = Array.from(a);\n  }\n  if(doExtendArray)\n    try {\n      /*  if(Array.prototype.match === undefined) doExtendArray(Array.prototype);*/\n      if(a.match === undefined) {\n        doExtendArray(Array.prototype);\n        if(a.match) doExtendArray = null;\n      }\n      if(a.match === undefined) doExtendArray(a);\n    } catch(err) {}\n  return a;\n};\nUtil.arrayFromEntries = entries =>\n  Array.from(\n    entries.map(([k, v]) => k),\n    key => entries.find(([k, v]) => k === key)[1]\n  );\n\nUtil.toMap = function(hash = {}, fn) {\n  let m, gen;\n  if(hash instanceof Array && typeof fn == 'function') hash = hash.map(fn);\n\n  if(hash[Symbol.iterator] !== undefined) gen = hash[Symbol.iterator]();\n  else if(Util.isGenerator(hash)) gen = hash;\n  else gen = Object.entries(hash);\n\n  m = new Map(gen);\n\n  /*\n  if(m instanceof Array) m[Symbol.iterator] = m.entries;*/\n  try {\n    //if(m.toObject === undefined) Util.extendMap();\n    if(Map.prototype.toObject === undefined) Util.extendMap(Map.prototype);\n  } catch(err) {}\n  return m;\n};\nUtil.extendMap = function(map) {\n  if(map.entries === undefined) {\n    map.entries = function* iterator() {\n      for(let entry of map) {\n        yield entry.name !== undefined && entry.value !== undefined ? [entry.name, entry.value] : entry[0] !== undefined && entry[1] !== undefined ? entry : [entry, map[entry]];\n      }\n    };\n  }\n  map.toObject = function() {\n    return Object.fromEntries(this.entries());\n  };\n  map.match = function(...args) {\n    return Util.match.apply(this, args);\n  };\n};\nUtil.fromEntries = Object.fromEntries\n  ? Object.fromEntries\n  : entries => {\n      let ret = {};\n      for(let [k, v] of entries) {\n        ret[k] = v;\n      }\n      return ret;\n    };\n\nUtil.objectFrom = function(any) {\n  if('toJS' in any) any = any.toJS();\n  else if(Array.isArray(any)) return Util.fromEntries(any);\n  else if('entries' in any) return Util.fromEntries(any.entries());\n  return Object.assign({}, any);\n};\nUtil.tail = function(arr) {\n  return arr && arr.length > 0 ? arr[arr.length - 1] : null;\n};\nUtil.splice = function(str, index, delcount, insert) {\n  const chars = str.split('');\n  Array.prototype.splice.apply(chars, arguments);\n  return chars.join('');\n};\nUtil.identity = arg => arg;\nUtil.reverse = arr => arr.reverse();\n\nUtil.keyOf = function(obj, prop) {\n  const keys = Object.keys(obj);\n  for(let k in keys) {\n    if(obj[k] === prop) return k;\n  }\n  return undefined;\n};\nUtil.rotateRight = function(arr, n) {\n  arr.unshift(...arr.splice(n, arr.length));\n  return arr;\n};\nUtil.repeater = function(n, what) {\n  if(typeof what == 'function')\n    return (function* () {\n      for(let i = 0; i < n; i++) yield what();\n    })();\n  return (function* () {\n    for(let i = 0; i < n; i++) yield what;\n  })();\n};\nUtil.repeat = function(n, what) {\n  return [...Util.repeater(n, what)];\n};\nUtil.arrayDim = function(dimensions, init) {\n  let args = [...dimensions];\n  args.reverse();\n  let ret = init;\n  while(args.length > 0) {\n    const n = args.shift();\n    ret = Util.repeat(n, ret);\n  }\n  return ret;\n};\nUtil.flatten = function(arr) {\n  let ret = [];\n  for(let i = 0; i < arr.length; i++) {\n    ret = [...ret, ...arr[i]];\n  }\n  return ret;\n};\nUtil.chunkArray = (a, size) =>\n  a.reduce((acc, item, i) => {\n    const idx = i % size;\n    if(idx == 0) acc.push([]);\n\n    acc[acc.length - 1].push(item);\n    return acc;\n  }, []);\n\nUtil.partition = function* (a, size) {\n  for(let i = 0; i < a.length; i += size) yield a.slice(i, i + size);\n};\n\nUtil.difference = (a, b, incicludes) => {\n  //console.log('Util.difference', { a, b, includes });\n  if(typeof includes != 'function') return [a.filter(x => !b.includes(x)), b.filter(x => !a.includes(x))];\n\n  return [a.filter(x => !includes(b, x)), b.filter(x => !includes(a, x))];\n};\nUtil.intersect = (a, b) => a.filter(Set.prototype.has, new Set(b));\nUtil.symmetricDifference = (a, b) => [].concat(...Util.difference(a, b));\nUtil.union = (a, b, equality) => {\n  if(equality === undefined) return [...new Set([...a, ...b])];\n\n  return Util.unique([...a, ...b], equality);\n};\n\n/**\n * accepts array and function returning `true` or `false` for each element\n *\n * @param  {[type]}   array    [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nUtil.partition = (array, callback) => {\n  const matches = [],\n    nonMatches = [];\n\n  // push each element into array depending on return value of `callback`\n  for(let element of array) (callback(element) ? matches : nonMatches).push(element);\n\n  return [matches, nonMatches];\n};\n\nUtil.chances = function(numbers, matches) {\n  const f = Util.factorial;\n  return f(numbers) / (f(matches) * f(numbers - matches));\n};\nUtil.sum = arr => arr.reduce((acc, n) => acc + n, 0);\n\nUtil.expr = fn => {\n  let nargs = fn.length;\n  let ret = Util.curry(fn);\n\n  return ret;\n  return expr;\n  function expr(...args) {\n    let nums = [];\n\n    function addArgs(args) {\n      while(args.length > 0) {\n        const arg = args.shift();\n\n        if(typeof arg == 'function') args.unshift(arg(...args.splice(0, arg.length)));\n        else if(typeof arg == 'number') nums.push(arg);\n      }\n    }\n    addArgs(args);\n    //console.debug('nargs:', nargs);\n    //console.debug('nums.length:', nums.length);\n    if(nums.length >= nargs) return fn(...nums);\n\n    //let args = ['a','b','c','d'].slice(0,nargs - nums.length);\n    let ret = function returnFn(...args) {\n      addArgs(args.slice(0, nargs - nums.length));\n\n      //console.log('nums.length:', nums.length);\n      if(nums.length >= nargs) return fn(...nums);\n      return returnFn;\n    };\n    ret.nums = nums;\n\n    return ret;\n  }\n};\n\nUtil.add = Util.curry((a, b) => a + b);\nUtil.sub = Util.curry((a, b) => a - b);\nUtil.mul = Util.curry((a, b) => a * b);\nUtil.div = Util.curry((a, b) => a / b);\nUtil.xor = Util.curry((a, b) => a ^ b);\nUtil.or = Util.curry((a, b) => a | b);\nUtil.and = Util.curry((a, b) => a & b);\nUtil.mod = (a, b) => (typeof b == 'number' ? ((a % b) + b) % b : n => ((n % a) + a) % a);\nUtil.pow = Util.curry((a, b) => Math.pow(a, b));\n\n/*Util.define(String.prototype,\n  'splice',\n  function(index, delcount, insert) {\n    return Util.splice.apply(this, [this, ...arguments]);\n  }\n);*/\nUtil.fnName = function(f, parent) {\n  if(typeof f == 'function') {\n    if(f.name !== undefined) return f.name;\n    const s = typeof f.toSource == 'function' ? f.toSource() : f + '';\n    const matches = /([A-Za-z_][0-9A-Za-z_]*)\\w*[(\\]]/.exec(s);\n    if(matches) return matches[1];\n    if(parent !== undefined) {\n      for(let key in parent) {\n        if(parent[key] === f) return key;\n      }\n    }\n  }\n};\n\nUtil.objName = function(o) {\n  if(o === undefined || o == null) return `${o}`;\n  if(typeof o === 'function' || o instanceof Function) return Util.fnName(o);\n  if(o.constructor) return Util.fnName(o.constructor);\n  const s = `${o.type}`;\n  return s;\n};\nUtil.findKey = function(obj, pred, thisVal) {\n  let fn = typeof pred == 'function' ? value : v => v === pred;\n  for(let k in obj) if(fn.call(thisVal, obj[k], k)) return k;\n};\nUtil.find = function(arr, value, prop = 'id') {\n  let pred;\n  if(typeof value == 'function') {\n    pred = value;\n  } else if(prop && prop.length !== undefined) {\n    pred = function(obj) {\n      if(obj[prop] == value) return true;\n      return false;\n    };\n  } else {\n    pred = typeof prop == 'function' ? obj => prop(value, obj) : obj => obj[prop] == value;\n  }\n  if(typeof arr.find == 'function') return arr.find(pred);\n  if(!arr[Symbol.iterator] && typeof arr.entries == 'function') {\n    let entryPred = pred;\n    pred = ([key, value], arr) => entryPred(value, key, arr);\n    arr = arr.entries();\n  }\n  for(let v of arr) {\n    if(pred(v)) return v;\n  }\n  return null;\n};\n\nUtil.findIndex = function(obj, pred, thisArg) {\n  if(typeof obj.findIndex == 'function') return obj.findIndex(pred, thisArg);\n  return Util.findKey(obj, pred, thisArg);\n};\n\nUtil.match = function(arg, pred) {\n  let match = pred;\n  if(pred instanceof RegExp) {\n    const re = pred;\n    match = (val, key) => (val && val.tagName !== undefined && re.test(val.tagName)) || (typeof key === 'string' && re.test(key)) || (typeof val === 'string' && re.test(val));\n  }\n  if(Array.isArray(arg)) {\n    if(!(arg instanceof Array)) arg = [...arg];\n    return arg.reduce((acc, val, key) => {\n      if(match(val, key, arg)) acc.push(val);\n      return acc;\n    }, []);\n  } else if(Util.isMap(arg)) {\n    //console.log('Util.match ', { arg });\n    return [...arg.keys()].reduce((acc, key) => (match(arg.get(key), key, arg) ? acc.set(key, arg.get(key)) : acc), new Map());\n  }\n  return Util.filter(arg, match);\n};\nUtil.toHash = function(map, keyTransform = k => Util.camelize('' + k)) {\n  let ret = {};\n  Util.foreach(map, (v, k) => (ret[keyTransform(k)] = v));\n  return ret;\n};\nUtil.indexOf = function(obj, prop) {\n  for(let key in obj) {\n    if(obj[key] === prop) return key;\n  }\n  return undefined;\n};\n\n/*\nUtil.injectProps = function(options) {\n  return function(InitialComponent) {\n    return function DndStateInjector() {\n      return <InitialComponent {...options} />;\n    }\n  }\n}*/\n\nUtil.greatestCommonDenominator = (a, b) => (b ? Util.greatestCommonDenominator(b, a % b) : a);\n\nUtil.leastCommonMultiple = (n1, n2) => {\n  //Find the gcd first\n  let gcd = Util.greatestCommonDenominator(n1, n2);\n\n  //then calculate the lcm\n  return (n1 * n2) / gcd;\n};\nUtil.matchAll = Util.curry(function* (re, str) {\n  let match;\n  re = re instanceof RegExp ? re : new RegExp(Array.isArray(re) ? '(' + re.join('|') + ')' : re, 'g');\n  do {\n    if((match = re.exec(str))) yield match;\n  } while(match != null);\n});\n\nUtil.inspect = function(obj, opts = {}) {\n  const {\n    quote = '\"',\n    multiline = true,\n    toString = Symbol.toStringTag || 'toString' /*Util.symbols.toStringTag*/,\n    stringFn = str => str,\n    indent = '',\n    colors = false,\n    stringColor = [1, 36],\n    spacing = '',\n    newline = '\\n',\n    padding = ' ',\n    separator = ',',\n    colon = ': ',\n    depth = 10,\n    json = false\n  } = {\n    ...Util.inspect.defaultOpts,\n    toString: Util.symbols.inspect,\n    colors: true,\n    multiline: true,\n    newline: '\\n',\n    ...opts\n  };\n\n  try {\n    if(Util == obj) return Util;\n  } catch(e) {}\n  //console.log(\"Util.inspect\", {quote,colors,multiline,json})\n\n  let out;\n  const { c = Util.coloring(colors) } = opts;\n  const { print = (...args) => (out = c.concat(out, c.text(...args))) } = opts;\n  const sep = multiline && depth > 0 ? (space = false) => newline + indent + (space ? '  ' : '') : (space = false) => (space ? spacing : '');\n  if(typeof obj == 'number') {\n    print(obj + '', 1, 36);\n  } else if(typeof obj == 'undefined' || obj === null) {\n    print(obj + '', 1, 35);\n  } else if(typeof obj == 'function' /*|| obj instanceof Function || Util.className(obj) == 'Function'*/) {\n    obj = '' + obj;\n    //  if(!multiline)\n    obj = obj.split(lineSplit)[0].replace(/{\\s*$/, '{}');\n    print(obj);\n  } else if(typeof obj == 'string') {\n    print(`${quote}${stringFn(obj)}${quote}`, 1, 36);\n  } else if(obj instanceof Date) {\n    print(`new `, 1, 31);\n\n    print(`Date`, 1, 33);\n    print(`(`, 1, 36);\n    print(obj.getTime() + obj.getMilliseconds() / 1000, 1, 36);\n    print(`)`, 1, 36);\n  } else if(Object.getPrototypeOf(obj) == Array.prototype) {\n    let i;\n    print(`[`, 1, 36);\n    for(i = 0; i < obj.length; i++) {\n      if(i > 0) print(separator, 1, 36);\n      else print(padding);\n      print(sep(i > 0));\n      Util.inspect(obj[i], {\n        ...opts,\n        c,\n        print,\n        newline: newline + '  ',\n        depth: depth - 1\n      });\n    }\n    print((padding || '') + `]`, 1, 36);\n  } else if(Util.isObject(obj)) {\n    const inspect = toString ? obj[toString] : null;\n    if(typeof inspect == 'function' && !Util.isNativeFunction(inspect) && !/Util.inspect/.test(inspect + '')) {\n      let s = inspect.call(obj, depth, { ...opts });\n      //console.debug('s:', s);\n      //console.debug('inspect:', inspect + '');\n\n      out += s;\n    } else {\n      let isMap = obj instanceof Map;\n      let keys = isMap ? obj.keys() : Object.getOwnPropertyNames(obj);\n      //console.debug(\"keys:\", keys);\n\n      if(Object.getPrototypeOf(obj) !== Object.prototype) print(Util.className(obj) + ' ', 1, 31);\n      isMap ? print(`(${obj.size}) {${sep(true)}`, 1, 36) : print('{' + (sep(true) || padding), 1, 36);\n      let i = 0;\n      let getFn = isMap ? key => obj.get(key) : key => obj[key];\n      let propSep = isMap ? [' => ', 0] : [': ', 1, 36];\n      for(let key of keys) {\n        const value = getFn(key);\n        if(i > 0) print(separator + sep(true), 36);\n        if(typeof key == 'symbol') print(key.toString(), 1, 32);\n        else if(Util.isObject(key) && typeof key[toString] == 'function') print(isMap ? `'${key[toString]()}'` : json ? `\"${key.toString()}\"` : key[toString](), 1, isMap ? 36 : 33);\n        else if(typeof key == 'string' || (!isMap && Util.isObject(key) && typeof key.toString == 'function'))\n          print(json ? `\"${key.toString()}\"` : isMap || /(-)/.test(key) ? `'${key}'` : key, 1, isMap ? 36 : 33);\n        else\n          Util.inspect(key, {\n            ...opts,\n            c,\n            print,\n            newline: newline + '  ',\n            newline: '',\n            multiline: false,\n            toString: 'toString',\n            depth: depth - 1\n          });\n        print(...propSep);\n        if(typeof value == 'number') print(`${value}`, 1, 36);\n        else if(typeof value == 'string' || value instanceof String) print(`${quote}${value}${quote}`, 1, 36);\n        else if(typeof value == 'object')\n          Util.inspect(value, {\n            ...opts,\n            print,\n            multiline: isMap && !(value instanceof Map) ? false : multiline,\n            newline: newline + '  ',\n            depth: depth - 1\n          });\n        else print((value + '').replace(lineSplit, sep(true)));\n        i++;\n      }\n      print(`${multiline ? newline : padding}}`, 1, 36);\n    }\n  }\n  return out;\n};\n\nUtil.inspect.defaultOpts = {\n  spacing: ' ',\n  padding: ' '\n};\n\nUtil.dump = function(name, props) {\n  const args = [name];\n  for(let key in props) {\n    f;\n    args.push(`\\n\\t${key}: `);\n    args.push(props[key]);\n  }\n  const w = Util.tryCatch(\n    () => globalThis.window,\n    w => w,\n    () => null\n  );\n\n  if(w) {\n    //if(window.alert !== undefined)\n    //alert(args);\n    if(w.console !== undefined) w.console.log(...args);\n  }\n};\nUtil.ucfirst = function(str) {\n  if(typeof str != 'string') str = str + '';\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n};\nUtil.lcfirst = function(str) {\n  if(typeof str != 'string') str = str + '';\n  return str.substring(0, 1).toLowerCase() + str.substring(1);\n};\nUtil.typeOf = v => {\n  let type = typeof v;\n  if(type == 'object' && v != null && Object.getPrototypeOf(v) != Object.prototype) type = Util.className(v);\n  else type = Util.ucfirst(type);\n  return type;\n};\n\n/**\n * Camelize a string, cutting the string by multiple separators like\n * hyphens, underscores and spaces.\n *\n * @param {text} string Text to camelize\n * @return string Camelized text\n */\nUtil.camelize = (text, sep = '') =>\n  text.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2, offset) => {\n    if(p2) return sep + p2.toUpperCase();\n    return p1.toLowerCase();\n  });\n\nUtil.decamelize = function(str, separator = '-') {\n  return /.[A-Z]/.test(str)\n    ? str\n        .replace(/([a-z\\d])([A-Z])/g, '$1' + separator + '$2')\n        .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + separator + '$2')\n        .toLowerCase()\n    : str;\n};\nUtil.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {}) {\n  return function(value) {\n    let result = pred(value);\n    let ret = result ? _then(value) : _else(value);\n    return ret;\n  };\n};\nUtil.if = (value, _then, _else, pred) => Util.ifThenElse(pred || (v => !!v), _then || (() => value), _else || (() => value))(value);\n\nUtil.ifElse = (value, _else, pred) => Util.ifThenElse(pred || (v => !!v), () => value, _else ? () => _else : () => value)(value);\nUtil.ifThen = (value, _then, pred) => Util.ifThenElse(pred || (v => !!v), _then ? () => _then : () => value, () => value)(value);\n\nUtil.switch = ({ default: defaultCase, ...cases }) =>\n  function(value) {\n    if(value in cases) return cases[value];\n    return defaultCase;\n  };\n\nUtil.transform = Util.curry(function* (fn, arr) {\n  for(let item of arr) yield fn(item);\n});\n\nUtil.colorDump = (iterable, textFn) => {\n  textFn = textFn || ((color, n) => ('   ' + (n + 1)).slice(-3) + ` ${color}`);\n\n  let j = 0;\n  const filters = 'font-weight: bold; text-shadow: 0px 0px 1px rgba(0,0,0,0.8); filter: drop-shadow(30px 10px 4px #4444dd)';\n\n  if(!Array.isArray(iterable)) iterable = [...iterable];\n  for(let j = 0; j < iterable.length; j++) {\n    const [i, color] = iterable[j].length == 2 ? iterable[j] : [j, iterable[j]];\n    console.log(\n      `  %c    %c ${color} %c ${textFn(color, i)}`,\n      `background: ${color}; font-size: 18px; ${filters};`,\n      `background: none; color: ${color}; min-width: 120px; ${filters}; `,\n      `color: black; font-size: 12px;`\n    );\n  }\n};\n\nUtil.bucketInserter = (map, ...extraArgs) => {\n  let inserter;\n  inserter =\n    typeof map.has == 'function'\n      ? function(...args) {\n          //console.log(\"bucketInsert:\",map,args);\n          for(let [k, v] of args) {\n            let a;\n            map.has(k) ? (a = map.get(k)) : map.set(k, (a = []));\n            a.push(v);\n          }\n          return inserter;\n        }\n      : function(...args) {\n          for(let arg of args) {\n            for(let k in arg) {\n              const v = arg[k];\n              let a = map[k] || [];\n              if(typeof a.push == 'function') a.push(v);\n\n              map[k] = a;\n            }\n          }\n        };\n  inserter(...extraArgs);\n  inserter.map = map;\n  return inserter;\n};\nUtil.fifo = function fifo() {\n  let resolve = () => {};\n  const queue = [];\n\n  //(there's no arrow function syntax for this)\n  async function* generator() {\n    for(;;) {\n      if(!queue.length) {\n        //there's nothing in the queue, wait until push()\n        await new Promise(r => (resolve = r));\n      }\n      yield queue.shift();\n    }\n  }\n\n  return {\n    push(...args) {\n      for(let event of args) {\n        queue.push(event);\n        if(queue.length === 1) resolve(); //allow the generator to resume\n      }\n      return this;\n    },\n    loop: generator(),\n\n    process: async function run() {\n      for await(const event of this.loop) {\n        console.info('event:', event);\n      }\n    }\n  };\n};\nUtil.isEmail = function(v) {\n  return /^[\\-\\w]+(\\.[\\-\\w]+)*@[\\-\\w]+(\\.[\\-\\w]+)+$/.test(v);\n};\nUtil.isString = function(v) {\n  return Object.prototype.toString.call(v) == '[object String]';\n};\n\n/**\n * Determines whether the specified v is numeric.\n *\n * @param      {<type>}   v       { parameter_description }\n * @return     {boolean}  True if the specified v is numeric, False otherwise.\n */\nUtil.isNumeric = v => /^[-+]?(0x|0b|0o|)[0-9]*\\.?[0-9]+(|[Ee][-+]?[0-9]+)$/.test(v + '');\n\nUtil.isUndefined = arg => arg === undefined;\nUtil.isObject = obj => !(obj === null) && { object: obj, function: obj }[typeof obj];\nUtil.isPrimitive = obj => !(obj === null) && obj !== false && obj !== true && { number: obj, string: obj, boolean: obj, undefined: obj }[typeof obj];\nUtil.isFunction = arg => {\n  if(arg !== undefined) return typeof arg == 'function' || !!(arg && arg.constructor && arg.call && arg.apply);\n\n  /*\n  let fn = arg => Util.isFunction(arg);\n  fn.inverse = arg => !Util.isFunction(arg);\n  return fn;*/\n};\nUtil.not = fn =>\n  function(...args) {\n    return !fn(...args);\n  };\nUtil.isAsync = fn => typeof fn == 'function' && /^[\\n]*async/.test(fn + '') /*|| fn() instanceof Promise*/;\n\nUtil.isArrowFunction = fn => (Util.isFunction(fn) && !('prototype' in fn)) || /\\ =>\\ /.test(('' + fn).replace(/\\n.*/g, ''));\n\nUtil.isEmptyString = v => Util.isString(v) && (v == '' || v.length == 0);\n\nUtil.isEmpty = (...args) => {\n  function empty(v) {\n    if(typeof v == 'object' && !!v && v.constructor == Object && Object.keys(v).length == 0) return true;\n    if(!v || v === null) return true;\n    if(typeof v == 'object' && v.length !== undefined && v.length === 0) return true;\n    return false;\n  }\n  return args.length ? empty(args[0]) : empty;\n};\nUtil.isNonEmpty = (...args) => {\n  const empty = Util.isEmpty();\n  const nonEmpty = v => !empty(v);\n  return args.length ? nonEmpty(args[0]) : nonEmpty;\n};\nUtil.isIpAddress = v => {\n  const n = (v + '').split('.').map(i => +i);\n  return n.length == 4 && n.every(i => !isNaN(i) && i >= 0 && i <= 255);\n};\nUtil.isPortNumber = v => {\n  const n = +v;\n  return !isNaN(n) && n >= 0 && n <= 65535;\n};\n\nUtil.hasProps = function(obj, props) {\n  const keys = Object.keys(obj);\n  return props ? props.every(prop => 'prop' in obj) : keys.length > 0;\n};\nUtil.validatePassword = function(value) {\n  return value.length > 7 && new RegExp('^(?![d]+$)(?![a-zA-Z]+$)(?![!#$%^&*]+$)[da-zA-Z!#$ %^&*]').test(value) && !/\\s/.test(value);\n};\nUtil.clone = function(obj, proto) {\n  if(Array.isArray(obj)) return obj.slice();\n  try {\n    let ret = new obj.constructor(obj);\n    return ret;\n  } catch(err) {}\n  if(typeof obj == 'object') return Object.create(proto || obj.constructor.prototype || Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));\n};\n//deep copy\nUtil.deepClone = function(data) {\n  return JSON.parse(JSON.toString(data));\n};\n//Function\nUtil.findVal = function(object, propName, maxDepth = 10) {\n  if(maxDepth <= 0) return null;\n  for(let key in object) {\n    if(key === propName) {\n      //console.log(propName);\n      //console.log(object[key]);\n      return object[key];\n    }\n    let value = Util.findVal(object[key], propName, maxDepth - 1);\n    if(value !== undefined) return value;\n  }\n};\n//Deep copy for ObservableArray/Object == There is a problem\nUtil.deepCloneObservable = function(data) {\n  let o;\n  const t = typeof data;\n  if(t === 'object') return data;\n\n  if(t === 'object') {\n    if(data.length) {\n      for(const value of data) {\n        o.push(this.deepCloneObservable(value));\n      }\n      return o;\n    }\n    for(const i in data) {\n      o[i] = this.deepCloneObservable(data[i]);\n    }\n    return o;\n  }\n};\n//Convert ObservableArray to Array\nUtil.toArray = function(observableArray) {\n  return observableArray.slice();\n};\n\n/**\n * Convert the original array to tree\n * @param data original array\n * @param id id field\n * @param pId parent id field\n * @param appId the parent id value of the level one array\n */\nUtil.arryToTree = function(data, id, pId, appId) {\n  const arr = [];\n  data.map((e, i) => {\n    e[pId] === appId && arr.push(e);\n  });\n  const res = this.to3wei(arr, data, id, pId);\n  return res;\n};\n\n/**\n * Convert a first-level branch array to a tree\n * @param a level one branch array\n * @param old original array\n * @param id id field\n * @param pId parent id field\n */\nUtil.to3wei = function(a, old, id, pId) {\n  a.map((e, i) => {\n    a[i].children = [];\n    old.map((se, si) => {\n      if(se[pId] === a[i][id]) {\n        a[i].children = [...a[i].children, se];\n        this.to3wei(a[i].children, old, id, pId);\n      }\n    });\n    if(!a[i].children.length) {\n      delete a[i].children;\n    }\n  });\n  return a;\n};\n\n/**\n * Exchange 2 element positions in the array\n * @param arr original array\n * @param i First element Starting from 0\n * @param j The second element starts at 0\n */\nUtil.arrExchangePos = function(arr, i, j) {\n  arr[i] = arr.splice(j, 1, arr[i])[0];\n};\nUtil.arrRemove = function(arr, i) {\n  const index = arr.indexOf(i);\n  if(index > -1) arr.splice(index, 1);\n};\nUtil.move = function(src, dst = []) {\n  let items = src.splice(0, src.length);\n  dst.splice(dst.length, 0, ...items);\n  return dst;\n};\nUtil.moveIf = function(src, pred, dst = []) {\n  let items = src.splice(0, src.length);\n  let i = 0;\n  for(let item of items) (pred(item, i++) ? src : dst).push(item);\n\n  return dst;\n};\n//Remove the storage when logging out\nUtil.logOutClearStorage = function() {\n  localStorage.removeItem('userToken');\n  localStorage.removeItem('userLoginPermission');\n  localStorage.removeItem('ssoToken');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('userGroupList');\n  localStorage.removeItem('gameAuthList');\n};\n//Take the cookies\nUtil.getCookie = function(cookie, name) {\n  let arr = cookie.match(new RegExp('(^| )' + name + '=([^;]*)(;|$)'));\n  if(arr != null) return unescape(arr[2]);\n  return null;\n};\nUtil.parseCookie = function(c = document.cookie) {\n  if(!(typeof c == 'string' && c && c.length > 0)) return {};\n  let key = '';\n  let value = '';\n  const ws = ' \\r\\n\\t';\n  let i = 0;\n  let ret = {};\n  const skip = (pred = char => ws.indexOf(char) != -1) => {\n    let start = i;\n    while(i < c.length && pred(c[i])) i++;\n    let r = c.substring(start, i);\n    return r;\n  };\n  do {\n    let str = skip(char => char != '=' && char != ';');\n    if(c[i] == '=' && str != 'path') {\n      i++;\n      key = str;\n      value = skip(char => char != ';');\n    } else {\n      i++;\n      skip();\n    }\n    if(key != '') ret[key] = value;\n    skip();\n  } while(i < c.length);\n  return ret;\n};\n\n/*\n    matches.shift();\n    return matches.reduce((acc, part) => {\n      const a = part.trim().split('=');\n      return { ...acc, [a[0]]: decodeURIComponent(a[1]) };\n    }, {});\n  };*/\nUtil.encodeCookie = c =>\n  Object.entries(c)\n    .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n    .join('; ');\nUtil.setCookies = c =>\n  Object.entries(c).forEach(([key, value]) => {\n    document.cookie = `${key}=${value}`;\n    //console.log(`Setting cookie[${key}] = ${value}`);\n  });\nUtil.clearCookies = function(c) {\n  return Util.setCookies(\n    Object.keys(Util.parseCookie(c)).reduce(\n      (acc, name) =>\n        Object.assign(acc, {\n          [name]: `; max-age=0; expires=${new Date().toUTCString()}`\n        }),\n      {}\n    )\n  );\n};\nUtil.deleteCookie = function(name) {\n  const w = Util.tryCatch(\n    () => globalThis.window,\n    w => w,\n    () => null\n  );\n\n  if(w) document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:01 GMT;`;\n};\nUtil.accAdd = function(arg1, arg2) {\n  let r1, r2, m;\n  try {\n    r1 = arg1.toString().split('.')[1].length;\n  } catch(e) {\n    r1 = 0;\n  }\n  try {\n    r2 = arg2.toString().split('.')[1].length;\n  } catch(e) {\n    r2 = 0;\n  }\n  m = Math.pow(10, Math.max(r1, r2));\n  return (arg1 * m + arg2 * m) / m;\n};\n//js subtraction calculation\n//\nUtil.Subtr = function(arg1, arg2) {\n  let r1, r2, m, n;\n  try {\n    r1 = arg1.toString().split('.')[1].length;\n  } catch(e) {\n    r1 = 0;\n  }\n  try {\n    r2 = arg2.toString().split('.')[1].length;\n  } catch(e) {\n    r2 = 0;\n  }\n  m = Math.pow(10, Math.max(r1, r2));\n  //last modify by deeka\n  //Âä®ÊÄÅÊéßÂà∂Á≤æÂ∫¶ÈïøÂ∫¶\n  n = r1 >= r2 ? r1 : r2;\n  return (arg1 * m - arg2 * m) / m;\n};\n//js division function\n//\nUtil.accDiv = function(arg1, arg2) {\n  let t1 = 0;\n  let t2 = 0;\n  let r1;\n  let r2;\n  try {\n    t1 = arg1.toString().split('.')[1].length;\n  } catch(e) {}\n  try {\n    t2 = arg2.toString().split('.')[1].length;\n  } catch(e) {}\n  r1 = Number(arg1.toString().replace('.', ''));\n  r2 = Number(arg2.toString().replace('.', ''));\n  return (r1 / r2) * Math.pow(10, t2 - t1);\n};\n//js multiplication function\n//\nUtil.accMul = function(arg1, arg2) {\n  let m = 0;\n  const s1 = arg1.toString();\n  const s2 = arg2.toString();\n  try {\n    m += s1.split('.')[1].length;\n  } catch(e) {}\n  try {\n    m += s2.split('.')[1].length;\n  } catch(e) {}\n  return (Number(s1.replace('.', '')) * Number(s2.replace('.', ''))) / Math.pow(10, m);\n};\nUtil.dateFormatter = function(date, formate) {\n  const year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  month = month > 9 ? month : `0${month}`;\n  let day = date.getDate();\n  day = day > 9 ? day : `0${day}`;\n  let hour = date.getHours();\n  hour = hour > 9 ? hour : `0${hour}`;\n  let minute = date.getMinutes();\n  minute = minute > 9 ? minute : `0${minute}`;\n  let second = date.getSeconds();\n  second = second > 9 ? second : `0${second}`;\n  return formate\n    .replace(/Y+/, `${year}`.slice(-formate.match(/Y/g).length))\n    .replace(/M+/, month)\n    .replace(/D+/, day)\n    .replace(/h+/, hour)\n    .replace(/m+/, minute)\n    .replace(/s+/, second);\n};\nUtil.numberFormatter = function(numStr) {\n  let numSplit = numStr.split('.');\n  return numSplit[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',').concat(`.${numSplit[1]}`);\n};\nUtil.searchObject = function(object, matchCallback, currentPath, result, searched) {\n  currentPath = currentPath || '';\n  result = result || [];\n  searched = searched || [];\n  if(searched.indexOf(object) !== -1 && object === Object(object)) {\n    return;\n  }\n  searched.push(object);\n  if(matchCallback(object)) {\n    result.push({ path: currentPath, value: object });\n  }\n  try {\n    if(object === Object(object)) {\n      for(const property in object) {\n        const desc = Object.getOwnPropertyDescriptor(object, property);\n        //console.log('x ', {property, desc})\n        if(property.indexOf('$') !== 0 && typeof object[property] !== 'function' && !desc.get && !desc.set) {\n          if(typeof object[property] === 'object') {\n            try {\n              JSON.toString(object[property]);\n            } catch(err) {\n              continue;\n            }\n          }\n          //if (Object.prototype.hasOwnProperty.call(object, property)) {\n          Util.searchObject(object[property], matchCallback, `${currentPath}.${property}`, result, searched);\n          //}\n        }\n      }\n    }\n  } catch(e) {\n    //console.log(object);\n    //throw e;\n  }\n  return result;\n};\nUtil.getURL = Util.memoize((req = {}) =>\n  Util.tryCatch(\n    () => process.argv[1],\n    () => 'file://' + Util.scriptDir(),\n\n    Util.tryCatch(\n      () => window.location.href,\n\n      url => url,\n\n      () => {\n        let proto = Util.tryCatch(() => (process.env.NODE_ENV === 'production' ? 'https' : null)) || 'http';\n        let port = Util.tryCatch(() => (process.env.PORT ? parseInt(process.env.PORT) : process.env.NODE_ENV === 'production' ? 443 : null)) || 3000;\n        let host = Util.tryCatch(() => globalThis.ip) || Util.tryCatch(() => globalThis.host) || Util.tryCatch(() => window.location.host.replace(/:.*/g, '')) || 'localhost';\n        if(req && req.headers && req.headers.host !== undefined) host = req.headers.host.replace(/:.*/, '');\n        else Util.tryCatch(() => process.env.HOST !== undefined && (host = process.env.HOST));\n        if(req.url !== undefined) return req.url;\n        const url = `${proto}://${host}:${port}`;\n        return url;\n      }\n    )\n  )\n);\nUtil.parseQuery = function(url = Util.getURL()) {\n  let startIndex;\n  let query = {};\n  try {\n    if((startIndex = url.indexOf('?')) != -1) url = url.substring(startIndex);\n    const args = [...url.matchAll(/[?&]([^=&#]+)=?([^&#]*)/g)];\n    if(args) {\n      for(let i = 0; i < args.length; i++) {\n        const k = args[i][1];\n        query[k] = decodeURIComponent(args[i][2]);\n      }\n    }\n    return query;\n  } catch(err) {\n    return undefined;\n  }\n};\nUtil.encodeQuery = function(data) {\n  const ret = [];\n  for(let d in data) if(data[d] !== undefined) ret.push(`${encodeURIComponent(d)}=${encodeURIComponent(data[d])}`);\n  return ret.join('&');\n};\nUtil.parseURL = function(href = this.getURL()) {\n  //console.debug('href:', href);\n  const matches = new RegExp('^([^:]+://)?([^/:]*)(:[0-9]*)?(/?[^#]*)?(#.*)?', 'g').exec(href);\n  const [all, proto, host, port, location = '', fragment] = matches;\n  //console.debug('matches:', matches);\n  if(!matches) return null;\n  const argstr = location.indexOf('?') != -1 ? location.replace(/^[^?]*\\?/, '') : ''; /* + \"&test=1\"*/\n  const pmatches =\n    typeof argstr === 'string'\n      ? argstr\n          .split(/&/g)\n          .map(part => {\n            let a = part.split(/=/);\n            let b = a.shift();\n            return [b, a.join('=')];\n          })\n          .filter(([k, v]) => !(k.length == 0 && v.length == 0))\n      : [];\n  const params = [...pmatches].reduce((acc, m) => {\n    acc[m[0]] = m[1];\n    return acc;\n  }, {});\n  //console.log(\"PARAMS: \", { argstr, pmatches, params });\n  const ret = {\n    protocol: proto ? proto.replace('://', '') : 'http',\n    host,\n    location: location.replace(/\\?.*/, ''),\n    query: params\n  };\n  Object.assign(ret, {\n    href(override) {\n      if(typeof override === 'object') Object.assign(this, override);\n      const qstr = Util.encodeQuery(this.query);\n      return (this.protocol ? `${this.protocol}://` : '') + (this.host ? this.host : '') + (this.port ? `:${this.port}` : '') + `${this.location}` + (qstr != '' ? `?${qstr}` : '');\n    }\n  });\n  if(typeof port === 'string') ret.port = parseInt(port.substring(1));\n  else if(ret.protocol == 'https') ret.port = 443;\n  else if(ret.protocol == 'http') ret.port = 80;\n  if(fragment) ret.fragment = fragment;\n  return ret;\n};\nUtil.makeURL = function(...args) {\n  let href = typeof args[0] == 'string' ? args.shift() : Util.getURL();\n  let url = Util.parseURL(href);\n  let obj = typeof args[0] == 'object' ? args.shift() : {};\n  if('host' in obj /*|| 'protocol' in obj*/) url = Util.filterOutKeys(url, [/*'protocol',*/ 'host', 'port']);\n  Object.assign(url, obj);\n  return url.href();\n\n  /*\n  let href = typeof args[0] === \"string\" ? args.shift() : this.getURL();\n  let urlObj = null;\n  urlObj = this.parseURL(href);\n  return urlObj ? urlObj.href(args[0]) : null;*/\n};\nUtil.numberFromURL = function(url, fn) {\n  const obj = typeof url === 'object' ? url : this.parseURL(url);\n  const nr_match = RegExp('.*[^0-9]([0-9]+)$').exec(url.location);\n  const nr_arg = nr_match ? nr_match[1] : undefined;\n  const nr = nr_arg && parseInt(nr_arg);\n  if(!isNaN(nr) && typeof fn === 'function') fn(nr);\n  return nr;\n};\nUtil.tryPromise = fn => new Promise((resolve, reject) => Util.tryCatch(fn, resolve, reject));\n\nUtil.tryFunction = (fn, resolve = a => a, reject = () => null) => {\n  if(typeof resolve != 'function') {\n    let rval = resolve;\n    resolve = () => rval;\n  }\n  if(typeof reject != 'function') {\n    let cval = reject;\n    reject = () => cval;\n  }\n  return Util.isAsync(fn)\n    ? async function(...args) {\n        let ret;\n        try {\n          ret = await fn(...args);\n        } catch(err) {\n          return reject(err, ...args);\n        }\n        return resolve(ret, ...args);\n      }\n    : function(...args) {\n        let ret;\n        try {\n          ret = fn(...args);\n        } catch(err) {\n          return reject(err, ...args);\n        }\n        return resolve(ret, ...args);\n      };\n};\nUtil.tryCatch = (fn, resolve = a => a, reject = () => null, ...args) => {\n  if(Util.isAsync(fn))\n    return fn(...args)\n      .then(resolve)\n      .catch(reject);\n\n  return Util.tryFunction(fn, resolve, reject)(...args);\n};\n\nUtil.putError = err => {\n  let e = Util.isObject(err) && err instanceof Error ? err : Util.exception(err);\n  (console.info || console.log)('Util.putError ', e);\n  let s = err.stack ? Util.stack(err.stack) : null;\n\n  (console.error || console.log)('ERROR:\\n' + err.message + (s ? '\\nstack:\\n' + s.toString() : s));\n};\nUtil.putStack = (stack = new Util.stack().slice(3)) => {\n  stack = stack instanceof Util.stack ? stack : Util.stack(stack);\n  console.log('Util.putStack', Util.className(stack));\n\n  console.log('STACK TRACE:\\n' + stack.toString());\n};\n\nUtil.trap = (() => {\n  Error.stackTraceLimit = 100;\n  return fn => /* prettier-ignore */ Util.tryFunction(fn, ret => ret, Util.putError);\n})();\n\nUtil.tryPredicate = (fn, defaultRet) =>\n  Util.tryFunction(\n    fn,\n    ret => ret,\n    () => defaultRet\n  );\n\nUtil.isBrowser = function() {\n  let ret = false;\n\n  Util.tryCatch(\n    () => window,\n    w => (Util.isObject(w) ? (ret = true) : undefined),\n    () => {}\n  );\n  Util.tryCatch(\n    () => document,\n    d => (d == window.document && Util.isObject(d) ? (ret = true) : undefined),\n    () => {}\n  );\n  return ret;\n  //return !!(globalThis.window && globalThis.window.document);\n};\n\nUtil.waitFor = async function waitFor(msecs) {\n  if(!globalThis.setTimeout) {\n    await import('os').then(({ setTimeout, clearTimeout, setInterval, clearInterval }) => {\n      //console.log('', { setTimeout, clearTimeout, setInterval, clearInterval });\n      Object.assign(globalThis, {\n        setTimeout,\n        clearTimeout,\n        setInterval,\n        clearInterval\n      });\n    });\n  }\n  if(msecs <= 0) return;\n\n  let promise, clear, timerId;\n  promise = new Promise(async (resolve, reject) => {\n    timerId = setTimeout(() => resolve(), msecs);\n    clear = () => {\n      clearTimeout(timerId);\n      reject();\n    };\n  });\n  promise.clear = clear;\n  return promise;\n};\n\nUtil.timeout = async (msecs, promises, promiseClass = Promise) => await promiseClass.race([Util.waitFor(msecs)].concat(Array.isArray(promises) ? promises : [promises]));\nUtil.isServer = function() {\n  return !Util.isBrowser();\n};\nUtil.isMobile = function() {\n  return true;\n};\nUtil.uniquePred = (cmp = null) => (typeof cmp == 'function' ? (el, i, arr) => arr.findIndex(item => cmp(el, item)) == i : (el, i, arr) => arr.indexOf(el) == i);\n\nUtil.unique = (arr, cmp) => arr.filter(Util.uniquePred(cmp));\nUtil.allEqual = (arr, cmp = (a, b) => a == b) => arr.every((e, i, a) => cmp(e, a[0]));\n\nUtil.zip = a => a.reduce((a, b) => (a.length > b.length ? a : b), []).map((_, i) => a.map(arr => arr[i]));\n\nUtil.histogram = (...args) => {\n  let arr = args.shift();\n  const t = typeof args[0] == 'function' ? args.shift() : (k, v) => k;\n  let [out = false ? {} : new Map(), initVal = () => 0 /* new Set()*/, setVal = v => v] = args;\n\n  const set = /*Util.isObject(out) && typeof out.set == 'function' ? (k, v) => out.set(k, v) :*/ Util.setter(out);\n  const get = Util.getOrCreate(out, initVal, set);\n  let ctor = Object.getPrototypeOf(out) !== Object.prototype ? out.constructor : null;\n  let tmp;\n\n  if(Util.isObject(arr) && !Array.isArray(arr) && typeof arr.entries == 'function') arr = arr.entries();\n  arr = [...arr];\n  let entries = arr.map((it, i) => [i, it]);\n  let x = {};\n  let iv = initVal();\n  const add = Util.adder(iv);\n  const upd = Util.updater(out, get, set);\n\n  let r = arr.map((item, i) => {\n    let arg;\n    let key;\n    tmp = t(item, i);\n    if(tmp) {\n      key = tmp;\n      if(Array.isArray(tmp) && tmp.length >= 2) [key, arg] = tmp.slice(-2);\n      else arg = tmp;\n    }\n    [key, arg] = [key].concat(setVal(arg, i)).slice(-2);\n    return [\n      key,\n      upd(key, (entry, idx, key) => {\n        return add(entry, typeof entry == 'number' ? 1 : item);\n      })\n    ];\n  });\n  return out;\n  //console.debug('r:', r);\n  if(ctor) {\n    let entries = r;\n    let keys = r.map(([k, v]) => k);\n    entries = [...entries].sort((a, b) => b[1] - a[1]);\n    let tmp = new ctor(entries);\n    r = tmp;\n  }\n  return r;\n};\nUtil.concat = function* (...args) {\n  for(let arg of args) {\n    if(Util.isGenerator(arg)) {\n      console.error('isGenerator:', arg);\n      yield* arg;\n    } else {\n      /* if(Array.isArray(arg))*/\n      for(let item of arg) yield item;\n    }\n\n    /*   else  else {\n      throw new Error(\"No such arg type:\"+typeof(arg));\n    }*/\n  }\n};\nUtil.distinct = function(arr) {\n  return Array.prototype.filter.call(arr, (value, index, me) => me.indexOf(value) === index);\n};\nUtil.rangeMinMax = function(arr, field) {\n  const numbers = [...arr].map(obj => obj[field]);\n  return [Math.min(...numbers), Math.max(...numbers)];\n};\n\nUtil.remap = (...args) => {\n  const getR = () => (Array.isArray(args[0]) ? args.shift() : args.splice(0, 2));\n  const _from = getR(),\n    to = getR();\n\n  const f = [to[1] - to[0], _from[1] - _from[0]];\n  const factor = f[0] / f[1];\n\n  const r = val => (val - _from[0]) * factor + to[0];\n\n  return r;\n};\nUtil.mergeLists = function(arr1, arr2, key = 'id') {\n  let hash = {};\n\n  for(let obj of arr1) hash[obj[key]] = obj;\n  for(let obj of arr2) hash[obj[key]] = obj;\n  return Object.values(hash);\n\n  /* let hash = arr1.reduce((acc, it) => Object.assign({ [it[key]]: it }, acc), {});\n  hash = arr2.reduce((acc, it) => Object.assign({ [it[key]]: it }, acc), {});\n  let ret = [];\n  for(let k in hash) {\n    if(hash[k][key]) ret.push(hash[k]);\n  }\n  return ret;*/\n};\n\nUtil.foreach = function(o, fn) {\n  for(let [k, v] of Util.entries(o)) {\n    if(fn(v, k, o) === false) break;\n  }\n};\nUtil.all = function(obj, pred) {\n  for(let k in obj) if(!pred(obj[k])) return false;\n  return true;\n};\nUtil.isGenerator = function(fn) {\n  return (typeof fn == 'function' && /^[^(]*\\*/.test(fn.toString())) || (['function', 'object'].indexOf(typeof fn) != -1 && fn.next !== undefined);\n};\nUtil.isIterator = obj => Util.isObject(obj) && typeof obj.next == 'function';\n\nUtil.isIterable = obj => {\n  try {\n    for(let item of obj) return true;\n  } catch(err) {}\n  return false;\n};\nUtil.isNativeFunction = Util.tryFunction(x => typeof x == 'function' && /^[^\\n]*\\[(native\\ code|[a-z\\ ]*)\\]/.test(x + ''));\n\nUtil.isConstructor = x => {\n  if(x !== undefined) {\n    let ret,\n      members = [];\n    const handler = {\n      construct(target, args) {\n        return Object.create(target.prototype);\n      }\n    };\n    try {\n      ret = new new Proxy(x, handler)();\n    } catch(e) {\n      ret = false;\n    }\n    let proto = (x && x.prototype) || Object.getPrototypeOf(ret);\n    members = Util.getMemberNames(proto).filter(m => m !== 'constructor');\n    //console.log('members:', !!ret, members, Util.fnName(x));\n    return !!ret && members.length > 0;\n  }\n};\n\nUtil.filter = function(a, pred) {\n  if(typeof pred != 'function') pred = Util.predicate(pred);\n  if(Array.isArray(a)) return a.filter(pred);\n  /*return (function* () {\n      for(let [k, v] of a.entries()) if(pred(v, k, a)) yield v;\n    })();*/\n\n  if(Util.isGenerator(a))\n    return (function* () {\n      for(let item of a) if(pred(item)) yield item;\n    })();\n  let isa = Array.isArray(a);\n  let ret = {};\n  let fn = (k, v) => (ret[k] = v);\n  for(let [k, v] of Util.entries(a)) if(pred(v, k, a)) fn(k, v);\n  return Object.setPrototypeOf(ret, Object.getPrototypeOf(a));\n};\nUtil.reduce = (obj, fn, accu) => {\n  if(Util.isGenerator(obj)) {\n    let i = 0;\n    for(let item of obj) accu = fn(accu, item, i++, obj);\n    return accu;\n  }\n  for(let key in obj) accu = fn(accu, obj[key], key, obj);\n  return accu;\n};\nUtil.mapFunctional = fn =>\n  function* (arg) {\n    for(let item of arg) yield fn(item);\n  };\nUtil.map = (...args) => {\n  let [obj, fn] = args;\n  let ret = a => a;\n\n  if(Util.isIterator(obj)) {\n    return ret(function* () {\n      let i = 0;\n      for(let item of obj) yield fn(item, i++, obj);\n    })();\n  }\n  if(typeof obj == 'function') return Util.mapFunctional(...args);\n\n  if(typeof obj.map == 'function') return obj.map(fn);\n\n  if(typeof obj.entries == 'function') {\n    const ctor = obj.constructor;\n    obj = obj.entries();\n    ret = a => new ctor([...a]);\n    //    ret = a => new ctor(a);\n  }\n\n  /*console.log(\"obj\",(obj));\nconsole.log(\"isGenerator\",Util.isGenerator(obj));*/\n\n  if(Util.isGenerator(obj))\n    return ret(\n      (function* () {\n        let i = 0;\n        for(let item of obj) yield fn(item, i++, obj);\n      })()\n    );\n  //  if(typeof fn != 'function') return Util.toMap(...arguments);\n\n  ret = {};\n  for(let key in obj) {\n    if(obj.hasOwnProperty(key)) {\n      let item = fn(key, obj[key], obj);\n      if(item) ret[item[0]] = item[1];\n    }\n  }\n  return ret; //Object.setPrototypeOf(ret,Object.getPrototypeOf(obj));\n};\n\n/*Util.indexedMap = (arr, fn = arg => arg.name) => {\n  return new Proxy(arr, {\n    get(target, prop, receiver) {\n      let idx = arr.findIndex(item => fn(item) == 'prop');\n      if(idx != -1)\n        prop = idx;\n\n      return Reflect.get(arr, idx, receiver);\n    }\n  });\n};*/\n\nUtil.entriesToObj = function(arr) {\n  return [...arr].reduce((acc, item) => {\n    const k = item[0];\n    const v = item[1];\n    acc[k] = v;\n    return acc;\n  }, {});\n};\nUtil.isDate = function(d) {\n  return d instanceof Date || (typeof d == 'string' && /[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]/.test(d));\n};\nUtil.parseDate = function(d) {\n  if(Util.isDate(d)) {\n    d = new Date(d);\n  }\n  return d;\n  //return /^[0-9]+$/.test(d) ? Util.fromUnixTime(d) : new Date(d);\n};\nUtil.isoDate = function(date) {\n  try {\n    if(typeof date == 'number') date = new Date(date);\n    const minOffset = date.getTimezoneOffset();\n    const milliseconds = date.valueOf() - minOffset * 60 * 1000;\n    date = new Date(milliseconds);\n    return date.toISOString().replace(/T.*/, '');\n  } catch(err) {}\n  return null;\n};\nUtil.toUnixTime = function(dateObj, utc = false) {\n  if(!(dateObj instanceof Date)) dateObj = new Date(dateObj);\n  let epoch = Math.floor(dateObj.getTime() / 1000);\n  if(utc) epoch += dateObj.getTimezoneOffset() * 60;\n  return epoch;\n};\nUtil.unixTime = function(utc = false) {\n  return Util.toUnixTime(new Date(), utc);\n};\nUtil.fromUnixTime = function(epoch, utc = false) {\n  let t = parseInt(epoch);\n  let d = new Date(0);\n  utc ? d.setUTCSeconds(t) : d.setSeconds(t);\n  return d;\n};\nUtil.formatTime = function(date = new Date(), format = 'HH:MM:SS') {\n  let n;\n  let out = '';\n  if(typeof date == 'number') date = new Date(date);\n  for(let i = 0; i < format.length; i += n) {\n    n = 1;\n    while(format[i] == format[i + n]) n++;\n    const fmt = format.substring(i, i + n);\n    let num = fmt;\n    if(fmt.startsWith('H')) num = `0${date.getHours()}`.substring(0, n);\n    else if(fmt.startsWith('M')) num = `0${date.getMinutes()}`.substring(0, n);\n    else if(fmt.startsWith('S')) num = `0${date.getSeconds()}`.substring(0, n);\n    out += num;\n  }\n  return out;\n};\nUtil.leapYear = function(year) {\n  if(year % 400 == 0) return true;\n  if(year % 100 == 0) return false;\n  if(year % 4 == 0) return true;\n  return false;\n};\nUtil.timeSpan = function(s) {\n  const seconds = s % 60;\n  s = Math.floor(s / 60);\n  const minutes = s % 60;\n  s = Math.floor(s / 60);\n  const hours = s % 24;\n  s = Math.floor(s / 24);\n  const days = s % 7;\n  s = Math.floor(s / 7);\n  const weeks = s;\n  let ret = '';\n  ret = `${('0' + hours).substring(0, 2)}:${('0' + minutes).substring(0, 2)}:${('0' + seconds).substring(0, 2)}`;\n  if(days) ret = `${days} days ${ret}`;\n  if(weeks) ret = `${weeks} weeks ${ret}`;\n  return ret;\n};\nUtil.rng = Math.random;\nUtil.randFloat = function(min, max, rnd = Util.rng) {\n  return rnd() * (max - min) + min;\n};\nUtil.randInt = (...args) => {\n  let range = args.splice(0, 2);\n  let rnd = args.shift() || Util.rng;\n  if(range.length < 2) range.unshift(0);\n  return Math.round(Util.randFloat(...range, rnd));\n};\nUtil.randStr = (len, charset, rnd = Util.rng) => {\n  let o = '';\n  if(!charset) charset = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\n  while(--len >= 0) {\n    o += charset[Math.round(rnd() * (charset.length - 1))];\n  }\n  return o;\n};\n\nUtil.hex = function(num, numDigits) {\n  let v = typeof num == 'number' ? num : parseInt(num);\n  let s = v.toString(16);\n  numDigits = numDigits || Math.floor((s.length + 1) / 2) * 2;\n  return ('0'.repeat(numDigits) + s).slice(-numDigits);\n};\nUtil.numberParts = (num, base) => {\n  let exp = 0;\n  let sgn = 0;\n  if(num === 0) return { sign: 0, mantissa: 0, exponent: 0 };\n  if(num < 0) (sgn = 1), (num = -num);\n  while(num > base) (num /= base), exp++;\n  while(num < 1) (num *= base), exp--;\n  return { sign: sgn, mantissa: num, exponent: exp };\n};\nUtil.roundDigits = precision => {\n  if(typeof precision == 'number') return -Math.log10(precision);\n\n  precision = precision + '';\n  let index = precision.indexOf('.');\n  let frac = index == -1 ? '' : precision.slice(index + 1);\n  return frac.length;\n\n  return -Util.clamp(-Infinity, 0, Math.floor(Math.log10(precision - Number.EPSILON)));\n};\n\nUtil.roundFunction = (prec, digits, type) => {\n  digits = digits || Util.roundDigits(prec);\n  type = type || 'round';\n\n  const fn = Math[type];\n  if(prec == 1) return fn;\n\n  return function(value) {\n    let ret = fn(value / prec) * prec;\n    if(typeof digits == 'number' && digits >= 1 && digits <= 100) ret = +ret.toFixed(digits);\n    return ret;\n  };\n};\n\nUtil.roundTo = function(value, prec, digits, type) {\n  if(!isFinite(value)) return value;\n  digits = digits || Util.roundDigits(prec);\n  type = type || 'round';\n  const fn = Math[type];\n  if(prec == 1) return fn(value);\n  let ret = prec > Number.EPSILON ? fn(value / prec) * prec : value;\n  if(typeof digits == 'number' && digits >= 1 && digits <= 100) ret = +ret.toFixed(digits);\n  //else ret = Math[type](ret);\n  return ret;\n};\n\nUtil.base64 = (() => {\n  const g = Util.getGlobalObject();\n\n  return {\n    encode: Util.tryFunction(\n      utf8 => g.btoa(g.unescape(g.encodeURIComponent(utf8))),\n      v => v,\n      utf8 => Buffer.from(utf8).toString('base64')\n    ),\n    decode: Util.tryFunction(\n      base64 => g.decodeURIComponent(g.escape(g.atob(base64))),\n      v => v,\n      string => Buffer.from(string, 'base64').toString('utf-8')\n    )\n  };\n})();\n\nUtil.formatRecord = function(obj) {\n  let ret = {};\n  for(let key in obj) {\n    let val = obj[key];\n    if(val instanceof Array) val = val.map(item => Util.formatRecord(item));\n    else if(/^-?[0-9]+$/.test(val)) val = parseInt(val);\n    else if(/^-?[.0-9]+$/.test(val)) val = parseFloat(val);\n    else if(val == 'true' || val == 'false') val = Boolean(val);\n    ret[key] = val;\n  }\n  return ret;\n};\nArray.isArray =\n  Array.isArray ||\n  function(obj) {\n    if(obj.constructor === Array) return true;\n    return (\n      (obj && !Util.isGetter(obj, 'length') && Util.isObject(obj) && 'length' in obj && !(obj instanceof String) && !(obj instanceof Function) && typeof obj == 'function') || obj instanceof Array\n    );\n  };\nArray.isArrayLike = obj => typeof obj == 'object' && obj !== null && 'length' in obj;\n\nUtil.equals = function(a, b) {\n  if(Array.isArray(a) && Array.isArray(b)) {\n    return a.length == b.length && a.every((e, i) => b[i] === e);\n  } else if(Util.isObject(a) && Util.isObject(b)) {\n    const size_a = Util.size(a);\n\n    if(size_a != Util.size(b)) return false;\n\n    for(let k in a) if(!Util.equals(a[k], b[k])) return false;\n\n    return true;\n  }\n  return a == b;\n};\n/*#define _GNU_SOURCE\n#include <ctype.h>\n#include <string.h>\n\nint\nstrverscmp(const char* a0, const char* b0) {\n  const unsigned char* a = (const void*)a0;\n  const unsigned char* b = (const void*)b0;\n  size_t i, dp, j;\n  int z = 1;\n  for(dp = i = 0; a[i] == b[i]; i++) {\n    int c = a[i];\n    if(!c)\n      return 0;\n    if(!isdigit(c))\n      dp = i + 1, z = 1;\n    else if(c != '0')\n      z = 0;\n  }\n  if(a[dp] != '0' && b[dp] != '0') {\n    for(j = i; isdigit(a[j]); j++)\n      if(!isdigit(b[j]))\n        return 1;\n    if(isdigit(b[j]))\n      return -1;\n  } else if(z && dp < i && (isdigit(a[i]) || isdigit(b[i]))) {\n    return (unsigned char)(a[i] - '0') - (unsigned char)(b[i] - '0');\n  }\n  return a[i] - b[i];\n}*/\nUtil.versionCompare = (a, b) => {\n  // console.log(\"Util.versionCompare\",{a,b});\n  if(typeof a != 'string') a = a + '';\n  if(typeof b != 'string') b = b + '';\n\n  let i,\n    dp,\n    j,\n    z = 1;\n  const isdigit = c => /^[0-9]$/.test(c);\n\n  for(dp = i = 0; a[i] == b[i]; i++) {\n    let c;\n    if(!(c = a[i])) return 0;\n    if(!isdigit(c)) (dp = i + 1), (z = 1);\n    else if(c != '0') z = 0;\n  }\n  if(a[dp] != '0' && b[dp] != '0') {\n    for(j = i; isdigit(a[j]); j++) if(!isdigit(b[j])) return 1;\n    if(isdigit(b[j])) return -1;\n  } else if(z && dp < i && (isdigit(a[i]) || isdigit(b[i]))) {\n    return a.codePointAt(i) - 0x30 - (b.codePointAt(i) - 0x30);\n  }\n\n  return a.codePointAt(i) - b.codePointAt(i);\n};\n\n/*\nUtil.isObject = function(obj) {\n  const type = typeof obj;\n  return type === 'function' || (type === 'object' && !!obj);\n};*/\n\nUtil.isGetter = (obj, propName) => {\n  while(obj) {\n    let desc = Object.getOwnPropertyDescriptor(obj, propName);\n    if(desc && 'get' in desc) return true;\n    obj = Object.getPrototypeOf(obj);\n  }\n  return false;\n};\nUtil.isBool = value => value === true || value === false;\nUtil.size = (...args) => {\n  function size(obj) {\n    if(Util.isObject(obj)) {\n      if(obj instanceof Map) return obj.size;\n      else if('length' in obj) return obj.length;\n      else return Object.keys(obj).length;\n    }\n  }\n  if(args.length == 0) return size;\n  return size(args[0]);\n};\nUtil.isMap = function(obj) {\n  return (obj && obj.get !== undefined && obj.keys !== undefined) || obj instanceof Map;\n};\nUtil.effectiveDeviceWidth = function() {\n  let deviceWidth = window.orientation == 0 ? window.screen.width : window.screen.height;\n  //iOS returns available pixels, Android returns pixels / pixel ratio\n  //http://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html\n  if(navigator.userAgent.indexOf('Android') >= 0 && window.devicePixelRatio) {\n    deviceWidth = deviceWidth / window.devicePixelRatio;\n  }\n  return deviceWidth;\n};\nUtil.getFormFields = function(initialState) {\n  return Util.mergeObjects([\n    initialState,\n    [...document.forms].reduce(\n      (acc, { elements }) => [...elements].reduce((acc2, { name, value }) => (name == '' || value == undefined || value == 'undefined' ? acc2 : Object.assign(acc2, { [name]: value })), acc),\n      {}\n    )\n  ]);\n};\nUtil.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key])) {\n  let args = objArr;\n  let obj = {};\n  for(let i = 0; i < args.length; i++) {\n    for(let key in args[i]) {\n      const newVal = predicate(obj, args[i], key);\n      if(newVal != undefined) obj[key] = newVal;\n    }\n  }\n  return obj;\n};\nUtil.getUserAgent = function(headers = req.headers) {\n  const agent = useragent.parse(headers['user-agent']);\n  return agent;\n};\nUtil.factor = function(start, end) {\n  let f = 1;\n  for(let i = start; i <= end; i++) {\n    f = f * i;\n  }\n  return f;\n};\nUtil.factorial = function(n) {\n  return Util.factor(1, n);\n};\nUtil.increment = function(obj, key) {\n  if(obj[key] >= 1) obj[key] == 0;\n  obj[key]++;\n  return obj[key];\n};\nUtil.counter = function() {\n  let i = 0;\n  let self = function() {\n    return i++;\n  };\n  return self;\n};\nUtil.filterKeys = function(obj, pred = k => true) {\n  let ret = {};\n  if(pred instanceof RegExp) {\n    let re = pred;\n    pred = str => re.test(str);\n  } else if(Array.isArray(pred)) {\n    let a = pred;\n    pred = str => a.indexOf(str) != -1;\n  }\n  for(let key in obj) if(pred(key, obj[key], obj)) ret[key] = obj[key];\n  //Object.setPrototypeOf(ret, Object.getPrototypeOf(obj));\n  return ret;\n};\nUtil.filterMembers = function(obj, fn) {\n  const pred = (k, v, o) => fn(v, k, o);\n  return Util.filterKeys(obj, pred);\n};\nUtil.filterOutMembers = function(obj, fn) {\n  const pred = (v, k, o) => !fn(v, k, o);\n  return Util.filterMembers(obj, pred);\n};\nUtil.dumpMembers = obj => Util.filterOutMembers(obj, Util.isFunction);\n\nUtil.filterOutKeys = function(obj, arr) {\n  if(typeof obj != 'object') return obj;\n  const pred =\n    typeof arr == 'function' ? (v, k, o) => arr(k, v, o) : arr instanceof RegExp ? (k, v) => arr.test(k) /*|| arr.test(v)*/ : Array.isArray(arr) ? key => arr.indexOf(key) != -1 : () => ({});\n  return Util.filterOutMembers(obj, (v, k, o) => pred(k, v, o));\n};\nUtil.removeKeys = function(obj, arr) {\n  if(typeof obj != 'object') return obj;\n  const pred = typeof arr == 'function' ? (v, k, o) => arr(k, v, o) : arr instanceof RegExp ? (k, v) => arr.test(k) /*|| arr.test(v)*/ : key => arr.indexOf(key) != -1;\n  for(let key in obj) {\n    if(pred(key, obj[key], obj)) delete obj[key];\n  }\n};\nUtil.getKeys = function(obj, arr) {\n  let ret = {};\n  for(let key of arr) ret[key] = obj[key];\n\n  return ret;\n};\nUtil.numbersConvert = function(str) {\n  return str\n    .split('')\n    .map((ch, i) => (new RegExp('[ :,./]').test(ch) ? ch : String.fromCharCode((str.charCodeAt(i) & 0x0f) + 0x30)))\n    .join('');\n};\nUtil.entries = function(arg) {\n  if(Array.isArray(arg) || Util.isObject(arg)) {\n    if(typeof arg.entries == 'function') return arg.entries();\n    else if(Util.isIterable(arg))\n      return (function* () {\n        for(let key in arg) yield [key, arg[key]];\n      })();\n    return Object.entries(arg);\n  }\n};\nUtil.keys = function(arg) {\n  let ret;\n  if(Util.isObject(arg)) {\n    ret =\n      typeof arg.keys == 'function'\n        ? arg.keys\n        : function* () {\n            for(let key in this) yield key;\n          };\n  }\n  if(ret) return ret.call(arg);\n};\nUtil.values = function(arg) {\n  let ret;\n  if(Util.isObject(arg)) {\n    ret =\n      typeof arg.values == 'function'\n        ? arg.values\n        : function* () {\n            for(let key in arg) yield arg[key];\n          };\n  }\n  if(ret) return ret.call(arg);\n};\nUtil.removeEqual = function(a, b) {\n  let c = {};\n  for(let key of Util.keys(a)) {\n    if(b[key] === a[key]) continue;\n    //console.log(`removeEqual '${a[key]}' === '${b[key]}'`);\n    c[key] = a[key];\n  }\n  //console.log(`removeEqual`,c);\n\n  return c;\n};\nUtil.clear = obj => (typeof obj.splice == 'function' ? obj.splice(0, obj.length) : obj.clear());\n\nUtil.remove = (arr, item) => Util.removeIf(arr, (other, i, arr) => item === other);\nUtil.removeIf = function(arr, pred) {\n  let count = 0;\n  if(Util.isObject(arr) && typeof arr.splice == 'function') {\n    let idx;\n    for(count = 0; (idx = arr.findIndex(pred)) != -1; count++) arr.splice(idx, idx + 1);\n  } else {\n    for(let [key, value] of arr) {\n      if(pred(value, key, arr)) {\n        arr.delete(key);\n        count++;\n      }\n    }\n  }\n  return count;\n};\nUtil.traverse = function(o, fn) {\n  if(typeof fn == 'function')\n    return Util.foreach(o, (v, k, a) => {\n      fn(v, k, a);\n      if(typeof v === 'object') Util.traverse(v, fn);\n    });\n  function* walker(o, depth = 0) {\n    for(let [k, v] of Util.entries(o)) {\n      yield [v, k, o, depth];\n      if(typeof v == 'object' && v !== null) yield* walker(v, depth + 1);\n    }\n  }\n  return walker(o);\n};\nUtil.traverseWithPath = function(o, rootPath = []) {\n  for(let key of rootPath) o = o[key];\n\n  function* walker(o, path) {\n    for(let [k, v] of Util.entries(o)) {\n      let p = [...path, k];\n      yield [v, k, o, p];\n      if(typeof v == 'object' && v !== null) yield* walker(v, p);\n    }\n  }\n\n  return walker(o, []);\n};\nUtil.indexByPath = function(o, p) {\n  for(let key of p) o = o[key];\n  return o;\n};\n\nUtil.pushUnique = (arr, ...args) => args.reduce((acc, item) => (arr.indexOf(item) == -1 ? (arr.push(item), acc + 1) : acc), 0);\n\nUtil.insertSorted = function(arr, item, cmp = (a, b) => b - a) {\n  let i = 0,\n    len = arr.length;\n  while(i < len) {\n    if(cmp(item, arr[i]) >= 0) break;\n    i++;\n  }\n  i < len ? arr.splice(i, 0, item) : arr.push(item);\n  return i;\n};\nUtil.inserter = (dest, next = (k, v) => {}) => {\n  // if(typeof dest == 'function' && dest.map !== undefined) dest = dest.map;\n\n  const insert =\n    /*dest instanceof Map ||\n    dest instanceof WeakMap ||*/\n    typeof dest.set == 'function' && dest.set.length >= 2 ? (k, v) => dest.set(k, v) : Array.isArray(dest) ? (k, v) => dest.push([k, v]) : (k, v) => (dest[k] = v);\n  let fn;\n  fn = function(key, value) {\n    insert(key, value);\n    next(key, value);\n    return fn;\n  };\n  fn.dest = dest;\n  fn.insert = insert;\n  return fn;\n};\n\nUtil.keyIterator = obj => {\n  let it;\n  if(typeof obj.keys == 'function' && Util.isIterator((it = obj.keys()))) {\n    return it;\n  } else if(Array.isArray(obj)) {\n    return Array.prototype.keys.call(obj);\n  } else if('length' in obj) {\n    return Array.prototype[Symbol.iterator].call(obj);\n  }\n};\n\nUtil.entryIterator = obj => {\n  let it;\n  if(typeof obj.entries == 'function' && Util.isIterator((it = obj.entries()))) {\n    return it;\n  } else if(Array.isArray(obj)) {\n    return Array.prototype.entries.call(obj);\n  } else if('length' in obj) {\n    return (function* () {\n      for(let key of Array.prototype[Symbol.iterator].call(obj)) yield [key, obj[key]];\n    })();\n  }\n};\n\n/*Util.bitIterator = function BitIterator(source, inBits, outBits) {\n  const iterator = this instanceof BitIterator ? this : Object.create(BitIterator.prototype);\n\n  iterator.bits = [0];\n  iterator.size = 0;\n  iterator.next = function(bitsWanted = outBits) {\n    let output = { bits: [0], size: 0 };\n    for(;;) {\n      if(iterator.size == 0) fillBits(iterator);\n      //console.log(\"iterator.bits =\",iterator.bits, \" iterator.size =\",iterator.size);\n      moveBits(iterator, output, bitsWanted);\n      if(output.size == bitsWanted) break;\n    }\n    return output.bits;\n  };\n  function readBits(buffer, n) {\n    n = Math.min(buffer.size, n);\n    let size = 0,\n      bits = [];\n    while(n >= 16) {\n      bits.push(buffer.bits.shift());\n      buffer.size -= 16; n -= 16;\n      size += 16;\n    }\n\n    if(n > 0) {\n      const mask = (1 << n) - 1;\n      bits.push(buffer.bits & mask);\n      size += n;\n      buffer.bits >>= n;\n      buffer.size -= n;\n    }\n    return [bits, size];\n  }\n  const pad = '00000000000000000000000000000000';\n  function writeBits(buffer, value, size) {\n    buffer.bits = [...Util.partition((pad + value.toString(2)).slice(-32), 16)].map(n => parseInt(n, 2)).reverse();\n\n    buffer.size = size;\n    console.log(\"buffer.bits:\",buffer.bits,\"buffer.size:\",buffer.size);\n  }\n  function moveBits(input, output, len) {\n    let [bits, size] = readBits(input, len);\n    writeBits(output, bits, size);\n  }\n  function fillBits(buffer) {\n    const value = source();\n    writeBits(buffer, value, inBits);\n  }\n  return iterator;\n};\n*/\nUtil.mapAdapter = getSetFunction => {\n  let r = {\n    get(key) {\n      return getSetFunction(key);\n    },\n    set(key, value) {\n      getSetFunction(key, value);\n      return this;\n    }\n  };\n  let tmp = getSetFunction();\n  if(Util.isIterable(tmp) || Util.isPromise(tmp)) r.keys = () => getSetFunction();\n\n  if(getSetFunction[Symbol.iterator]) r.entries = getSetFunction[Symbol.iterator];\n  else {\n    let g = getSetFunction();\n    if(Util.isIterable(g) || Util.isGenerator(g)) r.entries = () => getSetFunction();\n  }\n\n  return Util.mapFunction(r);\n};\n\n/**\n * @param Array   forward\n * @param Array   backward\n *\n * component2path,  path2eagle  => component2eagle\n *  eagle2path, path2component =>\n */\nUtil.mapFunction = map => {\n  let fn;\n  fn = function(...args) {\n    const [key, value] = args;\n    switch (args.length) {\n      case 0:\n        return fn.keys();\n      case 1:\n        return fn.get(key);\n      case 2:\n        return fn.set(key, value);\n    }\n  };\n\n  fn.map = (m => {\n    while(Util.isFunction(m) && m.map !== undefined) m = m.map;\n    return m;\n  })(map);\n\n  if(map instanceof Map || (Util.isObject(map) && typeof map.get == 'function' && typeof map.set == 'function')) {\n    fn.set = (key, value) => (map.set(key, value), (k, v) => fn(k, v));\n    fn.get = key => map.get(key);\n  } else if(map instanceof Cache || (Util.isObject(map) && typeof map.match == 'function' && typeof map.put == 'function')) {\n    fn.set = (key, value) => (map.put(key, value), (k, v) => fn(k, v));\n    fn.get = key => map.match(key);\n  } else if(Util.isObject(map) && typeof map.getItem == 'function' && typeof map.setItem == 'function') {\n    fn.set = (key, value) => (map.setItem(key, value), (k, v) => fn(k, v));\n    fn.get = key => map.getItem(key);\n  } else {\n    fn.set = (key, value) => ((map[key] = value), (k, v) => fn(k, v));\n    fn.get = key => map[key];\n  }\n\n  fn.update = function(key, fn = (k, v) => v) {\n    let oldValue = this.get(key);\n    let newValue = fn(oldValue, key);\n    if(oldValue != newValue) {\n      if(newValue === undefined && typeof map.delete == 'function') map.delete(key);\n      else this.set(key, newValue);\n    }\n    return newValue;\n  };\n\n  if(typeof map.entries == 'function') {\n    fn.entries = function* () {\n      for(let [key, value] of map.entries()) yield [key, value];\n    };\n    fn.values = function* () {\n      for(let [key, value] of map.entries()) yield value;\n    };\n    fn.keys = function* () {\n      for(let [key, value] of map.entries()) yield key;\n    };\n    fn[Symbol.iterator] = fn.entries;\n    fn[Util.inspectSymbol] = function() {\n      return new Map(this.map(([key, value]) => [Array.isArray(key) ? key.join('.') : key, value]));\n    };\n  } else if(typeof map.keys == 'function') {\n    if(Util.isAsync(map.keys) || Util.isPromise(map.keys())) {\n      fn.keys = async () => [...(await map.keys())];\n\n      fn.entries = async () => {\n        let r = [];\n        for(let key of await fn.keys()) r.push([key, await fn.get(key)]);\n        return r;\n      };\n      fn.values = async () => {\n        let r = [];\n        for(let key of await fn.keys()) r.push(await fn.get(key));\n        return r;\n      };\n    } else {\n      fn.keys = function* () {\n        for(let key of map.keys()) yield key;\n      };\n\n      fn.entries = function* () {\n        for(let key of fn.keys()) yield [key, fn(key)];\n      };\n      fn.values = function* () {\n        for(let key of fn.keys()) yield fn(key);\n      };\n    }\n  }\n\n  if(typeof fn.entries == 'function') {\n    fn.filter = function(pred) {\n      return Util.mapFunction(\n        new Map(\n          (function* () {\n            let i = 0;\n            for(let [key, value] of fn.entries()) if(pred([key, value], i++)) yield [key, value];\n          })()\n        )\n      );\n    };\n    fn.map = function(t) {\n      return Util.mapFunction(\n        new Map(\n          (function* () {\n            let i = 0;\n\n            for(let [key, value] of fn.entries()) yield t([key, value], i++);\n          })()\n        )\n      );\n    };\n    fn.forEach = function(fn) {\n      let i = 0;\n\n      for(let [key, value] of this.entries()) fn([key, value], i++);\n    };\n  }\n  if(typeof map.delete == 'function') fn.delete = key => map.delete(key);\n\n  if(typeof map.has == 'function') fn.has = key => map.has(key);\n  return fn;\n};\n\nUtil.mapWrapper = (map, toKey = key => key, fromKey = key => key) => {\n  let fn = Util.mapFunction(map);\n  fn.set = (key, value) => (map.set(toKey(key), value), (k, v) => fn(k, v));\n  fn.get = key => map.get(toKey(key));\n  if(typeof map.keys == 'function') fn.keys = () => [...map.keys()].map(fromKey);\n  if(typeof map.entries == 'function')\n    fn.entries = function* () {\n      for(let [key, value] of map.entries()) yield [fromKey(key), value];\n    };\n  if(typeof map.values == 'function')\n    fn.values = function* () {\n      for(let value of map.values()) yield value;\n    };\n  if(typeof map.has == 'function') fn.has = key => map.has(toKey(key));\n  if(typeof map.delete == 'function') fn.delete = key => map.delete(toKey(key));\n\n  fn.map = (m => {\n    while(Util.isFunction(m) && m.map !== undefined) m = m.map;\n    return m;\n  })(map);\n\n  return fn;\n};\n\n/**\n * @param Array   forward\n * @param Array   backward\n *\n * component2path,  path2eagle  => component2eagle\n *  eagle2path, path2component =>\n */\nUtil.mapCombinator = (forward, backward) => {\n  let fn;\n  fn = function(key, value) {\n    if(value === undefined) return fn.get(key);\n    return fn.set(key, value);\n  };\n\n  /* prettier-ignore */\n  fn.get=  forward.reduceRight((a,m) => makeGetter(m, key => a(key)), a => a);\n  return fn;\n  function makeGetter(map, next = a => a) {\n    return key => (false && console.log('getter', { map, key }), next(map.get(key)));\n  }\n};\n\nUtil.predicate = (fn_or_regex, pred) => {\n  let fn = fn_or_regex;\n  if(typeof fn_or_regex == 'string') fn_or_regex = new RegExp('^' + fn_or_regex + '$');\n  if(fn_or_regex instanceof RegExp) {\n    fn = arg => fn_or_regex.test(arg + '');\n    fn.valueOf = function() {\n      return fn_or_regex;\n    };\n  }\n  if(typeof pred == 'function') return arg => pred(arg, fn);\n  return fn;\n};\nUtil.some = predicates => {\n  predicates = predicates.map(Util.predicate);\n  return value => predicates.some(pred => pred(value));\n};\nUtil.every = predicates => {\n  predicates = predicates.map(Util.predicate);\n  return value => predicates.every(pred => pred(value));\n};\n\nUtil.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0) {\n  let names = [];\n  let pred = Util.predicate(predicate);\n  const proto = Object.getPrototypeOf(obj);\n\n  /* for(let name in obj) if(pred(name, depth, obj)) yield name;\n   */\n  let descriptors = Object.getOwnPropertyDescriptors(obj);\n  for(let name in descriptors) {\n    const { value, get, set, enumerable, configurable, writable } = descriptors[name];\n\n    if(typeof get == 'function') continue;\n\n    if(pred(name, depth, obj)) yield name;\n  }\n  //for(let symbol of Object.getOwnPropertySymbols(obj)) if(pred(symbol, depth, obj)) yield symbol;\n  if(proto) yield* Util.iterateMembers(proto, predicate, depth + 1);\n};\n\nUtil.and =\n  (...predicates) =>\n  (...args) =>\n    predicates.every(pred => pred(...args));\nUtil.or =\n  (...predicates) =>\n  (...args) =>\n    predicates.some(pred => pred(...args));\n\nUtil.members = Util.curry((pred, obj) => Util.unique([...Util.iterateMembers(obj, Util.tryPredicate(pred))]));\n\nUtil.memberNameFilter = (depth = 1, start = 0) =>\n  Util.and(\n    (m, l, o) => start <= l && l < depth + start,\n    (m, l, o) => typeof m != 'string' || ['caller', 'callee', 'constructor', 'arguments'].indexOf(m) == -1,\n    (name, depth, obj, proto) => obj != Object.prototype\n  );\n\nUtil.getMemberNames = (obj, ...args) => {\n  let filters = [];\n  let depth = 1,\n    start = 0;\n  while(args.length > 0) {\n    if(args.length >= 2 && typeof args[0] == 'number') {\n      const n = args.splice(0, 2);\n      depth = n[0];\n      start = n[1];\n      continue;\n    }\n    filters.push(args.shift());\n  }\n  filters.unshift(Util.memberNameFilter(depth, start));\n  return Util.members(Util.and(...filters))(obj);\n};\nUtil.getMemberEntries = (obj, ...args) => Util.getMemberNames(obj, ...args).map(name => [name, obj[name]]);\n\nUtil.objectReducer =\n  (filterFn, accFn = (a, m, o) => ({ ...a, [m]: o[m] }), accu = {}) =>\n  (obj, ...args) =>\n    Util.members(filterFn(...args), obj).reduce(\n      Util.tryFunction(\n        (a, m) => accFn(a, m, obj),\n        (r, a, m) => r,\n        (r, a) => a\n      ),\n      accu\n    );\nUtil.incrementer = (incFn = (c, n, self) => (self.count = c + n)) => {\n  let self, incr;\n  if(typeof incFn == 'number') {\n    incr = incFn;\n    incFn = (c, n, self) => (self.count = +c + +n * incr);\n  }\n  const inc = (i, n = 1) => self.incFn.call(self, i || 0, n, self);\n  self = function Count(n = 1) {\n    self.count = inc(self.count, n, self);\n    return self;\n  };\n  self.incFn = incFn;\n  self.valueOf = function() {\n    return this.count;\n  };\n  return self;\n};\n\nUtil.mapReducer = (setFn, filterFn = (key, value) => true, mapObj = new Map()) => {\n  setFn = setFn || Util.setter(mapObj);\n  let fn;\n  let next = Util.tryFunction(((acc, mem, idx) => (filterFn(mem, idx) ? (setFn(idx, mem), acc) : null), r => r, () => mapObj));\n  fn = function ReduceIntoMap(arg, acc = mapObj) {\n    if(Util.isObject(arg) && typeof arg.reduce == 'function') return arg.reduce((acc, arg) => (Array.isArray(arg) ? arg : Util.members(arg)).reduce(reducer, acc), self.map);\n    let c = Util.counter();\n    for(let mem of arg) acc = next(acc, mem, c());\n    return acc;\n  };\n  return Object.assign(fn, { setFn, filterFn, mapObj, next });\n};\n\nUtil.getMembers = Util.objectReducer(Util.memberNameFilter);\n\nUtil.getMemberDescriptors = Util.objectReducer(Util.memberNameFilter, (a, m, o) => ({\n  ...a,\n  [m]: Object.getOwnPropertyDescriptor(o, m)\n}));\n\nUtil.methodNameFilter = (depth = 1, start = 0) =>\n  Util.and(\n    (m, l, o) =>\n      Util.tryCatch(\n        () => typeof o[m] == 'function',\n        b => b,\n        () => false\n      ),\n    Util.memberNameFilter(depth, start)\n  );\n\nUtil.getMethodNames = (obj, depth = 1, start = 0) => Util.members(Util.methodNameFilter(depth, start))(obj);\n\nUtil.getMethods = Util.objectReducer(Util.methodNameFilter);\n\nUtil.getMethodDescriptors = Util.objectReducer(Util.methodNameFilter, (a, m, o) => ({\n  ...a,\n  [m]: Object.getOwnPropertyDescriptor(o, m)\n}));\n\nUtil.inherit = (dst, src, depth = 1) => {\n  for(let k of Util.getMethodNames(src, depth)) dst[k] = src[k];\n  return dst;\n};\nUtil.inherits =\n  typeof Object.create === 'function'\n    ? function inherits(ctor, superCtor) {\n        if(superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      } // old school shim for old browsers\n    : function inherits(ctor, superCtor) {\n        if(superCtor) {\n          ctor.super_ = superCtor;\n          let TempCtor = function() {};\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n//Util.bindMethods = (obj, methods, dest = {}) => Util.bindMethodsTo(obj, methods ?? obj, dest);\nUtil.bindMethods = (obj, methods, dest) => {\n  dest ??= obj;\n  if(Array.isArray(methods)) {\n    for(let name of methods) if(typeof obj[name] == 'function') dest[name] = obj[name].bind(obj);\n    return dest;\n  }\n  let names = Util.getMethodNames(methods);\n  for(let name of names) if(typeof methods[name] == 'function') dest[name] = methods[name].bind(obj);\n  return dest;\n};\nUtil.getConstructor = obj => obj.constructor || Object.getPrototypeOf(obj).constructor;\nUtil.getPrototypeChain = function(obj, fn = p => p) {\n  let ret = [];\n  let proto;\n  do {\n    proto = obj.__proto__ || Object.getPrototypeOf(obj);\n    ret.push(fn(proto, obj));\n    if(proto === Object.prototype || proto.constructor === Object) break;\n    obj = proto;\n  } while(obj);\n\n  return ret;\n};\nUtil.getObjectChain = (obj, fn = p => p) => [fn(obj)].concat(Util.getPrototypeChain(obj, fn));\n\nUtil.getPropertyDescriptors = function(obj) {\n  return Util.getObjectChain(obj, p => Object.getOwnPropertyDescriptors(p));\n};\n\nUtil.getConstructorChain = (ctor, fn = (c, p) => c) => Util.getPrototypeChain(ctor, (p, o) => fn(o, p));\n\nUtil.weakAssign = function(...args) {\n  let obj = args.shift();\n  args.forEach(other => {\n    for(let key in other) {\n      if(obj[key] === undefined && other[key] !== undefined) obj[key] = other[key];\n    }\n  });\n  return obj;\n};\n\n/*Util.getErrorStack = function(position = 2) {\n  let stack=[];\n  let error;\n    Error.stackTraceLimit = 100;\n     const oldPrepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = (_, stack) => stack;\n try {\n\n  throw new Error('my error');\n\n } catch(e) {\n  console.log(\"e.stack\",[...e.stack]);\n  stack = e.stack;\n }\n Error.prepareStackTrace = oldPrepareStackTrace;\n\n return stack;\n}*/\nUtil.exception = function Exception(...args) {\n  let e, stack;\n  let proto = Util.exception.prototype;\n\n  if(args[0] instanceof Error) {\n    let exc = args.shift();\n    const { message, stack: callerStack } = exc;\n    e = { message };\n    //   e.proto = Object.getPrototypeOf(exc);\n\n    if(callerStack) stack = callerStack;\n  } else {\n    const [message, callerStack] = args;\n    e = { message };\n    if(callerStack) stack = callerStack;\n  }\n  if(stack) e.stack = Util.stack(stack);\n\n  return Object.setPrototypeOf(e, proto);\n};\n\nUtil.define(\n  Util.exception.prototype,\n  {\n    toString(color = false) {\n      const { message, stack, proto } = this;\n      return `${Util.fnName((proto && proto.constructor) || this.constructor)}: ${message}\nStack:${Util.stack.prototype.toString.call(stack, color, stack.columnWidths)}`;\n    },\n    [Symbol.toStringTag]() {\n      return this.toString(false);\n    },\n    [Util.inspectSymbol]() {\n      return Util.exception.prototype.toString.call(this, true);\n    }\n  },\n  true\n);\nUtil.location = function Location(...args) {\n  console.log('Util.location(', ...args, ')');\n  let ret = this instanceof Util.location ? this : Object.setPrototypeOf({}, Util.location.prototype);\n  if(args.length == 3) {\n    const [fileName, lineNumber, columnNumber, functionName] = args;\n    Object.assign(ret, { fileName, lineNumber, columnNumber, functionName });\n  } else if(args.length == 1 && args[0].fileName !== undefined) {\n    const { fileName, lineNumber, columnNumber, functionName } = args.shift();\n    Object.assign(ret, { fileName, lineNumber, columnNumber, functionName });\n  }\n  if(Util.colorCtor) ret.colorCtor = Util.colorCtor;\n\n  return ret;\n};\n\n// prettier-ignore\nUtil.location.palettes = [[[128, 128, 0], [255, 0, 255], [0, 255, 255] ], [[9, 119, 18], [139, 0, 255], [0, 165, 255]]];\n\nUtil.define(Util.location.prototype, {\n  toString(color = false) {\n    let { fileName, lineNumber, columnNumber, functionName } = this;\n    console.log('this:', this, {\n      fileName,\n      lineNumber,\n      columnNumber,\n      functionName\n    });\n    fileName = fileName.replace(Util.makeURL({ location: '' }), '');\n    let text = /*color ? new this.colorCtor() : */ '';\n    const c = /*color ? (t, color) => text.write(t, color) :*/ t => (text += t);\n    const palette = Util.location.palettes[Util.isBrowser() ? 1 : 0];\n    if(functionName) c(functionName.replace(/\\s*\\[.*/g, '').replace(/^Function\\./, '') + ' ', palette[1]);\n\n    c(fileName, palette[0]);\n    c(':', palette[1]);\n    c(lineNumber, palette[2]);\n    c(':', palette[1]);\n    c(columnNumber, palette[2]);\n    return text;\n  },\n  [Symbol.toStringTag]() {\n    return Util.location.prototype.toString.call(this, false);\n  },\n  [Util.inspectSymbol]() {\n    return Util.location.prototype.toString.call(this, !Util.isBrowser());\n  },\n  getFileName() {\n    return this.fileName;\n  },\n  getLineNumber() {\n    return this.lineNumber;\n  },\n  getColumnNumber() {\n    return this.columnNumber;\n  }\n});\n\nUtil.stackFrame = function StackFrame(frame) {\n  //   console.debug('Util.stackFrame', frame, frame.getFunctionName, frame.getFileName);\n  ['methodName', 'functionName', 'fileName', 'lineNumber', 'columnNumber', 'typeName', 'thisObj'].forEach(prop => {\n    let fn = prop == 'thisObj' ? 'getThis' : 'get' + Util.ucfirst(prop);\n    if(frame[prop] === undefined && typeof frame[fn] == 'function') frame[prop] = frame[fn]();\n  });\n  if(Util.colorCtor) frame.colorCtor = Util.colorCtor;\n\n  return Object.setPrototypeOf(frame, Util.stackFrame.prototype);\n};\n\nUtil.define(Util.stackFrame, {\n  methodNames: [\n    'getThis',\n    'getTypeName',\n    'getFunction',\n    'getFunctionName',\n    'getMethodName',\n    'getFileName',\n    'getLineNumber',\n    'getColumnNumber',\n    'getEvalOrigin',\n    'isToplevel',\n    'isEval',\n    'isNative',\n    'isConstructor',\n    'isAsync',\n    'isPromiseAll',\n    'getPromiseIndex'\n  ]\n});\nUtil.memoizedProperties(Util.stackFrame, {\n  propertyMap() {\n    return this.methodNames.map(method => [method, Util.lcfirst(method.replace(/^get/, ''))]).map(([method, func]) => [method, func == 'this' ? 'thisObj' : func]);\n  }\n});\n\nUtil.define(\n  Util.stackFrame.prototype,\n  {\n    getFunction() {\n      if(this.isConstructor) return this.functionName + '.constructor';\n\n      return this.typeName ? `${this.typeName}.${this.methodName}` : this.functionName;\n    },\n    getMethodName() {\n      return this.methodName;\n    },\n    getFunctionName() {\n      return this.functionName;\n    },\n    getTypeName() {\n      return this.typeName;\n    },\n    getFileName() {\n      return this.fileName;\n    },\n    getLineNumber() {\n      return this.lineNumber;\n    },\n    getColumnNumber() {\n      return this.columnNumber;\n    }\n  },\n  true\n);\n\nUtil.define(\n  Util.stackFrame.prototype,\n  {\n    colorCtor: null,\n    get() {\n      const { fileName, columnNumber, lineNumber } = this;\n      return fileName ? `${fileName}:${lineNumber}:${columnNumber}` : null;\n    },\n    toString(color, opts = {}) {\n      const { columnWidths = [0, 0, 0, 0], stripUrl } = opts;\n\n      let text = color && this.colorCtor ? new this.colorCtor() : '';\n      const c = color && this.colorCtor ? (t, color) => text.write(t, color) : t => (text += t);\n      let fields = ['functionName', 'fileName', 'lineNumber', 'columnNumber'];\n      const colors = [\n        [0, 255, 0],\n        [255, 255, 0],\n        [0, 255, 255],\n        [0, 255, 255]\n      ];\n      let { functionName, methodName, typeName, fileName, lineNumber, columnNumber } = this;\n      //  console.log('toString:', { functionName, methodName, typeName, fileName, lineNumber, columnNumber });\n      if(stripUrl && typeof fileName == 'string') fileName = fileName.replace(typeof stripUrl == 'string' ? stripUrl : /.*:\\/\\/[^\\/]*\\//, '');\n      let colonList = [fileName, lineNumber, columnNumber]\n        .map(p => ('' + p == 'undefined' ? undefined : p))\n        .filter(p => p !== undefined && p != 'undefined' && ['number', 'string'].indexOf(typeof p) != -1)\n        .join(':');\n      let columns = [typeof this.getFunction == 'function' ? this.getFunction() : this.function, colonList];\n      columns = columns.map((f, i) => (f + '')[i >= 2 ? 'padStart' : 'padEnd'](columnWidths[i] || 0, ' '));\n      return columns.join(' ') + c('', 0);\n    },\n    getLocation() {\n      return new Util.location(this);\n    },\n    /* prettier-ignore */ get location() {\n      return this.getLocation();\n    },\n    [Symbol.toStringTag]() {\n      return this.toString(false);\n    },\n    [Util.inspectSymbol](...args) {\n      return Util.stackFrame.prototype.toString.call(this, true, this.columnWidths);\n    }\n  },\n  true\n);\nUtil.scriptName = () =>\n  Util.tryCatch(\n    () => Util.getArgs(),\n    args => args[0],\n    () => Util.getURL()\n  );\nUtil.getFunctionName = () => {\n  const frame = Util.getCallerStack(2)[0];\n  return frame.getFunctionName() || frame.getMethodName();\n};\nUtil.getFunctionArguments = fn => {\n  let head = (fn + '').replace(/(=>|{\\n).*/g, '').replace(/^function\\s*/, '');\n  let args = head.replace(/^\\((.*)\\)\\s*$/g, '$1').split(/,\\s*/g);\n  return args;\n};\n\nUtil.scriptDir = () =>\n  Util.tryCatch(\n    () => Util.scriptName(),\n    script => (script + '').replace(new RegExp('\\\\/[^/]*$', 'g'), ''),\n    () => Util.getURL()\n  );\nUtil.stack = function Stack(stack, offset) {\n  //console.log('Util.stack (1)', stack);\n\n  if(typeof stack == 'number') return Object.setPrototypeOf(new Array(stack), Util.stack.prototype);\n\n  if(Util.platform == 'quickjs') {\n    if(!stack) stack = getStack();\n    if(!(typeof stack == 'string')) stack = stack + '';\n  } else if(!stack) {\n    if(offset === undefined) offset = 1;\n    stack = getStack();\n    const { propertyMap } = Util.stackFrame;\n    //console.log('stack', stack + '');\n    stack = [...stack].map(frame =>\n      propertyMap\n        .filter(([m, p]) => typeof frame[m] == 'function' && frame[m]() !== undefined)\n        .reduce(\n          (acc, [method, property]) => ({\n            ...acc,\n            /* prettier-ignore */ get [property]() {\n              return frame[method]();\n            }\n          }),\n          {}\n        )\n    );\n\n    //console.debug('stack ctor:', [...stack]);\n    //console.debug('stack frame[0]:', [...stack][0]);\n  } else if(!(typeof stack == 'string')) stack = stackToString(stack, 0);\n  function getStack() {\n    let stack;\n    const oldPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = (_, stack) => stack;\n    Error.stackTraceLimit = Infinity;\n\n    stack = new Error().stack;\n    Error.prepareStackTrace = oldPrepareStackTrace;\n    return stack;\n  }\n\n  function stackToString(st, start = 0) {\n    if(Array.isArray(st)) {\n      st = [\n        ...(function* () {\n          for(let i = start; i < st.length; i++) yield st[i];\n        })()\n      ].join('\\n');\n    }\n    return st;\n  }\n\n  //console.log('stack String:', offset, typeof stack, stack);\n\n  if(typeof stack == 'number') {\n    throw new Error();\n  }\n  //console.debug('stack:', typeof stack, stack);\n\n  if(typeof stack == 'string') {\n    stack = stack.trim().split(lineSplit);\n    const re = new RegExp('.* at ([^ ][^ ]*) \\\\(([^)]*)\\\\)');\n    stack = stack.map(frame =>\n      typeof frame == 'string'\n        ? frame\n            .replace(/^\\s*at\\s+/, '')\n            .split(/[()]+/g)\n            .map(part => part.trim())\n        : frame\n    );\n    stack = stack.map(frame => (Array.isArray(frame) ? (frame.length < 2 ? ['', ...frame] : frame).slice(0, 2) : frame));\n    stack = stack.map(([func, file]) => [\n      func,\n      file\n        .split(/:/g)\n        .reverse()\n        .map(n => (!isNaN(+n) ? +n : n))\n    ]);\n    stack = stack.map(([func, file]) => [func, file.length >= 3 ? file : file.length >= 2 ? ['', ...file] : ['', '', ...file]]);\n    stack = stack.map(([func, [columnNumber, lineNumber, ...file]]) => ({\n      functionName: func.replace(/Function\\.Util/, 'Util'),\n      methodName: func.replace(/.*\\./, ''),\n      fileName: file.reverse().join(':'),\n      lineNumber,\n      columnNumber\n    }));\n    //    console.log('Util.stack (2)', Util.inspect(stack[0]  ));\n\n    stack = stack.map(({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) => ({\n      functionName: func,\n      methodName,\n      fileName: file.replace(/.*:\\/\\/[^\\/]*/g, ''),\n      lineNumber: Util.ifThenElse(\n        s => s != '',\n        s => +s,\n        () => undefined\n      )(line + file.replace(/.*[^0-9]([0-9]*)$/g, '$1')),\n      columnNumber: Util.ifThenElse(\n        s => s != '',\n        s => +s,\n        () => undefined\n      )(column)\n    }));\n  } else {\n    //console.log('stack:', stack[0]);\n    stack = stack.map(frame => new Util.stackFrame(frame)); //Util.getCallers(1, Number.MAX_SAFE_INTEGER, () => true, stack);\n  }\n  //  stack = stack.map(frame => Object.setPrototypeOf(frame, Util.stackFrame.prototype));\n  stack = stack.map(frame => new Util.stackFrame(frame));\n\n  if(offset > 0) stack = stack.slice(offset);\n  stack = Object.setPrototypeOf(stack, Util.stack.prototype);\n  //stack.forEach(frame => console.log(\"stack frame:\",frame));\n  //\n  return stack;\n};\n\nUtil.stack.prototype = Object.assign(Util.stack.prototype, Util.getMethods(new Array(), 1, 1));\nObject.defineProperty(Util.stack, Symbol.species, { get: () => Util.stack });\nObject.defineProperty(Util.stack.prototype, Symbol.species, {\n  get: () => Util.stack\n});\nObject.defineProperty(Util.stack.prototype, Symbol.iterator, {\n  *value() {\n    for(let i = 0; i < this.length; i++) yield this[i];\n  }\n});\n\nUtil.stack.prototype = Object.assign(Util.stack.prototype, {\n  toString(opts = {}) {\n    const { colors = false, stripUrl = Util.makeURL({ location: '/' }) } = opts;\n    const { columnWidths } = this;\n    let a = [];\n\n    for(let i = 0; i < this.length; i++)\n      a.push(\n        Util.stackFrame.prototype.toString.call(this[i], colors, {\n          columnWidths,\n          stripUrl\n        })\n      );\n    let s = a.join('\\n');\n    return s + '\\n';\n  },\n  [Symbol.toStringTag]() {\n    return Util.stack.prototype.toString.call(this);\n  },\n  [Util.inspectSymbol](...args) {\n    const { columnWidths } = this;\n    return '\\n' + this.map(f => f.toString(!Util.isBrowser(), { columnWidths })).join('\\n');\n  },\n  getFunctionName() {\n    return this.functionName;\n  },\n  getMethodName() {\n    return this.methodName;\n  },\n  getFileName() {\n    return this.fileName;\n  },\n  getLineNumber() {\n    return this.lineNumber;\n  }\n});\n\nObject.defineProperties(Util.stack.prototype, {\n  columnWidths: {\n    get() {\n      // console.log('this:', [...this]);\n      return this.reduce((a, f) => ['getFunction'].map((fn, i) => Math.max(a[i], ((typeof f[fn] == 'function' ? f[fn]() : '') + '').length)), [0, 0, 0, 0]);\n    }\n  }\n});\n\nUtil.getCallerStack = function(position = 2, limit = 1000, stack) {\n  Error.stackTraceLimit = position + limit;\n  if(position >= Error.stackTraceLimit) {\n    throw new TypeError(`getCallerFile(position) requires position be less then Error.stackTraceLimit but position was: '${position}' and Error.stackTraceLimit was: '${Error.stackTraceLimit}'`);\n  }\n  const oldPrepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = (_, stack) => stack;\n\n  stack = Util.stack(stack, position);\n\n  return stack.slice(0, limit);\n};\nUtil.getCallerFile = function(position = 2) {\n  let stack = Util.getCallerStack();\n  if(stack !== null && typeof stack === 'object') {\n    const frame = stack[position];\n    return frame ? `${frame.getFileName()}:${frame.getLineNumber()}` : undefined;\n  }\n};\nUtil.getCallerFunction = function(position = 2) {\n  let stack = Util.getCallerStack(position + 1);\n  if(stack !== null && typeof stack === 'object') {\n    const frame = stack[0];\n    return frame ? frame.getFunction() : undefined;\n  }\n};\nUtil.getCallerFunctionName = function(position = 2) {\n  let stack = Util.getCallerStack(position + 1);\n  if(stack !== null && typeof stack === 'object') {\n    const frame = stack[0];\n    return frame ? frame.getMethodName() || frame.getFunctionName() : undefined;\n  }\n};\nUtil.getCallerFunctionNames = function(position = 2) {\n  let stack = Util.getCallerStack(position + 1);\n  if(stack !== null && typeof stack === 'object') {\n    let ret = [];\n    for(let i = 0; stack[i]; i++) {\n      const frame = stack[i];\n      const method = frame.getMethodName();\n      ret.push(method ? frame.getFunction() + '.' + method : frame.getFunctionName());\n    }\n    return ret;\n  }\n};\nUtil.getCaller = function(index = 1, stack) {\n  const methods = [\n    'getThis',\n    'getTypeName',\n    'getFunction',\n    'getFunctionName',\n    'getMethodName',\n    'getFileName',\n    'getLineNumber',\n    'getColumnNumber',\n    'getEvalOrigin',\n    'isToplevel',\n    'isEval',\n    'isNative',\n    'isConstructor'\n  ];\n  stack = stack || Util.getCallerStack(2, 1 + index, stack);\n  let thisIndex = stack.findIndex(f => f.functionName.endsWith('getCaller'));\n  index += thisIndex + 1;\n  const frame = stack[index];\n  return frame;\n};\nUtil.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack) {\n  const methods = [\n    'getThis',\n    'getTypeName',\n    'getFunction',\n    'getFunctionName',\n    'getMethodName',\n    'getFileName',\n    'getLineNumber',\n    'getColumnNumber',\n    'getEvalOrigin',\n    'isToplevel',\n    'isEval',\n    'isNative',\n    'isConstructor'\n  ];\n  stack = stack || Util.getCallerStack(2, num + index, stack);\n  let thisIndex = stack.findIndex(f => ((f.functionName || f.methodName) + '').endsWith('getCaller'));\n  index += thisIndex + 1;\n  return stack.slice(index);\n};\n\n/*Object.defineProperty(Util, 'stackFrame', {\n  get: function() {\n  return this.getCallerStack(2);\n  }\n});*/\nUtil.getStackFrames = function(offset = 2) {\n  let frames = Util.getCallerStack(0);\n  frames = frames.map(frame => {\n    if(Object.getPrototypeOf(frame) !== Util.stackFrame.prototype) frame = Util.stackFrame(frame);\n    return frame;\n  });\n\n  return frames.slice(offset);\n};\nUtil.getStackFrame = function(offset = 2) {\n  return Util.getStackFrames(offset)[0];\n};\nUtil.rotateLeft = function(x, n) {\n  n = n & 0x1f;\n  return (x << n) | ((x >> (32 - n)) & ~((-1 >> n) << n));\n};\nUtil.rotateRight = function(x, n) {\n  n = n & 0x1f;\n  return Util.rotateLeft(x, 32 - n);\n};\nUtil.hashString = function(string, bits = 32, mask = 0xffffffff) {\n  let ret = 0;\n  let bitc = 0;\n  for(let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    ret *= 186;\n    ret ^= code;\n    bitc += 8;\n    ret = Util.rotateLeft(ret, 7) & mask;\n  }\n  return ret & 0x7fffffff;\n};\nUtil.flatTree = function(tree, addOutput) {\n  const ret = [];\n  if(!addOutput) addOutput = arg => ret.push(arg);\n  addOutput(Util.filterKeys(tree, key => key !== 'children'));\n  if(typeof tree.children == 'object' && tree.children !== null && tree.children.length) for(let child of tree.children) Util.flatTree(child, addOutput);\n  return ret;\n};\nUtil.traverseTree = function(tree, fn, depth = 0, parent = null) {\n  fn(tree, depth, parent);\n  if(Util.isObject(tree.children) && tree.children.length > 0) for(let child of tree.children) Util.traverseTree(child, fn, depth + 1, tree);\n};\n\nUtil.walkTree = function(node, pred, t, depth = 0, parent = null) {\n  return (function* () {\n    if(!pred) pred = i => true;\n    if(!t)\n      t = function(i) {\n        i.depth = depth;\n        return i;\n      };\n    if(pred(node, depth, parent)) {\n      yield t(node);\n      if(typeof node == 'object' && node !== null && typeof node.children == 'object' && node.children.length) {\n        for(let child of [...node.children]) {\n          yield* Util.walkTree(child, pred, t, depth + 1, node.parent_id);\n        }\n      }\n    }\n  })();\n};\n\nUtil.isPromise = function(obj) {\n  return (Boolean(obj) && typeof obj.then === 'function') || obj instanceof Promise;\n};\n\n/* eslint-disable no-use-before-define */\nif(typeof setImmediate !== 'function') var setImmediate = fn => setTimeout(fn, 0);\nUtil.next = function(iter, observer, prev = undefined) {\n  let item;\n  try {\n    item = iter.next(prev);\n  } catch(err) {\n    return observer.error(err);\n  }\n  const value = item.value;\n  if(item.done) return observer.complete();\n  if(isPromise(value)) {\n    value\n      .then(val => {\n        observer.next(val);\n        setImmediate(() => Util.next(iter, observer, val));\n      })\n      .catch(err => observer.error(err));\n  } else {\n    observer.next(value);\n    setImmediate(() => Util.next(iter, observer, value));\n  }\n};\nUtil.getImageAverageColor = function(imageElement, options) {\n  if(!imageElement) {\n    return false;\n  }\n  options = options || {};\n  const settings = {\n    tooDark: (options.tooDark || 0.03) * 255 * 3 /* How dark is too dark for a pixel */,\n    tooLight: (options.tooLight || 0.97) * 255 * 3 /*How light is too light for a pixel */,\n    tooAlpha: (options.tooAlpha || 0.1) * 255 /*How transparent is too transparent for a pixel */\n  };\n  const w = imageElement.width;\n  let h = imageElement.height;\n  //Setup canvas and draw image onto it\n  const context = document.createElement('canvas').getContext('2d');\n  context.drawImage(imageElement, 0, 0, w, h);\n  //Extract the rgba data for the image from the canvas\n  const subpixels = context.getImageData(0, 0, w, h).data;\n  const pixels = {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 0\n  };\n  let processedPixels = 0;\n  const pixel = {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 0\n  };\n  let luma = 0; //Having luma in the pixel object caused ~10% performance penalty for some reason\n  //Loop through the rgba data\n  for(let i = 0, l = w * h * 4; i < l; i += 4) {\n    pixel.r = subpixels[i];\n    pixel.g = subpixels[i + 1];\n    pixel.b = subpixels[i + 2];\n    pixel.a = subpixels[i + 4];\n    //Only consider pixels that aren't black, white, or too transparent\n    if(\n      pixel.a > settings.tooAlpha &&\n      (luma = pixel.r + pixel.g + pixel.b) > settings.tooDark && //Luma is assigned inside the conditional to avoid re-calculation when alpha is not met\n      luma < settings.tooLight\n    ) {\n      pixels.r += pixel.r;\n      pixels.g += pixel.g;\n      pixels.b += pixel.b;\n      pixels.a += pixel.a;\n      processedPixels++;\n    }\n  }\n  //Values of the channels that make up the average color\n  let channels = {\n    r: null,\n    g: null,\n    b: null,\n    a: null\n  };\n  if(processedPixels > 0) {\n    channels = {\n      r: Math.round(pixels.r / processedPixels),\n      g: Math.round(pixels.g / processedPixels),\n      b: Math.round(pixels.b / processedPixels),\n      a: Math.round(pixels.a / processedPixels)\n    };\n  }\n  const o = Object.assign({}, channels, {\n    toStringRgb() {\n      //Returns a CSS compatible RGB string (e.g. '255, 255, 255')\n      const { r, g, b } = this;\n      return [r, g, b].join(', ');\n    },\n    toStringRgba() {\n      //Returns a CSS compatible RGBA string (e.g. '255, 255, 255, 1.0')\n      const { r, g, b, a } = this;\n      return [r, g, b, a].join(', ');\n    },\n    toStringHex() {\n      //Returns a CSS compatible HEX coloor string (e.g. 'FFA900')\n      const toHex = function(d) {\n        h = Math.round(d).toString(16);\n        if(h.length < 2) {\n          h = `0${h}`;\n        }\n        return h;\n      };\n      const { r, g, b } = this;\n      return [toHex(r), toHex(g), toHex(b)].join('');\n    }\n  });\n  return o;\n};\nUtil.jsonToObject = function(jsonStr) {\n  let ret = null;\n  try {\n    ret = JSON.parse(jsonStr);\n  } catch(error) {\n    let pos = +('' + error)\n      .split('\\n')\n      .reverse()[0]\n      .replace(/.*position\\ ([0-9]+).*/, '$1');\n    console.error('Unexpected token: ', jsonStr);\n    console.error('Unexpected token at:', jsonStr.substring(pos));\n    ret = null;\n  }\n  return ret;\n};\nUtil.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER) {\n  const tokens = str.split(/\\s/g);\n  let lines = [];\n  let line = tokens.shift();\n  for(; tokens.length; ) {\n    if((line.length ? line.length + 1 : 0) + tokens[0].length > max_linelen) {\n      lines.push(line);\n      line = '';\n    }\n    if(line != '') line += ' ';\n    line += tokens.shift();\n  }\n  if(line != '') lines.push(line);\n  return lines;\n};\nUtil.splitAt = function* (str, ...indexes) {\n  let prev = 0;\n  for(let index of indexes.sort((a, b) => a - b).concat([str.length])) {\n    if(index >= prev) {\n      yield str.substring(prev, index);\n      if(index >= str.length) break;\n      prev = index;\n    }\n  }\n};\nUtil.decodeEscapes = function(text) {\n  let matches = [...Util.matchAll(/([^\\\\]*)(\\\\u[0-9a-f]{4}|\\\\)/gi, text)];\n  if(matches.length) {\n    matches = matches.map(m => [...m].slice(1)).map(([s, t]) => s + String.fromCodePoint(parseInt(t.substring(2), 16)));\n    text = matches.join('');\n  }\n  return text;\n};\n\nUtil.stripXML = text =>\n  text\n    .replace(/<br(|\\ *\\/)>/gi, '\\n')\n    .replace(/<[^>]*>/g, '')\n    .replace(/[\\t\\ ]+/g, ' ')\n    .replace(/(\\n[\\t\\ ]*)+\\n/g, '\\n');\n\nUtil.stripHTML = html =>\n  html\n    .replace(/\\s*\\n\\s*/g, ' ')\n    .replace(/<[^>]*>/g, '\\n')\n    .split(lineSplit)\n    .map(p => p.trim())\n    .filter(p => p != '');\n\nUtil.stripNonPrintable = text => text.replace(/[^\\x20-\\x7f\\x0a\\x0d\\x09]/g, '');\nUtil.decodeHTMLEntities = function(text) {\n  let entities = {\n    amp: '&',\n    apos: \"'\",\n    '#x27': \"'\",\n    '#x2F': '/',\n    '#39': \"'\",\n    '#47': '/',\n    lt: '<',\n    gt: '>',\n    nbsp: ' ',\n    quot: '\"'\n  };\n  return text.replace(new RegExp('&([^;]+);', 'gm'), (match, entity) => entities[entity] || match);\n};\nUtil.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') => str.replace(new RegExp(`[${charset}](?!#)`, 'gim'), i => '&#' + i.charCodeAt(0) + ';');\n\nUtil.stripAnsi = function(str) {\n  return (str + '').replace(new RegExp('\\x1b[[(?);]{0,2}(;?[0-9])*.', 'g'), '');\n};\nUtil.proxy = (obj = {}, handler) =>\n  new Proxy(obj, {\n    get(target, key, receiver) {\n      //console.log(`Util.proxy getting ${key}!`);\n      return Reflect.get(target, key, receiver);\n    },\n    set(target, key, value, receiver) {\n      //console.log(`Util.proxy setting ${key}!`);\n      return Reflect.set(target, key, value, receiver);\n    },\n    ...handler\n  });\n\nUtil.propertyLookup = (obj = {}, handler = key => null) =>\n  Util.proxy(obj, {\n    get(target, key, receiver) {\n      return handler(key);\n    }\n  });\n\nUtil.traceProxy = (obj, handler) => {\n  let proxy;\n  handler = /*handler || */ function(name, args) {\n    console.log(`Calling method '${name}':`, ...args);\n  };\n  //console.log('handler', { handler }, handler + '');\n  proxy = new Proxy(obj, {\n    get(target, key, receiver) {\n      let member = Reflect.get(obj, key, receiver);\n      if(0 && typeof member == 'function') {\n        let method = member; // member.bind(obj);\n        member = function() {\n          //          handler.call(receiver, key, arguments);\n          return method.apply(obj, arguments);\n        };\n        member = method.bind(obj);\n        console.log('Util.traceProxy', key, (member + '').replace(/\\n\\s+/g, ' ').split(lineSplit)[0]);\n      }\n      return member;\n    }\n  });\n  return proxy;\n};\n\nUtil.proxyTree = function proxyTree(...callbacks) {\n  const [setCallback, applyCallback = () => {}] = callbacks;\n  const handler = {\n    get(target, key) {\n      return node([...this.path, key]);\n    },\n    set(target, key, value) {\n      return setCallback(this.path, key, value);\n    },\n    apply(target, thisArg, args) {\n      return applyCallback(this.path, ...args);\n    }\n  };\n  function node(path) {\n    return new Proxy(() => {}, { path, ...handler });\n  }\n\n  return node([]);\n};\n\n/*\n * Calls a constructor with an arbitrary number of arguments.\n *\n * This idea was borrowed from a StackOverflow answer:\n * http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible/1608546#1608546\n *\n * And from this MDN doc:\n * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/function/apply\n *\n * @param constructor- Constructor to call\n * @param arguments- any number of arguments\n * @return A 'new' instance of the constructor with the arguments passed\n */\nUtil.construct = constructor => {\n  function F(args) {\n    return constructor.apply(this, args);\n  }\n\n  F.prototype = constructor.prototype;\n\n  // since arguments isn't a first-class array, we'll use a shim\n  // Big thanks to Felix Geisend√∂rfer for the idea:\n  // http://debuggable.com/posts/turning-javascript-s-arguments-object-into-an-array:4ac50ef8-3bd0-4a2d-8c2e-535ccbdd56cb\n  return new F(Array.prototype.slice.call(arguments, 1));\n};\n\n/*\n * Calls construct() with a constructor and an array of arguments.\n *\n * @param constructor- Constructor to call\n * @param array- an array of arguments to apply\n * @return A 'new' instance of the constructor with the arguments passed\n */\nUtil.constructApply = (constructor, array) => {\n  let args = [].slice.call(array);\n  return construct.apply(null, [constructor].concat(args));\n};\n\nUtil.immutable = args => {\n  const argsType = typeof args === 'object' && Array.isArray(args) ? 'array' : 'object';\n  const errorText = argsType === 'array' ? \"Error! You can't change elements of this array\" : \"Error! You can't change properties of this object\";\n  const handler = {\n    set: () => {\n      throw new Error(errorText);\n    },\n    deleteProperty: () => {\n      throw new Error(errorText);\n    },\n    defineProperty: () => {\n      throw new Error(errorText);\n    }\n  };\n  return new Proxy(args, handler);\n};\n\nUtil.immutableClass = (orig, ...proto) => {\n  let name = Util.fnName(orig).replace(/Mutable/g, '');\n  let imName = 'Immutable' + name;\n  proto = proto || [];\n  let initialProto = proto.map(p =>\n    Util.isArrowFunction(p)\n      ? p\n      : ctor => {\n          for(let n in p) ctor.prototype[n] = p[n];\n        }\n  );\n  let body = `class ${imName} extends ${name} {\\n  constructor(...args) {\\n    super(...args);\\n    if(new.target === ${imName})\\n      return Object.freeze(this);\\n  }\\n};\\n\\n${imName}.prototype.constructor = ${imName};\\n\\nreturn ${imName};`;\n  for(let p of initialProto) p(orig);\n  let ctor; // = new Function(name, body)(orig);\n\n  let imm = base => {\n    let cls;\n    cls = class extends base {\n      constructor(...args) {\n        super(...args);\n        if(new.target === cls) return Object.freeze(this);\n      }\n    };\n    return cls;\n  };\n  ctor = imm(orig);\n\n  //console.log('immutableClass', { initialProto, body }, orig);\n  let species = ctor;\n\n  /* prettier-ignore */ //Object.assign(ctor, { [Symbol.species]: ctor });\n\n  return ctor;\n};\n\nUtil.partial = function partial(fn /*, arg1, arg2 etc */) {\n  let partialArgs = [].slice.call(arguments, 1);\n  if(!partialArgs.length) {\n    return fn;\n  }\n  return function() {\n    let args = [].slice.call(arguments);\n    let derivedArgs = [];\n    for(let i = 0; i < partialArgs.length; i++) {\n      let thisPartialArg = partialArgs[i];\n      derivedArgs[i] = thisPartialArg === undefined ? args.shift() : thisPartialArg;\n    }\n    return fn.apply(this, derivedArgs.concat(args));\n  };\n};\n\nUtil.clamp = Util.curry((min, max, value) => Math.max(min, Math.min(max, value)));\n\nUtil.coloring = (useColor = true) =>\n  !useColor\n    ? {\n        code(...args) {\n          return '';\n        },\n        text(text) {\n          return text;\n        },\n        concat(...args) {\n          let out = args.shift() || [''];\n          if(typeof out == 'string') out = [out];\n          for(let arg of args) {\n            if(Array.isArray(arg)) {\n              for(let subarg of arg) out[0] += subarg;\n            } else out[0] += arg;\n          }\n          return out;\n        }\n      }\n    : Util.isBrowser()\n    ? {\n        palette: [\n          'rgb(0,0,0)',\n          'rgb(80,0,0)',\n          'rgb(0,80,0)',\n          'rgb(80,80,0)',\n          'rgb(0,0,80)',\n          'rgb(80,0,80)',\n          'rgb(0,80,80)',\n          'rgb(80,80,80)',\n          'rgb(0,0,0)',\n          'rgb(160,0,0)',\n          'rgb(0,160,0)',\n          'rgb(160,160,0)',\n          'rgb(0,0,160)',\n          'rgb(160,0,160)',\n          'rgb(0,160,160)',\n          'rgb(160,160,160)'\n        ],\n        /*Util.range(0, 15).map(i =>\n            `rgb(${Util.range(0, 2)\n              .map(bitno => Util.getBit(i, bitno) * (i & 0x08 ? 160 : 80))\n              .join(',')})`\n        )*/ code(...args) {\n          let css = '';\n          let bold = 0;\n          for(let arg of args) {\n            let c = (arg % 10) + bold;\n            let rgb = this.palette[c];\n            //console.realLog(\"code:\", {arg, c, rgb});\n            if(arg >= 40) css += `background-color:${rgb};`;\n            else if(arg >= 30) css += `color:${rgb};`;\n            else if(arg == 1) bold = 8;\n            else if(arg == 0) bold = 0;\n            else throw new Error('No such color code:' + arg);\n          }\n          css += 'padding: 2px 0 2px 0;';\n          return css;\n        },\n        text(text, ...color) {\n          return [`%c${text}`, this.code(...color)];\n        },\n        concat(...args) {\n          let out = args.shift() || [''];\n          for(let arg of args) {\n            if(Array.isArray(arg) && typeof arg[0] == 'string') out[0] += arg.shift();\n            else if(Util.isObject(arg)) {\n              out.push(arg);\n              continue;\n            }\n\n            out = out.concat(arg);\n          }\n          return out;\n        }\n      }\n    : {\n        code(...args) {\n          return `\\x1b[${[...args].join(';')}m`;\n        },\n        text(text, ...color) {\n          return this.code(...color) + text + this.code(0);\n        },\n        concat(...args) {\n          return args.join('');\n        }\n      };\n\nlet color;\nUtil.colorText = (...args) => {\n  if(!color) color = Util.coloring();\n  return color.text(...args);\n};\nUtil.decodeAnsi = (str, index) => {\n  let ret = [];\n  const len = str.length;\n  if(index === undefined) index = str.lastIndexOf('\\x1b');\n  const isDigit = c => '0123456789'.indexOf(c) != -1;\n  const notDigit = c => !isDigit(c);\n  const findIndex = (pred, start) => {\n    let i;\n    for(i = start; i < len; i++) if(pred(str[i])) break;\n    return i;\n  };\n  if(str[++index] == '[') {\n    let newIndex;\n    for(++index; index < len; index = newIndex) {\n      let isNum = isDigit(str[index]);\n      newIndex = isNum ? findIndex(notDigit, index) : index + 1;\n      if(isNum) {\n        let num = parseInt(str.substring(index, newIndex));\n        ret.push(num);\n      } else {\n        ret.push(str[index]);\n        break;\n      }\n      if(str[newIndex] == ';') newIndex++;\n    }\n  }\n  return ret;\n};\nUtil.stripAnsi = str => {\n  let o = '';\n  for(let i = 0; i < str.length; i++) {\n    if(str[i] == '\\x1b' && str[i + 1] == '[') {\n      while(!/[A-Za-z]/.test(str[i])) i++;\n      continue;\n    }\n    o += str[i];\n  }\n  return o;\n};\n\nUtil.ansiCode = (...args) => {\n  if(!color) color = Util.coloring();\n  return color.code(...args);\n};\nUtil.ansi = Util.coloring(true);\nUtil.wordWrap = (str, width, delimiter) => {\n  // use this on single lines of text only\n  if(str.length > width) {\n    let p = width;\n    for(; p > 0 && str[p] != ' '; p--) {}\n    if(p > 0) {\n      let left = str.substring(0, p);\n      let right = str.substring(p + 1);\n      return left + delimiter + Util.wordWrap(right, width, delimiter);\n    }\n  }\n  return str;\n};\nUtil.multiParagraphWordWrap = (str, width, delimiter) => {\n  // use this on multi-paragraph lines of xcltext\n  let arr = str.split(delimiter);\n  for(let i = 0; i < arr.length; i++) if(arr[i].length > width) arr[i] = Util.wordWrap(arr[i], width, delimiter);\n  return arr.join(delimiter);\n};\nUtil.defineInspect = (proto, ...props) => {\n  if(!Util.isBrowser()) {\n    const c = Util.coloring();\n    proto[Util.inspectSymbol] = function() {\n      const obj = this;\n      return (\n        c.text(Util.fnName(proto.constructor) + ' ', 1, 31) +\n        Util.inspect(\n          props.reduce((acc, key) => {\n            acc[key] = obj[key];\n            return acc;\n          }, {}),\n          {\n            multiline: false,\n            colors: true,\n            colon: ':',\n            spacing: '',\n            separator: ', ',\n            padding: ' '\n          }\n        )\n      );\n    };\n  }\n};\n\nUtil.inRange = Util.curry((a, b, value) => value >= a && value <= b);\n\nUtil.bindProperties = (proxy, target, props, gen) => {\n  if(props instanceof Array) props = Object.fromEntries(props.map(name => [name, name]));\n  const [propMap, propNames] = Array.isArray(props) ? [props.reduce((acc, name) => ({ ...acc, [name]: name }), {}), props] : [props, Object.keys(props)];\n\n  gen ??= p => v => v === undefined ? target[propMap[p]] : (target[propMap[p]] = v);\n  const propGetSet = propNames\n    .map(k => [k, propMap[k]])\n\n    .reduce(\n      (a, [k, v]) => ({\n        ...a,\n        [k]: Util.isFunction(v) ? (...args) => v.call(target, k, ...args) : (gen && gen(k)) || ((...args) => (args.length > 0 ? (target[k] = args[0]) : target[k]))\n      }),\n      {}\n    );\n\n  /*  console.log(`Util.bindProperties`, { proxy, target, props, gen });*/\n  //console.log(`Util.bindProperties`, { propMap, propNames, propGetSet });\n  Object.defineProperties(\n    proxy,\n    propNames.reduce(\n      (a, k) => {\n        const prop = props[k];\n        const get_set = propGetSet[k]; //typeof prop == 'function' ? prop : gen(prop);\n        return {\n          ...a,\n          [k]: {\n            get: get_set,\n            set: get_set,\n            enumerable: true\n          }\n        };\n      },\n      {\n        __getter_setter__: { get: () => gen, enumerable: false },\n        __bound_target__: { get: () => target, enumerable: false }\n      }\n    )\n  );\n  return proxy;\n};\n\nUtil.weakKey = (function () {\n  const map = new WeakMap();\n  let index = 0;\n  return obj => {\n    let key = map.get(obj);\n    if(!key) {\n      key = 'weak-key-' + index++;\n      map.set(obj, key);\n    }\n    return key;\n  };\n})();\n\nObject.assign(Util.is, {\n  array: Array.isArray,\n  bool: Util.isBool,\n  constructor: Util.isConstructor,\n  date: Util.isDate,\n  email: Util.isEmail,\n  empty: Util.isEmpty,\n  nonEmpty: Util.isNonEmpty,\n  emptyString: Util.isEmptyString,\n  generator: Util.isGenerator,\n  iterable: Util.isIterable,\n  map: Util.isMap,\n  nativeFunction: Util.isNativeFunction,\n  object: Util.isObject,\n  promise: Util.isPromise,\n  function: Util.isFunction,\n  string: Util.isString,\n  on: val => val == 'on' || val == 'yes' || val === 'true' || val === true,\n  off: val => val == 'off' || val == 'no' || val === 'false' || val === false,\n  true: val => val === 'true' || val === true,\n  false: val => val === 'false' || val === false\n});\n\nclass AssertionFailed extends Error {\n  constructor(message, stack) {\n    super(/*'@ ' + location + ': ' +*/ message);\n    //this.location = location;\n    this.type = 'Assertion failed';\n\n    stack = stack || this.stack;\n\n    this.stack = stack;\n  }\n}\n\nUtil.assert = function assert(val, message) {\n  if(typeof val == 'function') {\n    message = message || val + '';\n    val = val();\n  }\n  if(!val) throw new AssertionFailed(message || `val == ${val}`);\n};\nUtil.assertEqual = function assertEqual(val1, val2, message) {\n  if(val1 != val2) throw new AssertionFailed(message || `${val1} != ${val2}`);\n};\n\nUtil.assignGlobal = () => Util.weakAssign(Util.getGlobalObject(), Util);\n\nUtil.weakMapper = function(createFn, map = new WeakMap(), hitFn) {\n  let self = function(obj, ...args) {\n    let ret;\n    if(map.has(obj)) {\n      ret = map.get(obj);\n      if(typeof hitFn == 'function') hitFn(obj, ret);\n    } else {\n      ret = createFn(obj, ...args);\n      //if(ret !== undefined)\n      map.set(obj, ret);\n    }\n    return ret;\n  };\n  self.set = (k, v) => map.set(k, v);\n  self.get = k => map.get(k);\n  self.map = map;\n  return self;\n};\n\nUtil.merge = function(...args) {\n  let ret;\n  let isMap = args[0] instanceof Map;\n  let t = isMap ? a => new Map(Object.entries(a)) : a => a;\n\n  if(isMap) {\n    /*  if(!args.every(arg => Util.isObject(arg) && arg instanceof Map))\n    args =args.map(arg => new Map(Util.entries(arg)));\n*/\n    ret = new Map();\n\n    for(let arg of args) for (let [key, value] of Util.entries(arg)) ret.set(key, value);\n  } else {\n    ret = args.reduce((acc, arg) => ({ ...acc, ...arg }), {});\n  }\n\n  return ret;\n};\n\nUtil.transformer = (a, ...l) =>\n  (l || []).reduce(\n    (c, f) =>\n      function(...v) {\n        return f.apply(this, [c.apply(this, v), ...v]);\n      },\n    a\n  );\n\n/* XXX */ Util.copyTextToClipboard = (i, t) => {\n  if(!Util.isBrowser()) {\n    return import('./childProcess.js').then(async module => {\n      let fs, std;\n      let childProcess = await module.PortableChildProcess((a, b, c) => {\n        fs = b;\n        std = c;\n      });\n      console.log('childProcess', { childProcess, fs, std });\n      let proc = childProcess('xclip', ['-in'], {\n        block: false,\n        stdio: ['pipe'],\n        env: { DISPLAY: Util.getEnv('DISPLAY') }\n      });\n      console.log('proc.stdin', proc.stdin);\n\n      console.log('write =', await fs.write(proc.stdin, i));\n      await fs.close(proc.stdin);\n      return await proc.wait();\n    });\n  }\n  let doc = Util.tryCatch(() => document);\n  if(!doc) return;\n  if(!t) t = doc.body;\n  const e = doc.createElement('textarea');\n  const prev = doc.activeElement;\n  e.value = i + '';\n  e.setAttribute('readonly', '');\n  e.style.contain = 'strict';\n  e.style.position = 'absolute';\n  e.style.left = '-9999px';\n  e.style.fontSize = '12pt';\n  const s = doc.getSelection();\n  let orig = false;\n  if(s.rangeCount > 0) {\n    orig = s.getRangeAt(0);\n  }\n  t.append(e);\n  e.select();\n  e.selectionStart = 0;\n  e.selectionEnd = i.length;\n  let isSuccess = false;\n  try {\n    isSuccess = doc.execCommand('copy');\n  } catch(_) {}\n  e.remove();\n  if(orig) {\n    s.removeAllRanges();\n    s.addRange(orig);\n  }\n  if(prev) {\n    prev.focus();\n  }\n  return isSuccess;\n};\n\nUtil.toPlainObject = obj => Util.toPlainObjectT(obj, v => (Util.isObject(v) ? Util.toPlainObject(v) : v));\n\nUtil.toBuiltinObject = obj => (Array.isArray(obj) ? obj.map(Util.toBuiltinObject) : Util.toPlainObjectT(obj, v => (Util.isObject(v) ? Util.toBuiltinObject(v) : v)));\n\nUtil.toPlainObjectT = (obj, t = (v, n) => v) => [...Object.getOwnPropertyNames(obj)].reduce((acc, k) => ({ ...acc, [k]: t(obj[k], k) }), {});\n\nUtil.timer = msecs => {\n  let ret, id, rej, createdTime, startTime, stopTime, endTime, res, delay, n, timer;\n  createdTime = new Date();\n  const remaining = () => {\n    let r = startTime + msecs - (typeof stopTime == 'number' ? stopTime : new Date());\n    return r >= 0 ? r : 0;\n  };\n  const finish = callback => {\n    stopTime = new Date();\n    if(stopTime.valueOf() > endTime.valueOf()) stopTime = endTime;\n    if(typeof callback == 'function') callback(stopTime);\n    res((n = remaining()));\n  };\n  const log = (method, ...args) =>\n    console.log(`${Date.now() - createdTime.valueOf()} timer#${id}.${method}`, ...args.map(obj => Util.toPlainObject(obj || {}, v => v || (v instanceof Date ? `+${v.valueOf() - createdTime}` : v))));\n  const timeout = (msecs, tmr = timer) => {\n    let now = Date.now();\n    if(!startTime) startTime = new Date(now);\n    endTime = new Date(now + msecs);\n    stopTime = undefined;\n    id = setTimeout(() => {\n      finish(typeof tmr.callback == 'function' ? (...args) => tmr.callback(...args) : () => {});\n      log(`finish`, tmr);\n    }, msecs);\n    log('start', tmr);\n  };\n  const add = (arr, ...items) => [...(arr ? arr : []), ...items];\n\n  timer = {\n    subscribers: [],\n    /* prettier-ignore */ get delay() {\n      return delay;\n    },\n    /* prettier-ignore */ get created() {\n      return createdTime;\n    },\n    /* prettier-ignore */ get start() {\n      return startTime || new Date(endTime.valueOf() - delay);\n    },\n    /* prettier-ignore */ get stop() {\n      return stopTime instanceof Date ? stopTime : undefined;\n    },\n    /* prettier-ignore */ get elapsed() {\n      return delay + (stopTime || new Date()).valueOf() - endTime.valueOf();\n    },\n    /* prettier-ignore */ get end() {\n      return endTime;\n    },\n    /* prettier-ignore */ get remain() {\n      return endTime.valueOf() - (stopTime || new Date()).valueOf();\n    },\n    cancel() {\n      log('cancel', this);\n      clearTimeout(id);\n      finish();\n      return this;\n    },\n    pause() {\n      let { remain, pause } = this;\n      stopTime = new Date();\n      clearTimeout(id);\n      this.resume = function() {\n        timeout(remain, this);\n        this.pause = pause;\n        delete this.resume;\n        delete this.restart;\n        log('resume', this);\n        return this;\n      };\n      this.restart = function() {\n        timeout(delay, this);\n        this.pause = pause;\n        delete this.resume;\n        delete this.restart;\n        log('restart', this);\n        return this;\n      };\n      delete this.pause;\n      log('pause', this);\n      return this;\n    },\n    callback(...args) {\n      log('callback', this);\n      const { subscribers } = this;\n      for(let f of subscribers) f.call(this, ...args);\n      return this;\n    },\n    subscribe(f) {\n      const { subscribers } = this;\n      if(subscribers.indexOf(f) == -1) subscribers.push(f);\n      return this;\n    },\n    unsubscribe(f) {\n      const { subscribers } = this;\n      let idx = subscribers.indexOf(f);\n      if(idx != -1) subscribers.splice(idx, idx + 1);\n      return this;\n    }\n  };\n  const start = () =>\n    new Promise((resolve, reject) => {\n      res = resolve;\n      rej = reject;\n      timeout((delay = msecs));\n    });\n  ret = start();\n  return Util.define(ret, timer);\n};\n/**\n * ???????????''\n * new Promise(Util.thenableReject('ERROR').then)\n *\n * @param      {<type>}  error   The error\n */\nUtil.thenableReject = error => ({\n  then: (resolve, reject) => reject(error)\n});\nUtil.wrapGenerator = fn =>\n  Util.isGenerator(fn)\n    ? function(...args) {\n        return [...fn.call(this, ...args)];\n      }\n    : fn;\n\nUtil.wrapGeneratorMethods = obj => {\n  for(let name of Util.getMethodNames(obj, 1, 0)) obj[name] = Util.wrapGenerator(obj[name]);\n  return obj;\n};\n\nUtil.decorateIterable = (proto, generators = false) => {\n  const methods = {\n    forEach(fn, thisArg) {\n      for(let [i, item] of this.entries()) fn.call(thisArg, item, i, this);\n    },\n    *map(fn, thisArg) {\n      for(let [i, item] of this.entries()) yield fn.call(thisArg, item, i, this);\n    },\n    *filter(pred, thisArg) {\n      for(let [i, item] of this.entries()) if(pred.call(thisArg, item, i, this)) yield item;\n    },\n    findIndex(pred, thisArg) {\n      for(let [i, item] of this.entries()) if(pred(item, i, this)) return i;\n      return -1;\n    },\n    indexOf(item, startIndex = -1) {\n      return this.findIndex((e, i) => i >= startIndex && e == item);\n    },\n    find(pred, thisArg) {\n      let idx = this.findIndex(pred, thisArg);\n      if(idx != -1) return typeof this.item == 'function' ? this.item(idx) : this[idx];\n    },\n    every(pred, thisArg) {\n      for(let [i, item] of this.entries()) if(!pred(item, i++, this)) return false;\n      return true;\n    },\n    some(pred, thisArg) {\n      for(let [i, item] of this.entries()) if(pred(item, i, this)) return true;\n      return false;\n    },\n    reduce(fn, accu) {\n      for(let [i, item] of this.entries()) accu = fn(accu, item, i, this);\n      return accu;\n    },\n    *entries() {\n      let i = 0;\n      for(let item of this) yield [i++, item];\n    },\n    *keys() {\n      for(let [i, item] of this.entries()) yield i;\n    },\n    *values() {\n      for(let [i, item] of this.entries()) yield item;\n    }\n  };\n  Util.define(proto, methods, false);\n  if(!generators) {\n    for(let name in methods) {\n      if(typeof name == 'symbol') continue;\n      if(name == 'entries') continue;\n      let gen = proto[name];\n      proto[name] = Util.wrapGenerator(gen);\n    }\n  }\n\n  return proto;\n};\n\nUtil.swap = (a, b) => [b, a];\nUtil.swapArray = ([a, b]) => [b, a];\n\nUtil.cacheAdapter = (st, defaultOpts = {}) => {\n  if(typeof st == 'string')\n    st = Util.tryCatch(\n      () => window.caches,\n      async c => c.open(st),\n      () => null\n    );\n  return {\n    async getItem(request, opts = {}) {\n      if(typeof request == 'number') request = await this.key(request);\n      return await (await st).match(request, { ...defaultOpts, ...opts });\n    },\n    async setItem(request, response) {\n      return await (await st).put(request, response);\n    },\n    async addItem(request) {\n      await (await st).add(request);\n      let response = await this.getItem(request);\n      if(response) response = response.clone();\n      return response;\n    },\n    async removeItem(request, opts = {}) {\n      if(typeof request == 'number') request = await this.key(request);\n      return await (await st).delete(request, { ...defaultOpts, ...opts });\n    },\n    async key(index) {\n      return (await (await st).keys())[index];\n    },\n    async keys(urls = false, t = a => a) {\n      let keys = await (await st).keys();\n      if(urls) keys = keys.map(response => response.url);\n      if(typeof t == 'function') keys = keys.map(r => t(r));\n\n      return keys;\n    },\n    async clear() {\n      let keys = await (await st).keys();\n      for(let key of keys) await this.removeItem(key);\n    }\n  };\n};\nUtil.cachedFetch = (allOpts = {}) => {\n  let { cache = 'fetch', fetch = Util.getGlobalObject('fetch'), debug, print, ...opts } = allOpts;\n  const storage = Util.cacheAdapter(cache);\n  const baseURL = Util.memoize(() => Util.makeURL({ location: '' }));\n\n  let self = async function CachedFetch(request, opts = {}) {\n    let response;\n    try {\n      if(typeof request == 'string') request = new Request(request, { ...self.defaultOpts, ...opts });\n\n      if(!request.url.startsWith(baseURL())) {\n        request = new Request(request.url, { ...request, mode: 'no-cors' });\n      }\n      response = await storage.getItem(request, {\n        ...self.defaultOpts,\n        ...opts\n      });\n\n      if(response == undefined) {\n        response = await /*self.*/ fetch(request, {\n          ...self.defaultOpts,\n          ...opts\n        });\n\n        if(response) {\n          let item = response.clone();\n          item.time = new Date();\n          storage.setItem(request, item);\n        }\n      } else {\n        response.cached = true;\n      }\n    } catch(err) {\n      throw new Error(`CachedFetch: ` + (request.url || request) + ' ' + err.message);\n    }\n    return response;\n  };\n  if(debug)\n    self = Util.printReturnValue(self, {\n      print: print || ((returnValue, fn, ...args) => console.debug(`cachedFetch[${cache}] (`, ...args, `) =`, returnValue))\n    });\n\n  Util.define(self, { fetch, cache, storage, opts });\n  return self;\n};\n\nUtil.proxyObject = (root, handler) => {\n  const ptr = path => path.reduce((a, i) => a[i], root);\n  const nodes = Util.weakMapper(\n    (value, path) =>\n      new Proxy(value, {\n        get(target, key) {\n          let prop = value[key];\n          if(Util.isObject(prop) || Array.isArray(prop)) return new node([...path, key]);\n          return handler && handler.get ? handler.get(prop, key) : prop;\n        }\n      })\n  );\n  function node(path) {\n    let value = ptr(path);\n    //console.log(\"node:\",{path,value});\n    return nodes(value, path);\n  }\n  return node([]);\n};\nUtil.parseXML = function(xmlStr) {\n  return Util.tryCatch(\n    () => new DOM(),\n    parser => parser.parseFromString(xmlStr, 'application/xml')\n  );\n};\n\nUtil.weakAssoc = (fn = (value, ...args) => Object.assign(value, ...args)) => {\n  let mapper = Util.tryCatch(\n    () => new WeakMap(),\n    map => Util.weakMapper((obj, ...args) => Util.merge(...args), map),\n    () =>\n      (obj, ...args) =>\n        Util.define(obj, ...args)\n  );\n  let self = (obj, ...args) => {\n    let value = mapper(obj, ...args);\n    return fn(value, ...args);\n  };\n  self.mapper = mapper;\n\n  return self;\n};\nUtil.getArgv = Util.memoize(() =>\n  Util.tryCatch(\n    () => {\n      let a = process.argv;\n      if(!Array.isArray(a)) throw new Error();\n      return a;\n    },\n    a => a,\n    () =>\n      Util.tryCatch(\n        () => thisFilename(),\n        fn => [fn],\n        () =>\n          Util.tryCatch(\n            () => scriptArgs,\n            a => ['qjs', ...a]\n          )\n      )\n  )\n);\nUtil.getArgs = Util.memoize(() =>\n  Util.tryCatch(\n    () => {\n      let a = process.argv;\n      if(!Array.isArray(a)) throw new Error();\n      return a;\n    },\n    a => a.slice(1),\n    () => Util.tryCatch(() => scriptArgs)\n  )\n);\n/*  options Object/Map\n\n    option Array [has_arg,callback,val]\n\n*/\nUtil.getOpt = (options = {}, args) => {\n  let short, long;\n  let result = {};\n  let positional = (result['@'] = []);\n  if(!(options instanceof Array)) options = Object.entries(options);\n  const findOpt = arg => options.find(([optname, option]) => (Array.isArray(option) ? option.indexOf(arg) != -1 : false) || arg == optname);\n  let [, params] = options.find(opt => opt[0] == '@') || [];\n  if(typeof params == 'string') params = params.split(',');\n  // console.log('Util.getOpt options', options);\n  // console.log('Util.getOpt params', params);\n  for(let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    let opt;\n    if(arg[0] == '-') {\n      let name, value, start, end;\n      if(arg[1] == '-') long = true;\n      else short = true;\n      //console.log('Util.getOpt', { arg, short, long });\n      start = short ? 1 : 2;\n      if(short) end = 2;\n      else if((end = arg.indexOf('=')) == -1) end = arg.length;\n      name = arg.substring(start, end);\n      //console.log('Util.getOpt', { start, end, name });\n      if((opt = findOpt(name))) {\n        //console.log('Util.getOpt', { opt });\n        const [has_arg, handler] = opt[1];\n        if(has_arg) {\n          if(arg.length > end) value = arg.substring(end + (arg[end] == '='));\n          else value = args[++i];\n        } else {\n          value = true;\n        }\n        //console.log('Util.getOpt #1', { name, handler });\n        Util.tryCatch(\n          () => handler(value, result[opt[0]], options, result),\n          v => (value = v),\n          () => null\n        );\n        //console.log('Util.getOpt #2', { name, value, fn: typeof opt[1] + ' ' + opt[1] + '' });\n        result[opt[0]] = value;\n        continue;\n      }\n    }\n    if(params.length) {\n      const param = params.shift();\n      // console.log('Util.getOpt', { positional, param });\n      if((opt = findOpt(param))) {\n        const [, [, handler]] = opt;\n        let value = arg;\n        //console.log('Util.getOpt #3', { param, handler });\n        if(typeof handler == 'function')\n          value = Util.tryCatch(\n            () => handler(value, result[opt[0]], options, result),\n            v => v\n          );\n        const name = opt[0];\n        //console.log('Util.getOpt #4', { name, value });\n        result[opt[0]] = value;\n        continue;\n      }\n    }\n    result['@'] = [...(result['@'] ?? []), arg];\n  }\n  //console.log('Util.getOpt', { result });\n  return result;\n};\nUtil.getEnv = async varName =>\n  Util.tryCatch(\n    () => process.env,\n    async e => e[varName],\n    () => false /* XXX (globalThis.std ? std.getenv(varName) : Util.tryCatch(async () => await import('std').then(std => std.getenv(varName)))) */\n  );\nUtil.getEnvVars = async () =>\n  Util.tryCatch(\n    () => process.env,\n    async e => e,\n    () => false\n    // XXX     Util.tryCatch(\n    //        async () =>\n    //          await import('./childProcess.js').then(async ({ PortableChildProcess }) => {\n    //            let childProcess = await PortableChildProcess();\n    //            (await import('./filesystem.js')).default(fs => (Util.globalThis().filesystem = fs));\n    //            let proc = childProcess('env', [], {\n    //              block: false,\n    //              stdio: [null, 'pipe']\n    //            });\n    //            let data = '\\n';\n    //            for await(let output of await filesystem.asyncReader(proc.stdout)) data += filesystem.bufferToString(output);\n    //            let matches = [...Util.matchAll(/(^|\\n)[A-Za-z_][A-Za-z0-9_]*=.*/gm, data)];\n    //            let indexes = matches.map(match => match.index);\n    //            let ranges = indexes.reduce((acc, idx, i, a) => [...acc, [idx + 1, a[i + 1]]], []);\n    //            let vars = ranges\n    //              .map(r => data.substring(...r))\n    //              .map(line => {\n    //                let eqPos = line.indexOf('=');\n    //                return [line.substring(0, eqPos), line.substring(eqPos + 1)];\n    //              });\n    //            return Object.fromEntries(vars);\n    //          })\n    //      )\n  );\n\nUtil.safeFunction = (fn, trapExceptions, thisObj) => {\n  const isAsync = Util.isAsync(fn);\n  let exec = isAsync\n    ? async function(...args) {\n        return await fn.call(this || thisObj, ...args);\n      }\n    : function(...args) {\n        return fn.call(this || thisObj, ...args);\n      };\n  if(trapExceptions) {\n    const handleException = typeof trapExceptions == 'function' ? trapExceptions : Util.putError;\n    Error.stackTraceLimit = Infinity;\n    exec = Util.tryFunction(\n      exec, //async (...args) => { Error.stackTraceLimit=Infinity;  return await exec(...args); },\n      a => a,\n      error => {\n        if(Util.isObject(error)) {\n          if(error.stack !== undefined) error.stack = new Util.stack(error.stack);\n          handleException(error);\n        }\n      }\n    );\n  }\n  return exec;\n};\nUtil.safeCall = (fn, ...args) => Util.safeApply(fn, args);\nUtil.safeApply = (fn, args = []) => Util.safeFunction(fn, true)(...args);\n\nUtil.exit = exitCode => {\n  const { callExitHandlers } = Util;\n  //console.log('Util.exit', { exitCode, callExitHandlers });\n  if(callExitHandlers) callExitHandlers(exitCode);\n  const stdExit = std => {\n    std.gc();\n    std.exit(exitCode);\n  };\n  if(globalThis.std) return stdExit(globalThis.std);\n  return;\n  /* XXX import('std')\n    .then(stdExit)\n    .catch(() =>*/ Util.tryCatch(\n    () => [process, process.exit],\n    ([obj, exit]) => exit.call(obj, exitCode),\n    () => false\n  );\n};\nUtil.atexit = handler => {\n  const { handlers } = Util.callMain;\n  Util.pushUnique(handlers, handler);\n  if(typeof Util.trapExit == 'function') Util.trapExit();\n};\nUtil.callMain = async (fn, trapExceptions) =>\n  await Util.safeFunction(\n    async (...args) => {\n      Util.callMain.handlers = [];\n      const { handlers } = Util.callMain;\n      const callExitHandlers = (Util.callExitHandlers = Util.once(async ret => {\n        if(handlers) for(const handler of handlers) await handler(ret);\n        // Util.exit(ret);\n      }));\n      Util.trapExit = Util.once(() => Util.signal(15, callExitHandlers));\n      /* XXX if(Util.getPlatform() == 'quickjs') await import('std').then(module => module.gc()); */\n      let ret = await fn(...args);\n      await callExitHandlers(ret);\n    },\n    trapExceptions &&\n      (typeof trapExceptions == 'function'\n        ? trapExceptions\n        : err => {\n            let { message, stack } = err;\n            stack = new Util.stack(err.stack);\n            const scriptDir = Util.tryCatch(\n              () => process.argv[1],\n              argv1 => argv1.replace(/\\/[^\\/]*$/g, '')\n            );\n            console.log('Exception:', message, '\\nStack:' + (stack.toString({ colors: true, stripUrl: `file://${scriptDir}/` }) + '').replace(/(^|\\n)/g, '\\n  '));\n            Util.exit(1);\n          })\n  )(...Util.getArgs().slice(1));\n\nUtil.printReturnValue = (fn, opts = {}) => {\n  const {\n    print = (returnValue, fn, ...args) => {\n      let stack = Util.getCallerStack();\n\n      (console.debug || console.log)('RETURN VAL:', /*Util.inspect(*/ returnValue /*, { colors: false })*/, {\n        /*fn,\n         */ args /*,\n        stack*/\n      });\n    }\n  } = opts;\n  let self;\n  self = (...args) => {\n    let returnValue = fn(...args);\n\n    print.call(self, returnValue, fn, ...args);\n    return returnValue;\n    /*fn = Util.tryFunction(fn, (returnValue, ...args) => {\n      print.call(self, returnValue, fn, ...args);\n      return returnValue;\n    });\n\n    return fn(...args);*/\n  };\n  Util.define(self, { fn, opts });\n  return self;\n};\nUtil.callMain.handlers = [];\n\nUtil.replaceAll = (needles, haystack) => {\n  return Util.entries(needles)\n    .map(([re, str]) => [typeof re == 'string' ? new RegExp(re, 'g') : re, str])\n    .reduce((acc, [match, replacement]) => acc.replace(match, replacement), haystack);\n};\n\nUtil.quote = (str, q = '\"') => {\n  return q + str.replace(new RegExp(q, 'g'), '\\\\' + q) + q;\n};\n\nUtil.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) => {\n  let s = '';\n  for(let i = 0; i < str.length; i++) {\n    let code = str.codePointAt(i);\n    if(!pred(code)) {\n      s += str[i];\n      continue;\n    }\n\n    if(code == 0) s += `\\\\0`;\n    else if(code == 10) s += `\\\\n`;\n    else if(code == 13) s += `\\\\r`;\n    else if(code == 9) s += `\\\\t`;\n    else if(code <= 0xff) s += `\\\\x${('0' + code.toString(16)).slice(-2)}`;\n    else s += `\\\\u${('0000' + code.toString(16)).slice(-4)}`;\n  }\n  return s;\n};\nUtil.escapeRegex = string => string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\nUtil.consolePrinter = function ConsolePrinter(log = console.log) {\n  let self;\n\n  self = function(...args) {\n    self.add(...args);\n    self.print();\n    self.clear();\n  };\n\n  delete self.length;\n\n  Object.setPrototypeOf(self, Util.extend(Util.consolePrinter.prototype, Util.getMethods(Object.getPrototypeOf(self), 1, 0)));\n  self.splice(0, self.length, '');\n  self.log = (...args) => log(...args);\n\n  return self;\n};\nObject.assign(Util.consolePrinter.prototype, Util.getMethods(Array.prototype));\n\nUtil.consoleJoin = function(...args) {\n  let out = 'push' in this ? this : [];\n  if(out.length == 0) out.push('');\n  let match = Util.matchAll(/%(?:o|O|d|i|s|f|s|d|c)/g);\n  for(let [fmt, ...styles] of args) {\n    console.log('Util.consoleJoin', { fmt, styles, out });\n    let substs = [...match(fmt)];\n    if(substs.length != styles.length) {\n      const code = [substs.length, styles.length];\n      //console.log(\"substs:\",substs);\n      throw new Error(`${code.join(' != ')} ${code.join(', ')}`);\n    }\n    if(out[0]) out[0] += ' ';\n    out[0] += fmt;\n\n    for(let style of styles) Array.prototype.push.call(out, style);\n    // Array.prototype.splice.call(out, out.length, 0, ...styles);\n    //console.log('Util.consoleJoin', [...out]);\n  }\n  return out;\n};\n\nUtil.consoleConcat = function(...args) {\n  let self;\n  self = function ConsoleConcat(...args) {\n    if(args.length == 1 && Array.isArray(args[0])) args = args[0];\n    return self.add(...args);\n  };\n  self.add = Util.consoleJoin;\n  /*  function concat(out, args) {\n console.log('concat', { out: [...out], args: [...args] });\n   while(args.length) {\n      let arg = args.shift();\n      if(typeof arg == 'string') {\n        let matches = [...Util.matchAll(/%[cos]/g, arg)];\n        if(matches.length > 0 && args.length >= matches.length) {\n          out[0] += arg;\n          out.splice(out.length, 0, ...args.splice(0, matches.length));\n        } else {\n          out[0] += arg.replace(/%/g, '%%');\n        }\n      } else if(Array.isArray(arg) && typeof arg[0] == 'string' && /%[cos]/.test(arg[0])) {\n        concat(out, arg);\n      } else {\n        out[0] += ' %o';\n        out.push(arg);\n      }\n    }\n    return out;\n  }\n*/ delete self.length;\n  Object.setPrototypeOf(self, Util.extend(Util.consoleConcat.prototype, Object.getPrototypeOf(self)));\n  //self.push('');\n  if(args.length) self.add(...args);\n  return self;\n};\n\nUtil.consoleConcat.prototype = Object.assign(Util.consoleConcat.prototype, Util.getMethods(Array.prototype, 1, 0), {\n  [Util.inspectSymbol]() {\n    return [this, [...this]];\n  },\n  [Symbol.iterator]() {\n    return Array.prototype[Symbol.iterator].call(this);\n  },\n  clear() {\n    return this.splice(0, this.length);\n  },\n  print(log = (...args) => console.info(...args)) {\n    log(...this);\n  }\n});\nUtil.consolePrinter.prototype.length = 1;\nUtil.consolePrinter.prototype[0] = '';\nObject.assign(Util.consolePrinter.prototype, Util.consoleConcat.prototype, {\n  print() {\n    const a = [...this];\n    const i = a.map(i => Util.inspect(i));\n    console.debug('a: ' + i.shift(), ...i);\n\n    Util.consoleConcat.prototype.print.call(this, this.log);\n  },\n  output() {\n    const a = [...this];\n    this.clear();\n    return a;\n  },\n  add(...args) {\n    let { i = 0 } = this;\n\n    for(; args.length > 0; i++) {\n      let arg = args.shift();\n      //  console.debug('arg:', i, typeof(arg) == 'string'  ? Util.abbreviate(arg) : arg);\n\n      if(Array.isArray(arg) && /%c/.test(arg[0])) {\n        this.i = i;\n        this.add(...arg);\n        continue;\n      }\n      if(i > 0) this[0] += ' ';\n      if(typeof arg != 'string') {\n        this[0] += '%o';\n        this.push(arg);\n      } else {\n        this[0] += arg;\n        if(/color:/.test(this[0])) {\n          throw new Error(`this[0] is CSS: i=${i}\\nthis[0] = \"${this[0]}\"\\narg= ${typeof arg} \"${(arg + '').replace(lineSplit, '\\\\n')}\"`);\n        }\n\n        const matches = [...Util.matchAll(['%c', '%o'], arg)];\n        console.debug('matches.length:', matches.length, ' args.length:', args.length);\n\n        if(matches.length > 0) {\n          const styles = args.splice(0, matches.length);\n          this.splice(this.length, 0, ...styles);\n        }\n      }\n    }\n  }\n});\n\nUtil.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>\n  function(value) {\n    if(value !== undefined) {\n      getSetFn(value ? trueValue : falseValue);\n    } else {\n      let ret = getSetFn();\n      if(ret === trueValue) return true;\n      if(ret === falseValue) return false;\n    }\n  };\n\nUtil.getSet = (get, set = () => {}, thisObj) =>\n  function(...args) {\n    if(args.length > 0) return set.call(thisObj || this, ...args);\n    return get.call(thisObj || this);\n  };\n\nUtil.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>\n  Util.getSet(\n    () => get(fn()),\n    v => fn(set(v)),\n    thisObj\n  );\nUtil.extendFunction = (handler = () => {}) =>\n  class ExFunc extends Function {\n    constructor() {\n      super('...args', 'return this.__self__.__call__(...args)');\n      var self = this.bind(this);\n      this.__self__ = self;\n      return self;\n    }\n\n    // Example `__call__` method.\n    __call__(...args) {\n      return handler(...args);\n    }\n  };\nUtil.isatty = async fd => {\n  let ret;\n  for(let module of ['os', 'tty']) {\n    try {\n      ret = await import(module).then(mod => mod.isatty(fd));\n    } catch(err) {\n      ret = undefined;\n    }\n    if(ret !== undefined) break;\n  }\n  return ret;\n};\nUtil.ttyGetWinSize = (fd = 1) => {\n  let ret;\n  if(Util.getPlatform() == 'quickjs') return import('os').then(m => m.ttyGetWinSize(fd));\n  const stream = process[['stdin', 'stdout', 'stderr'][fd] || 'stdout'];\n  return new Promise(stream.cols ? (resolve, reject) => resolve([stream.cols, stream.rows]) : (resolve, reject) => resolve(stream?.getWindowSize?.()));\n};\nUtil.ttySetRaw = globalThis.os\n  ? os.ttySetRaw\n  : (fd = 0, mode = true) => {\n      let ret;\n      const stream = typeof fd == 'number' ? process[['stdin', 'stdout', 'stderr'][fd] || 'stdin'] : fd;\n      return stream?.setRawMode?.(mode);\n    };\nUtil.stdio = (fd, mode = true) => {\n  if(Util.getPlatform() == 'quickjs') return std[['in', 'out', 'err'][fd]];\n\n  let ret;\n  const stream = typeof fd == 'number' ? process[['stdin', 'stdout', 'stderr'][fd] || 'stdin'] : fd;\n  return stream?.setRawMode?.(mode);\n};\n\nUtil.signal = (num, act) => {\n  //console.log('Util.signal', { num, act });\n  let ret;\n  return import('os')\n    .then(m => {\n      if(typeof num == 'string' && num in m) num = m[num];\n\n      m.signal(num, act);\n    })\n    .catch(() => process.on(num, act));\n};\n\n/**\n * Measure the average execution time of a function\n * @param {Function} fn A function for performance measurement\n * @param {Array} args Function arguments\n * @param {Object} options\n * @returns {Number} Result in milliseconds\n */\nUtil.timeit = (fn, args = [], options = {}) => {\n  const valid = fn && typeof fn === 'function';\n  if(!valid) throw new Error('No function provided.');\n\n  const NS_PER_SEC = 1e9;\n  const { e, r, l, d } = { e: 1000, r: 1, l: true, d: 6, ...options };\n  const { hrtime } = Util;\n\n  let results = [];\n  for(let i = 0; i < r; i++) {\n    const start = hrtime();\n    for(let i = 1; i < e; i++) {\n      fn(args);\n    }\n    const diff = hrtime(start);\n    const elapsed = (diff[0] * NS_PER_SEC + diff[1]) * 0.000001;\n    const result = elapsed / e;\n    results.push(+(Math.round(result + `e+${6}`) + `e-${6}`));\n  }\n  const ms = results.reduce((p, c) => p + c, 0) / results.length;\n\n  if(l) {\n    console.log(`Function   : ${fn.name}()`);\n    console.log(`Average    : ${ms.toFixed(d)}ms`);\n    console.log(`Repetitions: ${r}`);\n    console.log(`Executions : ${e}`);\n  }\n\n  return ms;\n};\n\nUtil.lazyProperty = (obj, name, getter, opts = {}) => {\n  const replaceProperty = value => {\n    delete obj[name];\n    Object.defineProperty(obj, name, { value, ...opts });\n    return value;\n  };\n  const isAsync = Util.isAsync(getter);\n  //console.log(`Util.lazyProperty name=${name} isAsync=${isAsync} getter=${getter}`);\n\n  return Object.defineProperty(obj, name, {\n    get: isAsync\n      ? async function() {\n          return replaceProperty(await getter.call(obj, name));\n        }\n      : function() {\n          const value = getter.call(obj, name);\n          let isPromise = Util.isObject(value) && value instanceof Promise;\n          //console.log(`Util.lazyProperty`, name, value, isPromise);\n          if(isPromise) {\n            value.then(v => {\n              replaceProperty(v);\n              //console.log(`Util.lazyProperty resolved `, obj[name]);\n              return v;\n            });\n            return value;\n          }\n          return replaceProperty(value);\n        },\n    configurable: true,\n    ...opts\n  });\n};\n\nUtil.lazyProperties = (obj, gettersObj, opts = {}) => {\n  opts = { enumerable: false, ...opts };\n  for(let prop in gettersObj) {\n    // console.log('Util.lazyProperties', { prop });\n    Util.lazyProperty(obj, prop, gettersObj[prop], opts);\n  }\n  return obj;\n};\n\nUtil.calcHRTime = (f = (a, b) => a + b) =>\n  function(a, b) {\n    const ms = f(a[1], b[1]);\n    const div = Math.floor(ms / 1e9);\n    const rem = ms % 1e9;\n\n    return [f(a[0], b[0]) + div, rem];\n  };\nUtil.addHRTime = Util.calcHRTime((a, b) => a + b);\nUtil.subHRTime = Util.calcHRTime((a, b) => a - b);\n\nUtil.getHRTime = Util.memoize(() => {\n  const { now } = Util;\n\n  class HighResolutionTime extends Array {\n    constructor(secs = 0, nano = 0) {\n      super(2);\n      this[0] = secs;\n      this[1] = nano;\n      return Object.freeze(this);\n    }\n    static create(s, n) {\n      const sign = Math.sign(s * 1e3 + n * 1e-6);\n      s *= sign;\n      n *= sign;\n      if(n < 0) {\n        s--;\n        n += 1e9;\n      }\n      if(n >= 1e9) {\n        s++;\n        n -= 1e9;\n      }\n      return new HighResolutionTime(s * sign, n * sign);\n    }\n    /* prettier-ignore */ get seconds() {\n      const [s, n] = this;\n      return s + n * 1e-9;\n    }\n    /* prettier-ignore */ get milliseconds() {\n      const [s, n] = this;\n      return s * 1e3 + n * 1e-6;\n    }\n    /* prettier-ignore */ get nanoseconds() {\n      const [s, n] = this;\n      return s * 1e9 + n;\n    }\n    [Symbol.toPrimitive]() {\n      return this.milliseconds;\n    }\n    diff(o) {\n      let s = o[0] - this[0];\n      let n = o[1] - this[1];\n      return HighResolutionTime.create(s, n);\n    }\n    sum(o) {\n      /*     let s = o[0] + this[0];\n      let n = o[1] + this[1];*/\n      return HighResolutionTime.create(...Util.addHRTime(o, this));\n    }\n    since(o) {\n      let s = this[0] - o[0];\n      let n = this[1] - o[1];\n      return HighResolutionTime.create(s, n);\n    }\n    toString() {\n      let secs = this.seconds;\n      let msecs = (secs % 1) * 1e3;\n      let nsecs = (msecs % 1) * 1e6;\n      let ret = secs >= 1 ? `${Math.floor(secs)}s ` : '';\n      return ret + `${Util.roundTo(msecs, 0.001)}ms`;\n    }\n    inspect() {\n      return [this.seconds, this.nanoseconds];\n    }\n    [Util.inspectSymbol]() {\n      return [this.seconds, this.nanoseconds];\n      let secs = this.seconds;\n      let msecs = (secs % 1) * 1e3;\n      let nsecs = (msecs % 1) * 1e6;\n      return `${Math.floor(secs)}s ${Util.roundTo(msecs, 0.001)}ms`;\n      return `${Math.floor(secs)}s ${Math.floor(msecs)}ms ${Math.floor(nsecs)}ns`;\n    }\n  }\n  Util.getGlobalObject().HighResolutionTime = HighResolutionTime;\n\n  return Util.isAsync(now)\n    ? async function hrtime(previousTimestamp) {\n        var clocktime = await now();\n        var secs = Math.floor(Number(clocktime / 1000));\n        var nano = Math.floor(Number(clocktime % 1000) * 1e6);\n        let ts = new HighResolutionTime(secs, nano);\n        if(previousTimestamp) ts = ts.since(previousTimestamp);\n        return ts;\n      }\n    : function hrtime(previousTimestamp) {\n        var clocktime = now();\n        var secs = Math.floor(clocktime / 1000);\n        var nano = Math.floor((clocktime % 1000) * 1e6);\n        let ts = new HighResolutionTime(secs, nano);\n        if(previousTimestamp) ts = ts.since(previousTimestamp);\n        return ts;\n      };\n});\n\nUtil.lazyProperty(Util, 'animationFrame', () => {\n  const { now } = Util;\n\n  return (minDelay = 0) => {\n    if(minDelay <= 0) return new Promise(resolve => requestAnimationFrame(resolve));\n    const start = now();\n\n    return new Promise(resolve => {\n      requestAnimationFrame(animationFrame);\n\n      function animationFrame(t) {\n        if(t - start >= minDelay) resolve(t);\n        requestAnimationFrame(animationFrame);\n      }\n    });\n  };\n});\n\nUtil.lazyProperty(Util, 'hrtime', Util.getHRTime);\n//Util.startTime = Util.hrtime();\n\nUtil.lazyProperty(\n  Util,\n  'now',\n  (Util.getNow = () => {\n    const g = Util.getGlobalObject();\n    // polyfil for window.performance.now\n    var performance = g.performance || {};\n    var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow;\n\n    if(performanceNow) {\n      //console.log('performanceNow', performanceNow);\n      performanceNow = performanceNow.bind(performance); //Util.bind(performanceNow, performance);\n    }\n\n    if(!performanceNow && g.cv?.getTickCount) {\n      const freq = g.cv.getTickFrequency() / 1000;\n      const mul = 1 / freq;\n      const getTicks = g.cv.getTickCount;\n      performanceNow = () => getTicks() * mul;\n    }\n    if(!performanceNow && Util.getPlatform() == 'quickjs') {\n      let gettime;\n      const CLOCK_REALTIME = 0;\n      const CLOCK_MONOTONIC = 1;\n      const CLOCK_MONOTONIC_RAW = 4;\n      const CLOCK_BOOTTIME = 7;\n\n      console.log('STACK:', Util.getCallerStack());\n\n      performanceNow = async function(clock = CLOCK_MONOTONIC_RAW) {\n        /* XXX \n        if(!gettime) {\n          const { dlsym, RTLD_DEFAULT, define, call } = await import('ffi.so');\n          const clock_gettime = dlsym(RTLD_DEFAULT, 'clock_gettime');\n          define('clock_gettime', clock_gettime, null, 'int', 'int', 'void *');\n          gettime = (clk_id, tp) => call('clock_gettime', clk_id, tp);\n        }*/\n        let data = new ArrayBuffer(16);\n\n        gettime(clock, data);\n        let [secs, nsecs] = new BigUint64Array(data, 0, 2);\n\n        let t = /*BigFloat*/ secs * 1e3 + nsecs * 1e-6;\n        return t;\n      };\n    }\n\n    if(!performanceNow) {\n      const getTime = Date.now;\n      performanceNow = getTime;\n    }\n\n    return performanceNow;\n  })\n);\n\nUtil.formatColumns = a => {\n  let maxWidth = a.reduce((acc, row, i) => row.map((col, j) => Math.max(acc[j] || 0, (col + '').length)));\n\n  // console.debug(maxWidth);\n\n  return a.map(row => row.map((col, j) => (col + '').padEnd(maxWidth[j])).join(' ')).join('\\n');\n};\n\nUtil.getPlatform = () =>\n  Util.tryCatch(\n    () => process.versions.node,\n    () => 'node',\n    Util.tryCatch(\n      () => globalThis.scriptArgs[0],\n      () => 'quickjs',\n      Util.tryCatch(\n        () => window.navigator,\n        () => 'browser',\n        () => undefined\n      )\n    )\n  );\n\nUtil.defineGetter(Util, 'platform', Util.memoize(Util.getPlatform));\nUtil.defineGetter(\n  Util,\n  'env',\n  Util.memoize(async () => {\n    let env = await Util.getEnvVars();\n    Util.define(Util, 'env', env);\n    return env;\n  })\n);\n\nUtil.colIndexes = line => [...line].reduce(([prev, cols], char, i) => [char, [...cols, ...(/\\s/.test(prev) && /[^\\s]/.test(char) ? [i] : [])]], [' ', []])[1];\n\nUtil.colSplit = (line, indexes) => {\n  indexes = indexes || Util.colIndexes(line);\n  let ret = [];\n  for(let i = 0; i < indexes.length; i++) {\n    let col = indexes[i];\n    let next = indexes[i + 1] || line.length;\n\n    ret.push(line.substring(col, next));\n  }\n  return ret;\n};\n\nUtil.bitsToNames = (flags, map = (name, flag) => name) => {\n  const entries = [...Util.entries(flags)];\n\n  return function* (value) {\n    for(let [name, flag] of entries) if(value & flag && (value & flag) == flag) yield map(name, flag);\n  };\n};\n\n// time a given function\nUtil.instrument = (\n  fn,\n  log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${Util.abbreviate(Util.escape(ret + ''))}}` : '') + ` timing: ${duration.toFixed(3)}ms`),\n  logInterval = 0 //1000\n) => {\n  const { now, hrtime, functionName } = Util;\n  let last = now();\n  let duration = 0,\n    times = 0;\n  const name = functionName(fn) || '<anonymous>';\n  const isAsync = Util.isAsync(fn) || Util.isAsync(now);\n  const doLog = isAsync\n    ? async (args, ret) => {\n        let t = await now();\n        if(t - (await last) >= logInterval) {\n          log(duration / times, name, args, ret);\n          duration = times = 0;\n          last = t;\n        }\n      }\n    : (args, ret) => {\n        let t = now();\n        //console.log('doLog', { passed: t - last, logInterval });\n        if(t - last >= logInterval) {\n          log(duration / times, name, args, ret);\n          duration = times = 0;\n          last = t;\n        }\n      };\n\n  return isAsync\n    ? async function(...args) {\n        const start = await now();\n        let ret = await fn.apply(this, args);\n        duration += (await now()) - start;\n        times++;\n        await doLog(args, ret);\n        return ret;\n      }\n    : function(...args) {\n        const start = hrtime();\n        let ret = fn.apply(this, args);\n        duration += now() - start;\n        times++;\n        doLog(args, ret);\n        return ret;\n      };\n};\n\nUtil.trace = (fn, enter, leave, both = () => {}) => {\n  enter = enter || ((name, args) => console.log(`function '${name}' (${args.map(arg => inspect(arg)).join(', ')}`));\n\n  leave = leave || ((name, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${Util.abbreviate(Util.escape(ret + ''))}}` : '')));\n\n  let orig = fn;\n\n  return function(...args) {\n    let ret;\n    both('enter', fn.name, args);\n    enter(fn.name, args);\n\n    ret = orig.call(this, ...args);\n    both('leave', fn.name, ret);\n    leave(fn.name, ret);\n    return ret;\n  };\n};\n\nUtil.bind = function(f, ...args) {\n  let ret,\n    boundThis = args[0];\n\n  if(args.length < 2)\n    ret = function() {\n      if(new.target /*this instanceof ret*/) {\n        let ret_ = f.apply(this, arguments);\n        return Object(ret_) === ret_ ? ret_ : this;\n      } else return f.apply(boundThis, arguments);\n    };\n  else {\n    let boundArgs = new Array(args.length - 1);\n    for(let i = 1; i < args.length; i++) boundArgs[i - 1] = args[i];\n\n    ret = function() {\n      let boundLen = boundArgs.length,\n        args = new Array(boundLen + arguments.length),\n        i;\n      for(i = 0; i < boundLen; i++) args[i] = boundArgs[i];\n      for(i = 0; i < arguments.length; i++) args[boundLen + i] = arguments[i];\n\n      if(new.target /*this instanceof ret*/) {\n        let ret_ = f.apply(this, args);\n        return Object(ret_) === ret_ ? ret_ : this;\n      } else return f.apply(boundThis, args);\n    };\n  }\n\n  ret.prototype = f.prototype;\n  return ret;\n};\n\nUtil.bytesToUTF8 = function* (bytes) {\n  if(bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n  let state = 0,\n    val = 0;\n  for(const c of bytes) {\n    if(state !== 0 && c >= 0x80 && c < 0xc0) {\n      val = (val << 6) | (c & 0x3f);\n      state--;\n      if(state === 0) yield val;\n    } else if(c >= 0xc0 && c < 0xf8) {\n      state = 1 + (c >= 0xe0) + (c >= 0xf0);\n      val = c & ((1 << (6 - state)) - 1);\n    } else {\n      state = 0;\n      yield c;\n    }\n  }\n};\nUtil.codePointsToString = codePoints => {\n  let s = '';\n  for(let c of codePoints) s += String.fromCodePoint(c);\n  return s;\n};\nUtil.bufferToString = b => Util.codePointsToString(Util.bytesToUTF8(b));\n\nUtil.levenshteinDistance = function levenshteinDistance(a, b) {\n  if(!a || !b) return (a || b).length;\n  var m = [];\n  for(var i = 0; i <= b.length; i++) {\n    m[i] = [i];\n    if(i === 0) continue;\n    for(var j = 0; j <= a.length; j++) {\n      m[0][j] = j;\n      if(j === 0) continue;\n      m[i][j] = b.charAt(i - 1) == a.charAt(j - 1) ? m[i - 1][j - 1] : Math.min(m[i - 1][j - 1] + 1, m[i][j - 1] + 1, m[i - 1][j] + 1);\n    }\n  }\n  return m[b.length][a.length];\n};\n\nUtil.padTrunc = (...args) => {\n  let [len, s] = args;\n  const end = len >= 0;\n  len = Math.abs(len);\n  if(args.length < 2) {\n    return (s, pad = ' ') => {\n      s = s + '';\n      len ??= s.length;\n      return s.length > len ? s.slice(0, len) : s['pad' + (end ? 'End' : 'Start')](len, pad);\n    };\n  } else {\n    s = s + '';\n    len ??= s.length;\n    return s.length > len ? s.slice(0, len) : s['pad' + (end ? 'End' : 'Start')](len, ' ');\n  }\n};\n\nUtil.setReadHandler = (fd, handler) => (Util.getPlatform() == 'quickjs' ? import('os').then(os => os.setReadHandler(fd, handler)) : fd.on('data', handler));\n\nexport default Util();\n",
			"file": "lib/util.js",
			"file_size": 185825,
			"file_write_time": 133252621639735624,
			"settings":
			{
				"buffer_size": 185808,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAA0WAAAAAAAADhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRYAAAAAAAANFgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAA0WAAAAAAAADRYAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAADhYAAAAAAAAOFgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/geom/pointList.js",
			"settings":
			{
				"buffer_size": 13290,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					37,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANk2AAAAAAAA2jYAAAAAAAAAAAAA2jYAAAAAAADaNgAAAAAAAPABAAAKLyppZighVXRpbC5pc0Jyb3dzZXIoKSkgewogIGxldCBjID0gVXRpbC5jb2xvcmluZygpOwogIGxldCBzeW0gPSBTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpOwogIFBvaW50TGlzdC5wcm90b3R5cGVbc3ltXSA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGAke2MudGV4dCgnUG9pbnRMaXN0JywgMSwgMzEpfSR7Yy50ZXh0KCcoJywgMSwgMzYpfSR7CiAgICAgIGMudGV4dCh0aGlzLmdldExlbmd0aCgpLCAxLCAzNSkgKyBjLmNvZGUoMSwgMzYpCiAgICB9KSBbXG4gICR7dGhpcy5tYXAoKHsgeCwgeSB9IC8vIFV0aWwudG9Tb3VyY2UocG9pbnQsIHtjb2xvcnM6IHRydWUgfSkgfHwgcG9pbnRbc3ltXSgpIHx8CiAgICApID0+IFV0aWwuaW5zcGVjdCh7IHgsIHkgfSwgeyBtdWx0aWxpbmU6IGZhbHNlLCBzcGFjaW5nOiAnICcgfSkpLmpvaW4oJyxcbiAgJyl9XG4ke2MudGV4dCgnXScsCiAgICAgIDEsCiAgICAgIDM2CiAgICApfWA7CiAgfTsKfSov",
					"AQAAAAAAAAABAAAA2TYAAAAAAADJOAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					3,
					"right_delete",
					null,
					"AwAAAHwAAAAAAAAAfAAAAAAAAAAIAAAAY29sb3Jpbmd8AAAAAAAAAHwAAAAAAAAAAQAAACx8AAAAAAAAAHwAAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAAfAAAAAAAAACEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAZDoAAAAAAABkOgAAAAAAAAAAAAAAAFxA"
				],
				[
					71,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYzoAAAAAAABjOgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					2,
					"left_delete",
					null,
					"AgAAALA0AAAAAAAAsDQAAAAAAAABAAAACq80AAAAAAAArzQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAsTQAAAAAAACxNAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"left_delete",
					null,
					"AQAAAHE0AAAAAAAAcTQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAcjQAAAAAAAByNAAAAAAAAAAAAAAAAH5A"
				],
				[
					84,
					1,
					"",
					null,
					"KwAAAMEyAAAAAAAAzzIAAAAAAAAMAAAAfTsKUG9pbnRMaXN07TEAAAAAAAD7MQAAAAAAAAwAAAB9OwpQb2ludExpc3RYMQAAAAAAAGYxAAAAAAAADAAAAH07ClBvaW50TGlzdMUwAAAAAAAA0zAAAAAAAAAMAAAAfTsKUG9pbnRMaXN0FDAAAAAAAAAiMAAAAAAAAAwAAAB9OwpQb2ludExpc3R9LwAAAAAAAIsvAAAAAAAADAAAAH07ClBvaW50TGlzdHcuAAAAAAAAhS4AAAAAAAAMAAAAfTsKUG9pbnRMaXN04C0AAAAAAADuLQAAAAAAAAwAAAB9OwpQb2ludExpc3TaLAAAAAAAAOgsAAAAAAAADAAAAH07ClBvaW50TGlzdEMsAAAAAAAAUSwAAAAAAAAMAAAAfTsKUG9pbnRMaXN0eysAAAAAAACJKwAAAAAAAAwAAAB9OwpQb2ludExpc3TlKgAAAAAAAPMqAAAAAAAADAAAAH07ClBvaW50TGlzdB0qAAAAAAAAKyoAAAAAAAAMAAAAfTsKUG9pbnRMaXN0ESgAAAAAAAAfKAAAAAAAAAwAAAB9OwpQb2ludExpc3QNJwAAAAAAABsnAAAAAAAADAAAAH07ClBvaW50TGlzdDsmAAAAAAAASSYAAAAAAAAMAAAAfTsKUG9pbnRMaXN0ZiUAAAAAAAB0JQAAAAAAAAwAAAB9OwpQb2ludExpc3S2JAAAAAAAAMQkAAAAAAAADAAAAH07ClBvaW50TGlzdMAiAAAAAAAAziIAAAAAAAAMAAAAfTsKUG9pbnRMaXN0tiEAAAAAAADEIQAAAAAAAAwAAAB9OwpQb2ludExpc3QUIQAAAAAAACIhAAAAAAAADAAAAH07ClBvaW50TGlzdPweAAAAAAAACh8AAAAAAAAMAAAAfTsKUG9pbnRMaXN0ZB4AAAAAAAByHgAAAAAAAAwAAAB9OwpQb2ludExpc3T5HQAAAAAAAAceAAAAAAAADAAAAH07ClBvaW50TGlzdNocAAAAAAAA6BwAAAAAAAAMAAAAfTsKUG9pbnRMaXN0XBwAAAAAAABqHAAAAAAAAAwAAAB9OwpQb2ludExpc3Q9GwAAAAAAAEsbAAAAAAAADAAAAH07ClBvaW50TGlzdL8aAAAAAAAAzRoAAAAAAAAMAAAAfTsKUG9pbnRMaXN0XBoAAAAAAABqGgAAAAAAAAwAAAB9OwpQb2ludExpc3RMFwAAAAAAAFoXAAAAAAAADAAAAH07ClBvaW50TGlzdI4WAAAAAAAAnBYAAAAAAAAMAAAAfTsKUG9pbnRMaXN0bBQAAAAAAAB6FAAAAAAAAAwAAAB9OwpQb2ludExpc3TPEgAAAAAAAN0SAAAAAAAADAAAAH07ClBvaW50TGlzdF0RAAAAAAAAaxEAAAAAAAAMAAAAfTsKUG9pbnRMaXN0mQ8AAAAAAACnDwAAAAAAAAwAAAB9OwpQb2ludExpc3R8DQAAAAAAAIoNAAAAAAAADAAAAH07ClBvaW50TGlzdLcKAAAAAAAAxQoAAAAAAAAMAAAAfTsKUG9pbnRMaXN0rwkAAAAAAAC9CQAAAAAAAAwAAAB9OwpQb2ludExpc3SICAAAAAAAAJYIAAAAAAAADAAAAH07ClBvaW50TGlzdMQHAAAAAAAA0gcAAAAAAAAMAAAAfTsKUG9pbnRMaXN0OAcAAAAAAABGBwAAAAAAAAwAAAB9OwpQb2ludExpc3SrBgAAAAAAALkGAAAAAAAADAAAAH07ClBvaW50TGlzdD0GAAAAAAAASwYAAAAAAAAMAAAAfTsKUG9pbnRMaXN0",
					"AQAAAAAAAAABAAAAtiQAAAAAAADCJAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAAQ1AAAAAAAABTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAQAAAAAAACABAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"left_delete",
					null,
					"AQAAADcFAAAAAAAANwUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAOAUAAAAAAAA4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAFAAAAAAAAAQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAHtA"
				],
				[
					105,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					131,
					1,
					"",
					null,
					"KwAAAO4yAAAAAAAAATMAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGUYMgAAAAAAACsyAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlgTEAAAAAAACUMQAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZewwAAAAAAAA/zAAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGU5MAAAAAAAAEwwAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBloC8AAAAAAACzLwAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZZguAAAAAAAAqy4AAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGX/LQAAAAAAABIuAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBl9ywAAAAAAAAKLQAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZV4sAAAAAAAAcSwAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGWUKwAAAAAAAKcrAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBl/CoAAAAAAAAPKwAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZTIqAAAAAAAARSoAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGUkKAAAAAAAADcoAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlHicAAAAAAAAxJwAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZUomAAAAAAAAXSYAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGVzJQAAAAAAAIYlAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlwSQAAAAAAADUJAAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZckiAAAAAAAA3CIAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGW9IQAAAAAAANAhAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlGSEAAAAAAAAsIQAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZf8eAAAAAAAAEh8AAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGVlHgAAAAAAAHgeAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBl+B0AAAAAAAALHgAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZdccAAAAAAAA6hwAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGVXHAAAAAAAAGocAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlNhsAAAAAAABJGwAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZbYaAAAAAAAAyRoAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGVRGgAAAAAAAGQaAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlPxcAAAAAAABSFwAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZX8WAAAAAAAAkhYAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGVbFAAAAAAAAG4UAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlvBIAAAAAAADPEgAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZUgRAAAAAAAAWxEAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGWCDwAAAAAAAJUPAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlYw0AAAAAAAB2DQAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZZwKAAAAAAAArwoAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGWSCQAAAAAAAKUJAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlaQgAAAAAAAB8CAAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZaMHAAAAAAAAtgcAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGUVBwAAAAAAACgHAAAAAAAAFAAAAFBvaW50TGlzdC4ucHJvdG90eXBlhgYAAAAAAACZBgAAAAAAABQAAABQb2ludExpc3QuLnByb3RvdHlwZRYGAAAAAAAAKQYAAAAAAAAUAAAAUG9pbnRMaXN0Li5wcm90b3R5cGU",
					"AQAAAAAAAAABAAAAFgYAAAAAAAAqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					3,
					"left_delete",
					null,
					"AwAAALQAAAAAAAAAtAAAAAAAAAAIAAAAdG9Tb3VyY2WzAAAAAAAAALMAAAAAAAAAAQAAACCyAAAAAAAAALIAAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAAtAAAAAAAAAC8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAALIAAAAAAAAAswAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgAAAAAAAACyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": " niod"
					},
					"BQAAALMAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC1AAAAAAAAAAAAAAC1AAAAAAAAALYAAAAAAAAAAAAAALYAAAAAAAAAtwAAAAAAAAAAAAAAtwAAAAAAAAC4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswAAAAAAAACzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					6,
					"left_delete",
					null,
					"BgAAALcAAAAAAAAAtwAAAAAAAAABAAAAZLYAAAAAAAAAtgAAAAAAAAABAAAAb7UAAAAAAAAAtQAAAAAAAAABAAAAabQAAAAAAAAAtAAAAAAAAAABAAAAbrMAAAAAAAAAswAAAAAAAAABAAAAILIAAAAAAAAAsgAAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALIAAAAAAAAAswAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgAAAAAAAACyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": " mnod"
					},
					"BQAAALMAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC1AAAAAAAAAAAAAAC1AAAAAAAAALYAAAAAAAAAAAAAALYAAAAAAAAAtwAAAAAAAAAAAAAAtwAAAAAAAAC4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswAAAAAAAACzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					3,
					"left_delete",
					null,
					"AwAAALcAAAAAAAAAtwAAAAAAAAABAAAAZLYAAAAAAAAAtgAAAAAAAAABAAAAb7UAAAAAAAAAtQAAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "od"
					},
					"AgAAALUAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC3AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQAAAAAAAAC1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "\nindx"
					},
					"BgAAAGwJAAAAAAAAbQkAAAAAAAAAAAAAbQkAAAAAAABvCQAAAAAAAAAAAABvCQAAAAAAAHAJAAAAAAAAAAAAAHAJAAAAAAAAcQkAAAAAAAAAAAAAcQkAAAAAAAByCQAAAAAAAAAAAAByCQAAAAAAAHMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAkAAAAAAABsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"left_delete",
					null,
					"AQAAAHIJAAAAAAAAcgkAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAcwkAAAAAAABzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "x="
					},
					"AgAAAHIJAAAAAAAAcwkAAAAAAAAAAAAAcwkAAAAAAAB0CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgkAAAAAAAByCQAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					2,
					"left_delete",
					null,
					"AgAAAHMJAAAAAAAAcwkAAAAAAAABAAAAPXIJAAAAAAAAcgkAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAdAkAAAAAAAB0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "ex=mod"
					},
					"BgAAAHIJAAAAAAAAcwkAAAAAAAAAAAAAcwkAAAAAAAB0CQAAAAAAAAAAAAB0CQAAAAAAAHUJAAAAAAAAAAAAAHUJAAAAAAAAdgkAAAAAAAAAAAAAdgkAAAAAAAB3CQAAAAAAAAAAAAB3CQAAAAAAAHgJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgkAAAAAAAByCQAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHgJAAAAAAAAegkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAkAAAAAAAB4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "inde"
					},
					"BAAAAHkJAAAAAAAAegkAAAAAAAAAAAAAegkAAAAAAAB7CQAAAAAAAAAAAAB7CQAAAAAAAHwJAAAAAAAAAAAAAHwJAAAAAAAAfQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQkAAAAAAAB5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					4,
					"left_delete",
					null,
					"BAAAAHwJAAAAAAAAfAkAAAAAAAABAAAAZXsJAAAAAAAAewkAAAAAAAABAAAAZHoJAAAAAAAAegkAAAAAAAABAAAAbnkJAAAAAAAAeQkAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAfQkAAAAAAAB9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "+index,"
					},
					"BwAAAHkJAAAAAAAAegkAAAAAAAAAAAAAegkAAAAAAAB7CQAAAAAAAAAAAAB7CQAAAAAAAHwJAAAAAAAAAAAAAHwJAAAAAAAAfQkAAAAAAAAAAAAAfQkAAAAAAAB+CQAAAAAAAAAAAAB+CQAAAAAAAH8JAAAAAAAAAAAAAH8JAAAAAAAAgAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQkAAAAAAAB5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIAJAAAAAAAAgQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAkAAAAAAACACQAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "tihs"
					},
					"BAAAAIEJAAAAAAAAggkAAAAAAAAAAAAAggkAAAAAAACDCQAAAAAAAAAAAACDCQAAAAAAAIQJAAAAAAAAAAAAAIQJAAAAAAAAhQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQkAAAAAAACBCQAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					3,
					"left_delete",
					null,
					"AwAAAIQJAAAAAAAAhAkAAAAAAAABAAAAc4MJAAAAAAAAgwkAAAAAAAABAAAAaIIJAAAAAAAAggkAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAhQkAAAAAAACFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "his.length"
					},
					"CgAAAIIJAAAAAAAAgwkAAAAAAAAAAAAAgwkAAAAAAACECQAAAAAAAAAAAACECQAAAAAAAIUJAAAAAAAAAAAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACHCQAAAAAAAAAAAACHCQAAAAAAAIgJAAAAAAAAAAAAAIgJAAAAAAAAiQkAAAAAAAAAAAAAiQkAAAAAAACKCQAAAAAAAAAAAACKCQAAAAAAAIsJAAAAAAAAAAAAAIsJAAAAAAAAjAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggkAAAAAAACCCQAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAI0JAAAAAAAAjgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQkAAAAAAACNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"left_delete",
					null,
					"AQAAAJ0JAAAAAAAAnQkAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAAngkAAAAAAACeCQAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"cut",
					null,
					"AQAAAHUJAAAAAAAAdQkAAAAAAAAYAAAAbW9kKCtpbmRleCwgdGhpcy5sZW5ndGgp",
					"AQAAAAAAAAABAAAAdQkAAAAAAACNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"paste",
					null,
					"AQAAAHUJAAAAAAAAjQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQkAAAAAAAB1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					5,
					"left_delete",
					null,
					"BQAAAKEJAAAAAAAAoQkAAAAAAAABAAAAeKAJAAAAAAAAoAkAAAAAAAABAAAAZZ8JAAAAAAAAnwkAAAAAAAABAAAAZJ4JAAAAAAAAngkAAAAAAAABAAAAbp0JAAAAAAAAnQkAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"paste",
					null,
					"AQAAAJ0JAAAAAAAAtQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQkAAAAAAACdCQAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"cut",
					null,
					"AQAAAG8JAAAAAAAAbwkAAAAAAAAiAAAAaW5kZXg9bW9kKCtpbmRleCwgdGhpcy5sZW5ndGgpOwogIA",
					"AQAAAAAAAAABAAAAbwkAAAAAAACRCQAAAAAAAAAAAAAAADBA"
				],
				[
					242,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAA4hAAAAAAAAECEAAAAAAAAAAAAAUCAAAAAAAABSIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADiEAAAAAAABQIAAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"left_delete",
					null,
					"AQAAAFAgAAAAAAAAUCAAAAAAAADEAAAALypQb2ludExpc3QucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uKHByZWQpIHsKICBsZXQgcmV0ID0gbmV3IFBvaW50TGlzdCgpOwogIFBvaW50TGlzdC5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHRoaXMsIChwLCBpLCBsKSA9PiBwcmVkKHAsIGksIGwpICYmIHJldC5wdXNoKG5ldyBQb2ludChsW2ldKSkpOwogIHJldHVybiByZXQ7Cn07Ki8KCg",
					"AQAAAAAAAAABAAAAUCAAAAAAAAAUIQAAAAAAAAAAAAAAAAAA"
				],
				[
					262,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUCkAAAAAAABRKQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "io-helpers.js",
			"settings":
			{
				"buffer_size": 11650,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					14,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoAAAAAAAAAQQAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "package.json",
			"settings":
			{
				"buffer_size": 5876,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"cut",
					null,
					"AQAAAMoDAAAAAAAAygMAAAAAAAA9AAAAICAgICJxdWlja2pzL3Fqcy1tb2R1bGVzL2xpYi9leHRlbmRBcnJheS5qcyI6ICJleHRlbmRBcnJheSIsCg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoDAAAAAAAABwQAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					2,
					"paste",
					null,
					"AgAAAMoDAAAAAAAABwQAAAAAAAAAAAAABwQAAAAAAABEBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoDAAAAAAAAygMAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "dm"
					},
					"AwAAAOcDAAAAAAAA6AMAAAAAAAAAAAAA6AMAAAAAAADoAwAAAAAAAAsAAABleHRlbmRBcnJheegDAAAAAAAA6QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcDAAAAAAAA8gMAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAOgDAAAAAAAA6AMAAAAAAAABAAAAbQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkDAAAAAAAA6QMAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "om"
					},
					"AgAAAOgDAAAAAAAA6QMAAAAAAAAAAAAA6QMAAAAAAADqAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgDAAAAAAAA6AMAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"paste",
					null,
					"AgAAAPEDAAAAAAAA9AMAAAAAAAAAAAAA9AMAAAAAAAD0AwAAAAAAAAsAAABleHRlbmRBcnJheQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEDAAAAAAAA/AMAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA9AMAAAAAAAD0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhFwAAewogICJ0eXBlIjogIm1vZHVsZSIsCiAgIl9tb2R1bGVBbGlhc2VzIjogewogICAgInByZWFjdCI6ICJsaWIvZG9tL3ByZWFjdENvbXBvbmVudC5qcyIsCiAgICAicHJvcC10eXBlcyI6ICJsaWIvcHJvcC10eXBlcy5qcyIsCiAgICAicmVhY3QiOiAibGliL2RvbS9wcmVhY3RDb21wb25lbnQuanMiLAogICAgInJlYWN0LWRvbSI6ICJub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdCIsCiAgICAicmVhY3Qtc3NyLXByZXBhc3MiOiAibm9kZV9tb2R1bGVzL3ByZWFjdC1zc3ItcHJlcGFzcyIsCiAgICAibGliL2VjbWFzY3JpcHQvcGFyc2VyLmpzIjogImxpYi9lY21hc2NyaXB0L3BhcnNlcjIuanMiLAogICAgImxpYi9lY21hc2NyaXB0L2xleGVyLmpzIjogInF1aWNranMvcWpzLW1vZHVsZXMvbGliL2xleGVyL2VjbWFzY3JpcHQuanMiLAogICAgImN2VmlkZW8uanMiOiAicWpzLW9wZW5jdi9qcy9jdlZpZGVvLmpzIiwKICAgICJjdlV0aWxzLmpzIjogInFqcy1vcGVuY3YvanMvY3ZVdGlscy5qcyIsCiAgICAiY3ZQaXBlbGluZS5qcyI6ICJxanMtb3BlbmN2L2pzL2N2UGlwZWxpbmUuanMiLAogICAgImN2SGlnaEdVSS5qcyI6ICJxanMtb3BlbmN2L2pzL2N2SGlnaEdVSS5qcyIsCiAgICAibGliL29iamVjdEluc3BlY3QuanMiOiAiaW5zcGVjdCIsCiAgICAibGliL3BvaW50ZXIuanMiOiAicG9pbnRlciIsCiAgICAibGliL2RlZXAuanMiOiAiZGVlcCIsCiAgICAibGliL3BhdGguanMiOiAicGF0aCIsCiAgICAibGliL3htbC5qcyI6ICJ4bWwiLAogICAgImxpYi9sZXhlci5qcyI6ICJsZXhlciIsCiAgICAibGliL2ZpbGVzeXN0ZW0uanMiOiAiZnMiLAogICAgImZzLmpzIjogImxpYi9maWxlc3lzdGVtLmpzIiwKICAgICJxdWlja2pzL3Fqcy1tb2R1bGVzL2xpYi9mcy5qcyI6ICJmcyIsCiAgICAibGliL21pc2MuanMiOiAidXRpbCIsCiAgICAicXVpY2tqcy9xanMtbW9kdWxlcy9saWIvZG9tLmpzIjogImRvbSIsCiAgICAicXVpY2tqcy9xanMtbW9kdWxlcy9saWIvZXh0ZW5kQXJyYXkuanMiOiAiZXh0ZW5kQXJyYXkiLAogICAgInF1aWNranMvcWpzLW1vZHVsZXMvbGliL2V4dGVuZEdlbmVyYXRvci5qcyI6ICJleHRlbmRHZW5lcmF0b3IiLAogICAgImxpYi9jaGlsZFByb2Nlc3MuanMiOiAiY2hpbGRfcHJvY2VzcyIsCiAgICAiLi9saWIvY2hpbGRQcm9jZXNzLmpzIjogImNoaWxkX3Byb2Nlc3MiLAogICAgImxpYi9zdGFjay5qcyI6ICJxdWlja2pzL3Fqcy1tb2R1bGVzL2xpYi9zdGFjay5qcyIsCiAgICAieHJlcGwuanMiOiAicXVpY2tqcy9xanMtbW9kdWxlcy9saWIvcmVwbC5qcyIsCiAgICAidGVybWluYWwuanMiOiAicXVpY2tqcy9xanMtbW9kdWxlcy9saWIvdGVybWluYWwuanMiLAogICAgIngvcXVpY2tqcy9xanMtZmZpL2V4YW1wbGVzL3NvY2tldC5qcyI6ICJzb2NrZXRzIiwKICAgICJxdWlja2pzL3Fqcy1mZmkvbGliL3NvY2tldC5qcyI6ICJzb2NrZXRzIiwKICAgICJsaWIvZXZlbnRzLmpzIjogImV2ZW50cyIsCiAgICAibGliL3htbC94cGF0aC5qcyI6ICJxdWlja2pzL3Fqcy1tb2R1bGVzL2xpYi94cGF0aC5qcyIsCiAgICAibGliL3ByZWFjdC5qcyI6ICJsaWIvcHJlYWN0LmVzbS5qcyIKICB9LAogICJhdXRob3IiOiAiUm9tYW4gU2VubiA8cm9tYW4ubC5zZW5uQGdtYWlsLmNvbT4iLAogICJsaWNlbnNlIjogIk1JVCIsCiAgInBhcnNlck9wdGlvbnMiOiB7CiAgICAic291cmNlVHlwZSI6ICJtb2R1bGUiCiAgfSwKICAiZGVwZW5kZW5jaWVzIjogewogICAgIkBiYWJlbC9ydW50aW1lIjogIl43LjE3LjkiLAogICAgIkBiYWJlbC9ydW50aW1lLWNvcmVqczMiOiAiXjcuMTcuOSIsCiAgICAiQHMtdWkvbGludCI6ICJeMy40My4wIiwKICAgICJiYWJlbC1sb2FkZXIiOiAiXjguMi41IiwKICAgICJiYWJlbC1wcmVzZXQtZW52IjogIl4xLjcuMCIsCiAgICAiYm9keS1wYXJzZXIiOiAiXjEuMTkuMCIsCiAgICAiYnBnLWRlY29kZXIiOiAiXjAuMC43IiwKICAgICJjb3JlLWpzIjogIl4zLjIyLjIiLAogICAgImV4cHJlc3MiOiAiXjQuMTcuMSIsCiAgICAiZXhwcmVzcy13cyI6ICJeNC4wLjAiLAogICAgImh0bSI6ICJeMy4xLjAiLAogICAgImlzLWJwZyI6ICJeMC4xLjAiLAogICAgImlzb21vcnBoaWMtZmV0Y2giOiAiXjMuMC4wIiwKICAgICJtb2R1bGUtYWxpYXMiOiAiXjIuMi4yIiwKICAgICJuZXh0IjogIl4xMi4yLjUiLAogICAgIm5vZGUtYnBnIjogIl4xLjAuMCIsCiAgICAib2wiOiAiXjYuMTUuMSIsCiAgICAib2wtbGF5ZXJzd2l0Y2hlciI6ICJodHRwczovL2dpdGh1Yi5jb20vd2Fsa2VybWF0dC9vbC1sYXllcnN3aXRjaGVyIiwKICAgICJvcGVubGF5ZXJzLWV4dCI6ICJeMy4xLjUiLAogICAgInByZWFjdCI6ICJeMTAiLAogICAgInByZWFjdC1jb21wYXQiOiAiXjMiLAogICAgInByZWFjdC1jb250ZXh0IjogIl4xLjEuNCIsCiAgICAicHJlYWN0LXJlbmRlci10by1zdHJpbmciOiAiXjUuMS4xOSIsCiAgICAicHJlYWN0LXNzci1wcmVwYXNzIjogIl4xIiwKICAgICJwcm9taXNpZnktY2hpbGQtcHJvY2VzcyI6ICJeNC4xLjEiLAogICAgInJlYWN0IjogIl4xOC4yLjAiLAogICAgInJlYWN0LWRvbSI6ICJeMTguMi4wIiwKICAgICJyZWFjdC1zb3J0YWJsZS1ob2MiOiAiXjIuMC4wIiwKICAgICJyZWFjdC11cGxvYWQtZ2FsbGVyeSI6ICJeMC40LjEiLAogICAgInJlZ2VuZXJhdG9yLXJ1bnRpbWUiOiAiXjAuMTMuOSIsCiAgICAic2VyaWFscG9ydCI6ICJeOS4wLjEiLAogICAgInVwcGllIjogIl4xLjEuNCIsCiAgICAid3MiOiAiXjcuMy4xIgogIH0sCiAgIm9sZERlcHMiOiB7CiAgICAiQGRlcXVlL2RvdCI6ICJeMS4xLjUiLAogICAgIkBzZXJpYWxwb3J0L2JpbmRpbmdzIjogIl45LjAuMiIsCiAgICAiQHNlcmlhbHBvcnQvc3RyZWFtIjogIl45LjAuMSIsCiAgICAicHJlYWN0LWZsdWlkIjogIl4wLjkuMSIsCiAgICAic29ydC1vcmRlciI6ICJeMS4wLjEiLAogICAgImNvbHVtbmlmeSI6ICJeMS41LjQiLAogICAgImNyb3NzLXNwYXduIjogIl43LjAuMyIsCiAgICAiY29kZWphciI6ICJodHRwczovL2dpdGh1Yi5jb20vYW50b25tZWR2L2NvZGVqYXIiLAogICAgImppc29uLWVzIjogIl4wLjQuMTgiLAogICAgIndhc20tbG9hZGVyIjogIl4xLjMuMCIsCiAgICAiaGlnaGxpZ2h0anMiOiAiXjkuMTYuMiIsCiAgICAiaGlnaGxpZ2h0anMtbGluZS1udW1iZXJzLmpzIjogIl4yLjguMCIsCiAgICAibm9kZS1kZWJ1Z3Byb3RvY29sLWNsaWVudCI6ICJeMC4xLjEiLAogICAgIm5vZGUtZXhjZXB0aW9ucyI6ICJeNC4wLjEiLAogICAgInNjLXJhbmRvbSI6ICJeMS4wLjAiLAogICAgIm9wZW50eXBlIjogIl4wLjEuMiIsCiAgICAiYmFzaC1wYXJzZXIiOiAiXjAuNS4wIiwKICAgICJjLWFzdCI6ICJeMS4wLjAiLAogICAgImNsYXJpZnkiOiAiXjIuMS4wIiwKICAgICJsZWJhYiI6ICJeMy4xLjAiLAogICAgImxleCI6ICJeMS43LjkiLAogICAgInByZWFjdC10cmFuc2l0aW9uLWdyb3VwIjogIl4yLjAuMCIsCiAgICAidXNlcnNjcmlwdC1idWlsZGVyIjogIl4wLjMuMCIsCiAgICAicmVhY3QtcHJpc20tZWRpdG9yIjogImh0dHBzOi8vZ2l0aHViLmNvbS9sdW1pYTIwNDYvcmVhY3QtcHJpc20tZWRpdG9yIiwKICAgICJyZWFjdC1zaW1wbGUtY29kZS1lZGl0b3IiOiAiXjAuMTEuMCIsCiAgICAicHJpc20tcmVhY3QtcmVuZGVyZXIiOiAiXjEuMi4xIiwKICAgICJmZXRjaC13aXRoLXByb3h5IjogIl4zLjAuMSIsCiAgICAiZnJlZS1wcm94eSI6ICJeMC4xLjYiLAogICAgInByb3h5bm92YSI6ICJeMC4xLjAiCiAgfSwKICAiZGVzY3JpcHRpb24iOiAiIiwKICAiZGV2RGVwZW5kZW5jaWVzIjogewogICAgIkBiYWJlbC9jb3JlIjogIl43LjAuMC0wIiwKICAgICJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLWNsYXNzLXByb3BlcnRpZXMiOiAiXjcuNC40IiwKICAgICJAYmFiZWwvcGx1Z2luLXN5bnRheC1jbGFzcy1wcm9wZXJ0aWVzIjogIl43LjIuMCIsCiAgICAiQGJhYmVsL3BsdWdpbi10cmFuc2Zvcm0tcnVudGltZSI6ICJeNy4xNy4wIiwKICAgICJAYmFiZWwvcG9seWZpbGwiOiAiXjcuNC40IiwKICAgICJAYmFiZWwvcHJlc2V0LWVudiI6ICJeNy40LjUiLAogICAgIkBiYWJlbC9wcmVzZXQtcmVhY3QiOiAiXjcuMC4wIiwKICAgICJhY29ybiI6ICJeOC4xLjEiLAogICAgImFuc2ktY29sb3JzIjogIl40LjEuMSIsCiAgICAiYW5zaS1lc2NhcGVzIjogIl40LjMuMSIsCiAgICAiYXN0cmluZyI6ICJeMS43LjQiLAogICAgImJhYmVsLWVzbGludCI6ICJeMTAuMC4xIiwKICAgICJiYWJlbC1ub2RlIjogIl4wLjAuMS1zZWN1cml0eSIsCiAgICAiYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1jb21tb25qcyI6ICJeMS4xLjYiLAogICAgImJhYmVsLXByZXNldC1wcmVhY3QiOiAiXjIuMC4wIiwKICAgICJlc2xpbnQiOiAiXjguMTQuMCIsCiAgICAiZnJlZS1wcm94eSI6ICJeMC4yLjAiLAogICAgImh0dHAiOiAiMC4wLjAiLAogICAgInByb3h5LWxpc3RzIjogImh0dHBzOi8vZ2l0aHViLmNvbS9jaGlsbDExNy9wcm94eS1saXN0cyIsCiAgICAicHJveHlub3ZhIjogIl4wLjEuMCIsCiAgICAid2VicGFjayI6ICJeNS43Mi4wIiwKICAgICJ3ZWJwYWNrLWNsaSI6ICJeNC45LjIiLAogICAgIndlYnBhY2stZGV2LXNlcnZlciI6ICJeNC44LjEiCiAgfSwKICAiZW5naW5lcyI6IHsKICAgICJub2RlIjogIj49IDE0IgogIH0sCiAgImVzbGludENvbmZpZyI6IHsKICAgICJleHRlbmRzIjogWwogICAgICAiLi9ub2RlX21vZHVsZXMvQHMtdWkvbGludC9lc2xpbnRyYy5qcyIKICAgIF0KICB9LAogICJodXNreSI6IHsKICAgICJob29rcyI6IHsKICAgICAgInByZS1jb21taXQiOiAibGludC1zdGFnZWQiCiAgICB9CiAgfSwKICAibGludC1zdGFnZWQiOiB7CiAgICAiKi57anMsanN4fSI6IFsKICAgICAgImVzbGludCAuIC0tZXh0IC5qcyAtLWV4dCAuanN4IC0taWdub3JlLXBhdGggLmVzbGludGlnbm9yZSAtLWZpeCIsCiAgICAgICJnaXQgYWRkIgogICAgXQogIH0sCiAgIm1haW4iOiAic2VydmVyLmpzIiwKICAibmFtZSI6ICJwbG90LWN2IiwKICAicHJldHRpZXIiOiAiLi9ub2RlX21vZHVsZXMvQHMtdWkvbGludC8ucHJldHRpZXJyYy5qcyIsCiAgInNjcmlwdHMiOiB7CiAgICAiYnVpbGQiOiAid2VicGFjayAtLWNvbmZpZyB3ZWJwYWNrLmNvbmZpZy5qcyIsCiAgICAiZGVwbG95IjogIm5vdyAtLXRhcmdldCBwcm9kdWN0aW9uIiwKICAgICJsaW50IjogImVzbGludCAuIC0tZXh0IC5qcyAtLWV4dCAuanN4IC0taWdub3JlLXBhdGggLmVzbGludGlnbm9yZSAtLWZpeCIsCiAgICAibm93LWJ1aWxkIjogIm5leHQgYnVpbGQiLAogICAgInNlcnZlciI6ICJlbnYgUE9SVD0zMDAwIG5vZGVtb24gLS1leHBlcmltZW50YWwtbW9kdWxlcyAtdyBzZXJ2ZXIuanMgc2VydmVyLmpzIiwKICAgICJzdGFydCI6ICJuZXh0IHN0YXJ0IgogIH0sCiAgInN0eWxlbGludCI6IHsKICAgICJleHRlbmRzIjogIi4vbm9kZV9tb2R1bGVzL0BzLXVpL2xpbnQvc3R5bGVsaW50LmNvbmZpZy5qcyIKICB9LAogICJ1c2Vyc2NyaXB0IjogewogICAgImRldiI6ICIuL3RtcCIsCiAgICAiZW50cnkiOiAiLi91c2Vyc2NyaXB0LXRlc3QuanMiLAogICAgImZpbGVOYW1lIjogImxpYiIsCiAgICAibWV0YSI6IHsKICAgICAgImdyYW50IjogIm5vbmUiLAogICAgICAiaG9tZXBhZ2UiOiAiaHR0cHM6Ly9vcGVudXNlcmpzLm9yZy9zY3JpcHRzL3ZhNG9rIiwKICAgICAgIm1hdGNoIjogIio6Ly8qLioiLAogICAgICAibmFtZSI6ICJNeSBsaWIiLAogICAgICAibmFtZXNwYWNlIjogImh0dHA6Ly90YW1wZXJtb25rZXkubmV0LyIsCiAgICAgICJyZXF1aXJlIjogWwogICAgICAgICJodHRwczovL3NvbWUudXJsLjEiLAogICAgICAgICJodHRwczovL3NvbWUudXJsLjIiCiAgICAgIF0KICAgIH0sCiAgICAicmVsZWFzZSI6ICIuL2RhdGEiCiAgfSwKICAidmVyc2lvbiI6ICIxLjAuMCIKfQoAAAAAAAAAAPQWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AMAAAAAAAD0AwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/geom/point.js",
			"settings":
			{
				"buffer_size": 10488,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"cut",
					null,
					"AQAAANMWAAAAAAAA0xYAAAAAAACQAAAAZGVmaW5lR2V0dGVyKFBvaW50LnByb3RvdHlwZSwgU3ltYm9sLml0ZXJhdG9yLCBmdW5jdGlvbigpIHsKICBjb25zdCB7IHgsIHkgfSA9IHRoaXM7CiAgbGV0IGEgPSBbeCwgeV07CiAgcmV0dXJuIGFbU3ltYm9sLml0ZXJhdG9yXS5iaW5kKGEpOwp9KTsK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMWAAAAAAAAYxcAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAANIWAAAAAAAA0hYAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMWAAAAAAAA0xYAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAGUZAAAAAAAA9RkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUZAAAAAAAAZRkAAAAAAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"cut",
					null,
					"AQAAAGUZAAAAAAAAZRkAAAAAAAC/AAAAZGVmaW5lR2V0dGVyKFBvaW50LnByb3RvdHlwZSwgU3ltYm9sLml0ZXJhdG9yLCBmdW5jdGlvbigpIHsKICBjb25zdCB7IHgsIHkgfSA9IHRoaXM7CiAgbGV0IGEgPSBbeCwgeV07CiAgcmV0dXJuIGFbU3ltYm9sLml0ZXJhdG9yXS5iaW5kKGEpOwp9KTsKUG9pbnQucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnUG9pbnQnOwo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUZAAAAAAAAJBoAAAAAAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABYiAAAAAAAAFyIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYiAAAAAAAAFiIAAAAAAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"paste",
					null,
					"AQAAABciAAAAAAAA1iIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABciAAAAAAAAFyIAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAIAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAACCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAGB4QA"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "define"
					},
					"BgAAAAEIAAAAAAAAAggAAAAAAAAAAAAAAggAAAAAAAADCAAAAAAAAAAAAAADCAAAAAAAAAQIAAAAAAAAAAAAAAQIAAAAAAAABQgAAAAAAAAAAAAABQgAAAAAAAAGCAAAAAAAAAAAAAAGCAAAAAAAAAcIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEIAAAAAAAAAQgAAAAAAAAAAAAAAAAAAA"
				],
				[
					46,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAcIAAAAAAAACQgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcIAAAAAAAABwgAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "Point.prototype"
					},
					"DwAAAAgIAAAAAAAACQgAAAAAAAAAAAAACQgAAAAAAAAKCAAAAAAAAAAAAAAKCAAAAAAAAAsIAAAAAAAAAAAAAAsIAAAAAAAADAgAAAAAAAAAAAAADAgAAAAAAAANCAAAAAAAAAAAAAANCAAAAAAAAA4IAAAAAAAAAAAAAA4IAAAAAAAADwgAAAAAAAAAAAAADwgAAAAAAAAQCAAAAAAAAAAAAAAQCAAAAAAAABEIAAAAAAAAAAAAABEIAAAAAAAAEggAAAAAAAAAAAAAEggAAAAAAAATCAAAAAAAAAAAAAATCAAAAAAAABQIAAAAAAAAAAAAABQIAAAAAAAAFQgAAAAAAAAAAAAAFQgAAAAAAAAWCAAAAAAAAAAAAAAWCAAAAAAAABcIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgIAAAAAAAACAgAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABcIAAAAAAAAGAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcIAAAAAAAAFwgAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABgIAAAAAAAAGQgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgIAAAAAAAAGAgAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABkIAAAAAAAAGwgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"",
					null,
					"AQAAABoIAAAAAAAAYB4AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoIAAAAAAAAGggAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\n\n\n\n"
					},
					"BAAAAGAeAAAAAAAAYR4AAAAAAAAAAAAAYR4AAAAAAABiHgAAAAAAAAAAAABiHgAAAAAAAGMeAAAAAAAAAAAAAGMeAAAAAAAAZB4AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGAeAAAAAAAAYB4AAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGYeAAAAAAAAZx4AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYeAAAAAAAAZh4AAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGceAAAAAAAAaB4AAAAAAAAAAAAAaB4AAAAAAABpHgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGceAAAAAAAAZx4AAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"right_delete",
					null,
					"AQAAAGkeAAAAAAAAaR4AAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkeAAAAAAAAaR4AAAAAAAAAAAAAAAAAAA"
				],
				[
					72,
					1,
					"left_delete",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoeAAAAAAAAfTgAAAAAAAAAAAAAAAAkQA"
				],
				[
					73,
					2,
					"right_delete",
					null,
					"AgAAAGoeAAAAAAAAah4AAAAAAAABAAAAO2oeAAAAAAAAah4AAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoeAAAAAAAAah4AAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGoeAAAAAAAAax4AAAAAAAAAAAAAax4AAAAAAABsHgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoeAAAAAAAAah4AAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGweAAAAAAAAbB4AAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL8fAAAAAAAAwB8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8fAAAAAAAAvx8AAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					2,
					"left_delete",
					null,
					"AgAAAL8fAAAAAAAAvx8AAAAAAAABAAAAIL4fAAAAAAAAvh8AAAAAAAABAAAAfQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMAfAAAAAAAAwB8AAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "},"
					},
					"AgAAAL4fAAAAAAAAvx8AAAAAAAAAAAAAvx8AAAAAAADAHwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4fAAAAAAAAvh8AAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMAfAAAAAAAAwR8AAAAAAAAAAAAAwR8AAAAAAADDHwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMAfAAAAAAAAwB8AAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"paste",
					null,
					"AQAAAMMfAAAAAAAAPSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMfAAAAAAAAwx8AAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "[insp"
					},
					"BQAAAMMfAAAAAAAAxB8AAAAAAAAAAAAAxB8AAAAAAADFHwAAAAAAAAAAAADFHwAAAAAAAMYfAAAAAAAAAAAAAMYfAAAAAAAAxx8AAAAAAAAAAAAAxx8AAAAAAADIHwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMfAAAAAAAAwx8AAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					8,
					"right_delete",
					null,
					"CAAAAMgfAAAAAAAAyB8AAAAAAAABAAAAZsgfAAAAAAAAyB8AAAAAAAABAAAAdcgfAAAAAAAAyB8AAAAAAAABAAAAbsgfAAAAAAAAyB8AAAAAAAABAAAAY8gfAAAAAAAAyB8AAAAAAAABAAAAdMgfAAAAAAAAyB8AAAAAAAABAAAAacgfAAAAAAAAyB8AAAAAAAABAAAAb8gfAAAAAAAAyB8AAAAAAAABAAAAbg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgfAAAAAAAAyB8AAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "ect"
					},
					"AwAAAMgfAAAAAAAAyR8AAAAAAAAAAAAAyR8AAAAAAADKHwAAAAAAAAAAAADKHwAAAAAAAMsfAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgfAAAAAAAAyB8AAAAAAAAAAAAAAADwvw"
				],
				[
					110,
					1,
					"insert_completion",
					{
						"completion": "inspectSymbol",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "inspectSymbol"
					},
					"AgAAAMQfAAAAAAAAxB8AAAAAAAAHAAAAaW5zcGVjdMQfAAAAAAAA0R8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsfAAAAAAAAyx8AAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAANEfAAAAAAAA0h8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEfAAAAAAAA0R8AAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"left_delete",
					null,
					"AQAAAEIgAAAAAAAAQiAAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMgAAAAAAAAQyAAAAAAAAAAAAAAAEBlQA"
				],
				[
					117,
					1,
					"left_delete",
					null,
					"AQAAAEIgAAAAAAAAQiAAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMgAAAAAAAAQyAAAAAAAAAAAAAAAAAkQA"
				],
				[
					128,
					1,
					"right_delete",
					null,
					"AQAAAC4nAAAAAAAALicAAAAAAACbAAAAUG9pbnQucHJvdG90eXBlW2luc3BlY3RTeW1ib2xdID0gZnVuY3Rpb24oZGVwdGgsIG9wdGlvbnMpIHsKICBjb25zdCB7IHgsIHkgfSA9IHRoaXM7CiAgcmV0dXJuIC8qT2JqZWN0LnNldFByb3RvdHlwZU9mKi8geyB4LCB5IH0gLyosIFBvaW50LnByb3RvdHlwZSovOwp9Owo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4nAAAAAAAAyScAAAAAAAAAAAAAAAAAAA"
				],
				[
					134,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFspAAAAAAAAWykAAAAAAAAAAAAAAAAAAA"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAN0gAAAAAAAA3iAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0gAAAAAAAA3SAAAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"cut",
					null,
					"AQAAAO8gAAAAAAAA7yAAAAAAAAASAAAAU3ltYm9sLnRvU3RyaW5nVGFn",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8gAAAAAAAAASEAAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"paste",
					null,
					"AQAAAO8gAAAAAAAAASEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8gAAAAAAAA7yAAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEggAAAAAAAASSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEggAAAAAAAASCAAAAAAAAAAAAAAAADwvw"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEkgAAAAAAAASiAAAAAAAAAAAAAASiAAAAAAAABMIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkgAAAAAAAASSAAAAAAAAAAAAAAAADwvw"
				],
				[
					175,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEwgAAAAAAAATiAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwgAAAAAAAATCAAAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"paste",
					null,
					"AQAAAE0gAAAAAAAAXyAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0gAAAAAAAATSAAAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAGAgAAAAAAAAYSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGAgAAAAAAAAYCAAAAAAAAAAAAAAAADwvw"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEgAAAAAAAAYiAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEgAAAAAAAAYSAAAAAAAAAAAAAAAADwvw"
				],
				[
					180,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAGIgAAAAAAAAZCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIgAAAAAAAAYiAAAAAAAAAAAAAAAADwvw"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "Pointr"
					},
					"BgAAAGMgAAAAAAAAZCAAAAAAAAAAAAAAZCAAAAAAAABlIAAAAAAAAAAAAABlIAAAAAAAAGYgAAAAAAAAAAAAAGYgAAAAAAAAZyAAAAAAAAAAAAAAZyAAAAAAAABoIAAAAAAAAAAAAABoIAAAAAAAAGkgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMgAAAAAAAAYyAAAAAAAAAAAAAAAADwvw"
				],
				[
					183,
					2,
					"left_delete",
					null,
					"AgAAAGkgAAAAAAAAaSAAAAAAAAABAAAAJ2ggAAAAAAAAaCAAAAAAAAABAAAAcg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGogAAAAAAAAaiAAAAAAAAAAAAAAAADwvw"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAGggAAAAAAAAaSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGggAAAAAAAAaCAAAAAAAAAAAAAAAADwvw"
				],
				[
					190,
					1,
					"cut",
					null,
					"AQAAAAAhAAAAAAAAACEAAAAAAAAwAAAAUG9pbnQucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnUG9pbnQnOwoK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAhAAAAAAAAMCEAAAAAAAAAAAAAAAAAAA"
				],
				[
					274,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAP8HAAAAAAAAAQgAAAAAAAAAAAAAbAcAAAAAAABuBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8HAAAAAAAAbAcAAAAAAAAAAAAAAAAAAA"
				],
				[
					289,
					16,
					"right_delete",
					null,
					"EAAAALAZAAAAAAAAsBkAAAAAAAABAAAAULAZAAAAAAAAsBkAAAAAAAABAAAAb7AZAAAAAAAAsBkAAAAAAAABAAAAabAZAAAAAAAAsBkAAAAAAAABAAAAbrAZAAAAAAAAsBkAAAAAAAABAAAAdLAZAAAAAAAAsBkAAAAAAAABAAAALrAZAAAAAAAAsBkAAAAAAAABAAAAcLAZAAAAAAAAsBkAAAAAAAABAAAAcrAZAAAAAAAAsBkAAAAAAAABAAAAb7AZAAAAAAAAsBkAAAAAAAABAAAAdLAZAAAAAAAAsBkAAAAAAAABAAAAb7AZAAAAAAAAsBkAAAAAAAABAAAAdLAZAAAAAAAAsBkAAAAAAAABAAAAebAZAAAAAAAAsBkAAAAAAAABAAAAcLAZAAAAAAAAsBkAAAAAAAABAAAAZbAZAAAAAAAAsBkAAAAAAAABAAAALg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAZAAAAAAAAsBkAAAAAAAAAAAAAAADwvw"
				],
				[
					291,
					9,
					"right_delete",
					null,
					"CQAAALoZAAAAAAAAuhkAAAAAAAABAAAAILoZAAAAAAAAuhkAAAAAAAABAAAAZroZAAAAAAAAuhkAAAAAAAABAAAAdboZAAAAAAAAuhkAAAAAAAABAAAAbroZAAAAAAAAuhkAAAAAAAABAAAAY7oZAAAAAAAAuhkAAAAAAAABAAAAdLoZAAAAAAAAuhkAAAAAAAABAAAAaboZAAAAAAAAuhkAAAAAAAABAAAAb7oZAAAAAAAAuhkAAAAAAAABAAAAbg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoZAAAAAAAAuhkAAAAAAAAAAAAAAADwvw"
				],
				[
					292,
					2,
					"left_delete",
					null,
					"AgAAALkZAAAAAAAAuRkAAAAAAAABAAAAPbgZAAAAAAAAuBkAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoZAAAAAAAAuhkAAAAAAAAAAAAAAADwvw"
				],
				[
					294,
					1,
					"left_delete",
					null,
					"AQAAAKoZAAAAAAAAqhkAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsZAAAAAAAAqxkAAAAAAAAAAAAAAABeQA"
				],
				[
					297,
					1,
					"left_delete",
					null,
					"AQAAAO0ZAAAAAAAA7RkAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4ZAAAAAAAA7hkAAAAAAAAAAAAAAADwvw"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAO0ZAAAAAAAA7hkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0ZAAAAAAAA7RkAAAAAAAAAAAAAAADwvw"
				],
				[
					303,
					1,
					"cut",
					null,
					"AQAAAK0ZAAAAAAAArRkAAAAAAABDAAAALyp0b1NvdXJjZSgpIHsKICByZXR1cm4gJ3t4OicgKyB0aGlzLnggKyAnLHk6JyArIHRoaXMueSArICd9JzsKfSwqLw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0ZAAAAAAAA8BkAAAAAAAAAAAAAAADwvw"
				],
				[
					308,
					1,
					"paste",
					null,
					"AQAAAGgfAAAAAAAAqx8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgfAAAAAAAAaB8AAAAAAAAAAAAAAAA0QA"
				],
				[
					313,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKsfAAAAAAAArB8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsfAAAAAAAAqx8AAAAAAAAAAAAAAADwvw"
				],
				[
					316,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA7KQAAaW1wb3J0IHsgYmluZFByb3BlcnRpZXMsIGNsYW1wLCBkZWZpbmVHZXR0ZXIsIGltbXV0YWJsZUNsYXNzLCBpbnNwZWN0U3ltYm9sLCBpc09iamVjdCwgcm91bmREaWdpdHMsIHJvdW5kVG8sIHRyeUNhdGNoIH0gZnJvbSAnLi4vbWlzYy5qcyc7Cgpjb25zdCBTeW1TcGVjaWVzID0gdHJ5Q2F0Y2goCiAgKCkgPT4gU3ltYm9sLAogIHN5bSA9PiBzeW0uc3BlY2llcwopOwoKY29uc3QgQ1RPUiA9IG9iaiA9PiB7CiAgaWYob2JqW1N5bVNwZWNpZXNdKSByZXR1cm4gb2JqW1N5bVNwZWNpZXNdOwogIGxldCBwID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7CiAgaWYocFtTeW1TcGVjaWVzXSkgcmV0dXJuIHBbU3ltU3BlY2llc107CiAgcmV0dXJuIHAuY29uc3RydWN0b3I7Cn07CgpleHBvcnQgZnVuY3Rpb24gUG9pbnQoLi4uYXJncykgewogIGxldCBpc05ldyA9IHRoaXMgaW5zdGFuY2VvZiBQb2ludDsKICBhcmdzID0gYXJnc1swXSBpbnN0YW5jZW9mIEFycmF5ID8gYXJncy5zaGlmdCgpIDogYXJnczsKICBsZXQgcCA9IGlzTmV3ID8gdGhpcyA6IG5ldyBQb2ludCguLi5hcmdzKTsKICBsZXQgYXJnID0gYXJncy5zaGlmdCgpOwoKICBpZighbmV3LnRhcmdldCkgaWYgKGFyZyBpbnN0YW5jZW9mIFBvaW50KSByZXR1cm4gYXJnOwoKICBpZih0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJykgewogICAgcC54ID0gYXJnOwogICAgcC55ID0gYXJncy5zaGlmdCgpOwogIH0gZWxzZSBpZih0eXBlb2YgYXJnID09PSAnbnVtYmVyJykgewogICAgcC54ID0gcGFyc2VGbG9hdChhcmcpOwogICAgcC55ID0gcGFyc2VGbG9hdChhcmdzLnNoaWZ0KCkpOwogIH0gZWxzZSBpZih0eXBlb2YgYXJnID09PSAnc3RyaW5nJykgewogICAgY29uc3QgbWF0Y2hlcyA9IFsuLi5hcmcubWF0Y2hBbGwoLyhbLStdP2QqLj9kKykoPzpbZUVdKFstK10/ZCspKT8vZyldOwoKICAgIHAueCA9IHBhcnNlRmxvYXQobWF0Y2hlc1swXSk7CiAgICBwLnkgPSBwYXJzZUZsb2F0KG1hdGNoZXNbMV0pOwogIH0gZWxzZSBpZih0eXBlb2YgYXJnID09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbCAmJiAoYXJnLnggIT09IHVuZGVmaW5lZCB8fCBhcmcueSAhPT0gdW5kZWZpbmVkKSkgewogICAgcC54ID0gYXJnLng7CiAgICBwLnkgPSBhcmcueTsKICB9IGVsc2UgaWYodHlwZW9mIGFyZyA9PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGwgJiYgYXJnLmxlbmd0aCA+IDAgJiYgeCAhPT0gdW5kZWZpbmVkICYmIHkgIT09IHVuZGVmaW5lZCkgewogICAgcC54ID0gcGFyc2VGbG9hdChhcmcuc2hpZnQoKSk7CiAgICBwLnkgPSBwYXJzZUZsb2F0KGFyZy5zaGlmdCgpKTsKICB9IGVsc2UgaWYodHlwZW9mIGFyZ3NbMF0gPT09ICdudW1iZXInICYmIHR5cGVvZiBhcmdzWzFdID09PSAnbnVtYmVyJykgewogICAgcC54ID0gYXJnc1swXTsKICAgIHAueSA9IGFyZ3NbMV07CiAgICBhcmdzLnNoaWZ0KDIpOwogIH0gZWxzZSB7CiAgICBwLnggPSAwOwogICAgcC55ID0gMDsKICB9CiAgaWYocC54ID09PSB1bmRlZmluZWQpIHAueCA9IDA7CiAgaWYocC55ID09PSB1bmRlZmluZWQpIHAueSA9IDA7CiAgaWYoaXNOYU4ocC54KSkgcC54ID0gdW5kZWZpbmVkOwogIGlmKGlzTmFOKHAueSkpIHAueSA9IHVuZGVmaW5lZDsKCiAgaWYoIWlzTmV3KSB7CiAgICAvKiBpZihwLnByb3RvdHlwZSA9PSBPYmplY3QpIHAucHJvdG90eXBlID0gUG9pbnQucHJvdG90eXBlOwogICAgZWxzZSBPYmplY3QuYXNzaWduKHAsIFBvaW50LnByb3RvdHlwZSk7Ki8KICAgIHJldHVybiBwOwogIH0KfQoKUG9pbnQuZ2V0T3RoZXIgPSBhcmdzID0+IChjb25zb2xlLmRlYnVnKCdnZXRPdGhlcicsIC4uLmFyZ3MpLCB0eXBlb2YgYXJnc1swXSA9PSAnbnVtYmVyJyA/IFt7IHg6IGFyZ3NbMF0sIHk6IGFyZ3NbMV0gfV0gOiBhcmdzKTsKCi8qT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUG9pbnQucHJvdG90eXBlLCB7CiAgWDogewogICAgZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy54OwogICAgfQogIH0sCiAgWTogewogICAgZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy55OwogICAgfQogIH0KfSk7Ki8KCmRlZmluZShQb2ludC5wcm90b3R5cGUsIHsKICBtb3ZlKHgsIHkpIHsKICAgIHRoaXMueCArPSB4OwogICAgdGhpcy55ICs9IHk7CiAgICByZXR1cm4gdGhpczsKICB9LAogIG1vdmVUbyh4LCB5KSB7CiAgICB0aGlzLnggPSB4OwogICAgdGhpcy55ID0geTsKICAgIHJldHVybiB0aGlzOwogIH0sCiAgY2xlYXIoeCwgeSkgewogICAgdGhpcy54ID0gMDsKICAgIHRoaXMueSA9IDA7CiAgICByZXR1cm4gdGhpczsKICB9LAogIHNldChmbikgewogICAgaWYodHlwZW9mIGZuICE9ICdmdW5jdGlvbicpIHsKICAgICAgUG9pbnQuYXBwbHkodGhpcywgWy4uLmFyZ3VtZW50c10pOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIHJldHVybiBmbih0aGlzLngsIHRoaXMueSk7CiAgfSwKICBjbG9uZSgpIHsKICAgIGNvbnN0IGN0b3IgPSB0aGlzW1N5bWJvbC5zcGVjaWVzXSB8fCB0aGlzLmNvbnN0cnVjdG9yW1N5bWJvbC5zcGVjaWVzXTsKCiAgICByZXR1cm4gbmV3IGN0b3IoeyB4OiB0aGlzLngsIHk6IHRoaXMueSB9KTsKICB9LAogIHN1bSguLi5hcmdzKSB7CiAgICBjb25zdCBwID0gbmV3IFBvaW50KC4uLmFyZ3MpOwogICAgbGV0IHIgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLngsIHRoaXMueSk7CiAgICByLnggKz0gcC54OwogICAgci55ICs9IHAueTsKICAgIHJldHVybiByOwogIH0sCiAgYWRkKC4uLmFyZ3MpIHsKICAgIGNvbnN0IG90aGVyID0gbmV3IFBvaW50KC4uLmFyZ3MpOwogICAgdGhpcy54ICs9IG90aGVyLng7CiAgICB0aGlzLnkgKz0gb3RoZXIueTsKICAgIHJldHVybiB0aGlzOwogIH0sCiAgZGlmZihhcmcpIHsKICAgIGxldCB7IHgsIHkgfSA9IHRoaXM7CiAgICBsZXQgZm4gPSBmdW5jdGlvbihvdGhlcikgewogICAgICBsZXQgciA9IG5ldyBQb2ludCh4LCB5KTsKICAgICAgcmV0dXJuIHIuc3ViKG90aGVyKTsKICAgIH07CiAgICBpZihhcmcpIHJldHVybiBmbihhcmcpOwogICAgcmV0dXJuIGZuOwogIH0sCiAgc3ViKC4uLmFyZ3MpIHsKICAgIGNvbnN0IG90aGVyID0gbmV3IFBvaW50KC4uLmFyZ3MpOwogICAgdGhpcy54IC09IG90aGVyLng7CiAgICB0aGlzLnkgLT0gb3RoZXIueTsKICAgIHJldHVybiB0aGlzOwogIH0sCiAgcHJvZChmKSB7CiAgICBjb25zdCBvID0gaXNQb2ludChmKSA/IGYgOiB7IHg6IGYsIHk6IGYgfTsKICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54ICogby54LCB0aGlzLnkgKiBvLnkpOwogIH0sCiAgbXVsKGYpIHsKICAgIGNvbnN0IG8gPSBpc1BvaW50KGYpID8gZiA6IHsgeDogZiwgeTogZiB9OwogICAgdGhpcy54ICo9IG8ueDsKICAgIHRoaXMueSAqPSBvLnk7CiAgICByZXR1cm4gdGhpczsKICB9LAogIHF1b3Qob3RoZXIpIHsKICAgIG90aGVyID0gaXNQb2ludChvdGhlcikgPyBvdGhlciA6IHsgeDogb3RoZXIsIHk6IG90aGVyIH07CiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAvIG90aGVyLngsIHRoaXMueSAvIG90aGVyLnkpOwogIH0sCiAgZGl2KG90aGVyKSB7CiAgICBvdGhlciA9IGlzUG9pbnQob3RoZXIpID8gb3RoZXIgOiB7IHg6IG90aGVyLCB5OiBvdGhlciB9OwogICAgdGhpcy54IC89IG90aGVyLng7CiAgICB0aGlzLnkgLz0gb3RoZXIueTsKICAgIHJldHVybiB0aGlzOwogIH0sCiAgY29tcCgpIHsKICAgIHJldHVybiBuZXcgUG9pbnQoeyB4OiAtdGhpcy54LCB5OiAtdGhpcy55IH0pOwogIH0sCiAgbmVnKCkgewogICAgdGhpcy54ICo9IC0xOwogICAgdGhpcy55ICo9IC0xOwogICAgcmV0dXJuIHRoaXM7CiAgfSwKICBkaXN0YW5jZVNxdWFyZWQob3RoZXIgPSB7IHg6IDAsIHk6IDAgfSkgewogICAgcmV0dXJuIChvdGhlci55IC0gdGhpcy55KSAqIChvdGhlci55IC0gdGhpcy55KSArIChvdGhlci54IC0gdGhpcy54KSAqIChvdGhlci54IC0gdGhpcy54KTsKICB9LAogIGRpc3RhbmNlKG90aGVyID0geyB4OiAwLCB5OiAwIH0pIHsKICAgIHJldHVybiBNYXRoLnNxcnQoUG9pbnQucHJvdG90eXBlLmRpc3RhbmNlU3F1YXJlZC5jYWxsKHRoaXMsIFBvaW50KG90aGVyKSkpOwogIH0sCiAgZXF1YWxzKG90aGVyKSB7CiAgICBsZXQgeyB4LCB5IH0gPSB0aGlzOwogICAgcmV0dXJuICt4ID09ICtvdGhlci54ICYmICt5ID09ICtvdGhlci55OwogIH0sCiAgcm91bmQocHJlY2lzaW9uID0gMC4wMDEsIGRpZ2l0cywgdHlwZSkgewogICAgbGV0IHsgeCwgeSB9ID0gdGhpczsKICAgIGRpZ2l0cyA9IGRpZ2l0cyB8fCByb3VuZERpZ2l0cyhwcmVjaXNpb24pOwogICAgdHlwZSA9IHR5cGUgfHwgJ3JvdW5kJzsKICAgIHRoaXMueCA9IHJvdW5kVG8oeCwgcHJlY2lzaW9uLCBkaWdpdHMsIHR5cGUpOwogICAgdGhpcy55ID0gcm91bmRUbyh5LCBwcmVjaXNpb24sIGRpZ2l0cywgdHlwZSk7CiAgICByZXR1cm4gdGhpczsKICB9LAogIGNlaWwoKSB7CiAgICBsZXQgeyB4LCB5IH0gPSB0aGlzOwogICAgdGhpcy54ID0gTWF0aC5jZWlsKHgpOwogICAgdGhpcy55ID0gTWF0aC5jZWlsKHkpOwogICAgcmV0dXJuIHRoaXM7CiAgfSwKICBmbG9vcigpIHsKICAgIGxldCB7IHgsIHkgfSA9IHRoaXM7CiAgICB0aGlzLnggPSBNYXRoLmZsb29yKHgpOwogICAgdGhpcy55ID0gTWF0aC5mbG9vcih5KTsKICAgIHJldHVybiB0aGlzOwogIH0sCgogIGRvdChvdGhlcikgewogICAgcmV0dXJuIHRoaXMueCAqIG90aGVyLnggKyB0aGlzLnkgKiBvdGhlci55OwogIH0sCgogIHZhbHVlcygpIHsKICAgIHJldHVybiBbdGhpcy54LCB0aGlzLnldOwogIH0sCiAgZnJvbUFuZ2xlKGFuZ2xlLCBkaXN0ID0gMS4wKSB7CiAgICB0aGlzLnggPSBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0OwogICAgdGhpcy55ID0gTWF0aC5zaW4oYW5nbGUpICogZGlzdDsKICAgIHJldHVybiB0aGlzOwogIH0sCiAgdG9BbmdsZShkZWcgPSBmYWxzZSkgewogICAgcmV0dXJuIE1hdGguYXRhbjIodGhpcy54LCB0aGlzLnkpICogKGRlZyA/IDE4MCAvIE1hdGguUEkgOiAxKTsKICB9LAogIGFuZ2xlKG90aGVyLCBkZWcgPSBmYWxzZSkgewogICAgb3RoZXIgPSBvdGhlciB8fCB7IHg6IDAsIHk6IDAgfTsKICAgIHJldHVybiBQb2ludC5wcm90b3R5cGUuZGlmZi5jYWxsKHRoaXMsIG90aGVyKS50b0FuZ2xlKGRlZyk7CiAgfSwKICByb3RhdGUoYW5nbGUsIG9yaWdpbiA9IHsgeDogMCwgeTogMCB9KSB7CiAgICB0aGlzLnggLT0gb3JpZ2luLng7CiAgICB0aGlzLnkgLT0gb3JpZ2luLnk7CiAgICBsZXQgYyA9IE1hdGguY29zKGFuZ2xlKSwKICAgICAgcyA9IE1hdGguc2luKGFuZ2xlKTsKICAgIGxldCB4bmV3ID0gdGhpcy54ICogYyAtIHRoaXMueSAqIHM7CiAgICBsZXQgeW5ldyA9IHRoaXMueCAqIHMgKyB0aGlzLnkgKiBjOwogICAgdGhpcy54ID0geG5ldzsKICAgIHRoaXMueSA9IHluZXc7CiAgICByZXR1cm4gdGhpczsKICB9LAogIHZhbHVlT2Yoc2hsID0gMTYpIHsKICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpczsKCiAgICBpZihzaGwgPCAwKSByZXR1cm4geCAqICgxIDw8IE1hdGguYWJzKHNobCkpICsgeTsKCiAgICByZXR1cm4geCArIHkgKiAoMSA8PCBzaGwpOwogIH0sCiAgdG9TdHJpbmcob3B0cyA9IHt9KSB7CiAgICBjb25zdCB7IHByZWNpc2lvbiA9IDAuMDAxLCB1bml0ID0gJycsIHNlcGFyYXRvciA9ICcsJywgbGVmdCA9ICcnLCByaWdodCA9ICcnLCBwYWQgPSAwIH0gPSBvcHRzOwogICAgbGV0IHggPSByb3VuZFRvKHRoaXMueCwgcHJlY2lzaW9uKTsKICAgIGxldCB5ID0gcm91bmRUbyh0aGlzLnksIHByZWNpc2lvbik7CiAgICBpZihwYWQgPiAwKSB7CiAgICAgIHggPSB4ICsgJyc7CiAgICAgIHkgPSB5ICsgJyc7CiAgICAgIGlmKHlbMF0gIT0gJy0nKSB5ID0gJyAnICsgeTsKICAgICAgaWYoeFswXSAhPSAnLScpIHggPSAnICcgKyB4OwogICAgfQogICAgLy9jb25zb2xlLmRlYnVnKCJ0b1N0cmluZyIsIHt4LHl9LCB7cGFkfSk7CiAgICByZXR1cm4gYCR7bGVmdH0keyh4ICsgJycpLnBhZFN0YXJ0KHBhZCwgJyAnKX0ke3VuaXR9JHtzZXBhcmF0b3J9JHsoeSArICcnKS5wYWRFbmQocGFkLCAnICcpfSR7dW5pdH0ke3JpZ2h0fWA7CiAgfSwKICB0b1NvdXJjZShvcHRzID0ge30pIHsKICAgIGNvbnN0IHsgYXNBcnJheSA9IGZhbHNlLCBwbGFpbk9iaiA9IGZhbHNlLCBwYWQgPSBhID0+IGEgLyphLnBhZFN0YXJ0KDQsICcgJykqLywgc2hvd05ldyA9IHRydWUgfSA9IG9wdHM7CiAgICBsZXQgeCA9IHBhZCh0aGlzLnggKyAnJyk7CiAgICBsZXQgeSA9IHBhZCh0aGlzLnkgKyAnJyk7CiAgICBsZXQgYyA9IHQgPT4gdDsKICAgIGlmKHR5cGVvZiB0aGlzICE9ICdvYmplY3QnIHx8IHRoaXMgPT09IG51bGwpIHJldHVybiAnJzsKICAgIGlmKGFzQXJyYXkpIHJldHVybiBgWyR7eH0sJHt5fV1gOwogICAgaWYocGxhaW5PYmopIHJldHVybiBge3g6JHt4fSx5OiR7eX19YDsKCiAgICByZXR1cm4gYCR7YyhzaG93TmV3ID8gJ25ldyAnIDogJycsIDEsIDMxKX0ke2MoJ1BvaW50JywgMSwgMzMpfSR7YygnKCcsIDEsIDM2KX0ke2MoeCwgMSwgMzIpfSR7YygnLCcsIDEsIDM2KX0ke2MoeSwgMSwgMzIpfSR7YygnKScsIDEsIDM2KX1gOwogIH0sCiAgCiAgdG9PYmplY3QocHJvdG8gPSBQb2ludC5wcm90b3R5cGUpIHsKICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpczsKICAgIGNvbnN0IG9iaiA9IHsgeCwgeSB9OwogICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG9iaiwgcHJvdG8pOwogICAgcmV0dXJuIG9iajsKICB9LAogIHRvQ1NTKHByZWNpc2lvbiA9IDAuMDAxLCBlZGdlcyA9IFsnbGVmdCcsICd0b3AnXSkgewogICAgcmV0dXJuIHsKICAgICAgW2VkZ2VzWzBdXTogcm91bmRUbyh0aGlzLngsIHByZWNpc2lvbikgKyAncHgnLAogICAgICBbZWRnZXNbMV1dOiByb3VuZFRvKHRoaXMueSwgcHJlY2lzaW9uKSArICdweCcKICAgIH07CiAgfSwKICB0b0ZpeGVkKGRpZ2l0cykgewogICAgcmV0dXJuIG5ldyBQb2ludCgrdGhpcy54LnRvRml4ZWQoZGlnaXRzKSwgK3RoaXMueS50b0ZpeGVkKGRpZ2l0cykpOwogIH0sCiAgaXNOdWxsKCkgewogICAgcmV0dXJuIHRoaXMueCA9PSAwICYmIHRoaXMueSA9PSAwOwogIH0sCiAgaW5zaWRlKHJlY3QpIHsKICAgIHJldHVybiB0aGlzLnggPj0gcmVjdC54ICYmIHRoaXMueCA8IHJlY3QueCArIHJlY3Qud2lkdGggJiYgdGhpcy55ID49IHJlY3QueSAmJiB0aGlzLnkgPCByZWN0LnkgKyByZWN0LmhlaWdodDsKICB9LAogIHRyYW5zZm9ybShtLCByb3VuZCA9IHRydWUpIHsKICAgIGlmKGlzT2JqZWN0KG0pICYmIHR5cGVvZiBtLnRvTWF0cml4ID09ICdmdW5jdGlvbicpIG0gPSBtLnRvTWF0cml4KCk7CiAgICAvL2lmKGlzT2JqZWN0KG0pICYmIHR5cGVvZiBtLnRyYW5zZm9ybVBvaW50ID09ICdmdW5jdGlvbicpIHJldHVybiBtLnRyYW5zZm9ybVBvaW50KHRoaXMpOwoKICAgIGNvbnN0IHggPSBtWzBdICogdGhpcy54ICsgbVsxXSAqIHRoaXMueSArIG1bMl07CiAgICBjb25zdCB5ID0gbVszXSAqIHRoaXMueCArIG1bNF0gKiB0aGlzLnkgKyBtWzVdOwoKICAgIHRoaXMueCA9IHg7CiAgICB0aGlzLnkgPSB5OwogICAgaWYocm91bmQpIFBvaW50LnByb3RvdHlwZS5yb3VuZC5jYWxsKHRoaXMsIDFlLTEzLCAxMyk7CgogICAgcmV0dXJuIHRoaXM7CiAgfSwKICBzY2FsZVRvKG1pbm1heCkgewogICAgcmV0dXJuIG5ldyBQb2ludCh7CiAgICAgIHg6ICh0aGlzLnggLSBtaW5tYXgueDEpIC8gKG1pbm1heC54MiAtIG1pbm1heC54MSksCiAgICAgIHk6ICh0aGlzLnkgLSBtaW5tYXgueTEpIC8gKG1pbm1heC55MiAtIG1pbm1heC55MSkKICAgIH0pOwogIH0sCiAgbm9ybWFsaXplKCkgewogICAgbGV0IGQgPSBQb2ludC5wcm90b3R5cGUuZGlzdGFuY2UuY2FsbCh0aGlzKTsKICAgIHJldHVybiBQb2ludC5wcm90b3R5cGUuZGl2LmNhbGwodGhpcywgeyB4OiBkLCB5OiBkIH0pOwogIH0sCiAgbm9ybWFsKCkgewogICAgbGV0IGQgPSBQb2ludC5wcm90b3R5cGUuZGlzdGFuY2UuY2FsbCh0aGlzKTsKICAgIHJldHVybiBuZXcgUG9pbnQoeyB4OiB0aGlzLnggLyBkLCB5OiB0aGlzLnkgLyBkIH0pOwogIH0sCiAgLyp0b1NvdXJjZSgpIHsKICByZXR1cm4gJ3t4OicgKyB0aGlzLnggKyAnLHk6JyArIHRoaXMueSArICd9JzsKfSwqLwpbaW5zcGVjdFN5bWJvbF0oZGVwdGgsIG9wdGlvbnMpIHsKICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpczsKICAgIHJldHVybiAvKk9iamVjdC5zZXRQcm90b3R5cGVPZiovIHsgeCwgeSB9IC8qLCBQb2ludC5wcm90b3R5cGUqLzsKICB9LAogIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnUG9pbnQnCn0pOwoKZGVmaW5lR2V0dGVyKFBvaW50LnByb3RvdHlwZSwgU3ltYm9sLml0ZXJhdG9yLCBmdW5jdGlvbigpIHsKICBjb25zdCB7IHgsIHkgfSA9IHRoaXM7CiAgbGV0IGEgPSBbeCwgeV07CiAgcmV0dXJuIGFbU3ltYm9sLml0ZXJhdG9yXS5iaW5kKGEpOwp9KTsKClBvaW50LmZyb21TdHJpbmcgPSBzdHIgPT4gbmV3IFBvaW50KC4uLnN0ci5zcGxpdCgvW14tLjAtOV0rL2cpLm1hcChuID0+ICtuKSk7ClBvaW50Lm1vdmUgPSAocG9pbnQsIHgsIHkpID0+IFBvaW50LnByb3RvdHlwZS5tb3ZlLmNhbGwocG9pbnQsIHgsIHkpOwpQb2ludC5hbmdsZSA9IChwb2ludCwgb3RoZXIsIGRlZyA9IGZhbHNlKSA9PiBQb2ludC5wcm90b3R5cGUuYW5nbGUuY2FsbChwb2ludCwgb3RoZXIsIGRlZyk7ClBvaW50Lmluc2lkZSA9IChwb2ludCwgcmVjdCkgPT4gUG9pbnQucHJvdG90eXBlLmluc2lkZS5jYWxsKHBvaW50LCByZWN0KTsKUG9pbnQuc3ViID0gKHBvaW50LCBvdGhlcikgPT4gUG9pbnQucHJvdG90eXBlLnN1Yi5jYWxsKHBvaW50LCBvdGhlcik7ClBvaW50LnByb2QgPSAoYSwgYikgPT4gUG9pbnQucHJvdG90eXBlLnByb2QuY2FsbChhLCBiKTsKUG9pbnQucXVvdCA9IChhLCBiKSA9PiBQb2ludC5wcm90b3R5cGUucXVvdC5jYWxsKGEsIGIpOwpQb2ludC5lcXVhbHMgPSAoYSwgYikgPT4gUG9pbnQucHJvdG90eXBlLmVxdWFscy5jYWxsKGEsIGIpOwpQb2ludC5yb3VuZCA9IChwb2ludCwgcHJlYywgZGlnaXRzLCB0eXBlKSA9PiBQb2ludC5wcm90b3R5cGUucm91bmQuY2FsbChwb2ludCwgcHJlYywgZGlnaXRzLCB0eXBlKTsKUG9pbnQuZnJvbUFuZ2xlID0gKGFuZ2xlLCBmKSA9PiBuZXcgUG9pbnQoKS5mcm9tQW5nbGUoYW5nbGUsIGYpOwoKZm9yKGxldCBuYW1lIG9mIFsKICAnY2xvbmUnLAogICdjb21wJywKICAnbmVnJywKICAnc2lkZXMnLAogICdkaW1lbnNpb24nLAogICd0b1N0cmluZycsCiAgLy8ndG9Tb3VyY2UnLAogICd0b0NTUycsCiAgJ3N1YicsCiAgJ2RpZmYnLAogICdhZGQnLAogICdzdW0nLAogICdkaXN0YW5jZScKXSkgewogIFBvaW50W25hbWVdID0gKHBvaW50LCAuLi5hcmdzKSA9PiBQb2ludC5wcm90b3R5cGVbbmFtZV0uY2FsbChQb2ludChwb2ludCksIC4uLmFyZ3MpOwp9ClBvaW50LmludGVycG9sYXRlID0gKHAxLCBwMiwgYSkgPT4gewogIGEgPSBjbGFtcCgwLCAxLCBhKTsKICByZXR1cm4gbmV3IFBvaW50KHAxLnggKiAoMS4wIC0gYSkgKyBwMi54ICogYSwgcDEueSAqICgxLjAgLSBhKSArIHAyLnkgKiBhKTsKfTsKClBvaW50LnRvU291cmNlID0gKHBvaW50LCB7IHNwYWNlID0gJyAnLCBwYWRkaW5nID0gJyAnLCBzZXBhcmF0b3IgPSAnLCcgfSkgPT4gYHske3BhZGRpbmd9eDoke3NwYWNlfSR7cG9pbnQueH0ke3NlcGFyYXRvcn15OiR7c3BhY2V9JHtwb2ludC55fSR7cGFkZGluZ319YDsKCmV4cG9ydCBjb25zdCBpc1BvaW50ID0gbyA9PgogIG8gJiYKICAoKG8ueCAhPT0gdW5kZWZpbmVkICYmIG8ueSAhPT0gdW5kZWZpbmVkKSB8fAogICAgKChvLmxlZnQgIT09IHVuZGVmaW5lZCB8fCBvLnJpZ2h0ICE9PSB1bmRlZmluZWQpICYmIChvLnRvcCAhPT0gdW5kZWZpbmVkIHx8IG8uYm90dG9tICE9PSB1bmRlZmluZWQpKSB8fAogICAgbyBpbnN0YW5jZW9mIFBvaW50IHx8CiAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YobykuY29uc3RydWN0b3IgPT09IFBvaW50KTsKClBvaW50LmlzUG9pbnQgPSBpc1BvaW50OwoKUG9pbnQuYmluZCA9IChvLCBrZXlzLCBnKSA9PiB7CiAga2V5cyA/Pz0gWyd4JywgJ3knXTsKICBvID8/PSBuZXcgUG9pbnQoKTsKICBnID8/PSBrID0+IHZhbHVlID0+IHZhbHVlICE9PSB1bmRlZmluZWQgPyAob1trXSA9IHZhbHVlKSA6IG9ba107CgogIGNvbnN0IHsgeCwgeSB9ID0gQXJyYXkuaXNBcnJheShrZXlzKSA/IGtleXMucmVkdWNlKChhY2MsIG5hbWUsIGkpID0+ICh7IC4uLmFjYywgW2tleXNbaV1dOiBuYW1lIH0pLCB7fSkgOiBrZXlzOwogIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YoYmluZFByb3BlcnRpZXMoe30sIG8sIHsgeCwgeSB9KSwgUG9pbnQucHJvdG90eXBlKTsKfTsKCmV4cG9ydCBkZWZhdWx0IFBvaW50OwoKZGVmaW5lR2V0dGVyKFBvaW50LCBTeW1ib2wuc3BlY2llcywgZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHRoaXM7Cn0pOwoKZXhwb3J0IGNvbnN0IEltbXV0YWJsZVBvaW50ID0gaW1tdXRhYmxlQ2xhc3MoUG9pbnQpOwpkZWZpbmVHZXR0ZXIoSW1tdXRhYmxlUG9pbnQsIFN5bWJvbC5zcGVjaWVzLCAoKSA9PiBJbW11dGFibGVQb2ludCk7CgAAAAAAAAAAOykAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwfAAAAAAAArB8AAAAAAAAAAAAAAADwvw"
				],
				[
					319,
					1,
					"right_delete",
					null,
					"AQAAAGYfAAAAAAAAZh8AAAAAAABGAAAALyp0b1NvdXJjZSgpIHsKICByZXR1cm4gJ3t4OicgKyB0aGlzLnggKyAnLHk6JyArIHRoaXMueSArICd9JzsKfSwqLwogIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYfAAAAAAAArB8AAAAAAAAAAAAAAAA0QA"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": "define({x,y}"
					},
					"DAAAAK4fAAAAAAAArx8AAAAAAAAAAAAArx8AAAAAAACwHwAAAAAAAAAAAACwHwAAAAAAALEfAAAAAAAAAAAAALEfAAAAAAAAsh8AAAAAAAAAAAAAsh8AAAAAAACzHwAAAAAAAAAAAACzHwAAAAAAALQfAAAAAAAAAAAAALQfAAAAAAAAtR8AAAAAAAAAAAAAtR8AAAAAAAC2HwAAAAAAAAAAAAC2HwAAAAAAALcfAAAAAAAAAAAAALcfAAAAAAAAuB8AAAAAAAAAAAAAuB8AAAAAAAC5HwAAAAAAAAAAAAC5HwAAAAAAALofAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4fAAAAAAAArh8AAAAAAAAAAAAAAADwvw"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALofAAAAAAAAux8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALofAAAAAAAAuh8AAAAAAAAAAAAAAADwvw"
				],
				[
					333,
					1,
					"insert",
					{
						"characters": " ["
					},
					"AgAAALsfAAAAAAAAvB8AAAAAAAAAAAAAvB8AAAAAAAC9HwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsfAAAAAAAAux8AAAAAAAAAAAAAAADwvw"
				],
				[
					334,
					1,
					"left_delete",
					null,
					"AQAAALwfAAAAAAAAvB8AAAAAAAABAAAAWw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0fAAAAAAAAvR8AAAAAAAAAAAAAAADwvw"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAALwfAAAAAAAAvR8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwfAAAAAAAAvB8AAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": " [Symbol.to"
					},
					"CwAAAL0fAAAAAAAAvh8AAAAAAAAAAAAAvh8AAAAAAAC/HwAAAAAAAAAAAAC/HwAAAAAAAMAfAAAAAAAAAAAAAMAfAAAAAAAAwR8AAAAAAAAAAAAAwR8AAAAAAADCHwAAAAAAAAAAAADCHwAAAAAAAMMfAAAAAAAAAAAAAMMfAAAAAAAAxB8AAAAAAAAAAAAAxB8AAAAAAADFHwAAAAAAAAAAAADFHwAAAAAAAMYfAAAAAAAAAAAAAMYfAAAAAAAAxx8AAAAAAAAAAAAAxx8AAAAAAADIHwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0fAAAAAAAAvR8AAAAAAAAAAAAAAADwvw"
				],
				[
					337,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAMgfAAAAAAAAyR8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgfAAAAAAAAyB8AAAAAAAAAAAAAAADwvw"
				],
				[
					338,
					1,
					"insert_completion",
					{
						"completion": "toStringTag",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "toStringTag"
					},
					"AgAAAMYfAAAAAAAAxh8AAAAAAAADAAAAdG9Txh8AAAAAAADRHwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkfAAAAAAAAyR8AAAAAAAAAAAAAAADwvw"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": "]:"
					},
					"AgAAANEfAAAAAAAA0h8AAAAAAAAAAAAA0h8AAAAAAADTHwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEfAAAAAAAA0R8AAAAAAAAAAAAAAADwvw"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": " 'Point'"
					},
					"CAAAANMfAAAAAAAA1B8AAAAAAAAAAAAA1B8AAAAAAADVHwAAAAAAAAAAAADVHwAAAAAAANYfAAAAAAAAAAAAANYfAAAAAAAA1x8AAAAAAAAAAAAA1x8AAAAAAADYHwAAAAAAAAAAAADYHwAAAAAAANkfAAAAAAAAAAAAANkfAAAAAAAA2h8AAAAAAAAAAAAA2h8AAAAAAADbHwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMfAAAAAAAA0x8AAAAAAAAAAAAAAADwvw"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": " });"
					},
					"BAAAANsfAAAAAAAA3B8AAAAAAAAAAAAA3B8AAAAAAADdHwAAAAAAAAAAAADdHwAAAAAAAN4fAAAAAAAAAAAAAN4fAAAAAAAA3x8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsfAAAAAAAA2x8AAAAAAAAAAAAAAADwvw"
				],
				[
					343,
					1,
					"cut",
					null,
					"AQAAAN8fAAAAAAAA3x8AAAAAAAA5AAAALypPYmplY3Quc2V0UHJvdG90eXBlT2YqLyB7IHgsIHkgfSAvKiwgUG9pbnQucHJvdG90eXBlKi87",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8fAAAAAAAAGCAAAAAAAAD////////vfw"
				],
				[
					393,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": ",define"
					},
					"BwAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAB3AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAHsAAAAAAAAAfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAfAAAAAAAAAB8AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/geom/matrix.js",
			"settings":
			{
				"buffer_size": 20683,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "inspectSymbol"
					},
					"DgAAAMU+AAAAAAAAxj4AAAAAAAAAAAAAxj4AAAAAAADGPgAAAAAAACgAAABTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpxj4AAAAAAADHPgAAAAAAAAAAAADHPgAAAAAAAMg+AAAAAAAAAAAAAMg+AAAAAAAAyT4AAAAAAAAAAAAAyT4AAAAAAADKPgAAAAAAAAAAAADKPgAAAAAAAMs+AAAAAAAAAAAAAMs+AAAAAAAAzD4AAAAAAAAAAAAAzD4AAAAAAADNPgAAAAAAAAAAAADNPgAAAAAAAM4+AAAAAAAAAAAAAM4+AAAAAAAAzz4AAAAAAAAAAAAAzz4AAAAAAADQPgAAAAAAAAAAAADQPgAAAAAAANE+AAAAAAAAAAAAANE+AAAAAAAA0j4AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMU+AAAAAAAA7T4AAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAFMAAAAAAAAAUwAAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFMAAAAAAAAAVAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMAAAAAAAAAUwAAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " inspec"
					},
					"BwAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAABWAAAAAAAAAFcAAAAAAAAAAAAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABZAAAAAAAAAAAAAABZAAAAAAAAAFoAAAAAAAAAAAAAAFoAAAAAAAAAWwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "inspectSymbol",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "inspectSymbol"
					},
					"AgAAAFUAAAAAAAAAVQAAAAAAAAAGAAAAaW5zcGVjVQAAAAAAAABiAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsAAAAAAAAAWwAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGIAAAAAAAAAYwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIAAAAAAAAAYgAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/geom/transformation.js",
			"settings":
			{
				"buffer_size": 21584,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEAPAAAAAAAAQQ8AAAAAAAAAAAAAQQ8AAAAAAABBDwAAAAAAAE8AAAAKICAvKiBbU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0oKSB7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSov",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAPAAAAAAAAjw8AAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEPAAAAAAAAQQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJ8HAAAAAAAAoAcAAAAAAAAAAAAAoAcAAAAAAACgBwAAAAAAALIAAAAKCiAgLyogIHRvU291cmNlKHVuaXQpIHsKICAgIHJldHVybiBVdGlsLmNvbG9yVGV4dCgnbmV3ICcsMSwzMSkrVXRpbC5jb2xvclRleHQoVXRpbC5jbGFzc05hbWUodGhpcyksIDEsMzMpICtVdGlsLmNvbG9yVGV4dCgnKCcgK3RoaXMudmVjdG9yKHVuaXQpLmpvaW4oJywgJykgKyAnKScsIDEgLDM2KTsKICB9Ki8K",
					"AQAAAAAAAAABAAAAnwcAAAAAAABRCAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACwjAAAAAAAALSMAAAAAAAAAAAAALSMAAAAAAAAtIwAAAAAAACkAAAAvKlV0aWwuYWxsRXF1YWwodmVjdG9yKSA/IHZlY3RvclswXSA6ICovIA",
					"AQAAAAAAAAABAAAALCMAAAAAAABVIwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHsrAAAAAAAAfCsAAAAAAAAAAAAAfCsAAAAAAAB8KwAAAAAAAO4AAAAgICAgLy8gICBpZih0eXBlb2YgaW5pdCAhPSAnbnVtYmVyJyAmJiB0eXBlb2YgaW5pdCAhPSAndW5kZWZpbmVkJyAmJiAhKEFycmF5LmlzQXJyYXkoaW5pdCkgJiYgaW5pdC5sZW5ndGggPT0gMCkpIGNvbnNvbGUuZGVidWcoYFRyYW5zZm9ybWF0aW9uTGlzdC5jb25zdHJ1Y3RvcihgLCB0eXBlb2YgaW5pdCA9PSAnc3RyaW5nJyA/IFV0aWwuYWJicmV2aWF0ZShpbml0KSA6IGluaXQsIHRVbml0LCByVW5pdCwgYClgKTsK",
					"AQAAAAAAAAABAAAAeysAAAAAAABpLAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAKgrAAAAAAAAqSsAAAAAAAAAAAAAqSsAAAAAAACpKwAAAAAAAJIAAAAgICAgICAvLyBpZighKHR5cGVvZiBpbml0ID09ICdudW1iZXInIHx8IChBcnJheS5pc0FycmF5KGluaXQpICYmIGluaXQubGVuZ3RoID09IDApKSkgY29uc29sZS5kZWJ1ZyhgVHJhbnNmb3JtYXRpb25MaXN0ICAgaW5pdGlhbGl6ZWQgdG86YCwgdGhpcyk7Cg",
					"AQAAAAAAAAABAAAAqCsAAAAAAAA6LAAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					2,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AgAAAK4UAAAAAAAAVRUAAAAAAACoAAAAdG9Tb3VyY2UoKSB7CiAgICBsZXQgbyA9IFV0aWwuY29sb3JUZXh0KCduZXcgJywgMSwgMzEpICsgVXRpbC5jb2xvclRleHQoVXRpbC5jbGFzc05hbWUodGhpcyksIDEsIDMzKSArIFV0aWwuY29sb3JUZXh0KCcoJyArIHRoaXMuYW5nbGUgKyAnKScsIDEsIDM2KTsKCiAgICByZXR1cm4gbzsKICB9rhQAAAAAAABVFQAAAAAAAKcAAAB0b1NvdXJjZSgpIHsKICAgIGxldCBvID0gVXRpbC5jb2xvclRleHQoJ25ldyAnLCAxLCAzMSkgKyBVdGlsLmNvbG9yVGV4dChVdGlsLmNsYXNzTmFtZSh0aGlzKSwgMSwgMzMpICsgVXRpbC5jb2xvclRleHQoJygnICsgdGhpcy5hbmdsZSArICcpJywgMSwgMzYpOwogICAgcmV0dXJuIG87CiAgfQ",
					"AQAAAAAAAAABAAAAVhUAAAAAAACuFAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAFUVAAAAAAAAVxUAAAAAAAAAAAAArhQAAAAAAACwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArhQAAAAAAABVFQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"cut",
					null,
					"AQAAAMkUAAAAAAAAyRQAAAAAAAAPAAAAVXRpbC5jb2xvclRleHQo",
					"AQAAAAAAAAABAAAAyRQAAAAAAADYFAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					9,
					"right_delete",
					null,
					"CQAAAM8UAAAAAAAAzxQAAAAAAAABAAAALM8UAAAAAAAAzxQAAAAAAAABAAAAIM8UAAAAAAAAzxQAAAAAAAABAAAAMc8UAAAAAAAAzxQAAAAAAAABAAAALM8UAAAAAAAAzxQAAAAAAAABAAAAIM8UAAAAAAAAzxQAAAAAAAABAAAAM88UAAAAAAAAzxQAAAAAAAABAAAAMc8UAAAAAAAAzxQAAAAAAAABAAAAKc8UAAAAAAAAzxQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAzxQAAAAAAADPFAAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANEUAAAAAAAA0hQAAAAAAAAAAAAA0hQAAAAAAADSFAAAAAAAAA4AAABVdGlsLmNvbG9yVGV4dA",
					"AQAAAAAAAAABAAAA0RQAAAAAAADfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"right_delete",
					null,
					"AQAAANIUAAAAAAAA0hQAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA0hQAAAAAAADSFAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					10,
					"right_delete",
					null,
					"CgAAAOYUAAAAAAAA5hQAAAAAAAABAAAALOYUAAAAAAAA5hQAAAAAAAABAAAAIOYUAAAAAAAA5hQAAAAAAAABAAAAMeYUAAAAAAAA5hQAAAAAAAABAAAALOYUAAAAAAAA5hQAAAAAAAABAAAAIOYUAAAAAAAA5hQAAAAAAAABAAAAM+YUAAAAAAAA5hQAAAAAAAABAAAAM+YUAAAAAAAA5hQAAAAAAAABAAAAKeYUAAAAAAAA5hQAAAAAAAABAAAAIOYUAAAAAAAA5hQAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAA5hQAAAAAAADmFAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAOcUAAAAAAAA6BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xQAAAAAAADnFAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					16,
					"right_delete",
					null,
					"EAAAAOgUAAAAAAAA6BQAAAAAAAABAAAAVegUAAAAAAAA6BQAAAAAAAABAAAAdOgUAAAAAAAA6BQAAAAAAAABAAAAaegUAAAAAAAA6BQAAAAAAAABAAAAbOgUAAAAAAAA6BQAAAAAAAABAAAALugUAAAAAAAA6BQAAAAAAAABAAAAY+gUAAAAAAAA6BQAAAAAAAABAAAAb+gUAAAAAAAA6BQAAAAAAAABAAAAbOgUAAAAAAAA6BQAAAAAAAABAAAAb+gUAAAAAAAA6BQAAAAAAAABAAAAcugUAAAAAAAA6BQAAAAAAAABAAAAVOgUAAAAAAAA6BQAAAAAAAABAAAAZegUAAAAAAAA6BQAAAAAAAABAAAAeOgUAAAAAAAA6BQAAAAAAAABAAAAdOgUAAAAAAAA6BQAAAAAAAABAAAAKOgUAAAAAAAA6BQAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAA6BQAAAAAAADoFAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAOgUAAAAAAAA6RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BQAAAAAAADoFAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					8,
					"right_delete",
					null,
					"CAAAAP4UAAAAAAAA/hQAAAAAAAABAAAALP4UAAAAAAAA/hQAAAAAAAABAAAAIP4UAAAAAAAA/hQAAAAAAAABAAAAMf4UAAAAAAAA/hQAAAAAAAABAAAALP4UAAAAAAAA/hQAAAAAAAABAAAAIP4UAAAAAAAA/hQAAAAAAAABAAAAM/4UAAAAAAAA/hQAAAAAAAABAAAANv4UAAAAAAAA/hQAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA/hQAAAAAAAD+FAAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					2,
					"right_delete",
					null,
					"AgAAAK4UAAAAAAAArhQAAAAAAAABAAAAL64UAAAAAAAArhQAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAArhQAAAAAAACuFAAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					2,
					"left_delete",
					null,
					"AgAAABAVAAAAAAAAEBUAAAAAAAABAAAALw8VAAAAAAAADxUAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAERUAAAAAAAARFQAAAAAAAAAAAAAAAERA"
				],
				[
					142,
					1,
					"cut",
					null,
					"AQAAANA/AAAAAAAA0D8AAAAAAAAPAAAAVXRpbC5jb2xvclRleHQo",
					"AQAAAAAAAAABAAAA0D8AAAAAAADfPwAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANY/AAAAAAAA1z8AAAAAAAAAAAAA1z8AAAAAAADXPwAAAAAAAAgAAAAsIDEsIDMxKQ",
					"AQAAAAAAAAABAAAA1j8AAAAAAADePwAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANk/AAAAAAAA2j8AAAAAAAAAAAAA2j8AAAAAAADaPwAAAAAAABAAAAAgVXRpbC5jb2xvclRleHQo",
					"AQAAAAAAAAABAAAA2T8AAAAAAADpPwAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAO4/AAAAAAAA7z8AAAAAAAAAAAAA7z8AAAAAAADvPwAAAAAAAAgAAAAsIDEsIDMzKQ",
					"AQAAAAAAAAABAAAA7j8AAAAAAAD2PwAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPE/AAAAAAAA8j8AAAAAAAAAAAAA8j8AAAAAAADyPwAAAAAAABAAAAAgVXRpbC5jb2xvclRleHQo",
					"AQAAAAAAAAABAAAA8T8AAAAAAAABQAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAPc/AAAAAAAA+D8AAAAAAAAAAAAA+D8AAAAAAAD8PwAAAAAAAAAAAAD8PwAAAAAAAPw/AAAAAAAABwAAACAxLCAzNin8PwAAAAAAAP0/AAAAAAAAAAAAAP0/AAAAAAAAAUAAAAAAAAAAAAAA+D8AAAAAAAD4PwAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAA9z8AAAAAAAD+PwAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					5,
					"left_delete",
					null,
					"BQAAAPs/AAAAAAAA+z8AAAAAAAACAAAAICD5PwAAAAAAAPk/AAAAAAAAAgAAACAg+D8AAAAAAAD4PwAAAAAAAAEAAAAK9z8AAAAAAAD3PwAAAAAAAAEAAAAK9j8AAAAAAAD2PwAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAA/T8AAAAAAAD9PwAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					8,
					"left_delete",
					null,
					"CAAAAFNAAAAAAAAAU0AAAAAAAAABAAAAKVJAAAAAAAAAUkAAAAAAAAABAAAANlFAAAAAAAAAUUAAAAAAAAABAAAAM1BAAAAAAAAAUEAAAAAAAAABAAAAIE9AAAAAAAAAT0AAAAAAAAABAAAALE5AAAAAAAAATkAAAAAAAAABAAAAMU1AAAAAAAAATUAAAAAAAAABAAAAIExAAAAAAAAATEAAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAVEAAAAAAAABUQAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					15,
					"left_delete",
					null,
					"DwAAAEdAAAAAAAAAR0AAAAAAAAABAAAAKEZAAAAAAAAARkAAAAAAAAABAAAAdEVAAAAAAAAARUAAAAAAAAABAAAAeERAAAAAAAAAREAAAAAAAAABAAAAZUNAAAAAAAAAQ0AAAAAAAAABAAAAVEJAAAAAAAAAQkAAAAAAAAABAAAAckFAAAAAAAAAQUAAAAAAAAABAAAAb0BAAAAAAAAAQEAAAAAAAAABAAAAbD9AAAAAAAAAP0AAAAAAAAABAAAAbz5AAAAAAAAAPkAAAAAAAAABAAAAYz1AAAAAAAAAPUAAAAAAAAABAAAALjxAAAAAAAAAPEAAAAAAAAABAAAAbDtAAAAAAAAAO0AAAAAAAAABAAAAaTpAAAAAAAAAOkAAAAAAAAABAAAAdDlAAAAAAAAAOUAAAAAAAAABAAAAVQ",
					"AQAAAAAAAAABAAAASEAAAAAAAABIQAAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"",
					null,
					"AgAAAGU0AAAAAAAAazQAAAAAAAALAAAAVXRpbC5leHRlbmT5MwAAAAAAAP8zAAAAAAAACwAAAFV0aWwuZXh0ZW5k",
					"AQAAAAAAAAABAAAA+TMAAAAAAAAENAAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"cut",
					null,
					"AQAAAGAAAAAAAAAAYAAAAAAAAAAfAAAAaW1wb3J0IFV0aWwgZnJvbSAnLi4vdXRpbC5qcyc7Cg",
					"AQAAAAAAAAABAAAAYAAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"paste",
					null,
					"AQAAAGAAAAAAAAAAfwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"paste",
					null,
					"AQAAAH8AAAAAAAAAngAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": " √∂"
					},
					"AwAAAIYAAAAAAAAAhwAAAAAAAAAAAAAAhwAAAAAAAACHAAAAAAAAAAQAAABVdGlshwAAAAAAAACIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					2,
					"left_delete",
					null,
					"AgAAAIcAAAAAAAAAhwAAAAAAAAACAAAAw7aGAAAAAAAAAIYAAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIYAAAAAAAAAiAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "√∞efn"
					},
					"BAAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAIoAAAAAAAAAAAAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					4,
					"left_delete",
					null,
					"BAAAAIoAAAAAAAAAigAAAAAAAAABAAAAbokAAAAAAAAAiQAAAAAAAAABAAAAZogAAAAAAAAAiAAAAAAAAAABAAAAZYcAAAAAAAAAhwAAAAAAAAACAAAAw7A",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAIYAAAAAAAAAhgAAAAAAAAABAAAAe4YAAAAAAAAAhgAAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIYAAAAAAAAAiAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": "define"
					},
					"BgAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAIoAAAAAAAAAAAAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAI0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					3,
					"right_delete",
					null,
					"AwAAAJkAAAAAAAAAmQAAAAAAAAABAAAAdJkAAAAAAAAAmQAAAAAAAAABAAAAaZkAAAAAAAAAmQAAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"left_delete",
					null,
					"AQAAAJgAAAAAAAAAmAAAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "misc"
					},
					"BAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAACaAAAAAAAAAJsAAAAAAAAAAAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAAAAAAAAACYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAIJRAAAAAAAAg1EAAAAAAAAAAAAAg1EAAAAAAACDUQAAAAAAAB4AAAAgICAgLy8gICBzbGljZSwKICAgIC8vc3BsaWNlLAo",
					"AQAAAAAAAAABAAAAglEAAAAAAACgUQAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACVRAAAAAAAAJlEAAAAAAAAAAAAAJlEAAAAAAAAmUQAAAAAAAA8AAAAgICAgLy8gY29uY2F0LAo",
					"AQAAAAAAAAABAAAAJVEAAAAAAAA0UQAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJ5RAAAAAAAAn1EAAAAAAAAAAAAAn1EAAAAAAACfUQAAAAAAAB0AAAAgICAvLyAgZmlsdGVyLAogICAgLy8gIG1hcCwKIA",
					"AQAAAAAAAAABAAAAnlEAAAAAAAC7UQAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "define"
					},
					"BwAAAPNQAAAAAAAA9FAAAAAAAAAAAAAA9FAAAAAAAAD0UAAAAAAAAAwAAABVdGlsLmluaGVyaXT0UAAAAAAAAPVQAAAAAAAAAAAAAPVQAAAAAAAA9lAAAAAAAAAAAAAA9lAAAAAAAAD3UAAAAAAAAAAAAAD3UAAAAAAAAPhQAAAAAAAAAAAAAPhQAAAAAAAA+VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/1AAAAAAAADzUAAAAAAAAAAAAAAAAAAA"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAI0AAAAAAAAAjgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"left_delete",
					null,
					"AQAAAI0AAAAAAAAAjQAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAI0AAAAAAAAAjgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					285,
					1,
					"",
					null,
					"AQAAAI4AAAAAAAAA1gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"left_delete",
					null,
					"AQAAANUAAAAAAAAA1QAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					8,
					"right_delete",
					null,
					"CAAAAIYAAAAAAAAAhgAAAAAAAAABAAAAe4YAAAAAAAAAhgAAAAAAAAABAAAAZIYAAAAAAAAAhgAAAAAAAAABAAAAZYYAAAAAAAAAhgAAAAAAAAABAAAAZoYAAAAAAAAAhgAAAAAAAAABAAAAaYYAAAAAAAAAhgAAAAAAAAABAAAAboYAAAAAAAAAhgAAAAAAAAABAAAAZYYAAAAAAAAAhgAAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": "«ò"
					},
					"AQAAAIYAAAAAAAAAhwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIcAAAAAAAAAiAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					2,
					"left_delete",
					null,
					"AgAAAIcAAAAAAAAAhwAAAAAAAAABAAAAIIYAAAAAAAAAhgAAAAAAAAACAAAAx5g",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAIYAAAAAAAAAhwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"right_delete",
					null,
					"AQAAAGAAAAAAAAAAYAAAAAAAAAAfAAAAaW1wb3J0IFV0aWwgZnJvbSAnLi4vdXRpbC5qcyc7Cg",
					"AQAAAAAAAAABAAAAYAAAAAAAAAB/AAAAAAAAAAAAAAAAAAAA"
				],
				[
					305,
					1,
					"",
					null,
					"FQAAALFUAAAAAAAAsVQAAAAAAAAFAAAAVXRpbC4GUwAAAAAAAAZTAAAAAAAABQAAAFV0aWwuFUAAAAAAAAAVQAAAAAAAAAUAAABVdGlsLpYyAAAAAAAAljIAAAAAAAAFAAAAVXRpbC4sMgAAAAAAACwyAAAAAAAABQAAAFV0aWwupzEAAAAAAACnMQAAAAAAAAUAAABVdGlsLjQxAAAAAAAANDEAAAAAAAAFAAAAVXRpbC7MKgAAAAAAAMwqAAAAAAAABQAAAFV0aWwuOCoAAAAAAAA4KgAAAAAAAAUAAABVdGlsLgQpAAAAAAAABCkAAAAAAAAFAAAAVXRpbC4mJgAAAAAAACYmAAAAAAAABQAAAFV0aWwuziQAAAAAAADOJAAAAAAAAAUAAABVdGlsLocfAAAAAAAAhx8AAAAAAAAFAAAAVXRpbC4bHgAAAAAAABseAAAAAAAABQAAAFV0aWwuvxgAAAAAAAC/GAAAAAAAAAUAAABVdGlsLswWAAAAAAAAzBYAAAAAAAAFAAAAVXRpbC4VFQAAAAAAABUVAAAAAAAABQAAAFV0aWwuExEAAAAAAAATEQAAAAAAAAUAAABVdGlsLmADAAAAAAAAYAMAAAAAAAAFAAAAVXRpbC77AgAAAAAAAPsCAAAAAAAABQAAAFV0aWwuTwIAAAAAAABPAgAAAAAAAAUAAABVdGlsLg",
					"AQAAAAAAAAABAAAATwIAAAAAAABUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA4QMAAAAAAADhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					1,
					"right_delete",
					null,
					"AQAAAG4cAAAAAAAAbhwAAAAAAAAEAAAAU2VsZg",
					"AQAAAAAAAAABAAAAbhwAAAAAAAByHAAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "\nfor"
					},
					"BgAAAClAAAAAAAAAKkAAAAAAAAAAAAAAKkAAAAAAAAAsQAAAAAAAAAAAAAAsQAAAAAAAAC5AAAAAAAAAAAAAAC5AAAAAAAAAL0AAAAAAAAAAAAAAL0AAAAAAAAAwQAAAAAAAAAAAAAAwQAAAAAAAADFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKUAAAAAAAAApQAAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADFAAAAAAAAAM0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMUAAAAAAAAAxQAAAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					1,
					"insert",
					{
						"characters": "lket"
					},
					"BAAAADJAAAAAAAAAM0AAAAAAAAAAAAAAM0AAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAADVAAAAAAAAAAAAAADVAAAAAAAAANkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMkAAAAAAAAAyQAAAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADZAAAAAAAAAN0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANkAAAAAAAAA2QAAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					4,
					"left_delete",
					null,
					"BAAAADZAAAAAAAAANkAAAAAAAAABAAAAIDVAAAAAAAAANUAAAAAAAAABAAAAdDRAAAAAAAAANEAAAAAAAAABAAAAZTNAAAAAAAAAM0AAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAN0AAAAAAAAA3QAAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAADNAAAAAAAAANEAAAAAAAAAAAAAANEAAAAAAAAA1QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM0AAAAAAAAAzQAAAAAAAAAAAAAAAAPC/"
				],
				[
					357,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAADVAAAAAAAAANkAAAAAAAAAAAAAANkAAAAAAAAA3QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANUAAAAAAAAA1QAAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAADdAAAAAAAAAOEAAAAAAAAAAAAAAOEAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAADpAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAN0AAAAAAAAA3QAAAAAAAAAAAAAAAAPC/"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": " this"
					},
					"BQAAADpAAAAAAAAAO0AAAAAAAAAAAAAAO0AAAAAAAAA8QAAAAAAAAAAAAAA8QAAAAAAAAD1AAAAAAAAAAAAAAD1AAAAAAAAAPkAAAAAAAAAAAAAAPkAAAAAAAAA/QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOkAAAAAAAAA6QAAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEBAAAAAAAAAQUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQEAAAAAAAABAQAAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEFAAAAAAAAAQ0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQUAAAAAAAABBQAAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAEFAAAAAAAAAQUAAAAAAAAABAAAAe0FAAAAAAAAAQUAAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAQkAAAAAAAABCQAAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAAClAAAAAAAAAKkAAAAAAAAAAAAAAKkAAAAAAAAAsQAAAAAAAAAAAAAAsQAAAAAAAAC5AAAAAAAAAAAAAAC5AAAAAAAAAL0AAAAAAAAAAAAAAL0AAAAAAAAAwQAAAAAAAAAAAAAAwQAAAAAAAADFAAAAAAAAAAAAAADFAAAAAAAAAMkAAAAAAAAAAAAAAMkAAAAAAAAAzQAAAAAAAAAAAAAAzQAAAAAAAADRAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKUAAAAAAAAApQAAAAAAAAAAAAAAAAGdA"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": " this.map"
					},
					"CQAAADRAAAAAAAAANUAAAAAAAAAAAAAANUAAAAAAAAA2QAAAAAAAAAAAAAA2QAAAAAAAADdAAAAAAAAAAAAAADdAAAAAAAAAOEAAAAAAAAAAAAAAOEAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAAO0AAAAAAAAAAAAAAO0AAAAAAAAA8QAAAAAAAAAAAAAA8QAAAAAAAAD1AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANEAAAAAAAAA0QAAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD1AAAAAAAAAP0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPUAAAAAAAAA9QAAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAD5AAAAAAAAAP0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPkAAAAAAAAA+QAAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAD9AAAAAAAAAQEAAAAAAAAAAAAAAQEAAAAAAAABBQAAAAAAAAAAAAABBQAAAAAAAAEJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAP0AAAAAAAAA/QAAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"insert",
					{
						"characters": " t.toMatrix"
					},
					"CwAAAEJAAAAAAAAAQ0AAAAAAAAAAAAAAQ0AAAAAAAABEQAAAAAAAAAAAAABEQAAAAAAAAEVAAAAAAAAAAAAAAEVAAAAAAAAARkAAAAAAAAAAAAAARkAAAAAAAABHQAAAAAAAAAAAAABHQAAAAAAAAEhAAAAAAAAAAAAAAEhAAAAAAAAASUAAAAAAAAAAAAAASUAAAAAAAABKQAAAAAAAAAAAAABKQAAAAAAAAEtAAAAAAAAAAAAAAEtAAAAAAAAATEAAAAAAAAAAAAAATEAAAAAAAABNQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQkAAAAAAAABCQAAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAE1AAAAAAAAAT0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATUAAAAAAAABNQAAAAAAAAAAAAAAAAPC/"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFBAAAAAAAAAUUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUEAAAAAAAABQQAAAAAAAAAAAAAAAAPC/"
				],
				[
					388,
					1,
					"left_delete",
					null,
					"AQAAAFJAAAAAAAAAUkAAAAAAAABbAAAAICAgIGZvcihsZXQgdCBvZiB0aGlzKSAKICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoWy4uLnRoaXNdLCB0ID0+IHQudG9NYXRyaXgoKSk7Cg",
					"AQAAAAAAAAABAAAAUkAAAAAAAACtQAAAAAAAAAAAAAAAAAAA"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGJAAAAAAAAAY0AAAAAAAAAAAAAAY0AAAAAAAABjQAAAAAAAABoAAABtYXRyaXggPSBNYXRyaXguaWRlbnRpdHkoKQ",
					"AQAAAAAAAAABAAAAYkAAAAAAAAB8QAAAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAAGZAAAAAAAAAZ0AAAAAAAAAAAAAAZ0AAAAAAAABpQAAAAAAAAAAAAABpQAAAAAAAAGtAAAAAAAAAAAAAAGtAAAAAAAAAbEAAAAAAAAAAAAAAbEAAAAAAAABtQAAAAAAAAAAAAABtQAAAAAAAAG5AAAAAAAAAAAAAAG5AAAAAAAAAb0AAAAAAAAAAAAAAb0AAAAAAAABwQAAAAAAAAAAAAABwQAAAAAAAAHFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZkAAAAAAAABmQAAAAAAAAAAAAAAAAPC/"
				],
				[
					399,
					1,
					"insert",
					{
						"characters": " Matrix.mulitpoly"
					},
					"EQAAAHFAAAAAAAAAckAAAAAAAAAAAAAAckAAAAAAAABzQAAAAAAAAAAAAABzQAAAAAAAAHRAAAAAAAAAAAAAAHRAAAAAAAAAdUAAAAAAAAAAAAAAdUAAAAAAAAB2QAAAAAAAAAAAAAB2QAAAAAAAAHdAAAAAAAAAAAAAAHdAAAAAAAAAeEAAAAAAAAAAAAAAeEAAAAAAAAB5QAAAAAAAAAAAAAB5QAAAAAAAAHpAAAAAAAAAAAAAAHpAAAAAAAAAe0AAAAAAAAAAAAAAe0AAAAAAAAB8QAAAAAAAAAAAAAB8QAAAAAAAAH1AAAAAAAAAAAAAAH1AAAAAAAAAfkAAAAAAAAAAAAAAfkAAAAAAAAB/QAAAAAAAAAAAAAB/QAAAAAAAAIBAAAAAAAAAAAAAAIBAAAAAAAAAgUAAAAAAAAAAAAAAgUAAAAAAAACCQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcUAAAAAAAABxQAAAAAAAAAAAAAAAAPC/"
				],
				[
					400,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIJAAAAAAAAAhEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgkAAAAAAAACCQAAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAIJAAAAAAAAAgkAAAAAAAAABAAAAKIJAAAAAAAAAgkAAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAg0AAAAAAAACDQAAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					3,
					"left_delete",
					null,
					"AwAAAIFAAAAAAAAAgUAAAAAAAAABAAAAeYBAAAAAAAAAgEAAAAAAAAABAAAAbH9AAAAAAAAAf0AAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAgkAAAAAAAACCQAAAAAAAAAAAAAAAAPC/"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": "ly"
					},
					"AgAAAH9AAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAACBQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAf0AAAAAAAAB/QAAAAAAAAAAAAAAAAPC/"
				],
				[
					404,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIFAAAAAAAAAg0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgUAAAAAAAACBQAAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "...this.toMatric"
					},
					"EAAAAIJAAAAAAAAAg0AAAAAAAAAAAAAAg0AAAAAAAACEQAAAAAAAAAAAAACEQAAAAAAAAIVAAAAAAAAAAAAAAIVAAAAAAAAAhkAAAAAAAAAAAAAAhkAAAAAAAACHQAAAAAAAAAAAAACHQAAAAAAAAIhAAAAAAAAAAAAAAIhAAAAAAAAAiUAAAAAAAAAAAAAAiUAAAAAAAACKQAAAAAAAAAAAAACKQAAAAAAAAItAAAAAAAAAAAAAAItAAAAAAAAAjEAAAAAAAAAAAAAAjEAAAAAAAACNQAAAAAAAAAAAAACNQAAAAAAAAI5AAAAAAAAAAAAAAI5AAAAAAAAAj0AAAAAAAAAAAAAAj0AAAAAAAACQQAAAAAAAAAAAAACQQAAAAAAAAJFAAAAAAAAAAAAAAJFAAAAAAAAAkkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgkAAAAAAAACCQAAAAAAAAAAAAAAAAPC/"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAJJAAAAAAAAAk0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkkAAAAAAAACSQAAAAAAAAAAAAAAAAPC/"
				],
				[
					407,
					1,
					"left_delete",
					null,
					"AQAAAJJAAAAAAAAAkkAAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAk0AAAAAAAACTQAAAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAAJJAAAAAAAAAk0AAAAAAAAAAAAAAk0AAAAAAAACUQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkkAAAAAAAACSQAAAAAAAAAAAAAAAAPC/"
				],
				[
					409,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJRAAAAAAAAAlkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlEAAAAAAAACUQAAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJdAAAAAAAAAmEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAl0AAAAAAAACXQAAAAAAAAAAAAAAAAPC/"
				],
				[
					414,
					1,
					"left_delete",
					null,
					"AQAAAJlAAAAAAAAAmUAAAAAAAABkAAAAICAgIGZvcihsZXQgb3RoZXIgb2YgdGhpcy50b01hdHJpY2VzKCkpIG1hdHJpeC5tdWx0aXBseVNlbGYob3RoZXIpOwoKICAgIHJldHVybiBtYXRyaXgucm91bmRTZWxmKCk7Cg",
					"AQAAAAAAAAABAAAAmUAAAAAAAAD9QAAAAAAAAAAAAAAAAAAA"
				],
				[
					430,
					1,
					"left_delete",
					null,
					"AQAAAHxAAAAAAAAAfEAAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAfUAAAAAAAAB9QAAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAH1AAAAAAAAAfkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfUAAAAAAAAB9QAAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": "oide"
					},
					"BAAAAHlAAAAAAAAAekAAAAAAAAAAAAAAekAAAAAAAAB7QAAAAAAAAAAAAAB7QAAAAAAAAHxAAAAAAAAAAAAAAHxAAAAAAAAAfUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeUAAAAAAAAB5QAAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					4,
					"left_delete",
					null,
					"BAAAAHxAAAAAAAAAfEAAAAAAAAABAAAAZXtAAAAAAAAAe0AAAAAAAAABAAAAZHpAAAAAAAAAekAAAAAAAAABAAAAaXlAAAAAAAAAeUAAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAfUAAAAAAAAB9QAAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": "identity()."
					},
					"CwAAAHlAAAAAAAAAekAAAAAAAAAAAAAAekAAAAAAAAB7QAAAAAAAAAAAAAB7QAAAAAAAAHxAAAAAAAAAAAAAAHxAAAAAAAAAfUAAAAAAAAAAAAAAfUAAAAAAAAB+QAAAAAAAAAAAAAB+QAAAAAAAAH9AAAAAAAAAAAAAAH9AAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAACBQAAAAAAAAAAAAACBQAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAg0AAAAAAAAAAAAAAg0AAAAAAAACEQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeUAAAAAAAAB5QAAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAHJAAAAAAAAAc0AAAAAAAAAAAAAAc0AAAAAAAAB0QAAAAAAAAAAAAAB0QAAAAAAAAHVAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAckAAAAAAAAByQAAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHVAAAAAAAAAdkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdUAAAAAAAAB1QAAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					2,
					"left_delete",
					null,
					"AgAAAH1AAAAAAAAAfUAAAAAAAAAIAAAAaWRlbnRpdHl8QAAAAAAAAHxAAAAAAAAAAQAAAC4",
					"AQAAAAAAAAABAAAAfUAAAAAAAACFQAAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAADVAAAAAAAAANkAAAAAAAAAAAAAANkAAAAAAAAA3QAAAAAAAAAAAAAA3QAAAAAAAADhAAAAAAAAAAAAAADhAAAAAAAAAOUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANUAAAAAAAAA1QAAAAAAAAAAAAAAAAPC/"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAD1AAAAAAAAAPkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPUAAAAAAAAA9QAAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"left_delete",
					null,
					"AQAAAD1AAAAAAAAAPUAAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAPkAAAAAAAAA+QAAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAFRAAAAAAAAAVUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVEAAAAAAAABUQAAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHdRAAAAAAAAeFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd1EAAAAAAAB3UQAAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"left_delete",
					null,
					"AQAAAHdRAAAAAAAAd1EAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAeFEAAAAAAAB4UQAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					1,
					"insert",
					{
						"characters": ".call"
					},
					"BQAAAHdRAAAAAAAAeFEAAAAAAAAAAAAAeFEAAAAAAAB5UQAAAAAAAAAAAAB5UQAAAAAAAHpRAAAAAAAAAAAAAHpRAAAAAAAAe1EAAAAAAAAAAAAAe1EAAAAAAAB8UQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd1EAAAAAAAB3UQAAAAAAAAAAAAAAAPC/"
				],
				[
					545,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHxRAAAAAAAAflEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfFEAAAAAAAB8UQAAAAAAAAAAAAAAAPC/"
				],
				[
					546,
					1,
					"insert",
					{
						"characters": "this"
					},
					"BAAAAH1RAAAAAAAAflEAAAAAAAAAAAAAflEAAAAAAAB/UQAAAAAAAAAAAAB/UQAAAAAAAIBRAAAAAAAAAAAAAIBRAAAAAAAAgVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfVEAAAAAAAB9UQAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABRVAAAaW1wb3J0IHsgTWF0cml4LCBpc01hdHJpeCB9IGZyb20gJy4uL2dlb20vbWF0cml4LmpzJzsKaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi9nZW9tL3BvaW50LmpzJzsKaW1wb3J0IHsgY2xhc3NOYW1lLCBkZWZpbmUsIGRlZmluZUdldHRlciwgZnVuY3Rpb25OYW1lLCBpbW11dGFibGVDbGFzcywgaXNPYmplY3QgfSBmcm9tICcuLi9taXNjLmpzJzsKCmNvbnN0IFJBRDJERUcgPSAxODAgLyBNYXRoLlBJOwpjb25zdCBERUcyUkFEID0gTWF0aC5QSSAvIDE4MDsKCmV4cG9ydCBjbGFzcyBUcmFuc2Zvcm1hdGlvbiB7CiAgLy90eXBlTmFtZSA9IG51bGw7CgogIGNvbnN0cnVjdG9yKHRyYW5zZm9ybWF0aW9uKSB7CiAgICBpZih0cmFuc2Zvcm1hdGlvbiBpbnN0YW5jZW9mIFRyYW5zZm9ybWF0aW9uKSByZXR1cm4gdHJhbnNmb3JtYXRpb247CiAgICBpZih0cmFuc2Zvcm1hdGlvbiBpbnN0YW5jZW9mIFRyYW5zZm9ybWF0aW9uTGlzdCkgcmV0dXJuIHRyYW5zZm9ybWF0aW9uOwoKICAgIGlmKHR5cGVvZiB0cmFuc2Zvcm1hdGlvbiA9PSAnc3RyaW5nJykgcmV0dXJuIFRyYW5zZm9ybWF0aW9uLmZyb21TdHJpbmcodHJhbnNmb3JtYXRpb24pOwogICAgLy9kZWZpbmUodGhpcywgeyB0eXBlTmFtZSB9KTsKICAgIC8vdGhpcy50eXBlID0gdHlwZTsKICAgIC8vCiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUcmFuc2Zvcm1hdGlvbicpOwoKICAgIHJldHVybiB0aGlzOwogIH0KCiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkgewogICAgcmV0dXJuIGZ1bmN0aW9uTmFtZSh0aGlzLmNvbnN0cnVjdG9yKTsKICB9CgogIGdldCB0eXBlKCkgewogICAgbGV0IHR5cGUgPQogICAgICB0aGlzLnR5cGVOYW1lIHx8CiAgICAgIGNsYXNzTmFtZSh0aGlzKQogICAgICAgIC50b0xvd2VyQ2FzZSgpCiAgICAgICAgLnJlcGxhY2UoL3RyYW5zZm9ybShhdGlvbik/LywgJycpCiAgICAgICAgLnJlcGxhY2UoLyhpb258aW5nKSQvLCAnZScpOwogICAgcmV0dXJuIHR5cGU7CiAgfQoKICBnZXQgW1N5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGVdKCkgewogICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IgPT09IFRyYW5zZm9ybWF0aW9uTGlzdCB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykgPT0gVHJhbnNmb3JtYXRpb25MaXN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IgPT0gVHJhbnNmb3JtYXRpb25MaXN0OwogIH0KICBnZXQgYXhlcygpIHsKICAgIHJldHVybiB0aGlzLmF4aXMgIT09IHVuZGVmaW5lZCA/IFt0aGlzLmF4aXNdIDogWyd4JywgJ3knLCAneiddLmZpbHRlcihheGlzID0+IGF4aXMgaW4gdGhpcyk7CiAgfQogIGdldCBwcm9wcygpIHsKICAgIHJldHVybiB0aGlzLmF4ZXMuY29uY2F0KFsnYXhpcycsICdhbmdsZSddLmZpbHRlcihrZXkgPT4ga2V5IGluIHRoaXMpKTsKICB9CgogIGhhcyhheGlzKSB7CiAgICBpZih0aGlzLmF4aXMgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGF4aXMgPT09IHRoaXMuYXhpczsKICAgIHJldHVybiBheGlzIGluIHRoaXM7CiAgfQoKICBnZXQgaXMzRCgpIHsKICAgIHJldHVybiB0aGlzLmhhcygneicpOwogIH0KCiAgZW50cmllcygpIHsKICAgIHJldHVybiB0aGlzLnByb3BzLm1hcChwcm9wID0+IFtwcm9wLCB0aGlzW3Byb3BdXSk7CiAgfQoKICB0b0pTT04oKSB7CiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMuZW50cmllcygpKTsKICB9CgogIHZlY3Rvcih1bml0KSB7CiAgICBpZih1bml0ID09PSB1bmRlZmluZWQpIHVuaXQgPSB0aGlzLnVuaXQ7CiAgICByZXR1cm4gKHRoaXMuaXMzRCA/IFsneCcsICd5JywgJ3onXSA6IFsneCcsICd5J10pLm1hcCh1bml0ID8gYXhpcyA9PiB0aGlzW2F4aXNdICsgdW5pdCA6IGF4aXMgPT4gdGhpc1theGlzXSk7CiAgfQoKICB0b1N0cmluZyh0VW5pdCkgewogICAgcmV0dXJuIGAke3RoaXMudHlwZX0ke3RoaXMuaXMzRCA/ICczZCcgOiAnJ30oJHt0aGlzLnZlY3Rvcih0VW5pdCkuam9pbignLCAnKX0pYDsKICB9CiAgY2xvbmUoKSB7CiAgICBsZXQgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRoaXMpOwogICAgbGV0IHByb3BzID0gdGhpcy5wcm9wcy5yZWR1Y2UoKGFjYywgcHJvcCkgPT4gKHsgLi4uYWNjLCBbcHJvcF06IGRlc2NbcHJvcF0gfSksIHt9KTsKICAgIHJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgcHJvcHMpOwogIH0KCiAgc3RhdGljIGZyb21TdHJpbmcoYXJnKSB7CiAgICBsZXQgY21kTGVuID0gYXJnLmluZGV4T2YoJygnKTsKICAgIGxldCBhcmdTdHIgPSBhcmcuc2xpY2UoY21kTGVuICsgMSwgYXJnLmluZGV4T2YoJyknKSk7CiAgICBsZXQgYXJncyA9IGFyZ1N0ci5zcGxpdCgvWyxcc1wgXSsvZyk7CiAgICBsZXQgY21kID0gYXJnLnN1YnN0cmluZygwLCBjbWRMZW4pOwogICAgbGV0IHQ7CiAgICBsZXQgdW5pdDsKCiAgICBhcmdzID0gYXJncwogICAgICAuZmlsdGVyKGFyZyA9PiAvXlstKzAtOS5dK1thLXpdKiQvLnRlc3QoYXJnKSkKICAgICAgLm1hcChhcmcgPT4gewogICAgICAgIGlmKC9bYS16XSQvLnRlc3QoYXJnKSkgewogICAgICAgICAgdW5pdCA9IGFyZy5yZXBsYWNlKC9bLSswLTkuXSovZywgJycpOwogICAgICAgICAgYXJnID0gYXJnLnJlcGxhY2UoL1thLXpdKiQvZywgJycpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICthcmc7CiAgICAgIH0pOwogICAgLy9jb25zb2xlLmxvZygnZnJvbVN0cmluZycsIHsgY21kLCBhcmdzIH0pOwoKICAgIGNvbnN0IGlzM0QgPSBjbWQudG9Mb3dlckNhc2UoKS5lbmRzV2l0aCgnM2QnKTsKICAgIGlmKGlzM0QpIGNtZCA9IGNtZC5zbGljZSgwLCAtMik7CgogICAgaWYoY21kLnN0YXJ0c1dpdGgoJ3JvdGF0JykpIHsKICAgICAgY29uc3QgYXhpcyA9IGlzM0QgPyAnJyA6IGNtZC5zbGljZSg2KTsKICAgICAgYXJncyA9IGF4aXMgIT0gJycgPyBbYXJnc1swXSwgYXhpc10gOiBhcmdzOwogICAgICB0ID0gbmV3IFJvdGF0aW9uKC4uLmFyZ3MpOwogICAgfSBlbHNlIGlmKGNtZC5zdGFydHNXaXRoKCd0cmFuc2xhdCcpKSB7CiAgICAgIGNvbnN0IGF4aXMgPSBpczNEID8gJycgOiBjbWQuc2xpY2UoOSk7CiAgICAgIGFyZ3MgPSBheGlzICE9ICcnID8gW2FyZ3NbMF0sIGF4aXNdIDogYXJnczsKICAgICAgdCA9IG5ldyBUcmFuc2xhdGlvbiguLi5hcmdzKTsKICAgIH0gZWxzZSBpZihjbWQuc3RhcnRzV2l0aCgnc2NhbCcpKSB7CiAgICAgIGNvbnN0IGF4aXMgPSBpczNEID8gJycgOiBjbWQuc2xpY2UoNSk7CiAgICAgIGFyZ3MgPSBheGlzICE9ICcnID8gW2FyZ3NbMF0sIGF4aXNdIDogYXJnczsKICAgICAgdCA9IG5ldyBTY2FsaW5nKC4uLmFyZ3MpOwogICAgfSBlbHNlIGlmKGNtZC5zdGFydHNXaXRoKCdtYXRyaXgnKSkgewogICAgICBjb25zdCBbYSwgYiwgYywgZCwgZSwgZl0gPSBhcmdzOwogICAgICB0ID0gbmV3IE1hdHJpeFRyYW5zZm9ybWF0aW9uKGEsIGMsIGUsIGIsIGQsIGYpOwogICAgfQogICAgaWYodW5pdCkgdC51bml0ID0gdW5pdDsKICAgIHJldHVybiB0OwogIH0KCiAgLypbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHsKICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7CiAgfSovCgogIFtTeW1ib2wudG9QcmltaXRpdmVdKGhpbnQpIHsKICAgIC8vIGNvbnNvbGUubG9nKCJoaW50OiIsaGludCk7CiAgICBpZihoaW50ID09ICdzdHJpbmcnIHx8IGhpbnQgPT0gJ2RlZmF1bHQnKSByZXR1cm4gdGhpcy50b1N0cmluZygpOwoKICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCkgIT0gJyc7CiAgfQoKICBzdGF0aWMgZ2V0IHJvdGF0aW9uKCkgewogICAgcmV0dXJuIFJvdGF0aW9uOwogIH0KICBzdGF0aWMgZ2V0IHRyYW5zbGF0aW9uKCkgewogICAgcmV0dXJuIFRyYW5zbGF0aW9uOwogIH0KICBzdGF0aWMgZ2V0IHNjYWxpbmcoKSB7CiAgICByZXR1cm4gU2NhbGluZzsKICB9CiAgc3RhdGljIGdldCBtYXRyaXgoKSB7CiAgICByZXR1cm4gTWF0cml4VHJhbnNmb3JtYXRpb247CiAgfQp9CgovL1RyYW5zZm9ybWF0aW9uLnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddPSdUcmFuc2Zvcm1hdGlvbic7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNmb3JtYXRpb24sIFN5bWJvbC5oYXNJbnN0YW5jZSwgewogIHZhbHVlKGluc3QpIHsKICAgIHJldHVybiBbVHJhbnNmb3JtYXRpb24sIE1hdHJpeFRyYW5zZm9ybWF0aW9uLCBSb3RhdGlvbiwgVHJhbnNsYXRpb24sIFNjYWxpbmcsIFRyYW5zZm9ybWF0aW9uTGlzdF0uc29tZShjdG9yID0+IE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnN0KSA9PSBjdG9yLnByb3RvdHlwZSk7CiAgfQp9KTsKCmV4cG9ydCBjb25zdCBJbW11dGFibGVUcmFuc2Zvcm1hdGlvbiA9IGltbXV0YWJsZUNsYXNzKFRyYW5zZm9ybWF0aW9uKTsKCmV4cG9ydCBjbGFzcyBSb3RhdGlvbiBleHRlbmRzIFRyYW5zZm9ybWF0aW9uIHsKICBhbmdsZSA9IDA7CiAgLy9heGlzID0gdW5kZWZpbmVkOwoKICBjb25zdHJ1Y3RvcihhbmdsZSwgeCwgeSkgewogICAgc3VwZXIoJ3JvdGF0ZScpOwoKICAgIGlmKHR5cGVvZiB4ID09ICdzdHJpbmcnICYmIFsneCcsICd5JywgJ3onXS5pbmRleE9mKHgudG9Mb3dlckNhc2UoKSkgIT0gLTEpIHsKICAgICAgdGhpcy5heGlzID0geC50b0xvd2VyQ2FzZSgpOwogICAgfSBlbHNlIGlmKCFpc05hTigreCkgJiYgIWlzTmFOKCt5KSkgewogICAgICB0aGlzLmNlbnRlciA9IFsreCwgK3ldOwogICAgfQogICAgLy9lbHNlIHRoaXMuYXhpcyA9ICd6JzsKICAgIHRoaXMuYW5nbGUgPSBhbmdsZTsKICB9CgogIGludmVydCgpIHsKICAgIHJldHVybiBuZXcgUm90YXRpb24oLXRoaXMuYW5nbGUsIHRoaXMuYXhpcyk7CiAgfQoKICBnZXQgdmFsdWVzKCkgewogICAgcmV0dXJuIHsgW3RoaXMuYXhpcyB8fCAneiddOiB0aGlzLmFuZ2xlIH07CiAgfQoKICBnZXQgaXMzRCgpIHsKICAgIHJldHVybiB0aGlzLmF4aXMgPT0gJ3onOwogIH0KCiAgaXNaZXJvKCkgewogICAgcmV0dXJuIHRoaXMuYW5nbGUgPT0gMDsKICB9CgogIHRvU3RyaW5nKHJVbml0KSB7CiAgICByVW5pdCA9IHJVbml0IHx8IHRoaXMudW5pdCB8fCAnJzsKICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXMgIT09IHVuZGVmaW5lZCA/IHRoaXMuYXhpcy50b1VwcGVyQ2FzZSgpIDogJyc7CiAgICBjb25zdCBhbmdsZSA9IHRoaXMuY29uc3RydWN0b3IuY29udmVydEFuZ2xlKHRoaXMuYW5nbGUsIHJVbml0KTsKICAgIHJldHVybiBgcm90YXRlJHt0aGlzLmlzM0QgPyBheGlzIDogJyd9KCR7YW5nbGV9JHtyVW5pdH0ke3RoaXMuY2VudGVyID8gdGhpcy5jZW50ZXIubWFwKGNvb3JkID0+IGAsICR7Y29vcmR9YCkuam9pbignJykgOiAnJ30pYDsKICB9CgogIHRvU291cmNlKCkgewogICAgbGV0IG8gPSAnbmV3ICcgKyBjbGFzc05hbWUodGhpcykgKyAnKCcgKyB0aGlzLmFuZ2xlICsgJyknOwogICAgcmV0dXJuIG87CiAgfQoKICB0b01hdHJpeChtYXRyaXggPSBNYXRyaXguaWRlbnRpdHkoKSkgewogICAgY29uc3QgeyBjZW50ZXIsIGFuZ2xlIH0gPSB0aGlzOwogICAgaWYoY2VudGVyKSBtYXRyaXgudHJhbnNsYXRlU2VsZiguLi5bLi4uY2VudGVyXS5tYXAoY29vcmQgPT4gLWNvb3JkKSk7CiAgICBtYXRyaXgucm90YXRlU2VsZihERUcyUkFEICogYW5nbGUpOwogICAgaWYoY2VudGVyKSBtYXRyaXgudHJhbnNsYXRlU2VsZiguLi5jZW50ZXIpOwogICAgcmV0dXJuIG1hdHJpeC5yb3VuZFNlbGYoKTsKICB9CgogIGFjY3VtdWxhdGUob3RoZXIpIHsKICAgIGlmKHRoaXMudHlwZSAhPT0gb3RoZXIudHlwZSAmJiB0aGlzLmF4aXMgIT09IG90aGVyLmF4aXMpIHRocm93IG5ldyBFcnJvcihjbGFzc05hbWUodGhpcykgKyAnOiBhY2N1bXVsYXRlIG1pc21hdGNoJyk7CiAgICByZXR1cm4gbmV3IFJvdGF0aW9uKHRoaXMuYW5nbGUgKyBvdGhlci5hbmdsZSwgdGhpcy5heGlzKTsKICB9CgogIHN0YXRpYyBjb252ZXJ0QW5nbGUoYW5nbGUsIHVuaXQpIHsKICAgIHN3aXRjaCAodW5pdCkgewogICAgICBjYXNlICdkZWcnOgogICAgICAgIHJldHVybiBhbmdsZTsKICAgICAgY2FzZSAncmFkJzoKICAgICAgICByZXR1cm4gREVHMlJBRCAqIGFuZ2xlOwogICAgICBjYXNlICd0dXJuJzoKICAgICAgICByZXR1cm4gYW5nbGUgLyAzNjA7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIGFuZ2xlOwogICAgfQogIH0KfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KFJvdGF0aW9uLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnUm90YXRpb24nLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTsKCmV4cG9ydCBjb25zdCBJbW11dGFibGVSb3RhdGlvbiA9IGltbXV0YWJsZUNsYXNzKFJvdGF0aW9uKTsKCmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvbiBleHRlbmRzIFRyYW5zZm9ybWF0aW9uIHsKICB4ID0gMDsKICB5ID0gMDsKICAvL3ogPSB1bmRlZmluZWQ7CgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHsKICAgIHN1cGVyKCd0cmFuc2xhdGUnKTsKCiAgICBpZih0eXBlb2YgYXJnc1sxXSA9PSAnc3RyaW5nJyAmJiBbJ3gnLCAneScsICd6J10uaW5kZXhPZihhcmdzWzFdLnRvTG93ZXJDYXNlKCkpICE9IC0xKSB7CiAgICAgIGNvbnN0IG4gPSBhcmdzLnNoaWZ0KCk7CiAgICAgIGNvbnN0IGF4aXMgPSBhcmdzLnNoaWZ0KCkudG9Mb3dlckNhc2UoKTsKICAgICAgdGhpc1theGlzXSA9IG47CiAgICB9IGVsc2UgewogICAgICBsZXQgbnVtRGltID0gWy4uLmFyZ3MsICcuJ10uZmluZEluZGV4KGEgPT4gaXNOYU4oK2EpKTsKICAgICAgY29uc3QgW3ggPSAwLCB5ID0gMCwgel0gPSBhcmdzLnNwbGljZSgwLCBudW1EaW0pOwogICAgICB0aGlzLnggPSAreDsKICAgICAgdGhpcy55ID0gK3k7CiAgICAgIGlmKHogIT09IHVuZGVmaW5lZCkgdGhpcy56ID0gK3o7CiAgICB9CiAgICBpZihhcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ3NbMF0gPT0gJ3N0cmluZycpIHRoaXMudW5pdCA9IGFyZ3Muc2hpZnQoKTsKICB9CgogIGdldCB2YWx1ZXMoKSB7CiAgICBjb25zdCB7IHgsIHksIHogfSA9IHRoaXM7CiAgICByZXR1cm4gJ3onIGluIHRoaXMgPyB7IHgsIHksIHogfSA6IHsgeCwgeSB9OwogIH0KCiAgaXNaZXJvKCkgewogICAgY29uc3QgeyB4LCB5LCB6IH0gPSB0aGlzOwogICAgcmV0dXJuICd6JyBpbiB0aGlzID8geCA9PSAwICYmIHkgPT0gMCAmJiB6ID09IDAgOiB4ID09IDAgJiYgeSA9PSAwOwogIH0KCiAgdG9NYXRyaXgobWF0cml4ID0gTWF0cml4LmlkZW50aXR5KCkpIHsKICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpczsKICAgIHJldHVybiBtYXRyaXgudHJhbnNsYXRlKHgsIHkpOwogIH0KCiAgLypjbG9uZSgpIHsKICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdGhpczsKICAgIHJldHVybiB6ICE9PSB1bmRlZmluZWQgPyBuZXcgVHJhbnNsYXRpb24oeCwgeSwgeikgOiBuZXcgVHJhbnNsYXRpb24oeCwgeSk7CiAgfSovCgogIGludmVydCgpIHsKICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdGhpczsKICAgIHJldHVybiB6ICE9PSB1bmRlZmluZWQgPyBuZXcgVHJhbnNsYXRpb24oLXgsIC15LCAteikgOiBuZXcgVHJhbnNsYXRpb24oTWF0aC5hYnMoeCkgPT0gMCA/IDAgOiAteCwgTWF0aC5hYnMoeSkgPT0gMCA/IDAgOiAteSk7CiAgfQoKICBhY2N1bXVsYXRlKG90aGVyKSB7CiAgICBpZih0aGlzLnR5cGUgIT09IG90aGVyLnR5cGUpIHRocm93IG5ldyBFcnJvcihjbGFzc05hbWUodGhpcykgKyAnOiBhY2N1bXVsYXRlIG1pc21hdGNoJyk7CgogICAgaWYodGhpcy5pczNEKSByZXR1cm4gbmV3IFRyYW5zbGF0aW9uKHRoaXMueCArIG90aGVyLngsIHRoaXMueSArIG90aGVyLnksIHRoaXMueiArIG90aGVyLnopOwogICAgcmV0dXJuIG5ldyBUcmFuc2xhdGlvbih0aGlzLnggKyBvdGhlci54LCB0aGlzLnkgKyBvdGhlci55KTsKICB9Cn0KT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zbGF0aW9uLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnVHJhbnNsYXRpb24nLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTsKCmV4cG9ydCBjb25zdCBJbW11dGFibGVUcmFuc2xhdGlvbiA9IGltbXV0YWJsZUNsYXNzKFRyYW5zbGF0aW9uKTsKCmV4cG9ydCBjbGFzcyBTY2FsaW5nIGV4dGVuZHMgVHJhbnNmb3JtYXRpb24gewogIHggPSAxOwogIHkgPSAxOwogIC8veiA9IHVuZGVmaW5lZDsKCiAgY29uc3RydWN0b3IoLi4uYXJncykgewogICAgc3VwZXIoJ3NjYWxlJyk7CgogICAgaWYodHlwZW9mIGFyZ3NbMV0gPT0gJ3N0cmluZycgJiYgWyd4JywgJ3knLCAneiddLmluZGV4T2YoYXJnc1sxXS50b0xvd2VyQ2FzZSgpKSAhPSAtMSkgewogICAgICBjb25zdCBuID0gYXJncy5zaGlmdCgpOwogICAgICBjb25zdCBheGlzID0gYXJncy5zaGlmdCgpLnRvTG93ZXJDYXNlKCk7CiAgICAgIHRoaXNbYXhpc10gPSBuOwogICAgfSBlbHNlIHsKICAgICAgY29uc3QgW3ggPSAxLCB5LCB6XSA9IGFyZ3Muc3BsaWNlKDAsIDMpOwogICAgICB0aGlzLnggPSAreDsKICAgICAgdGhpcy55ID0geSA9PT0gdW5kZWZpbmVkID8gdGhpcy54IDogK3k7CiAgICAgIGlmKHogIT09IHVuZGVmaW5lZCkgdGhpcy56ID0gK3o7CiAgICB9CiAgfQoKICBnZXQgdmFsdWVzKCkgewogICAgY29uc3QgeyB4LCB5LCB6IH0gPSB0aGlzOwogICAgcmV0dXJuICd6JyBpbiB0aGlzID8geyB4LCB5LCB6IH0gOiB7IHgsIHkgfTsKICB9CgogIHRvTWF0cml4KG1hdHJpeCA9IE1hdHJpeC5pZGVudGl0eSgpKSB7CiAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXM7CiAgICByZXR1cm4gbWF0cml4LnNjYWxlU2VsZih4LCB5KTsKICB9CgogIGlzWmVybygpIHsKICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdGhpczsKICAgIHJldHVybiAneicgaW4gdGhpcyA/IHggPT0gMSAmJiB5ID09IDEgJiYgeiA9PSAxIDogeCA9PSAxICYmIHkgPT0gMTsKICB9CgogIHRvU3RyaW5nKCkgewogICAgY29uc3QgdmVjdG9yID0gdGhpcy52ZWN0b3IoJycpOwogICAgY29uc3QgY29vcmRzID0gdmVjdG9yLmpvaW4oJywgJyk7CgogICAgcmV0dXJuIGAke3RoaXMudHlwZX0ke3RoaXMuaXMzRCA/ICczZCcgOiAnJ30oJHtjb29yZHN9KWA7CiAgfQoKICAvKmNsb25lKCkgewogICAgY29uc3QgeyB4LCB5LCB6IH0gPSB0aGlzOwogICAgcmV0dXJuIHogIT09IHVuZGVmaW5lZCA/IG5ldyBTY2FsaW5nKHgsIHksIHopIDogbmV3IFNjYWxpbmcoeCwgeSk7CiAgfSovCgogIGludmVydCgpIHsKICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdGhpczsKICAgIHJldHVybiB6ICE9PSB1bmRlZmluZWQgPyBuZXcgU2NhbGluZygxIC8geCwgMSAvIHksIDEgLyB6KSA6IG5ldyBTY2FsaW5nKDEgLyB4LCAxIC8geSk7CiAgfQoKICBhY2N1bXVsYXRlKG90aGVyKSB7CiAgICBpZih0aGlzLnR5cGUgIT09IG90aGVyLnR5cGUpIHRocm93IG5ldyBFcnJvcihjbGFzc05hbWUodGhpcykgKyAnOiBhY2N1bXVsYXRlIG1pc21hdGNoJyk7CgogICAgaWYodGhpcy5pczNEKSByZXR1cm4gbmV3IFNjYWxpbmcodGhpcy54ICogb3RoZXIueCwgdGhpcy55ICogb3RoZXIueSwgdGhpcy56ICogb3RoZXIueik7CiAgICByZXR1cm4gbmV3IFNjYWxpbmcodGhpcy54ICogb3RoZXIueCwgdGhpcy55ICogb3RoZXIueSk7CiAgfQp9Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2FsaW5nLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnU2NhbGluZycsIGVudW1lcmFibGU6IGZhbHNlIH0pOwoKZXhwb3J0IGNvbnN0IEltbXV0YWJsZVNjYWxpbmcgPSBpbW11dGFibGVDbGFzcyhTY2FsaW5nKTsKCmV4cG9ydCBjbGFzcyBNYXRyaXhUcmFuc2Zvcm1hdGlvbiBleHRlbmRzIFRyYW5zZm9ybWF0aW9uIHsKICBtYXRyaXggPSBNYXRyaXguSURFTlRJVFk7CgogIGNvbnN0cnVjdG9yKGluaXQpIHsKICAgIHN1cGVyKCdtYXRyaXgnKTsKCiAgICBpZihpbml0IGluc3RhbmNlb2YgTWF0cml4KSB0aGlzLm1hdHJpeCA9IGluaXQ7CiAgICBlbHNlIGlmKGlzTWF0cml4KGluaXQpKSB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoaW5pdCk7CiAgICBlbHNlIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCguLi5hcmd1bWVudHMpOwogIH0KCiAgZ2V0IHZhbHVlcygpIHsKICAgIHJldHVybiB0aGlzLm1hdHJpeC52YWx1ZXMoKTsKICB9CgogIHRvTWF0cml4KG1hdHJpeCA9IE1hdHJpeC5pZGVudGl0eSgpKSB7CiAgICByZXR1cm4gbWF0cml4Lm11bHRpcGx5U2VsZih0aGlzLm1hdHJpeCk7CiAgfQoKICB0b1N0cmluZygpIHsKICAgIHJldHVybiB0aGlzLm1hdHJpeC50b1N0cmluZygnJyk7CiAgfQoKICBpbnZlcnQoKSB7CiAgICByZXR1cm4gbmV3IE1hdHJpeFRyYW5zZm9ybWF0aW9uKHRoaXMubWF0cml4LmludmVydCgpKTsKICB9CgogIGlzWmVybygpIHsKICAgIHJldHVybiB0aGlzLm1hdHJpeC5pc0lkZW50aXR5KCk7CiAgfQoKICBhY2N1bXVsYXRlKG90aGVyKSB7CiAgICBpZih0aGlzLnR5cGUgIT09IG90aGVyLnR5cGUpIHRocm93IG5ldyBFcnJvcihjbGFzc05hbWUodGhpcykgKyAnOiBhY2N1bXVsYXRlIG1pc21hdGNoJyk7CgogICAgcmV0dXJuIG5ldyBNYXRyaXhUcmFuc2Zvcm1hdGlvbih0aGlzLm1hdHJpeC5tdWx0aXBseShvdGhlci5tYXRyaXgpKTsKICB9Cn0KT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hdHJpeFRyYW5zZm9ybWF0aW9uLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7CiAgdmFsdWU6ICdNYXRyaXhUcmFuc2Zvcm1hdGlvbicsCiAgZW51bWVyYWJsZTogZmFsc2UKfSk7CgpleHBvcnQgY29uc3QgSW1tdXRhYmxlTWF0cml4VHJhbnNmb3JtYXRpb24gPSBpbW11dGFibGVDbGFzcyhNYXRyaXhUcmFuc2Zvcm1hdGlvbik7CgpleHBvcnQgY2xhc3MgVHJhbnNmb3JtYXRpb25MaXN0IGV4dGVuZHMgQXJyYXkgewogIGNvbnN0cnVjdG9yKGluaXQsIHRVbml0LCByVW5pdCkgewogICAgc3VwZXIoKTsKICAgIGlmKGlzT2JqZWN0KGluaXQpKSB7CiAgICAgIGlmKHRVbml0ID09PSB1bmRlZmluZWQpIHRVbml0ID0gaW5pdC50cmFuc2xhdGlvblVuaXQgfHwgaW5pdC50VW5pdDsKICAgICAgaWYoclVuaXQgPT0gdW5kZWZpbmVkKSByVW5pdCA9IGluaXQucm90YXRpb25Vbml0IHx8IGluaXQuclVuaXQ7CiAgICB9CiAgICBpZihpbml0KSB7CiAgICAgIHRoaXMuaW5pdGlhbGl6ZShpbml0KTsKICAgIH0KICAgIGlmKHR5cGVvZiB0VW5pdCA9PSAnc3RyaW5nJykgdGhpcy50cmFuc2xhdGlvblVuaXQgPSB0VW5pdDsKICAgIGlmKHR5cGVvZiByVW5pdCA9PSAnc3RyaW5nJykgdGhpcy5yb3RhdGlvblVuaXQgPSByVW5pdDsKCiAgICByZXR1cm4gdGhpczsKICB9CgogIGluaXRpYWxpemUoaW5pdCkgewogICAgaWYodHlwZW9mIGluaXQgPT0gJ251bWJlcicpIHdoaWxlKHRoaXMubGVuZ3RoIDwgaW5pdCkgdGhpcy5wdXNoKHVuZGVmaW5lZCk7CiAgICBlbHNlIGlmKHR5cGVvZiBpbml0ID09ICdzdHJpbmcnKSBUcmFuc2Zvcm1hdGlvbkxpc3QucHJvdG90eXBlLmZyb21TdHJpbmcuY2FsbCh0aGlzLCBpbml0KTsKICAgIGVsc2UgaWYoaW5pdCBpbnN0YW5jZW9mIEFycmF5KSBUcmFuc2Zvcm1hdGlvbkxpc3QucHJvdG90eXBlLmZyb21BcnJheS5jYWxsKHRoaXMsIGluaXQpOwogICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ05vIHN1Y2ggaW5pdGlhbGl6YXRpb246ICcgKyBpbml0KTsKICAgIHJldHVybiB0aGlzOwogIH0KCiAgZ2V0IFtTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlXSgpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgLyoKICBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHsKICAgIHJldHVybiB0aGlzLnRvU291cmNlKCk7CiAgfSovCgogIHN0YXRpYyBnZXQgW1N5bWJvbC5zcGVjaWVzXSgpIHsKICAgIHJldHVybiBUcmFuc2Zvcm1hdGlvbkxpc3Q7CiAgfQoKICBnZXQgW1N5bWJvbC5zcGVjaWVzXSgpIHsKICAgIHJldHVybiBUcmFuc2Zvcm1hdGlvbkxpc3Q7CiAgfQoKICBmcm9tU3RyaW5nKHN0cikgewogICAgbGV0IG4sCiAgICAgIGEgPSBbXTsKCiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSArPSBuKSB7CiAgICAgIGxldCBzID0gc3RyLnNsaWNlKGkpOwogICAgICBuID0gcy5pbmRleE9mKCcpJykgKyAxOwogICAgICBpZihuID09IDApIG4gPSBzdHIubGVuZ3RoOwogICAgICBzID0gcy5zbGljZSgwLCBuKS50cmltKCk7CiAgICAgIGlmKHMgIT0gJycpIGEucHVzaChzKTsKICAgIH0KICAgIHJldHVybiB0aGlzLmZyb21BcnJheShhKTsKICB9CgogIGZyb21BcnJheShhcnIpIHsKICAgIGZvcihsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgYXJnID0gYXJyW2ldOwoKICAgICAgaWYoYXJnIGluc3RhbmNlb2YgVHJhbnNmb3JtYXRpb24pIHRoaXMucHVzaChhcmcpOwogICAgICBlbHNlIGlmKHR5cGVvZiBhcmcgPT0gJ3N0cmluZycpIHRoaXMucHVzaChUcmFuc2Zvcm1hdGlvbi5mcm9tU3RyaW5nKGFyZykpOwogICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignTm8gc3VjaCB0cmFuc2Zvcm1hdGlvbjogJyArIGFyZyk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfQoKICBnZXQgdHJhbnNsYXRpb25Vbml0KCkgewogICAgcmV0dXJuIChpc09iamVjdCh0aGlzLnRyYW5zbGF0aW9uKSAmJiB0aGlzLnRyYW5zbGF0aW9uLnVuaXQpIHx8IHRoaXMudFVuaXQ7CiAgfQogIHNldCB0cmFuc2xhdGlvblVuaXQodmFsdWUpIHsKICAgIGlmKGlzT2JqZWN0KHRoaXMudHJhbnNsYXRpb24pKSB0aGlzLnRyYW5zbGF0aW9uLnVuaXQgPSB2YWx1ZTsKICAgIGVsc2UgdGhpcy50VW5pdCA9IHZhbHVlOwogIH0KCiAgZ2V0IHJvdGF0aW9uVW5pdCgpIHsKICAgIHJldHVybiAoaXNPYmplY3QodGhpcy5yb3RhdGlvbikgJiYgdGhpcy5yb3RhdGlvbi51bml0KSB8fCB0aGlzLnJVbml0OwogIH0KICBzZXQgcm90YXRpb25Vbml0KHZhbHVlKSB7CiAgICBpZihpc09iamVjdCh0aGlzLnJvdGF0aW9uKSkgdGhpcy5yb3RhdGlvbi51bml0ID0gdmFsdWU7CiAgICBlbHNlIHRoaXMuclVuaXQgPSB2YWx1ZTsKICB9CiAgc3RhdGljIGZyb21TdHJpbmcoc3RyKSB7CiAgICByZXR1cm4gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdCgpLmZyb21TdHJpbmcoc3RyKTsKICB9CgogIHN0YXRpYyBmcm9tQXJyYXkoYXJyKSB7CiAgICByZXR1cm4gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdCgpLmZyb21BcnJheShhcnIpOwogIH0KCiAgc3RhdGljIGZyb21NYXRyaXgobWF0cml4KSB7CiAgICBtYXRyaXggPSBtYXRyaXggaW5zdGFuY2VvZiBNYXRyaXggPyBtYXRyaXggOiBuZXcgTWF0cml4KG1hdHJpeCk7CgogICAgY29uc3QgdHJhbnNmb3JtYXRpb25zID0gTWF0cml4LmRlY29tcG9zZShtYXRyaXgsIHRydWUpOwoKICAgIGRlZmluZSh0cmFuc2Zvcm1hdGlvbnMuc2NhbGUsIHsKICAgICAgdG9BcnJheSgpIHsKICAgICAgICByZXR1cm4gW3RoaXMueCwgdGhpcy55XTsKICAgICAgfQogICAgfSk7CiAgICBkZWZpbmUodHJhbnNmb3JtYXRpb25zLnRyYW5zbGF0ZSwgewogICAgICB0b0FycmF5KCkgewogICAgICAgIHJldHVybiBbdGhpcy54LCB0aGlzLnldOwogICAgICB9CiAgICB9KTsKCiAgICBsZXQgcmV0ID0gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdCgpOwoKICAgIHJldC50cmFuc2xhdGUoLi4udHJhbnNmb3JtYXRpb25zLnRyYW5zbGF0ZS50b0FycmF5KCkpOwogICAgcmV0LnJvdGF0ZSh0cmFuc2Zvcm1hdGlvbnMucm90YXRlKTsKICAgIHJldC5zY2FsZSguLi50cmFuc2Zvcm1hdGlvbnMuc2NhbGUudG9BcnJheSgpKTsKCiAgICByZXR1cm4gcmV0OwogIH0KCiAgcHVzaCguLi5hcmdzKSB7CiAgICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICAgIGlmKHR5cGVvZiBhcmcgPT0gJ3N0cmluZycpIGFyZyA9IFRyYW5zZm9ybWF0aW9uLmZyb21TdHJpbmcoYXJnKTsKICAgICAgZWxzZSBpZihpc01hdHJpeChhcmcpKSBhcmcgPSBuZXcgTWF0cml4VHJhbnNmb3JtYXRpb24oYXJnKTsKCiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgYXJnKTsKICAgIH0KICAgIHJldHVybiB0aGlzOwogIH0KCiAgY2xvbmUoKSB7CiAgICByZXR1cm4gdGhpcy5tYXAodCA9PiB0LmNsb25lKCkpOyAvLyB0aGlzLnNsaWNlKCk7CiAgfQoKICBtYXAoZm4pIHsKICAgIHJldHVybiB0aGlzLmJhc2VDYWxsKEFycmF5LnByb3RvdHlwZS5tYXApKGZuKTsKICB9CgogIHNsaWNlKC4uLmFyZ3MpIHsKICAgIHJldHVybiB0aGlzLmJhc2VDYWxsKEFycmF5LnByb3RvdHlwZS5zbGljZSkoLi4uYXJncyk7CiAgfQoKICBzcGxpY2UoLi4uYXJncykgewogICAgcmV0dXJuIHRoaXMuYmFzZUNhbGwoQXJyYXkucHJvdG90eXBlLnNwbGljZSkoLi4uYXJncyk7CiAgfQoKICBjb25jYXQoLi4uYXJncykgewogICAgcmV0dXJuIHRoaXMuYmFzZUNhbGwoQXJyYXkucHJvdG90eXBlLmNvbmNhdCkoLi4uYXJncyk7CiAgfQoKICBmaWx0ZXIocHJlZCkgewogICAgcmV0dXJuIHRoaXMuYmFzZUNhbGwoQXJyYXkucHJvdG90eXBlLmZpbHRlcikocHJlZCk7CiAgfQoKICBiYXNlQ2FsbChjID0gQXJyYXkucHJvdG90eXBlLm1hcCkgewogICAgcmV0dXJuICguLi5hcmdzKSA9PiB7CiAgICAgIGNvbnN0IHsgdFVuaXQsIHJVbml0IH0gPSB0aGlzOwogICAgICBsZXQgciA9IGMuY2FsbCh0aGlzLCAuLi5hcmdzKTsKICAgICAgaWYodFVuaXQpIHIudFVuaXQgPSB0VW5pdDsKICAgICAgaWYoclVuaXQpIHIuclVuaXQgPSByVW5pdDsKICAgICAgcmV0dXJuIHI7CiAgICB9OwogIH0KCiAgdW5zaGlmdCguLi5hcmdzKSB7CiAgICBmb3IobGV0IGFyZyBvZiBhcmdzLnJldmVyc2UoKSkgewogICAgICBpZih0eXBlb2YgYXJnID09ICdzdHJpbmcnKSBhcmcgPSBUcmFuc2Zvcm1hdGlvbi5mcm9tU3RyaW5nKGFyZyk7CiAgICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmNhbGwodGhpcywgYXJnKTsKICAgIH0KICAgIHJldHVybiB0aGlzOwogIH0KCiAgcm90YXRlKC4uLmFyZ3MpIHsKICAgIGxldCByb3RhdGlvbiA9IG5ldyBSb3RhdGlvbiguLi5hcmdzKTsKICAgIGlmKCFyb3RhdGlvbi5pc1plcm8oKSkgQXJyYXkucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCByb3RhdGlvbik7CiAgICByZXR1cm4gdGhpczsKICB9CgogIHRyYW5zbGF0ZSh4LCB5KSB7CiAgICBsZXQgdHJhbnMgPSB0aGlzLmZpbHRlcih0ID0+ICF0LnR5cGUuc3RhcnRzV2l0aCgndHJhbnNsYXQnKSk7CiAgICBsZXQgdmVjID0gbmV3IFBvaW50KHgsIHkpOwoKICAgIC8vdHJhbnMudG9NYXRyaXgoKS50cmFuc2Zvcm1Qb2ludCh2ZWMpOwoKICAgIHZlYyA9IHZlYy5yb3VuZCgwLjAwMDAxLCA1KTsKICAgIC8vY29uc29sZS5sb2coImZyb206IiwgbmV3IFBvaW50KHgseSksICIgdG86IiwgdmVjKTsKICAgIGxldCB0cmFuc2xhdGlvbiA9IG5ldyBUcmFuc2xhdGlvbih2ZWMueCwgdmVjLnkpOwoKICAgIGlmKCF0cmFuc2xhdGlvbi5pc1plcm8oKSkgLyogICAgaWYoTWF0aC5hYnModmVjLngpICE9IDAgfHwgTWF0aC5hYnModmVjLnkpICE9IDApICovIEFycmF5LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgdHJhbnNsYXRpb24pOwoKICAgIHJldHVybiB0aGlzOwogIH0KCiAgc2NhbGUoLi4uYXJncykgewogICAgbGV0IHNjYWxpbmcgPSBuZXcgU2NhbGluZyguLi5hcmdzKTsKICAgIGlmKCFzY2FsaW5nLmlzWmVybygpKSBBcnJheS5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIHNjYWxpbmcpOwogICAgcmV0dXJuIHRoaXM7CiAgfQoKICBtYXRyaXgoLi4uYXJncykgewogICAgbGV0IG1hdHJpeFRyYW5zZm9ybWF0aW9uID0gbmV3IE1hdHJpeFRyYW5zZm9ybWF0aW9uKC4uLmFyZ3MpOwogICAgaWYoIW1hdHJpeFRyYW5zZm9ybWF0aW9uLmlzWmVybygpKSBBcnJheS5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIG1hdHJpeFRyYW5zZm9ybWF0aW9uKTsKICAgIHJldHVybiB0aGlzOwogIH0KCiAgdG9TdHJpbmcodFVuaXQsIHJVbml0KSB7CiAgICBpZih0aGlzLmxlbmd0aCA+IDApIHsKICAgICAgdFVuaXQgPSB0VW5pdCB8fCB0aGlzLnRyYW5zbGF0aW9uVW5pdDsKICAgICAgclVuaXQgPSByVW5pdCB8fCB0aGlzLnJvdGF0aW9uVW5pdDsKICAgICAgbGV0IHIgPSB0aGlzLm1hcCh0ID0+IHQgJiYgdC50eXBlICYmIHQudG9TdHJpbmcodC50eXBlLnN0YXJ0c1dpdGgoJ3NjYWwnKSA/ICcnIDogdC50eXBlLnN0YXJ0c1dpdGgoJ3JvdGF0JykgPyByVW5pdCA6IHRVbml0KSkuam9pbignICcpOwogICAgICByZXR1cm4gcjsKICAgIH0KICAgIHJldHVybiAnJzsKICB9CgogIHRvRE9NKCkgewogICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoJ3B4JywgJ2RlZycpOwogIH0KCiAgLyogIFtTeW1ib2wudG9TdHJpbmdUYWddKCkgewogICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsKICB9Ki8KCiAgdG9Tb3VyY2UoKSB7CiAgICBsZXQgcyA9ICduZXcgJyArIGNsYXNzTmFtZSh0aGlzKSArICcoWyc7CgogICAgcyArPSB0aGlzLm1hcCh0ID0+IHQudG9Tb3VyY2UoKSkuam9pbignLCAnKTsKICAgIHJldHVybiBzICsgJ10pJzsKICB9CgogIHRvTWF0cmljZXMoKSB7CiAgICByZXR1cm4gWy4uLnRoaXMubWFwKHQgPT4gdC50b01hdHJpeCgpKV07CiAgfQoKICB0b01hdHJpeCggKSB7CiAgICByZXR1cm4gbmV3IE1hdHJpeCgpLm11bHRpcGx5KC4uLnRoaXMudG9NYXRyaWNlcygpKTsKICB9CgogIHVuZG8oKSB7CiAgICBsZXQgcmV0ID0gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdCgpOwoKICAgIGZvcihsZXQgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIEFycmF5LnByb3RvdHlwZS5wdXNoLmNhbGwocmV0LCB0aGlzW2ldLmludmVydCgpKTsKCiAgICByZXR1cm4gcmV0OwogIH0KCiAgbWVyZ2UoLi4uYXJncykgewogICAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgICBpZih0eXBlb2YgYXJnID09ICdzdHJpbmcnKSBhcmcgPSBUcmFuc2Zvcm1hdGlvbkxpc3QuZnJvbVN0cmluZyhhcmcpOwoKICAgICAgVHJhbnNmb3JtYXRpb25MaXN0LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMsIGFyZyk7CiAgICB9CiAgICByZXR1cm4gdGhpczsKICB9CgogIGRlY29tcG9zZShkZWdyZWVzID0gdHJ1ZSwgdHJhbnNmb3JtYXRpb25MaXN0ID0gdHJ1ZSkgewogICAgbGV0IG1hdHJpeCA9IHRoaXMudG9NYXRyaXgoKTsKICAgIGNvbnN0IHsgdHJhbnNsYXRlLCByb3RhdGUsIHNjYWxlIH0gPSBtYXRyaXguZGVjb21wb3NlKGRlZ3JlZXMpOwogICAgbGV0IGRlY29tcG9zZWQgPSB7IHRyYW5zbGF0ZSwgcm90YXRlLCBzY2FsZSB9OwoKICAgIGlmKHRyYW5zZm9ybWF0aW9uTGlzdCkgewogICAgICBsZXQgcmV0ID0gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdCgpOwogICAgICByZXQudHJhbnNsYXRlKHRyYW5zbGF0ZS54LCB0cmFuc2xhdGUueSwgdHJhbnNsYXRlLnopOwogICAgICByZXQucm90YXRlKHJvdGF0ZSk7CiAgICAgIHJldC5zY2FsZShzY2FsZS54LCBzY2FsZS55LCBzY2FsZS56KTsKICAgICAgcmV0dXJuIHJldDsKICAgIH0KCiAgICBkZWNvbXBvc2VkLnNjYWxlLnRvQXJyYXkgPSBkZWNvbXBvc2VkLnRyYW5zbGF0ZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSgpIHsKICAgICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueV07CiAgICB9OwogICAgcmV0dXJuIGRlY29tcG9zZWQ7CiAgfQoKICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkgewogICAgZm9yKGxldCBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICBjb25zdCB4ID0gdGhpc1tpXTsKICAgICAgaWYocHJlZGljYXRlKHgpKSByZXR1cm4gaTsKICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KCiAgZmluZExhc3QocHJlZGljYXRlKSB7CiAgICBsZXQgaW5kZXggPSB0aGlzLmZpbmRMYXN0SW5kZXgocHJlZGljYXRlKTsKICAgIHJldHVybiB0aGlzW2luZGV4XTsKICB9CgogIGdldCByb3RhdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmZpbmRMYXN0KGl0ZW0gPT4gaXRlbSAmJiBpdGVtLnR5cGUgJiYgaXRlbS50eXBlLnN0YXJ0c1dpdGgoJ3JvdGF0JykpOwogIH0KICBzZXQgcm90YXRpb24odmFsdWUpIHsKICAgIGxldCBpbmRleCA9IHRoaXMuZmluZExhc3RJbmRleChpdGVtID0+IGl0ZW0udHlwZS5zdGFydHNXaXRoKCdyb3RhdCcpKTsKICAgIHZhbHVlID0gdmFsdWUgaW5zdGFuY2VvZiBSb3RhdGlvbiA/IHZhbHVlIDogbmV3IFJvdGF0aW9uKHZhbHVlKTsKICAgIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbCh0aGlzLCBpbmRleCwgMSwgdmFsdWUpOwogIH0KCiAgZ2V0IHNjYWxpbmcoKSB7CiAgICByZXR1cm4gdGhpcy5maW5kTGFzdChpdGVtID0+IGl0ZW0gJiYgaXRlbS50eXBlICYmIGl0ZW0udHlwZS5zdGFydHNXaXRoKCdzY2FsJykpOwogIH0KICBzZXQgc2NhbGluZyh2YWx1ZSkgewogICAgbGV0IGluZGV4ID0gdGhpcy5maW5kTGFzdEluZGV4KGl0ZW0gPT4gaXRlbS50eXBlLnN0YXJ0c1dpdGgoJ3NjYWwnKSk7CiAgICB2YWx1ZSA9IHZhbHVlIGluc3RhbmNlb2YgU2NhbGluZyA/IHZhbHVlIDogbmV3IFNjYWxpbmcodmFsdWUpOwogICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKHRoaXMsIGluZGV4LCAxLCB2YWx1ZSk7CiAgfQoKICBnZXQgdHJhbnNsYXRpb24oKSB7CiAgICByZXR1cm4gdGhpcy5maW5kTGFzdChpdGVtID0+IGl0ZW0gJiYgaXRlbS50eXBlICYmIHR5cGVvZiBpdGVtLnR5cGUgPT0gJ3N0cmluZycgJiYgaXRlbS50eXBlLnN0YXJ0c1dpdGgoJ3RyYW5zbGF0JykpOwogIH0KCiAgc2V0IHRyYW5zbGF0aW9uKHZhbHVlKSB7CiAgICBsZXQgaW5kZXggPSB0aGlzLmZpbmRMYXN0SW5kZXgoaXRlbSA9PiBpdGVtICYmIGl0ZW0udHlwZSAmJiBpdGVtLnR5cGUuc3RhcnRzV2l0aCgndHJhbnNsJykpOwogICAgdmFsdWUgPSB2YWx1ZSBpbnN0YW5jZW9mIFRyYW5zbGF0aW9uID8gdmFsdWUgOiBuZXcgVHJhbnNsYXRpb24odmFsdWUpOwogICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKHRoaXMsIGluZGV4LCAxLCB2YWx1ZSk7CiAgfQogIC8qICBtYXAoLi4uYXJncykgewogICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuYXBwbHkoQXJyYXkuZnJvbSh0aGlzKSwgYXJncyk7CiAgfSovCgogIGdldCBsYXN0KCkgewogICAgcmV0dXJuIHRoaXMuYXQoLTEpOwogIH0KICBnZXQgZmlyc3QoKSB7CiAgICByZXR1cm4gdGhpcy5hdCgwKTsKICB9CgogIGF0KHBvcykgewogICAgaWYocG9zIDwgMCkgcG9zICs9IHRoaXMubGVuZ3RoOwogICAgcmV0dXJuIHRoaXNbcG9zXTsKICB9CgogIGNvbGxhcHNlKCkgewogICAgbGV0IHJldCA9IG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoKTsKCiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICBsZXQgaXRlbSA9IHRoaXNbaV07CiAgICAgIGlmKGkgKyAxIDwgdGhpcy5sZW5ndGggJiYgdGhpc1tpICsgMV0udHlwZSA9PSB0aGlzW2ldLnR5cGUpIHsKICAgICAgICBpdGVtID0gaXRlbS5hY2N1bXVsYXRlKHRoaXNbaSArIDFdKTsKICAgICAgICBpKys7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaXRlbSA9IGl0ZW0uY2xvbmUoKTsKICAgICAgfQogICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5jYWxsKHJldCwgaXRlbSk7CiAgICB9CiAgICByZXR1cm4gcmV0OwogIH0KCiAgY29sbGFwc2VBbGwoKSB7CiAgICByZXR1cm4gVHJhbnNmb3JtYXRpb25MaXN0LmZyb21NYXRyaXgodGhpcy50b01hdHJpeCgpKTsKICB9CgogIGdldCBhbmdsZSgpIHsKICAgIGxldCBtYXRyaXggPSB0aGlzLnRvTWF0cml4KCk7CiAgICBsZXQgdCA9IG1hdHJpeC5kZWNvbXBvc2UoKTsKICAgIGxldCB7IHJvdGF0ZSB9ID0gdDsKICAgIC8vY29uc29sZS5sb2coJ1JPVEFUSU9OOicsIHJvdGF0ZSk7CiAgICByZXR1cm4gcm90YXRlOwogIH0KCiAgaW52ZXJ0KCkgewogICAgLy9yZXR1cm4gdGhpcy5yZWR1Y2UoKGFjYywgdCkgPT4gW3QuaW52ZXJ0KCksIC4uLmFjY10sIFtdKTsKICAgIHJldHVybiBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KHRoaXMucmVkdWNlUmlnaHQoKGFjYywgdCkgPT4gWy4uLmFjYywgdC5pbnZlcnQoKV0sIFtdKSk7CiAgfQoKICBqb2luKHNlcCA9ICcgJykgewogICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5qb2luLmNhbGwodGhpcywgc2VwKTsKICB9CgogIGNsZWFyKCkgewogICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKHRoaXMsIDAsIHRoaXMubGVuZ3RoKTsKICAgIHJldHVybiB0aGlzOwogIH0KCiAgYXBwbHkob2JqLCByb3VuZCA9IHRydWUpIHsKICAgIGlmKHR5cGVvZiBvYmoudHJhbnNmb3JtID09ICdmdW5jdGlvbicpIHsKICAgICAgY29uc3QgbWF0cml4ID0gdGhpcy50b01hdHJpeCgpOwogICAgICByZXR1cm4gb2JqLnRyYW5zZm9ybShtYXRyaXgsIHJvdW5kKTsKICAgIH0KICB9Cn0KT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zZm9ybWF0aW9uTGlzdC5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywgewogIHZhbHVlOiAnVHJhbnNmb3JtYXRpb25MaXN0JywKICBlbnVtZXJhYmxlOiBmYWxzZQp9KTsKCmNvbnN0IHsgY29uY2F0LCBjb3B5V2l0aGluLCBmaW5kLCBmaW5kSW5kZXgsIGxhc3RJbmRleE9mLCBwb3AsIHB1c2gsIHNoaWZ0LCB1bnNoaWZ0LCBzbGljZSwgc3BsaWNlLCBpbmNsdWRlcywgaW5kZXhPZiwgZW50cmllcywgZmlsdGVyLCBtYXAsIGV2ZXJ5LCBzb21lLCByZWR1Y2UsIHJlZHVjZVJpZ2h0IH0gPSBBcnJheS5wcm90b3R5cGU7CgpkZWZpbmUoCiAgVHJhbnNmb3JtYXRpb25MaXN0LnByb3RvdHlwZSwKICB7CiAgICBjb3B5V2l0aGluLAogICAgZmluZCwKICAgIGZpbmRJbmRleCwKICAgIGxhc3RJbmRleE9mLAogICAgcG9wLAogICAgc2hpZnQsCiAgICBpbmNsdWRlcywKICAgIGluZGV4T2YsCiAgICBlbnRyaWVzLAogICAgZXZlcnksCiAgICBzb21lLAogICAgcmVkdWNlLAogICAgcmVkdWNlUmlnaHQKICB9LAogIHsKICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkgewogICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0uY2FsbCh0aGlzKTsKICAgIH0sCiAgICBbU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZV0oKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KKTsKCi8vT2JqZWN0LnNldFByb3RvdHlwZU9mKFRyYW5zZm9ybWF0aW9uTGlzdC5wcm90b3R5cGUsIFRyYW5zZm9ybWF0aW9uLnByb3RvdHlwZSk7CgpleHBvcnQgY29uc3QgSW1tdXRhYmxlVHJhbnNmb3JtYXRpb25MaXN0ID0gaW1tdXRhYmxlQ2xhc3MoVHJhbnNmb3JtYXRpb25MaXN0KTsKCkltbXV0YWJsZVRyYW5zZm9ybWF0aW9uTGlzdC5wcm90b3R5cGUucm90YXRlID0gZnVuY3Rpb24oLi4uYXJncykgewogIHJldHVybiB0aGlzLmNvbmNhdChbbmV3IEltbXV0YWJsZVJvdGF0aW9uKC4uLmFyZ3MpXSk7Cn07CgpJbW11dGFibGVUcmFuc2Zvcm1hdGlvbkxpc3QucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHsKICByZXR1cm4gdGhpcy5jb25jYXQoW25ldyBJbW11dGFibGVUcmFuc2xhdGlvbiguLi5hcmdzKV0pOwp9OwoKSW1tdXRhYmxlVHJhbnNmb3JtYXRpb25MaXN0LnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHsKICByZXR1cm4gdGhpcy5jb25jYXQoW25ldyBJbW11dGFibGVTY2FsaW5nKC4uLmFyZ3MpXSk7Cn07CgpkZWZpbmVHZXR0ZXIoSW1tdXRhYmxlVHJhbnNmb3JtYXRpb25MaXN0LCBTeW1ib2wuc3BlY2llcywgKCkgPT4gSW1tdXRhYmxlVHJhbnNmb3JtYXRpb25MaXN0KTsKAAAAAAAAAABQVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZ1EAAAAAAAB2UQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/geom/bbox.js",
			"settings":
			{
				"buffer_size": 7020,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"cut",
					null,
					"AQAAADYAAAAAAAAANgAAAAAAAAAwAAAAaW1wb3J0IHsgaXNSZWN0LCBSZWN0IH0gZnJvbSAnLi4vZ2VvbS9yZWN0LmpzJzsK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYAAAAAAAAAZgAAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					2,
					"paste",
					null,
					"AgAAADYAAAAAAAAAZgAAAAAAAAAAAAAAZgAAAAAAAACWAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYAAAAAAAAANgAAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "isPoint"
					},
					"CAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAAYAAABpc1JlY3RAAAAAAAAAAEEAAAAAAAAAAAAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8AAAAAAAAARQAAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					4,
					"right_delete",
					null,
					"BAAAAEgAAAAAAAAASAAAAAAAAAABAAAAUkgAAAAAAAAASAAAAAAAAAABAAAAZUgAAAAAAAAASAAAAAAAAAABAAAAY0gAAAAAAAAASAAAAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "Point"
					},
					"BQAAAEgAAAAAAAAASQAAAAAAAAAAAAAASQAAAAAAAABKAAAAAAAAAAAAAABKAAAAAAAAAEsAAAAAAAAAAAAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABNAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"cut",
					null,
					"AQAAAE0HAAAAAAAATQcAAAAAAABjAAAAZWxzZSBpZihpc0JCb3goYXJnLm9iamVjdHMpKSB7CiAgICAgICAgdGhpcy51cGRhdGVMaXN0KE9iamVjdC52YWx1ZXMoYXJnLm9iamVjdHMpLCBvZmZzZXQpOwogICAgICB9",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0HAAAAAAAAsAcAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					2,
					"paste",
					null,
					"AgAAAE0HAAAAAAAAsAcAAAAAAAAAAAAAsAcAAAAAAAATCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0HAAAAAAAATQcAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "io"
					},
					"AwAAAFUHAAAAAAAAVgcAAAAAAAAAAAAAVgcAAAAAAABWBwAAAAAAAAYAAABpc0JCb3hWBwAAAAAAAFcHAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUHAAAAAAAAWwcAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAAFYHAAAAAAAAVgcAAAAAAAABAAAAbw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFcHAAAAAAAAVwcAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "sPoint"
					},
					"BgAAAFYHAAAAAAAAVwcAAAAAAAAAAAAAVwcAAAAAAABYBwAAAAAAAAAAAABYBwAAAAAAAFkHAAAAAAAAAAAAAFkHAAAAAAAAWgcAAAAAAAAAAAAAWgcAAAAAAABbBwAAAAAAAAAAAABbBwAAAAAAAFwHAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYHAAAAAAAAVgcAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"AwAAAF0HAAAAAAAAXgcAAAAAAAAAAAAAXgcAAAAAAABfBwAAAAAAAAAAAABfBwAAAAAAAGAHAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0HAAAAAAAAXQcAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"cut",
					null,
					"AQAAAGAHAAAAAAAAYAcAAAAAAAALAAAAYXJnLm9iamVjdHM",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGAHAAAAAAAAawcAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					5,
					"left_delete",
					null,
					"BQAAAHsHAAAAAAAAewcAAAAAAAABAAAAdHoHAAAAAAAAegcAAAAAAAABAAAAc3kHAAAAAAAAeQcAAAAAAAABAAAAaXgHAAAAAAAAeAcAAAAAAAABAAAATHcHAAAAAAAAdwcAAAAAAAABAAAAZQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwHAAAAAAAAfAcAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAHcHAAAAAAAAeAcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcHAAAAAAAAdwcAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAG4JAAAAAAAAbwkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4JAAAAAAAAbgkAAAAAAAAAAAAAAABZQA"
				],
				[
					58,
					1,
					"left_delete",
					null,
					"AQAAAG4JAAAAAAAAbgkAAAAAAAABAAAAMQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8JAAAAAAAAbwkAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"paste",
					null,
					"AgAAAGwHAAAAAAAAuwcAAAAAAAAAAAAAuwcAAAAAAAC7BwAAAAAAADEAAAAgdGhpcy51cGRhdGUoT2JqZWN0LnZhbHVlcyhhcmcub2JqZWN0cyksIG9mZnNldCk7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwHAAAAAAAAnQcAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUHAAAAAAAAZQcAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"paste",
					null,
					"AgAAAJEHAAAAAAAAvgcAAAAAAAAAAAAAvgcAAAAAAAC+BwAAAAAAACsAAABuYW1lID0+ICh0aGlzLm9iamVjdHNbbmFtZV0gPSBvYmogfHwgYXJnKSk7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEHAAAAAAAAvAcAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJAHAAAAAAAAkQcAAAAAAAAAAAAAkQcAAAAAAACRBwAAAAAAAAIAAAAgLA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIHAAAAAAAAkAcAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"doxy_enter",
					null,
					"AgAAAHAGAAAAAAAAcQYAAAAAAAAAAAAAcQYAAAAAAAB1BgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAGAAAAAAAAcAYAAAAAAAAAAAAAAADwvw"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAHAGAAAAAAAAcQYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAGAAAAAAAAcAYAAAAAAAAAAAAAAABEQA"
				],
				[
					127,
					1,
					"left_delete",
					null,
					"AQAAAHAGAAAAAAAAcAYAAAAAAAABAAAAdg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEGAAAAAAAAcQYAAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					1,
					"paste",
					null,
					"AQAAAHAGAAAAAAAAfAYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAGAAAAAAAAcAYAAAAAAAAAAAAAAADwvw"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "??="
					},
					"AwAAAHwGAAAAAAAAfQYAAAAAAAAAAAAAfQYAAAAAAAB+BgAAAAAAAAAAAAB+BgAAAAAAAH8GAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwGAAAAAAAAfAYAAAAAAAAAAAAAAADwvw"
				],
				[
					130,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAH8GAAAAAAAAgQYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8GAAAAAAAAfwYAAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIEGAAAAAAAAggYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEGAAAAAAAAgQYAAAAAAAAAAAAAAADwvw"
				],
				[
					136,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMGAAAAAAAAgwYAAAAAAAAAAAAAAADwvw"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAEgFAAAAAAAASQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgFAAAAAAAASAUAAAAAAAAAAAAAAADwvw"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": " objcts"
					},
					"BwAAAEkFAAAAAAAASgUAAAAAAAAAAAAASgUAAAAAAABLBQAAAAAAAAAAAABLBQAAAAAAAEwFAAAAAAAAAAAAAEwFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABOBQAAAAAAAAAAAABOBQAAAAAAAE8FAAAAAAAAAAAAAE8FAAAAAAAAUAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkFAAAAAAAASQUAAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					3,
					"left_delete",
					null,
					"AwAAAE8FAAAAAAAATwUAAAAAAAABAAAAc04FAAAAAAAATgUAAAAAAAABAAAAdE0FAAAAAAAATQUAAAAAAAABAAAAYw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFAFAAAAAAAAUAUAAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "ects:"
					},
					"BQAAAE0FAAAAAAAATgUAAAAAAAAAAAAATgUAAAAAAABPBQAAAAAAAAAAAABPBQAAAAAAAFAFAAAAAAAAAAAAAFAFAAAAAAAAUQUAAAAAAAAAAAAAUQUAAAAAAABSBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0FAAAAAAAATQUAAAAAAAAAAAAAAADwvw"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": " {}"
					},
					"AwAAAFIFAAAAAAAAUwUAAAAAAAAAAAAAUwUAAAAAAABUBQAAAAAAAAAAAABUBQAAAAAAAFUFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIFAAAAAAAAUgUAAAAAAAAAAAAAAADwvw"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAFUFAAAAAAAAVgUAAAAAAAAAAAAAVgUAAAAAAABXBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUFAAAAAAAAVQUAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					1,
					"cut",
					null,
					"AQAAAFcFAAAAAAAAVwUAAAAAAAANAAAAJ29iamVjdHMnLCB7fQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFcFAAAAAAAAZAUAAAAAAAAAAAAAAADwvw"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL8GAAAAAAAAwAYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8GAAAAAAAAvwYAAAAAAAAAAAAAAAAAAA"
				],
				[
					173,
					1,
					"right_delete",
					null,
					"AQAAAG4GAAAAAAAAbgYAAAAAAAAZAAAAICAgIHRoaXMub2JqZWN0cyA/Pz0ge307Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4GAAAAAAAAhwYAAAAAAAAAAAAAAAAAAA"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAG8UAAAAAAAAcBQAAAAAAAAAAAAAcBQAAAAAAAB2FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbxQAAAAAAABvFAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					4,
					"left_delete",
					null,
					"BAAAAHQUAAAAAAAAdBQAAAAAAAACAAAAICByFAAAAAAAAHIUAAAAAAAAAgAAACAgcBQAAAAAAABwFAAAAAAAAAIAAAAgIG8UAAAAAAAAbxQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdhQAAAAAAAB2FAAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"cut",
					null,
					"AQAAAMgYAAAAAAAAyBgAAAAAAADaAAAACiAgc3RhdGljIGZyb21TdHJpbmcocykgewogICAgLy9jb25zb2xlLmxvZygnQkJveC5mcm9tU3RyaW5nJyxzKTsKICAgIGxldCBbeDEsIHkxLCB4MiwgeTJdID0gWy4uLnMubWF0Y2hBbGwoL1stKy4wLTldKy9nKV0ubWFwKChbbV0pID0+ICttKTsKCiAgICBsZXQgciA9IG5ldyBCQm94KCk7CiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihyLCB7IHgxLCB5MSwgeDIsIHkyIH0pOwogIH0",
					"AQAAAAAAAAABAAAAyBgAAAAAAACiGQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					2,
					"paste",
					null,
					"AgAAAMgYAAAAAAAAohkAAAAAAAAAAAAAohkAAAAAAAB8GgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyBgAAAAAAADIGAAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "SVG"
					},
					"BAAAALAZAAAAAAAAsRkAAAAAAAAAAAAAsRkAAAAAAACxGQAAAAAAAAYAAABTdHJpbmexGQAAAAAAALIZAAAAAAAAAAAAALIZAAAAAAAAsxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsBkAAAAAAAC2GQAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"right_delete",
					null,
					"AQAAAOsZAAAAAAAA6xkAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAA6xkAAAAAAADrGQAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"right_delete",
					null,
					"AQAAAO4ZAAAAAAAA7hkAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAA7hkAAAAAAADuGQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "wd"
					},
					"AgAAAPAZAAAAAAAA8RkAAAAAAAAAAAAA8RkAAAAAAADyGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8BkAAAAAAADwGQAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"left_delete",
					null,
					"AQAAAPEZAAAAAAAA8RkAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAA8hkAAAAAAADyGQAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "idth,e"
					},
					"BgAAAPEZAAAAAAAA8hkAAAAAAAAAAAAA8hkAAAAAAADzGQAAAAAAAAAAAADzGQAAAAAAAPQZAAAAAAAAAAAAAPQZAAAAAAAA9RkAAAAAAAAAAAAA9RkAAAAAAAD2GQAAAAAAAAAAAAD2GQAAAAAAAPcZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RkAAAAAAADxGQAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"left_delete",
					null,
					"AQAAAPYZAAAAAAAA9hkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA9xkAAAAAAAD3GQAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "heihgt"
					},
					"BgAAAPYZAAAAAAAA9xkAAAAAAAAAAAAA9xkAAAAAAAD4GQAAAAAAAAAAAAD4GQAAAAAAAPkZAAAAAAAAAAAAAPkZAAAAAAAA+hkAAAAAAAAAAAAA+hkAAAAAAAD7GQAAAAAAAAAAAAD7GQAAAAAAAPwZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9hkAAAAAAAD2GQAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					3,
					"left_delete",
					null,
					"AwAAAPsZAAAAAAAA+xkAAAAAAAABAAAAdPoZAAAAAAAA+hkAAAAAAAABAAAAZ/kZAAAAAAAA+RkAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAA/BkAAAAAAAD8GQAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "ght"
					},
					"AwAAAPkZAAAAAAAA+hkAAAAAAAAAAAAA+hkAAAAAAAD7GQAAAAAAAAAAAAD7GQAAAAAAAPwZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RkAAAAAAAD5GQAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					6,
					"right_delete",
					null,
					"BgAAAPwZAAAAAAAA/BkAAAAAAAABAAAAePwZAAAAAAAA/BkAAAAAAAABAAAAMvwZAAAAAAAA/BkAAAAAAAABAAAALPwZAAAAAAAA/BkAAAAAAAABAAAAIPwZAAAAAAAA/BkAAAAAAAABAAAAefwZAAAAAAAA/BkAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAA/BkAAAAAAAD8GQAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "x,y,x"
					},
					"BQAAAEYaAAAAAAAARxoAAAAAAAAAAAAARxoAAAAAAABIGgAAAAAAAAAAAABIGgAAAAAAAEkaAAAAAAAAAAAAAEkaAAAAAAAAShoAAAAAAAAAAAAAShoAAAAAAABLGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhoAAAAAAABGGgAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "+width,y+"
					},
					"CQAAAEsaAAAAAAAATBoAAAAAAAAAAAAATBoAAAAAAABNGgAAAAAAAAAAAABNGgAAAAAAAE4aAAAAAAAAAAAAAE4aAAAAAAAATxoAAAAAAAAAAAAATxoAAAAAAABQGgAAAAAAAAAAAABQGgAAAAAAAFEaAAAAAAAAAAAAAFEaAAAAAAAAUhoAAAAAAAAAAAAAUhoAAAAAAABTGgAAAAAAAAAAAABTGgAAAAAAAFQaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxoAAAAAAABLGgAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "height"
					},
					"BgAAAFQaAAAAAAAAVRoAAAAAAAAAAAAAVRoAAAAAAABWGgAAAAAAAAAAAABWGgAAAAAAAFcaAAAAAAAAAAAAAFcaAAAAAAAAWBoAAAAAAAAAAAAAWBoAAAAAAABZGgAAAAAAAAAAAABZGgAAAAAAAFoaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBoAAAAAAABUGgAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BwAAADUaAAAAAAAANhoAAAAAAAAAAAAANhoAAAAAAAA2GgAAAAAAAAcAAABsZXQgciA9NhoAAAAAAAA3GgAAAAAAAAAAAAA3GgAAAAAAADgaAAAAAAAAAAAAADgaAAAAAAAAORoAAAAAAAAAAAAAORoAAAAAAAA6GgAAAAAAAAAAAAA6GgAAAAAAADsaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPBoAAAAAAAA1GgAAAAAAAAAAAAAAAEBA"
				],
				[
					179,
					1,
					"right_delete",
					null,
					"AQAAAFwaAAAAAAAAXBoAAAAAAAAxAAAAICAgIHJldHVybiBPYmplY3QuYXNzaWduKHIsIHsgeDEsIHkxLCB4MiwgeTIgfSk7Cg",
					"AQAAAAAAAAABAAAAXBoAAAAAAACNGgAAAAAAAAAAAAAAAAAA"
				],
				[
					182,
					1,
					"right_delete",
					null,
					"AQAAALkZAAAAAAAAuRkAAAAAAAAoAAAAICAgIC8vY29uc29sZS5sb2coJ0JCb3guZnJvbVN0cmluZycscyk7Cg",
					"AQAAAAAAAAABAAAAuRkAAAAAAADhGQAAAAAAAAAAAAAAAAAA"
				],
				[
					184,
					1,
					"left_delete",
					null,
					"AQAAAAcaAAAAAAAABxoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAACBoAAAAAAAAIGgAAAAAAAAAAAAAAAAAA"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKIZAAAAAAAAoxkAAAAAAAAAAAAAoxkAAAAAAAClGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohkAAAAAAACiGQAAAAAAAAAAAAAAgINA"
				],
				[
					191,
					1,
					"right_delete",
					null,
					"AgAAAOQYAAAAAAAA5BgAAAAAAAAoAAAAICAvL2NvbnNvbGUubG9nKCdCQm94LmZyb21TdHJpbmcnLHMpOwogIHsZAAAAAAAAexkAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAA5BgAAAAAAAAMGQAAAAAAAAAAAAAAADBA"
				],
				[
					194,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA5BgAAAAAAADkGAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/dom.js",
			"settings":
			{
				"buffer_size": 38201,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					107,
					1,
					"insert",
					{
						"characters": " {"
					},
					"AgAAADU9AAAAAAAANj0AAAAAAAAAAAAANj0AAAAAAAA3PQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADU9AAAAAAAANT0AAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAADc9AAAAAAAAOD0AAAAAAAAAAAAAOD0AAAAAAAA8PQAAAAAAAAAAAAA4PQAAAAAAADg9AAAAAAAABAAAACAgICA4PQAAAAAAAD49AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADc9AAAAAAAANz0AAAAAAAAAAAAAAADwvw"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAJA9AAAAAAAAkT0AAAAAAAAAAAAAkT0AAAAAAACXPQAAAAAAAAAAAACXPQAAAAAAAJg9AAAAAAAAAAAAAJE9AAAAAAAAkT0AAAAAAAAGAAAAICAgICAgkT0AAAAAAACVPQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJA9AAAAAAAAkD0AAAAAAAD////////vfw"
				],
				[
					121,
					1,
					"cut",
					null,
					"AQAAAEQ9AAAAAAAARD0AAAAAAAA/AAAAZmFjKHR5cGVvZiBub2RlID09ICdzdHJpbmcnID8gRW50aXRpZXMuVGV4dCA6IEVudGl0aWVzLkVsZW1lbnQp",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIM9AAAAAAAARD0AAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAEQ9AAAAAAAART0AAAAAAAAAAAAART0AAAAAAABGPQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQ9AAAAAAAARD0AAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAADc9AAAAAAAAOD0AAAAAAAAAAAAAOD0AAAAAAAA8PQAAAAAAAAAAAAA8PQAAAAAAAD49AAAAAAAAAAAAAD49AAAAAAAAPz0AAAAAAAAAAAAAPz0AAAAAAABAPQAAAAAAAAAAAABAPQAAAAAAAEE9AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADc9AAAAAAAANz0AAAAAAAD////////vfw"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": " fn="
					},
					"BAAAAEE9AAAAAAAAQj0AAAAAAAAAAAAAQj0AAAAAAABDPQAAAAAAAAAAAABDPQAAAAAAAEQ9AAAAAAAAAAAAAEQ9AAAAAAAART0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEE9AAAAAAAAQT0AAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					1,
					"paste",
					null,
					"AQAAAEU9AAAAAAAAhD0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEU9AAAAAAAART0AAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIQ9AAAAAAAAhT0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQ9AAAAAAAAhD0AAAAAAAAAAAAAAADwvw"
				],
				[
					134,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIY9AAAAAAAAhj0AAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": ".bind"
					},
					"BQAAANM2AAAAAAAA1DYAAAAAAAAAAAAA1DYAAAAAAADVNgAAAAAAAAAAAADVNgAAAAAAANY2AAAAAAAAAAAAANY2AAAAAAAA1zYAAAAAAAAAAAAA1zYAAAAAAADYNgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANM2AAAAAAAA0zYAAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANg2AAAAAAAA2jYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANg2AAAAAAAA2DYAAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "this"
					},
					"BAAAANk2AAAAAAAA2jYAAAAAAAAAAAAA2jYAAAAAAADbNgAAAAAAAAAAAADbNgAAAAAAANw2AAAAAAAAAAAAANw2AAAAAAAA3TYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANk2AAAAAAAA2TYAAAAAAAAAAAAAAADwvw"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": ".for"
					},
					"BAAAAB89AAAAAAAAID0AAAAAAAAAAAAAID0AAAAAAAAhPQAAAAAAAAAAAAAhPQAAAAAAACI9AAAAAAAAAAAAACI9AAAAAAAAIz0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB89AAAAAAAAHz0AAAAAAAAAAAAAAADwvw"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAACM9AAAAAAAAJD0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACM9AAAAAAAAIz0AAAAAAAAAAAAAAADwvw"
				],
				[
					341,
					1,
					"left_delete",
					null,
					"AQAAACM9AAAAAAAAIz0AAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQ9AAAAAAAAJD0AAAAAAAAAAAAAAADwvw"
				],
				[
					356,
					1,
					"right_delete",
					null,
					"AQAAAAs8AAAAAAAACzwAAAAAAADDAAAACiAgLyogIFtpbnNwZWN0U3ltYm9sXShkZXB0aCwgb3B0cykgewogICAgY29uc3QgcmF3ID0gTm9kZS5yYXcodGhpcyk7CiAgICByZXR1cm4gdXRpbAogICAgICAucmFuZ2UoMCwgcmF3Lmxlbmd0aCAtIDEpCiAgICAgIC5tYXAobiA9PiBpbnNwZWN0KHRoaXNbbl0sIGRlcHRoLTEsb3B0cykpCiAgICAgIC5qb2luKCcsXG4gICcpOwogIH0sKi8K",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM48AAAAAAAACzwAAAAAAAAAAAAAAAAAAA"
				],
				[
					381,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAo8AAAAAAAADDwAAAAAAAAAAAAApTsAAAAAAACnOwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKU7AAAAAAAACjwAAAAAAAAAAAAAAADwvw"
				],
				[
					385,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIM7AAAAAAAAgzsAAAAAAAAAAAAAAADwvw"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Project: Edit Project"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/dsp",
		"/home/roman/Projects/plot-cv/lib/eagle"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/mnt/samsung-roman/Projects/an-tronics/40106-4069-Synth.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/lib/svg/path.js",
		"/home/roman/Projects/plot-cv/lib/dom/svg.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/eda/units.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/css3-selectors.js",
		"/home/roman/mnt/samsung-roman/Projects/an-tronics/Mind-Synchronizing-Generator-PinHdrPotX.svg",
		"/home/roman/mnt/samsung-roman/Projects/an-tronics/StyroCutter-556-heatsink-5V.svg",
		"/home/roman/Projects/plot-cv/svg-crop-pad.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/geom/trbl.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/dom.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/grammars/ebnf.ebnf",
		"/home/roman/Projects/plot-cv/cli-helpers.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/lib/ecmascript.js",
		"/home/roman/Projects/plot-cv/getModuleProps.js",
		"/home/roman/Projects/plot-cv/test-operators.js",
		"/home/roman/Projects/plot-cv/data/test-websocket.functions.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/lib/alea.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/usr/include/sqlite3.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/test-sqlite3.js",
		"/home/roman/Projects/plot-cv/sqlite3.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/mysql_system_tables.sql",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/fill_help_tables.sql",
		"/home/roman/Projects/plot-cv/quickjs/run-test262.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build-libwebsockets.sh",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/build.ninja",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-schematic.svg",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-board.svg",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/dsp/util.js",
		"/home/roman/Projects/plot-cv/Zeichnung.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/svg/ZoomRedraw.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/elementProxy.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wirePath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/quickjs/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/lib/container/spatial-hash.js",
		"/home/roman/Projects/plot-cv/lib/container/Hash-Multimap.js",
		"/home/roman/Projects/plot-cv/lib/container/componentMap.js",
		"/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util-w-2.diff",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/new.diff",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/lib/delegate.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/package.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/origin.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"GetB",
			"ERROR",
			"GetPoints",
			"new Point",
			"pathToPoints",
			"GetPoints",
			"pathToPoints",
			"GetPoints",
			"map =",
			"filter =",
			"'z'",
			"filter =",
			"GetPoints",
			"roundTo",
			"round =",
			"at =",
			"deref =",
			"deref",
			"GetPoints",
			"GetTransformedPoints",
			"GetBounds",
			"pointsToAbsolute",
			"splitPath",
			"Element",
			"ELement",
			"parseValues",
			"parse",
			"parseS",
			"parseSVG",
			"parseSVGPath",
			"path293",
			"GetBounds",
			"GetPoints",
			"formMatrix",
			"ElementTransform",
			"AllTra",
			"AllTransforms",
			"GetTransform",
			"getTransformationMatrix",
			"AllTransforms",
			"Symbol.iterator",
			"'multiply'",
			"Matrix.multiply",
			"multiply'",
			"Util\\.",
			"Util.inherit",
			"Util\\.extend",
			"extend\\(",
			"inherit",
			"colorText",
			"Util\\.",
			"parse",
			"fromDOM",
			"GetBounds",
			"fromString",
			"getAttribute",
			"'svg'",
			"'sv'",
			"unitConv",
			"unitConv\\(",
			"unitConv",
			"unitConv\\(",
			"unitConv",
			"toSVG",
			"outset",
			"dom",
			"dom.js",
			"globalImports",
			"toSource",
			"PointList\\.\\.prototype",
			"PointList\\.\\.",
			"};\nPointList",
			"coloring",
			"searchArrayBuffe",
			"padAnsi",
			"import ",
			"mapFunction",
			"mapFunc",
			"ansi",
			"stripAnsi",
			"inspectSy",
			"nodejs.util.inspect.custom",
			"nodejs.*inspect",
			"nodejs",
			"inspectSymb",
			"Point.prototype",
			"inspectSymb",
			"objects",
			"GetPoints",
			"Positioned",
			"GetBounds",
			"updateXY",
			"GetBounds",
			"}\nfunction",
			"'m'",
			"Factory",
			"(function|class) NodeList",
			"function NodeList",
			"class NodeList",
			"NodeList",
			"GetPoints",
			"getWidthHeigh[^t]",
			"getWidthHeigh[^z]",
			"GetPoints",
			"scale\\(",
			"translate",
			"translate =",
			"translate",
			" translate",
			"translate",
			"GetXY",
			"^function",
			"GetPoints",
			"glyph0-1",
			"<use",
			"updateXY",
			"tagName =",
			"'defs'",
			"new Console",
			"isIterable",
			"types",
			"Util\\.",
			"Util\\.isObject",
			"Util\\.roundTo",
			"Util\\.",
			"Util\\.define",
			"Util\\.",
			"update"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"MakePoint",
			"",
			"define",
			"PointList\\.prototype",
			"};\\n\nPointList.",
			"}\\n\nfunction",
			"",
			"isObject",
			"roundTo",
			"define",
			"padding"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1128,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/svg-crop-pad.js",
							"function_name_status_row": 28,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1492,
									1516
								],
								[
									1736,
									1757
								],
								[
									1983,
									1999
								],
								[
									2553,
									2575
								],
								[
									2874,
									2904
								],
								[
									3064,
									3091
								],
								[
									3228,
									3242
								],
								[
									3344,
									3362
								],
								[
									3792,
									3796
								],
								[
									3950,
									3980
								],
								[
									4032,
									4046
								],
								[
									5070,
									5084
								],
								[
									5335,
									5371
								],
								[
									5482,
									5501
								],
								[
									5511,
									5520
								],
								[
									5534,
									5558
								],
								[
									5644,
									5672
								],
								[
									5762,
									5788
								],
								[
									5948,
									6010
								],
								[
									6185,
									6220
								],
								[
									6312,
									6349
								],
								[
									6430,
									6450
								],
								[
									6526,
									6550
								],
								[
									7327,
									7331
								],
								[
									7356,
									7360
								],
								[
									7425,
									7436
								],
								[
									7641,
									7676
								],
								[
									7818,
									7842
								],
								[
									7898,
									7947
								],
								[
									7962,
									7967
								],
								[
									8095,
									8105
								],
								[
									8218,
									8223
								],
								[
									8245,
									8249
								],
								[
									8346,
									8377
								],
								[
									8666,
									8699
								],
								[
									9099,
									9123
								],
								[
									9478,
									9506
								],
								[
									10122,
									10131
								],
								[
									10148,
									10157
								],
								[
									10189,
									10198
								],
								[
									10217,
									10226
								],
								[
									10240,
									10250
								],
								[
									10266,
									10275
								],
								[
									10289,
									10298
								],
								[
									10305,
									10313
								],
								[
									10328,
									10351
								],
								[
									10362,
									10371
								],
								[
									10416,
									10448
								],
								[
									10526,
									10560
								],
								[
									10756,
									10781
								],
								[
									10838,
									10888
								],
								[
									11158,
									11191
								],
								[
									11291,
									11326
								],
								[
									11403,
									11425
								],
								[
									12042,
									12060
								],
								[
									12103,
									12109
								],
								[
									12143,
									12148
								],
								[
									12190,
									12195
								],
								[
									12278,
									12283
								],
								[
									12578,
									12604
								],
								[
									12705,
									12731
								],
								[
									13931,
									13935
								],
								[
									14025,
									14034
								]
							],
							"symlist":
							[
								"  parseSVGPath(s)",
								"  parseValues = args =>",
								"\t(_, c, args) =>",
								"  splitPath(ps)",
								"  pathToAbsolute(path)",
								"  pathToPoints(path)",
								"  isUpper = s =>",
								"MakePoint=(x,y) =>",
								"  n =>",
								"  pointsToAbsolute(it)",
								"  isUpper = s =>",
								"  save(filename)",
								"NumericArgs(s, t = a => a)",
								"  deref = p => obj =>",
								"(o, k) =>",
								"ParentPaths(p)",
								"CumulativePaths(p)",
								"AllParents(elem)",
								"AllTransforms(elem, getter = getTransformationMatrix)",
								"ElementTransformList(elem)",
								"ElementTransformMatrix(elem)",
								"GetXY(elem)",
								"GetPoints(elem)",
								"  c =>",
								"  a =>",
								"([x, y]) =>",
								"GetTransformedPoints(elem)",
								"GetMatrix(elem)",
								"PositionedElements(svgElem = svg, skip)",
								"() =>",
								"\t(v, p) =>",
								"\te =>",
								"  n =>",
								"HasParent(elem, other)",
								"GetBounds(svgElem = svg)",
								"ProcessPath(d)",
								"  unitConvToMM(value)",
								"  pc: mm =>",
								"  px: mm =>",
								"  pt: mm =>",
								"  in: mm =>",
								"  mil: mm =>",
								"  cm: mm =>",
								"  mm: mm =>",
								"  m: mm =>",
								"  unitConv(unit)",
								"\tvalue =>",
								"  unitConvTo(value, unit)",
								"  getViewBox(svgElem = svg)",
								"XML2String(elem)",
								"  getWidthHeight(svgElem = svg, t = a => a)",
								"  getTransformationList(e)",
								"  getTransformationMatrix(e)",
								"  main(...args)",
								"\t(_x, _y, opts) =>",
								"\t() =>",
								"\ta =>",
								"\ta =>",
								"\ta =>",
								"  print = (file, ...args) =>",
								"  print = (file, ...args) =>",
								"  u =>",
								"(a, i) =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680856036.03,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "svg-crop-pad.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15143,
						"regions":
						{
						},
						"selection":
						[
							[
								7898,
								7947
							],
							[
								8306,
								8306
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 302,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680860318.56,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4104.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/dom/svg.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17260,
						"regions":
						{
						},
						"selection":
						[
							[
								16308,
								16459
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 499,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680849525.91,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7044.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "40106-4069-Synth.cropped.svg",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 395694,
						"regions":
						{
						},
						"selection":
						[
							[
								33294,
								33301
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 887,
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 3,
							"tabs_extra_last_activated": 1680849182.48,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14244.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/misc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64185,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680843553.14,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 185808,
						"regions":
						{
						},
						"selection":
						[
							[
								5645,
								5645
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 187,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680843551.53,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2360.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/geom/pointList.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13290,
						"regions":
						{
						},
						"selection":
						[
							[
								4420,
								4420
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 146,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680853562.71,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2025.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "io-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11650,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680817290.32,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5876,
						"regions":
						{
						},
						"selection":
						[
							[
								1012,
								1012
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 25,
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680817281.25,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/geom/point.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10488,
						"regions":
						{
						},
						"selection":
						[
							[
								4419,
								4436
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 174,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680852657.97,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2094.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/geom/matrix.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20683,
						"regions":
						{
						},
						"selection":
						[
							[
								19151,
								19257
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 625,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680847947.34,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8904.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/geom/transformation.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21584,
						"regions":
						{
						},
						"selection":
						[
							[
								20839,
								20854
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 796,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680847946.92,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11124.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/geom/bbox.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7020,
						"regions":
						{
						},
						"selection":
						[
							[
								6372,
								6372
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 263,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680845785.44,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3469.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "quickjs/qjs-modules/lib/dom.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38201,
						"regions":
						{
						},
						"selection":
						[
							[
								15235,
								15235
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 556,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680813744.89,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10388.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Run with qjsm",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"PointList",
				"lib/geom/pointList.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"matrix",
				"lib/geom/matrix.js"
			],
			[
				"trans",
				"lib/geom/transformation.js"
			],
			[
				"transform",
				"lib/geom/transformation.js"
			],
			[
				"bbox",
				"lib/geom/bbox.js"
			],
			[
				"misc",
				"lib/misc.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"package.js",
				"package.json"
			],
			[
				"bbox.js",
				"lib/geom/bbox.js"
			],
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"svg/path.js",
				"lib/svg/path.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"units",
				"lib/eda/units.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			],
			[
				"svg-cro",
				"svg-crop-pad.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"lib/ut",
				"lib/util.js"
			],
			[
				"trbl",
				"lib/geom/trbl.js"
			],
			[
				"point",
				"lib/geom/point.js"
			],
			[
				"point.j",
				"lib/geom/point.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"bbox.j",
				"lib/geom/bbox.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"svg-crop",
				"svg-crop-pad.js"
			],
			[
				"cli-help",
				"cli-helpers.js"
			],
			[
				"project",
				"lib/eagle/project.js"
			],
			[
				"eagle-comm",
				"eagle-commands.js"
			],
			[
				"lib/util",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"os-helper",
				"os-helpers.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"lexer.c",
				"quickjs/qjs-modules/src/lexer.c"
			],
			[
				"-lexer.c",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"ecma",
				"lib/ecmascript.js"
			],
			[
				"lexer.c ",
				"quickjs/qjs-modules/src/lexer.c"
			],
			[
				"lexer.h",
				"quickjs/qjs-modules/include/lexer.h"
			],
			[
				"quickjs-lex",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"test_lexer",
				"quickjs/qjs-modules/tests/test_lexer.js"
			],
			[
				"buffer-u",
				"quickjs/qjs-modules/src/buffer-utils.c"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"debugger-cli",
				"debugger-client.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-lib",
				"quickjs/quickjs-libc.c"
			],
			[
				"list-ex",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"getMod",
				"getModuleProps.js"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"nanovg",
				"test-nanovg.js"
			],
			[
				"alea",
				"lib/alea.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"jsut",
				"quickjs/qjs-modules/src/js-utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"run-test",
				"quickjs/run-test262.c"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"build-libwe",
				"quickjs/qjs-net/build-libwebsockets.sh"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"pin.js",
				"lib/eagle/components/pin.js"
			],
			[
				"",
				"~/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"symb",
				"lib/eagle/components/symbol.js"
			],
			[
				"schematicren",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardren",
				"lib/eagle/boardRenderer.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"svgRend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"renderUtil",
				"lib/eagle/renderUtils.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"text.js",
				"lib/eagle/components/text.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"common",
				"lib/eagle/common.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"common.j",
				"lib/eagle/common.js"
			],
			[
				"nodeLi",
				"lib/eagle/nodeList.js"
			],
			[
				"common.js",
				"lib/eagle/common.js"
			],
			[
				"elementP",
				"lib/eagle/elementProxy.js"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"wirePa",
				"lib/eagle/components/wirePath.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"renderer.js",
				"lib/eagle/renderer.js"
			],
			[
				"functions.cmake",
				"qjs-opencv/cmake/functions.cmake"
			],
			[
				"textEle",
				"lib/eagle/components/textElement.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"drawing",
				"lib/eagle/components/drawing.js"
			],
			[
				"pathMapper",
				"lib/json/pathMapper.js"
			],
			[
				"xml-shell",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				"server.js",
				"upload-server.js"
			],
			[
				"delega",
				"lib/delegate.js"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"colorCod",
				"lib/eda/colorCoding.js"
			],
			[
				"eagle-qu",
				"eagle-query.js"
			],
			[
				"eagle-q",
				"eagle-query.js"
			],
			[
				"read.hex",
				"read.hex"
			],
			[
				"exam",
				"example.circuit"
			],
			[
				"xpath.js",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"Document",
				"lib/eagle/document.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 784.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
