{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"i",
				"is_dir"
			],
			[
				"getText",
				"getTextArray"
			],
			[
				"Lin",
				"LinearTransform"
			],
			[
				"CURL_LIB",
				"CURL_LIBRARY_DEBUG"
			],
			[
				"Circ",
				"CircuitJS"
			],
			[
				"dep",
				"dependency"
			],
			[
				"opt",
				"optimization"
			],
			[
				"OPENCV_LIB",
				"OPENCV_LIBRARIES"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"relat",
				"relativeTo"
			],
			[
				"max",
				"maxLineGap"
			],
			[
				"Pm_Op",
				"Pm_OpenInput"
			],
			[
				"Pm_Get",
				"Pm_GetDeviceInfo"
			],
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					51,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/deep.es",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					52,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								243,
								247
							],
							[
								270,
								275
							],
							[
								316,
								320
							],
							[
								342,
								347
							],
							[
								386,
								390
							],
							[
								411,
								416
							],
							[
								429,
								453
							],
							[
								593,
								630
							],
							[
								661,
								667
							],
							[
								733,
								746
							],
							[
								777,
								809
							],
							[
								942,
								973
							],
							[
								1050,
								1063
							],
							[
								1283,
								1291
							],
							[
								1376,
								1404
							],
							[
								1583,
								1610
							],
							[
								1799,
								1826
							],
							[
								2074,
								2121
							],
							[
								2688,
								2719
							],
							[
								2781,
								2811
							],
							[
								2866,
								2895
							],
							[
								3237,
								3269
							],
							[
								3526,
								3557
							],
							[
								3632,
								3638
							],
							[
								4156,
								4245
							],
							[
								4401,
								4436
							],
							[
								4968,
								5021
							],
							[
								5439,
								5475
							],
							[
								5543,
								5570
							],
							[
								5623,
								5664
							],
							[
								5690,
								5699
							],
							[
								5741,
								5766
							],
							[
								5888,
								5898
							],
							[
								6014,
								6019
							],
							[
								6119,
								6129
							],
							[
								6206,
								6221
							],
							[
								6292,
								6306
							],
							[
								6423,
								6455
							],
							[
								6458,
								6478
							],
							[
								6717,
								6730
							],
							[
								7264,
								7311
							],
							[
								7716,
								7747
							],
							[
								8098,
								8141
							],
							[
								8202,
								8208
							],
							[
								8438,
								8468
							],
							[
								8500,
								8518
							],
							[
								8650,
								8656
							],
							[
								8778,
								8819
							],
							[
								9648,
								9685
							],
							[
								9900,
								9916
							],
							[
								10803,
								10811
							],
							[
								10899,
								10907
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function WriteXML(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function ReadFd(fd, bufferSize)",
							" function* FdRead()",
							"(acc, buf) =>",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AQAAAAAAAAAAAAAA6QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					53,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
							[
								771,
								788
							],
							[
								1023,
								1072
							],
							[
								1967,
								1971
							],
							[
								2797,
								2804
							],
							[
								3326,
								3340
							],
							[
								3612,
								3618
							],
							[
								3733,
								3760
							],
							[
								3808,
								3839
							],
							[
								3995,
								4005
							],
							[
								4044,
								4068
							],
							[
								4135,
								4151
							],
							[
								4196,
								4213
							],
							[
								4261,
								4281
							],
							[
								4332,
								4355
							],
							[
								4403,
								4429
							],
							[
								4848,
								4853
							],
							[
								4912,
								4936
							],
							[
								4959,
								4975
							],
							[
								4990,
								5001
							],
							[
								5041,
								5057
							],
							[
								5072,
								5084
							],
							[
								5125,
								5141
							],
							[
								5156,
								5171
							],
							[
								5215,
								5231
							],
							[
								5246,
								5264
							],
							[
								5311,
								5327
							],
							[
								5342,
								5363
							],
							[
								5413,
								5429
							],
							[
								5444,
								5468
							],
							[
								5594,
								5617
							],
							[
								5700,
								5720
							],
							[
								5975,
								5987
							],
							[
								6037,
								6049
							],
							[
								6169,
								6192
							],
							[
								6267,
								6293
							],
							[
								6544,
								6565
							],
							[
								6626,
								6647
							],
							[
								6780,
								6804
							],
							[
								6900,
								6907
							],
							[
								6934,
								6941
							],
							[
								6973,
								6995
							],
							[
								7088,
								7095
							],
							[
								7119,
								7126
							],
							[
								7153,
								7175
							],
							[
								7225,
								7232
							],
							[
								7286,
								7293
							],
							[
								7325,
								7354
							],
							[
								7700,
								7725
							],
							[
								7852,
								7871
							],
							[
								7953,
								7972
							],
							[
								8159,
								8178
							],
							[
								8256,
								8275
							],
							[
								8348,
								8367
							],
							[
								8463,
								8503
							],
							[
								8645,
								8658
							],
							[
								8684,
								8717
							],
							[
								8966,
								8980
							],
							[
								9141,
								9148
							],
							[
								9381,
								9387
							],
							[
								9801,
								9825
							],
							[
								10204,
								10240
							],
							[
								10282,
								10300
							],
							[
								10483,
								10520
							],
							[
								10601,
								10619
							],
							[
								10637,
								10648
							],
							[
								10714,
								10748
							],
							[
								10775,
								10793
							],
							[
								11068,
								11113
							],
							[
								11313,
								11331
							],
							[
								11582,
								11608
							],
							[
								11867,
								11886
							],
							[
								11965,
								11984
							],
							[
								12134,
								12182
							],
							[
								12363,
								12378
							],
							[
								12404,
								12414
							],
							[
								12501,
								12506
							],
							[
								13273,
								13279
							],
							[
								13355,
								13360
							],
							[
								13369,
								13374
							],
							[
								13403,
								13412
							],
							[
								13436,
								13446
							],
							[
								13468,
								13481
							],
							[
								13509,
								13523
							],
							[
								13549,
								13566
							],
							[
								13594,
								13612
							],
							[
								13713,
								13718
							],
							[
								13926,
								13949
							],
							[
								14400,
								14404
							],
							[
								14446,
								14450
							],
							[
								14557,
								14569
							],
							[
								15158,
								15168
							],
							[
								15256,
								15284
							],
							[
								15318,
								15324
							],
							[
								15386,
								15410
							],
							[
								15440,
								15481
							],
							[
								15757,
								15769
							],
							[
								15802,
								15834
							],
							[
								15876,
								15916
							],
							[
								16070,
								16090
							],
							[
								17376,
								17406
							],
							[
								17466,
								17503
							],
							[
								17688,
								17694
							],
							[
								17909,
								17939
							],
							[
								18019,
								18051
							],
							[
								18279,
								18309
							],
							[
								18446,
								18449
							],
							[
								18586,
								18620
							],
							[
								18777,
								18809
							],
							[
								19099,
								19127
							],
							[
								19205,
								19234
							],
							[
								19309,
								19346
							],
							[
								19396,
								19431
							],
							[
								19612,
								19647
							],
							[
								19947,
								19970
							],
							[
								20001,
								20025
							],
							[
								20089,
								20116
							],
							[
								20149,
								20189
							],
							[
								20307,
								20350
							],
							[
								20653,
								20682
							],
							[
								20739,
								20753
							],
							[
								20802,
								20831
							],
							[
								20873,
								20900
							],
							[
								21010,
								21017
							],
							[
								21037,
								21065
							],
							[
								21155,
								21182
							],
							[
								21221,
								21248
							],
							[
								21298,
								21322
							],
							[
								21397,
								21432
							],
							[
								21534,
								21566
							],
							[
								21651,
								21685
							],
							[
								21770,
								21800
							],
							[
								22020,
								22030
							],
							[
								22083,
								22087
							],
							[
								22155,
								22192
							],
							[
								22229,
								22246
							],
							[
								22269,
								22286
							],
							[
								22346,
								22363
							],
							[
								22449,
								22458
							],
							[
								22530,
								22544
							],
							[
								22612,
								22617
							],
							[
								23369,
								23407
							],
							[
								23558,
								23593
							],
							[
								23677,
								23695
							],
							[
								23753,
								23797
							],
							[
								23811,
								23820
							],
							[
								23852,
								23880
							],
							[
								23894,
								23903
							],
							[
								23972,
								24015
							],
							[
								24135,
								24168
							],
							[
								24195,
								24202
							],
							[
								24331,
								24336
							],
							[
								24352,
								24386
							],
							[
								24463,
								24489
							],
							[
								24587,
								24621
							],
							[
								24644,
								24658
							],
							[
								24693,
								24743
							],
							[
								24881,
								24927
							],
							[
								24988,
								25050
							],
							[
								25061,
								25077
							],
							[
								25212,
								25249
							],
							[
								25288,
								25345
							],
							[
								25716,
								25750
							],
							[
								25890,
								25929
							],
							[
								26009,
								26046
							],
							[
								26163,
								26194
							],
							[
								26949,
								26992
							],
							[
								27123,
								27128
							],
							[
								27284,
								27318
							],
							[
								27526,
								27562
							],
							[
								27624,
								27650
							],
							[
								28458,
								28483
							],
							[
								28551,
								28579
							],
							[
								29172,
								29191
							],
							[
								29287,
								29308
							],
							[
								29449,
								29474
							],
							[
								29774,
								29831
							],
							[
								29954,
								30019
							],
							[
								30129,
								30181
							],
							[
								30302,
								30352
							],
							[
								30468,
								30483
							],
							[
								30554,
								30565
							],
							[
								30653,
								30664
							],
							[
								30690,
								30705
							],
							[
								30783,
								30797
							],
							[
								30837,
								30856
							],
							[
								31079,
								31175
							],
							[
								31178,
								31280
							],
							[
								31336,
								31348
							],
							[
								31413,
								31427
							],
							[
								31459,
								31465
							],
							[
								31508,
								31516
							],
							[
								31562,
								31570
							],
							[
								31626,
								31641
							],
							[
								31694,
								31701
							],
							[
								31812,
								31822
							],
							[
								31964,
								31974
							],
							[
								32037,
								32044
							],
							[
								32129,
								32156
							],
							[
								32180,
								32189
							],
							[
								32215,
								32223
							],
							[
								32240,
								32249
							],
							[
								32288,
								32296
							],
							[
								32307,
								32320
							],
							[
								32331,
								32346
							],
							[
								32375,
								32393
							],
							[
								32473,
								32497
							],
							[
								32918,
								32952
							],
							[
								32983,
								32994
							],
							[
								32999,
								33009
							],
							[
								33023,
								33034
							],
							[
								33055,
								33091
							],
							[
								33595,
								33625
							],
							[
								33669,
								33700
							],
							[
								33975,
								33997
							],
							[
								34057,
								34083
							],
							[
								34199,
								34210
							],
							[
								34322,
								34353
							],
							[
								34557,
								34582
							],
							[
								34649,
								34701
							],
							[
								34813,
								34835
							],
							[
								34841,
								34862
							],
							[
								34879,
								34911
							],
							[
								35031,
								35066
							],
							[
								35131,
								35164
							],
							[
								35211,
								35223
							],
							[
								35293,
								35305
							],
							[
								35362,
								35393
							],
							[
								35437,
								35479
							],
							[
								35655,
								35683
							],
							[
								35794,
								35824
							],
							[
								35836,
								35853
							],
							[
								35977,
								36013
							],
							[
								36090,
								36116
							],
							[
								36158,
								36197
							],
							[
								36309,
								36313
							],
							[
								36340,
								36344
							],
							[
								36383,
								36387
							],
							[
								36415,
								36419
							],
							[
								36442,
								36478
							],
							[
								36516,
								36548
							],
							[
								36666,
								36707
							],
							[
								36800,
								36824
							],
							[
								36847,
								36858
							],
							[
								36876,
								36893
							],
							[
								36979,
								37003
							],
							[
								37026,
								37052
							],
							[
								37508,
								37540
							],
							[
								37794,
								37803
							],
							[
								37834,
								37843
							],
							[
								37874,
								37883
							],
							[
								37914,
								37923
							],
							[
								37954,
								37963
							],
							[
								37993,
								38002
							],
							[
								38033,
								38042
							],
							[
								38051,
								38071
							],
							[
								38115,
								38120
							],
							[
								38163,
								38172
							],
							[
								38340,
								38373
							],
							[
								38747,
								38773
							],
							[
								38999,
								39042
							],
							[
								39084,
								39096
							],
							[
								39174,
								39219
							],
							[
								39340,
								39360
							],
							[
								39481,
								39488
							],
							[
								39507,
								39514
							],
							[
								39694,
								39723
							],
							[
								39852,
								39897
							],
							[
								40025,
								40057
							],
							[
								40136,
								40157
							],
							[
								40426,
								40444
							],
							[
								40632,
								40651
							],
							[
								40784,
								40832
							],
							[
								40845,
								40854
							],
							[
								40892,
								40902
							],
							[
								40949,
								40983
							],
							[
								41260,
								41302
							],
							[
								41356,
								41394
							],
							[
								41556,
								41575
							],
							[
								41775,
								41814
							],
							[
								41948,
								41965
							],
							[
								42505,
								42525
							],
							[
								42623,
								42642
							],
							[
								42689,
								42708
							],
							[
								44561,
								44568
							],
							[
								44583,
								44590
							],
							[
								46227,
								46260
							],
							[
								46408,
								46417
							],
							[
								46437,
								46445
							],
							[
								46449,
								46458
							],
							[
								46599,
								46627
							],
							[
								46741,
								46769
							],
							[
								46883,
								46901
							],
							[
								47280,
								47315
							],
							[
								47355,
								47382
							],
							[
								47463,
								47511
							],
							[
								47722,
								47809
							],
							[
								47820,
								47836
							],
							[
								47945,
								47985
							],
							[
								48013,
								48017
							],
							[
								48034,
								48039
							],
							[
								48058,
								48063
							],
							[
								48081,
								48118
							],
							[
								48146,
								48150
							],
							[
								48156,
								48162
							],
							[
								48177,
								48183
							],
							[
								48191,
								48197
							],
							[
								48213,
								48250
							],
							[
								48278,
								48282
							],
							[
								48296,
								48302
							],
							[
								48310,
								48316
							],
							[
								48323,
								48329
							],
							[
								48346,
								48399
							],
							[
								48400,
								48417
							],
							[
								48522,
								48541
							],
							[
								48588,
								48626
							],
							[
								48651,
								48664
							],
							[
								49293,
								49337
							],
							[
								49409,
								49427
							],
							[
								49681,
								49699
							],
							[
								50026,
								50053
							],
							[
								50062,
								50077
							],
							[
								50153,
								50180
							],
							[
								50307,
								50311
							],
							[
								50389,
								50402
							],
							[
								50599,
								50628
							],
							[
								50736,
								50762
							],
							[
								50830,
								50857
							],
							[
								51129,
								51150
							],
							[
								51220,
								51245
							],
							[
								51265,
								51287
							],
							[
								51351,
								51376
							],
							[
								51509,
								51533
							],
							[
								51757,
								51773
							],
							[
								51774,
								51793
							],
							[
								51826,
								51846
							],
							[
								51935,
								51963
							],
							[
								52063,
								52088
							],
							[
								52138,
								52165
							],
							[
								52168,
								52187
							],
							[
								52492,
								52522
							],
							[
								52565,
								52580
							],
							[
								52648,
								52671
							],
							[
								52710,
								52714
							],
							[
								52754,
								52758
							],
							[
								52796,
								52820
							],
							[
								52887,
								52923
							],
							[
								52988,
								52995
							],
							[
								53033,
								53072
							],
							[
								53230,
								53263
							],
							[
								53466,
								53477
							],
							[
								53585,
								53616
							],
							[
								53675,
								53731
							],
							[
								54095,
								54136
							],
							[
								54502,
								54542
							],
							[
								54770,
								54818
							],
							[
								54850,
								54859
							],
							[
								55142,
								55181
							],
							[
								55192,
								55201
							],
							[
								55240,
								55251
							],
							[
								55656,
								55697
							],
							[
								55743,
								55776
							],
							[
								55853,
								55888
							],
							[
								55988,
								56031
							],
							[
								56211,
								56247
							],
							[
								56564,
								56603
							],
							[
								56739,
								56787
							],
							[
								56955,
								56969
							],
							[
								57141,
								57148
							],
							[
								57264,
								57271
							],
							[
								57606,
								57630
							],
							[
								57660,
								57677
							],
							[
								57734,
								57756
							],
							[
								57785,
								57802
							],
							[
								57908,
								57939
							],
							[
								58013,
								58033
							],
							[
								58167,
								58201
							],
							[
								58231,
								58240
							],
							[
								58260,
								58268
							],
							[
								58272,
								58281
							],
							[
								58374,
								58408
							],
							[
								58709,
								58742
							],
							[
								59104,
								59138
							],
							[
								59508,
								59542
							],
							[
								59825,
								59869
							],
							[
								60494,
								60533
							],
							[
								60661,
								60743
							],
							[
								61869,
								61882
							],
							[
								61900,
								61909
							],
							[
								61927,
								61936
							],
							[
								61987,
								61998
							],
							[
								62022,
								62034
							],
							[
								62041,
								62052
							],
							[
								62089,
								62094
							],
							[
								62207,
								62212
							],
							[
								62388,
								62393
							],
							[
								62436,
								62441
							],
							[
								62486,
								62491
							],
							[
								62696,
								62701
							],
							[
								62905,
								62938
							],
							[
								62951,
								62952
							],
							[
								63361,
								63394
							],
							[
								63558,
								63595
							],
							[
								63603,
								63604
							],
							[
								64080,
								64087
							],
							[
								64226,
								64237
							],
							[
								64323,
								64334
							],
							[
								64621,
								64635
							],
							[
								65228,
								65260
							],
							[
								65770,
								65808
							],
							[
								66107,
								66130
							],
							[
								66143,
								66163
							],
							[
								66226,
								66240
							],
							[
								66244,
								66258
							],
							[
								66335,
								66350
							],
							[
								66424,
								66438
							],
							[
								66481,
								66504
							],
							[
								66696,
								66714
							],
							[
								66920,
								66934
							],
							[
								66938,
								66952
							],
							[
								67123,
								67145
							],
							[
								67689,
								67694
							],
							[
								67736,
								67742
							],
							[
								67785,
								67792
							],
							[
								67821,
								67860
							],
							[
								67889,
								67899
							],
							[
								67905,
								67914
							],
							[
								67932,
								67959
							],
							[
								67999,
								68008
							],
							[
								68017,
								68025
							],
							[
								68073,
								68082
							],
							[
								68108,
								68117
							],
							[
								68128,
								68136
							],
							[
								68208,
								68217
							],
							[
								68308,
								68352
							],
							[
								68414,
								68475
							],
							[
								68783,
								68809
							],
							[
								68837,
								68842
							],
							[
								68866,
								68879
							],
							[
								68987,
								69052
							],
							[
								69158,
								69184
							],
							[
								69218,
								69244
							],
							[
								69265,
								69298
							],
							[
								69331,
								69347
							],
							[
								69362,
								69369
							],
							[
								69395,
								69411
							],
							[
								69435,
								69462
							],
							[
								69519,
								69534
							],
							[
								69556,
								69568
							],
							[
								69585,
								69600
							],
							[
								69610,
								69619
							],
							[
								69659,
								69668
							],
							[
								69675,
								69681
							],
							[
								69693,
								69722
							],
							[
								69808,
								69818
							],
							[
								69859,
								69874
							],
							[
								69893,
								69906
							],
							[
								70331,
								70341
							],
							[
								70480,
								70492
							],
							[
								70772,
								70793
							],
							[
								70979,
								70990
							],
							[
								71027,
								71036
							],
							[
								71116,
								71149
							],
							[
								71454,
								71483
							],
							[
								71527,
								71549
							],
							[
								71583,
								71622
							],
							[
								71656,
								71662
							],
							[
								71735,
								71760
							],
							[
								71771,
								71783
							],
							[
								71975,
								71985
							],
							[
								72037,
								72087
							],
							[
								72495,
								72525
							],
							[
								72611,
								72641
							],
							[
								72714,
								72745
							],
							[
								72913,
								72937
							],
							[
								72992,
								73016
							],
							[
								73144,
								73150
							],
							[
								73231,
								73256
							],
							[
								73344,
								73367
							],
							[
								73399,
								73405
							],
							[
								73548,
								73549
							],
							[
								73640,
								73644
							],
							[
								73778,
								73809
							],
							[
								74060,
								74072
							],
							[
								74188,
								74202
							],
							[
								74348,
								74380
							],
							[
								74584,
								74610
							],
							[
								74611,
								74628
							],
							[
								74677,
								74700
							],
							[
								74733,
								74743
							],
							[
								74792,
								74804
							],
							[
								75119,
								75129
							],
							[
								75321,
								75333
							],
							[
								76008,
								76041
							],
							[
								76069,
								76083
							],
							[
								76177,
								76202
							],
							[
								76365,
								76393
							],
							[
								76527,
								76556
							],
							[
								76856,
								76904
							],
							[
								77093,
								77130
							],
							[
								77179,
								77227
							],
							[
								77341,
								77375
							],
							[
								77383,
								77407
							],
							[
								77921,
								77951
							],
							[
								78077,
								78104
							],
							[
								78581,
								78632
							],
							[
								78674,
								78701
							],
							[
								78871,
								78919
							],
							[
								79131,
								79166
							],
							[
								79373,
								79406
							],
							[
								79678,
								79709
							],
							[
								79955,
								79999
							],
							[
								80135,
								80151
							],
							[
								80311,
								80361
							],
							[
								80755,
								80760
							],
							[
								80841,
								80854
							],
							[
								80903,
								80913
							],
							[
								80917,
								80930
							],
							[
								81005,
								81020
							],
							[
								81069,
								81079
							],
							[
								81083,
								81098
							],
							[
								81165,
								81198
							],
							[
								81308,
								81315
							],
							[
								81599,
								81614
							],
							[
								81939,
								81964
							],
							[
								82025,
								82053
							],
							[
								82142,
								82151
							],
							[
								83118,
								83149
							],
							[
								83321,
								83335
							],
							[
								83958,
								83992
							],
							[
								84177,
								84199
							],
							[
								84235,
								84259
							],
							[
								84262,
								84282
							],
							[
								84526,
								84552
							],
							[
								84647,
								84685
							],
							[
								85087,
								85130
							],
							[
								85212,
								85240
							],
							[
								85271,
								85307
							],
							[
								85475,
								85583
							],
							[
								85821,
								85872
							],
							[
								85950,
								85984
							],
							[
								86072,
								86100
							],
							[
								86134,
								86169
							],
							[
								86243,
								86268
							],
							[
								86290,
								86307
							],
							[
								86349,
								86398
							],
							[
								86471,
								86484
							],
							[
								86555,
								86568
							],
							[
								86744,
								86782
							],
							[
								86793,
								86812
							],
							[
								86866,
								86907
							],
							[
								86918,
								86937
							],
							[
								86995,
								87020
							],
							[
								87067,
								87106
							],
							[
								87201,
								87214
							],
							[
								87265,
								87275
							],
							[
								87341,
								87348
							],
							[
								87379,
								87385
							],
							[
								87427,
								87440
							],
							[
								87460,
								87496
							],
							[
								87591,
								87604
							],
							[
								87655,
								87665
							],
							[
								87704,
								87711
							],
							[
								87817,
								87850
							],
							[
								87930,
								87965
							],
							[
								88005,
								88015
							],
							[
								88130,
								88158
							],
							[
								88320,
								88332
							],
							[
								88437,
								88462
							],
							[
								88577,
								88590
							],
							[
								88689,
								88716
							],
							[
								88835,
								88848
							],
							[
								88951,
								88984
							],
							[
								89207,
								89226
							],
							[
								89305,
								89333
							],
							[
								89352,
								89371
							],
							[
								89389,
								89424
							],
							[
								89767,
								89798
							],
							[
								89857,
								89870
							],
							[
								89954,
								89986
							],
							[
								90167,
								90217
							],
							[
								90260,
								90287
							],
							[
								90489,
								90522
							],
							[
								90573,
								90608
							],
							[
								90623,
								90637
							],
							[
								90704,
								90766
							],
							[
								90965,
								90981
							],
							[
								91214,
								91224
							],
							[
								91274,
								91284
							],
							[
								91310,
								91320
							],
							[
								91348,
								91373
							],
							[
								91499,
								91524
							],
							[
								91798,
								91825
							],
							[
								92057,
								92069
							],
							[
								93722,
								93757
							],
							[
								93776,
								93784
							],
							[
								93832,
								93847
							],
							[
								93995,
								94008
							],
							[
								94201,
								94217
							],
							[
								94424,
								94449
							],
							[
								94464,
								94486
							],
							[
								94702,
								94706
							],
							[
								94920,
								94942
							],
							[
								94964,
								94974
							],
							[
								94992,
								95005
							],
							[
								95164,
								95186
							],
							[
								95208,
								95218
							],
							[
								95236,
								95249
							],
							[
								95378,
								95400
							],
							[
								95426,
								95436
							],
							[
								95454,
								95467
							],
							[
								95503,
								95525
							],
							[
								95546,
								95556
							],
							[
								95574,
								95587
							],
							[
								95607,
								95648
							],
							[
								95955,
								95978
							],
							[
								96059,
								96081
							],
							[
								96155,
								96175
							],
							[
								96302,
								96313
							],
							[
								96346,
								96363
							],
							[
								96539,
								96558
							],
							[
								96593,
								96615
							],
							[
								96747,
								96768
							],
							[
								96906,
								96926
							],
							[
								96993,
								97016
							],
							[
								97092,
								97114
							],
							[
								97232,
								97256
							],
							[
								97318,
								97330
							],
							[
								97501,
								97519
							],
							[
								97581,
								97593
							],
							[
								97745,
								97768
							],
							[
								97909,
								97925
							],
							[
								97981,
								97994
							],
							[
								98026,
								98094
							],
							[
								98135,
								98157
							],
							[
								98186,
								98196
							],
							[
								98212,
								98225
							],
							[
								98285,
								98298
							],
							[
								98374,
								98397
							],
							[
								98525,
								98547
							],
							[
								98644,
								98657
							],
							[
								98719,
								98735
							],
							[
								98773,
								98777
							],
							[
								99036,
								99079
							],
							[
								99094,
								99119
							],
							[
								99262,
								99270
							],
							[
								99284,
								99291
							],
							[
								99300,
								99305
							],
							[
								99323,
								99364
							],
							[
								99377,
								99384
							],
							[
								99461,
								99500
							],
							[
								99657,
								99668
							],
							[
								99703,
								99724
							],
							[
								99802,
								99809
							],
							[
								99841,
								99866
							],
							[
								99924,
								99933
							],
							[
								99950,
								99957
							],
							[
								99975,
								100001
							],
							[
								100059,
								100068
							],
							[
								100086,
								100093
							],
							[
								100112,
								100207
							],
							[
								100839,
								100859
							],
							[
								100860,
								100874
							],
							[
								100896,
								100903
							],
							[
								100930,
								100950
							],
							[
								100951,
								100965
							],
							[
								100986,
								100993
							],
							[
								101037,
								101051
							],
							[
								101123,
								101172
							],
							[
								101185,
								101201
							],
							[
								101235,
								101251
							],
							[
								101343,
								101375
							],
							[
								101406,
								101445
							],
							[
								101826,
								101867
							],
							[
								101906,
								101913
							],
							[
								101969,
								101989
							],
							[
								102027,
								102046
							],
							[
								102120,
								102137
							],
							[
								102156,
								102176
							],
							[
								102180,
								102197
							],
							[
								102247,
								102270
							],
							[
								102371,
								102394
							],
							[
								102438,
								102457
							],
							[
								102500,
								102528
							],
							[
								102624,
								102645
							],
							[
								102721,
								102747
							],
							[
								102865,
								102883
							],
							[
								102937,
								102942
							],
							[
								102945,
								102951
							],
							[
								102967,
								103013
							],
							[
								103102,
								103115
							],
							[
								103493,
								103506
							],
							[
								103569,
								103618
							],
							[
								103631,
								103647
							],
							[
								103669,
								103682
							],
							[
								103710,
								103722
							],
							[
								103726,
								103739
							],
							[
								103801,
								103853
							],
							[
								104042,
								104055
							],
							[
								104118,
								104157
							],
							[
								104301,
								104336
							],
							[
								104408,
								104412
							],
							[
								104439,
								104448
							],
							[
								104699,
								104734
							],
							[
								104810,
								104831
							],
							[
								104846,
								104854
							],
							[
								104867,
								104876
							],
							[
								104898,
								104902
							],
							[
								104941,
								104945
							],
							[
								105092,
								105134
							],
							[
								105466,
								105494
							],
							[
								105554,
								105605
							],
							[
								105856,
								105899
							],
							[
								105952,
								105995
							],
							[
								106031,
								106036
							],
							[
								106113,
								106127
							],
							[
								106162,
								106172
							],
							[
								106185,
								106220
							],
							[
								106264,
								106272
							],
							[
								106819,
								106863
							],
							[
								107398,
								107421
							],
							[
								107829,
								107871
							],
							[
								108677,
								108700
							],
							[
								109072,
								109077
							],
							[
								109631,
								109644
							],
							[
								109680,
								109695
							],
							[
								109733,
								109750
							],
							[
								109792,
								109836
							],
							[
								110035,
								110042
							],
							[
								110753,
								110766
							],
							[
								110808,
								110817
							],
							[
								110881,
								110900
							],
							[
								111006,
								111019
							],
							[
								111194,
								111209
							],
							[
								111253,
								111270
							],
							[
								111316,
								111329
							],
							[
								111371,
								111384
							],
							[
								111426,
								111441
							],
							[
								111485,
								111502
							],
							[
								111630,
								111635
							],
							[
								111784,
								111810
							],
							[
								111987,
								112001
							],
							[
								112024,
								112029
							],
							[
								112671,
								112675
							],
							[
								112733,
								112737
							],
							[
								112980,
								112989
							],
							[
								113114,
								113127
							],
							[
								113201,
								113215
							],
							[
								113466,
								113489
							],
							[
								113507,
								113516
							],
							[
								113533,
								113544
							],
							[
								113554,
								113563
							],
							[
								113583,
								113611
							],
							[
								113719,
								113752
							],
							[
								113919,
								113941
							],
							[
								113959,
								113968
							],
							[
								113988,
								114001
							],
							[
								114059,
								114068
							],
							[
								114088,
								114130
							],
							[
								114603,
								114611
							],
							[
								114646,
								114657
							],
							[
								114734,
								114772
							],
							[
								115123,
								115144
							],
							[
								115229,
								115263
							],
							[
								115416,
								115455
							],
							[
								115510,
								115522
							],
							[
								115981,
								115989
							],
							[
								116121,
								116128
							],
							[
								116187,
								116195
							],
							[
								116308,
								116325
							],
							[
								116404,
								116408
							],
							[
								116462,
								116479
							],
							[
								116609,
								116657
							],
							[
								116943,
								117038
							],
							[
								117173,
								117185
							],
							[
								117195,
								117207
							],
							[
								117212,
								117225
							],
							[
								117331,
								117343
							],
							[
								117353,
								117365
							],
							[
								117370,
								117383
							],
							[
								117491,
								117499
							],
							[
								117710,
								117718
							],
							[
								118093,
								118103
							],
							[
								118183,
								118193
							],
							[
								118274,
								118282
							],
							[
								118413,
								118432
							],
							[
								118981,
								118985
							],
							[
								119054,
								119071
							],
							[
								119111,
								119126
							],
							[
								119164,
								119177
							],
							[
								119213,
								119228
							],
							[
								119338,
								119343
							],
							[
								119414,
								119431
							],
							[
								119462,
								119472
							],
							[
								119594,
								119659
							],
							[
								120022,
								120056
							],
							[
								120140,
								120183
							],
							[
								120399,
								120446
							],
							[
								120637,
								120688
							],
							[
								120908,
								120960
							],
							[
								121308,
								121351
							],
							[
								121723,
								121727
							],
							[
								121842,
								121917
							],
							[
								122291,
								122295
							],
							[
								122528,
								122570
							],
							[
								122634,
								122642
							],
							[
								122803,
								122844
							],
							[
								122891,
								122923
							],
							[
								123004,
								123037
							],
							[
								123096,
								123160
							],
							[
								123400,
								123441
							],
							[
								123479,
								123497
							],
							[
								123546,
								123553
							],
							[
								123751,
								123815
							],
							[
								123995,
								124060
							],
							[
								124073,
								124085
							],
							[
								124102,
								124113
							],
							[
								124137,
								124152
							],
							[
								124535,
								124565
							],
							[
								124742,
								124762
							],
							[
								124782,
								124836
							],
							[
								125059,
								125065
							],
							[
								125117,
								125122
							],
							[
								125178,
								125184
							],
							[
								125261,
								125266
							],
							[
								125309,
								125368
							],
							[
								127417,
								127430
							],
							[
								127578,
								127592
							],
							[
								127752,
								127765
							],
							[
								127847,
								127866
							],
							[
								128109,
								128146
							],
							[
								128494,
								128564
							],
							[
								128920,
								128962
							],
							[
								129013,
								129022
							],
							[
								129188,
								129223
							],
							[
								129350,
								129354
							],
							[
								129376,
								129387
							],
							[
								129497,
								129520
							],
							[
								129664,
								129688
							],
							[
								129789,
								129793
							],
							[
								129816,
								129820
							],
							[
								129832,
								129864
							],
							[
								129912,
								129952
							],
							[
								130181,
								130200
							],
							[
								130232,
								130296
							],
							[
								130350,
								130355
							],
							[
								130388,
								130418
							],
							[
								130505,
								130540
							],
							[
								130564,
								130590
							],
							[
								130704,
								130737
							],
							[
								130876,
								130934
							],
							[
								130959,
								130985
							],
							[
								131028,
								131063
							],
							[
								131106,
								131127
							],
							[
								131276,
								131302
							],
							[
								131460,
								131479
							],
							[
								131801,
								131850
							],
							[
								131875,
								131896
							],
							[
								131938,
								131954
							],
							[
								132008,
								132031
							],
							[
								132094,
								132122
							],
							[
								132184,
								132205
							],
							[
								132229,
								132234
							],
							[
								132807,
								132838
							],
							[
								132841,
								132859
							],
							[
								132911,
								132912
							],
							[
								132925,
								132936
							],
							[
								133491,
								133536
							],
							[
								133638,
								133662
							],
							[
								133940,
								133950
							],
							[
								133998,
								134019
							],
							[
								134067,
								134088
							],
							[
								134175,
								134216
							],
							[
								134364,
								134368
							],
							[
								134414,
								134422
							],
							[
								134451,
								134455
							],
							[
								134830,
								134843
							],
							[
								134896,
								134916
							],
							[
								135242,
								135299
							],
							[
								135406,
								135417
							],
							[
								135757,
								135777
							],
							[
								135817,
								135853
							],
							[
								135882,
								135895
							],
							[
								135938,
								135948
							],
							[
								135993,
								136008
							],
							[
								136981,
								136994
							],
							[
								137565,
								137585
							],
							[
								137660,
								137675
							],
							[
								138052,
								138065
							],
							[
								138136,
								138156
							],
							[
								138238,
								138253
							],
							[
								138319,
								138348
							],
							[
								138422,
								138455
							],
							[
								138567,
								138581
							],
							[
								138621,
								138636
							],
							[
								138658,
								138686
							],
							[
								139215,
								139238
							],
							[
								139445,
								139473
							],
							[
								139580,
								139622
							],
							[
								139949,
								140005
							],
							[
								140239,
								140280
							],
							[
								140366,
								140377
							],
							[
								140526,
								140539
							],
							[
								140860,
								140876
							],
							[
								140905,
								140957
							],
							[
								141026,
								141033
							],
							[
								141121,
								141135
							],
							[
								141223,
								141238
							],
							[
								141344,
								141348
							],
							[
								141380,
								141400
							],
							[
								141461,
								141474
							],
							[
								141534,
								141546
							],
							[
								141840,
								141855
							],
							[
								142176,
								142186
							],
							[
								142241,
								142251
							],
							[
								142335,
								142346
							],
							[
								142403,
								142410
							],
							[
								143013,
								143023
							],
							[
								143089,
								143100
							],
							[
								143168,
								143180
							],
							[
								143215,
								143228
							],
							[
								143273,
								143288
							],
							[
								143307,
								143334
							],
							[
								143520,
								143563
							],
							[
								143724,
								143784
							],
							[
								143870,
								143895
							],
							[
								143944,
								143987
							],
							[
								143998,
								144008
							],
							[
								144017,
								144046
							],
							[
								144302,
								144318
							],
							[
								144340,
								144351
							],
							[
								144401,
								144431
							],
							[
								144500,
								144505
							],
							[
								144534,
								144539
							],
							[
								144834,
								144847
							],
							[
								144898,
								144929
							],
							[
								144950,
								144963
							],
							[
								144964,
								144984
							],
							[
								146488,
								146515
							],
							[
								146540,
								146545
							],
							[
								146596,
								146625
							],
							[
								146713,
								146718
							],
							[
								146799,
								146812
							],
							[
								146865,
								146876
							],
							[
								146916,
								146937
							],
							[
								147061,
								147078
							],
							[
								147208,
								147228
							],
							[
								147424,
								147450
							],
							[
								147555,
								147561
							],
							[
								147599,
								147604
							],
							[
								147692,
								147725
							],
							[
								147883,
								147888
							],
							[
								147939,
								147952
							],
							[
								147976,
								147982
							],
							[
								148065,
								148089
							],
							[
								148183,
								148194
							],
							[
								148250,
								148263
							],
							[
								148325,
								148336
							],
							[
								148435,
								148445
							],
							[
								148543,
								148556
							],
							[
								148669,
								148678
							],
							[
								148736,
								148748
							],
							[
								148831,
								148839
							],
							[
								148939,
								148946
							],
							[
								149048,
								149068
							],
							[
								149256,
								149277
							],
							[
								149536,
								149553
							],
							[
								149706,
								149718
							],
							[
								149847,
								149861
							],
							[
								150032,
								150045
							],
							[
								150062,
								150082
							],
							[
								150341,
								150371
							],
							[
								150377,
								150403
							],
							[
								150422,
								150448
							],
							[
								150477,
								150495
							],
							[
								150561,
								150595
							],
							[
								150709,
								150763
							],
							[
								150790,
								150810
							],
							[
								150900,
								150917
							],
							[
								151013,
								151035
							],
							[
								151142,
								151166
							],
							[
								151274,
								151304
							],
							[
								151335,
								151344
							],
							[
								151387,
								151406
							],
							[
								151555,
								151575
							],
							[
								151692,
								151711
							],
							[
								151825,
								151841
							],
							[
								151949,
								151959
							],
							[
								152037,
								152044
							],
							[
								152110,
								152119
							],
							[
								152464,
								152485
							],
							[
								152494,
								152522
							],
							[
								152532,
								152577
							],
							[
								152632,
								152643
							],
							[
								152665,
								152675
							],
							[
								152688,
								152699
							],
							[
								152727,
								152760
							],
							[
								152921,
								152953
							],
							[
								153021,
								153043
							],
							[
								153215,
								153251
							],
							[
								153413,
								153429
							],
							[
								153490,
								153526
							],
							[
								153602,
								153613
							],
							[
								153678,
								153682
							],
							[
								153721,
								153734
							],
							[
								153848,
								153884
							],
							[
								154061,
								154066
							],
							[
								154107,
								154160
							],
							[
								155106,
								155135
							],
							[
								155289,
								155326
							],
							[
								155337,
								155350
							],
							[
								155363,
								155372
							],
							[
								155419,
								155439
							],
							[
								155473,
								155489
							],
							[
								155711,
								155732
							],
							[
								155860,
								155892
							],
							[
								155919,
								155928
							],
							[
								155940,
								155953
							],
							[
								156031,
								156055
							],
							[
								156122,
								156131
							],
							[
								156147,
								156157
							],
							[
								156174,
								156191
							],
							[
								156219,
								156228
							],
							[
								156229,
								156252
							],
							[
								156298,
								156322
							],
							[
								156470,
								156475
							],
							[
								156493,
								156502
							],
							[
								156602,
								156610
							],
							[
								156614,
								156623
							],
							[
								156645,
								156658
							],
							[
								156675,
								156688
							],
							[
								156695,
								156708
							],
							[
								156734,
								156751
							],
							[
								156764,
								156780
							],
							[
								156850,
								156855
							],
							[
								156873,
								156882
							],
							[
								156982,
								156990
							],
							[
								157003,
								157012
							],
							[
								157027,
								157032
							],
							[
								157120,
								157157
							],
							[
								157314,
								157330
							],
							[
								157348,
								157370
							],
							[
								157483,
								157489
							],
							[
								158537,
								158552
							],
							[
								158602,
								158616
							],
							[
								158630,
								158645
							],
							[
								159175,
								159192
							],
							[
								159242,
								159258
							],
							[
								159542,
								159572
							],
							[
								159590,
								159599
							],
							[
								159617,
								159627
							],
							[
								159640,
								159649
							],
							[
								159798,
								159827
							],
							[
								159845,
								159854
							],
							[
								159872,
								159882
							],
							[
								159886,
								159895
							],
							[
								161176,
								161228
							],
							[
								161294,
								161317
							],
							[
								161389,
								161407
							],
							[
								161756,
								161766
							],
							[
								161770,
								161784
							],
							[
								161986,
								162018
							],
							[
								162045,
								162080
							],
							[
								162120,
								162143
							],
							[
								162304,
								162320
							],
							[
								162505,
								162514
							],
							[
								162540,
								162560
							],
							[
								162587,
								162596
							],
							[
								162611,
								162635
							],
							[
								162775,
								162820
							],
							[
								162852,
								162870
							],
							[
								163016,
								163028
							],
							[
								163173,
								163178
							],
							[
								163492,
								163499
							],
							[
								163636,
								163655
							],
							[
								163673,
								163695
							],
							[
								164051,
								164093
							],
							[
								164110,
								164147
							],
							[
								164395,
								164414
							],
							[
								164784,
								164824
							],
							[
								164867,
								164881
							],
							[
								164951,
								164981
							],
							[
								165030,
								165060
							],
							[
								165127,
								165205
							],
							[
								165655,
								165683
							],
							[
								165735,
								165799
							],
							[
								165817,
								165841
							],
							[
								166112,
								166131
							],
							[
								166246,
								166282
							],
							[
								167007,
								167045
							],
							[
								167062,
								167100
							],
							[
								168389,
								168396
							],
							[
								168452,
								168470
							],
							[
								168682,
								168689
							],
							[
								168737,
								168741
							],
							[
								168873,
								168881
							],
							[
								168948,
								168960
							],
							[
								170002,
								170068
							],
							[
								170069,
								170086
							],
							[
								170324,
								170335
							],
							[
								170352,
								170371
							],
							[
								170485,
								170549
							],
							[
								170565,
								170574
							],
							[
								170586,
								170594
							],
							[
								170647,
								170662
							],
							[
								170678,
								170684
							],
							[
								170708,
								170721
							],
							[
								170916,
								170933
							],
							[
								170978,
								171003
							],
							[
								171102,
								171108
							],
							[
								171228,
								171260
							],
							[
								171337,
								171341
							],
							[
								171482,
								171503
							],
							[
								171547,
								171568
							],
							[
								171663,
								171688
							],
							[
								171859,
								171892
							],
							[
								172125,
								172152
							],
							[
								172244,
								172248
							],
							[
								172355,
								172360
							],
							[
								172624,
								172670
							],
							[
								173260,
								173269
							],
							[
								173505,
								173558
							],
							[
								173569,
								173595
							],
							[
								173898,
								173914
							],
							[
								173998,
								174009
							],
							[
								174255,
								174259
							],
							[
								174543,
								174596
							],
							[
								174824,
								174837
							],
							[
								174848,
								174864
							],
							[
								175039,
								175048
							],
							[
								175090,
								175099
							],
							[
								175139,
								175144
							],
							[
								175180,
								175198
							],
							[
								175219,
								175250
							],
							[
								175357,
								175376
							],
							[
								175669,
								175682
							],
							[
								175771,
								175789
							],
							[
								175884,
								175901
							],
							[
								176034,
								176041
							],
							[
								176160,
								176166
							],
							[
								176316,
								176324
							],
							[
								176443,
								176453
							],
							[
								176682,
								176691
							],
							[
								177184,
								177224
							],
							[
								177533,
								177568
							],
							[
								177899,
								177905
							],
							[
								177941,
								177959
							],
							[
								178003,
								178013
							],
							[
								178096,
								178106
							],
							[
								178155,
								178187
							],
							[
								178434,
								178453
							],
							[
								179077,
								179099
							],
							[
								179398,
								179458
							],
							[
								180168,
								180193
							],
							[
								180222,
								180238
							],
							[
								180247,
								180258
							],
							[
								180350,
								180356
							],
							[
								180365,
								180376
							],
							[
								180436,
								180460
							],
							[
								180478,
								180487
							],
							[
								180511,
								180520
							],
							[
								180548,
								180559
							],
							[
								180586,
								180597
							],
							[
								180630,
								180643
							],
							[
								180662,
								180675
							],
							[
								180687,
								180700
							],
							[
								180851,
								180862
							],
							[
								180964,
								180989
							],
							[
								181010,
								181040
							],
							[
								181138,
								181172
							],
							[
								181444,
								181465
							],
							[
								181530,
								181548
							],
							[
								181716,
								181752
							],
							[
								182206,
								182226
							],
							[
								182429,
								182444
							],
							[
								182720,
								182743
							],
							[
								182952,
								182970
							],
							[
								183188,
								183200
							],
							[
								183230,
								183245
							],
							[
								183290,
								183296
							],
							[
								183356,
								183370
							],
							[
								183518,
								183536
							],
							[
								183732,
								183764
							],
							[
								183830,
								183846
							],
							[
								184182,
								184198
							],
							[
								184645,
								184648
							],
							[
								184661,
								184662
							],
							[
								184692,
								184728
							],
							[
								185169,
								185208
							],
							[
								185297,
								185323
							],
							[
								185371,
								185432
							],
							[
								185867,
								185895
							],
							[
								186002,
								186020
							],
							[
								186315,
								186353
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"set = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							" (key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function( obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value) )",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.intersect = (a, b) =>",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = function(arr)",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							" (acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							" x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							"Util.isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							" (acc, { elements }) =>",
							" (acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods, dest) =>",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakAssign = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.getFunctionArguments = fn =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							" (a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							"gen = p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							" (fd = 0, mode = true) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							" ([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAAPtnAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					54,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								243,
								247
							],
							[
								270,
								275
							],
							[
								316,
								320
							],
							[
								342,
								347
							],
							[
								386,
								390
							],
							[
								411,
								416
							],
							[
								429,
								453
							],
							[
								593,
								630
							],
							[
								661,
								667
							],
							[
								733,
								746
							],
							[
								777,
								809
							],
							[
								942,
								973
							],
							[
								1050,
								1063
							],
							[
								1283,
								1291
							],
							[
								1376,
								1404
							],
							[
								1583,
								1610
							],
							[
								1799,
								1826
							],
							[
								2074,
								2121
							],
							[
								2688,
								2719
							],
							[
								2781,
								2811
							],
							[
								2866,
								2895
							],
							[
								3237,
								3269
							],
							[
								3526,
								3557
							],
							[
								3632,
								3638
							],
							[
								4156,
								4245
							],
							[
								4401,
								4436
							],
							[
								4968,
								5021
							],
							[
								5439,
								5475
							],
							[
								5543,
								5570
							],
							[
								5623,
								5664
							],
							[
								5690,
								5699
							],
							[
								5741,
								5766
							],
							[
								5888,
								5898
							],
							[
								6014,
								6019
							],
							[
								6119,
								6129
							],
							[
								6206,
								6221
							],
							[
								6292,
								6306
							],
							[
								6423,
								6455
							],
							[
								6458,
								6478
							],
							[
								6717,
								6730
							],
							[
								7264,
								7311
							],
							[
								7716,
								7747
							],
							[
								8098,
								8141
							],
							[
								8202,
								8208
							],
							[
								8438,
								8468
							],
							[
								8500,
								8518
							],
							[
								8650,
								8656
							],
							[
								8778,
								8819
							],
							[
								9648,
								9685
							],
							[
								9900,
								9916
							],
							[
								10803,
								10811
							],
							[
								10899,
								10907
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function WriteXML(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function ReadFd(fd, bufferSize)",
							" function* FdRead()",
							"(acc, buf) =>",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					55,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/trkl.es",
						"symkeys":
						[
							[
								46,
								70
							],
							[
								129,
								153
							],
							[
								270,
								285
							],
							[
								441,
								486
							],
							[
								631,
								666
							],
							[
								729,
								764
							],
							[
								1157,
								1174
							],
							[
								1387,
								1391
							],
							[
								1457,
								1461
							],
							[
								1539,
								1551
							],
							[
								1621,
								1644
							],
							[
								1718,
								1728
							],
							[
								1743,
								1756
							],
							[
								1796,
								1820
							],
							[
								1933,
								1957
							],
							[
								2241,
								2267
							],
							[
								2332,
								2436
							],
							[
								2636,
								2644
							],
							[
								2705,
								2720
							],
							[
								2802,
								2841
							],
							[
								2971,
								2992
							],
							[
								3365,
								3403
							],
							[
								3536,
								3569
							],
							[
								3675,
								3703
							]
						],
						"symlist":
						[
							"function trkl(initValue)",
							"self = function(...args)",
							" (obj, prop) =>",
							" function subscribe(subscriber, immediate)",
							".unsubscribe = function(subscriber)",
							" function write(newValue, thisObj)",
							" function read()",
							"trkl",
							"trkl",
							".is = arg =>",
							".getset = function(arg)",
							"get: () =>",
							"set: value =>",
							".computed = function(fn)",
							" function runComputed()",
							".from = function(executor)",
							".property = function(object, name, options = { enumerable: true, configurable: true, deletable: false })",
							"value =>",
							".delete = () =>",
							".bind = function(object, name, handler)",
							" (acc, key) =>",
							".object = function(handlers, ret = {})",
							"function detectCircularity(token)",
							"function remove(array, item)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAAGICAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					56,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								243,
								247
							],
							[
								270,
								275
							],
							[
								316,
								320
							],
							[
								342,
								347
							],
							[
								386,
								390
							],
							[
								411,
								416
							],
							[
								429,
								453
							],
							[
								593,
								630
							],
							[
								661,
								667
							],
							[
								733,
								746
							],
							[
								777,
								809
							],
							[
								942,
								973
							],
							[
								1050,
								1063
							],
							[
								1283,
								1291
							],
							[
								1376,
								1404
							],
							[
								1583,
								1610
							],
							[
								1799,
								1826
							],
							[
								2074,
								2121
							],
							[
								2688,
								2719
							],
							[
								2781,
								2811
							],
							[
								2866,
								2895
							],
							[
								3237,
								3269
							],
							[
								3526,
								3557
							],
							[
								3632,
								3638
							],
							[
								4156,
								4245
							],
							[
								4401,
								4436
							],
							[
								4968,
								5021
							],
							[
								5439,
								5475
							],
							[
								5543,
								5570
							],
							[
								5623,
								5664
							],
							[
								5690,
								5699
							],
							[
								5741,
								5766
							],
							[
								5888,
								5898
							],
							[
								6014,
								6019
							],
							[
								6119,
								6129
							],
							[
								6206,
								6221
							],
							[
								6292,
								6306
							],
							[
								6423,
								6455
							],
							[
								6458,
								6478
							],
							[
								6717,
								6730
							],
							[
								7264,
								7311
							],
							[
								7716,
								7747
							],
							[
								8098,
								8141
							],
							[
								8202,
								8208
							],
							[
								8438,
								8468
							],
							[
								8500,
								8518
							],
							[
								8650,
								8656
							],
							[
								8778,
								8819
							],
							[
								9648,
								9685
							],
							[
								9900,
								9916
							],
							[
								10803,
								10811
							],
							[
								10899,
								10907
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function WriteXML(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function ReadFd(fd, bufferSize)",
							" function* FdRead()",
							"(acc, buf) =>",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABiAgAAICB0cmtsKGluaXRWYWx1ZSkKICBzZWxmID0gZnVuY3Rpb24oLi4uYXJncykKICAob2JqLCBwcm9wKSA9PgogIHN1YnNjcmliZShzdWJzY3JpYmVyLCBpbW1lZGlhdGUpCiAgLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24oc3Vic2NyaWJlcikKICB3cml0ZShuZXdWYWx1ZSwgdGhpc09iaikKICByZWFkKCkKICB0cmtsCiAgdHJrbAogIC5pcyA9IGFyZyA9PgogIC5nZXRzZXQgPSBmdW5jdGlvbihhcmcpCiAgZ2V0OiAoKSA9PgogIHNldDogdmFsdWUgPT4KICAuY29tcHV0ZWQgPSBmdW5jdGlvbihmbikKICBydW5Db21wdXRlZCgpCiAgLmZyb20gPSBmdW5jdGlvbihleGVjdXRvcikKICAucHJvcGVydHkgPSBmdW5jdGlvbihvYmplY3QsIG5hbWUsIG9wdGlvbnMgPSB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZGVsZXRhYmxlOiBmYWxzZSB9KQogIHZhbHVlID0+CiAgLmRlbGV0ZSA9ICgpID0+CiAgLmJpbmQgPSBmdW5jdGlvbihvYmplY3QsIG5hbWUsIGhhbmRsZXIpCiAgKGFjYywga2V5KSA9PgogIC5vYmplY3QgPSBmdW5jdGlvbihoYW5kbGVycywgcmV0ID0ge30pCiAgZGV0ZWN0Q2lyY3VsYXJpdHkodG9rZW4pCiAgcmVtb3ZlKGFycmF5LCBpdGVtKQAAAAAAAAAA6QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					57,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/spawn.js",
						"symkeys":
						[
							[
								77,
								87
							],
							[
								97,
								106
							],
							[
								146,
								155
							],
							[
								162,
								168
							],
							[
								185,
								208
							],
							[
								236,
								259
							],
							[
								359,
								389
							],
							[
								542,
								580
							],
							[
								726,
								741
							],
							[
								1179,
								1189
							],
							[
								1325,
								1331
							],
							[
								1367,
								1387
							],
							[
								1971,
								2000
							],
							[
								2032,
								2060
							],
							[
								2117,
								2122
							],
							[
								2182,
								2187
							],
							[
								2213,
								2243
							],
							[
								2275,
								2304
							],
							[
								2360,
								2365
							],
							[
								2426,
								2431
							],
							[
								2458,
								2503
							],
							[
								2546,
								2566
							],
							[
								2590,
								2603
							],
							[
								2667,
								2680
							],
							[
								2777,
								2823
							],
							[
								2888,
								2893
							],
							[
								3037,
								3043
							],
							[
								3105,
								3135
							],
							[
								3275,
								3310
							],
							[
								3370,
								3394
							],
							[
								3610,
								3628
							],
							[
								3688,
								3708
							],
							[
								3738,
								3756
							],
							[
								3836,
								3885
							],
							[
								4076,
								4109
							],
							[
								4570,
								4640
							]
						],
						"symlist":
						[
							"zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"once = (fn, thisObj) =>",
							"async function(...args)",
							"function QuickJSSpawn(os, ffi)",
							" (args, options = { block: false }) =>",
							"(mode, chan) =>",
							"(fd, i) =>",
							"wait()",
							"(resolve, reject) =>",
							" function MakeReadStream(fd)",
							"read(buffer, offset, length)",
							"() =>",
							"() =>",
							" function MakeWriteStream(fd)",
							"write(buffer, offset, length)",
							"() =>",
							"() =>",
							" function WaitFd(fd, write = false, timeout)",
							"(resolve, reject) =>",
							" () =>",
							" () =>",
							" function setupHandlers(ok, timeout, msecs)",
							"() =>",
							" () =>",
							" function destroyHandlers()",
							"function NodeJSSpawn(child_process)",
							" (args, options = {}) =>",
							".wait = function()",
							"(resolve, reject) =>",
							" (code, signal) =>",
							"async function CreatePortableSpawn(ctor, ...args)",
							"async function GetPortableSpawn()",
							"async function PortableSpawn(fn = spawn => (globalThis.spawn = spawn))"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAALsCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					58,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								243,
								247
							],
							[
								270,
								275
							],
							[
								316,
								320
							],
							[
								342,
								347
							],
							[
								386,
								390
							],
							[
								411,
								416
							],
							[
								429,
								453
							],
							[
								593,
								630
							],
							[
								661,
								667
							],
							[
								733,
								746
							],
							[
								777,
								809
							],
							[
								942,
								973
							],
							[
								1050,
								1063
							],
							[
								1283,
								1291
							],
							[
								1376,
								1404
							],
							[
								1583,
								1610
							],
							[
								1799,
								1826
							],
							[
								2074,
								2121
							],
							[
								2688,
								2719
							],
							[
								2781,
								2811
							],
							[
								2866,
								2895
							],
							[
								3237,
								3269
							],
							[
								3526,
								3557
							],
							[
								3632,
								3638
							],
							[
								4156,
								4245
							],
							[
								4401,
								4436
							],
							[
								4968,
								5021
							],
							[
								5439,
								5475
							],
							[
								5543,
								5570
							],
							[
								5623,
								5664
							],
							[
								5690,
								5699
							],
							[
								5741,
								5766
							],
							[
								5888,
								5898
							],
							[
								6014,
								6019
							],
							[
								6119,
								6129
							],
							[
								6206,
								6221
							],
							[
								6292,
								6306
							],
							[
								6423,
								6455
							],
							[
								6458,
								6478
							],
							[
								6717,
								6730
							],
							[
								7264,
								7311
							],
							[
								7716,
								7747
							],
							[
								8098,
								8141
							],
							[
								8202,
								8208
							],
							[
								8438,
								8468
							],
							[
								8500,
								8518
							],
							[
								8650,
								8656
							],
							[
								8778,
								8819
							],
							[
								9648,
								9685
							],
							[
								9900,
								9916
							],
							[
								10803,
								10811
							],
							[
								10899,
								10907
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function WriteXML(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function ReadFd(fd, bufferSize)",
							" function* FdRead()",
							"(acc, buf) =>",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC7AgAAICB6aXAgPSBhID0+CihhLCBiKSA9PgooXywgaSkgPT4KICBhcnIgPT4KICBvbmNlID0gKGZuLCB0aGlzT2JqKSA9PgogIGZ1bmN0aW9uKC4uLmFyZ3MpClF1aWNrSlNTcGF3bihvcywgZmZpKQogIChhcmdzLCBvcHRpb25zID0geyBibG9jazogZmFsc2UgfSkgPT4KKG1vZGUsIGNoYW4pID0+CihmZCwgaSkgPT4KICB3YWl0KCkKKHJlc29sdmUsIHJlamVjdCkgPT4KTWFrZVJlYWRTdHJlYW0oZmQpCiAgcmVhZChidWZmZXIsIG9mZnNldCwgbGVuZ3RoKQooKSA9PgooKSA9PgpNYWtlV3JpdGVTdHJlYW0oZmQpCiAgd3JpdGUoYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCkKKCkgPT4KKCkgPT4KV2FpdEZkKGZkLCB3cml0ZSA9IGZhbHNlLCB0aW1lb3V0KQoocmVzb2x2ZSwgcmVqZWN0KSA9PgogICgpID0+CiAgKCkgPT4KICBzZXR1cEhhbmRsZXJzKG9rLCB0aW1lb3V0LCBtc2VjcykKKCkgPT4KICAoKSA9PgogIGRlc3Ryb3lIYW5kbGVycygpCk5vZGVKU1NwYXduKGNoaWxkX3Byb2Nlc3MpCiAgKGFyZ3MsIG9wdGlvbnMgPSB7fSkgPT4KICAud2FpdCA9IGZ1bmN0aW9uKCkKKHJlc29sdmUsIHJlamVjdCkgPT4KICAoY29kZSwgc2lnbmFsKSA9PgpDcmVhdGVQb3J0YWJsZVNwYXduKGN0b3IsIC4uLmFyZ3MpCkdldFBvcnRhYmxlU3Bhd24oKQpQb3J0YWJsZVNwYXduKGZuID0gc3Bhd24gPT4gKGdsb2JhbFRoaXMuc3Bhd24gPSBzcGF3bikpAAAAAAAAAADpAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					59,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					60,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
							[
								77,
								81
							],
							[
								876,
								883
							],
							[
								2179,
								2183
							],
							[
								2423,
								2427
							],
							[
								2540,
								2548
							],
							[
								2706,
								2710
							]
						],
						"symlist":
						[
							"http",
							"are met",
							"main",
							"step",
							"nodeTest",
							"expr"
						]
					},
					"AQAAAAAAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					61,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAICBodHRwCiAgYXJlIG1ldAogIG1haW4KICBzdGVwCiAgbm9kZVRlc3QKICBleHByAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					62,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/css3.g4",
						"symkeys":
						[
							[
								2921,
								2931
							]
						],
						"symlist":
						[
							"Exceptions"
						]
					},
					"AQAAAAAAAAAAAAAACgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					63,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAKAAAARXhjZXB0aW9ucwAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					64,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					65,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					66,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					67,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					68,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					69,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								243,
								247
							],
							[
								270,
								275
							],
							[
								316,
								320
							],
							[
								342,
								347
							],
							[
								386,
								390
							],
							[
								411,
								416
							],
							[
								429,
								453
							],
							[
								593,
								630
							],
							[
								661,
								667
							],
							[
								733,
								746
							],
							[
								777,
								809
							],
							[
								942,
								973
							],
							[
								1050,
								1063
							],
							[
								1283,
								1291
							],
							[
								1376,
								1404
							],
							[
								1583,
								1610
							],
							[
								1799,
								1826
							],
							[
								2074,
								2121
							],
							[
								2688,
								2719
							],
							[
								2781,
								2811
							],
							[
								2866,
								2895
							],
							[
								3237,
								3269
							],
							[
								3526,
								3557
							],
							[
								3632,
								3638
							],
							[
								4156,
								4245
							],
							[
								4401,
								4436
							],
							[
								4968,
								5021
							],
							[
								5439,
								5475
							],
							[
								5543,
								5570
							],
							[
								5623,
								5664
							],
							[
								5690,
								5699
							],
							[
								5741,
								5766
							],
							[
								5888,
								5898
							],
							[
								6014,
								6019
							],
							[
								6119,
								6129
							],
							[
								6206,
								6221
							],
							[
								6292,
								6306
							],
							[
								6423,
								6455
							],
							[
								6458,
								6478
							],
							[
								6717,
								6730
							],
							[
								7264,
								7311
							],
							[
								7716,
								7747
							],
							[
								8098,
								8141
							],
							[
								8202,
								8208
							],
							[
								8438,
								8468
							],
							[
								8500,
								8518
							],
							[
								8650,
								8656
							],
							[
								8778,
								8819
							],
							[
								9648,
								9685
							],
							[
								9900,
								9916
							],
							[
								10803,
								10811
							],
							[
								10899,
								10907
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function WriteXML(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function ReadFd(fd, bufferSize)",
							" function* FdRead()",
							"(acc, buf) =>",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AQAAAAAAAAAAAAAA6QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					70,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
							[
								77,
								81
							],
							[
								876,
								883
							],
							[
								2179,
								2183
							],
							[
								2423,
								2427
							],
							[
								2540,
								2548
							],
							[
								2706,
								2710
							]
						],
						"symlist":
						[
							"http",
							"are met",
							"main",
							"step",
							"nodeTest",
							"expr"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAADAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					71,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								243,
								247
							],
							[
								270,
								275
							],
							[
								316,
								320
							],
							[
								342,
								347
							],
							[
								386,
								390
							],
							[
								411,
								416
							],
							[
								429,
								453
							],
							[
								593,
								630
							],
							[
								661,
								667
							],
							[
								733,
								746
							],
							[
								777,
								809
							],
							[
								942,
								973
							],
							[
								1050,
								1063
							],
							[
								1283,
								1291
							],
							[
								1376,
								1404
							],
							[
								1583,
								1610
							],
							[
								1799,
								1826
							],
							[
								2074,
								2121
							],
							[
								2688,
								2719
							],
							[
								2781,
								2811
							],
							[
								2866,
								2895
							],
							[
								3237,
								3269
							],
							[
								3526,
								3557
							],
							[
								3632,
								3638
							],
							[
								4156,
								4245
							],
							[
								4401,
								4436
							],
							[
								4968,
								5021
							],
							[
								5439,
								5475
							],
							[
								5543,
								5570
							],
							[
								5623,
								5664
							],
							[
								5690,
								5699
							],
							[
								5741,
								5766
							],
							[
								5888,
								5898
							],
							[
								6014,
								6019
							],
							[
								6119,
								6129
							],
							[
								6206,
								6221
							],
							[
								6292,
								6306
							],
							[
								6423,
								6455
							],
							[
								6458,
								6478
							],
							[
								6717,
								6730
							],
							[
								7264,
								7311
							],
							[
								7716,
								7747
							],
							[
								8098,
								8141
							],
							[
								8202,
								8208
							],
							[
								8438,
								8468
							],
							[
								8500,
								8518
							],
							[
								8650,
								8656
							],
							[
								8778,
								8819
							],
							[
								9648,
								9685
							],
							[
								9900,
								9916
							],
							[
								10803,
								10811
							],
							[
								10899,
								10907
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function WriteXML(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function ReadFd(fd, bufferSize)",
							" function* FdRead()",
							"(acc, buf) =>",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAICBodHRwCiAgYXJlIG1ldAogIG1haW4KICBzdGVwCiAgbm9kZVRlc3QKICBleHByAAAAAAAAAADpAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					72,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/css3.g4",
						"symkeys":
						[
							[
								2921,
								2931
							]
						],
						"symlist":
						[
							"Exceptions"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAAAoAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					73,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								243,
								247
							],
							[
								270,
								275
							],
							[
								316,
								320
							],
							[
								342,
								347
							],
							[
								386,
								390
							],
							[
								411,
								416
							],
							[
								429,
								453
							],
							[
								593,
								630
							],
							[
								661,
								667
							],
							[
								733,
								746
							],
							[
								777,
								809
							],
							[
								942,
								973
							],
							[
								1050,
								1063
							],
							[
								1283,
								1291
							],
							[
								1376,
								1404
							],
							[
								1583,
								1610
							],
							[
								1799,
								1826
							],
							[
								2074,
								2121
							],
							[
								2688,
								2719
							],
							[
								2781,
								2811
							],
							[
								2866,
								2895
							],
							[
								3237,
								3269
							],
							[
								3526,
								3557
							],
							[
								3632,
								3638
							],
							[
								4156,
								4245
							],
							[
								4401,
								4436
							],
							[
								4968,
								5021
							],
							[
								5439,
								5475
							],
							[
								5543,
								5570
							],
							[
								5623,
								5664
							],
							[
								5690,
								5699
							],
							[
								5741,
								5766
							],
							[
								5888,
								5898
							],
							[
								6014,
								6019
							],
							[
								6119,
								6129
							],
							[
								6206,
								6221
							],
							[
								6292,
								6306
							],
							[
								6423,
								6455
							],
							[
								6458,
								6478
							],
							[
								6717,
								6730
							],
							[
								7264,
								7311
							],
							[
								7716,
								7747
							],
							[
								8098,
								8141
							],
							[
								8202,
								8208
							],
							[
								8438,
								8468
							],
							[
								8500,
								8518
							],
							[
								8650,
								8656
							],
							[
								8778,
								8819
							],
							[
								9648,
								9685
							],
							[
								9900,
								9916
							],
							[
								10803,
								10811
							],
							[
								10899,
								10907
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function WriteXML(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function ReadFd(fd, bufferSize)",
							" function* FdRead()",
							"(acc, buf) =>",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAKAAAARXhjZXB0aW9ucwAAAAAAAAAA6QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					3,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								243,
								247
							],
							[
								270,
								275
							],
							[
								316,
								320
							],
							[
								342,
								347
							],
							[
								386,
								390
							],
							[
								411,
								416
							],
							[
								429,
								453
							],
							[
								593,
								630
							],
							[
								661,
								667
							],
							[
								733,
								746
							],
							[
								777,
								809
							],
							[
								942,
								973
							],
							[
								1050,
								1063
							],
							[
								1283,
								1291
							],
							[
								1376,
								1404
							],
							[
								1583,
								1610
							],
							[
								1799,
								1826
							],
							[
								2074,
								2121
							],
							[
								2688,
								2719
							],
							[
								2781,
								2811
							],
							[
								2866,
								2895
							],
							[
								3237,
								3269
							],
							[
								3526,
								3557
							],
							[
								3632,
								3638
							],
							[
								4156,
								4245
							],
							[
								4401,
								4436
							],
							[
								4968,
								5021
							],
							[
								5439,
								5475
							],
							[
								5543,
								5570
							],
							[
								5623,
								5664
							],
							[
								5690,
								5699
							],
							[
								5741,
								5766
							],
							[
								5888,
								5898
							],
							[
								6014,
								6019
							],
							[
								6119,
								6129
							],
							[
								6206,
								6221
							],
							[
								6292,
								6306
							],
							[
								6423,
								6455
							],
							[
								6458,
								6478
							],
							[
								6717,
								6730
							],
							[
								7264,
								7311
							],
							[
								7716,
								7747
							],
							[
								8098,
								8141
							],
							[
								8202,
								8208
							],
							[
								8438,
								8468
							],
							[
								8500,
								8518
							],
							[
								8650,
								8656
							],
							[
								8778,
								8819
							],
							[
								9484,
								9490
							],
							[
								9644,
								9681
							],
							[
								9896,
								9912
							],
							[
								10799,
								10807
							],
							[
								10895,
								10903
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function WriteXML(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function ReadFd(fd, bufferSize)",
							" function* FdRead()",
							"(acc, buf) =>",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							"wait()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADpAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAAPIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCiAgd2FpdCgpCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAAPIDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZAwAAAAAAANkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCldyaXRlWE1MKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpSZWFkRmQoZmQsIGJ1ZmZlclNpemUpCkZkUmVhZCgpCihhY2MsIGJ1ZikgPT4KRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKUmVhZENhbGxiYWNrKGZkLCBmbiA9IGRhdGEgPT4ge30pCiAgKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKICBmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgpTcGF3bihmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pCiAgd2FpdCgpCkZldGNoVVJMKHVybCwgb3B0aW9ucyA9IHt9KQooYWNjLCBbaywgdl0pID0+CiAgZGF0YSA9PgogIGRhdGEgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "io-helpers.js",
			"settings":
			{
				"buffer_size": 11204,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAB4mAAAAAAAAICYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4mAAAAAAAAHiYAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAB8mAAAAAAAAISYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8mAAAAAAAAHyYAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACAmAAAAAAAAIiYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAmAAAAAAAAICYAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "curl"
					},
					"BAAAACEmAAAAAAAAIiYAAAAAAAAAAAAAIiYAAAAAAAAjJgAAAAAAAAAAAAAjJgAAAAAAACQmAAAAAAAAAAAAACQmAAAAAAAAJSYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEmAAAAAAAAISYAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ",...rags"
					},
					"CAAAACYmAAAAAAAAJyYAAAAAAAAAAAAAJyYAAAAAAAAoJgAAAAAAAAAAAAAoJgAAAAAAACkmAAAAAAAAAAAAACkmAAAAAAAAKiYAAAAAAAAAAAAAKiYAAAAAAAArJgAAAAAAAAAAAAArJgAAAAAAACwmAAAAAAAAAAAAACwmAAAAAAAALSYAAAAAAAAAAAAALSYAAAAAAAAuJgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYmAAAAAAAAJiYAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					4,
					"left_delete",
					null,
					"BAAAAC0mAAAAAAAALSYAAAAAAAABAAAAcywmAAAAAAAALCYAAAAAAAABAAAAZysmAAAAAAAAKyYAAAAAAAABAAAAYSomAAAAAAAAKiYAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4mAAAAAAAALiYAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "args"
					},
					"BAAAAComAAAAAAAAKyYAAAAAAAAAAAAAKyYAAAAAAAAsJgAAAAAAAAAAAAAsJgAAAAAAAC0mAAAAAAAAAAAAAC0mAAAAAAAALiYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAComAAAAAAAAKiYAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAC8mAAAAAAAAMCYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8mAAAAAAAALyYAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADAmAAAAAAAAMSYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAmAAAAAAAAMCYAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"right_delete",
					null,
					"AQAAADEmAAAAAAAAMSYAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEmAAAAAAAAMSYAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADEmAAAAAAAAMyYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEmAAAAAAAAMSYAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "‚Äùlock"
					},
					"BQAAADImAAAAAAAAMyYAAAAAAAAAAAAAMyYAAAAAAAA0JgAAAAAAAAAAAAA0JgAAAAAAADUmAAAAAAAAAAAAADUmAAAAAAAANiYAAAAAAAAAAAAANiYAAAAAAAA3JgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADImAAAAAAAAMiYAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					5,
					"left_delete",
					null,
					"BQAAADYmAAAAAAAANiYAAAAAAAABAAAAazUmAAAAAAAANSYAAAAAAAABAAAAYzQmAAAAAAAANCYAAAAAAAABAAAAbzMmAAAAAAAAMyYAAAAAAAABAAAAbDImAAAAAAAAMiYAAAAAAAADAAAA4oCd",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcmAAAAAAAANyYAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " block:"
					},
					"BwAAADImAAAAAAAAMyYAAAAAAAAAAAAAMyYAAAAAAAA0JgAAAAAAAAAAAAA0JgAAAAAAADUmAAAAAAAAAAAAADUmAAAAAAAANiYAAAAAAAAAAAAANiYAAAAAAAA3JgAAAAAAAAAAAAA3JgAAAAAAADgmAAAAAAAAAAAAADgmAAAAAAAAOSYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADImAAAAAAAAMiYAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " false,"
					},
					"BwAAADkmAAAAAAAAOiYAAAAAAAAAAAAAOiYAAAAAAAA7JgAAAAAAAAAAAAA7JgAAAAAAADwmAAAAAAAAAAAAADwmAAAAAAAAPSYAAAAAAAAAAAAAPSYAAAAAAAA+JgAAAAAAAAAAAAA+JgAAAAAAAD8mAAAAAAAAAAAAAD8mAAAAAAAAQCYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkmAAAAAAAAOSYAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " stdio"
					},
					"BgAAAEAmAAAAAAAAQSYAAAAAAAAAAAAAQSYAAAAAAABCJgAAAAAAAAAAAABCJgAAAAAAAEMmAAAAAAAAAAAAAEMmAAAAAAAARCYAAAAAAAAAAAAARCYAAAAAAABFJgAAAAAAAAAAAABFJgAAAAAAAEYmAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAmAAAAAAAAQCYAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					2,
					"left_delete",
					null,
					"AgAAAEUmAAAAAAAARSYAAAAAAAABAAAAb0QmAAAAAAAARCYAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYmAAAAAAAARiYAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "out:"
					},
					"BAAAAEQmAAAAAAAARSYAAAAAAAAAAAAARSYAAAAAAABGJgAAAAAAAAAAAABGJgAAAAAAAEcmAAAAAAAAAAAAAEcmAAAAAAAASCYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQmAAAAAAAARCYAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgmAAAAAAAASSYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgmAAAAAAAASCYAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAwmAAAAAAAADSYAAAAAAAAAAAAADSYAAAAAAAAOJgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwmAAAAAAAADCYAAAAAAAAAAAAAAICGQA"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAA0mAAAAAAAADiYAAAAAAAAAAAAADiYAAAAAAAAPJgAAAAAAAAAAAAAPJgAAAAAAABAmAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0mAAAAAAAADSYAAAAAAAAAAAAAAAAAAA"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABAmAAAAAAAAESYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAmAAAAAAAAECYAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABEmAAAAAAAAEyYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEmAAAAAAAAESYAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"left_delete",
					null,
					"AQAAAA0mAAAAAAAADSYAAAAAAAAHAAAAbGV0IFtdCg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0mAAAAAAAAFCYAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n\nexport"
					},
					"CAAAAEIiAAAAAAAAQyIAAAAAAAAAAAAAQyIAAAAAAABEIgAAAAAAAAAAAABEIgAAAAAAAEUiAAAAAAAAAAAAAEUiAAAAAAAARiIAAAAAAAAAAAAARiIAAAAAAABHIgAAAAAAAAAAAABHIgAAAAAAAEgiAAAAAAAAAAAAAEgiAAAAAAAASSIAAAAAAAAAAAAASSIAAAAAAABKIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIiAAAAAAAAQiIAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " function"
					},
					"CQAAAEoiAAAAAAAASyIAAAAAAAAAAAAASyIAAAAAAABMIgAAAAAAAAAAAABMIgAAAAAAAE0iAAAAAAAAAAAAAE0iAAAAAAAATiIAAAAAAAAAAAAATiIAAAAAAABPIgAAAAAAAAAAAABPIgAAAAAAAFAiAAAAAAAAAAAAAFAiAAAAAAAAUSIAAAAAAAAAAAAAUSIAAAAAAABSIgAAAAAAAAAAAABSIgAAAAAAAFMiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoiAAAAAAAASiIAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " Spawn"
					},
					"BgAAAFMiAAAAAAAAVCIAAAAAAAAAAAAAVCIAAAAAAABVIgAAAAAAAAAAAABVIgAAAAAAAFYiAAAAAAAAAAAAAFYiAAAAAAAAVyIAAAAAAAAAAAAAVyIAAAAAAABYIgAAAAAAAAAAAABYIgAAAAAAAFkiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMiAAAAAAAAUyIAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFkiAAAAAAAAWyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkiAAAAAAAAWSIAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"cut",
					null,
					"AQAAACcmAAAAAAAAJyYAAAAAAAA+AAAAbGV0IHBpZCA9IG9zLmV4ZWMoWydjdXJsJywuLi5hcmdzXSwgeyBibG9jazogZmFsc2UsIHN0ZG91dDogfQo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcmAAAAAAAAZSYAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "file,"
					},
					"BQAAAFoiAAAAAAAAWyIAAAAAAAAAAAAAWyIAAAAAAABcIgAAAAAAAAAAAABcIgAAAAAAAF0iAAAAAAAAAAAAAF0iAAAAAAAAXiIAAAAAAAAAAAAAXiIAAAAAAABfIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoiAAAAAAAAWiIAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " ...args"
					},
					"CAAAAF8iAAAAAAAAYCIAAAAAAAAAAAAAYCIAAAAAAABhIgAAAAAAAAAAAABhIgAAAAAAAGIiAAAAAAAAAAAAAGIiAAAAAAAAYyIAAAAAAAAAAAAAYyIAAAAAAABkIgAAAAAAAAAAAABkIgAAAAAAAGUiAAAAAAAAAAAAAGUiAAAAAAAAZiIAAAAAAAAAAAAAZiIAAAAAAABnIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8iAAAAAAAAXyIAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGgiAAAAAAAAaSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgiAAAAAAAAaCIAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGkiAAAAAAAAayIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkiAAAAAAAAaSIAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAGoiAAAAAAAAayIAAAAAAAAAAAAAayIAAAAAAABsIgAAAAAAAAAAAABrIgAAAAAAAG0iAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoiAAAAAAAAaiIAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"right_delete",
					null,
					"AgAAAFoiAAAAAAAAWiIAAAAAAAAJAAAAZmlsZSwgLi4uYiIAAAAAAABiIgAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoiAAAAAAAAYyIAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "file,"
					},
					"BQAAAFoiAAAAAAAAWyIAAAAAAAAAAAAAWyIAAAAAAABcIgAAAAAAAAAAAABcIgAAAAAAAF0iAAAAAAAAAAAAAF0iAAAAAAAAXiIAAAAAAAAAAAAAXiIAAAAAAABfIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoiAAAAAAAAWiIAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8iAAAAAAAAYCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8iAAAAAAAAXyIAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGQiAAAAAAAAZSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQiAAAAAAAAZCIAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " options"
					},
					"CAAAAGUiAAAAAAAAZiIAAAAAAAAAAAAAZiIAAAAAAABnIgAAAAAAAAAAAABnIgAAAAAAAGgiAAAAAAAAAAAAAGgiAAAAAAAAaSIAAAAAAAAAAAAAaSIAAAAAAABqIgAAAAAAAAAAAABqIgAAAAAAAGsiAAAAAAAAAAAAAGsiAAAAAAAAbCIAAAAAAAAAAAAAbCIAAAAAAABtIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUiAAAAAAAAZSIAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAG4iAAAAAAAAbyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4iAAAAAAAAbiIAAAAAAAAAAAAAAADwvw"
				],
				[
					95,
					2,
					"left_delete",
					null,
					"AgAAAG4iAAAAAAAAbiIAAAAAAAABAAAAPW0iAAAAAAAAbSIAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8iAAAAAAAAbyIAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAG0iAAAAAAAAbiIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0iAAAAAAAAbSIAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAG4iAAAAAAAAcCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4iAAAAAAAAbiIAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": ")="
					},
					"AgAAAHAiAAAAAAAAcSIAAAAAAAAAAAAAcSIAAAAAAAByIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAiAAAAAAAAcCIAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"left_delete",
					null,
					"AQAAAHEiAAAAAAAAcSIAAAAAAAABAAAAPQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIiAAAAAAAAciIAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"paste",
					null,
					"AQAAAHQiAAAAAAAAsiIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQiAAAAAAAAdCIAAAAAAAAAAAAAAOCAQA"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAHQiAAAAAAAAdSIAAAAAAAAAAAAAdSIAAAAAAAB2IgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQiAAAAAAAAdCIAAAAAAAAAAAAAAAAAAA"
				],
				[
					107,
					6,
					"right_delete",
					null,
					"BgAAAIkiAAAAAAAAiSIAAAAAAAABAAAAJ4kiAAAAAAAAiSIAAAAAAAABAAAAY4kiAAAAAAAAiSIAAAAAAAABAAAAdYkiAAAAAAAAiSIAAAAAAAABAAAAcokiAAAAAAAAiSIAAAAAAAABAAAAbIkiAAAAAAAAiSIAAAAAAAABAAAAJw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkiAAAAAAAAiSIAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAAIkiAAAAAAAAiiIAAAAAAAAAAAAAiiIAAAAAAACLIgAAAAAAAAAAAACLIgAAAAAAAIwiAAAAAAAAAAAAAIwiAAAAAAAAjSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkiAAAAAAAAiSIAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "\nc"
					},
					"AwAAAHMiAAAAAAAAdCIAAAAAAAAAAAAAdCIAAAAAAAB2IgAAAAAAAAAAAAB2IgAAAAAAAHciAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMiAAAAAAAAcyIAAAAAAAD////////vfw"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "onst"
					},
					"BAAAAHciAAAAAAAAeCIAAAAAAAAAAAAAeCIAAAAAAAB5IgAAAAAAAAAAAAB5IgAAAAAAAHoiAAAAAAAAAAAAAHoiAAAAAAAAeyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHciAAAAAAAAdyIAAAAAAAAAAAAAAADwvw"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHsiAAAAAAAAfCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsiAAAAAAAAeyIAAAAAAAAAAAAAAADwvw"
				],
				[
					116,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHwiAAAAAAAAfiIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwiAAAAAAAAfCIAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "block="
					},
					"BgAAAH0iAAAAAAAAfiIAAAAAAAAAAAAAfiIAAAAAAAB/IgAAAAAAAAAAAAB/IgAAAAAAAIAiAAAAAAAAAAAAAIAiAAAAAAAAgSIAAAAAAAAAAAAAgSIAAAAAAACCIgAAAAAAAAAAAACCIgAAAAAAAIMiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0iAAAAAAAAfSIAAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"left_delete",
					null,
					"AQAAAIIiAAAAAAAAgiIAAAAAAAABAAAAPQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMiAAAAAAAAgyIAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIIiAAAAAAAAgyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIiAAAAAAAAgiIAAAAAAAAAAAAAAADwvw"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": " true,"
					},
					"BgAAAIMiAAAAAAAAhCIAAAAAAAAAAAAAhCIAAAAAAACFIgAAAAAAAAAAAACFIgAAAAAAAIYiAAAAAAAAAAAAAIYiAAAAAAAAhyIAAAAAAAAAAAAAhyIAAAAAAACIIgAAAAAAAAAAAACIIgAAAAAAAIkiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMiAAAAAAAAgyIAAAAAAAAAAAAAAADwvw"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIkiAAAAAAAAiiIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkiAAAAAAAAiSIAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "udsre"
					},
					"BQAAAIoiAAAAAAAAiyIAAAAAAAAAAAAAiyIAAAAAAACMIgAAAAAAAAAAAACMIgAAAAAAAI0iAAAAAAAAAAAAAI0iAAAAAAAAjiIAAAAAAAAAAAAAjiIAAAAAAACPIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoiAAAAAAAAiiIAAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					3,
					"left_delete",
					null,
					"AwAAAI4iAAAAAAAAjiIAAAAAAAABAAAAZY0iAAAAAAAAjSIAAAAAAAABAAAAcowiAAAAAAAAjCIAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8iAAAAAAAAjyIAAAAAAAAAAAAAAADwvw"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "se"
					},
					"AgAAAIwiAAAAAAAAjSIAAAAAAAAAAAAAjSIAAAAAAACOIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwiAAAAAAAAjCIAAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					3,
					"left_delete",
					null,
					"AwAAAI0iAAAAAAAAjSIAAAAAAAABAAAAZYwiAAAAAAAAjCIAAAAAAAABAAAAc4siAAAAAAAAiyIAAAAAAAABAAAAZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4iAAAAAAAAjiIAAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "sePath:true"
					},
					"CwAAAIsiAAAAAAAAjCIAAAAAAAAAAAAAjCIAAAAAAACNIgAAAAAAAAAAAACNIgAAAAAAAI4iAAAAAAAAAAAAAI4iAAAAAAAAjyIAAAAAAAAAAAAAjyIAAAAAAACQIgAAAAAAAAAAAACQIgAAAAAAAJEiAAAAAAAAAAAAAJEiAAAAAAAAkiIAAAAAAAAAAAAAkiIAAAAAAACTIgAAAAAAAAAAAACTIgAAAAAAAJQiAAAAAAAAAAAAAJQiAAAAAAAAlSIAAAAAAAAAAAAAlSIAAAAAAACWIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsiAAAAAAAAiyIAAAAAAAAAAAAAAADwvw"
				],
				[
					130,
					1,
					"left_delete",
					null,
					"AQAAAIIiAAAAAAAAgiIAAAAAAAABAAAAOg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMiAAAAAAAAgyIAAAAAAAAAAAAAAADwvw"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": ")="
					},
					"AgAAAIIiAAAAAAAAgyIAAAAAAAAAAAAAgyIAAAAAAACEIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIiAAAAAAAAgiIAAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					2,
					"left_delete",
					null,
					"AgAAAIMiAAAAAAAAgyIAAAAAAAABAAAAPYIiAAAAAAAAgiIAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQiAAAAAAAAhCIAAAAAAAAAAAAAAADwvw"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIIiAAAAAAAAgyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIiAAAAAAAAgiIAAAAAAAAAAAAAAADwvw"
				],
				[
					136,
					1,
					"left_delete",
					null,
					"AQAAAJEiAAAAAAAAkSIAAAAAAAABAAAAOg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIiAAAAAAAAkiIAAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "?="
					},
					"AgAAAJEiAAAAAAAAkiIAAAAAAAAAAAAAkiIAAAAAAACTIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEiAAAAAAAAkSIAAAAAAAAAAAAAAADwvw"
				],
				[
					138,
					2,
					"left_delete",
					null,
					"AgAAAJIiAAAAAAAAkiIAAAAAAAABAAAAPZEiAAAAAAAAkSIAAAAAAAABAAAAPw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMiAAAAAAAAkyIAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAJEiAAAAAAAAkiIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEiAAAAAAAAkSIAAAAAAAAAAAAAAADwvw"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJYiAAAAAAAAlyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYiAAAAAAAAliIAAAAAAAAAAAAAAADwvw"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJciAAAAAAAAmCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJciAAAAAAAAlyIAAAAAAAAAAAAAAADwvw"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "cwd,"
					},
					"BAAAAJgiAAAAAAAAmSIAAAAAAAAAAAAAmSIAAAAAAACaIgAAAAAAAAAAAACaIgAAAAAAAJsiAAAAAAAAAAAAAJsiAAAAAAAAnCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJgiAAAAAAAAmCIAAAAAAAAAAAAAAADwvw"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwiAAAAAAAAnSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwiAAAAAAAAnCIAAAAAAAAAAAAAAADwvw"
				],
				[
					147,
					1,
					"left_delete",
					null,
					"AQAAAJoiAAAAAAAAmiIAAAAAAAABAAAAZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsiAAAAAAAAmyIAAAAAAAAAAAAAAADwvw"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAJoiAAAAAAAAmyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoiAAAAAAAAmiIAAAAAAAAAAAAAAADwvw"
				],
				[
					149,
					1,
					"left_delete",
					null,
					"AQAAAJoiAAAAAAAAmiIAAAAAAAABAAAAdw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsiAAAAAAAAmyIAAAAAAAAAAAAAAADwvw"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAJoiAAAAAAAAmyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoiAAAAAAAAmiIAAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "=undefined"
					},
					"CgAAAJsiAAAAAAAAnCIAAAAAAAAAAAAAnCIAAAAAAACdIgAAAAAAAAAAAACdIgAAAAAAAJ4iAAAAAAAAAAAAAJ4iAAAAAAAAnyIAAAAAAAAAAAAAnyIAAAAAAACgIgAAAAAAAAAAAACgIgAAAAAAAKEiAAAAAAAAAAAAAKEiAAAAAAAAoiIAAAAAAAAAAAAAoiIAAAAAAACjIgAAAAAAAAAAAACjIgAAAAAAAKQiAAAAAAAAAAAAAKQiAAAAAAAApSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsiAAAAAAAAmyIAAAAAAAAAAAAAAADwvw"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKciAAAAAAAAqCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKciAAAAAAAApyIAAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"left_delete",
					null,
					"AQAAAKciAAAAAAAApyIAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKgiAAAAAAAAqCIAAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "stdio:"
					},
					"BgAAAKciAAAAAAAAqCIAAAAAAAAAAAAAqCIAAAAAAACpIgAAAAAAAAAAAACpIgAAAAAAAKoiAAAAAAAAAAAAAKoiAAAAAAAAqyIAAAAAAAAAAAAAqyIAAAAAAACsIgAAAAAAAAAAAACsIgAAAAAAAK0iAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKciAAAAAAAApyIAAAAAAAAAAAAAAADwvw"
				],
				[
					158,
					1,
					"left_delete",
					null,
					"AQAAAKwiAAAAAAAArCIAAAAAAAABAAAAOg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0iAAAAAAAArSIAAAAAAAAAAAAAAADwvw"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAKwiAAAAAAAArSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwiAAAAAAAArCIAAAAAAAAAAAAAAADwvw"
				],
				[
					160,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAK0iAAAAAAAAryIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0iAAAAAAAArSIAAAAAAAAAAAAAAADwvw"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "90"
					},
					"AgAAAK4iAAAAAAAAryIAAAAAAAAAAAAAryIAAAAAAACwIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4iAAAAAAAAriIAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					2,
					"left_delete",
					null,
					"AgAAAK8iAAAAAAAAryIAAAAAAAABAAAAMK4iAAAAAAAAriIAAAAAAAABAAAAOQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAiAAAAAAAAsCIAAAAAAAAAAAAAAADwvw"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "0,"
					},
					"AgAAAK4iAAAAAAAAryIAAAAAAAAAAAAAryIAAAAAAACwIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4iAAAAAAAAriIAAAAAAAAAAAAAAADwvw"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "2,3"
					},
					"AwAAALAiAAAAAAAAsSIAAAAAAAAAAAAAsSIAAAAAAACyIgAAAAAAAAAAAACyIgAAAAAAALMiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAiAAAAAAAAsCIAAAAAAAAAAAAAAADwvw"
				],
				[
					166,
					4,
					"left_delete",
					null,
					"BAAAALMiAAAAAAAAsyIAAAAAAAABAAAAXbIiAAAAAAAAsiIAAAAAAAABAAAAM7EiAAAAAAAAsSIAAAAAAAABAAAALLAiAAAAAAAAsCIAAAAAAAABAAAAMg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQiAAAAAAAAtCIAAAAAAAAAAAAAAADwvw"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "1,2]"
					},
					"BAAAALAiAAAAAAAAsSIAAAAAAAAAAAAAsSIAAAAAAACyIgAAAAAAAAAAAACyIgAAAAAAALMiAAAAAAAAAAAAALMiAAAAAAAAtCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAiAAAAAAAAsCIAAAAAAAAAAAAAAADwvw"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALQiAAAAAAAAtSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQiAAAAAAAAtCIAAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": " env=undef"
					},
					"CgAAALUiAAAAAAAAtiIAAAAAAAAAAAAAtiIAAAAAAAC3IgAAAAAAAAAAAAC3IgAAAAAAALgiAAAAAAAAAAAAALgiAAAAAAAAuSIAAAAAAAAAAAAAuSIAAAAAAAC6IgAAAAAAAAAAAAC6IgAAAAAAALsiAAAAAAAAAAAAALsiAAAAAAAAvCIAAAAAAAAAAAAAvCIAAAAAAAC9IgAAAAAAAAAAAAC9IgAAAAAAAL4iAAAAAAAAAAAAAL4iAAAAAAAAvyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUiAAAAAAAAtSIAAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "ined,"
					},
					"BQAAAL8iAAAAAAAAwCIAAAAAAAAAAAAAwCIAAAAAAADBIgAAAAAAAAAAAADBIgAAAAAAAMIiAAAAAAAAAAAAAMIiAAAAAAAAwyIAAAAAAAAAAAAAwyIAAAAAAADEIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8iAAAAAAAAvyIAAAAAAAAAAAAAAADwvw"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "uid="
					},
					"BAAAAMQiAAAAAAAAxSIAAAAAAAAAAAAAxSIAAAAAAADGIgAAAAAAAAAAAADGIgAAAAAAAMciAAAAAAAAAAAAAMciAAAAAAAAyCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQiAAAAAAAAxCIAAAAAAAAAAAAAAADwvw"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "undefined,gid=undef"
					},
					"EwAAAMgiAAAAAAAAySIAAAAAAAAAAAAAySIAAAAAAADKIgAAAAAAAAAAAADKIgAAAAAAAMsiAAAAAAAAAAAAAMsiAAAAAAAAzCIAAAAAAAAAAAAAzCIAAAAAAADNIgAAAAAAAAAAAADNIgAAAAAAAM4iAAAAAAAAAAAAAM4iAAAAAAAAzyIAAAAAAAAAAAAAzyIAAAAAAADQIgAAAAAAAAAAAADQIgAAAAAAANEiAAAAAAAAAAAAANEiAAAAAAAA0iIAAAAAAAAAAAAA0iIAAAAAAADTIgAAAAAAAAAAAADTIgAAAAAAANQiAAAAAAAAAAAAANQiAAAAAAAA1SIAAAAAAAAAAAAA1SIAAAAAAADWIgAAAAAAAAAAAADWIgAAAAAAANciAAAAAAAAAAAAANciAAAAAAAA2CIAAAAAAAAAAAAA2CIAAAAAAADZIgAAAAAAAAAAAADZIgAAAAAAANoiAAAAAAAAAAAAANoiAAAAAAAA2yIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgiAAAAAAAAyCIAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": "ined"
					},
					"BAAAANsiAAAAAAAA3CIAAAAAAAAAAAAA3CIAAAAAAADdIgAAAAAAAAAAAADdIgAAAAAAAN4iAAAAAAAAAAAAAN4iAAAAAAAA3yIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsiAAAAAAAA2yIAAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					2,
					"insert_snippet",
					{
						"contents": "'${0:$SELECTION}'"
					},
					"BAAAAJwiAAAAAAAAnCIAAAAAAAAJAAAAdW5kZWZpbmVknCIAAAAAAACnIgAAAAAAAAAAAACdIgAAAAAAAJ0iAAAAAAAACQAAAHVuZGVmaW5lZJ0iAAAAAAAAqCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwiAAAAAAAApSIAAAAAAAAAAAAAAADwvw"
				],
				[
					179,
					4,
					"left_delete",
					null,
					"BAAAAJ4iAAAAAAAAniIAAAAAAAAJAAAAdW5kZWZpbmVknSIAAAAAAACdIgAAAAAAAAEAAAAnnCIAAAAAAACcIgAAAAAAAAEAAAAnmyIAAAAAAACbIgAAAAAAAAEAAAA9",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4iAAAAAAAApyIAAAAAAAAAAAAAAADwvw"
				],
				[
					180,
					2,
					"right_delete",
					null,
					"AgAAAJsiAAAAAAAAmyIAAAAAAAABAAAAJ5siAAAAAAAAmyIAAAAAAAABAAAAJw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsiAAAAAAAAmyIAAAAAAAAAAAAAAADwvw"
				],
				[
					185,
					2,
					"left_delete",
					null,
					"AgAAALAiAAAAAAAAsCIAAAAAAAAJAAAAdW5kZWZpbmVkryIAAAAAAACvIgAAAAAAAAEAAAA9",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAiAAAAAAAAuSIAAAAAAAAAAAAAAADwvw"
				],
				[
					190,
					2,
					"left_delete",
					null,
					"AgAAALQiAAAAAAAAtCIAAAAAAAAJAAAAdW5kZWZpbmVksyIAAAAAAACzIgAAAAAAAAEAAAA9",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQiAAAAAAAAvSIAAAAAAAAAAAAAAADwvw"
				],
				[
					195,
					2,
					"left_delete",
					null,
					"AgAAALgiAAAAAAAAuCIAAAAAAAAJAAAAdW5kZWZpbmVktyIAAAAAAAC3IgAAAAAAAAEAAAA9",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgiAAAAAAAAwSIAAAAAAAAAAAAAAADwvw"
				],
				[
					197,
					1,
					"left_delete",
					null,
					"AQAAALciAAAAAAAAtyIAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgiAAAAAAAAuCIAAAAAAAAAAAAAAADwvw"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "}=op0tions"
					},
					"CgAAALciAAAAAAAAuCIAAAAAAAAAAAAAuCIAAAAAAAC5IgAAAAAAAAAAAAC5IgAAAAAAALoiAAAAAAAAAAAAALoiAAAAAAAAuyIAAAAAAAAAAAAAuyIAAAAAAAC8IgAAAAAAAAAAAAC8IgAAAAAAAL0iAAAAAAAAAAAAAL0iAAAAAAAAviIAAAAAAAAAAAAAviIAAAAAAAC/IgAAAAAAAAAAAAC/IgAAAAAAAMAiAAAAAAAAAAAAAMAiAAAAAAAAwSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALciAAAAAAAAtyIAAAAAAAAAAAAAAADwvw"
				],
				[
					199,
					6,
					"left_delete",
					null,
					"BgAAAMAiAAAAAAAAwCIAAAAAAAABAAAAc78iAAAAAAAAvyIAAAAAAAABAAAAbr4iAAAAAAAAviIAAAAAAAABAAAAb70iAAAAAAAAvSIAAAAAAAABAAAAabwiAAAAAAAAvCIAAAAAAAABAAAAdLsiAAAAAAAAuyIAAAAAAAABAAAAMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMEiAAAAAAAAwSIAAAAAAAAAAAAAAADwvw"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "tions;"
					},
					"BgAAALsiAAAAAAAAvCIAAAAAAAAAAAAAvCIAAAAAAAC9IgAAAAAAAAAAAAC9IgAAAAAAAL4iAAAAAAAAAAAAAL4iAAAAAAAAvyIAAAAAAAAAAAAAvyIAAAAAAADAIgAAAAAAAAAAAADAIgAAAAAAAMEiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsiAAAAAAAAuyIAAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "."
					},
					"AgAAAO0iAAAAAAAA7iIAAAAAAAAAAAAA7iIAAAAAAADuIgAAAAAAABEAAAA6IGZhbHNlLCBzdGRvdXQ6IA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0iAAAAAAAA/iIAAAAAAAAAAAAAAADwvw"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " idsre"
					},
					"BgAAAO4iAAAAAAAA7yIAAAAAAAAAAAAA7yIAAAAAAADwIgAAAAAAAAAAAADwIgAAAAAAAPEiAAAAAAAAAAAAAPEiAAAAAAAA8iIAAAAAAAAAAAAA8iIAAAAAAADzIgAAAAAAAAAAAADzIgAAAAAAAPQiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4iAAAAAAAA7iIAAAAAAAAAAAAAAADwvw"
				],
				[
					210,
					7,
					"left_delete",
					null,
					"BwAAAPMiAAAAAAAA8yIAAAAAAAABAAAAZfIiAAAAAAAA8iIAAAAAAAABAAAAcvEiAAAAAAAA8SIAAAAAAAABAAAAc/AiAAAAAAAA8CIAAAAAAAABAAAAZO8iAAAAAAAA7yIAAAAAAAABAAAAae4iAAAAAAAA7iIAAAAAAAABAAAAIO0iAAAAAAAA7SIAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQiAAAAAAAA9CIAAAAAAAAAAAAAAADwvw"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAAO0iAAAAAAAA7iIAAAAAAAAAAAAA7iIAAAAAAADvIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0iAAAAAAAA7SIAAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					1,
					"left_delete",
					null,
					"AQAAAO4iAAAAAAAA7iIAAAAAAAABAAAAbQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8iAAAAAAAA7yIAAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "usePath,"
					},
					"CAAAAO4iAAAAAAAA7yIAAAAAAAAAAAAA7yIAAAAAAADwIgAAAAAAAAAAAADwIgAAAAAAAPEiAAAAAAAAAAAAAPEiAAAAAAAA8iIAAAAAAAAAAAAA8iIAAAAAAADzIgAAAAAAAAAAAADzIgAAAAAAAPQiAAAAAAAAAAAAAPQiAAAAAAAA9SIAAAAAAAAAAAAA9SIAAAAAAAD2IgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4iAAAAAAAA7iIAAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": " cwd,stdio,"
					},
					"CwAAAPYiAAAAAAAA9yIAAAAAAAAAAAAA9yIAAAAAAAD4IgAAAAAAAAAAAAD4IgAAAAAAAPkiAAAAAAAAAAAAAPkiAAAAAAAA+iIAAAAAAAAAAAAA+iIAAAAAAAD7IgAAAAAAAAAAAAD7IgAAAAAAAPwiAAAAAAAAAAAAAPwiAAAAAAAA/SIAAAAAAAAAAAAA/SIAAAAAAAD+IgAAAAAAAAAAAAD+IgAAAAAAAP8iAAAAAAAAAAAAAP8iAAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAABIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYiAAAAAAAA9iIAAAAAAAAAAAAAAADwvw"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": " env,uid,gid"
					},
					"DAAAAAEjAAAAAAAAAiMAAAAAAAAAAAAAAiMAAAAAAAADIwAAAAAAAAAAAAADIwAAAAAAAAQjAAAAAAAAAAAAAAQjAAAAAAAABSMAAAAAAAAAAAAABSMAAAAAAAAGIwAAAAAAAAAAAAAGIwAAAAAAAAcjAAAAAAAAAAAAAAcjAAAAAAAACCMAAAAAAAAAAAAACCMAAAAAAAAJIwAAAAAAAAAAAAAJIwAAAAAAAAojAAAAAAAAAAAAAAojAAAAAAAACyMAAAAAAAAAAAAACyMAAAAAAAAMIwAAAAAAAAAAAAAMIwAAAAAAAA0jAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEjAAAAAAAAASMAAAAAAAAAAAAAAADwvw"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAA4jAAAAAAAADyMAAAAAAAAAAAAADyMAAAAAAAAQIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4jAAAAAAAADiMAAAAAAAAAAAAAAADwvw"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMEiAAAAAAAAwiIAAAAAAAAAAAAAwiIAAAAAAADEIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMEiAAAAAAAAwSIAAAAAAAAAAAAAAECNQA"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "\n\nretzur"
					},
					"DAAAABMjAAAAAAAAFCMAAAAAAAAAAAAAFCMAAAAAAAAWIwAAAAAAAAAAAADCIgAAAAAAAMIiAAAAAAAAAgAAACAgFCMAAAAAAAAVIwAAAAAAAAAAAAAVIwAAAAAAABcjAAAAAAAAAAAAABIjAAAAAAAAEiMAAAAAAAACAAAAICAVIwAAAAAAABYjAAAAAAAAAAAAABYjAAAAAAAAFyMAAAAAAAAAAAAAFyMAAAAAAAAYIwAAAAAAAAAAAAAYIwAAAAAAABkjAAAAAAAAAAAAABkjAAAAAAAAGiMAAAAAAAAAAAAAGiMAAAAAAAAbIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMjAAAAAAAAEyMAAAAAAAD////////vfw"
				],
				[
					225,
					3,
					"left_delete",
					null,
					"AwAAABojAAAAAAAAGiMAAAAAAAABAAAAchkjAAAAAAAAGSMAAAAAAAABAAAAdRgjAAAAAAAAGCMAAAAAAAABAAAAeg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsjAAAAAAAAGyMAAAAAAAAAAAAAAADwvw"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "urn"
					},
					"AwAAABgjAAAAAAAAGSMAAAAAAAAAAAAAGSMAAAAAAAAaIwAAAAAAAAAAAAAaIwAAAAAAABsjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgjAAAAAAAAGCMAAAAAAAAAAAAAAADwvw"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABsjAAAAAAAAHCMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsjAAAAAAAAGyMAAAAAAAAAAAAAAADwvw"
				],
				[
					228,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABwjAAAAAAAAHiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwjAAAAAAAAHCMAAAAAAAAAAAAAAADwvw"
				],
				[
					229,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAB0jAAAAAAAAHiMAAAAAAAAAAAAAHiMAAAAAAAAgIwAAAAAAAAAAAAAgIwAAAAAAACEjAAAAAAAAAAAAACEjAAAAAAAAIyMAAAAAAAAAAAAAHiMAAAAAAAAeIwAAAAAAAAIAAAAgIB4jAAAAAAAAIiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0jAAAAAAAAHSMAAAAAAAAAAAAAAADwvw"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "pid;"
					},
					"BAAAACIjAAAAAAAAIyMAAAAAAAAAAAAAIyMAAAAAAAAkIwAAAAAAAAAAAAAkIwAAAAAAACUjAAAAAAAAAAAAACUjAAAAAAAAJiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIjAAAAAAAAIiMAAAAAAAAAAAAAAADwvw"
				],
				[
					231,
					1,
					"left_delete",
					null,
					"AQAAACUjAAAAAAAAJSMAAAAAAAABAAAAOw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYjAAAAAAAAJiMAAAAAAAAAAAAAAADwvw"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACkjAAAAAAAAKiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkjAAAAAAAAKSMAAAAAAAAAAAAAAABVQA"
				],
				[
					235,
					1,
					"left_delete",
					null,
					"AQAAACojAAAAAAAAKiMAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsjAAAAAAAAKyMAAAAAAAAAAAAAAABIQA"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACUjAAAAAAAAJiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUjAAAAAAAAJSMAAAAAAAD////////vfw"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": "\nwait"
					},
					"BgAAACYjAAAAAAAAJyMAAAAAAAAAAAAAJyMAAAAAAAArIwAAAAAAAAAAAAArIwAAAAAAACwjAAAAAAAAAAAAACwjAAAAAAAALSMAAAAAAAAAAAAALSMAAAAAAAAuIwAAAAAAAAAAAAAuIwAAAAAAAC8jAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYjAAAAAAAAJiMAAAAAAAAAAAAAAADwvw"
				],
				[
					240,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC8jAAAAAAAAMSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8jAAAAAAAALyMAAAAAAAAAAAAAAADwvw"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADEjAAAAAAAAMiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEjAAAAAAAAMSMAAAAAAAAAAAAAAADwvw"
				],
				[
					243,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADIjAAAAAAAANCMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIjAAAAAAAAMiMAAAAAAAAAAAAAAADwvw"
				],
				[
					244,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAADMjAAAAAAAANCMAAAAAAAAAAAAANCMAAAAAAAA4IwAAAAAAAAAAAAA4IwAAAAAAADkjAAAAAAAAAAAAADkjAAAAAAAAPSMAAAAAAAAAAAAANCMAAAAAAAA0IwAAAAAAAAQAAAAgICAgNCMAAAAAAAA6IwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMjAAAAAAAAMyMAAAAAAAAAAAAAAADwvw"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAADojAAAAAAAAOyMAAAAAAAAAAAAAOyMAAAAAAAA8IwAAAAAAAAAAAAA8IwAAAAAAAD0jAAAAAAAAAAAAAD0jAAAAAAAAPiMAAAAAAAAAAAAAPiMAAAAAAAA/IwAAAAAAAAAAAAA/IwAAAAAAAEAjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADojAAAAAAAAOiMAAAAAAAAAAAAAAADwvw"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": " os.waitpid"
					},
					"CwAAAEAjAAAAAAAAQSMAAAAAAAAAAAAAQSMAAAAAAABCIwAAAAAAAAAAAABCIwAAAAAAAEMjAAAAAAAAAAAAAEMjAAAAAAAARCMAAAAAAAAAAAAARCMAAAAAAABFIwAAAAAAAAAAAABFIwAAAAAAAEYjAAAAAAAAAAAAAEYjAAAAAAAARyMAAAAAAAAAAAAARyMAAAAAAABIIwAAAAAAAAAAAABIIwAAAAAAAEkjAAAAAAAAAAAAAEkjAAAAAAAASiMAAAAAAAAAAAAASiMAAAAAAABLIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAjAAAAAAAAQCMAAAAAAAAAAAAAAADwvw"
				],
				[
					251,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEsjAAAAAAAATSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsjAAAAAAAASyMAAAAAAAAAAAAAAADwvw"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "thixs."
					},
					"BgAAAEwjAAAAAAAATSMAAAAAAAAAAAAATSMAAAAAAABOIwAAAAAAAAAAAABOIwAAAAAAAE8jAAAAAAAAAAAAAE8jAAAAAAAAUCMAAAAAAAAAAAAAUCMAAAAAAABRIwAAAAAAAAAAAABRIwAAAAAAAFIjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwjAAAAAAAATCMAAAAAAAAAAAAAAADwvw"
				],
				[
					253,
					3,
					"left_delete",
					null,
					"AwAAAFEjAAAAAAAAUSMAAAAAAAABAAAALlAjAAAAAAAAUCMAAAAAAAABAAAAc08jAAAAAAAATyMAAAAAAAABAAAAeA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIjAAAAAAAAUiMAAAAAAAAAAAAAAADwvw"
				],
				[
					254,
					1,
					"insert",
					{
						"characters": "s.pid,"
					},
					"BgAAAE8jAAAAAAAAUCMAAAAAAAAAAAAAUCMAAAAAAABRIwAAAAAAAAAAAABRIwAAAAAAAFIjAAAAAAAAAAAAAFIjAAAAAAAAUyMAAAAAAAAAAAAAUyMAAAAAAABUIwAAAAAAAAAAAABUIwAAAAAAAFUjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE8jAAAAAAAATyMAAAAAAAAAAAAAAADwvw"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": " os.W"
					},
					"BQAAAFUjAAAAAAAAViMAAAAAAAAAAAAAViMAAAAAAABXIwAAAAAAAAAAAABXIwAAAAAAAFgjAAAAAAAAAAAAAFgjAAAAAAAAWSMAAAAAAAAAAAAAWSMAAAAAAABaIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUjAAAAAAAAVSMAAAAAAAAAAAAAAADwvw"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "O"
					},
					"AQAAAFojAAAAAAAAWyMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFojAAAAAAAAWiMAAAAAAAAAAAAAAADwvw"
				],
				[
					257,
					1,
					"left_delete",
					null,
					"AQAAAFojAAAAAAAAWiMAAAAAAAABAAAATw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsjAAAAAAAAWyMAAAAAAAAAAAAAAADwvw"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": "NOHANG"
					},
					"BgAAAFojAAAAAAAAWyMAAAAAAAAAAAAAWyMAAAAAAABcIwAAAAAAAAAAAABcIwAAAAAAAF0jAAAAAAAAAAAAAF0jAAAAAAAAXiMAAAAAAAAAAAAAXiMAAAAAAABfIwAAAAAAAAAAAABfIwAAAAAAAGAjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFojAAAAAAAAWiMAAAAAAAAAAAAAAADwvw"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGEjAAAAAAAAYiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEjAAAAAAAAYSMAAAAAAAAAAAAAAADwvw"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BAAAADojAAAAAAAAOyMAAAAAAAAAAAAAOyMAAAAAAAA7IwAAAAAAAAYAAAByZXR1cm47IwAAAAAAADwjAAAAAAAAAAAAADwjAAAAAAAAPSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADojAAAAAAAAQCMAAAAAAAAAAAAAAADwvw"
				],
				[
					272,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAD0jAAAAAAAAPyMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0jAAAAAAAAPSMAAAAAAAAAAAAAAADwvw"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": "ret,status"
					},
					"CgAAAD4jAAAAAAAAPyMAAAAAAAAAAAAAPyMAAAAAAABAIwAAAAAAAAAAAABAIwAAAAAAAEEjAAAAAAAAAAAAAEEjAAAAAAAAQiMAAAAAAAAAAAAAQiMAAAAAAABDIwAAAAAAAAAAAABDIwAAAAAAAEQjAAAAAAAAAAAAAEQjAAAAAAAARSMAAAAAAAAAAAAARSMAAAAAAABGIwAAAAAAAAAAAABGIwAAAAAAAEcjAAAAAAAAAAAAAEcjAAAAAAAASCMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4jAAAAAAAAPiMAAAAAAAAAAAAAAADwvw"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEkjAAAAAAAASiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkjAAAAAAAASSMAAAAAAAAAAAAAAADwvw"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGwjAAAAAAAAbSMAAAAAAAAAAAAAbSMAAAAAAABzIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwjAAAAAAAAbCMAAAAAAAD////////vfw"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAHMjAAAAAAAAdCMAAAAAAAAAAAAAdCMAAAAAAAB1IwAAAAAAAAAAAAB1IwAAAAAAAHYjAAAAAAAAAAAAAHYjAAAAAAAAdyMAAAAAAAAAAAAAdyMAAAAAAAB4IwAAAAAAAAAAAAB4IwAAAAAAAHkjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMjAAAAAAAAcyMAAAAAAAAAAAAAAADwvw"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": " ret;"
					},
					"BQAAAHkjAAAAAAAAeiMAAAAAAAAAAAAAeiMAAAAAAAB7IwAAAAAAAAAAAAB7IwAAAAAAAHwjAAAAAAAAAAAAAHwjAAAAAAAAfSMAAAAAAAAAAAAAfSMAAAAAAAB+IwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkjAAAAAAAAeSMAAAAAAAAAAAAAAADwvw"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAKQiAAAAAAAApSIAAAAAAAAAAAAApSIAAAAAAAClIgAAAAAAAAEAAAAw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQiAAAAAAAApSIAAAAAAAAAAAAAAADwvw"
				],
				[
					321,
					1,
					"left_delete",
					null,
					"AQAAAKQiAAAAAAAApCIAAAAAAAABAAAAMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUiAAAAAAAApSIAAAAAAAAAAAAAAADwvw"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "'inherit"
					},
					"CAAAAKQiAAAAAAAApSIAAAAAAAAAAAAApSIAAAAAAACmIgAAAAAAAAAAAACmIgAAAAAAAKciAAAAAAAAAAAAAKciAAAAAAAAqCIAAAAAAAAAAAAAqCIAAAAAAACpIgAAAAAAAAAAAACpIgAAAAAAAKoiAAAAAAAAAAAAAKoiAAAAAAAAqyIAAAAAAAAAAAAAqyIAAAAAAACsIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQiAAAAAAAApCIAAAAAAAAAAAAAAADwvw"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAKwiAAAAAAAArSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwiAAAAAAAArCIAAAAAAAAAAAAAAADwvw"
				],
				[
					325,
					1,
					"cut",
					null,
					"AQAAAKQiAAAAAAAApCIAAAAAAAAJAAAAJ2luaGVyaXQn",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0iAAAAAAAApCIAAAAAAAAAAAAAAADwvw"
				],
				[
					326,
					1,
					"paste",
					null,
					"AQAAAKQiAAAAAAAArSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQiAAAAAAAApCIAAAAAAAAAAAAAAADwvw"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK0iAAAAAAAAriIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0iAAAAAAAArSIAAAAAAAAAAAAAAADwvw"
				],
				[
					328,
					1,
					"paste",
					null,
					"AQAAAK4iAAAAAAAAtyIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4iAAAAAAAAriIAAAAAAAAAAAAAAADwvw"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALciAAAAAAAAuCIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALciAAAAAAAAtyIAAAAAAAAAAAAAAADwvw"
				],
				[
					330,
					1,
					"paste",
					null,
					"AQAAALgiAAAAAAAAwSIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgiAAAAAAAAuCIAAAAAAAAAAAAAAADwvw"
				],
				[
					331,
					4,
					"right_delete",
					null,
					"BAAAAMEiAAAAAAAAwSIAAAAAAAABAAAALMEiAAAAAAAAwSIAAAAAAAABAAAAMcEiAAAAAAAAwSIAAAAAAAABAAAALMEiAAAAAAAAwSIAAAAAAAABAAAAMg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMEiAAAAAAAAwSIAAAAAAAAAAAAAAADwvw"
				],
				[
					333,
					5,
					"right_delete",
					null,
					"BQAAAHYiAAAAAAAAdiIAAAAAAAABAAAAY3YiAAAAAAAAdiIAAAAAAAABAAAAb3YiAAAAAAAAdiIAAAAAAAABAAAAbnYiAAAAAAAAdiIAAAAAAAABAAAAc3YiAAAAAAAAdiIAAAAAAAABAAAAdA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYiAAAAAAAAdiIAAAAAAAAAAAAAAAA4QA"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "kl"
					},
					"AgAAAHYiAAAAAAAAdyIAAAAAAAAAAAAAdyIAAAAAAAB4IgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYiAAAAAAAAdiIAAAAAAAAAAAAAAADwvw"
				],
				[
					335,
					2,
					"left_delete",
					null,
					"AgAAAHciAAAAAAAAdyIAAAAAAAABAAAAbHYiAAAAAAAAdiIAAAAAAAABAAAAaw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgiAAAAAAAAeCIAAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAHYiAAAAAAAAdyIAAAAAAAAAAAAAdyIAAAAAAAB4IgAAAAAAAAAAAAB4IgAAAAAAAHkiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYiAAAAAAAAdiIAAAAAAAAAAAAAAADwvw"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAANciAAAAAAAA2CIAAAAAAAAAAAAA2CIAAAAAAADaIgAAAAAAAAAAAADaIgAAAAAAANsiAAAAAAAAAAAAANsiAAAAAAAA3SIAAAAAAAAAAAAA2CIAAAAAAADYIgAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANciAAAAAAAA1yIAAAAAAAD////////vfw"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": "fi"
					},
					"AgAAANsiAAAAAAAA3CIAAAAAAAAAAAAA3CIAAAAAAADdIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsiAAAAAAAA2yIAAAAAAAAAAAAAAADwvw"
				],
				[
					342,
					1,
					"left_delete",
					null,
					"AQAAANwiAAAAAAAA3CIAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0iAAAAAAAA3SIAAAAAAAAAAAAAAADwvw"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAANwiAAAAAAAA3SIAAAAAAAAAAAAA3SIAAAAAAADeIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwiAAAAAAAA3CIAAAAAAAAAAAAAAADwvw"
				],
				[
					344,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN4iAAAAAAAA4CIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4iAAAAAAAA3iIAAAAAAAAAAAAAAADwvw"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": "lewt"
					},
					"BAAAAN8iAAAAAAAA4CIAAAAAAAAAAAAA4CIAAAAAAADhIgAAAAAAAAAAAADhIgAAAAAAAOIiAAAAAAAAAAAAAOIiAAAAAAAA4yIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8iAAAAAAAA3yIAAAAAAAAAAAAAAADwvw"
				],
				[
					346,
					2,
					"left_delete",
					null,
					"AgAAAOIiAAAAAAAA4iIAAAAAAAABAAAAdOEiAAAAAAAA4SIAAAAAAAABAAAAdw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMiAAAAAAAA4yIAAAAAAAAAAAAAAADwvw"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAOEiAAAAAAAA4iIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEiAAAAAAAA4SIAAAAAAAAAAAAAAADwvw"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAOIiAAAAAAAA4yIAAAAAAAAAAAAA4yIAAAAAAADkIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIiAAAAAAAA4iIAAAAAAAAAAAAAAADwvw"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAOQiAAAAAAAA5SIAAAAAAAAAAAAA5SIAAAAAAADmIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQiAAAAAAAA5CIAAAAAAAAAAAAAAADwvw"
				],
				[
					350,
					1,
					"left_delete",
					null,
					"AQAAAOUiAAAAAAAA5SIAAAAAAAABAAAAMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYiAAAAAAAA5iIAAAAAAAAAAAAAAADwvw"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAOUiAAAAAAAA5iIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUiAAAAAAAA5SIAAAAAAAAAAAAAAADwvw"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": " 0i"
					},
					"AwAAAOYiAAAAAAAA5yIAAAAAAAAAAAAA5yIAAAAAAADoIgAAAAAAAAAAAADoIgAAAAAAAOkiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYiAAAAAAAA5iIAAAAAAAAAAAAAAADwvw"
				],
				[
					353,
					1,
					"left_delete",
					null,
					"AQAAAOgiAAAAAAAA6CIAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkiAAAAAAAA6SIAAAAAAAAAAAAAAADwvw"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOgiAAAAAAAA6SIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgiAAAAAAAA6CIAAAAAAAAAAAAAAADwvw"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAOkiAAAAAAAA6iIAAAAAAAAAAAAA6iIAAAAAAADrIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkiAAAAAAAA6SIAAAAAAAAAAAAAAADwvw"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": " <"
					},
					"AgAAAOsiAAAAAAAA7CIAAAAAAAAAAAAA7CIAAAAAAADtIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsiAAAAAAAA6yIAAAAAAAAAAAAAAADwvw"
				],
				[
					357,
					1,
					"insert",
					{
						"characters": " 3"
					},
					"AgAAAO0iAAAAAAAA7iIAAAAAAAAAAAAA7iIAAAAAAADvIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0iAAAAAAAA7SIAAAAAAAAAAAAAAADwvw"
				],
				[
					358,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAO8iAAAAAAAA8CIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8iAAAAAAAA7yIAAAAAAAAAAAAAAADwvw"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": " i++"
					},
					"BAAAAPAiAAAAAAAA8SIAAAAAAAAAAAAA8SIAAAAAAADyIgAAAAAAAAAAAADyIgAAAAAAAPMiAAAAAAAAAAAAAPMiAAAAAAAA9CIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAiAAAAAAAA8CIAAAAAAAAAAAAAAADwvw"
				],
				[
					360,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPQiAAAAAAAA9iIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQiAAAAAAAA9CIAAAAAAAAAAAAAAADwvw"
				],
				[
					362,
					2,
					"left_delete",
					null,
					"AgAAAPUiAAAAAAAA9SIAAAAAAAABAAAAKfQiAAAAAAAA9CIAAAAAAAABAAAAKA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYiAAAAAAAA9iIAAAAAAAAAAAAAAADwvw"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAPUiAAAAAAAA9iIAAAAAAAAAAAAA9iIAAAAAAAD4IgAAAAAAAAAAAAD2IgAAAAAAAPYiAAAAAAAAAgAAACAg9iIAAAAAAAD6IgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUiAAAAAAAA9SIAAAAAAAAAAAAAAADwvw"
				],
				[
					365,
					3,
					"left_delete",
					null,
					"AwAAAPgiAAAAAAAA+CIAAAAAAAACAAAAICD2IgAAAAAAAPYiAAAAAAAAAgAAACAg9SIAAAAAAAD1IgAAAAAAAAEAAAAK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoiAAAAAAAA+iIAAAAAAAAAAAAAAADwvw"
				],
				[
					366,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPUiAAAAAAAA9yIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUiAAAAAAAA9SIAAAAAAAAAAAAAAADwvw"
				],
				[
					367,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAPYiAAAAAAAA9yIAAAAAAAAAAAAA9yIAAAAAAAD5IgAAAAAAAAAAAAD5IgAAAAAAAPoiAAAAAAAAAAAAAPoiAAAAAAAA/CIAAAAAAAAAAAAA9yIAAAAAAAD3IgAAAAAAAAIAAAAgIPciAAAAAAAA+yIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYiAAAAAAAA9iIAAAAAAAAAAAAAAADwvw"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAPsiAAAAAAAA/CIAAAAAAAAAAAAA/CIAAAAAAAD9IgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsiAAAAAAAA+yIAAAAAAAAAAAAAAADwvw"
				],
				[
					369,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP0iAAAAAAAA/yIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0iAAAAAAAA/SIAAAAAAAAAAAAAAADwvw"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": "stde"
					},
					"BAAAAP4iAAAAAAAA/yIAAAAAAAAAAAAA/yIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAEjAAAAAAAAAAAAAAEjAAAAAAAAAiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4iAAAAAAAA/iIAAAAAAAAAAAAAAADwvw"
				],
				[
					371,
					1,
					"left_delete",
					null,
					"AQAAAAEjAAAAAAAAASMAAAAAAAABAAAAZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIjAAAAAAAAAiMAAAAAAAAAAAAAAADwvw"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": "io"
					},
					"AgAAAAEjAAAAAAAAAiMAAAAAAAAAAAAAAiMAAAAAAAADIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEjAAAAAAAAASMAAAAAAAAAAAAAAADwvw"
				],
				[
					373,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAMjAAAAAAAABSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMjAAAAAAAAAyMAAAAAAAAAAAAAAADwvw"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAAQjAAAAAAAABSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQjAAAAAAAABCMAAAAAAAAAAAAAAADwvw"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "=="
					},
					"AgAAAAYjAAAAAAAAByMAAAAAAAAAAAAAByMAAAAAAAAIIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYjAAAAAAAABiMAAAAAAAAAAAAAAADwvw"
				],
				[
					377,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAgjAAAAAAAACiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgjAAAAAAAACCMAAAAAAAAAAAAAAADwvw"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "pipe"
					},
					"BAAAAAkjAAAAAAAACiMAAAAAAAAAAAAACiMAAAAAAAALIwAAAAAAAAAAAAALIwAAAAAAAAwjAAAAAAAAAAAAAAwjAAAAAAAADSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkjAAAAAAAACSMAAAAAAAAAAAAAAADwvw"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA8jAAAAAAAAECMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8jAAAAAAAADyMAAAAAAAAAAAAAAADwvw"
				],
				[
					381,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABAjAAAAAAAAEiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAjAAAAAAAAECMAAAAAAAAAAAAAAADwvw"
				],
				[
					382,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAABEjAAAAAAAAEiMAAAAAAAAAAAAAEiMAAAAAAAAWIwAAAAAAAAAAAAAWIwAAAAAAABcjAAAAAAAAAAAAABcjAAAAAAAAGyMAAAAAAAAAAAAAEiMAAAAAAAASIwAAAAAAAAQAAAAgICAgEiMAAAAAAAAYIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEjAAAAAAAAESMAAAAAAAAAAAAAAADwvw"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAANciAAAAAAAA2CIAAAAAAAAAAAAA2CIAAAAAAADaIgAAAAAAAAAAAAAVIwAAAAAAABUjAAAAAAAABgAAACAgICAgINoiAAAAAAAA2yIAAAAAAAAAAAAA2yIAAAAAAADcIgAAAAAAAAAAAADcIgAAAAAAAN0iAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANciAAAAAAAA1yIAAAAAAAD////////vfw"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": " parent="
					},
					"CAAAAN0iAAAAAAAA3iIAAAAAAAAAAAAA3iIAAAAAAADfIgAAAAAAAAAAAADfIgAAAAAAAOAiAAAAAAAAAAAAAOAiAAAAAAAA4SIAAAAAAAAAAAAA4SIAAAAAAADiIgAAAAAAAAAAAADiIgAAAAAAAOMiAAAAAAAAAAAAAOMiAAAAAAAA5CIAAAAAAAAAAAAA5CIAAAAAAADlIgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0iAAAAAAAA3SIAAAAAAAAAAAAAAADwvw"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": "stdio;"
					},
					"BgAAAOUiAAAAAAAA5iIAAAAAAAAAAAAA5iIAAAAAAADnIgAAAAAAAAAAAADnIgAAAAAAAOgiAAAAAAAAAAAAAOgiAAAAAAAA6SIAAAAAAAAAAAAA6SIAAAAAAADqIgAAAAAAAAAAAADqIgAAAAAAAOsiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUiAAAAAAAA5SIAAAAAAAAAAAAAAADwvw"
				],
				[
					389,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAAOUiAAAAAAAA5iIAAAAAAAAAAAAA5iIAAAAAAADnIgAAAAAAAAAAAADnIgAAAAAAAOgiAAAAAAAAAAAAAOgiAAAAAAAA6SIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUiAAAAAAAA5SIAAAAAAAAAAAAAAADwvw"
				],
				[
					392,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAO4iAAAAAAAA7yIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4iAAAAAAAA7iIAAAAAAAAAAAAAAADwvw"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAACsjAAAAAAAALCMAAAAAAAAAAAAALCMAAAAAAAAtIwAAAAAAAAAAAAAtIwAAAAAAAC4jAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsjAAAAAAAAKyMAAAAAAAAAAAAAAADwvw"
				],
				[
					397,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAC4jAAAAAAAAMCMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4jAAAAAAAALiMAAAAAAAAAAAAAAADwvw"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": "r,w"
					},
					"AwAAAC8jAAAAAAAAMCMAAAAAAAAAAAAAMCMAAAAAAAAxIwAAAAAAAAAAAAAxIwAAAAAAADIjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8jAAAAAAAALyMAAAAAAAAAAAAAAADwvw"
				],
				[
					400,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAADMjAAAAAAAANCMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMjAAAAAAAAMyMAAAAAAAAAAAAAAADwvw"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": " os.pipe"
					},
					"CAAAADQjAAAAAAAANSMAAAAAAAAAAAAANSMAAAAAAAA2IwAAAAAAAAAAAAA2IwAAAAAAADcjAAAAAAAAAAAAADcjAAAAAAAAOCMAAAAAAAAAAAAAOCMAAAAAAAA5IwAAAAAAAAAAAAA5IwAAAAAAADojAAAAAAAAAAAAADojAAAAAAAAOyMAAAAAAAAAAAAAOyMAAAAAAAA8IwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQjAAAAAAAANCMAAAAAAAAAAAAAAADwvw"
				],
				[
					402,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADwjAAAAAAAAPiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwjAAAAAAAAPCMAAAAAAAAAAAAAAADwvw"
				],
				[
					404,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAD4jAAAAAAAAPyMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4jAAAAAAAAPiMAAAAAAAAAAAAAAADwvw"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAD8jAAAAAAAAQCMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8jAAAAAAAAPyMAAAAAAAAAAAAAAADwvw"
				],
				[
					408,
					1,
					"insert",
					{
						"characters": "stdio"
					},
					"BQAAAEAjAAAAAAAAQSMAAAAAAAAAAAAAQSMAAAAAAABCIwAAAAAAAAAAAABCIwAAAAAAAEMjAAAAAAAAAAAAAEMjAAAAAAAARCMAAAAAAAAAAAAARCMAAAAAAABFIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAjAAAAAAAAQCMAAAAAAAAAAAAAAADwvw"
				],
				[
					409,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEUjAAAAAAAARyMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUjAAAAAAAARSMAAAAAAAAAAAAAAADwvw"
				],
				[
					410,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAEYjAAAAAAAARyMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYjAAAAAAAARiMAAAAAAAAAAAAAAADwvw"
				],
				[
					412,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEgjAAAAAAAASSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgjAAAAAAAASCMAAAAAAAAAAAAAAADwvw"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAEkjAAAAAAAASiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkjAAAAAAAASSMAAAAAAAAAAAAAAADwvw"
				],
				[
					414,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAEojAAAAAAAASyMAAAAAAAAAAAAASyMAAAAAAABMIwAAAAAAAAAAAABMIwAAAAAAAE0jAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEojAAAAAAAASiMAAAAAAAAAAAAAAADwvw"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAE0jAAAAAAAATiMAAAAAAAAAAAAATiMAAAAAAABPIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0jAAAAAAAATSMAAAAAAAAAAAAAAADwvw"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAE8jAAAAAAAAUCMAAAAAAAAAAAAAUCMAAAAAAABRIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE8jAAAAAAAATyMAAAAAAAAAAAAAAADwvw"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAAFEjAAAAAAAAUiMAAAAAAAAAAAAAUiMAAAAAAABTIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEjAAAAAAAAUSMAAAAAAAAAAAAAAADwvw"
				],
				[
					418,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAFMjAAAAAAAAVCMAAAAAAAAAAAAAVCMAAAAAAABVIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMjAAAAAAAAUyMAAAAAAAAAAAAAAADwvw"
				],
				[
					419,
					1,
					"insert",
					{
						"characters": " w;"
					},
					"AwAAAFUjAAAAAAAAViMAAAAAAAAAAAAAViMAAAAAAABXIwAAAAAAAAAAAABXIwAAAAAAAFgjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUjAAAAAAAAVSMAAAAAAAAAAAAAAADwvw"
				],
				[
					420,
					1,
					"insert",
					{
						"characters": "\nparent"
					},
					"BwAAAFgjAAAAAAAAWSMAAAAAAAAAAAAAWSMAAAAAAABaIwAAAAAAAAAAAABaIwAAAAAAAFsjAAAAAAAAAAAAAFsjAAAAAAAAXCMAAAAAAAAAAAAAXCMAAAAAAABdIwAAAAAAAAAAAABdIwAAAAAAAF4jAAAAAAAAAAAAAF4jAAAAAAAAXyMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgjAAAAAAAAWCMAAAAAAAAAAAAAAADwvw"
				],
				[
					421,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAF8jAAAAAAAAYSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8jAAAAAAAAXyMAAAAAAAAAAAAAAADwvw"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAGAjAAAAAAAAYSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGAjAAAAAAAAYCMAAAAAAAAAAAAAAADwvw"
				],
				[
					424,
					1,
					"insert",
					{
						"characters": "=i==0?"
					},
					"BgAAAGIjAAAAAAAAYyMAAAAAAAAAAAAAYyMAAAAAAABkIwAAAAAAAAAAAABkIwAAAAAAAGUjAAAAAAAAAAAAAGUjAAAAAAAAZiMAAAAAAAAAAAAAZiMAAAAAAABnIwAAAAAAAAAAAABnIwAAAAAAAGgjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIjAAAAAAAAYiMAAAAAAAAAAAAAAADwvw"
				],
				[
					425,
					1,
					"insert",
					{
						"characters": " w:"
					},
					"AwAAAGgjAAAAAAAAaSMAAAAAAAAAAAAAaSMAAAAAAABqIwAAAAAAAAAAAABqIwAAAAAAAGsjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgjAAAAAAAAaCMAAAAAAAAAAAAAAADwvw"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": " r;"
					},
					"AwAAAGsjAAAAAAAAbCMAAAAAAAAAAAAAbCMAAAAAAABtIwAAAAAAAAAAAABtIwAAAAAAAG4jAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsjAAAAAAAAayMAAAAAAAAAAAAAAADwvw"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMgjAAAAAAAAySMAAAAAAAAAAAAAySMAAAAAAADLIwAAAAAAAAAAAADLIwAAAAAAAMwjAAAAAAAAAAAAAMwjAAAAAAAAziMAAAAAAAAAAAAAySMAAAAAAADJIwAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgjAAAAAAAAyCMAAAAAAAD////////vfw"
				],
				[
					440,
					1,
					"paste",
					null,
					"AQAAAMkjAAAAAAAAASQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkjAAAAAAAAySMAAAAAAAAAAAAAAADwvw"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BwAAAO0jAAAAAAAA7iMAAAAAAAAAAAAAAyQAAAAAAAADJAAAAAAAAAIAAAAgIO4jAAAAAAAA7yMAAAAAAAAAAAAA7yMAAAAAAADwIwAAAAAAAAAAAADwIwAAAAAAAPEjAAAAAAAAAAAAAPEjAAAAAAAA8iMAAAAAAAAAAAAA8iMAAAAAAADzIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0jAAAAAAAA7SMAAAAAAAAAAAAAAADwvw"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPMjAAAAAAAA9CMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMjAAAAAAAA8yMAAAAAAAAAAAAAAADwvw"
				],
				[
					449,
					5,
					"left_delete",
					null,
					"BQAAAAMkAAAAAAAAAyQAAAAAAAABAAAAJwIkAAAAAAAAAiQAAAAAAAABAAAAZQEkAAAAAAAAASQAAAAAAAABAAAAcAAkAAAAAAAAACQAAAAAAAABAAAAaf8jAAAAAAAA/yMAAAAAAAABAAAAcA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQkAAAAAAAABCQAAAAAAAAAAAAAAADwvw"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": "number'"
					},
					"BwAAAP8jAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAIkAAAAAAAAAAAAAAIkAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAAEJAAAAAAAAAAAAAAEJAAAAAAAAAUkAAAAAAAAAAAAAAUkAAAAAAAABiQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8jAAAAAAAA/yMAAAAAAAAAAAAAAADwvw"
				],
				[
					457,
					1,
					"left_delete",
					null,
					"AQAAAAgkAAAAAAAACCQAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkkAAAAAAAACSQAAAAAAAAAAAAAAADwvw"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": "o9"
					},
					"AgAAAAgkAAAAAAAACSQAAAAAAAAAAAAACSQAAAAAAAAKJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgkAAAAAAAACCQAAAAAAAAAAAAAAADwvw"
				],
				[
					459,
					2,
					"left_delete",
					null,
					"AgAAAAkkAAAAAAAACSQAAAAAAAABAAAAOQgkAAAAAAAACCQAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAokAAAAAAAACiQAAAAAAAAAAAAAAADwvw"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "\nos.close"
					},
					"DAAAAAgkAAAAAAAACSQAAAAAAAAAAAAACSQAAAAAAAANJAAAAAAAAAAAAAAJJAAAAAAAAAkkAAAAAAAABAAAACAgICAJJAAAAAAAAA8kAAAAAAAAAAAAAA8kAAAAAAAAECQAAAAAAAAAAAAAECQAAAAAAAARJAAAAAAAAAAAAAARJAAAAAAAABIkAAAAAAAAAAAAABIkAAAAAAAAEyQAAAAAAAAAAAAAEyQAAAAAAAAUJAAAAAAAAAAAAAAUJAAAAAAAABUkAAAAAAAAAAAAABUkAAAAAAAAFiQAAAAAAAAAAAAAFiQAAAAAAAAXJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgkAAAAAAAACCQAAAAAAAAAAAAAAADwvw"
				],
				[
					461,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABckAAAAAAAAGSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABckAAAAAAAAFyQAAAAAAAAAAAAAAADwvw"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": "stdio"
					},
					"BQAAABgkAAAAAAAAGSQAAAAAAAAAAAAAGSQAAAAAAAAaJAAAAAAAAAAAAAAaJAAAAAAAABskAAAAAAAAAAAAABskAAAAAAAAHCQAAAAAAAAAAAAAHCQAAAAAAAAdJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgkAAAAAAAAGCQAAAAAAAAAAAAAAADwvw"
				],
				[
					463,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAB0kAAAAAAAAHyQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0kAAAAAAAAHSQAAAAAAAAAAAAAAADwvw"
				],
				[
					464,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAB4kAAAAAAAAHyQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4kAAAAAAAAHiQAAAAAAAAAAAAAAADwvw"
				],
				[
					466,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACEkAAAAAAAAIiQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEkAAAAAAAAISQAAAAAAAAAAAAAAADwvw"
				],
				[
					497,
					1,
					"cut",
					null,
					"AQAAABAjAAAAAAAAECMAAAAAAAAbAAAAICAgIGlmKHN0ZGlvW2ldPT0ncGlwZScpIHsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAjAAAAAAAAKyMAAAAAAAAAAAAAAADwvw"
				],
				[
					498,
					1,
					"paste",
					null,
					"AQAAABAjAAAAAAAAKyMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAjAAAAAAAAECMAAAAAAAAAAAAAAADwvw"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": " else"
					},
					"BQAAAHQjAAAAAAAAdSMAAAAAAAAAAAAAdSMAAAAAAAB2IwAAAAAAAAAAAAB2IwAAAAAAAHcjAAAAAAAAAAAAAHcjAAAAAAAAeCMAAAAAAAAAAAAAeCMAAAAAAAB5IwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQjAAAAAAAAdCMAAAAAAAAAAAAAAADwvw"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkjAAAAAAAAeiMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkjAAAAAAAAeSMAAAAAAAAAAAAAAADwvw"
				],
				[
					503,
					1,
					"paste",
					null,
					"AQAAAHojAAAAAAAAlSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHojAAAAAAAAeiMAAAAAAAAAAAAAAADwvw"
				],
				[
					508,
					1,
					"insert",
					{
						"characters": "inherit"
					},
					"CAAAAIwjAAAAAAAAjSMAAAAAAAAAAAAAjSMAAAAAAACNIwAAAAAAAAQAAABwaXBljSMAAAAAAACOIwAAAAAAAAAAAACOIwAAAAAAAI8jAAAAAAAAAAAAAI8jAAAAAAAAkCMAAAAAAAAAAAAAkCMAAAAAAACRIwAAAAAAAAAAAACRIwAAAAAAAJIjAAAAAAAAAAAAAJIjAAAAAAAAkyMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwjAAAAAAAAkCMAAAAAAAAAAAAAAADwvw"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": "\nstdio"
					},
					"CAAAAJcjAAAAAAAAmCMAAAAAAAAAAAAAmCMAAAAAAACcIwAAAAAAAAAAAACcIwAAAAAAAJ4jAAAAAAAAAAAAAJ4jAAAAAAAAnyMAAAAAAAAAAAAAnyMAAAAAAACgIwAAAAAAAAAAAACgIwAAAAAAAKEjAAAAAAAAAAAAAKEjAAAAAAAAoiMAAAAAAAAAAAAAoiMAAAAAAACjIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcjAAAAAAAAlyMAAAAAAAD////////vfw"
				],
				[
					511,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKMjAAAAAAAApSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMjAAAAAAAAoyMAAAAAAAAAAAAAAADwvw"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAKQjAAAAAAAApSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQjAAAAAAAApCMAAAAAAAAAAAAAAADwvw"
				],
				[
					514,
					1,
					"insert",
					{
						"characters": "=i;"
					},
					"AwAAAKYjAAAAAAAApyMAAAAAAAAAAAAApyMAAAAAAACoIwAAAAAAAAAAAACoIwAAAAAAAKkjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYjAAAAAAAApiMAAAAAAAAAAAAAAADwvw"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAKkjAAAAAAAAqiMAAAAAAAAAAAAAqiMAAAAAAACwIwAAAAAAAAAAAACwIwAAAAAAALEjAAAAAAAAAAAAAKojAAAAAAAAqiMAAAAAAAAGAAAAICAgICAgqiMAAAAAAACuIwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkjAAAAAAAAqSMAAAAAAAAAAAAAAADwvw"
				],
				[
					517,
					1,
					"left_delete",
					null,
					"AQAAAK8jAAAAAAAAryMAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAjAAAAAAAAsCMAAAAAAAAAAAAAAABOQA"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": "\nconst"
					},
					"BgAAALQjAAAAAAAAtSMAAAAAAAAAAAAAtSMAAAAAAAC2IwAAAAAAAAAAAAC2IwAAAAAAALcjAAAAAAAAAAAAALcjAAAAAAAAuCMAAAAAAAAAAAAAuCMAAAAAAAC5IwAAAAAAAAAAAAC5IwAAAAAAALojAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQjAAAAAAAAtCMAAAAAAAAAAAAAAADwvw"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALojAAAAAAAAuyMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALojAAAAAAAAuiMAAAAAAAAAAAAAAADwvw"
				],
				[
					530,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALsjAAAAAAAAvSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsjAAAAAAAAuyMAAAAAAAAAAAAAAADwvw"
				],
				[
					531,
					1,
					"insert",
					{
						"characters": "stdin,stdout,"
					},
					"DQAAALwjAAAAAAAAvSMAAAAAAAAAAAAAvSMAAAAAAAC+IwAAAAAAAAAAAAC+IwAAAAAAAL8jAAAAAAAAAAAAAL8jAAAAAAAAwCMAAAAAAAAAAAAAwCMAAAAAAADBIwAAAAAAAAAAAADBIwAAAAAAAMIjAAAAAAAAAAAAAMIjAAAAAAAAwyMAAAAAAAAAAAAAwyMAAAAAAADEIwAAAAAAAAAAAADEIwAAAAAAAMUjAAAAAAAAAAAAAMUjAAAAAAAAxiMAAAAAAAAAAAAAxiMAAAAAAADHIwAAAAAAAAAAAADHIwAAAAAAAMgjAAAAAAAAAAAAAMgjAAAAAAAAySMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwjAAAAAAAAvCMAAAAAAAAAAAAAAADwvw"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "stde"
					},
					"BAAAAMkjAAAAAAAAyiMAAAAAAAAAAAAAyiMAAAAAAADLIwAAAAAAAAAAAADLIwAAAAAAAMwjAAAAAAAAAAAAAMwjAAAAAAAAzSMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkjAAAAAAAAySMAAAAAAAAAAAAAAADwvw"
				],
				[
					533,
					1,
					"left_delete",
					null,
					"AQAAAMwjAAAAAAAAzCMAAAAAAAABAAAAZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0jAAAAAAAAzSMAAAAAAAAAAAAAAADwvw"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": "err"
					},
					"AwAAAMwjAAAAAAAAzSMAAAAAAAAAAAAAzSMAAAAAAADOIwAAAAAAAAAAAADOIwAAAAAAAM8jAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwjAAAAAAAAzCMAAAAAAAAAAAAAAADwvw"
				],
				[
					536,
					1,
					"insert",
					{
						"characters": "=stduio"
					},
					"BwAAANAjAAAAAAAA0SMAAAAAAAAAAAAA0SMAAAAAAADSIwAAAAAAAAAAAADSIwAAAAAAANMjAAAAAAAAAAAAANMjAAAAAAAA1CMAAAAAAAAAAAAA1CMAAAAAAADVIwAAAAAAAAAAAADVIwAAAAAAANYjAAAAAAAAAAAAANYjAAAAAAAA1yMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANAjAAAAAAAA0CMAAAAAAAAAAAAAAADwvw"
				],
				[
					537,
					3,
					"left_delete",
					null,
					"AwAAANYjAAAAAAAA1iMAAAAAAAABAAAAb9UjAAAAAAAA1SMAAAAAAAABAAAAadQjAAAAAAAA1CMAAAAAAAABAAAAdQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcjAAAAAAAA1yMAAAAAAAAAAAAAAADwvw"
				],
				[
					538,
					1,
					"insert",
					{
						"characters": "io;"
					},
					"AwAAANQjAAAAAAAA1SMAAAAAAAAAAAAA1SMAAAAAAADWIwAAAAAAAAAAAADWIwAAAAAAANcjAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQjAAAAAAAA1CMAAAAAAAAAAAAAAADwvw"
				],
				[
					547,
					1,
					"paste",
					null,
					"AgAAABEkAAAAAAAAFiQAAAAAAAAAAAAAFiQAAAAAAAAWJAAAAAAAAAUAAABzdGRpbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEkAAAAAAAAFiQAAAAAAAAAAAAAAADwvw"
				],
				[
					555,
					1,
					"paste",
					null,
					"AgAAABEkAAAAAAAAJCQAAAAAAAAAAAAAJCQAAAAAAAAkJAAAAAAAAAUAAABzdGRpbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEkAAAAAAAAFiQAAAAAAAAAAAAAAADwvw"
				],
				[
					564,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAHIkAAAAAAAAcyQAAAAAAAAAAAAAcyQAAAAAAAB0JAAAAAAAAAAAAAB0JAAAAAAAAHUkAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIkAAAAAAAAciQAAAAAAAAAAAAAAADwvw"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": " stdio"
					},
					"BgAAAHUkAAAAAAAAdiQAAAAAAAAAAAAAdiQAAAAAAAB3JAAAAAAAAAAAAAB3JAAAAAAAAHgkAAAAAAAAAAAAAHgkAAAAAAAAeSQAAAAAAAAAAAAAeSQAAAAAAAB6JAAAAAAAAAAAAAB6JAAAAAAAAHskAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUkAAAAAAAAdSQAAAAAAAAAAAAAAADwvw"
				],
				[
					566,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAHskAAAAAAAAfSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHskAAAAAAAAeyQAAAAAAAAAAAAAAADwvw"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAHwkAAAAAAAAfSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwkAAAAAAAAfCQAAAAAAAAAAAAAAADwvw"
				],
				[
					569,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAH4kAAAAAAAAfyQAAAAAAAAAAAAAfyQAAAAAAACAJAAAAAAAAAAAAACAJAAAAAAAAIEkAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4kAAAAAAAAfiQAAAAAAAAAAAAAAADwvw"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAIEkAAAAAAAAgiQAAAAAAAAAAAAAgiQAAAAAAACDJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEkAAAAAAAAgSQAAAAAAAAAAAAAAADwvw"
				],
				[
					574,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BwAAAJ8kAAAAAAAAoCQAAAAAAAAAAAAAoCQAAAAAAACmJAAAAAAAAAAAAACgJAAAAAAAAKAkAAAAAAAABgAAACAgICAgIKAkAAAAAAAApCQAAAAAAAAAAAAApCQAAAAAAAClJAAAAAAAAAAAAACgJAAAAAAAAKAkAAAAAAAABAAAACAgICCgJAAAAAAAAKIkAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8kAAAAAAAAnyQAAAAAAAAAAAAAAGCCQA"
				],
				[
					585,
					2,
					"left_delete",
					null,
					"AgAAAKUkAAAAAAAApSQAAAAAAAABAAAACqQkAAAAAAAApCQAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYkAAAAAAAApiQAAAAAAAAAAAAAAADwvw"
				],
				[
					590,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAspAAAAAAAADSkAAAAAAAAAAAAA9ygAAAAAAAD5KAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcoAAAAAAAACykAAAAAAAAAAAAAAADwvw"
				],
				[
					592,
					1,
					"insert",
					{
						"characters": "Spawn"
					},
					"BQAAAA8pAAAAAAAAECkAAAAAAAAAAAAAECkAAAAAAAARKQAAAAAAAAAAAAARKQAAAAAAABIpAAAAAAAAAAAAABIpAAAAAAAAEykAAAAAAAAAAAAAEykAAAAAAAAUKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8pAAAAAAAADykAAAAAAAAAAAAAAADwvw"
				],
				[
					604,
					1,
					"insert",
					{
						"characters": "\nstdio:"
					},
					"CAAAALgkAAAAAAAAuSQAAAAAAAAAAAAAuSQAAAAAAAC9JAAAAAAAAAAAAAC9JAAAAAAAAL4kAAAAAAAAAAAAAL4kAAAAAAAAvyQAAAAAAAAAAAAAvyQAAAAAAADAJAAAAAAAAAAAAADAJAAAAAAAAMEkAAAAAAAAAAAAAMEkAAAAAAAAwiQAAAAAAAAAAAAAwiQAAAAAAADDJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgkAAAAAAAAuCQAAAAAAAAAAAAAAADwvw"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": " parent,"
					},
					"CAAAAMMkAAAAAAAAxCQAAAAAAAAAAAAAxCQAAAAAAADFJAAAAAAAAAAAAADFJAAAAAAAAMYkAAAAAAAAAAAAAMYkAAAAAAAAxyQAAAAAAAAAAAAAxyQAAAAAAADIJAAAAAAAAAAAAADIJAAAAAAAAMkkAAAAAAAAAAAAAMkkAAAAAAAAyiQAAAAAAAAAAAAAyiQAAAAAAADLJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMkAAAAAAAAwyQAAAAAAAAAAAAAAADwvw"
				],
				[
					614,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAACFKwAAaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgVXRpbCBmcm9tICcuL2xpYi91dGlsLmpzJzsKaW1wb3J0ICogYXMgcGF0aCBmcm9tICcuL2xpYi9wYXRoLmpzJzsKaW1wb3J0IHsgdHlwZXMsIHRvU3RyaW5nLCBxdW90ZSwgZXNjYXBlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnOwoKbGV0IGJqc29uOwoKaW1wb3J0KCdianNvbicpCiAgLnRoZW4obSA9PiAoYmpzb24gPSBtKSkKICAuY2F0Y2goKCkgPT4ge30pOwoKbGV0IG1tYXA7CgppbXBvcnQoJ21tYXAnKQogIC50aGVuKG0gPT4gKG1tYXAgPSBtKSkKICAuY2F0Y2goKCkgPT4ge30pOwoKbGV0IHhtbDsKCmltcG9ydCgneG1sJykKICAudGhlbihtID0+ICh4bWwgPSBtKSkKICAuY2F0Y2goKCkgPT4ge30pOwoKZXhwb3J0IGZ1bmN0aW9uIElmRGVidWcodG9rZW4pIHsKICBjb25zdCB7IERFQlVHID0gJycgfSA9IHByb2Nlc3MuZW52OwogIGNvbnN0IHRva0xpc3QgPSBERUJVRy5zcGxpdCgvW15BLVphLXowLTlfXSsvZyk7CgogIHJldHVybiB0b2tMaXN0LmluZGV4T2YodG9rZW4pICE9IC0xOwp9CgpleHBvcnQgZnVuY3Rpb24gTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pIHsKICBpZighSWZEZWJ1Zyh0b2tlbikpIHJldHVybiAoKSA9PiB7fTsKCiAgcmV0dXJuIGxvZ2dlckZuOwp9Cgpjb25zdCBkZWJ1ZyA9IExvZ0lmRGVidWcoJ2lvLWhlbHBlcnMnLCAoLi4uYXJncykgPT4gY29uc29sZS5sb2coLi4uYXJncykpOwoKZXhwb3J0IGZ1bmN0aW9uIFJlYWRGaWxlKG5hbWUsIGJpbmFyeSkgewogIGxldCByZXQgPSBmcy5yZWFkRmlsZVN5bmMobmFtZSwgYmluYXJ5ID8gbnVsbCA6ICd1dGYtOCcpOwoKICBkZWJ1ZyhgUmVhZCAke25hbWV9OiAke3JldC5sZW5ndGh9IGJ5dGVzYCk7CiAgcmV0dXJuIHJldDsKfQoKZXhwb3J0IGZ1bmN0aW9uIExvYWRIaXN0b3J5KGZpbGVuYW1lKSB7CiAgbGV0IGNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTsKICBsZXQgZGF0YTsKCiAgY29uc3QgcGFyc2UgPSAoKSA9PiB7CiAgICB0cnkgewogICAgICBkYXRhID0gSlNPTi5wYXJzZShjb250ZW50cyk7CiAgICB9IGNhdGNoKGUpIHt9CiAgICBpZihkYXRhKSByZXR1cm4gZGF0YTsKICAgIHRyeSB7CiAgICAgIGRhdGEgPSBjb250ZW50cy5zcGxpdCgvXG4vZyk7CiAgICB9IGNhdGNoKGUpIHt9CiAgICBpZihkYXRhKSByZXR1cm4gZGF0YTsKICB9OwoKICByZXR1cm4gKHBhcnNlKCkgPz8gW10pLmZpbHRlcihlbnRyeSA9PiAoZW50cnkgKyAnJykudHJpbSgpICE9ICcnKTsKICAvLy5tYXAoZW50cnkgPT4gZW50cnkucmVwbGFjZSgvXFxuL2csICdcbicpKQp9CgpleHBvcnQgZnVuY3Rpb24gUmVhZEpTT04oZmlsZW5hbWUpIHsKICBsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0Zi04Jyk7CgogIGlmKGRhdGEpIGRlYnVnKGBSZWFkSlNPTjogJHtkYXRhLmxlbmd0aH0gYnl0ZXMgcmVhZCBmcm9tICcke2ZpbGVuYW1lfSdgKTsKICByZXR1cm4gZGF0YSA/IEpTT04ucGFyc2UoZGF0YSkgOiBudWxsOwp9CgpleHBvcnQgZnVuY3Rpb24gUmVhZFhNTChmaWxlbmFtZSkgewogIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCBudWxsKTsKCiAgaWYoZGF0YSkgZGVidWcoYFJlYWRYTUw6ICR7ZGF0YS5sZW5ndGh9IGJ5dGVzIHJlYWQgZnJvbSAnJHtmaWxlbmFtZX0nYCk7CiAgcmV0dXJuIGRhdGEgPyB4bWwucmVhZChkYXRhLCBmaWxlbmFtZSwgdHJ1ZSkgOiBudWxsOwp9CgpleHBvcnQgZnVuY3Rpb24gTWFwRmlsZShmaWxlbmFtZSkgewogIGxldCBmZCA9IG9zLm9wZW4oZmlsZW5hbWUsIG9zLk9fUkRPTkxZKTsKICBsZXQgeyBzaXplIH0gPSBvcy5zdGF0KGZpbGVuYW1lKVswXTsKICBkZWJ1ZyhgTWFwRmlsZWAsIHsgZmlsZW5hbWUsIGZkLCBzaXplIH0pOwogIGxldCBkYXRhID0gbW1hcC5tbWFwKDAsIHNpemUgKyAxMCwgbW1hcC5QUk9UX1JFQUQsIG1tYXAuTUFQX1BSSVZBVEUsIGZkLCAwKTsKICBvcy5jbG9zZShmZCk7CiAgcmV0dXJuIGRhdGE7Cn0KCmV4cG9ydCBmdW5jdGlvbiBXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpIHsKICBpZihVdGlsLmlzR2VuZXJhdG9yKGRhdGEpKSB7CiAgICBsZXQgZmQgPSBmcy5vcGVuU3luYyhuYW1lLCBvcy5PX1dST05MWSB8IG9zLk9fVFJVTkMgfCBvcy5PX0NSRUFULCAweDFhNCk7CiAgICBsZXQgciA9IDA7CiAgICBmb3IobGV0IGl0ZW0gb2YgZGF0YSkgewogICAgICByICs9IGZzLndyaXRlU3luYyhmZCwgdG9BcnJheUJ1ZmZlcihpdGVtICsgJycpKTsKICAgIH0KICAgIGZzLmNsb3NlU3luYyhmZCk7CiAgICBsZXQgc3RhdCA9IGZzLnN0YXRTeW5jKG5hbWUpOwogICAgcmV0dXJuIHN0YXQ/LnNpemU7CiAgfQogIGlmKFV0aWwuaXNJdGVyYXRvcihkYXRhKSkgZGF0YSA9IFsuLi5kYXRhXTsKICBpZihVdGlsLmlzQXJyYXkoZGF0YSkpIGRhdGEgPSBkYXRhLmpvaW4oJ1xuJyk7CgogIGlmKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnICYmICFkYXRhLmVuZHNXaXRoKCdcbicpKSBkYXRhICs9ICdcbic7CiAgbGV0IHJldCA9IGZzLndyaXRlRmlsZVN5bmMobmFtZSwgZGF0YSk7CgogIGlmKHZlcmJvc2UpIGRlYnVnKGBXcm90ZSAke25hbWV9OiAke3JldH0gYnl0ZXNgKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFdyaXRlSlNPTihuYW1lLCBkYXRhKSB7CiAgV3JpdGVGaWxlKG5hbWUsIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFdyaXRlWE1MKG5hbWUsIGRhdGEpIHsKICByZXR1cm4gV3JpdGVGaWxlKG5hbWUsIHhtbC53cml0ZShkYXRhKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBSZWFkQkpTT04oZmlsZW5hbWUpIHsKICBsZXQgZmQgPSBvcy5vcGVuKGZpbGVuYW1lLCBvcy5PX1JET05MWSk7CiAgbGV0IHsgc2l6ZSB9ID0gb3Muc3RhdChmaWxlbmFtZSlbMF07CiAgZGVidWcoYFJlYWRCSlNPTmAsIHsgZmlsZW5hbWUsIGZkLCBzaXplIH0pOwogIGxldCBkYXRhID0gbW1hcC5tbWFwKDAsIHNpemUgKyAxMCwgbW1hcC5QUk9UX1JFQUQsIG1tYXAuTUFQX1BSSVZBVEUsIGZkLCAwKTsKICBkZWJ1ZyhgUmVhZEJKU09OYCwgeyBkYXRhIH0pOwogIGxldCByZXQgPSBianNvbi5yZWFkKGRhdGEsIDAsIHNpemUpOwoKICBtbWFwLm11bm1hcChkYXRhKTsKICBvcy5jbG9zZShmZCk7CiAgcmV0dXJuIHJldDsKfQoKZXhwb3J0IGZ1bmN0aW9uIFdyaXRlQkpTT04obmFtZSwgZGF0YSkgewogIGxldCBidWYgPSBianNvbi53cml0ZShkYXRhKTsKICBsZXQgc2l6ZSA9IGJ1Zi5ieXRlTGVuZ3RoOwogIGxldCBmZCA9IG9zLm9wZW4obmFtZSwgb3MuT19XUk9OTFkgfCBvcy5PX0NSRUFUIHwgb3MuT19UUlVOQyk7CgogIGxldCByZXQgPSBvcy53cml0ZShmZCwgYnVmLCAwLCBzaXplKTsKICBkZWJ1ZygnV3JpdGVCSlNPTicsIHsgbmFtZSwgZmQsIHNpemUsIHJldCB9KTsKICBvcy5jbG9zZShmZCk7CgogIHJldHVybiByZXQ7Cn0KCmV4cG9ydCBmdW5jdGlvbiogRGlySXRlcmF0b3IoLi4uYXJncykgewogIGxldCBwcmVkID0gdHlwZW9mIGFyZ3NbMF0gIT0gJ3N0cmluZycgPyBVdGlsLnByZWRpY2F0ZShhcmdzLnNoaWZ0KCkpIDogKCkgPT4gdHJ1ZTsKICBmb3IobGV0IGRpciBvZiBhcmdzKSB7CiAgICBkaXIgPSBkaXIucmVwbGFjZSgvfi9nLCBzdGQuZ2V0ZW52KCdIT01FJykpOwogICAgbGV0IGVudHJpZXMgPSBvcy5yZWFkZGlyKGRpcilbMF0gPz8gW107CiAgICBmb3IobGV0IGVudHJ5IG9mIGVudHJpZXMuc29ydCgpKSB7CiAgICAgIGxldCBmaWxlID0gcGF0aC5qb2luKGRpciwgZW50cnkpOwogICAgICBsZXQgbHN0ID0gb3MubHN0YXQoZmlsZSlbMF07CiAgICAgIGxldCBzdCA9IG9zLnN0YXQoZmlsZSlbMF07CiAgICAgIGxldCBpc19kaXIgPSAoc3Q/Lm1vZGUgJiBvcy5TX0lGTVQpID09IG9zLlNfSUZESVI7CiAgICAgIGxldCBpc19zeW1saW5rID0gKGxzdD8ubW9kZSAmIG9zLlNfSUZNVCkgPT0gb3MuU19JRkxOSzsKCiAgICAgIGlmKGlzX2RpcikgZmlsZSArPSAnLyc7CiAgICAgIGlmKCFwcmVkKGVudHJ5LCBmaWxlLCBpc19kaXIsIGlzX3N5bWxpbmspKSBjb250aW51ZTsKICAgICAgeWllbGQgZmlsZTsKICAgIH0KICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiogUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApIHsKICBsZXQgcmU7CiAgaWYodHlwZW9mIHByZWQgIT0gJ2Z1bmN0aW9uJykgewogICAgaWYoIXByZWQpIHByZWQgPSAnLionOwogICAgaWYodHlwZW9mIHByZWQgPT0gJ3N0cmluZycpIHByZWQgPSBuZXcgUmVnRXhwKHByZWQsICdnaScpOwogICAgcmUgPSBwcmVkOwogICAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gcmUudGVzdChlbnRyeSkgfHwgcmUudGVzdChmaWxlKTsKICB9CiAgaWYoIWRpci5lbmRzV2l0aCgnLycpKSBkaXIgKz0gJy8nOwogIGRpciA9IGRpci5yZXBsYWNlKC9+L2csIHN0ZC5nZXRlbnYoJ0hPTUUnKSk7CiAgZm9yKGxldCBmaWxlIG9mIGZzLnJlYWRkaXJTeW5jKGRpcikpIHsKICAgIGlmKFsnLicsICcuLiddLmluZGV4T2YoZmlsZSkgIT0gLTEpIGNvbnRpbnVlOwogICAgbGV0IGVudHJ5ID0gYCR7ZGlyfSR7ZmlsZX1gOwogICAgbGV0IGlzRGlyID0gZmFsc2U7CiAgICBsZXQgc3QgPSBmcy5zdGF0U3luYyhlbnRyeSk7CiAgICBpc0RpciA9IHN0ICYmIHN0LmlzRGlyZWN0b3J5KCk7CiAgICBpZihpc0RpcikgZW50cnkgKz0gJy8nOwogICAgbGV0IHNob3cgPSBwcmVkKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKTsKICAgIGlmKHNob3cpIHsKICAgICAgeWllbGQgZW50cnk7CiAgICB9CiAgICBpZihpc0RpcikgeWllbGQqIFJlY3Vyc2l2ZURpckl0ZXJhdG9yKGVudHJ5LCBwcmVkLCBkZXB0aCArIDEpOwogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uKiBSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkgewogIGRpciA9IGRpci5yZXBsYWNlKC9+L2csIHByb2Nlc3MuZW52WydIT01FJ10gPz8gc3RkLmdldGVudignSE9NRScpKTsKICBmb3IobGV0IGZpbGUgb2YgZnMucmVhZGRpclN5bmMoZGlyKSkgewogICAgaWYoWycuJywgJy4uJ10uaW5kZXhPZihmaWxlKSAhPSAtMSkgY29udGludWU7CiAgICBsZXQgZW50cnkgPSBgJHtkaXJ9LyR7ZmlsZX1gOwogICAgbGV0IGlzRGlyID0gZmFsc2U7CiAgICBsZXQgc3QgPSBmcy5zdGF0U3luYyhlbnRyeSk7CiAgICBpc0RpciA9IHN0ICYmIHN0LmlzRGlyZWN0b3J5KCk7CiAgICB5aWVsZCBpc0RpciA/IGVudHJ5ICsgJy8nIDogZW50cnk7CiAgICBpZihtYXhEZXB0aCA+IDAgJiYgaXNEaXIpIHlpZWxkKiBSZWFkRGlyUmVjdXJzaXZlKGVudHJ5LCBtYXhEZXB0aCAtIDEpOwogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uKiBGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pIHsKICBmb3IobGV0IGl0ZW0gb2YgZ2VuKSBpZihyZWdFeC50ZXN0KGl0ZW0pKSB5aWVsZCBpdGVtOwp9CgpleHBvcnQgZnVuY3Rpb24gRmlsdGVySW1hZ2VzKGdlbikgewogIHJldHVybiBGaWx0ZXIoZ2VuLCAvXC4ocG5nfGpwZT9nKSQvaSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpIHsKICByZXR1cm4gWy4uLmFycl0uc29ydCgoYSwgYikgPT4gYS5zdGF0W2ZpZWxkXSAtIGIuc3RhdFtmaWVsZF0pOwp9CgpleHBvcnQgZnVuY3Rpb24qIFN0YXRGaWxlcyhnZW4pIHsKICBmb3IobGV0IGZpbGUgb2YgZ2VuKSB7CiAgICBsZXQgc3RhdCA9IGZzLnN0YXRTeW5jKGZpbGUpOwogICAgbGV0IG9iaiA9IGRlZmluZSgKICAgICAgeyBmaWxlLCBzdGF0IH0sCiAgICAgIHsKICAgICAgICB0b1N0cmluZygpIHsKICAgICAgICAgIHJldHVybiB0aGlzLmZpbGU7CiAgICAgICAgfQogICAgICB9CiAgICApOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ3NpemUnLCB7CiAgICAgIGdldDogbWVtb2l6ZSgoKSA9PiB7CiAgICAgICAgbGV0IHsgZmlsZW5hbWUsIC4uLmluZm8gfSA9IEltYWdlSW5mbyhvYmouZmlsZSk7CiAgICAgICAgcmV0dXJuIGRlZmluZShpbmZvLCB7CiAgICAgICAgICB0b1N0cmluZygpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggKyAneCcgKyB0aGlzLmhlaWdodDsKICAgICAgICAgIH0sCiAgICAgICAgICBnZXQgbGFuZHNjYXBlKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy53aWR0aCA+IHRoaXMuaGVpZ2h0OwogICAgICAgICAgfSwKICAgICAgICAgIGdldCBwb3J0cmFpdCgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0ID4gdGhpcy53aWR0aDsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSkKICAgIH0pOwogICAgeWllbGQgb2JqOwogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uIFJlYWRGZChmZCwgYnVmZmVyU2l6ZSkgewogIGZ1bmN0aW9uKiBGZFJlYWQoKSB7CiAgICBsZXQgcmV0LAogICAgICBidWYgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyU2l6ZSk7CiAgICBkbyB7CiAgICAgIGlmKChyZXQgPSBmcy5yZWFkU3luYyhmZCwgYnVmLCAwLCBidWYuYnl0ZUxlbmd0aCkpID4gMCkgeWllbGQgcmV0ID09IGJ1Zi5ieXRlTGVuZ3RoID8gYnVmIDogYnVmLnNsaWNlKDAsIHJldCk7CiAgICB9IHdoaWxlKHJldCA+IDApOwogIH0KICByZXR1cm4gWy4uLkZkUmVhZCgpXS5yZWR1Y2UoKGFjYywgYnVmKSA9PiAoYWNjICs9IHRvU3RyaW5nKGJ1ZikpLCAnJyk7Cn0KLyoKZXhwb3J0IGZ1bmN0aW9uIEZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkgewogIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyU2l6ZSk7CiAgcmV0dXJuIG5ldyBSZXBlYXRlcihhc3luYyAocHVzaCwgc3RvcCkgPT4gewogICAgbGV0IHJldDsKICAgIGRvIHsKICAgICAgbGV0IHIgPSBhd2FpdCB3YWl0UmVhZChmZCk7CiAgICAgIHJldCA9IHR5cGVvZiBmZCA9PSAnbnVtYmVyJyA/IGZzLnJlYWRTeW5jKGZkLCBidWYpIDogZmQucmVhZChidWYpOwogICAgICBpZihyZXQgPiAwKSB7CiAgICAgICAgbGV0IGRhdGEgPSBidWYuc2xpY2UoMCwgcmV0KTsKICAgICAgICBhd2FpdCBwdXNoKGZzLmJ1ZmZlclRvU3RyaW5nKGRhdGEpKTsKICAgICAgfQogICAgfSB3aGlsZShyZXQgPT0gYnVmZmVyU2l6ZSk7CiAgICBzdG9wKCk7CiAgICB0eXBlb2YgZmQgPT0gJ251bWJlcicgPyBmcy5jbG9zZVN5bmMoZmQpIDogZmQuZGVzdHJveSgpOwogIH0pOwp9Ki8KZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpIHsKICBsZXQgYnVmID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlclNpemUpOwogIGxldCByZXQ7CiAgZG8gewogICAgbGV0IHIgPSBhd2FpdCB3YWl0UmVhZChmZCk7CiAgICBjb25zb2xlLmxvZygncicsIHIpOwogICAgcmV0ID0gdHlwZW9mIGZkID09ICdudW1iZXInID8gYXdhaXQgZnMucmVhZChmZCwgYnVmKSA6IGF3YWl0IGZkLnJlYWQoYnVmKTsKICAgIGlmKHJldCA+IDApIHsKICAgICAgbGV0IGRhdGEgPSBidWYuc2xpY2UoMCwgcmV0KTsKICAgICAgeWllbGQgZnMuYnVmZmVyVG9TdHJpbmcoZGF0YSk7CiAgICB9CiAgfSB3aGlsZShyZXQgPT0gYnVmZmVyU2l6ZSk7CiAgdHlwZW9mIGZkID09ICdudW1iZXInID8gYXdhaXQgZnMuY2xvc2UoZmQpIDogZmQuZGVzdHJveSgpOwogIHJldHVybjsKfQoKZXhwb3J0IGZ1bmN0aW9uIENvcHlUb0NsaXBib2FyZCh0ZXh0KSB7CiAgY29uc3QgeyBlbnYgfSA9IHByb2Nlc3M7CiAgbGV0IGNoaWxkID0gY2hpbGRfcHJvY2Vzcy5zcGF3bigneGNsaXAnLCBbJy1pbicsICctdmVyYm9zZSddLCB7IGVudiwgc3RkaW86IFsncGlwZScsICdpbmhlcml0JywgJ2luaGVyaXQnXSB9KTsKICBsZXQgW3BpcGVdID0gY2hpbGQuc3RkaW87CgogIGxldCB3cml0dGVuID0gZnMud3JpdGVTeW5jKHBpcGUsIHRleHQsIDAsIHRleHQubGVuZ3RoKTsKICBmcy5jbG9zZVN5bmMocGlwZSk7CiAgbGV0IHN0YXR1cyA9IGNoaWxkLndhaXQoKTsKICBjb25zb2xlLmxvZygnY2hpbGQnLCBjaGlsZCk7CiAgcmV0dXJuIHsgd3JpdHRlbiwgc3RhdHVzIH07Cn0KCmV4cG9ydCBmdW5jdGlvbiBSZWFkQ2FsbGJhY2soZmQsIGZuID0gZGF0YSA9PiB7fSkgewogIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMTAyNCk7CiAgb3Muc2V0UmVhZEhhbmRsZXIoZmQsICgpID0+IHsKICAgIGxldCByID0gZnMucmVhZFN5bmMoZmQsIGJ1ZiwgMCwgMTAyNCk7CiAgICBpZihyIDw9IDApIHsKICAgICAgZnMuY2xvc2VTeW5jKGZkKTsKICAgICAgb3Muc2V0UmVhZEhhbmRsZXIoZmQsIG51bGwpOwogICAgICByZXR1cm47CiAgICB9CiAgICBsZXQgZGF0YSA9IGJ1Zi5zbGljZSgwLCByKTsKICAgIGRhdGEgPSB0b1N0cmluZyhkYXRhKTsKICAgIGZuKGRhdGEpOwogIH0pOwp9CgpleHBvcnQgZnVuY3Rpb24gTG9nQ2FsbChmbiwgdGhpc09iaikgewogIGxldCB7IG5hbWUgfSA9IGZuOwogIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7CiAgICBsZXQgcmVzdWx0OwogICAgcmVzdWx0ID0gZm4uYXBwbHkodGhpc09iaiA/PyB0aGlzLCBhcmdzKTsKICAgIGNvbnNvbGUubG9nKAogICAgICAnRnVuY3Rpb24gJyArIG5hbWUgKyAnKCcsCiAgICAgIC4uLmFyZ3MubWFwKGFyZyA9PiBpbnNwZWN0KGFyZywgeyBjb2xvcnM6IGZhbHNlLCBtYXhTdHJpbmdMZW5ndGg6IDIwIH0pKSwKICAgICAgJykgPScsCiAgICAgIHJlc3VsdAogICAgKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFNwYXduKGZpbGUsIGFyZ3MsIG9wdGlvbnM9e30pIHsKICBsZXQge2Jsb2NrPSB0cnVlLCB1c2VQYXRoPXRydWUsIGN3ZCwgc3RkaW89Wydpbmhlcml0JywnaW5oZXJpdCcsJ2luaGVyaXQnXSwgZW52LHVpZCxnaWR9PW9wdGlvbnM7CiAgbGV0IHBhcmVudD1bLi4uc3RkaW9dOwoKICBmb3IobGV0IGkgPSAwOyBpIDwgMzsgaSsrKXsKICAgIGlmKHN0ZGlvW2ldPT0ncGlwZScpIHsKbGV0W3Isd109IG9zLnBpcGUoKTsKc3RkaW9baV09aSA9PSAwID8gciA6IHc7CnBhcmVudFtpXT1pPT0wPyB3OiByOwogICAgfSBlbHNlICAgICBpZihzdGRpb1tpXT09J2luaGVyaXQnKSB7CiAgICAgIHN0ZGlvW2ldPWk7CiAgICB9CiAgfQoKY29uc3QgW3N0ZGluLHN0ZG91dCxzdGRlcnJdPXN0ZGlvOwogIGxldCBwaWQgPSBvcy5leGVjKFtmaWxlLC4uLmFyZ3NdLCB7IGJsb2NrLHVzZVBhdGgsIGN3ZCxzdGRpbixzdGRvdXQsc3RkZXJyLCBlbnYsdWlkLGdpZH0pOwogZm9yKGxldCBpID0gMDsgaSA8IDM7IGkrKyl7CiAgICBpZih0eXBlb2Ygc3RkaW9baV09PSdudW1iZXInICYmIHN0ZGlvW2ldICE9IGkpIAogICAgICBvcy5jbG9zZShzdGRpb1tpXSk7CiAgfQoKICByZXR1cm4gewogICAgcGlkLAogICAgc3RkaW86IHBhcmVudCwKICAgIHdhaXQoKSB7CiAgICAgIGxldFtyZXQsc3RhdHVzXT0gb3Mud2FpdHBpZCh0aGlzLnBpZCwgb3MuV05PSEFORyk7CiAgICAgIHJldHVybiByZXQ7CiAgICB9CiAgfTsKfQoKLy8gJ2h0dHBzOi8vd3d3LmRpc2NvZ3MuY29tL3NlbGwvb3JkZXIvODM2OTAyMi0zNjQnCgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hVUkwodXJsLCBvcHRpb25zID0ge30pIHsKICBsZXQgewogICAgaGVhZGVycywKICAgIHByb3h5LAogICAgY29va2llcyA9ICdjb29raWVzLnR4dCcsCiAgICByYW5nZSwKICAgIGJvZHksCiAgICB2ZXJzaW9uID0gJzEuMScsCiAgICB0bHN2LAogICAgJ3VzZXItYWdlbnQnOiB1c2VyQWdlbnQKICB9ID0gb3B0aW9uczsKCiAgbGV0IGFyZ3MgPSBPYmplY3QuZW50cmllcyhoZWFkZXJzID8/IHt9KQogICAgLnJlZHVjZSgoYWNjLCBbaywgdl0pID0+IGFjYy5jb25jYXQoWyctSCcsIGAke2t9OiAke3Z9YF0pLCBbXSkKICAgIC5jb25jYXQoQXJyYXkuaXNBcnJheSh1cmwpID8gdXJsIDogW3VybF0pOwoKICBhcmdzLnB1c2goJy0tY29tcHJlc3NlZCcpOwogIGFyZ3MudW5zaGlmdCgnLUwnLCAnLWsnKTsKCiAgaWYoYm9keSkgYXJncy51bnNoaWZ0KCctZCcsIGJvZHkpOwogIGlmKHZlcnNpb24pIGFyZ3MudW5zaGlmdCgnLS1odHRwJyArIHZlcnNpb24pOwogIGlmKHRsc3YpIGFyZ3MudW5zaGlmdCgnLS10bHN2JyArIHRsc3YpOwogIGlmKHVzZXJBZ2VudCkgYXJncy51bnNoaWZ0KCctQScsIHVzZXJBZ2VudCk7CiAgaWYocmFuZ2UpIGFyZ3MudW5zaGlmdCgnLXInLCByYW5nZSk7CiAgaWYoY29va2llcykgYXJncy51bnNoaWZ0KCctYycsIGNvb2tpZXMpOwogIGlmKHByb3h5KSBhcmdzLnVuc2hpZnQoJy14JywgcHJveHkpOwoKICAvL2FyZ3MudW5zaGlmdCgnLXYnKTsKICAvL2FyZ3MudW5zaGlmdCgnLXNTJyk7CiAgYXJncy51bnNoaWZ0KCctLXRjcC1mYXN0b3BlbicsICctLXRjcC1ub2RlbGF5Jyk7CgogIGNvbnNvbGUubG9nKCdGZXRjaFVSTCcsIGNvbnNvbGUuY29uZmlnKHsgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LCBjb21wYWN0OiBmYWxzZSB9KSwgeyBhcmdzIH0pOwoKCgogIGxldCBjaGlsZCA9LyogY2hpbGRfcHJvY2Vzcy5zcGF3biovU3Bhd24oJ2N1cmwnLCBhcmdzLCB7IGJsb2NrOiBmYWxzZSwgc3RkaW86IFsnaW5oZXJpdCcsICdwaXBlJywgJ3BpcGUnXSB9KTsKCiAgbGV0IFssIG91dCwgZXJyXSA9IGNoaWxkLnN0ZGlvOwoKICBjb25zb2xlLmxvZygnY2hpbGQnLCB7IG91dCwgZXJyIH0pOwoKICBsZXQgb3V0cHV0ID0gJycsCiAgICBlcnJvcnMgPSAnJzsKCiAgUmVhZENhbGxiYWNrKG91dCwgZGF0YSA9PiB7CiAgICBvdXRwdXQgKz0gZGF0YTsKICAgIC8vIGNvbnNvbGUubG9nKCdkYXRhJyxkYXRhLmxlbmd0aCk7CiAgfSk7CiAgUmVhZENhbGxiYWNrKGVyciwgZGF0YSA9PiB7CiAgICBlcnJvcnMgKz0gZGF0YTsKICAgIHN0ZC5lcnIucHV0cyhkYXRhKTsKICAgIHN0ZC5lcnIuZmx1c2goKTsKICB9KTsKICBsZXQgZmxhZ3MgPSBjaGlsZF9wcm9jZXNzLldOT0hBTkc7CiAgY29uc29sZS5sb2coJ2ZsYWdzJywgZmxhZ3MpOwogIGNoaWxkLndhaXQoZmxhZ3MpOwoKICBsZXQgc3RhdHVzOwoKICBzdGF0dXMgPSBjaGlsZC53YWl0KCk7CgogIGNvbnNvbGUubG9nKCdGZXRjaFVSTCcsIHsgLyogb3V0cHV0OiBlc2NhcGUob3V0cHV0KSwgZXJyb3JzLCovIHN0YXR1cyB9KTsKCiAgcmV0dXJuIG91dHB1dDsKfQoAAAAAAAAAAMQrAAAAAAAAAAAAAAAAAAAAAAAAxCsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMskAAAAAAAAyyQAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAMskAAAAAAAAzCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLJAAAAAAAAMskAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"insert",
					{
						"characters": "qjs"
					},
					"AwAAAMwkAAAAAAAAzSQAAAAAAAAAAAAAzSQAAAAAAADOJAAAAAAAAAAAAADOJAAAAAAAAM8kAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMJAAAAAAAAMwkAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					4,
					"right_delete",
					null,
					"BAAAAMskAAAAAAAAyyQAAAAAAAABAAAAL8skAAAAAAAAyyQAAAAAAAABAAAAccskAAAAAAAAyyQAAAAAAAABAAAAasskAAAAAAAAyyQAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLJAAAAAAAAMskAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/quickjs",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/grammars/css3.g4",
		"/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
		"/home/roman/Projects/plot-cv/lib/spawn.js",
		"/home/roman/Projects/plot-cv/trkl.es",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/deep.es",
		"/home/roman/Projects/plot-cv/preact.es",
		"/home/roman/Projects/plot-cv/preact.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/discogs.js",
		"/home/roman/Projects/plot-cv/lscache.es",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/nanovg-qjs.h",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-104",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/check-discogs.js",
		"/home/roman/Projects/plot-cv/libs.js",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-102",
		"/home/roman/Projects/plot-cv/discogs.es",
		"/home/roman/Projects/plot-cv/date-helpers.js",
		"/home/roman/Projects/plot-cv/io-helpers.js.orig",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/test-imread.js",
		"/home/roman/Projects/plot-cv/childProcess.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/make-bitmap.js",
		"/home/roman/Projects/plot-cv/diagram.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line_iterator.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/a.out",
		"/home/roman/Projects/plot-cv/test-autoplacer.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/param.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/size.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/workerScript.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/videoSource.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_array.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_clahe.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_draw.cpp",
		"/home/roman/Projects/plot-cv/test-diagram.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_rect.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_umat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point_iterator.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.hpp",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Sources/opencv/modules/videoio/src/cap_ffmpeg_impl.hpp",
		"/home/roman/Sources/opencv/modules/videoio/src/cap_ffmpeg.cpp",
		"/home/roman/Projects/ffmpeg-audio/orange-ffmpeg/ffmpeg-libs/static/ffmpeg/share/ffmpeg/examples/demuxing_decoding.c",
		"/home/roman/Projects/plot-cv/opencv-video.c",
		"/home/roman/Projects/plot-cv/simplest_ffmpeg_audio_decoder.cpp",
		"/home/roman/Projects/plot-cv/lib/filesystem.js",
		"/home/roman/Projects/plot-cv/fetch-post-prices.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/printer.js",
		"/home/roman/Projects/plot-cv/jack-session-client.c",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/mics.js",
		"/home/roman/Projects/plot-cv/create-tamper.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser2.js",
		"/home/roman/Projects/plot-cv/time-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point_iterator.hpp",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/JSBindings.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/Functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/scripts/collapse-imports.sh",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/lib/eda/circuitjs.js",
		"/home/roman/Projects/plot-cv/lib/eda/values.js",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/an-tronics/eagle/Headphone-Amplifier-ClassAB-alt.sch",
		"/home/roman/Projects/plot-cv/lib/json/path.js",
		"/home/roman/Projects/plot-cv/commands.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/roman/Projects/plot-cv/lib/json/diff.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/plot-cv/lib/grammars/CSV.g4",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/test-rpc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/defs.cmake",
		"/home/roman/Projects/plot-cv/quickjs/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger-transport-win.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/contours-802.json",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,-*/opencv/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"selectors",
			"DJS_SHARED_LIBRARY",
			"Shipping Address",
			"/\\*",
			"thread_content",
			"diskosenn",
			"import\\(",
			"ReadJSON",
			"orderDocuments",
			"pageParse",
			"ordersLoad",
			"pageParse",
			"Parser",
			"orderIdCells",
			"CachedFet",
			"CachedFett",
			"7",
			"pageFet",
			"CachedFetch",
			"CachedFetch\\(",
			"CachedFetch",
			"fetch =",
			"Fetch",
			"globalThis",
			"cacheLoad =",
			"$",
			"getTextFlat",
			"pageGetRequests",
			"Keys",
			"getAttribute",
			"scaleIFrame",
			"const frame",
			"makeIFrame",
			"naviga",
			"getTextFlat",
			"frameLoad",
			"^{",
			"options",
			"Util\\.",
			"setGlobal",
			"ordersGetRows",
			"');",
			"Util.getter",
			"//",
			"async",
			"\n}",
			"matchCache",
			"child_process",
			"pthread_create",
			"fork",
			"ReadCallback",
			"tls",
			"typeof ([^ ]*) == 'string'",
			"version",
			"child_proces",
			"waitRead",
			"filesystem\\.",
			"FdReader",
			"Util\\.",
			"Util",
			", '-H',",
			"child_proces",
			"selectROI",
			"recalc",
			"Pipeline",
			"threshold",
			"Pipeline",
			"Trackbar",
			"LoadConfig",
			"config",
			"NumericPara",
			"Trackbar",
			"Param",
			"Console",
			"getOther",
			"getOther\\(",
			"getOther",
			"'headers'",
			"bytes written",
			"fs\\.",
			"std\\.",
			"once",
			"mkstempSync",
			"VideoSou",
			"getLayer",
			"js_array_to",
			"90",
			"operator<<",
			"js_array_to",
			"js_draw_polylines",
			"polylines",
			"CORE_TRANSFORM",
			"js_contour_getmat",
			"transform",
			"ctor",
			"  console.log('axes.x', axes.x); \n",
			"187",
			"style",
			"audio",
			"_decode_",
			"decode_",
			"videoFormat",
			" CV_",
			"CV_",
			"cacheFields",
			"Location",
			"GetLoc",
			"gettok",
			" matchStatement",
			"'eof'",
			" parseTempl",
			"gettok",
			"revert",
			"isTemplateLiteral",
			"matchTemplateLiteral",
			"gettok",
			"\\.lex\\(",
			"this.lexer",
			"Lexer",
			"lexer",
			"gett",
			"Unexpected tok",
			"\\.lex\\(",
			"kind",
			"printObject",
			"ge",
			"get",
			"'get'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"ordersGetList",
			"getCacheValue",
			"tlsv",
			"\\1",
			"http",
			"fs.",
			",\\n    '-H', ",
			"Size.getOther(",
			"matrix",
			" cv::CV_",
			"CV_RGB(0, 0, 0)",
			"",
			"point",
			"\\\\D",
			"\\\\d",
			"\\.deref",
			"is_alphanumeric_char",
			"is_whitespace_char",
			"length",
			"{ const",
			"{ return",
			"const  {flags}=this;\\nreturn flags",
			"defines",
			"",
			"fs.\\1Sync",
			"define",
			",",
			"file",
			"target_compile_definitions",
			"msg",
			"PmDeviceInfo",
			"export function",
			"libportmidi",
			"\\1//\\2",
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log",
			"puts",
			"export function",
			"type",
			"header.",
			"#000000"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": null,
							"function_name_status_row": 50,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1645212131.18,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "io-helpers.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11204,
						"regions":
						{
						},
						"selection":
						[
							[
								9532,
								9534
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 343,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1645349451.73,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6222.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139700989367200)":
	{
		"height": 0.0
	},
	"output.Protocol(139713492737424)":
	{
		"height": 0.0
	},
	"output.Protocol(140020110213280)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752054832)":
	{
		"height": 0.0
	},
	"output.Protocol(140156680251040)":
	{
		"height": 0.0
	},
	"output.Protocol(140190209186352)":
	{
		"height": 0.0
	},
	"output.Protocol(140264240155856)":
	{
		"height": 0.0
	},
	"output.Protocol(140490298408144)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873410144)":
	{
		"height": 0.0
	},
	"output.Protocol(140627243657680)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"css",
				"lib/grammars/css3.g4"
			],
			[
				"xpath",
				"lib/grammars/xpath.g4"
			],
			[
				"console",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"libs.js",
				"libs.js"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"disco",
				"discogs.js"
			],
			[
				"spawn.",
				"lib/spawn.js"
			],
			[
				"helpers",
				"io-helpers.js.orig"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"child-",
				"quickjs/qjs-modules/child-process.c"
			],
			[
				"package.j",
				"package.json"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"test-imrea",
				"test-imread.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"cvpipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"events.js",
				"quickjs/qjs-modules/lib/events.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-vi",
				"test-video.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"server",
				"server.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"test-wor",
				"test-worker.js"
			],
			[
				"ws-work",
				"ws-worker.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"cvVi",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"ideoSou",
				"videoSource.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"documen",
				"lib/eagle/document.js"
			],
			[
				"cvPipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"dia",
				"diagram.js"
			],
			[
				"diagra",
				"diagram.js"
			],
			[
				"diag",
				"diagram.js"
			],
			[
				"opencv-vi",
				"opencv-video.c"
			],
			[
				"opencv-vide",
				"opencv-video.c"
			],
			[
				"simplest",
				"simplest_ffmpeg_audio_decoder.cpp"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"js",
				"jack-session-client.c"
			],
			[
				"package.js",
				"package.json"
			],
			[
				"printer",
				"lib/ecmascript/printer.js"
			],
			[
				"parser2.",
				"lib/ecmascript/parser2.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"cvHigh",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"diagram",
				"diagram.js"
			],
			[
				"point.hpp",
				"qjs-opencv/js_point.hpp"
			],
			[
				"jsbind",
				"qjs-opencv/jsbindings.hpp"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"help",
				"time-helpers.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"image",
				"imagePipeline.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"minnet-http",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"minnet-server",
				"quickjs/qjs-net/minnet-server.c"
			],
			[
				"minnet.c",
				"quickjs/qjs-net/minnet.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"time-help",
				"time-helpers.js"
			],
			[
				"io-helpers",
				"io-helpers.js"
			],
			[
				"test-bjson",
				"test-bjson.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"commands.j",
				"commands.js"
			],
			[
				"render",
				"lib/eagle/renderer.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"diff.js",
				"lib/json/diff.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"circuit",
				"lib/eda/circuitjs.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-shell.js",
				"cv-shell.js"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"queue.h",
				"quickjs/qjs-modules/queue.h"
			],
			[
				"queue.c",
				"quickjs/qjs-modules/queue.c"
			],
			[
				"char-utils",
				"quickjs/qjs-modules/char-utils.h"
			],
			[
				"quickjs-misc.",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"predicate.c",
				"quickjs/qjs-modules/predicate.c"
			],
			[
				"debugger-tran",
				"quickjs/quickjs-debugger-transport-win.c"
			],
			[
				"quickjs-debugg",
				"quickjs/quickjs-debugger-transport-unix.c"
			],
			[
				"defs",
				"quickjs/defs.cmake"
			],
			[
				"quickjs/CMakeLi",
				"quickjs/CMakeLists.txt"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-pred",
				"quickjs/qjs-modules/quickjs-predicate.c"
			],
			[
				"package",
				"package.json"
			],
			[
				"xpath.js",
				"lib/dom/xpath.js"
			],
			[
				"compileComm",
				"lib/build/compileCommand.js"
			],
			[
				"compile_com",
				"compile_commands.js"
			],
			[
				"quickjs-pat",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"test-child",
				"test-childprocess.js"
			],
			[
				"test-ini",
				"test-ini.js"
			],
			[
				"fn.js",
				"lib/parse/fn.js"
			],
			[
				"test-css",
				"test-css3.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"grammar-css3",
				"grammar-css3.js"
			],
			[
				"css3",
				"lib/grammars/css3.g4"
			],
			[
				"grammar.js",
				"lib/parse/grammar.js"
			],
			[
				"test-parse",
				"test-parse.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"lexer",
				"lib/parse/lexer.js"
			],
			[
				"ecmascript.js",
				"lib/ecmascript.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"imgui",
				"cmake/imgui-viewer.cmake"
			],
			[
				"high",
				"cmake/highgui-viewer.cmake"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"circui",
				"lib/eda/circuitjs.js"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"deep.c",
				"quickjs/qjs-modules/quickjs-deep.c"
			],
			[
				"test_xml",
				"quickjs/qjs-modules/tests/test_xml.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"highgui",
				"cmake/highgui-viewer.cmake"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"projec",
				"lib/eagle/project.js"
			],
			[
				"agle-she",
				"eagle-shell.js"
			],
			[
				"point",
				"lib/geom/point.js"
			],
			[
				"path.c",
				"quickjs/qjs-modules/path.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 427.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
