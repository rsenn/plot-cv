{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"render",
				"renderCollection"
			],
			[
				"Imm",
				"ImmutablePath"
			],
			[
				"cons",
				"constructor"
			],
			[
				"i",
				"is_dir"
			],
			[
				"getText",
				"getTextArray"
			],
			[
				"Lin",
				"LinearTransform"
			],
			[
				"CURL_LIB",
				"CURL_LIBRARY_DEBUG"
			],
			[
				"Circ",
				"CircuitJS"
			],
			[
				"dep",
				"dependency"
			],
			[
				"opt",
				"optimization"
			],
			[
				"OPENCV_LIB",
				"OPENCV_LIBRARIES"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"relat",
				"relativeTo"
			],
			[
				"max",
				"maxLineGap"
			],
			[
				"Pm_Op",
				"Pm_OpenInput"
			],
			[
				"Pm_Get",
				"Pm_GetDeviceInfo"
			],
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					107,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7807,
								7812
							],
							[
								8617,
								8621
							],
							[
								8761,
								8765
							],
							[
								8971,
								8980
							],
							[
								9111,
								9118
							],
							[
								9385,
								9392
							],
							[
								9456,
								9463
							],
							[
								9511,
								9526
							],
							[
								9625,
								9645
							],
							[
								10221,
								10233
							],
							[
								10332,
								10344
							],
							[
								10546,
								10562
							],
							[
								11184,
								11202
							],
							[
								11338,
								11367
							],
							[
								11787,
								11806
							],
							[
								11903,
								11924
							],
							[
								12768,
								12790
							],
							[
								13200,
								13221
							],
							[
								13487,
								13500
							],
							[
								14267,
								14279
							],
							[
								15942,
								15977
							],
							[
								16572,
								16591
							],
							[
								16699,
								16715
							],
							[
								16850,
								16867
							],
							[
								16912,
								16925
							],
							[
								16961,
								16971
							],
							[
								17385,
								17401
							],
							[
								17490,
								17509
							],
							[
								17520,
								17539
							],
							[
								17565,
								17585
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					108,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					109,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7807,
								7812
							],
							[
								8617,
								8621
							],
							[
								8761,
								8765
							],
							[
								8971,
								8980
							],
							[
								9111,
								9118
							],
							[
								9385,
								9392
							],
							[
								9456,
								9463
							],
							[
								9511,
								9526
							],
							[
								9625,
								9645
							],
							[
								10221,
								10233
							],
							[
								10332,
								10344
							],
							[
								10546,
								10562
							],
							[
								11184,
								11202
							],
							[
								11338,
								11367
							],
							[
								11787,
								11806
							],
							[
								11903,
								11924
							],
							[
								12768,
								12790
							],
							[
								13200,
								13221
							],
							[
								13487,
								13500
							],
							[
								14267,
								14279
							],
							[
								15942,
								15977
							],
							[
								16572,
								16591
							],
							[
								16699,
								16715
							],
							[
								16850,
								16867
							],
							[
								16912,
								16925
							],
							[
								16961,
								16971
							],
							[
								17385,
								17401
							],
							[
								17490,
								17509
							],
							[
								17520,
								17539
							],
							[
								17565,
								17585
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					110,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7839,
								7844
							],
							[
								8649,
								8653
							],
							[
								8793,
								8797
							],
							[
								9003,
								9012
							],
							[
								9143,
								9150
							],
							[
								9417,
								9424
							],
							[
								9488,
								9495
							],
							[
								9543,
								9558
							],
							[
								9657,
								9677
							],
							[
								10253,
								10265
							],
							[
								10364,
								10376
							],
							[
								10578,
								10594
							],
							[
								11216,
								11234
							],
							[
								11370,
								11399
							],
							[
								11819,
								11838
							],
							[
								11935,
								11956
							],
							[
								12800,
								12822
							],
							[
								13232,
								13253
							],
							[
								13519,
								13532
							],
							[
								14299,
								14311
							],
							[
								15974,
								16009
							],
							[
								16604,
								16623
							],
							[
								16731,
								16747
							],
							[
								16882,
								16899
							],
							[
								16944,
								16957
							],
							[
								16993,
								17003
							],
							[
								17417,
								17433
							],
							[
								17522,
								17541
							],
							[
								17552,
								17571
							],
							[
								17597,
								17617
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					111,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7876,
								7881
							],
							[
								8686,
								8690
							],
							[
								8830,
								8834
							],
							[
								9040,
								9049
							],
							[
								9180,
								9187
							],
							[
								9454,
								9461
							],
							[
								9525,
								9532
							],
							[
								9580,
								9595
							],
							[
								9694,
								9714
							],
							[
								10290,
								10302
							],
							[
								10401,
								10413
							],
							[
								10615,
								10631
							],
							[
								11253,
								11271
							],
							[
								11407,
								11436
							],
							[
								11856,
								11875
							],
							[
								11972,
								11993
							],
							[
								12837,
								12859
							],
							[
								13269,
								13290
							],
							[
								13556,
								13569
							],
							[
								14336,
								14348
							],
							[
								16011,
								16046
							],
							[
								16641,
								16660
							],
							[
								16768,
								16784
							],
							[
								16919,
								16936
							],
							[
								16981,
								16994
							],
							[
								17030,
								17040
							],
							[
								17454,
								17470
							],
							[
								17559,
								17578
							],
							[
								17589,
								17608
							],
							[
								17634,
								17654
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					112,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7876,
								7881
							],
							[
								8686,
								8690
							],
							[
								8830,
								8834
							],
							[
								9040,
								9049
							],
							[
								9180,
								9187
							],
							[
								9454,
								9461
							],
							[
								9525,
								9532
							],
							[
								9580,
								9595
							],
							[
								9694,
								9714
							],
							[
								10290,
								10302
							],
							[
								10401,
								10413
							],
							[
								10615,
								10631
							],
							[
								11253,
								11271
							],
							[
								11407,
								11436
							],
							[
								11856,
								11875
							],
							[
								11972,
								11993
							],
							[
								12837,
								12859
							],
							[
								13269,
								13290
							],
							[
								13556,
								13569
							],
							[
								14336,
								14348
							],
							[
								16011,
								16046
							],
							[
								16641,
								16660
							],
							[
								16768,
								16784
							],
							[
								16919,
								16936
							],
							[
								16981,
								16994
							],
							[
								17030,
								17040
							],
							[
								17454,
								17470
							],
							[
								17559,
								17578
							],
							[
								17589,
								17608
							],
							[
								17634,
								17654
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					113,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7912,
								7917
							],
							[
								8722,
								8726
							],
							[
								8866,
								8870
							],
							[
								9076,
								9085
							],
							[
								9216,
								9223
							],
							[
								9490,
								9497
							],
							[
								9561,
								9568
							],
							[
								9616,
								9631
							],
							[
								9730,
								9750
							],
							[
								10326,
								10338
							],
							[
								10437,
								10449
							],
							[
								10651,
								10667
							],
							[
								11289,
								11307
							],
							[
								11443,
								11472
							],
							[
								11892,
								11911
							],
							[
								12008,
								12029
							],
							[
								12873,
								12895
							],
							[
								13305,
								13326
							],
							[
								13592,
								13605
							],
							[
								14372,
								14384
							],
							[
								16047,
								16082
							],
							[
								16677,
								16696
							],
							[
								16804,
								16820
							],
							[
								16955,
								16972
							],
							[
								17017,
								17030
							],
							[
								17066,
								17076
							],
							[
								17490,
								17506
							],
							[
								17595,
								17614
							],
							[
								17625,
								17644
							],
							[
								17670,
								17690
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					114,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7912,
								7917
							],
							[
								8722,
								8726
							],
							[
								8866,
								8870
							],
							[
								9076,
								9085
							],
							[
								9216,
								9223
							],
							[
								9490,
								9497
							],
							[
								9561,
								9568
							],
							[
								9616,
								9631
							],
							[
								9730,
								9750
							],
							[
								10326,
								10338
							],
							[
								10437,
								10449
							],
							[
								10651,
								10667
							],
							[
								11289,
								11307
							],
							[
								11443,
								11472
							],
							[
								11892,
								11911
							],
							[
								12008,
								12029
							],
							[
								12873,
								12895
							],
							[
								13305,
								13326
							],
							[
								13592,
								13605
							],
							[
								14372,
								14384
							],
							[
								16047,
								16082
							],
							[
								16677,
								16696
							],
							[
								16804,
								16820
							],
							[
								16955,
								16972
							],
							[
								17017,
								17030
							],
							[
								17066,
								17076
							],
							[
								17490,
								17506
							],
							[
								17595,
								17614
							],
							[
								17625,
								17644
							],
							[
								17670,
								17690
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					115,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					116,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7912,
								7917
							],
							[
								8722,
								8726
							],
							[
								8866,
								8870
							],
							[
								9076,
								9085
							],
							[
								9216,
								9223
							],
							[
								9490,
								9497
							],
							[
								9561,
								9568
							],
							[
								9616,
								9631
							],
							[
								9730,
								9750
							],
							[
								10326,
								10338
							],
							[
								10437,
								10449
							],
							[
								10651,
								10667
							],
							[
								11289,
								11307
							],
							[
								11443,
								11472
							],
							[
								11892,
								11911
							],
							[
								12008,
								12029
							],
							[
								12873,
								12895
							],
							[
								13305,
								13326
							],
							[
								13592,
								13605
							],
							[
								14372,
								14384
							],
							[
								16047,
								16082
							],
							[
								16677,
								16696
							],
							[
								16804,
								16820
							],
							[
								16955,
								16972
							],
							[
								17017,
								17030
							],
							[
								17066,
								17076
							],
							[
								17490,
								17506
							],
							[
								17595,
								17614
							],
							[
								17625,
								17644
							],
							[
								17670,
								17690
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					117,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					118,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7912,
								7917
							],
							[
								8722,
								8726
							],
							[
								8866,
								8870
							],
							[
								9076,
								9085
							],
							[
								9216,
								9223
							],
							[
								9490,
								9497
							],
							[
								9561,
								9568
							],
							[
								9616,
								9631
							],
							[
								9730,
								9750
							],
							[
								10326,
								10338
							],
							[
								10437,
								10449
							],
							[
								10651,
								10667
							],
							[
								11289,
								11307
							],
							[
								11443,
								11472
							],
							[
								11892,
								11911
							],
							[
								12008,
								12029
							],
							[
								12873,
								12895
							],
							[
								13305,
								13326
							],
							[
								13592,
								13605
							],
							[
								14372,
								14384
							],
							[
								16047,
								16082
							],
							[
								16677,
								16696
							],
							[
								16804,
								16820
							],
							[
								16955,
								16972
							],
							[
								17017,
								17030
							],
							[
								17066,
								17076
							],
							[
								17490,
								17506
							],
							[
								17595,
								17614
							],
							[
								17625,
								17644
							],
							[
								17670,
								17690
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					119,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7921,
								7926
							],
							[
								8731,
								8735
							],
							[
								8875,
								8879
							],
							[
								9085,
								9094
							],
							[
								9225,
								9232
							],
							[
								9499,
								9506
							],
							[
								9570,
								9577
							],
							[
								9625,
								9640
							],
							[
								9739,
								9759
							],
							[
								10335,
								10347
							],
							[
								10446,
								10458
							],
							[
								10660,
								10676
							],
							[
								11298,
								11316
							],
							[
								11452,
								11481
							],
							[
								11901,
								11920
							],
							[
								12017,
								12038
							],
							[
								12882,
								12904
							],
							[
								13314,
								13335
							],
							[
								13601,
								13614
							],
							[
								14381,
								14393
							],
							[
								16056,
								16091
							],
							[
								16686,
								16705
							],
							[
								16813,
								16829
							],
							[
								16964,
								16981
							],
							[
								17026,
								17039
							],
							[
								17075,
								17085
							],
							[
								17499,
								17515
							],
							[
								17604,
								17623
							],
							[
								17634,
								17653
							],
							[
								17679,
								17699
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					120,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7920,
								7925
							],
							[
								8730,
								8734
							],
							[
								8874,
								8878
							],
							[
								9084,
								9093
							],
							[
								9224,
								9231
							],
							[
								9498,
								9505
							],
							[
								9569,
								9576
							],
							[
								9624,
								9639
							],
							[
								9738,
								9758
							],
							[
								10334,
								10346
							],
							[
								10445,
								10457
							],
							[
								10659,
								10675
							],
							[
								11297,
								11315
							],
							[
								11451,
								11480
							],
							[
								11900,
								11919
							],
							[
								12016,
								12037
							],
							[
								12881,
								12903
							],
							[
								13313,
								13334
							],
							[
								13600,
								13613
							],
							[
								14380,
								14392
							],
							[
								16055,
								16090
							],
							[
								16685,
								16704
							],
							[
								16812,
								16828
							],
							[
								16963,
								16980
							],
							[
								17025,
								17038
							],
							[
								17074,
								17084
							],
							[
								17498,
								17514
							],
							[
								17603,
								17622
							],
							[
								17633,
								17652
							],
							[
								17678,
								17698
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					121,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7917,
								7922
							],
							[
								8727,
								8731
							],
							[
								8871,
								8875
							],
							[
								9081,
								9090
							],
							[
								9221,
								9228
							],
							[
								9495,
								9502
							],
							[
								9566,
								9573
							],
							[
								9621,
								9636
							],
							[
								9735,
								9755
							],
							[
								10331,
								10343
							],
							[
								10442,
								10454
							],
							[
								10656,
								10672
							],
							[
								11294,
								11312
							],
							[
								11448,
								11477
							],
							[
								11897,
								11916
							],
							[
								12013,
								12034
							],
							[
								12878,
								12900
							],
							[
								13310,
								13331
							],
							[
								13597,
								13610
							],
							[
								14377,
								14389
							],
							[
								16052,
								16087
							],
							[
								16682,
								16701
							],
							[
								16809,
								16825
							],
							[
								16960,
								16977
							],
							[
								17022,
								17035
							],
							[
								17071,
								17081
							],
							[
								17495,
								17511
							],
							[
								17600,
								17619
							],
							[
								17630,
								17649
							],
							[
								17675,
								17695
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					122,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7969,
								7974
							],
							[
								8779,
								8783
							],
							[
								8923,
								8927
							],
							[
								9133,
								9142
							],
							[
								9273,
								9280
							],
							[
								9547,
								9554
							],
							[
								9618,
								9625
							],
							[
								9673,
								9688
							],
							[
								9787,
								9807
							],
							[
								10383,
								10395
							],
							[
								10494,
								10506
							],
							[
								10708,
								10724
							],
							[
								11346,
								11364
							],
							[
								11500,
								11529
							],
							[
								11949,
								11968
							],
							[
								12065,
								12086
							],
							[
								12930,
								12952
							],
							[
								13362,
								13383
							],
							[
								13649,
								13662
							],
							[
								14429,
								14441
							],
							[
								16104,
								16139
							],
							[
								16734,
								16753
							],
							[
								16861,
								16877
							],
							[
								17012,
								17029
							],
							[
								17074,
								17087
							],
							[
								17123,
								17133
							],
							[
								17547,
								17563
							],
							[
								17652,
								17671
							],
							[
								17682,
								17701
							],
							[
								17727,
								17747
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					123,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7968,
								7973
							],
							[
								8778,
								8782
							],
							[
								8922,
								8926
							],
							[
								9132,
								9141
							],
							[
								9272,
								9279
							],
							[
								9546,
								9553
							],
							[
								9617,
								9624
							],
							[
								9672,
								9687
							],
							[
								9786,
								9806
							],
							[
								10382,
								10394
							],
							[
								10493,
								10505
							],
							[
								10707,
								10723
							],
							[
								11345,
								11363
							],
							[
								11499,
								11528
							],
							[
								11948,
								11967
							],
							[
								12064,
								12085
							],
							[
								12929,
								12951
							],
							[
								13361,
								13382
							],
							[
								13648,
								13661
							],
							[
								14428,
								14440
							],
							[
								16103,
								16138
							],
							[
								16733,
								16752
							],
							[
								16860,
								16876
							],
							[
								17011,
								17028
							],
							[
								17073,
								17086
							],
							[
								17122,
								17132
							],
							[
								17546,
								17562
							],
							[
								17651,
								17670
							],
							[
								17681,
								17700
							],
							[
								17726,
								17746
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					124,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7968,
								7973
							],
							[
								8778,
								8782
							],
							[
								8922,
								8926
							],
							[
								9132,
								9141
							],
							[
								9272,
								9279
							],
							[
								9546,
								9553
							],
							[
								9617,
								9624
							],
							[
								9672,
								9687
							],
							[
								9786,
								9806
							],
							[
								10382,
								10394
							],
							[
								10493,
								10505
							],
							[
								10707,
								10723
							],
							[
								11345,
								11363
							],
							[
								11499,
								11528
							],
							[
								11948,
								11967
							],
							[
								12064,
								12085
							],
							[
								12929,
								12951
							],
							[
								13361,
								13382
							],
							[
								13648,
								13661
							],
							[
								14428,
								14440
							],
							[
								16103,
								16138
							],
							[
								16733,
								16752
							],
							[
								16860,
								16876
							],
							[
								17011,
								17028
							],
							[
								17073,
								17086
							],
							[
								17122,
								17132
							],
							[
								17546,
								17562
							],
							[
								17651,
								17670
							],
							[
								17681,
								17700
							],
							[
								17726,
								17746
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					125,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7989,
								7994
							],
							[
								8799,
								8803
							],
							[
								8943,
								8947
							],
							[
								9153,
								9162
							],
							[
								9293,
								9300
							],
							[
								9567,
								9574
							],
							[
								9638,
								9645
							],
							[
								9693,
								9708
							],
							[
								9807,
								9827
							],
							[
								10403,
								10415
							],
							[
								10514,
								10526
							],
							[
								10728,
								10744
							],
							[
								11366,
								11384
							],
							[
								11520,
								11549
							],
							[
								11969,
								11988
							],
							[
								12085,
								12106
							],
							[
								12950,
								12972
							],
							[
								13382,
								13403
							],
							[
								13669,
								13682
							],
							[
								14449,
								14461
							],
							[
								16124,
								16159
							],
							[
								16754,
								16773
							],
							[
								16881,
								16897
							],
							[
								17032,
								17049
							],
							[
								17094,
								17107
							],
							[
								17143,
								17153
							],
							[
								17567,
								17583
							],
							[
								17672,
								17691
							],
							[
								17702,
								17721
							],
							[
								17747,
								17767
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					126,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7988,
								7993
							],
							[
								8798,
								8802
							],
							[
								8942,
								8946
							],
							[
								9152,
								9161
							],
							[
								9292,
								9299
							],
							[
								9566,
								9573
							],
							[
								9637,
								9644
							],
							[
								9692,
								9707
							],
							[
								9806,
								9826
							],
							[
								10402,
								10414
							],
							[
								10513,
								10525
							],
							[
								10727,
								10743
							],
							[
								11365,
								11383
							],
							[
								11519,
								11548
							],
							[
								11968,
								11987
							],
							[
								12084,
								12105
							],
							[
								12949,
								12971
							],
							[
								13381,
								13402
							],
							[
								13668,
								13681
							],
							[
								14448,
								14460
							],
							[
								16123,
								16158
							],
							[
								16753,
								16772
							],
							[
								16880,
								16896
							],
							[
								17031,
								17048
							],
							[
								17093,
								17106
							],
							[
								17142,
								17152
							],
							[
								17566,
								17582
							],
							[
								17671,
								17690
							],
							[
								17701,
								17720
							],
							[
								17746,
								17766
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					127,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7988,
								7993
							],
							[
								8798,
								8802
							],
							[
								8942,
								8946
							],
							[
								9152,
								9161
							],
							[
								9292,
								9299
							],
							[
								9566,
								9573
							],
							[
								9637,
								9644
							],
							[
								9692,
								9707
							],
							[
								9806,
								9826
							],
							[
								10402,
								10414
							],
							[
								10513,
								10525
							],
							[
								10727,
								10743
							],
							[
								11365,
								11383
							],
							[
								11519,
								11548
							],
							[
								11968,
								11987
							],
							[
								12084,
								12105
							],
							[
								12994,
								13016
							],
							[
								13426,
								13447
							],
							[
								13713,
								13726
							],
							[
								14493,
								14505
							],
							[
								16168,
								16203
							],
							[
								16798,
								16817
							],
							[
								16925,
								16941
							],
							[
								17076,
								17093
							],
							[
								17138,
								17151
							],
							[
								17187,
								17197
							],
							[
								17611,
								17627
							],
							[
								17716,
								17735
							],
							[
								17746,
								17765
							],
							[
								17791,
								17811
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					128,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4406,
								4445
							],
							[
								4518,
								4528
							],
							[
								4648,
								4668
							],
							[
								6475,
								6509
							],
							[
								6570,
								6602
							],
							[
								6873,
								6907
							],
							[
								7988,
								7993
							],
							[
								8798,
								8802
							],
							[
								8942,
								8946
							],
							[
								9152,
								9161
							],
							[
								9292,
								9299
							],
							[
								9566,
								9573
							],
							[
								9637,
								9644
							],
							[
								9692,
								9707
							],
							[
								9806,
								9826
							],
							[
								10402,
								10414
							],
							[
								10513,
								10525
							],
							[
								10727,
								10743
							],
							[
								11365,
								11383
							],
							[
								11519,
								11548
							],
							[
								11968,
								11987
							],
							[
								12084,
								12105
							],
							[
								12994,
								13016
							],
							[
								13426,
								13447
							],
							[
								13713,
								13726
							],
							[
								14493,
								14505
							],
							[
								16168,
								16203
							],
							[
								16798,
								16817
							],
							[
								16925,
								16941
							],
							[
								17076,
								17093
							],
							[
								17138,
								17151
							],
							[
								17187,
								17197
							],
							[
								17611,
								17627
							],
							[
								17716,
								17735
							],
							[
								17746,
								17765
							],
							[
								17791,
								17811
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACQAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					129,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4377,
								4406
							],
							[
								4509,
								4548
							],
							[
								4621,
								4631
							],
							[
								4751,
								4771
							],
							[
								6578,
								6612
							],
							[
								6673,
								6705
							],
							[
								6976,
								7010
							],
							[
								8091,
								8096
							],
							[
								8901,
								8905
							],
							[
								9045,
								9049
							],
							[
								9255,
								9264
							],
							[
								9395,
								9402
							],
							[
								9669,
								9676
							],
							[
								9740,
								9747
							],
							[
								9795,
								9810
							],
							[
								9909,
								9929
							],
							[
								10505,
								10517
							],
							[
								10616,
								10628
							],
							[
								10830,
								10846
							],
							[
								11468,
								11486
							],
							[
								11622,
								11651
							],
							[
								12071,
								12090
							],
							[
								12187,
								12208
							],
							[
								13097,
								13119
							],
							[
								13529,
								13550
							],
							[
								13816,
								13829
							],
							[
								14596,
								14608
							],
							[
								16271,
								16306
							],
							[
								16901,
								16920
							],
							[
								17028,
								17044
							],
							[
								17179,
								17196
							],
							[
								17241,
								17254
							],
							[
								17290,
								17300
							],
							[
								17714,
								17730
							],
							[
								17819,
								17838
							],
							[
								17849,
								17868
							],
							[
								17894,
								17914
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							"async function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACQAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACfAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnwMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					130,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4377,
								4406
							],
							[
								4509,
								4548
							],
							[
								4621,
								4631
							],
							[
								4751,
								4771
							],
							[
								6578,
								6612
							],
							[
								6673,
								6705
							],
							[
								6983,
								7016
							],
							[
								8011,
								8016
							],
							[
								8821,
								8825
							],
							[
								8965,
								8969
							],
							[
								9175,
								9184
							],
							[
								9315,
								9322
							],
							[
								9589,
								9596
							],
							[
								9660,
								9667
							],
							[
								9715,
								9730
							],
							[
								9829,
								9849
							],
							[
								10425,
								10437
							],
							[
								10536,
								10548
							],
							[
								10750,
								10766
							],
							[
								11388,
								11406
							],
							[
								11542,
								11571
							],
							[
								11991,
								12010
							],
							[
								12107,
								12128
							],
							[
								13017,
								13039
							],
							[
								13449,
								13470
							],
							[
								13736,
								13749
							],
							[
								14516,
								14528
							],
							[
								16191,
								16226
							],
							[
								16821,
								16840
							],
							[
								16948,
								16964
							],
							[
								17099,
								17116
							],
							[
								17161,
								17174
							],
							[
								17210,
								17220
							],
							[
								17634,
								17650
							],
							[
								17739,
								17758
							],
							[
								17769,
								17788
							],
							[
								17814,
								17834
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							"async function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							"async function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file,rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACfAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACfAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnwMAAE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUscmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					131,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACfAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSxyZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					132,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4379,
								4408
							],
							[
								4548,
								4587
							],
							[
								4660,
								4670
							],
							[
								4790,
								4810
							],
							[
								6617,
								6651
							],
							[
								6712,
								6744
							],
							[
								7023,
								7055
							],
							[
								8081,
								8086
							],
							[
								8901,
								8905
							],
							[
								9046,
								9050
							],
							[
								9259,
								9268
							],
							[
								9399,
								9406
							],
							[
								9688,
								9695
							],
							[
								9776,
								9783
							],
							[
								9847,
								9863
							],
							[
								9963,
								9983
							],
							[
								10683,
								10695
							],
							[
								10794,
								10806
							],
							[
								11008,
								11024
							],
							[
								11697,
								11715
							],
							[
								11851,
								11880
							],
							[
								12300,
								12319
							],
							[
								12416,
								12437
							],
							[
								13342,
								13364
							],
							[
								13792,
								13813
							],
							[
								14093,
								14106
							],
							[
								14911,
								14923
							],
							[
								16594,
								16629
							],
							[
								17224,
								17243
							],
							[
								17351,
								17367
							],
							[
								17502,
								17519
							],
							[
								17564,
								17577
							],
							[
								17613,
								17623
							],
							[
								18037,
								18053
							],
							[
								18142,
								18161
							],
							[
								18172,
								18191
							],
							[
								18217,
								18237
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							"async function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							"async function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAoAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					133,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4379,
								4408
							],
							[
								4548,
								4587
							],
							[
								4660,
								4670
							],
							[
								4790,
								4810
							],
							[
								6617,
								6651
							],
							[
								6712,
								6744
							],
							[
								7015,
								7051
							],
							[
								8077,
								8082
							],
							[
								8897,
								8901
							],
							[
								9042,
								9046
							],
							[
								9255,
								9264
							],
							[
								9395,
								9402
							],
							[
								9684,
								9691
							],
							[
								9772,
								9779
							],
							[
								9843,
								9859
							],
							[
								9959,
								9979
							],
							[
								10679,
								10691
							],
							[
								10790,
								10802
							],
							[
								11004,
								11020
							],
							[
								11693,
								11711
							],
							[
								11847,
								11876
							],
							[
								12296,
								12315
							],
							[
								12412,
								12433
							],
							[
								13338,
								13360
							],
							[
								13788,
								13809
							],
							[
								14089,
								14102
							],
							[
								14907,
								14919
							],
							[
								16590,
								16625
							],
							[
								17220,
								17239
							],
							[
								17347,
								17363
							],
							[
								17498,
								17515
							],
							[
								17560,
								17573
							],
							[
								17609,
								17619
							],
							[
								18033,
								18049
							],
							[
								18138,
								18157
							],
							[
								18168,
								18187
							],
							[
								18213,
								18233
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							"async function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACgAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAoAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKADAABNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KUmVhZEV4aWYoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+CiAgbWFpbiguLi5hcmdzKQogIChhLCB2KSA9PgogICh2LCBwdiwgbykgPT4KICAobW9kdWxlLCAuLi5hcmdzKSA9PgogIG0gPT4KICAuc2hvdyA9IGFyZyA9PgogIC5jbGVhbnVwID0gKCkgPT4KICAoLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CiAgb3V0ID0gcyA9PgogIChsZXZlbCwgbWVzc2FnZSkgPT4KICB1cGxvYWQocmVxLCByZXMpCiAgcHJveHkocmVxLCByZXMpCiAgZmlsZXMocmVxLCByZXNwKQogIG4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACgAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					134,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4379,
								4408
							],
							[
								4548,
								4587
							],
							[
								4660,
								4670
							],
							[
								4790,
								4810
							],
							[
								6617,
								6651
							],
							[
								6712,
								6744
							],
							[
								7015,
								7051
							],
							[
								8073,
								8078
							],
							[
								8893,
								8897
							],
							[
								9038,
								9042
							],
							[
								9251,
								9260
							],
							[
								9391,
								9398
							],
							[
								9680,
								9687
							],
							[
								9768,
								9775
							],
							[
								9839,
								9855
							],
							[
								9955,
								9975
							],
							[
								10675,
								10687
							],
							[
								10786,
								10798
							],
							[
								11000,
								11016
							],
							[
								11689,
								11707
							],
							[
								11843,
								11872
							],
							[
								12292,
								12311
							],
							[
								12408,
								12429
							],
							[
								13334,
								13356
							],
							[
								13784,
								13805
							],
							[
								14085,
								14098
							],
							[
								14903,
								14915
							],
							[
								16586,
								16621
							],
							[
								17216,
								17235
							],
							[
								17343,
								17359
							],
							[
								17494,
								17511
							],
							[
								17556,
								17569
							],
							[
								17605,
								17615
							],
							[
								18029,
								18045
							],
							[
								18134,
								18153
							],
							[
								18164,
								18183
							],
							[
								18209,
								18229
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							"async function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAoAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					135,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					136,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4379,
								4408
							],
							[
								4548,
								4587
							],
							[
								4660,
								4670
							],
							[
								4790,
								4810
							],
							[
								6617,
								6651
							],
							[
								6712,
								6744
							],
							[
								7015,
								7051
							],
							[
								8073,
								8078
							],
							[
								8893,
								8897
							],
							[
								9038,
								9042
							],
							[
								9251,
								9260
							],
							[
								9391,
								9398
							],
							[
								9680,
								9687
							],
							[
								9768,
								9775
							],
							[
								9839,
								9855
							],
							[
								9955,
								9975
							],
							[
								10675,
								10687
							],
							[
								10786,
								10798
							],
							[
								11000,
								11016
							],
							[
								11689,
								11707
							],
							[
								11843,
								11872
							],
							[
								12292,
								12311
							],
							[
								12408,
								12429
							],
							[
								13334,
								13356
							],
							[
								13784,
								13805
							],
							[
								14085,
								14098
							],
							[
								14903,
								14915
							],
							[
								16586,
								16621
							],
							[
								17216,
								17235
							],
							[
								17343,
								17359
							],
							[
								17494,
								17511
							],
							[
								17556,
								17569
							],
							[
								17605,
								17615
							],
							[
								18029,
								18045
							],
							[
								18134,
								18153
							],
							[
								18164,
								18183
							],
							[
								18209,
								18229
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							"async function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAoAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					137,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					138,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4379,
								4408
							],
							[
								4548,
								4587
							],
							[
								4660,
								4670
							],
							[
								4790,
								4810
							],
							[
								6617,
								6651
							],
							[
								6712,
								6744
							],
							[
								7015,
								7051
							],
							[
								8073,
								8078
							],
							[
								8893,
								8897
							],
							[
								9038,
								9042
							],
							[
								9251,
								9260
							],
							[
								9391,
								9398
							],
							[
								9680,
								9687
							],
							[
								9768,
								9775
							],
							[
								9839,
								9855
							],
							[
								9955,
								9975
							],
							[
								10675,
								10687
							],
							[
								10786,
								10798
							],
							[
								11000,
								11016
							],
							[
								11689,
								11707
							],
							[
								11843,
								11872
							],
							[
								12292,
								12311
							],
							[
								12408,
								12429
							],
							[
								13334,
								13356
							],
							[
								13784,
								13805
							],
							[
								14085,
								14098
							],
							[
								14903,
								14915
							],
							[
								16586,
								16621
							],
							[
								17216,
								17235
							],
							[
								17343,
								17359
							],
							[
								17494,
								17511
							],
							[
								17556,
								17569
							],
							[
								17605,
								17615
							],
							[
								18029,
								18045
							],
							[
								18134,
								18153
							],
							[
								18164,
								18183
							],
							[
								18209,
								18229
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							"async function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAoAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					139,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4377,
								4404
							],
							[
								4544,
								4583
							],
							[
								4656,
								4666
							],
							[
								4786,
								4806
							],
							[
								6613,
								6647
							],
							[
								6708,
								6740
							],
							[
								7011,
								7047
							],
							[
								8069,
								8074
							],
							[
								8889,
								8893
							],
							[
								9034,
								9038
							],
							[
								9247,
								9256
							],
							[
								9387,
								9394
							],
							[
								9676,
								9683
							],
							[
								9764,
								9771
							],
							[
								9835,
								9851
							],
							[
								9951,
								9971
							],
							[
								10671,
								10683
							],
							[
								10782,
								10794
							],
							[
								10996,
								11012
							],
							[
								11685,
								11703
							],
							[
								11839,
								11868
							],
							[
								12288,
								12307
							],
							[
								12404,
								12425
							],
							[
								13330,
								13352
							],
							[
								13780,
								13801
							],
							[
								14081,
								14094
							],
							[
								14899,
								14911
							],
							[
								16582,
								16617
							],
							[
								17212,
								17231
							],
							[
								17339,
								17355
							],
							[
								17490,
								17507
							],
							[
								17552,
								17565
							],
							[
								17601,
								17611
							],
							[
								18025,
								18041
							],
							[
								18130,
								18149
							],
							[
								18160,
								18179
							],
							[
								18205,
								18225
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACgAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAoAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKADAABNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KUmVhZEV4aWYoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+CiAgbWFpbiguLi5hcmdzKQogIChhLCB2KSA9PgogICh2LCBwdiwgbykgPT4KICAobW9kdWxlLCAuLi5hcmdzKSA9PgogIG0gPT4KICAuc2hvdyA9IGFyZyA9PgogIC5jbGVhbnVwID0gKCkgPT4KICAoLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CiAgb3V0ID0gcyA9PgogIChsZXZlbCwgbWVzc2FnZSkgPT4KICB1cGxvYWQocmVxLCByZXMpCiAgcHJveHkocmVxLCByZXMpCiAgZmlsZXMocmVxLCByZXNwKQogIG4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACgAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					140,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4377,
								4404
							],
							[
								4565,
								4604
							],
							[
								4677,
								4687
							],
							[
								4807,
								4827
							],
							[
								6634,
								6668
							],
							[
								6729,
								6761
							],
							[
								7032,
								7068
							],
							[
								8090,
								8095
							],
							[
								8910,
								8914
							],
							[
								9055,
								9059
							],
							[
								9268,
								9277
							],
							[
								9408,
								9415
							],
							[
								9697,
								9704
							],
							[
								9785,
								9792
							],
							[
								9856,
								9872
							],
							[
								9972,
								9992
							],
							[
								10692,
								10704
							],
							[
								10803,
								10815
							],
							[
								11017,
								11033
							],
							[
								11706,
								11724
							],
							[
								11860,
								11889
							],
							[
								12309,
								12328
							],
							[
								12425,
								12446
							],
							[
								13351,
								13373
							],
							[
								13801,
								13822
							],
							[
								14102,
								14115
							],
							[
								14920,
								14932
							],
							[
								16603,
								16638
							],
							[
								17233,
								17252
							],
							[
								17360,
								17376
							],
							[
								17511,
								17528
							],
							[
								17573,
								17586
							],
							[
								17622,
								17632
							],
							[
								18046,
								18062
							],
							[
								18151,
								18170
							],
							[
								18181,
								18200
							],
							[
								18226,
								18246
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAoAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					141,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4377,
								4404
							],
							[
								4569,
								4608
							],
							[
								4681,
								4691
							],
							[
								4811,
								4831
							],
							[
								6638,
								6672
							],
							[
								6733,
								6765
							],
							[
								7036,
								7072
							],
							[
								8094,
								8099
							],
							[
								8914,
								8918
							],
							[
								9059,
								9063
							],
							[
								9272,
								9281
							],
							[
								9412,
								9419
							],
							[
								9701,
								9708
							],
							[
								9789,
								9796
							],
							[
								9860,
								9876
							],
							[
								9976,
								9996
							],
							[
								10696,
								10708
							],
							[
								10807,
								10819
							],
							[
								11021,
								11037
							],
							[
								11710,
								11728
							],
							[
								11864,
								11893
							],
							[
								12313,
								12332
							],
							[
								12429,
								12450
							],
							[
								13355,
								13377
							],
							[
								13805,
								13826
							],
							[
								14106,
								14119
							],
							[
								14924,
								14936
							],
							[
								16607,
								16642
							],
							[
								17237,
								17256
							],
							[
								17364,
								17380
							],
							[
								17515,
								17532
							],
							[
								17577,
								17590
							],
							[
								17626,
								17636
							],
							[
								18050,
								18066
							],
							[
								18155,
								18174
							],
							[
								18185,
								18204
							],
							[
								18230,
								18250
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAoAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					142,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4377,
								4404
							],
							[
								4569,
								4608
							],
							[
								4681,
								4691
							],
							[
								4811,
								4831
							],
							[
								6638,
								6672
							],
							[
								6733,
								6765
							],
							[
								7036,
								7072
							],
							[
								8094,
								8099
							],
							[
								8914,
								8918
							],
							[
								9059,
								9063
							],
							[
								9272,
								9281
							],
							[
								9412,
								9419
							],
							[
								9701,
								9708
							],
							[
								9789,
								9796
							],
							[
								9860,
								9876
							],
							[
								9976,
								9996
							],
							[
								10696,
								10708
							],
							[
								10807,
								10819
							],
							[
								11021,
								11037
							],
							[
								11710,
								11728
							],
							[
								11864,
								11893
							],
							[
								12313,
								12332
							],
							[
								12429,
								12441
							],
							[
								12520,
								12541
							],
							[
								13446,
								13468
							],
							[
								13896,
								13917
							],
							[
								14197,
								14210
							],
							[
								15015,
								15027
							],
							[
								16698,
								16733
							],
							[
								17328,
								17347
							],
							[
								17455,
								17471
							],
							[
								17606,
								17623
							],
							[
								17668,
								17681
							],
							[
								17717,
								17727
							],
							[
								18141,
								18157
							],
							[
								18246,
								18265
							],
							[
								18276,
								18295
							],
							[
								18321,
								18341
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onRead(data)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAArwMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					143,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4377,
								4404
							],
							[
								4569,
								4608
							],
							[
								4681,
								4691
							],
							[
								4811,
								4831
							],
							[
								6638,
								6672
							],
							[
								6733,
								6765
							],
							[
								7036,
								7072
							],
							[
								8094,
								8099
							],
							[
								8914,
								8918
							],
							[
								9059,
								9063
							],
							[
								9272,
								9281
							],
							[
								9412,
								9419
							],
							[
								9701,
								9708
							],
							[
								9789,
								9796
							],
							[
								9860,
								9876
							],
							[
								9976,
								9996
							],
							[
								10696,
								10708
							],
							[
								10807,
								10819
							],
							[
								11021,
								11037
							],
							[
								11710,
								11728
							],
							[
								11864,
								11893
							],
							[
								12313,
								12332
							],
							[
								12429,
								12441
							],
							[
								12520,
								12541
							],
							[
								13446,
								13468
							],
							[
								13896,
								13917
							],
							[
								14197,
								14210
							],
							[
								15015,
								15027
							],
							[
								16698,
								16733
							],
							[
								17328,
								17347
							],
							[
								17455,
								17471
							],
							[
								17606,
								17623
							],
							[
								17668,
								17681
							],
							[
								17717,
								17727
							],
							[
								18141,
								18157
							],
							[
								18246,
								18265
							],
							[
								18276,
								18295
							],
							[
								18321,
								18341
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onRead(data)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACvAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uUmVhZChkYXRhKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAArwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK8DAABNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KUmVhZEV4aWYoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+CiAgbWFpbiguLi5hcmdzKQogIChhLCB2KSA9PgogICh2LCBwdiwgbykgPT4KICAobW9kdWxlLCAuLi5hcmdzKSA9PgogIG0gPT4KICAuc2hvdyA9IGFyZyA9PgogIC5jbGVhbnVwID0gKCkgPT4KICAoLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CiAgb3V0ID0gcyA9PgogIChsZXZlbCwgbWVzc2FnZSkgPT4KICB1cGxvYWQocmVxLCByZXMpCiAgcHJveHkocmVxLCByZXMpCiAgZmlsZXMocmVxLCByZXNwKQogIG4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25SZWFkKGRhdGEpCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAACvAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					144,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4377,
								4404
							],
							[
								4569,
								4608
							],
							[
								4681,
								4691
							],
							[
								4811,
								4831
							],
							[
								6638,
								6672
							],
							[
								6733,
								6765
							],
							[
								7036,
								7072
							],
							[
								8094,
								8099
							],
							[
								8914,
								8918
							],
							[
								9059,
								9063
							],
							[
								9272,
								9281
							],
							[
								9412,
								9419
							],
							[
								9701,
								9708
							],
							[
								9789,
								9796
							],
							[
								9860,
								9876
							],
							[
								9976,
								9996
							],
							[
								10696,
								10708
							],
							[
								10807,
								10819
							],
							[
								11021,
								11037
							],
							[
								11710,
								11728
							],
							[
								11864,
								11893
							],
							[
								12313,
								12332
							],
							[
								12429,
								12441
							],
							[
								12520,
								12541
							],
							[
								13446,
								13468
							],
							[
								13896,
								13917
							],
							[
								14197,
								14210
							],
							[
								15015,
								15027
							],
							[
								16698,
								16733
							],
							[
								17328,
								17347
							],
							[
								17455,
								17471
							],
							[
								17606,
								17623
							],
							[
								17668,
								17681
							],
							[
								17717,
								17727
							],
							[
								18141,
								18157
							],
							[
								18246,
								18265
							],
							[
								18276,
								18295
							],
							[
								18321,
								18341
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onRead(data)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACvAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uUmVhZChkYXRhKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAArwMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					145,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1013,
								1046
							],
							[
								1117,
								1140
							],
							[
								1487,
								1498
							],
							[
								1588,
								1599
							],
							[
								1663,
								1674
							],
							[
								1728,
								1737
							],
							[
								1775,
								1786
							],
							[
								1874,
								1896
							],
							[
								2193,
								2203
							],
							[
								2447,
								2461
							],
							[
								3388,
								3412
							],
							[
								3538,
								3542
							],
							[
								3634,
								3648
							],
							[
								3748,
								3764
							],
							[
								4097,
								4110
							],
							[
								4128,
								4133
							],
							[
								4215,
								4222
							],
							[
								4250,
								4255
							],
							[
								4377,
								4402
							],
							[
								4577,
								4616
							],
							[
								4689,
								4699
							],
							[
								4819,
								4839
							],
							[
								6646,
								6680
							],
							[
								6741,
								6773
							],
							[
								7044,
								7078
							],
							[
								8098,
								8103
							],
							[
								8918,
								8922
							],
							[
								9063,
								9067
							],
							[
								9276,
								9285
							],
							[
								9416,
								9423
							],
							[
								9705,
								9712
							],
							[
								9793,
								9800
							],
							[
								9864,
								9880
							],
							[
								9980,
								10000
							],
							[
								10700,
								10712
							],
							[
								10811,
								10823
							],
							[
								11025,
								11041
							],
							[
								11714,
								11732
							],
							[
								11868,
								11897
							],
							[
								12317,
								12336
							],
							[
								12433,
								12445
							],
							[
								12535,
								12556
							],
							[
								13461,
								13483
							],
							[
								13911,
								13932
							],
							[
								14212,
								14225
							],
							[
								15030,
								15042
							],
							[
								16713,
								16748
							],
							[
								17343,
								17362
							],
							[
								17470,
								17486
							],
							[
								17621,
								17638
							],
							[
								17683,
								17696
							],
							[
								17732,
								17742
							],
							[
								18156,
								18172
							],
							[
								18261,
								18280
							],
							[
								18291,
								18310
							],
							[
								18336,
								18356
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onRead(data)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACvAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uUmVhZChkYXRhKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAArwMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					146,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACvAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uUmVhZChkYXRhKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					147,
					3,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					148,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/misc.js",
			"settings":
			{
				"buffer_size": 39289,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOKCAAAAAAAA44IAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOKCAAAAAAAA4oIAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAOOCAAAAAAAAuYQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOOCAAAAAAAA44IAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"paste",
					null,
					"AgAAALmEAAAAAAAA24gAAAAAAAAAAAAA24gAAAAAAADbiAAAAAAAAAEAAAAK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALqEAAAAAAAAuYQAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\nexport"
					},
					"BwAAANuIAAAAAAAA3IgAAAAAAAAAAAAA3IgAAAAAAADdiAAAAAAAAAAAAADdiAAAAAAAAN6IAAAAAAAAAAAAAN6IAAAAAAAA34gAAAAAAAAAAAAA34gAAAAAAADgiAAAAAAAAAAAAADgiAAAAAAAAOGIAAAAAAAAAAAAAOGIAAAAAAAA4ogAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANuIAAAAAAAA24gAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " c"
					},
					"AgAAAOKIAAAAAAAA44gAAAAAAAAAAAAA44gAAAAAAADkiAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOKIAAAAAAAA4ogAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "ont"
					},
					"AwAAAOSIAAAAAAAA5YgAAAAAAAAAAAAA5YgAAAAAAADmiAAAAAAAAAAAAADmiAAAAAAAAOeIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOSIAAAAAAAA5IgAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOeIAAAAAAAA6IgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOeIAAAAAAAA54gAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					2,
					"left_delete",
					null,
					"AgAAAOeIAAAAAAAA54gAAAAAAAABAAAAIOaIAAAAAAAA5ogAAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOiIAAAAAAAA6IgAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "st"
					},
					"AgAAAOaIAAAAAAAA54gAAAAAAAAAAAAA54gAAAAAAADoiAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOaIAAAAAAAA5ogAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " isArray"
					},
					"CAAAAOiIAAAAAAAA6YgAAAAAAAAAAAAA6YgAAAAAAADqiAAAAAAAAAAAAADqiAAAAAAAAOuIAAAAAAAAAAAAAOuIAAAAAAAA7IgAAAAAAAAAAAAA7IgAAAAAAADtiAAAAAAAAAAAAADtiAAAAAAAAO6IAAAAAAAAAAAAAO6IAAAAAAAA74gAAAAAAAAAAAAA74gAAAAAAADwiAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOiIAAAAAAAA6IgAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPCIAAAAAAAA8YgAAAAAAAAAAAAA8YgAAAAAAADyiAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPCIAAAAAAAA8IgAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPKIAAAAAAAA84gAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPKIAAAAAAAA8ogAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAPOIAAAAAAAA9IgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPOIAAAAAAAA84gAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAPSIAAAAAAAA9YgAAAAAAAAAAAAA9YgAAAAAAAD2iAAAAAAAAAAAAAD2iAAAAAAAAPeIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPSIAAAAAAAA9IgAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " Array.isAr"
					},
					"CwAAAPeIAAAAAAAA+IgAAAAAAAAAAAAA+IgAAAAAAAD5iAAAAAAAAAAAAAD5iAAAAAAAAPqIAAAAAAAAAAAAAPqIAAAAAAAA+4gAAAAAAAAAAAAA+4gAAAAAAAD8iAAAAAAAAAAAAAD8iAAAAAAAAP2IAAAAAAAAAAAAAP2IAAAAAAAA/ogAAAAAAAAAAAAA/ogAAAAAAAD/iAAAAAAAAAAAAAD/iAAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAYkAAAAAAAAAAAAAAYkAAAAAAAACiQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPeIAAAAAAAA94gAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "ray"
					},
					"AwAAAAKJAAAAAAAAA4kAAAAAAAAAAAAAA4kAAAAAAAAEiQAAAAAAAAAAAAAEiQAAAAAAAAWJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAKJAAAAAAAAAokAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAWJAAAAAAAAB4kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAWJAAAAAAAABYkAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAAaJAAAAAAAAB4kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAaJAAAAAAAABokAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAiJAAAAAAAACYkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAiJAAAAAAAACIkAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAqJAAAAAAAAC4kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAqJAAAAAAAACokAAAAAAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAqJAAAAAAAAC4kAAAAAAAAAAAAAC4kAAAAAAAAMiQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAqJAAAAAAAACokAAAAAAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAAAuJAAAAAAAArIwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAuJAAAAAAAAC4kAAAAAAAAAAAAAAAAAAA"
				],
				[
					55,
					1,
					"paste",
					null,
					"AQAAAK2MAAAAAAAAzI0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK2MAAAAAAAArYwAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMyNAAAAAAAAzY0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMyNAAAAAAAAzI0AAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAMiNAAAAAAAATY4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIjQAAAAAAAMiNAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE2OAAAAAAAATo4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNjgAAAAAAAE2OAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"cut",
					null,
					"AQAAAMiNAAAAAAAAyI0AAAAAAACFAAAACmV4cG9ydCBmdW5jdGlvbiBkdXBBcnJheUJ1ZmZlcihidWYsIHN0YXJ0LCBsZW5ndGgpIHsKICBsZXQgYSA9IG5ldyBVaW50OEFycmF5KGJ1Ziwgc3RhcnQsbGVuZ3RoKTsKICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoWy4uLmFdKTsKfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIjQAAAAAAAE2OAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					2,
					"paste",
					null,
					"AgAAAMiNAAAAAAAATY4AAAAAAAAAAAAATY4AAAAAAADSjgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIjQAAAAAAAMiNAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "getTyüe"
					},
					"CAAAAF6OAAAAAAAAX44AAAAAAAAAAAAAX44AAAAAAABfjgAAAAAAAA4AAABkdXBBcnJheUJ1ZmZlcl+OAAAAAAAAYI4AAAAAAAAAAAAAYI4AAAAAAABhjgAAAAAAAAAAAABhjgAAAAAAAGKOAAAAAAAAAAAAAGKOAAAAAAAAY44AAAAAAAAAAAAAY44AAAAAAABkjgAAAAAAAAAAAABkjgAAAAAAAGWOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABejgAAAAAAAGyOAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					2,
					"left_delete",
					null,
					"AgAAAGSOAAAAAAAAZI4AAAAAAAABAAAAZWOOAAAAAAAAY44AAAAAAAACAAAAw7w",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABljgAAAAAAAGWOAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "peName"
					},
					"BgAAAGOOAAAAAAAAZI4AAAAAAAAAAAAAZI4AAAAAAABljgAAAAAAAAAAAABljgAAAAAAAGaOAAAAAAAAAAAAAGaOAAAAAAAAZ44AAAAAAAAAAAAAZ44AAAAAAABojgAAAAAAAAAAAABojgAAAAAAAGmOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjjgAAAAAAAGOOAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AgAAAGqOAAAAAAAAa44AAAAAAAAAAAAAa44AAAAAAABrjgAAAAAAABIAAABidWYsIHN0YXJ0LCBsZW5ndGg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqjgAAAAAAAHyOAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAG6OAAAAAAAAb44AAAAAAAAAAAAAb44AAAAAAABxjgAAAAAAAAAAAABxjgAAAAAAAHKOAAAAAAAAAAAAAHKOAAAAAAAAc44AAAAAAAAAAAAAc44AAAAAAAB0jgAAAAAAAAAAAAB0jgAAAAAAAHWOAAAAAAAAAAAAAHWOAAAAAAAAdo4AAAAAAAAAAAAAdo4AAAAAAAB3jgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABujgAAAAAAAG6OAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " typeof"
					},
					"BwAAAHeOAAAAAAAAeI4AAAAAAAAAAAAAeI4AAAAAAAB5jgAAAAAAAAAAAAB5jgAAAAAAAHqOAAAAAAAAAAAAAHqOAAAAAAAAe44AAAAAAAAAAAAAe44AAAAAAAB8jgAAAAAAAAAAAAB8jgAAAAAAAH2OAAAAAAAAAAAAAH2OAAAAAAAAfo4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3jgAAAAAAAHeOAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " v;"
					},
					"AwAAAH6OAAAAAAAAf44AAAAAAAAAAAAAf44AAAAAAACAjgAAAAAAAAAAAACAjgAAAAAAAIGOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+jgAAAAAAAH6OAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"right_delete",
					null,
					"AQAAAIGOAAAAAAAAgY4AAAAAAABOAAAACiAgbGV0IGEgPSBuZXcgVWludDhBcnJheShidWYsIHN0YXJ0LGxlbmd0aCk7CiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFsuLi5hXSk7",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBjgAAAAAAAM+OAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"cut",
					null,
					"AQAAAE2OAAAAAAAATY4AAAAAAAA2AAAACmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlTmFtZSh2KSB7CiAgcmV0dXJuIHR5cGVvZiB2Owp9",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNjgAAAAAAAIOOAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					2,
					"paste",
					null,
					"AgAAAE2OAAAAAAAAg44AAAAAAAAAAAAAg44AAAAAAAC5jgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNjgAAAAAAAE2OAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "ois"
					},
					"BAAAAJSOAAAAAAAAlY4AAAAAAAAAAAAAlY4AAAAAAACVjgAAAAAAAAsAAABnZXRUeXBlTmFtZZWOAAAAAAAAlo4AAAAAAAAAAAAAlo4AAAAAAACXjgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUjgAAAAAAAJ+OAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					3,
					"left_delete",
					null,
					"AwAAAJaOAAAAAAAAlo4AAAAAAAABAAAAc5WOAAAAAAAAlY4AAAAAAAABAAAAaZSOAAAAAAAAlI4AAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXjgAAAAAAAJeOAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "isArrayBuffer"
					},
					"DQAAAJSOAAAAAAAAlY4AAAAAAAAAAAAAlY4AAAAAAACWjgAAAAAAAAAAAACWjgAAAAAAAJeOAAAAAAAAAAAAAJeOAAAAAAAAmI4AAAAAAAAAAAAAmI4AAAAAAACZjgAAAAAAAAAAAACZjgAAAAAAAJqOAAAAAAAAAAAAAJqOAAAAAAAAm44AAAAAAAAAAAAAm44AAAAAAACcjgAAAAAAAAAAAACcjgAAAAAAAJ2OAAAAAAAAAAAAAJ2OAAAAAAAAno4AAAAAAAAAAAAAno4AAAAAAACfjgAAAAAAAAAAAACfjgAAAAAAAKCOAAAAAAAAAAAAAKCOAAAAAAAAoY4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUjgAAAAAAAJSOAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAKKOAAAAAAAAoo4AAAAAAAABAAAAdg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjjgAAAAAAAKOOAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAKKOAAAAAAAAo44AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACijgAAAAAAAKKOAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"left_delete",
					null,
					"AQAAAKKOAAAAAAAAoo4AAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjjgAAAAAAAKOOAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "buf"
					},
					"AwAAAKKOAAAAAAAAo44AAAAAAAAAAAAAo44AAAAAAACkjgAAAAAAAAAAAACkjgAAAAAAAKWOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACijgAAAAAAAKKOAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"BAAAALKOAAAAAAAAs44AAAAAAAAAAAAAs44AAAAAAACzjgAAAAAAAAkAAAB0eXBlb2YgdjuzjgAAAAAAALSOAAAAAAAAAAAAALSOAAAAAAAAtY4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyjgAAAAAAALuOAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					3,
					"left_delete",
					null,
					"AwAAALSOAAAAAAAAtI4AAAAAAAABAAAAdLOOAAAAAAAAs44AAAAAAAABAAAAZbKOAAAAAAAAso4AAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1jgAAAAAAALWOAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "isObject"
					},
					"CAAAALKOAAAAAAAAs44AAAAAAAAAAAAAs44AAAAAAAC0jgAAAAAAAAAAAAC0jgAAAAAAALWOAAAAAAAAAAAAALWOAAAAAAAAto4AAAAAAAAAAAAAto4AAAAAAAC3jgAAAAAAAAAAAAC3jgAAAAAAALiOAAAAAAAAAAAAALiOAAAAAAAAuY4AAAAAAAAAAAAAuY4AAAAAAAC6jgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyjgAAAAAAALKOAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALqOAAAAAAAAvI4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6jgAAAAAAALqOAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "buf"
					},
					"AwAAALuOAAAAAAAAvI4AAAAAAAAAAAAAvI4AAAAAAAC9jgAAAAAAAAAAAAC9jgAAAAAAAL6OAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7jgAAAAAAALuOAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAL+OAAAAAAAAwI4AAAAAAAAAAAAAwI4AAAAAAADBjgAAAAAAAAAAAADBjgAAAAAAAMKOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/jgAAAAAAAL+OAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " buf"
					},
					"BAAAAMKOAAAAAAAAw44AAAAAAAAAAAAAw44AAAAAAADEjgAAAAAAAAAAAADEjgAAAAAAAMWOAAAAAAAAAAAAAMWOAAAAAAAAxo4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCjgAAAAAAAMKOAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " instanceof"
					},
					"CwAAAMaOAAAAAAAAx44AAAAAAAAAAAAAx44AAAAAAADIjgAAAAAAAAAAAADIjgAAAAAAAMmOAAAAAAAAAAAAAMmOAAAAAAAAyo4AAAAAAAAAAAAAyo4AAAAAAADLjgAAAAAAAAAAAADLjgAAAAAAAMyOAAAAAAAAAAAAAMyOAAAAAAAAzY4AAAAAAAAAAAAAzY4AAAAAAADOjgAAAAAAAAAAAADOjgAAAAAAAM+OAAAAAAAAAAAAAM+OAAAAAAAA0I4AAAAAAAAAAAAA0I4AAAAAAADRjgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGjgAAAAAAAMaOAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " Arra"
					},
					"BQAAANGOAAAAAAAA0o4AAAAAAAAAAAAA0o4AAAAAAADTjgAAAAAAAAAAAADTjgAAAAAAANSOAAAAAAAAAAAAANSOAAAAAAAA1Y4AAAAAAAAAAAAA1Y4AAAAAAADWjgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRjgAAAAAAANGOAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert_completion",
					{
						"completion": "ArrayBuffer",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ArrayBuffer"
					},
					"AgAAANKOAAAAAAAA0o4AAAAAAAAEAAAAQXJyYdKOAAAAAAAA3Y4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWjgAAAAAAANaOAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAN2OAAAAAAAA3o4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdjgAAAAAAAN2OAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAN2OAAAAAAAA3Y4AAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADejgAAAAAAAN6OAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAN2OAAAAAAAA3o4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdjgAAAAAAAN2OAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOCOAAAAAAAA4Y4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgjgAAAAAAAOCOAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"paste",
					null,
					"AQAAAOGOAAAAAAAAWI8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhjgAAAAAAAOGOAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAAFiPAAAAAAAANpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYjwAAAAAAAFiPAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"paste",
					null,
					"AQAAADaQAAAAAAAA+pIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2kAAAAAAAADaQAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"right_delete",
					null,
					"AQAAAPqSAAAAAAAA+pIAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6kgAAAAAAAPqSAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPqSAAAAAAAA+5IAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6kgAAAAAAAPqSAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"paste",
					null,
					"AQAAAPuSAAAAAAAAvZYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7kgAAAAAAAPuSAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"paste",
					null,
					"AQAAAL2WAAAAAAAABpkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9lgAAAAAAAL2WAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALAsAAAAAAAAsSwAAAAAAAAAAAAAsSwAAAAAAACxLAAAAAAAALgFAAAKZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoc3RyLCBlbmNvZGluZyA9ICd1dGYtOCcpIHsKICBpZihnbG9iYWxUaGlzLlRleHREZWNvZGVyICYmIGVuY29kaW5nID09ICd1dGYtOCcpIHsKICAgIGxldCBlbmMgPSBuZXcgVGV4dEVuY29kZXIoKTsKICAgIHJldHVybiBlbmMuZW5jb2RlKHN0cikuYnVmZmVyOwogIH0KCiAgaWYoZW5jb2RpbmcgPT0gJ2xhdGluMScpIHsKICAgIGxldCBpLAogICAgICBsZW4gPSBzdHIubGVuZ3RoOwogICAgbGV0IGEgPSBuZXcgVWludDhBcnJheShsZW4pOwogICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgYVtpXSA9IHN0ci5jaGFyQ29kZUF0KGkpOwogICAgfQogICAgcmV0dXJuIGEuYnVmZmVyOwogIH0KICBsZXQgb2Zmc2V0LCBsZW5ndGg7CiAgY29uc3QgZW5kID0gTWF0aC5taW4oKGxlbmd0aCA/PyBzdHIubGVuZ3RoIC0gKG9mZnNldCB8IDApKSArIChvZmZzZXQgfCAwKSwgc3RyLmxlbmd0aCk7CiAgY29uc29sZS5sb2coJ2VuZDonLCBlbmQpOwoKICBjb25zdCBhID0gW107CiAgZm9yKGxldCBpID0gb2Zmc2V0IHwgMDsgaSA8IGVuZDsgaSsrKSB7CiAgICBjb25zdCBjID0gc3RyLmNvZGVQb2ludEF0KGkpOwoKICAgIGlmKGMgPCAweDgwKSB7CiAgICAgIGEucHVzaChjKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmKGMgPCAweDgwMCkgewogICAgICAgIGEucHVzaCgoYyA+PiA2KSB8IDB4YzApOwogICAgICB9IGVsc2UgewogICAgICAgIGlmKGMgPCAweDEwMDAwKSB7CiAgICAgICAgICBhLnB1c2goKGMgPj4gMTIpIHwgMHhlMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmKGMgPCAweDAwMjAwMDAwKSB7CiAgICAgICAgICAgIGEucHVzaCgoYyA+PiAxOCkgfCAweGYwKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmKGMgPCAweDA0MDAwMDAwKSB7CiAgICAgICAgICAgICAgYS5wdXNoKChjID4+IDI0KSB8IDB4ZjgpOwogICAgICAgICAgICB9IGVsc2UgaWYoYyA8IDB4ODAwMDAwMDApIHsKICAgICAgICAgICAgICBhLnB1c2goKGMgPj4gMzApIHwgMHhmYyk7CiAgICAgICAgICAgICAgYS5wdXNoKCgoYyA+PiAyNCkgJiAweDNmKSB8IDB4ODApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGEucHVzaCgoKGMgPj4gMTgpICYgMHgzZikgfCAweDgwKTsKICAgICAgICAgIH0KICAgICAgICAgIGEucHVzaCgoKGMgPj4gMTIpICYgMHgzZikgfCAweDgwKTsKICAgICAgICB9CiAgICAgICAgYS5wdXNoKCgoYyA+PiA2KSAmIDB4M2YpIHwgMHg4MCk7CiAgICAgIH0KICAgICAgYS5wdXNoKChjICYgMHgzZikgfCAweDgwKTsKICAgIH0KICB9CiAgY29uc3QgdThhID0gVWludDhBcnJheS5mcm9tKGEpOwogIGNvbnNvbGUubG9nKCd0b0FycmF5QnVmZmVyJywgeyBhLCB1OGEgfSk7CiAgcmV0dXJuIHU4YS5idWZmZXI7Cn0",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwLAAAAAAAAGgyAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					2,
					"left_delete",
					null,
					"AgAAALAsAAAAAAAAsCwAAAAAAAABAAAAIK8sAAAAAAAArywAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxLAAAAAAAALEsAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"left_delete",
					null,
					"AQAAABWTAAAAAAAAFZMAAAAAAAA5AAAAZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7CiAgcmV0dXJuICcnICsgdmFsdWU7Cn0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVkwAAAAAAAE6TAAAAAAAAAAAAAAAAAAA"
				],
				[
					142,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5mQAAAAAAAHmZAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 186453,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 18691,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					522,
					1,
					"left_delete",
					null,
					"AQAAAFACAAAAAAAAUAIAAAAAAABjAAAAaW1wb3J0IHsgUmVhZEZpbGUsIFdyaXRlRmlsZSwgUmVhZEpTT04sIFdyaXRlSlNPTiwgUmVhZEJKU09OLCBXcml0ZUJKU09OIH0gZnJvbSAnLi9pby1oZWxwZXJzLmpzJzsK",
					"AQAAAAAAAAABAAAAUAIAAAAAAACzAgAAAAAAAAAAAAAAAAAA"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": ".map"
					},
					"BAAAAFceAAAAAAAAWB4AAAAAAAAAAAAAWB4AAAAAAABZHgAAAAAAAAAAAABZHgAAAAAAAFoeAAAAAAAAAAAAAFoeAAAAAAAAWx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVx4AAAAAAABXHgAAAAAAAAAAAAAAAPC/"
				],
				[
					557,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFseAAAAAAAAXR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWx4AAAAAAABbHgAAAAAAAAAAAAAAAPC/"
				],
				[
					558,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAFweAAAAAAAAXR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXB4AAAAAAABcHgAAAAAAAAAAAAAAAPC/"
				],
				[
					559,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAF0eAAAAAAAAXh4AAAAAAAAAAAAAXh4AAAAAAABfHgAAAAAAAAAAAABfHgAAAAAAAGAeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXR4AAAAAAABdHgAAAAAAAAAAAAAAAPC/"
				],
				[
					560,
					1,
					"insert",
					{
						"characters": " path.relative"
					},
					"DgAAAGAeAAAAAAAAYR4AAAAAAAAAAAAAYR4AAAAAAABiHgAAAAAAAAAAAABiHgAAAAAAAGMeAAAAAAAAAAAAAGMeAAAAAAAAZB4AAAAAAAAAAAAAZB4AAAAAAABlHgAAAAAAAAAAAABlHgAAAAAAAGYeAAAAAAAAAAAAAGYeAAAAAAAAZx4AAAAAAAAAAAAAZx4AAAAAAABoHgAAAAAAAAAAAABoHgAAAAAAAGkeAAAAAAAAAAAAAGkeAAAAAAAAah4AAAAAAAAAAAAAah4AAAAAAABrHgAAAAAAAAAAAABrHgAAAAAAAGweAAAAAAAAAAAAAGweAAAAAAAAbR4AAAAAAAAAAAAAbR4AAAAAAABuHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYB4AAAAAAABgHgAAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG4eAAAAAAAAcB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbh4AAAAAAABuHgAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "n,"
					},
					"AgAAAG8eAAAAAAAAcB4AAAAAAAAAAAAAcB4AAAAAAABxHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbx4AAAAAAABvHgAAAAAAAAAAAAAAAPC/"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": " diur"
					},
					"BQAAAHEeAAAAAAAAch4AAAAAAAAAAAAAch4AAAAAAABzHgAAAAAAAAAAAABzHgAAAAAAAHQeAAAAAAAAAAAAAHQeAAAAAAAAdR4AAAAAAAAAAAAAdR4AAAAAAAB2HgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcR4AAAAAAABxHgAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					2,
					"left_delete",
					null,
					"AgAAAHUeAAAAAAAAdR4AAAAAAAABAAAAcnQeAAAAAAAAdB4AAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAdh4AAAAAAAB2HgAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAHQeAAAAAAAAdR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdB4AAAAAAAB0HgAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAHUeAAAAAAAAdx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdR4AAAAAAAB1HgAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAHYeAAAAAAAAdx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdh4AAAAAAAB2HgAAAAAAAAAAAAAAAPC/"
				],
				[
					569,
					6,
					"left_delete",
					null,
					"BgAAAHceAAAAAAAAdx4AAAAAAAABAAAAXXYeAAAAAAAAdh4AAAAAAAABAAAAMHUeAAAAAAAAdR4AAAAAAAABAAAAW3QeAAAAAAAAdB4AAAAAAAABAAAAcnMeAAAAAAAAcx4AAAAAAAABAAAAaXIeAAAAAAAAch4AAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAeB4AAAAAAAB4HgAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": "absa"
					},
					"BAAAAHIeAAAAAAAAcx4AAAAAAAAAAAAAcx4AAAAAAAB0HgAAAAAAAAAAAAB0HgAAAAAAAHUeAAAAAAAAAAAAAHUeAAAAAAAAdh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAch4AAAAAAAByHgAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"left_delete",
					null,
					"AQAAAHUeAAAAAAAAdR4AAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAdh4AAAAAAAB2HgAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": "dir"
					},
					"AwAAAHUeAAAAAAAAdh4AAAAAAAAAAAAAdh4AAAAAAAB3HgAAAAAAAAAAAAB3HgAAAAAAAHgeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdR4AAAAAAAB1HgAAAAAAAAAAAAAAAPC/"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIIeAAAAAAAAgx4AAAAAAAAAAAAAgx4AAAAAAACJHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgh4AAAAAAACCHgAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"insert",
					{
						"characters": "dir"
					},
					"AwAAAIIeAAAAAAAAgx4AAAAAAAAAAAAAgx4AAAAAAACEHgAAAAAAAAAAAACEHgAAAAAAAIUeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgh4AAAAAAACCHgAAAAAAAAAAAAAAAFJA"
				],
				[
					598,
					3,
					"left_delete",
					null,
					"AwAAAIQeAAAAAAAAhB4AAAAAAAABAAAAcoMeAAAAAAAAgx4AAAAAAAABAAAAaYIeAAAAAAAAgh4AAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAhR4AAAAAAACFHgAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					1,
					"cut",
					null,
					"AQAAANkdAAAAAAAA2R0AAAAAAAAyAAAAICAgICAgICAgICAgICBsZXQgYWJzZGlyID0gcGF0aC5yZWFscGF0aChkaXJbMF0pOwo",
					"AQAAAAAAAAABAAAA2R0AAAAAAAALHgAAAAAAAAAAAAAAAPC/"
				],
				[
					606,
					2,
					"paste",
					null,
					"AgAAANkdAAAAAAAACx4AAAAAAAAAAAAACx4AAAAAAAA9HgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2R0AAAAAAADZHQAAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					1,
					"insert_snippet",
					{
						"contents": "[${0:$SELECTION}]"
					},
					"AgAAAOsdAAAAAAAA6x0AAAAAAAAGAAAAYWJzZGly6x0AAAAAAADzHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6x0AAAAAAADxHQAAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"left_delete",
					null,
					"AQAAAOwdAAAAAAAA7B0AAAAAAAAGAAAAYWJzZGly",
					"AQAAAAAAAAABAAAA7B0AAAAAAADyHQAAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"insert",
					{
						"characters": ",re"
					},
					"AwAAAOwdAAAAAAAA7R0AAAAAAAAAAAAA7R0AAAAAAADuHQAAAAAAAAAAAADuHQAAAAAAAO8dAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7B0AAAAAAADsHQAAAAAAAAAAAAAAAPC/"
				],
				[
					616,
					1,
					"insert",
					{
						"characters": "dir;"
					},
					"BAAAAPMdAAAAAAAA9B0AAAAAAAAAAAAA9B0AAAAAAAD1HQAAAAAAAAAAAAD1HQAAAAAAAPYdAAAAAAAAAAAAAPYdAAAAAAAA9x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8x0AAAAAAADzHQAAAAAAAAAAAAAAAPC/"
				],
				[
					618,
					1,
					"left_delete",
					null,
					"AQAAAPcdAAAAAAAA9x0AAAAAAAAWAAAAcGF0aC5yZWFscGF0aChkaXJbMF0pOw",
					"AQAAAAAAAAABAAAA9x0AAAAAAAANHgAAAAAAAAAAAAAAAPC/"
				],
				[
					621,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AwAAAGYeAAAAAAAAZx4AAAAAAAAAAAAAZx4AAAAAAABnHgAAAAAAAAYAAABkaXJbMV1nHgAAAAAAAGgeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZh4AAAAAAABsHgAAAAAAAAAAAAAAAPC/"
				],
				[
					630,
					1,
					"insert",
					{
						"characters": "dir=absdir;"
					},
					"CwAAAJ0eAAAAAAAAnh4AAAAAAAAAAAAAnh4AAAAAAACfHgAAAAAAAAAAAACfHgAAAAAAAKAeAAAAAAAAAAAAAKAeAAAAAAAAoR4AAAAAAAAAAAAAoR4AAAAAAACiHgAAAAAAAAAAAACiHgAAAAAAAKMeAAAAAAAAAAAAAKMeAAAAAAAApB4AAAAAAAAAAAAApB4AAAAAAAClHgAAAAAAAAAAAAClHgAAAAAAAKYeAAAAAAAAAAAAAKYeAAAAAAAApx4AAAAAAAAAAAAApx4AAAAAAACoHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnR4AAAAAAACdHgAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHIeAAAAAAAAcx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAch4AAAAAAAByHgAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAHMeAAAAAAAAdB4AAAAAAAAAAAAAdB4AAAAAAAB1HgAAAAAAAAAAAAB1HgAAAAAAAHYeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcx4AAAAAAABzHgAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"insert",
					{
						"characters": "|¬"
					},
					"AgAAAGwcAAAAAAAAbRwAAAAAAAAAAAAAbRwAAAAAAABuHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbBwAAAAAAABsHAAAAAAAAAAAAAAAAPC/"
				],
				[
					657,
					1,
					"left_delete",
					null,
					"AQAAAG0cAAAAAAAAbRwAAAAAAAACAAAAwqw",
					"AQAAAAAAAAABAAAAbhwAAAAAAABuHAAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": "tif|tiff"
					},
					"CAAAAG0cAAAAAAAAbhwAAAAAAAAAAAAAbhwAAAAAAABvHAAAAAAAAAAAAABvHAAAAAAAAHAcAAAAAAAAAAAAAHAcAAAAAAAAcRwAAAAAAAAAAAAAcRwAAAAAAAByHAAAAAAAAAAAAAByHAAAAAAAAHMcAAAAAAAAAAAAAHMcAAAAAAAAdBwAAAAAAAAAAAAAdBwAAAAAAAB1HAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbRwAAAAAAABtHAAAAAAAAAAAAAAAAPC/"
				],
				[
					663,
					1,
					"insert",
					{
						"characters": "|¢"
					},
					"AgAAAHUcAAAAAAAAdhwAAAAAAAAAAAAAdhwAAAAAAAB3HAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdRwAAAAAAAB1HAAAAAAAAAAAAAAAAPC/"
				],
				[
					664,
					1,
					"left_delete",
					null,
					"AQAAAHYcAAAAAAAAdhwAAAAAAAACAAAAwqI",
					"AQAAAAAAAAABAAAAdxwAAAAAAAB3HAAAAAAAAAAAAAAAAPC/"
				],
				[
					667,
					1,
					"left_delete",
					null,
					"AQAAAHUcAAAAAAAAdRwAAAAAAAABAAAAfA",
					"AQAAAAAAAAABAAAAdhwAAAAAAAB2HAAAAAAAAAAAAAAAAPC/"
				],
				[
					680,
					1,
					"insert",
					{
						"characters": "path.relative"
					},
					"DgAAAK4eAAAAAAAArx4AAAAAAAAAAAAArx4AAAAAAACvHgAAAAAAAAYAAABhYnNkaXKvHgAAAAAAALAeAAAAAAAAAAAAALAeAAAAAAAAsR4AAAAAAAAAAAAAsR4AAAAAAACyHgAAAAAAAAAAAACyHgAAAAAAALMeAAAAAAAAAAAAALMeAAAAAAAAtB4AAAAAAAAAAAAAtB4AAAAAAAC1HgAAAAAAAAAAAAC1HgAAAAAAALYeAAAAAAAAAAAAALYeAAAAAAAAtx4AAAAAAAAAAAAAtx4AAAAAAAC4HgAAAAAAAAAAAAC4HgAAAAAAALkeAAAAAAAAAAAAALkeAAAAAAAAuh4AAAAAAAAAAAAAuh4AAAAAAAC7HgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArh4AAAAAAAC0HgAAAAAAAAAAAAAAAPC/"
				],
				[
					681,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALseAAAAAAAAvR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAux4AAAAAAAC7HgAAAAAAAAAAAAAAAPC/"
				],
				[
					682,
					1,
					"insert",
					{
						"characters": "absdir,"
					},
					"BwAAALweAAAAAAAAvR4AAAAAAAAAAAAAvR4AAAAAAAC+HgAAAAAAAAAAAAC+HgAAAAAAAL8eAAAAAAAAAAAAAL8eAAAAAAAAwB4AAAAAAAAAAAAAwB4AAAAAAADBHgAAAAAAAAAAAADBHgAAAAAAAMIeAAAAAAAAAAAAAMIeAAAAAAAAwx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvB4AAAAAAAC8HgAAAAAAAAAAAAAAAPC/"
				],
				[
					683,
					1,
					"insert",
					{
						"characters": " path.g"
					},
					"BwAAAMMeAAAAAAAAxB4AAAAAAAAAAAAAxB4AAAAAAADFHgAAAAAAAAAAAADFHgAAAAAAAMYeAAAAAAAAAAAAAMYeAAAAAAAAxx4AAAAAAAAAAAAAxx4AAAAAAADIHgAAAAAAAAAAAADIHgAAAAAAAMkeAAAAAAAAAAAAAMkeAAAAAAAAyh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwx4AAAAAAADDHgAAAAAAAAAAAAAAAPC/"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": "etcwd"
					},
					"BQAAAMoeAAAAAAAAyx4AAAAAAAAAAAAAyx4AAAAAAADMHgAAAAAAAAAAAADMHgAAAAAAAM0eAAAAAAAAAAAAAM0eAAAAAAAAzh4AAAAAAAAAAAAAzh4AAAAAAADPHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyh4AAAAAAADKHgAAAAAAAAAAAAAAAPC/"
				],
				[
					685,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAM8eAAAAAAAA0R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzx4AAAAAAADPHgAAAAAAAAAAAAAAAPC/"
				],
				[
					713,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAMAkAAAAAAAAwSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwCQAAAAAAADAJAAAAAAAAAAAAAAAAPC/"
				],
				[
					714,
					1,
					"left_delete",
					null,
					"AQAAAMAkAAAAAAAAwCQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAwSQAAAAAAADBJAAAAAAAAAAAAAAAAPC/"
				],
				[
					716,
					1,
					"insert",
					{
						"characters": "path.g"
					},
					"BgAAALwkAAAAAAAAvSQAAAAAAAAAAAAAvSQAAAAAAAC+JAAAAAAAAAAAAAC+JAAAAAAAAL8kAAAAAAAAAAAAAL8kAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADBJAAAAAAAAAAAAADBJAAAAAAAAMIkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvCQAAAAAAAC8JAAAAAAAAAAAAAAAAPC/"
				],
				[
					717,
					1,
					"left_delete",
					null,
					"AQAAAMEkAAAAAAAAwSQAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAwiQAAAAAAADCJAAAAAAAAAAAAAAAAPC/"
				],
				[
					718,
					1,
					"insert",
					{
						"characters": "relative(("
					},
					"CgAAAMEkAAAAAAAAwiQAAAAAAAAAAAAAwiQAAAAAAADDJAAAAAAAAAAAAADDJAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAAxSQAAAAAAAAAAAAAxSQAAAAAAADGJAAAAAAAAAAAAADGJAAAAAAAAMckAAAAAAAAAAAAAMckAAAAAAAAyCQAAAAAAAAAAAAAyCQAAAAAAADJJAAAAAAAAAAAAADJJAAAAAAAAMokAAAAAAAAAAAAAMokAAAAAAAAyyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwSQAAAAAAADBJAAAAAAAAAAAAAAAAPC/"
				],
				[
					721,
					1,
					"left_delete",
					null,
					"AQAAAMokAAAAAAAAyiQAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAyyQAAAAAAADLJAAAAAAAAAAAAAAAAPC/"
				],
				[
					724,
					1,
					"insert",
					{
						"characters": ",."
					},
					"AgAAAM4kAAAAAAAAzyQAAAAAAAAAAAAAzyQAAAAAAADQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAziQAAAAAAADOJAAAAAAAAAAAAAAAAPC/"
				],
				[
					725,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANAkAAAAAAAA0SQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0CQAAAAAAADQJAAAAAAAAAAAAAAAAPC/"
				],
				[
					726,
					2,
					"left_delete",
					null,
					"AgAAANAkAAAAAAAA0CQAAAAAAAABAAAAIM8kAAAAAAAAzyQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA0SQAAAAAAADRJAAAAAAAAAAAAAAAAPC/"
				],
				[
					727,
					1,
					"insert",
					{
						"characters": " path.getcwd"
					},
					"DAAAAM8kAAAAAAAA0CQAAAAAAAAAAAAA0CQAAAAAAADRJAAAAAAAAAAAAADRJAAAAAAAANIkAAAAAAAAAAAAANIkAAAAAAAA0yQAAAAAAAAAAAAA0yQAAAAAAADUJAAAAAAAAAAAAADUJAAAAAAAANUkAAAAAAAAAAAAANUkAAAAAAAA1iQAAAAAAAAAAAAA1iQAAAAAAADXJAAAAAAAAAAAAADXJAAAAAAAANgkAAAAAAAAAAAAANgkAAAAAAAA2SQAAAAAAAAAAAAA2SQAAAAAAADaJAAAAAAAAAAAAADaJAAAAAAAANskAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzyQAAAAAAADPJAAAAAAAAAAAAAAAAPC/"
				],
				[
					728,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANskAAAAAAAA3SQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2yQAAAAAAADbJAAAAAAAAAAAAAAAAPC/"
				],
				[
					734,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAN4kAAAAAAAA3yQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3iQAAAAAAADeJAAAAAAAAAAAAAAAAPC/"
				],
				[
					748,
					1,
					"insert",
					{
						"characters": ".map(file"
					},
					"CQAAAIQkAAAAAAAAhSQAAAAAAAAAAAAAhSQAAAAAAACGJAAAAAAAAAAAAACGJAAAAAAAAIckAAAAAAAAAAAAAIckAAAAAAAAiCQAAAAAAAAAAAAAiCQAAAAAAACJJAAAAAAAAAAAAACJJAAAAAAAAIokAAAAAAAAAAAAAIokAAAAAAAAiyQAAAAAAAAAAAAAiyQAAAAAAACMJAAAAAAAAAAAAACMJAAAAAAAAI0kAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhCQAAAAAAACEJAAAAAAAAAAAAAAAAPC/"
				],
				[
					749,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAI0kAAAAAAAAjiQAAAAAAAAAAAAAjiQAAAAAAACPJAAAAAAAAAAAAACPJAAAAAAAAJAkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSQAAAAAAACNJAAAAAAAAAAAAAAAAPC/"
				],
				[
					750,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAJAkAAAAAAAAkSQAAAAAAAAAAAAAkSQAAAAAAACSJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkCQAAAAAAACQJAAAAAAAAAAAAAAAAPC/"
				],
				[
					753,
					1,
					"cut",
					null,
					"AQAAALIkAAAAAAAAsiQAAAAAAAA6AAAAc3QgPyBgJHtkaXJ9LyR7ZmlsZX1gIDogcGF0aC5yZWxhdGl2ZShmaWxlLCBwYXRoLmdldGN3ZCgpKQ",
					"AQAAAAAAAAABAAAAsiQAAAAAAADsJAAAAAAAAAAAAAAAAPC/"
				],
				[
					759,
					1,
					"paste",
					null,
					"AQAAAJAkAAAAAAAAyiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkCQAAAAAAACQJAAAAAAAAAAAAAAAAPC/"
				],
				[
					760,
					1,
					"insert",
					{
						"characters": ")."
					},
					"AgAAAMokAAAAAAAAyyQAAAAAAAAAAAAAyyQAAAAAAADMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyiQAAAAAAADKJAAAAAAAAAAAAAAAAPC/"
				],
				[
					761,
					1,
					"left_delete",
					null,
					"AQAAAMskAAAAAAAAyyQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAzCQAAAAAAADMJAAAAAAAAAAAAAAAAPC/"
				],
				[
					762,
					2,
					"right_delete",
					null,
					"AgAAAMskAAAAAAAAyyQAAAAAAAABAAAAIMskAAAAAAAAyyQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAyyQAAAAAAADLJAAAAAAAAAAAAAAAAPC/"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAAOskAAAAAAAA7CQAAAAAAAAAAAAA7CQAAAAAAADtJAAAAAAAAAAAAADtJAAAAAAAAO4kAAAAAAAAAAAAAO4kAAAAAAAA7yQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6yQAAAAAAADrJAAAAAAAAAAAAAAAAPC/"
				],
				[
					774,
					1,
					"insert",
					{
						"characters": "parth"
					},
					"BQAAANkkAAAAAAAA2iQAAAAAAAAAAAAA2iQAAAAAAADbJAAAAAAAAAAAAADbJAAAAAAAANwkAAAAAAAAAAAAANwkAAAAAAAA3SQAAAAAAAAAAAAA3SQAAAAAAADeJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2SQAAAAAAADZJAAAAAAAAAAAAAAAAPC/"
				],
				[
					775,
					5,
					"left_delete",
					null,
					"BQAAAN0kAAAAAAAA3SQAAAAAAAABAAAAaNwkAAAAAAAA3CQAAAAAAAABAAAAdNskAAAAAAAA2yQAAAAAAAABAAAActokAAAAAAAA2iQAAAAAAAABAAAAYdkkAAAAAAAA2SQAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAA3iQAAAAAAADeJAAAAAAAAAAAAAAAAPC/"
				],
				[
					776,
					1,
					"insert",
					{
						"characters": "path.relative"
					},
					"DQAAANkkAAAAAAAA2iQAAAAAAAAAAAAA2iQAAAAAAADbJAAAAAAAAAAAAADbJAAAAAAAANwkAAAAAAAAAAAAANwkAAAAAAAA3SQAAAAAAAAAAAAA3SQAAAAAAADeJAAAAAAAAAAAAADeJAAAAAAAAN8kAAAAAAAAAAAAAN8kAAAAAAAA4CQAAAAAAAAAAAAA4CQAAAAAAADhJAAAAAAAAAAAAADhJAAAAAAAAOIkAAAAAAAAAAAAAOIkAAAAAAAA4yQAAAAAAAAAAAAA4yQAAAAAAADkJAAAAAAAAAAAAADkJAAAAAAAAOUkAAAAAAAAAAAAAOUkAAAAAAAA5iQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2SQAAAAAAADZJAAAAAAAAAAAAAAAAPC/"
				],
				[
					777,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAOYkAAAAAAAA5yQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5iQAAAAAAADmJAAAAAAAAAAAAAAAAPC/"
				],
				[
					779,
					1,
					"insert",
					{
						"characters": ",dir)"
					},
					"BQAAAOskAAAAAAAA7CQAAAAAAAAAAAAA7CQAAAAAAADtJAAAAAAAAAAAAADtJAAAAAAAAO4kAAAAAAAAAAAAAO4kAAAAAAAA7yQAAAAAAAAAAAAA7yQAAAAAAADwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6yQAAAAAAADrJAAAAAAAAAAAAAAAAPC/"
				],
				[
					808,
					1,
					"insert",
					{
						"characters": "st"
					},
					"AgAAABomAAAAAAAAGyYAAAAAAAAAAAAAGyYAAAAAAAAcJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGiYAAAAAAAAaJgAAAAAAAAAAAAAAAPC/"
				],
				[
					809,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAABwmAAAAAAAAHSYAAAAAAAAAAAAAHSYAAAAAAAAeJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHCYAAAAAAAAcJgAAAAAAAAAAAAAAAPC/"
				],
				[
					810,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB4mAAAAAAAAHyYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHiYAAAAAAAAeJgAAAAAAAAAAAAAAAPC/"
				],
				[
					814,
					1,
					"insert",
					{
						"characters": " :_"
					},
					"AwAAAO0mAAAAAAAA7iYAAAAAAAAAAAAA7iYAAAAAAADvJgAAAAAAAAAAAADvJgAAAAAAAPAmAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7SYAAAAAAADtJgAAAAAAAAAAAAAAAPC/"
				],
				[
					815,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPAmAAAAAAAA8SYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8CYAAAAAAADwJgAAAAAAAAAAAAAAAPC/"
				],
				[
					816,
					1,
					"left_delete",
					null,
					"AQAAAPAmAAAAAAAA8CYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA8SYAAAAAAADxJgAAAAAAAAAAAAAAAPC/"
				],
				[
					817,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPAmAAAAAAAA8SYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8CYAAAAAAADwJgAAAAAAAAAAAAAAAPC/"
				],
				[
					818,
					2,
					"left_delete",
					null,
					"AgAAAPAmAAAAAAAA8CYAAAAAAAABAAAAIO8mAAAAAAAA7yYAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAA8SYAAAAAAADxJgAAAAAAAAAAAAAAAPC/"
				],
				[
					819,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO8mAAAAAAAA8CYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7yYAAAAAAADvJgAAAAAAAAAAAAAAAPC/"
				],
				[
					820,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPAmAAAAAAAA8iYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8CYAAAAAAADwJgAAAAAAAAAAAAAAAPC/"
				],
				[
					877,
					1,
					"insert",
					{
						"characters": " fiel"
					},
					"BQAAAKckAAAAAAAAqCQAAAAAAAAAAAAAqCQAAAAAAACpJAAAAAAAAAAAAACpJAAAAAAAAKokAAAAAAAAAAAAAKokAAAAAAAAqyQAAAAAAAAAAAAAqyQAAAAAAACsJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApyQAAAAAAACnJAAAAAAAAAAAAAAAAPC/"
				],
				[
					878,
					2,
					"left_delete",
					null,
					"AgAAAKskAAAAAAAAqyQAAAAAAAABAAAAbKokAAAAAAAAqiQAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAArCQAAAAAAACsJAAAAAAAAAAAAAAAAPC/"
				],
				[
					879,
					1,
					"insert",
					{
						"characters": "le).map"
					},
					"BwAAAKokAAAAAAAAqyQAAAAAAAAAAAAAqyQAAAAAAACsJAAAAAAAAAAAAACsJAAAAAAAAK0kAAAAAAAAAAAAAK0kAAAAAAAAriQAAAAAAAAAAAAAriQAAAAAAACvJAAAAAAAAAAAAACvJAAAAAAAALAkAAAAAAAAAAAAALAkAAAAAAAAsSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqiQAAAAAAACqJAAAAAAAAAAAAAAAAPC/"
				],
				[
					880,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALEkAAAAAAAAsyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsSQAAAAAAACxJAAAAAAAAAAAAAAAAPC/"
				],
				[
					881,
					1,
					"right_delete",
					null,
					"AQAAALIkAAAAAAAAsiQAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAsiQAAAAAAACyJAAAAAAAAAAAAAAAAPC/"
				],
				[
					882,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAALIkAAAAAAAAsyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsiQAAAAAAACyJAAAAAAAAAAAAAAAAPC/"
				],
				[
					883,
					1,
					"left_delete",
					null,
					"AQAAALIkAAAAAAAAsiQAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAsyQAAAAAAACzJAAAAAAAAAAAAAAAAPC/"
				],
				[
					884,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAALIkAAAAAAAAsyQAAAAAAAAAAAAAsyQAAAAAAAC0JAAAAAAAAAAAAAC0JAAAAAAAALUkAAAAAAAAAAAAALUkAAAAAAAAtiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsiQAAAAAAACyJAAAAAAAAAAAAAAAAPC/"
				],
				[
					885,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAALYkAAAAAAAAtyQAAAAAAAAAAAAAtyQAAAAAAAC4JAAAAAAAAAAAAAC4JAAAAAAAALkkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtiQAAAAAAAC2JAAAAAAAAAAAAAAAAPC/"
				],
				[
					945,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAACYbAAAAAAAAJxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJhsAAAAAAAAmGwAAAAAAAAAAAAAAAPC/"
				],
				[
					946,
					1,
					"left_delete",
					null,
					"AQAAACYbAAAAAAAAJhsAAAAAAAABAAAAJA",
					"AQAAAAAAAAABAAAAJxsAAAAAAAAnGwAAAAAAAAAAAAAAAPC/"
				],
				[
					947,
					1,
					"insert",
					{
						"characters": "\n\nyield"
					},
					"CgAAACYbAAAAAAAAJxsAAAAAAAAAAAAAJxsAAAAAAAAxGwAAAAAAAAAAAAAxGwAAAAAAADIbAAAAAAAAAAAAADIbAAAAAAAAPBsAAAAAAAAAAAAAJxsAAAAAAAAnGwAAAAAAAAoAAAAgICAgICAgICAgMhsAAAAAAAAzGwAAAAAAAAAAAAAzGwAAAAAAADQbAAAAAAAAAAAAADQbAAAAAAAANRsAAAAAAAAAAAAANRsAAAAAAAA2GwAAAAAAAAAAAAA2GwAAAAAAADcbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJhsAAAAAAAAmGwAAAAAAAAAAAAAAAPC/"
				],
				[
					948,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADcbAAAAAAAAOBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxsAAAAAAAA3GwAAAAAAAAAAAAAAAPC/"
				],
				[
					949,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADgbAAAAAAAAOhsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBsAAAAAAAA4GwAAAAAAAAAAAAAAAPC/"
				],
				[
					951,
					1,
					"left_delete",
					null,
					"AQAAADkbAAAAAAAAORsAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAOhsAAAAAAAA6GwAAAAAAAAAAAAAAAPC/"
				],
				[
					952,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAADkbAAAAAAAAOxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORsAAAAAAAA5GwAAAAAAAAAAAAAAAPC/"
				],
				[
					953,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAADobAAAAAAAAOxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhsAAAAAAAA6GwAAAAAAAAAAAAAAAPC/"
				],
				[
					954,
					1,
					"right_delete",
					null,
					"AQAAADsbAAAAAAAAOxsAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAOxsAAAAAAAA7GwAAAAAAAAAAAAAAAPC/"
				],
				[
					955,
					1,
					"left_delete",
					null,
					"AQAAADobAAAAAAAAOhsAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAOxsAAAAAAAA7GwAAAAAAAAAAAAAAAPC/"
				],
				[
					956,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAADobAAAAAAAAOxsAAAAAAAAAAAAAOxsAAAAAAAA8GwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhsAAAAAAAA6GwAAAAAAAAAAAAAAAPC/"
				],
				[
					957,
					1,
					"insert",
					{
						"characters": "';"
					},
					"AgAAADwbAAAAAAAAPRsAAAAAAAAAAAAAPRsAAAAAAAA+GwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPBsAAAAAAAA8GwAAAAAAAAAAAAAAAPC/"
				],
				[
					962,
					1,
					"insert",
					{
						"characters": "\nyield"
					},
					"BgAAABkpAAAAAAAAGikAAAAAAAAAAAAAGikAAAAAAAAbKQAAAAAAAAAAAAAbKQAAAAAAABwpAAAAAAAAAAAAABwpAAAAAAAAHSkAAAAAAAAAAAAAHSkAAAAAAAAeKQAAAAAAAAAAAAAeKQAAAAAAAB8pAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGSkAAAAAAAAZKQAAAAAAAAAAAAAAAPC/"
				],
				[
					963,
					1,
					"insert",
					{
						"characters": " JSON.stringify"
					},
					"DwAAAB8pAAAAAAAAICkAAAAAAAAAAAAAICkAAAAAAAAhKQAAAAAAAAAAAAAhKQAAAAAAACIpAAAAAAAAAAAAACIpAAAAAAAAIykAAAAAAAAAAAAAIykAAAAAAAAkKQAAAAAAAAAAAAAkKQAAAAAAACUpAAAAAAAAAAAAACUpAAAAAAAAJikAAAAAAAAAAAAAJikAAAAAAAAnKQAAAAAAAAAAAAAnKQAAAAAAACgpAAAAAAAAAAAAACgpAAAAAAAAKSkAAAAAAAAAAAAAKSkAAAAAAAAqKQAAAAAAAAAAAAAqKQAAAAAAACspAAAAAAAAAAAAACspAAAAAAAALCkAAAAAAAAAAAAALCkAAAAAAAAtKQAAAAAAAAAAAAAtKQAAAAAAAC4pAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHykAAAAAAAAfKQAAAAAAAAAAAAAAAPC/"
				],
				[
					964,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC4pAAAAAAAAMCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALikAAAAAAAAuKQAAAAAAAAAAAAAAAPC/"
				],
				[
					965,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAC8pAAAAAAAAMSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALykAAAAAAAAvKQAAAAAAAAAAAAAAAPC/"
				],
				[
					966,
					1,
					"insert",
					{
						"characters": "dir,names"
					},
					"CQAAADApAAAAAAAAMSkAAAAAAAAAAAAAMSkAAAAAAAAyKQAAAAAAAAAAAAAyKQAAAAAAADMpAAAAAAAAAAAAADMpAAAAAAAANCkAAAAAAAAAAAAANCkAAAAAAAA1KQAAAAAAAAAAAAA1KQAAAAAAADYpAAAAAAAAAAAAADYpAAAAAAAANykAAAAAAAAAAAAANykAAAAAAAA4KQAAAAAAAAAAAAA4KQAAAAAAADkpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMCkAAAAAAAAwKQAAAAAAAAAAAAAAAPC/"
				],
				[
					968,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADspAAAAAAAAPCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOykAAAAAAAA7KQAAAAAAAAAAAAAAAPC/"
				],
				[
					969,
					1,
					"insert",
					{
						"characters": "\nyield"
					},
					"BgAAADwpAAAAAAAAPSkAAAAAAAAAAAAAPSkAAAAAAAA+KQAAAAAAAAAAAAA+KQAAAAAAAD8pAAAAAAAAAAAAAD8pAAAAAAAAQCkAAAAAAAAAAAAAQCkAAAAAAABBKQAAAAAAAAAAAABBKQAAAAAAAEIpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPCkAAAAAAAA8KQAAAAAAAAAAAAAAAPC/"
				],
				[
					970,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEIpAAAAAAAAQykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQikAAAAAAABCKQAAAAAAAAAAAAAAAPC/"
				],
				[
					971,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAEMpAAAAAAAARSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQykAAAAAAABDKQAAAAAAAAAAAAAAAPC/"
				],
				[
					972,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEQpAAAAAAAARSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARCkAAAAAAABEKQAAAAAAAAAAAAAAAPC/"
				],
				[
					973,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUpAAAAAAAARikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSkAAAAAAABFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					975,
					2,
					"left_delete",
					null,
					"AgAAAEYpAAAAAAAARikAAAAAAAABAAAAJ0UpAAAAAAAARSkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAARykAAAAAAABHKQAAAAAAAAAAAAAAAPC/"
				],
				[
					976,
					1,
					"insert",
					{
						"characters": "\\n';"
					},
					"BAAAAEUpAAAAAAAARikAAAAAAAAAAAAARikAAAAAAABHKQAAAAAAAAAAAABHKQAAAAAAAEgpAAAAAAAAAAAAAEgpAAAAAAAASSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSkAAAAAAABFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					981,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEopAAAAAAAASykAAAAAAAAAAAAASykAAAAAAABMKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASikAAAAAAABKKQAAAAAAAAAAAAAAAPC/"
				],
				[
					986,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANsqAAAAAAAA3CoAAAAAAAAAAAAA3CoAAAAAAADdKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2yoAAAAAAADbKgAAAAAAAAAAAAAAAPC/"
				],
				[
					988,
					1,
					"insert",
					{
						"characters": "yield"
					},
					"BQAAANIqAAAAAAAA0yoAAAAAAAAAAAAA0yoAAAAAAADUKgAAAAAAAAAAAADUKgAAAAAAANUqAAAAAAAAAAAAANUqAAAAAAAA1ioAAAAAAAAAAAAA1ioAAAAAAADXKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0ioAAAAAAADSKgAAAAAAAAAAAAAAAF5A"
				],
				[
					989,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANcqAAAAAAAA2CoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1yoAAAAAAADXKgAAAAAAAAAAAAAAAPC/"
				],
				[
					990,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANgqAAAAAAAA2ioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2CoAAAAAAADYKgAAAAAAAAAAAAAAAPC/"
				],
				[
					991,
					1,
					"insert",
					{
						"characters": "\\n]"
					},
					"AwAAANkqAAAAAAAA2ioAAAAAAAAAAAAA2ioAAAAAAADbKgAAAAAAAAAAAADbKgAAAAAAANwqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2SoAAAAAAADZKgAAAAAAAAAAAAAAAPC/"
				],
				[
					993,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAN0qAAAAAAAA3ioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3SoAAAAAAADdKgAAAAAAAAAAAAAAAPC/"
				],
				[
					995,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANEqAAAAAAAA0ioAAAAAAAAAAAAA0ioAAAAAAADcKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0SoAAAAAAADRKgAAAAAAAAAAAAAAAGJA"
				],
				[
					1027,
					1,
					"insert",
					{
						"characters": "fs.statSys"
					},
					"DAAAABonAAAAAAAAGycAAAAAAAAAAAAAGycAAAAAAAAbJwAAAAAAAAIAAAB7fdEqAAAAAAAA0SoAAAAAAAAKAAAAICAgICAgICAgIBsnAAAAAAAAHCcAAAAAAAAAAAAAHCcAAAAAAAAdJwAAAAAAAAAAAAAdJwAAAAAAAB4nAAAAAAAAAAAAAB4nAAAAAAAAHycAAAAAAAAAAAAAHycAAAAAAAAgJwAAAAAAAAAAAAAgJwAAAAAAACEnAAAAAAAAAAAAACEnAAAAAAAAIicAAAAAAAAAAAAAIicAAAAAAAAjJwAAAAAAAAAAAAAjJwAAAAAAACQnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGicAAAAAAAAcJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1028,
					2,
					"left_delete",
					null,
					"AgAAACMnAAAAAAAAIycAAAAAAAABAAAAcyInAAAAAAAAIicAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAJCcAAAAAAAAkJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1029,
					1,
					"insert",
					{
						"characters": "ync"
					},
					"AwAAACInAAAAAAAAIycAAAAAAAAAAAAAIycAAAAAAAAkJwAAAAAAAAAAAAAkJwAAAAAAACUnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIicAAAAAAAAiJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1030,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACUnAAAAAAAAJycAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJScAAAAAAAAlJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1031,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAACYnAAAAAAAAKCcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJicAAAAAAAAmJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1032,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAACcnAAAAAAAAKCcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJycAAAAAAAAnJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1033,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAACgnAAAAAAAAKScAAAAAAAAAAAAAKScAAAAAAAA5JwAAAAAAAAAAAAApJwAAAAAAACknAAAAAAAAEAAAACAgICAgICAgICAgICAgICApJwAAAAAAADsnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKCcAAAAAAAAoJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1034,
					12,
					"left_delete",
					null,
					"DAAAADknAAAAAAAAOScAAAAAAAACAAAAICA3JwAAAAAAADcnAAAAAAAAAgAAACAgNScAAAAAAAA1JwAAAAAAAAIAAAAgIDMnAAAAAAAAMycAAAAAAAACAAAAICAxJwAAAAAAADEnAAAAAAAAAgAAACAgLycAAAAAAAAvJwAAAAAAAAIAAAAgIC0nAAAAAAAALScAAAAAAAACAAAAICArJwAAAAAAACsnAAAAAAAAAgAAACAgKScAAAAAAAApJwAAAAAAAAIAAAAgICgnAAAAAAAAKCcAAAAAAAABAAAACicnAAAAAAAAJycAAAAAAAABAAAAJCYnAAAAAAAAJicAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAOycAAAAAAAA7JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1035,
					1,
					"insert",
					{
						"characters": "dir+'/'+"
					},
					"CAAAACYnAAAAAAAAJycAAAAAAAAAAAAAJycAAAAAAAAoJwAAAAAAAAAAAAAoJwAAAAAAACknAAAAAAAAAAAAACknAAAAAAAAKicAAAAAAAAAAAAAKicAAAAAAAArJwAAAAAAAAAAAAArJwAAAAAAACwnAAAAAAAAAAAAACwnAAAAAAAALScAAAAAAAAAAAAALScAAAAAAAAuJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJicAAAAAAAAmJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1036,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAAC4nAAAAAAAALycAAAAAAAAAAAAALycAAAAAAAAwJwAAAAAAAAAAAAAwJwAAAAAAADEnAAAAAAAAAAAAADEnAAAAAAAAMicAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALicAAAAAAAAuJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1037,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADInAAAAAAAAMycAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMicAAAAAAAAyJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1039,
					1,
					"left_delete",
					null,
					"AQAAADMnAAAAAAAAMycAAAAAAAADAAAAYCkp",
					"AQAAAAAAAAABAAAAMycAAAAAAAA2JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1054,
					1,
					"cut",
					null,
					"AQAAABonAAAAAAAAGicAAAAAAAAZAAAAZnMuc3RhdFN5bmMoZGlyKycvJytuYW1lKQ",
					"AQAAAAAAAAABAAAAMycAAAAAAAAaJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1063,
					1,
					"insert",
					{
						"characters": " fs-."
					},
					"BgAAAKgkAAAAAAAAqSQAAAAAAAAAAAAAqSQAAAAAAACpJAAAAAAAAAIAAABzdKkkAAAAAAAAqiQAAAAAAAAAAAAAqiQAAAAAAACrJAAAAAAAAAAAAACrJAAAAAAAAKwkAAAAAAAAAAAAAKwkAAAAAAAArSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqCQAAAAAAACqJAAAAAAAAAAAAAAAAPC/"
				],
				[
					1064,
					2,
					"left_delete",
					null,
					"AgAAAKwkAAAAAAAArCQAAAAAAAABAAAALqskAAAAAAAAqyQAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAArSQAAAAAAACtJAAAAAAAAAAAAAAAAPC/"
				],
				[
					1065,
					1,
					"insert",
					{
						"characters": ".exists"
					},
					"BwAAAKskAAAAAAAArCQAAAAAAAAAAAAArCQAAAAAAACtJAAAAAAAAAAAAACtJAAAAAAAAK4kAAAAAAAAAAAAAK4kAAAAAAAAryQAAAAAAAAAAAAAryQAAAAAAACwJAAAAAAAAAAAAACwJAAAAAAAALEkAAAAAAAAAAAAALEkAAAAAAAAsiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqyQAAAAAAACrJAAAAAAAAAAAAAAAAPC/"
				],
				[
					1066,
					1,
					"insert_completion",
					{
						"completion": "existsSync",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "existsSync"
					},
					"AgAAAKwkAAAAAAAArCQAAAAAAAAGAAAAZXhpc3RzrCQAAAAAAAC2JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsiQAAAAAAACyJAAAAAAAAAAAAAAAAPC/"
				],
				[
					1067,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALYkAAAAAAAAuCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtiQAAAAAAAC2JAAAAAAAAAAAAAAAAPC/"
				],
				[
					1068,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAALckAAAAAAAAuCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtyQAAAAAAAC3JAAAAAAAAAAAAAAAAPC/"
				],
				[
					1069,
					1,
					"left_delete",
					null,
					"AQAAALckAAAAAAAAtyQAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAuCQAAAAAAAC4JAAAAAAAAAAAAAAAAPC/"
				],
				[
					1075,
					1,
					"paste",
					null,
					"AQAAALckAAAAAAAAxyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtyQAAAAAAAC3JAAAAAAAAAAAAAAAAPC/"
				],
				[
					1084,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADcnAAAAAAAAOCcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANycAAAAAAAA3JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1085,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADgnAAAAAAAAOicAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOCcAAAAAAAA4JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1099,
					1,
					"left_delete",
					null,
					"AQAAADonAAAAAAAAOicAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAOycAAAAAAAA7JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1100,
					1,
					"insert",
					{
						"characters": "⁾"
					},
					"AQAAADonAAAAAAAAOycAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOicAAAAAAAA6JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1101,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADsnAAAAAAAAPScAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOycAAAAAAAA7JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1102,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAADsnAAAAAAAAOycAAAAAAAABAAAAKDsnAAAAAAAAOycAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAPCcAAAAAAAA8JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1103,
					1,
					"left_delete",
					null,
					"AQAAADonAAAAAAAAOicAAAAAAAADAAAA4oG+",
					"AQAAAAAAAAABAAAAOycAAAAAAAA7JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1104,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADonAAAAAAAAOycAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOicAAAAAAAA6JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1113,
					1,
					"insert",
					{
						"characters": "path.realpath("
					},
					"DgAAADQlAAAAAAAANSUAAAAAAAAAAAAANSUAAAAAAAA2JQAAAAAAAAAAAAA2JQAAAAAAADclAAAAAAAAAAAAADclAAAAAAAAOCUAAAAAAAAAAAAAOCUAAAAAAAA5JQAAAAAAAAAAAAA5JQAAAAAAADolAAAAAAAAAAAAADolAAAAAAAAOyUAAAAAAAAAAAAAOyUAAAAAAAA8JQAAAAAAAAAAAAA8JQAAAAAAAD0lAAAAAAAAAAAAAD0lAAAAAAAAPiUAAAAAAAAAAAAAPiUAAAAAAAA/JQAAAAAAAAAAAAA/JQAAAAAAAEAlAAAAAAAAAAAAAEAlAAAAAAAAQSUAAAAAAAAAAAAAQSUAAAAAAABCJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANCUAAAAAAAA0JQAAAAAAAAAAAAAAAPC/"
				],
				[
					1115,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAEYlAAAAAAAARyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARiUAAAAAAABGJQAAAAAAAAAAAAAAAPC/"
				],
				[
					1133,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAPAkAAAAAAAA8SQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8CQAAAAAAADwJAAAAAAAAAAAAAAAAPC/"
				],
				[
					1134,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAPEkAAAAAAAA8iQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8SQAAAAAAADxJAAAAAAAAAAAAAAAAPC/"
				],
				[
					1135,
					1,
					"left_delete",
					null,
					"AQAAAPEkAAAAAAAA8SQAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAA8iQAAAAAAADyJAAAAAAAAAAAAAAAAPC/"
				],
				[
					1136,
					1,
					"insert",
					{
						"characters": "file,"
					},
					"BQAAAPEkAAAAAAAA8iQAAAAAAAAAAAAA8iQAAAAAAADzJAAAAAAAAAAAAADzJAAAAAAAAPQkAAAAAAAAAAAAAPQkAAAAAAAA9SQAAAAAAAAAAAAA9SQAAAAAAAD2JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8SQAAAAAAADxJAAAAAAAAAAAAAAAAPC/"
				],
				[
					1139,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAABglAAAAAAAAGSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGCUAAAAAAAAYJQAAAAAAAAAAAAAAAPC/"
				],
				[
					1142,
					1,
					"insert",
					{
						"characters": "([["
					},
					"AwAAAB8lAAAAAAAAICUAAAAAAAAAAAAAICUAAAAAAAAhJQAAAAAAAAAAAAAhJQAAAAAAACIlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHyUAAAAAAAAfJQAAAAAAAAAAAAAAAPC/"
				],
				[
					1145,
					1,
					"left_delete",
					null,
					"AQAAACElAAAAAAAAISUAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAAIiUAAAAAAAAiJQAAAAAAAAAAAAAAAPC/"
				],
				[
					1147,
					1,
					"insert",
					{
						"characters": ",rel])"
					},
					"BgAAACUlAAAAAAAAJiUAAAAAAAAAAAAAJiUAAAAAAAAnJQAAAAAAAAAAAAAnJQAAAAAAACglAAAAAAAAAAAAACglAAAAAAAAKSUAAAAAAAAAAAAAKSUAAAAAAAAqJQAAAAAAAAAAAAAqJQAAAAAAACslAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJSUAAAAAAAAlJQAAAAAAAAAAAAAAAPC/"
				],
				[
					1171,
					1,
					"insert",
					{
						"characters": "rel"
					},
					"BAAAAGQlAAAAAAAAZSUAAAAAAAAAAAAAZSUAAAAAAABlJQAAAAAAAAQAAABmaWxlZSUAAAAAAABmJQAAAAAAAAAAAABmJQAAAAAAAGclAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZCUAAAAAAABoJQAAAAAAAAAAAAAAAPC/"
				],
				[
					1205,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKMgAAAAAAAApCAAAAAAAAAAAAAApCAAAAAAAAClIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoyAAAAAAAACjIAAAAAAAAAAAAAAAAPC/"
				],
				[
					1210,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAAhAAAAAAAAASEAAAAAAAAAAAAAASEAAAAAAAACIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAACEAAAAAAAAAIQAAAAAAAAAAAAAAAPC/"
				],
				[
					1213,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPshAAAAAAAA/CEAAAAAAAAAAAAA/CEAAAAAAAD9IQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+yEAAAAAAAD7IQAAAAAAAAAAAAAAAPC/"
				],
				[
					1216,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGgiAAAAAAAAaSIAAAAAAAAAAAAAaSIAAAAAAABqIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaCIAAAAAAABoIgAAAAAAAAAAAAAAAPC/"
				],
				[
					1219,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMwiAAAAAAAAzSIAAAAAAAAAAAAAzSIAAAAAAADOIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzCIAAAAAAADMIgAAAAAAAAAAAAAAAPC/"
				],
				[
					1243,
					1,
					"",
					null,
					"AQAAAA8zAAAAAAAAJjMAAAAAAAAVAAAAICAgICAgICAgICAgICBjb25zb2xl",
					"AQAAAAAAAAABAAAADzMAAAAAAAAkMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1244,
					1,
					"",
					null,
					"AQAAAM0zAAAAAAAA5DMAAAAAAAAVAAAAICAgICAgICAgICAgICBjb25zb2xl",
					"AQAAAAAAAAABAAAAzTMAAAAAAADiMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1245,
					1,
					"",
					null,
					"AQAAAAY1AAAAAAAAHzUAAAAAAAAXAAAAICAgICAgICAgICAgICAgIGNvbnNvbGU",
					"AQAAAAAAAAABAAAABjUAAAAAAAAdNQAAAAAAAAAAAAAAAPC/"
				],
				[
					1246,
					1,
					"",
					null,
					"AQAAADk2AAAAAAAAUjYAAAAAAAAXAAAAICAgICAgICAgICAgICAgIGNvbnNvbGU",
					"AQAAAAAAAAABAAAAOTYAAAAAAABQNgAAAAAAAAAAAAAAAPC/"
				],
				[
					1247,
					1,
					"",
					null,
					"AQAAACc3AAAAAAAAPzcAAAAAAAAWAAAACiAgICAgICAgICAgICAgY29uc29sZQ",
					"AQAAAAAAAAABAAAAJzcAAAAAAAA9NwAAAAAAAAAAAAAAAPC/"
				],
				[
					1248,
					1,
					"",
					null,
					"AQAAAJc3AAAAAAAArjcAAAAAAAAVAAAAICAgICAgICAgICAgICBjb25zb2xl",
					"AQAAAAAAAAABAAAAlzcAAAAAAACsNwAAAAAAAAAAAAAAAPC/"
				],
				[
					1259,
					1,
					"",
					null,
					"AQAAALspAAAAAAAA0CkAAAAAAAATAAAAICAgICAgICAgICAgY29uc29sZQ",
					"AQAAAAAAAAABAAAAuykAAAAAAADOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					1290,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFExAAAAAAAAUjEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUTEAAAAAAABRMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1291,
					1,
					"insert",
					{
						"characters": "\n\nfp"
					},
					"BwAAAFIxAAAAAAAAUzEAAAAAAAAAAAAAUzEAAAAAAABdMQAAAAAAAAAAAABdMQAAAAAAAF4xAAAAAAAAAAAAAF4xAAAAAAAAaDEAAAAAAAAAAAAAUzEAAAAAAABTMQAAAAAAAAoAAAAgICAgICAgICAgXjEAAAAAAABfMQAAAAAAAAAAAABfMQAAAAAAAGAxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUjEAAAAAAABSMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1293,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"AwAAAFMxAAAAAAAAVDEAAAAAAAAAAAAAVDEAAAAAAABVMQAAAAAAAAAAAABVMQAAAAAAAFYxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUzEAAAAAAABTMQAAAAAAAAAAAAAAAGJA"
				],
				[
					1294,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFYxAAAAAAAAWDEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVjEAAAAAAABWMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1295,
					1,
					"insert",
					{
						"characters": "req.url.pat"
					},
					"CwAAAFcxAAAAAAAAWDEAAAAAAAAAAAAAWDEAAAAAAABZMQAAAAAAAAAAAABZMQAAAAAAAFoxAAAAAAAAAAAAAFoxAAAAAAAAWzEAAAAAAAAAAAAAWzEAAAAAAABcMQAAAAAAAAAAAABcMQAAAAAAAF0xAAAAAAAAAAAAAF0xAAAAAAAAXjEAAAAAAAAAAAAAXjEAAAAAAABfMQAAAAAAAAAAAABfMQAAAAAAAGAxAAAAAAAAAAAAAGAxAAAAAAAAYTEAAAAAAAAAAAAAYTEAAAAAAABiMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzEAAAAAAABXMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1296,
					1,
					"insert",
					{
						"characters": "h.endsWith"
					},
					"CgAAAGIxAAAAAAAAYzEAAAAAAAAAAAAAYzEAAAAAAABkMQAAAAAAAAAAAABkMQAAAAAAAGUxAAAAAAAAAAAAAGUxAAAAAAAAZjEAAAAAAAAAAAAAZjEAAAAAAABnMQAAAAAAAAAAAABnMQAAAAAAAGgxAAAAAAAAAAAAAGgxAAAAAAAAaTEAAAAAAAAAAAAAaTEAAAAAAABqMQAAAAAAAAAAAABqMQAAAAAAAGsxAAAAAAAAAAAAAGsxAAAAAAAAbDEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYjEAAAAAAABiMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1297,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGwxAAAAAAAAbjEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbDEAAAAAAABsMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1298,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAG0xAAAAAAAAbzEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbTEAAAAAAABtMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1299,
					1,
					"insert",
					{
						"characters": "files"
					},
					"BQAAAG4xAAAAAAAAbzEAAAAAAAAAAAAAbzEAAAAAAABwMQAAAAAAAAAAAABwMQAAAAAAAHExAAAAAAAAAAAAAHExAAAAAAAAcjEAAAAAAAAAAAAAcjEAAAAAAABzMQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbjEAAAAAAABuMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1303,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAFcxAAAAAAAAWDEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzEAAAAAAABXMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1316,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGIbAAAAAAAAYxsAAAAAAAAAAAAAYxsAAAAAAABjGwAAAAAAAAIAAAAvKg",
					"AQAAAAAAAAABAAAAYhsAAAAAAABkGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1319,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGobAAAAAAAAaxsAAAAAAAAAAAAAaxsAAAAAAABrGwAAAAAAAAIAAAAqLw",
					"AQAAAAAAAAABAAAAahsAAAAAAABsGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1333,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAAD8bAAAAAAAAQBsAAAAAAAAAAAAAQBsAAAAAAABBGwAAAAAAAAAAAABBGwAAAAAAAEIbAAAAAAAAAAAAAEIbAAAAAAAAQxsAAAAAAAAAAAAAQxsAAAAAAABEGwAAAAAAAAAAAABEGwAAAAAAAEUbAAAAAAAAAAAAAEUbAAAAAAAARhsAAAAAAAAAAAAARhsAAAAAAABHGwAAAAAAAAAAAABHGwAAAAAAAEgbAAAAAAAAAAAAAEgbAAAAAAAASRsAAAAAAAAAAAAASRsAAAAAAABKGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPxsAAAAAAAA/GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1334,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEobAAAAAAAATBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShsAAAAAAABKGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1335,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAEsbAAAAAAAATRsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxsAAAAAAABLGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1336,
					1,
					"insert",
					{
						"characters": "*files.body"
					},
					"CwAAAEwbAAAAAAAATRsAAAAAAAAAAAAATRsAAAAAAABOGwAAAAAAAAAAAABOGwAAAAAAAE8bAAAAAAAAAAAAAE8bAAAAAAAAUBsAAAAAAAAAAAAAUBsAAAAAAABRGwAAAAAAAAAAAABRGwAAAAAAAFIbAAAAAAAAAAAAAFIbAAAAAAAAUxsAAAAAAAAAAAAAUxsAAAAAAABUGwAAAAAAAAAAAABUGwAAAAAAAFUbAAAAAAAAAAAAAFUbAAAAAAAAVhsAAAAAAAAAAAAAVhsAAAAAAABXGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBsAAAAAAABMGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1338,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAFgbAAAAAAAAWRsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBsAAAAAAABYGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1339,
					1,
					"left_delete",
					null,
					"AQAAAFgbAAAAAAAAWBsAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAWRsAAAAAAABZGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1340,
					1,
					"insert",
					{
						"characters": ",bno"
					},
					"BAAAAFgbAAAAAAAAWRsAAAAAAAAAAAAAWRsAAAAAAABaGwAAAAAAAAAAAABaGwAAAAAAAFsbAAAAAAAAAAAAAFsbAAAAAAAAXBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBsAAAAAAABYGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1341,
					2,
					"left_delete",
					null,
					"AgAAAFsbAAAAAAAAWxsAAAAAAAABAAAAb1obAAAAAAAAWhsAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAXBsAAAAAAABcGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1342,
					1,
					"insert",
					{
						"characters": "ody"
					},
					"AwAAAFobAAAAAAAAWxsAAAAAAAAAAAAAWxsAAAAAAABcGwAAAAAAAAAAAABcGwAAAAAAAF0bAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhsAAAAAAABaGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1344,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAF4bAAAAAAAAXxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhsAAAAAAABeGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1347,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF8bAAAAAAAAYBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxsAAAAAAABfGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1351,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"AwAAAF8bAAAAAAAAYBsAAAAAAAAAAAAAYBsAAAAAAABhGwAAAAAAAAAAAABhGwAAAAAAAGIbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxsAAAAAAABfGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1352,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGIbAAAAAAAAZBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhsAAAAAAABiGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1353,
					1,
					"insert",
					{
						"characters": "!èis"
					},
					"BAAAAGMbAAAAAAAAZBsAAAAAAAAAAAAAZBsAAAAAAABlGwAAAAAAAAAAAABlGwAAAAAAAGYbAAAAAAAAAAAAAGYbAAAAAAAAZxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxsAAAAAAABjGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1354,
					3,
					"left_delete",
					null,
					"AwAAAGYbAAAAAAAAZhsAAAAAAAABAAAAc2UbAAAAAAAAZRsAAAAAAAABAAAAaWQbAAAAAAAAZBsAAAAAAAACAAAAw6g",
					"AQAAAAAAAAABAAAAZxsAAAAAAABnGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1355,
					1,
					"insert",
					{
						"characters": "isOb"
					},
					"BAAAAGQbAAAAAAAAZRsAAAAAAAAAAAAAZRsAAAAAAABmGwAAAAAAAAAAAABmGwAAAAAAAGcbAAAAAAAAAAAAAGcbAAAAAAAAaBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBsAAAAAAABkGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1356,
					1,
					"insert",
					{
						"characters": " ject"
					},
					"BQAAAGgbAAAAAAAAaRsAAAAAAAAAAAAAaRsAAAAAAABqGwAAAAAAAAAAAABqGwAAAAAAAGsbAAAAAAAAAAAAAGsbAAAAAAAAbBsAAAAAAAAAAAAAbBsAAAAAAABtGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBsAAAAAAABoGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1357,
					5,
					"left_delete",
					null,
					"BQAAAGwbAAAAAAAAbBsAAAAAAAABAAAAdGsbAAAAAAAAaxsAAAAAAAABAAAAY2obAAAAAAAAahsAAAAAAAABAAAAZWkbAAAAAAAAaRsAAAAAAAABAAAAamgbAAAAAAAAaBsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAbRsAAAAAAABtGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1358,
					1,
					"insert",
					{
						"characters": "ject"
					},
					"BAAAAGgbAAAAAAAAaRsAAAAAAAAAAAAAaRsAAAAAAABqGwAAAAAAAAAAAABqGwAAAAAAAGsbAAAAAAAAAAAAAGsbAAAAAAAAbBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBsAAAAAAABoGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1359,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGwbAAAAAAAAbhsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbBsAAAAAAABsGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1360,
					1,
					"insert",
					{
						"characters": "body"
					},
					"BAAAAG0bAAAAAAAAbhsAAAAAAAAAAAAAbhsAAAAAAABvGwAAAAAAAAAAAABvGwAAAAAAAHAbAAAAAAAAAAAAAHAbAAAAAAAAcRsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbRsAAAAAAABtGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1362,
					1,
					"insert",
					{
						"characters": "\nbody="
					},
					"BgAAAHMbAAAAAAAAdBsAAAAAAAAAAAAAdBsAAAAAAAB1GwAAAAAAAAAAAAB1GwAAAAAAAHYbAAAAAAAAAAAAAHYbAAAAAAAAdxsAAAAAAAAAAAAAdxsAAAAAAAB4GwAAAAAAAAAAAAB4GwAAAAAAAHkbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcxsAAAAAAABzGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1363,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAHkbAAAAAAAAexsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeRsAAAAAAAB5GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1364,
					1,
					"insert",
					{
						"characters": "...body"
					},
					"BwAAAHobAAAAAAAAexsAAAAAAAAAAAAAexsAAAAAAAB8GwAAAAAAAAAAAAB8GwAAAAAAAH0bAAAAAAAAAAAAAH0bAAAAAAAAfhsAAAAAAAAAAAAAfhsAAAAAAAB/GwAAAAAAAAAAAAB/GwAAAAAAAIAbAAAAAAAAAAAAAIAbAAAAAAAAgRsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAehsAAAAAAAB6GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1366,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIIbAAAAAAAAgxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAghsAAAAAAACCGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1373,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHMbAAAAAAAAdRsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcxsAAAAAAABzGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1374,
					1,
					"right_delete",
					null,
					"AQAAAHQbAAAAAAAAdBsAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAdBsAAAAAAAB0GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1376,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"AgAAAIQbAAAAAAAAhRsAAAAAAAAAAAAAhRsAAAAAAACGGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhBsAAAAAAACEGwAAAAAAAAAAAAAAAG5A"
				],
				[
					1386,
					1,
					"paste",
					null,
					"AQAAAIUbAAAAAAAAphsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhRsAAAAAAACFGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1418,
					1,
					"left_delete",
					null,
					"AQAAAGQbAAAAAAAAZBsAAAAAAAAIAAAAaXNPYmplY3Q",
					"AQAAAAAAAAABAAAAZBsAAAAAAABsGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1419,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAAGQbAAAAAAAAZRsAAAAAAAAAAAAAZRsAAAAAAABmGwAAAAAAAAAAAABmGwAAAAAAAGcbAAAAAAAAAAAAAGcbAAAAAAAAaBsAAAAAAAAAAAAAaBsAAAAAAABpGwAAAAAAAAAAAABpGwAAAAAAAGobAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBsAAAAAAABkGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1420,
					1,
					"insert",
					{
						"characters": " body"
					},
					"BQAAAGobAAAAAAAAaxsAAAAAAAAAAAAAaxsAAAAAAABsGwAAAAAAAAAAAABsGwAAAAAAAG0bAAAAAAAAAAAAAG0bAAAAAAAAbhsAAAAAAAAAAAAAbhsAAAAAAABvGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahsAAAAAAABqGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1421,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAG8bAAAAAAAAcBsAAAAAAAAAAAAAcBsAAAAAAABxGwAAAAAAAAAAAABxGwAAAAAAAHIbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbxsAAAAAAABvGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1422,
					1,
					"insert",
					{
						"characters": " 'string')"
					},
					"CgAAAHIbAAAAAAAAcxsAAAAAAAAAAAAAcxsAAAAAAAB0GwAAAAAAAAAAAAB0GwAAAAAAAHUbAAAAAAAAAAAAAHUbAAAAAAAAdhsAAAAAAAAAAAAAdhsAAAAAAAB3GwAAAAAAAAAAAAB3GwAAAAAAAHgbAAAAAAAAAAAAAHgbAAAAAAAAeRsAAAAAAAAAAAAAeRsAAAAAAAB6GwAAAAAAAAAAAAB6GwAAAAAAAHsbAAAAAAAAAAAAAHsbAAAAAAAAfBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAchsAAAAAAAByGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1424,
					1,
					"left_delete",
					null,
					"AQAAAHwbAAAAAAAAfBsAAAAAAAAHAAAAKGJvZHkpKQ",
					"AQAAAAAAAAABAAAAfBsAAAAAAACDGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1430,
					1,
					"left_delete",
					null,
					"AQAAAGMbAAAAAAAAYxsAAAAAAAABAAAAIQ",
					"AQAAAAAAAAABAAAAZBsAAAAAAABkGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1437,
					6,
					"right_delete",
					null,
					"BgAAAAcbAAAAAAAABxsAAAAAAAABAAAAIAcbAAAAAAAABxsAAAAAAAABAAAAYwcbAAAAAAAABxsAAAAAAAABAAAAbwcbAAAAAAAABxsAAAAAAAABAAAAbgcbAAAAAAAABxsAAAAAAAABAAAAcwcbAAAAAAAABxsAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAABxsAAAAAAAAHGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1438,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAAcbAAAAAAAACBsAAAAAAAAAAAAACBsAAAAAAAAJGwAAAAAAAAAAAAAJGwAAAAAAAAobAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABxsAAAAAAAAHGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1448,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHkbAAAAAAAAehsAAAAAAAAAAAAAehsAAAAAAAB8GwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeRsAAAAAAAB5GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1451,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAHwbAAAAAAAAfRsAAAAAAAAAAAAAfRsAAAAAAAB+GwAAAAAAAAAAAAB+GwAAAAAAAH8bAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBsAAAAAAAB8GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1452,
					1,
					"insert",
					{
						"characters": " s="
					},
					"AwAAAH8bAAAAAAAAgBsAAAAAAAAAAAAAgBsAAAAAAACBGwAAAAAAAAAAAACBGwAAAAAAAIIbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxsAAAAAAAB/GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1453,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIIbAAAAAAAAhBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAghsAAAAAAACCGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1455,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIQbAAAAAAAAhRsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhBsAAAAAAACEGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1456,
					1,
					"insert",
					{
						"characters": "\n\nwhile"
					},
					"CgAAAIUbAAAAAAAAhhsAAAAAAAAAAAAAhhsAAAAAAACIGwAAAAAAAAAAAACIGwAAAAAAAIkbAAAAAAAAAAAAAIkbAAAAAAAAixsAAAAAAAAAAAAAhhsAAAAAAACGGwAAAAAAAAIAAAAgIIkbAAAAAAAAihsAAAAAAAAAAAAAihsAAAAAAACLGwAAAAAAAAAAAACLGwAAAAAAAIwbAAAAAAAAAAAAAIwbAAAAAAAAjRsAAAAAAAAAAAAAjRsAAAAAAACOGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhRsAAAAAAACFGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1457,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI4bAAAAAAAAkBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhsAAAAAAACOGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1460,
					1,
					"insert",
					{
						"characters": "x,"
					},
					"AgAAAIAbAAAAAAAAgRsAAAAAAAAAAAAAgRsAAAAAAACCGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgBsAAAAAAACAGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1465,
					1,
					"insert",
					{
						"characters": "x="
					},
					"AgAAAJEbAAAAAAAAkhsAAAAAAAAAAAAAkhsAAAAAAACTGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkRsAAAAAAACRGwAAAAAAAAAAAAAAAFhA"
				],
				[
					1467,
					3,
					"left_delete",
					null,
					"AwAAAJMbAAAAAAAAkxsAAAAAAAABAAAAKZIbAAAAAAAAkhsAAAAAAAABAAAAPZEbAAAAAAAAkRsAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAlBsAAAAAAACUGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1468,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJEbAAAAAAAAkxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkRsAAAAAAACRGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1469,
					1,
					"insert",
					{
						"characters": "x=body.next"
					},
					"CwAAAJIbAAAAAAAAkxsAAAAAAAAAAAAAkxsAAAAAAACUGwAAAAAAAAAAAACUGwAAAAAAAJUbAAAAAAAAAAAAAJUbAAAAAAAAlhsAAAAAAAAAAAAAlhsAAAAAAACXGwAAAAAAAAAAAACXGwAAAAAAAJgbAAAAAAAAAAAAAJgbAAAAAAAAmRsAAAAAAAAAAAAAmRsAAAAAAACaGwAAAAAAAAAAAACaGwAAAAAAAJsbAAAAAAAAAAAAAJsbAAAAAAAAnBsAAAAAAAAAAAAAnBsAAAAAAACdGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkhsAAAAAAACSGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1470,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ0bAAAAAAAAnxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnRsAAAAAAACdGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1472,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKAbAAAAAAAAoRsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBsAAAAAAACgGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1473,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKEbAAAAAAAAohsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoRsAAAAAAAChGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1474,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKIbAAAAAAAApBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohsAAAAAAACiGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1475,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAKMbAAAAAAAApBsAAAAAAAAAAAAApBsAAAAAAACmGwAAAAAAAAAAAACmGwAAAAAAAKcbAAAAAAAAAAAAAKcbAAAAAAAAqRsAAAAAAAAAAAAApBsAAAAAAACkGwAAAAAAAAIAAAAgIKQbAAAAAAAAqBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxsAAAAAAACjGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1476,
					1,
					"insert",
					{
						"characters": "s+="
					},
					"AwAAAKgbAAAAAAAAqRsAAAAAAAAAAAAAqRsAAAAAAACqGwAAAAAAAAAAAACqGwAAAAAAAKsbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqBsAAAAAAACoGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1477,
					1,
					"insert",
					{
						"characters": " x;"
					},
					"AwAAAKsbAAAAAAAArBsAAAAAAAAAAAAArBsAAAAAAACtGwAAAAAAAAAAAACtGwAAAAAAAK4bAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqxsAAAAAAACrGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1481,
					1,
					"left_delete",
					null,
					"AQAAALMbAAAAAAAAsxsAAAAAAAAQAAAAYm9keT1bLi4uYm9keV07Cg",
					"AQAAAAAAAAABAAAAsxsAAAAAAADDGwAAAAAAAAAAAAAAAAAA"
				],
				[
					1485,
					1,
					"insert",
					{
						"characters": "\nbody=s;M"
					},
					"CgAAALIbAAAAAAAAsxsAAAAAAAAAAAAAsxsAAAAAAAC1GwAAAAAAAAAAAAC1GwAAAAAAALYbAAAAAAAAAAAAALYbAAAAAAAAtxsAAAAAAAAAAAAAtxsAAAAAAAC4GwAAAAAAAAAAAAC4GwAAAAAAALkbAAAAAAAAAAAAALkbAAAAAAAAuhsAAAAAAAAAAAAAuhsAAAAAAAC7GwAAAAAAAAAAAAC7GwAAAAAAALwbAAAAAAAAAAAAALwbAAAAAAAAvRsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshsAAAAAAACyGwAAAAAAAAAAAAAAAHhA"
				],
				[
					1490,
					1,
					"left_delete",
					null,
					"AQAAALwbAAAAAAAAvBsAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAvRsAAAAAAAC9GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1527,
					1,
					"paste",
					null,
					"AQAAAKcbAAAAAAAAyBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxsAAAAAAACnGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1530,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AgAAALQbAAAAAAAAtRsAAAAAAAAAAAAAtRsAAAAAAAC1GwAAAAAAAAsAAAAqZmlsZXMuYm9keQ",
					"AQAAAAAAAAABAAAAtBsAAAAAAAC/GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1535,
					1,
					"insert",
					{
						"characters": "xs"
					},
					"AwAAALcbAAAAAAAAuBsAAAAAAAAAAAAAuBsAAAAAAAC4GwAAAAAAAAQAAABib2R5uBsAAAAAAAC5GwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxsAAAAAAAC7GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1538,
					1,
					"left_delete",
					null,
					"AQAAALgbAAAAAAAAuBsAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAuRsAAAAAAAC5GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1583,
					1,
					"paste",
					null,
					"AQAAAGQwAAAAAAAArzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZDAAAAAAAABkMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1586,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGowAAAAAAAAazAAAAAAAAAAAAAAazAAAAAAAABrMAAAAAAAAAQAAAAgIC8v",
					"AQAAAAAAAAABAAAAbjAAAAAAAABqMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1589,
					1,
					"insert",
					{
						"characters": "req.-b"
					},
					"BwAAAHswAAAAAAAAfDAAAAAAAAAAAAAAfDAAAAAAAAB8MAAAAAAAABoAAABceDFiWzM4OzU7MzNtb25IdHRwXHgxYlswbXwwAAAAAAAAfTAAAAAAAAAAAAAAfTAAAAAAAAB+MAAAAAAAAAAAAAB+MAAAAAAAAH8wAAAAAAAAAAAAAH8wAAAAAAAAgDAAAAAAAAAAAAAAgDAAAAAAAACBMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAezAAAAAAAACVMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1590,
					2,
					"left_delete",
					null,
					"AgAAAIAwAAAAAAAAgDAAAAAAAAABAAAAYn8wAAAAAAAAfzAAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAgTAAAAAAAACBMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1591,
					1,
					"insert",
					{
						"characters": "body"
					},
					"BAAAAH8wAAAAAAAAgDAAAAAAAAAAAAAAgDAAAAAAAACBMAAAAAAAAAAAAACBMAAAAAAAAIIwAAAAAAAAAAAAAIIwAAAAAAAAgzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfzAAAAAAAAB/MAAAAAAAAAAAAAAAAPC/"
				],
				[
					1594,
					1,
					"insert",
					{
						"characters": "req.body"
					},
					"CQAAAIYwAAAAAAAAhzAAAAAAAAAAAAAAhzAAAAAAAACHMAAAAAAAABEAAAB7IGFkZHJlc3MsIHBvcnQgfYcwAAAAAAAAiDAAAAAAAAAAAAAAiDAAAAAAAACJMAAAAAAAAAAAAACJMAAAAAAAAIowAAAAAAAAAAAAAIowAAAAAAAAizAAAAAAAAAAAAAAizAAAAAAAACMMAAAAAAAAAAAAACMMAAAAAAAAI0wAAAAAAAAAAAAAI0wAAAAAAAAjjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhjAAAAAAAACXMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1597,
					5,
					"left_delete",
					null,
					"BQAAAI0wAAAAAAAAjTAAAAAAAAABAAAAeYwwAAAAAAAAjDAAAAAAAAABAAAAZIswAAAAAAAAizAAAAAAAAABAAAAb4owAAAAAAAAijAAAAAAAAABAAAAYokwAAAAAAAAiTAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAjjAAAAAAAACOMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1598,
					1,
					"insert",
					{
						"characters": ".body"
					},
					"BQAAAIkwAAAAAAAAijAAAAAAAAAAAAAAijAAAAAAAACLMAAAAAAAAAAAAACLMAAAAAAAAIwwAAAAAAAAAAAAAIwwAAAAAAAAjTAAAAAAAAAAAAAAjTAAAAAAAACOMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiTAAAAAAAACJMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1625,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAABcRAAAAAAAAGBEAAAAAAAAAAAAAGBEAAAAAAAAaEQAAAAAAAAAAAAAaEQAAAAAAABsRAAAAAAAAAAAAABsRAAAAAAAAHREAAAAAAAAAAAAAGBEAAAAAAAAYEQAAAAAAAAIAAAAgIBsRAAAAAAAAHBEAAAAAAAAAAAAAHBEAAAAAAAAeEQAAAAAAAAAAAAAZEQAAAAAAABkRAAAAAAAAAgAAACAg",
					"AQAAAAAAAAABAAAAFxEAAAAAAAAXEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1627,
					1,
					"insert",
					{
						"characters": "asynx"
					},
					"BgAAABkRAAAAAAAAGhEAAAAAAAAAAAAAGxEAAAAAAAAbEQAAAAAAAAIAAAAgIBoRAAAAAAAAGxEAAAAAAAAAAAAAGxEAAAAAAAAcEQAAAAAAAAAAAAAcEQAAAAAAAB0RAAAAAAAAAAAAAB0RAAAAAAAAHhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGREAAAAAAAAZEQAAAAAAAAAAAAAAADhA"
				],
				[
					1628,
					1,
					"left_delete",
					null,
					"AQAAAB0RAAAAAAAAHREAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAHhEAAAAAAAAeEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1629,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAB0RAAAAAAAAHhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHREAAAAAAAAdEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1630,
					1,
					"insert",
					{
						"characters": " function"
					},
					"CQAAAB4RAAAAAAAAHxEAAAAAAAAAAAAAHxEAAAAAAAAgEQAAAAAAAAAAAAAgEQAAAAAAACERAAAAAAAAAAAAACERAAAAAAAAIhEAAAAAAAAAAAAAIhEAAAAAAAAjEQAAAAAAAAAAAAAjEQAAAAAAACQRAAAAAAAAAAAAACQRAAAAAAAAJREAAAAAAAAAAAAAJREAAAAAAAAmEQAAAAAAAAAAAAAmEQAAAAAAACcRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhEAAAAAAAAeEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1631,
					1,
					"insert",
					{
						"characters": " ParseBody"
					},
					"CgAAACcRAAAAAAAAKBEAAAAAAAAAAAAAKBEAAAAAAAApEQAAAAAAAAAAAAApEQAAAAAAACoRAAAAAAAAAAAAACoRAAAAAAAAKxEAAAAAAAAAAAAAKxEAAAAAAAAsEQAAAAAAAAAAAAAsEQAAAAAAAC0RAAAAAAAAAAAAAC0RAAAAAAAALhEAAAAAAAAAAAAALhEAAAAAAAAvEQAAAAAAAAAAAAAvEQAAAAAAADARAAAAAAAAAAAAADARAAAAAAAAMREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJxEAAAAAAAAnEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1632,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADERAAAAAAAAMxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMREAAAAAAAAxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1633,
					1,
					"insert",
					{
						"characters": "gen"
					},
					"AwAAADIRAAAAAAAAMxEAAAAAAAAAAAAAMxEAAAAAAAA0EQAAAAAAAAAAAAA0EQAAAAAAADURAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhEAAAAAAAAyEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1635,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADYRAAAAAAAANxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhEAAAAAAAA2EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1636,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADcRAAAAAAAAOREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxEAAAAAAAA3EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1637,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAADgRAAAAAAAAOREAAAAAAAAAAAAAOREAAAAAAAA6EQAAAAAAAAAAAAA5EQAAAAAAADsRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBEAAAAAAAA4EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1638,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAADsRAAAAAAAAPBEAAAAAAAAAAAAAPBEAAAAAAAA+EQAAAAAAAAAAAAA5EQAAAAAAADkRAAAAAAAAAgAAACAgPBEAAAAAAAA9EQAAAAAAAAAAAAA9EQAAAAAAAD4RAAAAAAAAAAAAAD4RAAAAAAAAPxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxEAAAAAAAA7EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1639,
					1,
					"insert",
					{
						"characters": " prom"
					},
					"BQAAAD8RAAAAAAAAQBEAAAAAAAAAAAAAQBEAAAAAAABBEQAAAAAAAAAAAABBEQAAAAAAAEIRAAAAAAAAAAAAAEIRAAAAAAAAQxEAAAAAAAAAAAAAQxEAAAAAAABEEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPxEAAAAAAAA/EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1640,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEQRAAAAAAAARREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBEAAAAAAABEEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1641,
					1,
					"left_delete",
					null,
					"AQAAAEQRAAAAAAAARBEAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAARREAAAAAAABFEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1642,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEQRAAAAAAAARREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBEAAAAAAABEEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1643,
					1,
					"left_delete",
					null,
					"AQAAAEQRAAAAAAAARBEAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAARREAAAAAAABFEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1644,
					1,
					"insert",
					{
						"characters": ",o,x;"
					},
					"BQAAAEQRAAAAAAAARREAAAAAAAAAAAAARREAAAAAAABGEQAAAAAAAAAAAABGEQAAAAAAAEcRAAAAAAAAAAAAAEcRAAAAAAAASBEAAAAAAAAAAAAASBEAAAAAAABJEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBEAAAAAAABEEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1645,
					1,
					"insert",
					{
						"characters": "\n\nwhile"
					},
					"CgAAAEkRAAAAAAAAShEAAAAAAAAAAAAAShEAAAAAAABMEQAAAAAAAAAAAABMEQAAAAAAAE0RAAAAAAAAAAAAAE0RAAAAAAAATxEAAAAAAAAAAAAAShEAAAAAAABKEQAAAAAAAAIAAAAgIE0RAAAAAAAAThEAAAAAAAAAAAAAThEAAAAAAABPEQAAAAAAAAAAAABPEQAAAAAAAFARAAAAAAAAAAAAAFARAAAAAAAAUREAAAAAAAAAAAAAUREAAAAAAABSEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASREAAAAAAABJEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1646,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAAFIRAAAAAAAAVBEAAAAAAAAAAAAAUxEAAAAAAABVEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhEAAAAAAABSEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1647,
					1,
					"insert",
					{
						"characters": "prom"
					},
					"BAAAAFQRAAAAAAAAVREAAAAAAAAAAAAAVREAAAAAAABWEQAAAAAAAAAAAABWEQAAAAAAAFcRAAAAAAAAAAAAAFcRAAAAAAAAWBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBEAAAAAAABUEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1648,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAFgRAAAAAAAAWREAAAAAAAAAAAAAWREAAAAAAABaEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBEAAAAAAABYEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1649,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFoRAAAAAAAAWxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhEAAAAAAABaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1650,
					2,
					"left_delete",
					null,
					"AgAAAFoRAAAAAAAAWhEAAAAAAAABAAAAIFkRAAAAAAAAWREAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAWxEAAAAAAABbEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1651,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAFkRAAAAAAAAWhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWREAAAAAAABZEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1652,
					1,
					"insert",
					{
						"characters": " gen."
					},
					"BQAAAFoRAAAAAAAAWxEAAAAAAAAAAAAAWxEAAAAAAABcEQAAAAAAAAAAAABcEQAAAAAAAF0RAAAAAAAAAAAAAF0RAAAAAAAAXhEAAAAAAAAAAAAAXhEAAAAAAABfEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhEAAAAAAABaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1653,
					1,
					"insert",
					{
						"characters": " nex"
					},
					"BAAAAF8RAAAAAAAAYBEAAAAAAAAAAAAAYBEAAAAAAABhEQAAAAAAAAAAAABhEQAAAAAAAGIRAAAAAAAAAAAAAGIRAAAAAAAAYxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxEAAAAAAABfEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1654,
					4,
					"left_delete",
					null,
					"BAAAAGIRAAAAAAAAYhEAAAAAAAABAAAAeGERAAAAAAAAYREAAAAAAAABAAAAZWARAAAAAAAAYBEAAAAAAAABAAAAbl8RAAAAAAAAXxEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAYxEAAAAAAABjEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1655,
					1,
					"insert",
					{
						"characters": "next"
					},
					"BAAAAF8RAAAAAAAAYBEAAAAAAAAAAAAAYBEAAAAAAABhEQAAAAAAAAAAAABhEQAAAAAAAGIRAAAAAAAAAAAAAGIRAAAAAAAAYxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxEAAAAAAABfEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1656,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGMRAAAAAAAAZREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxEAAAAAAABjEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1665,
					1,
					"insert",
					{
						"characters": "\nfor"
					},
					"BAAAAEoRAAAAAAAASxEAAAAAAAAAAAAASxEAAAAAAABMEQAAAAAAAAAAAABMEQAAAAAAAE0RAAAAAAAAAAAAAE0RAAAAAAAAThEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShEAAAAAAABKEQAAAAAAAAAAAAAAAFhA"
				],
				[
					1666,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAE4RAAAAAAAAUBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAThEAAAAAAABOEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1667,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAE8RAAAAAAAAUBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATxEAAAAAAABPEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1668,
					1,
					"left_delete",
					null,
					"AQAAAE8RAAAAAAAATxEAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAUBEAAAAAAABQEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1669,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAE4RAAAAAAAAThEAAAAAAAABAAAAKE4RAAAAAAAAThEAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAATxEAAAAAAABPEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1670,
					1,
					"insert",
					{
						"characters": " await"
					},
					"BgAAAE4RAAAAAAAATxEAAAAAAAAAAAAATxEAAAAAAABQEQAAAAAAAAAAAABQEQAAAAAAAFERAAAAAAAAAAAAAFERAAAAAAAAUhEAAAAAAAAAAAAAUhEAAAAAAABTEQAAAAAAAAAAAABTEQAAAAAAAFQRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAThEAAAAAAABOEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1671,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFQRAAAAAAAAVREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBEAAAAAAABUEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1672,
					1,
					"left_delete",
					null,
					"AQAAAFQRAAAAAAAAVBEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAVREAAAAAAABVEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1673,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFQRAAAAAAAAVhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBEAAAAAAABUEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1674,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAFURAAAAAAAAVhEAAAAAAAAAAAAAVhEAAAAAAABXEQAAAAAAAAAAAABXEQAAAAAAAFgRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVREAAAAAAABVEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1675,
					1,
					"insert",
					{
						"characters": " x"
					},
					"AgAAAFgRAAAAAAAAWREAAAAAAAAAAAAAWREAAAAAAABaEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBEAAAAAAABYEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1676,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAFoRAAAAAAAAWxEAAAAAAAAAAAAAWxEAAAAAAABcEQAAAAAAAAAAAABcEQAAAAAAAF0RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhEAAAAAAABaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1677,
					1,
					"insert",
					{
						"characters": " await"
					},
					"BgAAAF0RAAAAAAAAXhEAAAAAAAAAAAAAXhEAAAAAAABfEQAAAAAAAAAAAABfEQAAAAAAAGARAAAAAAAAAAAAAGARAAAAAAAAYREAAAAAAAAAAAAAYREAAAAAAABiEQAAAAAAAAAAAABiEQAAAAAAAGMRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXREAAAAAAABdEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1678,
					1,
					"insert",
					{
						"characters": " gen.next"
					},
					"CQAAAGMRAAAAAAAAZBEAAAAAAAAAAAAAZBEAAAAAAABlEQAAAAAAAAAAAABlEQAAAAAAAGYRAAAAAAAAAAAAAGYRAAAAAAAAZxEAAAAAAAAAAAAAZxEAAAAAAABoEQAAAAAAAAAAAABoEQAAAAAAAGkRAAAAAAAAAAAAAGkRAAAAAAAAahEAAAAAAAAAAAAAahEAAAAAAABrEQAAAAAAAAAAAABrEQAAAAAAAGwRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxEAAAAAAABjEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1679,
					14,
					"left_delete",
					null,
					"DgAAAGsRAAAAAAAAaxEAAAAAAAABAAAAdGoRAAAAAAAAahEAAAAAAAABAAAAeGkRAAAAAAAAaREAAAAAAAABAAAAZWgRAAAAAAAAaBEAAAAAAAABAAAAbmcRAAAAAAAAZxEAAAAAAAABAAAALmYRAAAAAAAAZhEAAAAAAAABAAAAbmURAAAAAAAAZREAAAAAAAABAAAAZWQRAAAAAAAAZBEAAAAAAAABAAAAZ2MRAAAAAAAAYxEAAAAAAAABAAAAIGIRAAAAAAAAYhEAAAAAAAABAAAAdGERAAAAAAAAYREAAAAAAAABAAAAaWARAAAAAAAAYBEAAAAAAAABAAAAYV8RAAAAAAAAXxEAAAAAAAABAAAAd14RAAAAAAAAXhEAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAbBEAAAAAAABsEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1680,
					1,
					"insert",
					{
						"characters": "gen"
					},
					"AwAAAF4RAAAAAAAAXxEAAAAAAAAAAAAAXxEAAAAAAABgEQAAAAAAAAAAAABgEQAAAAAAAGERAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhEAAAAAAABeEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1682,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGIRAAAAAAAAYxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhEAAAAAAABiEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1683,
					1,
					"wrap_block",
					{
						"begin": "{",
						"end": "}"
					},
					"AgAAAGMRAAAAAAAAZBEAAAAAAAAAAAAAghEAAAAAAACEEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxEAAAAAAABjEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1684,
					1,
					"left_delete",
					null,
					"AQAAAGMRAAAAAAAAYxEAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAAZBEAAAAAAABkEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1687,
					1,
					"left_delete",
					null,
					"AQAAAGQRAAAAAAAAZBEAAAAAAAAdAAAAICB3aGlsZSgocHJvbSA9IGdlbi5uZXh0KCkpKQo",
					"AQAAAAAAAAABAAAAZBEAAAAAAACBEQAAAAAAAAAAAAAAAAAA"
				],
				[
					1689,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGMRAAAAAAAAZREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxEAAAAAAABjEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1690,
					1,
					"right_delete",
					null,
					"AQAAAGQRAAAAAAAAZBEAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAZBEAAAAAAABkEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1693,
					1,
					"insert",
					{
						"characters": "\no+=x;"
					},
					"BwAAAGQRAAAAAAAAZREAAAAAAAAAAAAAZREAAAAAAABnEQAAAAAAAAAAAABnEQAAAAAAAGgRAAAAAAAAAAAAAGgRAAAAAAAAaREAAAAAAAAAAAAAaREAAAAAAABqEQAAAAAAAAAAAABqEQAAAAAAAGsRAAAAAAAAAAAAAGsRAAAAAAAAbBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBEAAAAAAABkEQAAAAAAAAAAAAAAwHJA"
				],
				[
					1696,
					1,
					"insert",
					{
						"characters": "=''"
					},
					"AwAAAEYRAAAAAAAARxEAAAAAAAAAAAAARxEAAAAAAABIEQAAAAAAAAAAAABIEQAAAAAAAEkRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhEAAAAAAABGEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1698,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"BwAAAHERAAAAAAAAchEAAAAAAAAAAAAAchEAAAAAAABzEQAAAAAAAAAAAABzEQAAAAAAAHQRAAAAAAAAAAAAAHQRAAAAAAAAdREAAAAAAAAAAAAAdREAAAAAAAB2EQAAAAAAAAAAAAB2EQAAAAAAAHcRAAAAAAAAAAAAAHcRAAAAAAAAeBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcREAAAAAAABxEQAAAAAAAAAAAAAAgGZA"
				],
				[
					1699,
					1,
					"insert",
					{
						"characters": " o;:"
					},
					"BAAAAHgRAAAAAAAAeREAAAAAAAAAAAAAeREAAAAAAAB6EQAAAAAAAAAAAAB6EQAAAAAAAHsRAAAAAAAAAAAAAHsRAAAAAAAAfBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBEAAAAAAAB4EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1700,
					1,
					"left_delete",
					null,
					"AQAAAHsRAAAAAAAAexEAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAfBEAAAAAAAB8EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1712,
					1,
					"insert",
					{
						"characters": "async"
					},
					"BQAAAEcbAAAAAAAASBsAAAAAAAAAAAAASBsAAAAAAABJGwAAAAAAAAAAAABJGwAAAAAAAEobAAAAAAAAAAAAAEobAAAAAAAASxsAAAAAAAAAAAAASxsAAAAAAABMGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxsAAAAAAABHGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1713,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEwbAAAAAAAATRsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBsAAAAAAABMGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1716,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAKgbAAAAAAAAqRsAAAAAAAAAAAAAqRsAAAAAAACzGwAAAAAAAAAAAACzGwAAAAAAALQbAAAAAAAAAAAAALQbAAAAAAAAvhsAAAAAAAAAAAAAqRsAAAAAAACpGwAAAAAAAAoAAAAgICAgICAgICAg",
					"AQAAAAAAAAABAAAAqBsAAAAAAACoGwAAAAAAAAAAAAAAwHJA"
				],
				[
					1726,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAANUbAAAAAAAA1hsAAAAAAAAAAAAAqhsAAAAAAACqGwAAAAAAAAoAAAAgICAgICAgICAgzBsAAAAAAADNGwAAAAAAAAAAAADNGwAAAAAAAM4bAAAAAAAAAAAAAM4bAAAAAAAAzxsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1RsAAAAAAADVGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1727,
					1,
					"insert",
					{
						"characters": " query="
					},
					"BwAAAM8bAAAAAAAA0BsAAAAAAAAAAAAA0BsAAAAAAADRGwAAAAAAAAAAAADRGwAAAAAAANIbAAAAAAAAAAAAANIbAAAAAAAA0xsAAAAAAAAAAAAA0xsAAAAAAADUGwAAAAAAAAAAAADUGwAAAAAAANUbAAAAAAAAAAAAANUbAAAAAAAA1hsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzxsAAAAAAADPGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1728,
					1,
					"insert",
					{
						"characters": " par"
					},
					"BAAAANYbAAAAAAAA1xsAAAAAAAAAAAAA1xsAAAAAAADYGwAAAAAAAAAAAADYGwAAAAAAANkbAAAAAAAAAAAAANkbAAAAAAAA2hsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1hsAAAAAAADWGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1729,
					3,
					"left_delete",
					null,
					"AwAAANkbAAAAAAAA2RsAAAAAAAABAAAActgbAAAAAAAA2BsAAAAAAAABAAAAYdcbAAAAAAAA1xsAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAA2hsAAAAAAADaGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1730,
					1,
					"paste",
					null,
					"AQAAANcbAAAAAAAA4BsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xsAAAAAAADXGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1731,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOAbAAAAAAAA4hsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BsAAAAAAADgGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1733,
					1,
					"insert",
					{
						"characters": " await"
					},
					"BgAAANYbAAAAAAAA1xsAAAAAAAAAAAAA1xsAAAAAAADYGwAAAAAAAAAAAADYGwAAAAAAANkbAAAAAAAAAAAAANkbAAAAAAAA2hsAAAAAAAAAAAAA2hsAAAAAAADbGwAAAAAAAAAAAADbGwAAAAAAANwbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1hsAAAAAAADWGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1736,
					1,
					"insert",
					{
						"characters": "body"
					},
					"BAAAAOcbAAAAAAAA6BsAAAAAAAAAAAAA6BsAAAAAAADpGwAAAAAAAAAAAADpGwAAAAAAAOobAAAAAAAAAAAAAOobAAAAAAAA6xsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xsAAAAAAADnGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1738,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOwbAAAAAAAA7RsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7BsAAAAAAADsGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1741,
					1,
					"left_delete",
					null,
					"AQAAAO4bAAAAAAAA7hsAAAAAAAB0AAAAaWYodHlwZW9mIGJvZHkgIT0gJ3N0cmluZycpewogIGxldCB4LHM9Jyc7CgogIHdoaWxlKCh4PWJvZHkubmV4dCgpKSkgewogICBjb25zb2xlLmxvZygneCcseCk7CiBzKz0geDsKICB9CiAgYm9keT1zOwo",
					"AQAAAAAAAAABAAAA7hsAAAAAAABiHAAAAAAAAAAAAAAAAAAA"
				],
				[
					1744,
					1,
					"insert",
					{
						"characters": "query"
					},
					"BgAAAPsbAAAAAAAA/BsAAAAAAAAAAAAA/BsAAAAAAAD8GwAAAAAAAAsAAAAqZmlsZXMuYm9kefwbAAAAAAAA/RsAAAAAAAAAAAAA/RsAAAAAAAD+GwAAAAAAAAAAAAD+GwAAAAAAAP8bAAAAAAAAAAAAAP8bAAAAAAAAABwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xsAAAAAAAAGHAAAAAAAAAAAAAAAAPC/"
				],
				[
					1746,
					4,
					"right_delete",
					null,
					"BAAAAAIcAAAAAAAAAhwAAAAAAAABAAAAYgIcAAAAAAAAAhwAAAAAAAABAAAAbwIcAAAAAAAAAhwAAAAAAAABAAAAZAIcAAAAAAAAAhwAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAPC/"
				],
				[
					1747,
					1,
					"insert",
					{
						"characters": "query"
					},
					"BQAAAAIcAAAAAAAAAxwAAAAAAAAAAAAAAxwAAAAAAAAEHAAAAAAAAAAAAAAEHAAAAAAAAAUcAAAAAAAAAAAAAAUcAAAAAAAABhwAAAAAAAAAAAAABhwAAAAAAAAHHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAPC/"
				],
				[
					1749,
					1,
					"right_delete",
					null,
					"AQAAAAocAAAAAAAAChwAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAChwAAAAAAAAKHAAAAAAAAAAAAAAAAPC/"
				],
				[
					1754,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAChwAAAAAAAAKHAAAAAAAAAAAAAAAAPC/"
				],
				[
					1775,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAG8bAAAAAAAAcBsAAAAAAAAAAAAAcBsAAAAAAABwGwAAAAAAAAUAAABhc3luYw",
					"AQAAAAAAAAABAAAAbxsAAAAAAAB0GwAAAAAAAAAAAAAAAPC/"
				],
				[
					1792,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABAcAAAAAAAAERwAAAAAAAAAAAAAERwAAAAAAAARHAAAAAAAAAUAAABhd2FpdA",
					"AQAAAAAAAAABAAAAEBwAAAAAAAAVHAAAAAAAAAAAAAAAAPC/"
				],
				[
					1811,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABsRAAAAAAAAHBEAAAAAAAAAAAAAHBEAAAAAAAAcEQAAAAAAAAUAAABhc3luYw",
					"AQAAAAAAAAABAAAAGxEAAAAAAAAgEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1820,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGURAAAAAAAAZhEAAAAAAAAAAAAAZhEAAAAAAABmEQAAAAAAAAUAAABhd2FpdA",
					"AQAAAAAAAAABAAAAZREAAAAAAABqEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1825,
					1,
					"insert",
					{
						"characters": "while"
					},
					"BgAAAGERAAAAAAAAYhEAAAAAAAAAAAAAYhEAAAAAAABiEQAAAAAAAAMAAABmb3JiEQAAAAAAAGMRAAAAAAAAAAAAAGMRAAAAAAAAZBEAAAAAAAAAAAAAZBEAAAAAAABlEQAAAAAAAAAAAABlEQAAAAAAAGYRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYREAAAAAAABkEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1826,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGYRAAAAAAAAaBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhEAAAAAAABmEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1827,
					1,
					"insert",
					{
						"characters": "x=gen.ne"
					},
					"CAAAAGcRAAAAAAAAaBEAAAAAAAAAAAAAaBEAAAAAAABpEQAAAAAAAAAAAABpEQAAAAAAAGoRAAAAAAAAAAAAAGoRAAAAAAAAaxEAAAAAAAAAAAAAaxEAAAAAAABsEQAAAAAAAAAAAABsEQAAAAAAAG0RAAAAAAAAAAAAAG0RAAAAAAAAbhEAAAAAAAAAAAAAbhEAAAAAAABvEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxEAAAAAAABnEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1828,
					1,
					"insert",
					{
						"characters": "xt"
					},
					"AgAAAG8RAAAAAAAAcBEAAAAAAAAAAAAAcBEAAAAAAABxEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbxEAAAAAAABvEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1829,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHERAAAAAAAAcxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcREAAAAAAABxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1832,
					1,
					"right_delete",
					null,
					"AQAAAHQRAAAAAAAAdBEAAAAAAAAQAAAAICAobGV0IHggb2YgZ2VuKQ",
					"AQAAAAAAAAABAAAAdBEAAAAAAACEEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1844,
					1,
					"insert",
					{
						"characters": "\nlö"
					},
					"BQAAAHYRAAAAAAAAdxEAAAAAAAAAAAAAdxEAAAAAAAB7EQAAAAAAAAAAAAB7EQAAAAAAAH0RAAAAAAAAAAAAAH0RAAAAAAAAfhEAAAAAAAAAAAAAfhEAAAAAAAB/EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdhEAAAAAAAB2EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1845,
					1,
					"left_delete",
					null,
					"AQAAAH4RAAAAAAAAfhEAAAAAAAACAAAAw7Y",
					"AQAAAAAAAAABAAAAfxEAAAAAAAB/EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1846,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAAH4RAAAAAAAAfxEAAAAAAAAAAAAAfxEAAAAAAACAEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfhEAAAAAAAB+EQAAAAAAAAAAAAAAAPC/"
				],
				[
					1847,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIARAAAAAAAAghEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgBEAAAAAAACAEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1848,
					1,
					"insert",
					{
						"characters": "value,done$="
					},
					"DAAAAIERAAAAAAAAghEAAAAAAAAAAAAAghEAAAAAAACDEQAAAAAAAAAAAACDEQAAAAAAAIQRAAAAAAAAAAAAAIQRAAAAAAAAhREAAAAAAAAAAAAAhREAAAAAAACGEQAAAAAAAAAAAACGEQAAAAAAAIcRAAAAAAAAAAAAAIcRAAAAAAAAiBEAAAAAAAAAAAAAiBEAAAAAAACJEQAAAAAAAAAAAACJEQAAAAAAAIoRAAAAAAAAAAAAAIoRAAAAAAAAixEAAAAAAAAAAAAAixEAAAAAAACMEQAAAAAAAAAAAACMEQAAAAAAAI0RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgREAAAAAAACBEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1849,
					3,
					"left_delete",
					null,
					"AwAAAIwRAAAAAAAAjBEAAAAAAAABAAAAPYsRAAAAAAAAixEAAAAAAAABAAAAJIoRAAAAAAAAihEAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAjREAAAAAAACNEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1850,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAIoRAAAAAAAAixEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihEAAAAAAACKEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1852,
					1,
					"insert",
					{
						"characters": "=x;"
					},
					"AwAAAIwRAAAAAAAAjREAAAAAAAAAAAAAjREAAAAAAACOEQAAAAAAAAAAAACOEQAAAAAAAI8RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBEAAAAAAACMEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1857,
					1,
					"right_delete",
					null,
					"AQAAAJsRAAAAAAAAmxEAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAmxEAAAAAAACbEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1858,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BQAAAJsRAAAAAAAAnBEAAAAAAAAAAAAAnBEAAAAAAACdEQAAAAAAAAAAAACdEQAAAAAAAJ4RAAAAAAAAAAAAAJ4RAAAAAAAAnxEAAAAAAAAAAAAAnxEAAAAAAACgEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmxEAAAAAAACbEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1869,
					1,
					"insert",
					{
						"characters": "\niobn"
					},
					"BgAAAIYwAAAAAAAAhzAAAAAAAAAAAAAAhzAAAAAAAACNMAAAAAAAAAAAAACNMAAAAAAAAI4wAAAAAAAAAAAAAI4wAAAAAAAAjzAAAAAAAAAAAAAAjzAAAAAAAACQMAAAAAAAAAAAAACQMAAAAAAAAJEwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhjAAAAAAAACGMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1870,
					4,
					"left_delete",
					null,
					"BAAAAJAwAAAAAAAAkDAAAAAAAAABAAAAbo8wAAAAAAAAjzAAAAAAAAABAAAAYo4wAAAAAAAAjjAAAAAAAAABAAAAb40wAAAAAAAAjTAAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAkTAAAAAAAACRMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1871,
					1,
					"insert",
					{
						"characters": "onRewad"
					},
					"BwAAAI0wAAAAAAAAjjAAAAAAAAAAAAAAjjAAAAAAAACPMAAAAAAAAAAAAACPMAAAAAAAAJAwAAAAAAAAAAAAAJAwAAAAAAAAkTAAAAAAAAAAAAAAkTAAAAAAAACSMAAAAAAAAAAAAACSMAAAAAAAAJMwAAAAAAAAAAAAAJMwAAAAAAAAlDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjTAAAAAAAACNMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1872,
					3,
					"left_delete",
					null,
					"AwAAAJMwAAAAAAAAkzAAAAAAAAABAAAAZJIwAAAAAAAAkjAAAAAAAAABAAAAYZEwAAAAAAAAkTAAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAlDAAAAAAAACUMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1873,
					1,
					"insert",
					{
						"characters": "ad"
					},
					"AgAAAJEwAAAAAAAAkjAAAAAAAAAAAAAAkjAAAAAAAACTMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkTAAAAAAAACRMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1874,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJMwAAAAAAAAlTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkzAAAAAAAACTMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1875,
					1,
					"insert",
					{
						"characters": "datra"
					},
					"BQAAAJQwAAAAAAAAlTAAAAAAAAAAAAAAlTAAAAAAAACWMAAAAAAAAAAAAACWMAAAAAAAAJcwAAAAAAAAAAAAAJcwAAAAAAAAmDAAAAAAAAAAAAAAmDAAAAAAAACZMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlDAAAAAAAACUMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1877,
					3,
					"left_delete",
					null,
					"AwAAAJkwAAAAAAAAmTAAAAAAAAABAAAAKZgwAAAAAAAAmDAAAAAAAAABAAAAYZcwAAAAAAAAlzAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAmjAAAAAAAACaMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1878,
					1,
					"insert",
					{
						"characters": "a)"
					},
					"AgAAAJcwAAAAAAAAmDAAAAAAAAAAAAAAmDAAAAAAAACZMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlzAAAAAAAACXMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1879,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJkwAAAAAAAAmjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmTAAAAAAAACZMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1880,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJowAAAAAAAAnDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmjAAAAAAAACaMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1881,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJswAAAAAAAAnDAAAAAAAAAAAAAAnDAAAAAAAACiMAAAAAAAAAAAAACiMAAAAAAAAKMwAAAAAAAAAAAAAKMwAAAAAAAAqTAAAAAAAAAAAAAAnDAAAAAAAACcMAAAAAAAAAYAAAAgICAgICCcMAAAAAAAAKQwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmzAAAAAAAACbMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1883,
					1,
					"insert",
					{
						"characters": ",."
					},
					"AwAAAKwwAAAAAAAArTAAAAAAAAAAAAAAnDAAAAAAAACcMAAAAAAAAAgAAAAgICAgICAgIKUwAAAAAAAApjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArDAAAAAAAACsMAAAAAAAAAAAAAAAAFhA"
				],
				[
					1884,
					1,
					"left_delete",
					null,
					"AQAAAKUwAAAAAAAApTAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAApjAAAAAAAACmMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1886,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAJwwAAAAAAAAnTAAAAAAAAAAAAAAnTAAAAAAAACeMAAAAAAAAAAAAACeMAAAAAAAAJ8wAAAAAAAAAAAAAJ8wAAAAAAAAoDAAAAAAAAAAAAAAoDAAAAAAAAChMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnDAAAAAAAACcMAAAAAAAAAAAAAAAAFhA"
				],
				[
					1887,
					1,
					"insert",
					{
						"characters": " req="
					},
					"BQAAAKEwAAAAAAAAojAAAAAAAAAAAAAAojAAAAAAAACjMAAAAAAAAAAAAACjMAAAAAAAAKQwAAAAAAAAAAAAAKQwAAAAAAAApTAAAAAAAAAAAAAApTAAAAAAAACmMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoTAAAAAAAAChMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1888,
					1,
					"insert",
					{
						"characters": "this;"
					},
					"BQAAAKYwAAAAAAAApzAAAAAAAAAAAAAApzAAAAAAAACoMAAAAAAAAAAAAACoMAAAAAAAAKkwAAAAAAAAAAAAAKkwAAAAAAAAqjAAAAAAAAAAAAAAqjAAAAAAAACrMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApjAAAAAAAACmMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1889,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKswAAAAAAAArDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqzAAAAAAAACrMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1899,
					1,
					"paste",
					null,
					"AQAAAKwwAAAAAAAA2TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArDAAAAAAAACsMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1906,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AgAAAMMwAAAAAAAAxDAAAAAAAAAAAAAAxDAAAAAAAADEMAAAAAAAAAgAAAByZXEuYm9keQ",
					"AQAAAAAAAAABAAAAwzAAAAAAAADLMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1907,
					1,
					"left_delete",
					null,
					"AQAAAMMwAAAAAAAAwzAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAxDAAAAAAAADEMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1908,
					1,
					"insert",
					{
						"characters": "onRrea"
					},
					"BgAAAMMwAAAAAAAAxDAAAAAAAAAAAAAAxDAAAAAAAADFMAAAAAAAAAAAAADFMAAAAAAAAMYwAAAAAAAAAAAAAMYwAAAAAAAAxzAAAAAAAAAAAAAAxzAAAAAAAADIMAAAAAAAAAAAAADIMAAAAAAAAMkwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwzAAAAAAAADDMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1909,
					3,
					"left_delete",
					null,
					"AwAAAMgwAAAAAAAAyDAAAAAAAAABAAAAYccwAAAAAAAAxzAAAAAAAAABAAAAZcYwAAAAAAAAxjAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAyTAAAAAAAADJMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1910,
					1,
					"insert",
					{
						"characters": "ead"
					},
					"AwAAAMYwAAAAAAAAxzAAAAAAAAAAAAAAxzAAAAAAAADIMAAAAAAAAAAAAADIMAAAAAAAAMkwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxjAAAAAAAADGMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1913,
					1,
					"insert",
					{
						"characters": "{req,data});"
					},
					"DAAAAMwwAAAAAAAAzTAAAAAAAAAAAAAAzTAAAAAAAADOMAAAAAAAAAAAAADOMAAAAAAAAM8wAAAAAAAAAAAAAM8wAAAAAAAA0DAAAAAAAAAAAAAA0DAAAAAAAADRMAAAAAAAAAAAAADRMAAAAAAAANIwAAAAAAAAAAAAANIwAAAAAAAA0zAAAAAAAAAAAAAA0zAAAAAAAADUMAAAAAAAAAAAAADUMAAAAAAAANUwAAAAAAAAAAAAANUwAAAAAAAA1jAAAAAAAAAAAAAA1jAAAAAAAADXMAAAAAAAAAAAAADXMAAAAAAAANgwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzDAAAAAAAADMMAAAAAAAAAAAAAAAAPC/"
				],
				[
					1915,
					1,
					"left_delete",
					null,
					"AQAAANgwAAAAAAAA2DAAAAAAAAALAAAAcmVxLmJvZHkpOwo",
					"AQAAAAAAAAABAAAA2DAAAAAAAADjMAAAAAAAAAAAAAAA4IFA"
				],
				[
					1927,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA2TAAAAAAAADZMAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "Searching 7357 files for \"^(\\s*)(console)\" (regex, case sensitive)\n\n/home/roman/Projects/plot-cv/test-wasm.js:\n    2  //#const bpgdec = require(\"./static/wasm/bpgdec.wasm.js\");\n    3  const bpgdec = require(\"./static/wasm/bpgdec.js\");\n    4: \n    5: console.error(\"bpgdec: \", bpgdec);\n    6  \n    7  */\n    .\n   18      table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' }),\n   19      abort(_msg, _file, line, column) {\n   20:       console.error('abort called at main.ts:' + line + ':' + column);\n   21      },\n   22      emscripten_resize_heap(b) {\n   23:       console.error(\n   24          'Cannot enlarge memory arrays to size ' +\n   25            b +\n\n/home/roman/Projects/plot-cv/test-stack.js:\n    8  \n    9    [Symbol.for('nodejs.util.inspect.custom')](...args) {\n   10:     console.log('inspect args=', args);\n   11      return '';\n   12    }\n   ..\n   15  async function main(...args) {\n   16    await ConsoleSetup({ depth: 10 });\n   17: \n   18:   console.log('inspect:', globalThis.ObjectInspect);\n   19:   console.log('MyObj:', { test: [1, 2, 3, new MyObj()] });\n   20: \n   21:   console.log('stackFrame:', Util.getStackFrame(1));\n   22    let st = Util.getCallerStack();\n   23:   console.log('getCallerStack:', st);\n   24    /*console.log('test:', 1);*/\n   25  }\n\n/home/roman/Projects/plot-cv/ruler-draggable.js:\n   10  const Ruler = forwardRef((props, ref) => {\n   11    //console.log(\"Ruler props =\", props);\n   12:   console.log('Ruler props = ', props);\n   13    const {\n   14      frictionCoefficient = 0.93,\n   ..\n   28      handlers\n   29    } = props;\n   30:   console.log('Ruler forwarded ref = ', ref);\n   31    const FRICTION_COEFF = Math.min(0.99, Math.max(0.01, frictionCoefficient));\n   32    const MULTIPLICATOR_LENGTH = multiplicatorLength;\n\n/home/roman/Projects/plot-cv/childProcess.js:\n   38  \n   39    child.stdout.on('data', data => {\n   40:     console.log(`stdout: ${data}`);\n   41    });\n   42  \n   43    child.stderr.on('data', data => {\n   44:     console.error(`stderr: ${data}`);\n   45    });\n   46  \n   47    child.on('close', code => {\n   48:     console.log(`child process exited with code ${code}`);\n   49    });\n   50    return [stdin, stdout, stderr];\n\n/home/roman/Projects/plot-cv/eagle-shell.js:\n   79  \n   80  function append(tag, attrs, children, parent, element) {\n   81:   console.log('append', { tag, attrs, children, parent, element });\n   82  \n   83    let obj;\n   ..\n  101      str = renderToString(svg);\n  102    } catch(e) {\n  103:     console.log('ERROR:', e);\n  104    }\n  105  \n  ...\n  115      let ret;\n  116      ret = WriteFile(filename, toXML(xml));\n  117:     console.log(`Saving to '${filename}'...`, ret);\n  118    }\n  119    return str;\n  ...\n  164      value => (console.options.compact = value)\n  165    );*/\n  166:   console.options.depth = 10;\n  167:   console.options.compact = 0;\n  168  \n  169    debugLog = fs.openSync('debug.log', 'a');\n  ...\n  403    repl.directives.i = [\n  404      (module, ...args) => {\n  405:       console.log('args', args);\n  406        try {\n  407          return require(module);\n  ...\n  433    repl.show = value => {\n  434      if(isObject(value) && value instanceof EagleNode) {\n  435:       console.log(value.inspect());\n  436      } else {\n  437:       console.log(value);\n  438      }\n  439    };\n  ...\n  452          .join('')\n  453      );\n  454: \n  455:     console.log(`EXIT (wrote ${hist.length} history entries)`);\n  456      Terminate(0);\n  457    });\n  ...\n  461  \n  462  function Terminate(exitCode) {\n  463:   console.log('Terminate', exitCode);\n  464  \n  465    std.exit(exitCode);\n  ...\n  507      })\n  508      .catch(e => {\n  509:       console.error(moduleName + ':', e);\n  510        done = true;\n  511      });\n  ...\n  519  \n  520    if(measures) {\n  521:     console.log('got measures:', measures);\n  522    } else {\n  523      let rect = new Rect(bounds.rect);\n  ...\n  579    }\n  580    if(changed) {\n  581:     console.log(item);\n  582      /*    console.log('after:', Util.abbreviate(item.parentNode.toXML()));\n  583:      console.log('align\\n', item.xpath(), '\\n newPos:', newPos, '\\n diff:', diff, '\\n attr:', item.raw.attributes);*/\n  584    }\n  585    return changed;\n  ...\n  592    let changed = false;\n  593    items = [...items];\n  594:   console.log('items:', items);\n  595    for(let item of items) changed |= AlignItem(item);\n  596    let signals_nets = doc.getAll(/(signals|nets)/);\n  ...\n  622    }\n  623    if(newValue && newValue != value) {\n  624:     console.log(`element ${element} value changed from '${value}' to '${newValue}'`);\n  625      element.attributes['value'] = newValue;\n  626    }\n  ...\n  643  \n  644          //   console.log(`signal '${signal.name}' wire #${signal.wires.indexOf(wire)}:`, points);\n  645:         console.log(`signal '${signal.name}' wire #${signal.wires.indexOf(wire)}:`, { a, b });\n  646  \n  647          map.set(a.toString(), [signal.name, wire, b]);\n  ...\n  652        let pos = new Point(element.geometry);\n  653        let transform = element.transformation().filter(t => t.type != 'translate');\n  654:       console.log(`element '${element.name}':`, pos, transform);\n  655        let i = 0;\n  656        let { contactrefs } = element;\n  657:       console.log(`contactrefs `, contactrefs);\n  658        for(let pad of element.pads.list) {\n  659          let { geometry } = pad;\n  660:         console.log(`pad '${element.name}.${pad.name}':`, geometry);\n  661          let padPos = new Point(geometry);\n  662          let cref = contactrefs[pad.name];\n  ...\n  749  \n  750    if(allNames.length > intersection.length)\n  751:     console.warn(`WARNING: Only ${intersection.length} names of ${allNames.length} correlate`);\n  752:   console.log(`intersection`, intersection);\n  753  \n  754    return /*new Map*/ intersection.map(name => [name, documents.map(doc => GetByName(doc, name))]);\n  ...\n  777  \n  778    //  console.log('layers', layers);\n  779:   console.log(\n  780      'layerIds',\n  781:     console.config({ compact: 2 }),\n  782      layerIds.map(id => [id, layerMap[id].attributes.name])\n  783    );\n  784  \n  785    const libraryNames = unique([...schematic.libraries, ...board.libraries].map(([n, e]) => n));\n  786:   console.log('libraryNames', libraryNames);\n  787  \n  788    const libraries = libraryNames.map(name => [name, schematic.getLibrary(name), board.getLibrary(name)]);\n  ...\n  872  \n  873  async function testEagle(filename) {\n  874:   console.log('testEagle: ', filename);\n  875    let proj = new EagleProject(filename, fs);\n  876:   console.log('Project loaded: ', !proj.failed);\n  877:   console.log('Project: ', proj);\n  878:   console.log('proj.documents', proj.documents);\n  879    let { board, schematic } = proj;\n  880    const packages = {\n  ...\n  908      if(elem.rot) cmds.push(`ROTATE ${elem.rot} ${elem.name};`);\n  909    }\n  910:   console.log('proj.board', proj.board);\n  911    if(proj.board) UpdateMeasures(proj.board);\n  912    if(AlignAll(board) || AlignAll(schematic)) console.log('Saved:', await proj.saveTo('tmp', true));\n  913:   console.log('documents', proj.documents);\n  914:   console.log('saved:', await proj.saveTo('tmp', true));\n  915    for(let doc of proj.documents) {\n  916      let changed = false;\n  917:     console.log('eagle:', className(doc.find('eagle')));\n  918      for(let pkg of doc.find('eagle').getAll('package')) {\n  919        let indexes = [...pkg.children].map((child, i, a) =>\n  ...\n  926        indexes = indexes.flat().reverse();\n  927        let paths = indexes.map(i => pkg.path.down('children', i));\n  928:       console.log('indexes', pkg.name, paths);\n  929        paths.forEach(i => deep.unset(doc.raw, [...i]));\n  930        changed = changed || indexes.length > 0;\n  ...\n  932      if(changed) {\n  933        doc.saveTo(doc.filename);\n  934:       console.log('Saved:', doc.filename);\n  935      }\n  936    }\n  937    let desc = proj.documents.map(doc => [doc.filename, doc.find('description')]);\n  938:   console.log('desc', desc);\n  939    desc = desc\n  940      .map(([file, e]) => [file, e && e.xpath()])\n  941      .map(([file, xpath]) => [file, xpath && xpath.toCode('', { spacing: '', function: true })]);\n  942    desc = new Map(desc);\n  943:   console.log('descriptions', [...Util.map(desc, ([k, v]) => [k, v])]);\n  944    return proj;\n  945  }\n  ...\n  948    let circ = new CircuitJS();\n  949    let sheets = GetSheets(doc);\n  950:   console.log('sheets', sheets);\n  951    let sh = (globalThis.sheet = sheets[sheet]);\n  952:   console.log('sh', sh);\n  953    let tree = sh.raw;\n  954  \n  ...\n  962  \n  963      //console.log('ln',ln,elm.attributes.layer);\n  964:     console.log('segment/net', { segment: segmentIndex, net: net.attributes.name });\n  965  \n  966      circ.add('w', ...ln, 0);\n  ...\n  969    /*for(let [elm, ptr] of deep.iterate(tree, n => 'x' in n.attributes)) {\n  970      let pt = new Point(elm.attributes).mul(scale / 2.54).round();\n  971:     console.log(elm.tagName, elm.attributes);\n  972  \n  973      circ.add('r', ...pt, 0);\n  974    }*/\n  975    let instances = sh.children.find(e => e.tagName == 'instances').children;\n  976: \n  977:   console.log('instances', instances);\n  978    for(let [name, instance] of instances) {\n  979:     console.log(`instance '${name}'`, console.config({ depth: 0 }), instance);\n  980    }\n  981    return circ;\n  ...\n  987    main(...Util.getArgs().slice(1));\n  988  } catch(error) {\n  989:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  990    Util.exit(1);\n  991  }\n\n/home/roman/Projects/plot-cv/leaflet.js:\n  156            for(var i = 0; i < t.length; i++)\n  157              t[i] === L.Mixin.Events &&\n  158:               console.warn(\n  159                  'Deprecated include of L.Mixin.Events: this property will be removed in future releases, please inherit from L.Evented instead.',\n  160                  new Error().stack\n\n/home/roman/Projects/plot-cv/midi-tcp.js:\n   63    while(byteArr.length && !(len = MIDIMessageLength(byteArr[0]))) byteArr.shift();\n   64    if(len && byteArr.length >= len) {\n   65:     console.log('MIDIMessageRead', { len });\n   66      return new MIDIMessage(byteArr.splice(0, len));\n   67    }\n   ..\n   97      block: false,\n   98      onConnect(ws, req) {\n   99:       console.log('onConnect', { ws, req });\n  100      },\n  101      onClose(ws, reason) {\n  102:       console.log('onClose', { ws, reason });\n  103      },\n  104      onHttp(req, resp) {\n  105:       console.log('onHttp', { req, resp });\n  106      },\n  107      onFd(fd, rd, wr) {\n  ...\n  119          //console.log('onMessage', event);\n  120        } catch(e) {\n  121:         console.log('onMessage.exception', e.message, e.stack);\n  122        }\n  123      },\n  124  \n  125      onError(ws, error) {\n  126:       console.log('onError', ws, error);\n  127      }\n  128    });\n  ...\n  133      inspectOptions: { compact: 2, customInspect: true /*, numberBase: 16*/ }\n  134    });\n  135:   console.log('midi', Object.keys({ MIDIEvent, MIDIStream }));\n  136  \n  137    let url = args[0] ?? 'tcp://127.0.0.1:6999';\n  ...\n  145        let [num] = new Uint8Array(b);\n  146        let ch = String.fromCharCode(num);\n  147:       console.log('Read byte ', num, ` ${quote(ch, \"'\")}`);\n  148  \n  149        if(num == 4) std.exit(0);\n\n/home/roman/Projects/plot-cv/test-bash-parser.js:\n   13    await ConsoleSetup();\n   14    await PortableFileSystem();\n   15: \n   16:   console.options = consoleOpts;\n   17  \n   18    const data = filesystem.readFile('../cfg.sh');\n   19  \n   20    const ast = parse(data ?? 'echo ciao;');\n   21:   console.log('ast:', ast);\n   22  }\n   23  Util.callMain(main, true);\n\n/home/roman/Projects/plot-cv/components.js:\n  233          siblingCounter++;\n  234        } while(target);\n  235:       console.log('ButtonGroup.event:', siblingCounter);\n  236        let j = siblingCounter - 1;\n  237        if(j != active) {\n  ...\n  241      }\n  242    }\n  243: \n  244:   console.log('ButtonGroup.buttons:', buttons);\n  245  \n  246    return h(\n\n/home/roman/Projects/plot-cv/test-decorators.js:\n    2    const name = f.name;\n    3    function wrapped(...args) {\n    4:     console.log(`starting ${name} with arguments ${args.join(', ')}`);\n    5      const ret = f.call(this, ...args);\n    6:     console.log(`ending ${name}`);\n    7      return ret;\n    8    }\n\n/home/roman/Projects/plot-cv/convert-imports.js:\n   20          false,\n   21          (v, r, o) => {\n   22:           console.log(`Usage: ${Util.getArgs()[0]} [OPTIONS]\\n`);\n   23:           console.log(o.map(([name, [arg, fn, ch]]) => `  --${(name + ', -' + ch).padEnd(20)}`).join('\\n'));\n   24            Util.exit(0);\n   25          },\n   ..\n   35      args\n   36    );\n   37:   console.log('params', params);\n   38  \n   39    let target = params['require'] ? 'require' : 'import';\n   40  \n   41    if(params['@'].length == 0) {\n   42:     console.log(`Usage: ${process.argv[0]} [OPTIONS] <file...>`);\n   43      return 1;\n   44    }\n   ..\n   80            let y = deep.get(ast, path.slice(0, -1));\n   81            let z = deep.get(ast, path.slice(0, -2));\n   82:           console.log('path', path);\n   83:           console.log('y', path.slice(0, -1), y);\n   84:           console.log('z', path.slice(0, -2), z);\n   85            /*console.log('x.type', x.type);\n   86: console.log('ESNode.assoc(x)', ESNode.assoc(x));*/\n   87            ///  deep.set(ast, path, node);\n   88            break;\n   ..\n   92          }\n   93        }\n   94:       console.log('import', console.config({ depth: 10 }), imp);\n   95      }\n   96  \n   ..\n   98        let printer = new Printer({ colors: false, indent: 2 });\n   99        let code = printer.print(ast);\n  100:       console.log('code', code);\n  101        //  WriteFile(params['output'], printer.print(ast));\n  102      }\n  103  \n  104      /* let flat = deep.flatten(ast, new Map());\n  105:     console.log('flat',console.config({ depth: 1 }), flat);*/\n  106    }\n  107  }\n  ...\n  110    main(...scriptArgs.slice(1));\n  111  } catch(error) {\n  112:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n  113  } finally {\n  114:   console.log('SUCCESS');\n  115  }\n  116  \n\n/home/roman/Projects/plot-cv/make-bitmap.js:\n   38          /*  let hist = new cv.Mat();\n   39      cv.calcHist([dst], 1, 0, new cv.Mat(), hist, 1,  [255],[0,256]);\n   40:     console.log('hist', hist);*/\n   41        },\n   42        function Thresh(src, dst) {\n   ..\n   58  \n   59          /*if((roiRect=win.selectROI())) {\n   60: console.log('roi', roiRect);\n   61  roiMat = mat(roiRect);\n   62  img =roiMat;\n   ..\n   75      let key, mat;\n   76      img = cv.imread(arg);\n   77:     console.log('img', img);\n   78  \n   79      mat = pipeline(img);\n\n/home/roman/Projects/plot-cv/test-diagram.js:\n   22    let diagramRect = new Rect(0, 0, ...mat.size).inset(20);\n   23    let diagramMat = mat(diagramRect);\n   24: \n   25:   console.log('diagramRect', diagramRect);\n   26  \n   27    Draw.rectangle(diagramMat, new Point(0, 0), new Point(...diagramMat.size), [255, 255, 255], FILLED);\n   ..\n   35      y: AxisRange(axes.y)\n   36    };\n   37:   console.log('', { ranges });\n   38  \n   39    let rect = GetRect(diagramMat, axes.x, axes.y, font);\n   40    let origin = Origin(diagramMat, axes.x, axes.y);\n   41: \n   42:   console.log('', { rect, origin });\n   43    let area = ClientArea(diagramMat, axes.x, axes.y, font);\n   44  \n   ..\n   46  \n   47    let contour = new Contour(...range(0, 100, 10).map(x => new Point(x, randInt(100))));\n   48:   console.log('contour', console.config({ compact: false }), contour);\n   49  \n   50    let matrix = ClientMatrix(diagramMat, axes.x, axes.y, font);\n   ..\n   55  \n   56    let c = new Contour(...[...contour2].map(a => new Point(...a)));\n   57:   console.log('c', console.config({ compact: false }), c);\n   58: \n   59:   console.log('Draw.polylines', Draw.polylines);\n   60  \n   61    Draw.polylines(area, [c ?? [...contour2]], false, [1, 220, 90], 1, LINE_AA);\n\n/home/roman/Projects/plot-cv/test-path.js:\n   10      inspectOptions: { colors: true, maxArrayLength: Infinity, compact: 1, breakLength: Infinity }\n   11    });\n   12:   console.log('main(', ...args, ')');\n   13    //console.log('main', args);\n   14:   console.log('path', Object.getOwnPropertyNames(path));\n   15:   console.log('path', Util.getMethodNames(path));\n   16  \n   17    let filename = Util.getArgv()[1];\n   18    let cwd = path.absolute('.');\n   19:   console.log(`path.relative('/', '${cwd}')`, path.relative('/', cwd));\n   20: \n   21:   console.log('path.sep', path.sep);\n   22:   console.log('path.delimiter', path.delimiter);\n   23:   console.log('path.basename', path.basename);\n   24:   console.log('filename', filename);\n   25    let basename = path.basename(filename, /\\.[^.]*$/);\n   26:   console.log('basename', basename);\n   27  }\n   28  \n\n/home/roman/Projects/plot-cv/read-deps.js:\n   13    if(typeof data != 'string') data = '' + data;\n   14    filesystem.writeFile(name, data + '\\n');\n   15:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   16  }\n   17  \n   ..\n   42    );\n   43    let argv = ['-MM', ...includes, '-c', ...sources];\n   44:   console.log('argv:', argv.join(' '));\n   45    let proc = childProcess('g++', argv, {\n   46      block: false,\n   ..\n   83      sources.sort();\n   84    }\n   85: \n   86:   console.log(`DumpDeps(`, sources, `)`);\n   87  \n   88    let deps = await DumpDeps(sources, includes);\n   89:   console.log(`DumpDeps() = `, deps);\n   90  \n   91    for(let [source, depfiles] of deps) {\n   92      let pp = DummyPreproc(source);\n   93: \n   94:     console.log(`${source} deps:`, depfiles);\n   95:     console.log(`${source} pp:`, pp);\n   96    }\n   97  }\n\n/home/roman/Projects/plot-cv/test-kolorwheel.js:\n  196  \n  197    const palette = GeneratePalette(5);\n  198:   console.log('palette:', palette);\n  199    //console.log('keyList.length:', keyList.length);\n  200  \n  ...\n  208      }\n  209    }\n  210:   console.log(\n  211      'const palette = [ ' + palette.map(c => c.toSource()).join(', ') + ' ];\\n renderer.colors = {' + s + '};'\n  212    );\n  ...\n  220      return ret;\n  221    })();\n  222: \n  223:   console.log(colors);\n  224:   console.log(colors.map(c => c.toHSLA()));\n  225:   console.log(\n  226      colors\n  227        .map(c => c.hex())\n  ...\n  229        .join(',\\n')\n  230    );\n  231:   console.log(new RGBA(0, 0, 255).toHSLA());\n  232:   console.log(new RGBA('#006dcf').toHSLA());\n  233:   console.log();\n  234    let rainbow = [];\n  235    for(let h of Util.range(0, 300, 300 / 100)) rainbow.push(new HSLA(h, 100, 60));\n  236: \n  237:   console.log(rainbow);\n  238:   console.log(\n  239      Util.chunkArray(\n  240        rainbow.map(c => c.hex()).map(c => `\"${c}\"`),\n\n/home/roman/Projects/plot-cv/test-repl.js:\n   12    repl.directives = {\n   13      c(...args) {\n   14:       console.log('c', { args });\n   15        return Compile(...args);\n   16      }\n   ..\n   19    Util.atexit(() => {\n   20      Terminal.mousetrackingDisable();\n   21:     console.log(`EXIT`);\n   22    });\n   23    Terminal.mousetrackingEnable();\n   24  \n   25    await repl.run();\n   26:   console.log('REPL done');\n   27  }\n   28  \n\n/home/roman/Projects/plot-cv/test-readdir.js:\n   40  \n   41  */\n   42: \n   43:   console.log('readdir', [...Filter(ReadDirRecursive('.', 2), /\\.[ch]$/)]);\n   44  }\n   45  \n\n/home/roman/Projects/plot-cv/test-pointer.js:\n   17    let obj = {};\n   18    let obj2 = { children: [, , , { tag: 'TEST' }] };\n   19:   console.log('ptr', ptr);\n   20  \n   21    deep.set(obj, ptr.concat('children'), [1, 1234]);\n   22:   console.log('obj', obj);\n   23:   console.log('ptr.deref(obj2)', ptr.deref(obj2));\n   24  }\n   25  \n   ..\n   31  } finally {\n   32    if(error) {\n   33:     console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   34:     console.log('FAIL');\n   35      Util.exit(1);\n   36    } else {\n   37:     console.log('SUCCESS');\n   38    }\n   39  }\n\n/home/roman/Projects/plot-cv/test-ecmascript.js:\n   23    if(data != '') {\n   24      fs.writeFileSync(name, data + '\\n');\n   25:     console.log(`Wrote ${name}: ${data.length} bytes`);\n   26    }\n   27  }\n   ..\n   36  \n   37  async function main(...args) {\n   38:   console.log('main', args);\n   39    globalThis.console = new Console({\n   40      stdout: process.stdout,\n   ..\n   48      }\n   49    });\n   50:   console.log('console.options', console.options);\n   51  \n   52    let params = Util.getOpt(\n   ..\n   57          false,\n   58          (v, r, o) => {\n   59:           console.log(`Usage: ${Util.getArgs()[0]} [OPTIONS]\\n`);\n   60:           console.log(o.map(([name, [arg, fn, ch]]) => `  --${(name + ', -' + ch).padEnd(20)}`).join('\\n'));\n   61            Util.exit(0);\n   62          },\n   ..\n   67          function(v, r, o, res) {\n   68            const thisObj = this;\n   69:           console.log('debug', { v, r, o, res, thisObj });\n   70          },\n   71          'x'\n   ..\n   77  \n   78    //  params.debug ??= true;\n   79:   console.log(`Platform: ${Util.getPlatform()}`);\n   80  \n   81    /*await Util.signal('SIGINT', () => {\n   82:     console.log(`Got SIGINT. (${os.SIGINT})`);\n   83      Util.putStack();\n   84      Util.exit(1);\n   ..\n   88      printer: Util.once(() => new Printer({ colors: false, indent: 2 }))\n   89    });\n   90: \n   91:   console.log('params', params);\n   92    const time = () => Date.now() / 1000;\n   93  \n   ..\n  102        await processing(); //.catch(err => console.log('processFile ERROR:', err));\n  103      } catch(err) {\n  104:       console.log('ERROR:', err);\n  105        if(err) {\n  106:         console.log('ERROR:', err.message);\n  107:         console.log('ERROR:', err.stack);\n  108        }\n  109      }\n  ...\n  117        break;\n  118      }\n  119: \n  120:     console.log('files:', files);\n  121    }\n  122    let success = Object.entries(files).filter(([k, v]) => !!v).length != 0;\n  ...\n  130    if(file && fs.existsSync(file)) {\n  131      data = fs.readFileSync(file, 'utf8');\n  132:     console.log('opened:', file);\n  133    } else {\n  134      file = 'stdin';\n  135      data = source;\n  136    }\n  137:   console.log('OK, data: ', data);\n  138:   console.log('OK, data: ', Util.abbreviate(Util.escape(data)));\n  139  \n  140    let ast, error;\n  ...\n  147      ast = parser.parseProgram();\n  148    } catch(err) {\n  149:     console.log('parseProgram token', parser.token);\n  150:     console.log('parseProgram loc', parser.lexer.loc + '');\n  151:     console.log('parseProgram ERROR:', err);\n  152      if(isObject(err)) {\n  153:       console.log('parseProgram ERROR message:', err.message);\n  154:       console.log('parseProgram ERROR stack:', err.stack);\n  155      }\n  156    }\n  157: \n  158:   console.log('Parsed: ', ast);\n  159  \n  160    parser.addCommentsToNodes(ast);\n  ...\n  205        .map(([path, node]) => (isRequire(node) || true ? path.slice(0, 2) : path))\n  206        .map(path => [path, deep.get(ast, path)]);\n  207: \n  208:     console.log('imports:', new Map(imports.map(([path, node]) => [ESNode.assoc(node).position, node])));\n  209:     console.log('importStatements:', importStatements);\n  210  \n  211      const importedFiles = imports.map(([pos, node]) => Identifier.string(node.source || node.arguments[0]));\n  212:     console.log('importedFiles:', importedFiles);\n  213  \n  214      let importIdentifiers = importStatements\n  215        .map(([p, n]) => [p, n.identifiers ? n.identifiers : n])\n  216        .map(([p, n]) => [p, n.declarations ? n.declarations : n]);\n  217:     console.log('importIdentifiers:', importIdentifiers);\n  218: \n  219:     console.log('importIdentifiers:', unique(importIdentifiers.flat()).join(', '));\n  220    }\n  221  \n  ...\n  236  \n  237    if(err) {\n  238:     console.log(parser.lexer.currentLine());\n  239:     console.log(Util.className(err) + ': ' + (err.msg || err) + '\\n' + err.stack);\n  240    }\n  241  \n  242    let lexer = parser.lexer;\n  243    let t = [];\n  244:   console.log(parser.trace());\n  245    WriteFile('trace.log', parser.trace());\n  246    if(fail) {\n  247:     console.log('\\nerror:', err.msg, '\\n', parser.lexer.currentLine());\n  248    }\n  249:   console.log('finish: ' + (fail ? 'error' : 'success'));\n  250    return !fail;\n  251  }\n  ...\n  254    .then(() => console.log('SUCCESS'))\n  255    .catch(error => {\n  256:     console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  257      Util.exit(1);\n  258    });\n\n/home/roman/Projects/plot-cv/debugger-server.js:\n   22  \n   23  atexit(() => {\n   24:   console.log('atexit', atexit);\n   25    let stack = new Error('').stack;\n   26:   console.log('stack:', stack);\n   27  });\n   28  \n   ..\n   41    ];\n   42    repl.directives.d = [() => globalThis.daemon(), 'detach'];\n   43:   console.log = repl.printFunction((...args) => {\n   44      log('LOG', console.config(repl.inspectOptions), ...args);\n   45    });\n   ..\n  103  \n  104    const createWS = (globalThis.createWS = (url, callbacks, listen) => {\n  105:     console.log('createWS', { url, callbacks, listen });\n  106  \n  107      setLog(\n  ...\n  111          : (level, str) => {\n  112              if(/BIND_PROTOCOL|DROP_PROTOCOL|CHECK_ACCESS_RIGHTS|ADD_HEADERS/.test(str)) return;\n  113:             console.log(logLevels[level].padEnd(10), str.trim());\n  114            }\n  115      );\n  ...\n  118      let child, dbg;\n  119      let netfn = [client, server][+listen];\n  120:     console.log('createWS', { url, netfn });\n  121      return netfn(\n  122        url,\n  ...\n  159            function* config(req, res) {\n  160              const { body, headers } = req;\n  161:             console.log('/config', { req, res });\n  162:             console.log('*config', { body, headers });\n  163              yield '{}';\n  164            },\n  ...\n  176          block: false,\n  177          onConnect(ws, req) {\n  178:           console.log('onConnect', { ws, req }, req && req.headers);\n  179  \n  180            Object.defineProperties(ws, {\n  ...\n  182                value: function sendMessage(msg) {\n  183                  let ret = this.send(JSON.stringify(msg));\n  184:                 console.log(`ws.sendMessage(`, msg, `) = ${ret}`);\n  185                  return ret;\n  186                },\n  ...\n  193          },\n  194          onClose(ws) {\n  195:           console.log('onClose', ws);\n  196            dbg.close();\n  197  \n  ...\n  200          },\n  201          onError(ws) {\n  202:           console.log('onError', ws);\n  203          },\n  204          onHttp(req, resp) {\n  205            const { method, headers } = req;\n  206:           console.log('\\x1b[38;5;33monHttp\\x1b[0m [\\n  ', req, ',\\n  ', resp, '\\n]');\n  207            const { body, url } = resp;\n  208:           console.log('\\x1b[38;5;33monHttp\\x1b[0m', { body });\n  209  \n  210            const file = url.path.slice(1);\n  ...\n  212  \n  213            if(file.endsWith('.js')) {\n  214:             console.log('onHttp', { file, dir });\n  215              const re = /^(\\s*(im|ex)port[^\\n]*from ['\"])([^./'\"]*)(['\"]\\s*;[\\t ]*\\n?)/gm;\n  216  \n  ...\n  222  \n  223                  match = [p1, './' + fname, p3].join('');\n  224: \n  225:                 console.log('args', { match, p1, p2, p3, offset });\n  226                }\n  227                return match;\n  ...\n  232          },\n  233          onMessage(ws, data) {\n  234:           console.log('onMessage', ws, data);\n  235            // showSessions();\n  236  \n  ...\n  250              switch (command) {\n  251                case 'start': {\n  252:                 console.log('ws', ws);\n  253                  child = /*ws.child = */ StartDebugger(args, connect, address);\n  254                  const [, stdout, stderr] = child.stdio;\n  ...\n  262                  for(let i = 1; i <= 2; i++) {\n  263                    let fd = child.stdio[i];\n  264:                   console.log('os.setReadHandler', fd);\n  265                    os.setReadHandler(fd, () => {\n  266                      let buf = new ArrayBuffer(1024);\n  ...\n  279                    });\n  280                  }\n  281:                 console.log('child', child.pid);\n  282  \n  283                  os.sleep(1000);\n  ...\n  285                case 'connect': {\n  286                  dbg = ws.dbg = ConnectDebugger(address, (dbg, sock) => {\n  287:                   console.log('wait() =', child.wait());\n  288:                   console.log('child', child);\n  289                  });\n  290                  os.setWriteHandler(+dbg, async () => {\n  291                    os.setWriteHandler(+dbg, null);\n  292:                   console.log(`connected to ${address}`, dbg);\n  293  \n  294                    sockets.add(dbg);\n  ...\n  310                      try {\n  311                        msg = await DebuggerProtocol.read(dbg);\n  312:                       console.log('DebuggerProtocol.read() =', escape(msg));\n  313                        if(typeof msg == 'string') {\n  314                          let ret;\n  315                          ret = ws.send(msg);\n  316:                         console.log(`ws.send(${quote(msg, \"'\")}) = ${ret}`);\n  317                        } else {\n  318:                         console.log('closed socket', dbg);\n  319                          sockets.delete(dbg);\n  320                          ws.sendMessage({\n  ...\n  335                    }\n  336                  });\n  337:                 console.log('dbg', dbg);\n  338                  break;\n  339                }\n  ...\n  344  \n  345                  const lexer = new Lexer(data, path);\n  346:                 console.log('lexer', lexer);\n  347                  const lines = [];\n  348  \n  349                  for(;;) {\n  350                    const { pos, size } = lexer;\n  351:                   console.log('lexer', { pos, size });\n  352                    let result = lexer.next();\n  353                    if(result.done) break;\n  354                    const token = result.value;\n  355:                   console.log('token', {\n  356                      lexeme: token.lexeme,\n  357                      id: token.id,\n  ...\n  366                    a.push([lexeme, id]);\n  367                  }\n  368:                 console.log('lines', lines);\n  369                  break;\n  370                }\n  371                default: {\n  372:                 console.log('send to debugger', data);\n  373                  DebuggerProtocol.send(dbg, data);\n  374                  break;\n  ...\n  388      );\n  389    });\n  390:   console.log('XX');\n  391  \n  392    /*  define(globalThis, {\n  ...\n  434    function showSessions() {\n  435      let sessions = getSessions();\n  436:     console.log(\n  437        'sessions',\n  438:       console.config({ maxArrayLength: Infinity, depth: 4, customInspect: true, compact: 1 }),\n  439        sessions\n  440      );\n  ...\n  450  */\n  451    function quit(why) {\n  452:     console.log(`quit('${why}')`);\n  453  \n  454      let cfg = { inspectOptions: console.options };\n  ...\n  461    main(...scriptArgs.slice(1));\n  462  } catch(error) {\n  463:   console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n  464  } finally {\n  465    //console.log('SUCCESS');\n\n/home/roman/Projects/plot-cv/preact.js:\n 1285          ref.current = createHandle();\n 1286        }\n 1287:       console.log('Ruler ref:', ref);\n 1288      },\n 1289      args == null ? args : args.concat(ref)\n\n/home/roman/Projects/plot-cv/test-call.js:\n   24    let ret = fn();\n   25    let ret2 = fn2([1, 2, 3]);\n   26: \n   27:   console.log('fn:', fn);\n   28:   console.log('ret:', ret);\n   29:   console.log('ret2:', ret2);\n   30  }\n   31  \n\n/home/roman/Projects/plot-cv/server.js:\n   35  const prng = new Alea();\n   36  prng.seed(Date.now());\n   37: console.log('random:', prng.uint32());\n   38: console.log('randStr:', Util.randStr(8, null, prng));\n   39  \n   40  let app = express();\n   ..\n   47  async function waitChild(proc) {\n   48    const { pid, stdout, stderr, wait } = proc;\n   49:   console.log('Process ID =', pid);\n   50    let ret = await wait();\n   51:   console.log('wait() =', ret);\n   52    return ret;\n   53  }\n   ..\n   55  async function runMount(dirsIterator) {\n   56    for await(let dirs of await dirsIterator) {\n   57:     console.log(`runMount`, dirs);\n   58:     console.debug(`Mount ${dirs} to tmp/`);\n   59  \n   60      let proc = childProcess('./mount-tmp.sh', ['-f', ...Util.unique(dirs || [])], {\n   ..\n   69          })) {\n   70            if(data === null) {\n   71:             console.log('output EOF');\n   72              //return;\n   73            }\n   ..\n   80      readData(proc.stdout);\n   81      readData(proc.stderr, data =>\n   82:       console.log('stderr data:', Util.abbreviate(Util.escape(data), Util.getEnv('COLUMNS') || 120))\n   83      );\n   84      let exitCode = await waitChild(proc);\n   85:     console.log('exitCode:', exitCode);\n   86      return exitCode;\n   87    }\n   ..\n   91    const { body } = req;\n   92    const { contours, frame, width, height } = body;\n   93:   console.log(`${req.url}`, { contours, frame, width, height });\n   94  \n   95    res.status(200).send('OK');\n   ..\n  123      })\n  124    ).then(exitCode => {\n  125:     console.log('runMount', { exitCode });\n  126      if(exitCode == 127) {\n  127        Util.exit(127);\n  ...\n  129      return exitCode;\n  130    });*/\n  131:   console.log('mountDirs', { mountDirs });\n  132  \n  133    app.use((req, res, next) => {\n  ...\n  157      if(data) return res.send(data);\n  158      else if(file && typeof file == 'string') {\n  159:       console.log('sendFile', { file });\n  160        return res.sendFile(file, { root: process.cwd() });\n  161      }\n  ...\n  163  \n  164    const convertToGerber = async (boardFile, opts = {}) => {\n  165:     console.log('convertToGerber', { boardFile, opts });\n  166      let {\n  167        layers = opts.side == 'outline'\n  ...\n  192      const gerberFile = `./tmp/${base}.${formatToExt(layers, format)}`;\n  193      const cmd = `eagle -X -d ${format} -o \"${gerberFile}\" \"${boardFile}\" ${layers.join(' ')}`;\n  194:     console.log(`executing '${cmd}'`);\n  195      const child = exec(`${cmd} 2>&1 0</dev/null`, {});\n  196      // do whatever you want with `child` here - it's a ChildProcess instance just\n  ...\n  200      child.stderr.on('data', data => (output += data));\n  201      const { stdout, stderr, code, signal } = await child;\n  202:     console.log(`code: ${code}`);\n  203      //  console.log(`output: ${output}`);\n  204      if(code !== 0) throw new Error(output);\n  ...\n  207      if(opts.fetch) result.data = await (await fsPromises.readFile(GetVFSPath(gerberFile))).toString();\n  208      result.file = gerberFile;\n  209:     console.log('convertToGerber result =', result);\n  210      return result;\n  211    };\n  ...\n  215      let { board, save, file: filename, raw, ...opts } = body;\n  216      let result;\n  217:     console.log('Request /gerber', { board, save, opts });\n  218      try {\n  219        result = await convertToGerber(board, opts);\n  ...\n  226        result = { error };\n  227      }\n  228:     console.log('Response /gerber', Util.filterOutKeys(result, /(output|data)/));\n  229  \n  230      if(/get/i.test(req.method) || raw) {\n  ...\n  270  \n  271      if(opts.voronoi && !opts.vectorial) opts.vectorial = 1;\n  272: \n  273:     console.debug(`gerberToGcode`, opts);\n  274      function makePath(ext, side, base = basename) {\n  275        return path.join(opts['output-dir'], `${base}_${side}.${ext}`);\n  ...\n  279        .filter(([k, v]) => typeof v == 'string' || typeof v == 'number' || (typeof v == 'boolean' && v === true))\n  280        .map(([k, v]) => `--${k}${typeof v != 'boolean' && v != '' ? '=' + v : ''}`);\n  281:     console.log('Request /gcode', { gerberFile, fetch, raw });\n  282      //console.warn(`gerberToGcode`, Util.abbreviate(gerberFile), { gcodeFile, opts });\n  283  \n  ...\n  285      try {\n  286        const cmd = `pcb2gcode ${params.join(' ')} 2>&1`;\n  287:       console.warn(`executing '${cmd}'`);\n  288        const child = exec(cmd, {});\n  289        // do whatever you want with `child` here - it's a ChildProcess instance just\n  ...\n  296        const { stdout, stderr, code, signal } = wait;\n  297        if(output) output = Util.abbreviate(output.replace(/\\s*\\r*\\n/g, '\\n'), 200);\n  298:       console.log('Response /gcode', { stdout, output, sides });\n  299  \n  300        //   if(code !== 0) throw new Error(output);\n  ...\n  307  \n  308        let files = sides.map(side => [side, makePath('ngc', side)]).filter(([side, file]) => fs.existsSync(file));\n  309:       console.log('Response /gcode', { files });\n  310  \n  311        let result = { code, output, cmd };\n  ...\n  318        }\n  319        result.files = Object.fromEntries(files);\n  320:       console.log('Response /gcode', Util.filterOutKeys(result, /(Xoutput|data)/));\n  321        return result;\n  322      } catch(error) {\n  ...\n  343    const GithubListContents = async (owner, repo, dir, filter) => {\n  344      const url = `https://api.github.com/repos/${owner}/${repo}/contents/${dir}`;\n  345:     console.log(`GITHUB list`, { owner, repo, dir, filter });\n  346      let response = await fetch(url);\n  347      let result = JSON.parse(await response.text());\n  348:     console.log('result', result);\n  349      if(filter) {\n  350        const re = new RegExp(filter, 'g');\n  ...\n  374  \n  375        if(override) {\n  376:         console.log('Static request:', { overridePath, override, res });\n  377  \n  378          return res.redirect('/' + overridePath);\n  ...\n  384        const { path, url, method, headers, query, body } = req;\n  385        false &&\n  386:         console.log(\n  387            'Static request:',\n  388            { path, url, method, headers, query, body } /* Object.keys(req), */,\n  ...\n  406  \n  407      if(/(data|tmp)/.test(req.url)) {\n  408:       console.log(`Data file '${file}'`);\n  409        file = file.replace(/^\\/?(data\\/|tmp\\/|)/, '');\n  410        let dir = dirs[file];\n  411        if(dir) {\n  412:         console.log('Data file ' + file + ' was requested.');\n  413        }\n  414      }\n  ...\n  417  \n  418    /* app.use((req, res, next) => {\n  419:     console.log('Request', req.url);\n  420      next();\n  421    });*/\n  ...\n  434  \n  435      let written = fs.writeSync(logfile, str, 0, str.length);\n  436: \n  437:     console.log('Request: /' + file);\n  438  \n  439      if(fs.existsSync(file)) {\n  ...\n  442          data = fs.readFileSync(file, 'utf-8');\n  443        if((m = re.exec(data))) {\n  444:         console.log('The file ' + file + ` was requested. (${data.length})`, `match @ ${m.index}: ${m[0]}`);\n  445        }*/\n  446  \n  ...\n  474      const dir = dirs[file] ?? FindFile(file);\n  475      const p = path.resolve(dir, file);\n  476:     console.log('DATA', file, dir, p);\n  477      let data = await fsPromises.readFile(p, 'utf-8');\n  478      return res.type('application/json').status(200).send(data);\n  ...\n  531      const re = new RegExp(filter, 'i');\n  532      const f = ent => re.test(ent);\n  533: \n  534:     console.log('GetFilesList()', { filter, descriptions }, ...(names ? [names.length] : []));\n  535  \n  536      let dirmap = {};\n  ...\n  538      //    if(!names) names = [...(await fsPromises.readdir(dir))].filter(f);\n  539      dirmap = mountDirs.reduce((acc, dir) => {\n  540:       console.log('ReadDirRecursive', dir);\n  541        for(let entry of ReadDirRecursive(dir)) {\n  542          if(entry.endsWith('/')) continue;\n  ...\n  551      //   console.log('dirmap', dirmap);\n  552      if(!names) names = Object.keys(dirmap);\n  553:     console.log('names', names.length);\n  554      return Promise.all(\n  555        names\n  ...\n  599    app.ws('/serial', async (ws, req) => {\n  600      const { port } = req.body;\n  601:     console.debug('Object.keys(req)', Object.keys(req));\n  602  \n  603      const duplex = WebSocket.createWebSocketStream(ws, { encoding: 'utf8' });\n  ...\n  607      duplex.on('data', async data => {\n  608        data = data + '' + '\\r\\n';\n  609: \n  610:       console.debug('ws -> serial:', escape(data));\n  611  \n  612        serial.write(data);\n  ...\n  616      serial.on('data', async data => {\n  617        data = (data + '').replace(/\\r?\\n?$/, '');\n  618: \n  619:       console.debug('serial -> ws:', escape(data));\n  620        duplex.write(data);\n  621      });\n  622: \n  623:     console.debug('websocket:', Util.getMethods(ws, Infinity, 0));\n  624    });\n  625  \n  ...\n  644          str = c;\n  645          let stat = safeStat(configFile);\n  646:         console.log('stat:', stat);\n  647          if(Util.isObject(stat.mtime)) time = stat.mtime.getTime();\n  648        },\n  ...\n  654        () => ({})\n  655      );\n  656:     console.log('config:', config);\n  657  \n  658      res.json({ config, time, hash: Util.hashString(str) });\n  ...\n  661      const { body } = req;\n  662      let text = body.toString();\n  663:     console.log('text:', text);\n  664      let ret = filesystem.writeFile(configFile, text);\n  665:     console.log('ret:', ret);\n  666      let stat = safeStat(configFile);\n  667      res.json({\n  ...\n  685            Util.weakAssign(options, { owner, repo, dir, filter });\n  686          }\n  687: \n  688:         console.log(`GET ${location}`, { args, query, options });\n  689  \n  690          let result;\n  ...\n  700              location: ['', ...args].join('/')\n  701            });\n  702:           console.log(`PROXY ${proxyUrl}`);\n  703  \n  704            let response = await fetch(proxyUrl);\n  705            let type = response.headers['content-type'];\n  706: \n  707:           console.log(`RESPONSE`, response.url, type);\n  708            let data = await response.text();\n  709            res.send(data);\n  ...\n  723      let result;\n  724      const { owner, repo, dir, filter } = body;\n  725:     console.log('POST github', { owner, repo, dir, filter });\n  726  \n  727      res.json(\n  ...\n  746      }\n  747      let files = await GetFilesList('tmp', opts);\n  748:     console.log(\n  749        'POST files',\n  750        util.inspect(files, { breakLength: Infinity, colors: true, maxArrayLength: 10, compact: 1 })\n  ...\n  767      let output = fs.createWriteStream(filename, { autoClose: true, emitClose: true });\n  768      let s = req.pipe(output);\n  769:     console.log('s', Util.className(s));\n  770      let data;\n  771      s.on('close', () => Util.waitFor(1000).then(() => end()));\n  ...\n  775      function end() {\n  776        data = fs.readFileSync(filename).toString();\n  777:       console.log('req end', { data });\n  778        res.end(data + '\\n\\nUpload complete');\n  779        next();\n  ...\n  782  \n  783      const { body } = req;\n  784:     console.log('req.headers:', req.headers);\n  785:     console.log('body:', Util.abbreviate(body), Util.className(body), Util.inspect(body));\n  786:     console.log('save body:', typeof body == 'string' ? Util.abbreviate(body, 100) : body);\n  787      let st,\n  788        err,\n  ...\n  796  \n  797      if(err) {\n  798:       console.log('save error:', err);\n  799        res.json(err);\n  800      } else {\n  801:       console.log('saved:', filename, `${st.size} bytes`);\n  802        res.json({ size: st.size, filename });\n  803      }\n  ...\n  813  \n  814    app.listen(port, () => {\n  815:     console.log(`Ready at http://127.0.0.1:${port}`);\n  816    });\n  817  }\n\n/home/roman/Projects/plot-cv/test-bjson.js:\n   70    let zstr = new zlib.z_stream();\n   71    let ret = zlib.deflateInit2(zstr, level, zlib.Z_DEFLATED, 15 + 16, 8, zlib.Z_DEFAULT_STRATEGY);\n   72:   console.log('zlib.deflateInit2() =', ret);\n   73:   console.log('ffi.toPointer(buffer) =', ffi.toPointer(buffer));\n   74    //console.log('ffi.toString(buffer) =', ffi.toString(ffi.toPointer(buffer)));\n   75    const p = ffi.toPointer(buffer);\n   ..\n   85      name_max: 'test.c'.length + 1\n   86    });\n   87:   console.log('hdr =', hdr.toString());\n   88    zlib.deflateSetHeader(zstr, hdr);\n   89    let out = new ArrayBuffer(buffer.byteLength * 2);\n   ..\n   91    zstr.next_out = out;\n   92    zstr.avail_out = out.byteLength;\n   93:   console.log('zstr =', zstr.toString()); //  .next_in, zstr.avail_in, zstr.next_out, zstr.avail_out);\n   94  \n   95    ret = zlib.deflate(zstr, 0);\n   96:   console.log('zlib.deflate() =', ret);\n   97    return out;\n   98  }\n   ..\n  107  \n  108  function WriteFile(name, data) {\n  109:   console.log('WriteFile', { name });\n  110    if(typeof data == 'string' && !data.endsWith('\\n')) data += '\\n';\n  111  \n  112    let raw = filesystem.bufferFrom(data);\n  113:   console.log('raw =', raw && raw.byteLength);\n  114    let compressed = deflate(raw);\n  115: \n  116:   console.log('compressed =', compressed);\n  117:   console.log('compressed.length =', compressed && compressed.byteLength);\n  118  \n  119    if(name == '-' || typeof name != 'string') {\n  ...\n  130    //\n  131    filesystem.writeFile(name, data);\n  132:   console.log(`Wrote ${name}: ${data.length} bytes`);\n  133  }\n  134  \n  ...\n  155      Util.getArgs().slice(1)\n  156    );\n  157:   console.log('main', args, params);\n  158    if(params['@'].length == 0 && !params.input) {\n  159:     console.log(`Usage: ${Util.getArgs()[0]} <...files>`);\n  160      return 1;\n  161    }\n  ...\n  184      // WriteFile(xmlfile, toXML(xmlData));\n  185    } catch(err) {\n  186:     console.log('error:', { err });\n  187      throw err;\n  188    }\n\n/home/roman/Projects/plot-cv/test-exception.js:\n    9  Util.callMain(main, error => {\n   10    let { message, stack } = error;\n   11: \n   12:   console.log('ERROR message =', message);\n   13:   console.log('ERROR stack:\\n' + stack);\n   14  });\n   15  \n   16  async function main(...args) {\n   17    await PortableFileSystem(fs => (filesystem = fs));\n   18: \n   19:   console.log('main args =', args);\n   20  \n   21    await ConsoleSetup({ depth: 3 });\n\n/home/roman/Projects/plot-cv/create-tamper.js:\n   77    }\n   78  }\n   79: console.log('main');\n   80  Util.callMain(main);\n   81  \n   ..\n   96    if(typeof data != 'string') data = '' + data;\n   97    filesystem.writeFileSync(name, data + '\\n');\n   98:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   99  }\n  100  \n  ...\n  109  \n  110    // cwd = process.cwd() || fs.realpath('.');\n  111:   console.log('cwd=', cwd);\n  112  \n  113    if(args.length == 0)\n  ...\n  121    let r = [];\n  122    let processed = [];\n  123:   console.log('args=', args);\n  124:   console.log('test', path.dirname('/usr/bin/ls'));\n  125:   console.log('test', path.resolve('/proc/self/../ls'));\n  126    const argDirs = [...args].map(arg => path.dirname(arg));\n  127    // console.log('argDirs',Util.inspect(argDirs));\n  128  \n  129    const dirs = [cwd].concat(argDirs); /*.map(p => path.resolve(p))*/\n  130:   console.log('dirs=', dirs);\n  131: \n  132:   console.log('join()', path.join(cwd, argDirs[0]));\n  133:   console.log('cwd', cwd);\n  134:   console.log('argDirs[0]', argDirs[0]);\n  135    ///path.cwd = cwd;\n  136  \n  137    try {\n  138:     console.log('relative()', path.relative(cwd, argDirs[0], cwd));\n  139:     console.log('relative()', path.relative(argDirs[0], cwd, cwd));\n  140    } catch(err) {\n  141:     console.log(err);\n  142    }\n  143  \n  144    searchPath = makeSearchPath(dirs);\n  145:   console.log('searchPath=', searchPath);\n  146    packagesPath = makeSearchPath(dirs, 'package.json');\n  147:   console.log('packagesPath=', packagesPath);\n  148    moduleAliases = packagesPath.reduce((acc, p) => {\n  149      let json = JSON.parse(filesystem.readFileSync(p));\n  ...\n  160      return acc;\n  161    }, new Map());\n  162:   console.log('moduleAliases=', moduleAliases);\n  163    const name = args.join(', ');\n  164    while(args.length > 0) processFile(args.shift());\n  ...\n  208      if(!removeFile(file)) return;\n  209      const modulePath = removeModulesDir(file);\n  210:     console.log('processing:', modulePath);\n  211  \n  212      let thisdir = path.dirname(file);\n  ...\n  232          for(let [path, node] of statements) {\n  233            if(!predicate(node, path)) continue;\n  234:           console.log('removeStatements loop:', new ImmutablePath(path), printAst(node));\n  235  \n  236            if(node instanceof ImportDeclaration || (isObject(node) && node.what == 'default')) {\n  237              deep.unset(ast, path);\n  238            } else {\n  239:             console.log('i:', deep.get(ast, path.slice(0, -2)));\n  240              if(!Array.isArray(node.declarations)) node = node.declarations;\n  241              else Object.setPrototypeOf(node, VariableDeclaration.prototype);\n  ...\n  275          const from = node.fromValue;\n  276          node.from = new Literal(`'${to}'`);\n  277:         console.log(`node alter ${node.position /*.toString()*/}  => '${to}'   (was '${from}' )`);\n  278          return node;\n  279        });\n  ...\n  334        exportMap.set(modulePath, unique(exports.flat()));\n  335      } catch(err) {\n  336:       console.error(err.message);\n  337        Util.putStack(err.stack);\n  338        Util.exit(1);\n  ...\n  346        //if(assoc[0]) console.log('ASSOC:', assoc[0].position.clone());\n  347        const prefix = (assoc.length == 1 && assoc[0].position.clone()) || modulePath;\n  348:       console.log(prefix.toString() + ':', ...args);\n  349      }\n  350    }\n  351: \n  352:   console.log('processed:', ...processed);\n  353:   console.log('exportMap:', exportMap);\n  354    Util.exit(Number(processed.length == 0));\n  355  }\n  ...\n  364    }\n  365    if(err) {\n  366:     console.log(parser.lexer.currentLine());\n  367:     console.log(Util.className(err) + ': ' + (err.msg || err) + '\\n' + err.stack);\n  368    }\n  369    let lexer = parser.lexer;\n  ...\n  372    WriteFile('trace.log', parser.trace());\n  373    if(fail) {\n  374:     console.log('\\nerror:', err.msg, '\\n', parser.lexer.currentLine());\n  375    }\n  376:   console.log('finish: ' + (fail ? 'error' : 'success'));\n  377    return !fail;\n  378  }\n  ...\n  429  \n  430    /* console.log('thisdir:', thisdir);\n  431:   console.log('name:', name);\n  432:   console.log('_from:', _from);*/\n  433  \n  434    name = name.replace(/\\..?js$/g, '');\n\n/home/roman/Projects/plot-cv/virtfs.js:\n   27      });\n   28      mapDirsForFS.set(vfs, dirs);\n   29:     console.log('VirtFS.constructor', { dirs, obj, vfs });\n   30      return obj;\n   31    }\n   ..\n   74        return handle;\n   75      });\n   76: \n   77:     console.log('openSync', { a });\n   78  \n   79      let handle;\n\n/home/roman/Projects/plot-cv/test-cparse.js:\n   50    do {\n   51      ret = filesystem.read(input, buffer, 0, 1024);\n   52:     console.log('ret:', ret);\n   53  \n   54      yield buffer.slice(0, ret);\n   ..\n   59    let data = '';\n   60    for(let chunk of Reader(input)) {\n   61:     console.log('chunk:', chunk);\n   62:     console.log('chunk.length:', filesystem.bufferSize(chunk));\n   63      data += filesystem.bufferToString(chunk);\n   64    }\n   65:   console.log('data:', data);\n   66    return data;\n   67  }\n   ..\n   80  \n   81    const file = 'quickjs/hello.c' || getSource();\n   82: \n   83:   console.log('Source file:', file);\n   84    //const output = filesystem.open('out.e', 'w');\n   85    // console.log('out fd:', filesystem.fileno(output));\n   ..\n   90      file /*, '-o', 'out.e'*/\n   91    ];\n   92:   console.log('cmd:', cmd.join(' '));\n   93    let proc = childProcess(cmd[0], cmd.slice(1), {\n   94      block: false,\n   ..\n   97  \n   98    //filesystem.close(output);\n   99: \n  100:   console.log('out:', proc.stdout);\n  101  \n  102    //const src =   ReadAll(proc.stdout);\n  ...\n  112  \n  113        const code = filesystem.readFile(file);\n  114:       console.log('include_func', {\n  115          file,\n  116          code: Util.abbreviate(Util.escape(code + ''), 40)\n  ...\n  124      },\n  125      error_func(error) {\n  126:       console.log('error_func', { error });\n  127        throw new Error(error);\n  128      },\n  129      warn_func(warning) {\n  130:       console.log('warn_func', { warning });\n  131      }\n  132    });\n  ...\n  143  \n  144    //const src = filesystem.readFile('out.e');\n  145: \n  146:   console.log('Source code:', code);\n  147  \n  148    const ast = cparse(code, {\n  ...\n  158      ]\n  159    });\n  160: \n  161:   console.log(ast);\n  162  }\n  163  \n  164  Util.callMain(main, e => {\n  165:   console.log('STACK:', e.stack);\n  166:   console.log('ERROR:', e, '\\n', [...e.stack][2].functionName);\n  167  });\n  168  \n\n/home/roman/Projects/plot-cv/test-readline.js:\n   29    main(...scriptArgs.slice(1));\n   30  } catch(error) {\n   31:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   32    std.exit(1);\n   33  } finally {\n   34:   console.log('SUCCESS');\n   35  }\n   36  \n\n/home/roman/Projects/plot-cv/wscli.js:\n   83      });\n   84      let log = this.printFunction(console.log);\n   85:     console.log = (...args) => {\n   86        //log('console.log:', args);\n   87        log(...args);\n   ..\n  143    const { binary } = params;\n  144    //console.log('params', params);\n  145:   console.log('headers', headers);\n  146    function createWS(url, callbacks, listen = 0) {\n  147      let urlObj = new URL(url);\n  ...\n  161  \n  162      const fn = [net.client, net.server][+listen];\n  163:     console.log('createWS', { url, binary });\n  164      return fn(url, {\n  165        sslCert,\n  ...\n  183        onConnect(ws, req) {\n  184          connections.add(ws);\n  185:         console.log('onConnect', { ws, req });\n  186          const { address, port } = ws;\n  187          const remote = `${address}:${port}`;\n  ...\n  189            repl = new CLI(remote);\n  190          } catch(err) {\n  191:           console.log('error:', err.message);\n  192          }\n  193          //        const {url}= req;\n  ...\n  195        },\n  196        onClose(ws, status, reason, error) {\n  197:         console.log('onClose', { ws, status, reason, error });\n  198          connections.delete(ws);\n  199          if(repl) {\n  ...\n  207        },\n  208        onHttp(req, resp) {\n  209:         console.log('onHttp', { req, resp });\n  210          let text = resp.text();\n  211          text = text.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n  212:         console.log('onHttp', { text });\n  213  \n  214          /* let json =resp.json();\n  215:         console.log('onHttp', { json }); */\n  216          let buffer = resp.arrayBuffer();\n  217:         console.log('onHttp', { buffer });\n  218        },\n  219        onFd(fd, rd, wr) {\n  220:         console.log('onFd', fd, rd, wr);\n  221          os.setReadHandler(fd, rd);\n  222          os.setWriteHandler(fd, wr);\n  ...\n  227            msg = msg.substring(0, 100);\n  228          }\n  229:         console.log('onMessage', { ws, msg });\n  230        },\n  231        onError(ws, error) {\n  232:         console.log('onError', ws, error);\n  233        }\n  234      });\n  ...\n  241    createWS(url, {});\n  242    function quit(why) {\n  243:     console.log(`quit('${why}')`);\n  244      repl.cleanup(why);\n  245    }\n  ...\n  248    main(...scriptArgs.slice(1));\n  249  } catch(error) {\n  250:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n  251    std.exit(1);\n  252  } finally {\n\n/home/roman/Projects/plot-cv/test-tree.js:\n   29  \n   30    let tree = new Tree(treeObj);\n   31: \n   32:   console.log('tree:', tree);\n   33    /*  console.log('tree():', tree(treeObj.b[3].haha));\n   34:   console.log('tree().path:', tree(treeObj.b[3].haha).path);*/\n   35    let map = new Map(tree.entries());\n   36:   console.log('map:', map);\n   37: \n   38:   console.log('tree.indexOf():', tree.indexOf(treeObj.b[3], treeObj.b[3]['*']));\n   39:   console.log('tree.indexOf():', tree.indexOf(treeObj.b[3]['*']));\n   40: \n   41:   console.log('tree.keyOf():', tree.keyOf(treeObj.b[3], treeObj.b[3]['*']));\n   42:   console.log('tree.keyOf():', tree.keyOf(treeObj.b[3]['*']));\n   43: \n   44:   console.log('tree.pathOf():', tree.pathOf(treeObj.b[3].haha));\n   45:   console.log('tree.at():', tree.at(['b', 3, 'haha']));\n   46:   console.log('tree.parentNode():', tree.parentNode(tree.parentNode(treeObj.b[3].haha)));\n   47:   console.log('tree.push():', tree.push(treeObj.b[3]['*'], 9, 8, 7));\n   48:   console.log('tree.keyOf():', tree.keyOf(treeObj.b[3]));\n   49:   console.log('treeObj:', treeObj);\n   50:   console.log('tree.shift():', tree.shift(treeObj.b[3]));\n   51    //console.log('typeof entries:', Util.className(entries), Object.getPrototypeOf(entries).constructor, Util.isGenerator(entries), Util.isIterable(entries));\n   52    //console.log('tree.entries():', [...tree.entries()]);\n   53:   console.log('tree.values():', [...tree.values()]);\n   54:   console.log('tree.flat():', tree.flat());\n   55:   console.log('tree.remove():', tree.remove(treeObj.b));\n   56:   console.log('tree():', tree(treeObj.c));\n   57:   console.log('tree():', tree(['c']));\n   58:   console.log('tree():', tree('c.array'));\n   59:   console.log('[...tree]:', [...tree]);\n   60: \n   61:   console.log('treeObj:', treeObj);\n   62  }\n   63  \n\n/home/roman/Projects/plot-cv/check-discogs.js:\n   29      let data,\n   30        id = path.basename(file);\n   31:     console.log('fetching order: ' + id);\n   32  \n   33      data = await dl(id);\n   34: \n   35:     console.log('Order:   ' + ColorStr([24, 160, 255], 'https://www.discogs.com/sell/order/' + id));\n   36  \n   37      continue;\n   ..\n   48  \n   49      address = address.substring(0, address.indexOf('Paypal address:'));\n   50: \n   51:     console.log('Addresse:\\n\\t ' + ColorStr([192, 255, 0], address).replace(/\\n/g, '\\n\\t '));\n   52      function ColorStr(c, str) {\n   53        return str;\n   ..\n   61      total = total.replace(/<[^>]+>/g, '');\n   62      total = total.trim();\n   63: \n   64:     console.log('Total:\\t ' + ColorStr([255, 64, 0], total));\n   65  \n   66      data = data.replace(/\\n\\s+/gm, '\\n');\n   ..\n   95        return [date, ago, who, what.join('\\n')].reduce((line, field, i) => line + field.padEnd(columns[i]), '');\n   96      });\n   97:     console.log(\n   98        `${parts.length} Nachrichten`,\n   99:       console.config({ maxArrayLength: 2, compact: false, stringBreakNewline: true }),\n  100        parts\n  101      );\n  ...\n  105      // console.log(`order #${id}`, obj);\n  106      orders.set(id, parts);\n  107:     console.log('\\n' + '─'.repeat(80) + '\\n');\n  108    }\n  109  \n  ...\n  139      }\n  140    });\n  141:   console.log('result', result);\n  142  \n  143    for await(let chunk of result) {\n  144:     console.log('chunk', chunk);\n  145    }\n  146  }\n\n/home/roman/Projects/plot-cv/ol-map.js:\n   95    if(states.length) {\n   96      const [time, list] = states.last;\n   97:     console.log('refresh', list.length);\n   98  \n   99      SetTime(time);\n  ...\n  112  \n  113  function FlyTo(location, done = () => {}) {\n  114:   console.log('FlyTo', { location, done });\n  115  \n  116    if(typeof location == 'string') location = cities[location];\n\n/home/roman/Projects/plot-cv/adsb-server.js:\n   25  \n   26  atexit(() => {\n   27:   console.log('atexit', atexit);\n   28    let stack = new Error('').stack;\n   29:   console.log('stack:', stack);\n   30  });\n   31  \n   ..\n   64        if(size) {\n   65          let data = (globalThis.lastData = ReadRange(watch_file, watch_offset, size));\n   66:         console.log('send', data);\n   67          sockets.forEach(ws => ws.send(data));\n   68        }\n   ..\n   73  \n   74  function WatchFile(filename) {\n   75:   console.log('WatchFile', { filename });\n   76    let ev = new Uint32Array(4);\n   77    let wd;\n   ..\n   89  function PeriodicCheck() {\n   90    let file = CurrentFile();\n   91:   console.log('PeriodicCheck', { file });\n   92  \n   93    if(file != watch_file) WatchFile(file);\n   ..\n  110    ];\n  111    repl.directives.d = [() => globalThis.daemon(), 'detach'];\n  112:   console.log = repl.printFunction((...args) => {\n  113      log('LOG', console.config(repl.inspectOptions), ...args);\n  114    });\n  ...\n  176  \n  177    const createWS = (globalThis.createWS = (url, callbacks, listen) => {\n  178:     console.log('createWS', { url, callbacks, listen });\n  179  \n  180      setLog(\n  ...\n  184          : (level, str) => {\n  185              if(/BIND_PROTOCOL|DROP_PROTOCOL|CHECK_ACCESS_RIGHTS|ADD_HEADERS/.test(str)) return;\n  186:             console.log(logLevels[level].padEnd(10), str.trim());\n  187            }\n  188      );\n  ...\n  191      let child, dbg;\n  192      let netfn = [client, server][+listen];\n  193:     console.log('createWS', { url, netfn });\n  194      return netfn(\n  195        url,\n  ...\n  232            function* config(req, res) {\n  233              const { body, headers } = req;\n  234:             console.log('/config', { req, res });\n  235:             console.log('*config', { body, headers });\n  236              yield '{}';\n  237            },\n  ...\n  249          block: false,\n  250          onConnect(ws, req) {\n  251:           console.log('onConnect', { ws, req }, req && req.headers);\n  252  \n  253            Object.defineProperties(ws, {\n  ...\n  255                value: function sendMessage(msg) {\n  256                  let ret = this.send(JSON.stringify(msg));\n  257:                 console.log(`ws.sendMessage(`, msg, `) = ${ret}`);\n  258                  return ret;\n  259                },\n  ...\n  270          },\n  271          onClose(ws) {\n  272:           console.log('onClose', ws);\n  273            protocol.delete(ws);\n  274            sockets.delete(ws);\n  ...\n  277          },\n  278          onError(ws) {\n  279:           console.log('onError', ws);\n  280            protocol.delete(ws);\n  281            sockets.delete(ws);\n  ...\n  283          onHttp(req, resp) {\n  284            const { method, headers } = req;\n  285:           console.log('\\x1b[38;5;33monHttp\\x1b[0m [\\n  ', req, ',\\n  ', resp, '\\n]');\n  286            const { body, url } = resp;\n  287:           console.log('\\x1b[38;5;33monHttp\\x1b[0m', { body });\n  288  \n  289            const file = url.path.slice(1);\n  ...\n  291  \n  292            if(file.endsWith('.js')) {\n  293:             console.log('onHttp', { file, dir });\n  294              const re = /^(\\s*(im|ex)port[^\\n]*from ['\"])([^./'\"]*)(['\"]\\s*;[\\t ]*\\n?)/gm;\n  295  \n  296              resp.body = body.replaceAll(re, (match, p1, p0, p2, p3, offset) => {\n  297                if(file == 'rbush.js') {\n  298:                 console.log('RBUSH', resp.body);\n  299                }\n  300  \n  ...\n  305  \n  306                  match = [p1, './' + fname, p3].join('');\n  307: \n  308:                 console.log('args', { match, p1, p2, p3, offset });\n  309                }\n  310                return match;\n  ...\n  315          },\n  316          onMessage(ws, data) {\n  317:           console.log('onMessage', ws, data);\n  318            let response;\n  319  \n  ...\n  335              if(obj !== undefined) {\n  336                const { cmd, args } = obj;\n  337:               console.log('onMessage', { cmd, args });\n  338  \n  339                if(commands[cmd]) {\n  340                  let value = commands[cmd](...args);\n  341                  let response = { type: cmd, value };\n  342:                 console.log('Sending response to ' + cmd + '()', response);\n  343                  ws.sendMessage(response);\n  344                  return;\n  ...\n  355              let matches = [...data.matchAll(/\\d+(-\\d+)?/g)].map(([m]) => m);\n  356              let states = [];\n  357:             console.log('matches', matches);\n  358              for(let match of matches) {\n  359                if(IsRange(match)) {\n  360                  let range = GetRange(match);\n  361:                 console.log('range', range);\n  362  \n  363                  states = states.concat(ResolveRange(...range));\n  ...\n  371              response = arr;\n  372            } catch(error) {\n  373:             console.log('onMessage ERROR', error);\n  374              response = { type: 'error', error: error.message };\n  375            }\n  ...\n  386      );\n  387    });\n  388:   console.log('XX');\n  389  \n  390    delete globalThis.DEBUG;\n  ...\n  412    function showSessions() {\n  413      let sessions = getSessions();\n  414:     console.log(\n  415        'sessions',\n  416:       console.config({ maxArrayLength: Infinity, depth: 4, customInspect: true, compact: 1 }),\n  417        sessions\n  418      );\n  ...\n  428  */\n  429    function quit(why) {\n  430:     console.log(`quit('${why}')`);\n  431  \n  432      let cfg = { inspectOptions: console.options };\n  ...\n  439    main(...scriptArgs.slice(1));\n  440  } catch(error) {\n  441:   console.log(`FAIL: ${error?.message ?? error}\\n${error?.message}`);\n  442  }\n  443  \n\n/home/roman/Projects/plot-cv/test-ngql.js:\n   29    try {\n   30      let body = query();\n   31:     console.log('body', body);\n   32      let res = await fetch('http://wild-beauty.herokuapp.com/v1/graphql', {\n   33        body,\n   ..\n   35      });\n   36      let json = await res.json();\n   37:     console.log('json', json);\n   38    } catch(err) {\n   39:     console.error(err);\n   40    }\n   41  }\n\n/home/roman/Projects/plot-cv/test-operators.js:\n   77    var b = new Vec2(110, 105);\n   78    var r;\n   79: \n   80:   console.log(`a * 2 + 3 * b = `, (r = a * 2 + 3 * b));\n   81:   console.log(`b - a = `, b - a);\n   82:   console.log(`b ^ a = `, b ^ a);\n   83    a++;\n   84    r = ++a;\n   ..\n  165    var b = new Vec2(110, 105);\n  166    var r;\n  167: \n  168:   console.log(`a * 2 + 3 * b = `, (r = a * 2 + 3 * b));\n  169:   console.log(`b - a = `, b - a);\n  170:   console.log(`b ^ a = `, b ^ a);\n  171    a++;\n  172    r = ++a;\n\n/home/roman/Projects/plot-cv/grammar-css3.js:\n    3  function wrap(parser, name) {\n    4    return (str, pos) => {\n    5:     console.log(`${name}(#${str.length}, ${pos})`);\n    6      let r; /*= parser(str, pos);\n    7      if(r[0] || name.startsWith('direct')) console.log('matched (' + name + ') ' + pos + ' - ' + r[2] + \": '\", r[1], \"'\");*/\n\n/home/roman/Projects/plot-cv/test-childprocess.js:\n   68    process.kill(proc.pid, 'SIGCONT');\n   69    //console.log('proc.stdout:', proc.stdout);\n   70:   console.log('proc:', proc);\n   71  \n   72    let output = '';\n   73    for await(let data of FdReader(proc.stdio[1])) {\n   74:     console.log('data:', data);\n   75      output += data;\n   76:     console.log('output.length:', output.length);\n   77    }\n   78    // console.log('output:', output);\n   79  \n   80    let w = await waitExit(proc);\n   81:   console.log('proc.wait():', w);\n   82:   console.log('proc.wait():', await w);\n   83:   console.log('childProcess.errno:', proc.errno);\n   84:   console.log('childProcess.errstr:', proc.errstr);\n   85  }\n   86  main().catch(err => console.log('error:', err.message, err.stack));\n\n/home/roman/Projects/plot-cv/clang-list.js:\n   47  \n   48  async function main(...args) {\n   49:   console.log('main(', ...args, ')');\n   50    await ConsoleSetup({ breakLength: 120, depth: 10 });\n   51    await PortableFileSystem(fs => (fs = fs));\n   ..\n   67      args\n   68    );\n   69:   console.log('main', params);\n   70  \n   71    let defs = params.define || [];\n   ..\n   98      ]);\n   99    }\n  100:   console.log('args', { defs, includes });\n  101    args = args.concat(defs.map(d => `-D${d}`));\n  102    args = args.concat(includes.map(v => `-I${v}`));\n  103: \n  104:   console.log('Processing files:', args);\n  105  \n  106    await processFiles(...params['@']);\n  ...\n  109      for(let file of files) {\n  110        const start = /*await Util.now(); //*/ await Util.hrtime();\n  111:       console.log('start:', start);\n  112        let json, ast;\n  113        let base = path.basename(file, /\\.[^./]*$/);\n  ...\n  120          let cached = times[1] >= times[0];\n  121          if(cached) {\n  122:           console.log('Reading cached AST from:', outfile);\n  123            json = /*fs.readFile*/ await load(outfile);\n  124            ast = await parse(json);\n  ...\n  137              ast = await Util.instrument(JSON.parse)(json);\n  138              await WriteBJSON(boutfile, ast).catch(err => {\n  139:               console.error(err);\n  140                WriteFile(outfile, json);\n  141              });\n  ...\n  207            let nodeTypes = [...nodes].map(([p, n]) => n.kind);\n  208            let hist = Util.histogram(nodeTypes, new Map());\n  209:           console.log('histogram:', new Map([...hist].sort((a, b) => a[1] - b[1])));\n  210          }\n  211  \n  ...\n  255              )\n  256              .join(' ');\n  257: \n  258:           console.log(line);\n  259          }\n  260        }\n\n/home/roman/Projects/plot-cv/test-net.js:\n   53    const width = raw.cols;\n   54    const height = raw.rows;\n   55: \n   56:   console.log('raw', raw.cols, raw.rows);\n   57: \n   58:   console.log('Preamble duration:', hr(begin));\n   59  \n   60    start = hr();\n   ..\n   73      pl.translate(ctr.x, ctr.y);\n   74      pl.round(1);\n   75: \n   76:     console.log('pl:', pl + '');\n   77      let c = new Contour(pl);\n   78      return c;\n   ..\n   82    let contourStr = contours.map(c => c.toString(Contour.FORMAT_NOBRACKET | Contour.FORMAT_SPACE | Contour.FORMAT_01));\n   83    body = JSON.stringify({ contours: contourStr, frame: 0, width, height });\n   84:   console.log('Prepare duration:', hr(start));\n   85  \n   86    start = hr();*/\n   ..\n   97  \n   98    // console.log('Request duration:', hr(start));\n   99: \n  100:   console.log('response:', response);\n  101    // console.log('response:', Util.getMemberNames(response));\n  102  \n  ...\n  107    main(...scriptArgs.slice(1));\n  108  } catch(error) {\n  109:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  110    std.exit(1);\n  111  } finally {\n\n/home/roman/Projects/plot-cv/test-image.js:\n  141    });\n  142    const { DISPLAY } = globalThis.process ? globalThis.process.env : std.getenviron();\n  143:   console.log('DISPLAY', DISPLAY);\n  144:   console.log(\n  145      'cv.ALIGN_RIGHT',\n  146      Object.getOwnPropertyNames(cv).filter(n => /ALIGN/.test(n))\n  ...\n  150  \n  151    let r3 = r2.align(r1, cv.ALIGN_RIGHT | cv.ALIGN_BOTTOM);\n  152:   console.log('r3', r3);\n  153:   console.log('Screen.size()', Screen.size());\n  154  \n  155    let opts = GetOpt(\n  ...\n  158          false,\n  159          () => {\n  160:           console.log(`Usage: ${Util.getArgv()[0]} [OPTIONS] <video|device>`);\n  161            Util.exit(0);\n  162          },\n  ...\n  168          (arg, current, options, results) => {\n  169            let driverId = arg in VideoSource.backends ? arg : current;\n  170:           console.log('driver', { arg, current, driverId });\n  171            if(driverId === undefined) {\n  172              const input = results['input'];\n  ...\n  189      args\n  190    );\n  191: \n  192:   console.log('cv.getScreenResolution():', cv.getScreenResolution());\n  193:   console.log('opts:', opts);\n  194:   console.log('opts.size:', opts.size);\n  195  \n  196    const makeRainbow = steps =>\n  ...\n  205    const printFlags = flags => [...BitsToNames(MouseFlags)];\n  206    /*console.log('printFlags:', printFlags + '');\n  207:   console.log('tickFrequency:', cv.getTickFrequency());*/\n  208  \n  209    win.setMouseCallback(function (event, x, y, flags) {\n  210      event = Mouse.printEvent(event);\n  211      flags = Mouse.printFlags(flags);\n  212: \n  213:     console.debug('Mouse event:', console.inspect({ event, x, y, flags }, { multiline: false }));\n  214    });\n  215  \n  ...\n  224  \n  225    for(let image of images) {\n  226:     console.log('image', image);\n  227      let mat = cv.imread(image);\n  228  \n  229      let out = pipeline(mat);\n  230: \n  231:     console.log('mat', mat);\n  232      //let [w, h] = [...mat.size];\n  233      //console.log('mat.size', { w, h });\n  ...\n  243        if(['s', 'S', 115, 83].indexOf(k) != -1) {\n  244          const { contours } = pipeline;\n  245:         console.log('contours.length', contours.length);\n  246          saveContours(contours, out.size);\n  247          // saveLines(lines, out.size);\n  ...\n  254    function saveContours(contours, size) {\n  255      let points = contours.reduce((acc, contour, i) => {\n  256:       console.log('contour #' + i, contour);\n  257        //contour =simplifyMethods.PERPENDICULAR_DISTANCE(contour);\n  258        //contour = simplifyMethods.RADIAL_DISTANCE(contour);\n  ...\n  312    let paramNav = new ParamNavigator(params, config.currentParam);\n  313    let dummyArray = [0, 1, 2, 3, 4, 5, 6, 7];\n  314:   console.log('win.imageRect (1)', win.imageRect);\n  315  \n  316    if(opts['trackbars']) {\n  ...\n  318      params.thresh1.createTrackbar('thresh1', win);\n  319      params.thresh2.createTrackbar('thresh2', win);\n  320:     console.log('win.imageRect (2)', win.imageRect);\n  321    }\n  322   \n  ...\n  334          const dstEmpty = dst.empty;\n  335          if(dst.empty) dst0Size = dst.size;\n  336:         console.log('video', video);\n  337          framePos = video.get('pos_frames');\n  338          video.read(dst);\n  339:         console.log('dst', dst);\n  340          win.show(dst);\n  341          if(videoSize === undefined || videoSize.empty) videoSize = video.size.area ? video.size : dst.size;\n  ...\n  408    main(...scriptArgs.slice(1));\n  409  } catch(error) {\n  410:   console.log('FAIL: ', error && error.message, error && error.stack ? '\\n' + error.stack : '');\n  411    std.exit(1);\n  412  }\n  413: \n  414: console.log('SUCCESS');\n  415  \n\n/home/roman/Projects/plot-cv/test-eval.js:\n   10  \n   11  trkl.bind(testObj, 'prop1', value => (value === undefined ? testValues[0] : (testValues[0] = value)));\n   12: \n   13: console.log('testObj.prop1', testObj.prop1);\n   14  testObj.prop1 = 'a';\n   15: console.log('testObj.prop1', testObj.prop1);\n   16: console.log('testValues', testValues);\n   17   `;\n   18  \n   ..\n   35      {\n   36        Symbol: { species: Symbol.for('species') },\n   37:       console: {\n   38          log(...args) {\n   39:           console.debug(\n   40              'console.log(',\n   41              ...args.map(arg => `'${arg}'`).reduce((acc, arg) => (acc ? [...acc, ',', arg] : [arg]), null),\n   ..\n   50    await Util.safeCall(() => {\n   51      let iter = env.generate(ast);\n   52:     console.log('iter:', iter);\n   53  \n   54      for(let it of iter()) console.info('it:', it);\n   ..\n   58  \n   59    let outputFile = 'output.es';\n   60:   console.log(`wrote '${outputFile}'`, await filesystem.writeFile('output.es', output));\n   61  }\n   62  \n\n/home/roman/Projects/plot-cv/test-geom.js:\n   14  \n   15    let list = new PointList(args);\n   16: \n   17:   console.log('list:', list); // , Util.getMethodNames(list, 1,1), Util.getPrototypeChain(list));\n   18  \n   19    list = list.rotate(1);\n   20: \n   21:   console.log('list:', list);\n   22    list = list.rotate(-2).concat([new Point(33, 33), new Point(66, 66)]);\n   23:   console.log('list:', list);\n   24: \n   25:   console.log('list:', list.toString());\n   26    let centroid = list.centroid();\n   27: \n   28:   console.log('list.centroid():', list.clone().centroid());\n   29:   console.log('list.avg():', list.clone().avg());\n   30:   console.log('list.rect():', list.rect());\n   31:   console.log('list.xrange():', list.xrange());\n   32:   console.log('list.normalizeX():', list.clone().normalizeX());\n   33:   console.log('list.yrange():', list.yrange());\n   34:   console.log('list.normalizeY():', list.clone().normalizeY());\n   35:   console.log('list.bbox():', list.bbox());\n   36:   console.log('list.area():', list.area());\n   37:   console.log('list.lines():', [...list.lines()]);\n   38:   console.log('list.rotate(-2):', list.clone().rotate(-2));\n   39:   console.log('list.rotate(1):', list.clone().rotate(1));\n   40:   console.log('list.reverse():', list.clone().reverse());\n   41:   console.log('list.toPolar():', list.clone().toPolar());\n   42:   console.log('list.translate(-50,-50):', list.clone().translate(-50, -50));\n   43  \n   44    let m = new Matrix()\n   ..\n   46      .translate(-50, -50)\n   47      .rotate(Math.PI / 2);\n   48: \n   49:   console.log('list.transform(m):', list.clone().transform(m));\n   50:   console.log('list.toString():', list.clone().toString());\n   51  \n   52    let l = list.map(centroid.diff()).prod(100).floor().quot(100);\n   53: \n   54:   console.log('l.toSource():', l.toSource({ plainObj: true, asString: true }));\n   55:   console.log('l:', l);\n   56    let l2 = new PointList('-47.88,5.53 52.120000000000005,55.53 2.12,-44.47 -47.88,-44.47 19.12,22.53 -13.88,-10.47');\n   57:   console.log('l2:', l2);\n   58    let bbox = { xl: 0, xr: 800, yt: 0, yb: 600 };\n   59  \n   60    let v = new Voronoi();\n   61:   console.log('v:', v);\n   62    let computation = v.compute(l2, bbox);\n   63  \n   64    computation.vertices.map(p => Object.setPrototypeOf(p, Point.prototype));\n   65:   console.log('compute:', computation);\n   66  \n   67    let vertices = computation.vertices; /*.map(p => new Point(p))*/\n   68: \n   69:   console.log('vertices:', vertices);\n   70    let result = new PointList(vertices);\n   71:   console.log('result:', result);\n   72: \n   73:   console.log('matrix:', m);\n   74:   console.log('matrix:', Matrix.identity());\n   75  }\n   76  \n\n/home/roman/Projects/plot-cv/ffi.js:\n   32    var h;\n   33    var r;\n   34:   console.log('Hello World');\n   35    debug();\n   36:   console.log('RTLD_NOW = ', RTLD_NOW);\n   37    /* Expect an error -- libc.so is (usually) a linker script */\n   38:   console.log('dlopen = ', (r = dlopen('libc.so.6', RTLD_NOW)));\n   39    if(r == null) console.log('dlerror = ', dlerror());\n   40    /* But, using libc.so.6 should work */\n   41:   console.log('dlopen = ', (h = dlopen('libc.so.6', RTLD_NOW)));\n   42    if(h == null) console.log('dlerror = ', dlerror());\n   43:   console.log('dlsym = ', (r = dlsym(h, 'malloc')));\n   44    if(r == null) console.log('dlerror = ', dlerror());\n   45:   console.log('dlclose = ', (r = dlclose(h)));\n   46    if(r != 0) console.log('dlerror = ', dlerror());\n   47:   console.log('dlopen = ', (h = dlopen(null, RTLD_NOW)));\n   48    if(h == null) console.log('dlerror = ', dlerror());\n   49:   console.log('dlsym = ', (r = dlsym(h, 'malloc')));\n   50    if(r == null) console.log('dlerror = ', dlerror());\n   51:   console.log('dlclose = ', (r = dlclose(h)));\n   52    if(r != 0) console.log('dlerror = ', dlerror());\n   53    var malloc;\n   54:   console.log('dlsym = ', (malloc = dlsym(RTLD_DEFAULT, 'malloc')));\n   55    if(malloc == null) console.log('dlerror = ', dlerror());\n   56    var free;\n   57:   console.log('dlsym = ', (free = dlsym(RTLD_DEFAULT, 'free')));\n   58    if(free == null) console.log('dlerror = ', dlerror());\n   59  \n   ..\n   68    var p;\n   69    p = call('malloc', 10);\n   70:   console.log(p);\n   71    call('free', p);\n   72  \n   ..\n   81    n = call('strlen', 'hello');\n   82    /* We expect 5 */\n   83:   console.log(n);\n   84  \n   85    /* p = strdup(\"dup this\").\n   ..\n   97    var s;\n   98    s = toString(p);\n   99:   console.log(s, call('strlen', p));\n  100: \n  101:   console.log();\n  102:   console.log('testing test.so functions');\n  103    h = dlopen('./test.so', RTLD_NOW);\n  104    if(h == null) console.log(\"can't load ./test.so: \", dlerror());\n  ...\n  112     */\n  113    r = call('test1', 'abc');\n  114:   console.log('should be 5: ', r);\n  115    /* pass buffer to test1 -- test1 changes the buffer in place, and this\n  116     * is reflected in quickjs\n  ...\n  123    u[1] = 2;\n  124    u[2] = 3;\n  125:   console.log('should print 1 2 3');\n  126    r = call('test1', b);\n  127:   console.log('should print 3,2,1,0,0,0,0,0');\n  128:   console.log(u);\n  129  \n  130    /* p is a pointer to \"dup this\" -- 9 bytes of memory\n  ...\n  132    b = toArrayBuffer(p, 9);\n  133    u = new Uint8Array(b);\n  134:   console.log(u);\n  135  \n  136    call('free', p);\n  ...\n  140    define('strtoul', fp, null, 'ulong', 'string', 'string', 'int');\n  141    n = call('strtoul', '1234', null, 0);\n  142:   console.log(n, 'Should be 1234');\n  143    call('strtoul', '1234567890123456789012345678901234567890', null, 0);\n  144:   console.log(errno(), 'should be 34 (ERANGE)');\n  145  \n  146    p = JSContext();\n  147:   console.log('jscontext = ', p);\n  148  \n  149    function syscall(name, retval, ...args) {\n  ...\n  247    let socket = syscall('socket', 'int', 'int', 'int', 'int');\n  248    let fd = socket(2, 1, 6);\n  249:   console.log('fd = ', fd);\n  250    if(fd == -1) console.log('errno() = ', errno());\n  251  \n  ...\n  262    let connect = syscall('connect', 'int', 'int', 'void *', 'int');\n  263    let sa = sockaddr_in(2, 3000, '127.0.0.1');\n  264: \n  265:   console.log('sa = ', sa);\n  266:   console.log('sa.byteLength = ', sa.byteLength);\n  267    ret = connect(fd, sa, sa.byteLength);\n  268:   console.log('ret = ', ret);\n  269    if(ret == -1) console.log('errno() = ', errno());\n  270  \n  271    let flags = fcntl(fd, F_GETFL);\n  272:   console.log('fcntl() flags = ', ret);\n  273    if(flags == -1) console.log('fcntl() errno() = ', errno());\n  274:   console.log(`fcntl(${fd}, F_SETFL, 0o${(+flags | 0o4000).toString(8)})`);\n  275    fcntl(fd, F_SETFL, flags | 0o4000);\n  276    flags = fcntl(fd, F_GETFL);\n  277:   console.log('fcntl() flags = ', ret);\n  278  \n  279    let send = syscall('send', 'int', 'int', 'void *', 'int', 'int');\n  ...\n  282    let req = str2buf('GET / HTTP/1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n');\n  283    ret = send(fd, req, req.byteLength, 0);\n  284:   console.log('ret = ', ret);\n  285  \n  286    let getsockname = syscall('getsockname', 'int', 'int', 'void *', 'void *');\n  ...\n  291    let addr = sockaddr_in();\n  292    ret = getsockname(fd, addr, namelen);\n  293:   console.log('getsockname() ret = ', ret);\n  294:   console.log('getsockname() getu32(namelen) = ', getu32(namelen));\n  295    setu32(namelen, 16);\n  296:   console.log('getu32(namelen) = ', getu32(namelen));\n  297    addr = sockaddr_in();\n  298  \n  299    ret = getpeername(fd, addr, namelen);\n  300:   console.log('getpeername() ret = ', ret);\n  301:   console.log('getpeername() getu32(namelen) = ', getu32(namelen));\n  302: \n  303:   console.log('getpeername() addr = ', buf2str(addr));\n  304:   console.log('getpeername() addr.af = ', addr.af);\n  305:   console.log('getpeername() addr.port = ', addr.port);\n  306:   console.log('getpeername() addr.addr = ', addr.addr);\n  307  \n  308    let select = syscall('select', 'int', 'int', 'void *', 'void *', 'void *', 'void *');\n  ...\n  321  \n  322    ret = select(64, rfd, wfd, efd, null);\n  323: \n  324:   console.log('ret = ', ret);\n  325:   console.log('rfd = ', fd_array(rfd));\n  326:   console.log('wfd = ', fd_array(wfd));\n  327:   console.log('efd = ', fd_array(efd));\n  328    b = new ArrayBuffer(1024);\n  329    ret = recv(fd, b, b.byteLength, 0);\n  330:   console.log('ret = ', ret);\n  331:   console.log('b = ', buf2str(b, ret));\n  332  }\n  333  \n\n/home/roman/Projects/plot-cv/test-cli.js:\n   18    //import { Contour } from \"contour\";\n   19    const { circle, contour, line, polygon, rect } = Draw;\n   20: \n   21:   console.log('global:', { drawLine, drawCircle });\n   22:   console.log('static:', { circle, contour, line, polygon, rect });\n   23:   console.log('test:', { Point, Size, Rect, Mat, Contour, Line, Draw });\n   24  \n   25    const ctors = [Point, Size, Rect, Mat, Contour, Line];\n   ..\n   31    }\n   32    for(let obj of objs) {\n   33:     console.log('keys: ', Util.getMemberNames(obj));\n   34:     console.log('obj: ', obj.constructor.name, obj);\n   35    }\n   36  \n   37    let l = new Line(50, 50, 150, 150);\n   38: \n   39:   console.log('line.a:', l.a);\n   40:   console.log('line.b:', l.b);\n   41  \n   42    let ct1 = new Contour();\n   ..\n   44    let pl1 = [new Point(0, 0), new Point(40, 0), new Point(40, 20), new Point(0, 20)];\n   45    let pl2 = pl1.map(({ x, y }) => new Point(x + 100, y + 50));\n   46:   console.log('pl1:', pl1);\n   47:   console.log('pl2:', pl2);\n   48  \n   49    for(let point of pl1) ct1.push(point);\n\n/home/roman/Projects/plot-cv/list-exports2.js:\n   42          false,\n   43          (v, r, o) => {\n   44:           console.log(`Usage: ${Util.getArgs()[0]} [OPTIONS]\\n`);\n   45:           console.log(o.map(([name, [arg, fn, ch]]) => `  --${(name + ', -' + ch).padEnd(20)}`).join('\\n'));\n   46            Util.exit(0);\n   47          },\n   ..\n   89  } finally {\n   90    if(error) {\n   91:     console.log(\n   92        `FAIL: ${Util.className(error)} ${error.message}`,\n   93        `\\n  ` +\n   ..\n   99            .join('\\n')\n  100      );\n  101:     console.log('FAIL');\n  102      Util.exit(1);\n  103    } else {\n  104:     console.log('SUCCESS');\n  105    }\n  106  }\n  ...\n  109    let data, b, ret, parser;\n  110    const { debug } = params;\n  111:   console.log(`Processing file '${file}'...`);\n  112    if(file == '-') file = '/dev/stdin';\n  113    if(file && fs.existsSync(file)) {\n  ...\n  133    parser.addCommentsToNodes(ast);\n  134    params['output-ast'] ??= path.basename(file) + '.ast.json';\n  135:   console.log('output-ast', params['output-ast']);\n  136    WriteFile(params['output-ast'], JSON.stringify(ast, null, 2));\n  137    let node2path = new WeakMap();\n  ...\n  157    }\n  158    if(err) {\n  159:     console.log(parser.lexer.currentLine());\n  160:     console.log(Util.className(err) + ': ' + (err.msg || err) + '\\n' + err.stack);\n  161    }\n  162    let t = [];\n  163    if(globalThis.parser) {\n  164      lexer = globalThis.parser.lexer;\n  165:     console.log(globalThis.parser.trace());\n  166    }\n  167    if(fail) {\n  168:     console.log('\\nERR:', err.msg, '\\n', parser.lexer.currentLine());\n  169    }\n  170    return !fail;\n  ...\n  229      let firstId = idList[0];\n  230      entries = entries.filter(([n, p]) => p.indexOf('init') == -1);\n  231:     console.log(\n  232        'entries',\n  233        entries.map(([n, p]) => [p.join('.'), NodeType(deep.get(node, [...p].slice(0, -1))), n.type, n.name, p.length])\n  ...\n  240      ]);\n  241      id = entries.map(e => e[0]);\n  242:     console.log('node.type', node.type);\n  243    }\n  244    if(!id) {\n  ...\n  259          500\n  260        );\n  261:     console.log(message);\n  262      let e = new Error(message);\n  263      throw e;\n\n/home/roman/Projects/plot-cv/test-spawn.js:\n    9  \n   10  async function main(...args) {\n   11:   console.log('main(', ...args, ')');\n   12    await ConsoleSetup({ breakLength: 80, depth: Infinity });\n   13    await PortableFileSystem(fs => (filesystem = fs));\n   14    spawn = await PortableSpawn();\n   15: \n   16:   console.log('spawn:', spawn);\n   17  \n   18    let child = spawn(['ls', '-la' /*, 'CMakeLists.txt'*/]);\n   19: \n   20:   console.log('test:', 234);\n   21:   console.log('child:', inspect(child));\n   22:   console.log('child.wait():', await child.wait());\n   23    const bufSize = 100;\n   24    let ab = new ArrayBuffer(bufSize);\n   ..\n   27    while((r = await child.stdout.read(ab, 0, bufSize))) {\n   28      if(!(r > 0 && r == bufSize)) console.log('r:', r);\n   29:     console.log('data:', Util.escape(ArrayBufToString(ab, 0, r)));\n   30    }\n   31  }\n\n/home/roman/Projects/plot-cv/test-debug.js:\n   15    // initialize first\n   16    let v = await client.variables({ variablesReference: 0 });\n   17: \n   18:   console.log('variables:', v);\n   19  \n   20    // tell the debug adapter to attach to a debuggee which is already running somewhere\n\n/home/roman/Projects/plot-cv/discogs-shipping-policies.js:\n   17    fn = e => {\n   18      const { type } = e;\n   19:     console.log(type, e);\n   20      let price = getPrice();\n   21      if(price) console.log('price', price.toFixed(22));\n\n/home/roman/Projects/plot-cv/dump-structs.js:\n   33  \n   34  async function main(...args) {\n   35:   console.log('dump-structs', ...args);\n   36    await ConsoleSetup({ breakLength: 120, depth: 10 });\n   37    await PortableFileSystem(fs => (filesystem = fs));\n   ..\n   53      args\n   54    );\n   55:   console.log('main', params);\n   56  \n   57    let defs = params.define || [];\n   ..\n   84      ]);\n   85    }\n   86:   console.log('args', { defs, includes });\n   87    args = args.concat(defs.map(d => `-D${d}`));\n   88    args = args.concat(includes.map(v => `-I${v}`));\n   ..\n   92    async function processFiles(...files) {\n   93      for(let file of files) {\n   94:       console.log('Processing file:', file);\n   95        let json, ast;\n   96        let outfile = path.basename(file, /\\.[^./]*$/) + '.ast.json';\n   ..\n  101  \n  102        if(times[1] >= times[0]) {\n  103:         console.log('Reading cached AST from:', outfile);\n  104          json = filesystem.readFile(outfile);\n  105          ast = JSON.parse(json);\n  ...\n  180            let nodeTypes = [...nodes].map(([p, n]) => n.kind);\n  181            let hist = Util.histogram(nodeTypes, new Map());\n  182:           console.log('histogram:', new Map([...hist].sort((a, b) => a[1] - b[1])));\n  183  \n  184            let offsetNodes = mainNodes.filter(([p, n]) => 'offset' in n);\n  ...\n  216                l.toString()\n  217              ]);\n  218:           console.log('loc ∩ name:', loc_name.length);\n  219            let idNodes = new Map(\n  220              [...tree.filter(node => typeof node.id == 'string' && node.id.startsWith('0x'))]\n  ...\n  224                .map(([p, n]) => [n.id, n])\n  225            );\n  226: \n  227:           console.log(\n  228              'names:',\n  229              decls\n  ...\n  332            .filter(([n, [t, p]]) => p.endsWith('int'))\n  333         );\n  334: \n  335:       console.log('paramDeclarations:', paramDeclarations);*/\n  336  \n  337            /*let scalars = new Map(decls\n  ...\n  340            .map(t => [t + '', t.pointer])\n  341        );\n  342:       console.log('scalars:', scalars);*/\n  343  \n  344            let structs = new Map(\n  ...\n  534              ...tree.filter((node, path) => typeof node.id == 'string' && recordIds.indexOf(node.id) != -1)\n  535            ].map(([p, n]) => [p, getId(n.id, n).map(([p, n]) => p /*.join('.')*/), n]);\n  536: \n  537:           console.log('number of nodes:', nodes.size);\n  538:           console.log('nodes with offset:', offsetNodes.length);\n  539:           console.log('nodes with offset and no line:', offsetNodes.filter(([p, n]) => !('line' in n)).length);\n  540:           console.log('nodes with offset and no file:', offsetNodes.filter(([p, n]) => !('file' in n)).length);\n  541:           console.log('nodes with name:', namedNodes.length);\n  542            function BasePathIndex(path) {\n  543              return path.findIndex(k => !(k == 'inner' || Util.isNumeric(k)));\n  ...\n  625  \n  626    let result = await Compile(file);\n  627: \n  628:   console.log('InspectStruct', { file, result });\n  629    return result;\n  630  }\n\n/home/roman/Projects/plot-cv/myworker.js:\n   28        .filter(([k, v]) => !isNaN(v))\n   29    );\n   30:   console.log('LoadConfig:', configObj);\n   31    return configObj;\n   32  }\n   ..\n   34  function HandleMessage(e) {\n   35    var ev = e.data;\n   36:   console.log('worker HandleMessage', ev);\n   37    switch (ev.type) {\n   38      case 'abort':\n   ..\n   54      compact: 2\n   55    });\n   56: \n   57:   console.log('worker worker_main', parent);\n   58    print('worker worker_main');\n   59    /* let { frameShow = 1, ...config } = LoadConfig();\n\n/home/roman/Projects/plot-cv/test-ecmascript2.js:\n   51    if(data != '') {\n   52      fs.writeFileSync(name, data + '\\n');\n   53:     console.log(`Wrote ${name}: ${data.length} bytes`);\n   54    }\n   55  }\n   ..\n   81          false,\n   82          (v, r, o) => {\n   83:           console.log(`Usage: ${Util.getArgs()[0]} [OPTIONS]\\n`);\n   84:           console.log(o.map(([name, [arg, fn, ch]]) => ('  --' + name + ', -' + ch).padEnd(20)).join('\\n'));\n   85            Util.exit(0);\n   86          },\n   ..\n  124      } catch(error) {\n  125        if(error) {\n  126:         console.log('ERROR:', error?.message);\n  127:         console.log(\n  128            'STACK:\\n  ' + new Stack(error?.stack, fr => fr.functionName != 'esfactory').toString().replace(/\\n/g, '\\n  ')\n  129          );\n  130        } else {\n  131:         console.log('ERROR:', error);\n  132        }\n  133        if(error !== null) throw error;\n  ...\n  142        break;\n  143      }\n  144: \n  145:     console.log('files:', files);\n  146    }\n  147    let success = Object.entries(files).filter(([k, v]) => !!v).length != 0;\n  ...\n  155    if(file && fs.existsSync(file)) {\n  156      data = fs.readFileSync(file, 'utf8');\n  157:     console.log('opened:', file);\n  158    } else {\n  159      file = 'stdin';\n  160      data = source;\n  161    }\n  162:   console.log('OK, data: ', Util.abbreviate(Util.escape(data)));\n  163    if(debug) ECMAScriptParser.instrumentate();\n  164:   console.log('ECMAScriptParser:', ECMAScriptParser);\n  165  \n  166    let ast, error;\n  ...\n  177        tokens.slice(-3).map(tok => [tok, new Stack(tok.stack.slice(0, 3)) + ''])\n  178      );*/\n  179:     console.log('parseProgram token', token);\n  180      /*\n  181      if(token)   console.log('parseProgram token.stack\\n  ' + token.stack.toString().replace(/\\n/g, '\\n  '));\n  182:       console.log('parseProgram loc', token.loc + '');\n  183:     console.log('parseProgram stateStack', parser.lexer.stateStack);\n  184:      console.log('parseProgram parser.stack', parser.stack.map(({frame,...entry}) =>  [entry,frame?.loc]));*/\n  185  \n  186      if(err !== null) {\n  187:       console.log('parseProgram ERROR message:', err?.message);\n  188:       console.log(\n  189          'parseProgram ERROR stack:\\n  ' +\n  190            new Stack(err?.stack, (fr, i) => fr.functionName != 'esfactory' && i < 5).toString().replace(/\\n/g, '\\n  ')\n  ...\n  193        throw err;\n  194      } else {\n  195:       console.log('parseProgram ERROR:', err);\n  196        throw new Error('parseProgram');\n  197      }\n  ...\n  200    //console.log('Parsed: ', ast);\n  201    /* parser.assoc(ast);\n  202:   console.log('parser.assocMap: ', console.config({depth: 0 }), [...parser.assoc.map.keys()]);*/\n  203  \n  204    /*  deep.forEach(ast,\n  ...\n  266  \n  267    if(err) {\n  268:     console.log(parser.lexer.currentLine());\n  269:     console.log(Util.className(err) + ': ' + (err.msg || err) + '\\n' + err.stack);\n  270    }\n  271  \n  272    lexer = parser.lexer;\n  273    let t = [];\n  274:   console.log(parser.trace());\n  275    WriteFile('trace.log', parser.trace());\n  276    if(fail) {\n  277:     console.log('\\nerror:', err.msg, '\\n', parser.lexer.currentLine());\n  278    }\n  279:   console.log('finish: ' + (fail ? 'error' : 'success'));\n  280    return !fail;\n  281  }\n  ...\n  289  } finally {\n  290    if(error) {\n  291:     console.log(\n  292        'FAIL: ' + error.message,\n  293        '\\n  ' + new Stack(error.stack, fr => fr.functionName != 'esfactory').toString().replace(/\\n/g, '\\n  ')\n  294      );\n  295:     console.log('FAIL');\n  296      Util.exit(1);\n  297    } else {\n  298:     console.log('SUCCESS');\n  299    }\n  300  }\n\n/home/roman/Projects/plot-cv/eagle-worker.js:\n    4      const { serviceWorker } = navigator;\n    5      window.sw = serviceWorker;\n    6:     console.log('register service worker', serviceWorker);\n    7      let result = await serviceWorker.register(script);\n    8:     console.log('Service Worker Registered', serviceWorker);\n    9      const { controller } = serviceWorker;\n   10:     console.log('Service Worker controller', controller);\n   11      window.swc = controller;\n   12      controller.addEventListener('message', event => {\n   13:       console.debug('index.html MESSAGE:', event.data);\n   14      });\n   15:     console.log('controller.postMessage', controller.postMessage);\n   16      const messageChannel = new MessageChannel();\n   17      controller.postMessage(\n   ..\n   22      );\n   23      messageChannel.port1.onmessage = event => {\n   24:       console.log('Message from serviceWorker:', event.data);\n   25      };\n   26      controller.postMessage({\n   ..\n   28      });\n   29      let registration = await serviceWorker.ready;\n   30:     console.log('Service Worker ready', registration);\n   31    });\n   32  }\n\n/home/roman/Projects/plot-cv/palette.js:\n   53      0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 3, 3, 3, 3, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0\n   54    ]);*/\n   55: \n   56:   console.log('image:', image);\n   57  \n   58    // make image textures and upload image\n   ..\n  105    function makeImage(fn) {\n  106      if(typeof fn == 'string') fn = new Function('x', 'y', `return ${fn}`);\n  107:     console.log('fn:', fn);\n  108      let i = 0;\n  109      let a = new Uint8Array(width * height);\n\n/home/roman/Projects/plot-cv/debugger.js:\n   11  import { toString as ArrayBufferToString, toArrayBuffer as StringToArrayBuffer } from './lib/misc.js';\n   12  import { DebuggerProtocol } from './debuggerprotocol.js';\n   13: \n   14: console.log(\n   15    'toString',\n   16    ArrayBufferToString(new Uint8Array([0x61, 0x62, 0x64, 0x65, 0x66, 0x20, 0xc3, 0xa4, 0xc3, 0xb6, 0xc3, 0xbc]).buffer)\n   17  );\n   18: console.log('toArrayBuffer', StringToArrayBuffer('blah äöü'));\n   19: console.log('child_process', child_process.spawn + '');\n   20  \n   21  var worker;\n   ..\n   42    return { stdio: [undefined, pipe[0], pipe[0]], pid };\n   43    //const { pid, stdio } = child;\n   44: \n   45:   console.log('StartDebugger', child);\n   46    return child;\n   47  }\n   ..\n   49  export function ConnectDebugger(address, callback) {\n   50    let addr = new SockAddr(AF_INET, ...address.split(':'));\n   51:   console.log('ConnectDebugger', addr);\n   52    let sock = new AsyncSocket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n   53    let ret = sock.connect(addr);\n   ..\n   55    if(ret >= 0) {\n   56      sock.ndelay(true);\n   57:     console.log('Connected', +sock, 'to', sock.remote);\n   58      sockets.add(sock);\n   59:     console.log('sockets', sockets);\n   60    }\n   61  \n   ..\n   67        if(dbg) {\n   68          let r = dbg.read();\n   69:       console.log('readable', { fd: +sock, r });\n   70          if(r <= 0) {\n   71            os.setReadHandler(+sock, null);\n   72:           console.log('read() =', r, sock.error, callback + '');\n   73            callback(dbg, sock);\n   74          }\n   ..\n   78  */\n   79    //  if(ret < 0) throw new Error(`Connection failed: ${sock.error}`);\n   80:   console.log('ConnectDebugger', sock);\n   81  \n   82    return sock;\n   ..\n   89      prefix: '\\x1b[38;5;220mPARENT\\x1b[0m'\n   90    });\n   91:   console.log('scriptArgs', scriptArgs);\n   92    worker = new os.Worker('./ws-worker.js');\n   93    counter = 0;\n   94    worker.onmessage = WorkerMessage;\n   95:   console.log('TestWorker', worker.onmessage);\n   96    os.setReadHandler(0, () => {\n   97      let line = process.stdin.getline();\n   ..\n  102  let sock, connection;\n  103  function WorkerMessage(e) {\n  104:   console.log('WorkerMessage', e);\n  105    var ev = e.data;\n  106    const { message, id } = ev;\n  ...\n  109        switch (message.type) {\n  110          case 'start': {\n  111:           console.log('START', message.start);\n  112            const { args, connect, address } = message.start;\n  113            let child = StartDebugger(args, connect, address);\n  ...\n  117          }\n  118          default: {\n  119:           console.log('From WORKER', ev);\n  120            connection.sendMessage(message);\n  121            break;\n\n/home/roman/Projects/plot-cv/test-geda-netlist.js:\n   17  \n   18    filesystem.writeFile(name, data + '\\n');\n   19: \n   20:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   21  }\n   22  \n   ..\n   69      components = Object.fromEntries(cleanArray(components).map(([name, ...rest]) => [name, rest]));\n   70      nets = Object.fromEntries(cleanArray(nets).map(([name, ...rest]) => [name, rest]));\n   71:     console.log('nets:', nets);\n   72:     console.log('components:', components);\n   73  \n   74      let output = { components, nets };\n\n/home/roman/Projects/plot-cv/eagle-commands.js:\n   44    let measures = board.getMeasures();\n   45    if(measures) {\n   46:     console.log('got measures:', measures);\n   47    } else {\n   48      let rect = new Rect(bounds.rect);\n   ..\n   61  \n   62  export function AlignItem(item) {\n   63:   console.debug('AlignItem', item);\n   64    let geometry = item.geometry;\n   65    let oldPos = geometry.clone();\n   ..\n   70    let changed = !diff.isNull();\n   71    if(changed) {\n   72:     console.log('before:', Util.abbreviate(before));\n   73:     console.log('after:', Util.abbreviate(item.parentNode.toXML()));\n   74:     console.log('align\\n', item.xpath(), '\\n newPos:', newPos, '\\n diff:', diff, '\\n attr:', item.raw.attributes);\n   75    }\n   76    return changed;\n\n/home/roman/Projects/plot-cv/debugger-client.js:\n   36  window.addEventListener('load', e => {\n   37    url = Util.parseURL();\n   38:   console.log('URL', url);\n   39    let socketURL = Util.makeURL({\n   40      location: url.location + '/ws',\n   ..\n   44    (async () => {\n   45      globalThis.ws = await CreateSocket(socketURL);\n   46:     console.log(`Loaded`, { socketURL, ws });\n   47    })();\n   48  });\n   ..\n   82      lines = [...tokens];\n   83    } catch(e) {\n   84:     console.log('Error tokenizing:', e.message);\n   85    }\n   86  \n   ..\n  107  \n  108  const SourceFile = props => {\n  109:   console.log('props.file', currentSource());\n  110    const file = useTrkl(currentSource);\n  111:   console.log('file', file);\n  112    const filename = file ? path.relative(cwd, file, cwd) : null;\n  113    let text =\n  ...\n  115        !/^<.*>$/.test(file) &&\n  116        useFetch(filename, resp => {\n  117:         console.log('Fetch', resp.status, Util.makeURL({ location: '/' + filename }));\n  118          return resp.text();\n  119        })) ||\n  ...\n  156  function Initiate(command, address, connect = false, args) {\n  157    address ??= `${url.query.address ?? '127.0.0.1'}:${url.query.port ?? 9901}`;\n  158:   console.log('Initiate', { command, address, connect, args });\n  159    return ws.send(JSON.stringify({ command, connect, address, args }));\n  160  }\n  ...\n  226  async function CreateSocket(endpoint) {\n  227    let ws = (globalThis.ws = new WebSocketClient());\n  228: \n  229:   console.log('ws', ws);\n  230    await ws.connect(endpoint);\n  231  \n  ...\n  236          data = JSON.parse(msg.data);\n  237        } catch(e) {\n  238:         console.log('WS ERROR parsing', msg.data);\n  239        }\n  240        globalThis.response = data;\n  241        if(data) {\n  242:         console.log('ws received ', data);\n  243          const { response, request_seq } = data;\n  244          if(response) {\n  ...\n  253            if(['start', 'connect'].indexOf(command) >= 0) {\n  254              cwd = response.cwd;\n  255: \n  256:             console.log('command:', command);\n  257:             console.log('response:', response);\n  258  \n  259              if(response.args[0]) {\n  ...\n  268            if(command == 'start') {\n  269              cwd = response.cwd;\n  270:             console.log('start', response);\n  271              RenderUI(response.args[0]);\n  272              continue;\n  ...\n  276          if(responses[request_seq]) responses[request_seq](data);\n  277        } else {\n  278:         console.log('WS', data);\n  279        }\n  280        if(['end', 'error'].indexOf(data.type) >= 0) {\n  ...\n  301  async function UpdatePosition() {\n  302    const stack = (globalThis.stack = await StackTrace());\n  303:   console.log('stack', stack);\n  304  \n  305    const { filename, line, name } = stack[0];\n  ...\n  367  /*const Button = ({image}) => {\n  368  const ref = useClick(e => {\n  369:   console.log('click!!!!');\n  370  });\n  371   return  h('button', { ref, class: 'button' }, h('img', { src: image }));\n  ...\n  377  \n  378  function RenderUI() {\n  379:   console.log('RenderUI');\n  380    /* if(currentSource() != file) \n  381      currentSource(file);*/\n  ...\n  403    const { body } = document;\n  404    let r = render(component, body);\n  405:   console.log('rendered', r);\n  406  }\n  407  \n\n/home/roman/Projects/plot-cv/test-dom.js:\n   63        let p = new dom.Parser();\n   64        globalThis.doc = p.parseFromString(r);\n   65:       console.log(`Loaded '${name}':`, dom.Node.raw(globalThis.doc));\n   66      }))('data/LeoStick.brd');\n   67  \n\n/home/roman/Projects/plot-cv/test-tmtheme.js:\n   16  \n   17    filesystem.writeFile(name, data + '\\n');\n   18: \n   19:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   20  }\n   21  \n   ..\n  168      }\n  169      default: {\n  170:       console.error({ object, path });\n  171        throw new Error(`Unhandled type: ${type} ${path}`);\n  172      }\n  ...\n  182  \n  183      let data = filesystem.readFile(file);\n  184:     console.log('data:', data);\n  185      let xml = parse(data);\n  186  \n  ...\n  205      //    console.log('array:', array);\n  206      //  console.log('xml:', xml);\n  207:     console.log('file:', file);\n  208      let st = new Tree(objs);\n  209      let pairs = st.flat(([, node]) => isObject(node) && node instanceof Pair);\n  ...\n  240        .filter(s => !/(^col_|^-$|^\\s*$)/.test(s) && !/^\\s*$/.test(s))\n  241        .sort();\n  242:     console.log('scopes:', scopes);\n  243      WriteFile(`scopes-${base}.txt`, scopes.join('\\n'));\n  244    }\n\n/home/roman/Projects/plot-cv/test-eagle.js:\n   98  \n   99    if(measures) {\n  100:     console.log('got measures:', measures);\n  101    } else {\n  102      let rect = new Rect(bounds.rect);\n  ...\n  118  \n  119  function AlignItem(item) {\n  120:   console.debug('AlignItem', item);\n  121    let geometry = item.geometry;\n  122    let oldPos = geometry.clone();\n  ...\n  137  \n  138    if(changed) {\n  139:     console.log('before:', Util.abbreviate(before));\n  140:     console.log('after:', Util.abbreviate(item.parentNode.toXML()));\n  141      //console.log('geometry:', geometry);\n  142      // console.log('align\\n', item.xpath(), '\\n newPos:', newPos, '\\n diff:', diff, '\\n attr:', item.raw.attributes );\n  ...\n  158  \n  159  async function testEagle(filename) {\n  160:   console.log('testEagle: ', filesystem);\n  161    let proj = new EagleProject(filename, filesystem);\n  162  \n  ...\n  168      }\n  169    );*/\n  170:   console.log('Project loaded: ', !proj.failed);\n  171:   console.log('Project: ', proj);\n  172  \n  173    //if(proj.failed) return false;\n  174  \n  175    //console.log('failed  :', failed);\n  176:   console.log('proj.documents', proj.documents);\n  177  \n  178    let { board, schematic } = proj;\n  ...\n  212    /*  for(let description of board.getAll('description')) {\n  213    }*/\n  214:   console.log('proj.board', proj.board);\n  215    if(proj.board) UpdateMeasures(proj.board);\n  216  \n  217    if(AlignAll(board) || AlignAll(schematic)) console.log('Saved:', await proj.saveTo('tmp', true));\n  218: \n  219:   console.log('saved:', await proj.saveTo('tmp', true));\n  220  \n  221    //for(let sheet of board.get('sheet'))\n  ...\n  232  */\n  233    let documents = [board, schematic].filter(d => d);\n  234:   console.log('documents', documents);\n  235  \n  236    for(let doc of documents) {\n  237      let changed = false;\n  238:     console.log('eagle:', Util.className(doc.find('eagle')));\n  239  \n  240      for(let pkg of doc.find('eagle').getAll('package')) {\n  ...\n  251  \n  252        //console.log(\"pkg.children\", pkg.children.toXML());\n  253:       console.log('indexes', pkg.name, paths);\n  254  \n  255        //console.log('remove', paths.map(i => deep.get(doc.raw, [...i])));\n  ...\n  262      if(changed) {\n  263        doc.saveTo(doc.filename);\n  264:       console.log('Saved:', doc.filename);\n  265      }\n  266    }\n  267  \n  268    let desc = documents.map(doc => [doc.filename, doc.find('description')]);\n  269:   console.log('desc', desc);\n  270  \n  271    desc = desc\n  ...\n  273      .map(([file, xpath]) => [file, xpath && xpath.toCode('', { spacing: '', function: true })]);\n  274    desc = new Map(desc);\n  275:   console.log('descriptions', [...Util.map(desc, ([k, v]) => [k, v])]);\n  276  \n  277    return proj;\n  ...\n  285        let project = await testEagle(arg);\n  286      } catch(err) {\n  287:       console.log('Err:', err.message, typeof err.stack == 'string' ? err.stack : [...err.stack].map(f => f + ''));\n  288        Util.exit(1);\n  289      }\n\n/home/roman/Projects/plot-cv/test-filesystem.js:\n  124    'filesystem.mkdtemp': () => {\n  125      let tmp = filesystem.mkdtemp('/tmp/aaaa');\n  126:     console.log('tmp:', tmp);\n  127      assert(filesystem.exists(tmp));\n  128      assert(filesystem.stat(tmp).isDirectory());\n  ...\n  148    await PortableFileSystem(fs => (filesystem = fs));\n  149    //  globalThis.console = {};\n  150: \n  151:   console.log('Console:', Object.getPrototypeOf(console));\n  152:   console.log('log:', Object.getPrototypeOf(console).log);\n  153: \n  154:   console.log(\n  155      'ARGS:',\n  156      new Map([\n  ...\n  163    TinyTest.run(Util.filter(tests, t => t));\n  164    return;\n  165:   console.log(\n  166      Util.getMethodNames(filesystem)\n  167        .map(n => `  'filesystem.${n}': null,`)\n\n/home/roman/Projects/plot-cv/react-simple-code-editor.js:\n  452        paddingLeft: padding\n  453      };\n  454:     console.log('highlight', highlight);\n  455      const highlighted = highlight(value);\n  456      return h(\n\n/home/roman/Projects/plot-cv/eagle2svg.js:\n   48      str = renderToString(svg);\n   49    } catch(e) {\n   50:     console.log('ERROR:', e);\n   51:     console.log('STACK:', e.stack);\n   52    }\n   53:   console.log('renderer.palette', renderer.palette);\n   54  \n   55    let xml = fromXML(str);\n   ..\n   64      let ret;\n   65      ret = WriteFile(filename, toXML(xml));\n   66:     console.log(`Saving to '${filename}'...`, ret);\n   67    }\n   68    return str;\n   ..\n   73      inspectOptions: { maxArrayLength: 100, colors: true, depth: Infinity, compact: 1, customInspect: true }\n   74    });\n   75:   console.log('args', args);\n   76  \n   77    let params = getOpt(\n   ..\n   85    for(let arg of args) {\n   86      let doc = EagleDocument.open(arg, { readFileSync });\n   87: \n   88:     console.log('doc', doc);\n   89  \n   90      render(doc);\n   ..\n   95    main(...scriptArgs.slice(1));\n   96  } catch(error) {\n   97:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   98    std.exit(1);\n   99  }\n\n/home/roman/Projects/plot-cv/test-shparse.js:\n   16  \n   17    filesystem.writeFile(name, data + '\\n');\n   18: \n   19:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   20  }\n   21  \n   ..\n   24    await PortableFileSystem();\n   25    await PortableSpawn();\n   26: \n   27:   console.options = {\n   28      ...consoleOpts,\n   29      depth: 3,\n   ..\n   36    let base = path.basename(file, ext);\n   37    let input = '';\n   38: \n   39:   console.log('ext:', ext);\n   40:   console.log('base:', base);\n   41  \n   42    switch (ext) {\n   ..\n   48          //  stdout: os.open(base + '.json', os.O_WRONLY | os.O_CREAT | os.O_TRUNC)\n   49        });\n   50:       console.log('cmd:', cmd.join(' '));\n   51  \n   52        input = await filesystem.readFile(base + '.json', 'utf-8');\n   ..\n   63  \n   64    let json = JSON.parse(input);\n   65: \n   66:   console.log('json:', json);\n   67  }\n   68  \n\n/home/roman/Projects/plot-cv/takephoto.js:\n   19  \n   20      if(cam.capturePhoto(image)) {\n   21:       console.log('Camera error');\n   22      }\n   23      //cv.imshow('Image', image);\n   24      cv.imwrite('photo.png', image);\n   25:     console.log(`Saved as 'photo.png'.`);\n   26      //cv.waitKey(30);\n   27    }\n\n/home/roman/Projects/plot-cv/test-ini.js:\n   17  \n   18    filesystem.writeFile(name, data + '\\n');\n   19: \n   20:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   21  }\n   22  \n   ..\n   42  \n   43      let sections = data[0].reduce((acc, sdata) => {\n   44:       console.log('sdata:', sdata);\n   45        return { ...acc, [sdata[0]]: createMap(sdata[1] || []) };\n   46      }, {});\n   ..\n   52        (k, v) => [k.slice(1), v]\n   53      );\n   54:     console.log('flat:', flat);\n   55      if(sections['Desktop Entry']) {\n   56        const desktopEntry = sections['Desktop Entry'];\n   57  \n   58        /*  const { Exec, Icon, Terminal, Type, Name, GenericName, StartupNotify } = desktopEntry;\n   59: \n   60:       console.log(\"Desktop Entry:\",  { Exec, Icon, Terminal, Type, Name, GenericName, StartupNotify });*/\n   61        //     let r = Rect.bind(new Rect(), { x: () => pos.x, y: () => pos.y, width: () => size.width, height: () => size.height });\n   62        const lnkFile = '/home/roman/mnt/lexy/.idesktop/' + path.basename(filename, '.desktop') + '.lnk';\n   ..\n   64        const svgFile = '/home/roman/mnt/ubuntu/' + desktopEntry.Icon.replace(/\\.[a-z]*$/, '') + '.svg';\n   65        const iconFile = '/home/lexy/.logos/' + path.basename(svgFile, '.svg') + '.png';\n   66:       console.log(' :', { svgFile, iconFile });\n   67        let svgData = tXml(filesystem.readFile(svgFile));\n   68  \n   ..\n   88        });\n   89        WriteFile(svgFile, toXML(svgData));\n   90: \n   91:       console.log(' :', {\n   92          attr,\n   93          svgFile,\n   ..\n  111        const ideskEntry = makeIDeskEntry({ ...desktopEntry, Icon: iconFile });\n  112        WriteFile(lnkFile, ideskEntry);\n  113:       console.log(`Wrote '${lnkFile}'.`);\n  114:       console.log(`ideskEntry: `, ideskEntry);\n  115:       console.log(`pos:`, xy);\n  116  \n  117        xy.x += size.width + spacing;\n\n/home/roman/Projects/plot-cv/test-clexer.js:\n   14    await ConsoleSetup(consoleOpts);\n   15    await PortableFileSystem();\n   16:   console.options = consoleOpts;\n   17  \n   18    let code = filesystem.readFile(args[0] ?? 'pa_devs.c', 'utf-8');\n   19:   console.log(Util.abbreviate(code));\n   20    let i = 0;\n   21  \n   22    for await(let token of tokenize(code)) {\n   23:     console.log(`token #${i}`, token);\n   24      i++;\n   25    }\n\n/home/roman/Projects/plot-cv/fontsample.js:\n   28      }\n   29    }\n   30:   console.log('a', a);\n   31    fs.writeFileSync('output.txt', s);\n   32    // fs.writeFileSync('output.txt', a.buffer);\n\n/home/roman/Projects/plot-cv/test-ecmascript3.js:\n   22    if(data != '') {\n   23      fs.writeFile(name, data + '\\n');\n   24:     console.log(`Wrote${name}${data.length}bytes`);\n   25    }\n   26  }\n   ..\n   45          false,\n   46          (v, r, o) => {\n   47:           console.log(`Usage:${Util.getArgs()[0]}[OPTIONS]\\n`);\n   48:           console.log(o.map(([name, [arg, fn, ch]]) => `  -${(name + ', -' + ch).padEnd(20)}`).join('\\n'));\n   49            Util.exit(0);\n   50          },\n   ..\n   56      args\n   57    );\n   58:   console.log(`Platform:${Util.getPlatform()}`);\n   59    if(Util.getPlatform() == 'quickjs') {\n   60      await import('os').then(os => {\n   61:       console.log('os:', os);\n   62        os.signal(os.SIGINT, () => {\n   63:         console.log(`Got SIGINT. ${os.SIGINT}`);\n   64          Util.putStack();\n   65          Util.exit(1);\n   66        });\n   67:       console.log(`SIGINT ${os.SIGINT} handler installed`);\n   68      });\n   69    }\n   ..\n   77      )\n   78    });\n   79:   console.log('params', params);\n   80    const time = () => Date.now() / 1000;\n   81    if(params['@'].length == 0) params['@'].push(null);\n   ..\n   89        await processing();\n   90      } catch(err) {\n   91:       console.log('ERROR:', err);\n   92        if(err) {\n   93:         console.log('ERROR:', err.message);\n   94:         console.log('ERROR:', err.stack);\n   95        }\n   96      }\n   ..\n  102        break;\n  103      }\n  104:     console.log('files:', files);\n  105    }\n  106    let success = Object.entries(files).filter(([k, v]) => !!v).length != 0;\n  ...\n  117      data = source;\n  118    }\n  119:   console.log('OK, data: ', Util.abbreviate(Util.escape(data)));\n  120    let ast, error;\n  121    globalThis.parser = null;\n  ...\n  124      ast = parser.parseProgram();\n  125    } catch(err) {\n  126:     console.log('parseProgram token', parser.token);\n  127:     console.log('parseProgram loc', parser.lexer.loc + '');\n  128:     console.log('parseProgram ERROR:', err);\n  129      if(isObject(err)) {\n  130:       console.log('parseProgram ERROR message:', err.message);\n  131:       console.log('parseProgram ERROR stack:', err.stack);\n  132      }\n  133    }\n  134:   console.log('Parsed: ', ast);\n  135    parser.addCommentsToNodes(ast);\n  136    let node2path = new WeakMap();\n  ...\n  163        .map(([path, node]) => (isRequire(node) || true ? path.slice(0, 2) : path))\n  164        .map(path => [path, deep.get(ast, path)]);\n  165:     console.log('imports:', new Map(imports.map(([path, node]) => [ESNode.assoc(node).position, node])));\n  166:     console.log('importStatements:', importStatements);\n  167      const importedFiles = imports.map(([pos, node]) => Identifier.string(node.source || node.arguments[0]));\n  168:     console.log('importedFiles:', importedFiles);\n  169      let importIdentifiers = importStatements\n  170        .map(([p, n]) => [p, n.identifiers ? n.identifiers : n])\n  171        .map(([p, n]) => [p, n.declarations ? n.declarations : n]);\n  172:     console.log('importIdentifiers:', importIdentifiers);\n  173:     console.log('importIdentifiers:', unique(importIdentifiers.flat()).join(', '));\n  174    }\n  175    const templates = [...flat].filter(([path, node]) => node instanceof TemplateLiteral);\n  ...\n  184    }\n  185    if(err) {\n  186:     console.log(parser.lexer.currentLine());\n  187:     console.log(Util.className(err) + ': ' + (err.msg || err) + '\\n' + err.stack);\n  188    }\n  189    let lexer = parser.lexer;\n  190    let t = [];\n  191:   console.log(parser.trace());\n  192    WriteFile('trace.log', parser.trace());\n  193    if(fail) {\n  194:     console.log('\\nerror:', err.msg, '\\n', parser.lexer.currentLine());\n  195    }\n  196:   console.log('finish: ' + (fail ? 'error' : 'success'));\n  197    return !fail;\n  198  }\n  ...\n  200    .then(() => console.log('SUCCESS'))\n  201    .catch(error => {\n  202:     console.log(`FAIL:${error.message}${error.stack}`);\n  203      Util.exit(1);\n  204    });\n\n/home/roman/Projects/plot-cv/test-repeater.js:\n   25    (async function() {\n   26      let pushEvent, stopEvent;\n   27:     console.log('Repeater', Repeater);\n   28:     console.log('waitFor', waitFor);\n   29  \n   30      // await waitFor(0);\n   31:     console.log('setTimeout', globalThis.setTimeout);\n   32:     console.log('clearTimeout', globalThis.clearTimeout);\n   33  \n   34      let a = new Repeater(async (push, stop) => {\n   ..\n   56      let loop = (async () => {\n   57        for await(let value of repeat) {\n   58:         console.log('value:', value);\n   59        }\n   60:       console.log('stopped');\n   61      })();\n   62  \n   ..\n   79        try {\n   80          for await(let tuple of latest) {\n   81:           console.log('tuple:', console.config({ compact: 2 }), tuple);\n   82          }\n   83        } catch(error) {\n   84:         console.log('error:', error);\n   85        }\n   86:       console.log('stopped');\n   87      })();\n   88    })();\n\n/home/roman/Projects/plot-cv/test-renderer.js:\n   18  \n   19    filesystem.writeFile(name, data + '\\n');\n   20: \n   21:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   22  }\n   23  \n   ..\n   30  \n   31    let output = renderer.render(doc, null, 0);\n   32:   console.log('console.log.filters:', console.log.filters);\n   33:   console.log('functionName:', Util.getStackFrame());\n   34  \n   35    let outFile = file.replace(/.*\\//g, '').replace(/\\.[a-z]+$/, '');\n   ..\n   71    for(let filename of args) {\n   72      let r = [await testRenderBoard(filename), await testRenderSchematic(filename)];\n   73:     console.log('r:', r);\n   74    }\n   75: \n   76:   console.log('finished');\n   77  }\n   78  \n\n/home/roman/Projects/plot-cv/test-template.js:\n    1  const name = 'blah';\n    2: console.log(`loading \"${name}\"...`);\n    3  const value = 42;\n    4  const word = `simple`;\n\n/home/roman/Projects/plot-cv/grammar-C.js:\n    5      let r = parser(str, pos);\n    6      if(r[0] || name.startsWith('direct'))\n    7:       console.log('matched (' + name + ') ' + pos + ' - ' + r[2] + \": '\", r[1], \"'\");\n    8      return r;\n    9    };\n\n/home/roman/Projects/plot-cv/test-alea.js:\n    3  \n    4  let rng = new Alea(1337);\n    5: \n    6: console.log(Util.repeat(10, rng));\n    7: console.log(Util.repeat(10, rng.fract53));\n    8: console.log(Util.repeat(10, rng.uint32));\n    9: console.log(Util.repeat(10, rng.int32));\n   10: console.log(Util.repeat(10, rng.signed));\n   11: console.log(Util.repeat(10, rng.color));\n   12  \n\n/home/roman/Projects/plot-cv/fetch-post-prices.js:\n   18    os.close(wr);\n   19    let html = ReadFd(rd);\n   20: \n   21:   console.log('html', html);\n   22  }\n   23  \n\n/home/roman/Projects/plot-cv/test-ffi.js:\n  123    });\n  124    printf('%p %s\\n', 0xdeadbeef00000000, '0xdeadbeef');\n  125: \n  126:   console.log(getpid());\n  127  \n  128    for(let [name, value] of Object.entries(ffi)) console.log(`ffi.${name}:`, value);\n  129:   console.log(`ffi:`, ffi);\n  130    const flagNames = Util.bitsToNames(Util.filterKeys(fcntl, /^O_/));\n  131    let outBuf = new ArrayBuffer(256);\n  ...\n  133    let fd = 1;\n  134    let newState = false;\n  135:   console.log('strdup:', strdup('BLAH').toString(16));\n  136:   console.log('dlsym_(RTLD_DEFAULT, \"strdup\"):', dlsym(RTLD_DEFAULT, 'strdup').toString(16));\n  137:   console.log(\n  138      'snprintf(outBuf, outBuf.byteLength, \"%p\", -1):',\n  139      snprintf(outBuf, outBuf.byteLength, '%p', 0x7fffffffffffffff)\n  140    );\n  141:   console.log('outBuf:', ArrayBufToString(outBuf));\n  142:   console.log('Util.isatty(1):', await Util.isatty(1));\n  143:   console.log('F_GETFL:', toHex((flags = fcntl(fd, F_GETFL, 0))));\n  144  \n  145    if(newState) flags |= O_NONBLOCK;\n  146    else flags &= ~O_NONBLOCK;\n  147: \n  148:   console.log('fcntl:', [...flagNames(flags)]);\n  149:   console.log('ttyGetWinSize:', await Util.ttyGetWinSize(1));\n  150: \n  151:   console.log('F_SETFL:', fcntl(fd, F_SETFL, flags));\n  152:   console.log('F_GETFL:', toHex(fcntl(fd, F_GETFL, 0)));\n  153    let rfds = new ArrayBuffer(1024 / 8);\n  154    let wfds = new ArrayBuffer(1024 / 8);\n  ...\n  167  \n  168    let u8 = new Uint8Array([0x41, 0x42, 0x43, 0x44, 0]);\n  169: \n  170:   console.log('u8.buffer.toPointer().toString():', u8.buffer.toPointer().toString());\n  171    // const ptr = u8.buffer.toPointer();\n  172    const ptr = ffi.toPointer(u8.buffer);\n  173:   console.log('ptr:', ptr);\n  174:   console.log('toString:', ffi.toString(ptr));\n  175: \n  176:   console.log('timeval:', t.slice());\n  177:   console.log('select:', toHex(select(4, rfds, wfds, efds, t)));\n  178:   console.log('toHex:', toHex(1, 8));\n  179:   console.log('toHex:', [...Util.partition(toHex(1, 8), 2)]);\n  180:   console.log('BigUint64Array.BYTES_PER_ELEMENT:', BigUint64Array.BYTES_PER_ELEMENT1);\n  181    let out = new ArrayBuffer(100);\n  182:   console.log('sprintf:', sprintf(out, '%p', rfds));\n  183:   console.log('out:', MakeArray(out, 1).toString());\n  184:   console.log('rfds.toPointer():', rfds.toPointer());\n  185:   console.log('rfds.toPointer():', rfds.toPointer());\n  186:   console.log('BigInt methods:', Util.getMethodNames(BigInt));\n  187:   console.log('BigInt toString(16):', BigInt(1337).toString(16));\n  188  \n  189    const MAP_ANONYMOUS = 0x20;\n  ...\n  192  \n  193    let area = mmap((0x2000000 || 0x7f0000000000) - 8192, 8192, 0x7, 0x02 | MAP_ANONYMOUS, -1, 0);\n  194:   console.log('area:', area.toString(16));\n  195    let fp = dlsym(RTLD_DEFAULT, 'strchr');\n  196:   console.log('fp:', fp.toString(16));\n  197    strcpy(area, '\\x48\\x31\\xc0\\xc3');\n  198    //  strcpy(area+0, '\\x48\\x31\\xc0\\x48\\xff\\xc0\\xc3');\n  ...\n  207      '\\xf3\\x0f\\x1e\\xfa\\x48\\x89\\x07\\x48\\x89\\x5f\\x08\\x48\\x89\\x4f\\x10\\x48\\x89\\x57\\x18\\x48\\x89\\x77\\x20\\x48\\x89\\x7f\\x28\\x48\\x89\\x6f\\x30\\x48\\x89\\x67\\x38\\x48\\x31\\xc0\\x48\\xff\\xc0\\xc3'\n  208    );\n  209:   console.log('writeREGS:', writeREGS.toString(16));\n  210    let ret;\n  211    printf('area: %s\\n', StringToHex(area + 0));\n  ...\n  224  \n  225    /* ret = call('returnRAX', 1, 2);\n  226:   console.log('returnRAX() =', ret);\n  227    ret = call('returnADDR');\n  228:   console.log('returnADDR() =', ret);\n  229  \n  230    ret = call('writeREGS', +toPointer(regs), +toPointer(regs), regs, regs); // setjmp(jb);\n  231:   console.log('writeREGS() =', ret);*/\n  232: \n  233:   console.log('regs =', regs.toString());\n  234    //if(ret != 1337)\n  235    // longjmp(jb, 1337);\n  ...\n  239  \n  240  function toHex(n, b = 2) {\n  241:   console.log('toHex:', n);\n  242  \n  243    let s = (+n).toString(16);\n  ...\n  277      }\n  278    } catch(error) {\n  279:     console.error(`MakeArray(${Util.className(buf)}[${buf.byteLength}], ${numBytes}): ${error.message}`);\n  280    }\n  281  }\n\n/home/roman/Projects/plot-cv/test-features2d.js:\n   21      name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D'\n   22    );\n   23: \n   24:   console.log('cv', features2d_names);\n   25  \n   26    let detectors = {\n   ..\n   52  \n   53    /*let instances=Object.entries(detectors).reduce((acc,[name,ctor]) => ({ ...acc, [name]: new ctor() }), {});\n   54: console.log(\"instances\",instances);*/\n   55    let img = cv.imread('class-ab-amp-schematic.jpg');\n   56  \n   ..\n   59  \n   60      let kp = new cv.KeyPoint();\n   61:     console.log(`kp`, kp);\n   62:     console.log(`kp.hash()`, kp.hash());\n   63      let f2d = new CTOR();\n   64:     console.log(`${name}`, f2d);\n   65:     console.log(`${name}.defaultName`, f2d.defaultName);\n   66:     console.log(`${name}.descriptorSize`, f2d.descriptorSize);\n   67      const { CV_8U, CV_16U, CV_16S, CV_32F, CV_64F } = cv;\n   68:     console.log(`${name}.descriptorType`, f2d.descriptorType, {\n   69        CV_8U,\n   70        CV_16U,\n   ..\n   73        CV_64F\n   74      });\n   75: \n   76:     console.log(`${name}.write`, f2d.write(`features2d.xml`));\n   77:     console.log(`${name}.read`, f2d.read(`features2d.xml`));\n   78: \n   79:     console.log('img', img);\n   80      let keypoints, keypoints2, descriptors;\n   81  \n   ..\n   91        e => console.log('ERROR', e.message)\n   92      );\n   93: \n   94:     console.log('keypoints', keypoints);\n   95:     console.log('keypoints2', keypoints2);\n   96:     console.log('descriptors', descriptors);\n   97:     console.log('f2d.defaultName', f2d.defaultName);\n   98  \n   99      let gray = new cv.Mat();\n  ...\n  109      cv.waitKey(-1);\n  110    }\n  111: \n  112:   console.log('EXIT');\n  113  }\n  114  try {\n  115    main(...scriptArgs.slice(1));\n  116  } catch(error) {\n  117:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  118    std.exit(1);\n  119  } finally {\n  120:   console.log('SUCCESS');\n  121  }\n  122  \n\n/home/roman/Projects/plot-cv/midi-client.js:\n    2  \n    3  window.addEventListener('load', async () => {\n    4:   console.log('midi-client.js loaded');\n    5  \n    6    let access = (globalThis.access = await navigator.requestMIDIAccess());\n\n/home/roman/Projects/plot-cv/xml2js.js:\n   24  }\n   25  function WriteFile(name, data) {\n   26:   console.log('WriteFile', { name });\n   27    if(typeof data == 'string' && !data.endsWith('\\n')) data += '\\n';\n   28  \n   ..\n   37    // if(typeof data != 'string') data = '' + data;\n   38    filesystem.writeFile(name, data);\n   39:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   40  }\n   41  \n   ..\n   62      Util.getArgs().slice(1)\n   63    );\n   64:   console.log('main', args, params);\n   65    if(params['@'].length == 0 && !params.input) {\n   66:     console.log(`Usage: ${Util.getArgs()[0]} <...files>`);\n   67      return 1;\n   68    }\n\n/home/roman/Projects/plot-cv/adsb-map.js:\n  151    if(states.length) {\n  152      const [time, list] = states.last;\n  153:     console.log('refresh', list.length);\n  154  \n  155      SetTime(time);\n  ...\n  176      onopen: e => onConnect(ws),\n  177      onerror(e) {\n  178:       console.log('ERROR:', e);\n  179      },\n  180      onclose(e) {\n  181:       console.log('CLOSED:', e);\n  182      },\n  183      onmessage(e) {\n  ...\n  185        try {\n  186          response = JSON.parse(e.data); //tryCatch(() => JSON.parse(e.data), d=>d, err => err);\n  187:         console.log('onmessage', response);\n  188  \n  189          if(response.type && /^[A-Z]/.test(response.type[0])) {\n  190:           console.log('return value', response.value);\n  191            switch (response.type) {\n  192              case 'StatePhases': {\n  ...\n  198            }\n  199          } else if(response.type == 'list') {\n  200:           console.log('times', response.times);\n  201          } else if(response.type == 'update' || 'time' in response) {\n  202            // console.log('update', response.states);\n  ...\n  207  \n  208            arr = arr.map(([time, obj]) => [new Date(+time * 1e3), obj]);\n  209: \n  210:           console.log('arr', arr);\n  211  \n  212            data.splice(\n  ...\n  216            );\n  217            if(arr[0]) InsertSorted(states, ...arr);\n  218: \n  219:           console.log('data.length', data.length);\n  220            Refresh();\n  221          } else if(response.type == 'error') {\n  222:           console.log('ERROR response', response.error);\n  223          } else {\n  224            throw new Error(`Invalid response: ${e.data}`);\n  225          }\n  226        } catch(error) {\n  227:         console.log('onmessage ERROR:', error.message);\n  228:         console.log('onmessage ERROR data:', e.data);\n  229:         console.log('onmessage ERROR stack:', error.stack);\n  230        }\n  231:       console.log('states.length', states.length);\n  232      }\n  233    });\n  ...\n  268  \n  269  function FlyTo(location, done = () => {}) {\n  270:   console.log('FlyTo', { location, done });\n  271  \n  272    if(typeof location == 'string') location = cities[location];\n  ...\n  509    /*  tileLayer.on('postrender', function(event) {\n  510      const vectorContext = getVectorContext(event);\n  511:  \n  512:     console.log('tileLayer.postrender', event);\n  513      if(states.length) {\n  514        const [time, list] = states.last;\n  ...\n  516          let obj = Aircraft.fromState(state);\n  517          let style = Aircraft.style(obj.icao24);\n  518:         console.log('obj', { obj, style });\n  519  \n  520    \n  ...\n  580    svgContainer.style.transformOrigin = 'top left';\n  581    svgContainer.className = 'svg-layer';\n  582:   console.log('svgResolution', svgResolution);\n  583    map.addLayer(\n  584      new Layer({\n  ...\n  609    let element = document.querySelector('.time-point');\n  610    let scale = document.querySelector('.time-scale');\n  611:   console.log('CreateSlider', element);\n  612  \n  613    let draggable = new PlainDraggable(element, {\n  ...\n  615      onDrag(position) {\n  616        const { left } = position;\n  617:       console.log('onDrag', left);\n  618        return true;\n  619        return !!position.snapped; // It is moved only when it is snapped.\n  ...\n  627    scale.addEventListener('click', e => {\n  628      const { clientX } = e;\n  629:     console.log('scale clicked', clientX);\n  630      draggable.left = clientX - element.offsetWidth / 2;\n  631    });\n  ...\n  715  window.addEventListener('load', () => {\n  716    ws = Connection(null, ws => {\n  717:     console.log('Connected');\n  718      ws.sendCommand('StatePhases');\n  719    });\n  ...\n  757  \n  758        data[0].states.forEach(state => new Plane(state));\n  759: \n  760:       console.log('text', text);\n  761      });\n  762    });\n\n/home/roman/Projects/plot-cv/linenoise.js:\n    2  \n    3  const liblinenoise = dlopen('/usr/local/lib/x86_64-linux-gnu/liblinenoise.so', RTLD_NOW);\n    4: console.log('liblinenoise', liblinenoise);\n    5  \n    6  /* void linenoiseSetCompletionCallback(linenoiseCompletionCallback* fn)  */\n\n/home/roman/Projects/plot-cv/list-directory.js:\n   70  async function StartSocket() {\n   71    let url = Util.makeURL({ location: '/rpc/ws', protocol: 'wss', port: undefined });\n   72: \n   73:   console.log('Connect to', url);\n   74    let ws = (globalThis.ws = new WebSocket(url));\n   75  \n   ..\n   77  \n   78    for await(let e of iter) {\n   79:     console.log(`WS ${e.type}`, e);\n   80    }\n   81  }\n   ..\n   94    let obj = {};\n   95    for(let column of columns) {\n   96:     console.log('column', column);\n   97      let field = [...column.classList].filter(n => n != 'item')[0];\n   98      let data = column.getAttribute('data-value') ?? column.innerText;\n   ..\n  173      //dir = path.join(dir, name);\n  174      // const name =target.parentElement.attributes['data-name'].value;\n  175:     console.log('onClick', { target, name, dir });\n  176      ListDirectory(name).then(item => {\n  177:       console.log('item', item);\n  178        Refresh(item);\n  179      });\n  ...\n  204    //if(!list.some(({ name }) => /^\\.\\/$/.test(name))) list.unshift({ name: './', mtime: 0, time: 0, mode: 0 });\n  205    const names = list.map(({ name }) => name);\n  206:   console.log('Refresh', { names });\n  207  \n  208    list = list.map(({ name, ...obj }) => ({ ...obj, name: dir + '/' + name }));\n  ...\n  215    ]);\n  216    render(component, document.body);\n  217:   console.log('rendered');\n  218  }\n  219  \n\n/home/roman/Projects/plot-cv/compile_commands.js:\n   61      {\n   62        let { program, output, source, flags } = cmd;\n   63:       console.log('cmd', inspect({ program, flags, output, source }, { ...console.options, compact: 2 }));\n   64      }\n   65      //    std.puts(cmd.toString('' && '\\\\\\n\\t') + '\\n');\n   ..\n   76  \n   77    const CFLAGS = [...defines.map(d => '-D' + d), ...includes.map(i => '-I' + i), ...flags];\n   78:   console.log('CFLAGS', CFLAGS);\n   79  }\n   80  \n   ..\n   82    main(...scriptArgs.slice(1));\n   83  } catch(error) {\n   84:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   85    std.exit(1);\n   86  } finally {\n   87:   console.log('SUCCESS');\n   88  }\n   89  \n\n/home/roman/Projects/plot-cv/grammar-c.js:\n    5      let r = parser(str, pos);\n    6      if(r[0] || name.startsWith('direct'))\n    7:       console.log('matched (' + name + ') ' + pos + ' - ' + r[2] + \": '\", r[1], \"'\");\n    8      return r;\n    9    };\n\n/home/roman/Projects/plot-cv/test-bitset.js:\n   33    let i = 0;\n   34    for(let num of arr) {\n   35:     console.log(\n   36        (i++ + '').padStart(3, ' ') + ': ' + prefix + ('0'.repeat(pad) + Math.abs(num).toString(base)).slice(-pad)\n   37      );\n   ..\n   45  \n   46  printBinary(bits, 16);\n   47: console.log('bits:', bits);\n   48  let colors = [...bits].map(num => `#${('000000' + (+num).toString(16)).slice(-6)}`).map(c => new RGBA(c));\n   49: \n   50: console.log('colors:', colors);\n   51: console.log('colors:\\n', colors.map(c => c.toSource()).join(',\\n'));\n   52  let palette = [\n   53    new RGBA(0x4b, 0xff, 0x4b),\n   ..\n   56    new RGBA(0xff, 0xff, 0x4b)\n   57  ];\n   58: console.log('palette:', palette);\n   59: console.log('palette:', palette.map(color => color.hex()).join(','));\n   60  \n\n/home/roman/Projects/plot-cv/test-glfw.js:\n    8  \n    9  function Mat2Texture(texture_cv) {\n   10:   console.log('texture_cv', texture_cv);\n   11    const { buffer } = texture_cv;\n   12:   console.log('texture_cv.buffer', buffer);\n   13    let texture = new Uint32Array(1);\n   14:   console.log('texture', texture);\n   15    glGenTextures(1, texture.buffer); // Create The Texture\n   16  \n   ..\n   43    const { x, y } = position;\n   44    let textures = [];\n   45: \n   46:   console.log(`width: ${width}, height: ${height}, x: ${x}, y: ${y}`);\n   47  \n   48    if(args.length == 0) args.push('Muehleberg.png');\n   49  \n   50    while(args.length > 0) {\n   51:     console.log('args[0]:', args[0]);\n   52  \n   53      let image = imread(args[0]);\n   54:     console.log('image:', image);\n   55:     console.log('image.buffer:', image.buffer);\n   56      let texture = Mat2Texture(image);\n   57  \n   ..\n   60    }\n   61    Util.shuffle(textures);\n   62:   console.log('textures', textures);\n   63  \n   64    let hues = range(0, 359, 360 / 16)\n   ..\n   69    const interpolate = (x, y, sigma) =>\n   70      Array.isArray(x) ? x.map((xx, i) => interpolate(xx, y[i], sigma)) : x * (1.0 - sigma) + y * sigma;\n   71: \n   72:   console.log(\n   73      'hues',\n   74      hues.map(c => [...c].slice(0, 3))\n   ..\n  136    main(...scriptArgs.slice(1));\n  137  } catch(error) {\n  138:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  139    std.exit(1);\n  140  } finally {\n  141:   console.log('SUCCESS');\n  142  }\n  143  \n\n/home/roman/Projects/plot-cv/test-fft.js:\n   11    var p = ffi.dlsym(so, name);\n   12    if(p == null) {\n   13:     console.log(name, 'not in so');\n   14      std.exit(1);\n   15    }\n   16    if(!ffi.define(name, p, null, rtype, ...args)) {\n   17:     console.log('define failed');\n   18      std.exit(1);\n   19    }\n   ..\n   65  function main(...args) {\n   66    ConsoleSetup({ depth: 20, colors: true, breakLength: 80 });\n   67:   console.log('test');\n   68  \n   69    let info = new sf_info_t();\n   70: \n   71:   console.log('info:', info);\n   72:   console.log('args:', args);\n   73  \n   74    let ptr = sf_open(args[0] || '/opt/games/endless-sky/sounds/hyperdrive.wav', SFM_READ, info);\n   75:   console.log('info: ' + info.toString());\n   76  \n   77    let rate = info.samplerate;\n   ..\n   79  \n   80    let ret = sf_readf_float(ptr, sample.buffer, info.frames);\n   81:   console.log('ret:', ret);\n   82:   console.log('sample:', sample.slice(0, 100));\n   83    const size = 2048;\n   84    const fft = new FFT(size);\n   ..\n   90  \n   91    fft.forward(sample.slice(0, size), 1, 0, re, im);\n   92:   console.log('re:', re.slice(0, 100));\n   93:   console.log('im:', im.slice(0, 100));\n   94  \n   95    const bin2frequency = (() => {\n   ..\n   98      return bin => (bin * top_freq) / (size - 1);\n   99    })();\n  100: \n  101:   console.log(`bin2freq(${size - 1}) =`, bin2frequency(size - 1));\n  102  \n  103    let mag = re.map(m => Math.abs(m));\n  104    let max = Math.max(...mag);\n  105    let ind = [...mag].map((m, i) => [i, m]).filter(([i, m]) => m === max);\n  106:   console.log(\n  107      `dominant frequencies:`,\n  108      ind.map(([i, m]) => bin2frequency(i))\n\n/home/roman/Projects/plot-cv/fire.js:\n   96  \n   97    /* context.transform(...t);\n   98:   console.log(\"t:\", context.currentTransform);\n   99  */\n  100    for(let y = 0; y < h; y++) {\n  ...\n  138  \n  139    const breakpoints = [0, 51, 80, 154, 205, 256];\n  140:   console.log('breakpoints:', breakpoints);\n  141  \n  142    for(let i = 0; i < 256; i++) {\n  ...\n  199  function ResizeHandler(e) {\n  200    rect = element.getBoundingClientRect();\n  201:   console.log('rect', rect);\n  202  }\n  203  \n\n/home/roman/Projects/plot-cv/httpd.js:\n   21  \n   22    let params = Util.getOpt({ host: [true, null, 'h'], port: [true, null, 'p'] }, args);\n   23: \n   24:   console.log('params', params);\n   25  \n   26    worker = new os.Worker('./ws-worker.js');\n   ..\n   28    counter = 0;\n   29    worker.onmessage = WorkerMessage;\n   30:   console.log('TestWorker', worker.onmessage);\n   31: \n   32:   console.log('worker.postMessage', worker.postMessage);\n   33  \n   34    send('httpd', params);\n   ..\n   42  \n   43  function WorkerMessage(e) {\n   44:   console.log('WorkerMessage', e);\n   45    var ev = e.data;\n   46    const { message, id } = ev;\n   ..\n   50        switch (message.type) {\n   51          case 'start': {\n   52:           console.log('START', message.start);\n   53  \n   54            break;\n   55          }\n   56          default: {\n   57:           console.log('From WORKER', ev);\n   58            connection.sendMessage(message);\n   59  \n\n/home/roman/Projects/plot-cv/test-trkl.js:\n    6  \n    7  trkl.bind(testObj, 'prop1', value => (value === undefined ? testValues[0] : (testValues[0] = value)));\n    8: \n    9: console.log('testObj.prop1', testObj.prop1);\n   10  testObj.prop1 = 'a';\n   11: console.log('testObj.prop1', testObj.prop1);\n   12: console.log('testValues', testValues);\n   13  \n\n/home/roman/Projects/plot-cv/test-utf8.js:\n   35  \n   36    let data = filesystem.readFile(args[0] ?? 'utf8.txt', null);\n   37:   console.log('data:', data);\n   38  \n   39    let bytes = new Uint8Array(data);\n   ..\n   59      [[], 0, 0]\n   60    )[0];\n   61: \n   62:   console.log('result:', result);\n   63    let g = BytesToUTF8(bytes);\n   64:   console.log('g:', typeof g);\n   65:   console.log('g:', g.next);\n   66:   console.log('g:', g);\n   67: \n   68:   console.log('BytesToUTF8:', CodePointsToString(g));\n   69  }\n   70  \n\n/home/roman/Projects/plot-cv/test-umat.js:\n   37  \n   38    for(let [k, v] of types) {\n   39:     console.log(k, v, '0x' + v.toString(16), '0b' + v.toString(2), v >> 1, 1 << ((v >> 1) + 3), 1 << (v >> 1));\n   40    }\n   41  \n   ..\n   43      args[0] ?? '../an-tronics/images/fm/Two-Transistor-Regenerative-Receiver-Schematic-Circuit-Diagram.jpg'\n   44    );\n   45:   console.log('input.type', '0x' + input.type.toString(16));\n   46:   console.log('input.depth', '0x' + input.depth.toString(16));\n   47:   console.log('input.channels', '0x' + input.channels.toString(16));\n   48:   console.log('input.elemSize1', input.elemSize1);\n   49:   console.log('input.total', input.total);\n   50:   console.log('input.at', input.at(0, 0));\n   51    let size = input.size;\n   52:   console.log('size', size);\n   53    let { width, height } = size;\n   54    let mat = new Mat(input.size, cv.CV_8UC3);\n   ..\n   82      return depth;\n   83    }\n   84:   console.log(`contours.length`, contours.length);\n   85    // console.log('contours', contours.map(c => [...c].map(({x,y}) =>({x,y}))));\n   86    let lines = new Mat();\n   ..\n   92    cv.blur(gray_inv, gray_inv, new Size(3, 3));\n   93    //cv.cvtColor(gray_inv, gray_inv, cv.COLOR_BGR2GRAY);\n   94:   console.log(`gray_inv`, gray_inv);\n   95  \n   96    const GetX = x => Math.floor(x / 5);\n   ..\n   99    cv.HoughLinesP(gray_inv, lines, 1, cv.CV_PI / 24, 40, 5, 10);\n  100    cv.HoughCircles(gray_inv, circles, cv.HOUGH_GRADIENT, 1, 10, 200, 80, 1, 100);\n  101:   console.log(`circles`, circles);\n  102    let ygrid = Array.from({ length: Math.floor(input.rows / 5) }, () => []);\n  103    let xgrid = Array.from({ length: Math.floor(input.cols / 5) }, () => []);\n  104:   console.log(`ygrid`, ygrid);\n  105  \n  106    for(let elem of lines) {\n  ...\n  112      Draw.line(mat, line.a, line.b, [255, 0, 0, 255], 1, cv.LINE_AA);\n  113      /*    console.log('line.angle:', (line.angle * 180) / Math.PI);\n  114:     console.log('line.length:', line.length);*/\n  115  \n  116      Util.pushUnique(ygrid[GetY(y1)], line);\n  ...\n  131    }\n  132    for(let contour of contours) {\n  133:     console.log('contour.length', contour.length);\n  134      let poly = new Contour();\n  135      contour.approxPolyDP(poly, 0.05 * contour.arcLength());\n  136      let lpoly = [...poly.lines()];\n  137      let angles;\n  138: \n  139:     console.log('poly.arcLength()', poly.arcLength());\n  140:     console.log(\n  141        'lpoly.length',\n  142        lpoly.length,\n  143        lpoly.map(({ x1, y1, x2, y2 }) => `${x1},${y1}|${x2},${y2}`)\n  144      );\n  145:     console.log(\n  146        'lpoly angles',\n  147        lpoly.length,\n  148        (angles = lpoly.map(l => Math.floor((l.angle * 180) / Math.PI)).map(a => a % 90))\n  149      );\n  150:     console.log(\n  151        'lpoly slopes',\n  152        lpoly.length,\n  153        lpoly.map(l => l.slope).map(({ x, y }) => [x, y])\n  154      );\n  155:     console.log(\n  156        'lpoly lengths',\n  157        lpoly.length,\n  ...\n  175    input2.xor([255, 255, 255, 0], input2);\n  176    let input2u = input2.getUMat(cv.ACCESS_RW);\n  177:   console.log(`input2u`, input2u);\n  178    cv.imshow('input2', input2u);\n  179    /* console.log(`input.buffer`, input.buffer);\n  180:   console.log(`input2.buffer`, input2.buffer);*/\n  181  \n  182    //for(let i = 0; i < 100; i++) Draw.line(mat, RandomPoint(), RandomPoint(), RandomColor(), 1, cv.LINE_AA);\n\n/home/roman/Projects/plot-cv/doc-scanner.js:\n   39    let biggest = [];\n   40    let maxArea = -10;\n   41: \n   42:   console.log('contours', contours);\n   43    for(let i = 0; i < contours.length; i++) {}\n   44  \n   ..\n   55        drawContours(imgDilate, [c], 0, i2color(j), 3);\n   56        j++;\n   57:       console.log('ENTERED LOOP 1');\n   58        let peri = arcLength(c, true);\n   59:       console.log('peri', peri);\n   60        /*if(peri === Infinity) peri = arcLength(c, true);\n   61        if(peri === Infinity) console.log('c', c);\n   ..\n   67  \n   68        if(area > maxArea && contourPoly[i].length == 4) {\n   69:         console.log('ENTERED LOOP 2');\n   70          //drawContours(imgOriginal, contourPoly, i, Scalar(255, 0, 255), 3);\n   71          maxArea = area;\n   ..\n   87    let boundRect = new Array(contours.length);\n   88    let maxArea = -10;\n   89: \n   90:   console.log('contours', contours);\n   91:   console.log('hierarchy', hierarchy);\n   92    for(let i = 0; i < contours.length; i++) {}\n   93  \n   ..\n  106      if(peri !== Infinity) {\n  107        let contour = new Contour();\n  108:       console.log('c', c);\n  109        approxPolyDP(c, contour, 0.02 * peri, true);\n  110:       console.log('contour', contour);\n  111  \n  112        drawContours(imgDilate, [c], 0, i2color(i), 1);\n  ...\n  118    areas.sort((a, b) => b[0] - a[0]);\n  119    //areas.sort((a, b) => b[1] - a[1]);\n  120: \n  121:   console.log('areas', areas);\n  122  \n  123    let [area, peri, contour, index] = areas[0];\n  124:   console.log('area', area);\n  125:   console.log('peri', peri);\n  126:   console.log('length', contour.length);\n  127:   console.log('contour', contour);\n  128  \n  129    drawContours(imgDilate, [contour], 0, i2color(0), 3);\n  ...\n  167    let sumPoints = [],\n  168      subPoints = [];\n  169: \n  170:   console.log('points', points);\n  171    for(let i = 0; i < 4; i++) {\n  172      sumPoints.push(Math.round(points[i].x + points[i].y));\n  173      subPoints.push(Math.round(points[i].x - points[i].y));\n  174    }\n  175: \n  176:   console.log('sumPoints', sumPoints);\n  177:   console.log('subPoints', subPoints);\n  178  \n  179    let indices = [min_element(sumPoints), max_element(subPoints), min_element(subPoints), max_element(sumPoints)];\n  180: \n  181:   console.log('indices', indices);\n  182  \n  183    newPoints.push(points[min_element(sumPoints)]); // 0\n  ...\n  192    let src = [points[0], points[1], points[2], points[3]];\n  193    let dest = [new Point(0, 0), new Point(w, 0), new Point(0, h), new Point(w, h)];\n  194:   console.log('src', src);\n  195:   console.log('dest', dest);\n  196    let inter = getPerspectiveTransform(src, dest);\n  197:   console.log('inter', inter);\n  198  \n  199    let imgWarp = new Mat();\n  ...\n  206      inspectOptions: { compact: false, customInspect: true, maxArrayLength: 20, maxStringLength: 100, numberBase: 10 }\n  207    });\n  208: \n  209:   console.log('args', args);\n  210    let key;\n  211  \n  ...\n  219      let cropFactor = 10;\n  220      let roi = new Rect(cropFactor, cropFactor, w - 2 * cropFactor, h - 2 * cropFactor);\n  221: \n  222:     console.log('imgOriginal', imgOriginal);\n  223  \n  224      imgThreshold = preProcessing(imgOriginal);\n  225  \n  226      initialPoints = getBiggest(imgThreshold);\n  227:     console.log('initialPoints', initialPoints);\n  228  \n  229      finalPoints = reOrder(initialPoints);\n  230:     console.log('finalPoints', finalPoints);\n  231      imgWarp = getWarp(imgOriginal, finalPoints, w, h);\n  232  \n\n/home/roman/Projects/plot-cv/webSocket.js:\n   34      if(!(args.length == 0 && typeof msg == 'string')) msg = new Message(msg, ...args);\n   35      if(msg instanceof Message) msg = msg.data;\n   36:     console.debug(`[${this.id}] send '${msg}'`);\n   37      lines.push(msg);\n   38    };\n   ..\n  128        let rId = sockets.findIndex(s => s.id == msg.recipient);\n  129        if(rId == -1) {\n  130:         console.error(`No such recipient: '${msg.recipient}'`);\n  131          return;\n  132        }\n  ...\n  136        if(sock.ws === this.ws) continue;\n  137        if(msg.recipient && sock.id != msg.recipient) continue;\n  138:       console.log(`Sending[${++i}/${sockets.length}] to ${sock.id}:`, msg.line);\n  139        await send(msg.line);\n  140      }\n  ...\n  180      Object.assign(client, { sendTo, sendMany });\n  181      s.closeConnection = async function closeConnection(reason) {\n  182:       console.debug(`[${this.id}] closeConnection:`, reason);\n  183        await this.ws.close();\n  184        if(removeItem(sockets, this.ws, 'ws')) await client.sendMany(this, reason || 'closed', this.id, null, 'QUIT');\n  ...\n  187      sockets.push(s);\n  188      s.on('close', async function(arg) {\n  189:       console.log(`[${s.id}] close`);\n  190        await s.closeConnection();\n  191      });\n  192      s.on('error', async function(arg) {\n  193:       console.log(`[${s.id}] error`, arg);\n  194        await s.closeConnection('error');\n  195      });\n\n/home/roman/Projects/plot-cv/test-octagon.js:\n   24    const octagon = MakePolygon(8, 1.27 * f, 0.5).map(p => p.add(center));\n   25    const octagon2 = MakePolygon(8, 1.27 * f, 0).map(p => p.add(center));\n   26:   console.log('octagon', octagon);\n   27:   console.log('octagon.boundingRect()', octagon.boundingRect());\n   28    //console.log('xml.write', xml.write([{ tagName: 'g', attributes: { stroke: '#ccc', 'stroke-width': 0.025 } }]));\n   29  \n\n/home/roman/Projects/plot-cv/test-sourcemap.js:\n    9    await ConsoleSetup();\n   10    filesystem = await PortableFileSystem();\n   11: \n   12:   console.log('sourceMap');\n   13  \n   14    if(args.length == 0)\n   ..\n   21        'htm/standalone.js.map'\n   22      ];\n   23:   console.log('args:', args);\n   24    for(let arg of args) {\n   25      let map = SourceMap.fromMapFileComment(`//# sourceMappingURL=${arg} \\r\\n`, '.', filesystem);\n   26: \n   27:     console.log('map.toBase64():', map.toBase64());\n   28:     console.log('map.toComment():', map.toComment());\n   29    }\n   30  }\n\n/home/roman/Projects/plot-cv/tamper.js:\n  436      let results = filters.map(f => f.test(locationStr));\n  437      if(filters.every(f => !f.test(locationStr))) return;\n  438:     console.log('log', { args, c });\n  439      Util.putStack();\n  440  \n  ...\n  481        if(substitutions.i !== undefined) o.push(substitutions.i);\n  482      }\n  483: \n  484:     console.log(...o);\n  485    };\n  486    Util.logBase = Util.curry((base, n) => Math.log(n) / Math.log(base));\n  ...\n 1043            });\n 1044          } catch(err) {\n 1045:           console.log('extend:' + err + '\\n', { obj, key, value });\n 1046          }\n 1047        }\n ....\n 1068          err\n 1069        ) {\n 1070:         console.log('static:', err);\n 1071        }\n 1072      }\n ....\n 1609  \n 1610          //  if(Util.className(obj) != 'Range')\n 1611: \n 1612:         console.debug('s:', s);\n 1613: \n 1614:         console.debug('inspect:', inspect + '');\n 1615          out += s;\n 1616        } else {\n ....\n 1761      for(let j = 0; j < iterable.length; j++) {\n 1762        const [i, color] = iterable.j.length == 2 ? iterable.j : [j, iterable.j];\n 1763:       console.log(\n 1764          `  %c    %c ${color} %c ${textFn(color, i)}`,\n 1765          `background: ${color}; font-size: 18px; ${filters};`,\n ....\n 1834        async run() {\n 1835          for await(const event of this.loop) {\n 1836:           console.info('event:', event);\n 1837          }\n 1838        }\n ....\n 2620      for(let arg of args) {\n 2621        if(Util.isGenerator(arg)) {\n 2622:         console.error('isGenerator:', arg);\n 2623          yield* arg;\n 2624        } else {\n ....\n 2788  \n 2789      /*console.log(\"obj\",(obj));\n 2790:     console.log(\"isGenerator\",Util.isGenerator(obj));*/\n 2791  \n 2792      if(Util.isGenerator(obj))\n ....\n 2970      /*  const decimals = Math.log10(prec);\n 2971        const digits = Math.ceil(-decimals);\n 2972:       console.log('digits:', digits);*/\n 2973      let ret = fn(value / prec) * prec;\n 2974  \n ....\n 3730  \n 3731     } catch(e) {\n 3732:     console.log(\"e.stack\",[...e.stack]);\n 3733      stack = e.stack;\n 3734     }\n ....\n 4447          .reverse()[0]\n 4448          .replace(/.*position\\ ([0-9]+).*/, '$1');\n 4449:       console.error('Unexpected token: ', jsonStr);\n 4450:       console.error('Unexpected token at:', jsonStr.substring(pos));\n 4451        ret = null;\n 4452      }\n ....\n 5053  \n 5054      const log = (method, ...args) =>\n 5055:       console.log(\n 5056          `${Date.now() - createdTime.valueOf()} timer#${id}.${method}`,\n 5057          ...args.map(obj =>\n ....\n 5407  \n 5408            //console.debug('main stack:', [...err.stack].map((f) => f + ''));\n 5409: \n 5410:           console.log('main stack:', err.stack);\n 5411  \n 5412            stack = Util.stack(err.stack);\n 5413  \n 5414            // console.log(\"main Stack:\", Util.className(stack), stack.toString+'', Util.className(stack[0]), stack[0].toString)\n 5415: \n 5416:           console.log('main Exception:', message, '\\n' + stack.toString(true) + '');\n 5417          }\n 5418        );\n ....\n 5557        const a = [...this];\n 5558        const i = a.map(i => Util.inspect(i));\n 5559:       console.debug('a: ' + i.shift(), ...i);\n 5560        Util.consoleConcat.prototype.print.call(this, this.log);\n 5561      },\n ....\n 5596  \n 5597            const matches = [...Util.matchAll(['%c', '%o'], arg)];\n 5598:           console.debug('matches.length:', matches.length, ' args.length:', args.length);\n 5599  \n 5600            if(matches.length > 0) {\n ....\n 5645    };\n 5646    const getArgs = args => (\n 5647:     console.debug('getArgs', ...args), typeof args[0] == 'number' ? [{ x: args[0], y: args[1] }] : args\n 5648    );\n 5649  \n ....\n 6597  \n 6598      // const [  p = ['width', 'height']  ] = args[0] instanceof Size ? args : [new Size(), ...args];\n 6599: \n 6600:     console.debug('Size.bind', { args, o, t, p, gen });\n 6601  \n 6602      const { width, height } = Array.isArray(p) ? p.reduce((acc, name) => ({ ...acc, [[name]]: name }), {}) : p;\n ....\n 6709    const getSize = memoize(rect =>\n 6710      Util.bindProperties(new Size(0, 0), rect, ['width', 'height'], k => {\n 6711:       console.log('gen', { k });\n 6712  \n 6713        return v => {\n ....\n 6730      get() {\n 6731        let ret = getSize(this);\n 6732:       console.log('getSize( ) =', ret);\n 6733        return ret;\n 6734      }\n ....\n 6738      get() {\n 6739        let ret = getPoint(this);\n 6740:       console.log('getPoint( ) =', ret);\n 6741        return ret;\n 6742      }\n\n/home/roman/Projects/plot-cv/libraries.js:\n   12      query: { languages, q: 'parser' }\n   13    });\n   14:   console.log('uri:', uri);\n   15    const res = await fetch(uri);\n   16  \n   17    const { ok, status, type } = res;\n   18:   console.log('res:', { ok, status, type });\n   19  \n   20    const html = await res.text();\n   21:   console.log('html:', html);\n   22  \n   23    const [doc] = tXml(html);\n   24:   console.log('doc:', doc);\n   25  \n   26    const flat = deep.flatten(\n   ..\n   30      (p, v) => [XPath.from(p, doc), v]\n   31    );\n   32:   console.log('flat:', flat);\n   33    return doc;\n   34  }\n\n/home/roman/Projects/plot-cv/eagle-query.js:\n   25    for(let arg of args) {\n   26      let data = fs.readFileSync(arg);\n   27:     console.log(`loaded '${arg}' length: ${data.length}`);\n   28      let doc = new EagleDocument(data, null, arg);\n   29      documents.push(doc);\n   ..\n   36    for(let doc of documents) {\n   37      let main = doc.mainElement;\n   38:     console.log('main:', main);\n   39      let parts = [...(main.elements || main.parts)].map(([name, elem]) => [\n   40        name,\n   41        typeof elem.value == 'string' ? SubstChars(elem.value) : elem.value\n   42      ]);\n   43:     console.log('parts', console.config({ compact: false }), Object.fromEntries(parts));\n   44      let matchers = [\n   45        [/^R/, /^[0-9.]+([kKmM][Ω\\u03A9]?|[Ω\\u03A9]?)(|\\/[0-9.]+W)/],\n   ..\n   61    //\n   62    /* for(let value of [2.2, 4.7e3]) {\n   63:     console.log(`GetColorBands(${value}, 3)`, GetColorBands(value, 2));\n   64    }*/\n   65    for(let key in components) {\n   66      components[key].sort();\n   67:     console.log(`component ${key}`, components[key]);\n   68      let hist = Util.histogram(components[key], new Map());\n   69  \n   ..\n   75        .sort((a, b) => a[1] - b[1])\n   76        .map(([val, rat, count]) => {\n   77:         console.log('c', { val, rat, count });\n   78          const scal = PartScales[key[0]];\n   79  \n   ..\n   91    }\n   92    // console.log('components:', components);\n   93: \n   94:   console.log(\n   95      'values:\\n   ' +\n   96        Object.entries(values)\n   ..\n   98          .join('\\n   ')\n   99    );\n  100:   console.log(`\\r\\nFinished querying`, ...args);\n  101  \n  102    return;\n  103    /* console.log('digit2color:', digit2color);\n  104    for(let value of [33000, 1800, 470, 1e6, 4.7e3]) {\n  105:     console.log('GetColorBands', GetColorBands(value, 3));\n  106:     console.log('GetColorBands', GetColorBands(value, 2));\n  107:     console.log('NumberToValue', NumberToValue(value));\n  108    }\n  109    for(let value of ['33k', '1.8k', '470', '1.8k', '47k', '10M', '4.7k']) {\n  110:     console.log(`ValueToNumber(${value})`, ValueToNumber(value));\n  111    }*/\n  112  }\n\n/home/roman/Projects/plot-cv/deconflict.js:\n   16      let [match, start, end] = value;\n   17      match = match.trimEnd();\n   18:     console.log('match', match);\n   19      if(match.length > 8) {\n   20        let idx = />>>>>>>/y.test(match) | 0;\n\n/home/roman/Projects/plot-cv/test-matrix.js:\n   30  m.affine_transform(src, dst);\n   31  let affine = m.decompose(false);\n   32: \n   33: console.log(\n   34    'affine_transform = ',\n   35    inspect(affine, (v, k) => typeof v != 'function' && k != 'toString')\n\n/home/roman/Projects/plot-cv/esparse.js:\n   18    if(data != '') {\n   19      fs.writeFileSync(name, data + '\\n');\n   20:     console.log(`Wrote ${name}: ${data.length} bytes`);\n   21    }\n   22  }\n   ..\n   49          false,\n   50          (v, r, o) => {\n   51:           console.log(`Usage: ${Util.getArgs()[0]} [OPTIONS]\\n`);\n   52:           console.log(o.map(([name, [arg, fn, ch]]) => `  --${(name + ', -' + ch).padEnd(20)}`).join('\\n'));\n   53            Util.exit(0);\n   54          },\n   ..\n   59          function(v, r, o, res) {\n   60            const thisObj = this;\n   61:           console.log('debug', { v, r, o, res, thisObj });\n   62          },\n   63          'x'\n   ..\n   83      } catch(err) {\n   84        if(err) {\n   85:         console.log('ERROR:', err.message);\n   86:         console.log('ERROR:', err.stack);\n   87        } else {\n   88:         console.log('ERROR:', err);\n   89        }\n   90        throw err;\n   ..\n  111      data = source;\n  112    }\n  113:   console.log(`'${file}' OK, data:`, Util.abbreviate(Util.escape(data)));\n  114  \n  115    let ast, error;\n  ...\n  120      ast = parser.parseProgram();\n  121    } catch(err) {\n  122:     console.log('parseProgram token', parser.token);\n  123:     console.log('parseProgram loc', parser.lexer.loc + '');\n  124      if(Util.isObject(err)) {\n  125:       console.log('parseProgram ERROR message:', err.message);\n  126:       console.log('parseProgram ERROR stack:', err.stack);\n  127      }\n  128      throw err;\n  129    }\n  130: \n  131:   console.log('Parsed: ', ast);\n  132  \n  133    parser.addCommentsToNodes(ast);\n  ...\n  140      return !Util.isPrimitive(node);\n  141    });\n  142:   console.log('flat:', [...flat.keys()]);\n  143  \n  144    let nodeKeys = [];\n  ...\n  175  \n  176    if(err) {\n  177:     console.log(parser.lexer.currentLine());\n  178:     console.log(Util.className(err) + ': ' + (err.msg || err) + '\\n' + err.stack);\n  179    }\n  180  \n  181    let lexer = parser.lexer;\n  182    let t = [];\n  183:   console.log(parser.trace());\n  184    WriteFile('trace.log', parser.trace());\n  185    if(fail) {\n  186:     console.log('\\nerror:', err.msg, '\\n', parser.lexer.currentLine());\n  187    }\n  188:   console.log('finish: ' + (fail ? 'error' : 'success'));\n  189    return !fail;\n  190  }\n  ...\n  197  } finally {\n  198    if(error) {\n  199:     console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  200:     console.log('FAIL');\n  201      Util.exit(1);\n  202    } else {\n  203:     console.log('SUCCESS');\n  204    }\n  205  }\n\n/home/roman/Projects/plot-cv/test-popen.js:\n    4  const input = std.in.getline();\n    5  const command = input.replace(/^['\"`]?(.*)['\"`]?$/, '$1');\n    6: \n    7: console.log(new Uint8Array(stringToArrayBuffer('[ 1234, 0 ]')));\n    8  \n    9  //std.err.puts(`Executing: ${command}\\n`);\n\n/home/roman/Projects/plot-cv/upload.js:\n   14  \n   15  window.addEventListener('load', e => {\n   16:   console.log('upload.js loaded!');\n   17  \n   18    let form = document.querySelector('form');\n   19  \n   20    form.addEventListener('submit', e => {\n   21:     console.log('form.submit', e);\n   22      e.preventDefault();\n   23  \n   ..\n   29    input.addEventListener('change', e => {\n   30      const { srcElement, target } = e;\n   31:     console.log('input.change', e);\n   32:     console.log('target.files', target.files);\n   33:     console.log('srcElement.value', srcElement.value);\n   34    });\n   35  \n   ..\n   54  \n   55    fetch('upload' /*+'.html'*/, { method: 'POST', body: formData }).then(response => {\n   56:     console.log('response', response);\n   57    });\n   58  }\n   ..\n   63      const { data } = e;\n   64      let command = JSON.parse(data);\n   65:     console.log('onmessage', command);\n   66      switch (command.type) {\n   67        case 'uuid':\n   ..\n   87        function(e) {\n   88          var pc = parseInt(100 - (e.loaded / e.total) * 100);\n   89: \n   90:         console.log('pc', pc);\n   91        },\n   92        false\n\n/home/roman/Projects/plot-cv/test-esprima.js:\n   47      if(!error) {\n   48        let outputFile = path.basename(arg, path.extname(arg)) + '.ast.json';\n   49:       console.log(`Parsing '${arg}' succeeded, writing AST to '${outputFile}'`);\n   50        fs.writeFileSync(outputFile, JSON.stringify(ast, null, 2));\n   51      } else {\n   ..\n   61  } finally {\n   62    if(error) {\n   63:     console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   64:     console.log('FAIL');\n   65      Util.exit(1);\n   66    } else {\n   67:     console.log('SUCCESS');\n   68    }\n   69  }\n\n/home/roman/Projects/plot-cv/test-ast.js:\n   15  \n   16    //fns = fns.filter(n => n.inner && n.inner.find(n => n.kind == 'CompoundStmt'));\n   17:   console.log('fns:', console.config(consoleOpts), fns);\n   18  \n   19    let fn;\n   20  \n   21    fn = fns.pop();\n   22: \n   23:   console.log('fn.inner[0]:', console.config(consoleOpts), fn.inner[0]);\n   24:   console.log('fn:', console.config(consoleOpts), fn);\n   25    let printer = NodePrinter();\n   26  \n   27    printer.print(fn);\n   28:   console.log('output:', printer.output);\n   29  }\n   30  \n\n/home/roman/Projects/plot-cv/test-editline.js:\n   14  async function main(...args) {\n   15    await ConsoleSetup({ depth: Infinity });\n   16: \n   17:   console.log('el.handle', el.handle);\n   18  \n   19    let rl_meta_chars = ffi.dlsym(el.handle, 'rl_meta_chars');\n   20:   console.log('rl_meta_chars', rl_meta_chars.toHex());\n   21  \n   22    let b = ffi.toArrayBuffer(rl_meta_chars, 4);\n   23:   console.log('b', b);\n   24  }\n   25  \n\n/home/roman/Projects/plot-cv/svgtransform.js:\n   24  }\n   25  function WriteFile(name, data) {\n   26:   console.log('WriteFile', { name });\n   27    if(!data.endsWith('\\n')) data += '\\n';\n   28  \n   ..\n   36    if(typeof data != 'string') data = '' + data;\n   37    filesystem.writeFile(name, data + '\\n');\n   38:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   39  }\n   40  \n   ..\n   60      Util.getArgs().slice(1)\n   61    );\n   62:   console.log('main', args, params);\n   63    if(params['@'].length == 0 && !params.input) {\n   64:     console.log(`Usage: ${Util.getArgs()[0]} <...files>`);\n   65      return 1;\n   66    }\n   ..\n  116  \n  117        if(acc.length < 1) continue;\n  118:       console.log('transformation', acc);\n  119:       console.log('matrix', matrix.decompose());\n  120  \n  121        switch (node.tagName) {\n  ...\n  125            let { x, y } = new Point(+cx, +cy).transform(matrix).round(0.00001, 6);\n  126            let radius = new Size(+r, +r).transform(matrix).round(0.00001, 6).width;\n  127: \n  128:           console.log('transform circle', { x, y, radius });\n  129  \n  130            node.attributes['cx'] = x;\n  ...\n  137  \n  138            let p = new Point(+x, +y).transform(matrix).round(0.00001, 6);\n  139: \n  140:           console.log(`transform '${node.tagName}'`, p);\n  141  \n  142            node.attributes['x'] = p.x;\n  ...\n  151  \n  152            path.commands = path.commands.map(command => {\n  153:             console.log('command:', command);\n  154              switch (command.name) {\n  155                case 'M': {\n  ...\n  181                default: {\n  182                  let message = `No such path command '${command.name}'`;\n  183:                 console.error(message);\n  184                  throw new Error(message);\n  185                }\n  ...\n  204  \n  205      /*  for(let node of positioned) {\n  206:       console.log(\"node:\", node);\n  207      }*/\n  208  \n\n/home/roman/Projects/plot-cv/test-css3.js:\n   25    main(...scriptArgs.slice(1));\n   26  } catch(error) {\n   27:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   28    std.exit(1);\n   29  } finally {\n   30:   console.log('SUCCESS');\n   31  }\n   32  \n\n/home/roman/Projects/plot-cv/diagram.js:\n   67  \n   68  export function DrawRect(mat, [x1, y1], [x2, y2], color = CV_RGB(0, 0, 0), width = 1, lineType = LINE_AA) {\n   69:   console.log('DrawRect', { x1, y1, x2, y2 }, { color, width, lineType });\n   70  \n   71    DrawLine(mat, [x1, y1], [x2, y1], color, width, lineType);\n\n/home/roman/Projects/plot-cv/test-websocket.js:\n    8  async function main() {\n    9    await ConsoleSetup({ breakLength: 200 });\n   10: \n   11:   console.log('WebSocket:', WebSocket, Util.isConstructor(WebSocket));\n   12  \n   13    const url = 'ws://127.0.0.1:3000/ws';\n   ..\n   22    ws.sendMessage = function(...args) {\n   23      let { data } = new Message(...args);\n   24:     console.debug(`send => '${data}'`);\n   25  \n   26      return this.send(data);\n   ..\n   37          case 'HELLO': {\n   38            myId = msg.body;\n   39:           console.log(`Your client Id is '${myId}'`);\n   40            break;\n   41          }\n   42          case 'PONG': {\n   43:           console.log(`PONG '${msg.body}'`);\n   44            break;\n   45          }\n   46          case 'USERS': {\n   47:           console.log(`USERS '${msg.body}'`);\n   48            for(let id of [...msg.body, myId]) ws.send(`INFO ${id}`);\n   49            break;\n   50          }\n   51          case 'INFO': {\n   52:           console.log(`Info for '${msg.origin}':`, msg.body);\n   53  \n   54            if(msg.origin == myId) ws.sendMessage({ type: 'QUIT', body: 'reason' });\n   ..\n   57          }\n   58          default: {\n   59:           console.log('Message:', msg);\n   60            break;\n   61          }\n   ..\n   67    while(ws.connected) {\n   68      let data = await ws.receive();\n   69: \n   70:     console.log('data:', { data });\n   71    }\n   72      let it = websocketEvents(ws.socket);\n\n/home/roman/Projects/plot-cv/dump-ast.js:\n   25  \n   26    filesystem.writeFile(name, data + '\\n');\n   27: \n   28:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   29  }\n   30  \n   ..\n   83      let ret = [];\n   84      /* console.log('file:', file);\n   85:     console.log('filesystem.getcwd():', filesystem.getcwd());*/\n   86      if(typeof file == 'string') ret.unshift(file);\n   87      if(line && col) ret = ret.concat([line, col]);\n   ..\n  297  \n  298    if(stat.in.mtimeMs > stat.out.mtimeMs) {\n  299:     console.log(`Generating '${outfile}' ...`);\n  300  \n  301      let stderr = filesystem.open('ast.err', 'w+');\n  ...\n  308      WriteFile(outfile, data);\n  309    } else {\n  310:     console.log(`Reading '${outfile}' ...`);\n  311      data = filesystem.readFile(outfile);\n  312    }\n  ...\n  400          .filter(([id, keys]) => keys.length > 1)\n  401      );\n  402: \n  403:     console.log('ids:', ids);\n  404      await ConsoleSetup({ colors: true, depth: 4, maxArrayLength: Infinity });\n  405:     console.log('idLists:', idLists);\n  406  \n  407      //\n  ...\n  458      let types = [...flat].filter(([k, v]) => isObject(v) && (('name' in v && typeRe.test(v.name)) || IsStruct(v)));\n  459      let typeKeys = types.map(([k, v]) => k);\n  460: \n  461:     console.log(\n  462        'types:',\n  463        types\n  ...\n  478      });\n  479      //console.log('allf:', allf.map(([k, v]) =>   NodeToString(v, 'expansionLoc')));\n  480:     console.log(\n  481        'allst:',\n  482        allst.map(([k, v]) => [\n\n/home/roman/Projects/plot-cv/test-midi.js:\n   63    while(byteArr.length && !(len = MIDIMessageLength(byteArr[0]))) byteArr.shift();\n   64    if(len && byteArr.length >= len) {\n   65:     console.log('MIDIMessageRead', { len });\n   66      return new MIDIMessage(byteArr.splice(0, len));\n   67    }\n   ..\n   83      binary: true,\n   84      onConnect(ws, req) {\n   85:       console.log('onConnect', { ws, req });\n   86      },\n   87      onClose(ws, reason) {\n   88:       console.log('onClose', { ws, reason });\n   89      },\n   90      onHttp(req, resp) {\n   91:       console.log('onHttp', { req, resp });\n   92      },\n   93      onFd(fd, rd, wr) {\n   ..\n  101          let stream = new MIDIStream(data);\n  102          let event = MIDIEvent.read(stream, status);\n  103:         console.log('onMessage', { event });\n  104        } catch(e) {\n  105:         console.log('onMessage.exception', e.message, e.stack);\n  106        }\n  107      },\n  108  \n  109      onError(ws, error) {\n  110:       console.log('onError', ws, error);\n  111      }\n  112    });\n  ...\n  117      inspectOptions: { compact: 2, customInspect: true /*, numberBase: 16*/ }\n  118    });\n  119:   console.log('midi', Object.keys({ MIDIEvent, MIDIStream }));\n  120  \n  121    const debug = false;\n  ...\n  142        let [num] = new Uint8Array(b);\n  143        let ch = String.fromCharCode(num);\n  144:       console.log('Read byte ', num, ` ${quote(ch, \"'\")}`);\n  145  \n  146        if(num == 4) std.exit(0);\n\n/home/roman/Projects/plot-cv/cv-shell.js:\n   45      })\n   46      .catch(e => {\n   47:       console.error(moduleName + ':', e);\n   48        done = true;\n   49      });\n   ..\n   62      //console.log('repl.show', arg);\n   63      if(arg instanceof cv.Mat) {\n   64:       console.log('arg', arg);\n   65        if(!arg.empty) {\n   66          let win = defaultWin();\n   ..\n   87      load: [\n   88        image => {\n   89:         console.log('load', { image });\n   90        },\n   91        'loads an image / video',\n   ..\n  100  \n  101          const tab = paths.filter(p => p.startsWith(pattern)); //.map(p => p.replace(arg, ''));\n  102: \n  103:         console.log('complete', { line, arg, pos });\n  104          return { tab, pos: 0, ctx: {} };\n  105        }\n  106      ]\n  107    };\n  108: \n  109:   console.log = repl.printFunction((...args) => {\n  110:     console.log('printFunction');\n  111      log(console.config(repl.inspectOptions), ...args);\n  112    });\n\n/home/roman/Projects/plot-cv/chars.js:\n   60      //console.log({char,c,code});\n   61      //console.log(`case '${char}': return ${code};`);\n   62:     console.log(`case ${code}: return '${char}';`);\n   63    }\n   64    i++;\n\n/home/roman/Projects/plot-cv/test-mmap.js:\n   29        }\n   30      }\n   31:     console.log(address, data, ` |${chars}|`);\n   32    }\n   33  }\n   ..\n   70  \n   71    let fd = os.open(args[0], os.O_RDONLY);\n   72:   console.log('fd', fd);\n   73:   console.log('args[0]', args[0]);\n   74    let [st, err] = os.stat(args[0]);\n   75:   console.log('st', st);\n   76  \n   77    const { size } = st;\n   78:   console.log('size', size);\n   79  \n   80    let map = mmap(0, size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);\n   81: \n   82:   console.log('map', toPointer(map));\n   83:   console.log('map', map);\n   84  \n   85    // console.log('array', array);\n   ..\n  108          let buf = dupArrayBuffer(map, offset, length);\n  109          /*console.log('map', toPointer(map));\n  110:         console.log('buf', toPointer(buf) - toPointer(map));\n  111:         console.log('buf', buf);\n  112:         console.log('offset', offset);\n  113:         console.log('length', length);*/\n  114  \n  115          let arr = new Uint32Array(buf, 4, 1);\n  ...\n  155      const mask = Mask(str);\n  156      /*console.log('needle',  needle);\n  157:     console.log('mask', mask);\n  158  */\n  159      let pos,\n  ...\n  172    }\n  173    const results = patterns.map(([pattern, description], i) => {\n  174:     console.log(`[${i}] Searching ${description} [ ${pattern} ]`);\n  175      let results = searchAll(pattern).map(offset => ({\n  176        offset,\n  ...\n  181      return [description, results];\n  182    });\n  183: \n  184:   console.log('results', console.config({ compact: 3, depth: Infinity }), results);\n  185  \n  186    let offsets = results.map(([desc, r]) => {\n  187      const { offset, rva } = r[0] ?? {};\n  188      if(offset == 'number') {\n  189:       console.log(`RVA`, rva);\n  190      }\n  191      return [desc, offset];\n  ...\n  194    //offsets = [offsets[0], offsets[3]]\n  195    offsets = offsets.map((a, i) => [i, a]);\n  196:   console.log(\n  197      'offsets',\n  198:     console.config({ /*numberBase: 10, */ compact: 1 }),\n  199      offsets.filter(([i, [name, offset]]) => offset !== undefined).reduce((acc, [i, a]) => ({ ...acc, [i]: a }), {})\n  200    );\n  201  \n  202    offsets = offsets.filter(([i, [name, offset]]) => offset !== undefined);\n  203: \n  204:   console.log('offsets', offsets);\n  205  \n  206    // offsets = offsets.slice(0, 4);\n  ...\n  209  \n  210      if(typeof rep == 'function') {\n  211:       console.log('offset', offset);\n  212:       console.log('patterns[i]', patterns[i]);\n  213  \n  214        rep(map, offset, Pattern(patterns[i][0]).length);\n  ...\n  219          const dst = dupArrayBuffer(map, offset, buffer.byteLength);\n  220          const diff = toPointer(dst) - toPointer(map);\n  221:         console.log(`patch[${i}]`, {\n  222            map: +toPointer(map),\n  223            dst: +toPointer(dst),\n  ...\n  227  \n  228          mprotect(dst, dst.byteLength, PROT_WRITE);\n  229:         console.log(`replacement`, new Uint8Array(buffer));\n  230  \n  231          memcpy(dst, buffer);\n  232:         console.log(`dst[${i}]`, dst);\n  233        }\n  234      }\n  ...\n  236    //  let string = toString(map);\n  237    /*  let string = array.reduce((acc,byte) => acc+String.fromCodePoint(byte), '');\n  238: \n  239:     console.log('string', string.length);*/\n  240  \n  241    /*  for(let [offset, length, patch] of [\n  ...\n  249      let range = new Uint8Array(map, offset, length);\n  250      let bin = map.slice(offset, offset + length);\n  251:     console.log(bin);\n  252  \n  253      let outFd = os.open(`0x${offset.toString(16).padStart(8, '0')}-${length}.bin`, os.O_TRUNC | os.O_CREAT | os.O_WRONLY, 0o644);\n  ...\n  255      os.write(outFd, bin, 0, length);\n  256      os.close(outFd);\n  257: \n  258:     console.log(`\\n${length} bytes from ${offset}:\\n`);\n  259      PrintSlice(array, offset, offset + length, 16);\n  260  \n  ...\n  262        range[i] = patch[i];\n  263      }\n  264:     console.log(`\\nPatched:\\n`);\n  265      PrintSlice(array, offset, offset + length, 16);\n  266    }*/\n  ...\n  272    let r = os.write(outFd, map, 0, size);\n  273    /*console.log('map', toPointer(map));\n  274:   console.log('map', map);\n  275:   console.log('size', size);*/\n  276: \n  277:   console.log(`Wrote ${r} bytes`);\n  278    os.close(outFd);\n  279  \n  ...\n  285    main(...scriptArgs.slice(1));\n  286  } catch(error) {\n  287:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  288    std.exit(1);\n  289  } finally {\n\n/home/roman/Projects/plot-cv/grammar-xpath.js:\n    5      let r = parser(str, pos);\n    6      if(r[0] || name.startsWith('direct'))\n    7:       console.log('matched (' + name + ') ' + pos + ' - ' + r[2] + \": '\", r[1], \"'\");\n    8      return r;\n    9    };\n\n/home/roman/Projects/plot-cv/test-cv.js:\n   33  function WriteImage(name, mat) {\n   34    cv.imwrite(name, mat);\n   35:   console.log(`Wrote '${name}' (${mat.size}).`);\n   36  }\n   37  \n   ..\n   54        .filter(([k, v]) => !isNaN(v))\n   55    );\n   56:   console.log('LoadConfig:', configObj);\n   57    return configObj;\n   58  }\n   ..\n   68    // console.log('cv', cv);\n   69    //console.log('Object.keys(cv)', Object.keys(cv));\n   70:   console.log('Util.getMethodNames(cv)', Util.getMethodNames(cv, Infinity, 0));\n   71:   console.log('cv.HoughLines', cv.HoughLines);\n   72:   console.log('cv.ALIGN_RIGHT', cv.ALIGN_RIGHT);\n   73  \n   74    let line = new Line(0, 0, 50, 50);\n   75: \n   76:   console.log('line', line);\n   77  \n   78    let clahe = new CLAHE();\n   79:   console.log('clahe', clahe);\n   80  \n   81    let image;\n   ..\n   84    for(let moduleName of moduleNames) Util.tryCatch(() => eval(`globalThis[moduleName] = ${moduleName};`));\n   85    let ctors = new Map(moduleNames.map(name => [name, globalThis[name]]));\n   86:   console.log('globalThis:', Object.keys(globalThis));\n   87:   console.log('modules:', inspect(ctors));\n   88    if(globalThis.Point) {\n   89      let point = new Point(25, 75);\n   90:     console.log(`inspect(point)`, inspect(point));\n   91    }\n   92    function toHex(n, b = 2) {\n   ..\n   99      if(rr) {\n  100        const { x, y, width, height } = rr;\n  101:       console.log('rect:', x, y, width, height);\n  102      }\n  103    }\n  104    if(globalThis.Mat) {\n  105      let mat = new Mat(new Size(10, 10), Mat.CV_8UC4);\n  106:     console.log(`Mat.CV_8UC3`, toHex(Mat.CV_8UC3), Mat.CV_8UC3);\n  107:     console.log(`Mat.CV_8UC4`, toHex(Mat.CV_8UC4), Mat.CV_8UC4);\n  108:     console.log(`Mat.CV_8SC3`, toHex(Mat.CV_8SC3), Mat.CV_8SC3);\n  109:     console.log(`Mat.CV_8SC4`, toHex(Mat.CV_8SC4), Mat.CV_8SC4);\n  110:     console.log(`Mat.CV_32FC1`, toHex(Mat.CV_32FC1), Mat.CV_32FC1);\n  111:     console.log(`Mat.CV_32FC4`, toHex(Mat.CV_32FC4), Mat.CV_32FC4);\n  112:     console.log(`0x3ff`, toHex(0x3ff));\n  113:     console.log(`inspect(mat)`, inspect(mat));\n  114:     console.log(`mat.channels`, mat.channels);\n  115:     console.log(`mat.depth`, mat.depth);\n  116:     console.log(`1 << mat.depth`, 1 << mat.depth);\n  117:     console.log(\n  118        `Mat[DEPTH]`,\n  119        Object.keys(Mat).find(k => Mat[k] === mat.depth)\n  120      );\n  121:     console.log(\n  122        `Mat[TYPE]`,\n  123        Object.keys(Mat).find(k => Mat[k] === mat.type)\n  ...\n  125      let row0 = mat.row(0);\n  126      let col0 = mat.col(0);\n  127:     console.log(`mat.row(0)`, row0);\n  128      for(let r = 0; r < mat.rows; r++)\n  129        for(let c = 0; c < mat.cols; c++) {\n  130          const v = (r << 24) | c;\n  131:         console.log(`mat.set(${r},${c},0x${v.toString(16)})`, mat.set(r, c, v));\n  132        }\n  133:     console.log(`mat.set(0,1,0xcafebabe)`, mat.set(0, 1, 0xcafebabe));\n  134:     console.log(`mat.set(0,2,0xc01dd00d)`, mat.set(0, 2, 0xc01dd00d));\n  135:     console.log(`row0.at(0,0)`, row0.at(0, 0));\n  136:     console.log(`mat.at(0,0)`, mat.at(0, 0));\n  137:     console.log(`mat.at(new Point(0,0))`, mat.at(new Point(0, 0)));\n  138      let it = row0[Symbol.iterator]();\n  139:     console.log(`row0[Symbol.iterator]()`, it);\n  140      let step = it.next();\n  141:     console.log(`it.next()`, step.done, step.value);\n  142      let i = 0;\n  143      for(let x of row0.values()) {\n  144:       console.log(`row0.values()[${i++}]`, x);\n  145      }\n  146      i = 0;\n  147      it = row0.keys();\n  148:     console.log(`row0.keys()`, it);\n  149:     console.log(`row0.keys().next`, it.next);\n  150:     console.log(`row0.keys()[Symbol.iterator]`, it[Symbol.iterator]);\n  151      let v;\n  152      while(true) {\n  153        v = it.next();\n  154        if(v.done) break;\n  155:       console.log(`row0.keys() #${i++}`, v.value, v.value.length);\n  156      }\n  157      i = 0;\n  158      for(let [key, value] of row0.entries()) {\n  159:       console.log(`row0.entries() #${i++}`, key, '0x' + ('00000000' + value.toString(16)).slice(-8));\n  160      }\n  161      i = 0;\n  162      for(let [key, value] of col0.entries()) {\n  163:       console.log(`col0.entries() #${i++}`, key, '0x' + ('00000000' + value.toString(16)).slice(-8));\n  164      }\n  165      /*let range = mat.rowRange(2, 8);\n  166      i = 0;\n  167      for(let [[row, col], value] of range) {\n  168:       console.log(`range[${i++}] row=${row} col=${col} value=0x${('00000000' + value.toString(16)).slice(-8)}`);\n  169      }\n  170      i = 0;\n  ...\n  172        let roi = mat.roi(rr);\n  173        for(let [[row, col], value] of roi) {\n  174:         console.log(`roi[${i++}] row=${row} col=${col} value=0x${('00000000' + value.toString(16)).slice(-8)}`);\n  175        }\n  176        for(let r = 0; r < roi.rows; r++)\n  177          for(let c = 0; c < roi.cols; c++) {\n  178            const v = 0x7f000000 | ((r << 16) | c);\n  179:           console.log(`roi.set(${r},${c},0x${v.toString(16)})`, roi.set(r, c, v));\n  180          }\n  181        roi.setTo(...Util.repeat(4 * 5, 0xffffffff));\n  ...\n  183      i = 0;\n  184      for(let [[row, col], value] of mat) {\n  185:       console.log(`mat[${i++}] row=${row} col=${col} value=0x${('00000000' + value.toString(16)).slice(-8)}`);\n  186      }\n  187      let fmat = new Mat(new Size(10, 10), Mat.CV_32FC1);\n  188      const values = Util.repeat(fmat.rows * fmat.cols, 0.5);\n  189:     console.log(`fmat setTo`, values);\n  190      fmat.setTo(...values);\n  191      for(let [[row, col], value] of fmat) {\n  192:       console.log(`fmat[${i++}] row=${row} col=${col} value=${value}`);\n  193      }*/\n  194    }\n  ...\n  196      let ll = [new Line(0, 0, 50, 50), new Line(50, 50, 50, 75), new Line(50, 75, 100, 75)];\n  197      for(let line of ll) {\n  198:       console.log('line:', line.x1, line.y1, line.x2, line.y2);\n  199        const { a, b } = line;\n  200:       console.log('a =', a);\n  201:       console.log('b =', b);\n  202:       console.log('line[0] =', line[0]);\n  203:       console.log('line[1] =', line[1]);\n  204:       console.log('line.toString() =', line.toString());\n  205        let i = 0;\n  206        let arr = line.toArray();\n  207:       console.log('toArray:', line.toArray().join(','));\n  208:       console.log('values(): ', line.values());\n  209:       console.log(\n  210          'toPoints(): ',\n  211          [...line.toPoints()].map(p => Util.className(p))\n  212        );\n  213:       console.log('toString(): ', line.toString());\n  214:       console.log('new Line(50,50,320-50,240-25): ', new Line(50, 50, 320 - 50, 240 - 25));\n  215        let [x1, y1, x2, y2] = arr;\n  216:       console.log(`Line{${x1},${y1} ${x2},${y2}}`);\n  217        for(let num of line) {\n  218:         console.log('num:', i++, num);\n  219        }\n  220      }\n  221      if(globalThis.Rect) {\n  222        let r = new Rect(50, 100, 350, 200);\n  223:       console.log('r.br(): ', r.br());\n  224:       console.log('r.tl(): ', r.tl());\n  225:       console.log('r.area(): ', r.area());\n  226        if(globalThis.Point) {\n  227          let pt = new Point(75, 150);\n  228:         console.log(`r.contains(${pt}): `, r.contains(pt));\n  229          pt = new Point(51, 99);\n  230:         console.log(`r.contains(${pt}): `, r.contains(pt));\n  231        }\n  232        r = new Rect(50, 50, 0, 0);\n  233:       console.log('r.empty(): ', r.empty());\n  234      }\n  235    }\n  236    if(0) {\n  237:     console.log(`std.gc`, std.gc);\n  238:     console.log(`args`, args);\n  239      //console.log(`path`, inspect(path));\n  240:     console.log(`console`, Util.inspect(console));\n  241:     console.log(`filesystem.realpath('.')`, filesystem.realpath('.'));\n  242:     console.log(`filesystem.chdir('..')`, filesystem.chdir('..'));\n  243:     console.log(`filesystem.getcwd('.')`, filesystem.getcwd());\n  244:     console.log(`std.gc()`, std.gc());\n  245    }\n  246    return 'done';\n\n/home/roman/Projects/plot-cv/test-video.js:\n  143    });\n  144    let f = std.open('test-video.log', 'w');\n  145:   console.log('f.write', f.write);\n  146    globalThis.log = new Console(f, {\n  147      colors: true,\n  ...\n  159          false,\n  160          () => {\n  161:           console.log(`Usage: ${Util.getArgv()[0]} [OPTIONS] <video|device>`);\n  162            Util.exit(0);\n  163          },\n  ...\n  420      let paramName = paramNames[++paramIndex];\n  421      let param = params[paramName];\n  422: \n  423:     console.log('control #' + controlNumber.toString(16) + ' mapped to ' + paramName);\n  424      return value => (param.alpha = value / 127);\n  425    });\n  ...\n  430      let control = (channel << 4) | param1;\n  431      let value = param2;\n  432: \n  433:     console.log('MIDI event', { control, value });\n  434  \n  435      controlMap(control)(value);\n  ...\n  442      meter.start();\n  443      let deadline = Date.now() + frameDelay;\n  444:     console.log('frameDelay', frameDelay);\n  445  \n  446      let frameNo = video.get('pos_frames');\n  ...\n  448  \n  449      let gray = pipeline();\n  450: \n  451:     console.log('#0 deadline - Date.now()', deadline - Date.now());\n  452  \n  453      if(!win.imageRect.equals(clientRect)) {\n  ...\n  455        clientRect = win.imageRect;\n  456      }\n  457: \n  458:     console.log('#1 deadline - Date.now()', deadline - Date.now());\n  459      showOutput();\n  460:     console.log('#2 deadline - Date.now()', deadline - Date.now());\n  461  \n  462      while(true) {\n  ...\n  824    main(...scriptArgs.slice(1));\n  825  } catch(error) {\n  826:   console.log('FAIL: ', error && error.message, error && error.stack ? '\\n' + error.stack : '');\n  827    std.exit(1);\n  828  }\n  829: \n  830: console.log('SUCCESS');\n  831  \n\n/home/roman/Projects/plot-cv/test-imread.js:\n   66      name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D'\n   67    );\n   68: \n   69:   console.log('cv', features2d_names);\n   70  \n   71    args[0] ??= '/home/roman/Dokumente/Urzeitcode/font-14x24.png';\n   72    let name = path.basename(args[0]);\n   73    let dim = new cv.Size([...name.matchAll(/\\d+/g)].map(([n]) => +n));\n   74:   console.log('dim', dim);\n   75  \n   76    let img = cv.imread(args[0]);\n   ..\n   84    Grayscale(img, gray);\n   85    gray.convertTo(float, cv.CV_32F, 1.0 / 255.0);\n   86:   console.log('float', float);\n   87    let na = new Float32Array(float.buffer);\n   88:   console.log('na', na);\n   89  \n   90    let dbl = new cv.Mat();\n   ..\n   99  \n  100    let segments = [...SegmentRect(img.size, dim)];\n  101:   console.log('segments', console.config({ compact: 0 }), segments);\n  102    let i = 0;\n  103    for(let segment of segments) {\n  104      let subsegs = [...SegmentRect(segment, new cv.Size(dim.width, 8))];\n  105: \n  106:     console.log('subsegs', chars[i], console.config({ compact: 0 }), subsegs);\n  107      let j = 0;\n  108      for(let subseg of subsegs) {\n  ...\n  110  \n  111        let asc = Image2ASCII(segimg, bit => (bit ? '██' : '  '));\n  112:       console.log(j + '\\n' + asc);\n  113        j++;\n  114      }\n  ...\n  122    cv.Canny(gray, canny, 0, 90, 3);\n  123    cv.findContours(canny, (contours = []), (hier = new cv.Mat()), cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);\n  124: \n  125: \n  126:   console.log('contours.length', contours.length);\n  127  \n  128    cv.cvtColor(gray, img, cv.COLOR_GRAY2BGR);\n  ...\n  149  \n  150    cv.waitKey(-1);\n  151: \n  152:   console.log('EXIT');\n  153  }\n  154  try {\n  155    main(...scriptArgs.slice(1));\n  156  } catch(error) {\n  157:   console.log(`FAIL: ${error?.message}\\n${error?.stack}`);\n  158    std.exit(1);\n  159  } finally {\n  160:   console.log('SUCCESS');\n  161  }\n  162  \n\n/home/roman/Projects/plot-cv/io-helpers.js:\n  268    do {\n  269      let r = await waitRead(fd);\n  270:     console.log('r', r);\n  271      ret = typeof fd == 'number' ? await fs.read(fd, buf) : await fd.read(buf);\n  272      if(ret > 0) {\n  ...\n  287    fs.closeSync(pipe);\n  288    let status = child.wait();\n  289:   console.log('child', child);\n  290    return { written, status };\n  291  }\n  ...\n  311      let result;\n  312      result = fn.apply(thisObj ?? this, args);\n  313:     console.log(\n  314        'Function ' + name + '(',\n  315        ...args.map(arg => inspect(arg, { colors: false, maxStringLength: 20 })),\n  ...\n  383    //args.unshift('-sS');\n  384    args.unshift('--tcp-fastopen', '--tcp-nodelay');\n  385: \n  386:   console.log('FetchURL', console.config({ maxArrayLength: Infinity, compact: false }), { args });\n  387  \n  388    let child = /* child_process.spawn*/ Spawn('curl', args, { block: false, stdio: ['inherit', 'pipe', 'pipe'] });\n  389  \n  390    let [, out, err] = child.stdio;\n  391: \n  392:   console.log('child', { out, err });\n  393  \n  394    let output = '',\n  ...\n  405    });\n  406    let flags = child_process.WNOHANG;\n  407:   console.log('flags', flags);\n  408    child.wait(flags);\n  409  \n  ...\n  411  \n  412    status = child.wait();\n  413: \n  414:   console.log('FetchURL', { /* output: escape(output), errors,*/ status });\n  415  \n  416    return output;\n\n/home/roman/Projects/plot-cv/ws-worker.js:\n  136        setLog((module, msg) => {\n  137          if(/ERROR/.test(msg)) throw new Error(msg);\n  138:         console.log(`${module}.log: ${msg}`);\n  139        });\n  140        CreateServer(ev);\n  ...\n  163    WorkerMain();\n  164  } catch(error) {\n  165:   console.log(`FAIL: ${error?.message}\\n${error?.stack}`);\n  166    std.exit(1);\n  167  }\n\n/home/roman/Projects/plot-cv/test-meriyah.js:\n   47      if(!error) {\n   48        let outputFile = path.basename(arg, path.extname(arg)) + '.ast.json';\n   49:       console.log(`Parsing '${arg}' succeeded, writing AST to '${outputFile}'`);\n   50        fs.writeFileSync(outputFile, JSON.stringify(ast, null, 2));\n   51      } else {\n   ..\n   61  } finally {\n   62    if(error) {\n   63:     console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   64:     console.log('FAIL');\n   65      Util.exit(1);\n   66    } else {\n   67:     console.log('SUCCESS');\n   68    }\n   69  }\n\n/home/roman/Projects/plot-cv/test-parsexml.js:\n   10  \n   11    let data = filesystem.readFile(args[0] ?? 'BreadboardContacts.out.xml', 'utf-8');\n   12:   console.log('data:', data);\n   13  \n   14    // let result = parse2(Util.bufferToString(data));\n   15    let result = parse2(data);\n   16:   console.log('result:', Util.typeOf(result));\n   17:   console.log('result.length:', result.length);\n   18:   console.log('result[0]:', result[0]);\n   19:   console.log('result:', result);\n   20  \n   21    let xml = toXML(result, { depth: Infinity, quote: '\"', indent: '' });\n   22:   console.log('xml:', xml);\n   23  }\n   24  \n\n/home/roman/Projects/plot-cv/list-exports.js:\n   58    let f = std.open(file, 'w+');\n   59    f.puts(tok);\n   60:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   61  }\n   62  \n   ..\n  453    main(...scriptArgs.slice(1));\n  454  } catch(error) {\n  455:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  456    std.exit(1);\n  457  }\n\n/home/roman/Projects/plot-cv/bjson.js:\n   10  });\n   11  const WriteJSON = async (filename, obj) => {\n   12:   console.log('WriteJSON', filename);\n   13    let json = JSON.stringify(obj, null, 2);\n   14    return filesystem.write(filename, json);\n   ..\n   22  \n   23  const ReadJSON = async filename => {\n   24:   console.log('ReadJSON', filename);\n   25    let data = filesystem.readFile(filename);\n   26    return JSON.parse(data);\n   ..\n   42      args\n   43    );\n   44:   console.log('main', params);\n   45  \n   46    let output = params.output ? filesystem.open(params.output, 'w+') : filesystem.stdout;\n\n/home/roman/Projects/plot-cv/test-archive.js:\n    3  \n    4  function main(...args) {\n    5:   console.log('Archive.version', Archive.version);\n    6  \n    7    let ar = Archive.read(args[0] ?? 'quickjs-2021-03-27.tar.xz');\n    8: \n    9:   console.log('ar', ar);\n   10    let buf = new ArrayBuffer(1024);\n   11  \n   ..\n   13      if(ent.pathname.endsWith('/')) continue;\n   14      //if(!/\\.xml$/.test(ent.pathname)) continue;\n   15:     console.log('ent', ent);\n   16  \n   17      ar.extract(ent, 0, (archive, entry) => {\n   18:       console.log('extract progress', archive.filterBytes(0), archive.filterBytes(-1));\n   19      });\n   20      /*  let r = ar.read()\n   21:    console.log('r', r && r.byteLength, r && ent.size - r.byteLength);*/\n   22    }\n   23:   console.log('ar.fileCount', ar.fileCount);\n   24  }\n   25  \n   ..\n   27    main(...scriptArgs.slice(1));\n   28  } catch(error) {\n   29:   console.log(error);\n   30:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   31    std.exit(1);\n   32  } finally {\n   33:   console.log('SUCCESS');\n   34  }\n   35  \n\n/home/roman/Projects/plot-cv/grammar-INI.js:\n    5      let r = parser(str, pos);\n    6      if(r[0] || name.startsWith('direct'))\n    7:       console.log('matched (' + name + ') ' + pos + ' - ' + r[2] + \": '\", r[1], \"'\");\n    8      return r;\n    9    };\n\n/home/roman/Projects/plot-cv/repl.js:\n   43      filesystem.PortableFileSystem(filesystem => {\n   44        fs = filesystem;\n   45:       console.log('process', process);\n   46        input = globalThis.process && process.stdin ? process.stdin : std.in;\n   47        output = globalThis.process && process.stderr ? process.stderr : std.out;\n   ..\n 1600            `Promise resolved to:`,\n 1601            Util.typeOf(value),\n 1602:           console.config({ depth: 1, multiline: true }),\n 1603            value\n 1604          );\n ....\n 2031  \n 2032      /* console.options.depth = 2;\n 2033:     console.options.compact = 2;\n 2034:     console.options.maxArrayLength = Infinity;*/\n 2035  \n 2036      await repl.termInit();\n ....\n 2050  \n 2051      /* console.options.depth = 2;\n 2052:     console.options.compact = 2;\n 2053:     console.options.maxArrayLength = Infinity;*/\n 2054  \n 2055      repl.termInit();\n\n/home/roman/Projects/plot-cv/xml2react.js:\n   64      let data = ReadFile(arg);\n   65      let [doctype, xml] = readXML(data);\n   66: \n   67:     console.log('xml', xml);\n   68  \n   69      let str = '';\n   ..\n   71        str += frag;\n   72      }\n   73:     console.log('str', str);\n   74    }\n   75  }\n\n/home/roman/Projects/plot-cv/resolve-imports2.js:\n  241        position = position.toString(true, (p, i) => (i == 0 ? path.relative(ES6Env.cwd, p) : p)).replace(/1;33/, '1;34');\n  242      /* const InspectFn = ret.bindings[inspectSymbol];\n  243:   console.log(Util.ansi.text(Util.ucfirst((type + '').toLowerCase()), 1, 31) + Util.ansi.text(` @ `, 1, 36),\n  244        InspectFn ? InspectFn.call(ret.bindings) : '',\n  245        'importNode:',\n  ...\n  413    if(typeof data != 'string') data = '' + data;\n  414    fs.writeFileSync(name, data + '\\n');\n  415:   console.log(`Wrote ${name}: ${data.length} bytes`);\n  416  }\n  417  \n  ...\n  465      })\n  466    );\n  467:   console.options = consoleOpts;\n  468    let params = Util.getOpt(\n  469      {\n  ...\n  474      args\n  475    );\n  476:   console.log('params', params);\n  477    const re = {\n  478      name: /^(process|readline)$/,\n  ...\n  483    if(args.length == 0)\n  484      args = ['lib/geom/point.js', 'lib/geom/size.js', 'lib/geom/trbl.js', 'lib/geom/rect.js', 'lib/dom/element.js'];\n  485:   console.log('args:', args);\n  486    let r = [];\n  487    let processed = [];\n  ...\n  496      while(/:[0-9]+:?$/.test(arg)) arg = arg.replace(/:[0-9]*$/g, '');\n  497      let ret;\n  498:     console.log('arg:', arg);\n  499      if((ret = await processFile(/*ES6Env.pathTransform*/ arg)) < 0) return -ret;\n  500      optind++;\n  ...\n  502  \n  503    let success = Object.entries(processed).filter(([k, v]) => !!v).length != 0;\n  504:   console.log('processed files:', processed);\n  505    DumpFile(`${name}.es`, r.join('\\n'));\n  506  \n  ...\n  544        : nodes;\n  545    }\n  546: \n  547:   console.log(`\\nModules:\\n\\n  ` + ES6Module.tree().replaceAll('\\n', '\\n  '));\n  548:   console.log('exportMap:', exportMap);\n  549:   console.log('importMap(1):', importMap);\n  550  \n  551    function removeFile(file) {\n  ...\n  558  \n  559      function Verbose(...args) {\n  560:       console.log(...[`${file}:`, ...args]);\n  561      }\n  562  \n  ...\n  589      Verbose(`${file} parsed:`, { data, error });\n  590      function generateFlatAndMap() {\n  591:       console.log('ast:', ast);\n  592        flat = deep.flatten(ast, new Map(), node => typeof node == 'object' && node != null);\n  593:       console.log(\n  594          'flat:',\n  595          [...flat].map(([p, n]) => [p, n])\n  ...\n  652              }\n  653              //          let p = st.pathOf(n);\n  654:             console.log('n:', p + '', cl);\n  655  \n  656              //          console.log(\"it:\",{p,n}, Util.className(n));\n  ...\n  661            return false;\n  662          });\n  663:         console.log(\n  664            'moduleImports:',\n  665            moduleImports.map(([p, n]) => [p, PrintAst(n)])\n  ...\n  863                if(node.right && node.right.type == 'FunctionDeclaration') {\n  864                  const { right } = node;\n  865:                 console.log('GetName', { right });\n  866                  return Identifier.string(right.id);\n  867                }\n  ...\n  876            if(typeof exp == 'symbol') return Symbol.keyFor(exp);\n  877            if(typeof exp == 'string') return exp;\n  878:           console.log('exp:', exp);\n  879          }\n  880          function ExportSymbol(exp) {\n  ...\n 1147        function GetImportBindings([node, path], retMap = /*(arg => arg) ||*/ arg => new Map(arg)) {\n 1148          if(node instanceof ImportDeclaration) {\n 1149:           console.log('specifiers:', node.specifiers);\n 1150            return [\n 1151              node,\n ....\n 1170          //console.log(\"parent:\", path.split('.').slice(0, -1).join('.'), path);\n 1171          let code = PrintAst(node);\n 1172: \n 1173:         console.log('code:', code);\n 1174          if(node instanceof CallExpression || node.type == 'CallExpression' || code.startsWith('require(')) {\n 1175            let source = (node.arguments[0] && Literal.string(node.arguments[0])) || null;\n 1176            let parentPath = path.split('.').slice(0, -1).join('.');\n 1177:           console.log('parentPath:', parentPath);\n 1178            let parent = /*deep.get(ast, parentPath); // ??*/ flat.get(parentPath);\n 1179  \n ....\n 1189              parent = deep.get(ast, parentPath); // st.parentNode(parent);\n 1190            }\n 1191:           console.log('parent:', parent);\n 1192  \n 1193            if('id' in parent) {\n ....\n 1200                let { properties } = parent.id;\n 1201                parent.id.properties[0].key = new Identifier('XXX');\n 1202: \n 1203:               console.log('GetImportBindings:', PrintAst(parent.id));\n 1204  \n 1205                return [\n ....\n 1210            }\n 1211          }\n 1212:         console.log('GetImportBindings:', node, node.callee, node.arguments);\n 1213          throw new Error('Unhandled import bindings');\n 1214        }\n ....\n 1375      ECMAScriptParser.instrumentate();\n 1376      const debug = await Util.getEnv('DEBUG');\n 1377:     console.log('FILE:', file);\n 1378:     console.log('DEBUG:', debug);\n 1379:     console.log('DATA:', Util.abbreviate(data));\n 1380      parser = new ECMAScriptParser(data.toString(), file, debug ?? false);\n 1381      g.parser = parser;\n ....\n 1383      parser.addCommentsToNodes(ast);\n 1384    } catch(err) {\n 1385:     console.log('err:', err);\n 1386      error = err;\n 1387    } finally {\n ....\n 1434      else r = SearchModuleInPath(module, file, position);\n 1435    } catch(err) {\n 1436:     console.log(`GetFile(`, module, ', ', position, `) =`, err);\n 1437      throw err;\n 1438    }\n ....\n 1548    }\n 1549    if(err) {\n 1550:     console.log(parser.lexer.currentLine());\n 1551:     console.log(Util.className(err) + ': ' + (err.msg || err) + '\\n', err.stack);\n 1552    }\n 1553    let lexer = parser.lexer;\n ....\n 1556    DumpFile('trace.log', parser.trace());\n 1557    if(fail) {\n 1558:     console.log('\\nerror:', err.msg, '\\n', parser.lexer.currentLine());\n 1559    }\n 1560:   console.log('Finish: ' + (fail ? 'error' : 'success'));\n 1561    return !fail;\n 1562  }\n\n/home/roman/Projects/plot-cv/test-worker.js:\n   26  \n   27  const log = (...args) => console.log('WORKER', ...args);\n   28: \n   29: console.log('parent',parent);\n   30  \n   31  parent.postMessage('test');\n   32  `);\n   33: \n   34:   console.log('worker', inspect(worker));\n   35:   console.log('worker', Object.getOwnPropertyNames(Object.getPrototypeOf(Object.getPrototypeOf(worker))));\n   36:   console.log('worker', Object.getPrototypeOf(worker).constructor.name);\n   37    counter = 0;\n   38    worker.onmessage = HandleMessage;\n   39    // console.log('worker', Object.getOwnPropertyNames(Object.getPrototypeOf(worker)).reduce((acc, n) => ({ ...acc, [n]: worker[n] }), {}));\n   40:   console.log('TestWorker', worker.onmessage);\n   41  \n   42    os.setReadHandler(0, () => {\n   ..\n   48  \n   49  function HandleMessage(e) {\n   50:   console.log('HandleMessage', e);\n   51    var ev = e.data;\n   52    switch (ev.type) {\n\n/home/roman/Projects/plot-cv/svg-scale.js:\n  131          Object.assign(attributes, style);\n  132          delete attributes.style;\n  133:         console.log('style:', style);\n  134        }\n  135  \n  ...\n  151    for(let [key, value] of flat) {\n  152      let { tagName, attributes, children } = value;\n  153:     console.log('attributes', Object.keys(attributes));\n  154      if(attributes && 'class' in attributes) {\n  155        let className = attributes['class'];\n  156:       console.log('className', className);\n  157  \n  158        let styleDeclarations = CSS.match(css, `.${className}`);\n  159: \n  160:       console.log('styleDeclarations', styleDeclarations);\n  161  \n  162        if(styleDeclarations.size) {\n  ...\n  174  \n  175    //  console.log('flat:', flatSVG(svg));\n  176:   console.log('css:', css);\n  177:   console.log('styleNodes:', styleNodes);\n  178    styleNodes.forEach(path => deep.unset(svg, path));\n  179  \n  ...\n  196  \n  197    //console.log('svg:', viewSize, aspect);\n  198:   console.log(size);\n  199    //console.log('attributes:', svg[0].attributes);\n  200  \n  ...\n  211      if(/^[-.\\d]+[\\*x][-.\\d]+$/.test(arg)) {\n  212        size = Size.fromString(arg);\n  213:       console.log(size);\n  214        continue;\n  215      }\n  ...\n  218    }\n  219    props = Util.unique(props).sort();\n  220:   console.log('props:', props.join(', '));\n  221  }\n  222  \n\n/home/roman/Projects/plot-cv/search-engine.js:\n   32    for(let engine of SearchEngines) {\n   33      let uri = engine.replace(/%s/g, query);\n   34:     console.log('URI', uri);\n   35      let url = new URL(uri);\n   36  \n   ..\n   43          block: false,\n   44          onConnect(ws, req) {\n   45:           console.log('onConnect', console.config({ compact: 1 }), { ws, req });\n   46          },\n   47          onHttp(req, resp) {\n   ..\n   49            let { body } = resp;\n   50            resp.text().then(data => {\n   51:             console.log('data', console.config({ maxStringLength: 100 }), { data: escape(data) });\n   52              fn(data, url);\n   53              resolve([url, data]);\n   ..\n   76  function ProcessDocument(resp) {\n   77    let doc = CreateDocument(resp);\n   78:   console.log('ProcessDocument', { doc });\n   79  \n   80    let raw = Node.raw(doc.body);\n   81:   console.log(\n   82      'ProcessDocument',\n   83:     console.config({ compact: 10, maxArrayLength: Number.MAX_SAFE_INTEGER, depth: Infinity, customInspect: true }),\n   84      { raw }\n   85    );\n   ..\n   98      return [p, v];\n   99    });\n  100: \n  101:   console.log('entries', console.config({ maxArrayLength: Number.MAX_SAFE_INTEGER }), entries);\n  102  \n  103    let elements = entries.map(([p, v]) => get(doc.body, p));\n  104:   console.log('elements', console.config({ maxArrayLength: Number.MAX_SAFE_INTEGER }), elements);\n  105    return elements;\n  106  }\n  ...\n  108  async function* SearchQuery(arg) {\n  109    let ita = [...Search(arg)];\n  110:   console.log('ita', ita);\n  111  \n  112     for await(let resp of await Repeater.race(ita)) {\n  113:     console.log('response', resp);\n  114     yield ProcessDocument(resp);\n  115    \n  ...\n  140  \n  141          let elements = ProcessDocument(data);\n  142:         console.log('elements', elements);\n  143        })\n  144      );\n  ...\n  150  \n  151  main(...scriptArgs.slice(1)).catch(err => {\n  152:   console.log('ERROR:', err.message, err.stack);\n  153    std.exit(1);\n  154  });\n\n/home/roman/Projects/plot-cv/sw.js:\n  253        messagePort.postMessage({ requested });\n  254      }\n  255: \n  256:     console.debug('message', { type, data, messagePort });\n  257    }\n  258  });\n\n/home/roman/Projects/plot-cv/grammar-geda-netlist.js:\n    5      let r = parser(str, pos);\n    6      /* if(r[0] || name.startsWith('direct'))\n    7:       console.log('matched (' + name + ') ' + pos + ' - ' + r[2] + \": '\", r[1], \"'\");*/\n    8      return r;\n    9    };\n\n/home/roman/Projects/plot-cv/test-psql.js:\n    5      'User ID=roman;Password=r4eHuJ;Host=localhost;Port=5432;Database=roman;Pooling=true;Min Pool Size=0;Max Pool Size=100;Connection Lifetime=0;'\n    6    );\n    7:   console.log('pq', pq);\n    8  \n    9    let result = PQexec(pq, 'SELECT * FROM test');\n   10:   console.log('result', result);\n   11    result = PQgetResult(pq);\n   12:   console.log('result', result);\n   13  \n   14    let error = PQerrorMessage(pq);\n   15:   console.log('error', error);\n   16  }\n   17  \n\n/home/roman/Projects/plot-cv/test-lexer.js:\n   19    let file = arg || './lib/ecmascript/parser.js';\n   20    let data = fs.readFileSync(file);\n   21:   console.log('data:', data);\n   22  \n   23    let lexer = new Lexer(data.toString(), file);\n   ..\n   26      do {\n   27        token = lexer.lex();\n   28: \n   29:       console.log(`tok(${token.id}):`, tokenColor(token));\n   30      } while(token.type != 'eof');\n   31    } catch(err) {\n   32:     console.log('ERROR:', err.message, err.stack);\n   33    }\n   34  }\n   ..\n   36    main(...Util.getArgs());\n   37  } catch(error) {\n   38:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   39  } finally {\n   40:   console.log('SUCCESS');\n   41  }\n   42  \n\n/home/roman/Projects/plot-cv/imagePipeline.js:\n   53      params.thresh1.createTrackbar('thresh1', win);\n   54      params.thresh2.createTrackbar('thresh2', win);\n   55:     console.log('win.imageRect (2)', win.imageRect);\n   56    }\n   57   \n   ..\n   73         \n   74          framePos = input.get('pos_frames');\n   75: \n   76:         console.log('dst(1)', dst);\n   77  \n   78          input.read(dst);\n   79:         console.log('dst(2)', dst);\n   80         \n   81          if(videoSize === undefined || videoSize.empty) videoSize = input.size.area ? input.size : dst.size;\n\n/home/roman/Projects/plot-cv/grammar-arith.js:\n    5      let r = parser(str, pos);\n    6      if(r[0] || name.startsWith('direct'))\n    7:       console.log('matched (' + name + ') ' + pos + ' - ' + r[2] + \": '\", r[1], \"'\");\n    8      return r;\n    9    };\n\n/home/roman/Projects/plot-cv/get-msys-packages.js:\n   38  const BASE_URL = 'https://repo.msys2.org';\n   39  async function main(...args) {\n   40:   console.log('main(', ...args, ')');\n   41    await ConsoleSetup({ breakLength: 80 });\n   42    await PortableFileSystem(fs => (filesystem = fs));\n   ..\n   47  \n   48    if(args.length == 0) args.unshift('.*');\n   49:   console.log('args:', args);\n   50    while(args.length > 0) {\n   51      a = [\n   ..\n   61    let data = {};\n   62    urls = urls.map(loc => BASE_URL + '/' + loc);\n   63:   console.log('urls:', urls);\n   64    for(let url of urls) {\n   65      ret = await processUrl(url, data);\n   66: \n   67:     console.debug(`url: ${url} ret:`, ret);\n   68    }\n   69    if(args.length == 0) args.unshift('.*');\n   70    /*let predicates = args.map(arg => new RegExp(arg));\n   71:   console.log(\"predicates:\", predicates);*/\n   72    let packages = Object.keys(data);\n   73    let files = [];\n   ..\n   78    let locations = packages.map(url => url.replace('https://repo.msys2.org/', ''));\n   79    let names = locations.map(url => url.replace(/(.*)(-[^-.]+)(\\.pkg\\..*)/g, '$1|$2|$3').split(/\\|/g));\n   80:   console.log('names.length:', names.length);\n   81: \n   82:   console.log('names:', names.slice(-10, -1));\n   83  \n   84    for(let i = 0; i < args.length; i++) {\n   ..\n   94      let pkgs = matches.map(loc => 'https://repo.msys2.org/' + loc.join(''));\n   95      /*console.log(\"re:\", re+'');\n   96: console.log(\"matches:\", matches);*/\n   97      if(pkgs.length == 0 || packages.length == pkgs.length) {\n   98:       console.log('re =', re, ' pkgs.length =', pkgs.length, ' pacakges.length =', packages.length);\n   99        pkgs = Util.filter(\n  100          packages,\n  ...\n  102        );\n  103        if(pkgs.length == 0 || packages.length == pkgs.length) {\n  104:         console.log('re =', re, ' pkgs.length =', pkgs.length, ' pacakges.length =', packages.length);\n  105:         console.error(`Number of packages ${pkgs.length} when matching ${re}`);\n  106          continue;\n  107          throw new Error(`Number of packages ${pkgs.length} when matching ${re}`);\n  ...\n  127      .join('-');\n  128    let installScript = `install-${host}.sh`;\n  129:   console.log(`Writing install script: '${installScript}' ...`);\n  130    let output = filesystem.open(installScript, 'w');\n  131    filesystem.write(output, `#!/bin/sh -x\\n`);\n  ...\n  156  \n  157    let expired = stat.mtime + 5 * 60 * 1000 < new Date();\n  158: \n  159:   console.log('expired:', expired);\n  160    let stream = expired ? execStream('sh', ['-c', `curl -s ${url}  | zcat | tee ${base}`]) : fs.createReadStream(base);\n  161  \n  162    let transform = await LineBufferStream();\n  163: \n  164:   console.log('base:', base);\n  165:   console.log('transform.:', transform.lines);\n  166    let [iterator, sink] = await RepeaterSink();\n  167    stream.pipe(transform);\n  ...\n  174    let obj;\n  175    /* for await(let line of iterator) {\n  176:     console.log('line:', Util.escape(line));\n  177    }*/\n  178  \n  ...\n  203  \n  204      /*    console.log(`key: ${key}`);\n  205:       console.log(`line #${++i}:`, line.replaceAll('\\n', '\\\\n'));*/\n  206    }\n  207  }\n  ...\n  214  \n  215    filesystem.writeFile(name, data + '\\n');\n  216: \n  217:   console.log(`Wrote ${name}: ${data.length} bytes`);\n  218  }\n  219  \n\n/home/roman/Projects/plot-cv/eagle-server.js:\n   19  \n   20  atexit(() => {\n   21:   console.log('atexit', atexit);\n   22    let stack = new Error('').stack;\n   23:   console.log('stack:', stack);\n   24  });\n   25  \n   ..\n   38    ];\n   39    repl.directives.d = [() => globalThis.daemon(), 'detach'];\n   40:   console.log = repl.printFunction((...args) => {\n   41      log('LOG', console.config(repl.inspectOptions), ...args);\n   42    });\n   ..\n  113  \n  114      /*  let testFiles = [...vfs.readdirSync('.')];\n  115:     console.log('vfs.readdirSync', console.config({ compact: false }), testFiles);*/\n  116    } catch(err) {\n  117:     console.log('err', err);\n  118    }\n  119  \n  ...\n  168  \n  169    const createWS = (globalThis.createWS = (url, callbacks, listen) => {\n  170:     console.log('createWS', { url, callbacks, listen });\n  171  \n  172      setLog(\n  ...\n  177              if(/BIND_PROTOCOL|DROP_PROTOCOL|CHECK_ACCESS_RIGHTS|ADD_HEADERS/.test(str)) return;\n  178              if(level == LLL_INFO) return;\n  179:             console.log(logLevels[level].padEnd(10), str.trim());\n  180            }\n  181      );\n  ...\n  184      let child, dbg;\n  185      let netfn = [client, server][+listen];\n  186:     console.log('createWS', { url, netfn });\n  187      return netfn(\n  188        url,\n  ...\n  224            ['/config']: function* config(req, res) {\n  225              const { body, headers } = req;\n  226:             console.log('/config', { req, res });\n  227:             console.log('*config', { body, headers });\n  228              yield '{}';\n  229            },\n  ...\n  232              const { query } = url;\n  233              const params = (typeof body == 'string' ? JSON.parse(body) : typeof body == 'object' ? body : null) ?? {};\n  234:             console.log('/files', console.config({ compact: 0 }), { params });\n  235              let ret,\n  236                argObj = {},\n  ...\n  238              if(args) {\n  239                argObj = GetArgs(args);\n  240:               console.log('/files', console.config({ compact: 0 }), { argObj });\n  241              }\n  242              ret = vfs.readdirSync('.', (fileName, filePath) => {\n  ...\n  246              res.type = 'application/json';\n  247              res.status = 200;\n  248: \n  249:             console.log('/files', console.config({ compact: 0 }), { args, res });\n  250              if(params.filter) {\n  251                let re = new RegExp(params.filter, 'gi');\n  ...\n  260          block: false,\n  261          onConnect(ws, req) {\n  262:           console.log('onConnect', { ws, req }, req && req.headers);\n  263  \n  264            Object.defineProperties(ws, {\n  ...\n  266                value: function sendMessage(msg) {\n  267                  let ret = this.send(JSON.stringify(msg));\n  268:                 console.log(`ws.sendMessage(`, msg, `) = ${ret}`);\n  269                  return ret;\n  270                },\n  ...\n  281          },\n  282          onClose(ws) {\n  283:           console.log('onClose', ws);\n  284            protocol.delete(ws);\n  285            sockets.delete(ws);\n  ...\n  288          },\n  289          onError(ws) {\n  290:           console.log('onError', ws);\n  291            protocol.delete(ws);\n  292            sockets.delete(ws);\n  ...\n  294  \n  295          onMessage(ws, data) {\n  296:           console.log('onMessage', ws, data);\n  297          },\n  298          onHttp(req, resp) {\n  ...\n  334      );\n  335    });\n  336:   console.log('XX');\n  337  \n  338    delete globalThis.DEBUG;\n  ...\n  360    function showSessions() {\n  361      let sessions = getSessions();\n  362:     console.log(\n  363        'sessions',\n  364:       console.config({ maxArrayLength: Infinity, depth: 4, customInspect: true, compact: 1 }),\n  365        sessions\n  366      );\n  ...\n  376  */\n  377    function quit(why) {\n  378:     console.log(`quit('${why}')`);\n  379  \n  380      let cfg = { inspectOptions: console.options };\n  ...\n  387    main(...scriptArgs.slice(1));\n  388  } catch(error) {\n  389:   console.log(`FAIL: ${error?.message ?? error}\\n${error?.message}`);\n  390  }\n  391  \n\n/home/roman/Projects/plot-cv/test-util.js:\n    5  \n    6  /*console.log(Util.escape(read('/proc/self/cmdline')));\n    7: console.log(Util.escape(read('/etc/hosts')));*/\n    8  //console.log(globalThis.options());\n    9  async function main(...args) {\n   ..\n   12  \n   13    function test(arg) {\n   14:     console.log('function test', { arg });\n   15      return -1;\n   16    }\n   ..\n   21  \n   22    return;\n   23:   console.log('Util.getPlatform():', Util.getPlatform());\n   24:   console.log('Util.getArgs():', Util.getArgs());\n   25:   console.log('Util.getArgv():', Util.getArgv());\n   26:   console.log('Util.scriptName():', Util.scriptName());\n   27    //  console.log('Util.now:', await Util.now);\n   28:   console.log('Util.now:', Util.now);\n   29:   console.log('Util.waitFor:', Util.waitFor);\n   30    for(let i = 0; i < 100; i += 10) console.log('Util.waitFor(10):', await Util.waitFor(10));\n   31    let now;\n   32:   console.log('Util.now:', (now = Util.now));\n   33:   console.log('Util.getNow():', Util.getNow());\n   34:   console.log('Util.isAsync(Util.now):', Util.isAsync(Util.now));\n   35:   console.log('now:', now);\n   36:   console.log('Util.now():', await now());\n   37    let obj = JSON.parse('{\"a\":1,\"b\":2}');\n   38: \n   39:   console.log('obj:', obj);\n   40:   console.log(`obj=${obj}`);\n   41:   console.log(`{a:1,b:2}: ${{ a: 1, b: 2 }}`);\n   42:   console.log(`await import('os'):`, Object.keys(await import('os')));\n   43:   console.log(`await import('std'):`, await import('std').catch(err => (console.log(err), err)));\n   44    //console.log(`await import('ffi.so'):`, await import('ffi.so'));\n   45    const { O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, O_CREAT, O_EXCL, O_TRUNC, O_TEXT } = filesystem;\n   46    let f = filesystem.open('test.txt', O_WRONLY | O_CREAT);\n   47:   console.log('write:', filesystem.write(f, 'test file\\n'));\n   48    filesystem.close(f);\n   49  \n   50    f = filesystem.open('test.txt', O_WRONLY | O_CREAT | O_EXCL);\n   51:   console.log('write:', filesystem.write(f, 'overwritten test file\\n'));\n   52    filesystem.close(f);\n   53  \n\n/home/roman/Projects/plot-cv/list-proxies.js:\n   23      tcp.setTimeout(defaultTimeout);\n   24      tcp.setNoDelay(true);\n   25:     console.log(`Connecting to ${host}:${port} ...`);\n   26      tcp.connect(port, host, () => finish(`Connected to ${host}:${port}`, start));\n   27      tcp.on('close', () => finish(null, start));\n   ..\n   56        },\n   57        res => {\n   58:         console.log('got result!');\n   59          resolve(res);\n   60  \n   61          /*   socket.write('GET / HTTP/1.1\\r\\n' + 'Host: www.google.com:80\\r\\n' + 'Connection: close\\r\\n' + '\\r\\n');\n   62        socket.on('data', chunk => {\n   63:         console.log((data = chunk.toString()));\n   64               resolve(data);\n   65   }); \n   66         socket.on('response', chunk => {\n   67:         console.log((data = chunk.toString()));\n   68             resolve(data);\n   69     });\n   70         socket.on('error', error => {\n   71:         console.log(\"error:\",error);\n   72          reject(error);\n   73        });  socket.on('close', () => {\n   74:         console.log(\"closed\");\n   75          reject();\n   76        });\n   ..\n  139      tcp.setTimeout(proxy.defaultTimeout);\n  140      tcp.setNoDelay(true);\n  141:     console.log(`Connecting to ${ip}:${port} ...`);\n  142      tcp.connect(port, ip, () => finish(`Connected to ${ip}:${port}`, start));\n  143      tcp.on('close', () => finish(null, start));\n  ...\n  163    await AcquireReader(sock, async r => {\n  164      const data = await r.read();\n  165:     console.log('r.read()=', data.value.toString());\n  166    });\n  167:   console.log(\"sock:\", sock);*/\n  168    /*let h = await new HTTPRequest('http://www.google.com', '178.238.229.236', 80);\n  169:   console.log('h:', h);\n  170    Util.exit(0);*/\n  171  \n  ...\n  184      new Repeater(async (push, stop) => {\n  185        for(let country of countries) {\n  186:         console.log(`Searching proxies in country '${country}'`);\n  187          try {\n  188            const proxyList = new ProxyList();\n  ...\n  191              await proxy.ping().then(push).catch(console.log);\n  192              /*  let check = await Check(proxy);\n  193:           console.log('\\nPROXY:', proxy, check, '\\n');\n  194            push(proxy);*/\n  195            }\n  ...\n  214        })\n  215          .on('data', async proxies => {\n  216:           console.log('got some proxies', proxies.length);\n  217            for(let p of proxies) {\n  218:             console.log('got proxy', p);\n  219              let proxy = new Proxy(p);\n  220              await proxy\n  ...\n  225          })\n  226          .on('error', error => {\n  227:           console.error('error!', (error + '').split(/\\n/g)[0]);\n  228          })\n  229          .once('end', () => {\n  ...\n  240          const flat = deep.flatten(json, new Map(), (v, k) => k.length > 1 && typeof v == 'object', (k, v) => [k.join('.'), v]\n  241          );\n  242:         console.log('flat:', flat.values());\n  243  \n  244          for(let entry of flat.values()) {\n  245:           console.log('proxy:', entry);\n  246            const { ip, port, country, anonymity, type } = entry;\n  247            if(!/germany/i.test(country)) continue;\n  248            const protocol = type.split(/[^A-Za-z0-9]+/g)[0].toLowerCase();\n  249: \n  250:           console.log('proxy:', { ip, port, country, anonymity, protocol });\n  251            let proxy = new Proxy({ ip, port, country, protocol, source: 'proxy-scraper' });\n  252            await proxy\n  ...\n  261      let results = [];\n  262      try {\n  263:       console.log(`Start`);\n  264        let i = 0;\n  265        for await(const proxy of Repeater.merge(proxies.slice(-1))) {\n  266          const { host, port, type } = proxy;\n  267:         console.log(`Proxy #${++i}:`, proxy); // 1, 2\n  268          Util.insertSorted(results, proxy);\n  269:         console.log(proxy.toString());\n  270          //  let response = await Check(proxy);\n  271  \n  ...\n  275        }\n  276      } catch(err) {\n  277:       console.log('ERROR:', err); // TimeoutError: 1000 ms elapsed\n  278      }\n  279  \n  ...\n  302      await fsPromises.unlink(tempfile);\n  303    } catch(err) {\n  304:     console.log(`ERROR writing '${filename}':`, err);\n  305      throw err;\n  306    }\n  307    const { bytesWritten } = ret;\n  308:   console.log(`Wrote '${filename}':`, bytesWritten);\n  309  }\n  310  \n\n/home/roman/Projects/plot-cv/test-sockets.js:\n   25  \n   26    let ret = sock.connect(addr);\n   27:   console.log('connect() =', ret, sock.errno);\n   28  \n   29    //await sock.waitWrite();\n   30    /*ret = await sock.send('TEST\\n');\n   31: \n   32:  console.log('connected',ret,sock);*/\n   33  \n   34    //await sock.waitRead();\n   35    let buf = new ArrayBuffer(1024);\n   36    ret = await sock.recv(buf);\n   37:   console.log('sock.recv() =', ret);\n   38:   console.log('buf =', escape(toString(buf, 0, ret)));\n   39  \n   40    sock.close();\n\n/home/roman/Projects/plot-cv/resampler.js:\n    1  function cout(string) {\n    2:   console.log(string);\n    3  }\n    4  \n\n/home/roman/Projects/plot-cv/debuggerprotocol.js:\n   43      const { request } = this.requests.get(request_seq);\n   44      this.requests.delete(request_seq);\n   45:     console.log(`handleResponse #${request_seq}`, request.command, /*cfg(),*/ response);\n   46  \n   47      switch (request.command) {\n   ..\n   56              location += ':' + line;\n   57            }\n   58:           console.log(`Stack Frame #${id}`, name.padEnd(20), location + (code ? `: ` + code : ''));\n   59          }\n   60          break;\n   ..\n   65    handleBreakpoints(message) {\n   66      const { breakpoints, request_seq, ...response } = message;\n   67:     console.log(`handleBreakpoints`, cfg(), message);\n   68      this.breakpoints = breakpoints;\n   69    }\n   ..\n   87  \n   88    handleEvent(event) {\n   89:     console.log('handleEvent', cfg(), event, this.sendMessage);\n   90      const stepMode = 'next';\n   91      switch (event.type) {\n   ..\n  112    sendMessage(type, args) {\n  113      const msg = args ? { type, ...args } : type;\n  114:     console.log('sendMessage', msg);\n  115      try {\n  116        const json = JSON.stringify(msg);\n  ...\n  120        return this.sock.send(`${toHex(json.length, 8)}\\n${json}`);\n  121      } catch(error) {\n  122:       console.log('sendMessage', error.message, error.stack);\n  123      }\n  124    }\n  ...\n  148      let r = await sock.recv(lengthBuf);\n  149      if(r <= 0) {\n  150:       console.log('sock.error', sock.error);\n  151        if(r < 0 && sock.errno != sock.EAGAIN) throw sock.error;\n  152        return null;\n  ...\n  155      let size = parseInt(len, 16);\n  156      let jsonBuf = new ArrayBuffer(size);\n  157:     console.log('read size', isNaN(size) ? quote(len, \"'\") : size);\n  158      let n = 0;\n  159      while(n < size) {\n  ...\n  171    static send(sock, msg) {\n  172      const data = toHex(msg.length, 8) + '\\n' + msg;\n  173:     console.log('data', escape(data));\n  174      return sock.send(data);\n  175    }\n  ...\n  185        this.emit('message', JSON.parse(json));\n  186      } catch(e) {\n  187:       console.log('ERROR', e.message, '\\nDATA\\n', json, '\\nSTACK\\n', e.stack);\n  188        throw e;\n  189      }\n  ...\n  211          this.handleMessage(message);\n  212        } catch(e) {\n  213:         console.log('ERROR', e.message, '\\nDATA\\n', json, '\\nSTACK\\n', e.stack);\n  214          throw e;\n  215        }\n  ...\n  219  \n  220  function retValue(ret, ...args) {\n  221:   console.log(...args, `ret =`, ret, ...(ret == -1 ? [' errno =', errno(), ' error =', std.strerror(errno())] : []));\n  222  }\n  223  \n\n/home/roman/Projects/plot-cv/test-libbpg.js:\n  188      this.lineSize = this.pixelSize * info.width;\n  189      const { pixelSize, lineSize } = this;\n  190:     console.log(`bpg_decoder_start(${format})`, { pixelSize, lineSize });\n  191      let ret = bpg_decoder_start(handle, format);\n  192      if(ret < 0) throw new Error(`bpg_decoder_start(${format}) ret=${ret}`);\n  ...\n  235        }\n  236      }\n  237:     console.log(`p = ${p}`);\n  238:     console.log(`width * height * 4 = ${width * height * 4}`);\n  239      return ret;\n  240    }\n  ...\n  244    let decoder = new BPGLoader();\n  245    window.decoder = decoder;\n  246:   console.log('window onload', { decoder });\n  247    let result = await decoder.load('data/me.bpg');\n  248:   console.log('decode', decoder.decode());\n  249:   console.log('info', decoder.info + '');\n  250    let y = 0;\n  251    let { width, height } = decoder.info;\n\n/home/roman/Projects/plot-cv/test-parsetmpl.js:\n   53  \n   54    filesystem.writeFile(name, data + '\\n');\n   55: \n   56:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   57  }\n   58  \n   ..\n  200          }\n  201        }\n  202:       console.log('', arg);\n  203      }\n  204      nextTag();\n  ...\n  219    const breakLength = stdout.columns || process.env.COLUMNS || 80;\n  220    await ConsoleSetup({ breakLength, maxStringLength: breakLength, depth: 5 });\n  221:   console.log('breakLength:', breakLength);\n  222  \n  223    filesystem = await PortableFileSystem();\n  ...\n  229  \n  230      if(filesystem.exists(file)) data = filesystem.readFile(file);\n  231: \n  232:     console.log(`opened '${file}':`, Util.abbreviate(data));\n  233      let ast, error;\n  234  \n  235      globalThis.parser = new ECMAScriptParser(data ? data.toString() : code, file, false);\n  236      globalThis.printer = new Printer({ indent: 4 });\n  237:     console.log('OK');\n  238  \n  239      try {\n  ...\n  266          (a, b) => a - b\n  267        );\n  268: \n  269:       console.log('commentMap:', commentMap);\n  270  \n  271        const templates = [...flat].filter(([path, node]) => node instanceof TemplateLiteral);\n  272        const taggedTemplates = templates.filter(([path, node]) => path[path.length - 1] == 'arguments');\n  273        const taggedCalls = taggedTemplates.map(([path, node]) => [path.up(), deep.get(ast, path.up())]);\n  274: \n  275:       console.log('taggedCalls:', taggedCalls);\n  276:       console.log(\n  277          'transformTagged:',\n  278          taggedCalls.map(([path, node]) => transformTagged(node))\n  ...\n  286      } catch(err) {\n  287        error = err;\n  288:       console.log('error:', err);\n  289      }\n  290      files[file] = finish(error);\n  291  \n  292      if(error) Util.exit(1);\n  293: \n  294:     console.log('files:', files);\n  295    }\n  296    let success = Object.entries(files).filter(([k, v]) => !!v).length != 0;\n  ...\n  308  \n  309    if(err) {\n  310:     console.log(parser.lexer.currentLine());\n  311:     console.log(Util.className(err) + ': ' + (err.msg || err) + '\\n' + err.stack);\n  312    }\n  313  \n  314    let lexer = parser.lexer;\n  315    let t = [];\n  316:   console.log(parser.trace());\n  317    WriteFile('trace.log', parser.trace());\n  318    if(fail) {\n  319:     console.log('\\nerror:', err.msg, '\\n', parser.lexer.currentLine());\n  320    }\n  321:   console.log('finish: ' + (fail ? 'error' : 'success'));\n  322    return !fail;\n  323  }\n\n/home/roman/Projects/plot-cv/draw-utils.js:\n    8  \n    9  export function GLFW(width, height, options = {}) {\n   10:   console.log('GLFW', { width, height, options });\n   11    let resolution = new Size(width, height);\n   12    const {\n   ..\n   40  GLFW.defaultCallbacks = {\n   41    handlePos(x, y) {\n   42:     console.log('handlePos', { x, y });\n   43    },\n   44    handleSize(width, height) {\n   45:     console.log('handleSize', { width, height });\n   46    },\n   47    handleClose(window = this) {\n   48:     console.log('handleClose', { window });\n   49    },\n   50    handleRefresh(window = this) {\n   ..\n   52    },\n   53    handleFocus(focused) {\n   54:     console.log('handleFocus', { focused });\n   55    },\n   56    handleIconify(iconified) {\n   57:     console.log('handleIconify', { iconified });\n   58    },\n   59    handleFramebufferSize(width, height) {\n   ..\n   61    },\n   62    handleMouseButton(button, action, mods) {\n   63:     console.log('handleMouseButton', { button, action, mods });\n   64    },\n   65    handleCursorPos(x, y) {\n   66:     console.log('handleCursorPos', { x, y });\n   67    },\n   68    handleCursorEnter(cur) {\n   69:     console.log('handleCursorEnter', { cur });\n   70    },\n   71    handleScroll(xoffset, yoffset) {\n   72:     console.log('handleScroll', { xoffset, yoffset });\n   73    },\n   74    handleKey(key, scancode, action, mods) {\n   75:     console.log('handleKey', { key, scancode, action, mods });\n   76    },\n   77    handleChar(c) {\n   78:     console.log('handleChar', { c });\n   79    },\n   80    handleCharMods(c, mods) {\n   81:     console.log('handleCharMods', { c, mods });\n   82    },\n   83    handleDrop(argc, argv) {\n   84:     console.log('handleDrop', { argc, argv });\n   85    }\n   86  };\n   ..\n  136      /* let img = Mat2Image(mat);\n  137       let size = nvg.ImageSize(img);\n  138:  console.log('GLFW.show', {mat,img,size});\n  139     DrawImage(img);*/\n  140      //   this.end();\n  ...\n  150    assert(mat.channels, 4, 'channels == 4');\n  151    const { cols, rows, depth, channels, step, elemSize, elemSize1 } = mat;\n  152:   console.log('Mat2Image', { depth, channels, step: step / elemSize, cols, rows, elemSize, elemSize1 });\n  153  \n  154    return nvg.CreateImageRGBA(mat.cols, mat.rows, 0, mat.buffer);\n\n/home/roman/Projects/plot-cv/ast-shell.js:\n  134  \n  135    globalThis.printNode = arg => {\n  136:     console.log(NodePrinter($.data).print(arg));\n  137    };\n  138  \n  ...\n  162      let cfg = { inspectOptions: console.options };\n  163      WriteJSON(config, cfg);\n  164: \n  165:     console.log(`EXIT (wrote ${hist.length} history entries)`);\n  166      std.exit(0);\n  167    });\n  ...\n  304  \n  305  function Terminate(exitCode) {\n  306:   console.log('Terminate', exitCode);\n  307  \n  308    Util.exit(exitCode);\n  ...\n  429      decl.name = name;\n  430    }\n  431:   console.log('InspectStruct', decl);\n  432  \n  433    const code = [...GenerateInspectStruct(decl, includes)].join('\\n');\n  ...\n  436  \n  437    let command = [compiler, '-O2', '-g', '-w', '-o', program, program + '.c', ...flags];\n  438:   console.log('InspectStruct', { command: command.join(' ') });\n  439  \n  440    let result = os.exec(command);\n  ...\n  510    let fields = [];\n  511    let offset = 0;\n  512: \n  513:   console.log('GenerateStructClass', decl);\n  514    for(let [name, type] of members) {\n  515      if(/reserved/.test(name)) continue;\n  ...\n  562      let { name, size, signed, desugared } = pointer;\n  563      a.unshift(`/* ${name}${desugared ? ` (${desugared})` : ''} ${size} ${signed} */`);\n  564:     console.log('GenerateStructClass', { pointer });\n  565    }\n  566    return [\n  ...\n  608    constructor(node, prefix = '') {\n  609      const { name, returnType = 'void', parameters = [] } = node;\n  610:     console.log('FFI_Function.constructor', node, { name, parameters });\n  611      this.name = name;\n  612      this.prefix = prefix;\n  ...\n  619      fp ??= (name, lib) => `${prefix}dlsym(${lib ?? 'RTLD_DEFAULT'}, '${name}')`;\n  620      let code = `'${name}', ${fp(name, lib)}, null, '${returnType}'`;\n  621:     console.log('function', Util.colorText(name, 1, 33), 'returnType:', Util.colorText(returnType, 1, 31));\n  622      let paramIndex = 0;\n  623      for(let [paramName, type] of parameters) {\n  ...\n  749  \n  750  export async function LibraryExports(file) {\n  751:   console.log(`LibraryExports:`, file);\n  752  \n  753    let output = await CommandRead(['/opt/diet/bin/objdump', '-T', file]);\n  ...\n  792    if(file && fs.existsSync(file)) {\n  793      data = fs.readFileSync(file, 'utf8');\n  794:     console.log('opened:', file);\n  795    } else {\n  796      file = 'stdin';\n  797      data = source;\n  798    }\n  799:   console.log('OK, data: ', Util.abbreviate(Util.escape(data)));\n  800    if(debug) ECMAScriptParser.instrumentate();\n  801:   console.log('ECMAScriptParser:', ECMAScriptParser);\n  802  \n  803    let parser, ast, error;\n  ...\n  810      const tokens = [...parser.processed, ...parser.tokens];\n  811      const token = tokens[tokens.length - 1];\n  812: \n  813:     console.log('parseProgram token', token);\n  814  \n  815      if(err !== null) {\n  816:       console.log('parseProgram ERROR message:', err?.message);\n  817:       console.log(\n  818          'parseProgram ERROR stack:\\n  ' +\n  819            new Stack(err?.stack, (fr, i) => fr.functionName != 'esfactory' && i < 5).toString().replace(/\\n/g, '\\n  ')\n  ...\n  822        throw err;\n  823      } else {\n  824:       console.log('parseProgram ERROR:', err);\n  825        throw new Error('parseProgram');\n  826      }\n  ...\n  832  \n  833  /*function ParseECMAScript(file, debug = false) {\n  834:   console.log(`Parsing '${file}'...`);\n  835    let data = fs.readFileSync(file, 'utf-8');\n  836    let ast, error;\n  837    let parser;\n  838:   console.log('data', data);\n  839    globalThis.parser = parser = new ECMAScriptParser(data?.toString ? data.toString() : data, file, debug);\n  840  \n  ...\n  920        .map(path => new Pointer(path))) {\n  921        let ptrs = ptr.chain(2);\n  922:       console.log('ptrs:', ptrs);\n  923        let names = ptrs.map(p => deep.get(members, [...p, 'name'], deep.NO_THROW));\n  924        let kinds = ptrs.map(p => deep.get(members, [...p, 'kind'], deep.NO_THROW));\n  925:       console.log('kinds:', kinds);\n  926:       console.log('names:', names);\n  927        ret.push(names.filter(name => name).join('.'));\n  928      }\n  ...\n  951  function UnsetLoc(node, pred = (v, p) => true) {\n  952    for(let [v, p] of deep.select(node, (v, k) => k == 'loc' || k == 'range', deep.RETURN_VALUE_PATH)) {\n  953:     console.log('UnsetLoc', { v, p });\n  954      if(pred(deep.get(node, [...p].slice(0, -1)), [...p].last)) deep.unset(node, p);\n  955    }\n  ...\n  971        for(let item of node) {\n  972          let out = '';\n  973:         console.log(`MakeFFI item #${i + 1}/${node.length}`);\n  974          try {\n  975            let ret = MakeFFI(item, lib, exp, fp);\n  ...\n  979            }\n  980          } catch(error) {\n  981:           console.log(`ERROR item [${i}]:`, error.message + '\\n' + error.stack);\n  982          }\n  983          i++;\n  ...\n  991  \n  992    if(node instanceof FunctionDecl) {\n  993:     console.log('node', (globalThis.node = node));\n  994  \n  995      let ffi = new FFI_Function(node);\n  ...\n 1023      globalThis.bjson = { read, write };\n 1024    });\n 1025:   console.log('bjson:', globalThis.bjson);*/\n 1026    /*await import('mmap').then(module => {const {mmap, munmap, toString, PROT_READ, PROT_WRITE, PROT_EXEC, PROT_SEM, PROT_NONE, PROT_GROWSDOWN, PROT_GROWSUP, MAP_SHARED, MAP_PRIVATE, MAP_TYPE, MAP_FIXED, MAP_ANONYMOUS, MAP_GROWSDOWN, MAP_DENYWRITE, MAP_EXECUTABLE, MAP_LOCKED, MAP_NORESERVE, MAP_POPULATE, MAP_NONBLOCK, MAP_STACK } = module; globalThis.mmap = {mmap, munmap, toString, PROT_READ, PROT_WRITE, PROT_EXEC, PROT_SEM, PROT_NONE, PROT_GROWSDOWN, PROT_GROWSUP, MAP_SHARED, MAP_PRIVATE, MAP_TYPE, MAP_FIXED, MAP_ANONYMOUS, MAP_GROWSDOWN, MAP_DENYWRITE, MAP_EXECUTABLE, MAP_LOCKED, MAP_NORESERVE, MAP_POPULATE, MAP_NONBLOCK, MAP_STACK }; });\n 1027:   console.log('mmap:', globalThis.mmap);\n 1028  */\n 1029    /*  console.options = consoleOptions;\n 1030:   console.options.compact = 1;\n 1031:   console.options.hideKeys = ['loc', 'range'];*/\n 1032    /*console.options.depth = 2;\n 1033:   console.options.compact = 1;*/\n 1034  \n 1035    globalThis.files = files = {};\n ....\n 1299      }\n 1300    };\n 1301: \n 1302:   console.log('Loading sources:' + sources.map(s => ' ' + s).join(','));\n 1303  \n 1304    globalThis['_'] = items;\n ....\n 1330  } finally {\n 1331    if(error) {\n 1332:     console.log(\n 1333        'FAIL: ' + error.message,\n 1334        '\\n  ' + new Stack(error.stack, fr => fr.functionName != 'esfactory').toString().replace(/\\n/g, '\\n  ')\n 1335      );\n 1336:     console.log('FAIL');\n 1337      std.exit(1);\n 1338    }\n\n/home/roman/Projects/plot-cv/test-xml.js:\n   47    //const numColors = ranges.reduce((acc, r) => acc * r.length, 1);\n   48    //ranges.push(numColors);\n   49:   console.log('ranges:', ranges);\n   50:   console.log('ranges:', Util.chunkArray(ranges.h, 3));\n   51    new KolorWheel(base.hex())\n   52      .rel(ranges.h, 0, 0)\n   ..\n   77      args\n   78    );\n   79: \n   80:   console.log('main', params);\n   81    if(params['@'].length == 0) params['@'] = ['/home/roman/.config/sublime-text-3/Packages/Babel/Next.tmTheme' /*  */];\n   82    let filename = params['@'].shift();\n   ..\n   99      let st;\n  100      let { rdev, ino, mtime, atime } = (st = filesystem.stat(filename));\n  101:     console.log('stat:', Util.inspect(st), Object.keys(st));\n  102      //prng = new Alea().seed((ino * 256 + rdev) ^ mtime.valueOf());\n  103: \n  104:     console.log('prng.uint32():', prng.uint32());\n  105      let basename = path.basename(filename, /\\.[^.]+$/);\n  106      filesystem.writeFile(basename + '.json', json);\n  ...\n  125      let o = it.map(([path, value]) => {\n  126        path = new Path(path);\n  127:       console.log('it.map', { path, value });\n  128        const key = path.up(0);\n  129        let prev = new Path([]),\n  ...\n  179      idx2path = [...palette.keys()];\n  180      // console.log('idx2path:', idx2path );\n  181: \n  182:     console.log('palette.getMinMax():', palette.getMinMax());\n  183  \n  184      const lexOrder = key => {\n  ...\n  205          ...lexOrder(key).reduce((acc, c) => [acc[0] * (10 + 26 + 26) + c, acc[1] * (10 + 26 + 26)], [0, 1])\n  206        );\n  207: \n  208:     console.log(`palette.getMinMax():`, palette.getMinMax());\n  209      const mm = palette.getMinMax();\n  210  \n  ...\n  238  \n  239        /*idx2path = [...palette.keys()];\n  240:         console.log(`idx2path`, idx2path);*/\n  241      };\n  242  \n  ...\n  255        set(...args) {\n  256          let colors = '#' + args.join(',');\n  257:         console.log('colors:', colors);\n  258          let re = /[^0-9a-fA-F]([0-9a-fA-F][0-9a-fA-F]+)/g;\n  259          //  console.log(\"matchAll:\",[...colors.matchAll(re)]);\n  ...\n  265          }\n  266          let newColors = a.map(p => new RGBA(p));\n  267:         console.log('newColors:', newColors);\n  268          for(let [path, color] of palette) {\n  269:           console.log(`path=`, path, ` color=`, color);\n  270            let path2 = path.up(4);\n  271            if(path2.last > 2) {\n  272              path2 = path2.left(path2.last - 1);\n  273              let obj = path2.apply(newObj, true);\n  274:             console.log(`path2=${path2} obj=`, obj);\n  275            }\n  276            const { value, index, distance } = RGBA.nearestColor(color.toRGBA(), newColors, distanceChecker);\n  277:           console.log(`value=`, value);\n  278            palette.set(path, value.toHSLA());\n  279          }\n  ...\n  311          let numHues = 8;\n  312          let step = Math.ceil(Math.pow(sz, 1 / 2) / 1.85);\n  313:         console.log('sz:', sz);\n  314:         console.log('step:', step);\n  315          let newPal = GeneratePalette({\n  316            l: step,\n  ...\n  318            h: numHues || Math.ceil(sz / step / 3)\n  319          });\n  320:         console.log('palette.size:', palette.size);\n  321:         console.log('newPal.length:', newPal.length);\n  322          newObj = {};\n  323          for(let [path, value] of flat) {\n  ...\n  365            return rgba.invert();\n  366          });\n  367:         console.log('invert');\n  368        },\n  369        dump() {\n  370:         console.info('palette:', palette);\n  371        },\n  372        reducehues() {\n  ...\n  381          const getHSLA = idx_or_hex =>\n  382            colors[typeof idx_or_hex == 'string' ? hex2idx[idx_or_hex] : idx_or_hex] || palette.get(idx2path[idx_or_hex]);\n  383:         console.log('changed ', [...changed].join(', '));\n  384          colors = [...palette.entries()].map(([path, color], idx) => color);\n  385          /* prettier-ignore */ console.log('colors = ', Util.inspect(colors.map((c) => [...c]), { multiline: false, colors: false }));\n  386          // let idx2hex = colors.map( (color,i) =>  color.hex());\n  387          hex2idx = Object.fromEntries(colors.map((color, i) => [color.hex(), i]));\n  388:         console.log(`hex2idx`, hex2idx);\n  389  \n  390          idx2hue = colors.map((color, i) => color.h);\n  391:         console.log(`idx2hue`, idx2hue);\n  392          /* prettier-ignore */ const getIds4Hue = (hue) => idx2hue.map((h, i) => [i, h]) .filter(([i, h]) => h == hue).map(([i, h]) => i);\n  393          /* prettier-ignore */ let hues = Util.histogram(colors, (v, i) => [v.h, v], new Map(), () => new Set(), (v, i) => [v.h, i]);\n  ...\n  400            ])\n  401            .map(([hue, ids]) => [hue, [...ids] + '']);\n  402:         console.log(`hueIds`, hueIds);\n  403  \n  404          let hueCounts = /*new Map*/ hueIds\n  405            .map(([hue, ids], i) => [i, [hue, ids.split(',').map(id => +id)]])\n  406            .map(([idx, [hue, ids]]) => [idx, ids.length]);\n  407: \n  408:         console.log(`hueCounts`, hueCounts);\n  409  \n  410          let hueData = hueIds\n  ...\n  414  \n  415          //console.log(`zhistogram`, Util.histogram(colors, (c, i) => [c.h, i], new Map(), () => new Set(), i => [colors[i].h, i] ) ); //new Map(Object.entries(idx2hue).map(([idx,hue]) => [+idx,+hue])));\n  416:         console.log(`hueCounts`, hueCounts);\n  417  \n  418          const removeHues = hueCounts.filter(([idx, count]) => count < 2);\n  419:         console.log(`removeHues`, removeHues);\n  420          const removeIds = removeHues.map(([idx]) => idx).sort((a, b) => b - a);\n  421:         console.log(`removeIds.reverse()`, /*Util.histogram*/ [...removeIds].reverse());\n  422  \n  423          //console.log(`removeIds`, removeIds);\n  424          const colorsRGBA = [...palette.entries()].map(([path, c], i) => [i, c.toRGBA()]); //[...palette.entries()].map(([path,c], i) => [i, c.toRGBA()]).filter(([i, c]) => removeIds.indexOf(i) == -1);\n  425          //  console.log(`[...palette.entries()].:`, );\n  426:         console.log(`colorsRGBA:`, colorsRGBA.length);\n  427          let rgba = colorsRGBA.filter(([i, c]) => removeIds.indexOf(i) == -1);\n  428          let newPalette = [...new Map(rgba).values()];\n  ...\n  449                deep.set(newObj, path, newColor);\n  450                let [fromColor, toColor] = [removedColor.hex(), newColor].map(c => new RGBA(c).toHSLA());\n  451: \n  452:               console.info(\n  453                  `changed #${i}`,\n  454                  fromColor,\n  ...\n  479          /^.?time?$/i.test(p) ? +mtime : /^now$/i.test(p) ? Date.now() : /^p?r?a?n[dg]o?m?$/i.test(p) ? prng.uint32() : p\n  480        );\n  481:       console.log('Command ', cmd);\n  482        //  Util.putStack();\n  483        let ret = handlers[cmd[0]](...cmd.slice(1));\n\n/home/roman/Projects/plot-cv/upload-server.js:\n   89    repl.directives.i = [\n   90      (module, ...args) => {\n   91:       console.log('args', args);\n   92        try {\n   93          return require(module);\n   ..\n  112  \n  113    repl.inspectOptions = { ...(repl.inspectOptions ?? console.options), depth: 4, compact: false };\n  114: \n  115:   console.log = (...args) => repl.printStatus(() => log(console.config(repl.inspectOptions), ...args));\n  116  \n  117    let logFile =\n  ...\n  189          // ['/upload', 'lws-deaddrop', null, 'lws-deaddrop'],\n  190          function* upload(req, res) {\n  191:           console.log('upload', { req, res });\n  192          },\n  193          function proxy(req, res) {\n  194:           console.log('proxy', { req, res });\n  195            const { url, method, headers } = req;\n  196:           console.log('proxy', { url, method, headers });\n  197            const { status, ok, type } = res;\n  198: \n  199:           console.log('proxy', { status, ok, url, type });\n  200          },\n  201  \n  ...\n  300  yield ',\\n';\n  301  //            results.push({ dir, names });\n  302:             console.log('\\x1b[38;5;215m*files\\x1b[0m', names);\n  303              // console.log('req.headers', req.headers);\n  304              //resp.headers = { ['Content-Type']: 'application/json' };\n  ...\n  369                this.file = fs.openSync('uploads/' + (tmpnam = randStr(20) + '.tmp'), 'w+', 0o644);\n  370                hash = new Hash(Hash.TYPE_SHA1);\n  371:               console.log(`onOpen()`, filename);\n  372              },\n  373              onContent(name, data) {\n  374                progress += data.byteLength;\n  375                // console.log(`onContent()`);\n  376:               console.log(`onContent()`, this.filename, progress);\n  377                fs.writeSync(this.file, data);\n  378                hash.update(data);\n  ...\n  384                  hash.finalize();\n  385                  sha1 = hash.toString();\n  386:                 console.log(`hash()`, hash.valueOf(), sha1);\n  387                }\n  388                if(this.file) fs.closeSync(this.file);\n  ...\n  391                  fs.renameSync('uploads/' + tmpnam, f + ext);\n  392                  let exif = ReadExif(f + ext);\n  393:                 console.log('exif', exif);\n  394                }\n  395                const { filename } = this;\n  ...\n  398  \n  399                if(ws) ws.sendCommand({ type: 'upload', filename, storage: f + ext, exif });\n  400: \n  401:               console.log(`onClose(${this.name})`, this.filename);\n  402              },\n  403              onFinalize() {\n  404:               console.log(`onFinalize() form parser`);\n  405                resp.body = 'done!\\r\\n';\n  406              }\n  ...\n  426              for(let dir of ['quickjs/qjs-modules', 'quickjs/qjs-modules/lib', '.', 'lib']) {\n  427                let file2 = dir + '/' + file;\n  428:               console.log('inexistent file', file, file2, fs.existsSync(file2), referer);\n  429                if(fs.existsSync(file2)) {\n  430                  file = file2;\n  ...\n  435  \n  436            if(file1 != file) {\n  437:             console.log('\\x1b[38;5;214monHttp\\x1b[0m', file1, '->', file);\n  438              resp.status = 302;\n  439              resp.headers = { ['Location']: '/' + file };\n  440              return resp;\n  441            }\n  442:           console.log('\\x1b[38;5;33monHttp\\x1b[0m', file1, file);\n  443  \n  444            //\n  ...\n  451                let fname = `${p2}.js`;\n  452                let rel = path.relative(fname, dir);\n  453:               console.log('onHttp', { match, fname }, rel);\n  454  \n  455                // if(!fs.existsSync(  rel)) return ``;\n  456  \n  457                match = [p1, rel, p3].join('');\n  458: \n  459:               console.log('args', { match, p1, p2, p3, offset });\n  460              }\n  461              return match;\n  462            });\n  463          } else {\n  464:           console.log('onHttp unknown', { file, dir });\n  465          }\n  466          //console.log('\\x1b[38;5;33monHttp\\x1b[0m', { resp });\n  ...\n  469        },\n  470        onMessage(ws, data) {\n  471:         console.log('onMessage', ws, data);\n  472          return callbacks.onMessage(ws, data);\n  473        },\n  ...\n  528  \n  529    function quit(why) {\n  530:     console.log(`quit('${why}')`);\n  531  \n  532      let cfg = { inspectOptions: console.options };\n  ...\n  541    main(...scriptArgs.slice(1));\n  542  } catch(error) {\n  543:   console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n  544    1;\n  545    std.exit(1);\n\n/home/roman/Projects/plot-cv/test-nanovg.js:\n   27      resizable: true,\n   28      handleSize(width, height) {\n   29:       console.log('resized', { width, height });\n   30      },\n   31      handleKey(keyCode) {\n   32        let charCode = keyCode & 0xff;\n   33:       console.log(`handleKey`, { keyCode: '0x' + keyCode.toString(16), charCode, char: String.fromCharCode(charCode) });\n   34        let char = String.fromCodePoint(charCode);\n   35  \n   ..\n   38      },\n   39      handleCharMods(char, mods) {\n   40:       console.log(`handleCharMods`, { char, mods });\n   41      },\n   42      handleMouseButton(button, action, mods) {\n   43:       console.log(`handleMouseButton`, { button, action, mods });\n   44      },\n   45      handleCursorPos(x, y) {\n\n/home/roman/Projects/plot-cv/test-debuggerprotocol.js:\n   28      }\n   29    });\n   30:   console.log('console.options', console.options);\n   31    let params = Util.getOpt(\n   32      {\n   ..\n   45    let sock = new Socket(AF_INET, SOCK_STREAM);\n   46    let addr = new SockAddr(AF_INET, address, port);\n   47: \n   48:   console.log('socket() fd =', +sock);\n   49  \n   50    let ret;\n   ..\n   63  \n   64    debug = new DebuggerProtocol(sock);\n   65:   console.log('debug', debug);\n   66  \n   67    os.setReadHandler(+sock, () => {\n   68:     console.log('debug.read', debug.read);\n   69      debug.read();\n   70      if(sock.eof) os.setReadHandler(+sock, null);\n   ..\n   78  \n   79    //  IOLoop();\n   80: \n   81:   console.log('debuggerprotocol', sock);\n   82  \n   83    function IOLoop() {\n   84      const rfds = new fd_set();\n   85      const wfds = new fd_set();\n   86:     console.log('IOLoop', sock);\n   87      FD_SET(+sock, wfds);\n   88      do {\n   ..\n   93        let readable = rfds.toArray(),\n   94          writable = wfds.toArray();\n   95:       console.log('select(2)', { readable, writable });\n   96        if(writable.indexOf(sock.fd) != -1) {\n   97          if(!debug) debug = new DebuggerProtocol(sock);\n   ..\n  115        }\n  116      } while(!sock.destroyed);\n  117:     console.log('end');\n  118    }\n  119  }\n  120  \n  121  function retValue(ret, ...args) {\n  122:   console.log(...args, `ret =`, ret, ...(ret == -1 ? [' errno =', errno(), ' error =', std.strerror(errno())] : []));\n  123  }\n  124  \n  ...\n  154    main(...scriptArgs.slice(1));\n  155  } catch(error) {\n  156:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n  157    std.exit(1);\n  158  } finally {\n\n/home/roman/Projects/plot-cv/test-inspect.js:\n    6  async function main(...args) {\n    7    /*console.log('platform:', Util.getPlatform());\n    8:   console.log('argv:', Util.getArgv());\n    9    let os = await import('os');\n   10:   console.log('os.ttyGetWinSize:', os.ttyGetWinSize);*/\n   11  \n   12    await PortableFileSystem();\n   13  \n   14    /*let std = [0, 1, 2].map(fd => filesystem.readlink(`/proc/self/fd/${fd}`));\n   15:   console.log('std:', std.join(', '));\n   16    let fd = filesystem.open(`/dev/tty`);\n   17:   console.log('fd:', fd);\n   18:   console.log('os.ttyGetWinSize(fd):', os.ttyGetWinSize(fd));*/\n   19    let winsz = await Util.ttyGetWinSize(1);\n   20:   console.log('winsz:', winsz);\n   21  \n   22    const options = {\n   ..\n   42        .join(',') +\n   43      '}';\n   44:   console.log('main', args);\n   45    let value = 0;\n   46    let str =\n   ..\n   89      }\n   90    };\n   91: \n   92:   console.log('inspect(NaN)', inspect(NaN, options));\n   93    // for(let value of Object.values(obj)) console.log('inspect', inspect(value, options));\n   94: \n   95:   console.log('inspect', inspect(obj, options));\n   96  }\n   97  \n\n/home/roman/Projects/plot-cv/commands.js:\n   34  export async function ListProjects(opts = {}) {\n   35    const { url, descriptions = true, names, filter = '.*.(brd|sch|lbr|GBL|GKO|GTL)$' } = opts;\n   36:   console.log('ListProjects', { url, descriptions, names, filter });\n   37    let response;\n   38    if(!url) {\n   ..\n   44  \n   45      if(typeof response == 'string') {\n   46:       console.log('ListProjects', { response }, response.length);\n   47  \n   48        /*let resp=response.substring(330100);\n   49:       console.log('ListProjects', { resp },resp.length);  */\n   50  \n   51        response = JSON.parse(response);\n   ..\n  307    for(let request of await cache.keys()) {\n  308      if(pred(request.url)) {\n  309:       console.warn(`Cleared cache entry ${request.url}`);\n  310        cache.delete(request);\n  311      }\n\n/home/roman/Projects/plot-cv/grammar-bnf.js:\n    5      let r = parser(str, pos);\n    6      if(r[0] || name.startsWith('direct'))\n    7:       console.log('matched (' + name + ') ' + pos + ' - ' + r[2] + \": '\", r[1], \"'\");\n    8      return r;\n    9    };\n\n/home/roman/Projects/plot-cv/image-helpers.js:\n   17    const output = xml.write(doc);\n   18    WriteFile(filename, output);\n   19:   console.log('Saved ' + filename + '.');\n   20  }\n   21  \n\n/home/roman/Projects/plot-cv/XAudioServer.js:\n  103      XAudioJSSamplesPerCallback * XAudioJSChannelsAllocated\n  104    );\n  105:   console.log('Target sample rate:', this.XAudioJSSampleRate);\n  106    XAudioJSResampleControl = new Resampler(\n  107      this.XAudioJSSampleRate,\n\n/home/roman/Projects/plot-cv/libs.js:\n  505    let results = filters.map(f => f.test(locationStr));\n  506    if(filters.every(f => !f.test(locationStr))) return;\n  507:   console.log('log', { args, c });\n  508    Util.putStack();\n  509    args = args.reduce((a, p, i) => {\n  ...\n  543      if(substitutions[i] !== undefined) o.push(substitutions[i]);\n  544    }\n  545:   console.log(...o);\n  546  };\n  547  \n  ...\n 1017          });\n 1018        } catch(err) {\n 1019:         console.log('extend:' + err + '\\n', { obj, key, value });\n 1020        }\n 1021      }\n ....\n 1041        /*        Object.defineProperty(obj, name, { value, enumerable: false, configurable: false, writable: false });*/\n 1042      } catch(err) {\n 1043:       console.log('static:', err);\n 1044      }\n 1045    }\n ....\n 1706    for(let j = 0; j < iterable.length; j++) {\n 1707      const [i, color] = iterable[j].length == 2 ? iterable[j] : [j, iterable[j]];\n 1708:     console.log(\n 1709        `  %c    %c ${color} %c ${textFn(color, i)}`,\n 1710        `background: ${color}; font-size: 18px; ${filters};`,\n ....\n 1770      process: async function run() {\n 1771        for await(const event of this.loop) {\n 1772:         console.info('event:', event);\n 1773        }\n 1774      }\n ....\n 2344  Util.putStack = (stack = new Util.stack().slice(3)) => {\n 2345    stack = stack instanceof Util.stack ? stack : Util.stack(stack);\n 2346:   console.log('Util.putStack', Util.className(stack));\n 2347: \n 2348:   console.log('STACK TRACE:\\n' + stack.toString());\n 2349  };\n 2350  \n ....\n 2471    for(let arg of args) {\n 2472      if(Util.isGenerator(arg)) {\n 2473:       console.error('isGenerator:', arg);\n 2474        yield* arg;\n 2475      } else {\n ....\n 2619  \n 2620    /*console.log(\"obj\",(obj));\n 2621: console.log(\"isGenerator\",Util.isGenerator(obj));*/\n 2622  \n 2623    if(Util.isGenerator(obj))\n ....\n 3263  \n 3264      buffer.size = size;\n 3265:     console.log(\"buffer.bits:\",buffer.bits,\"buffer.size:\",buffer.size);\n 3266    }\n 3267    function moveBits(input, output, len) {\n ....\n 3702  \n 3703   } catch(e) {\n 3704:   console.log(\"e.stack\",[...e.stack]);\n 3705    stack = e.stack;\n 3706   }\n ....\n 3748  );\n 3749  Util.location = function Location(...args) {\n 3750:   console.log('Util.location(', ...args, ')');\n 3751    let ret = this instanceof Util.location ? this : Object.setPrototypeOf({}, Util.location.prototype);\n 3752    if(args.length == 3) {\n ....\n 3768    toString(color = false) {\n 3769      let { fileName, lineNumber, columnNumber, functionName } = this;\n 3770:     console.log('this:', this, {\n 3771        fileName,\n 3772        lineNumber,\n ....\n 4413        .reverse()[0]\n 4414        .replace(/.*position\\ ([0-9]+).*/, '$1');\n 4415:     console.error('Unexpected token: ', jsonStr);\n 4416:     console.error('Unexpected token at:', jsonStr.substring(pos));\n 4417      ret = null;\n 4418    }\n ....\n 4513    let proxy;\n 4514    handler = /*handler || */ function(name, args) {\n 4515:     console.log(`Calling method '${name}':`, ...args);\n 4516    };\n 4517    //console.log('handler', { handler }, handler + '');\n ....\n 4526          };\n 4527          member = method.bind(obj);\n 4528:         console.log('Util.traceProxy', key, (member + '').replace(/\\n\\s+/g, ' ').split(lineSplit)[0]);\n 4529        }\n 4530        return member;\n ....\n 5013          std = c;\n 5014        });\n 5015:       console.log('childProcess', { childProcess, fs, std });\n 5016        let proc = childProcess('xclip', ['-in'], {\n 5017          block: false,\n ....\n 5019          env: { DISPLAY: Util.getEnv('DISPLAY') }\n 5020        });\n 5021:       console.log('proc.stdin', proc.stdin);\n 5022: \n 5023:       console.log('write =', await fs.write(proc.stdin, i));\n 5024        await fs.close(proc.stdin);\n 5025        return await proc.wait();\n ....\n 5085    };\n 5086    const log = (method, ...args) =>\n 5087:     console.log(\n 5088        `${Date.now() - createdTime.valueOf()} timer#${id}.${method}`,\n 5089        ...args.map(obj =>\n ....\n 5611                argv1 => argv1.replace(/\\/[^\\/]*$/g, '')\n 5612              );\n 5613:             console.log(\n 5614                'Exception:',\n 5615                message,\n ....\n 5708    let match = Util.matchAll(/%(?:o|O|d|i|s|f|s|d|c)/g);\n 5709    for(let [fmt, ...styles] of args) {\n 5710:     console.log('Util.consoleJoin', { fmt, styles, out });\n 5711      let substs = [...match(fmt)];\n 5712      if(substs.length != styles.length) {\n ....\n 5733    self.add = Util.consoleJoin;\n 5734    /*  function concat(out, args) {\n 5735:  console.log('concat', { out: [...out], args: [...args] });\n 5736     while(args.length) {\n 5737        let arg = args.shift();\n ....\n 5780      const a = [...this];\n 5781      const i = a.map(i => Util.inspect(i));\n 5782:     console.debug('a: ' + i.shift(), ...i);\n 5783  \n 5784      Util.consoleConcat.prototype.print.call(this, this.log);\n ....\n 5817  \n 5818          const matches = [...Util.matchAll(['%c', '%o'], arg)];\n 5819:         console.debug('matches.length:', matches.length, ' args.length:', args.length);\n 5820  \n 5821          if(matches.length > 0) {\n ....\n 5943  \n 5944    if(l) {\n 5945:     console.log(`Function   : ${fn.name}()`);\n 5946:     console.log(`Average    : ${ms.toFixed(d)}ms`);\n 5947:     console.log(`Repetitions: ${r}`);\n 5948:     console.log(`Executions : ${e}`);\n 5949    }\n 5950  \n ....\n 6147        const CLOCK_MONOTONIC_RAW = 4;\n 6148        const CLOCK_BOOTTIME = 7;\n 6149: \n 6150:       console.log('STACK:', Util.getCallerStack());\n 6151  \n 6152        performanceNow = async function(clock = CLOCK_MONOTONIC_RAW) {\n ....\n 6241    fn,\n 6242    log = (duration, name, args, ret) =>\n 6243:     console.log(\n 6244        `function '${name}'` +\n 6245          (ret !== undefined ? ` {= ${Util.abbreviate(Util.escape(ret + ''))}}` : '') +\n ....\n 6298      leave ||\n 6299      ((name, ret) =>\n 6300:       console.log(`function '${name}'` + (ret !== undefined ? ` {= ${Util.abbreviate(Util.escape(ret + ''))}}` : '')));\n 6301  \n 6302    let orig = fn;\n ....\n 6525  \n 6526  Point.getOther = args => (\n 6527:   console.debug('getOther', ...args), typeof args[0] == 'number' ? [{ x: args[0], y: args[1] }] : args\n 6528  );\n 6529  \n ....\n 7088  \n 7089    // const [  p = ['width', 'height']  ] = args[0] instanceof Size ? args : [new Size(), ...args];\n 7090:   console.debug('Size.bind', { args, o, t, p, gen });\n 7091    const { width, height } = Array.isArray(p) ? p.reduce((acc, name) => ({ ...acc, [name]: name }), {}) : p;\n 7092    return Util.bindProperties(new Size(0, 0), t, { width, height }, gen);\n ....\n 8206    const { x, y, width, height } = this;\n 8207    if(!factory) factory = SVG.factory(document.body);\n 8208: \n 8209:   console.log('Rect.toSVG', factory);\n 8210  \n 8211    return factory('rect', { ...attrs, x, y, width, height }, parent, prec);\n ....\n 9072  \n 9073    static position(element, edges = ['left', 'top']) {\n 9074:     console.log('Element.position ', { element, edges });\n 9075      const rect = Element.rect(element);\n 9076      if(rect) {\n ....\n 9113      }*/\n 9114      let css = Point.toCSS(current, 1, edges);\n 9115:     console.log('Element.move: ', { position, to, css, off, current, edges });\n 9116      //console.log('move newpos: ', Point.toCSS(pt));\n 9117      Element.setCSS(element, { ...css, position });\n ....\n 9690            ok = w.d.execCommand('copy');\n 9691          } catch(err) {\n 9692:           console.log('error', err);\n 9693          }\n 9694          s.removeAllRanges();\n\n/home/roman/Projects/plot-cv/test-parse.js:\n   16  \n   17    fs.writeFileSync(name, data + '\\n');\n   18: \n   19:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   20  }\n   21  \n   ..\n   39  \n   40    let src = fs.readFileSync(filename, 'utf-8');\n   41:   console.log('src:', src);\n   42  \n   43    let grammar = new Grammar(src, filename);\n   44    grammar.debug = true;\n   45    grammar.parse();\n   46:   console.log('grammar:', grammar);\n   47    const outfile = `grammar-${basename}.js`;\n   48    WriteFile(outfile, grammar.generate('./lib/parse/'));\n   ..\n   50    import(outfile).then(grammar => {\n   51      const { selector } = grammar;\n   52:     console.log('selector', selector);\n   53  \n   54      let [str, pos] = selector(input, 0);\n   55:     console.log('str,pos', { str, pos });\n   56    });\n   57    /*\n   ..\n   62  \n   63    let cowbirdGrammar = grammar.toCowbird();\n   64:   console.log('cowbird:', cowbirdGrammar);\n   65  \n   66    let data = fs.readFileSync('../pictest/build/mplab/7segtest-16f876a-xc8-debug.mcp');\n   67:   console.log('data:', Util.abbreviate(data, 100));\n   68    let parser = new Cowbird(cowbirdGrammar, 'ini', true);\n   69:   console.log('parser:', parser);\n   70  \n   71    let result = parser.parse(data);\n   72:   console.log('result:', result);\n   73  */\n   74    return;\n\n/home/roman/Projects/plot-cv/test-containers.js:\n   12    let multiKey = new MultiKeyMap();\n   13    multiKey.set(['A', 'B', 'C'], 123);\n   14:   console.log('multiKey', [...multiKey]);\n   15  \n   16    let multiBi = new MultiBiMap({ iterableKey: false, iterableValue: true });\n   17  \n   18    multiBi.add('A', [1, 2, 3, 4]);\n   19:   console.log('multiBi', [...multiBi]);\n   20:   console.log('multiBi keys', multiBi.keys());\n   21:   console.log('multiBi values', multiBi.values());\n   22  \n   23    let hashMulti = new HashMultimap();\n   24  \n   25    hashMulti.put('A', 1, 2, 3, 4);\n   26:   console.log('hashMulti', [...hashMulti]);\n   27  }\n   28  \n\n/home/roman/Projects/plot-cv/test-clipper.js:\n   26  \n   27  function testOffset() {\n   28:   console.log('data2:', data2);\n   29    const path = [...data2].map(({ x, y }) => new Point(x, y));\n   30:   console.log('path:', path);\n   31  \n   32    let area = ClipperLib.JS.AreaOfPolygon(path);\n\n/home/roman/Projects/plot-cv/main.js:\n  940  \n  941  async function LoadDocument(project, parentElem) {\n  942:   console.log('LoadDocument', project);\n  943    open(false);\n  944    gcode(null);\n  ...\n 1692  \n 1693        if(typeof data == 'string') data = JSON.parse(data);\n 1694: \n 1695:       console.log('UpdateProjectList', data);\n 1696  \n 1697        let files = (typeof data == 'object' && data != null && data.files) || [];\n 1698:       console.log('files', files);\n 1699  \n 1700        function File(obj, i) {\n ....\n 2080    }\n 2081    let data;\n 2082: \n 2083:   console.log('DUMMY');\n 2084  \n 2085    window.documentList = data = new DocumentList();\n ....\n 2334            let { currentTarget, target } = event;\n 2335            let key = target.getAttribute('data-key');\n 2336: \n 2337:           console.log('Sort order changed', key);\n 2338            config.sortKey(key);\n 2339          }\n ....\n 2449      })\n 2450    ]);\n 2451:   console.log('DUMMY', (window.preactComponent = preactComponent));\n 2452    React.render(preactComponent, Element.find('#preact'));\n 2453  \n\n/home/roman/Projects/plot-cv/test-console.js:\n    7      maxStringLength: 200\n    8    });\n    9: \n   10:   console.log(`console`, inspect(console, { customInspect: true, showHidden: true, compact: false }));\n   11  \n   12    let c = console;\n   13:   console.log('console', c.log);\n   14:   console.log('globalThis[\"console\"]', globalThis['console']);\n   15:   console.log('globalThis[\"console\"]', typeof globalThis['console']);\n   16:   console.log('globalThis[\"console\"] == undefined', globalThis['console'] == undefined);\n   17:   console.log('console.log', console.log);\n   18  \n   19    if(1) {\n   ..\n   46        [map, 3]\n   47      ]);\n   48: \n   49:     console.log(`args`, args);\n   50:     console.log(`obj`, obj);\n   51:     console.log(`obj2`, obj2);\n   52:     console.log(`fn`, fn);\n   53:     console.log(`boundFn`, boundFn);\n   54      //console.log(`path`, inspect(path));\n   55:     console.log(`console`, console.config({ colors: true, compact: 1, breakLength: Infinity }), console);\n   56:     console.log(`map`, map);\n   57:     console.log(`weakMap`, weakMap);\n   58    }\n   59  \n   ..\n   62  Util.callMain(main, true);\n   63  /*\n   64: console.log('TEST\\n');\n   65  print('TEST\\n');\n   66  let retVal;\n   67  //retVal =  main().catch(err => console.log(\"Error:\", err, err.stack)).then(ret => (console.log(\"Resolved:\", ret),ret));\n   68  retVal = main();\n   69: console.log('retVal:', retVal);\n   70  retVal;\n   71  1;\n\n/home/roman/Projects/plot-cv/discogs.js:\n  143        orderDocuments[orderId(order)] = doc;\n  144        let messages = messageGetItems(doc);\n  145: \n  146:       console.log(`order: ${orderId(order)}\\nmessages:`, getTextArray(messages));\n  147      }\n  148    };\n\n/home/roman/Projects/plot-cv/test-attributes.js:\n   23  \n   24  async function main(...args) {\n   25:   console.log('args:\\n  ' + args.join('\\n  '));\n   26  \n   27    const varNames = [\n   ..\n   54    let envMap = new Map(envEntries);\n   55    //console.log('Environment:', Util.toSource(envEntries, { quote: '\"'}).replaceAll('\\n', \"\\\\n\"));\n   56:   console.log('Environment:', Util.inspect(envMap));\n   57  \n   58    filesystem = await PortableFileSystem();\n   59    await ConsoleSetup();\n   60: \n   61:   console.log('OK');\n   62    let colors, keys;\n   63    let attributes = new Map();\n   ..\n   95      let names = [...attr.values()];\n   96      if(names.length == 0) continue;\n   97: \n   98:     console.log(` ${tag}: [${printSet(attr)}],`);\n   99    }\n  100: \n  101:   console.log('numeric: ' + printSet([...numeric.values()].sort()));\n  102  }\n  103  Util.callMain(main);\n\n/home/roman/Projects/plot-cv/tmpx.js:\n    8      s2 = await rpc.connect('ws://127.0.0.1:9000/ws', RPCServer);\n    9      fac = new RPCFactory(api);\n   10:     console.log('fac', fac);\n   11      ro1 = await fac({ class: 'Socket' });\n   12:     console.log('ro1', ro1);\n   13      for(let name of ['Socket', 'Worker']) {\n   14        let { id, ...o } = await api.new({ class: name });\n   15:       console.log(`${name}#${id}`, o);\n   16      }\n   17    }, 100)\n\n/home/roman/Projects/plot-cv/resolve-imports.js:\n  130  \n  131    opts.compact = false;\n  132: \n  133:   console.log(str, opts, ...args);\n  134  };\n  135  \n  ...\n  379        }\n  380        if(debug > 2)\n  381:         console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  382  \n  383        if(cond == true) {\n  ...\n  386          if(imp.last.lexeme == ';') {\n  387            if(debug > 2)\n  388:             console.log(\n  389                'imp',\n  390                imp[0].loc + '',\n  391:               console.config({ breakLength: 80, compact: 0 }),\n  392                TokenSequence(imp) + ''\n  393              );\n  ...\n  492      let code = toString(BufferFile(source).slice(...range));\n  493      if(debug >= 2)\n  494:       console.log('AddImport', compact(1), {\n  495          source,\n  496          file,\n  ...\n  589  \n  590      if(debug > 2)\n  591:       console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  592  \n  593      //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  ...\n  616  \n  617      if(debug >= 2)\n  618:       console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  619      if(debug > 1) console.log('impexp', compact(1), { range: new NumericRange(...range), loc: loc + '' });\n  620  \n  ...\n  652        }\n  653        if(!path.isFile(file)) {\n  654:         console.log(`Path must exist '${file}'`);\n  655          continue;\n  656        }\n  ...\n  669    /*\n  670    let end = Date.now();\n  671:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  672  */\n  673  \n  ...\n  676    if(showDeps) {\n  677      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  678: \n  679:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  680    }\n  681  \n  ...\n  792        range = r;\n  793      } catch(e) {}\n  794:     console.log('NumericRange.from', range);\n  795      return range;\n  796    }\n  ...\n  803        if(IsRange(range)) {\n  804          range = [...range];\n  805:         console.log('range#' + ++i, inspect(range));\n  806  \n  807          if(IsRange(prev) && IsRange(range)) {\n  ...\n  928      };\n  929      if(debug > 2)\n  930:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n  931          file,\n  932          range: [range[0], range[1]]\n  ...\n  936      const { length } = this;\n  937      if(debug > 2)\n  938:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n  939          start,\n  940          end,\n  ...\n 1025        const hole = holes[i];\n 1026        const [range] = this[i];\n 1027:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1028      }\n 1029      //console.log('holes', holes);\n ....\n 1156    let f = std.open(file, 'w+');\n 1157    f.puts(tok);\n 1158:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1159  }\n 1160  \n ....\n 1410    if(out.file) {\n 1411      const nbytes = results[0].write(stream);\n 1412:     console.log(`${nbytes} bytes written to '${out.file}'`);\n 1413    }\n 1414    if(debug > 3) console.log(`exportedNames`, exportedNames);\n ....\n 1437    main(...scriptArgs.slice(1));\n 1438  } catch(error) {\n 1439:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1440    std.exit(1);\n 1441  }\n\n/home/roman/Projects/plot-cv/events.js:\n   32  \n   33      for(let type of events) emitter.on(type, handler);\n   34:     console.log('registered', events);\n   35      await stop;\n   36  \n   37      /*for(let type of events) emitter.off(type, handler);\n   38:       console.log('unregistered', events);*/\n   39      emitter.reset();\n   40    });\n\n/home/roman/Projects/plot-cv/test-jsjs.js:\n   37      let data, b, ret;\n   38      data = file == '-' ? code : filesystem.readFile(file);\n   39:     console.log(`read ${file}:`, Util.abbreviate(data).replaceAll('\\n', '\\\\n'));\n   40      let ast, error;\n   41      globalThis.parser = new ECMAScriptParser(data, file);\n   ..\n   45      try {\n   46        ast = parser.parseProgram();\n   47:       console.log('ast:', ast);\n   48  \n   49        //    ret = interpreter.run(ast);\n   ..\n   56      }\n   57      /*     let output = printer.print(ast);\n   58:       console.log('output:', output);*/\n   59  \n   60      files[file] = finish(error);\n   ..\n   62        const output_file = file.replace(/.*\\/?/, '').replace(/\\.[^.]*$/, '') + '.es';\n   63        const output = printAst(ast, parser.comments, printer);\n   64:       console.log('ret:', ret);\n   65        WriteFile(output_file, output);\n   66      } else {\n   67        const pos = error.pos;\n   68:       console.log(pos && pos.toString ? error.pos.toString() : pos);\n   69        Util.putError(error);\n   70  \n\n/home/roman/Projects/plot-cv/test-import.js:\n   12  \n   13    filesystem.writeFile(name, data + '\\n');\n   14: \n   15:   console.log(`Wrote ${name}: ${data.length} bytes`);\n   16  }\n   17  \n   ..\n   19    await PortableFileSystem(fs => (filesystem = fs));\n   20    await ConsoleSetup({ depth: 4 });\n   21: \n   22:   console.log('bjson:', bjson);\n   23    let ffi = await import('ffi');\n   24:   console.log('ffi:', ffi);\n   25    return;\n   26  }\n\n/home/roman/Projects/plot-cv/test-io.js:\n   30  \n   31    return;\n   32:   console.log(\n   33      Util.getMethodNames(filesystem)\n   34        .map(n => `  'filesystem.${n}': null,`)\n\n/home/roman/Projects/plot-cv/test-opencv.js:\n   44  function WriteImage(name, mat) {\n   45    cv.imwrite(name, mat);\n   46:   console.log(\"Wrote '\" + name + \"' (\" + mat.size + ').');\n   47  }\n   48  \n   ..\n   52    file.puts(JSON.stringify(configObj, null, 2) + '\\n');\n   53    file.close();\n   54:   console.log(\"Saved config to '\" + basename + '.config.json' + \"'\", inspect(configObj, { compact: false }));\n   55  }\n   56  \n   ..\n   63        .filter(([k, v]) => !isNaN(v))\n   64    );\n   65:   console.log('LoadConfig:', inspect(configObj, { compact: false }));\n   66    return configObj;\n   67  }\n   ..\n  117    });\n  118    let running = true;\n  119: \n  120:   console.log('Util.getMethodNames(cv)', Util.getMethodNames(cv, Infinity, 0));\n  121:   console.log('cv.HoughLines', cv.HoughLines);\n  122  \n  123    let line = new Line(0, 0, 50, 50);\n  124:   console.log('line', line);\n  125    let clahe = new CLAHE();\n  126:   console.log('clahe', clahe);\n  127    cv.namedWindow('output', cv.WINDOW_NORMAL | cv.WINDOW_KEEPRATIO);\n  128    let trackbar = '';\n  ...\n  131    let resolution = image.size;\n  132    let scaled;\n  133:   console.log('Symbol.inspect', Symbol.inspect);\n  134:   console.log('resolution', resolution);\n  135    if(resolution.width > 1200) {\n  136      let f = 1024 / resolution.width;\n  ...\n  144    let statusRect = new Rect(0, resolution.height, resolution.width, 200);\n  145    let statusMat = new Mat(statusRect.size, cv.CV_8UC3);\n  146:   console.log('statusRect:', statusRect);\n  147    let [textRect, helpRect] = new Rect(statusRect.size).inset(5).vsplit(-20);\n  148    let screenSize = new Size(resolution.width, resolution.height + 200);\n  149:   console.log('statusRect', statusRect);\n  150:   console.log('textRect', textRect);\n  151:   console.log('helpRect:', helpRect);\n  152    let screen = new Mat(screenSize, cv.CV_8UC3);\n  153  \n  154    /* let gfx = new GLFW(...screenSize);\n  155:   console.log('gfx:', gfx);*/\n  156  \n  157    cv.imshow('output', screen);\n  ...\n  265            Draw.polylines(dst, [contours[i]], false, color, 1);\n  266          }\n  267: \n  268:         console.log('ShowTrace', console.config({ maxArrayLength: Infinity }), { src, dst });\n  269        },\n  270        function LineSegmentDetector(src, dst) {\n  ...\n  283            }\n  284          }\n  285:         console.log('LineSegmentDetector', { intersectionMatrix });\n  286          let lineMap = new Map();\n  287          let lineMapper = memoize(() => [], lineMap);\n  ...\n  291            lineMapper(b + '').push(line);\n  292          }\n  293:         console.log('LineSegmentDetector', console.config({ compact: 3 }), [...lineMap].map(([name, arr]) => [name, arr.length, arr.map(line => [line + '', line.length])]).sort((a, b) => b[1] - a[1]) );\n  294          */\n  295          src.copyTo(dst);\n  ...\n  299          cv.pixelNeighborhood(src, neighborhood);\n  300          let endpoints = cv.pixelFindValue(src, 1);\n  301:         console.log('endpoints', endpoints);\n  302          let linepoints = cv.pixelFindValue(src, 2);\n  303:         console.log('linepoints', linepoints);\n  304          cv.imwrite('neighborhood.png', neighborhood, palette);\n  305          let im = cv.imread('neighborhood.png');\n  ...\n  366            return [color.b, color.g, color.r];\n  367          };\n  368: \n  369:         console.log('angle2Color(100):', angle2Color(100));\n  370:         console.log('angle2Color(360):', angle2Color(0));\n  371          /*\n  372:         console.log('v',\n  373            [...v.slice(0, 4), ...h.slice(0, 4)].map(l => [\n  374              ...l.toPoints(),\n  ...\n  485    delete pipeline.before;\n  486    delete pipeline.after;\n  487:   console.log(`pipeline.recalc(${frameShow})`, pipeline.recalc(frameShow));\n  488    while(true) {\n  489      key = cv.waitKeyEx(-1);\n  ...\n  501          paramNav.prev();\n  502          if(paramIndexes[0] != -1 && paramNav.index < paramIndexes[0]) paramNav.index = paramIndexes[1];\n  503:         console.log(`Param #${paramNav.index} '${paramNav.name}' selected (${+paramNav.param})`);\n  504          RedrawStatus();\n  505          RedrawWindow();\n  ...\n  509          paramNav.next();\n  510          if(paramIndexes[1] != -1 && paramNav.index > paramIndexes[1]) paramNav.index = paramIndexes[0];\n  511:         console.log(`Param #${paramNav.index} '${paramNav.name}' selected (${+paramNav.param})`);\n  512          RedrawStatus();\n  513          RedrawWindow();\n  ...\n  516        case 0x2b /* + */:\n  517          paramNav.param.increment();\n  518:         console.log(`Param ${paramNav.name}: ${+paramNav.param}`);\n  519          pipeline.recalc(frameShow);\n  520          break;\n  ...\n  523        case 0xf9f /* numpad DEL */:\n  524          paramNav.param.reset();\n  525:         console.log(`Param ${paramNav.name}: ${inspect(paramNav.param)}`);\n  526          pipeline.recalc(frameShow);\n  527          break;\n  ...\n  532        case 0x2fad /* numpad - */:\n  533          paramNav.param.decrement();\n  534:         console.log(`Param ${paramNav.name}: ${+paramNav.param}`);\n  535          pipeline.recalc(frameShow);\n  536          break;\n  ...\n  547          let v = key & 0xf || 10;\n  548          paramNav.param.alpha = v / 10;\n  549:         console.log(`Param ${paramNav.name}: ${+paramNav.param}`);\n  550          pipeline.recalc(frameShow);\n  551          break;\n  552        case 0xa7 /* § */:\n  553          paramNav.param.alpha = 0;\n  554:         console.log(`Param ${paramNav.name}: ${+paramNav.param}`);\n  555          pipeline.recalc(frameShow);\n  556          break;\n  ...\n  566    }\n  567    SaveConfig({ frameShow, paramIndex: paramNav.index, ...params });\n  568:   console.log('EXIT');\n  569  }\n  570  try {\n  571    main(...scriptArgs.slice(1));\n  572  } catch(error) {\n  573:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  574    std.exit(1);\n  575  } finally {\n  576:   console.log('SUCCESS');\n  577  }\n  578  \n\n/home/roman/Projects/plot-cv/test-rpc.js:\n   71    repl.directives.i = [\n   72      (module, ...args) => {\n   73:       console.log('args', args);\n   74        try {\n   75          return require(module);\n   ..\n   95  \n   96    repl.inspectOptions = { ...(repl.inspectOptions ?? console.options), depth: 4, compact: false };\n   97: \n   98:   console.log = (...args) => repl.printStatus(() => log(console.config(repl.inspectOptions), ...args));\n   99  \n  100    let cli = (globalThis.sock = new rpc.Socket(\n  ...\n  114    let connections = new Set();\n  115    const createWS = (globalThis.createWS = (url, callbacks, listen) => {\n  116:     console.log('createWS', { url, callbacks, listen });\n  117  \n  118      const out = s => logFile.puts(s + '\\n');\n  ...\n  184          ['/get', './uploads', ''],\n  185          function proxy(req, res) {\n  186:           console.log('proxy', { req, res });\n  187            const { url, method, headers } = req;\n  188:           console.log('proxy', { url, method, headers });\n  189            const { status, ok, type } = res;\n  190: \n  191:           console.log('proxy', { status, ok, url, type });\n  192          },\n  193  \n  194          function* config(req, res) {\n  195            const { body, headers } = req;\n  196:           console.log('/config', { req, res });\n  197:           console.log('*config', { body, headers });\n  198            yield '{}';\n  199          },\n  ...\n  259            }\n  260            names = entries.map(([name, obj]) => (objects ? obj : name));\n  261:           console.log('\\x1b[38;5;215m*files\\x1b[0m', names);\n  262            yield JSON.stringify(...[names, ...(verbose ? [null, 2] : [])]);\n  263          }\n  ...\n  267        ...callbacks,\n  268        onConnect(ws, req) {\n  269:         console.log('test-rpc', { ws, req });\n  270: \n  271:         console.log('req.url.path', req.url.path);\n  272  \n  273          connections.add(ws);\n  ...\n  288  \n  289          if(req.method != 'GET') {\n  290:           console.log(req.method + ' body:', /*typeof req.body, req.body.length, */ req.body);\n  291:           console.log('ws', ws);\n  292  \n  293            let fp = new FormParser(ws, ['files'], {\n  294              chunkSize: 8192 * 256,\n  295              onContent(name, data) {\n  296:               console.log(`onContent(${name})`, this.filename, data.byteLength);\n  297                fs.writeSync(this.file, data);\n  298              },\n  ...\n  301                this.filename = filename;\n  302                this.file = fs.openSync('uploads/' + filename, 'w+', 0o644);\n  303:               console.log(`onOpen(${name})`, filename);\n  304              },\n  305              onClose(name) {\n  306                fs.closeSync(this.file);\n  307:               console.log(`onClose(${this.name})`, this.filename);\n  308              }\n  309            });\n  310:           console.log('fp.socket', fp.socket);\n  311:           console.log('fp.params', fp.params);\n  312  \n  313            /*  (async function() {\n  ...\n  316  \n  317              while((r = req.body.next())) {\n  318:               console.log('r:', r);\n  319                const { value, done } = await r;\n  320:               console.log('value:', value);\n  321                //console.log('toString(value)', toString(value));\n  322:               console.log('done:', done);\n  323                if(done) break;\n  324                buffers.push(value);\n  325              }\n  326:             console.log('req.headers:', req.headers);\n  327:             console.log(\n  328                'buffers:',\n  329                buffers.map(b => b.byteLength)\n  330              );\n  331              let data = concat(...buffers);\n  332:             console.log('data:', data);\n  333:             console.log('data.byteLength:', data.byteLength);\n  334              let pos1 = searchArrayBuffer(data, new Uint8Array([13, 10]).buffer);\n  335              let pos = searchArrayBuffer(data, new Uint8Array([13, 10, 13, 10]).buffer);\n  336:             console.log('pos:', pos);\n  337: \n  338:             console.log('header:', toString(data.slice(0, pos)));\n  339              let body = data.slice(pos + 4);\n  340              let pos2 = searchArrayBuffer(body, data.slice(0, pos1));\n  341:             console.log('pos2:', pos2);\n  342  \n  343              fs.writeFileSync('out.bin', data);\n  ...\n  346  \n  347          const { body, url } = resp;\n  348:         console.log('\\x1b[38;5;33monHttp\\x1b[0m', req, resp, { body });\n  349  \n  350          const file = url.path.slice(1);\n  ...\n  355          }\n  356          if(file.endsWith('.js')) {\n  357:           console.log('onHttp', { file, dir });\n  358            const re = /^(\\s*(im|ex)port[^\\n]*from ['\"])([^./'\"]*)(['\"]\\s*;[\\t ]*\\n?)/gm;\n  359  \n  ...\n  365  \n  366                match = [p1, './' + fname, p3].join('');\n  367: \n  368:               console.log('args', { match, p1, p2, p3, offset });\n  369              }\n  370              return match;\n  ...\n  379        },\n  380        onMessage(ws, data) {\n  381:         console.log('onMessage', ws, data);\n  382          return callbacks.onMessage(ws, data);\n  383        },\n  ...\n  428  \n  429    function quit(why) {\n  430:     console.log(`quit('${why}')`);\n  431  \n  432      let cfg = { inspectOptions: console.options };\n  ...\n  441    main(...scriptArgs.slice(1));\n  442  } catch(error) {\n  443:   console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n  444    1;\n  445    std.exit(1);\n\n/home/roman/Projects/plot-cv/test-jslexer.js:\n   35  \n   36        if(lexer.state == 2 && token.lexeme == '}') lexer.popState();\n   37:       console.log(`token`, (id + '').padStart(2), ` '${escape(lexeme)}'`.padEnd(30), loc);\n   38        //   console.log(`tok(${ id}): ${tokenColor(lexer.tokens[token.id-1])}${lexeme}\\x1b[0m`);\n   39      } while(token.type != 'eof');\n   40    } catch(err) {\n   41:     console.log('ERROR:', err.message, err.stack);\n   42    }\n   43  }\n   ..\n   45    main(...Util.getArgs().slice(1));\n   46  } catch(error) {\n   47:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   48  } finally {\n   49:   console.log('SUCCESS');\n   50  }\n   51  \n\n/home/roman/Projects/plot-cv/test-quickjs.js:\n   17      }\n   18    });\n   19:   console.log('console', Util.className(console));\n   20:   console.log('console.log', console.log);\n   21    let entries = Object.fromEntries(Object.entries(cv).filter(([k, v]) => k.startsWith('CV_')));\n   22:   console.log(console.config({ depth: 1, compact: 1 }), entries);\n   23:   console.log(\n   24:     console.config({ compact: 0 }),\n   25      Object.keys(entries).filter(k => /[0-9]S/.test(k))\n   26    );\n   27:   console.log(\n   28:     console.config({ compact: 0 }),\n   29      Object.keys(entries).filter(k => /[0-9]F/.test(k))\n   30    );\n   31: \n   32:   console.log('start');\n   33:   console.log('isBrowser:', Util.isBrowser());\n   34    //console.log('Util.copyTextToClipboard()', await Util.copyTextToClipboard('TEST'));\n   35    // console.log('modules:', inspect({ Point, Size, Rect }));\n   ..\n   38  \n   39    let ctors = new Map(moduleNames.map(name => [name, globalThis[name]]));\n   40:   console.log('globalThis:', Object.keys(globalThis));\n   41:   console.log('modules:', inspect(ctors));\n   42  \n   43    let c = new Contour();\n   44:   console.log('c.keys()', Object.getOwnPropertyNames(c));\n   45:   console.log('c.push', c.push);\n   46  \n   47    c.push(new Point(0, 0));\n   ..\n   50    c.push({ x: 0, y: 50 });\n   51    c.push({ x: 0, y: 0 });\n   52:   console.log('contour[0]', c[0]);\n   53:   console.log('contour[1]', c[1]);\n   54    c[4] = new Point(99, 33);\n   55    let fitted = new Line();\n   56:   console.log('fitted', fitted);\n   57    c.fitLine(fitted);\n   58    let ellipse = new RotatedRect();\n   59:   console.log('ellipse', ellipse);\n   60    ellipse = c.fitEllipse();\n   61:   console.log('ellipse', ellipse);\n   62: \n   63:   console.log('fitted', fitted);\n   64:   console.log('contour[4]', c[4]);\n   65:   console.log('contour:', c);\n   66:   console.log('c[Symbol.iterator]:', c[Symbol.iterator]);\n   67:   console.log('Object.getOwnPropertyNames(Contour.prototype)', Object.getOwnPropertyNames(Contour.prototype));\n   68: \n   69:   console.log('Object.getOwnPropertyNames(c)', Object.getOwnPropertyNames(c));\n   70:   console.log('Object.keys(c)', Object.keys(c));\n   71  \n   72    let a = [1, 2, 3, 4, 5];\n   73:   console.log('Object.getOwnPropertyNames(a)', Object.getOwnPropertyNames(a));\n   74:   console.log('Object.keys(a)', Object.keys(a));\n   75  \n   76    let it = c[Symbol.iterator]();\n   77: \n   78:   console.log('contour[Symbol.iterator]:', c[Symbol.iterator]);\n   79:   console.log('contour[Symbol.iterator]():', Util.className(it));\n   80:   console.log('contour.get(0):', c[0]);\n   81:   console.log('[...contour]:', [...c]);\n   82:   console.log('contour.length:', c.length);\n   83:   console.log('contour:', Util.className(c));\n   84    /*  let rect = new Rect(10, 100, 50, 250);\n   85    const { x, y, width, height } = rect;\n   86:   console.log(`rect`, inspect(rect));\n   87:   console.log(`{x,y,width,height}`, inspect({ x, y, width, height }));\n   88:   console.log(`Object.getPrototypeOf(rect)`, Object.getPrototypeOf(rect));\n   89:   console.log(`rect.prototype`, rect.prototype);\n   90:   console.log(`rect.__proto__`, rect.__proto__);\n   91:   console.log(`Object.getOwnPropertyNames(rect.__proto__)`, Object.getOwnPropertyNames(rect.__proto__));\n   92:   console.log(`Object.keys(rect.__proto__)`, Object.keys(rect.__proto__));\n   93:   console.log(`Object.keys(Object.getPrototypeOf(rect))`, Object.keys(Object.getPrototypeOf(rect)));\n   94:   console.log(`Object.keys(rect)`, Object.keys(rect));\n   95:   console.log(`inspect(rect)`, inspect(rect));*/\n   96    return;\n   97  \n   98    let point = new Point(25, 75);\n   99:   console.log(`inspect(point)`, inspect(point));\n  100    function toHex(n, b = 2) {\n  101      let s = (+n).toString(16);\n  ...\n  106    if(rr) {\n  107      const { x, y, width, height } = rr;\n  108:     console.log('rect:', x, y, width, height);\n  109    }\n  110    let mat = new Mat(new Size(10, 10), cv.CV_8UC4);\n  111:   console.log(`cv.CV_8UC3`, toHex(cv.CV_8UC3), cv.CV_8UC3);\n  112:   console.log(`cv.CV_8UC4`, toHex(cv.CV_8UC4), cv.CV_8UC4);\n  113:   console.log(`cv.CV_8SC3`, toHex(cv.CV_8SC3), cv.CV_8SC3);\n  114:   console.log(`cv.CV_8SC4`, toHex(cv.CV_8SC4), cv.CV_8SC4);\n  115:   console.log(`cv.CV_32FC1`, toHex(cv.CV_32FC1), cv.CV_32FC1);\n  116:   console.log(`cv.CV_32FC4`, toHex(cv.CV_32FC4), cv.CV_32FC4);\n  117:   console.log(`0x3ff`, toHex(0x3ff));\n  118:   console.log(`inspect(mat)`, inspect(mat));\n  119:   console.log(`mat.channels`, mat.channels);\n  120:   console.log(`mat.depth`, mat.depth);\n  121:   console.log(`1 << mat.depth`, 1 << mat.depth);\n  122:   console.log(\n  123      `Mat[DEPTH]`,\n  124      Object.keys(Mat).find(k => Mat[k] === mat.depth)\n  125    );\n  126:   console.log(\n  127      `Mat[TYPE]`,\n  128      Object.keys(Mat).find(k => Mat[k] === mat.type)\n  ...\n  131    let row0 = mat.row(0);\n  132    let col0 = mat.col(0);\n  133: \n  134:   console.log(`mat.at(0,0)`, mat, mat.at(0, 0));\n  135:   console.log(`row0`, row0);\n  136:   console.log(`mat.row(0)`, row0, row0.cols, [...row0.entries()]);\n  137:   console.log(`col0`, col0);\n  138:   console.log(`mat.col(0)`, col0, col0.rows, [...col0.entries()]);\n  139  \n  140    for(let r = 0; r < mat.rows; r++)\n  141      for(let c = 0; c < mat.cols; c++) {\n  142        const v = (r << 24) | c;\n  143:       console.log(`mat.set(${r},${c},0x${v.toString(16)})`, mat.set(r, c, v));\n  144      }\n  145:   console.log(`mat.set(0,1,0xcafebabe)`, mat.set(0, 1, 0xcafebabe));\n  146:   console.log(`mat.set(0,2,0xc01dd00d)`, mat.set(0, 2, 0xc01dd00d));\n  147:   console.log(`row0.at(0,0)`, row0.at(0, 0));\n  148:   console.log(`mat.at(0,0)`, mat.at(0, 0));\n  149:   console.log(`mat.at(new Point(0,0))`, mat.at(new Point(0, 0)));\n  150  \n  151    it = row0[Symbol.iterator]();\n  152:   console.log(`row0[Symbol.iterator]()`, it);\n  153  \n  154    let step = it.next();\n  155:   console.log(`it.next()`, step.done, step.value);\n  156    let i = 0;\n  157    for(let x of row0.values()) {\n  158:     console.log(`row0.values()[${i++}]`, x);\n  159    }\n  160    i = 0;\n  161    it = row0.keys();\n  162:   console.log(`row0.keys()`, it);\n  163:   console.log(`row0.keys().next`, it.next);\n  164:   console.log(`row0.keys()[Symbol.iterator]`, it[Symbol.iterator]);\n  165    let v;\n  166    while(true) {\n  167      v = it.next();\n  168      if(v.done) break;\n  169:     console.log(`row0.keys() #${i++}`, v.value, v.value.length);\n  170    }\n  171    i = 0;\n  172    for(let [key, value] of row0.entries()) {\n  173:     console.log(`row0.entries() #${i++}`, key, value); //'0x' + ('00000000' + value.toString(16)).slice(-8));\n  174    }\n  175    i = 0;\n  176    for(let [key, value] of col0.entries()) {\n  177:     console.log(`col0.entries() #${i++}`, key, value);\n  178      //console.log(`col0.entries() #${i++}`, key, '0x' + ('00000000' + value.toString(16)).slice(-8));\n  179    }\n  ...\n  182    i = 0;\n  183    for(let [[row, col], value] of range.entries()) {\n  184:     console.log(`range[${i++}] row=${row} col=${col} value=0x${('00000000' + value.toString(16)).slice(-8)}`);\n  185    }\n  186    i = 0;\n  ...\n  190  \n  191      for(let [[row, col], value] of roi.entries()) {\n  192:       console.log(`roi[${i++}] row=${row} col=${col} value=0x${('00000000' + value.toString(16)).slice(-8)}`);\n  193      }\n  194:     console.log(`roi rows=${roi.rows} cols=${roi.cols} depth=${roi.depth} channels=${roi.channels}`);\n  195  \n  196      for(let r = 0; r < roi.rows; r++)\n  197        for(let c = 0; c < roi.cols; c++) {\n  198          const v = 0x7f000000 | ((r << 16) | c);\n  199:         console.log(`roi.set(${r},${c},0x${v.toString(16)})`);\n  200:         console.log(`roi.set(${r},${c},0x${v.toString(16)})`, roi.set(r, c, v));\n  201        }\n  202  \n  ...\n  206    i = 0;\n  207    for(let [[row, col], value] of mat.entries()) {\n  208:     console.log(`mat[${i++}] row=${row} col=${col} value=0x${('00000000' + value.toString(16)).slice(-8)}`);\n  209    }\n  210  \n  211    let fmat = new Mat(new Size(10, 10), cv.CV_32FC1);\n  212    const values = Util.repeat(fmat.rows * fmat.cols, 0.5);\n  213:   console.log(`fmat setTo`, values);\n  214    fmat.setTo(...values);\n  215    for(let [[row, col], value] of fmat.entries()) {\n  216:     console.log(`fmat[${i++}] row=${row} col=${col} value=${value}`);\n  217    }\n  218  \n  ...\n  220  \n  221    for(let line of ll) {\n  222:     console.log('line:', line.x1, line.y1, line.x2, line.y2);\n  223      const { a, b } = line;\n  224: \n  225:     console.log('a =', a);\n  226:     console.log('b =', b);\n  227:     console.log('line[0] =', line[0]);\n  228:     console.log('line[1] =', line[1]);\n  229:     console.log('line.toString() =', line.toString());\n  230  \n  231      let i = 0;\n  232      let arr = line.toArray();\n  233:     console.log('toArray:', line.toArray().join(','));\n  234:     console.log('values(): ', line.values());\n  235:     console.log(\n  236        'toPoints(): ',\n  237        [...line.toPoints()].map(p => Util.className(p))\n  238      );\n  239: \n  240:     console.log('toString(): ', line.toString());\n  241:     console.log('new Line(50,50,320-50,240-25): ', new Line(50, 50, 320 - 50, 240 - 25));\n  242      let [x1, y1, x2, y2] = arr;\n  243: \n  244:     console.log(`Line{${x1},${y1} ${x2},${y2}}`);\n  245      for(let num of line) {\n  246:       console.log('num:', i++, num);\n  247      }\n  248  \n  249      let r = new Rect(50, 100, 350, 200);\n  250:     console.log('r.br(): ', r.br());\n  251:     console.log('r.tl(): ', r.tl());\n  252:     console.log('r.area(): ', r.area());\n  253  \n  254      if(globalThis.Point) {\n  255        let pt = new Point(75, 150);\n  256:       console.log(`r.contains(${pt}): `, r.contains(pt));\n  257        pt = new Point(51, 99);\n  258:       console.log(`r.contains(${pt}): `, r.contains(pt));\n  259      }\n  260  \n  261      r = new Rect(50, 50, 0, 0);\n  262:     console.log('r.empty(): ', r.empty());\n  263  \n  264      //const [start, end] = line;\n  ...\n  291    //throw new Error(\"ERROR\");\n  292    if(1) {\n  293:     console.log(`std.gc`, std.gc);\n  294:     console.log(`args`, args);\n  295:     console.log(`path`, inspect(path));\n  296:     console.log(`console`, console);\n  297:     console.log(`std.gc()`, std.gc());\n  298    }\n  299  \n  ...\n  302  Util.callMain(main, true);\n  303  /*\n  304: console.log('TEST\\n');\n  305  print('TEST\\n');\n  306  let retVal;\n  307  //retVal =  main().catch(err => console.log(\"Error:\", err, err.stack)).then(ret => (console.log(\"Resolved:\", ret),ret));\n  308  retVal = main();\n  309: console.log('retVal:', retVal);\n  310  retVal;\n  311  1;\n\n/home/roman/Projects/plot-cv/test.js:\n  108  \n  109      cv.imshow('canny', dst);\n  110: \n  111:     console.log('src:', src + '');\n  112  \n  113      //  detectLines(dst);\n  ...\n  152    ];\n  153    let matTypeEntries = matTypes.map(n => [n, cv[n]]);\n  154:   console.log(new Map(matTypeEntries.map(([n, v]) => [n, ('0000000' + v.toString(16)).slice(-8)])));\n  155: \n  156:   console.log(\n  157      'mask: ',\n  158      matTypeEntries\n  ...\n  174  \n  175      cv.findContours(output, contours, h => (hier = h));\n  176: \n  177:     console.log('cv.findContours', { contours, hier });\n  178  \n  179      let obj = {\n  ...\n  196        }\n  197      };\n  198: \n  199:     console.log('contours.length=', contours.length);\n  200:     console.log('hier.length=', hier.length);\n  201      //   console.log('hier=', hier);\n  202:     console.log('obj.prev=', obj.previous(1));\n  203:     console.log('obj.next=', obj.next(1));\n  204:     console.log('obj.parent=', obj.parent(1));\n  205:     console.log('obj.firstChild=', obj.firstChild(1));\n  206    }\n  207  \n\n/home/roman/Projects/plot-cv/config.js:\n   11      JSON.stringify(configObj, null, 2) + '\\n'\n   12    );\n   13:   console.log(`Saved config to '${basename() + '.config.json'}'`, inspect(configObj, { compact: false }));\n   14    return ret;\n   15  }\n   ..\n   24        .filter(([k, v]) => !isNaN(v))\n   25    );\n   26:   console.log('LoadConfig:', configObj);\n   27    return configObj;\n   28  }\n\n/home/roman/Projects/plot-cv/clang-ast.js:\n  195    if(node_or_path && node_or_path.kind) p = PathOf(node_or_path, ast);\n  196    else p = new Pointer(node_or_path);\n  197: \n  198:   console.log(p.hier());\n  199:   console.log(\n  200      p\n  201        .hier()\n  ...\n  233  \n  234    nodes = nodes.filter(node => node.inner && node.inner.length);\n  235:   console.log('nodes', nodes);\n  236  \n  237    return new Type(typeName, ast);\n  ...\n  290            node = {};\n  291          } else {\n  292:           console.log(`Found type ${name}`, node);\n  293          }\n  294        }\n  ...\n  540        );\n  541    /*  console.log(\"ast:\", this.ast);\n  542:     console.log(\"str:\", this+'');\n  543:     console.log(\"qualType:\", this.qualType);\n  544:     console.log(\"match:\", match);*/\n  545      if(match) {\n  546        switch (match[2]) {\n  ...\n 1010  \n 1011      default:\n 1012:       console.log('node:', node);\n 1013        throw new Error(`No such kind of AST node: ${node.kind}`);\n 1014        //obj = new Type(node, ast);\n ....\n 1078      errorLines.length;\n 1079    if(numErrors) {\n 1080:     console.log('errors:', errors);\n 1081      throw new Error(errorLines.join('\\n'));\n 1082    }\n ....\n 1157    //console.log('AstDump', { output, source, sources, existsAndNotEmpty, newer });\n 1158    if(!force && existsAndNotEmpty && newer) {\n 1159:     console.log(`Loading cached '${output}'...`);\n 1160    } else {\n 1161      if(fs.existsSync(output)) fs.unlinkSync(output);\n 1162: \n 1163:     console.log(`Compiling '${source}'...`);\n 1164      let { output, result, errors } = await SpawnCompiler(compiler, source, output, [\n 1165        '-Xclang',\n ....\n 1171    }\n 1172    r = { file: output };\n 1173: \n 1174:   console.log('AstDump', r);\n 1175  \n 1176    //r.size = (await fs.stat(r.file)).size;\n ....\n 1180      },\n 1181      json() {\n 1182:       console.log(`r.json`, this.file);\n 1183  \n 1184        let json = fs.readFileSync(this.file, 'utf-8');\n ....\n 1186      },\n 1187      data() {\n 1188:       console.log('this.json', this.json);\n 1189        let data = JSON.parse(this.json);\n 1190        let file;\n ....\n 1432          }\n 1433          if(out.length == oldlen) {\n 1434:           console.log('printer error', { loc, location }, this.loc);\n 1435            throw new Error(\n 1436              `Node printer for ${node.kind} (${this.loc}) failed: ${inspect(\n\n/home/roman/Projects/plot-cv/test-linenoise.js:\n   10        linenoise.HistoryAdd(line);\n   11        linenoise.HistorySave('history.txt');\n   12:       console.log('line:', line);\n   13      }\n   14    }\n\n/home/roman/Projects/plot-cv/worker.js:\n   13      prefix: '\\x1b[38;5;128mWORKER\\x1b[0m'\n   14    });\n   15: \n   16:   console.log('WorkerMain', parent);\n   17  \n   18    var i;\n   ..\n   29  function HandleMessage(e) {\n   30    var ev = e.data;\n   31:   console.log('Worker HandleMessage', ev);\n   32  \n   33    switch (ev.type) {\n\n/home/roman/Projects/plot-cv/extract-structs.js:\n   42  \n   43    for(let arg of args) {\n   44:     console.log('arg', arg);\n   45  \n   46      let str = std.loadFile(arg);\n   47:     console.log('str', escape(str).substring(0, 100));\n   48  \n   49      let lexer = new CLexer(str, arg);\n   50:     console.log('lexer', lexer);\n   51      let tok;\n   52      while((tok = lexer.nextObj())) {\n   ..\n   78            /*\n   79            do {\n   80:             console.log('tok', tok, tok.loc + '', { line });\n   81              text += tok.lexeme;\n   82              tok = lexer.nextObj();\n   ..\n   92    main(...scriptArgs.slice(1));\n   93  } catch(error) {\n   94:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   95    std.exit(1);\n   96  }\n\n/home/roman/Projects/plot-cv/test-gpio.js:\n    3  function main(...args) {\n    4    const gpio = new GPIO();\n    5:   console.log('gpio.initPin', gpio.initPin);\n    6    /*console.log('gpio.setPin', gpio.setPin);\n    7:   console.log('gpio.getPin', gpio.getPin);\n    8:   console.log('gpio', Object.getOwnPropertyNames(gpio));\n    9:   console.log('gpio.constructor', gpio.constructor);\n   10:   console.log('GPIO', Object.getOwnPropertyNames(GPIO));*/\n   11  \n   12    gpio.initPin(0, GPIO.OUTPUT);\n   ..\n   15    gpio.initPin(1, GPIO.INPUT);\n   16    const value = gpio.getPin(1);\n   17:   console.log('Pin #1 value:', value);\n   18  }\n   19  \n   ..\n   21    main(...scriptArgs.slice(1));\n   22  } catch(error) {\n   23:   console.log(error);\n   24:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   25    std.exit(1);\n   26  } finally {\n   27:   console.log('SUCCESS');\n   28  }\n   29  \n\n/home/roman/Projects/plot-cv/blackbody.js:\n  261    const gamma = blackbody_color.get(colorTemp);\n  262    const [r = 1.0, g = 1.0, b = 1.0] = gamma;\n  263: \n  264:   console.log('Gamma RGB:', { r, g, b });\n  265:   console.log(\n  266      `-vf eq2=${[eq2_gamma, contrast, brightness, saturation, r, g, b, weight]\n  267        .map(n => Util.roundTo(n, 0.0001, 5))\n\n/home/roman/Projects/plot-cv/plot-cv.js:\n   37    const [images, ...rest] = args;\n   38    const { imgBlurred, imgCanny, imgGrayscale, imgMorphology, imgOriginal, imgRaw, imgTemp, imgVector } = images;\n   39:   console.log('images: ', Object.keys(images));\n   40    let m = images.imgVector;\n   41    /*  console.log('Images: ', typeof images);\n   42:   console.log('Images: ', Object.keys(images));\n   43:   console.log('Images: ', Util.inspect(images));\n   44:   console.log('rest.length: ', rest.length);\n   45:   console.log('rest: ', ...rest);*/\n   46    const { cols, rows } = m;\n   47: \n   48:   console.log('m: ', m);\n   49:   console.log(`Video resolution: ${cols}x${rows}`);\n   50:   console.log('Num contours: ', contours.length);\n   51:   console.log('Contours: ', Util.className(contours));\n   52:   console.log('Contours[0]: ', Util.className(contours[0]));\n   53  \n   54    // console.log('contours[0]: ', contours[0]);\n   55:   console.log('contours[0][0]: ', contours[0][0]);\n   56  \n   57    let data = {\n   ..\n   66    };\n   67    let body = JSON.stringify(data);\n   68:   console.log('body: ', Util.abbreviate(body));\n   69  \n   70    frame++;\n   ..\n   75      body\n   76    });\n   77: \n   78:   console.log('response: ', response);\n   79    return response;\n   80  };\n   81  \n   82  /*let args = Util.getArgv();\n   83: console.log('args:', args);\n   84  \n   85  if(args.length >= 1) process([new Contour()], [], {});\n\n/home/roman/Projects/plot-cv/test-description.js:\n   33  \n   34        let description = getDesc(str);\n   35: \n   36:       console.log(`description:\\n` + description);\n   37        //r = [...Util.matchAll('<\\\\/?(description)[^>]*>', str)];\n   38      }\n   39    } catch(err) {\n   40:     console.log('err:', err);\n   41    }\n   42  }\n\n/home/roman/Projects/plot-cv/adsb-client.js:\n  106  \n  107      let phase = DailyPhase(t);\n  108:     console.log('phase', new Date(phase).toISOString());\n  109  \n  110      let file = std.open(PhaseFile(phase), 'a');\n  ...\n  117          sslCA: '/etc/ssl/certs/ca-certificates.crt',\n  118          onMessage(req, res) {\n  119:           console('URL:', req.url);\n  120            let buf;\n  121            for(let chunk of res) {\n  ...\n  131            let body = decoder.decode(buf).trimEnd();*/\n  132        let body = toString(buf);\n  133:       console.log('ProcessResponse', body);\n  134        if(body.codePointAt(body.length - 1) == 0) body = body.slice(0, -1);\n  135  \n  ...\n  150        );\n  151        obj.states.sort((a, b) => b.baro_altitude - a.baro_altitude);\n  152: \n  153:       console.log('onMessage', console.config({ compact: 1, depth: Infinity, maxArrayLength: Infinity }), obj);\n  154      }\n  155: \n  156:     console.log('response', response);\n  157  \n  158      ProcessResponse(response.body);\n  ...\n  161  \n  162  main(...scriptArgs.slice(1)).catch(err => {\n  163:   console.log('ERROR:', err.message, err.stack);\n  164    std.exit(1);\n  165  });\n\n/home/roman/Projects/plot-cv/test-minnet.js:\n   40      onMessage(ws, msg) {\n   41        /*    console.log('onMessage', ws, escape(msg.slice(0, 30)));*/\n   42:       console.log('data:', quote(msg, \"'\"));\n   43      },\n   44      onConnect(ws, req) {\n   45:       console.log('onConnect', ws, req);\n   46  \n   47        os.setReadHandler(0, () => {\n   48          let rbuf = new ArrayBuffer(1024);\n   49          let ret = os.read(0, rbuf, 0, 1024);\n   50:         console.log('os.read() =', ret);\n   51          if(ret === 0) {\n   52            os.setReadHandler(0, null);\n   ..\n   54          }\n   55          let data = toString(rbuf, 0, ret);\n   56:         console.log('Read:', data.trimRight());\n   57          ws.send(data);\n   58        });\n   ..\n   64      },\n   65      onPong(ws, req) {\n   66:       console.log('onPong', ws, req);\n   67      },\n   68      onClose(ws, req) {\n   69:       console.log('onClose', ws, req);\n   70        std.exit(0);\n   71      },\n   ..\n   80  \n   81  function getJSON() {\n   82:   console.log('getJSON');\n   83    const res = fetch('https://api.github.com/repos/rsenn/plot-cv', {\n   84      method: 'head'\n   85    });\n   86    const { ok, status, type } = res;\n   87:   console.log('res:', { ok, status, type });\n   88  \n   89    const json = res.json();\n   90:   console.log('json:', json);\n   91  \n   92    const data = new Map(Object.entries(json));\n   93:   console.log('data:', data);\n   94    return data;\n   95  }\n   ..\n  109        break;\n  110    }\n  111:   console.log('ws', ws);\n  112  }\n  113  \n  ...\n  115    main(...scriptArgs.slice(1));\n  116  } catch(error) {\n  117:   console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n  118    1;\n  119    std.exit(1);\n\n/home/roman/Projects/plot-cv/static/wasm/bpgdec.js:\n  175        // Prefer to use print/printErr where they exist, as they usually work better.\n  176        if(typeof console === 'undefined') console = /** @type{!Console} */ ({});\n  177:       console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);\n  178:       console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (\n  179          typeof printErr !== 'undefined' ? printErr : print\n  180        );\n  ...\n 1884        var img, w, h, img_info_buf, cimg, p0, rgba_line, w4, frame_count;\n 1885        var heap8, heap16, heap32, dst, v, i, y, func, duration, frames, loop_count;\n 1886: \n 1887:       console.log('loaded ' + data.byteLength + ' bytes');\n 1888  \n 1889        img = this.bpg_decoder_open();\n 1890  \n 1891        if(this.bpg_decoder_decode(img, array, array.length) < 0) {\n 1892:         console.log('could not decode image');\n 1893          return;\n 1894        }\n\n/home/roman/Projects/plot-cv/static/wasm/bpgdec8a.js:\n  175        // Prefer to use print/printErr where they exist, as they usually work better.\n  176        if(typeof console === 'undefined') console = /** @type{!Console} */ ({});\n  177:       console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);\n  178:       console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (\n  179          typeof printErr !== 'undefined' ? printErr : print\n  180        );\n  ...\n 1885        var img, w, h, img_info_buf, cimg, p0, rgba_line, w4, frame_count;\n 1886        var heap8, heap16, heap32, dst, v, i, y, func, duration, frames, loop_count;\n 1887: \n 1888:       console.log('loaded ' + data.byteLength + ' bytes');\n 1889  \n 1890        img = this.bpg_decoder_open();\n 1891  \n 1892        if(this.bpg_decoder_decode(img, array, array.length) < 0) {\n 1893:         console.log('could not decode image');\n 1894          return;\n 1895        }\n\n/home/roman/Projects/plot-cv/static/wasm/bpgdec8.js:\n  175        // Prefer to use print/printErr where they exist, as they usually work better.\n  176        if(typeof console === 'undefined') console = /** @type{!Console} */ ({});\n  177:       console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);\n  178:       console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (\n  179          typeof printErr !== 'undefined' ? printErr : print\n  180        );\n  ...\n 1884        var img, w, h, img_info_buf, cimg, p0, rgba_line, w4, frame_count;\n 1885        var heap8, heap16, heap32, dst, v, i, y, func, duration, frames, loop_count;\n 1886: \n 1887:       console.log('loaded ' + data.byteLength + ' bytes');\n 1888  \n 1889        img = this.bpg_decoder_open();\n 1890  \n 1891        if(this.bpg_decoder_decode(img, array, array.length) < 0) {\n 1892:         console.log('could not decode image');\n 1893          return;\n 1894        }\n\n/home/roman/Projects/plot-cv/react-sortable-hoc/src/utils.js:\n    9      if(typeof console !== 'undefined') {\n   10        // eslint-disable-next-line no-console\n   11:       console.warn(\n   12          \"Deprecation warning: arrayMove will no longer be exported by 'react-sortable-hoc' in the next major release. Please install the `array-move` package locally instead. https://www.npmjs.com/package/array-move\"\n   13        );\n\n/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c:\n 2054      min_delay = -1;\n 2055    }\n 2056: \n 2057:   console_fd = -1;\n 2058    list_for_each(el, &ts->os_rw_handlers) {\n 2059      rh = list_entry(el, JSOSRWHandler, link);\n 2060      if(rh->fd == 0 && !JS_IsNull(rh->rw_func[0])) {\n 2061:       console_fd = rh->fd;\n 2062        break;\n 2063      }\n ....\n 3614    /* XXX: should these global definitions be enumerable? */\n 3615    global_obj = JS_GetGlobalObject(ctx);\n 3616: \n 3617:   console = JS_NewObject(ctx);\n 3618    JS_SetPropertyStr(ctx, console, \"log\", JS_NewCFunction(ctx, js_print, \"log\", 1));\n 3619    JS_SetPropertyStr(ctx, global_obj, \"console\", console);\n\n/home/roman/Projects/plot-cv/quickjs/repl.js:\n 1210        std.puts(colors[styles.error_msg]);\n 1211        if(error instanceof Error) {\n 1212:         console.log(error);\n 1213          if(error.stack) {\n 1214            std.puts(error.stack);\n ....\n 1216        } else {\n 1217          std.puts('Throw: ');\n 1218:         console.log(error);\n 1219        }\n 1220        std.puts(colors.none);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js:\n   40      type = 0x0c;\n   41    }\n   42:   console.log('DNSQuery', domain);\n   43    let outBuf = new Uint8Array([\n   44      0xff,\n   ..\n   62    ]).buffer;\n   63    new DataView(outBuf).setUint16(0, outBuf.byteLength - 2, false);\n   64:   console.log('DNSQuery', outBuf);\n   65    return outBuf;\n   66  }\n   ..\n  100      let orig_log = console.log;\n  101      let log = this.printFunction((...args) => orig_log(...args));\n  102:     console.log = (...args) => {\n  103        //log('console.log:', args);\n  104        //while(str.endsWith('\\n')) str = str.slice(0, -1);\n  ...\n  162    const { binary } = params;\n  163    //console.log('params', params);\n  164:   console.log('headers', headers);\n  165    function createWS(url, callbacks, listen = 0) {\n  166      let urlObj = new URL(url);\n  167:     console.log('createWS', { urlObj, url });\n  168      let repl;\n  169      let is_dns = false;\n  ...\n  183  \n  184      const fn = [net.client, net.server][+listen];\n  185:     console.log('createWS', { url, binary });\n  186      return fn(url, {\n  187        sslCert,\n  ...\n  204          connections.add(ws);\n  205          /*\n  206:         console.log('req',{  url });*/\n  207:         console.log('onConnect', { ws, req });\n  208          const remote = `${ws.address}:${ws.port}`;\n  209          try {\n  210            repl = new CLI(remote);\n  211          } catch(err) {\n  212:           console.log('error:', err.message);\n  213          }\n  214          repl.printStatus(`Connected to ${remote}`);\n  ...\n  221        },\n  222        onClose(ws, status, reason, error) {\n  223:         console.log('onClose', { ws, status, reason, error });\n  224          connections.delete(ws);\n  225          if(repl) {\n  ...\n  233        },\n  234        async onHttp(ws, req, resp) {\n  235:         console.log('onHttp', console.config({ compact: false }), { req, resp });\n  236:         console.log('request', req);\n  237:         console.log('request.headers', req.headers);\n  238:         console.log('response', resp);\n  239:         console.log('response.headers', resp.headers);\n  240          let text = await resp.text();\n  241:         console.log('onHttp', text);\n  242          /*text = text.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n  243          const { url } = resp;\n  244:         console.log('onHttp', url, { text });\n  245  \n  246          let json = resp.json();\n  247:         console.log('onHttp', { json });\n  248          let buffer = resp.arrayBuffer();\n  249:         console.log('onHttp', { buffer });*/\n  250        },\n  251        onFd(fd, rd, wr) {\n  ...\n  255        },\n  256        onMessage(ws, msg) {\n  257:         console.log('onMessage', { ws });\n  258          if(typeof msg == 'string') {\n  259            msg = msg.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n  ...\n  262          if(is_dns) {\n  263            let response = DNSResponse(msg);\n  264:           console.log('onMessage', { ws, response });\n  265          } else {\n  266:           console.log('onMessage', { ws, msg });\n  267          }\n  268        },\n  269        onError(ws, error) {\n  270:         console.log('onError', ws, error);\n  271        }\n  272      });\n  ...\n  280    createWS(url, {})\n  281      .then(() => {\n  282:       console.log('FINISHED');\n  283      })\n  284      .catch(err => {\n  285:       console.log('Failed', err);\n  286      });\n  287  \n  288    function quit(why) {\n  289:     console.log(`quit('${why}')`);\n  290      repl.cleanup(why);\n  291    }\n  ...\n  349    main(...scriptArgs.slice(1));\n  350  } catch(error) {\n  351:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n  352    std.exit(1);\n  353  } finally {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/debugger-client.js:\n   36  window.addEventListener('load', e => {\n   37    url = Util.parseURL();\n   38:   console.log('URL', url);\n   39    let socketURL = Util.makeURL({\n   40      location: url.location + '/ws',\n   ..\n   44    (async () => {\n   45      globalThis.ws = await CreateSocket(socketURL);\n   46:     console.log(`Loaded`, { socketURL, ws });\n   47    })();\n   48  });\n   ..\n   82      lines = [...tokens];\n   83    } catch(e) {\n   84:     console.log('Error tokenizing:', e.message);\n   85    }\n   86  \n   ..\n  107  \n  108  const SourceFile = props => {\n  109:   console.log('props.file', currentSource());\n  110    const file = useTrkl(currentSource);\n  111:   console.log('file', file);\n  112    const filename = file ? path.relative(cwd, file, cwd) : null;\n  113    let text =\n  ...\n  115        !/^<.*>$/.test(file) &&\n  116        useFetch(filename, resp => {\n  117:         console.log('Fetch', resp.status, Util.makeURL({ location: '/' + filename }));\n  118          return resp.text();\n  119        })) ||\n  ...\n  156  function Initiate(command, address, connect = false, args) {\n  157    address ??= `${url.query.address ?? '127.0.0.1'}:${url.query.port ?? 9901}`;\n  158:   console.log('Initiate', { command, address, connect, args });\n  159    return ws.send(JSON.stringify({ command, connect, address, args }));\n  160  }\n  ...\n  226  async function CreateSocket(endpoint) {\n  227    let ws = (globalThis.ws = new WebSocketClient());\n  228: \n  229:   console.log('ws', ws);\n  230    await ws.connect(endpoint);\n  231  \n  ...\n  236          data = JSON.parse(msg.data);\n  237        } catch(e) {\n  238:         console.log('WS ERROR parsing', msg.data);\n  239        }\n  240        globalThis.response = data;\n  241        if(data) {\n  242:         console.log('ws received ', data);\n  243          const { response, request_seq } = data;\n  244          if(response) {\n  ...\n  253            if(['start', 'connect'].indexOf(command) >= 0) {\n  254              cwd = response.cwd;\n  255: \n  256:             console.log('command:', command);\n  257:             console.log('response:', response);\n  258  \n  259              if(response.args[0]) {\n  ...\n  268            if(command == 'start') {\n  269              cwd = response.cwd;\n  270:             console.log('start', response);\n  271              RenderUI(response.args[0]);\n  272              continue;\n  ...\n  276          if(responses[request_seq]) responses[request_seq](data);\n  277        } else {\n  278:         console.log('WS', data);\n  279        }\n  280        if(['end', 'error'].indexOf(data.type) >= 0) {\n  ...\n  301  async function UpdatePosition() {\n  302    const stack = (globalThis.stack = await StackTrace());\n  303:   console.log('stack', stack);\n  304  \n  305    const { filename, line, name } = stack[0];\n  ...\n  367  /*const Button = ({image}) => {\n  368  const ref = useClick(e => {\n  369:   console.log('click!!!!');\n  370  });\n  371   return  h('button', { ref, class: 'button' }, h('img', { src: image }));\n  ...\n  377  \n  378  function RenderUI() {\n  379:   console.log('RenderUI');\n  380    /* if(currentSource() != file) \n  381      currentSource(file);*/\n  ...\n  403    const { body } = document;\n  404    let r = render(component, body);\n  405:   console.log('rendered', r);\n  406  }\n  407  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/rpc.js:\n  252      const { socket } = this;\n  253      const status = socket.CLOSE_STATUS_PROTOCOL_ERR || 1000;\n  254: \n  255:     console.log(`ERROR: ${message}`);\n  256      this.exception = new Error(message);\n  257:     console.log('error(', status, message, ')');\n  258      this.close(status, message.slice(0, 128));\n  259      return this.exception;\n  ...\n  262    close(status, reason) {\n  263      const { socket } = this;\n  264:     console.log('close(', status, reason, ')');\n  265      socket.close(status, reason);\n  266      delete this.socket;\n  ...\n  303  \n  304    onpong(data) {\n  305:     console.log('Connection.onpong:', data);\n  306    }\n  307  \n  308    onerror(error) {\n  309:     console.log('Connection.onerror', error ? ` (${error})` : '');\n  310      this.connected = false;\n  311      this.cleanup();\n  ...\n  313  \n  314    onclose(code, why) {\n  315:     console.log('Connection.onclose', code, why ? ` (${why})` : '');\n  316      this.connected = false;\n  317      this.cleanup();\n  ...\n  584  export function RPCSocket(url, service = RPCServer, verbosity = 1) {\n  585    if(!new.target) return new RPCSocket(url, service, verbosity);\n  586: \n  587:   console.log('RPCSocket', { url, service, verbosity });\n  588  \n  589    // const DEBUG = DebugFlags();\n  ...\n  592      ? (msg, ...args) => {\n  593          const { console } = globalThis;\n  594:         console \n  595            .log(\n  596              { msg },\n  597:             console.config({\n  598                multiline: false,\n  599                compact: false,\n  ...\n  671      /* prettier-ignore */ get connected() {\n  672        const ws = this.ws;\n  673:       console.log(\"ws\", ws);\n  674        if(ws)\n  675        return typeof ws.readyState == 'number' ? ws.readyState == ws.OPEN : false;\n  676      const {fdlist} = instance;\n  677:       console.log(\"fdlist\", fdlist);\n  678  \n  679      return  fdlist[Object.keys( fdlist)[0]].connected;\n  ...\n  915  function ForwardObject(e, thisObj) {\n  916    let obj = ForwardMethods(e, {}, thisObj);\n  917:   console.log(`ForwardObject`, { e, obj, thisObj });\n  918    return obj;\n  919  }\n  ...\n  942      let r = await client.waitFor('response');\n  943      if(t[cmd]) r = t[cmd](r);\n  944:     console.log(`RESPONSE to '${cmd}'`, r);\n  945      return r;\n  946    };\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/test-rpc.js:\n   71    );\n   72    if(params['no-tls'] === true) params.tls = false;\n   73:   console.log('params', params);\n   74:   console.log('server', server);\n   75:   console.log('setLog', setLog);\n   76    const {\n   77      '@': [url = 'wss://127.0.0.1:8999/ws'],\n   ..\n  106      std.exit(0);\n  107    };\n  108: \n  109:   console.log = repl.printFunction(log);\n  110    let uri = new URL(url);\n  111:   console.log('main', { url, uri });\n  112  \n  113    let cli = (globalThis.sock = new rpc.Socket(\n  ...\n  121    let connections = new Set();\n  122    const createWS = (globalThis.createWS = (url, callbacks, listen) => {\n  123:     console.log('createWS', { url, callbacks, listen });\n  124      const { protocol, host, port, path } = url;\n  125:     console.log('createWS', { protocol, host, port, path });\n  126      setLog((params.debug ? LLL_USER : 0) | (((params.debug ? LLL_NOTICE : LLL_WARN) << 1) - 1), (level, ...args) => {\n  127        repl.printStatus(...args);\n  ...\n  166          '/': ['/', '.', 'index.html'],\n  167          '/404.html': function* (req, res) {\n  168:           console.log('/404.html', { req, res });\n  169            yield '<html><head><meta charset=utf-8 http-equiv=\"Content-Language\" content=\"en\"/><link rel=\"stylesheet\" type=\"text/css\" href=\"/error.css\"/></head><body><h1>403</h1></body></html>';\n  170          },\n  ...\n  172            const { url, method, headers } = req;\n  173            const { status, ok, type } = res;\n  174: \n  175:           console.log('proxy', { url, method, headers }, { status, ok, url, type });\n  176          },\n  177          *config(req, res) {\n  178:           console.log('/config', { req, res });\n  179            yield '{}';\n  180          },\n  ...\n  198            if(components.length && components[0] === '') components.shift();\n  199            if(components.length < 2 || components[0] != 'home') throw new Error(`Access error`);\n  200: \n  201:           console.log('\\x1b[38;5;215m*files\\x1b[0m', { dir, components, absdir });\n  202:           console.log('\\x1b[38;5;215m*files\\x1b[0m', { absdir });\n  203  \n  204            let names = fs.readdirSync(absdir) ?? [];\n  ...\n  237  \n  238            entries = entries.sort(cmp);\n  239: \n  240:           console.log('\\x1b[38;5;215m*files\\x1b[0m', { entries });\n  241            names = entries.map(([name, obj]) => (objects ? obj : name));\n  242  \n  ...\n  248        ...callbacks,\n  249        onConnect(ws, req) {\n  250:         console.log('test-rpc', { ws, req });\n  251          connections.add(ws);\n  252  \n  ...\n  260        onHttp(ws, req, rsp) {\n  261          const { url, method, headers } = req;\n  262:         console.log('\\x1b[38;5;33monHttp\\x1b[0m [\\n  ', req, ',\\n  ', rsp, '\\n]');\n  263          return rsp;\n  264        },\n  265        onMessage(ws, data) {\n  266:         console.log('onMessage', ws, data);\n  267          return callbacks.onMessage(ws, data);\n  268        },\n  ...\n  307  \n  308    function quit(why) {\n  309:     console.log(`quit('${why}')`);\n  310  \n  311      let cfg = { inspectOptions: console.options };\n  ...\n  320    main(...scriptArgs.slice(1));\n  321  } catch(error) {\n  322:   console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n  323    std.exit(1);\n  324  } finally {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js:\n  134          const { url, method, headers } = req;\n  135          const { status, ok, type } = res;\n  136: \n  137:         console.log('proxy', { url, method, headers }, { status, ok, url, type });\n  138        },\n  139        *config(req, res) {\n  140:         console.log('/config', { req, res });\n  141          yield '{}';\n  142        },\n  ...\n  144        '/': ['/', '.', 'index.html'],\n  145        '/404.html': function* (req, res) {\n  146:         console.log('/404.html', { req, res });\n  147          yield '<html><head><meta charset=utf-8 http-equiv=\"Content-Language\" content=\"en\"/><link rel=\"stylesheet\" type=\"text/css\" href=\"/error.css\"/></head><body><h1>403</h1></body></html>';\n  148        }\n  ...\n  288        const host = args[1] ?? 'localhost',\n  289          port = args[2] ? +args[2] : 30000;\n  290: \n  291:       console.log('MinnetServer', { host, port });\n  292  \n  293        Init('SERVER');\n  ...\n  303            '/': ['/', '.', 'index.html'],\n  304            '/404.html': function* (req, res) {\n  305:             console.log('/404.html', { req, res });\n  306              yield '<html><head><meta charset=utf-8 http-equiv=\"Content-Language\" content=\"en\"/><link rel=\"stylesheet\" type=\"text/css\" href=\"/error.css\"/></head><body><h1>403</h1></body></html>';\n  307            },\n  308            *generator(req, res) {\n  309:             console.log('/generator', { req, res });\n  310              yield 'This';\n  311              yield ' ';\n  ...\n  323            /*const { url, path } = req;\n  324            const { family, address, port } = ws;\n  325:           console.log('onConnect', { url, path, family, address, port });*/\n  326          },\n  327          onClose: (ws, status) => {\n  328:           console.log('onClose', { ws, status });\n  329            ws.close(status);\n  330            if(status >= 1000) exit(status - 1000);\n  331          },\n  332          onError: (ws, error) => {\n  333:           console.log('onError', { ws, error });\n  334          },\n  335          onHttp: (req, rsp) => {\n  336:           console.log('onHttp', { req, rsp });\n  337          },\n  338          onFd: (fd, rd, wr) => {\n  ...\n  342          },\n  343          onMessage: (ws, msg) => {\n  344:           console.log('onMessage', typeof ws, { ws, msg });\n  345            ws.send('ECHO: ' + msg);\n  346            //ws.send(JSON.stringify({ type: 'message', msg }));\n  ...\n  349      }\n  350    } catch(error) {\n  351:     console.log('ERROR', error);\n  352    }\n  353  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/test-fetch.js:\n    5    try {\n    6      let f = open(name, 'w+');\n    7:     console.log(`WriteFile \\x1b[1;31m${name}\\x1b[0m =`, f);\n    8  \n    9      let r = f.write(data, 0, data.byteLength);\n   ..\n   33        }\n   34      });\n   35:     console.log(`fetching \\x1b[1;33m${url}\\x1b[0m`);\n   36:     console.log(console.config({ compact: 0 }), request);\n   37      let promise = fetch(request, {});\n   38      promise\n   39        .then(response => {\n   40:         console.log(console.config({ compact: 0 }), response);\n   41          let prom = response.arrayBuffer();\n   42          prom.then(buf => {\n   43            let prom = response.text();\n   44            prom.then(text => {\n   45:             console.log('arrayBuffer()', console.config({ compact: 2 }), buf);\n   46  \n   47              let filename = response.url.path.replace(/.*\\//g, '');\n   48:             console.log('filename', filename);\n   49              WriteFile(filename, buf);\n   50  \n   ..\n   90    function run() {\n   91      let promise = FetchNext(args);\n   92:     console.log('promise', promise);\n   93      promise\n   94        .then(() => {\n   95:         console.log('SUCCEEDED');\n   96        })\n   97        .catch(err => {\n   98:         console.log('FAILED:', typeof err, err);\n   99        });\n  100    }\n  ...\n  104    main(...scriptArgs.slice(1));\n  105  } catch(error) {\n  106:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n  107    exit(1);\n  108  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/common.js:\n   14    )\n   15      return;\n   16: \n   17:   console.log('assert', { actual, expected, message });\n   18  \n   19    throw Error(\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/test-server-http.js:\n   10    return Client(url, {\n   11      onConnect(ws, req) {\n   12:       console.log('onConnect', { ws, req });\n   13      },\n   14      onClose(ws, reason) {\n   15:       console.log('onClose', { ws, reason });\n   16        exit(1);\n   17      },\n   18      onError(ws, error) {\n   19:       console.log('onError', { ws, error });\n   20        exit(1);\n   21      },\n   22      onHttp(ws, req, resp) {\n   23:       console.log('onHttp', { req, resp });\n   24  \n   25        let file = loadFile('.' + req.path);\n   26  \n   27        let body = resp.text();\n   28:       console.log('onHttp', { body, file });\n   29  \n   30        if(file.length == body.length) if (file === body) exit(0);\n   ..\n   43    kill(pid, SIGTERM);\n   44    wait4(pid, status, WNOHANG);\n   45:   console.log('status', status);\n   46  }\n   47  \n   ..\n   49    main(...scriptArgs.slice(1));\n   50  } catch(error) {\n   51:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n   52    exit(1);\n   53  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/test-client.js:\n   17        {\n   18          onConnect(ws, req, resp) {\n   19:           console.log('onConnect', { ws, req, resp });\n   20            const { protocol } = new URL(req.url);\n   21:           console.log('protocol', protocol);\n   22  \n   23            if(!protocol.startsWith('http')) {\n   ..\n   50          },\n   51          onClose(ws, reason) {\n   52:           console.log('onClose', { ws, reason });\n   53            exit(0);\n   54          },\n   55          onError(ws, error) {\n   56:           console.log('onError', { ws, error });\n   57            exit(1);\n   58          },\n   ..\n   64          },\n   65          onHttp(ws, req, resp) {\n   66:           console.log('onHttp', { req, resp });\n   67  \n   68            let body = resp.text();\n   69  \n   70            puts(body);\n   71: \n   72:           console.log(`Headers:`, resp.headers);\n   73          }\n   74        },\n   ..\n   81    main(...scriptArgs.slice(1));\n   82  } catch(error) {\n   83:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n   84    exit(1);\n   85  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/test-server-ws.js:\n   10    return Client(url, {\n   11      onConnect(ws, req) {\n   12:       console.log('onConnect', { ws, req });\n   13        ws.send(message);\n   14      },\n   15      onClose(ws, reason) {\n   16:       console.log('onClose', { ws, reason });\n   17        exit(0);\n   18      },\n   19      onError(ws, error) {\n   20:       console.log('onError', { ws, error });\n   21        exit(1);\n   22      },\n   23      onMessage(ws, msg) {\n   24:       console.log('onMessage', { ws, msg });\n   25        const exitCode = +!(`ECHO: ${message}` == msg);\n   26        ws.close(1000 + exitCode);\n   ..\n   39    kill(pid, SIGTERM);\n   40    wait4(pid, status, WNOHANG);\n   41:   console.log('status', status);\n   42  }\n   43  \n   ..\n   45    main(...scriptArgs.slice(1));\n   46  } catch(error) {\n   47:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n   48    exit(1);\n   49  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/spawn.js:\n   12    let argv = [getexe(), thisdir() + '/' + script].concat(args);\n   13    let fd = open(log, O_WRONLY | O_CREAT | O_TRUNC, 0o644);\n   14:   console.log('opened', log, fd);\n   15    let pid = exec(argv, { block: false, usePath: false, file: argv[0], stdin: fd, stdout: fd, stderr: fd });\n   16    close(fd);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-glfw/example.js:\n    9  \n   10  const window = new Window(800, 600, 'OpenGL');\n   11: console.log(`id: ${window.id}`);\n   12  context.current = window;\n   13  \n   ..\n   15  const { width, height } = size;\n   16  const { x, y } = position;\n   17: \n   18: console.log(`width: ${width}, height: ${height}, x: ${x}, y: ${y}`);\n   19  \n   20  while(!window.shouldClose) {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-glfw/test-glfw.js:\n   13      let x = cx + r * Math.cos(theta); //calculate the x component\n   14      let y = cy + r * Math.sin(theta); //calculate the y component\n   15:     console.log(`ii: ${ii} x: ${x} y: ${y}`);\n   16      glVertex2f(x, y); //output vertex\n   17    }\n   ..\n   24    //console.log('gladLoadGL() =', gladLoadGL());\n   25    //console.log('glewInit() =', glewInit());\n   26:   console.log('getProcAddress(\"glVertex3f\") =', getProcAddress('glVertex3f'));\n   27  \n   28    const { position, size } = window;\n   ..\n   30    const { x, y } = position;\n   31    let textures = [];\n   32: \n   33:   console.log(`width: ${width}, height: ${height}, x: ${x}, y: ${y}`);\n   34  \n   35    const hues = [\n   ..\n  133      std.exit(0);\n  134    } catch(error) {\n  135:     console.log('ERROR:', error);\n  136    }\n  137  };\n\n/home/roman/Projects/plot-cv/quickjs/qjs-glfw/window.c:\n   12    const defaultCallbacks = {\n   13      handlePos(x, y)  {\n   14:       console.log('handlePos', { x, y)  });\n   15      },\n   16      handleSize(width, height)  {\n   17:       console.log('handleSize', { width, height)  });\n   18      },\n   19      handleClose(w)  {\n   20:       console.log('handleClose', { w)  });\n   21      },\n   22      handleRefresh(w)  {\n   23:       console.log('handleRefresh', { w)  });\n   24      },\n   25      handleFocus(focused)  {\n   26:       console.log('handleFocus', { focused)  });\n   27      },\n   28      handleIconify(iconified)  {\n   29:       console.log('handleIconify', { iconified)  });\n   30      },\n   31      handleFramebufferSize(width, height)  {\n   32:       console.log('handleFramebufferSize', { width, height)  });\n   33      },\n   34      handleMouseButton(button, action, mods)  {\n   35:       console.log('handleMouseButton', { button, action, mods)  });\n   36      },\n   37      handleCursorPos(x, y)  {\n   38:       console.log('handleCursorPos', { x, y)  });\n   39      },\n   40      handleCursorEnter(cur)  {\n   41:       console.log('handleCursorEnter', { cur)  });\n   42      },\n   43      handleScroll(xoffset, yoffset)  {\n   44:       console.log('handleScroll', { xoffset, yoffset)  });\n   45      },\n   46      handleKey(key, scancode, action, mods)  {\n   47:       console.log('handleKey', { key, scancode, action, mods)  });\n   48      },\n   49      handleChar(c)  {\n   50:       console.log('handleChar', { c)  });\n   51      },\n   52      handleCharMods(c, mods)  {\n   53:       console.log('handleCharMods', { c, mods)  });\n   54      },\n   55      handleDrop(argcargv)  {\n   56:       console.log('handleDrop', { argcargv)  });\n   57      }\n   58    });\n\n/home/roman/Projects/plot-cv/quickjs/qjs-glfw/test.js:\n    4  function main(...args) {\n    5    let size = Screen.size(0);\n    6: \n    7:   console.log('screen size:', size);\n    8  \n    9    let win = new Window('Main Window');\n   10: \n   11:   console.log('win:', win);\n   12  \n   13    let { imageRect } = win;\n   14:   console.log('imageRect:', imageRect);\n   15  }\n   16  \n   ..\n   20      std.exit(0);\n   21    } catch(error) {\n   22:     console.log('ERROR:', error);\n   23    }\n   24  };\n\n/home/roman/Projects/plot-cv/quickjs/qjs-glfw/js/glad.js:\n 2389  \n 2390  export function glVertex3f(x, y, z) {\n 2391:   console.log('glVertex3f', { x, y, z });\n 2392    return call('glVertex3f', x, y, z);\n 2393  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-glfw/js/gui.js:\n   14      const size = typeof args[0] == 'number' && typeof args[1] == 'number' ? new glfw.Size(...args.splice(0, 2)) : Screen.size(args[1]);\n   15      const [name, screenIndex = 0] = args;\n   16:     console.log('size', size);\n   17:     console.log('name', name);\n   18:     console.log('screenIndex', screenIndex);\n   19  \n   20      this.name = name;\n   ..\n   51      let dim = new glfw.Size(rect);\n   52      let { x, y } = dim.align(s, n);\n   53:     console.log('pos', { x, y });\n   54      return this.move(x, y);\n   55    }\n   ..\n   69  \n   70    setMouseCallback(fn) {\n   71:     console.log('Window.setMouseCallback', fn);\n   72      this.#handle.handlePos = fn;\n   73      this.#handle.handleMouseButton = fn;\n\n/home/roman/Projects/plot-cv/quickjs/qjs-glfw/js/glew.js:\n  801    }\n  802    addr ??= dlsym(libGLEW, 'gl' + name);\n  803: \n  804:   console.log('glewGetProcAddress', { addr });\n  805    return addr;\n  806  }\n  ...\n  810  export function glewInit() {\n  811    let ret = call('glewInit');\n  812:   console.log('glewInit', ret);\n  813  \n  814    define('glAccum', glewGetProcAddress('Accum'), null, 'void', 'unsigned int', 'float');\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/test-require.js:\n    1  import require from 'require';\n    2: \n    3: console.log('require', require);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js:\n   59    let f = std.open(file, 'w+');\n   60    f.puts(tok);\n   61:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   62  }\n   63  \n   ..\n  466    main(...scriptArgs.slice(1));\n  467  } catch(error) {\n  468:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  469    std.exit(1);\n  470  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js:\n   61    });\n   62    Object.assign(globalThis, { ...globalThis.xml, ...dom, ...util, ...pointer, ...location });\n   63: \n   64:   console.log('params', params);\n   65  \n   66    repl = new REPL(\n   ..\n   76    main(...scriptArgs.slice(1));\n   77  } catch(error) {\n   78:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   79    std.exit(1);\n   80  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/test-require-cjs.js:\n    1  const r = require;\n    2: \n    3: console.log('require', r);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js:\n  134  \n  135    opts.compact = false;\n  136: \n  137:   console.log(str, opts, ...args);\n  138  };\n  139  \n  ...\n  156        //console.log('os.rename() =', err);\n  157        if(err) throw new Error(`FileReplacer rename() error: ${std.strerror(-err)}`);\n  158:       console.log(`${file} written (${size} bytes)`);\n  159      }\n  160    });\n  ...\n  413        }\n  414        if(debug >= 3)\n  415:         console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  416  \n  417        if(token.lexeme == ';' && cond !== true) doneImports = true;\n  ...\n  424          if(imp.last.lexeme == ';') {\n  425            if(debug > 2)\n  426:             console.log(\n  427                'imp',\n  428                imp[0].loc + '',\n  429:               console.config({ breakLength: 80, compact: 0 }),\n  430                TokenSequence(imp) + ''\n  431              );\n  ...\n  604        }, []);\n  605        tokens = AddWhitespace(tokens);\n  606:       console.log('tokens', tokens);\n  607  \n  608        return TokenSequence(tokens).toString();\n  ...\n  678  \n  679        if(debug > 2)\n  680:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  681  \n  682        //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  ...\n  706  \n  707        if(debug >= 2)\n  708:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  709        if(debug > 1) console.log('impexp', compact(1), { range: new NumericRange(...range), loc: loc + '' });\n  710  \n  ...\n  738        }\n  739        if(!path.isFile(file)) {\n  740:         console.log(`Path must exist '${file}'`);\n  741          continue;\n  742        }\n  ...\n  755    /*\n  756    let end = Date.now();\n  757:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  758  */\n  759  \n  ...\n  762    if(showDeps) {\n  763      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  764: \n  765:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  766    }\n  767  \n  ...\n  893        range = r;\n  894      } catch(e) {}\n  895:     console.log('NumericRange.from', range);\n  896      return range;\n  897    }\n  ...\n  904        if(IsRange(range)) {\n  905          range = [...range];\n  906:         console.log('range#' + ++i, inspect(range));\n  907  \n  908          if(IsRange(prev) && IsRange(range)) {\n  ...\n 1029      };\n 1030      if(debug > 2)\n 1031:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1032          file,\n 1033          range: [range[0], range[1]]\n ....\n 1037      const { length } = this;\n 1038      if(debug > 2)\n 1039:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1040          start,\n 1041          end,\n ....\n 1126        const hole = holes[i];\n 1127        const [range] = this[i];\n 1128:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1129      }\n 1130      //console.log('holes', holes);\n ....\n 1181        } else {\n 1182          let type = getTypeName(str);\n 1183:         console.log('invalid type:', type);\n 1184          throw new Error(type);\n 1185        }\n ....\n 1270    let f = std.open(file, 'w+');\n 1271    f.puts(tok);\n 1272:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1273  }\n 1274  \n ....\n 1542      try {\n 1543        const nbytes = results[0].write(stream);\n 1544:       console.log(`${nbytes} bytes written to '${out.file}'`);\n 1545      } catch(error) {\n 1546:       console.log(`write error ('${out.file}'):`, error);\n 1547        std.exit(1);\n 1548      }\n ....\n 1573    main(...scriptArgs.slice(1));\n 1574  } catch(error) {\n 1575:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1576    std.exit(1);\n 1577  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js:\n  103  \n  104      /*console.log('str', str);\n  105:     console.log('str', str.split('\\n')[0]);*/\n  106  \n  107      let lexer = new CLexer(str, file);\n  ...\n  174  \n  175            cFuncListNames.push(header[0]);\n  176: \n  177:           console.log('cfuncList', console.config({ compact: 1 }), cfuncList);\n  178            cFuncLists.push(cfuncList);\n  179  \n  ...\n  251        output.flush();\n  252      }\n  253:     console.log('cFuncListObjects', console.config({ depth: 10, compact: 1 }), cFuncListObjects);\n  254    }\n  255  \n  ...\n  263    main(...scriptArgs.slice(1));\n  264  } catch(error) {\n  265:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  266    std.exit(1);\n  267  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js:\n   30  \n   31    reader = await stream.readable.getReader();\n   32:   console.log('reader', reader);\n   33  \n   34    do {\n   35      chunk = reader.read();\n   36:     console.log('chunk', chunk);\n   37      chunk = await chunk;\n   38:     console.log('chunk', chunk);\n   39    } while(chunk && !chunk.done);\n   40  \n   ..\n   45    main(...scriptArgs.slice(1));\n   46  } catch(error) {\n   47:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   48  }\n   49  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stack.js:\n   32    });\n   33    let stack = Func1();\n   34:   console.log('stack', stack);\n   35    let frame = stack[0];\n   36: \n   37:   console.log('frame', frame);\n   38:   console.log('frame.toString()', frame.toString());\n   39:   console.log('stack.toString()', stack.toString());\n   40:   console.log(\n   41      `stack.map(fr => fr+'')`,\n   42      [...stack].map(fr => fr + '')\n   43    );\n   44:   console.log(\n   45      `stack.map(fr => fr.loc)`,\n   46      [...stack].map(fr => fr.loc)\n   ..\n   53    main(...scriptArgs.slice(1));\n   54  } catch(error) {\n   55:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   56    std.exit(1);\n   57  } finally {\n   58:   console.log('SUCCESS');\n   59  }\n   60  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js:\n   18      }\n   19    });\n   20:   console.log('Repeater', Repeater);\n   21  \n   22    let rpt = new Repeater(async (push, stop) => {\n   23      try {\n   24:       console.log('Repeater', { push, stop });\n   25:       console.log('await push(1234) =', await push(1234));\n   26:       console.log('await push(\"blah\") =', await push('blah'));\n   27        //  console.log('await stop( )) =', await stop( ));\n   28        stop();\n   29      } catch(err) {\n   30:       console.log('Repeater err=', err);\n   31      }\n   32    });\n   ..\n   36  \n   37    while((it = rpt.next(count++))) {\n   38:     console.log(`it[${count}]`, it);\n   39      try {\n   40        it = await it;\n   41:       console.log(`it[${count}]`, typeof it);\n   42      } catch(err2) {\n   43:       console.log('Repeater err2=', err2);\n   44      }\n   45:     console.log(`it[${count}]`, console.config({ compact: 2 }), it);\n   46:     console.log(`rpt.state`, states[rpt.state]);\n   47      if(it.done) break;\n   48    }\n   49:   console.log(`rpt.state`, states[rpt.state]);\n   50    /*\n   51    for await(let value of rpt) {\n   52:     console.log('value', value);\n   53    }*/\n   54  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js:\n   15    let f = std.open(file, 'w+');\n   16    f.puts(data);\n   17:   console.log('Wrote \"' + file + '\": ' + data.length + ' bytes');\n   18  }\n   19  \n   ..\n   33  function main(...args) {\n   34    globalThis.console = new Console({ inspectOptions });\n   35:   console.options.compact = 3;\n   36    // console.log('deep:', deep);\n   37    /*  let data = std.loadFile(args[0] ?? 'FM-Radio-Receiver-1.5V.xml', 'utf-8');\n   38  \n   39    let result = xml.read(data);\n   40:   console.log('result:', inspect(result, inspectOptions));*/\n   41  \n   42    /* let found = deep.find(result, n => typeof n == 'object' && n != null && n.tagName == 'elements');\n   43: \n   44:   console.log('found:', inspect(found, inspectOptions));\n   45: \n   46:   console.log('array:', inspect([, , , , 4, 5, 6, , ,], inspectOptions));\n   47    let testObj = {};\n   48  \n   49    deep.set(testObj, 'a.0.b.0.c\\\\.x.0', null);\n   50    deep.unset(testObj, 'a.0.b.0');\n   51:   console.log('testObj: ' + inspect(testObj, inspectOptions));\n   52  \n   53    let out = new Map();\n   54: \n   55:   console.log('deep.MASK_STRING:', deep.MASK_NUMBER);\n   56:   console.log('deep:', deep);\n   57  \n   58    let clone = [];\n   ..\n   63  \n   64   let node = deep.get(result, '2.children.0.children.3.children.8.children.13.children.20');\n   65:   console.log('get():', node);\n   66    let path = deep.pathOf(result, node);\n   67:   console.log('pathOf():', path);\n   68  */\n   69  \n   ..\n   94  \n   95    let it = deep.iterate(obj1, () => true, deep.RETURN_VALUE_PATH);\n   96: \n   97:   console.log('it', it);\n   98:   console.log('it[Symbol.iterator]', it[Symbol.iterator]);\n   99:   console.log('it.next', it.next);\n  100    for(let item of it) console.log('deep.iterate', item);\n  101  \n  102    /*  for(let [n,p] of deep.iterate(obj3,  n => typeof n == 'object' && n != null))\n  103:     console.log('deep.iterate', { n, p });*/\n  104  \n  105    let pred = Predicate.property('name', Predicate.equal('x'));\n  106    let pred2 = Predicate.property('name');\n  107: \n  108:   console.log('pred:', pred);\n  109:   console.log('pred2:', pred2);\n  110  \n  111    for(let [n, p] of deep.iterate(obj3, Predicate.property('4'), deep.RETURN_VALUE_PATH))\n  112:     console.log(`deep.iterate()`, { n, p });\n  113: \n  114:   console.log('select():', deep.select(obj3, pred, deep.RETURN_VALUE_PATH));\n  115:   console.log(\n  116      'select()2:',\n  117      deep.select(obj3, (n, p) => typeof n == 'object', deep.RETURN_VALUE_PATH)\n  118    );\n  119:   console.log(\n  120      'select()3:',\n  121      deep.select(obj3, () => true, deep.RETURN_VALUE_PATH)\n  ...\n  125    for(let o of [obj1, obj2]) {\n  126      let it = deep.iterate(o);\n  127:     console.log('it:', it);\n  128      for(let [value, path] of it) console.log('item:', { value, path });\n  129    }\n  130:   console.log('equals():', deep.equals(obj1, obj2));\n  131:   console.log('equals():', deep.equals(obj3, obj2));\n  132: \n  133:   console.log('deep.RETURN_PATH:', deep.RETURN_PATH);\n  134:   console.log('deep.RETURN_VALUE:', deep.RETURN_VALUE);\n  135:   console.log('deep.RETURN_VALUE_PATH:', deep.RETURN_VALUE_PATH);\n  136:   console.log('deep.RETURN_PATH_VALUE:', deep.RETURN_PATH_VALUE);\n  137:   console.log(\n  138      'find():',\n  139      deep.find(obj1, n => n == Infinity, deep.RETURN_PATH_VALUE)\n  ...\n  141  \n  142    deep.forEach(obj2, (n, p) => console.log('deep.forEach', { n, p }));\n  143:   console.log('obj1:', obj1);\n  144:   console.log('clone():', deep.clone(obj3));\n  145  \n  146    const IsNumeric = v => Number.isFinite(v) || (typeof v).startsWith('big');\n  147    const IsObject = v => typeof v == 'object' && v !== null;\n  148: \n  149:   console.log(\n  150      'select():',\n  151      deep.select(\n  ...\n  163    for(let item of it) {\n  164      let [value, path] = item;\n  165: \n  166:     console.log(`path: ${(path + '').padEnd(10)} value:`, value);\n  167    }\n  168    std.gc();\n  ...\n  172    main(...scriptArgs.slice(1));\n  173  } catch(error) {\n  174:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  175    std.exit(1);\n  176  } finally {\n  177:   console.log('SUCCESS');\n  178  }\n  179  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js:\n   12  let repl = {\n   13    printStatus(...args) {\n   14:     console.log(...args);\n   15    }\n   16  };\n   ..\n   49      args\n   50    );\n   51: \n   52:   console.log('params', params);\n   53  \n   54    /*  const dom = {\n   ..\n   79    function processFile(file) {\n   80      file = path.join(path.dirname(scriptArgs[0]), file);\n   81:     console.log('Processing file:', file);\n   82      let base = path.basename(file, path.extname(file));\n   83  \n   ..\n   85      let start = Date.now();\n   86      let end = Date.now();\n   87:     console.log(`parsing took ${end - start}ms`);\n   88  \n   89      start = Date.now();\n   ..\n   96  \n   97      /*  let walker = doc.createTreeWalker(doc.body);\n   98: \n   99:   console.log('walker', walker);*/\n  100  \n  101      let rawDoc = Node.raw(doc);\n  102      Object.assign(globalThis, { rawDoc, doc });\n  103: \n  104:     console.log('writeXML', writeXML);\n  105  \n  106      fs.writeFileSync('output.xml', writeXML(rawDoc));\n  107: \n  108:     console.log('doc', doc);\n  109  \n  110      globalThis.fs = fs;\n  111  \n  112      let firstLayer = doc.querySelector('layer');\n  113:     console.log('firstLayer', firstLayer);\n  114      let allLayers = doc.querySelectorAll('layer');\n  115:     console.log('allLayers', console.config({ compact: false, maxArrayLength: Infinity }), allLayers);\n  116  \n  117      let ll = allLayers.last;\n  118:     console.log('ll', ll);\n  119:     console.log('ll.path', ll.path);\n  120  \n  121      let lt = doc.querySelector('layer[name=Top]');\n  122:     console.log('lt', lt);\n  123: \n  124:     console.log('lt.path', lt.path);\n  125  \n  126      let l1 = doc.querySelector('layer:nth-child(2)');\n  127:     console.log('l1', l1);\n  128: \n  129:     console.log('l1.path', l1.path);\n  130  \n  131      let count = 0;\n  ...\n  188    main(...scriptArgs.slice(1));\n  189  } catch(error) {\n  190:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  191  }\n  192  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js:\n   43  \n   44  function BufferFile(file) {\n   45:   console.log('BufferFile', file);\n   46    if(buffers[file]) return buffers[file];\n   47    let b = (buffers[file] = fs.readFileSync(file, { flag: 'r' }));\n   ..\n   52      }\n   53      const fd = os.open(file, os.O_RDONLY);\n   54:     console.log('mmap', [0, size, PROT_READ, MAP_PRIVATE, fd, 0]);\n   55  \n   56      b = mmap(0, size, PROT_READ, MAP_PRIVATE, fd, 0);\n   ..\n   76    let f = std.open(file, 'w+');\n   77    f.puts(tok);\n   78:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   79  }\n   80  \n   ..\n  223      }\n  224    });\n  225:   console.log('args', args);\n  226  \n  227    let optind = 0;\n  ...\n  246    }*/\n  247    files = params['@'];\n  248:   console.log('files', files);\n  249  \n  250    const RelativePath = file => path.join(path.dirname(process.argv[1]), '..', file);\n  ...\n  255  \n  256    function ProcessFile(file) {\n  257:     console.log(`Loading '${file}'...`);\n  258      const log = (...args) => console.log(`${file}:`, ...args);\n  259  \n  ...\n  279  \n  280      const lexer = lex[type];\n  281: \n  282:     console.log('lexer', lexer);\n  283:     console.log('lexer.tokens', lexer.tokens);\n  284      T = lexer.tokens.reduce((acc, name, id) => ({ ...acc, [name]: id }), {});\n  285  \n  ...\n  386  \n  387      /* console.log('lexer.rules', Object.fromEntries(lexer.ruleNames.map(n => [n, new RegExp(lexer.getRule(n)[1], 's')])));\n  388:     console.log('lexer.states', lexer.states);\n  389:     console.log('lexer.tokens', lexer.tokens);*/\n  390  \n  391      let showToken = tok => {\n  ...\n  402  \n  403      let it = lexer[Symbol.iterator]();\n  404:     console.log('it', it);\n  405  \n  406      for(;;) {\n  ...\n  498    }\n  499    // console.log('buffers', buffers);\n  500:   console.log('files', files);\n  501  }\n  502  \n  ...\n  504    main(...scriptArgs.slice(1));\n  505  } catch(error) {\n  506:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  507    std.exit(1);\n  508  } finally {\n  509:   console.log('SUCCESS');\n  510  }\n  511  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_css3_selectors.js:\n   20    let typeSel = new TypeSelector('html');\n   21    //typeSel=Predicate.string('HTML');\n   22: \n   23:   console.log('typeSel() =', typeSel({ tagName: 'HTML' }));\n   24  \n   25    let classSel = new ClassSelector('common');\n   26: \n   27:   console.log('classSel() =', classSel({ attributes: { class: 'common big item' } }));\n   28  \n   29    let attrSel = new AttributeSelector('name', 'test');\n   30: \n   31:   console.log('attrSel =', attrSel.toSource());\n   32:   console.log('attrSel() =', attrSel({ attributes: { name: 'test' } }));\n   33  \n   34    let propSel = Predicate.property('name', Predicate.string('test'));\n   35:   console.log('propSel() =', propSel({ name: 'test' }));\n   36  \n   37    let xmlDoc = new Parser().parseFromString(readFileSync('tests/test1.xml', 'utf-8'));\n   38:   console.log('xmlDoc', xmlDoc);\n   39:   console.log('xmlDoc', xmlDoc.querySelector('.icon span'));\n   40  \n   41    for(let selector of ['element.big[name=\"test\"]', '[name=\"C1\"]']) {\n   42:     console.log('selector', selector);\n   43      let pred = [...parseSelectors(selector)];\n   44: \n   45:     console.log('pred', pred);\n   46:     console.log('pred', pred + '');\n   47    }\n   48  \n   ..\n   53    main(...process.argv.slice(1));\n   54  } catch(error) {\n   55:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   56  } finally {\n   57:   console.log('SUCCESS');\n   58  }\n   59  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js:\n   26    la = new SockAddr(AF_INET, '0.0.0.0', randi() & 0xffff);\n   27    let ra = new SockAddr(AF_INET, '127.0.0.1', 22);\n   28:   console.log(`classes`, { socklen_t, fd_set, SockAddr, Socket });\n   29:   console.log(`la.clone() =`, la.clone());\n   30:   console.log(`la.toString() =`, la.toString());\n   31:   console.log(`ra.toString() =`, ra.toString());\n   32    let opt, ret, data, timeout, pfds, sock;\n   33:   console.log('AsyncSocket', AsyncSocket);\n   34    sock = new AsyncSocket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n   35:   console.log('sock', sock);\n   36    sock.nonblock = false;\n   37:   console.log(`sock.nonblock =`, sock.nonblock);\n   38: \n   39:   console.log(`SOL_SOCKET =`, SOL_SOCKET);\n   40:   console.log(`SO_REUSEADDR =`, SO_REUSEADDR);\n   41    sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, [1]);\n   42  \n   43    sock.getsockopt(SOL_SOCKET, SO_REUSEADDR, (opt = []), 4);\n   44:   console.log(`opt =`, opt);\n   45  \n   46    sock.setsockopt(SOL_SOCKET, SO_REUSEPORT, [1]);\n   ..\n   65      for(let [name, value] of so_flags) {\n   66        sock.getsockopt(SOL_SOCKET, value, (opt = [0]), 4);\n   67:       console.log(`[${value.toString()}]`.padStart(4), `${name.padEnd(30)} =`, opt);\n   68      }\n   69    }\n   70    // console.log(`ndelay(${sock.fd}) =`, sock.ndelay());\n   71:   console.log(`bind(${sock.fd}, `, la, `) =`, sock.bind(la));\n   72:   console.log(`connect(${sock.fd}, `, ra, `) =`, sock.connect(ra), sock.error);\n   73  \n   74    function DumpSock(s) {\n   ..\n  110  \n  111    }*/\n  112:   console.log('local =', sock.local);\n  113:   console.log('remote =', sock.remote);\n  114  \n  115    let n,\n  ...\n  118    os.setWriteHandler(sock.fd, () => {\n  119      os.setWriteHandler(sock.fd, null);\n  120: \n  121:     console.log(`sock.fd = ${sock.fd} connected`);\n  122  \n  123      os.setReadHandler(sock.fd, () => {\n  ...\n  128          os.setReadHandler(sock.fd, null);\n  129        }\n  130: \n  131:       console.log(\n  132          `recv(${sock.fd}, ArrayBuffer ${buf.byteLength}) = ${n} ${n >= 0 ? quote(data, \"'\") : sock.error + ''}`.padEnd(\n  133            70\n  ...\n  140          let start = 4;\n  141          n = sock.send(txt, start);\n  142:         console.log(\n  143            `send(${quote(txt.slice(start), \"'\")}, ${start}) =`,\n  144            n,\n  ...\n  163    let { open, error } = sock;\n  164    if(error) console.log('error:', error);\n  165:   console.log('O_NONBLOCK', O_NONBLOCK.toString(2).padStart(16, '0'));\n  166:   console.log('O_ASYNC   ', O_ASYNC.toString(2).padStart(16, '0'));\n  167:   console.log('sock.mode ', sock.mode.toString(2).padStart(16, '0'));\n  168: \n  169:   console.log(('sock.close() ' + sock.close() + '').padEnd(70), ...DumpSock(sock));*/\n  170  }\n  171  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js:\n   13  let repl = {\n   14    printStatus(...args) {\n   15:     console.log(...args);\n   16    }\n   17  };\n   ..\n   49      args\n   50    );\n   51: \n   52:   console.log('params', params);\n   53  \n   54    if(params.interactive) StartREPL();\n   ..\n   58    main(...scriptArgs.slice(1));\n   59  } catch(error) {\n   60:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   61    std.exit(1);\n   62  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js:\n   15    let f = std.open(file, 'w+');\n   16    f.puts(data);\n   17:   console.log('Wrote \"' + file + '\": ' + data.length + ' bytes');\n   18  }\n   19  \n   ..\n   44    //  console.log('tags',tags);\n   45    let numTags = tags.length;\n   46:   console.log(`Parsing '${/*path.basename*/ file}' took ${end - start}ms (${numTags} elements)`);\n   47  \n   48    if(/NETSCAPE-Bookmark-file-1/i.test(result[0].tagName)) {\n   ..\n   85          const add_date = new Date(+element.attributes['ADD_DATE'] * 1000);\n   86          const href = element.attributes['HREF'];\n   87:         console.log('a', { href, add_date });\n   88        }\n   89      }\n   ..\n   96    let str = writeXML(result);\n   97    end = process.hrtime.bigint();\n   98: \n   99:   console.log(`Generating took ${(end - start) / 1000n}\\u00b5s`);\n  100  \n  101    WriteFile(base + '.xml', str);\n  ...\n  107    main(...scriptArgs.slice(1));\n  108  } catch(error) {\n  109:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  110    std.exit(1);\n  111  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_watch.js:\n   49    });\n   50    const file = randStr(10) + '.tmp';\n   51:   console.log('file', file);\n   52  \n   53    const file_fd = os.open(file, os.O_WRONLY | os.O_CREAT, 0o644);\n   54:   console.log('file_fd', file_fd);\n   55  \n   56    const inotify_fd = watch();\n   57:   console.log('inotify_fd', inotify_fd);\n   58    const r = watch(inotify_fd, file, 0xfff, (eventType, filename) =>\n   59:     console.log('watch event', { eventType, filename })\n   60    );\n   61    let ev = new Uint32Array(4);\n   ..\n   72  \n   73        if(name) console.log('name', name);\n   74: \n   75:       console.log('ev', ev[0], ev[1], modeNames[ev[1]], eventName(ev[1]));\n   76      }\n   77    });\n   78  \n   79    const data = toArrayBuffer(randStr(1024));\n   80:   console.log('os.write() =', os.write(file_fd, data, 0, data.byteLength));\n   81    os.close(file_fd);\n   82    os.setReadHandler(inotify_fd, null);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_path.js:\n   11    let f = std.open(file, 'w+');\n   12    f.puts(data);\n   13:   console.log('Wrote \"' + file + '\": ' + data.length + ' bytes');\n   14  }\n   15  \n   ..\n   18  \n   19    let ret = fn.call(path, ...args);\n   20:   console.log(\n   21      `path.${name}(`,\n   22      ...args.reduce((acc, arg) => (acc.length ? [...acc, ', ', arg] : [arg]), []),\n   ..\n   40  \n   41    let file = args[0] ?? '/etc/fonts/fonts.conf';\n   42:   console.log('file:', file);\n   43  \n   44    let base = path.basename(file, /\\.[^.]*$/);\n   45:   console.log('path:', path);\n   46:   console.log('base:', base);\n   47:   console.log(`exists(${file}):`, path.exists(file));\n   48:   console.log('gethome(1000):', path.gethome(1000));\n   49:   console.log('gethome(1000):', path.gethome(1000));\n   50:   console.log('path.delimiter:', path.delimiter);\n   51  \n   52    CallPathFunction('extname', file);\n   ..\n   75    CallPathFunction('getcwd');\n   76    let cwd = path.getcwd();\n   77:   console.log(`cwd = ${cwd}`);\n   78    CallPathFunction('relative', '/home/roman/Projects/plot-cv/quickjs', cwd);\n   79    CallPathFunction('relative', '/home/roman/Projects/editline', cwd);\n   ..\n   90  \n   91    /*let data = std.loadFile(file, 'utf-8');\n   92:   console.log('data:', data.substring(0, 100));\n   93  \n   94    let result = xml.read(data);\n   95:   console.log('result:', result);\n   96    let str = xml.write(result);\n   97:   console.log('write:', str);\n   98    WriteFile(base + '.json', JSON.stringify(result, null, 2));\n   99    WriteFile(base + '.xml', str);*/\n  ...\n  105    .then(() => console.log('SUCCESS'))\n  106    .catch(error => {\n  107:     console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  108      std.exit(1);\n  109    });\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_textcode.js:\n   10    let result = [];\n   11    for(let buf of chunks) {\n   12:     console.log('decoder(' + encoding + ').decode(', buf, `)`);\n   13      result.push(decoder.decode(buf));\n   14    }\n   15    let r = decoder.end();\n   16    if(r) result.push(r);\n   17:   console.log(`result = '${result.join('')}'\\n`);\n   18    return result;\n   19  }\n   ..\n   24    let result = [];\n   25    for(let str of chunks) {\n   26:     console.log((`encoder(` + encoding + `).encode('${str}')`).padEnd(30));\n   27      result.push(encoder.encode(str));\n   28    }\n   ..\n   32    if(result.length == 1) result = result[0];\n   33    else result = concat(...result.map(typedArr => typedArr.buffer));\n   34: \n   35:   console.log(`result = '`, result, `'\\n`);\n   36    return result;\n   37  }\n   ..\n   49      }\n   50    });\n   51:   console.log('TextDecoder', TextDecoder);\n   52  \n   53    let s1 = '🅇☆⨀☀☯🅧𝚡𝘅𝘹𝐱𝐗💨𞥞𑙣𑗊𑗐𑗐';\n   ..\n   87    const encoder = new TextEncoder();\n   88    const view = encoder.encode('€');\n   89:   console.log(`encoder.encode('€')`, view); // Uint8Array(3) [226, 130, 172]\n   90  }\n   91  \n   ..\n   93    main(...scriptArgs.slice(1));\n   94  } catch(error) {\n   95:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   96    std.exit(1);\n   97  } finally {\n   98:   console.log('SUCCESS');\n   99  }\n  100  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_parser.js:\n   23    f.puts(str);\n   24    let pos = f.tell();\n   25:   console.log('Wrote \"' + file + '\": ' + pos + ' bytes');\n   26    f.close();\n   27    return pos;\n   ..\n   58      //console.log(\"TokenName\", act.map(InspectToken));\n   59      while((tok = act.shift())) {\n   60:       console.log('TokenName', tok);\n   61        if(tok.type.endsWith('identifier')) {\n   62          ret = tok.lexeme;\n   ..\n   69        break;\n   70      }\n   71:     console.log('TokenName', ret);\n   72  \n   73      return ret;\n   ..\n  153    }\n  154    out += str.slice(pos, str.length);\n  155:   console.log('SubstDefines', { str, out });\n  156    return out;\n  157  }\n  ...\n  166        ret = fn.call(this, ...args);\n  167      } catch(e) {\n  168:       console.log('TryCatch ERROR', e.message);\n  169        for(let handler of error) ret = handler(e);\n  170        return ret;\n  ...\n  202      if(close) stack.pop();\n  203      if(debug && (open || close))\n  204:       console.log('Balancer', {\n  205          tok: InspectToken(tok),\n  206          stack: stack.map(InspectToken)\n  ...\n  334  \n  335      /* console.log('lexer.states', this.lexer.states);\n  336:     console.log('lexer.tokens', this.lexer.tokens);*/\n  337  \n  338      this.lexer.handler = (arg, tok) => {\n  ...\n  347            .join('')}^`\n  348        );\n  349:       console.log(error.message);\n  350:       console.log('tokens', [...this.processed, ...this.buffer].slice(-10).map(InspectToken));\n  351        throw error;\n  352      };\n  ...\n  362      const { lexer } = this;\n  363      this.extname = path.extname(file);\n  364:     console.log('extname', this.extname);\n  365      return lexer.setInput(source, file);\n  366    }\n  ...\n  376  \n  377    addRule(token, regexp, states) {\n  378:     console.log('addRule', { token, regexp, states });\n  379      const { rules, definitions } = this.grammar.lexer;\n  380      let rule,\n  ...\n  396      const { grammar } = this;\n  397      if(grammar.lexer == undefined) grammar.lexer = { definitions: {}, rules: [] };\n  398:     console.log('addDefinition', { name, expr });\n  399      if(name in grammar.lexer.definitions) return;\n  400      grammar.lexer.definitions[name] = expr;\n  ...\n  452      let production = { symbol, rhs };\n  453      productions.push(production);\n  454:     console.log(`addProduction(${this.lexer.topState()})`.padEnd(20), {\n  455        symbol,\n  456        rhs\n  ...\n  534        lexer.popState();\n  535      }\n  536:     console.log(`parseRule(${this.lexer.topState()})`.padEnd(20), {\n  537        pat: pat.map(InspectToken),\n  538        act: act.map(InspectToken)\n  ...\n  543      let states = match[0].length ? match[0].slice(1, -1).split(',') : null;\n  544      if(!(ret = this.addRule(TokenName(act), '^' + pattern.slice(match[0].length), states)))\n  545:       console.log(`parseRule(${this.lexer.topState()})`.padEnd(20), {\n  546          pat: TokenSeq(pat),\n  547          act: TokenSeq(act),\n  548          expr: ConcatPattern(pat)\n  549        });\n  550:     console.log(`parseRule(${this.lexer.topState()})`.padEnd(20), ret);\n  551      return ret;\n  552    }\n  ...\n  591      }\n  592      add();\n  593:     console.log(\n  594        id.lexeme + ':',\n  595        results.map(([tokens, action]) => {\n  ...\n  601      for(let [tokens, action] of results) {\n  602        let node = new Node(tokens[0]);\n  603:       console.log('node:', node.toJSON());\n  604        this.addProduction(id.lexeme, tokens.map(TokenToString), action);\n  605      }\n  ...\n  683          continue;\n  684        }\n  685:       console.log(`parse(${lexer.topState()})`.padEnd(20), lexer.pos, tok);\n  686        switch (tok.type) {\n  687          case 'directive': {\n  ...\n  725          case 'cstart': {\n  726            while((tok = this.consume())) {\n  727:             console.log('tok', InspectToken(tok));\n  728  \n  729              if(tok.type == 'cend') break;\n  ...\n  756      }\n  757    });\n  758:   console.log('console.options', console.options);\n  759    let optind = 0;\n  760    while(args[optind] && args[optind].startsWith('-')) {\n  ...\n  771      let source = re ? RegExpToString(re) : undefined;\n  772      if(char != source) throw new Error(`'${char}' != '${source}'`);\n  773:     console.log({ char, re, source, ok: char == source });\n  774    }\n  775  \n  ...\n  783    let file = args[optind] ?? path.join(path.dirname(process.argv[1]), '..', 'tests/Shell-Grammar.y');\n  784    let outputFile = args[optind + 1] ?? 'grammar.kison';\n  785:   console.log('file:', file);\n  786    let str = std.loadFile(file, 'utf-8');\n  787:   console.log('str:', str.slice(0, 50) + '...');\n  788    let len = str.length;\n  789    let type = path.extname(file).substring(1);\n  ...\n  811    main(...scriptArgs.slice(1));\n  812  } catch(error) {\n  813:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  814    std.exit(1);\n  815  } finally {\n  816:   console.log('SUCCESS');\n  817  }\n  818  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_blob.js:\n   20      }\n   21    });\n   22:   console.log('Blob', Blob);\n   23  \n   24    //  let childBlob = new Blob(['\\nx\\ny\\nz\\n']);\n   ..\n   33      { type: 'text/html', endings: 'transparent' }\n   34    );\n   35:   console.log('blob', blob);\n   36: \n   37:   console.log('blob', Object.getPrototypeOf(blob));\n   38:   console.log('blob', Object.getOwnPropertyNames(Object.getPrototypeOf(blob)));\n   39:   console.log('blob', blob);\n   40:   console.log('blob.size', blob.size);\n   41:   console.log('blob.type', blob.type);\n   42:   console.log('blob.text()', blob.text());\n   43:   console.log('blob.arrayBuffer()', blob.arrayBuffer());\n   44    let sl = blob.slice(1, 14, 'text/plain');\n   45:   console.log('blob.slice(1)', sl);\n   46:   console.log('sl.arrayBuffer()', sl.arrayBuffer());\n   47:   console.log('sl.text()', misc.escape(sl.text()));\n   48    let blobs = [];\n   49    for(let i = 0; i < 4; i++) {\n   50      sl = blobs[i] = new Blob([sl, misc.toArrayBuffer(`line #${i}\\n`)]);\n   51:     console.log(`sl[${i}]`, misc.escape(sl.text()));\n   52    }\n   53  }\n   ..\n   56    main(...scriptArgs.slice(1));\n   57  } catch(error) {\n   58:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   59    std.exit(1);\n   60  } finally {\n   61:   console.log('SUCCESS');\n   62  }\n   63  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_op_overloading.js:\n  138    let a = new Expr1(3);\n  139    let b = new Expr1(6);\n  140: \n  141:   console.log('a+b', a + b);\n  142:   console.log('a*b', a * b);\n  143:   console.log('-(a/b)', -(a / b));\n  144:   console.log('+(a/b)', +(a / b));\n  145  }\n  146  \n  ...\n  161    let a = new Expr2(3);\n  162    let b = new Expr2(6);\n  163: \n  164:   console.log('a+b', a + b);\n  165:   console.log('a*b', a * b);\n  166:   console.log('-(a/b)', -(a / b));\n  167:   console.log('+(a/b)', +(a / b));\n  168  }\n  169  \n  ...\n  207        },\n  208        '>>>'(...args) {\n  209:         console.log(\"method '>>>'\", ...args);\n  210          return new Expr3('>>>', ...args);\n  211        },\n  212        '=='(...args) {\n  213:         console.log(\"method '=='\", ...args);\n  214          return new Expr3('==', ...args);\n  215        },\n  216        '<'(...args) {\n  217:         console.log(\"method '<'\", ...args);\n  218          return new Expr3('<', ...args);\n  219        },\n  ...\n  262    let a = new Expr3(3);\n  263    let b = new Expr3(6);\n  264: \n  265:   console.log('a + b', a + b);\n  266:   console.log('a - b', a - b);\n  267:   console.log('a * b', a * b);\n  268:   console.log('a / b', a / b);\n  269:   console.log('a % b', a % b);\n  270:   console.log('a ** b', a ** b);\n  271:   console.log('a | b', a | b);\n  272:   console.log('a & b', a & b);\n  273:   console.log('a ^ b', a ^ b);\n  274:   console.log('a << b', a << b);\n  275:   console.log('a >> b', a >> b);\n  276:   console.log('a >>> b', a >>> b);\n  277:   console.log('a == b', a == b);\n  278:   console.log('a < b', a < b);\n  279:   console.log('pos a', +a);\n  280:   console.log('neg a', -a);\n  281:   console.log('++a', ++a);\n  282:   console.log('--a', --a);\n  283    //console.log('~a',  ~a);\n  284  }\n  ...\n  307      test_default_op();\n  308    } catch(error) {\n  309:     console.log('ERROR:', error.message);\n  310      throw error;\n  311    }\n  ...\n  315    main(...scriptArgs.slice(1));\n  316  } catch(error) {\n  317:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  318    std.exit(1);\n  319  } finally {\n  320:   console.log('SUCCESS');\n  321  }\n  322  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inotify.js:\n   64      let flags = flags2names(inotifyFlags, mask);\n   65      let w = this.watch(e);\n   66:     console.log('inotify event', flags.join('|'), e, w);\n   67    };\n   68  }\n   ..\n   71    main(...scriptArgs.slice(1));\n   72  } catch(error) {\n   73:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   74    std.exit(1);\n   75  } finally {\n   76:   console.log('SUCCESS');\n   77  }\n   78  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_console.js:\n   20    const testString =\n   21      '/*\\n * [The \"BSD license\"]\\n *  Copyright (c) 2012-2015 Terence Parr\\n *  Copyright (c) 2012-2015 Sam Harwell\\n *  Copyright (c) 2015 Gerald Rosenberg\\n *  All rights reserved.\\n *\\n *  Redistribution and use in source and binary forms, with or without\\n *  modification, are permitted provided that the following conditions\\n *  are met:\\n *\\n *  1. Redistributions of source code must retain the above copyright\\n *     notice, this list of conditions and the following disclaimer.\\n *  2. Redistributions in binary form must reproduce the above copyright\\n *     notice, this list of conditions and the following disclaimer in the\\n *     documentation and/or other materials provided with the distribution.\\n *  3. The name of the author may not be used to endorse or promote products\\n *     derived from this software without specific prior written permission.\\n *\\n *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS\\'\\' AND ANY EXPRESS OR\\n *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\\n *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\\n *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\\n *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\\n *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n/**\\n *\\tA grammar for ANTLR v4 implemented using v4 syntax\\n *\\n *\\tModified 2015.06.16 gbr\\n *\\t-- update for compatibility with Antlr v4.5\\n */\\n\\n// ======================================================\\n// Lexer specification\\n// ======================================================\\n\\nlexer grammar ANTLRv4Lexer;\\n\\noptions { superClass = LexerAdaptor; }\\nimport LexBasic;\\n\\n// Standard set of fragments\\ntokens { TOKEN_REF , RULE_REF , LEXER_CHAR_SET }\\nchannels { OFF_CHANNEL , COMMENT }\\n\\n// -------------------------\\n// Comments\\nDOC_COMMENT\\n   : DocComment -> channel (COMMENT)\\n   ;\\n\\nBLOCK_COMMENT\\n   : BlockComment -> channel (COMMENT)\\n   ;\\n\\nLINE_COMMENT\\n   : LineComment -> channel (COMMENT)\\n   ;\\n\\n// -------------------------\\n// Integer\\n\\nINT\\n   : DecimalNumeral\\n   ;\\n\\n// -------------------------\\n// Literal string\\n//\\n// ANTLR makes no distinction between a single character literal and a\\n// multi-character string. All literals are single quote delimited and\\n';\n   22:   console.log('console.options:', console.options);\n   23:   console.log('test:', { testString });\n   24  \n   25    const testObject = {\n   ..\n   29  \n   30    testObject.circular = { testObject };\n   31: \n   32:   console.log('testObject:', testObject);\n   33  \n   34    std.gc();\n   ..\n   41    std.exit(1);\n   42  } finally {\n   43:   console.log('SUCCESS');\n   44  }\n   45  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_qjsm.js:\n    6      inspectOptions: { colors: true, depth: 1, compact: Infinity }\n    7    });\n    8: \n    9:   console.log('console.options:', console.options);\n   10: \n   11:   console.log('format:', format);\n   12:   console.log('regexp:', /TEST/);\n   13    //console.log('util:', inspect(util));\n   14: \n   15:   console.log(format('%s %i %o', 'TEST', 1337, { x: 1, y: 2, z: 3 }));\n   16  \n   17    /*  let moduleExports = moduleList.map(module => getModuleObject(module));\n   18:   console.log('moduleExports:', moduleExports);*/\n   19:   console.log('process.hrtime():', process.hrtime());\n   20:   console.log('process.arch:', process.arch);\n   21  }\n   22  \n   ..\n   24    main(...process.argv.slice(2));\n   25  } catch(error) {\n   26:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   27  } finally {\n   28:   console.log('SUCCESS');\n   29  }\n   30  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pointer.js:\n   14    let f = std.open(file, 'w+');\n   15    f.puts(data);\n   16:   console.log('Wrote \"' + file + '\": ' + data.length + ' bytes');\n   17  }\n   18  \n   ..\n   27      }\n   28    });\n   29: \n   30:   console.log('args:', args);\n   31  \n   32    let data = std.loadFile(args[0] ?? '/etc/fonts/fonts.conf', 'utf-8');\n   33: \n   34:   console.log('data:', data.substring(0, 100).replace(/\\n/g, '\\\\n') + '...');\n   35  \n   36    let result = xml.read(data);\n   37:   console.log('result:', result);\n   38  \n   39    //console.log('xml:', xml.write(result));\n   ..\n   41    let pointer;\n   42    pointer = new Pointer('[1].children[2].children[3]');\n   43:   console.log('[...pointer]:', [...pointer]);\n   44:   console.log('pointer:', pointer);\n   45:   console.log('pointer.toString()):', pointer.toString());\n   46:   console.log('pointer.toArray()):', pointer.toArray());\n   47:   console.log('pointer.atoms', pointer.atoms);\n   48    let pointer2 = Pointer.fromAtoms(pointer.atoms);\n   49:   console.log('pointer2', pointer2);\n   50:   console.log('[...pointer2]', [...pointer2]);\n   51:   console.log('pointer2.concat(pointer)', pointer2.push('children').concat(pointer));\n   52  \n   53    for(let i = 0; i < pointer.length; i++) console.log(`pointer[${i - pointer.length}]`, pointer[i - pointer.length]);\n   ..\n   55    pointer = new Pointer([3, 'children', 0, 'children', 0]);\n   56    try {\n   57:     console.log('deref pointer:', pointer.deref(result));\n   58    } catch(e) {\n   59:     console.log('exception:', e);\n   60    }\n   61:   console.log('keys:', [...pointer]);\n   62:   console.log('values:', [...pointer.values()]);\n   63:   console.log('pointer:', pointer.slice(0));\n   64  \n   65    WriteFile('output.json', JSON.stringify(result, null, 2));\n   66  \n   67    let ptr2 = new Pointer('0.children.0');\n   68: \n   69:   console.log('deref ptr2:', ptr2.deref(result));\n   70:   console.log('dump ptr2:', ptr2);\n   71    std.gc();\n   72  }\n   ..\n   75    main(...scriptArgs.slice(1));\n   76  } catch(error) {\n   77:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   78    std.exit(1);\n   79  } finally {\n   80:   console.log('SUCCESS');\n   81  }\n   82  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js:\n   12    let f = std.open(file, 'w+');\n   13    f.puts(data);\n   14:   console.log('Wrote \"' + file + '\": ' + data.length + ' bytes');\n   15  }\n   16  \n   ..\n   25      }\n   26    });\n   27:   console.log('args:', args);\n   28  \n   29    if(args.length == 0) args = ['tests/test3.xml'];\n   30  \n   31    let data = std.loadFile(args[0], 'utf-8');\n   32:   console.log('data:', data.substring(0, 100).replace(/\\n/g, '\\\\n') + '...');\n   33  \n   34    let result;\n   ..\n   40      } catch(err) {}\n   41    }\n   42:   console.log('result:', result);\n   43    TestIterator();\n   44  \n   45    function TestWalker() {\n   46      let walk = new TreeWalker(result);\n   47:     console.log('walk:', walk.toString());\n   48      let i = 0;\n   49:     console.log('~TreeWalker.MASK_PRIMITIVE:', TreeWalker.MASK_PRIMITIVE.toString(2));\n   50:     console.log(' TreeWalker.MASK_ALL:', TreeWalker.MASK_ALL);\n   51:     console.log(' TreeWalker.MASK_ALL:', TreeWalker.MASK_ALL.toString(2));\n   52      walk.tagMask = TreeWalker.MASK_ALL;\n   53  \n   54      const { flags, tagMask } = walk;\n   55:     console.log(' walk', { flags, tagMask });\n   56      while(walk.nextNode((v, k, w) => typeof v != 'object')) {\n   57:       console.log(\n   58          'type:',\n   59          typeof walk.currentNode,\n   ..\n   64        let node = walk.currentNode;\n   65        if(typeof node == 'object') {\n   66:         console.log(\n   67            'object:',\n   68            inspect(node, { depth: 0, colors: true }) ||\n   ..\n   78    function TestIterator() {\n   79      for(let c of ['TYPE_OBJECT', 'RETURN_VALUE_PATH']) {\n   80:       console.log(`${c} = `, TreeIterator[c]);\n   81      }\n   82      let it = new TreeIterator(result, TreeIterator.TYPE_OBJECT | TreeIterator.RETURN_VALUE_PATH);\n   83      for(let [entry, pointer] of it) {\n   84:       console.log(`pointer: ${pointer}, entry:`, entry);\n   85      }\n   86    }\n   87:   console.log('result', result);\n   88    std.gc();\n   89  }\n   ..\n   91    main(...scriptArgs.slice(1));\n   92  } catch(error) {\n   93:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   94    std.exit(1);\n   95  } finally {\n   96:   console.log('SUCCESS');\n   97  }\n   98  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_mmap.js:\n   16    });\n   17    let filename = args[0] ?? scriptArgs[0];\n   18:   console.log('filename', filename);\n   19    let file = std.open(filename, 'r+');\n   20    let fd = file.fileno();\n   21  \n   22    let { size } = os.stat(filename)[0];\n   23:   console.log('fd', fd);\n   24:   console.log('size', size);\n   25:   console.log('typeof 1n', typeof 1n);\n   26  \n   27    let map = mmap(0, size, PROT_READ, MAP_PRIVATE, fd, 0);\n   28:   console.log('map', map);\n   29: \n   30:   console.log('map =', ArrayBufToString(map));\n   31  \n   32    munmap(map);\n   ..\n   41    .then(() => console.log('SUCCESS'))\n   42    .catch(error => {\n   43:     console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   44      std.exit(1);\n   45    });\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_predicate.js:\n   14    let f = std.open(file, 'w+');\n   15    f.puts(data);\n   16:   console.log('Wrote \"' + file + '\": ' + data.length + ' bytes');\n   17  }\n   18  \n   ..\n   50    let len = str.length;\n   51    /* console.log('len', len);\n   52:   console.log('Predicate', Predicate);\n   53:   console.log('Predicate.charset', charset);\n   54  \n   55    let eq1234 = equal(1234);\n   56:   console.log('eq1234 =', eq1234.toString()); \n   57  \n   58    let promise = waitFor(100).then(() => 1234);\n   59  \n   60    let result = eq1234(promise);\n   61:   console.log('promise', promise);\n   62:   console.log('result', await result);\n   63  \n   64    let isNL = charset('\\n', 1);\n   ..\n   75    let isIdentifier = regexp('^([A-Za-z_]+)([A-Za-z0-9_]*)$', 'g');\n   76    let isNumber = regexp('^([-+]?)([0-9]*).([0-9]+)$', 'g');\n   77:   console.log('isIdentifier.toString()', isIdentifier.toString());\n   78:   console.log('isNumber.toString()', isNumber.toString());\n   79  \n   80    let predicates = [isUpper, isLower, isNL, isNotNL, isNotUpper, isNotLower];\n   81  \n   82    for(let p of predicates) console.log('p:', p.toString());\n   83:   console.log(\"isUpper('a')\", isUpper('a'));\n   84:   console.log(\"isLower('a')\", isLower('a'));\n   85:   console.log(\"isNotUpper('a')\", isNotUpper('a'));\n   86:   console.log(\"isNotLower('a')\", isNotLower('a'));\n   87:   console.log(\"isNotNL('\\\\n')\", isNotNL('\\n'));\n   88:   console.log(\"isNotNL('\\\\r')\", isNotNL('\\r'));\n   89:   console.log(\"isNL('\\\\r')\", isNL('\\r'));\n   90  \n   91    for(let ch of ['_', '2', 'A', 'a', 'Z', 'z', '?', '-'])\n   92:     console.log(`isXDigit('${ch}') =`, isXDigit(ch));\n   93  \n   94    for(let ch of ['_', '2', 'A', 'a', '?', '-']) console.log(`isAlpha('${ch}') =`, isAlpha(ch));\n   ..\n   98    let propToString = property('toString');\n   99    let propTest = property('test');\n  100: \n  101:   console.log('propToString(Object.create(null, {}))', propToString(Object.create(null, {})));\n  102:   console.log(\n  103      'propToString(function(){})',\n  104      propToString(function () {})\n  105    );\n  106: \n  107:   console.log('propTest({})', propTest({}));\n  108:   console.log('propTest({test: undefined})', propTest({ test: undefined }));\n  109  */\n  110    /*\n  111  \n  112    for(let str of ['_ABC3', '1ABC', '_1ABC', 'A1B2C3'])\n  113:     console.log(`isIdentifier('${str}') =`,\n  114        isIdentifier(str, captures => {\n  115          captures = new Uint32Array(captures);\n  116:         console.log('captures:', captures);\n  117        })\n  118      );\n  ...\n  120    for(let str of ['_ABC3', '1ABC', '_1ABC', 'A1B2C3']) {\n  121      let a = [];\n  122:     console.log(`isIdentifier('${str}') =`, isIdentifier(str, a));\n  123:     console.log('a:', a);\n  124    }\n  125  \n  126    for(let str of ['-120', '.0707', '+3.141592', '10000.00', '0.12345e08']) {\n  127      let a = [];\n  128:     console.log(`isNumber('${str}') =`, isNumber(str, a));\n  129:     console.log('a:', a);\n  130    }\n  131  \n  132    let combined = or(isIdentifier, isNumber, isNL, isUpper);\n  133:   console.log('combined:', combined.toString());\n  134    let s = '1abc';\n  135    for(let pred of [isIdentifier, isNumber, isNL, isUpper]) {\n  136:     console.log(`pred('${s}') =`, pred(s));\n  137    }\n  138    for(let str of ['-120', '0.12345e08', 'ABC', '1abc']) {\n  139      let a = [];\n  140:     console.log(`combined('${str}') =`, combined(str, a));\n  141  \n  142    }\n  143:   console.log('combined.values =', combined.values);\n  144:   console.log('combined.values =',\n  145      combined.values.map(v => v.toString())\n  146    );\n  147    let re = /^([-+])?([0-9]*\\.)?([0-9]+)$/g;\n  148:   console.log('re =', re);\n  149:   console.log('re =', re + '');\n  150:   console.log('re =', re.toString());\n  151  \n  152  \n  ...\n  158    let pr = new Predicate(re);\n  159    let eqBLAH = equal('BLAH');\n  160:   console.log('io =', io);\n  161:   console.log('io =', io.toString());\n  162:   console.log('pt =', pt.toString());\n  163:   console.log('pr =', pr.toString());\n  164:   console.log('io(dummy) =', io(dummy));\n  165:   console.log('pt(dummy) =', pt(dummy));\n  166:   console.log('io(arri32.buffer) =', io(arri32.buffer));\n  167:   console.log('pt(arri32.buffer) =', pt(arri32.buffer));\n  168:   console.log('eqBLAH =', eqBLAH.toString());\n  169:   console.log(\"eqBLAH('BLAH') =\", eqBLAH('BLAH'));\n  170  \n  171    for(let s2 of ['-120', '0.12345', '+12.345678', '-.9090']) {\n  172:     console.log(`pr('${s2}') =`, pr(s2));\n  173    }\n  174    let mt = type(Predicate.TYPE_INT | Predicate.TYPE_OBJECT);\n  175:   console.log('mt =', mt.toString());\n  176  \n  177    for(let item of [1234,  'abcd', {}]) console.log(`mt(${item}) = `, mt(item));\n  178    let cp = charset('ABCDEFGHIJKLMNOPQRSTUVWXYZ\\u2605\\u29bf\\u2754');\n  179:   console.log('cp =', cp.toString());\n  180  \n  181    for(let str2 of ['abcd', 'X⦿Y', '❔X', 'ABC★']) console.log(`cp(${str2}) =`, cp(str2));\n  182:   console.log('re =', Object.prototype.toString.call(re));\n  183:   console.log('  =', BigDecimal.prototype.toString.call(31337m));\n  184:   console.log('  =', BigInt.prototype.toString.call(31337n));\n  185:   console.log('  =', eval('31337l'));\n  186:   console.log('  =', eval('31337m'));\n  187:   console.log('  =', eval('31337n'));\n  188  */\n  189:   console.log('Object.getOwnPropertyNames(Predicate)', Object.getOwnPropertyNames(Predicate));\n  190: \n  191:   console.log('PredicateOperators', PredicateOperators);\n  192:   console.log(\"PredicateOperators['*']\", PredicateOperators['*']);\n  193  \n  194    Predicate.prototype[Symbol.operatorSet] = PredicateOperatorSet;\n  195: \n  196:   console.log('Predicate', new Map(Object.entries(Predicate)));\n  197  \n  198    let mul = Predicate.mul(null, 8);\n  ...\n  200    let add = Predicate.add(div, 5);\n  201    let term = Predicate.mod(add, 2);\n  202:   console.log('add', add);\n  203:   console.log('add.toString()', add.toString());\n  204:   console.log('term', term);\n  205:   console.log('term.toString()', term.toString());\n  206:   console.log('term.toSource()', term.toSource());\n  207:   console.log('term.args', term.args);\n  208:   console.log('div(18)', div(18));\n  209:   console.log('mul(10)', mul(10));\n  210:   console.log('add(20)', add(20));\n  211:   console.log('term(19)', term(19));\n  212  \n  213    let pred = 2 ** mul;\n  214:   console.log('pred.toString()', pred.toString());\n  215:   console.log('pred', pred);\n  216:   console.log('pred.toSource()', pred.toSource());\n  217:   console.log('pred(1)', pred(1));\n  218:   console.log('pred(2)', pred(2));\n  219:   console.log('pred(3)', pred(3));\n  220:   console.log('pred(4)', pred(4));\n  221: \n  222:   console.log(\n  223      new Map([\n  224        ['2 ** mul', [pred.toSource(), [1, 2, 3, 4].map(n => pred(n))]],\n  ...\n  231    let getProp = Predicate.property('and');\n  232    let getProp2 = Predicate.member(Predicate);\n  233:   console.log('Predicate.property', Predicate.property);\n  234:   console.log('Predicate.member', Predicate.member);\n  235  \n  236    let getMember = Predicate.member({ [1]: 'one', [2]: 'two', [3]: 'three' });\n  237: \n  238:   console.log('getMember', getMember);\n  239:   console.log('getMember(1)', getMember(1));\n  240: \n  241:   console.log('check(add)', check(add));\n  242:   console.log('check(new Date())', check(new Date()));\n  243:   console.log('getProp', getProp);\n  244:   console.log('getProp(Predicate)', getProp(Predicate));\n  245:   console.log('getProp2', getProp2);\n  246:   console.log(\"getProp2('sub')\", getProp2('sub'));\n  247  \n  248    let op_create = Operators.create;\n  249:   console.log('op_create', op_create);\n  250    let op_set = Symbol.operatorSet;\n  251:   console.log('op_set', op_set);\n  252:   console.log('PredicateOperatorSet', PredicateOperatorSet);\n  253:   console.log(\"PredicateOperatorSet['*']\", PredicateOperatorSet['*']);\n  254  \n  255    let ip = Predicate.index(-1, Predicate.equal(4));\n  256    let shp = Predicate.shift(2, (...args) => args);\n  257: \n  258:   console.log('ip([1,2,3,4])', ip([1, 2, 3, 4]));\n  259: \n  260:   console.log('shp', shp);\n  261:   console.log('shp(1,2,3,4)', shp(1, [2, 3, 4]));\n  262  \n  263    std.gc();\n  ...\n  267    .then(() => console.log('SUCCESS'))\n  268    .catch(error => {\n  269:     console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  270      std.exit(1);\n  271    });\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js:\n   24      }\n   25    });\n   26:   console.log('console.options', console.options);\n   27    let loc = new Location('test.js:12:1');\n   28:   console.log('loc', loc);\n   29    loc = new Location('test.js', 12, 1);\n   30:   console.log('loc', loc);\n   31    let loc2 = new Location(loc);\n   32:   console.log('loc2', loc2);\n   33: \n   34:   console.log('loc.toString()', loc.toString());\n   35  \n   36    let f = fs.readFileSync('Makefile', null);\n   37    let b = f.slice(0, 1024) ?? toArrayBuffer('TEST DATA');\n   38    let s = btoa(b);\n   39:   console.log('b', b);\n   40: \n   41:   console.log('misc.toArrayBuffer()', b);\n   42:   console.log('misc.btoa()', s);\n   43:   console.log('misc.atob()', atob(s));\n   44    try {\n   45:     console.log('process.argv[1]', process.argv[1]);\n   46      let script = path.join(path.dirname(process.argv[1]), '..', 'lib/fs.js');\n   47:     console.log('script', script);\n   48  \n   49      let mod = compileScript(script, JS_EVAL_FLAG_COMPILE_ONLY);\n   50:     console.log('misc.compileScript()', mod);\n   51      let modfn = getModuleFunction(mod);\n   52:     console.log('getModuleFunction(mod)', modfn);\n   53      let bc = writeObject(mod);\n   54:     console.log('misc.writeObject(mod)', bc);\n   55      let fbc = writeObject(modfn);\n   56:     console.log('misc.writeObject(modfn)', fbc);\n   57      let opcodes = getOpCodes(true);\n   58  \n   59      //fs.writeFileSync('bytecode.bin', bc);\n   60:     console.log('misc.readObject()', readObject(bc));\n   61      let fnbc = getByteCode(main);\n   62:     console.log('misc.getByteCode()', fnbc);\n   63      let ba = new Uint8Array(fnbc);\n   64      let opcode;\n   ..\n   70          opcode = opcodes[code];\n   71          const offset = i.toString(16).padStart(8, '0');\n   72:         console.log(\n   73            offset + ': ',\n   74            toHex(code),\n   ..\n   78        }\n   79      } catch(e) {}\n   80: \n   81:     console.log('ba.length', toHex(ba.length));\n   82:     console.log('misc.opcodes', opcodes);\n   83      /*    console.log('misc.resizeArrayBuffer()', resizeArrayBuffer(fnbc, 100));*/\n   84      let max;\n   85: \n   86:     console.log('valueToAtom()', (max = valueToAtom('BLAH XXXX')));\n   87      if(0) {\n   88        for(let atom = 0; atom <= 1000; atom++) console.log(`atom[${toHex32(atom)}] =`, atomToValue(atom));\n   89        for(let atom = 0x80000000; atom <= 0x800001ff; atom++)\n   90:         console.log(`atom[${toHex32(atom)}] =`, atomToValue(atom));\n   91      }\n   92      const Range = (from, to) => [...new Array(to - from).keys()].map(n => n + from);\n   93: \n   94:     console.log('valueToAtom()', toHex32(valueToAtom(3)));\n   95:     console.log('valueToAtom()', valueToAtom(-3));\n   96:     console.log('atomToValue()', atomToValue(1));\n   97  \n   98      if(0) {\n   99:       console.log('misc.getClassID()', getClassID({}));\n  100:       console.log('misc.getClassID()', getClassID(new Console()));\n  101:       console.log('misc.getClassID()', getClassID(new ArrayBuffer(1024)));\n  102:       console.log('misc.getClassID()', getClassID(new Map()));\n  103:       console.log('misc.getClassID()', getClassID(Symbol.for('quickjs.inspect.custom')));\n  104:       console.log('misc.getClassID()', getClassID(Symbol));\n  105:       console.log('misc.getClassCount()', getClassCount());\n  106:       console.log(\n  107          'misc.getClassName()',\n  108          new Map(Range(1, getClassCount()).map((id, idx) => [idx, [getClassName(id), getClassConstructor(id)]]))\n  ...\n  111      let bits = arrayToBitfield([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], 2);\n  112      let arr = bitfieldToArray(bits, 0);\n  113:     console.log('bitfield', { bits, arr });\n  114    } catch(error) {\n  115:     console.log('ERROR', error + '', '\\n' + error.stack);\n  116    }\n  117: \n  118:   console.log('format()', { s: format('string %s', 'abcd') });\n  119:   console.log('format()', format('JSON %j', { str: 'abcd', num: 1234, bool: true }));\n  120:   console.log('format()', format('number %d', 123));\n  121:   console.log('format()', format('integer %i', '0x4d2'));\n  122:   console.log('format()', format('float %f', '.3141592653589793e+01'));\n  123:   console.log('format()', format('object %o', { str: 'abcd', num: 1234, bool: true }));\n  124  \n  125    function toHex(num) {\n  ...\n  174    main(...scriptArgs.slice(1));\n  175  } catch(error) {\n  176:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  177    std.exit(1);\n  178  } finally {\n  179:   console.log('SUCCESS');\n  180  }\n  181  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js:\n   12  async function ReadStream(stream) {\n   13    let reader = stream.getReader();\n   14:   console.log('ReadStream(0)', { reader });\n   15    let chunk,\n   16      chunks = [];\n   ..\n   18      let { value, done } = await chunk;\n   19      // chunk = chunk.then(res => (console.log('chunk resolved', res), res));\n   20:     console.log('ReadStream(1)', { done, value });\n   21      if(done) break;\n   22      chunks.push(value);\n   23    }\n   24: \n   25:   console.log('ReadStream(2)', { chunks });\n   26    let blob = new Blob(chunks);\n   27:   console.log('ReadStream(3)', { blob });\n   28  \n   29    reader.releaseLock();\n   ..\n   33  async function WriteStream(stream, fn = writer => {}) {\n   34    let writer = stream.getWriter();\n   35:   console.log('WriteStream(0)', { writer });\n   36  \n   37    fn(writer);\n   ..\n   54    let read = new FileSystemReadableFileStream('tests/test1.xml');\n   55    let write = new FileSystemWritableFileStream('/tmp/out.txt');\n   56: \n   57:   console.log('read', read);\n   58:   console.log('write', write);\n   59  \n   60    ReadStream(read).then(result => {\n   61      let str = toString(result);\n   62:     console.log('read', str);\n   63      WriteStream(write, async writer => {\n   64        //  console.log('writer', writer);\n   ..\n   72    main(...scriptArgs.slice(1));\n   73  } catch(error) {\n   74:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   75    std.exit(1);\n   76  } finally {\n   77:   console.log('SUCCESS');\n   78  }\n   79  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inspect.js:\n   53    };\n   54    let arr = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n   55:   console.log('arr', arr);\n   56: \n   57:   console.log('inspect(Test.prototype)', inspect(Test.prototype, options));\n   58    const dumpObj = (obj, depth, options) =>\n   59      '{' +\n   ..\n   62        .join(',') +\n   63      '}';\n   64:   console.log('main', args);\n   65    let value = 0;\n   66    let str =\n   ..\n  107      }\n  108    };\n  109: \n  110:   console.log('inspect(NaN)', inspect(NaN, options));\n  111    // for(let value of Object.values(obj)) console.log('inspect', inspect(value, options));\n  112: \n  113:   console.log('inspect', inspect(obj2, options));\n  114:   console.log(inspect('test \\x1btest!', options));\n  115  \n  116    let outfile = std.open('output.txt', 'w+');\n  ...\n  125      }\n  126    };\n  127: \n  128:   console.log('inspect(deepObj)', inspect(deepObj, options));\n  129  \n  130    let s = new Set();\n  131    ['a', 'b', 'c', 'd', 1, 2, 3, 4].forEach(item => s.add(item));\n  132: \n  133:   console.log('inspect(s)', inspect(s, options));\n  134  \n  135    //for(let item of s) console.log('item:', item);\n  ...\n  137    std.gc();\n  138    const re = /[a-z].*!$/g;\n  139:   console.log('inspect(re)', re);\n  140:   console.log('inspect(str)', 'DEADBEEF');\n  141: \n  142:   console.log('inspect(num)', Math.PI);\n  143  \n  144    /*const PI_STR =\n  145      '3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962';\n  146    BigFloatEnv.setPrec(() => {\n  147:     console.log('BigFloatEnv.prec', BigFloatEnv.prec);\n  148:     console.log('inspect(BigFloat)', BigFloat(PI_STR));\n  149:     console.log('inspect(BigDecimal)', BigDecimal(PI_STR));\n  150:     console.log('inspect(BigInt)', BigInt(PI_STR));\n  151    }, 1024);*/\n  152  \n  ...\n  166    map.emplace('E', { insert: () => 0, update: v => v + 1 });\n  167    map.emplace('6', { insert: () => 6, update: v => -v });\n  168: \n  169:   console.log('inspect(map)', inspect(map, { compact: Infinity }));\n  170  \n  171    std.gc();\n  ...\n  176    .then(() => console.log('SUCCESS'))\n  177    .catch(error => {\n  178:     console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  179      std.exit(1);\n  180    });\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_performance.js:\n   10  \n   11  async function main(...args) {\n   12:   console.log('now()', performance.now());\n   13  \n   14    await waitFor(1000);\n   15:   console.log('now()', performance.now());\n   16  \n   17    try {\n   18      const obs = new (await import('perf_hooks')).PerformanceObserver(list => {\n   19:       console.log('function duration', list.getEntries()[0].duration);\n   20        obs.disconnect();\n   21      });\n   22      obs.observe({ entryTypes: ['function'] });\n   23      const wrapped = performance.timerify(async () => waitFor(1000));\n   24:     console.log(await wrapped());\n   25    } catch(e) {}\n   26  }\n   ..\n   29    main(...process.argv.slice(2));\n   30  } catch(error) {\n   31:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   32  } finally {\n   33:   console.log('SUCCESS');\n   34  }\n   35  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_location.js:\n   18      }\n   19    });\n   20:   console.log('Location', Location);\n   21  \n   22    let location = new Location('utf-8');\n   23:   console.log('location', location);\n   24:   console.log('location', Object.getPrototypeOf(location));\n   25:   console.log('location', Object.getOwnPropertyNames(Object.getPrototypeOf(location)));\n   26  }\n   27  \n   ..\n   29    main(...scriptArgs.slice(1));\n   30  } catch(error) {\n   31:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   32    std.exit(1);\n   33  } finally {\n   34:   console.log('SUCCESS');\n   35  }\n   36  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js:\n   13    let f = std.open(file, 'w+');\n   14    f.puts(data);\n   15:   console.log('Wrote \"' + file + '\": ' + data.length + ' bytes');\n   16  }\n   17  \n   ..\n   33    let child = child_process.spawn(cmd, args, { stdio: 'pipe' });\n   34    let data = '';\n   35:   console.log('child', child);\n   36  \n   37    let [stdin, stdout, stderr] = child.stdio;\n   38:   console.log('stdio:', { stdin, stdout, stderr });\n   39  \n   40    let buf = new ArrayBuffer(4096);\n   ..\n   44      ret = os.read(stdout, buf, 0, buf.byteLength);\n   45      //    console.log('buf.byteLength:', buf.byteLength);\n   46:     console.log('ret:', ret);\n   47  \n   48      if(ret > 0) {\n   49        let chunk = toString(buf.slice(0, ret));\n   50:       console.log('chunk:', chunk);\n   51        data += chunk;\n   52:       console.log('data:', data);\n   53      }\n   54  \n   55      if(ret <= 0 || ret < buf.byteLength) {\n   56:       console.log('stdout', stdout);\n   57        os.setReadHandler(stdout, null);\n   58      }\n   ..\n   74  \n   75    let data = ReadChild('/opt/diet/bin-x86_64/ls', '-la');\n   76: \n   77:   console.log('data:', data.slice(0, 100));\n   78  \n   79    /*  data = ReadChild('lz4', '-9', '-f', '/etc/services', 'services.lz4');\n   80: \n   81:   console.log('data:', data.slice(0, 100));\n   82    data = ReadChild('lz4', '-dc', 'services.lz4');\n   83: \n   84:   console.log('data:', data.slice(0, 100));*/\n   85  }\n   86  \n   ..\n   89    //std.exit(0);\n   90  } catch(error) {\n   91:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   92    std.exit(1);\n   93  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js:\n   57      os.setReadHandler(this.fd, () => {\n   58        let r = os.read(this.fd, buf, bytes, buf.byteLength - bytes);\n   59:       console.log('inotify read', r, '/', inotify_event_size);\n   60        if(r > 0) {\n   61          bytes += r;\n   62  \n   63          if(bytes >= inotify_event_size) {\n   64:           console.log('bytes', bytes);\n   65            let events = watch(buf, 0, bytes);\n   66            let seq = 0;\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/css3-selectors.js:\n   31          let x = Predicate.index(-1, y);\n   32          return Predicate.shift(1, x);\n   33:         console.log('nth-child', { n });\n   34        }\n   35      }[name] ?? (() => {})\n   ..\n   74        //console.log('parseSelector', str, capture);\n   75        const [, name, , value] = capture;\n   76:       console.log('parseSelector', { name, value });\n   77        sel = AttributeSelector(name, value);\n   78      } else {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js:\n  198    const handler = {\n  199      get(target, prop, receiver) {\n  200:       console.log('get', { target, prop });\n  201        if(prop in target) return Reflect.get(target, prop, receiver);\n  202:       console.log('module', module);\n  203        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  204  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js:\n 1302      const isArray = ctor == NodeList || owner.children == raw;\n 1303      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1304:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1305  \n 1306      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js:\n  896              value.then(v => {\n  897                replaceProperty(v);\n  898:               console.log(`util.lazyProperty resolved `, obj[name]);\n  899                return v;\n  900              });\n  ...\n 1239    fn,\n 1240    log = (duration, name, args, ret) =>\n 1241:     console.log(\n 1242        `function '${name}'` +\n 1243          (ret !== undefined ? ` {= ${escape(ret + '').substring(0, 100) + '...'}}` : '') +\n ....\n 1302        for(let part of path) {\n 1303          let cachefn = cache(obj) ?? getter(obj);\n 1304:         console.log('cache', { i, cache });\n 1305          obj = cachefn(part);\n 1306:         console.log('cachefn', { i, cachefn });\n 1307        }\n 1308        return obj;\n ....\n 1314  \n 1315        for(let part of path) {\n 1316:         console.log('cache', { part, obj });\n 1317          let cachefn = cache(obj.receiver ?? obj);\n 1318:         console.log('cachefn', { i, cachefn });\n 1319          obj = cachefn(part) ?? (cachefn(part, gettersetter(newMap())), cachefn(part));\n 1320:         console.log('cachefn', { obj });\n 1321        }\n 1322        return obj(key, value);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js:\n 1553        fn();\n 1554      } catch(e) {\n 1555:       console.log('printStatus ERROR:', e, e.stack);\n 1556      }\n 1557      if(prompt) {\n ....\n 1575  \n 1576      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1577:     console.log('reverseSearch', this.searchCb);\n 1578:     console.log('reverseSearch', this.update);\n 1579  \n 1580      try {\n 1581        this.update();\n 1582      } catch(error) {\n 1583:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1584      }\n 1585      return -2;\n ....\n 1730        this.addCleanupHandler(() => {\n 1731          this.mouseTracking(false);\n 1732:         console.log('Mouse tracking disabled');\n 1733        });\n 1734      }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   55  \n   56      /*console.log('tok.id', tok.id);\n   57:       console.log('tok.type', tok.type);\n   58:       console.log('tokens', tokens);*/\n   59  \n   60      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js:\n    9  \n   10      this.handler = (arg, tok) =>\n   11:       console.log(`Unmatched token at ${arg.loc}\\narg.currentLine()\\n${' '.repeat(arg.loc.column - 1)}^`);\n   12  \n   13      this.addRules(separator);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/bnf.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sysroot/usr/bin/list-exports.js:\n   61    let f = std.open(file, 'w+');\n   62    f.puts(tok);\n   63:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   64  }\n   65  \n   ..\n  452    main(...scriptArgs.slice(1));\n  453  } catch(error) {\n  454:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  455    std.exit(1);\n  456  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sysroot/usr/bin/resolve-imports.js:\n  125  \n  126    opts.compact = false;\n  127: \n  128:   console.log(str, opts, ...args);\n  129  };\n  130  \n  ...\n  504    }\n  505    let end = Date.now();\n  506: \n  507:   console.log(`Lexing '${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  508    start = Date.now();\n  509  \n  ...\n  599        }\n  600        if(!path.exists(file)) {\n  601:         console.log(`Path must exist '${file}'`);\n  602          continue;\n  603        }\n  ...\n  619    /*\n  620    let end = Date.now();\n  621:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  622  */\n  623  \n  ...\n  629  function AddDep(source, file) {\n  630    source = NormalizePath(source);\n  631: \n  632:   console.log(`Add dependency '${file}' to '${source}'`);\n  633    dependencyTree(source).push(file);\n  634  }\n  ...\n  736        range = r;\n  737      } catch(e) {}\n  738:     console.log('NumericRange.from', range);\n  739      return range;\n  740    }\n  ...\n  747        if(IsRange(range)) {\n  748          range = [...range];\n  749:         console.log('range#' + ++i, inspect(range));\n  750  \n  751          if(IsRange(prev) && IsRange(range)) {\n  ...\n  872      };\n  873      if(debug > 2)\n  874:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), { file, range: [range[0], range[1]] });\n  875      let start = sliceIndex(range[0]);\n  876      let end = sliceIndex(range[1]);\n  877      const { length } = this;\n  878      if(debug > 2)\n  879:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), { start, end, length, this: this });\n  880      if(range[0] < this[start][0]) range[0] = this[start][0];\n  881      if(!this[start][0])\n  ...\n  961        const hole = holes[i];\n  962        const [range] = this[i];\n  963:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n  964      }\n  965      //console.log('holes', holes);\n  ...\n 1091    let f = std.open(file, 'w+');\n 1092    f.puts(tok);\n 1093:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1094  }\n 1095  \n ....\n 1243  \n 1244      let deps = SpreadAndJoin(DependencyTree(file, ' ', 1, 0, '    '));\n 1245: \n 1246:     console.log(`Dependencies:\\n${deps}`);\n 1247    }\n 1248    let [result] = results;\n ....\n 1268  \n 1269      //if(debug > 1) console.log('header', header.map(({ type, file, range, source }) => ({ type, file, range, source })));\n 1270:     console.log('lines', lines);\n 1271  \n 1272      out.puts(lines.reduce((acc, line) => acc + line.trim() + '\\n', ''));\n ....\n 1279    /*\n 1280  for(let name of exportedNames) {\n 1281: \n 1282:    console.log('footer exported', name);\n 1283    \n 1284  }\n ....\n 1286  \n 1287    //  console.log('holes', compact(1), result.holes());\n 1288:   console.log('result', compact(false, { depth: Infinity }), result);\n 1289  \n 1290    const nbytes = result.write(stream);\n 1291: \n 1292:   console.log(`${nbytes} bytes written to '${out.file}'`);\n 1293  \n 1294    if(debug > 2) console.log(`exportedNames`, exportedNames);\n ....\n 1304    main(...scriptArgs.slice(1));\n 1305  } catch(error) {\n 1306:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n 1307    std.exit(1);\n 1308  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sysroot/usr/bin/extract-structs.js:\n   37  \n   38    for(let arg of args) {\n   39:     console.log('arg', arg);\n   40  \n   41      let str = std.loadFile(arg);\n   42:     console.log('str', escape(str).substring(0, 100));\n   43  \n   44      let lexer = new CLexer(str, arg);\n   45:     console.log('lexer', lexer);\n   46      let tok;\n   47      while((tok = lexer.nextObj())) {\n   ..\n   73            /*\n   74            do {\n   75:             console.log('tok', tok, tok.loc + '', { line });\n   76              text += tok.lexeme;\n   77              tok = lexer.nextObj();\n   ..\n   87    main(...scriptArgs.slice(1));\n   88  } catch(error) {\n   89:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   90    std.exit(1);\n   91  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/usr/lib/quickjs/require.js:\n  198    const handler = {\n  199      get(target, prop, receiver) {\n  200:       console.log('get', { target, prop });\n  201        if(prop in target) return Reflect.get(target, prop, receiver);\n  202:       console.log('module', module);\n  203        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  204  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/usr/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/usr/lib/quickjs/dom.js:\n   92    if(type === Element && /^!--.*--$/.test(obj.tagName)) type = Comment;\n   93    else if(type === Text && typeof obj == 'string') {\n   94:     console.log('GetNode', { type, obj, owner: owner.constructor.name });\n   95      obj = owner.indexOf(obj);\n   96    }\n   ..\n  763    /*  [inspectSymbol](depth, opts) {\n  764      const { tagName, attributes, children } = this;\n  765:     console.log('Document.inspect')\n  766      return `\\x1b[1;31mDocument\\x1b[0m ${tagName} attributes: ${attributes[inspectSymbol](depth + 1, opts)} children: ${inspect(children.map(c => c[inspectSymbol](depth + 2, opts)))}>`;\n  767    }*/\n  ...\n 1026      const isArray = ctor == NodeList || owner.children == raw;\n 1027      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1028:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1029  \n 1030      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/usr/lib/quickjs/util.js:\n  880              value.then(v => {\n  881                replaceProperty(v);\n  882:               console.log(`util.lazyProperty resolved `, obj[name]);\n  883                return v;\n  884              });\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/usr/lib/quickjs/repl.js:\n 1213        return n ? '*' : ' ';\n 1214      }\n 1215:     console.log(\n 1216        '\\\\h               this help\\n' +\n 1217          '\\\\x              ' +\n ....\n 1227      );\n 1228      if(has_jscalc) {\n 1229:       console.log(\n 1230          '\\\\a              ' +\n 1231            sel(algebraicMode) +\n ....\n 1237      }\n 1238      if(has_bignum) {\n 1239:       console.log(\n 1240          \"\\\\p [m [e]]       set the BigFloat precision to 'm' bits\\n\" +\n 1241            \"\\\\digits n        set the BigFloat precision to 'ceil(n*log2(10))' bits\"\n 1242        );\n 1243        if(!has_jscalc) {\n 1244:         console.log('\\\\mode [std|math] change the running mode (current = ' + eval_mode + ')');\n 1245        }\n 1246      }\n ....\n 1250          /*let args = getFunctionArguments(fn);\n 1251          let cmdline = cmd + ' ' + args.reduce((acc, arg) => '[' + (arg + ((acc && acc.trim()) != '' ? ' ' + acc.trim() : '')).trim() + ']', '');*/\n 1252:         console.log(\n 1253            '\\\\' +\n 1254              cmd /*line*/\n ....\n 1258        }\n 1259      if(!config_numcalc) {\n 1260:       console.log('\\\\q               exit');\n 1261      }\n 1262    }\n ....\n 1567  \n 1568      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1569:     console.log('reverseSearch', this.searchCb);\n 1570:     console.log('reverseSearch', this.update);\n 1571  \n 1572      try {\n 1573        this.update();\n 1574      } catch(error) {\n 1575:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1576      }\n 1577      return -2;\n ....\n 1714        this.addCleanupHandler(() => {\n 1715          this.mouseTracking(false);\n 1716:         console.log('Mouse tracking disabled');\n 1717        });\n 1718      }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/usr/lib/quickjs/bnflexer.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/usr/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   55  \n   56      /*console.log('tok.id', tok.id);\n   57:       console.log('tok.type', tok.type);\n   58:       console.log('tokens', tokens);*/\n   59  \n   60      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/usr/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/bin/test-require.js:\n    1  import require from 'require';\n    2: \n    3: console.log('require', require);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/bin/list-exports.js:\n   58    let f = std.open(file, 'w+');\n   59    f.puts(tok);\n   60:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   61  }\n   62  \n   ..\n  452    main(...scriptArgs.slice(1));\n  453  } catch(error) {\n  454:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  455    std.exit(1);\n  456  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/bin/test-require-cjs.js:\n    1  const r = require;\n    2: \n    3: console.log('require', r);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n  132  \n  133    opts.compact = false;\n  134: \n  135:   console.log(str, opts, ...args);\n  136  };\n  137  \n  ...\n  154        //console.log('os.rename() =', err);\n  155        if(err) throw new Error(`FileReplacer rename() error: ${std.strerror(-err)}`);\n  156:       console.log(`${file} written (${size} bytes)`);\n  157      }\n  158    });\n  ...\n  411        }\n  412        if(debug >= 3)\n  413:         console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  414  \n  415        if(token.lexeme == ';' && cond !== true) doneImports = true;\n  ...\n  422          if(imp.last.lexeme == ';') {\n  423            if(debug > 2)\n  424:             console.log(\n  425                'imp',\n  426                imp[0].loc + '',\n  427:               console.config({ breakLength: 80, compact: 0 }),\n  428                TokenSequence(imp) + ''\n  429              );\n  ...\n  602        }, []);\n  603        tokens = AddWhitespace(tokens);\n  604:       console.log('tokens', tokens);\n  605  \n  606        return TokenSequence(tokens).toString();\n  ...\n  676  \n  677        if(debug > 2)\n  678:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  679  \n  680        //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  ...\n  703  \n  704        if(debug >= 2)\n  705:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  706        if(debug > 1) console.log('impexp', compact(1), { range: new NumericRange(...range), loc: loc + '' });\n  707  \n  ...\n  735        }\n  736        if(!path.isFile(file)) {\n  737:         console.log(`Path must exist '${file}'`);\n  738          continue;\n  739        }\n  ...\n  752    /*\n  753    let end = Date.now();\n  754:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  755  */\n  756  \n  ...\n  759    if(showDeps) {\n  760      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  761: \n  762:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  763    }\n  764  \n  ...\n  890        range = r;\n  891      } catch(e) {}\n  892:     console.log('NumericRange.from', range);\n  893      return range;\n  894    }\n  ...\n  901        if(IsRange(range)) {\n  902          range = [...range];\n  903:         console.log('range#' + ++i, inspect(range));\n  904  \n  905          if(IsRange(prev) && IsRange(range)) {\n  ...\n 1026      };\n 1027      if(debug > 2)\n 1028:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1029          file,\n 1030          range: [range[0], range[1]]\n ....\n 1034      const { length } = this;\n 1035      if(debug > 2)\n 1036:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1037          start,\n 1038          end,\n ....\n 1123        const hole = holes[i];\n 1124        const [range] = this[i];\n 1125:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1126      }\n 1127      //console.log('holes', holes);\n ....\n 1178        } else {\n 1179          let type = getTypeName(str);\n 1180:         console.log('invalid type:', type);\n 1181          throw new Error(type);\n 1182        }\n ....\n 1267    let f = std.open(file, 'w+');\n 1268    f.puts(tok);\n 1269:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1270  }\n 1271  \n ....\n 1539      try {\n 1540        const nbytes = results[0].write(stream);\n 1541:       console.log(`${nbytes} bytes written to '${out.file}'`);\n 1542      } catch(error) {\n 1543:       console.log(`write error ('${out.file}'):`, error);\n 1544        std.exit(1);\n 1545      }\n ....\n 1570    main(...scriptArgs.slice(1));\n 1571  } catch(error) {\n 1572:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1573    std.exit(1);\n 1574  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/bin/extract-structs.js:\n   55  \n   56    for(let file of files) {\n   57:     console.log('file', file);\n   58  \n   59      let str = std.loadFile(file, 'utf-8');\n   60: \n   61:     console.log('str', str.split('\\n')[0]);\n   62  \n   63      let lexer = new CLexer(str, file);\n   ..\n   94    main(...scriptArgs.slice(1));\n   95  } catch(error) {\n   96:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   97    std.exit(1);\n   98  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/css3-selectors.js:\n   39        //console.log('parseSelector', str, capture);\n   40        const [, name, , value] = capture;\n   41:       console.log('parseSelector', { name, value });\n   42        sel = AttributeSelector(name, value);\n   43      } else {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/require.js:\n  182    const handler = {\n  183      get(target, prop, receiver) {\n  184:       console.log('get', { target, prop });\n  185        if(prop in target) return Reflect.get(target, prop, receiver);\n  186:       console.log('module', module);\n  187        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  188  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/dom.js:\n 1056      const isArray = ctor == NodeList || owner.children == raw;\n 1057      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1058:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1059  \n 1060      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  876              value.then(v => {\n  877                replaceProperty(v);\n  878:               console.log(`util.lazyProperty resolved `, obj[name]);\n  879                return v;\n  880              });\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js:\n 1497  \n 1498      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1499:     console.log('reverseSearch', this.searchCb);\n 1500:     console.log('reverseSearch', this.update);\n 1501  \n 1502      try {\n 1503        this.update();\n 1504      } catch(error) {\n 1505:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1506      }\n 1507      return -2;\n ....\n 1652        this.addCleanupHandler(() => {\n 1653          this.mouseTracking(false);\n 1654:         console.log('Mouse tracking disabled');\n 1655        });\n 1656      }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   52  \n   53      /*console.log('tok.id', tok.id);\n   54:       console.log('tok.type', tok.type);\n   55:       console.log('tokens', tokens);*/\n   56  \n   57      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/csv.js:\n    9  \n   10      this.handler = (arg, tok) =>\n   11:       console.log(`Unmatched token at ${arg.loc}\\narg.currentLine()\\n${' '.repeat(arg.loc.column - 1)}^`);\n   12  \n   13      this.addRules(separator);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/bnf.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/test-require.js:\n    1  import require from 'require';\n    2: \n    3: console.log('require', require);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/list-exports.js:\n   58    let f = std.open(file, 'w+');\n   59    f.puts(tok);\n   60:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   61  }\n   62  \n   ..\n  452    main(...scriptArgs.slice(1));\n  453  } catch(error) {\n  454:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  455    std.exit(1);\n  456  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/test-require-cjs.js:\n    1  const r = require;\n    2: \n    3: console.log('require', r);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/resolve-imports.js:\n  132  \n  133    opts.compact = false;\n  134: \n  135:   console.log(str, opts, ...args);\n  136  };\n  137  \n  ...\n  154        //console.log('os.rename() =', err);\n  155        if(err) throw new Error(`FileReplacer rename() error: ${std.strerror(-err)}`);\n  156:       console.log(`${file} written (${size} bytes)`);\n  157      }\n  158    });\n  ...\n  411        }\n  412        if(debug >= 3)\n  413:         console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  414  \n  415        if(token.lexeme == ';' && cond !== true) doneImports = true;\n  ...\n  422          if(imp.last.lexeme == ';') {\n  423            if(debug > 2)\n  424:             console.log(\n  425                'imp',\n  426                imp[0].loc + '',\n  427:               console.config({ breakLength: 80, compact: 0 }),\n  428                TokenSequence(imp) + ''\n  429              );\n  ...\n  602        }, []);\n  603        tokens = AddWhitespace(tokens);\n  604:       console.log('tokens', tokens);\n  605  \n  606        return TokenSequence(tokens).toString();\n  ...\n  676  \n  677        if(debug > 2)\n  678:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  679  \n  680        //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  ...\n  703  \n  704        if(debug >= 2)\n  705:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  706        if(debug > 1) console.log('impexp', compact(1), { range: new NumericRange(...range), loc: loc + '' });\n  707  \n  ...\n  735        }\n  736        if(!path.isFile(file)) {\n  737:         console.log(`Path must exist '${file}'`);\n  738          continue;\n  739        }\n  ...\n  752    /*\n  753    let end = Date.now();\n  754:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  755  */\n  756  \n  ...\n  759    if(showDeps) {\n  760      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  761: \n  762:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  763    }\n  764  \n  ...\n  890        range = r;\n  891      } catch(e) {}\n  892:     console.log('NumericRange.from', range);\n  893      return range;\n  894    }\n  ...\n  901        if(IsRange(range)) {\n  902          range = [...range];\n  903:         console.log('range#' + ++i, inspect(range));\n  904  \n  905          if(IsRange(prev) && IsRange(range)) {\n  ...\n 1026      };\n 1027      if(debug > 2)\n 1028:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1029          file,\n 1030          range: [range[0], range[1]]\n ....\n 1034      const { length } = this;\n 1035      if(debug > 2)\n 1036:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1037          start,\n 1038          end,\n ....\n 1123        const hole = holes[i];\n 1124        const [range] = this[i];\n 1125:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1126      }\n 1127      //console.log('holes', holes);\n ....\n 1178        } else {\n 1179          let type = getTypeName(str);\n 1180:         console.log('invalid type:', type);\n 1181          throw new Error(type);\n 1182        }\n ....\n 1267    let f = std.open(file, 'w+');\n 1268    f.puts(tok);\n 1269:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1270  }\n 1271  \n ....\n 1539      try {\n 1540        const nbytes = results[0].write(stream);\n 1541:       console.log(`${nbytes} bytes written to '${out.file}'`);\n 1542      } catch(error) {\n 1543:       console.log(`write error ('${out.file}'):`, error);\n 1544        std.exit(1);\n 1545      }\n ....\n 1570    main(...scriptArgs.slice(1));\n 1571  } catch(error) {\n 1572:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1573    std.exit(1);\n 1574  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/extract-structs.js:\n   55  \n   56    for(let file of files) {\n   57:     console.log('file', file);\n   58  \n   59      let str = std.loadFile(file, 'utf-8');\n   60: \n   61:     console.log('str', str.split('\\n')[0]);\n   62  \n   63      let lexer = new CLexer(str, file);\n   ..\n   94    main(...scriptArgs.slice(1));\n   95  } catch(error) {\n   96:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   97    std.exit(1);\n   98  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/css3-selectors.js:\n   39        //console.log('parseSelector', str, capture);\n   40        const [, name, , value] = capture;\n   41:       console.log('parseSelector', { name, value });\n   42        sel = AttributeSelector(name, value);\n   43      } else {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/require.js:\n  182    const handler = {\n  183      get(target, prop, receiver) {\n  184:       console.log('get', { target, prop });\n  185        if(prop in target) return Reflect.get(target, prop, receiver);\n  186:       console.log('module', module);\n  187        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  188  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/dom.js:\n 1056      const isArray = ctor == NodeList || owner.children == raw;\n 1057      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1058:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1059  \n 1060      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/util.js:\n  876              value.then(v => {\n  877                replaceProperty(v);\n  878:               console.log(`util.lazyProperty resolved `, obj[name]);\n  879                return v;\n  880              });\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js:\n 1497  \n 1498      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1499:     console.log('reverseSearch', this.searchCb);\n 1500:     console.log('reverseSearch', this.update);\n 1501  \n 1502      try {\n 1503        this.update();\n 1504      } catch(error) {\n 1505:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1506      }\n 1507      return -2;\n ....\n 1652        this.addCleanupHandler(() => {\n 1653          this.mouseTracking(false);\n 1654:         console.log('Mouse tracking disabled');\n 1655        });\n 1656      }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   52  \n   53      /*console.log('tok.id', tok.id);\n   54:       console.log('tok.type', tok.type);\n   55:       console.log('tokens', tokens);*/\n   56  \n   57      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/csv.js:\n    9  \n   10      this.handler = (arg, tok) =>\n   11:       console.log(`Unmatched token at ${arg.loc}\\narg.currentLine()\\n${' '.repeat(arg.loc.column - 1)}^`);\n   12  \n   13      this.addRules(separator);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/bnf.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/bin/test-require.js:\n    1  import require from 'require';\n    2: \n    3: console.log('require', require);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/bin/list-exports.js:\n   58    let f = std.open(file, 'w+');\n   59    f.puts(tok);\n   60:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   61  }\n   62  \n   ..\n  452    main(...scriptArgs.slice(1));\n  453  } catch(error) {\n  454:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  455    std.exit(1);\n  456  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/bin/test-require-cjs.js:\n    1  const r = require;\n    2: \n    3: console.log('require', r);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/bin/resolve-imports.js:\n  132  \n  133    opts.compact = false;\n  134: \n  135:   console.log(str, opts, ...args);\n  136  };\n  137  \n  ...\n  154        //console.log('os.rename() =', err);\n  155        if(err) throw new Error(`FileReplacer rename() error: ${std.strerror(-err)}`);\n  156:       console.log(`${file} written (${size} bytes)`);\n  157      }\n  158    });\n  ...\n  411        }\n  412        if(debug >= 3)\n  413:         console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  414  \n  415        if(token.lexeme == ';' && cond !== true) doneImports = true;\n  ...\n  422          if(imp.last.lexeme == ';') {\n  423            if(debug > 2)\n  424:             console.log(\n  425                'imp',\n  426                imp[0].loc + '',\n  427:               console.config({ breakLength: 80, compact: 0 }),\n  428                TokenSequence(imp) + ''\n  429              );\n  ...\n  602        }, []);\n  603        tokens = AddWhitespace(tokens);\n  604:       console.log('tokens', tokens);\n  605  \n  606        return TokenSequence(tokens).toString();\n  ...\n  676  \n  677        if(debug > 2)\n  678:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  679  \n  680        //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  ...\n  703  \n  704        if(debug >= 2)\n  705:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  706        if(debug > 1) console.log('impexp', compact(1), { range: new NumericRange(...range), loc: loc + '' });\n  707  \n  ...\n  735        }\n  736        if(!path.isFile(file)) {\n  737:         console.log(`Path must exist '${file}'`);\n  738          continue;\n  739        }\n  ...\n  752    /*\n  753    let end = Date.now();\n  754:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  755  */\n  756  \n  ...\n  759    if(showDeps) {\n  760      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  761: \n  762:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  763    }\n  764  \n  ...\n  890        range = r;\n  891      } catch(e) {}\n  892:     console.log('NumericRange.from', range);\n  893      return range;\n  894    }\n  ...\n  901        if(IsRange(range)) {\n  902          range = [...range];\n  903:         console.log('range#' + ++i, inspect(range));\n  904  \n  905          if(IsRange(prev) && IsRange(range)) {\n  ...\n 1026      };\n 1027      if(debug > 2)\n 1028:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1029          file,\n 1030          range: [range[0], range[1]]\n ....\n 1034      const { length } = this;\n 1035      if(debug > 2)\n 1036:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1037          start,\n 1038          end,\n ....\n 1123        const hole = holes[i];\n 1124        const [range] = this[i];\n 1125:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1126      }\n 1127      //console.log('holes', holes);\n ....\n 1178        } else {\n 1179          let type = getTypeName(str);\n 1180:         console.log('invalid type:', type);\n 1181          throw new Error(type);\n 1182        }\n ....\n 1267    let f = std.open(file, 'w+');\n 1268    f.puts(tok);\n 1269:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1270  }\n 1271  \n ....\n 1539      try {\n 1540        const nbytes = results[0].write(stream);\n 1541:       console.log(`${nbytes} bytes written to '${out.file}'`);\n 1542      } catch(error) {\n 1543:       console.log(`write error ('${out.file}'):`, error);\n 1544        std.exit(1);\n 1545      }\n ....\n 1570    main(...scriptArgs.slice(1));\n 1571  } catch(error) {\n 1572:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1573    std.exit(1);\n 1574  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/bin/extract-structs.js:\n   55  \n   56    for(let file of files) {\n   57:     console.log('file', file);\n   58  \n   59      let str = std.loadFile(file, 'utf-8');\n   60: \n   61:     console.log('str', str.split('\\n')[0]);\n   62  \n   63      let lexer = new CLexer(str, file);\n   ..\n   94    main(...scriptArgs.slice(1));\n   95  } catch(error) {\n   96:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   97    std.exit(1);\n   98  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/css3-selectors.js:\n   39        //console.log('parseSelector', str, capture);\n   40        const [, name, , value] = capture;\n   41:       console.log('parseSelector', { name, value });\n   42        sel = AttributeSelector(name, value);\n   43      } else {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/require.js:\n  182    const handler = {\n  183      get(target, prop, receiver) {\n  184:       console.log('get', { target, prop });\n  185        if(prop in target) return Reflect.get(target, prop, receiver);\n  186:       console.log('module', module);\n  187        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  188  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/dom.js:\n 1056      const isArray = ctor == NodeList || owner.children == raw;\n 1057      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1058:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1059  \n 1060      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/util.js:\n  876              value.then(v => {\n  877                replaceProperty(v);\n  878:               console.log(`util.lazyProperty resolved `, obj[name]);\n  879                return v;\n  880              });\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/repl.js:\n 1497  \n 1498      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1499:     console.log('reverseSearch', this.searchCb);\n 1500:     console.log('reverseSearch', this.update);\n 1501  \n 1502      try {\n 1503        this.update();\n 1504      } catch(error) {\n 1505:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1506      }\n 1507      return -2;\n ....\n 1652        this.addCleanupHandler(() => {\n 1653          this.mouseTracking(false);\n 1654:         console.log('Mouse tracking disabled');\n 1655        });\n 1656      }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   52  \n   53      /*console.log('tok.id', tok.id);\n   54:       console.log('tok.type', tok.type);\n   55:       console.log('tokens', tokens);*/\n   56  \n   57      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/lexer/csv.js:\n    9  \n   10      this.handler = (arg, tok) =>\n   11:       console.log(`Unmatched token at ${arg.loc}\\narg.currentLine()\\n${' '.repeat(arg.loc.column - 1)}^`);\n   12  \n   13      this.addRules(separator);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/lib/quickjs/lexer/bnf.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/quickjs/tests/microbench.js:\n   83      }\n   84    }\n   85:   console.log(s);\n   86  }\n   87  \n   ..\n   93  \n   94  if(typeof globalThis.__date_clock != 'function') {\n   95:   console.log('using fallback millisecond clock');\n   96    clocks_per_sec = 1000;\n   97    max_iterations = 10;\n   ..\n  784      while(i < n && arr[i] === void 0) i++;\n  785      if(i < n) {\n  786:       console.log(\n  787          'sort_bench: out of order error for ' + f.name + ' at offset ' + (i - 1) + ': ' + arr[i - 1] + ' > ' + arr[i]\n  788        );\n  ...\n  924        sort_bench.array_type = g[name];\n  925        if(typeof sort_bench.array_type != 'function') {\n  926:         console.log('unknown array type: ' + name);\n  927          return 1;\n  928        }\n  ...\n  941      }\n  942      if(j == test_list.length) {\n  943:       console.log('unknown benchmark: ' + name);\n  944        return 1;\n  945      }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-imgui/test-imgui.js:\n   88  \n   89    ImGui.Init(window);\n   90:   console.log('ImGui.WindowFlags.MenuBar', ImGui.WindowFlags.MenuBar);\n   91  \n   92    while(!window.shouldClose) {\n   ..\n  121        v => (show_app_main_menu_bar = v)\n  122      );\n  123: \n  124:     console.log('ptr()', ptr());\n  125:     console.log((ptr(true), 'ptr(true)'));\n  126:     console.log('ptr()', ptr());\n  127:     console.log((ptr(false), 'ptr(false)'));\n  128:     console.log('show_app_main_menu_bar', show_app_main_menu_bar);\n  129  \n  130      // Menu Bar\n  ...\n  132        if(ImGui.BeginMenu('Menu')) {\n  133          ShowExampleMenuFile();\n  134:         console.log('ShowExampleMenuFile()');\n  135          ImGui.EndMenu();\n  136        }\n  ...\n  198      std.exit(0);\n  199    } catch(error) {\n  200:     console.log('ERROR:', error);\n  201    }\n  202  };\n\n/home/roman/Projects/plot-cv/quickjs/qjs-imgui/imgui/imgui_demo.cpp:\n 6548  {\n 6549      static ExampleAppConsole console;\n 6550:     console.Draw(\"Example: Console\", p_open);\n 6551  }\n 6552  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/test-nanovg.js:\n   67  \n   68    let context = glfw.context;\n   69:   console.log('context', context);\n   70  \n   71    const { position, size } = window;\n   ..\n   85    Object.assign(window, {\n   86      handleSize(width, height) {\n   87:       console.log('resized', { width, height });\n   88      },\n   89      handleKey(keyCode) {\n   90        let charCode = keyCode & 0xff;\n   91:       console.log(`handleKey`, { keyCode: '0x' + keyCode.toString(16), charCode, char: String.fromCharCode(charCode) });\n   92        let char = String.fromCodePoint(charCode);\n   93  \n   ..\n   96      },\n   97      handleCharMods(char, mods) {\n   98:       console.log(`handleCharMods`, { char, mods });\n   99      },\n  100      handleMouseButton(button, action, mods) {\n  101:       console.log(`handleMouseButton`, { button, action, mods });\n  102      },\n  103      handleCursorPos(x, y) {\n  ...\n  216      std.exit(0);\n  217    } catch(error) {\n  218:     console.log('ERROR:', error);\n  219    }\n  220  };\n  ...\n  224    main(...scriptArgs.slice(1));\n  225  } catch(error) {\n  226:   console.log('ERROR:',error.message);\n  227     std.exit(1);\n  228  } finally {\n\n/home/roman/Projects/plot-cv/quickjs/examples/hello.js:\n    1: console.log(\"Hello World\");\n    2  \n\n/home/roman/Projects/plot-cv/quickjs/examples/test_fib.js:\n    2  \n    3  import { fib } from \"./fib.so\";\n    4: \n    5: console.log(\"Hello World\");\n    6: console.log(\"fib(10)=\", fib(10));\n    7  \n\n/home/roman/Projects/plot-cv/quickjs/examples/hello_module.js:\n    2  \n    3  import { fib } from \"./fib_module.js\";\n    4: \n    5: console.log(\"Hello World\");\n    6: console.log(\"fib(10)=\", fib(10));\n    7  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-ffi/test-portmidi.js:\n    6    let count;\n    7    let inputId, outputId, inputInfo, outputInfo, deviceIDs;\n    8: \n    9:   console.log('err', err);\n   10  \n   11    let vinId = Pm_CreateVirtualInput('vin', null);\n   12    let voutId = Pm_CreateVirtualOutput('vout', null);\n   13:   console.log('virt', { vinId, voutId });\n   14  \n   15    count = Pm_CountDevices();\n   16:   console.log('count', count);\n   17  \n   18    inputId = Pm_GetDefaultInputDeviceID();\n   19:   console.log('inputId', inputId);\n   20  \n   21    outputId = Pm_GetDefaultOutputDeviceID();\n   22:   console.log('outputId', outputId);\n   23  \n   24    deviceIDs = [inputId, outputId];\n   ..\n   30  \n   31      let arr = new Uint32Array(info, 0, 1);\n   32:     console.log('arr', arr);\n   33    }\n   34: \n   35:   console.log('deviceInfo', deviceInfo);\n   36    let input, output;\n   37    err = Pm_OpenInput((st, ptr) => {\n   38      input = ptr;\n   39:     console.log('0x' + ptr.toString(16));\n   40:     console.log('st', st);\n   41    }, inputId);\n   42:   console.log('Pm_OpenInput', { input, err });\n   43    err = Pm_OpenOutput((st, ptr) => {\n   44      output = ptr;\n   45:     console.log('0x' + ptr.toString(16));\n   46:     console.log('st', st);\n   47    }, outputId);\n   48:   console.log('Pm_OpenOutput', { output, err });\n   49  \n   50    err = Pm_SetFilter(input, 0);\n   51:   console.log('Pm_SetFilter', { err });\n   52  \n   53    err = Pm_Poll(input);\n   54:   console.log('Pm_Poll', { err: PmError(err) });\n   55  \n   56    let msg = new Uint32Array(2);\n   57    msg[1] = Date.now();\n   58    err = Pm_Read(input, msg.buffer, 1);\n   59:   console.log('Pm_Read', { err: PmError(err) });\n   60    msg[0] = Pm_Message(0x90, 60, 100);\n   61  \n   62    err = Pm_Write(output, msg.buffer, 1);\n   63:   console.log('Pm_Write', { err: PmError(err), msg, buf: msg.buffer });\n   64    err = Pm_Close(input);\n   65:   console.log('Pm_Close', { err });\n   66  \n   67    err = Pm_Close(output);\n   68:   console.log('Pm_Close', { err });\n   69  \n   70    err = Pm_Terminate();\n   ..\n   77  \n   78    let midi = new MIDIAccess();\n   79: \n   80:   console.log('midi', midi);\n   81:   console.log('midi.devices', midi.devices);\n   82  \n   83    let [input] = [...midi.inputs.values()];\n   84    let [output] = [...midi.outputs.values()];\n   85: \n   86:   console.log('input', input);\n   87:   console.log('input.name', input.name);\n   88:   console.log('input.deviceInfo', input.deviceInfo);\n   89:   console.log('output', output);\n   90:   console.log('output.name', output.name);\n   91:   console.log('output.deviceInfo', output.deviceInfo);\n   92  }\n   93  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-ffi/test2.js:\n   11  pid = util.fork();\n   12  if(pid == 0) {\n   13:   console.log('in child: ', pid, 'my pid is', util.getpid());\n   14:   console.log('parent is:', util.getppid());\n   15:   console.log('_exit:', util._exit);\n   16    /* _exit() does not call any atexit function, etc. bail out fast!\n   17     * std.exit() can be used as well.\n   ..\n   19    util._exit(5);\n   20  } else {\n   21:   console.log('in parent, child pid: ', pid, 'my pid is', util.getpid());\n   22    os.sleep(1000);\n   23    status = os.waitpid(pid, 0);\n   24:   console.log(status, status[1] >> 8, 'should be 5');\n   25  }\n   26  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-ffi/test.js:\n   27  var h;\n   28  var r;\n   29: console.log('Hello World');\n   30  debug();\n   31: console.log('RTLD_NOW = ', RTLD_NOW);\n   32  /* Expect an error -- libc.so is (usually) a linker script */\n   33: console.log('dlopen = ', (r = dlopen('libc.so', RTLD_NOW)));\n   34  if(r == null) console.log('dlerror = ', dlerror());\n   35  /* But, using libc.so.6 should work */\n   36: console.log('dlopen = ', (h = dlopen('libc.so.6', RTLD_NOW)));\n   37  if(h == null) console.log('dlerror = ', dlerror());\n   38: console.log('dlsym = ', (r = dlsym(h, 'malloc')));\n   39  if(r == null) console.log('dlerror = ', dlerror());\n   40: console.log('dlclose = ', (r = dlclose(h)));\n   41  if(r != 0) console.log('dlerror = ', dlerror());\n   42: console.log('dlopen = ', (h = dlopen(null, RTLD_NOW)));\n   43  if(h == null) console.log('dlerror = ', dlerror());\n   44: console.log('dlsym = ', (r = dlsym(h, 'malloc')));\n   45  if(r == null) console.log('dlerror = ', dlerror());\n   46: console.log('dlclose = ', (r = dlclose(h)));\n   47  if(r != 0) console.log('dlerror = ', dlerror());\n   48  var malloc;\n   49: console.log('dlsym = ', (malloc = dlsym(RTLD_DEFAULT, 'malloc')));\n   50  if(malloc == null) console.log('dlerror = ', dlerror());\n   51  var free;\n   52: console.log('dlsym = ', (free = dlsym(RTLD_DEFAULT, 'free')));\n   53  if(free == null) console.log('dlerror = ', dlerror());\n   54  \n   ..\n   63  var p;\n   64  p = call('malloc', 10);\n   65: console.log(p);\n   66  call('free', p);\n   67  \n   ..\n   76  n = call('strlen', 'hello');\n   77  /* We expect 5 */\n   78: console.log(n);\n   79  \n   80  /* p = strdup(\"dup this\").\n   ..\n   92  var s;\n   93  s = toString(p);\n   94: console.log(s, call('strlen', p));\n   95: \n   96: console.log();\n   97: console.log('testing test.so functions');\n   98  h = dlopen('./test.so', RTLD_NOW);\n   99  if(h == null) console.log(\"can't load ./test.so: \", dlerror());\n  ...\n  107   */\n  108  r = call('test1', 'abc');\n  109: console.log('should be 5: ', r);\n  110  /* pass buffer to test1 -- test1 changes the buffer in place, and this\n  111   * is reflected in quickjs\n  ...\n  118  u[1] = 2;\n  119  u[2] = 3;\n  120: console.log('should print 1 2 3');\n  121  r = call('test1', b);\n  122: console.log('should print 3,2,1,0,0,0,0,0');\n  123: console.log(u);\n  124  \n  125  /* p is a pointer to \"dup this\" -- 9 bytes of memory\n  ...\n  127  b = toArrayBuffer(p, 9);\n  128  u = new Uint8Array(b);\n  129: console.log(u);\n  130  \n  131  fp = dlsym(RTLD_DEFAULT, 'strcpy');\n  ...\n  139  p = toPointer(b);\n  140  q = toPointer(b, 4);\n  141: console.log(q, 'should be ' + (BigInt(p) + 4n).toString(16));\n  142  \n  143  call('strcpy', +q, 'this pointer');\n  144: console.log(toString(q), call('strlen', +q));\n  145  \n  146  fp = dlsym(RTLD_DEFAULT, 'strtoul');\n  ...\n  148  define('strtoul', fp, null, 'ulong', 'string', 'string', 'int');\n  149  n = call('strtoul', '1234', null, 0);\n  150: console.log(n, 'Should be 1234');\n  151  call('strtoul', '1234567890123456789012345678901234567890', null, 0);\n  152: console.log(errno(), 'should be 34 (ERANGE)');\n  153  \n  154  p = JSContext();\n  155: console.log('jscontext = ', p);\n  156  \n\n/home/roman/Projects/plot-cv/quickjs/qjs-ffi/lib/socket.js:\n  206  \n  207  export function setsockopt(sockfd, level, optname, optval, optlen) {\n  208:   console.log('setsockopt', { sockfd, level, optname, optval, optlen });\n  209    return syscall.setsockopt(sockfd, level, optname, optval, optlen || optval.byteLength);\n  210  }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-ffi/lib/term.js:\n  380    let fp = dlsym(RTLD_DEFAULT, s);\n  381    if(fp == null) {\n  382:     console.log(dlerror());\n  383      return o;\n  384    }\n\n/home/roman/Projects/plot-cv/quickjs/qjs-ffi/examples/telnet.js:\n   49    debug('address: %s, port: %u', address, port);\n   50    /*console.log('SOCK_STREAM', SOCK_STREAM);\n   51:   console.log('SOCK_DGRAM', SOCK_DGRAM);*/\n   52  \n   53    let sock = new Socket(AF_INET, SOCK_STREAM);\n   ..\n   55    let addr = new SockAddr(AF_INET, address, port);\n   56    let conn;\n   57:   console.log('socket() .fd =', sock.fd);\n   58    debug('socket() fd = %d', +sock);\n   59  \n   ..\n   70      let opt = new socklen_t(1);\n   71      /*console.log('opt =', opt);\n   72:     console.log('setsockopt() =', setsockopt(sock.fd, SOL_SOCKET, SO_OOBINLINE, opt, 4));*/\n   73  \n   74      ReturnValue(ret, `sock.connect(${addr})`);\n   ..\n  117      if(FD_ISSET(+sock, wfds)) {\n  118        if(outLen > 0) {\n  119:         console.log('outLen:', outLen, 'outBuf:', BufferToString(outBuf.slice(0, outLen)).replace(/\\x1b/g, '\\\\x1b'));\n  120  \n  121          if(Send(outBuf, outLen) > 0) {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-ffi/examples/dnsresolve.js:\n    7  \n    8  import socklen_t from '../lib/socklen_t.js';\n    9: \n   10: console.log('socklen_t', 1);\n   11  \n   12  function not(n) {\n   ..\n   47      type = 0x0c;\n   48    }\n   49:   console.log('DNSQuery', domain);\n   50  \n   51    let outBuf = new Uint8Array([0xff, 0xff, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ...ToDomain(domain), 0x00, 0x00, type, 0x00, 0x01]).buffer;\n   52    new DataView(outBuf).setUint16(0, outBuf.byteLength - 2, false);\n   53:   console.log('DNSQuery', outBuf);\n   54    return outBuf;\n   55  }\n   ..\n   64    debug('Num answers: %u', header.getUint16(6, false));\n   65    //   ofs += 2 + header.getUint16(0, false);\n   66:   console.log(\n   67      'Response header:',\n   68      ArrayToBytes(u8.slice(ofs, ofs + 12))\n   ..\n   70    );\n   71    let type = header.getUint16(2, false);\n   72:   console.log('Response type:', type);\n   73  \n   74    ofs += 12;\n   ..\n  115  \n  116    function lookup(domain) {\n  117:     console.log('lookup', domain);\n  118      let local = new SockAddr(AF_INET, Math.floor(Math.random() * 65535 - 1024) + 1024, '0.0.0.0');\n  119  \n  ...\n  123      remote.port = port;\n  124      remote.addr = addr;\n  125: \n  126:     console.log('addr', addr);\n  127  \n  128      let sock = new Socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n  129:     console.log('socket() fd =', +sock);\n  130      debug('socket() fd = %d', +sock);\n  131  \n  ...\n  173          let length;\n  174          debug('socket readable %s %u', remote, remote.byteLength);\n  175: \n  176:         console.log(`remote =`, remote);\n  177  \n  178          const addr = new SockAddr();\n  ...\n  192            return addr;\n  193          }\n  194:         console.log(`Received ${length} bytes from socket`);\n  195        }\n  196      } while(!sock.destroyed);\n  ...\n  315      std.exit(0);\n  316    } catch(error) {\n  317:     console.log('ERROR:', error);\n  318    }\n  319  };\n\n/home/roman/Projects/plot-cv/quickjs/qjs-ffi/examples/zlib.js:\n    7    let strm = new zlib.z_stream();\n    8    let ok = zlib.deflateInit(strm);\n    9: \n   10:   console.log('zlib.deflateInit', strm, ok);\n   11  \n   12    let fd = os.open('out.gz', os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o644);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-ffi/examples/portmidi.js:\n  451    static from(deviceId) {\n  452      let input = MIDIInput.inputs(deviceId);\n  453:     console.log('MIDIInput.from', { deviceId, input });\n  454      return input;\n  455    }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/bin/wscli.js:\n   93      type = 0x0c;\n   94    }\n   95:   console.log('DNSQuery', domain);\n   96    let outBuf = new Uint8Array([\n   97      0xff,\n   ..\n  115    ]).buffer;\n  116    new DataView(outBuf).setUint16(0, outBuf.byteLength - 2, false);\n  117:   console.log('DNSQuery', outBuf);\n  118    return outBuf;\n  119  }\n  ...\n  152      });\n  153      let log = this.printFunction(console.log);\n  154:     console.log = str => {\n  155        //log('console.log:', args);\n  156        while(str.endsWith('\\n')) str = str.slice(0, -1);\n  ...\n  214    const { binary } = params;\n  215    //console.log('params', params);\n  216:   console.log('headers', headers);\n  217    function createWS(url, callbacks, listen = 0) {\n  218      let urlObj = new URL(url);\n  219      let repl;\n  220      let is_dns = false;\n  221: \n  222:     console.log('params.debug', params.debug);\n  223      net.setLog(net.LLL_USER | (((params.debug >= 2 ? net.LLL_DEBUG : net.LLL_WARN) << 1) - 1), (level, msg) => {\n  224        let p =\n  ...\n  239  \n  240      const fn = [net.client, net.server][+listen];\n  241:     console.log('createWS', { url, binary });\n  242      return fn(url, {\n  243        sslCert,\n  ...\n  262          connections.add(ws);\n  263          /*\n  264:         console.log('req',{  url });*/\n  265:         console.log('onConnect', { ws, req }, req.url);\n  266          const remote = `${ws.address}:${ws.port}`;\n  267          try {\n  268            repl = new CLI(remote);\n  269          } catch(err) {\n  270:           console.log('error:', err.message);\n  271          }\n  272          repl.printStatus(`Connected to ${remote}`);\n  ...\n  279        },\n  280        onClose(ws, status, reason, error) {\n  281:         console.log('onClose', { ws, status, reason, error });\n  282          connections.delete(ws);\n  283          if(repl) {\n  ...\n  291        },\n  292        onHttp(req, resp) {\n  293:         console.log('onHttp', console.config({ compact: false }), { req, resp });\n  294          let text = resp.text();\n  295          text = text.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n  296          const { url } = resp;\n  297:         console.log('onHttp', url, { text });\n  298  \n  299          /* let json =resp.json();\n  300:         console.log('onHttp', { json }); */\n  301          let buffer = resp.arrayBuffer();\n  302:         console.log('onHttp', { buffer });\n  303        },\n  304        onFd(fd, rd, wr) {\n  ...\n  314          if(is_dns) {\n  315            let response = DNSResponse(msg);\n  316:           console.log('onMessage', { ws, response });\n  317          } else {\n  318:           console.log('onMessage', { ws, msg });\n  319          }\n  320        },\n  321        onError(ws, error) {\n  322:         console.log('onError', ws, error);\n  323        }\n  324      });\n  ...\n  332    createWS(url, {})\n  333      .then(() => {\n  334:       console.log('FINISHED');\n  335      })\n  336      .catch(err => {\n  337:       console.log('Failed', err);\n  338      });\n  339  \n  340    function quit(why) {\n  341:     console.log(`quit('${why}')`);\n  342      repl.cleanup(why);\n  343    }\n  ...\n  347    main(...scriptArgs.slice(1));\n  348  } catch(error) {\n  349:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n  350    std.exit(1);\n  351  } finally {\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/bin/test-require.js:\n    1  import require from 'require';\n    2: \n    3: console.log('require', require);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/bin/list-exports.js:\n   58    let f = std.open(file, 'w+');\n   59    f.puts(tok);\n   60:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   61  }\n   62  \n   ..\n  452    main(...scriptArgs.slice(1));\n  453  } catch(error) {\n  454:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  455    std.exit(1);\n  456  }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/bin/test-require-cjs.js:\n    1  const r = require;\n    2: \n    3: console.log('require', r);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n  132  \n  133    opts.compact = false;\n  134: \n  135:   console.log(str, opts, ...args);\n  136  };\n  137  \n  ...\n  154        //console.log('os.rename() =', err);\n  155        if(err) throw new Error(`FileReplacer rename() error: ${std.strerror(-err)}`);\n  156:       console.log(`${file} written (${size} bytes)`);\n  157      }\n  158    });\n  ...\n  411        }\n  412        if(debug >= 3)\n  413:         console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  414  \n  415        if(token.lexeme == ';' && cond !== true) doneImports = true;\n  ...\n  422          if(imp.last.lexeme == ';') {\n  423            if(debug > 2)\n  424:             console.log(\n  425                'imp',\n  426                imp[0].loc + '',\n  427:               console.config({ breakLength: 80, compact: 0 }),\n  428                TokenSequence(imp) + ''\n  429              );\n  ...\n  602        }, []);\n  603        tokens = AddWhitespace(tokens);\n  604:       console.log('tokens', tokens);\n  605  \n  606        return TokenSequence(tokens).toString();\n  ...\n  676  \n  677        if(debug > 2)\n  678:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  679  \n  680        //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  ...\n  703  \n  704        if(debug >= 2)\n  705:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  706        if(debug > 1) console.log('impexp', compact(1), { range: new NumericRange(...range), loc: loc + '' });\n  707  \n  ...\n  735        }\n  736        if(!path.isFile(file)) {\n  737:         console.log(`Path must exist '${file}'`);\n  738          continue;\n  739        }\n  ...\n  752    /*\n  753    let end = Date.now();\n  754:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  755  */\n  756  \n  ...\n  759    if(showDeps) {\n  760      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  761: \n  762:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  763    }\n  764  \n  ...\n  890        range = r;\n  891      } catch(e) {}\n  892:     console.log('NumericRange.from', range);\n  893      return range;\n  894    }\n  ...\n  901        if(IsRange(range)) {\n  902          range = [...range];\n  903:         console.log('range#' + ++i, inspect(range));\n  904  \n  905          if(IsRange(prev) && IsRange(range)) {\n  ...\n 1026      };\n 1027      if(debug > 2)\n 1028:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1029          file,\n 1030          range: [range[0], range[1]]\n ....\n 1034      const { length } = this;\n 1035      if(debug > 2)\n 1036:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1037          start,\n 1038          end,\n ....\n 1123        const hole = holes[i];\n 1124        const [range] = this[i];\n 1125:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1126      }\n 1127      //console.log('holes', holes);\n ....\n 1178        } else {\n 1179          let type = getTypeName(str);\n 1180:         console.log('invalid type:', type);\n 1181          throw new Error(type);\n 1182        }\n ....\n 1267    let f = std.open(file, 'w+');\n 1268    f.puts(tok);\n 1269:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1270  }\n 1271  \n ....\n 1539      try {\n 1540        const nbytes = results[0].write(stream);\n 1541:       console.log(`${nbytes} bytes written to '${out.file}'`);\n 1542      } catch(error) {\n 1543:       console.log(`write error ('${out.file}'):`, error);\n 1544        std.exit(1);\n 1545      }\n ....\n 1570    main(...scriptArgs.slice(1));\n 1571  } catch(error) {\n 1572:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1573    std.exit(1);\n 1574  }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/bin/extract-structs.js:\n   55  \n   56    for(let file of files) {\n   57:     console.log('file', file);\n   58  \n   59      let str = std.loadFile(file, 'utf-8');\n   60: \n   61:     console.log('str', str.split('\\n')[0]);\n   62  \n   63      let lexer = new CLexer(str, file);\n   ..\n   94    main(...scriptArgs.slice(1));\n   95  } catch(error) {\n   96:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   97    std.exit(1);\n   98  }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/css3-selectors.js:\n   39        //console.log('parseSelector', str, capture);\n   40        const [, name, , value] = capture;\n   41:       console.log('parseSelector', { name, value });\n   42        sel = AttributeSelector(name, value);\n   43      } else {\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/require.js:\n  182    const handler = {\n  183      get(target, prop, receiver) {\n  184:       console.log('get', { target, prop });\n  185        if(prop in target) return Reflect.get(target, prop, receiver);\n  186:       console.log('module', module);\n  187        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  188  \n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/rpc.js:\n  252      const { socket } = this;\n  253      const status = socket.CLOSE_STATUS_PROTOCOL_ERR || 1000;\n  254: \n  255:     console.log(`ERROR: ${message}`);\n  256      this.exception = new Error(message);\n  257:     console.log('error(', status, message, ')');\n  258      this.close(status, message.slice(0, 128));\n  259      return this.exception;\n  ...\n  262    close(status, reason) {\n  263      const { socket } = this;\n  264:     console.log('close(', status, reason, ')');\n  265      socket.close(status, reason);\n  266      delete this.socket;\n  ...\n  303  \n  304    onpong(data) {\n  305:     console.log('Connection.onpong:', data);\n  306    }\n  307  \n  308    onerror(error) {\n  309:     console.log('Connection.onerror', error ? ` (${error})` : '');\n  310      this.connected = false;\n  311      this.cleanup();\n  ...\n  313  \n  314    onclose(code, why) {\n  315:     console.log('Connection.onclose', code, why ? ` (${why})` : '');\n  316      this.connected = false;\n  317      this.cleanup();\n  ...\n  584  export function RPCSocket(url, service = RPCServer, verbosity = 1) {\n  585    if(!new.target) return new RPCSocket(url, service, verbosity);\n  586: \n  587:   console.log('RPCSocket', { url, service, verbosity });\n  588  \n  589    // const DEBUG = DebugFlags();\n  ...\n  592      ? (msg, ...args) => {\n  593          const { console } = globalThis;\n  594:         console \n  595            .log(\n  596              { msg },\n  597:             console.config({\n  598                multiline: false,\n  599                compact: false,\n  ...\n  671      /* prettier-ignore */ get connected() {\n  672        const ws = this.ws;\n  673:       console.log(\"ws\", ws);\n  674        if(ws)\n  675        return typeof ws.readyState == 'number' ? ws.readyState == ws.OPEN : false;\n  676      const {fdlist} = instance;\n  677:       console.log(\"fdlist\", fdlist);\n  678  \n  679      return  fdlist[Object.keys( fdlist)[0]].connected;\n  ...\n  915  function ForwardObject(e, thisObj) {\n  916    let obj = ForwardMethods(e, {}, thisObj);\n  917:   console.log(`ForwardObject`, { e, obj, thisObj });\n  918    return obj;\n  919  }\n  ...\n  942      let r = await client.waitFor('response');\n  943      if(t[cmd]) r = t[cmd](r);\n  944:     console.log(`RESPONSE to '${cmd}'`, r);\n  945      return r;\n  946    };\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/dom.js:\n 1056      const isArray = ctor == NodeList || owner.children == raw;\n 1057      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1058:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1059  \n 1060      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  876              value.then(v => {\n  877                replaceProperty(v);\n  878:               console.log(`util.lazyProperty resolved `, obj[name]);\n  879                return v;\n  880              });\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js:\n 1497  \n 1498      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1499:     console.log('reverseSearch', this.searchCb);\n 1500:     console.log('reverseSearch', this.update);\n 1501  \n 1502      try {\n 1503        this.update();\n 1504      } catch(error) {\n 1505:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1506      }\n 1507      return -2;\n ....\n 1652        this.addCleanupHandler(() => {\n 1653          this.mouseTracking(false);\n 1654:         console.log('Mouse tracking disabled');\n 1655        });\n 1656      }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   52  \n   53      /*console.log('tok.id', tok.id);\n   54:       console.log('tok.type', tok.type);\n   55:       console.log('tokens', tokens);*/\n   56  \n   57      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/csv.js:\n    9  \n   10      this.handler = (arg, tok) =>\n   11:       console.log(`Unmatched token at ${arg.loc}\\narg.currentLine()\\n${' '.repeat(arg.loc.column - 1)}^`);\n   12  \n   13      this.addRules(separator);\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/bnf.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/quickjs/inst/i686-linux-gnu/usr/local/lib/quickjs/require.js:\n  182    const handler = {\n  183      get(target, prop, receiver) {\n  184:       console.log('get', { target, prop });\n  185        if(prop in target) return Reflect.get(target, prop, receiver);\n  186:       console.log('module', module);\n  187        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  188  \n\n/home/roman/Projects/plot-cv/quickjs/inst/i686-linux-gnu/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/quickjs/inst/i686-linux-gnu/usr/local/lib/quickjs/rpc.js:\n  246      const { socket } = this;\n  247      const status = socket.CLOSE_STATUS_PROTOCOL_ERR || 1000;\n  248: \n  249:     console.log(`ERROR: ${message}`);\n  250      this.exception = new Error(message);\n  251:     console.log('error(', status, message, ')');\n  252      this.close(status, message.slice(0, 128));\n  253      return this.exception;\n  ...\n  256    close(status, reason) {\n  257      const { socket } = this;\n  258:     console.log('close(', status, reason, ')');\n  259      socket.close(status, reason);\n  260      delete this.socket;\n  ...\n  297  \n  298    onpong(data) {\n  299:     console.log('Connection.onpong:', data);\n  300    }\n  301  \n  302    onerror(error) {\n  303:     console.log('Connection.onerror', error ? ` (${error})` : '');\n  304      this.connected = false;\n  305      this.cleanup();\n  ...\n  307  \n  308    onclose(code, why) {\n  309:     console.log('Connection.onclose', code, why ? ` (${why})` : '');\n  310      this.connected = false;\n  311      this.cleanup();\n  ...\n  572  export function RPCSocket(url, service = RPCServer, verbosity = 1) {\n  573    if(!new.target) return new RPCSocket(url, service, verbosity);\n  574: \n  575:   console.log('RPCSocket', { url, service, verbosity });\n  576  \n  577    // const DEBUG = DebugFlags();\n  ...\n  580      ? (msg, ...args) => {\n  581          const { console } = globalThis;\n  582:         console \n  583            .log(\n  584              { msg },\n  585:             console.config({\n  586                multiline: false,\n  587                compact: false,\n  ...\n  659      /* prettier-ignore */ get connected() {\n  660        const ws = this.ws;\n  661:       console.log(\"ws\", ws);\n  662        if(ws)\n  663        return typeof ws.readyState == 'number' ? ws.readyState == ws.OPEN : false;\n  664      const {fdlist} = instance;\n  665:       console.log(\"fdlist\", fdlist);\n  666  \n  667      return  fdlist[Object.keys( fdlist)[0]].connected;\n  ...\n  895  function ForwardObject(e, thisObj) {\n  896    let obj = ForwardMethods(e, {}, thisObj);\n  897:   console.log(`ForwardObject`, { e, obj, thisObj });\n  898    return obj;\n  899  }\n  ...\n  921      let r = await client.waitFor('response');\n  922      if(t[cmd]) r = t[cmd](r);\n  923:     console.log(`RESPONSE to '${cmd}'`, r);\n  924      return r;\n  925    };\n\n/home/roman/Projects/plot-cv/quickjs/inst/i686-linux-gnu/usr/local/lib/quickjs/dom.js:\n  419    /*  [inspectSymbol](depth, opts) {\n  420      const { tagName, attributes, children } = this;\n  421:     console.log('Document.inspect')\n  422      return `\\x1b[1;31mDocument\\x1b[0m ${tagName} attributes: ${attributes[inspectSymbol](depth + 1, opts)} children: ${inspect(children.map(c => c[inspectSymbol](depth + 2, opts)))}>`;\n  423    }*/\n  ...\n  546      const isArray = ctor == NodeList || owner.children == raw;\n  547      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n  548:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n  549  \n  550      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/quickjs/inst/i686-linux-gnu/usr/local/lib/quickjs/util.js:\n  753              value.then(v => {\n  754                replaceProperty(v);\n  755:               console.log(`util.lazyProperty resolved `, obj[name]);\n  756                return v;\n  757              });\n\n/home/roman/Projects/plot-cv/quickjs/inst/i686-linux-gnu/usr/local/lib/quickjs/repl.js:\n 1168        return n ? '*' : ' ';\n 1169      }\n 1170:     console.log('\\\\h               this help\\n' + '\\\\x              ' + sel(hex_mode) + 'hexadecimal number display\\n' + '\\\\d              ' + sel(!hex_mode) + 'decimal number display\\n' + '\\\\t              ' + sel(this.showTime) + 'toggle timing display\\n' + '\\\\clear           clear the terminal');\n 1171      if(has_jscalc) {\n 1172:       console.log('\\\\a              ' + sel(algebraicMode) + 'algebraic mode\\n' + '\\\\n         ' + sel(!algebraicMode) + 'numeric mode');\n 1173      }\n 1174      if(has_bignum) {\n 1175:       console.log(\"\\\\p [m [e]]       set the BigFloat precision to 'm' bits\\n\" + \"\\\\digits n        set the BigFloat precision to 'ceil(n*log2(10))' bits\");\n 1176        if(!has_jscalc) {\n 1177:         console.log('\\\\mode [std|math] change the running mode (current = ' + eval_mode + ')');\n 1178        }\n 1179      }\n ....\n 1183          /*let args = getFunctionArguments(fn);\n 1184          let cmdline = cmd + ' ' + args.reduce((acc, arg) => '[' + (arg + ((acc && acc.trim()) != '' ? ' ' + acc.trim() : '')).trim() + ']', '');*/\n 1185:         console.log(\n 1186            '\\\\' +\n 1187              cmd /*line*/\n ....\n 1191        }\n 1192      if(!config_numcalc) {\n 1193:       console.log('\\\\q               exit');\n 1194      }\n 1195    }\n ....\n 1491  \n 1492      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1493:     console.log('reverseSearch', this.searchCb);\n 1494:     console.log('reverseSearch', this.update);\n 1495  \n 1496      try {\n 1497        this.update();\n 1498      } catch(error) {\n 1499:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1500      }\n 1501      return -2;\n ....\n 1638        this.addCleanupHandler(() => {\n 1639          this.mouseTracking(false);\n 1640:         console.log('Mouse tracking disabled');\n 1641        });\n 1642      }\n\n/home/roman/Projects/plot-cv/quickjs/inst/i686-linux-gnu/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   52  \n   53      /*console.log('tok.id', tok.id);\n   54:       console.log('tok.type', tok.type);\n   55:       console.log('tokens', tokens);*/\n   56  \n   57      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/quickjs/inst/i686-linux-gnu/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/bin/test-require.js:\n    1  import require from 'require';\n    2: \n    3: console.log('require', require);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/bin/list-exports.js:\n   59    let f = std.open(file, 'w+');\n   60    f.puts(tok);\n   61:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   62  }\n   63  \n   ..\n  462    main(...scriptArgs.slice(1));\n  463  } catch(error) {\n  464:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  465    std.exit(1);\n  466  }\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/bin/test-require-cjs.js:\n    1  const r = require;\n    2: \n    3: console.log('require', r);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/bin/resolve-imports.js:\n  132  \n  133    opts.compact = false;\n  134: \n  135:   console.log(str, opts, ...args);\n  136  };\n  137  \n  ...\n  154        //console.log('os.rename() =', err);\n  155        if(err) throw new Error(`FileReplacer rename() error: ${std.strerror(-err)}`);\n  156:       console.log(`${file} written (${size} bytes)`);\n  157      }\n  158    });\n  ...\n  411        }\n  412        if(debug >= 3)\n  413:         console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  414  \n  415        if(token.lexeme == ';' && cond !== true) doneImports = true;\n  ...\n  422          if(imp.last.lexeme == ';') {\n  423            if(debug > 2)\n  424:             console.log(\n  425                'imp',\n  426                imp[0].loc + '',\n  427:               console.config({ breakLength: 80, compact: 0 }),\n  428                TokenSequence(imp) + ''\n  429              );\n  ...\n  602        }, []);\n  603        tokens = AddWhitespace(tokens);\n  604:       console.log('tokens', tokens);\n  605  \n  606        return TokenSequence(tokens).toString();\n  ...\n  676  \n  677        if(debug > 2)\n  678:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  679  \n  680        //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  ...\n  704  \n  705        if(debug >= 2)\n  706:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  707        if(debug > 1) console.log('impexp', compact(1), { range: new NumericRange(...range), loc: loc + '' });\n  708  \n  ...\n  736        }\n  737        if(!path.isFile(file)) {\n  738:         console.log(`Path must exist '${file}'`);\n  739          continue;\n  740        }\n  ...\n  753    /*\n  754    let end = Date.now();\n  755:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  756  */\n  757  \n  ...\n  760    if(showDeps) {\n  761      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  762: \n  763:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  764    }\n  765  \n  ...\n  891        range = r;\n  892      } catch(e) {}\n  893:     console.log('NumericRange.from', range);\n  894      return range;\n  895    }\n  ...\n  902        if(IsRange(range)) {\n  903          range = [...range];\n  904:         console.log('range#' + ++i, inspect(range));\n  905  \n  906          if(IsRange(prev) && IsRange(range)) {\n  ...\n 1027      };\n 1028      if(debug > 2)\n 1029:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1030          file,\n 1031          range: [range[0], range[1]]\n ....\n 1035      const { length } = this;\n 1036      if(debug > 2)\n 1037:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1038          start,\n 1039          end,\n ....\n 1124        const hole = holes[i];\n 1125        const [range] = this[i];\n 1126:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1127      }\n 1128      //console.log('holes', holes);\n ....\n 1179        } else {\n 1180          let type = getTypeName(str);\n 1181:         console.log('invalid type:', type);\n 1182          throw new Error(type);\n 1183        }\n ....\n 1268    let f = std.open(file, 'w+');\n 1269    f.puts(tok);\n 1270:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1271  }\n 1272  \n ....\n 1540      try {\n 1541        const nbytes = results[0].write(stream);\n 1542:       console.log(`${nbytes} bytes written to '${out.file}'`);\n 1543      } catch(error) {\n 1544:       console.log(`write error ('${out.file}'):`, error);\n 1545        std.exit(1);\n 1546      }\n ....\n 1571    main(...scriptArgs.slice(1));\n 1572  } catch(error) {\n 1573:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1574    std.exit(1);\n 1575  }\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/bin/extract-structs.js:\n  103  \n  104      /*console.log('str', str);\n  105:     console.log('str', str.split('\\n')[0]);*/\n  106  \n  107      let lexer = new CLexer(str, file);\n  ...\n  174  \n  175            cFuncListNames.push(header[0]);\n  176: \n  177:           console.log('cfuncList', console.config({ compact: 1 }), cfuncList);\n  178            cFuncLists.push(cfuncList);\n  179  \n  ...\n  251        output.flush();\n  252      }\n  253:     console.log('cFuncListObjects', console.config({ depth: 10, compact: 1 }), cFuncListObjects);\n  254    }\n  255  \n  ...\n  263    main(...scriptArgs.slice(1));\n  264  } catch(error) {\n  265:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  266    std.exit(1);\n  267  }\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/css3-selectors.js:\n   29        'nth-child'(n) {\n   30          return Predicate.shift(1, Predicate.index(-1, Predicate.equal(n - 1)));\n   31:         console.log('nth-child', { n });\n   32        }\n   33      }[name] ?? (() => {})\n   ..\n   72        //console.log('parseSelector', str, capture);\n   73        const [, name, , value] = capture;\n   74:       console.log('parseSelector', { name, value });\n   75        sel = AttributeSelector(name, value);\n   76      } else {\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/require.js:\n  198    const handler = {\n  199      get(target, prop, receiver) {\n  200:       console.log('get', { target, prop });\n  201        if(prop in target) return Reflect.get(target, prop, receiver);\n  202:       console.log('module', module);\n  203        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  204  \n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/dom.js:\n 1302      const isArray = ctor == NodeList || owner.children == raw;\n 1303      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1304:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1305  \n 1306      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/util.js:\n  896              value.then(v => {\n  897                replaceProperty(v);\n  898:               console.log(`util.lazyProperty resolved `, obj[name]);\n  899                return v;\n  900              });\n  ...\n 1193    fn,\n 1194    log = (duration, name, args, ret) =>\n 1195:     console.log(\n 1196        `function '${name}'` +\n 1197          (ret !== undefined ? ` {= ${escape(ret + '').substring(0, 100) + '...'}}` : '') +\n ....\n 1256        for(let part of path) {\n 1257          let cachefn = cache(obj) ?? getter(obj);\n 1258:         console.log('cache', { i, cache });\n 1259          obj = cachefn(part);\n 1260:         console.log('cachefn', { i, cachefn });\n 1261        }\n 1262        return obj;\n ....\n 1268  \n 1269        for(let part of path) {\n 1270:         console.log('cache', { part, obj });\n 1271          let cachefn = cache(obj.receiver ?? obj);\n 1272:         console.log('cachefn', { i, cachefn });\n 1273          obj = cachefn(part) ?? (cachefn(part, gettersetter(newMap())), cachefn(part));\n 1274:         console.log('cachefn', { obj });\n 1275        }\n 1276        return obj(key, value);\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/repl.js:\n 1571  \n 1572      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1573:     console.log('reverseSearch', this.searchCb);\n 1574:     console.log('reverseSearch', this.update);\n 1575  \n 1576      try {\n 1577        this.update();\n 1578      } catch(error) {\n 1579:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1580      }\n 1581      return -2;\n ....\n 1726        this.addCleanupHandler(() => {\n 1727          this.mouseTracking(false);\n 1728:         console.log('Mouse tracking disabled');\n 1729        });\n 1730      }\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   55  \n   56      /*console.log('tok.id', tok.id);\n   57:       console.log('tok.type', tok.type);\n   58:       console.log('tokens', tokens);*/\n   59  \n   60      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/lexer/csv.js:\n    9  \n   10      this.handler = (arg, tok) =>\n   11:       console.log(`Unmatched token at ${arg.loc}\\narg.currentLine()\\n${' '.repeat(arg.loc.column - 1)}^`);\n   12  \n   13      this.addRules(separator);\n\n/home/roman/Projects/plot-cv/quickjs/inst/rpi4/usr/local/lib/quickjs/lexer/bnf.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/bin/wscli.js:\n   93      type = 0x0c;\n   94    }\n   95:   console.log('DNSQuery', domain);\n   96    let outBuf = new Uint8Array([\n   97      0xff,\n   ..\n  115    ]).buffer;\n  116    new DataView(outBuf).setUint16(0, outBuf.byteLength - 2, false);\n  117:   console.log('DNSQuery', outBuf);\n  118    return outBuf;\n  119  }\n  ...\n  152      });\n  153      let log = this.printFunction(console.log);\n  154:     console.log = str => {\n  155        //log('console.log:', args);\n  156        while(str.endsWith('\\n')) str = str.slice(0, -1);\n  ...\n  214    const { binary } = params;\n  215    //console.log('params', params);\n  216:   console.log('headers', headers);\n  217    function createWS(url, callbacks, listen = 0) {\n  218      let urlObj = new URL(url);\n  219      let repl;\n  220      let is_dns = false;\n  221: \n  222:     console.log('params.debug', params.debug);\n  223      net.setLog(net.LLL_USER | (((params.debug >= 2 ? net.LLL_DEBUG : net.LLL_WARN) << 1) - 1), (level, msg) => {\n  224        let p =\n  ...\n  239  \n  240      const fn = [net.client, net.server][+listen];\n  241:     console.log('createWS', { url, binary });\n  242      return fn(url, {\n  243        sslCert,\n  ...\n  262          connections.add(ws);\n  263          /*\n  264:         console.log('req',{  url });*/\n  265:         console.log('onConnect', { ws, req }, req.url);\n  266          const remote = `${ws.address}:${ws.port}`;\n  267          try {\n  268            repl = new CLI(remote);\n  269          } catch(err) {\n  270:           console.log('error:', err.message);\n  271          }\n  272          repl.printStatus(`Connected to ${remote}`);\n  ...\n  279        },\n  280        onClose(ws, status, reason, error) {\n  281:         console.log('onClose', { ws, status, reason, error });\n  282          connections.delete(ws);\n  283          if(repl) {\n  ...\n  291        },\n  292        onHttp(req, resp) {\n  293:         console.log('onHttp', console.config({ compact: false }), { req, resp });\n  294          let text = resp.text();\n  295          text = text.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n  296          const { url } = resp;\n  297:         console.log('onHttp', url, { text });\n  298  \n  299          /* let json =resp.json();\n  300:         console.log('onHttp', { json }); */\n  301          let buffer = resp.arrayBuffer();\n  302:         console.log('onHttp', { buffer });\n  303        },\n  304        onFd(fd, rd, wr) {\n  ...\n  314          if(is_dns) {\n  315            let response = DNSResponse(msg);\n  316:           console.log('onMessage', { ws, response });\n  317          } else {\n  318:           console.log('onMessage', { ws, msg });\n  319          }\n  320        },\n  321        onError(ws, error) {\n  322:         console.log('onError', ws, error);\n  323        }\n  324      });\n  ...\n  332    createWS(url, {})\n  333      .then(() => {\n  334:       console.log('FINISHED');\n  335      })\n  336      .catch(err => {\n  337:       console.log('Failed', err);\n  338      });\n  339  \n  340    function quit(why) {\n  341:     console.log(`quit('${why}')`);\n  342      repl.cleanup(why);\n  343    }\n  ...\n  347    main(...scriptArgs.slice(1));\n  348  } catch(error) {\n  349:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n  350    std.exit(1);\n  351  } finally {\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/bin/test-require.js:\n    1  import require from 'require';\n    2: \n    3: console.log('require', require);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/bin/list-exports.js:\n   58    let f = std.open(file, 'w+');\n   59    f.puts(tok);\n   60:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   61  }\n   62  \n   ..\n  452    main(...scriptArgs.slice(1));\n  453  } catch(error) {\n  454:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  455    std.exit(1);\n  456  }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/bin/test-require-cjs.js:\n    1  const r = require;\n    2: \n    3: console.log('require', r);\n    4  \n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/bin/resolve-imports.js:\n  132  \n  133    opts.compact = false;\n  134: \n  135:   console.log(str, opts, ...args);\n  136  };\n  137  \n  ...\n  154        //console.log('os.rename() =', err);\n  155        if(err) throw new Error(`FileReplacer rename() error: ${std.strerror(-err)}`);\n  156:       console.log(`${file} written (${size} bytes)`);\n  157      }\n  158    });\n  ...\n  411        }\n  412        if(debug >= 3)\n  413:         console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  414  \n  415        if(token.lexeme == ';' && cond !== true) doneImports = true;\n  ...\n  422          if(imp.last.lexeme == ';') {\n  423            if(debug > 2)\n  424:             console.log(\n  425                'imp',\n  426                imp[0].loc + '',\n  427:               console.config({ breakLength: 80, compact: 0 }),\n  428                TokenSequence(imp) + ''\n  429              );\n  ...\n  602        }, []);\n  603        tokens = AddWhitespace(tokens);\n  604:       console.log('tokens', tokens);\n  605  \n  606        return TokenSequence(tokens).toString();\n  ...\n  676  \n  677        if(debug > 2)\n  678:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  679  \n  680        //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  ...\n  703  \n  704        if(debug >= 2)\n  705:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  706        if(debug > 1) console.log('impexp', compact(1), { range: new NumericRange(...range), loc: loc + '' });\n  707  \n  ...\n  735        }\n  736        if(!path.isFile(file)) {\n  737:         console.log(`Path must exist '${file}'`);\n  738          continue;\n  739        }\n  ...\n  752    /*\n  753    let end = Date.now();\n  754:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  755  */\n  756  \n  ...\n  759    if(showDeps) {\n  760      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  761: \n  762:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  763    }\n  764  \n  ...\n  890        range = r;\n  891      } catch(e) {}\n  892:     console.log('NumericRange.from', range);\n  893      return range;\n  894    }\n  ...\n  901        if(IsRange(range)) {\n  902          range = [...range];\n  903:         console.log('range#' + ++i, inspect(range));\n  904  \n  905          if(IsRange(prev) && IsRange(range)) {\n  ...\n 1026      };\n 1027      if(debug > 2)\n 1028:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1029          file,\n 1030          range: [range[0], range[1]]\n ....\n 1034      const { length } = this;\n 1035      if(debug > 2)\n 1036:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1037          start,\n 1038          end,\n ....\n 1123        const hole = holes[i];\n 1124        const [range] = this[i];\n 1125:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1126      }\n 1127      //console.log('holes', holes);\n ....\n 1178        } else {\n 1179          let type = getTypeName(str);\n 1180:         console.log('invalid type:', type);\n 1181          throw new Error(type);\n 1182        }\n ....\n 1267    let f = std.open(file, 'w+');\n 1268    f.puts(tok);\n 1269:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1270  }\n 1271  \n ....\n 1539      try {\n 1540        const nbytes = results[0].write(stream);\n 1541:       console.log(`${nbytes} bytes written to '${out.file}'`);\n 1542      } catch(error) {\n 1543:       console.log(`write error ('${out.file}'):`, error);\n 1544        std.exit(1);\n 1545      }\n ....\n 1570    main(...scriptArgs.slice(1));\n 1571  } catch(error) {\n 1572:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1573    std.exit(1);\n 1574  }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/bin/extract-structs.js:\n   55  \n   56    for(let file of files) {\n   57:     console.log('file', file);\n   58  \n   59      let str = std.loadFile(file, 'utf-8');\n   60: \n   61:     console.log('str', str.split('\\n')[0]);\n   62  \n   63      let lexer = new CLexer(str, file);\n   ..\n   94    main(...scriptArgs.slice(1));\n   95  } catch(error) {\n   96:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   97    std.exit(1);\n   98  }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/css3-selectors.js:\n   39        //console.log('parseSelector', str, capture);\n   40        const [, name, , value] = capture;\n   41:       console.log('parseSelector', { name, value });\n   42        sel = AttributeSelector(name, value);\n   43      } else {\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/require.js:\n  182    const handler = {\n  183      get(target, prop, receiver) {\n  184:       console.log('get', { target, prop });\n  185        if(prop in target) return Reflect.get(target, prop, receiver);\n  186:       console.log('module', module);\n  187        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  188  \n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/rpc.js:\n  252      const { socket } = this;\n  253      const status = socket.CLOSE_STATUS_PROTOCOL_ERR || 1000;\n  254: \n  255:     console.log(`ERROR: ${message}`);\n  256      this.exception = new Error(message);\n  257:     console.log('error(', status, message, ')');\n  258      this.close(status, message.slice(0, 128));\n  259      return this.exception;\n  ...\n  262    close(status, reason) {\n  263      const { socket } = this;\n  264:     console.log('close(', status, reason, ')');\n  265      socket.close(status, reason);\n  266      delete this.socket;\n  ...\n  303  \n  304    onpong(data) {\n  305:     console.log('Connection.onpong:', data);\n  306    }\n  307  \n  308    onerror(error) {\n  309:     console.log('Connection.onerror', error ? ` (${error})` : '');\n  310      this.connected = false;\n  311      this.cleanup();\n  ...\n  313  \n  314    onclose(code, why) {\n  315:     console.log('Connection.onclose', code, why ? ` (${why})` : '');\n  316      this.connected = false;\n  317      this.cleanup();\n  ...\n  584  export function RPCSocket(url, service = RPCServer, verbosity = 1) {\n  585    if(!new.target) return new RPCSocket(url, service, verbosity);\n  586: \n  587:   console.log('RPCSocket', { url, service, verbosity });\n  588  \n  589    // const DEBUG = DebugFlags();\n  ...\n  592      ? (msg, ...args) => {\n  593          const { console } = globalThis;\n  594:         console \n  595            .log(\n  596              { msg },\n  597:             console.config({\n  598                multiline: false,\n  599                compact: false,\n  ...\n  671      /* prettier-ignore */ get connected() {\n  672        const ws = this.ws;\n  673:       console.log(\"ws\", ws);\n  674        if(ws)\n  675        return typeof ws.readyState == 'number' ? ws.readyState == ws.OPEN : false;\n  676      const {fdlist} = instance;\n  677:       console.log(\"fdlist\", fdlist);\n  678  \n  679      return  fdlist[Object.keys( fdlist)[0]].connected;\n  ...\n  915  function ForwardObject(e, thisObj) {\n  916    let obj = ForwardMethods(e, {}, thisObj);\n  917:   console.log(`ForwardObject`, { e, obj, thisObj });\n  918    return obj;\n  919  }\n  ...\n  942      let r = await client.waitFor('response');\n  943      if(t[cmd]) r = t[cmd](r);\n  944:     console.log(`RESPONSE to '${cmd}'`, r);\n  945      return r;\n  946    };\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/dom.js:\n 1056      const isArray = ctor == NodeList || owner.children == raw;\n 1057      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1058:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1059  \n 1060      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/util.js:\n  876              value.then(v => {\n  877                replaceProperty(v);\n  878:               console.log(`util.lazyProperty resolved `, obj[name]);\n  879                return v;\n  880              });\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/repl.js:\n 1497  \n 1498      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1499:     console.log('reverseSearch', this.searchCb);\n 1500:     console.log('reverseSearch', this.update);\n 1501  \n 1502      try {\n 1503        this.update();\n 1504      } catch(error) {\n 1505:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1506      }\n 1507      return -2;\n ....\n 1652        this.addCleanupHandler(() => {\n 1653          this.mouseTracking(false);\n 1654:         console.log('Mouse tracking disabled');\n 1655        });\n 1656      }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   52  \n   53      /*console.log('tok.id', tok.id);\n   54:       console.log('tok.type', tok.type);\n   55:       console.log('tokens', tokens);*/\n   56  \n   57      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/lexer/csv.js:\n    9  \n   10      this.handler = (arg, tok) =>\n   11:       console.log(`Unmatched token at ${arg.loc}\\narg.currentLine()\\n${' '.repeat(arg.loc.column - 1)}^`);\n   12  \n   13      this.addRules(separator);\n\n/home/roman/Projects/plot-cv/quickjs/inst/x86_64-linux-profile/usr/local/lib/quickjs/lexer/bnf.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/react-upload-gallery/examples/SelectActive.js:\n    9          onConfirmDelete={() => window.confirm('Are you sure you want to delete?')}\n   10          onDeleted={(deletedImage, images) => {\n   11:           console.log(deletedImage, images);\n   12            if(deletedImage.selected && images.length) {\n   13              images[0].select();\n\n/home/roman/Projects/plot-cv/react-upload-gallery/examples/Rules.js:\n   23            switch (type) {\n   24              case 'accept':\n   25:               console.log(`Only ${rules.accept.join(', ')}`);\n   26  \n   27              case 'limit':\n   28:               console.log('limit <= ', rules.limit);\n   29  \n   30              case 'size':\n   31:               console.log('max size <= ', rules.size);\n   32  \n   33              case 'minWidth':\n   34              case 'minHeight':\n   35:               console.log('Dimensions > ', `${rules.width.min}x${rules.height.min}`);\n   36  \n   37              case 'maxWidth':\n   38              case 'maxHeight':\n   39:               console.log('Dimensions < ', `${rules.width.max}x${rules.height.max}`);\n   40  \n   41              default:\n\n/home/roman/Projects/plot-cv/imgui/imgui_demo.cpp:\n 4491  ShowExampleAppConsole(bool* p_open) {\n 4492    static ExampleAppConsole console;\n 4493:   console.Draw(\"Example: Console\", p_open);\n 4494  }\n 4495  \n\n/home/roman/Projects/plot-cv/lib/childProcess.js:\n   94  \n   95    self = function ChildProcess(command, args = [], options = {}) {\n   96:     console.log('ChildProcess', { command, args, options });\n   97      let { file, stdio, env, block = false, ...opts } = options;\n   98      let obj = {};\n\n/home/roman/Projects/plot-cv/lib/ol-v6.15.1.js:\n 3506                    t[1] <= 90 &&\n 3507                    ((fr = !1),\n 3508:                   console.warn(\n 3509                      'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.'\n 3510                    )),\n ....\n 5609              Fs = new N();\n 5610            Fs.setSize = function() {\n 5611:             console.warn('labelCache is deprecated.');\n 5612            };\n 5613            var Gs,\n ....\n 7726                        (!Hu((n = [r, e])) &&\n 7727                          (t.offsetWidth || t.offsetHeight || t.getClientRects().length) &&\n 7728:                         console.warn(\"No map visible because the map container's width or height are 0.\"));\n 7729                    }\n 7730                    this.setSize(n), this.gr();\n ....\n 18271                    })\n 18272                    .catch(function (t) {\n 18273:                     console.error(t), (e.V = t), e.setState('error');\n 18274                    }),\n 18275                  i\n .....\n 20091                  }),\n 20092                  (n.prototype.Nh = function(t) {\n 20093:                   console.error(t), this.setState('error');\n 20094                  }),\n 20095                  n\n .....\n 20391                  }),\n 20392                  (n.prototype.Nh = function(t) {\n 20393:                   console.error(t), this.setState('error');\n 20394                  }),\n 20395                  n\n .....\n 32636                })(i);\n 32637              } catch(t) {\n 32638:               console.warn(\n 32639                  'Failed to extract static filter. Filter will continue working, but at higher memory usage and slower framerate.\\nThis is most likely a bug, please report this via https://github.com/mapbox/mapbox-gl-js/issues/new?assignees=&labels=&template=Bug_report.md\\nand paste the contents of this message in the report.\\nThank you!\\nFilter Expression:\\n' +\n 32640                    JSON.stringify(i, null, 2) +\n\n/home/roman/Projects/plot-cv/lib/objectInspect.js:\n   97    }\n   98    /* console.reallog(\"maxDepth:\", maxDepth)\n   99:   console.reallog(\"opts.depth:\", opts.depth)\n  100:   console.reallog(\"depth:\", depth)*/\n  101    if(depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n  102      return isArray(obj) ? '[Array]' : '[Object]';\n  ...\n  151  \n  152        obj = r;\n  153:       console.reallog('objectInspect', { obj });\n  154      }\n  155    }\n\n/home/roman/Projects/plot-cv/lib/devpane.js:\n   14  if(globalThis.window) {\n   15    window.addEventListener('load', () => {\n   16:     console.log('New cookie: ', document.cookie);\n   17    });\n   18  }\n   ..\n  202      } else {\n  203        this.path.abs();\n  204:       console.log('touch event: ', event);\n  205        move = { x: event.start.x + event.x, y: event.start.y + event.y };\n  206        this.path.line(move.x, move.y);\n  ...\n  341        gettext().then(r => console.log(\"gettext() = \", r));\n  342      } else*/ else if(e.key == 't' && e.ctrlKey) {\n  343:       console.log('devpane ', this);\n  344        this.renderTranslateLayer();\n  345  \n  ...\n  359          elementPicker.init({ onClick: e => {\n  360            const text = this.getTextParts(e); //gettext(e); // e.innerText || e.textContent;\n  361:           console.log(\"translate(\", translations, \", \",text, \")\")\n  362            text.forEach(t => {\n  363            });\n  ...\n  414      const what = checked ? 'add' : 'remove';\n  415      const fn = `${what}EventListener`;\n  416: \n  417:     console.log(`devpane.handleToggle ${fn}`);\n  418      const mouseEvents = elem => ['mouseenter', 'mouseleave'].forEach(listener => elem[fn](listener, this.mouseEvent));\n  419  \n  ...\n  480      t.set = (lang, str) => {\n  481        const e = t.inputs[lang];\n  482:       console.log('t.set ', { e });\n  483        e.value = str;\n  484      };\n  ...\n  545  \n  546      this.getTranslations(res => {\n  547:       console.log('language store: ', res);\n  548      });\n  549  \n  ...\n  589        let fa = this.inputs.fa.value;\n  590        if(fa != '') {\n  591:         console.log(`Saving EN: ${en} FA: ${fa} `);\n  592          settext({ [en]: fa });\n  593          this.form.parentNode.removeChild(this.form);\n  ...\n  633  \n  634            t.layer.insertBefore(tbl, t.layer.firstElementChild);\n  635: \n  636:           console.log('Load ', { json, obj });\n  637            elem.innerHTML = json;\n  638  \n  ...\n  663          style: { border: '2px outset #ddd' },\n  664          onclick: event => {\n  665:           console.error('selectElement');\n  666            event.preventDefault();\n  667            const e = select();\n  ...\n  674                bbText.innerHTML = `${Rect.toSource(bbox)}\\nfont-size: ${css.fontSize}`; //`x: ${bbox.x}\\ny: ${bbox.y}\\nw: ${bbox.width}\\nh: ${bbox.height}`;\n  675              }\n  676:             console.log('selectElement (resolved) = ', res);\n  677  \n  678              if(res && res.length) {\n  ...\n  722              const border1 = Element.border(elem1).outset(rect1).round();\n  723              const border2 = Element.border(elem2).outset(rect2).round();\n  724: \n  725:             console.log('Clearance: ', { rect1, border1, rect2, border2 });\n  726            }\n  727          }\n  ...\n  760  \n  761    selectElement() {\n  762:     console.log('devpane.selectElement()');\n  763      //if(!this.rectList\n  764      if(!this.rectList || !this.rectList.length) {\n  765        let page = Element.find('.page');\n  766:       console.log('page ', page);\n  767  \n  768        this.rectList = this.buildRectList(page, ({ innerText, textContent }) => {\n  ...\n  770          return text.length > 0;\n  771        }); //e.textContent && e.textContent.length > 0);\n  772:       console.log('this.rectList ', this.rectList);\n  773      }\n  774  \n  ...\n  776      //console.log('selectElement');\n  777      this.rectList.sort((a, b) => Rect.area(a) - Rect.area(b));\n  778:     console.log(this.rectList);\n  779      this.active = true;\n  780      let selected = new Promise((resolve, reject) => {\n  ...\n  797            this.selected = this.getRectAt(clientX, clientY, true);\n  798            if(this.selected.length) {\n  799:             console.log('selectElement selected: ', this.selected);\n  800              elm.innerHTML = this.selected.map(({ e }) => `#${e.id}`).join(',');\n  801              this.fontSize = Element.getCSS(this.selected[0].e, 'font-size');\n  802:             console.log(`${Element.xpath(this.selected[0].e)} font-size: `, this.fontSize);\n  803            } else {\n  804              elm.innerHTML = '';\n\n/home/roman/Projects/plot-cv/lib/preact.js:\n 1293          ref.current = createHandle();\n 1294        }\n 1295:       console.log('Ruler ref:', ref);\n 1296      },\n 1297      args == null ? args : args.concat(ref)\n\n/home/roman/Projects/plot-cv/lib/devtools.js:\n   35      if(newClasses.length) {\n   36        st.set('classes', (classes = Util.unique(classes.concat(newClasses))));\n   37:       console.log('dev.classes ', newClasses);\n   38      }\n   39      return newClasses;\n   ..\n   43    window.addEventListener('load', () => {\n   44      Timer.once(3000, () => {\n   45:       console.log('running accumulateClasses');\n   46        accumulateClasses();\n   47      });\n   ..\n   87  export function stylesheets() {\n   88    let r = Util.map(document.styleSheets, (s, i) => {\n   89:     console.log('i: ', i, ' s: ', s);\n   90  \n   91      [...s.cssRules].map(r => r.cssText);\n   92    });\n   93:   console.log('Util.stylesheets() ', r);\n   94    return r;\n   95  }\n   ..\n  105  \n  106      let count = args.length;\n  107:     console.log('colors map(', args, ')');\n  108      const left = elements.length ? Element.rect(elements[0]).x2 + stepX : stepX;\n  109  \n  ...\n  178      let rect = dom.SVG.bbox(e);\n  179      rect = matrix.transform_rect(rect);\n  180:     console.log('getRect: ', { matrix, rect });\n  181      return rect;\n  182    }\n  ...\n  224      e.setAttribute('stop-color', color.toString(255));\n  225      e.setAttribute('stop-opacity', (color.a/255).toFixed(3));\n  226: \n  227:     console.log('offset:',step.offset, ' color:',color, ' element: ', e);\n  228    });\n  229  \n  ...\n  272      }\n  273    };\n  274:   console.log('obj: ', obj);\n  275    arr.push(obj);\n  276    return obj;\n  ...\n  324      ]\n  325    });\n  326:   console.log('PointList: ', { d, g });\n  327    //f.root.parentElement.removeChild(f.root);\n  328:   console.log('path: ', path.str());\n  329    let p = f('path', {\n  330      d: path.str(),\n  ...\n  337  \n  338    c.appendChild(f.root);\n  339:   console.log(p);\n  340  \n  341    return points;\n  ...\n  349    for(let i = 0; i < stores.length; i++) {\n  350      const st = stores[i];\n  351:     console.log('store: ', { st, AllStores });\n  352      const store = AllStores[st];\n  353      while(args.length) {\n  ...\n  374    return new Promise((resolve, reject) => {\n  375      let e = elem;\n  376:     console.log('gettext ', { e });\n  377      let text = [];\n  378      let prevParent;\n  ...\n  397      });\n  398      const res = text.join('\\n');\n  399:     console.log('gettext\\n', res);\n  400      resolve(res);\n  401    });\n  ...\n  416        const click = event => {\n  417          event.preventDefault();\n  418:         console.log('selected element ', event.target);\n  419          select.element = event.target;\n  420          resolve(event.target);\n  ...\n  523      ws.onclose = function(event) {\n  524        ws.close();\n  525:       console.log('ws: onclose ', { event });\n  526      };\n  527      ws.onerror = function(event) {\n  528        reject(event);\n  529:       console.log('ws: onerror');\n  530      };\n  531  \n  532      /*ws.onmessage = function(msg) {\n  533      if(!(typeof(msg.data) == 'object' && msg.data.cmd))\n  534:       console.log(`ws.ondata '`, msg.data, \"'\");\n  535    }ch*/\n  536      ws.onopen = function(event) {\n  537:       console.log('ws.onopen ', { event });\n  538        if(cmd == 'send' || cmd == 'recv') {\n  539          let json = {\n  ...\n  543          };\n  544          ws.send(JSON.toString(json) + '\\r\\n');\n  545:         console.log('ws.send ', json);\n  546          if(cmd == 'recv') {\n  547            ws.onmessage = msg => {\n  548:             console.log('ws.msg ', msg);\n  549              if(msg.data == '') return;\n  550              let x = msg.data.charAt(0) != '{' ? decodeBase64(msg.data) : msg.data;\n  ...\n  553                if(x.cmd == 'recv') return;\n  554              }\n  555:             console.log('ws.data ', x);\n  556              if(typeof data === 'function') data(x);\n  557              ws.close();\n  ...\n  576    ws({ recv: filename }).then(x => {\n  577      const d = x.data;\n  578:     console.log('settext: ', obj);\n  579      ws({\n  580        send: filename,\n  ...\n  654        const bbox = new Rect(0, 0, svg.getAttribute('width'), svg.getAttribute('height'));\n  655        let r = Rect(av ? av : bbox);\n  656:       console.log('r = ', r, ' bbox = ', bbox);\n  657        let pr = Element.rect('.page');\n  658        let pos = Point.sum(Rect.corners(pr)[1], Point(0, 0));\n  ...\n  667        if(arr.length == 2) {\n  668          Timer.once(1333, () => {\n  669:           console.log('walk(', arr[0].e, ', ', arr[1].e, ')');\n  670            walk(arr[0].e, arr[1].e);\n  671          });\n  ...\n  689  rg = dom.Element.find('radialGradient', svg);\n  690  obj = dom.Element.toObject(rg);\n  691: console.log(dom.Element.toObject(rg));\n  692  layer = createsvg(['100vw','100vh'], true);\n  693  createsvg(obj, layer);\n  ...\n  702        args.unshift(tagName);\n  703      }\n  704:     console.log('createsvg ', ...args);\n  705      let e = createsvg.factory(...args);\n  706      createsvg.last_element = e;\n  ...\n  710    let rect = fixed ? Size(window.innerWidth, window.innerHeight) : Element.rect(body);\n  711    const size = Size(args) || new Size(rect);\n  712:   console.log('svg size: ', size);\n  713    createsvg.factory = SVG.factory(body, Size.convertUnits(size));\n  714    let e = createsvg.factory('polygon', {\n  ...\n  751  export function dump(element) {\n  752    let e = Element.find(element);\n  753:   console.error(Element.dump(e));\n  754  }\n  755  \n  ...\n  820            const ch = text.charCodeAt(0);\n  821            let line = texts.add({ e, id, lang, key, text, rect });\n  822:           console.log('Text ', line[line.length - 1]);\n  823          }\n  824        }\n  ...\n  857  \n  858    window.output_accu = out;\n  859:   console.log('walk output:\\n' + window.output_accu);\n  860    //reduceTexts((acc,text) => console.log(\"text \" + text.index));\n  861  }\n  ...\n  865    let e = Element.find(element);\n  866    let r = Element.rect(e);\n  867: \n  868:   console.log('Element ', Element.xpath(e));\n  869:   console.log('    rect: ', r);\n  870:   console.log('     css: ', Element.getCSS(e));\n  871  }\n  872  \n  ...\n 1037  \n 1038    if(!b.padding.null()) rect(rects.border, 'rgba(0,80,255,0.5)', 'blue');\n 1039: \n 1040:   console.log('e: ', e, ' b: ', b);\n 1041  }\n 1042  \n\n/home/roman/Projects/plot-cv/lib/preact.esm.js:\n  704        function() {\n  705          'function' == typeof n$$1 ? n$$1(t()) : n$$1 && (n$$1.current = t());\n  706:         console.log('Ruler ref:', n$$1);\n  707        },\n  708        null == u ? u : u.concat(n$$1)\n\n/home/roman/Projects/plot-cv/lib/jsonPatcherProxy.js:\n  104        if(isNonSerializableArrayProperty) {\n  105          //This happens in Vue 1-2 (should not happen in Vue 3). See: https://github.com/vuejs/vue/issues/427, https://github.com/vuejs/vue/issues/9259\n  106:         console.warn(\n  107            `JSONPatcherProxy noticed a non-integer property ('${key}') was set for an array. This interception will not emit a patch. The value is an object, but it was not proxified, because it would not be addressable in JSON-Pointer`\n  108          );\n  ...\n  158          /* array props (as opposed to indices) don't emit any patches, to avoid needless `length` patches */\n  159          if(key != 'length' && !warnedAboutNonIntegrerArrayProp) {\n  160:           console.warn(\n  161              `JSONPatcherProxy noticed a non-integer property ('${key}') was set for an array. This interception will not emit a patch`\n  162            );\n  ...\n  345  \n  346        treeMetadata.handler.set = (parent, key, newValue) => {\n  347:         console.warn(message);\n  348          return Reflect.set(parent, key, newValue);\n  349        };\n  350        treeMetadata.handler.set = (parent, key, newValue) => {\n  351:         console.warn(message);\n  352          return Reflect.set(parent, key, newValue);\n  353        };\n\n/home/roman/Projects/plot-cv/lib/fd-graph.js:\n   36        onRenderGraph = graph => true\n   37      } = options;\n   38: \n   39:     console.log(`Graph(${origin},${gravitate_to_origin})`);\n   40      this.nodes = [];\n   41      this.edges = [];\n   ..\n  102      let ids = [];\n  103      if(!(e instanceof Edge)) {\n  104:       console.log('addEdge', args);\n  105        e = new Edge(args[0], args[1]);\n  106        ids = [this.nodes.indexOf(args[0]), this.nodes.indexOf(args[1])];\n  ...\n  370  \n  371      /*\n  372:     console.log(`Node(${label},${charge})`,\n  373        Util.inspect(this, { newline: \"\", indent: \"\", spacing: \" \" })\n  374      );*/\n\n/home/roman/Projects/plot-cv/lib/filesystem.js:\n  470        }\n  471        let ret;\n  472:       console.log('fopen', { fd, flags });\n  473        if(flags[0] == 'r') ret = fs.createReadStream(filename, { fd, flags, mode });\n  474        else if('wa'.indexOf(flags[0]) != -1) ret = fs.createWriteStream(filename, { fd, flags, mode });\n  ...\n  528      },\n  529      readFileSync(filename, encoding = 'utf-8') {\n  530:       console.log('readFile', { filename, encoding });\n  531        return CatchError(() => fs.readFileSync(filename, { encoding }));\n  532      },\n\n/home/roman/Projects/plot-cv/lib/lscache.js:\n  362    set(key, value, time) {\n  363      const { impl, cache, cacheBucket } = this;\n  364:     console.info('BaseCache.set', { key, value, time, impl, cache });\n  365  \n  366      // if(!this.supportsStorage) return false;\n  ...\n  443    get(key) {\n  444      const { impl, cache } = this;\n  445: \n  446:     console.info('BaseCache.get', { key, impl, cache });\n  447  \n  448      //    if(!this.supportsStorage) return null;\n  ...\n  621    //console.info('cache impl:', impl);\n  622    async function self(...args) {\n  623:     console.info('FetchCached', ...args);\n  624  \n  625      let cached = false;\n  626      request = args[0] instanceof Request ? args.shift() : new Request(...args);\n  627      request.time = Date.now();\n  628:     console.info('FetchCached', { request });\n  629      response = null;\n  630      try {\n  ...\n  643        if(response) {\n  644          let r = await browserCache.set(request, response.clone());\n  645:         console.info('CachedFetch set', { request, response, r });\n  646        }\n  647      }\n  648: \n  649:     console.info('cache ', cached ? 'hit' : 'miss', { request, response });\n  650      if(cached) response.cached = true;\n  651      response.request = request;\n\n/home/roman/Projects/plot-cv/lib/tree.js:\n  183    let parent = Tree.prototype.parentNode.call(this, node);\n  184    let index = Tree.prototype.indexOf.call(this, parent, node);\n  185:   console.log('Tree.remove', { node, parent, index });\n  186  \n  187    let [removed] = splice(parent, index, 1);\n  ...\n  249  \n  250      const obj = parent[current];\n  251:     console.log('Tree.create', {\n  252        current,\n  253        path: path.join('.'),\n  ...\n  318    if(this) {\n  319      //if(!Array.isArray(a))\n  320:     console.log('Path(', a, ')');\n  321      Array.prototype.splice.call(this, 0, 0, ...a);\n  322      return this;\n\n/home/roman/Projects/plot-cv/lib/tinyTest.js:\n    6        try {\n    7          testAction();\n    8:         console.log('Test:', testName, '\\x1b[1;32mOK\\x1b[0m');\n    9        } catch(e) {\n   10          failures++;\n   11:         console.log('Test:', testName, '\\x1b[1;31mFAILED\\x1b[0m', e);\n   12:         console.log(e.stack);\n   13        }\n   14      }\n\n/home/roman/Projects/plot-cv/lib/image-size.js:\n   15      case 'jpeg': {\n   16        let buf = fs.readFileSync(filename, null);\n   17:       console.log('buf', buf);\n   18  \n   19        if(isJpeg(buf)) {\n\n/home/roman/Projects/plot-cv/lib/fetch.js:\n   15        if(resp.file) if (!/tmp\\//.test(resp.file)) resp.file = 'tmp/' + resp.file;\n   16      } else {\n   17:       console.info('resp:', resp);\n   18        resp = { ...resp, error: resp.statusText };\n   19      }\n   ..\n   39    debug: true,\n   40    print({ cached, ok, status, redirected, statusText, type, url }, fn, ...args) {\n   41:     console.debug(\n   42        `FetchCached(${args\n   43          .map((a, i) =>\n\n/home/roman/Projects/plot-cv/lib/preact.m.js:\n  704        function() {\n  705          'function' == typeof n$$1 ? n$$1(t()) : n$$1 && (n$$1.current = t());\n  706:         console.log('Ruler ref:', n$$1);\n  707        },\n  708        null == u ? u : u.concat(n$$1)\n\n/home/roman/Projects/plot-cv/lib/misc.js:\n  477    // catch ctrl+c event and exit normally\n  478    process.on('SIGINT', function() {\n  479:     console.log('Ctrl-C...');\n  480      process.exit(2);\n  481    });\n  ...\n  483    //catch uncaught exceptions, trace, then exit normally\n  484    process.on('uncaughtException', function(e) {\n  485:     console.log('Uncaught Exception...');\n  486:     console.log(e.stack);\n  487      process.exit(99);\n  488    });\n  ...\n  845              value.then(v => {\n  846                replaceProperty(v);\n  847:               console.log(`util.lazyProperty resolved `, obj[name]);\n  848                return v;\n  849              });\n\n/home/roman/Projects/plot-cv/lib/lua.js:\n  622  \n  623      function moonscript_assign_expression(node) {\n  624:       console.error('ASSIGN_EXPRESSION ', node);\n  625  \n  626        if(node.left && node.left.length >= 2) return `${moonscript(node.left)} = ${moonscript(node.right)}`;\n  ...\n  629          .map((variable, i) => {\n  630            let r = node.right[i];\n  631:           console.error(`variable.name=${variable.name}, r=`, r);\n  632            if(r.left && variable.name == r.left.name && ['*', '%', '/', '+', '-'].indexOf(r.op) != -1) {\n  633              return `${moonscript(variable)} ${r.op}${node.op} ${moonscript(node.right[i].right)}`;\n  ...\n  712  \n  713        if(node.type == undefined) {\n  714:         console.error('node = ', node);\n  715          //throw { message: \"node.type == undefined\",  node };\n  716          return '';\n  ...\n 1302  \n 1303      //process.stderr.write(util.inspect(args)+\"\\n\");\n 1304: \n 1305:     console.error(...args);\n 1306    }\n 1307  \n ....\n 1382      } catch(err) {\n 1383        err.token = this.cur_token;\n 1384:       console.error('ERROR:', err);\n 1385:       console.log('ERROR:', err);\n 1386        throw err;\n 1387      }\n ....\n 1485      let id;\n 1486      this.match(Token.KEYWORD, 'function');\n 1487: \n 1488:     console.error('parse_func_stat ', this.cur_token);\n 1489      if(this.cur_token.type == 'LPAREN') id = '';\n 1490      else id = this.parse_funcname();\n ....\n 1967  \n 1968      lines = Util.unique(lines);\n 1969:     console.error('LINES: ', lines.join(','));\n 1970  \n 1971      return this.ast.table_expr(fields, lines.length != 1);\n ....\n 2030  \n 2031      let index;\n 2032: \n 2033:     console.error('TOKEN: ', this.cur_token);\n 2034  \n 2035      let node = this.parse_expr();\n 2036  \n 2037      //parse_assignment\n 2038: \n 2039:     console.error('EXPR: ', node);\n 2040  \n 2041      if(this.cur_token.type == 'ASSIGN') {\n 2042        this.next();\n 2043:       console.error('TOKEN2: ', this.cur_token);\n 2044        index = node;\n 2045        node = this.parse_expr();\n\n/home/roman/Projects/plot-cv/lib/crosskit.js:\n 1481      }\n 1482      index++; //Increase Index Of Elements Creation\n 1483:     console.info(\n 1484        '%cCROSSKIT ' + crosskit.version + '\\nRendering Mode: ' + renderer,\n 1485        'background-color: purple; color: white;'\n\n/home/roman/Projects/plot-cv/lib/dom.js:\n  112    updateTransformation() {\n  113      const t = this.transformation.toString();\n  114:     console.log('CSSTransformSetters.updateTransformation', t);\n  115      this.style.transform = t;\n  116    }\n\n/home/roman/Projects/plot-cv/lib/github.js:\n   31      url = url.replace(/.*github\\.com/, '/github');\n   32      url = url.replace(new RegExp('(,|\"|%22).*', 'g'), '');\n   33:     console.log('url:', url);\n   34      yield* [...text.matchAll(/pository\"\\s*>\\s*([^<]*)/g)].map(m => m[1]);\n   35    } while(url != 'undefined');\n   ..\n   84    }\n   85    const url = `https://api.github.com/repos/${owner}/${repo}/contents/${dir}`;\n   86:   console.log('GithubListContents', { host, owner, repo, dir, filter, url });\n   87    const headers = {\n   88      Authorization: 'Basic ' + window.btoa(`${username}:${password}`)\n   ..\n   98      result = result.filter(({ name, type }) => type == 'dir' || re.test(name));\n   99    }\n  100:   console.log('result:', result);\n  101    const firstFile = result.find(r => !!r.download_url);\n  102    const base_url = firstFile ? firstFile.download_url.replace(/\\/[^\\/]*$/, '') : '';\n  ...\n  142        async get(i) {\n  143          const url = at(i);\n  144:         console.log('url:', url);\n  145          return await fetch(url, {});\n  146        },\n\n/home/roman/Projects/plot-cv/lib/sourceMap.js:\n    4  const [encodeBase64, decodeBase64] = [\n    5    s => {\n    6:     console.log(`encode('${s}')`);\n    7      return Util.base64.encode(s);\n    8    },\n    9    s => {\n   10:     console.log(`decode('${s}')`);\n   11      return Util.base64.decode(s);\n   12    }\n   ..\n  116  \n  117    let r = SourceMap.mapFileCommentRegex.exec(sm);\n  118: \n  119:   console.log('r:', r, { sm });\n  120  \n  121    // for some odd reason //# .. captures in 1 and /* .. */ in 2\n\n/home/roman/Projects/plot-cv/lib/loglevel.js:\n   44      if(console.log) {\n   45        if(console.log.apply) {\n   46:         console.log.apply(console, arguments);\n   47        } else {\n   48          //In old IE, native console methods themselves don't have apply().\n\n/home/roman/Projects/plot-cv/lib/axios.js:\n   19        const { url, method, data } = cfg;\n   20        Error.stackTraceLimit = 100;\n   21:       console.error('axios ERROR:', { code, url, method, data }, /*cfg,*/ new Error().stack);\n   22        //throw new Error(err.response.data.message);\n   23      }\n\n/home/roman/Projects/plot-cv/lib/util.js:\n  503    let results = filters.map(f => f.test(locationStr));\n  504    if(filters.every(f => !f.test(locationStr))) return;\n  505:   console.log('log', { args, c });\n  506    Util.putStack();\n  507    args = args.reduce((a, p, i) => {\n  ...\n  541      if(substitutions[i] !== undefined) o.push(substitutions[i]);\n  542    }\n  543:   console.log(...o);\n  544  };\n  545  \n  ...\n 1015          });\n 1016        } catch(err) {\n 1017:         console.log('extend:' + err + '\\n', { obj, key, value });\n 1018        }\n 1019      }\n ....\n 1039        /*        Object.defineProperty(obj, name, { value, enumerable: false, configurable: false, writable: false });*/\n 1040      } catch(err) {\n 1041:       console.log('static:', err);\n 1042      }\n 1043    }\n ....\n 1702    for(let j = 0; j < iterable.length; j++) {\n 1703      const [i, color] = iterable[j].length == 2 ? iterable[j] : [j, iterable[j]];\n 1704:     console.log(\n 1705        `  %c    %c ${color} %c ${textFn(color, i)}`,\n 1706        `background: ${color}; font-size: 18px; ${filters};`,\n ....\n 1766      process: async function run() {\n 1767        for await(const event of this.loop) {\n 1768:         console.info('event:', event);\n 1769        }\n 1770      }\n ....\n 2340  Util.putStack = (stack = new Util.stack().slice(3)) => {\n 2341    stack = stack instanceof Util.stack ? stack : Util.stack(stack);\n 2342:   console.log('Util.putStack', Util.className(stack));\n 2343: \n 2344:   console.log('STACK TRACE:\\n' + stack.toString());\n 2345  };\n 2346  \n ....\n 2467    for(let arg of args) {\n 2468      if(Util.isGenerator(arg)) {\n 2469:       console.error('isGenerator:', arg);\n 2470        yield* arg;\n 2471      } else {\n ....\n 2615  \n 2616    /*console.log(\"obj\",(obj));\n 2617: console.log(\"isGenerator\",Util.isGenerator(obj));*/\n 2618  \n 2619    if(Util.isGenerator(obj))\n ....\n 3259  \n 3260      buffer.size = size;\n 3261:     console.log(\"buffer.bits:\",buffer.bits,\"buffer.size:\",buffer.size);\n 3262    }\n 3263    function moveBits(input, output, len) {\n ....\n 3698  \n 3699   } catch(e) {\n 3700:   console.log(\"e.stack\",[...e.stack]);\n 3701    stack = e.stack;\n 3702   }\n ....\n 3744  );\n 3745  Util.location = function Location(...args) {\n 3746:   console.log('Util.location(', ...args, ')');\n 3747    let ret = this instanceof Util.location ? this : Object.setPrototypeOf({}, Util.location.prototype);\n 3748    if(args.length == 3) {\n ....\n 3764    toString(color = false) {\n 3765      let { fileName, lineNumber, columnNumber, functionName } = this;\n 3766:     console.log('this:', this, {\n 3767        fileName,\n 3768        lineNumber,\n ....\n 4407        .reverse()[0]\n 4408        .replace(/.*position\\ ([0-9]+).*/, '$1');\n 4409:     console.error('Unexpected token: ', jsonStr);\n 4410:     console.error('Unexpected token at:', jsonStr.substring(pos));\n 4411      ret = null;\n 4412    }\n ....\n 4507    let proxy;\n 4508    handler = /*handler || */ function(name, args) {\n 4509:     console.log(`Calling method '${name}':`, ...args);\n 4510    };\n 4511    //console.log('handler', { handler }, handler + '');\n ....\n 4520          };\n 4521          member = method.bind(obj);\n 4522:         console.log('Util.traceProxy', key, (member + '').replace(/\\n\\s+/g, ' ').split(lineSplit)[0]);\n 4523        }\n 4524        return member;\n ....\n 5007          std = c;\n 5008        });\n 5009:       console.log('childProcess', { childProcess, fs, std });\n 5010        let proc = childProcess('xclip', ['-in'], {\n 5011          block: false,\n ....\n 5013          env: { DISPLAY: Util.getEnv('DISPLAY') }\n 5014        });\n 5015:       console.log('proc.stdin', proc.stdin);\n 5016: \n 5017:       console.log('write =', await fs.write(proc.stdin, i));\n 5018        await fs.close(proc.stdin);\n 5019        return await proc.wait();\n ....\n 5079    };\n 5080    const log = (method, ...args) =>\n 5081:     console.log(\n 5082        `${Date.now() - createdTime.valueOf()} timer#${id}.${method}`,\n 5083        ...args.map(obj =>\n ....\n 5605                argv1 => argv1.replace(/\\/[^\\/]*$/g, '')\n 5606              );\n 5607:             console.log(\n 5608                'Exception:',\n 5609                message,\n ....\n 5702    let match = Util.matchAll(/%(?:o|O|d|i|s|f|s|d|c)/g);\n 5703    for(let [fmt, ...styles] of args) {\n 5704:     console.log('Util.consoleJoin', { fmt, styles, out });\n 5705      let substs = [...match(fmt)];\n 5706      if(substs.length != styles.length) {\n ....\n 5727    self.add = Util.consoleJoin;\n 5728    /*  function concat(out, args) {\n 5729:  console.log('concat', { out: [...out], args: [...args] });\n 5730     while(args.length) {\n 5731        let arg = args.shift();\n ....\n 5774      const a = [...this];\n 5775      const i = a.map(i => Util.inspect(i));\n 5776:     console.debug('a: ' + i.shift(), ...i);\n 5777  \n 5778      Util.consoleConcat.prototype.print.call(this, this.log);\n ....\n 5811  \n 5812          const matches = [...Util.matchAll(['%c', '%o'], arg)];\n 5813:         console.debug('matches.length:', matches.length, ' args.length:', args.length);\n 5814  \n 5815          if(matches.length > 0) {\n ....\n 5937  \n 5938    if(l) {\n 5939:     console.log(`Function   : ${fn.name}()`);\n 5940:     console.log(`Average    : ${ms.toFixed(d)}ms`);\n 5941:     console.log(`Repetitions: ${r}`);\n 5942:     console.log(`Executions : ${e}`);\n 5943    }\n 5944  \n ....\n 6141        const CLOCK_MONOTONIC_RAW = 4;\n 6142        const CLOCK_BOOTTIME = 7;\n 6143: \n 6144:       console.log('STACK:', Util.getCallerStack());\n 6145  \n 6146        performanceNow = async function(clock = CLOCK_MONOTONIC_RAW) {\n ....\n 6235    fn,\n 6236    log = (duration, name, args, ret) =>\n 6237:     console.log(\n 6238        `function '${name}'` +\n 6239          (ret !== undefined ? ` {= ${Util.abbreviate(Util.escape(ret + ''))}}` : '') +\n ....\n 6292      leave ||\n 6293      ((name, ret) =>\n 6294:       console.log(`function '${name}'` + (ret !== undefined ? ` {= ${Util.abbreviate(Util.escape(ret + ''))}}` : '')));\n 6295  \n 6296    let orig = fn;\n\n/home/roman/Projects/plot-cv/lib/eventEmitter.js:\n  132      if(m && m > 0 && this.events[type].length > m) {\n  133        this.events[type].warned = true;\n  134:       console.error(\n  135          '(node) warning: possible EventEmitter memory ' +\n  136            'leak detected. %d listeners added. ' +\n  ...\n  140        if(typeof console.trace === 'function') {\n  141          // not supported in IE 10\n  142:         console.trace();\n  143        }\n  144      }\n\n/home/roman/Projects/plot-cv/lib/log4javascript.js:\n 1916  \n 1917        if(console.debug && Level.DEBUG.isGreaterOrEqual(loggingEvent.level)) {\n 1918:         consoleMethodName = 'debug';\n 1919        } else if(console.info && Level.INFO.equals(loggingEvent.level)) {\n 1920:         consoleMethodName = 'info';\n 1921        } else if(console.warn && Level.WARN.equals(loggingEvent.level)) {\n 1922:         consoleMethodName = 'warn';\n 1923        } else if(console.error && loggingEvent.level.isGreaterOrEqual(Level.ERROR)) {\n 1924:         consoleMethodName = 'error';\n 1925        } else {\n 1926:         consoleMethodName = 'log';\n 1927        }\n 1928  \n 1929        if(typeof console[consoleMethodName].apply == 'function') {\n 1930:         console[consoleMethodName].apply(console, getFormattedMessage(false));\n 1931        } else {\n 1932:         console[consoleMethodName](getFormattedMessage(true));\n 1933        }\n 1934      } else if(typeof opera != 'undefined' && opera.postError) {\n ....\n 5144          if(!consoleClosed) {\n 5145            logLog.debug('really doing unload ' + this);\n 5146:           consoleClosed = true;\n 5147:           consoleWindowLoaded = false;\n 5148:           consoleWindowCreated = false;\n 5149            appender.dispatchEvent('unload', {});\n 5150          }\n ....\n 5250                  appender.show();\n 5251                }\n 5252:               consoleWindowLoadHandler();\n 5253:               consoleWindowLoaded = true;\n 5254                appendQueuedLoggingEvents();\n 5255              } catch(ex) {\n ....\n 5303              iframeSrc +\n 5304              \" scrolling='no'></iframe>\";\n 5305:           consoleClosed = false;\n 5306  \n 5307            //Write the console HTML to the iframe\n ....\n 5318              pollConsoleWindow(iframeDocumentExistsTest, 100, writeToDocument, initErrorMessage);\n 5319            }\n 5320:           consoleWindowCreated = true;\n 5321          };\n 5322  \n ....\n 5376            if(isSupported && !consoleClosed) {\n 5377              if(consoleWindowCreated && !consoleWindowLoaded && getConsoleWindow() && isLoaded(getConsoleWindow())) {\n 5378:               consoleWindowLoaded = true;\n 5379              }\n 5380              return consoleWindowLoaded;\n ....\n 5494            function finalInit() {\n 5495              getConsoleWindow().setCloseIfOpenerCloses(!useOldPopUp || !useDocumentWrite);\n 5496:             consoleWindowLoadHandler();\n 5497:             consoleWindowLoaded = true;\n 5498              appendQueuedLoggingEvents();\n 5499              pollConsoleWindow(\n ....\n 5507            try {\n 5508              popUp = window.open(getConsoleUrl(), windowName, windowProperties);\n 5509:             consoleClosed = false;\n 5510:             consoleWindowCreated = true;\n 5511              if(popUp && popUp.document) {\n 5512                if(useDocumentWrite && useOldPopUp && isLoaded(popUp)) {\n ....\n 5570              }\n 5571              if(!consoleWindowLoaded && isLoaded(popUp)) {\n 5572:               consoleWindowLoaded = true;\n 5573              }\n 5574            }\n\n/home/roman/Projects/plot-cv/lib/lexer.js:\n    4  Lexer.defunct = function(chr) {\n    5    const { loc, state } = this;\n    6: \n    7:   console.log('defunct', { loc, state });\n    8:   console.log('this.input.length', this.input.length);\n    9:   console.log('this.input', this.input.slice(0, 100));\n   10:   console.log('this.loc.file', Util.makeURL({ location: '/' + this.loc.file }));\n   11  \n   12    let line = [this.index - (loc.column - 1)];\n\n/home/roman/Projects/plot-cv/lib/hyphenate.js:\n  488      .map(word => hyphenator.hyphenate_word(word).join('-'))\n  489      .join(' ');\n  490:   console.log(resp);\n  491  };\n  492  \n\n/home/roman/Projects/plot-cv/lib/swipeTracker.js:\n  172      if(vec.x > 0) amount *= 0.1;\n  173      this.setState({ amount });\n  174:     console.log('Payment.handleSwipeDirection ', { event, direction, vec });\n  175    };\n  176  \n  ...\n  180        {\n  181          onSwipeStart(event) {\n  182:           console.log('swipestart: ', { event });\n  183            inst.end = null;\n  184            inst.start = null;\n\n/home/roman/Projects/plot-cv/lib/cpp.js:\n  125  \n  126      warn_func(s) {\n  127:       console.log(s);\n  128      },\n  129  \n  130      error_func(s) {\n  131:       console.log(s);\n  132        throw s;\n  133      },\n  ...\n  164    // generate a 3 tuple (command, arguments, code_block)\n  165    var block_re = new RegExp('^' + settings.signal_char + '[ \\t]*(\\\\w+)[ \\t]*(.*?)[ \\t]*$', 'm');\n  166:   console.log('block_re:', block_re);\n  167    // match identifiers according to 6.4.2.1, do not match 'defined',\n  168    // do not match quote strings either\n  ...\n  378  \n  379        function process_directive(command, elem, i) {\n  380:         console.log('process_directive', { command, elem, i });\n  381          switch (command) {\n  382            case 'define':\n\n/home/roman/Projects/plot-cv/lib/colorscheme.js:\n   48  \n   49        /* if(p == null)\n   50:     console.log(\"node: \", node.parentElement);\n   51  */\n   52        if(p == null) return path;\n   ..\n   63        node.cnode.innerHTML = newColor;\n   64        //console.log(knode);\n   65:       console.log(path + ': ', rgba, hsla);\n   66      });\n   67      const s = new XMLSerializer();\n\n/home/roman/Projects/plot-cv/lib/clipper-lib.js:\n 4242  \t\telse if(this.m_sinA < 0.00005 && this.m_sinA > -0.00005)\n 4243  {\n 4244: \t\t\tconsole.log(this.m_sinA);\n 4245        return k;\n 4246  }\n\n/home/roman/Projects/plot-cv/lib/tXml.js:\n  437    });\n  438    stream.on('end', () => {\n  439:     console.log('end');\n  440    });\n  441    return stream;\n  ...\n  494  \n  495  /*\n  496: console.clear();\n  497  tXml(d,'content');\n  498   //some testCode\n  ...\n  502  var end = new Date().getTime();\n  503  //console.log(JSON.toString(o,undefined,'\\t'));\n  504: console.log(\"MILLISECONDS\",end-start);\n  505  var nodeCount=document.querySelectorAll('*').length;\n  506: console.log('node count',nodeCount);\n  507: console.log(\"speed:\",(1000/(end-start))*nodeCount,'Nodes / second')\n  508  //console.log(JSON.toString(tXml('<html><head><title>testPage</title></head><body><h1>TestPage</h1><p>this is a <b>test</b>page</p></body></html>'),undefined,'\\t'));\n  509  var p = new DOMParser();\n  ...\n  512  var o2 = p.parseFromString(s2,'text/html').querySelector('#content')\n  513  var end2=new Date().getTime();\n  514: console.log(\"MILLISECONDS\",end2-start2);\n  515   //*/\n  516  \n\n/home/roman/Projects/plot-cv/lib/lazyInitializer.js:\n  126        },\n  127        set(target, key, value, receiver) {\n  128:         console.log(`setting ${key}!`);\n  129          Reflect.set(target, key, value, receiver);\n  130          return true;\n\n/home/roman/Projects/plot-cv/lib/cparse.js:\n  470        }\n  471      } while(read);\n  472: \n  473:     console.log('def.modifier:', def.modifier);\n  474  \n  475      for(var i = 0; i < typeNames.length; i++) {\n\n/home/roman/Projects/plot-cv/lib/events.js:\n  183  export const eventify = self => {\n  184    let methods = getMethods(EventEmitter.prototype);\n  185:   console.log(methods);\n  186  \n  187    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/lib/wru.js:\n  134              try {\n  135                // phantomjs or default fallback\n  136:               console.log(info);\n  137              } catch(up) {\n  138                // jsc and others\n  ...\n  416          throw new Error();\n  417        }\n  418:       console.log(obj);\n  419      } catch(o_O) {\n  420        log(obj, 0);\n\n/home/roman/Projects/plot-cv/lib/svg/overlay.js:\n  111    createPaths = () => {\n  112      const f = this.factory();\n  113: \n  114:     console.log(\"this.svg\", this.svg);\n  115  \n  116      if(typeof f == 'function')\n\n/home/roman/Projects/plot-cv/lib/svg/load.js:\n   32        const match = await (await this.instance).match(url);\n   33        if(match && match.ok) {\n   34:         console.log('CacheSVG hit ', { url, match });\n   35          return match.text();\n   36        }\n   ..\n   56  \n   57    if(!data) {\n   58:     console.log(`fetchSVG(${url})`);\n   59      data = await axios.get(url).then(response => response.data);\n   60      CacheSVG.put(url, data);\n\n/home/roman/Projects/plot-cv/lib/stream/utils.js:\n   24              data = '';\n   25            while((result = await reader.read())) {\n   26:             console.log('result:', result);\n   27              if(typeof result.value == 'string') data += result.value;\n   28              if(result.done) break;\n   ..\n   41      stream,\n   42      fn = async reader => {\n   43:       console.log('reader.read()', reader.read());\n   44      }\n   45    ) => {\n   ..\n  161        if(r == false) {\n  162          writable.once('drain', () => {\n  163:           console.log('drain');\n  164            push(write);\n  165          });\n  ...\n  180      let data = await iterator.next();\n  181      if(data.done) break;\n  182:     console.debug('value:', data.value);\n  183      write(data.value);\n  184    }\n  ...\n  205          let result;\n  206          while((result = await reader.read())) {\n  207:           console.log('result:', result);\n  208            if(typeof result.value == 'string') await push(result.value);\n  209            if(result.done) break;\n  ...\n  240            return;\n  241          }\n  242: \n  243:         console.log('value:', value);\n  244          this.push(value);\n  245        }\n  ...\n  296        highWaterMark: 512,\n  297        size(chunk) {\n  298:         console.log('size(chunk)', chunk);\n  299          return 16;\n  300        }\n  ...\n  319        return true;\n  320      }\n  321:     console.log('pull()', { desiredSize }, { pos, end: pos + s.length, s });\n  322    }\n  323  }\n  ...\n  543      transform(chunk, controller) {\n  544        chunk = tfn(chunk);\n  545:       console.log('chunk:', chunk);\n  546        controller.enqueue(chunk);\n  547      },\n\n/home/roman/Projects/plot-cv/lib/stream/transformStream.js:\n  437    }\n  438    if(!predicate) {\n  439:     console.log(`TransformStream internal logic error: assertion failed: s`);\n  440      throw new TransformStreamInternalLogicError(s);\n  441    }\n\n/home/roman/Projects/plot-cv/lib/stream/writableStream.js:\n   49        cb = cb || (r => this.emit('data', r > 0 && r < chunk.byteLength ? chunk.slice(0, r) : chunk));\n   50        /* const { pos, length, writing } =this;\n   51:     console.log('write:',  { pos, length, writing });*/\n   52  \n   53        if(this.writing) {\n\n/home/roman/Projects/plot-cv/lib/net/websocket-reconnect.js:\n   52      // implement your server response handling here\n   53      socket.onmessage = function(msg) {\n   54:       console.log(msg);\n   55      };\n   56  \n   57      socket.onclose = function(e) {\n   58:       console.log('socket closed', e);\n   59      };\n   60  \n   61      socket.onerror = function(error) {\n   62:       console.log('socket error', error);\n   63      };\n   64    };\n\n/home/roman/Projects/plot-cv/lib/geom/polyline.js:\n   48    toSVG(factory, attrs = { stroke: '#000', fill: 'none' }, parent = null, prec) {\n   49      if(!factory) factory = createFactory(document.body);\n   50:     console.log('Polyline.toSVG', factory);\n   51  \n   52      return factory(\n\n/home/roman/Projects/plot-cv/lib/geom/lineList.js:\n  172        this[0][p] ? p : a\n  173      );\n  174:     console.log('inspectFn:', toString);\n  175      //   return Util.inspect(this, { ...opts, toString });\n  176      return `${c.text('LineList', 1, 31)}${c.text('(', 1, 36)}${\n\n/home/roman/Projects/plot-cv/lib/geom/size.js:\n  237  \n  238    // const [  p = ['width', 'height']  ] = args[0] instanceof Size ? args : [new Size(), ...args];\n  239:   console.debug('Size.bind', { args, o, t, p, gen });\n  240    const { width, height } = Util.isArray(p) ? p.reduce((acc, name) => ({ ...acc, [name]: name }), {}) : p;\n  241    return Util.bindProperties(new Size(0, 0), t, { width, height }, gen);\n\n/home/roman/Projects/plot-cv/lib/geom/voronoi.js:\n 1193    //Debugging helper\n 1194    dumpBeachline(y) {\n 1195:     console.log('Voronoi.dumpBeachline(%f) > Beachsections, from left to right:', y);\n 1196      if(!this.beachline) {\n 1197:       console.log('  None');\n 1198      } else {\n 1199        let bs = this.beachline.getFirst(this.beachline.root);\n 1200        while(bs) {\n 1201:         console.log(\n 1202            '  site %d: xl: %f, xr: %f',\n 1203            bs.site.voronoiId,\n\n/home/roman/Projects/plot-cv/lib/geom/point.js:\n   59  \n   60  Point.getOther = args => (\n   61:   console.debug('getOther', ...args), typeof args[0] == 'number' ? [{ x: args[0], y: args[1] }] : args\n   62  );\n   63  \n\n/home/roman/Projects/plot-cv/lib/geom/rect.js:\n  322    const { x, y, width, height } = this;\n  323    if(!factory) factory = SVG.factory(document.body);\n  324: \n  325:   console.log('Rect.toSVG', factory);\n  326  \n  327    return factory('rect', { ...attrs, x, y, width, height }, parent, prec);\n\n/home/roman/Projects/plot-cv/lib/color/rgba.js:\n  508  };\n  509  RGBA.prototype.dump = function(...args) {\n  510:   console.log(...this.toConsole(...args));\n  511  };\n  512  \n\n/home/roman/Projects/plot-cv/lib/color/coloredText.js:\n  113    output() {\n  114      const a = this[Symbol.for('nodejs.util.inspect.custom')]();\n  115:     console.log(...a);\n  116    }\n  117  \n\n/home/roman/Projects/plot-cv/lib/debug/console-history.js:\n   17  \n   18  /* Store the original log functions. */\n   19: console._log = console.log;\n   20: console._info = console.info;\n   21: console._warn = console.warn;\n   22: console._error = console.error;\n   23: console._debug = console.debug;\n   24  \n   25  /* Declare our console history variable. */\n   26: console.history = [];\n   27  \n   28  /* Redirect all calls to the collector. */\n   29: console.log = function() {\n   30    return console._intercept('log', arguments);\n   31  };\n   32: console.info = function() {\n   33    return console._intercept('info', arguments);\n   34  };\n   35: console.warn = function() {\n   36    return console._intercept('warn', arguments);\n   37  };\n   38: console.error = function() {\n   39    return console._intercept('error', arguments);\n   40  };\n   41: console.debug = function() {\n   42    return console._intercept('debug', arguments);\n   43  };\n   44  \n   45  /* Give the developer the ability to intercept the message before letting\n   46:    console-history access it. */\n   47: console._intercept = function(type, args) {\n   48    //Your own code can go here, but the preferred method is to override this\n   49    //function in your own script, and add the line below to the end or\n   50    //begin of your own 'console._intercept' function.\n   51    //REMEMBER: Use only underscore console commands inside _intercept!\n   52:   console._collect(type, args);\n   53  };\n   54  \n   55  /* Define the main log catcher. */\n   56: console._collect = function(type, args) {\n   57    //WARNING: When debugging this function, DO NOT call a modified console.log\n   58    //function, all hell will break loose.\n   ..\n   80    //Act normal, and just pass all original arguments to\n   81    //the origial console function :)\n   82:   console['_' + type].apply(console, args);\n   83  \n   84    //Get stack trace information. By throwing an error, we get access to\n   ..\n  105  \n  106    //Add the log to our history.\n  107:   console.history.push({ type, timestamp: time, arguments: args, stack });\n  108  };\n  109  \n\n/home/roman/Projects/plot-cv/lib/grammars/wrapper.js:\n   19  \n   20    if(child.length > 0) {\n   21:     console.log('');\n   22:     console.log(child);\n   23      return {\n   24        child,\n\n/home/roman/Projects/plot-cv/lib/grammars/Lexer.js:\n  367      process.stdout.write(this.text);\n  368    } else {\n  369:     console.log(this.text);\n  370    }\n  371  };\n  ...\n  624   */\n  625  Lexer.prototype.logAccept = function(state, expression, value) {\n  626:   console.log(\n  627      ' - [' +\n  628        state +\n\n/home/roman/Projects/plot-cv/lib/eagle/document.js:\n  246      fs = fs || this.fs || globalThis.fs;\n  247      fs.writeFileSync(file+'.json', JSON.stringify(this.raw,null,2), true);\n  248: \n  249:     console.log('Saving', file, 'data: ',Util.abbreviate(data));\n  250      let ret = fs.writeFileSync(file, data, overwrite);\n  251    //  console.log('ret',ret);\n  ...\n  274  \n  275    lookup(xpath) {\n  276:     console.log('EagleDocument.lookup(', xpath, Util.className(xpath), ')');\n  277  \n  278      let doc = this;\n\n/home/roman/Projects/plot-cv/lib/eagle/node.js:\n  427      //console.log('EagleNode.lookup(', xpath, ',', t + '', ')');\n  428      /* if(!(xpath instanceof ImmutableXPath)) */ xpath = new ImmutableXPath(xpath);\n  429:     console.log('EagleNode.lookup(', xpath, ',', t + '', ')');\n  430  \n  431      let path = new Pointer([...xpath.toPointer(this.raw)]); //[...xpath]);\n\n/home/roman/Projects/plot-cv/lib/eagle/project.js:\n   35        if(fs.existsSync(dir)) libraryPath.push(dir);\n   36        this.libraryPath = libraryPath;\n   37:       console.log('loadFile', file, this.basename);\n   38        if(fs.existsSync(file)) this.lazyOpen(file);\n   39        /*else*/ this.load();\n   ..\n   91     */\n   92    open(file) {\n   93:     console.log('EagleProject.open', file);\n   94      let doc, err;\n   95  \n   ..\n  100      } catch(error) {\n  101        err = error;\n  102:       console.log('ERROR:', err);\n  103      }\n  104      if(doc) {\n  105:       console.log('Opened document', file);\n  106        this.filenames.push(file);\n  107        this.list[path.basename(file)] = doc;\n  ...\n  109      if(doc.type == 'lbr') {\n  110        this.data[doc.type][doc.basename] = doc;\n  111:       console.log('Opened library:', doc.basename);\n  112      } else this.data[doc.type] = doc;\n  113      this.failed = !doc;\n  ...\n  289            numUpdated++;\n  290          }\n  291:         console.log('update', { destDoc, destLib, entity, numUpdated });\n  292          //console.log('dstMap.ref:', dump(dstMap.ref, 2));\n  293          //console.log('dstMap.raw:', dump(dstMap.raw, 2));\n  ...\n  334  \n  335        return Promise.all(promises).then(result => {\n  336:         console.log('result:', result);\n  337          resolve(Object.fromEntries(result));\n  338        });\n\n/home/roman/Projects/plot-cv/lib/eagle/components.js:\n   56  \n   57    if(!comp && name != prevName) {\n   58:     console.debug(`Not rendering component '${name}'`);\n   59      prevName = name;\n   60    }\n\n/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js:\n   50  \n   51      if('raw' in value) value = value.raw;\n   52:     console.log('write map property:', idx, value);\n   53  \n   54      if(idx != -1) list[idx] = value;\n\n/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js:\n  146  \n  147      const { tPlace } = this.layers;\n  148:     console.log('BoardRenderer.renderCollection', coll);\n  149      for(let item of coll) {\n  150        if(item.tagName === 'wire') {\n  ...\n  286        parent\n  287      );\n  288:     console.log('BoardRenderer.renderElement', { name, value });\n  289  \n  290      if(/^[RLC][0-9]/.test(name) /*&& (!element.pads || element.pads.length == 2)*/) {\n\n/home/roman/Projects/plot-cv/lib/eagle/renderer.js:\n   27  \n   28    setDebug(debug);\n   29:   console.log('DEBUG:', DEBUG);\n   30:   console.log('log:', log);\n   31    /*  Renderer.debug = ret.debug = debug\n   32      ? (...args) => console.log(Util.getCallers(2)[0].toString(false, { stripUrl: true }) + '\\n', ...args)\n\n/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js:\n  268      }\n  269    };\n  270:   console.debug(`CalculateArc`, arc);\n  271    return arc;\n  272  };\n  ...\n  333  \n  334    if(debug) {\n  335:     console.debug(`LinesToPath`, { lines, lineFn }, Util.getCallerStack());\n  336    }\n  337  \n\n/home/roman/Projects/plot-cv/lib/eagle/element.js:\n  598        if(measures.length >= 4) {\n  599          bb.update(measures);\n  600:         console.log('bb', bb);\n  601          return bb;\n  602        }\n  ...\n  620        const libName = raw.attributes.library;\n  621        let library = document.getLibrary(libName);\n  622:       console.log(Util.className(this) + '.getBounds', path + '', `<${this.tagName}>`, { libName, library });\n  623        let pkg = library.packages[raw.attributes.package];\n  624        bb = pkg.getBounds();\n\n/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js:\n  170    render(doc = this.doc, parent, props = {}, sheetNo = 0) {\n  171      //console.log('doc:', doc);\n  172:     console.log('SchematicRenderer.render', { doc, parent, props, sheetNo });\n  173  \n  174      /*   const sheetsElem = Util.isObject(doc) && doc.find && doc.find('sheets');\n  ...\n  178  \n  179      let sheet = doc.sheets[sheetNo];\n  180:     console.log('sheet', sheet);\n  181:     console.log('sheetNo', sheetNo);\n  182      //console.log('doc', doc, Util.className(doc));\n  183  \n\n/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js:\n   48          else if(!Util.isObject(path) || !(path instanceof ImmutableXPath)) path = new ImmutableXPath(path);\n   49          /*        let ref=new EagleReference(doc,path);*/\n   50:         console.log('EagleSVGRenderer.create', { path /*,ref*/ });\n   51          //      let pathStr = path.replace(/\\.?children/g, '/');\n   52          try {\n   ..\n  440  \n  441    render(obj, props = {}, children = []) {\n  442:     console.log('EagleSVGRenderer.render', { obj, props, children });\n  443      let doc = obj.document || this.doc;\n  444      this.debug('EagleSVGRenderer.render', { doc });\n  ...\n  461  \n  462      const { width, height } = (this.size = rect.size.toCSS('mm'));\n  463:     console.log('EagleSVGRenderer', { bounds, width, height });\n  464  \n  465      this.debug('SVGRenderer.render', { transform, index });\n\n/home/roman/Projects/plot-cv/lib/eagle/nodeList.js:\n   71        cond = (child, i, list) => i === num;\n   72      }\n   73:     console.log('cond:', cond);\n   74      for(let i = raw.length - 1; i >= 0; i--) if(pred(raw[i], i, this) && cond(raw[i], i, this)) raw.splice(i, 1);\n   75  \n\n/home/roman/Projects/plot-cv/lib/dom/hsla.js:\n  165  };\n  166  HSLA.prototype.dump = function() {\n  167:   console.log(`[%c    %c]`, `background: ${this.toString()};`, `background: none`, this);\n  168    return this;\n  169  };\n\n/home/roman/Projects/plot-cv/lib/dom/preactContext.js:\n   98              let r = getRenderer(this.props);\n   99              if(render && render !== r) {\n  100:               console.warn('Both children and a render function are defined. Children will be used');\n  101              }\n  102              if(typeof r === 'function') {\n  103                return r(this.state.value);\n  104              }\n  105:             console.warn(\"Consumer is expecting a function as one and only child but didn't find any\");\n  106            };\n  107            Consumer.prototype._getEmitter = function() {\n  ...\n  150        let noopEmitter = {\n  151          register(_) {\n  152:           console.warn('Consumer used without a Provider');\n  153          },\n  154          unregister(_) {},\n\n/home/roman/Projects/plot-cv/lib/dom/svg.js:\n   64  \n   65      const { width, height } = size || {};\n   66:     console.log('factory', { delegate, parent, size, args });\n   67  \n   68      if(typeof parent == 'function') {\n   ..\n  142        let p = parent || delegate.root;\n  143        window.p = p;\n  144:       console.log('p:', p, ' p.firstChild:', p.firstChild, ' p.firstElementChild:', p.firstElementChild);\n  145        while(p.firstElementChild) p.removeChild(p.firstElementChild);\n  146        return this;\n  ...\n  153      let fn = screen ? 'getScreenCTM' : 'getCTM';\n  154      let ctm = e[fn]();\n  155:     console.log('ctm:', ctm);\n  156      if(e && e[fn]) return new Matrix(ctm);\n  157      return null;\n  ...\n  284          for(let i = 0; i < this.list.length; i++) {\n  285            const { color, elements } = this.list[i];\n  286:           console.log(`${i}: %c    %c ${color}`, `background: ${color};`, `background: none`);\n  287          }\n  288          return this;\n  ...\n  382      }\n  383      pos = i => (i * len) / (numPoints - 1);\n  384: \n  385:     console.log(`len:`, len);\n  386:     console.log(`numPoints:`, numPoints);\n  387:     console.log(`step:`, step);\n  388      let p,\n  389        y,\n\n/home/roman/Projects/plot-cv/lib/dom/css.js:\n   63        if(ret) ret = ret.stylesheet;\n   64      }\n   65: \n   66:     console.log('ret:', ret);\n   67  \n   68      /*\n\n/home/roman/Projects/plot-cv/lib/dom/preactComponent.js:\n   73      if(children)\n   74        children = children.map(c => {\n   75:         console.log('child:', c, ReactComponent.isComponent(c));\n   76          if(!ReactComponent.isComponent(c)) c = ReactComponent.create(...c);\n   77          return c;\n   78        });\n   79:     console.log('children:', children);\n   80  \n   81      const elem = h(Tag, props, children);\n   ..\n  216      const { quote = \"'\" } = opts;\n  217      const { type, props: allProps } = obj;\n  218:     console.log('allProps:', allProps);\n  219      let { children, ...props } = allProps || {};\n  220  \n\n/home/roman/Projects/plot-cv/lib/dom/element.js:\n   89  \n   90      if(parent && parent.appendChild) parent.appendChild(e);\n   91:     console.log('Element.create ', (window.e = e));\n   92      return e;\n   93    }\n   ..\n  460  \n  461    static position(element, edges = ['left', 'top']) {\n  462:     console.log('Element.position ', { element, edges });\n  463      const rect = Element.rect(element);\n  464      if(rect) {\n  ...\n  501      }*/\n  502      let css = Point.toCSS(current, 1, edges);\n  503:     console.log('Element.move: ', { position, to, css, off, current, edges });\n  504      //console.log('move newpos: ', Point.toCSS(pt));\n  505      Element.setCSS(element, { ...css, position });\n  ...\n 1078            ok = w.d.execCommand('copy');\n 1079          } catch(err) {\n 1080:           console.log('error', err);\n 1081          }\n 1082          s.removeAllRanges();\n\n/home/roman/Projects/plot-cv/lib/dom/event.js:\n   30  \n   31      //Object.assign(event, {ctrlKey,shiftKey,altKey,metaKey});\n   32: \n   33:     console.log('event:', event);\n   34      target.dispatchEvent(event);\n   35      return event;\n\n/home/roman/Projects/plot-cv/lib/async/timer.js:\n   30    stream = map(stream, n => n * n);\n   31    for await(let n of stream) {\n   32:     console.log(n);\n   33    }\n   34  };\n\n/home/roman/Projects/plot-cv/lib/async/debounce.js:\n   45  /* global setTimeout, clearTimeout */\n   46  export function debounceAsync(fn, wait = 0, options = {}) {\n   47:   console.debug(`debounceAsync invoked`, { fn, wait, options });\n   48    let lastCallAt;\n   49    let deferred;\n   ..\n   51    let pendingArgs = [];\n   52    const callFn = (thisObj, args) => {\n   53:     console.debug(`debounceAsync calling`, {\n   54        lastCallAt,\n   55        deferred,\n   ..\n   65      const currentTime = new Date().getTime();\n   66      const isCold = !lastCallAt || currentTime - lastCallAt > currentWait;\n   67:     console.debug(`debounceAsync handler`, {\n   68        lastCallAt,\n   69        currentWait,\n\n/home/roman/Projects/plot-cv/lib/async/websocket.js:\n   20    let ws = new WebSocket('ws://localhost:3000/');\n   21    for await(let message of ws) {\n   22:     console.log(message);\n   23    }\n   24  };\n\n/home/roman/Projects/plot-cv/lib/draw/colorMap.js:\n   22  \n   23          if(typeof item == 'string') {\n   24:           console.log(type);\n   25            item = type.fromString(item);\n   26          } else if(!(color instanceof type) && type === HSLA && Util.isObject(item) && typeof item.toHSLA == 'function')\n\n/home/roman/Projects/plot-cv/lib/upload/RUG.js:\n  140        let { url, error, photo } = typeof source === 'function' ? await source(response) : response;\n  141        if(!url && photo && photo.src) url = photo.src;\n  142:       console.log('RUG.onSuccess ', {\n  143          uid,\n  144          url,\n  ...\n  357  \n  358        default:\n  359:         console.log('RUG.showChildren:', children);\n  360          return View(\n  361            {\n\n/home/roman/Projects/plot-cv/lib/upload/react-sortable-hoc/src/utils.js:\n    9      if (typeof console !== 'undefined') {\n   10        // eslint-disable-next-line no-console\n   11:       console.warn(\n   12          \"Deprecation warning: arrayMove will no longer be exported by 'react-sortable-hoc' in the next major release. Please install the `array-move` package locally instead. https://www.npmjs.com/package/array-move\",\n   13        );\n\n/home/roman/Projects/plot-cv/lib/json/path.js:\n  103      if(Util.isObject(attr_or_index)) return { tagName, attributes: attr_or_index };\n  104      let cmd = `e => e.${tagField} === '${tagName}'`;\n  105:     console.log('typeof(tagName):', typeof tagName);\n  106      let ret = eval(cmd);\n  107:     console.log('matchObj:', cmd, ret);\n  108      return ret;\n  109    }\n\n/home/roman/Projects/plot-cv/lib/bpg/bpgdec.js:\n  100      if(typeof print !== 'undefined') {\n  101        if(typeof console === 'undefined') console = {};\n  102:       console.log = print;\n  103:       console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;\n  104      }\n  105    } else if(ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  ...\n  550        img = this.bpg_decoder_open();\n  551        if(this.bpg_decoder_decode(img, array, array.length) < 0) {\n  552:         console.log('could not decode image');\n  553          return;\n  554        }\n\n/home/roman/Projects/plot-cv/lib/bpg/bpgdec8a.js:\n  100      if(typeof print !== 'undefined') {\n  101        if(typeof console === 'undefined') console = {};\n  102:       console.log = print;\n  103:       console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;\n  104      }\n  105    } else if(ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  ...\n  550        img = this.bpg_decoder_open();\n  551        if(this.bpg_decoder_decode(img, array, array.length) < 0) {\n  552:         console.log('could not decode image');\n  553          return;\n  554        }\n\n/home/roman/Projects/plot-cv/lib/bpg/bpgdec8.js:\n  100      if(typeof print !== 'undefined') {\n  101        if(typeof console === 'undefined') console = {};\n  102:       console.log = print;\n  103:       console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;\n  104      }\n  105    } else if(ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  ...\n  550        img = this.bpg_decoder_open();\n  551        if(this.bpg_decoder_decode(img, array, array.length) < 0) {\n  552:         console.log('could not decode image');\n  553          return;\n  554        }\n\n/home/roman/Projects/plot-cv/lib/hooks/useGesture.js:\n 1835          event.preventDefault();\n 1836        } else if(process.env.NODE_ENV === 'development') {\n 1837:         console.warn(\n 1838            'To support zoom on trackpads, try using the `domTarget` option and `config.event.passive` set to `false`. This message will only appear in development mode.'\n 1839          );\n\n/home/roman/Projects/plot-cv/lib/hooks/useFetch.js:\n    7        .then(\n    8          cb /*|| async response => {\n    9:        console.log('response', await response.text());\n   10:        console.log('response', response.json);\n   11          return response.json();\n   12        }*/\n\n/home/roman/Projects/plot-cv/lib/hooks/useGenerator.js:\n   31          } catch(err) {\n   32            /* eslint-disable */\n   33:           console.error(`useGenerator - unhandled error: ${err.message}`);\n   34            /* eslint-enable */\n   35            return;\n\n/home/roman/Projects/plot-cv/lib/parse/grammar.js:\n   54          invert ? '~' : ''\n   55        }[ ${this.map(n => {\n   56:        console.log(\"n:\", n);\n   57           \n   58  return [...n];\n   ..\n   81      );\n   82      if(operators.size == 0) return [this];\n   83:     console.log('Match operators:', operators, [...this]);\n   84      let n = Math.pow(2, operators.size);\n   85      let r = [];\n   ..\n  103            continue;\n  104          }\n  105:         console.log(`part.args ${i & flag}:`, part.args);\n  106          match.splice(match.length, 0, ...part.args);\n  107        }\n  108:       console.log(`Match combinations [${i}]:`, match);\n  109        r.push(match);\n  110      }\n  111:     console.log('Match combinations:', r);\n  112      return r;\n  113    }\n  ...\n  122        return rule.toCowbird(accu, false);\n  123      });\n  124:     console.log('matches:', matches);\n  125      return matches.join(' ');\n  126    }\n  ...\n  161  \n  162          args = args.map(arg => (arg instanceof Array && arg.length == 1 ? arg[0] : arg));\n  163: \n  164:         console.log('args:', args, args.map(Util.toPlainObject));\n  165          let rule = Rule.from(args, grammar);\n  166  \n  ...\n  375        symbols = symbols.slice(0, -1);\n  376        this.skip = true;\n  377:       console.log('SKIP!');\n  378      }\n  379  \n  ...\n  605        let matches = this.parseRule(':', ';', str);\n  606        rule = this.addRule(str, matches, fragment);\n  607:       console.log('rule', rule);\n  608        matches.forEach(m => Util.define(m, { rule }));\n  609      }\n\n/home/roman/Projects/plot-cv/lib/parse/metaParserGenerator.js:\n  319      if(err) {\n  320        // eslint-disable-next-line no-console\n  321:       console.log(err);\n  322      }\n  323    });\n\n/home/roman/Projects/plot-cv/lib/parse/cowbird.js:\n   79  \n   80  export function Grammar(grammar, sT, debug) {\n   81:   console.log('Grammar', { grammar, sT, debug });\n   82    try {\n   83      // If we have valid input then proceed to the construct phase.\n   ..\n  200      // Construct productions for the augmented grammar.\n  201      function buildProductions(lhs) {\n  202:       console.log('buildProductions', { lhs });\n  203        if(grammar[lhs] !== void 0) {\n  204          augmentedGrammar[lhs] = buildAlternates(lhs, grammar[lhs]);\n  205        } else {\n  206:         console.error('buildProductions', lhs);\n  207          throw new Error(`buildProductions(${lhs})`);\n  208          throw [0x10, lhs];\n  ...\n  281  \n  282      // Build the grammar's productions recursively\n  283:     console.log('check', this.sT, this.aST);\n  284      buildProductions(this.aST);\n  285:     console.log('check');\n  286  \n  287      // Sort the tokens by their usage metrics\n\n/home/roman/Projects/plot-cv/lib/parse/pattern.js:\n   13      ret.str = str;\n   14    } else if(lexIsToken('IDENTIFIER', r)) {\n   15:     console.log('Pattern ', Lexer.tokenName(r.tok), r.str);\n   16  \n   17      ret.rule = str;\n\n/home/roman/Projects/plot-cv/lib/parse/lexer.js:\n   42        if(ret === -1) break;\n   43        if(s.endsWith('\\\\\\\\')) {\n   44:         console.log('lexer.source.substring', lexer.source.substring(lexer.pos - 1, lexer.pos + 1));\n   45          lexer.skip();\n   46          continue;\n   ..\n  242        if(lexer.start < lexer.pos) return Lexer.tokens.WHITESPACE;\n  243        if(!(lexer.start < lexer.pos)) {\n  244:         console.log(\n  245            `ERROR file=${lexer.file} pos=${lexer.line}:${lexer.column} start=${lexer.start} pos=${lexer.pos} len=${\n  246              lexer.len\n  ...\n  269  \n  270      const { pos, start } = this;\n  271:     console.log('Lexer.constructor', { file, pos, start, tokIndex, len });\n  272    }\n  273  \n  ...\n  378  \n  379        /*console.log('retvals:', retvals);\n  380:       console.log('posisionts:', positions);*/\n  381  \n  382        return result(tok, null, true);\n\n/home/roman/Projects/plot-cv/lib/parse/ebnf2.js:\n   42    let spaces = '';\n   43    for(var i = 0; i < indent; i++) spaces = spaces + ' ';\n   44: \n   45:   console.log(spaces + '{');\n   46:   console.log(spaces + '   type: ' + this.type + ' start: ' + this.start + ' end: ' + this.end);\n   47:   console.log(spaces + '  value: ' + this.value());\n   48:   console.log(spaces + '  children:');\n   49    for(var i = 0; i < this.children.length; i++) {\n   50      this.children[i].print(indent + 2);\n   51    }\n   52:   console.log(spaces + '}');\n   53  };\n   54  \n   ..\n   80  ParseState.prototype.parseNode = function(type) {\n   81    if(this.ruleStart == this.offset) {\n   82:     console.log(\n   83        'parseNode: type=' + type + ' ruleStart=' + this.ruleStart + ' start=' + this.start + ' offset=' + this.offset\n   84      );\n   ..\n  519        pstate.advance(prule.nodeLength());\n  520        pstate.nextToken();\n  521:       console.log('pstate: ruleStart=' + pstate.ruleStart + ' start=' + pstate.start + ' offset=' + pstate.offset);\n  522      }\n  523    } while(prule != null);\n  ...\n  549  \n  550  var inputFile = process.argv[2];\n  551: console.log(process.argv[1] + ': inputFile=' + inputFile);\n  552  var buffer = fs.readFileSync(inputFile, 'utf8');\n  553  var parser = new Parser(buffer);\n  ...\n  559    process.exit(0);\n  560  } else {\n  561:   console.log('incomplete parse: lineNumber=' + parser.state.lineNumber + ' input=' + parser.state.buffer.substring(parser.state.offset, parser.state.offset + 50));\n  562    process.exit(-1);\n  563  }*/\n\n/home/roman/Projects/plot-cv/lib/parse/rule.js:\n   49        const production = this[i];\n   50        if(production.match(y)) {\n   51:         console.log('production:', production);\n   52  \n   53          r = i;\n\n/home/roman/Projects/plot-cv/lib/parse/parser.js:\n   73        parser.tokens = add(parser.tokens, parser.token);\n   74        if(tokIndex > parser.prevTok)\n   75:         console.log(`Parser.getTok ${parser.position} (${parser.tokens.length - 1})`, parser.token);\n   76        return Util.define({ ...parser.token }, { unget });\n   77      }\n\n/home/roman/Projects/plot-cv/lib/parse/match.js:\n   55      let values = [...grammar.rules.values()];\n   56      let ri = values.indexOf(rule);\n   57:     console.log('rule:', ri);\n   58      let p = parser.clone();\n   59      for(let pattern of this) {\n   60        if(grammar.rules.has(pattern)) {\n   61          let ruleName = pattern;\n   62:         console.log('rule:', ruleName);\n   63          let stack = Util.getCallerStack();\n   64:         console.log('stack:', stack.length);\n   65        }\n   66        if(!pattern) continue;\n   ..\n   69          break;\n   70        }\n   71:       console.log('Match.match: ', this, { pattern, p });\n   72        ret.push(pattern);\n   73        p.copyTo(parser);\n\n/home/roman/Projects/plot-cv/lib/gcode/gcodeToObject.js:\n  114  \n  115  export function* parseGcode(data) {\n  116:   console.debug('parseGcode', { data });\n  117    if(typeof data == 'string') data = data.split(/\\n/g);\n  118  \n\n/home/roman/Projects/plot-cv/lib/gcode/interp.js:\n   65    if(interp) {\n   66      interp.call(thisObj, prevState, nextState, command, args);\n   67: \n   68:     console.log(`#${i}: cmd:`, command, ' args:', args, ' prevState:', prevState, ' nextState:', nextState);\n   69    } else {\n   70:     console.error('Unrecognized gcode:', command, args);\n   71  \n   72      throw new Error('Unrecognized GCode ' + line);\n\n/home/roman/Projects/plot-cv/lib/gcode/interpreter.js:\n  130        func(args);\n  131      } else {\n  132:       console.debug('not handler for', { cmd, args });\n  133      }\n  134    }\n\n/home/roman/Projects/plot-cv/lib/gcode/parser.js:\n  176  \n  177      (async s => {\n  178:       console.debug('waitFor 50');\n  179        await Util.waitFor(500);\n  180:       console.debug('pipe GCodeLineStream');\n  181        s = s.pipeThrough(new GCodeLineStream(options));\n  182  \n\n/home/roman/Projects/plot-cv/lib/gcode/gcode-interp.js:\n   73  }\n   74  function G04(prevState, nextState, command, args) {\n   75:   console.info('Pause / Dwell for Precise CNC Timing', { command, args });\n   76  }\n   77  \n   ..\n   79    // Milling: Absolute programming\n   80    // else: Fixed cycle, simple cycle, for roughing (Z-axis emphasis)\n   81:   console.info('Absolute programming /  Fixed cycle, simple cycle, for roughing (Z-axis emphasis)');\n   82:   console.log(`#${this.i}: cmd:`, command, ' args:', args, ' prevState:', prevState, ' nextState:', nextState);\n   83  }\n   84  \n   85  function G91(prevState, nextState, command, args) {\n   86:   console.info('relative positioning is not implemented');\n   87  }\n   88  \n   89  function G90_1(prevState, nextState, command, args) {\n   90:   console.info('Arc IJK absolute mode');\n   91  \n   92    if(prevState.arc !== command) nextState.arc = command;\n   93  }\n   94  function G91_1(prevState, nextState, command, args) {\n   95:   console.info('Arc IJK incremental  mode');\n   96  \n   97    if(prevState.arc !== command) nextState.arc = command;\n   ..\n   99  \n  100  function G94(prevState, nextState, command, args) {\n  101:   console.info('units per minute', { command, args });\n  102  }\n  103  \n  104  function G20(prevState, nextState, command, args) {\n  105:   console.info('use inches', { command, args });\n  106  }\n  107  \n  108  function noop(prevState, nextState, command, args) {\n  109    nextState.implemented = false;\n  110:   console.warn('Unimplemented GCode: ', command);\n  111  }\n  112  \n  ...\n  116  function M3(prevState, nextState, command, args, i) {\n  117    if(prevState.spindle !== command) nextState.spindle = command;\n  118:   console.log(\n  119      `#${this.i}: cmd:`,\n  120      command,\n  ...\n  134    // M6: Tool Change\n  135    let tool = args[0] || command;\n  136: \n  137:   console.warn('Tool change ', tool);\n  138    if(prevState.tool !== tool) nextState.tool = tool;\n  139  }\n\n/home/roman/Projects/plot-cv/lib/ecmascript/environment.js:\n  294      const { identifiers, source } = node;\n  295      let ids = identifiers.declarations.map(identifier => identifier.id.value);\n  296:     console.log('ImportDeclaration:', ids);\n  297      let importFile = source.value;\n  298      return function() {\n  299        let ret = self.getVariableStore(node.value)[node.value];\n  300:       console.log('Import:', importFile);\n  301  \n  302        if(/*false &&*/ !ret)\n  303          ret = import(importFile)\n  304            .then(handle => {\n  305:             console.log('handle:', handle);\n  306              return handle;\n  307            })\n\n/home/roman/Projects/plot-cv/lib/ecmascript/interpreter.js:\n  131    pushScope() {\n  132      this.scope = new Scope(this.scope);\n  133:     console.log(`pushScope(${Scope.depth(this.scope)})`);\n  134    }\n  135  \n  136    popScope() {\n  137:     console.log(`popScope (${Scope.depth(this.scope)})`);\n  138      this.scope = this.scope.parent;\n  139    }\n  ...\n  163          args = args.map(a => Util.className(a));\n  164          if(node instanceof ESNode) {\n  165:           console.log('node:', ESNode.assoc(node).position.toString());\n  166          }\n  167          throw new Error(`Non-existent eval${name}(${args})`);\n  ...\n  175      a = a.concat(['\\nret:', ret]);\n  176      a = a.concat(['\\n']);\n  177:     console.log(...a);\n  178      return ret;\n  179    }\n  ...\n  193  \n  194      obj.data = right || assignment_expression.right;\n  195: \n  196:     console.log('eval: AssignmentExpression:', assignment_expression, {\n  197        left,\n  198        operator,\n  ...\n  207    evalClassDeclaration(class_declaration) {\n  208      const { id, extending, members } = class_declaration;\n  209:     console.log('class_declaration:', { id, extending, members });\n  210      let fn = this.scope.newValue(id, ECMAScriptValue.types.function);\n  211      let obj = this.scope.newValue(id, ECMAScriptValue.types.object);\n  ...\n  213      for(let member of members) {\n  214        let prop = this.evalNode(member);\n  215:       console.log('member:', prop);\n  216      }\n  217      fn.data = class_declaration;\n  ...\n  248      if(id) {\n  249        this.scope.setValue(id, fn);\n  250:       console.log('scope:', this.scope);\n  251      }\n  252  \n  ...\n  263      if(id) {\n  264        this.scope.setValue(id, fn);\n  265:       console.log('scope:', this.scope);\n  266      }\n  267  \n  ...\n  270  \n  271    evalImportDeclaration(import_statement) {\n  272:     console.log('import_statement:', import_statement);\n  273    }\n  274  \n  ...\n  310  \n  311      let decls = declarations.map(node => this.evalNode(node));\n  312: \n  313:     console.log('eval: VariableDeclaration', decls);\n  314      return decls;\n  315    }\n  ...\n  323  \n  324    run(ast) {\n  325:     console.log('ast:', ast);\n  326      return this.evalNode(ast);\n  327    }\n  ...\n  332      fn = this.evalNode(fn);\n  333      let r = Scope.find(this.scope, fn);\n  334:     console.log('eval: CallExpression:', { args, fn, r });\n  335    }\n  336  \n  ...\n  357      fn = this.evalNode(fn);\n  358      let r = Scope.find(this.scope, fn);\n  359:     console.log('eval: NewExpression:', { args, fn, r });\n  360    }\n  361  \n  ...\n  365      for(let member of members) {\n  366        let prop = this.evalNode(member);\n  367:       console.log('member:', prop);\n  368      }\n  369      return obj;\n  ...\n  377      for(let element of elements) {\n  378        let prop = this.evalNode(element);\n  379:       console.log('eval: ArrayExpression:', { prop, arr, r });\n  380        r.push(prop);\n  381      }\n  ...\n  386    evalForInStatement(for_in_statement) {\n  387      const { left, right, body, operator } = for_in_statement;\n  388:     console.log('eval: ForInStatement:', for_in_statement);\n  389    }\n  390  \n\n/home/roman/Projects/plot-cv/lib/ecmascript/parser.js:\n   62    error(errorMessage, astNode) {\n   63      const pos = this.position();\n   64:     console.error('error: ' + errorMessage);\n   65  \n   66      return new SyntaxError(pos.toString() + ': parse ' + errorMessage /*, astNode, pos*/);\n   ..\n  131  \n  132      /*    console.log(\"tokens:\", tokens);\n  133:     console.log(\"lexer.position:\", this.lexer.position);*/\n  134  \n  135      if(tokens[0].position) {\n  ...\n  249  \n  250      const posstr = this.prefix + String(this.pos);\n  251:     console.log.apply(console, [\n  252        posstr + Util.pad(posstr, this.prefix.length + 8),\n  253        name + Util.pad(name, width),\n  ...\n  266      let node = new ctor(...args);\n  267      /*let { processedIndex = 0 } = this;\n  268:     console.log('node:',\n  269        Util.className(node).padEnd(30),\n  270        'processed:',\n  ...\n  740  \n  741          /* console.log('object:', object);\n  742:         console.log('identifier:', identifier);*/\n  743  \n  744          if(object === null) throw this.error('Object ' + object);\n  ...\n  974        if(operatorToken.value === '||' || operatorToken.value === '&&') {\n  975          /*if(operatorToken.value === '||')\n  976:           console.log('LogicalExpression', {\n  977              operator: operatorToken.value,\n  978              right,\n\n/home/roman/Projects/plot-cv/lib/ecmascript/parser2.js:\n  152              const colSizes = [12, 8, 4, 16, 32, 10, 0];\n  153              const cols = [...prefix, `tok[${tok.byteLength}]`, tok.id, tok.type, tok.lexeme, tok.lexeme.length, tok.loc];\n  154:             console.log(...cols.map((col, i) => (col + '').replaceAll('\\n', '\\\\n').padEnd(colSizes[i])));\n  155            }*/\n  156      this.trace ??= function debug(...args) {};\n  ...\n  418  \n  419      const posstr = this.prefix + String(this.pos);\n  420:     console.log.apply(console, [\n  421        posstr + Util.pad(posstr, this.prefix.length + 8),\n  422        name + Util.pad(name, width),\n  ...\n  437      let node = new ctor(...args);\n  438      /*let { processedIndex = 0 } = this;\n  439:     console.log('node:',\n  440        Util.className(node).padEnd(30),\n  441        'processed:',\n  ...\n 2501  \n 2502      if(tokens[0] && tokens[0].type !== 'eof') {\n 2503:       console.log('tokens[0]', tokens[0]);\n 2504        throw new Error(`Didn't consume all tokens: ${tokens[0].loc ?? inspect(tokens[0], inspectOptions)}`);\n 2505      }\n\n/home/roman/Projects/plot-cv/qjs-opencv/parse-iwyu.js:\n   37    save() {\n   38      let r = fs.writeFileSync(this.name, this.lines.join('\\n'));\n   39:     console.log(`Saved '${this.name}'...`, r);\n   40    }\n   41  }\n   ..\n   47      inspectOptions: { compact: false, colors: true, depth: 3 }\n   48    });\n   49:   console.log(`main`, ...args);\n   50  \n   51    const mydir = path.dirname(args[0]);\n   52:   console.log(`mydir`, mydir);\n   53    process.chdir(mydir);\n   54:   console.log(`process.cwd()`, process.cwd());\n   55  \n   56    let data = '\\n' + fs.readFileSync('iwyu.txt');\n   ..\n   96      i++;\n   97    }\n   98:   console.log('files', console.config({ compact: 0 }), Object.keys(files));\n   99  \n  100    for(let name in files) {\n  101      const entry = files[name];\n  102: \n  103:     console.log('entry', console.config({ compact: 1 }), entry);\n  104      if(entry.full) {\n  105        const { file, full } = entry;\n\n/home/roman/Projects/plot-cv/qjs-opencv/tests/test_freetype.js:\n   27  \n   28    let [fontFile = 'MiscFixedSC613.ttf', fontSize = 12] = args;\n   29: \n   30:   console.log('fontFile', fontFile);\n   31    let ext = path.extname(fontFile);\n   32  \n   ..\n   41  \n   42    let dim = new cv.Size(powerOf2(rect.width), powerOf2(Math.round(Math.min(rect.width / 1.7777), rect.height)));\n   43:   console.log('dim', dim);\n   44    mat = new cv.Mat(dim, cv.CV_8UC3);\n   45    cv.rectangle(mat, [0, 0], [mat.cols - 1, mat.rows - 1], colors[1], cv.FILLED);\n   46  \n   47    let step = Math.round(rect.width / str.length);\n   48:   console.log('step', step);\n   49:   console.log('rect.height', rect.height);\n   50    let boxes = rect.hsplit(...util.range(0, rect.width, step));\n   51    // console.log('boxes', boxes);\n   ..\n   58    let roi = gray(rect);\n   59    let rect2 = new cv.Rect(0, 0, roi.cols, roi.rows);\n   60: \n   61:   console.log('gray', gray);\n   62:   console.log('roi', roi);\n   63:   console.log('cv.threshold', cv.threshold);\n   64    let boxes2 = rect2.hsplit(...util.range(0, rect2.width, step));\n   65  \n   ..\n   69    cv.namedWindow('out', cv.WINDOW_NORMAL);\n   70    let winsize = new cv.Size(rect.width, Math.max(mat.cols / 1.77777, rect.height));\n   71:   console.log('winsize', winsize);\n   72    cv.resizeWindow('out', ...mat.size);\n   73    cv.imshow('out', mat);\n   74    cv.waitKey(-1);\n   75: \n   76:   console.log('binary', binary);\n   77    //  console.log('binary.colRange()', binary.colRange());\n   78  \n   ..\n   84      const index = code < 32 ? 0 : code - 32;\n   85      let box = new cv.Rect(boxes2[index]);\n   86: \n   87:     console.log('box', box);\n   88      box.y1 += 1;\n   89      // box.x2 -= 1;\n   90:     console.log('box', box);\n   91  \n   92      let { area } = box.size;\n   93:     console.log('box.size', box.size);\n   94:     console.log('size.area', area);\n   95      const bytes = (area + 7) >> 3;\n   96:     console.log('bytes', bytes);\n   97:     console.log('bits', bytes << 3);\n   98  \n   99      const RectReducer = list => {\n  100        let first = new cv.Rect(...list.shift());\n  101:       console.log('first', first);\n  102        return list.reduce((a, o) => {\n  103          if('x' in o && 'width' in o) {\n  ...\n  116        let first = new cv.Point(...list.shift());\n  117        let rect = new cv.Rect(first.x, first.y, 0, 0);\n  118:       console.log('rect', rect);\n  119        return list.reduce((a, o) => {\n  120          if(a.x1 > o.x) a.x1 = o.x;\n  ...\n  131        [...binary(box).entries()].filter(([coord, entry]) => entry != 0).map(p => new cv.Point(...p))\n  132      );\n  133: \n  134:     console.log('contour.boundingRect', contour.boundingRect);\n  135      //console.log('contour',[...contour]);\n  136  \n  ...\n  139        .map(([coord, entry]) => new cv.Point(...coord));\n  140      //console.log('pointList',  (pointList));\n  141:     console.log('PointReducer(pointList)', PointReducer(pointList));\n  142  \n  143      let bf = util.arrayToBitfield(a);\n  144:     console.log('bits', bf);\n  145:     console.log(\n  146        `bits for '${String.fromCodePoint(code)}'`,\n  147        '\\n' +\n  ...\n  163      let filename = fontName + '-' + id + '.png';\n  164      cv.imwrite(filename, roi);\n  165:     console.log('write roi to', filename);\n  166    }\n  167  \n\n/home/roman/Projects/plot-cv/qjs-opencv/tests/test_rotated_rect.js:\n    7    let size = new cv.Size(20, 20);\n    8    let angle = 45 * DEG2RAD;\n    9:   console.log('center', center);\n   10:   console.log('size', size);\n   11:   console.log('angle', angle);\n   12    let rr = new cv.RotatedRect(center, size, angle);\n   13:   console.log('rr', rr);\n   14:   console.log('rr.center', rr.center);\n   15:   console.log('rr.size', rr.size);\n   16:   console.log('rr.angle', rr.angle);\n   17    let points;\n   18    rr.points((points = []));\n   19:   console.log('rr.points()', console.config({ compact: 1 }), points);\n   20  \n   21    return {};\n\n/home/roman/Projects/plot-cv/qjs-opencv/tests/test_contours.js:\n    5  function main(...args) {\n    6    let filename = args[0] ?? 'tests/test_linesegmentdetector.jpg';\n    7:   console.log('filename', filename);\n    8    let input = cv.imread(filename);\n    9:   console.log('input.type', '0x' + input.type.toString(16));\n   10:   console.log('input.depth', '0x' + input.depth.toString(16));\n   11:   console.log('input.channels', '0x' + input.channels.toString(16));\n   12:   console.log('input.elemSize1', input.elemSize1);\n   13:   console.log('input.total', input.total);\n   14:   console.log('input.at', input.at(0, 0));\n   15    let size = input.size;\n   16:   console.log('size', size);\n   17    let { width, height } = size;\n   18    let mat = new Mat(input.size, cv.CV_8UC3);\n   ..\n   37  \n   38    for(let contour of contours) {\n   39:     console.log('contour.length', contour.length);\n   40      let poly = new Contour();\n   41      contour.approxPolyDP(poly, 0.05 * contour.arcLength());\n   42      let lpoly = [...poly.lines()];\n   43      let angles;\n   44: \n   45:     console.log('poly.arcLength()', poly.arcLength());\n   46:     console.log(\n   47        'lpoly.length',\n   48        lpoly.length,\n   49        lpoly.map(({ x1, y1, x2, y2 }) => `${x1},${y1}|${x2},${y2}`)\n   50      );\n   51:     console.log(\n   52        'lpoly angles',\n   53        lpoly.length,\n   54        (angles = lpoly.map(l => Math.floor((l.angle * 180) / Math.PI)).map(a => a % 90))\n   55      );\n   56:     console.log(\n   57        'lpoly slopes',\n   58        lpoly.length,\n   59        lpoly.map(l => l.slope).map(({ x, y }) => [x, y])\n   60      );\n   61:     console.log(\n   62        'lpoly lengths',\n   63        lpoly.length,\n   ..\n   77    let poly = [...contours[0]];\n   78    let moments = cv.moments(poly, false);\n   79:   console.log(`poly`, console.config({ maxArrayLength: 20, compact: 1 }), poly);\n   80:   console.log(`cv.moments(poly)`, console.config({ compact: 1 }), moments);\n   81    let huMoments;\n   82    cv.HuMoments(moments, (huMoments = []));\n   83:   console.log(`huMoments`, console.config({ compact: 1 }), huMoments);\n   84  \n   85    cv.imshow('input', input);\n\n/home/roman/Projects/plot-cv/qjs-opencv/tests/test_fastlinedetector.js:\n    3  function main(...args) {\n    4    let lsd = new cv.FastLineDetector(5, 1.414213562, 50, 50, 3, false);\n    5:   console.log('lsd', lsd);\n    6  \n    7    let image = cv.imread('tests/test_linesegmentdetector.jpg');\n    8:   console.log('image', image);\n    9    let gray = Grayscale(image);\n   10    // cv.normalize(gray, gray, 0, 255, cv.NORM_MINMAX, cv.CV_8UC1);\n   ..\n   13    let lines;\n   14    lsd.detect(gray, (lines = []));\n   15: \n   16:   console.log('lines', lines.length);\n   17    image = Color(gray);\n   18  \n\n/home/roman/Projects/plot-cv/qjs-opencv/tests/test_gif.js:\n   26    for(let i = 0; i < palette.length; i++) {\n   27      const [r, g, b] = palette[i];\n   28: \n   29:     console.log(ansiColor(r, g, b, true) + `palette #${i}` + noColor(), palette[i]);\n   30    }\n   31  \n   ..\n   62  \n   63    palette3 = [...bgr_pal];\n   64:   console.log('palette3', dumpPalette(palette3));\n   65  \n   66    let start = [],\n   ..\n   74      b[j] = randLine();\n   75    }\n   76:   console.log('a', a);\n   77:   console.log('b', b);\n   78  \n   79    for(let i = 0; i < images.length; i++) {\n\n/home/roman/Projects/plot-cv/qjs-opencv/tests/test_linesegmentdetector.js:\n    3  function main(...args) {\n    4    let lsd = new cv.LineSegmentDetector(cv.LSD_REFINE_ADV, 1, 2, 2.0, 45, 2, 0.9, 1024);\n    5:   console.log('cv.LSD_REFINE_ADV', cv.LSD_REFINE_ADV);\n    6:   console.log('lsd', lsd);\n    7  \n    8    let image = cv.imread('tests/test_linesegmentdetector.jpg');\n    9:   console.log('image', image);\n   10    let gray = Grayscale(image);\n   11  \n   12    let lines;\n   13    lsd.detect(gray, (lines = []));\n   14: \n   15:   console.log('lines', lines.length);\n   16    image = Color(gray);\n   17  \n\n/home/roman/Projects/plot-cv/qjs-opencv/tests/test_png.js:\n   25    for(let i = 0; i < palette.length; i++) {\n   26      const [r, g, b] = palette[i];\n   27: \n   28:     console.log(ansiColor(r, g, b, true) + `palette #${i}` + noColor(), palette[i]);\n   29    }\n   30  \n   31    const randInt = max => Math.floor(Math.random() * max);\n   32    const randCoord = () => new cv.Point(randInt(size.width), randInt(size.height));\n   33:   console.log('palette', palette);\n   34  \n   35    for(let i = 0; i < images.length; i++) {\n   ..\n   38        let color = palette[j];\n   39        /* console.log('coords', coords.map(({ x, y }) => x + ',' + y).join(' -> '));\n   40:       console.log('color', color);\n   41:       console.log('j', j);*/\n   42        cv.line(images[i], ...coords, [...color.slice(0, 3), 255], 3, false);\n   43      }\n   ..\n   49      cv.imwrite(`test-${i}.png`, images2[i], palette, 15);\n   50    }\n   51:   console.log(\n   52      'palette2',\n   53      palette2\n\n/home/roman/Projects/plot-cv/qjs-opencv/tests/test_video_writer.js:\n   25      cv.line(mat, new Point(0, 0), new Point(...frameSize), [0xdd, 0xdd, 0xdd], 2, cv.LINE_AA);\n   26      repeat(30, () => vw.write(mat));\n   27: \n   28:     console.log(vw.get(cv.VIDEOWRITER_PROP_FRAMEBYTES));\n   29    }\n   30:   console.log(cv.VIDEOWRITER_PROP_FRAMEBYTES);\n   31:   console.log(vw.getBackendName());\n   32    return {};\n   33  }\n\n/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js:\n   19  \n   20          self.invokeCallback('before', ...args);\n   21:         console.log(`Pipeline \\x1b[38;5;112m#${i} \\x1b[38;5;32m'${processor.name}'\\x1b[m`);\n   22  \n   23          mat = processor.call(self, ...args);\n   24  \n   25          self.invokeCallback('after', ...args);\n   26:         console.log(`Pipeline`, { i, mat, isObj: isObject(mat) });\n   27  \n   28          if(isObject(mat) && mat instanceof Mat) self.images[i] = mat;\n\n/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js:\n   68      }\n   69    }\n   70:   console.warn(`copyTo ${src} -> ${dst}`);\n   71    src.copyTo(dst);\n   72  }\n   ..\n  164        if(doResize)\n  165          ImageSize(frame, mat, targetSize, (name, arg1, arg2) =>\n  166:           console.debug(`ImageSize[${this.framePos}] ${name} ${arg1.toString()} -> ${arg2.toString()}`)\n  167          );\n  168        else frame.copyTo(mat);\n\n/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js:\n  108  \n  109    setMouseCallback(fn) {\n  110:     console.log('Window.setMouseCallback', fn);\n  111      setMouseCallback(this.name, (event, x, y, flags) => {\n  112        //console.log(\"MouseCallback\", {event,x,y,flags});\n\n/home/roman/Projects/plot-cv/qjs-opencv/js/cvUtils.js:\n  125        if((opt = findOpt(name))) {\n  126          const [, [has_arg, handler]] = opt;\n  127:         console.log(`name: ${name} has_arg: ${has_arg} opt[0]: ${opt[0]}`);\n  128          if(has_arg) {\n  129            if(arg.length > end) value = arg.substring(end + (arg[end] == '='));\n  ...\n  132            value = true;\n  133          }\n  134:         console.log(`value: ${value}`);\n  135          try {\n  136            //          value = null;\n  ...\n  146        if((opt = findOpt(param))) {\n  147          const [name, [, handler]] = opt;\n  148:         console.log(`param: ${param} name: ${name}`);\n  149          let value = arg;\n  150          if(typeof handler == 'function') {\n\n/home/roman/Projects/plot-cv/openlayers/test/node/ol/source/ogcTileUtil.test.js:\n   47        },\n   48        (err) => {\n   49:         console.error(err); // eslint-disable-line no-console\n   50          this.emit('error', {target: this});\n   51        }\n\n/home/roman/Projects/plot-cv/openlayers/src/ol/Map.js:\n 1695          ) {\n 1696            // eslint-disable-next-line\n 1697:           console.warn(\n 1698              \"No map visible because the map container's width or height are 0.\"\n 1699            );\n\n/home/roman/Projects/plot-cv/openlayers/src/ol/proj.js:\n  622        showCoordinateWarning = false;\n  623        // eslint-disable-next-line no-console\n  624:       console.warn(\n  625          'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.'\n  626        );\n\n/home/roman/Projects/plot-cv/openlayers/src/ol/source/OGCMapTile.js:\n   86     */\n   87    handleError_(error) {\n   88:     console.error(error); // eslint-disable-line no-console\n   89      this.setState('error');\n   90    }\n\n/home/roman/Projects/plot-cv/openlayers/src/ol/source/OGCVectorTile.js:\n   92     */\n   93    handleError_(error) {\n   94:     console.error(error); // eslint-disable-line no-console\n   95      this.setState('error');\n   96    }\n\n/home/roman/Projects/plot-cv/openlayers/src/ol/source/GeoTIFF.js:\n  426        })\n  427        .catch(function (error) {\n  428:         console.error(error); // eslint-disable-line no-console\n  429          self.error_ = error;\n  430          self.setState('error');\n  ...\n  809        .catch(function (error) {\n  810          // output then rethrow\n  811:         console.error(error); // eslint-disable-line no-console\n  812          throw error;\n  813        });\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/wscli.js:\n   93      type = 0x0c;\n   94    }\n   95:   console.log('DNSQuery', domain);\n   96    let outBuf = new Uint8Array([\n   97      0xff,\n   ..\n  115    ]).buffer;\n  116    new DataView(outBuf).setUint16(0, outBuf.byteLength - 2, false);\n  117:   console.log('DNSQuery', outBuf);\n  118    return outBuf;\n  119  }\n  ...\n  152      });\n  153      let log = this.printFunction(console.log);\n  154:     console.log = str => {\n  155        //log('console.log:', args);\n  156        while(str.endsWith('\\n')) str = str.slice(0, -1);\n  ...\n  214    const { binary } = params;\n  215    //console.log('params', params);\n  216:   console.log('headers', headers);\n  217    function createWS(url, callbacks, listen = 0) {\n  218      let urlObj = new URL(url);\n  219      let repl;\n  220      let is_dns = false;\n  221: \n  222:     console.log('params.debug', params.debug);\n  223      net.setLog(net.LLL_USER | (((params.debug >= 2 ? net.LLL_DEBUG : net.LLL_WARN) << 1) - 1), (level, msg) => {\n  224        let p =\n  ...\n  239  \n  240      const fn = [net.client, net.server][+listen];\n  241:     console.log('createWS', { url, binary });\n  242      return fn(url, {\n  243        sslCert,\n  ...\n  262          connections.add(ws);\n  263          /*\n  264:         console.log('req',{  url });*/\n  265:         console.log('onConnect', { ws, req }, req.url);\n  266          const remote = `${ws.address}:${ws.port}`;\n  267          try {\n  268            repl = new CLI(remote);\n  269          } catch(err) {\n  270:           console.log('error:', err.message);\n  271          }\n  272          repl.printStatus(`Connected to ${remote}`);\n  ...\n  279        },\n  280        onClose(ws, status, reason, error) {\n  281:         console.log('onClose', { ws, status, reason, error });\n  282          connections.delete(ws);\n  283          if(repl) {\n  ...\n  291        },\n  292        onHttp(req, resp) {\n  293:         console.log('onHttp', console.config({ compact: false }), { req, resp });\n  294          let text = resp.text();\n  295          text = text.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n  296          const { url } = resp;\n  297:         console.log('onHttp', url, { text });\n  298  \n  299          /* let json =resp.json();\n  300:         console.log('onHttp', { json }); */\n  301          let buffer = resp.arrayBuffer();\n  302:         console.log('onHttp', { buffer });\n  303        },\n  304        onFd(fd, rd, wr) {\n  ...\n  314          if(is_dns) {\n  315            let response = DNSResponse(msg);\n  316:           console.log('onMessage', { ws, response });\n  317          } else {\n  318:           console.log('onMessage', { ws, msg });\n  319          }\n  320        },\n  321        onError(ws, error) {\n  322:         console.log('onError', ws, error);\n  323        }\n  324      });\n  ...\n  332    createWS(url, {})\n  333      .then(() => {\n  334:       console.log('FINISHED');\n  335      })\n  336      .catch(err => {\n  337:       console.log('Failed', err);\n  338      });\n  339  \n  340    function quit(why) {\n  341:     console.log(`quit('${why}')`);\n  342      repl.cleanup(why);\n  343    }\n  ...\n  347    main(...scriptArgs.slice(1));\n  348  } catch(error) {\n  349:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n  350    std.exit(1);\n  351  } finally {\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/test-require.js:\n    1  import require from 'require';\n    2: \n    3: console.log('require', require);\n    4  \n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/list-exports.js:\n   58    let f = std.open(file, 'w+');\n   59    f.puts(tok);\n   60:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   61  }\n   62  \n   ..\n  452    main(...scriptArgs.slice(1));\n  453  } catch(error) {\n  454:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  455    std.exit(1);\n  456  }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/test-require-cjs.js:\n    1  const r = require;\n    2: \n    3: console.log('require', r);\n    4  \n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n  132  \n  133    opts.compact = false;\n  134: \n  135:   console.log(str, opts, ...args);\n  136  };\n  137  \n  ...\n  154        //console.log('os.rename() =', err);\n  155        if(err) throw new Error(`FileReplacer rename() error: ${std.strerror(-err)}`);\n  156:       console.log(`${file} written (${size} bytes)`);\n  157      }\n  158    });\n  ...\n  411        }\n  412        if(debug >= 3)\n  413:         console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  414  \n  415        if(token.lexeme == ';' && cond !== true) doneImports = true;\n  ...\n  422          if(imp.last.lexeme == ';') {\n  423            if(debug > 2)\n  424:             console.log(\n  425                'imp',\n  426                imp[0].loc + '',\n  427:               console.config({ breakLength: 80, compact: 0 }),\n  428                TokenSequence(imp) + ''\n  429              );\n  ...\n  602        }, []);\n  603        tokens = AddWhitespace(tokens);\n  604:       console.log('tokens', tokens);\n  605  \n  606        return TokenSequence(tokens).toString();\n  ...\n  676  \n  677        if(debug > 2)\n  678:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  679  \n  680        //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  ...\n  703  \n  704        if(debug >= 2)\n  705:         console.log('impexp', compact(2), { code, range: new NumericRange(...range), replacement, loc: loc + '' });\n  706        if(debug > 1) console.log('impexp', compact(1), { range: new NumericRange(...range), loc: loc + '' });\n  707  \n  ...\n  735        }\n  736        if(!path.isFile(file)) {\n  737:         console.log(`Path must exist '${file}'`);\n  738          continue;\n  739        }\n  ...\n  752    /*\n  753    let end = Date.now();\n  754:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  755  */\n  756  \n  ...\n  759    if(showDeps) {\n  760      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  761: \n  762:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  763    }\n  764  \n  ...\n  890        range = r;\n  891      } catch(e) {}\n  892:     console.log('NumericRange.from', range);\n  893      return range;\n  894    }\n  ...\n  901        if(IsRange(range)) {\n  902          range = [...range];\n  903:         console.log('range#' + ++i, inspect(range));\n  904  \n  905          if(IsRange(prev) && IsRange(range)) {\n  ...\n 1026      };\n 1027      if(debug > 2)\n 1028:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1029          file,\n 1030          range: [range[0], range[1]]\n ....\n 1034      const { length } = this;\n 1035      if(debug > 2)\n 1036:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n 1037          start,\n 1038          end,\n ....\n 1123        const hole = holes[i];\n 1124        const [range] = this[i];\n 1125:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1126      }\n 1127      //console.log('holes', holes);\n ....\n 1178        } else {\n 1179          let type = getTypeName(str);\n 1180:         console.log('invalid type:', type);\n 1181          throw new Error(type);\n 1182        }\n ....\n 1267    let f = std.open(file, 'w+');\n 1268    f.puts(tok);\n 1269:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1270  }\n 1271  \n ....\n 1539      try {\n 1540        const nbytes = results[0].write(stream);\n 1541:       console.log(`${nbytes} bytes written to '${out.file}'`);\n 1542      } catch(error) {\n 1543:       console.log(`write error ('${out.file}'):`, error);\n 1544        std.exit(1);\n 1545      }\n ....\n 1570    main(...scriptArgs.slice(1));\n 1571  } catch(error) {\n 1572:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1573    std.exit(1);\n 1574  }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/extract-structs.js:\n   55  \n   56    for(let file of files) {\n   57:     console.log('file', file);\n   58  \n   59      let str = std.loadFile(file, 'utf-8');\n   60: \n   61:     console.log('str', str.split('\\n')[0]);\n   62  \n   63      let lexer = new CLexer(str, file);\n   ..\n   94    main(...scriptArgs.slice(1));\n   95  } catch(error) {\n   96:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   97    std.exit(1);\n   98  }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/css3-selectors.js:\n   39        //console.log('parseSelector', str, capture);\n   40        const [, name, , value] = capture;\n   41:       console.log('parseSelector', { name, value });\n   42        sel = AttributeSelector(name, value);\n   43      } else {\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/require.js:\n  182    const handler = {\n  183      get(target, prop, receiver) {\n  184:       console.log('get', { target, prop });\n  185        if(prop in target) return Reflect.get(target, prop, receiver);\n  186:       console.log('module', module);\n  187        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  188  \n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/rpc.js:\n  252      const { socket } = this;\n  253      const status = socket.CLOSE_STATUS_PROTOCOL_ERR || 1000;\n  254: \n  255:     console.log(`ERROR: ${message}`);\n  256      this.exception = new Error(message);\n  257:     console.log('error(', status, message, ')');\n  258      this.close(status, message.slice(0, 128));\n  259      return this.exception;\n  ...\n  262    close(status, reason) {\n  263      const { socket } = this;\n  264:     console.log('close(', status, reason, ')');\n  265      socket.close(status, reason);\n  266      delete this.socket;\n  ...\n  303  \n  304    onpong(data) {\n  305:     console.log('Connection.onpong:', data);\n  306    }\n  307  \n  308    onerror(error) {\n  309:     console.log('Connection.onerror', error ? ` (${error})` : '');\n  310      this.connected = false;\n  311      this.cleanup();\n  ...\n  313  \n  314    onclose(code, why) {\n  315:     console.log('Connection.onclose', code, why ? ` (${why})` : '');\n  316      this.connected = false;\n  317      this.cleanup();\n  ...\n  584  export function RPCSocket(url, service = RPCServer, verbosity = 1) {\n  585    if(!new.target) return new RPCSocket(url, service, verbosity);\n  586: \n  587:   console.log('RPCSocket', { url, service, verbosity });\n  588  \n  589    // const DEBUG = DebugFlags();\n  ...\n  592      ? (msg, ...args) => {\n  593          const { console } = globalThis;\n  594:         console \n  595            .log(\n  596              { msg },\n  597:             console.config({\n  598                multiline: false,\n  599                compact: false,\n  ...\n  671      /* prettier-ignore */ get connected() {\n  672        const ws = this.ws;\n  673:       console.log(\"ws\", ws);\n  674        if(ws)\n  675        return typeof ws.readyState == 'number' ? ws.readyState == ws.OPEN : false;\n  676      const {fdlist} = instance;\n  677:       console.log(\"fdlist\", fdlist);\n  678  \n  679      return  fdlist[Object.keys( fdlist)[0]].connected;\n  ...\n  915  function ForwardObject(e, thisObj) {\n  916    let obj = ForwardMethods(e, {}, thisObj);\n  917:   console.log(`ForwardObject`, { e, obj, thisObj });\n  918    return obj;\n  919  }\n  ...\n  942      let r = await client.waitFor('response');\n  943      if(t[cmd]) r = t[cmd](r);\n  944:     console.log(`RESPONSE to '${cmd}'`, r);\n  945      return r;\n  946    };\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/dom.js:\n 1056      const isArray = ctor == NodeList || owner.children == raw;\n 1057      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1058:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1059  \n 1060      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  876              value.then(v => {\n  877                replaceProperty(v);\n  878:               console.log(`util.lazyProperty resolved `, obj[name]);\n  879                return v;\n  880              });\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js:\n 1497  \n 1498      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1499:     console.log('reverseSearch', this.searchCb);\n 1500:     console.log('reverseSearch', this.update);\n 1501  \n 1502      try {\n 1503        this.update();\n 1504      } catch(error) {\n 1505:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1506      }\n 1507      return -2;\n ....\n 1652        this.addCleanupHandler(() => {\n 1653          this.mouseTracking(false);\n 1654:         console.log('Mouse tracking disabled');\n 1655        });\n 1656      }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   52  \n   53      /*console.log('tok.id', tok.id);\n   54:       console.log('tok.type', tok.type);\n   55:       console.log('tokens', tokens);*/\n   56  \n   57      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/csv.js:\n    9  \n   10      this.handler = (arg, tok) =>\n   11:       console.log(`Unmatched token at ${arg.loc}\\narg.currentLine()\\n${' '.repeat(arg.loc.column - 1)}^`);\n   12  \n   13      this.addRules(separator);\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/bnf.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/bin/wscli.js:\n   82      });\n   83      let log = this.printFunction(console.log);\n   84:     console.log = (...args) => {\n   85        //log('console.log:', args);\n   86        log(...args);\n   ..\n  142    const { binary } = params;\n  143    //console.log('params', params);\n  144:   console.log('headers', headers);\n  145    function createWS(url, callbacks, listen = 0) {\n  146      let urlObj = new URL(url);\n  ...\n  156  \n  157      const fn = [net.client, net.server][+listen];\n  158:     console.log('createWS', { url, binary });\n  159      return fn(url, {\n  160        sslCert,\n  ...\n  179          connections.add(ws);\n  180          const { reservedBits,firstFragment,finalFragment,partialBuffered}=ws;\n  181: \n  182:         console.log('ws',{ reservedBits,firstFragment,finalFragment,partialBuffered});\n  183:         console.log('onConnect', { ws, req });\n  184          const { address, port } = ws;\n  185          const remote = `${address}:${port}`;\n  ...\n  187            repl = new CLI(remote);\n  188          } catch(err) {\n  189:           console.log('error:', err.message);\n  190          }\n  191          //        const {url}= req;\n  ...\n  193        },\n  194        onClose(ws, status, reason, error) {\n  195:         console.log('onClose', { ws, status, reason, error });\n  196          connections.delete(ws);\n  197          if(repl) {\n  ...\n  205        },\n  206        onHttp(req, resp) {\n  207:         console.log('onHttp', console.config({ compact: false }), { req, resp });\n  208          let text = resp.text();\n  209          text = text.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n  210          const { url } = resp;\n  211:         console.log('onHttp', url, { text });\n  212  \n  213          /* let json =resp.json();\n  214:         console.log('onHttp', { json }); */\n  215          let buffer = resp.arrayBuffer();\n  216:         console.log('onHttp', { buffer });\n  217        },\n  218        onFd(fd, rd, wr) {\n  ...\n  226            msg = msg.substring(0, 100);\n  227          }\n  228:         console.log('onMessage', { ws, msg });\n  229        },\n  230        onError(ws, error) {\n  231:         console.log('onError', ws, error);\n  232        }\n  233      });\n  ...\n  241    createWS(url, {})\n  242      .then(() => {\n  243:       console.log('FINISHED');\n  244      })\n  245      .catch(err => {\n  246:       console.log('Failed', err);\n  247      });\n  248  \n  249    function quit(why) {\n  250:     console.log(`quit('${why}')`);\n  251      repl.cleanup(why);\n  252    }\n  ...\n  255    main(...scriptArgs.slice(1));\n  256  } catch(error) {\n  257:   console.log(`FAIL: ${error && error.message}\\n${error && error.stack}`);\n  258    std.exit(1);\n  259  } finally {\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/bin/list-exports.js:\n   58    let f = std.open(file, 'w+');\n   59    f.puts(tok);\n   60:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   61  }\n   62  \n   ..\n  458    main(...scriptArgs.slice(1));\n  459  } catch(error) {\n  460:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  461    std.exit(1);\n  462  }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/bin/resolve-imports.js:\n  126  \n  127    opts.compact = false;\n  128: \n  129:   console.log(str, opts, ...args);\n  130  };\n  131  \n  ...\n  617        }\n  618        if(!path.isFile(file)) {\n  619:         console.log(`Path must exist '${file}'`);\n  620          continue;\n  621        }\n  ...\n  634    /*\n  635    let end = Date.now();\n  636:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  637  */\n  638  \n  ...\n  641    if(showDeps) {\n  642      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  643: \n  644:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  645    }\n  646  \n  ...\n  757        range = r;\n  758      } catch(e) {}\n  759:     console.log('NumericRange.from', range);\n  760      return range;\n  761    }\n  ...\n  768        if(IsRange(range)) {\n  769          range = [...range];\n  770:         console.log('range#' + ++i, inspect(range));\n  771  \n  772          if(IsRange(prev) && IsRange(range)) {\n  ...\n  893      };\n  894      if(debug > 2)\n  895:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n  896          file,\n  897          range: [range[0], range[1]]\n  ...\n  901      const { length } = this;\n  902      if(debug > 2)\n  903:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n  904          start,\n  905          end,\n  ...\n  985        const hole = holes[i];\n  986        const [range] = this[i];\n  987:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n  988      }\n  989      //console.log('holes', holes);\n  ...\n 1113    let f = std.open(file, 'w+');\n 1114    f.puts(tok);\n 1115:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1116  }\n 1117  \n ....\n 1352    if(out.file) {\n 1353      const nbytes = results[0].write(stream);\n 1354:     console.log(`${nbytes} bytes written to '${out.file}'`);\n 1355    }\n 1356    if(debug > 3) console.log(`exportedNames`, exportedNames);\n ....\n 1379    main(...scriptArgs.slice(1));\n 1380  } catch(error) {\n 1381:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1382    std.exit(1);\n 1383  }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/bin/extract-structs.js:\n   50  \n   51    for(let file of files) {\n   52:     console.log('file', file);\n   53  \n   54      let str = std.loadFile(file);\n   55:     console.log('str', str.split('\\n')[0]);\n   56  \n   57      let lexer = new CLexer(str, file);\n   58      /*  console.log('lexer', lexer);\n   59:     console.log(`lexer.tokens`, lexer.tokens);\n   60:     console.log(`lexer.rules['struct']`, lexer.rules['struct']);\n   61:     console.log(`lexer.rules['typedef']`, lexer.rules['typedef']);\n   62:     console.log(`lexer.getRule('struct')`, lexer.getRule('struct'));*/\n   63      const { rules, tokens } = lexer;\n   64  \n   ..\n   93    main(...scriptArgs.slice(1));\n   94  } catch(error) {\n   95:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   96    std.exit(1);\n   97  }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/lib/quickjs/require.js:\n  198    const handler = {\n  199      get(target, prop, receiver) {\n  200:       console.log('get', { target, prop });\n  201        if(prop in target) return Reflect.get(target, prop, receiver);\n  202:       console.log('module', module);\n  203        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  204  \n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/lib/quickjs/rpc.js:\n  246      const { socket } = this;\n  247      const status = socket.CLOSE_STATUS_PROTOCOL_ERR || 1000;\n  248: \n  249:     console.log(`ERROR: ${message}`);\n  250      this.exception = new Error(message);\n  251:     console.log('error(', status, message, ')');\n  252      this.close(status, message.slice(0, 128));\n  253      return this.exception;\n  ...\n  256    close(status, reason) {\n  257      const { socket } = this;\n  258:     console.log('close(', status, reason, ')');\n  259      socket.close(status, reason);\n  260      delete this.socket;\n  ...\n  297  \n  298    onpong(data) {\n  299:     console.log('Connection.onpong:', data);\n  300    }\n  301  \n  302    onerror(error) {\n  303:     console.log('Connection.onerror', error ? ` (${error})` : '');\n  304      this.connected = false;\n  305      this.cleanup();\n  ...\n  307  \n  308    onclose(code, why) {\n  309:     console.log('Connection.onclose', code, why ? ` (${why})` : '');\n  310      this.connected = false;\n  311      this.cleanup();\n  ...\n  572  export function RPCSocket(url, service = RPCServer, verbosity = 1) {\n  573    if(!new.target) return new RPCSocket(url, service, verbosity);\n  574: \n  575:   console.log('RPCSocket', { url, service, verbosity });\n  576  \n  577    // const DEBUG = DebugFlags();\n  ...\n  580      ? (msg, ...args) => {\n  581          const { console } = globalThis;\n  582:         console \n  583            .log(\n  584              { msg },\n  585:             console.config({\n  586                multiline: false,\n  587                compact: false,\n  ...\n  659      /* prettier-ignore */ get connected() {\n  660        const ws = this.ws;\n  661:       console.log(\"ws\", ws);\n  662        if(ws)\n  663        return typeof ws.readyState == 'number' ? ws.readyState == ws.OPEN : false;\n  664      const {fdlist} = instance;\n  665:       console.log(\"fdlist\", fdlist);\n  666  \n  667      return  fdlist[Object.keys( fdlist)[0]].connected;\n  ...\n  895  function ForwardObject(e, thisObj) {\n  896    let obj = ForwardMethods(e, {}, thisObj);\n  897:   console.log(`ForwardObject`, { e, obj, thisObj });\n  898    return obj;\n  899  }\n  ...\n  921      let r = await client.waitFor('response');\n  922      if(t[cmd]) r = t[cmd](r);\n  923:     console.log(`RESPONSE to '${cmd}'`, r);\n  924      return r;\n  925    };\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/lib/quickjs/dom.js:\n   77    if(type === Element && /^!--.*--$/.test(obj.tagName)) type = Comment;\n   78    else if(type === Text && typeof obj == 'string') {\n   79:     console.log('GetNode', { type, obj, owner: owner.constructor.name });\n   80      obj = owner.indexOf(obj);\n   81    }\n   ..\n  748    /*  [inspectSymbol](depth, opts) {\n  749      const { tagName, attributes, children } = this;\n  750:     console.log('Document.inspect')\n  751      return `\\x1b[1;31mDocument\\x1b[0m ${tagName} attributes: ${attributes[inspectSymbol](depth + 1, opts)} children: ${inspect(children.map(c => c[inspectSymbol](depth + 2, opts)))}>`;\n  752    }*/\n  ...\n 1016      const isArray = ctor == NodeList || owner.children == raw;\n 1017      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1018:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1019  \n 1020      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/lib/quickjs/util.js:\n  876              value.then(v => {\n  877                replaceProperty(v);\n  878:               console.log(`util.lazyProperty resolved `, obj[name]);\n  879                return v;\n  880              });\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/lib/quickjs/repl.js:\n 1497  \n 1498      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1499:     console.log('reverseSearch', this.searchCb);\n 1500:     console.log('reverseSearch', this.update);\n 1501  \n 1502      try {\n 1503        this.update();\n 1504      } catch(error) {\n 1505:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1506      }\n 1507      return -2;\n ....\n 1652        this.addCleanupHandler(() => {\n 1653          this.mouseTracking(false);\n 1654:         console.log('Mouse tracking disabled');\n 1655        });\n 1656      }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/lib/quickjs/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   55  \n   56      /*console.log('tok.id', tok.id);\n   57:       console.log('tok.type', tok.type);\n   58:       console.log('tokens', tokens);*/\n   59  \n   60      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-xenial/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/bin/list-exports.js:\n   61    let f = std.open(file, 'w+');\n   62    f.puts(tok);\n   63:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n   64  }\n   65  \n   ..\n  452    main(...scriptArgs.slice(1));\n  453  } catch(error) {\n  454:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  455    std.exit(1);\n  456  }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/bin/resolve-imports.js:\n  114  \n  115    opts.compact = false;\n  116: \n  117:   console.log(str, opts, ...args);\n  118  };\n  119  \n  ...\n  352          imp = token.lexeme == 'export' ? [token] : [];\n  353        }\n  354:       console.log(`token[${imp.length}]`, token.loc + '', console.config({ breakLength: 80, compact: 0 }), token);\n  355  \n  356        if(cond == true) {\n  ...\n  358          //console.log( imp[0].loc+'',console.config({breakLength:80, compact: 0}), NonWS(imp));\n  359          if(imp.last.lexeme == ';') {\n  360:           console.log('imp', imp[0].loc + '', console.config({ breakLength: 80, compact: 0 }), TokenSequence(imp) + '');\n  361            cond = false;\n  362            if(impexp == What.IMPORT || imp.some(i => IsKeyword('from', i))) {\n  ...\n  459      let code = toString(BufferFile(source).slice(...range));\n  460      if(debug >= 2)\n  461:       console.log('AddImport', compact(1), {\n  462          source,\n  463          /* type, */ file,\n  ...\n  523  \n  524    let end = Date.now();\n  525: \n  526:   console.log(`Lexing '${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  527    start = Date.now();\n  528  \n  ...\n  566      //  if(bufstr == ' ') throw new Error(`bufstr = ' ' loc: ${loc} ${loc.byteOffset} range: ${range} code: ` + toString(bytebuf.slice(loc.byteOffset, range[1] + 10)));\n  567      if(typeof file == 'string' && !path.isFile(file)) {\n  568:       console.log(`\\x1b[1;31mInexistent\\x1b[0m file '${file}'`);\n  569  \n  570        replacement = null;\n  ...\n  635        }\n  636        if(!path.isFile(file)) {\n  637:         console.log(`Path must exist '${file}'`);\n  638          continue;\n  639        }\n  ...\n  652    /*\n  653    let end = Date.now();\n  654:   console.log(`'${source.replace(/^\\.\\//, '')}' took ${end - start}ms`);\n  655  */\n  656  \n  ...\n  659    if(showDeps) {\n  660      let deps = [...DependencyTree(source, ' ', false, 0, '    ')];\n  661: \n  662:     console.log(`Dependencies of '${source}':\\n${SpreadAndJoin(deps)}`);\n  663    }\n  664  \n  ...\n  775        range = r;\n  776      } catch(e) {}\n  777:     console.log('NumericRange.from', range);\n  778      return range;\n  779    }\n  ...\n  786        if(IsRange(range)) {\n  787          range = [...range];\n  788:         console.log('range#' + ++i, inspect(range));\n  789  \n  790          if(IsRange(prev) && IsRange(range)) {\n  ...\n  911      };\n  912      if(debug > 2)\n  913:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n  914          file,\n  915          range: [range[0], range[1]]\n  ...\n  919      const { length } = this;\n  920      if(debug > 2)\n  921:       console.log('FileMap.replaceRange', compact(2, { customInspect: true }), {\n  922          start,\n  923          end,\n  ...\n 1008        const hole = holes[i];\n 1009        const [range] = this[i];\n 1010:       console.log('#' + (i + 1), compact(2), inspect({ hole, range }, { compact: 2, depth: Infinity }));\n 1011      }\n 1012      //console.log('holes', holes);\n ....\n 1142    let f = std.open(file, 'w+');\n 1143    f.puts(tok);\n 1144:   console.log('Wrote \"' + file + '\": ' + tok.length + ' bytes');\n 1145  }\n 1146  \n ....\n 1214  \n 1215    let keys = Object.keys(defaults).concat(Object.keys(fields)).unique();\n 1216:   console.log('keys', keys);\n 1217    yield `// ==UserScript==`;\n 1218    for(let name of keys) {\n ....\n 1396  \n 1397    const nbytes = results[0].write(stream);\n 1398: \n 1399:   console.log(`${nbytes} bytes written to '${out.file}'`);\n 1400  \n 1401    if(debug > 2) console.log(`exportedNames`, exportedNames);\n ....\n 1424    main(...scriptArgs.slice(1));\n 1425  } catch(error) {\n 1426:   console.log(`${error.constructor.name}: ${error.message}${error.stack ? '\\n' + error.stack : ''}`);\n 1427    std.exit(1);\n 1428  }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/bin/extract-structs.js:\n   50  \n   51    for(let file of files) {\n   52:     console.log('file', file);\n   53  \n   54      let str = std.loadFile(file);\n   55:     console.log('str', str.split('\\n')[0]);\n   56  \n   57      let lexer = new CLexer(str, file);\n   58      /*  console.log('lexer', lexer);\n   59:     console.log(`lexer.tokens`, lexer.tokens);\n   60:     console.log(`lexer.rules['struct']`, lexer.rules['struct']);\n   61:     console.log(`lexer.rules['typedef']`, lexer.rules['typedef']);\n   62:     console.log(`lexer.getRule('struct')`, lexer.getRule('struct'));*/\n   63      const { rules, tokens } = lexer;\n   64  \n   ..\n   93    main(...scriptArgs.slice(1));\n   94  } catch(error) {\n   95:   console.log(`FAIL: ${error.message}\\n${error.stack}`);\n   96    std.exit(1);\n   97  }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/require.js:\n  198    const handler = {\n  199      get(target, prop, receiver) {\n  200:       console.log('get', { target, prop });\n  201        if(prop in target) return Reflect.get(target, prop, receiver);\n  202:       console.log('module', module);\n  203        if(module !== undefined && module[prop]) return module[prop]; //(target[prop] = Reflect.get(module, prop, receiver));\n  204  \n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/xpath.js:\n   31                let num = +m[1].slice(1, -1);\n   32                arg = Predicate.and(arg, Predicate.equal(num));\n   33:               console.log('arg', arg);\n   34              }\n   35            }\n   ..\n   39        this.push(arg);\n   40      }\n   41:     console.log('XPath.constructor', this);\n   42    }\n   43  \n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/rpc.js:\n  246      const { socket } = this;\n  247      const status = socket.CLOSE_STATUS_PROTOCOL_ERR || 1000;\n  248: \n  249:     console.log(`ERROR: ${message}`);\n  250      this.exception = new Error(message);\n  251:     console.log('error(', status, message, ')');\n  252      this.close(status, message.slice(0, 128));\n  253      return this.exception;\n  ...\n  256    close(status, reason) {\n  257      const { socket } = this;\n  258:     console.log('close(', status, reason, ')');\n  259      socket.close(status, reason);\n  260      delete this.socket;\n  ...\n  297  \n  298    onpong(data) {\n  299:     console.log('Connection.onpong:', data);\n  300    }\n  301  \n  302    onerror(error) {\n  303:     console.log('Connection.onerror', error ? ` (${error})` : '');\n  304      this.connected = false;\n  305      this.cleanup();\n  ...\n  307  \n  308    onclose(code, why) {\n  309:     console.log('Connection.onclose', code, why ? ` (${why})` : '');\n  310      this.connected = false;\n  311      this.cleanup();\n  ...\n  572  export function RPCSocket(url, service = RPCServer, verbosity = 1) {\n  573    if(!new.target) return new RPCSocket(url, service, verbosity);\n  574: \n  575:   console.log('RPCSocket', { url, service, verbosity });\n  576  \n  577    // const DEBUG = DebugFlags();\n  ...\n  580      ? (msg, ...args) => {\n  581          const { console } = globalThis;\n  582:         console \n  583            .log(\n  584              { msg },\n  585:             console.config({\n  586                multiline: false,\n  587                compact: false,\n  ...\n  659      /* prettier-ignore */ get connected() {\n  660        const ws = this.ws;\n  661:       console.log(\"ws\", ws);\n  662        if(ws)\n  663        return typeof ws.readyState == 'number' ? ws.readyState == ws.OPEN : false;\n  664      const {fdlist} = instance;\n  665:       console.log(\"fdlist\", fdlist);\n  666  \n  667      return  fdlist[Object.keys( fdlist)[0]].connected;\n  ...\n  895  function ForwardObject(e, thisObj) {\n  896    let obj = ForwardMethods(e, {}, thisObj);\n  897:   console.log(`ForwardObject`, { e, obj, thisObj });\n  898    return obj;\n  899  }\n  ...\n  921      let r = await client.waitFor('response');\n  922      if(t[cmd]) r = t[cmd](r);\n  923:     console.log(`RESPONSE to '${cmd}'`, r);\n  924      return r;\n  925    };\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/dom.js:\n   77    if(type === Element && /^!--.*--$/.test(obj.tagName)) type = Comment;\n   78    else if(type === Text && typeof obj == 'string') {\n   79:     console.log('GetNode', { type, obj, owner: owner.constructor.name });\n   80      obj = owner.indexOf(obj);\n   81    }\n   ..\n  748    /*  [inspectSymbol](depth, opts) {\n  749      const { tagName, attributes, children } = this;\n  750:     console.log('Document.inspect')\n  751      return `\\x1b[1;31mDocument\\x1b[0m ${tagName} attributes: ${attributes[inspectSymbol](depth + 1, opts)} children: ${inspect(children.map(c => c[inspectSymbol](depth + 2, opts)))}>`;\n  752    }*/\n  ...\n 1016      const isArray = ctor == NodeList || owner.children == raw;\n 1017      const isElement = ctor == Element || (owner.children != raw && owner.attributes != raw); \n 1018:     console.log('\\x1b[38;2;112;112;252mMemoize\\x1b[0m', { isArray, isElement, raw });\n 1019  \n 1020      if(Symbol.toStringTag in owner) owner = Node.raw(owner);\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/util.js:\n  866              value.then(v => {\n  867                replaceProperty(v);\n  868:               console.log(`util.lazyProperty resolved `, obj[name]);\n  869                return v;\n  870              });\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/repl.js:\n 1571  \n 1572      //    this.debug('reverseSearch', { search, term_cursor_x });\n 1573:     console.log('reverseSearch', this.searchCb);\n 1574:     console.log('reverseSearch', this.update);\n 1575  \n 1576      try {\n 1577        this.update();\n 1578      } catch(error) {\n 1579:       console.log('ERROR:', error.message + '\\n' + error.stack);\n 1580      }\n 1581      return -2;\n ....\n 1726        this.addCleanupHandler(() => {\n 1727          this.mouseTracking(false);\n 1728:         console.log('Mouse tracking disabled');\n 1729        });\n 1730      }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/streams.js:\n   10    return new ReadableStream({\n   11      start(controller) {\n   12:       console.log('ReadableStream.start', { controller });\n   13        file = std.open(path, 'rb', error);\n   14        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   16      pull(controller) {\n   17        if(file.eof()) {\n   18:         console.log('ReadableStream.pull', { eof: true });\n   19          controller.close();\n   20          return;\n   ..\n   23        let buf = new ArrayBuffer(bufSize);\n   24        let ret = file.read(buf, 0, bufSize);\n   25: \n   26:       console.log('ReadableStream.pull', { controller, ret });\n   27  \n   28        if(ret > 0) controller.enqueue(ret == bufSize ? buf : buf.slice(0, ret));\n   29  \n   30        if(file.error()) {\n   31:         console.log('ReadableStream.pull', { error: true });\n   32          controller.error(file);\n   33        }\n   ..\n   35      cancel(reason) {\n   36        file.close();\n   37:       console.log('ReadableStream.cancel', { reason });\n   38      }\n   39    });\n   ..\n   47      start(controller) {\n   48        file = std.open(path, 'w+', error);\n   49:       console.log('WritableStream.start', { file, error, controller });\n   50  \n   51        if(error.errno) throw new Error(\"Error opening '\" + path + \"': \" + std.strerror(error.errno));\n   ..\n   53      write(chunk, controller) {\n   54        let ret = file.write(chunk, 0, chunk.byteLength);\n   55:       console.log('WritableStream.write', { chunk, controller });\n   56  \n   57        if(file.error()) {\n   58:         console.log('WritableStream.write', { error: true });\n   59          controller.error(file);\n   60        }\n   61      },\n   62      close(controller) {\n   63:       console.log('WritableStream.close', { controller });\n   64  \n   65        file.close();\n   66      },\n   67      abort(reason) {\n   68:       console.log('WritableStream.abort', { reason });\n   69  \n   70        file.close();\n   ..\n   78      super({\n   79        start(ctl) {\n   80:         console.log('TextEncoderStream.start', { ctl });\n   81          enc = new TextEncoder(encoding);\n   82        },\n   83        transform(chunk, ctl) {\n   84:         console.log('TextEncoderStream.transform', quote(chunk, \"'\"), ctl);\n   85          let buf = enc.encode(chunk);\n   86          // console.log('TextEncoderStream.transform', { buf, ctl });\n   ..\n   90        },\n   91        flush() {\n   92:         console.log('TextEncoderStream.flush', { enc });\n   93          enc = null;\n   94        }\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/bnflexer.js:\n   33  \n   34      this.handler = (arg, tok) =>\n   35:       console.log(\n   36          'Unmatched token at ' +\n   37            arg.loc +\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/parser.js:\n    1  export function DumpToken(...args) {\n    2    const { type, lexeme, loc } = args.pop();\n    3: \n    4:   console.log(...args, (loc + '').padEnd(50), type.padEnd(20), lexeme.replace(/\\n/g, '\\\\n'));\n    5  }\n    6  \n    .\n   55  \n   56      /*console.log('tok.id', tok.id);\n   57:       console.log('tok.type', tok.type);\n   58:       console.log('tokens', tokens);*/\n   59  \n   60      if(!ret && tokens.indexOf(tok.id) == -1) {\n\n/home/roman/Projects/plot-cv/inst/x86_64-linux-coverage/usr/local/lib/quickjs/events.js:\n  101  export const eventify = self => {\n  102    let methods = getMethods(EventEmitter.prototype);\n  103:   console.log(methods);\n  104  \n  105    return Object.assign(self, {\n\n4042 matches across 568 files\n",
			"settings":
			{
				"buffer_size": 668290,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "upload.html",
			"settings":
			{
				"buffer_size": 674,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP4AAAAAAAAA/wAAAAAAAAAAAAAA/wAAAAAAAAADAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gAAAAAAAAD+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAAMBAAAAAAAAUAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"paste",
					null,
					"AgAAACABAAAAAAAANQEAAAAAAAAAAAAANQEAAAAAAAA1AQAAAAAAAC4AAAAvX25leHQvc3RhdGljL2NodW5rcy9zdHlsZXMuNGZmNTU5ZjMuY2h1bmsuY3Nz",
					"AQAAAAAAAAABAAAAIAEAAAAAAABOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAAUBAAAAAAAABgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQEAAAAAAAAFAQAAAAAAAAAAAAAAAFJA"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAAAUBAAAAAAAABQEAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAABgEAAAAAAAAGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAADYBAAAAAAAANwEAAAAAAAAAAAAANwEAAAAAAAA4AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgEAAAAAAAA2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAADcBAAAAAAAANwEAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAOAEAAAAAAAA4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAADcBAAAAAAAAOAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwEAAAAAAAA3AQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/tests/test_path.js",
			"redo_stack":
			[
				[
					64,
					1,
					"insert",
					{
						"characters": "up"
					},
					"AgAAAGcMAAAAAAAAZwwAAAAAAAABAAAAcGYMAAAAAAAAZgwAAAAAAAABAAAAdQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoDAAAAAAAAGgMAAAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 3345,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"cut",
					null,
					"AQAAANUJAAAAAAAA1QkAAAAAAACFAAAAIENhbGxQYXRoRnVuY3Rpb24oCiAgICAnY29sbGFwc2UnLAogICAgJy9ob21lL3JvbWFuL1Byb2plY3RzL3Bsb3QtY3YvcXVpY2tqcy9tb2R1bGVzL2J1aWxkL3g4Nl82NC1saW51eC1nbnUvQ01ha2VGaWxlcy8uLi8uLi8uLicKICApOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaCgAAAAAAANUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					2,
					"paste",
					null,
					"AgAAANUJAAAAAAAAWgoAAAAAAAAAAAAAWgoAAAAAAADfCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVCQAAAAAAANUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "slice"
					},
					"BgAAAHIKAAAAAAAAcwoAAAAAAAAAAAAAcwoAAAAAAABzCgAAAAAAAAgAAABjb2xsYXBzZXMKAAAAAAAAdAoAAAAAAAAAAAAAdAoAAAAAAAB1CgAAAAAAAAAAAAB1CgAAAAAAAHYKAAAAAAAAAAAAAHYKAAAAAAAAdwoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByCgAAAAAAAHoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANcKAAAAAAAA2AoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXCgAAAAAAANcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n2,"
					},
					"BAAAANgKAAAAAAAA2QoAAAAAAAAAAAAA2QoAAAAAAADdCgAAAAAAAAAAAADdCgAAAAAAAN4KAAAAAAAAAAAAAN4KAAAAAAAA3woAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYCgAAAAAAANgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " -3"
					},
					"AwAAAN8KAAAAAAAA4AoAAAAAAAAAAAAA4AoAAAAAAADhCgAAAAAAAAAAAADhCgAAAAAAAOIKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfCgAAAAAAAN8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFsKAAAAAAAAXAoAAAAAAAAAAAAAXAoAAAAAAABeCgAAAAAAAAAAAABeCgAAAAAAAF8KAAAAAAAAAAAAAF8KAAAAAAAAYQoAAAAAAAAAAAAAXAoAAAAAAABcCgAAAAAAAAIAAAAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbCgAAAAAAAFsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAFwKAAAAAAAAXQoAAAAAAAAAAAAAXQoAAAAAAABeCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcCgAAAAAAAFwKAAAAAAAAAAAAAAAAOEA"
				],
				[
					57,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAF4KAAAAAAAAYAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeCgAAAAAAAF4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "path.slice"
					},
					"CgAAAF8KAAAAAAAAYAoAAAAAAAAAAAAAYAoAAAAAAABhCgAAAAAAAAAAAABhCgAAAAAAAGIKAAAAAAAAAAAAAGIKAAAAAAAAYwoAAAAAAAAAAAAAYwoAAAAAAABkCgAAAAAAAAAAAABkCgAAAAAAAGUKAAAAAAAAAAAAAGUKAAAAAAAAZgoAAAAAAAAAAAAAZgoAAAAAAABnCgAAAAAAAAAAAABnCgAAAAAAAGgKAAAAAAAAAAAAAGgKAAAAAAAAaQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfCgAAAAAAAF8KAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "Package Control Messages\n========================\n\nDoxyDoxygen\n-----------\n\n  DoxyDoxygen 0.80.0\n  ------------------\n\n     - Fix: Links in documentation (https://github.com/20Tauri/DoxyDoxygen/issues/164)\n     - Fix: C# record parsing\n     - Add: Js Optional Chaining operator support\n     - Add: Js Private member support\n     - Fix: Translator no longer insert HTML code\n     - Add: Doxygen @noop, @concept, @docbookinclude, @emoji, @f(, @f), @hidecallergraph, @hidecallgraph, @hiderefby, @hiderefs, @maninclude, @refinclude, @raisewarning, @showrefby, @showrefs commands support\n  DoxyDoxygen 0.79.5\n  ------------------\n\n     - Fix: Cursor positioning when tabulations present AND `translate_tabs_to_spaces` true (https://github.com/20Tauri/DoxyDoxygen/issues/161)",
			"settings":
			{
				"buffer_size": 769,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "Package Control Messages\n========================\n\nDoxyDoxygen\n-----------\n\n  DoxyDoxygen 0.80.0\n  ------------------\n\n     - Fix: Links in documentation (https://github.com/20Tauri/DoxyDoxygen/issues/164)\n     - Fix: C# record parsing\n     - Add: Js Optional Chaining operator support\n     - Add: Js Private member support\n     - Fix: Translator no longer insert HTML code\n     - Add: Doxygen @noop, @concept, @docbookinclude, @emoji, @f(, @f), @hidecallergraph, @hidecallgraph, @hiderefby, @hiderefs, @maninclude, @refinclude, @raisewarning, @showrefby, @showrefs commands support\n  DoxyDoxygen 0.79.5\n  ------------------\n\n     - Fix: Cursor positioning when tabulations present AND `translate_tabs_to_spaces` true (https://github.com/20Tauri/DoxyDoxygen/issues/161)"
					},
					"IQAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAAD4AAAAAAAAAAAAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAABKAAAAAAAAAAAAAABKAAAAAAAAAEsAAAAAAAAAAAAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGEAAAAAAAAAAAAAAGEAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAHcAAAAAAAAAzQAAAAAAAAAAAAAAzQAAAAAAAADOAAAAAAAAAAAAAADOAAAAAAAAAOsAAAAAAAAAAAAAAOsAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAQwEAAAAAAAAAAAAAQwEAAAAAAABEAQAAAAAAAAAAAABEAQAAAAAAAHUBAAAAAAAAAAAAAHUBAAAAAAAAdgEAAAAAAAAAAAAAdgEAAAAAAABGAgAAAAAAAAAAAABGAgAAAAAAAEcCAAAAAAAAAAAAAEcCAAAAAAAAWwIAAAAAAAAAAAAAWwIAAAAAAABcAgAAAAAAAAAAAABcAgAAAAAAAHACAAAAAAAAAAAAAHACAAAAAAAAcQIAAAAAAAAAAAAAcQIAAAAAAAByAgAAAAAAAAAAAAByAgAAAAAAAAEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"js",
				"Pretty JSON: Format JSON"
			],
			[
				"deb",
				"Preferences: Debugger Settings"
			],
			[
				"pretti",
				"JsPrettier: Format Code"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/upload-area.html",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/plot-cv/xml2react.js",
		"/home/roman/Projects/plot-cv/xml2js.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-hash.c",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/test-eagle.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/mmap.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/json/path.js",
		"/home/roman/Projects/plot-cv/lib/pointer.js",
		"/home/roman/Projects/plot-cv/eagle-query.js",
		"/home/roman/Projects/plot-cv/cli-helpers.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/LCCV/include/lccv.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_raspi_cam.cpp",
		"/home/roman/Projects/plot-cv/takephoto.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/xml/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/CMakeLists.txt",
		"/usr/local/include/ffi.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-ffi/ffi.c",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_libcamera_app.cpp",
		"/usr/include/postgresql/libpq-fe.h",
		"/home/roman/Projects/plot-cv/psql.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/test-psql.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/preact-render-to-string.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/instance.js",
		"/home/roman/Projects/plot-cv/lib/repeater/react-hooks.js",
		"/home/roman/Projects/plot-cv/lib/functional.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useTrkl.js",
		"/home/roman/Projects/plot-cv/lib/json/pathMapper.js",
		"/home/janos/Sources/plot-cv/upload.html",
		"/home/janos/Sources/plot-cv/.cmds",
		"/home/janos/Sources/plot-cv/.cmake-format",
		"/home/janos/Sources/plot-cv/.cproject",
		"/home/janos/Sources/plot-cv/test-rpc.js",
		"/home/janos/Sources/plot-cv/test-video.js",
		"/home/janos/Sources/plot-cv/imagePipeline.js",
		"/home/janos/Sources/plot-cv/test-image.js",
		"/home/janos/Sources/plot-cv/midi-tcp.js",
		"/home/janos/Sources/plot-cv/list-proxies.js",
		"/home/janos/Sources/plot-cv/libraries.js",
		"/home/janos/Sources/plot-cv/grammar-geda-netlist.js",
		"/home/janos/Sources/plot-cv/test-membrane.js",
		"/home/janos/Sources/plot-cv/eagle-server.js",
		"/home/janos/Sources/plot-cv/eagle-query.js",
		"/home/janos/Sources/plot-cv/eagle-commands.js",
		"/home/janos/Sources/plot-cv/check-discogs.js",
		"/home/janos/Sources/plot-cv/debugger-server.js",
		"/home/janos/Sources/plot-cv/adsb-server.js",
		"/home/janos/Sources/plot-cv/adsb-client.js",
		"/home/janos/Sources/plot-cv/worker.js",
		"/home/janos/Sources/plot-cv/time-helpers.js",
		"/home/janos/Sources/plot-cv/test-umat.js",
		"/home/janos/Sources/plot-cv/test-quickjs.js",
		"/home/janos/Sources/plot-cv/ws-worker.js",
		"/home/janos/Sources/plot-cv/wscli.js",
		"/home/janos/Sources/plot-cv/test-worker.js",
		"/home/janos/Sources/plot-cv/test-sockets.js",
		"/home/janos/Sources/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/janos/Sources/plot-cv/quickjs/qjs-net/jsutils.c",
		"/home/janos/Sources/plot-cv/quickjs/qjs-net/jsutils.h",
		"/home/janos/Sources/plot-cv/test-net.js",
		"/home/janos/Sources/plot-cv/test-nanovg.js",
		"/home/janos/Sources/plot-cv/test.js",
		"/home/janos/Sources/plot-cv/test-imread.js",
		"/home/janos/Sources/plot-cv/test-glfw.js",
		"/home/janos/Sources/plot-cv/test-features2d.js",
		"/home/janos/Sources/plot-cv/test-diagram.js",
		"/home/janos/Sources/plot-cv/test-cv.js",
		"/home/janos/Sources/plot-cv/test-cli.js",
		"/home/janos/Sources/plot-cv/test-minnet.js",
		"/home/janos/Sources/plot-cv/test-midi.js",
		"/home/janos/Sources/plot-cv/search-engine.js",
		"/home/janos/Sources/plot-cv/plot-cv.js",
		"/home/janos/Sources/plot-cv/param.js",
		"/home/janos/Sources/plot-cv/myworker.js",
		"/home/janos/Sources/plot-cv/make-bitmap.js",
		"/home/janos/Sources/plot-cv/draw-utils.js",
		"/home/janos/Sources/plot-cv/doc-scanner.js",
		"/home/janos/Sources/plot-cv/diagram.js",
		"/home/janos/Sources/plot-cv/cv-shell.js",
		"/home/janos/Sources/plot-cv/ast-shell.js",
		"/home/janos/Sources/plot-cv/test-eagle.js"
	],
	"find":
	{
		"height": 46.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,-*/opencv/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"ParseBody",
			"isObject",
			"^(\\s*)(console)",
			"Recursi",
			"glob\\(",
			"glob",
			"toArrayBuff",
			"rrayFacade",
			"rrayFacadew",
			"isArrowFunct",
			"immutableClass",
			"  }catch(e) { \n",
			"toStringTag",
			"'xpath'",
			"'xpath'0",
			"data-path",
			"lookup",
			"new EaglePath",
			"new EagleReference",
			"'raw2elem",
			"raw2elem",
			"createWS",
			"lws_genhash_init",
			"GetParts",
			"GetPart",
			"ShowPar",
			"ShowPart",
			"elements'",
			"'packages'",
			"'sheets'",
			"lookup",
			"ShowPar",
			"sheets",
			"Pointer",
			"lazyProper",
			"lazyInit",
			"^(\\s*)(console.log)",
			"^\\s*console.log",
			"down\\(",
			"walk",
			"lookup",
			"ref",
			"deref",
			"\\.apply",
			"lookup",
			"depth",
			"className",
			"defineGetter",
			"Util\\.",
			"isNumeric",
			"isNumber",
			"function is",
			"isNumber",
			"Util\\.",
			"lookup",
			"sheets",
			"LocationString",
			"Table",
			"jsm_stack_load",
			"JS_GetEx",
			"finalizer",
			"js_libcamera_app_finalizer",
			"JS_Throw",
			"new RGBA\\((.*)\\)",
			"palette",
			"stack_load",
			"JS_NewString",
			"setPalette",
			"call_func",
			"call_function",
			"rtype",
			"ffi_type_s",
			"function_s",
			"ffi_type_pointer",
			"call_function",
			"ffi_type_pointer",
			"PQerrorMessage",
			"PQerror",
			"PGresult \\*",
			"PQresult",
			"PQconnect",
			"getOpt",
			"isString",
			"Type",
			"end-of",
			"proj",
			"cv::",
			"MakeFFI",
			"newProject",
			"input",
			"Util\\.getArgv",
			"Util\\.",
			"className",
			" }",
			"Util\\.",
			"memoize",
			"Util\\.",
			"extendArray",
			"FindProjects",
			"extendArray",
			"path",
			"POST body",
			"'ws'",
			"files",
			"rpc",
			"test-rpc",
			"rpc",
			"server",
			"net\\.",
			"toString\\(data",
			"toString",
			"next",
			"'Fixed'",
			"font-family",
			"render",
			"data-value",
			"WriteFile",
			"data-value",
			"fromXML",
			"\"'\"",
			"this.doc.lay",
			"WriteFile",
			"console.log\\([^, '\"`]*tagName",
			"console.log\\([^, ]*tagName",
			"console.log\\(.*tagName",
			"console.log(.*tagName",
			"console.*'element'",
			"'element'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\1//\\2",
			"",
			"[\\1]",
			"doc",
			"cv.",
			"upload-server",
			"",
			".getLibrary(\\1)",
			"\\1//\\2",
			"uint32",
			"lstat",
			"ordersGetList",
			"getCacheValue",
			"tlsv",
			"\\1",
			"http",
			"fs.",
			",\\n    '-H', ",
			"Size.getOther(",
			"matrix",
			" cv::CV_",
			"CV_RGB(0, 0, 0)",
			"",
			"point",
			"\\\\D",
			"\\\\d",
			"\\.deref",
			"is_alphanumeric_char",
			"is_whitespace_char",
			"length",
			"{ const",
			"{ return",
			"const  {flags}=this;\\nreturn flags",
			"defines",
			"",
			"fs.\\1Sync",
			"define",
			",",
			"file",
			"target_compile_definitions",
			"msg",
			"PmDeviceInfo",
			"export function",
			"libportmidi",
			"\\1//\\2",
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": null,
							"function_name_status_row": 43,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1661458031.09,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/misc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39289,
						"regions":
						{
						},
						"selection":
						[
							[
								39289,
								39289
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1412,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1661119504.93,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 33501.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 186453,
						"regions":
						{
						},
						"selection":
						[
							[
								41210,
								41210
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1462,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1661440148.58,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 34677.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18691,
						"regions":
						{
							"col_0087FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										11805,
										11818
									],
									[
										12669,
										12682
									],
									[
										12735,
										12748
									],
									[
										13044,
										13057
									],
									[
										16472,
										16485
									],
									[
										17266,
										17279
									]
								],
								"scope": "col_0087FFFF"
							},
							"col_0087FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0087FFFF_circle.png",
								"regions":
								[
									[
										11780,
										11780
									],
									[
										12644,
										12644
									],
									[
										12709,
										12709
									],
									[
										12996,
										12996
									],
									[
										16449,
										16449
									],
									[
										17243,
										17243
									]
								],
								"scope": "col_gutter"
							},
							"col_00AFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										3242,
										3255
									]
								],
								"scope": "col_00AFFFFF"
							},
							"col_00AFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00AFFFFF_circle.png",
								"regions":
								[
									[
										3195,
										3195
									]
								],
								"scope": "col_gutter"
							},
							"col_D700FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										3218,
										3232
									]
								],
								"scope": "col_D700FFFF"
							},
							"col_D700FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D700FFFF_circle.png",
								"regions":
								[
									[
										3195,
										3195
									]
								],
								"scope": "col_gutter"
							},
							"col_FFAF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										16274,
										16288
									]
								],
								"scope": "col_FFAF00FF"
							},
							"col_FFAF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFAF00FF_circle.png",
								"regions":
								[
									[
										16249,
										16249
									]
								],
								"scope": "col_gutter"
							},
							"col_FFAF5FFF":
							{
								"flags": 16,
								"regions":
								[
									[
										11226,
										11240
									]
								],
								"scope": "col_FFAF5FFF"
							},
							"col_FFAF5FFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFAF5FFF_circle.png",
								"regions":
								[
									[
										11199,
										11199
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								12505,
								12505
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 369,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1661461388.77,
							"tabs_extra_last_activated_sheet_index": 2,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8880.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 668290,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": -1,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1661461448.82,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "upload.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 674,
						"regions":
						{
						},
						"selection":
						[
							[
								312,
								312
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 7,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1661457066.13,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs/qjs-modules/tests/test_path.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3345,
						"regions":
						{
						},
						"selection":
						[
							[
								3174,
								3174
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 101,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1661456800.09,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1653.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 769,
						"regions":
						{
						},
						"selection":
						[
							[
								769,
								769
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"auto_indent": false,
							"function_name_status_row": 18,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"tabs_extra_last_activated": 1661455838.24,
							"tabs_extra_last_activated_sheet_index": 5,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.800193517349,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139700989367200)":
	{
		"height": 0.0
	},
	"output.Protocol(139713492737424)":
	{
		"height": 0.0
	},
	"output.Protocol(140020110213280)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752054832)":
	{
		"height": 0.0
	},
	"output.Protocol(140156680251040)":
	{
		"height": 0.0
	},
	"output.Protocol(140190209186352)":
	{
		"height": 0.0
	},
	"output.Protocol(140264240155856)":
	{
		"height": 0.0
	},
	"output.Protocol(140490298408144)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873410144)":
	{
		"height": 0.0
	},
	"output.Protocol(140627243657680)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 84.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"upload.html",
				"upload.html"
			],
			[
				"upload-",
				"upload-area.html"
			],
			[
				"test_path",
				"quickjs/qjs-modules/tests/test_path.js"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"upload",
				"upload-server.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"misc.j",
				"lib/misc.js"
			],
			[
				"xpath.js",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"imports.js",
				"resolve-imports.js"
			],
			[
				"pack",
				"package.json"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"xpath",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"svgren",
				"lib/eagle/svgRenderer.js"
			],
			[
				"board",
				"lib/eagle/boardRenderer.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"node",
				"lib/eagle/node.js"
			],
			[
				"elem",
				"lib/eagle/element.js"
			],
			[
				"quer",
				"eagle-query.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"path.js",
				"lib/json/path.js"
			],
			[
				"pointer.js",
				"lib/pointer.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"xml.js",
				"lib/xml.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"js_ras",
				"qjs-opencv/js_raspi_cam.cpp"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"js_libca",
				"qjs-opencv/js_libcamera_app.cpp"
			],
			[
				"takeph",
				"takephoto.js"
			],
			[
				"ffi.c",
				"quickjs/qjs-ffi/ffi.c"
			],
			[
				"psql",
				"psql.js"
			],
			[
				"eagle-shel",
				"eagle-shell.js"
			],
			[
				"schematic",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"path.h",
				"quickjs/qjs-modules/include/path.h"
			],
			[
				"path.c",
				"quickjs/qjs-modules/src/path.c"
			],
			[
				"xml.c",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"extend",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"index.ht",
				"index.html"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"render-to-s",
				"lib/preact-render-to-string.js"
			],
			[
				"doc",
				"lib/eagle/document.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"docu",
				"lib/eagle/document.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"docum",
				"lib/eagle/document.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"react-hook",
				"lib/repeater/react-hooks.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"instance",
				"lib/eagle/components/instance.js"
			],
			[
				"useTrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"drawing",
				"lib/eagle/components/drawing.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"schema",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"documen",
				"lib/eagle/document.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"svgRend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"pathMapper",
				"lib/json/pathMapper.js"
			],
			[
				"functional",
				"lib/functional.js"
			],
			[
				"svgrend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"schemat",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"list.html",
				"list.html"
			],
			[
				"",
				".cmake-format"
			],
			[
				"imagepip",
				"imagePipeline.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"test-ima",
				"test-image.js"
			],
			[
				"jsutils.h",
				"quickjs/qjs-net/jsutils.h"
			],
			[
				"jsut",
				"quickjs/qjs-net/jsutils.c"
			],
			[
				"cv-she",
				"cv-shell.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"eagle",
				"test-eagle.js"
			],
			[
				"termina",
				"terminal.js"
			],
			[
				"cvPipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"gui.js",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"make-bi",
				"make-bitmap.js"
			],
			[
				"commands",
				"commands.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"virtfs",
				"virtfs.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"quickjs-deep",
				"quickjs/qjs-modules/quickjs-deep.c"
			],
			[
				"eagle-ser",
				"eagle-server.js"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"index.html",
				"index.html"
			],
			[
				"css",
				"lib/grammars/css3.g4"
			],
			[
				"console",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"libs.js",
				"libs.js"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"disco",
				"discogs.js"
			],
			[
				"spawn.",
				"lib/spawn.js"
			],
			[
				"helpers",
				"io-helpers.js.orig"
			],
			[
				"child-",
				"quickjs/qjs-modules/child-process.c"
			],
			[
				"package.j",
				"package.json"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"test-imrea",
				"test-imread.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"cvpipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"events.js",
				"quickjs/qjs-modules/lib/events.js"
			],
			[
				"test-vi",
				"test-video.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"server",
				"server.js"
			],
			[
				"test-wor",
				"test-worker.js"
			],
			[
				"ws-work",
				"ws-worker.js"
			],
			[
				"cvVi",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"ideoSou",
				"videoSource.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 220.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
