{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"skel",
				"skeletonization"
			],
			[
				"Debugger",
				"DebuggerDispatcher"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"B",
				"BOOL"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"js_",
				"js_mysqlresult_class_id"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			],
			[
				"defineP",
				"defineProperties(...)"
			],
			[
				"CMAKE_CURR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"gener",
				"generate_module_header"
			],
			[
				"RINGBUFFER_C",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"RINGBUFFER_CONSU",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"JS_NewArra",
				"JS_NewArrayBufferCopy"
			],
			[
				"RINGBU",
				"RINGBUFFER_INSERT"
			],
			[
				"hea",
				"headers_sent"
			],
			[
				"PR",
				"PRIi64"
			],
			[
				"db",
				"dbuf_init2"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "ParseError\n  constructor(startindex, line, column, type, ...params)\n(_, i) =>\nParseError\n  report(parser, type, ...params)\n  reportScopeError(scope)\n  reportMessageAt(index, line, column, type, ...params)\n  reportScannerError(index, line, column, type)\n  isIDContinue(code)\n  isIDStart(code)\n  mustEscape(code)\n(compressed, lookup) =>\n  advanceChar(parser)\n  consumeMultiUnitCodePoint(parser, hi)\n  consumeLineFeed(parser, state)\n  scanNewLine(parser)\n  isExoticECMAScriptWhitespace(ch)\n  fromCodePoint(codePoint)\n  toHex(code)\n  convertTokenType(t)\n  isIdentifierStart(code)\n  isIdentifierPart(code)\n  skipHashBang(parser)\n  skipSingleHTMLComment(parser, source, state, context, type, start, line, column)\n  skipSingleLineComment(parser, source, state, type, start, line, column)\n  skipMultiLineComment(parser, source, state)\n  scanRegularExpression(parser, context)\n  validate(parser, pattern, flags)\n  scanString(parser, context, quote)\n  parseEscape(parser, context, first)\n  handleStringError(state, code, isTemplate)\n  scanTemplate(parser, context)\n  scanBadTemplate(parser, ch)\n  scanTemplateTail(parser, context)\n  scanNumber(parser, context, kind)\n  scanDecimalDigitsOrSeparator(parser, char)\n  scanIdentifier(parser, context, isValidAsKeyword)\n  scanUnicodeIdentifier(parser, context)\n  scanIdentifierSlowCase(parser, context, hasEscape, isValidAsKeyword)\n  scanPrivateIdentifier(parser)\n  scanIdentifierUnicodeEscape(parser)\n  scanUnicodeEscape(parser)\n  nextToken(parser, context)\n  scanSingleToken(parser, context, state)\n  decodeHTMLStrict(text)\nkey =>\n  decodeCodePoint(codePoint)\n  scanJSXAttributeValue(parser, context)\n  scanJSXString(parser, context)\n  scanJSXToken(parser, context)\n  scanJSXIdentifier(parser)\n  matchOrInsertSemicolon(parser, context, specDeviation)\n  isValidStrictMode(parser, index, tokenPos, tokenValue)\n  optionalBit(parser, context, t)\n  consumeOpt(parser, context, t)\n  consume(parser, context, t)\n  reinterpretToPattern(state, node)\n  validateBindingIdentifier(parser, context, kind, t, skipEvalArgCheck)\n  validateFunctionName(parser, context, t)\n  isStrictReservedWord(parser, context, t)\n  isPropertyWithPrivateFieldKey(expr)\n  isValidLabel(parser, labels, name, isIterationStatement)\n  validateAndDeclareLabel(parser, labels, name)\n  finishNode(parser, context, start, line, column, node)\n  isEqualTagName(elementName)\n  createArrowHeadParsingScope(parser, context, value)\n  recordScopeError(parser, type, ...params)\n  createScope()\n  addChildScope(parent, type)\n  addVarOrBlock(parser, context, scope, name, kind, origin)\n  addBlockName(parser, context, scope, name, kind, origin)\n  addVarName(parser, context, scope, name, kind)\n  declareUnboundVariable(parser, name)\n  addBindingToExports(parser, name)\n  pushComment(context, array)\nfunction(type, value, start, end, loc)\n  pushToken(context, array)\nfunction(token, start, end, loc)\n  isValidIdentifier(context, t)\n  classifyIdentifier(parser, context, t, isArrow)\n  create(source, sourceFile, onComment, onToken)\n  parseSource(source, options, context)\n  parseStatementList(parser, context, scope)\n  parseModuleItemList(parser, context, scope)\n  parseModuleItem(parser, context, scope)\n  parseStatementListItem(parser, context, scope, origin, labels)\n  parseStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)\n  parseExpressionOrLabelledStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)\n  parseBlock(parser, context, scope, labels, start, line, column)\n  parseReturnStatement(parser, context, start, line, column)\n  parseExpressionStatement(parser, context, expression, start, line, column)\n  parseLabelledStatement(parser, context, scope, origin, labels, value, expr, token, allowFuncDecl, start, line, column)\n  parseAsyncArrowOrAsyncFunctionDeclaration(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)\n  parseDirective(parser, context, expression, token, start, line, column)\n  parseEmptyStatement(parser, context, start, line, column)\n  parseThrowStatement(parser, context, start, line, column)\n  parseIfStatement(parser, context, scope, labels, start, line, column)\n  parseConsequentOrAlternative(parser, context, scope, labels, start, line, column)\n  parseSwitchStatement(parser, context, scope, labels, start, line, column)\n  parseWhileStatement(parser, context, scope, labels, start, line, column)\n  parseIterationStatementBody(parser, context, scope, labels)\n  parseContinueStatement(parser, context, labels, start, line, column)\n  parseBreakStatement(parser, context, labels, start, line, column)\n  parseWithStatement(parser, context, scope, labels, start, line, column)\n  parseDebuggerStatement(parser, context, start, line, column)\n  parseTryStatement(parser, context, scope, labels, start, line, column)\n  parseCatchBlock(parser, context, scope, labels, start, line, column)\n  parseStaticBlock(parser, context, scope, start, line, column)\n  parseDoWhileStatement(parser, context, scope, labels, start, line, column)\n  parseLetIdentOrVarDeclarationStatement(parser, context, scope, origin, start, line, column)\n  parseLexicalDeclaration(parser, context, scope, kind, origin, start, line, column)\n  parseVariableStatement(parser, context, scope, origin, start, line, column)\n  parseVariableDeclarationList(parser, context, scope, kind, origin)\n  parseVariableDeclaration(parser, context, scope, kind, origin)\n  parseForStatement(parser, context, scope, labels, start, line, column)\n  parseRestrictedIdentifier(parser, context, scope)\n  parseImportDeclaration(parser, context, scope)\n  parseImportNamespaceSpecifier(parser, context, scope)\n  parseModuleSpecifier(parser, context)\n  parseImportSpecifierOrNamedImports(parser, context, scope, specifiers)\n  parseImportMetaDeclaration(parser, context, start, line, column)\n  parseImportCallDeclaration(parser, context, start, line, column)\n  parseExportDeclaration(parser, context, scope)\n  parseExpression(parser, context, canAssign, isPattern, inGroup, start, line, column)\n  parseSequenceExpression(parser, context, inGroup, start, line, column, expr)\n  parseExpressions(parser, context, inGroup, canAssign, start, line, column)\n  parseAssignmentExpression(parser, context, inGroup, isPattern, start, line, column, left)\n  parseAssignmentExpressionOrPattern(parser, context, inGroup, isPattern, start, line, column, left)\n  parseConditionalExpression(parser, context, test, start, line, column)\n  parseBinaryExpression(parser, context, inGroup, start, line, column, minPrec, operator, left)\n  parseUnaryExpression(parser, context, isLHS, start, line, column, inGroup)\n  parseAsyncExpression(parser, context, inGroup, isLHS, canAssign, isPattern, inNew, start, line, column)\n  parseYieldExpression(parser, context, inGroup, canAssign, start, line, column)\n  parseAwaitExpression(parser, context, inNew, inGroup, start, line, column)\n  parseFunctionBody(parser, context, scope, origin, firstRestricted, scopeError)\n  parseSuperExpression(parser, context, start, line, column)\n  parseLeftHandSideExpression(parser, context, canAssign, inGroup, isLHS, start, line, column)\n  parseUpdateExpression(parser, context, expr, start, line, column)\n  parseMemberOrUpdateExpression(parser, context, expr, inGroup, inChain, start, line, column)\n  parseOptionalChain(parser, context, expr, start, line, column)\n  parsePropertyOrPrivatePropertyName(parser, context)\n  parseUpdateExpressionPrefixed(parser, context, inNew, isLHS, start, line, column)\n  parsePrimaryExpression(parser, context, kind, inNew, canAssign, isPattern, inGroup, isLHS, start, line, column)\n  parseImportCallOrMetaExpression(parser, context, inNew, inGroup, start, line, column)\n  parseImportMetaExpression(parser, context, meta, start, line, column)\n  parseImportExpression(parser, context, inGroup, start, line, column)\n  parseBigIntLiteral(parser, context, start, line, column)\n  parseTemplateLiteral(parser, context, start, line, column)\n  parseTemplate(parser, context)\n  parseTemplateElement(parser, context, cooked, raw, start, line, col, tail)\n  parseSpreadElement(parser, context, start, line, column)\n  parseArguments(parser, context, inGroup)\n  parseIdentifier(parser, context, isPattern)\n  parseLiteral(parser, context)\n  parseNullOrTrueOrFalseLiteral(parser, context, start, line, column)\n  parseThisExpression(parser, context)\n  parseFunctionDeclaration(parser, context, scope, origin, allowGen, flags, isAsync, start, line, column)\n  parseFunctionExpression(parser, context, isAsync, inGroup, start, line, column)\n  parseArrayLiteral(parser, context, skipInitializer, inGroup, start, line, column)\n  parseArrayExpressionOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)\n  parseArrayOrObjectAssignmentPattern(parser, context, destructible, inGroup, isPattern, start, line, column, node)\n  parseSpreadOrRestElement(parser, context, scope, closingToken, kind, origin, isAsync, inGroup, isPattern, start, line, column)\n  parseMethodDefinition(parser, context, kind, inGroup, start, line, column)\n  parseObjectLiteral(parser, context, skipInitializer, inGroup, start, line, column)\n  parseObjectLiteralOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)\n  parseMethodFormals(parser, context, scope, kind, type, inGroup)\n  parseComputedPropertyName(parser, context, inGroup)\n  parseParenthesizedExpression(parser, context, canAssign, kind, origin, start, line, column)\n  parseIdentifierOrArrow(parser, context, start, line, column)\n  parseArrowFromIdentifier(parser, context, value, expr, inNew, canAssign, isAsync, start, line, column)\n  parseParenthesizedArrow(parser, context, scope, params, canAssign, isAsync, start, line, column)\n  parseArrowFunctionExpression(parser, context, scope, params, isAsync, start, line, column)\n  parseFormalParametersOrFormalList(parser, context, scope, inGroup, kind)\n  parseMembeExpressionNoCall(parser, context, expr, inGroup, start, line, column)\n  parseNewExpression(parser, context, inGroup, start, line, column)\n  parseMetaProperty(parser, context, meta, start, line, column)\n  parseAsyncArrowAfterIdent(parser, context, canAssign, start, line, column)\n  parseAsyncArrowOrCallExpression(parser, context, callee, canAssign, kind, origin, flags, start, line, column)\n  parseRegExpLiteral(parser, context, start, line, column)\n  parseClassDeclaration(parser, context, scope, flags, start, line, column)\n  parseClassExpression(parser, context, inGroup, start, line, column)\n  parseDecorators(parser, context)\n  parseDecoratorList(parser, context, start, line, column)\n  parseClassBody(parser, context, inheritedContext, scope, kind, origin, inGroup)\n  parseClassElementList(parser, context, scope, inheritedContext, type, decorators, isStatic, inGroup, start, line, column)\n  parsePrivateIdentifier(parser, context, start, line, column)\n  parsePropertyDefinition(parser, context, key, state, decorators, start, line, column)\n  parseBindingPattern(parser, context, scope, type, origin, start, line, column)\n  parseAndClassifyIdentifier(parser, context, scope, kind, origin, start, line, column)\n  parseJSXRootElementOrFragment(parser, context, inJSXChild, start, line, column)\n  parseOpeningFragment(parser, context, start, line, column)\n  parseJSXClosingElement(parser, context, inJSXChild, start, line, column)\n  parseJSXClosingFragment(parser, context, inJSXChild, start, line, column)\n  parseJSXChildren(parser, context)\n  parseJSXChild(parser, context, start, line, column)\n  parseJSXText(parser, context, start, line, column)\n  parseJSXOpeningFragmentOrSelfCloseElement(parser, context, inJSXChild, start, line, column)\n  parseJSXElementName(parser, context, start, line, column)\n  parseJSXMemberExpression(parser, context, object, start, line, column)\n  parseJSXAttributes(parser, context)\n  parseJSXSpreadAttribute(parser, context, start, line, column)\n  parseJsxAttribute(parser, context, start, line, column)\n  parseJSXNamespacedName(parser, context, namespace, start, line, column)\n  parseJSXExpressionContainer(parser, context, inJSXChild, isAttr, start, line, column)\n  parseJSXSpreadChild(parser, context, start, line, column)\n  parseJSXEmptyExpression(parser, context, start, line, column)\n  parseJSXIdentifier(parser, context, start, line, column)\n  parseScript(source, options)\n  parseModule(source, options)\n  parse(source, options)",
			"settings":
			{
				"buffer_size": 12422,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/meriyah.js",
						"symkeys":
						[
							[
								9895,
								9905
							],
							[
								9930,
								9984
							],
							[
								10081,
								10091
							],
							[
								10294,
								10304
							],
							[
								10352,
								10392
							],
							[
								10481,
								10513
							],
							[
								10608,
								10670
							],
							[
								10738,
								10792
							],
							[
								11169,
								11196
							],
							[
								11272,
								11296
							],
							[
								11376,
								11401
							],
							[
								11504,
								11527
							],
							[
								29784,
								29812
							],
							[
								29911,
								29957
							],
							[
								30334,
								30373
							],
							[
								30537,
								30565
							],
							[
								30695,
								30736
							],
							[
								30915,
								30948
							],
							[
								31097,
								31117
							],
							[
								31180,
								31208
							],
							[
								34194,
								34226
							],
							[
								34331,
								34362
							],
							[
								34716,
								34745
							],
							[
								35014,
								35103
							],
							[
								35231,
								35311
							],
							[
								36294,
								36346
							],
							[
								38109,
								38156
							],
							[
								40153,
								40194
							],
							[
								40773,
								40816
							],
							[
								41785,
								41829
							],
							[
								45367,
								45418
							],
							[
								45771,
								45809
							],
							[
								47287,
								47323
							],
							[
								47838,
								47880
							],
							[
								48266,
								48308
							],
							[
								53268,
								53319
							],
							[
								57541,
								57599
							],
							[
								57898,
								57945
							],
							[
								58193,
								58270
							],
							[
								60069,
								60107
							],
							[
								60193,
								60237
							],
							[
								60435,
								60469
							],
							[
								62625,
								62660
							],
							[
								63197,
								63245
							],
							[
								119618,
								119649
							],
							[
								119715,
								119722
							],
							[
								120023,
								120058
							],
							[
								120402,
								120449
							],
							[
								120761,
								120800
							],
							[
								121261,
								121299
							],
							[
								122618,
								122652
							],
							[
								123211,
								123274
							],
							[
								123480,
								123543
							],
							[
								123715,
								123755
							],
							[
								123838,
								123877
							],
							[
								123967,
								124003
							],
							[
								124111,
								124153
							],
							[
								125112,
								125190
							],
							[
								125676,
								125725
							],
							[
								126226,
								126275
							],
							[
								126531,
								126575
							],
							[
								126659,
								126724
							],
							[
								126963,
								127017
							],
							[
								127159,
								127222
							],
							[
								127632,
								127668
							],
							[
								127995,
								128055
							],
							[
								128182,
								128232
							],
							[
								128350,
								128372
							],
							[
								128426,
								128462
							],
							[
								128529,
								128595
							],
							[
								128813,
								128878
							],
							[
								129547,
								129602
							],
							[
								130326,
								130371
							],
							[
								130560,
								130602
							],
							[
								130715,
								130751
							],
							[
								130762,
								130801
							],
							[
								131061,
								131095
							],
							[
								131106,
								131139
							],
							[
								131381,
								131419
							],
							[
								131718,
								131774
							],
							[
								132076,
								132131
							],
							[
								132629,
								132675
							],
							[
								134717,
								134768
							],
							[
								135327,
								135379
							],
							[
								135821,
								135869
							],
							[
								136355,
								136426
							],
							[
								137672,
								137771
							],
							[
								139806,
								139925
							],
							[
								140876,
								140948
							],
							[
								141293,
								141360
							],
							[
								141788,
								141871
							],
							[
								142042,
								142169
							],
							[
								142813,
								142939
							],
							[
								144540,
								144620
							],
							[
								145515,
								145581
							],
							[
								145718,
								145784
							],
							[
								146137,
								146215
							],
							[
								146950,
								147040
							],
							[
								147342,
								147424
							],
							[
								148800,
								148881
							],
							[
								149296,
								149364
							],
							[
								149534,
								149611
							],
							[
								150116,
								150190
							],
							[
								150722,
								150802
							],
							[
								151302,
								151371
							],
							[
								151562,
								151641
							],
							[
								152549,
								152626
							],
							[
								153406,
								153476
							],
							[
								153807,
								153890
							],
							[
								154393,
								154493
							],
							[
								155806,
								155897
							],
							[
								156229,
								156313
							],
							[
								156621,
								156696
							],
							[
								157099,
								157170
							],
							[
								158102,
								158181
							],
							[
								163127,
								163185
							],
							[
								163449,
								163504
							],
							[
								165310,
								165372
							],
							[
								165815,
								165861
							],
							[
								166009,
								166088
							],
							[
								167105,
								167178
							],
							[
								167651,
								167724
							],
							[
								168091,
								168146
							],
							[
								174273,
								174366
							],
							[
								174675,
								174760
							],
							[
								175084,
								175167
							],
							[
								175382,
								175480
							],
							[
								176611,
								176718
							],
							[
								177273,
								177352
							],
							[
								177838,
								177940
							],
							[
								178950,
								179033
							],
							[
								179735,
								179847
							],
							[
								180715,
								180802
							],
							[
								181662,
								181745
							],
							[
								182468,
								182555
							],
							[
								184363,
								184430
							],
							[
								185027,
								185128
							],
							[
								185355,
								185429
							],
							[
								185745,
								185845
							],
							[
								189089,
								189160
							],
							[
								190596,
								190656
							],
							[
								190936,
								191026
							],
							[
								191539,
								191659
							],
							[
								195058,
								195152
							],
							[
								195561,
								195639
							],
							[
								196022,
								196099
							],
							[
								196451,
								196516
							],
							[
								196979,
								197046
							],
							[
								197425,
								197464
							],
							[
								198752,
								198835
							],
							[
								199259,
								199324
							],
							[
								199658,
								199707
							],
							[
								200308,
								200360
							],
							[
								200760,
								200798
							],
							[
								201326,
								201402
							],
							[
								201822,
								201867
							],
							[
								202075,
								202187
							],
							[
								204006,
								204094
							],
							[
								205299,
								205389
							],
							[
								205675,
								205809
							],
							[
								210743,
								210865
							],
							[
								211658,
								211793
							],
							[
								216418,
								216501
							],
							[
								217163,
								217254
							],
							[
								217538,
								217670
							],
							[
								237639,
								237711
							],
							[
								240073,
								240133
							],
							[
								240360,
								240460
							],
							[
								245699,
								245768
							],
							[
								246186,
								246297
							],
							[
								246590,
								246695
							],
							[
								246921,
								247020
							],
							[
								248426,
								248507
							],
							[
								250646,
								250734
							],
							[
								252453,
								252527
							],
							[
								253546,
								253616
							],
							[
								253793,
								253876
							],
							[
								254246,
								254364
							],
							[
								258773,
								258838
							],
							[
								259292,
								259374
							],
							[
								261155,
								261231
							],
							[
								262566,
								262607
							],
							[
								262813,
								262878
							],
							[
								263227,
								263315
							],
							[
								264284,
								264414
							],
							[
								269008,
								269077
							],
							[
								269350,
								269444
							],
							[
								270395,
								270482
							],
							[
								271084,
								271178
							],
							[
								271918,
								272006
							],
							[
								273094,
								273161
							],
							[
								273297,
								273378
							],
							[
								273746,
								273828
							],
							[
								274075,
								274117
							],
							[
								274497,
								274557
							],
							[
								274891,
								274950
							],
							[
								275184,
								275284
							],
							[
								275982,
								276048
							],
							[
								276430,
								276509
							],
							[
								276743,
								276787
							],
							[
								277040,
								277110
							],
							[
								277453,
								277517
							],
							[
								278529,
								278609
							],
							[
								278868,
								278962
							],
							[
								279687,
								279753
							],
							[
								280052,
								280122
							],
							[
								280337,
								280402
							],
							[
								281029,
								281067
							],
							[
								281121,
								281159
							],
							[
								281223,
								281255
							]
						],
						"symlist":
						[
							"ParseError",
							"constructor(startindex, line, column, type, ...params)",
							" (_, i) =>",
							"ParseError",
							"function report(parser, type, ...params)",
							"function reportScopeError(scope)",
							"function reportMessageAt(index, line, column, type, ...params)",
							"function reportScannerError(index, line, column, type)",
							"function isIDContinue(code)",
							"function isIDStart(code)",
							"function mustEscape(code)",
							"(compressed, lookup) =>",
							"function advanceChar(parser)",
							"function consumeMultiUnitCodePoint(parser, hi)",
							"function consumeLineFeed(parser, state)",
							"function scanNewLine(parser)",
							"function isExoticECMAScriptWhitespace(ch)",
							"function fromCodePoint(codePoint)",
							"function toHex(code)",
							"function convertTokenType(t)",
							"function isIdentifierStart(code)",
							"function isIdentifierPart(code)",
							"function skipHashBang(parser)",
							"function skipSingleHTMLComment(parser, source, state, context, type, start, line, column)",
							"function skipSingleLineComment(parser, source, state, type, start, line, column)",
							"function skipMultiLineComment(parser, source, state)",
							"function scanRegularExpression(parser, context)",
							"function validate(parser, pattern, flags)",
							"function scanString(parser, context, quote)",
							"function parseEscape(parser, context, first)",
							"function handleStringError(state, code, isTemplate)",
							"function scanTemplate(parser, context)",
							"function scanBadTemplate(parser, ch)",
							"function scanTemplateTail(parser, context)",
							"function scanNumber(parser, context, kind)",
							"function scanDecimalDigitsOrSeparator(parser, char)",
							"function scanIdentifier(parser, context, isValidAsKeyword)",
							"function scanUnicodeIdentifier(parser, context)",
							"function scanIdentifierSlowCase(parser, context, hasEscape, isValidAsKeyword)",
							"function scanPrivateIdentifier(parser)",
							"function scanIdentifierUnicodeEscape(parser)",
							"function scanUnicodeEscape(parser)",
							"function nextToken(parser, context)",
							"function scanSingleToken(parser, context, state)",
							"function decodeHTMLStrict(text)",
							" key =>",
							"function decodeCodePoint(codePoint)",
							"function scanJSXAttributeValue(parser, context)",
							"function scanJSXString(parser, context)",
							"function scanJSXToken(parser, context)",
							"function scanJSXIdentifier(parser)",
							"function matchOrInsertSemicolon(parser, context, specDeviation)",
							"function isValidStrictMode(parser, index, tokenPos, tokenValue)",
							"function optionalBit(parser, context, t)",
							"function consumeOpt(parser, context, t)",
							"function consume(parser, context, t)",
							"function reinterpretToPattern(state, node)",
							"function validateBindingIdentifier(parser, context, kind, t, skipEvalArgCheck)",
							"function validateFunctionName(parser, context, t)",
							"function isStrictReservedWord(parser, context, t)",
							"function isPropertyWithPrivateFieldKey(expr)",
							"function isValidLabel(parser, labels, name, isIterationStatement)",
							"function validateAndDeclareLabel(parser, labels, name)",
							"function finishNode(parser, context, start, line, column, node)",
							"function isEqualTagName(elementName)",
							"function createArrowHeadParsingScope(parser, context, value)",
							"function recordScopeError(parser, type, ...params)",
							"function createScope()",
							"function addChildScope(parent, type)",
							"function addVarOrBlock(parser, context, scope, name, kind, origin)",
							"function addBlockName(parser, context, scope, name, kind, origin)",
							"function addVarName(parser, context, scope, name, kind)",
							"function declareUnboundVariable(parser, name)",
							"function addBindingToExports(parser, name)",
							"function pushComment(context, array)",
							" function(type, value, start, end, loc)",
							"function pushToken(context, array)",
							" function(token, start, end, loc)",
							"function isValidIdentifier(context, t)",
							"function classifyIdentifier(parser, context, t, isArrow)",
							"function create(source, sourceFile, onComment, onToken)",
							"function parseSource(source, options, context)",
							"function parseStatementList(parser, context, scope)",
							"function parseModuleItemList(parser, context, scope)",
							"function parseModuleItem(parser, context, scope)",
							"function parseStatementListItem(parser, context, scope, origin, labels)",
							"function parseStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseExpressionOrLabelledStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseBlock(parser, context, scope, labels, start, line, column)",
							"function parseReturnStatement(parser, context, start, line, column)",
							"function parseExpressionStatement(parser, context, expression, start, line, column)",
							"function parseLabelledStatement(parser, context, scope, origin, labels, value, expr, token, allowFuncDecl, start, line, column)",
							"function parseAsyncArrowOrAsyncFunctionDeclaration(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseDirective(parser, context, expression, token, start, line, column)",
							"function parseEmptyStatement(parser, context, start, line, column)",
							"function parseThrowStatement(parser, context, start, line, column)",
							"function parseIfStatement(parser, context, scope, labels, start, line, column)",
							"function parseConsequentOrAlternative(parser, context, scope, labels, start, line, column)",
							"function parseSwitchStatement(parser, context, scope, labels, start, line, column)",
							"function parseWhileStatement(parser, context, scope, labels, start, line, column)",
							"function parseIterationStatementBody(parser, context, scope, labels)",
							"function parseContinueStatement(parser, context, labels, start, line, column)",
							"function parseBreakStatement(parser, context, labels, start, line, column)",
							"function parseWithStatement(parser, context, scope, labels, start, line, column)",
							"function parseDebuggerStatement(parser, context, start, line, column)",
							"function parseTryStatement(parser, context, scope, labels, start, line, column)",
							"function parseCatchBlock(parser, context, scope, labels, start, line, column)",
							"function parseStaticBlock(parser, context, scope, start, line, column)",
							"function parseDoWhileStatement(parser, context, scope, labels, start, line, column)",
							"function parseLetIdentOrVarDeclarationStatement(parser, context, scope, origin, start, line, column)",
							"function parseLexicalDeclaration(parser, context, scope, kind, origin, start, line, column)",
							"function parseVariableStatement(parser, context, scope, origin, start, line, column)",
							"function parseVariableDeclarationList(parser, context, scope, kind, origin)",
							"function parseVariableDeclaration(parser, context, scope, kind, origin)",
							"function parseForStatement(parser, context, scope, labels, start, line, column)",
							"function parseRestrictedIdentifier(parser, context, scope)",
							"function parseImportDeclaration(parser, context, scope)",
							"function parseImportNamespaceSpecifier(parser, context, scope)",
							"function parseModuleSpecifier(parser, context)",
							"function parseImportSpecifierOrNamedImports(parser, context, scope, specifiers)",
							"function parseImportMetaDeclaration(parser, context, start, line, column)",
							"function parseImportCallDeclaration(parser, context, start, line, column)",
							"function parseExportDeclaration(parser, context, scope)",
							"function parseExpression(parser, context, canAssign, isPattern, inGroup, start, line, column)",
							"function parseSequenceExpression(parser, context, inGroup, start, line, column, expr)",
							"function parseExpressions(parser, context, inGroup, canAssign, start, line, column)",
							"function parseAssignmentExpression(parser, context, inGroup, isPattern, start, line, column, left)",
							"function parseAssignmentExpressionOrPattern(parser, context, inGroup, isPattern, start, line, column, left)",
							"function parseConditionalExpression(parser, context, test, start, line, column)",
							"function parseBinaryExpression(parser, context, inGroup, start, line, column, minPrec, operator, left)",
							"function parseUnaryExpression(parser, context, isLHS, start, line, column, inGroup)",
							"function parseAsyncExpression(parser, context, inGroup, isLHS, canAssign, isPattern, inNew, start, line, column)",
							"function parseYieldExpression(parser, context, inGroup, canAssign, start, line, column)",
							"function parseAwaitExpression(parser, context, inNew, inGroup, start, line, column)",
							"function parseFunctionBody(parser, context, scope, origin, firstRestricted, scopeError)",
							"function parseSuperExpression(parser, context, start, line, column)",
							"function parseLeftHandSideExpression(parser, context, canAssign, inGroup, isLHS, start, line, column)",
							"function parseUpdateExpression(parser, context, expr, start, line, column)",
							"function parseMemberOrUpdateExpression(parser, context, expr, inGroup, inChain, start, line, column)",
							"function parseOptionalChain(parser, context, expr, start, line, column)",
							"function parsePropertyOrPrivatePropertyName(parser, context)",
							"function parseUpdateExpressionPrefixed(parser, context, inNew, isLHS, start, line, column)",
							"function parsePrimaryExpression(parser, context, kind, inNew, canAssign, isPattern, inGroup, isLHS, start, line, column)",
							"function parseImportCallOrMetaExpression(parser, context, inNew, inGroup, start, line, column)",
							"function parseImportMetaExpression(parser, context, meta, start, line, column)",
							"function parseImportExpression(parser, context, inGroup, start, line, column)",
							"function parseBigIntLiteral(parser, context, start, line, column)",
							"function parseTemplateLiteral(parser, context, start, line, column)",
							"function parseTemplate(parser, context)",
							"function parseTemplateElement(parser, context, cooked, raw, start, line, col, tail)",
							"function parseSpreadElement(parser, context, start, line, column)",
							"function parseArguments(parser, context, inGroup)",
							"function parseIdentifier(parser, context, isPattern)",
							"function parseLiteral(parser, context)",
							"function parseNullOrTrueOrFalseLiteral(parser, context, start, line, column)",
							"function parseThisExpression(parser, context)",
							"function parseFunctionDeclaration(parser, context, scope, origin, allowGen, flags, isAsync, start, line, column)",
							"function parseFunctionExpression(parser, context, isAsync, inGroup, start, line, column)",
							"function parseArrayLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
							"function parseArrayExpressionOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
							"function parseArrayOrObjectAssignmentPattern(parser, context, destructible, inGroup, isPattern, start, line, column, node)",
							"function parseSpreadOrRestElement(parser, context, scope, closingToken, kind, origin, isAsync, inGroup, isPattern, start, line, column)",
							"function parseMethodDefinition(parser, context, kind, inGroup, start, line, column)",
							"function parseObjectLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
							"function parseObjectLiteralOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
							"function parseMethodFormals(parser, context, scope, kind, type, inGroup)",
							"function parseComputedPropertyName(parser, context, inGroup)",
							"function parseParenthesizedExpression(parser, context, canAssign, kind, origin, start, line, column)",
							"function parseIdentifierOrArrow(parser, context, start, line, column)",
							"function parseArrowFromIdentifier(parser, context, value, expr, inNew, canAssign, isAsync, start, line, column)",
							"function parseParenthesizedArrow(parser, context, scope, params, canAssign, isAsync, start, line, column)",
							"function parseArrowFunctionExpression(parser, context, scope, params, isAsync, start, line, column)",
							"function parseFormalParametersOrFormalList(parser, context, scope, inGroup, kind)",
							"function parseMembeExpressionNoCall(parser, context, expr, inGroup, start, line, column)",
							"function parseNewExpression(parser, context, inGroup, start, line, column)",
							"function parseMetaProperty(parser, context, meta, start, line, column)",
							"function parseAsyncArrowAfterIdent(parser, context, canAssign, start, line, column)",
							"function parseAsyncArrowOrCallExpression(parser, context, callee, canAssign, kind, origin, flags, start, line, column)",
							"function parseRegExpLiteral(parser, context, start, line, column)",
							"function parseClassDeclaration(parser, context, scope, flags, start, line, column)",
							"function parseClassExpression(parser, context, inGroup, start, line, column)",
							"function parseDecorators(parser, context)",
							"function parseDecoratorList(parser, context, start, line, column)",
							"function parseClassBody(parser, context, inheritedContext, scope, kind, origin, inGroup)",
							"function parseClassElementList(parser, context, scope, inheritedContext, type, decorators, isStatic, inGroup, start, line, column)",
							"function parsePrivateIdentifier(parser, context, start, line, column)",
							"function parsePropertyDefinition(parser, context, key, state, decorators, start, line, column)",
							"function parseBindingPattern(parser, context, scope, type, origin, start, line, column)",
							"function parseAndClassifyIdentifier(parser, context, scope, kind, origin, start, line, column)",
							"function parseJSXRootElementOrFragment(parser, context, inJSXChild, start, line, column)",
							"function parseOpeningFragment(parser, context, start, line, column)",
							"function parseJSXClosingElement(parser, context, inJSXChild, start, line, column)",
							"function parseJSXClosingFragment(parser, context, inJSXChild, start, line, column)",
							"function parseJSXChildren(parser, context)",
							"function parseJSXChild(parser, context, start, line, column)",
							"function parseJSXText(parser, context, start, line, column)",
							"function parseJSXOpeningFragmentOrSelfCloseElement(parser, context, inJSXChild, start, line, column)",
							"function parseJSXElementName(parser, context, start, line, column)",
							"function parseJSXMemberExpression(parser, context, object, start, line, column)",
							"function parseJSXAttributes(parser, context)",
							"function parseJSXSpreadAttribute(parser, context, start, line, column)",
							"function parseJsxAttribute(parser, context, start, line, column)",
							"function parseJSXNamespacedName(parser, context, namespace, start, line, column)",
							"function parseJSXExpressionContainer(parser, context, inJSXChild, isAttr, start, line, column)",
							"function parseJSXSpreadChild(parser, context, start, line, column)",
							"function parseJSXEmptyExpression(parser, context, start, line, column)",
							"function parseJSXIdentifier(parser, context, start, line, column)",
							" function parseScript(source, options)",
							" function parseModule(source, options)",
							" function parse(source, options)"
						]
					},
					"AQAAAAAAAAAAAAAAhjAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/meriyah.js",
						"symkeys":
						[
							[
								9895,
								9905
							],
							[
								9930,
								9984
							],
							[
								10081,
								10091
							],
							[
								10294,
								10304
							],
							[
								10352,
								10392
							],
							[
								10481,
								10513
							],
							[
								10608,
								10670
							],
							[
								10738,
								10792
							],
							[
								11169,
								11196
							],
							[
								11272,
								11296
							],
							[
								11376,
								11401
							],
							[
								11504,
								11527
							],
							[
								29784,
								29812
							],
							[
								29911,
								29957
							],
							[
								30334,
								30373
							],
							[
								30537,
								30565
							],
							[
								30695,
								30736
							],
							[
								30915,
								30948
							],
							[
								31097,
								31117
							],
							[
								31180,
								31208
							],
							[
								34194,
								34226
							],
							[
								34331,
								34362
							],
							[
								34716,
								34745
							],
							[
								35014,
								35103
							],
							[
								35231,
								35311
							],
							[
								36294,
								36346
							],
							[
								38109,
								38156
							],
							[
								40153,
								40194
							],
							[
								40773,
								40816
							],
							[
								41785,
								41829
							],
							[
								45367,
								45418
							],
							[
								45771,
								45809
							],
							[
								47287,
								47323
							],
							[
								47838,
								47880
							],
							[
								48266,
								48308
							],
							[
								53268,
								53319
							],
							[
								57541,
								57599
							],
							[
								57898,
								57945
							],
							[
								58193,
								58270
							],
							[
								60069,
								60107
							],
							[
								60193,
								60237
							],
							[
								60435,
								60469
							],
							[
								62625,
								62660
							],
							[
								63197,
								63245
							],
							[
								119618,
								119649
							],
							[
								119715,
								119722
							],
							[
								120023,
								120058
							],
							[
								120402,
								120449
							],
							[
								120761,
								120800
							],
							[
								121261,
								121299
							],
							[
								122618,
								122652
							],
							[
								123211,
								123274
							],
							[
								123480,
								123543
							],
							[
								123715,
								123755
							],
							[
								123838,
								123877
							],
							[
								123967,
								124003
							],
							[
								124111,
								124153
							],
							[
								125112,
								125190
							],
							[
								125676,
								125725
							],
							[
								126226,
								126275
							],
							[
								126531,
								126575
							],
							[
								126659,
								126724
							],
							[
								126963,
								127017
							],
							[
								127159,
								127222
							],
							[
								127632,
								127668
							],
							[
								127995,
								128055
							],
							[
								128182,
								128232
							],
							[
								128350,
								128372
							],
							[
								128426,
								128462
							],
							[
								128529,
								128595
							],
							[
								128813,
								128878
							],
							[
								129547,
								129602
							],
							[
								130326,
								130371
							],
							[
								130560,
								130602
							],
							[
								130715,
								130751
							],
							[
								130762,
								130801
							],
							[
								131061,
								131095
							],
							[
								131106,
								131139
							],
							[
								131381,
								131419
							],
							[
								131718,
								131774
							],
							[
								132076,
								132131
							],
							[
								132629,
								132675
							],
							[
								134717,
								134768
							],
							[
								135327,
								135379
							],
							[
								135821,
								135869
							],
							[
								136355,
								136426
							],
							[
								137672,
								137771
							],
							[
								139806,
								139925
							],
							[
								140876,
								140948
							],
							[
								141293,
								141360
							],
							[
								141788,
								141871
							],
							[
								142042,
								142169
							],
							[
								142813,
								142939
							],
							[
								144540,
								144620
							],
							[
								145515,
								145581
							],
							[
								145718,
								145784
							],
							[
								146137,
								146215
							],
							[
								146950,
								147040
							],
							[
								147342,
								147424
							],
							[
								148800,
								148881
							],
							[
								149296,
								149364
							],
							[
								149534,
								149611
							],
							[
								150116,
								150190
							],
							[
								150722,
								150802
							],
							[
								151302,
								151371
							],
							[
								151562,
								151641
							],
							[
								152549,
								152626
							],
							[
								153406,
								153476
							],
							[
								153807,
								153890
							],
							[
								154393,
								154493
							],
							[
								155806,
								155897
							],
							[
								156229,
								156313
							],
							[
								156621,
								156696
							],
							[
								157099,
								157170
							],
							[
								158102,
								158181
							],
							[
								163127,
								163185
							],
							[
								163449,
								163504
							],
							[
								165310,
								165372
							],
							[
								165815,
								165861
							],
							[
								166009,
								166088
							],
							[
								167105,
								167178
							],
							[
								167651,
								167724
							],
							[
								168091,
								168146
							],
							[
								174273,
								174366
							],
							[
								174675,
								174760
							],
							[
								175084,
								175167
							],
							[
								175382,
								175480
							],
							[
								176611,
								176718
							],
							[
								177273,
								177352
							],
							[
								177838,
								177940
							],
							[
								178950,
								179033
							],
							[
								179735,
								179847
							],
							[
								180715,
								180802
							],
							[
								181662,
								181745
							],
							[
								182468,
								182555
							],
							[
								184363,
								184430
							],
							[
								185027,
								185128
							],
							[
								185355,
								185429
							],
							[
								185745,
								185845
							],
							[
								189089,
								189160
							],
							[
								190596,
								190656
							],
							[
								190936,
								191026
							],
							[
								191539,
								191659
							],
							[
								195058,
								195152
							],
							[
								195561,
								195639
							],
							[
								196022,
								196099
							],
							[
								196451,
								196516
							],
							[
								196979,
								197046
							],
							[
								197425,
								197464
							],
							[
								198752,
								198835
							],
							[
								199259,
								199324
							],
							[
								199658,
								199707
							],
							[
								200308,
								200360
							],
							[
								200760,
								200798
							],
							[
								201326,
								201402
							],
							[
								201822,
								201867
							],
							[
								202075,
								202187
							],
							[
								204006,
								204094
							],
							[
								205299,
								205389
							],
							[
								205675,
								205809
							],
							[
								210743,
								210865
							],
							[
								211658,
								211793
							],
							[
								216418,
								216501
							],
							[
								217163,
								217254
							],
							[
								217538,
								217670
							],
							[
								237639,
								237711
							],
							[
								240073,
								240133
							],
							[
								240360,
								240460
							],
							[
								245699,
								245768
							],
							[
								246186,
								246297
							],
							[
								246590,
								246695
							],
							[
								246921,
								247020
							],
							[
								248426,
								248507
							],
							[
								250646,
								250734
							],
							[
								252453,
								252527
							],
							[
								253546,
								253616
							],
							[
								253793,
								253876
							],
							[
								254246,
								254364
							],
							[
								258773,
								258838
							],
							[
								259292,
								259374
							],
							[
								261155,
								261231
							],
							[
								262566,
								262607
							],
							[
								262813,
								262878
							],
							[
								263227,
								263315
							],
							[
								264284,
								264414
							],
							[
								269008,
								269077
							],
							[
								269350,
								269444
							],
							[
								270395,
								270482
							],
							[
								271084,
								271178
							],
							[
								271918,
								272006
							],
							[
								273094,
								273161
							],
							[
								273297,
								273378
							],
							[
								273746,
								273828
							],
							[
								274075,
								274117
							],
							[
								274497,
								274557
							],
							[
								274891,
								274950
							],
							[
								275184,
								275284
							],
							[
								275982,
								276048
							],
							[
								276430,
								276509
							],
							[
								276743,
								276787
							],
							[
								277040,
								277110
							],
							[
								277453,
								277517
							],
							[
								278529,
								278609
							],
							[
								278868,
								278962
							],
							[
								279687,
								279753
							],
							[
								280052,
								280122
							],
							[
								280337,
								280402
							],
							[
								281029,
								281067
							],
							[
								281121,
								281159
							],
							[
								281223,
								281255
							]
						],
						"symlist":
						[
							"ParseError",
							"constructor(startindex, line, column, type, ...params)",
							" (_, i) =>",
							"ParseError",
							"function report(parser, type, ...params)",
							"function reportScopeError(scope)",
							"function reportMessageAt(index, line, column, type, ...params)",
							"function reportScannerError(index, line, column, type)",
							"function isIDContinue(code)",
							"function isIDStart(code)",
							"function mustEscape(code)",
							"(compressed, lookup) =>",
							"function advanceChar(parser)",
							"function consumeMultiUnitCodePoint(parser, hi)",
							"function consumeLineFeed(parser, state)",
							"function scanNewLine(parser)",
							"function isExoticECMAScriptWhitespace(ch)",
							"function fromCodePoint(codePoint)",
							"function toHex(code)",
							"function convertTokenType(t)",
							"function isIdentifierStart(code)",
							"function isIdentifierPart(code)",
							"function skipHashBang(parser)",
							"function skipSingleHTMLComment(parser, source, state, context, type, start, line, column)",
							"function skipSingleLineComment(parser, source, state, type, start, line, column)",
							"function skipMultiLineComment(parser, source, state)",
							"function scanRegularExpression(parser, context)",
							"function validate(parser, pattern, flags)",
							"function scanString(parser, context, quote)",
							"function parseEscape(parser, context, first)",
							"function handleStringError(state, code, isTemplate)",
							"function scanTemplate(parser, context)",
							"function scanBadTemplate(parser, ch)",
							"function scanTemplateTail(parser, context)",
							"function scanNumber(parser, context, kind)",
							"function scanDecimalDigitsOrSeparator(parser, char)",
							"function scanIdentifier(parser, context, isValidAsKeyword)",
							"function scanUnicodeIdentifier(parser, context)",
							"function scanIdentifierSlowCase(parser, context, hasEscape, isValidAsKeyword)",
							"function scanPrivateIdentifier(parser)",
							"function scanIdentifierUnicodeEscape(parser)",
							"function scanUnicodeEscape(parser)",
							"function nextToken(parser, context)",
							"function scanSingleToken(parser, context, state)",
							"function decodeHTMLStrict(text)",
							" key =>",
							"function decodeCodePoint(codePoint)",
							"function scanJSXAttributeValue(parser, context)",
							"function scanJSXString(parser, context)",
							"function scanJSXToken(parser, context)",
							"function scanJSXIdentifier(parser)",
							"function matchOrInsertSemicolon(parser, context, specDeviation)",
							"function isValidStrictMode(parser, index, tokenPos, tokenValue)",
							"function optionalBit(parser, context, t)",
							"function consumeOpt(parser, context, t)",
							"function consume(parser, context, t)",
							"function reinterpretToPattern(state, node)",
							"function validateBindingIdentifier(parser, context, kind, t, skipEvalArgCheck)",
							"function validateFunctionName(parser, context, t)",
							"function isStrictReservedWord(parser, context, t)",
							"function isPropertyWithPrivateFieldKey(expr)",
							"function isValidLabel(parser, labels, name, isIterationStatement)",
							"function validateAndDeclareLabel(parser, labels, name)",
							"function finishNode(parser, context, start, line, column, node)",
							"function isEqualTagName(elementName)",
							"function createArrowHeadParsingScope(parser, context, value)",
							"function recordScopeError(parser, type, ...params)",
							"function createScope()",
							"function addChildScope(parent, type)",
							"function addVarOrBlock(parser, context, scope, name, kind, origin)",
							"function addBlockName(parser, context, scope, name, kind, origin)",
							"function addVarName(parser, context, scope, name, kind)",
							"function declareUnboundVariable(parser, name)",
							"function addBindingToExports(parser, name)",
							"function pushComment(context, array)",
							" function(type, value, start, end, loc)",
							"function pushToken(context, array)",
							" function(token, start, end, loc)",
							"function isValidIdentifier(context, t)",
							"function classifyIdentifier(parser, context, t, isArrow)",
							"function create(source, sourceFile, onComment, onToken)",
							"function parseSource(source, options, context)",
							"function parseStatementList(parser, context, scope)",
							"function parseModuleItemList(parser, context, scope)",
							"function parseModuleItem(parser, context, scope)",
							"function parseStatementListItem(parser, context, scope, origin, labels)",
							"function parseStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseExpressionOrLabelledStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseBlock(parser, context, scope, labels, start, line, column)",
							"function parseReturnStatement(parser, context, start, line, column)",
							"function parseExpressionStatement(parser, context, expression, start, line, column)",
							"function parseLabelledStatement(parser, context, scope, origin, labels, value, expr, token, allowFuncDecl, start, line, column)",
							"function parseAsyncArrowOrAsyncFunctionDeclaration(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseDirective(parser, context, expression, token, start, line, column)",
							"function parseEmptyStatement(parser, context, start, line, column)",
							"function parseThrowStatement(parser, context, start, line, column)",
							"function parseIfStatement(parser, context, scope, labels, start, line, column)",
							"function parseConsequentOrAlternative(parser, context, scope, labels, start, line, column)",
							"function parseSwitchStatement(parser, context, scope, labels, start, line, column)",
							"function parseWhileStatement(parser, context, scope, labels, start, line, column)",
							"function parseIterationStatementBody(parser, context, scope, labels)",
							"function parseContinueStatement(parser, context, labels, start, line, column)",
							"function parseBreakStatement(parser, context, labels, start, line, column)",
							"function parseWithStatement(parser, context, scope, labels, start, line, column)",
							"function parseDebuggerStatement(parser, context, start, line, column)",
							"function parseTryStatement(parser, context, scope, labels, start, line, column)",
							"function parseCatchBlock(parser, context, scope, labels, start, line, column)",
							"function parseStaticBlock(parser, context, scope, start, line, column)",
							"function parseDoWhileStatement(parser, context, scope, labels, start, line, column)",
							"function parseLetIdentOrVarDeclarationStatement(parser, context, scope, origin, start, line, column)",
							"function parseLexicalDeclaration(parser, context, scope, kind, origin, start, line, column)",
							"function parseVariableStatement(parser, context, scope, origin, start, line, column)",
							"function parseVariableDeclarationList(parser, context, scope, kind, origin)",
							"function parseVariableDeclaration(parser, context, scope, kind, origin)",
							"function parseForStatement(parser, context, scope, labels, start, line, column)",
							"function parseRestrictedIdentifier(parser, context, scope)",
							"function parseImportDeclaration(parser, context, scope)",
							"function parseImportNamespaceSpecifier(parser, context, scope)",
							"function parseModuleSpecifier(parser, context)",
							"function parseImportSpecifierOrNamedImports(parser, context, scope, specifiers)",
							"function parseImportMetaDeclaration(parser, context, start, line, column)",
							"function parseImportCallDeclaration(parser, context, start, line, column)",
							"function parseExportDeclaration(parser, context, scope)",
							"function parseExpression(parser, context, canAssign, isPattern, inGroup, start, line, column)",
							"function parseSequenceExpression(parser, context, inGroup, start, line, column, expr)",
							"function parseExpressions(parser, context, inGroup, canAssign, start, line, column)",
							"function parseAssignmentExpression(parser, context, inGroup, isPattern, start, line, column, left)",
							"function parseAssignmentExpressionOrPattern(parser, context, inGroup, isPattern, start, line, column, left)",
							"function parseConditionalExpression(parser, context, test, start, line, column)",
							"function parseBinaryExpression(parser, context, inGroup, start, line, column, minPrec, operator, left)",
							"function parseUnaryExpression(parser, context, isLHS, start, line, column, inGroup)",
							"function parseAsyncExpression(parser, context, inGroup, isLHS, canAssign, isPattern, inNew, start, line, column)",
							"function parseYieldExpression(parser, context, inGroup, canAssign, start, line, column)",
							"function parseAwaitExpression(parser, context, inNew, inGroup, start, line, column)",
							"function parseFunctionBody(parser, context, scope, origin, firstRestricted, scopeError)",
							"function parseSuperExpression(parser, context, start, line, column)",
							"function parseLeftHandSideExpression(parser, context, canAssign, inGroup, isLHS, start, line, column)",
							"function parseUpdateExpression(parser, context, expr, start, line, column)",
							"function parseMemberOrUpdateExpression(parser, context, expr, inGroup, inChain, start, line, column)",
							"function parseOptionalChain(parser, context, expr, start, line, column)",
							"function parsePropertyOrPrivatePropertyName(parser, context)",
							"function parseUpdateExpressionPrefixed(parser, context, inNew, isLHS, start, line, column)",
							"function parsePrimaryExpression(parser, context, kind, inNew, canAssign, isPattern, inGroup, isLHS, start, line, column)",
							"function parseImportCallOrMetaExpression(parser, context, inNew, inGroup, start, line, column)",
							"function parseImportMetaExpression(parser, context, meta, start, line, column)",
							"function parseImportExpression(parser, context, inGroup, start, line, column)",
							"function parseBigIntLiteral(parser, context, start, line, column)",
							"function parseTemplateLiteral(parser, context, start, line, column)",
							"function parseTemplate(parser, context)",
							"function parseTemplateElement(parser, context, cooked, raw, start, line, col, tail)",
							"function parseSpreadElement(parser, context, start, line, column)",
							"function parseArguments(parser, context, inGroup)",
							"function parseIdentifier(parser, context, isPattern)",
							"function parseLiteral(parser, context)",
							"function parseNullOrTrueOrFalseLiteral(parser, context, start, line, column)",
							"function parseThisExpression(parser, context)",
							"function parseFunctionDeclaration(parser, context, scope, origin, allowGen, flags, isAsync, start, line, column)",
							"function parseFunctionExpression(parser, context, isAsync, inGroup, start, line, column)",
							"function parseArrayLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
							"function parseArrayExpressionOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
							"function parseArrayOrObjectAssignmentPattern(parser, context, destructible, inGroup, isPattern, start, line, column, node)",
							"function parseSpreadOrRestElement(parser, context, scope, closingToken, kind, origin, isAsync, inGroup, isPattern, start, line, column)",
							"function parseMethodDefinition(parser, context, kind, inGroup, start, line, column)",
							"function parseObjectLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
							"function parseObjectLiteralOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
							"function parseMethodFormals(parser, context, scope, kind, type, inGroup)",
							"function parseComputedPropertyName(parser, context, inGroup)",
							"function parseParenthesizedExpression(parser, context, canAssign, kind, origin, start, line, column)",
							"function parseIdentifierOrArrow(parser, context, start, line, column)",
							"function parseArrowFromIdentifier(parser, context, value, expr, inNew, canAssign, isAsync, start, line, column)",
							"function parseParenthesizedArrow(parser, context, scope, params, canAssign, isAsync, start, line, column)",
							"function parseArrowFunctionExpression(parser, context, scope, params, isAsync, start, line, column)",
							"function parseFormalParametersOrFormalList(parser, context, scope, inGroup, kind)",
							"function parseMembeExpressionNoCall(parser, context, expr, inGroup, start, line, column)",
							"function parseNewExpression(parser, context, inGroup, start, line, column)",
							"function parseMetaProperty(parser, context, meta, start, line, column)",
							"function parseAsyncArrowAfterIdent(parser, context, canAssign, start, line, column)",
							"function parseAsyncArrowOrCallExpression(parser, context, callee, canAssign, kind, origin, flags, start, line, column)",
							"function parseRegExpLiteral(parser, context, start, line, column)",
							"function parseClassDeclaration(parser, context, scope, flags, start, line, column)",
							"function parseClassExpression(parser, context, inGroup, start, line, column)",
							"function parseDecorators(parser, context)",
							"function parseDecoratorList(parser, context, start, line, column)",
							"function parseClassBody(parser, context, inheritedContext, scope, kind, origin, inGroup)",
							"function parseClassElementList(parser, context, scope, inheritedContext, type, decorators, isStatic, inGroup, start, line, column)",
							"function parsePrivateIdentifier(parser, context, start, line, column)",
							"function parsePropertyDefinition(parser, context, key, state, decorators, start, line, column)",
							"function parseBindingPattern(parser, context, scope, type, origin, start, line, column)",
							"function parseAndClassifyIdentifier(parser, context, scope, kind, origin, start, line, column)",
							"function parseJSXRootElementOrFragment(parser, context, inJSXChild, start, line, column)",
							"function parseOpeningFragment(parser, context, start, line, column)",
							"function parseJSXClosingElement(parser, context, inJSXChild, start, line, column)",
							"function parseJSXClosingFragment(parser, context, inJSXChild, start, line, column)",
							"function parseJSXChildren(parser, context)",
							"function parseJSXChild(parser, context, start, line, column)",
							"function parseJSXText(parser, context, start, line, column)",
							"function parseJSXOpeningFragmentOrSelfCloseElement(parser, context, inJSXChild, start, line, column)",
							"function parseJSXElementName(parser, context, start, line, column)",
							"function parseJSXMemberExpression(parser, context, object, start, line, column)",
							"function parseJSXAttributes(parser, context)",
							"function parseJSXSpreadAttribute(parser, context, start, line, column)",
							"function parseJsxAttribute(parser, context, start, line, column)",
							"function parseJSXNamespacedName(parser, context, namespace, start, line, column)",
							"function parseJSXExpressionContainer(parser, context, inJSXChild, isAttr, start, line, column)",
							"function parseJSXSpreadChild(parser, context, start, line, column)",
							"function parseJSXEmptyExpression(parser, context, start, line, column)",
							"function parseJSXIdentifier(parser, context, start, line, column)",
							" function parseScript(source, options)",
							" function parseModule(source, options)",
							" function parse(source, options)"
						]
					},
					"AQAAAAAAAAAAAAAAhjAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/meriyah.js",
						"symkeys":
						[
							[
								9895,
								9905
							],
							[
								9930,
								9984
							],
							[
								10081,
								10091
							],
							[
								10294,
								10304
							],
							[
								10352,
								10392
							],
							[
								10481,
								10513
							],
							[
								10608,
								10670
							],
							[
								10738,
								10792
							],
							[
								11169,
								11196
							],
							[
								11272,
								11296
							],
							[
								11376,
								11401
							],
							[
								11504,
								11527
							],
							[
								29784,
								29812
							],
							[
								29911,
								29957
							],
							[
								30334,
								30373
							],
							[
								30537,
								30565
							],
							[
								30695,
								30736
							],
							[
								30915,
								30948
							],
							[
								31097,
								31117
							],
							[
								31180,
								31208
							],
							[
								34194,
								34226
							],
							[
								34331,
								34362
							],
							[
								34716,
								34745
							],
							[
								35014,
								35103
							],
							[
								35231,
								35311
							],
							[
								36294,
								36346
							],
							[
								38109,
								38156
							],
							[
								40153,
								40194
							],
							[
								40773,
								40816
							],
							[
								41785,
								41829
							],
							[
								45367,
								45418
							],
							[
								45771,
								45809
							],
							[
								47287,
								47323
							],
							[
								47838,
								47880
							],
							[
								48266,
								48308
							],
							[
								53268,
								53319
							],
							[
								57541,
								57599
							],
							[
								57898,
								57945
							],
							[
								58193,
								58270
							],
							[
								60069,
								60107
							],
							[
								60193,
								60237
							],
							[
								60435,
								60469
							],
							[
								62625,
								62660
							],
							[
								63197,
								63245
							],
							[
								119618,
								119649
							],
							[
								119715,
								119722
							],
							[
								120023,
								120058
							],
							[
								120402,
								120449
							],
							[
								120761,
								120800
							],
							[
								121261,
								121299
							],
							[
								122618,
								122652
							],
							[
								123211,
								123274
							],
							[
								123480,
								123543
							],
							[
								123715,
								123755
							],
							[
								123838,
								123877
							],
							[
								123967,
								124003
							],
							[
								124111,
								124153
							],
							[
								125112,
								125190
							],
							[
								125676,
								125725
							],
							[
								126226,
								126275
							],
							[
								126531,
								126575
							],
							[
								126659,
								126724
							],
							[
								126963,
								127017
							],
							[
								127159,
								127222
							],
							[
								127632,
								127668
							],
							[
								127995,
								128055
							],
							[
								128182,
								128232
							],
							[
								128350,
								128372
							],
							[
								128426,
								128462
							],
							[
								128529,
								128595
							],
							[
								128813,
								128878
							],
							[
								129547,
								129602
							],
							[
								130326,
								130371
							],
							[
								130560,
								130602
							],
							[
								130715,
								130751
							],
							[
								130762,
								130801
							],
							[
								131061,
								131095
							],
							[
								131106,
								131139
							],
							[
								131381,
								131419
							],
							[
								131718,
								131774
							],
							[
								132076,
								132131
							],
							[
								132629,
								132675
							],
							[
								134717,
								134768
							],
							[
								135327,
								135379
							],
							[
								135821,
								135869
							],
							[
								136355,
								136426
							],
							[
								137672,
								137771
							],
							[
								139806,
								139925
							],
							[
								140876,
								140948
							],
							[
								141293,
								141360
							],
							[
								141788,
								141871
							],
							[
								142042,
								142169
							],
							[
								142813,
								142939
							],
							[
								144540,
								144620
							],
							[
								145515,
								145581
							],
							[
								145718,
								145784
							],
							[
								146137,
								146215
							],
							[
								146950,
								147040
							],
							[
								147342,
								147424
							],
							[
								148800,
								148881
							],
							[
								149296,
								149364
							],
							[
								149534,
								149611
							],
							[
								150116,
								150190
							],
							[
								150722,
								150802
							],
							[
								151302,
								151371
							],
							[
								151562,
								151641
							],
							[
								152549,
								152626
							],
							[
								153406,
								153476
							],
							[
								153807,
								153890
							],
							[
								154393,
								154493
							],
							[
								155806,
								155897
							],
							[
								156229,
								156313
							],
							[
								156621,
								156696
							],
							[
								157099,
								157170
							],
							[
								158102,
								158181
							],
							[
								163127,
								163185
							],
							[
								163449,
								163504
							],
							[
								165310,
								165372
							],
							[
								165815,
								165861
							],
							[
								166009,
								166088
							],
							[
								167105,
								167178
							],
							[
								167651,
								167724
							],
							[
								168091,
								168146
							],
							[
								174273,
								174366
							],
							[
								174675,
								174760
							],
							[
								175084,
								175167
							],
							[
								175382,
								175480
							],
							[
								176611,
								176718
							],
							[
								177273,
								177352
							],
							[
								177838,
								177940
							],
							[
								178950,
								179033
							],
							[
								179735,
								179847
							],
							[
								180715,
								180802
							],
							[
								181662,
								181745
							],
							[
								182468,
								182555
							],
							[
								184363,
								184430
							],
							[
								185027,
								185128
							],
							[
								185355,
								185429
							],
							[
								185745,
								185845
							],
							[
								189089,
								189160
							],
							[
								190596,
								190656
							],
							[
								190936,
								191026
							],
							[
								191539,
								191659
							],
							[
								195058,
								195152
							],
							[
								195561,
								195639
							],
							[
								196022,
								196099
							],
							[
								196451,
								196516
							],
							[
								196979,
								197046
							],
							[
								197425,
								197464
							],
							[
								198752,
								198835
							],
							[
								199259,
								199324
							],
							[
								199658,
								199707
							],
							[
								200308,
								200360
							],
							[
								200760,
								200798
							],
							[
								201326,
								201402
							],
							[
								201822,
								201867
							],
							[
								202075,
								202187
							],
							[
								204006,
								204094
							],
							[
								205299,
								205389
							],
							[
								205675,
								205809
							],
							[
								210743,
								210865
							],
							[
								211658,
								211793
							],
							[
								216418,
								216501
							],
							[
								217163,
								217254
							],
							[
								217538,
								217670
							],
							[
								237639,
								237711
							],
							[
								240073,
								240133
							],
							[
								240360,
								240460
							],
							[
								245699,
								245768
							],
							[
								246186,
								246297
							],
							[
								246590,
								246695
							],
							[
								246921,
								247020
							],
							[
								248426,
								248507
							],
							[
								250646,
								250734
							],
							[
								252453,
								252527
							],
							[
								253546,
								253616
							],
							[
								253793,
								253876
							],
							[
								254246,
								254364
							],
							[
								258773,
								258838
							],
							[
								259292,
								259374
							],
							[
								261155,
								261231
							],
							[
								262566,
								262607
							],
							[
								262813,
								262878
							],
							[
								263227,
								263315
							],
							[
								264284,
								264414
							],
							[
								269008,
								269077
							],
							[
								269350,
								269444
							],
							[
								270395,
								270482
							],
							[
								271084,
								271178
							],
							[
								271918,
								272006
							],
							[
								273094,
								273161
							],
							[
								273297,
								273378
							],
							[
								273746,
								273828
							],
							[
								274075,
								274117
							],
							[
								274497,
								274557
							],
							[
								274891,
								274950
							],
							[
								275184,
								275284
							],
							[
								275982,
								276048
							],
							[
								276430,
								276509
							],
							[
								276743,
								276787
							],
							[
								277040,
								277110
							],
							[
								277453,
								277517
							],
							[
								278529,
								278609
							],
							[
								278868,
								278962
							],
							[
								279687,
								279753
							],
							[
								280052,
								280122
							],
							[
								280337,
								280402
							],
							[
								281029,
								281067
							],
							[
								281121,
								281159
							],
							[
								281223,
								281255
							]
						],
						"symlist":
						[
							"ParseError",
							"constructor(startindex, line, column, type, ...params)",
							" (_, i) =>",
							"ParseError",
							"function report(parser, type, ...params)",
							"function reportScopeError(scope)",
							"function reportMessageAt(index, line, column, type, ...params)",
							"function reportScannerError(index, line, column, type)",
							"function isIDContinue(code)",
							"function isIDStart(code)",
							"function mustEscape(code)",
							"(compressed, lookup) =>",
							"function advanceChar(parser)",
							"function consumeMultiUnitCodePoint(parser, hi)",
							"function consumeLineFeed(parser, state)",
							"function scanNewLine(parser)",
							"function isExoticECMAScriptWhitespace(ch)",
							"function fromCodePoint(codePoint)",
							"function toHex(code)",
							"function convertTokenType(t)",
							"function isIdentifierStart(code)",
							"function isIdentifierPart(code)",
							"function skipHashBang(parser)",
							"function skipSingleHTMLComment(parser, source, state, context, type, start, line, column)",
							"function skipSingleLineComment(parser, source, state, type, start, line, column)",
							"function skipMultiLineComment(parser, source, state)",
							"function scanRegularExpression(parser, context)",
							"function validate(parser, pattern, flags)",
							"function scanString(parser, context, quote)",
							"function parseEscape(parser, context, first)",
							"function handleStringError(state, code, isTemplate)",
							"function scanTemplate(parser, context)",
							"function scanBadTemplate(parser, ch)",
							"function scanTemplateTail(parser, context)",
							"function scanNumber(parser, context, kind)",
							"function scanDecimalDigitsOrSeparator(parser, char)",
							"function scanIdentifier(parser, context, isValidAsKeyword)",
							"function scanUnicodeIdentifier(parser, context)",
							"function scanIdentifierSlowCase(parser, context, hasEscape, isValidAsKeyword)",
							"function scanPrivateIdentifier(parser)",
							"function scanIdentifierUnicodeEscape(parser)",
							"function scanUnicodeEscape(parser)",
							"function nextToken(parser, context)",
							"function scanSingleToken(parser, context, state)",
							"function decodeHTMLStrict(text)",
							" key =>",
							"function decodeCodePoint(codePoint)",
							"function scanJSXAttributeValue(parser, context)",
							"function scanJSXString(parser, context)",
							"function scanJSXToken(parser, context)",
							"function scanJSXIdentifier(parser)",
							"function matchOrInsertSemicolon(parser, context, specDeviation)",
							"function isValidStrictMode(parser, index, tokenPos, tokenValue)",
							"function optionalBit(parser, context, t)",
							"function consumeOpt(parser, context, t)",
							"function consume(parser, context, t)",
							"function reinterpretToPattern(state, node)",
							"function validateBindingIdentifier(parser, context, kind, t, skipEvalArgCheck)",
							"function validateFunctionName(parser, context, t)",
							"function isStrictReservedWord(parser, context, t)",
							"function isPropertyWithPrivateFieldKey(expr)",
							"function isValidLabel(parser, labels, name, isIterationStatement)",
							"function validateAndDeclareLabel(parser, labels, name)",
							"function finishNode(parser, context, start, line, column, node)",
							"function isEqualTagName(elementName)",
							"function createArrowHeadParsingScope(parser, context, value)",
							"function recordScopeError(parser, type, ...params)",
							"function createScope()",
							"function addChildScope(parent, type)",
							"function addVarOrBlock(parser, context, scope, name, kind, origin)",
							"function addBlockName(parser, context, scope, name, kind, origin)",
							"function addVarName(parser, context, scope, name, kind)",
							"function declareUnboundVariable(parser, name)",
							"function addBindingToExports(parser, name)",
							"function pushComment(context, array)",
							" function(type, value, start, end, loc)",
							"function pushToken(context, array)",
							" function(token, start, end, loc)",
							"function isValidIdentifier(context, t)",
							"function classifyIdentifier(parser, context, t, isArrow)",
							"function create(source, sourceFile, onComment, onToken)",
							"function parseSource(source, options, context)",
							"function parseStatementList(parser, context, scope)",
							"function parseModuleItemList(parser, context, scope)",
							"function parseModuleItem(parser, context, scope)",
							"function parseStatementListItem(parser, context, scope, origin, labels)",
							"function parseStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseExpressionOrLabelledStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseBlock(parser, context, scope, labels, start, line, column)",
							"function parseReturnStatement(parser, context, start, line, column)",
							"function parseExpressionStatement(parser, context, expression, start, line, column)",
							"function parseLabelledStatement(parser, context, scope, origin, labels, value, expr, token, allowFuncDecl, start, line, column)",
							"function parseAsyncArrowOrAsyncFunctionDeclaration(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseDirective(parser, context, expression, token, start, line, column)",
							"function parseEmptyStatement(parser, context, start, line, column)",
							"function parseThrowStatement(parser, context, start, line, column)",
							"function parseIfStatement(parser, context, scope, labels, start, line, column)",
							"function parseConsequentOrAlternative(parser, context, scope, labels, start, line, column)",
							"function parseSwitchStatement(parser, context, scope, labels, start, line, column)",
							"function parseWhileStatement(parser, context, scope, labels, start, line, column)",
							"function parseIterationStatementBody(parser, context, scope, labels)",
							"function parseContinueStatement(parser, context, labels, start, line, column)",
							"function parseBreakStatement(parser, context, labels, start, line, column)",
							"function parseWithStatement(parser, context, scope, labels, start, line, column)",
							"function parseDebuggerStatement(parser, context, start, line, column)",
							"function parseTryStatement(parser, context, scope, labels, start, line, column)",
							"function parseCatchBlock(parser, context, scope, labels, start, line, column)",
							"function parseStaticBlock(parser, context, scope, start, line, column)",
							"function parseDoWhileStatement(parser, context, scope, labels, start, line, column)",
							"function parseLetIdentOrVarDeclarationStatement(parser, context, scope, origin, start, line, column)",
							"function parseLexicalDeclaration(parser, context, scope, kind, origin, start, line, column)",
							"function parseVariableStatement(parser, context, scope, origin, start, line, column)",
							"function parseVariableDeclarationList(parser, context, scope, kind, origin)",
							"function parseVariableDeclaration(parser, context, scope, kind, origin)",
							"function parseForStatement(parser, context, scope, labels, start, line, column)",
							"function parseRestrictedIdentifier(parser, context, scope)",
							"function parseImportDeclaration(parser, context, scope)",
							"function parseImportNamespaceSpecifier(parser, context, scope)",
							"function parseModuleSpecifier(parser, context)",
							"function parseImportSpecifierOrNamedImports(parser, context, scope, specifiers)",
							"function parseImportMetaDeclaration(parser, context, start, line, column)",
							"function parseImportCallDeclaration(parser, context, start, line, column)",
							"function parseExportDeclaration(parser, context, scope)",
							"function parseExpression(parser, context, canAssign, isPattern, inGroup, start, line, column)",
							"function parseSequenceExpression(parser, context, inGroup, start, line, column, expr)",
							"function parseExpressions(parser, context, inGroup, canAssign, start, line, column)",
							"function parseAssignmentExpression(parser, context, inGroup, isPattern, start, line, column, left)",
							"function parseAssignmentExpressionOrPattern(parser, context, inGroup, isPattern, start, line, column, left)",
							"function parseConditionalExpression(parser, context, test, start, line, column)",
							"function parseBinaryExpression(parser, context, inGroup, start, line, column, minPrec, operator, left)",
							"function parseUnaryExpression(parser, context, isLHS, start, line, column, inGroup)",
							"function parseAsyncExpression(parser, context, inGroup, isLHS, canAssign, isPattern, inNew, start, line, column)",
							"function parseYieldExpression(parser, context, inGroup, canAssign, start, line, column)",
							"function parseAwaitExpression(parser, context, inNew, inGroup, start, line, column)",
							"function parseFunctionBody(parser, context, scope, origin, firstRestricted, scopeError)",
							"function parseSuperExpression(parser, context, start, line, column)",
							"function parseLeftHandSideExpression(parser, context, canAssign, inGroup, isLHS, start, line, column)",
							"function parseUpdateExpression(parser, context, expr, start, line, column)",
							"function parseMemberOrUpdateExpression(parser, context, expr, inGroup, inChain, start, line, column)",
							"function parseOptionalChain(parser, context, expr, start, line, column)",
							"function parsePropertyOrPrivatePropertyName(parser, context)",
							"function parseUpdateExpressionPrefixed(parser, context, inNew, isLHS, start, line, column)",
							"function parsePrimaryExpression(parser, context, kind, inNew, canAssign, isPattern, inGroup, isLHS, start, line, column)",
							"function parseImportCallOrMetaExpression(parser, context, inNew, inGroup, start, line, column)",
							"function parseImportMetaExpression(parser, context, meta, start, line, column)",
							"function parseImportExpression(parser, context, inGroup, start, line, column)",
							"function parseBigIntLiteral(parser, context, start, line, column)",
							"function parseTemplateLiteral(parser, context, start, line, column)",
							"function parseTemplate(parser, context)",
							"function parseTemplateElement(parser, context, cooked, raw, start, line, col, tail)",
							"function parseSpreadElement(parser, context, start, line, column)",
							"function parseArguments(parser, context, inGroup)",
							"function parseIdentifier(parser, context, isPattern)",
							"function parseLiteral(parser, context)",
							"function parseNullOrTrueOrFalseLiteral(parser, context, start, line, column)",
							"function parseThisExpression(parser, context)",
							"function parseFunctionDeclaration(parser, context, scope, origin, allowGen, flags, isAsync, start, line, column)",
							"function parseFunctionExpression(parser, context, isAsync, inGroup, start, line, column)",
							"function parseArrayLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
							"function parseArrayExpressionOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
							"function parseArrayOrObjectAssignmentPattern(parser, context, destructible, inGroup, isPattern, start, line, column, node)",
							"function parseSpreadOrRestElement(parser, context, scope, closingToken, kind, origin, isAsync, inGroup, isPattern, start, line, column)",
							"function parseMethodDefinition(parser, context, kind, inGroup, start, line, column)",
							"function parseObjectLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
							"function parseObjectLiteralOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
							"function parseMethodFormals(parser, context, scope, kind, type, inGroup)",
							"function parseComputedPropertyName(parser, context, inGroup)",
							"function parseParenthesizedExpression(parser, context, canAssign, kind, origin, start, line, column)",
							"function parseIdentifierOrArrow(parser, context, start, line, column)",
							"function parseArrowFromIdentifier(parser, context, value, expr, inNew, canAssign, isAsync, start, line, column)",
							"function parseParenthesizedArrow(parser, context, scope, params, canAssign, isAsync, start, line, column)",
							"function parseArrowFunctionExpression(parser, context, scope, params, isAsync, start, line, column)",
							"function parseFormalParametersOrFormalList(parser, context, scope, inGroup, kind)",
							"function parseMembeExpressionNoCall(parser, context, expr, inGroup, start, line, column)",
							"function parseNewExpression(parser, context, inGroup, start, line, column)",
							"function parseMetaProperty(parser, context, meta, start, line, column)",
							"function parseAsyncArrowAfterIdent(parser, context, canAssign, start, line, column)",
							"function parseAsyncArrowOrCallExpression(parser, context, callee, canAssign, kind, origin, flags, start, line, column)",
							"function parseRegExpLiteral(parser, context, start, line, column)",
							"function parseClassDeclaration(parser, context, scope, flags, start, line, column)",
							"function parseClassExpression(parser, context, inGroup, start, line, column)",
							"function parseDecorators(parser, context)",
							"function parseDecoratorList(parser, context, start, line, column)",
							"function parseClassBody(parser, context, inheritedContext, scope, kind, origin, inGroup)",
							"function parseClassElementList(parser, context, scope, inheritedContext, type, decorators, isStatic, inGroup, start, line, column)",
							"function parsePrivateIdentifier(parser, context, start, line, column)",
							"function parsePropertyDefinition(parser, context, key, state, decorators, start, line, column)",
							"function parseBindingPattern(parser, context, scope, type, origin, start, line, column)",
							"function parseAndClassifyIdentifier(parser, context, scope, kind, origin, start, line, column)",
							"function parseJSXRootElementOrFragment(parser, context, inJSXChild, start, line, column)",
							"function parseOpeningFragment(parser, context, start, line, column)",
							"function parseJSXClosingElement(parser, context, inJSXChild, start, line, column)",
							"function parseJSXClosingFragment(parser, context, inJSXChild, start, line, column)",
							"function parseJSXChildren(parser, context)",
							"function parseJSXChild(parser, context, start, line, column)",
							"function parseJSXText(parser, context, start, line, column)",
							"function parseJSXOpeningFragmentOrSelfCloseElement(parser, context, inJSXChild, start, line, column)",
							"function parseJSXElementName(parser, context, start, line, column)",
							"function parseJSXMemberExpression(parser, context, object, start, line, column)",
							"function parseJSXAttributes(parser, context)",
							"function parseJSXSpreadAttribute(parser, context, start, line, column)",
							"function parseJsxAttribute(parser, context, start, line, column)",
							"function parseJSXNamespacedName(parser, context, namespace, start, line, column)",
							"function parseJSXExpressionContainer(parser, context, inJSXChild, isAttr, start, line, column)",
							"function parseJSXSpreadChild(parser, context, start, line, column)",
							"function parseJSXEmptyExpression(parser, context, start, line, column)",
							"function parseJSXIdentifier(parser, context, start, line, column)",
							" function parseScript(source, options)",
							" function parseModule(source, options)",
							" function parse(source, options)"
						]
					},
					"AQAAAAAAAAAAAAAAhjAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/cutils.h",
						"symkeys":
						[
							[
								1201,
								1209
							],
							[
								1317,
								1323
							],
							[
								1368,
								1376
							],
							[
								1419,
								1431
							],
							[
								1439,
								1452
							],
							[
								1478,
								1487
							],
							[
								1488,
								1501
							],
							[
								1522,
								1536
							],
							[
								1537,
								1550
							],
							[
								1570,
								1575
							],
							[
								1597,
								1601
							],
							[
								1628,
								1637
							],
							[
								1664,
								1672
							],
							[
								1709,
								1717
							],
							[
								1793,
								1800
							],
							[
								1853,
								1857
							],
							[
								1926,
								1933
							],
							[
								1983,
								1990
							],
							[
								2036,
								2044
							],
							[
								2102,
								2112
							],
							[
								2170,
								2177
							],
							[
								2275,
								2282
							],
							[
								2385,
								2395
							],
							[
								2508,
								2518
							],
							[
								2630,
								2639
							],
							[
								2749,
								2758
							],
							[
								2898,
								2903
							],
							[
								3006,
								3011
							],
							[
								3112,
								3117
							],
							[
								3220,
								3225
							],
							[
								3281,
								3294
							],
							[
								3345,
								3358
							],
							[
								3409,
								3422
							],
							[
								3489,
								3496
							],
							[
								3545,
								3555
							],
							[
								3592,
								3599
							],
							[
								3657,
								3667
							],
							[
								3701,
								3708
							],
							[
								3752,
								3762
							],
							[
								3806,
								3813
							],
							[
								3862,
								3872
							],
							[
								3909,
								3916
							],
							[
								3974,
								3984
							],
							[
								4018,
								4025
							],
							[
								4069,
								4079
							],
							[
								4123,
								4130
							],
							[
								4179,
								4189
							],
							[
								4226,
								4233
							],
							[
								4291,
								4301
							],
							[
								4335,
								4342
							],
							[
								4386,
								4396
							],
							[
								4440,
								4446
							],
							[
								4511,
								4517
							],
							[
								4587,
								4593
							],
							[
								4665,
								4672
							],
							[
								4745,
								4752
							],
							[
								4919,
								4926
							],
							[
								5504,
								5521
							],
							[
								5577,
								5583
							],
							[
								5807,
								5816
							],
							[
								5834,
								5844
							],
							[
								5908,
								5920
							],
							[
								5954,
								5964
							],
							[
								6029,
								6037
							],
							[
								6087,
								6100
							],
							[
								6144,
								6153
							],
							[
								6181,
								6192
							],
							[
								6240,
								6252
							],
							[
								6344,
								6356
							],
							[
								6448,
								6460
							],
							[
								6538,
								6551
							],
							[
								6681,
								6690
							],
							[
								6722,
								6732
							],
							[
								6788,
								6802
							],
							[
								6848,
								6865
							],
							[
								6873,
								6888
							],
							[
								6924,
								6941
							],
							[
								6998,
								7010
							],
							[
								7077,
								7085
							],
							[
								7313,
								7319
							],
							[
								7371,
								7374
							]
						],
						"symlist":
						[
							"CUTILS_H",
							"likely",
							"unlikely",
							"force_inline",
							"__attribute__",
							"no_inline",
							"__attribute__",
							"__maybe_unused",
							"__attribute__",
							"xglue",
							"glue",
							"stringify",
							"tostring",
							"offsetof",
							"countof",
							"BOOL",
							"pstrcpy",
							"pstrcat",
							"strstart",
							"has_suffix",
							"max_int",
							"min_int",
							"max_uint32",
							"min_uint32",
							"max_int64",
							"min_int64",
							"clz32",
							"clz64",
							"ctz32",
							"ctz64",
							"__attribute__",
							"__attribute__",
							"__attribute__",
							"get_u64",
							"packed_u64",
							"get_i64",
							"packed_u64",
							"put_u64",
							"packed_u64",
							"get_u32",
							"packed_u32",
							"get_i32",
							"packed_u32",
							"put_u32",
							"packed_u32",
							"get_u16",
							"packed_u16",
							"get_i16",
							"packed_u16",
							"put_u16",
							"packed_u16",
							"get_u8",
							"get_i8",
							"put_u8",
							"bswap16",
							"bswap32",
							"bswap64",
							"DynBufReallocFunc",
							"DynBuf",
							"dbuf_init",
							"dbuf_init2",
							"dbuf_realloc",
							"dbuf_write",
							"dbuf_put",
							"dbuf_put_self",
							"dbuf_putc",
							"dbuf_putstr",
							"dbuf_put_u16",
							"dbuf_put_u32",
							"dbuf_put_u64",
							"__attribute__",
							"dbuf_free",
							"dbuf_error",
							"dbuf_set_error",
							"UTF8_CHAR_LEN_MAX",
							"unicode_to_utf8",
							"unicode_from_utf8",
							"utf8_str_len",
							"from_hex",
							"rqsort",
							"int"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/meriyah.js",
						"symkeys":
						[
							[
								9895,
								9905
							],
							[
								9930,
								9984
							],
							[
								10081,
								10091
							],
							[
								10294,
								10304
							],
							[
								10352,
								10392
							],
							[
								10481,
								10513
							],
							[
								10608,
								10670
							],
							[
								10738,
								10792
							],
							[
								11169,
								11196
							],
							[
								11272,
								11296
							],
							[
								11376,
								11401
							],
							[
								11504,
								11527
							],
							[
								29784,
								29812
							],
							[
								29911,
								29957
							],
							[
								30334,
								30373
							],
							[
								30537,
								30565
							],
							[
								30695,
								30736
							],
							[
								30915,
								30948
							],
							[
								31097,
								31117
							],
							[
								31180,
								31208
							],
							[
								34194,
								34226
							],
							[
								34331,
								34362
							],
							[
								34716,
								34745
							],
							[
								35014,
								35103
							],
							[
								35231,
								35311
							],
							[
								36294,
								36346
							],
							[
								38109,
								38156
							],
							[
								40153,
								40194
							],
							[
								40773,
								40816
							],
							[
								41785,
								41829
							],
							[
								45367,
								45418
							],
							[
								45771,
								45809
							],
							[
								47287,
								47323
							],
							[
								47838,
								47880
							],
							[
								48266,
								48308
							],
							[
								53268,
								53319
							],
							[
								57541,
								57599
							],
							[
								57898,
								57945
							],
							[
								58193,
								58270
							],
							[
								60069,
								60107
							],
							[
								60193,
								60237
							],
							[
								60435,
								60469
							],
							[
								62625,
								62660
							],
							[
								63197,
								63245
							],
							[
								119618,
								119649
							],
							[
								119715,
								119722
							],
							[
								120023,
								120058
							],
							[
								120402,
								120449
							],
							[
								120761,
								120800
							],
							[
								121261,
								121299
							],
							[
								122618,
								122652
							],
							[
								123211,
								123274
							],
							[
								123480,
								123543
							],
							[
								123715,
								123755
							],
							[
								123838,
								123877
							],
							[
								123967,
								124003
							],
							[
								124111,
								124153
							],
							[
								125112,
								125190
							],
							[
								125676,
								125725
							],
							[
								126226,
								126275
							],
							[
								126531,
								126575
							],
							[
								126659,
								126724
							],
							[
								126963,
								127017
							],
							[
								127159,
								127222
							],
							[
								127632,
								127668
							],
							[
								127995,
								128055
							],
							[
								128182,
								128232
							],
							[
								128350,
								128372
							],
							[
								128426,
								128462
							],
							[
								128529,
								128595
							],
							[
								128813,
								128878
							],
							[
								129547,
								129602
							],
							[
								130326,
								130371
							],
							[
								130560,
								130602
							],
							[
								130715,
								130751
							],
							[
								130762,
								130801
							],
							[
								131061,
								131095
							],
							[
								131106,
								131139
							],
							[
								131381,
								131419
							],
							[
								131718,
								131774
							],
							[
								132076,
								132131
							],
							[
								132629,
								132675
							],
							[
								134717,
								134768
							],
							[
								135327,
								135379
							],
							[
								135821,
								135869
							],
							[
								136355,
								136426
							],
							[
								137672,
								137771
							],
							[
								139806,
								139925
							],
							[
								140876,
								140948
							],
							[
								141293,
								141360
							],
							[
								141788,
								141871
							],
							[
								142042,
								142169
							],
							[
								142813,
								142939
							],
							[
								144540,
								144620
							],
							[
								145515,
								145581
							],
							[
								145718,
								145784
							],
							[
								146137,
								146215
							],
							[
								146950,
								147040
							],
							[
								147342,
								147424
							],
							[
								148800,
								148881
							],
							[
								149296,
								149364
							],
							[
								149534,
								149611
							],
							[
								150116,
								150190
							],
							[
								150722,
								150802
							],
							[
								151302,
								151371
							],
							[
								151562,
								151641
							],
							[
								152549,
								152626
							],
							[
								153406,
								153476
							],
							[
								153807,
								153890
							],
							[
								154393,
								154493
							],
							[
								155806,
								155897
							],
							[
								156229,
								156313
							],
							[
								156621,
								156696
							],
							[
								157099,
								157170
							],
							[
								158102,
								158181
							],
							[
								163127,
								163185
							],
							[
								163449,
								163504
							],
							[
								165310,
								165372
							],
							[
								165815,
								165861
							],
							[
								166009,
								166088
							],
							[
								167105,
								167178
							],
							[
								167651,
								167724
							],
							[
								168091,
								168146
							],
							[
								174273,
								174366
							],
							[
								174675,
								174760
							],
							[
								175084,
								175167
							],
							[
								175382,
								175480
							],
							[
								176611,
								176718
							],
							[
								177273,
								177352
							],
							[
								177838,
								177940
							],
							[
								178950,
								179033
							],
							[
								179735,
								179847
							],
							[
								180715,
								180802
							],
							[
								181662,
								181745
							],
							[
								182468,
								182555
							],
							[
								184363,
								184430
							],
							[
								185027,
								185128
							],
							[
								185355,
								185429
							],
							[
								185745,
								185845
							],
							[
								189089,
								189160
							],
							[
								190596,
								190656
							],
							[
								190936,
								191026
							],
							[
								191539,
								191659
							],
							[
								195058,
								195152
							],
							[
								195561,
								195639
							],
							[
								196022,
								196099
							],
							[
								196451,
								196516
							],
							[
								196979,
								197046
							],
							[
								197425,
								197464
							],
							[
								198752,
								198835
							],
							[
								199259,
								199324
							],
							[
								199658,
								199707
							],
							[
								200308,
								200360
							],
							[
								200760,
								200798
							],
							[
								201326,
								201402
							],
							[
								201822,
								201867
							],
							[
								202075,
								202187
							],
							[
								204006,
								204094
							],
							[
								205299,
								205389
							],
							[
								205675,
								205809
							],
							[
								210743,
								210865
							],
							[
								211658,
								211793
							],
							[
								216418,
								216501
							],
							[
								217163,
								217254
							],
							[
								217538,
								217670
							],
							[
								237639,
								237711
							],
							[
								240073,
								240133
							],
							[
								240360,
								240460
							],
							[
								245699,
								245768
							],
							[
								246186,
								246297
							],
							[
								246590,
								246695
							],
							[
								246921,
								247020
							],
							[
								248426,
								248507
							],
							[
								250646,
								250734
							],
							[
								252453,
								252527
							],
							[
								253546,
								253616
							],
							[
								253793,
								253876
							],
							[
								254246,
								254364
							],
							[
								258773,
								258838
							],
							[
								259292,
								259374
							],
							[
								261155,
								261231
							],
							[
								262566,
								262607
							],
							[
								262813,
								262878
							],
							[
								263227,
								263315
							],
							[
								264284,
								264414
							],
							[
								269008,
								269077
							],
							[
								269350,
								269444
							],
							[
								270395,
								270482
							],
							[
								271084,
								271178
							],
							[
								271918,
								272006
							],
							[
								273094,
								273161
							],
							[
								273297,
								273378
							],
							[
								273746,
								273828
							],
							[
								274075,
								274117
							],
							[
								274497,
								274557
							],
							[
								274891,
								274950
							],
							[
								275184,
								275284
							],
							[
								275982,
								276048
							],
							[
								276430,
								276509
							],
							[
								276743,
								276787
							],
							[
								277040,
								277110
							],
							[
								277453,
								277517
							],
							[
								278529,
								278609
							],
							[
								278868,
								278962
							],
							[
								279687,
								279753
							],
							[
								280052,
								280122
							],
							[
								280337,
								280402
							],
							[
								281029,
								281067
							],
							[
								281121,
								281159
							],
							[
								281223,
								281255
							]
						],
						"symlist":
						[
							"ParseError",
							"constructor(startindex, line, column, type, ...params)",
							" (_, i) =>",
							"ParseError",
							"function report(parser, type, ...params)",
							"function reportScopeError(scope)",
							"function reportMessageAt(index, line, column, type, ...params)",
							"function reportScannerError(index, line, column, type)",
							"function isIDContinue(code)",
							"function isIDStart(code)",
							"function mustEscape(code)",
							"(compressed, lookup) =>",
							"function advanceChar(parser)",
							"function consumeMultiUnitCodePoint(parser, hi)",
							"function consumeLineFeed(parser, state)",
							"function scanNewLine(parser)",
							"function isExoticECMAScriptWhitespace(ch)",
							"function fromCodePoint(codePoint)",
							"function toHex(code)",
							"function convertTokenType(t)",
							"function isIdentifierStart(code)",
							"function isIdentifierPart(code)",
							"function skipHashBang(parser)",
							"function skipSingleHTMLComment(parser, source, state, context, type, start, line, column)",
							"function skipSingleLineComment(parser, source, state, type, start, line, column)",
							"function skipMultiLineComment(parser, source, state)",
							"function scanRegularExpression(parser, context)",
							"function validate(parser, pattern, flags)",
							"function scanString(parser, context, quote)",
							"function parseEscape(parser, context, first)",
							"function handleStringError(state, code, isTemplate)",
							"function scanTemplate(parser, context)",
							"function scanBadTemplate(parser, ch)",
							"function scanTemplateTail(parser, context)",
							"function scanNumber(parser, context, kind)",
							"function scanDecimalDigitsOrSeparator(parser, char)",
							"function scanIdentifier(parser, context, isValidAsKeyword)",
							"function scanUnicodeIdentifier(parser, context)",
							"function scanIdentifierSlowCase(parser, context, hasEscape, isValidAsKeyword)",
							"function scanPrivateIdentifier(parser)",
							"function scanIdentifierUnicodeEscape(parser)",
							"function scanUnicodeEscape(parser)",
							"function nextToken(parser, context)",
							"function scanSingleToken(parser, context, state)",
							"function decodeHTMLStrict(text)",
							" key =>",
							"function decodeCodePoint(codePoint)",
							"function scanJSXAttributeValue(parser, context)",
							"function scanJSXString(parser, context)",
							"function scanJSXToken(parser, context)",
							"function scanJSXIdentifier(parser)",
							"function matchOrInsertSemicolon(parser, context, specDeviation)",
							"function isValidStrictMode(parser, index, tokenPos, tokenValue)",
							"function optionalBit(parser, context, t)",
							"function consumeOpt(parser, context, t)",
							"function consume(parser, context, t)",
							"function reinterpretToPattern(state, node)",
							"function validateBindingIdentifier(parser, context, kind, t, skipEvalArgCheck)",
							"function validateFunctionName(parser, context, t)",
							"function isStrictReservedWord(parser, context, t)",
							"function isPropertyWithPrivateFieldKey(expr)",
							"function isValidLabel(parser, labels, name, isIterationStatement)",
							"function validateAndDeclareLabel(parser, labels, name)",
							"function finishNode(parser, context, start, line, column, node)",
							"function isEqualTagName(elementName)",
							"function createArrowHeadParsingScope(parser, context, value)",
							"function recordScopeError(parser, type, ...params)",
							"function createScope()",
							"function addChildScope(parent, type)",
							"function addVarOrBlock(parser, context, scope, name, kind, origin)",
							"function addBlockName(parser, context, scope, name, kind, origin)",
							"function addVarName(parser, context, scope, name, kind)",
							"function declareUnboundVariable(parser, name)",
							"function addBindingToExports(parser, name)",
							"function pushComment(context, array)",
							" function(type, value, start, end, loc)",
							"function pushToken(context, array)",
							" function(token, start, end, loc)",
							"function isValidIdentifier(context, t)",
							"function classifyIdentifier(parser, context, t, isArrow)",
							"function create(source, sourceFile, onComment, onToken)",
							"function parseSource(source, options, context)",
							"function parseStatementList(parser, context, scope)",
							"function parseModuleItemList(parser, context, scope)",
							"function parseModuleItem(parser, context, scope)",
							"function parseStatementListItem(parser, context, scope, origin, labels)",
							"function parseStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseExpressionOrLabelledStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseBlock(parser, context, scope, labels, start, line, column)",
							"function parseReturnStatement(parser, context, start, line, column)",
							"function parseExpressionStatement(parser, context, expression, start, line, column)",
							"function parseLabelledStatement(parser, context, scope, origin, labels, value, expr, token, allowFuncDecl, start, line, column)",
							"function parseAsyncArrowOrAsyncFunctionDeclaration(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
							"function parseDirective(parser, context, expression, token, start, line, column)",
							"function parseEmptyStatement(parser, context, start, line, column)",
							"function parseThrowStatement(parser, context, start, line, column)",
							"function parseIfStatement(parser, context, scope, labels, start, line, column)",
							"function parseConsequentOrAlternative(parser, context, scope, labels, start, line, column)",
							"function parseSwitchStatement(parser, context, scope, labels, start, line, column)",
							"function parseWhileStatement(parser, context, scope, labels, start, line, column)",
							"function parseIterationStatementBody(parser, context, scope, labels)",
							"function parseContinueStatement(parser, context, labels, start, line, column)",
							"function parseBreakStatement(parser, context, labels, start, line, column)",
							"function parseWithStatement(parser, context, scope, labels, start, line, column)",
							"function parseDebuggerStatement(parser, context, start, line, column)",
							"function parseTryStatement(parser, context, scope, labels, start, line, column)",
							"function parseCatchBlock(parser, context, scope, labels, start, line, column)",
							"function parseStaticBlock(parser, context, scope, start, line, column)",
							"function parseDoWhileStatement(parser, context, scope, labels, start, line, column)",
							"function parseLetIdentOrVarDeclarationStatement(parser, context, scope, origin, start, line, column)",
							"function parseLexicalDeclaration(parser, context, scope, kind, origin, start, line, column)",
							"function parseVariableStatement(parser, context, scope, origin, start, line, column)",
							"function parseVariableDeclarationList(parser, context, scope, kind, origin)",
							"function parseVariableDeclaration(parser, context, scope, kind, origin)",
							"function parseForStatement(parser, context, scope, labels, start, line, column)",
							"function parseRestrictedIdentifier(parser, context, scope)",
							"function parseImportDeclaration(parser, context, scope)",
							"function parseImportNamespaceSpecifier(parser, context, scope)",
							"function parseModuleSpecifier(parser, context)",
							"function parseImportSpecifierOrNamedImports(parser, context, scope, specifiers)",
							"function parseImportMetaDeclaration(parser, context, start, line, column)",
							"function parseImportCallDeclaration(parser, context, start, line, column)",
							"function parseExportDeclaration(parser, context, scope)",
							"function parseExpression(parser, context, canAssign, isPattern, inGroup, start, line, column)",
							"function parseSequenceExpression(parser, context, inGroup, start, line, column, expr)",
							"function parseExpressions(parser, context, inGroup, canAssign, start, line, column)",
							"function parseAssignmentExpression(parser, context, inGroup, isPattern, start, line, column, left)",
							"function parseAssignmentExpressionOrPattern(parser, context, inGroup, isPattern, start, line, column, left)",
							"function parseConditionalExpression(parser, context, test, start, line, column)",
							"function parseBinaryExpression(parser, context, inGroup, start, line, column, minPrec, operator, left)",
							"function parseUnaryExpression(parser, context, isLHS, start, line, column, inGroup)",
							"function parseAsyncExpression(parser, context, inGroup, isLHS, canAssign, isPattern, inNew, start, line, column)",
							"function parseYieldExpression(parser, context, inGroup, canAssign, start, line, column)",
							"function parseAwaitExpression(parser, context, inNew, inGroup, start, line, column)",
							"function parseFunctionBody(parser, context, scope, origin, firstRestricted, scopeError)",
							"function parseSuperExpression(parser, context, start, line, column)",
							"function parseLeftHandSideExpression(parser, context, canAssign, inGroup, isLHS, start, line, column)",
							"function parseUpdateExpression(parser, context, expr, start, line, column)",
							"function parseMemberOrUpdateExpression(parser, context, expr, inGroup, inChain, start, line, column)",
							"function parseOptionalChain(parser, context, expr, start, line, column)",
							"function parsePropertyOrPrivatePropertyName(parser, context)",
							"function parseUpdateExpressionPrefixed(parser, context, inNew, isLHS, start, line, column)",
							"function parsePrimaryExpression(parser, context, kind, inNew, canAssign, isPattern, inGroup, isLHS, start, line, column)",
							"function parseImportCallOrMetaExpression(parser, context, inNew, inGroup, start, line, column)",
							"function parseImportMetaExpression(parser, context, meta, start, line, column)",
							"function parseImportExpression(parser, context, inGroup, start, line, column)",
							"function parseBigIntLiteral(parser, context, start, line, column)",
							"function parseTemplateLiteral(parser, context, start, line, column)",
							"function parseTemplate(parser, context)",
							"function parseTemplateElement(parser, context, cooked, raw, start, line, col, tail)",
							"function parseSpreadElement(parser, context, start, line, column)",
							"function parseArguments(parser, context, inGroup)",
							"function parseIdentifier(parser, context, isPattern)",
							"function parseLiteral(parser, context)",
							"function parseNullOrTrueOrFalseLiteral(parser, context, start, line, column)",
							"function parseThisExpression(parser, context)",
							"function parseFunctionDeclaration(parser, context, scope, origin, allowGen, flags, isAsync, start, line, column)",
							"function parseFunctionExpression(parser, context, isAsync, inGroup, start, line, column)",
							"function parseArrayLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
							"function parseArrayExpressionOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
							"function parseArrayOrObjectAssignmentPattern(parser, context, destructible, inGroup, isPattern, start, line, column, node)",
							"function parseSpreadOrRestElement(parser, context, scope, closingToken, kind, origin, isAsync, inGroup, isPattern, start, line, column)",
							"function parseMethodDefinition(parser, context, kind, inGroup, start, line, column)",
							"function parseObjectLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
							"function parseObjectLiteralOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
							"function parseMethodFormals(parser, context, scope, kind, type, inGroup)",
							"function parseComputedPropertyName(parser, context, inGroup)",
							"function parseParenthesizedExpression(parser, context, canAssign, kind, origin, start, line, column)",
							"function parseIdentifierOrArrow(parser, context, start, line, column)",
							"function parseArrowFromIdentifier(parser, context, value, expr, inNew, canAssign, isAsync, start, line, column)",
							"function parseParenthesizedArrow(parser, context, scope, params, canAssign, isAsync, start, line, column)",
							"function parseArrowFunctionExpression(parser, context, scope, params, isAsync, start, line, column)",
							"function parseFormalParametersOrFormalList(parser, context, scope, inGroup, kind)",
							"function parseMembeExpressionNoCall(parser, context, expr, inGroup, start, line, column)",
							"function parseNewExpression(parser, context, inGroup, start, line, column)",
							"function parseMetaProperty(parser, context, meta, start, line, column)",
							"function parseAsyncArrowAfterIdent(parser, context, canAssign, start, line, column)",
							"function parseAsyncArrowOrCallExpression(parser, context, callee, canAssign, kind, origin, flags, start, line, column)",
							"function parseRegExpLiteral(parser, context, start, line, column)",
							"function parseClassDeclaration(parser, context, scope, flags, start, line, column)",
							"function parseClassExpression(parser, context, inGroup, start, line, column)",
							"function parseDecorators(parser, context)",
							"function parseDecoratorList(parser, context, start, line, column)",
							"function parseClassBody(parser, context, inheritedContext, scope, kind, origin, inGroup)",
							"function parseClassElementList(parser, context, scope, inheritedContext, type, decorators, isStatic, inGroup, start, line, column)",
							"function parsePrivateIdentifier(parser, context, start, line, column)",
							"function parsePropertyDefinition(parser, context, key, state, decorators, start, line, column)",
							"function parseBindingPattern(parser, context, scope, type, origin, start, line, column)",
							"function parseAndClassifyIdentifier(parser, context, scope, kind, origin, start, line, column)",
							"function parseJSXRootElementOrFragment(parser, context, inJSXChild, start, line, column)",
							"function parseOpeningFragment(parser, context, start, line, column)",
							"function parseJSXClosingElement(parser, context, inJSXChild, start, line, column)",
							"function parseJSXClosingFragment(parser, context, inJSXChild, start, line, column)",
							"function parseJSXChildren(parser, context)",
							"function parseJSXChild(parser, context, start, line, column)",
							"function parseJSXText(parser, context, start, line, column)",
							"function parseJSXOpeningFragmentOrSelfCloseElement(parser, context, inJSXChild, start, line, column)",
							"function parseJSXElementName(parser, context, start, line, column)",
							"function parseJSXMemberExpression(parser, context, object, start, line, column)",
							"function parseJSXAttributes(parser, context)",
							"function parseJSXSpreadAttribute(parser, context, start, line, column)",
							"function parseJsxAttribute(parser, context, start, line, column)",
							"function parseJSXNamespacedName(parser, context, namespace, start, line, column)",
							"function parseJSXExpressionContainer(parser, context, inJSXChild, isAttr, start, line, column)",
							"function parseJSXSpreadChild(parser, context, start, line, column)",
							"function parseJSXEmptyExpression(parser, context, start, line, column)",
							"function parseJSXIdentifier(parser, context, start, line, column)",
							" function parseScript(source, options)",
							" function parseModule(source, options)",
							" function parse(source, options)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADNAwAAQ1VUSUxTX0gKICBsaWtlbHkKICB1bmxpa2VseQogIGZvcmNlX2lubGluZQogIF9fYXR0cmlidXRlX18KICBub19pbmxpbmUKICBfX2F0dHJpYnV0ZV9fCiAgX19tYXliZV91bnVzZWQKICBfX2F0dHJpYnV0ZV9fCiAgeGdsdWUKICBnbHVlCiAgc3RyaW5naWZ5CiAgdG9zdHJpbmcKICBvZmZzZXRvZgogIGNvdW50b2YKQk9PTAogIHBzdHJjcHkKICBwc3RyY2F0CiAgc3Ryc3RhcnQKICBoYXNfc3VmZml4CiAgbWF4X2ludAogIG1pbl9pbnQKICBtYXhfdWludDMyCiAgbWluX3VpbnQzMgogIG1heF9pbnQ2NAogIG1pbl9pbnQ2NAogIGNsejMyCiAgY2x6NjQKICBjdHozMgogIGN0ejY0CiAgX19hdHRyaWJ1dGVfXwogIF9fYXR0cmlidXRlX18KICBfX2F0dHJpYnV0ZV9fCiAgZ2V0X3U2NAogIHBhY2tlZF91NjQKICBnZXRfaTY0CiAgcGFja2VkX3U2NAogIHB1dF91NjQKICBwYWNrZWRfdTY0CiAgZ2V0X3UzMgogIHBhY2tlZF91MzIKICBnZXRfaTMyCiAgcGFja2VkX3UzMgogIHB1dF91MzIKICBwYWNrZWRfdTMyCiAgZ2V0X3UxNgogIHBhY2tlZF91MTYKICBnZXRfaTE2CiAgcGFja2VkX3UxNgogIHB1dF91MTYKICBwYWNrZWRfdTE2CiAgZ2V0X3U4CiAgZ2V0X2k4CiAgcHV0X3U4CiAgYnN3YXAxNgogIGJzd2FwMzIKICBic3dhcDY0CkR5bkJ1ZlJlYWxsb2NGdW5jCkR5bkJ1ZgogIGRidWZfaW5pdAogIGRidWZfaW5pdDIKICBkYnVmX3JlYWxsb2MKICBkYnVmX3dyaXRlCiAgZGJ1Zl9wdXQKICBkYnVmX3B1dF9zZWxmCiAgZGJ1Zl9wdXRjCiAgZGJ1Zl9wdXRzdHIKICBkYnVmX3B1dF91MTYKICBkYnVmX3B1dF91MzIKICBkYnVmX3B1dF91NjQKICBfX2F0dHJpYnV0ZV9fCiAgZGJ1Zl9mcmVlCiAgZGJ1Zl9lcnJvcgogIGRidWZfc2V0X2Vycm9yClVURjhfQ0hBUl9MRU5fTUFYCiAgdW5pY29kZV90b191dGY4CiAgdW5pY29kZV9mcm9tX3V0ZjgKICB1dGY4X3N0cl9sZW4KICBmcm9tX2hleAogIHJxc29ydAogIGludAAAAAAAAAAAhjAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "test-spawn.js",
			"settings":
			{
				"buffer_size": 684,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import { Spawn } from './io-helpers.js';"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "test"
					},
					"BAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					4,
					"left_delete",
					null,
					"BAAAAAMAAAAAAAAAAwAAAAAAAAABAAAAdAIAAAAAAAAAAgAAAAAAAAABAAAAcwEAAAAAAAAAAQAAAAAAAAABAAAAZQAAAAAAAAAAAAAAAAAAAAABAAAAdA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"",
					null,
					"AQAAAAAAAAAAAAAAKQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkAAAAAAAAAKQAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "Sopaw"
					},
					"BQAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsAAAAAAAAAKwAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					4,
					"left_delete",
					null,
					"BAAAAC8AAAAAAAAALwAAAAAAAAABAAAAdy4AAAAAAAAALgAAAAAAAAABAAAAYS0AAAAAAAAALQAAAAAAAAABAAAAcCwAAAAAAAAALAAAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "pawn"
					},
					"BAAAACwAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC8AAAAAAAAAAAAAAC8AAAAAAAAAMAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwAAAAAAAAALAAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADAAAAAAAAAAMgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADEAAAAAAAAAMwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEAAAAAAAAAMQAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "readlink"
					},
					"CAAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIAAAAAAAAAMgAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADsAAAAAAAAAPAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsAAAAAAAAAOwAAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADwAAAAAAAAAPQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwAAAAAAAAAPAAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAD0AAAAAAAAAPwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0AAAAAAAAAPQAAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "-f"
					},
					"AgAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAABAAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4AAAAAAAAAPgAAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEAAAAAAAAAAQQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					3,
					"left_delete",
					null,
					"AwAAAEAAAAAAAAAAQAAAAAAAAAABAAAAID8AAAAAAAAAPwAAAAAAAAABAAAAZj4AAAAAAAAAPgAAAAAAAAABAAAALQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEAAAAAAAAAQQAAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAD4AAAAAAAAAQAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4AAAAAAAAAPgAAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "-f"
					},
					"AgAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8AAAAAAAAAPwAAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEIAAAAAAAAAQwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIAAAAAAAAAQgAAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMAAAAAAAAARAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMAAAAAAAAAQwAAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "`/proc/$"
					},
					"CAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABMAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEwAAAAAAAAATgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "process.pid"
					},
					"CwAAAE0AAAAAAAAATgAAAAAAAAAAAAAATgAAAAAAAABPAAAAAAAAAAAAAABPAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABSAAAAAAAAAAAAAABSAAAAAAAAAFMAAAAAAAAAAAAAAFMAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABVAAAAAAAAAAAAAABVAAAAAAAAAFYAAAAAAAAAAAAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0AAAAAAAAATQAAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "/se"
					},
					"AwAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkAAAAAAAAAWQAAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					2,
					"left_delete",
					null,
					"AgAAAFsAAAAAAAAAWwAAAAAAAAABAAAAZVoAAAAAAAAAWgAAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwAAAAAAAAAXAAAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "exe`"
					},
					"BAAAAFoAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAF0AAAAAAAAAAAAAAF0AAAAAAAAAXgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoAAAAAAAAAWgAAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ";M"
					},
					"AgAAAGAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGAAAAAAAAAAYAAAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAGEAAAAAAAAAYQAAAAAAAAABAAAATQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIAAAAAAAAAYgAAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGEAAAAAAAAAYgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEAAAAAAAAAYQAAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsAAAAAAAAAKwAAAAAAAAAAAAAAAAAAAA"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " child"
					},
					"BgAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4AAAAAAAAALgAAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQAAAAAAAAANAAAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADYAAAAAAAAANwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYAAAAAAAAANgAAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DAAAAG4AAAAAAAAAbwAAAAAAAAAAAAAAbwAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAB5AAAAAAAAAHoAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4AAAAAAAAAbgAAAAAAAAAAAAAAAABeQA"
				],
				[
					42,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHoAAAAAAAAAfAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoAAAAAAAAAegAAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHsAAAAAAAAAfQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsAAAAAAAAAewAAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "child"
					},
					"BQAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAB+AAAAAAAAAH8AAAAAAAAAAAAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": ",child?"
					},
					"BwAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIUAAAAAAAAAAAAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAiQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIAAAAAAAAAggAAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAAIgAAAAAAAAAiAAAAAAAAAABAAAAPw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkAAAAAAAAAiQAAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIkAAAAAAAAAigAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkAAAAAAAAAiQAAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoAAAAAAAAAigAAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAG8AAAAAAAAAcQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8AAAAAAAAAbwAAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGsAAAAAAAAAbAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsAAAAAAAAAawAAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwAAAAAAAAAbQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAG0AAAAAAAAAbwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0AAAAAAAAAbQAAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "block:"
					},
					"BgAAAG4AAAAAAAAAbwAAAAAAAAAAAAAAbwAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4AAAAAAAAAbgAAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAB5AAAAAAAAAHoAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHoAAAAAAAAAewAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoAAAAAAAAAegAAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " stf"
					},
					"BAAAAHsAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAAB9AAAAAAAAAAAAAAB9AAAAAAAAAH4AAAAAAAAAAAAAAH4AAAAAAAAAfwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsAAAAAAAAAewAAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"left_delete",
					null,
					"AQAAAH4AAAAAAAAAfgAAAAAAAAABAAAAZg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8AAAAAAAAAfwAAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "dio>"
					},
					"BAAAAH4AAAAAAAAAfwAAAAAAAAAAAAAAfwAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAIEAAAAAAAAAAAAAAIEAAAAAAAAAggAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4AAAAAAAAAfgAAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"left_delete",
					null,
					"AQAAAIEAAAAAAAAAgQAAAAAAAAABAAAAPg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIAAAAAAAAAggAAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIEAAAAAAAAAggAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEAAAAAAAAAgQAAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIAAAAAAAAAgwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIAAAAAAAAAggAAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAIMAAAAAAAAAhQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMAAAAAAAAAgwAAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIQAAAAAAAAAhQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIQAAAAAAAAAhgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "pipe"
					},
					"BAAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAiQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUAAAAAAAAAhQAAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					5,
					"left_delete",
					null,
					"BQAAAIkAAAAAAAAAiQAAAAAAAAABAAAAJ4gAAAAAAAAAiAAAAAAAAAABAAAAZYcAAAAAAAAAhwAAAAAAAAABAAAAcIYAAAAAAAAAhgAAAAAAAAABAAAAaYUAAAAAAAAAhQAAAAAAAAABAAAAcA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoAAAAAAAAAigAAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "inherit',"
					},
					"CQAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAIsAAAAAAAAAAAAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUAAAAAAAAAhQAAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAI4AAAAAAAAAkAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4AAAAAAAAAjgAAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "po"
					},
					"AgAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8AAAAAAAAAjwAAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"left_delete",
					null,
					"AQAAAJAAAAAAAAAAkAAAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEAAAAAAAAAkQAAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "iop"
					},
					"AwAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAADwvw"
				],
				[
					95,
					2,
					"left_delete",
					null,
					"AgAAAJIAAAAAAAAAkgAAAAAAAAABAAAAcJEAAAAAAAAAkQAAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMAAAAAAAAAkwAAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "pe0"
					},
					"AwAAAJEAAAAAAAAAkgAAAAAAAAAAAAAAkgAAAAAAAACTAAAAAAAAAAAAAACTAAAAAAAAAJQAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEAAAAAAAAAkQAAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"left_delete",
					null,
					"AQAAAJMAAAAAAAAAkwAAAAAAAAABAAAAMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "mub"
					},
					"AwAAAJQAAAAAAAAAlQAAAAAAAAAAAAAAlQAAAAAAAACWAAAAAAAAAAAAAACWAAAAAAAAAJcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					3,
					"left_delete",
					null,
					"AwAAAJYAAAAAAAAAlgAAAAAAAAABAAAAYpUAAAAAAAAAlQAAAAAAAAABAAAAdZQAAAAAAAAAlAAAAAAAAAABAAAAbQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcAAAAAAAAAlwAAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": ",0"
					},
					"AgAAAJQAAAAAAAAAlQAAAAAAAAAAAAAAlQAAAAAAAACWAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAAJUAAAAAAAAAlQAAAAAAAAABAAAAMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYAAAAAAAAAlgAAAAAAAAAAAAAAAADwvw"
				],
				[
					103,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJUAAAAAAAAAlwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUAAAAAAAAAlQAAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "inherit"
					},
					"BwAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAACbAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAnQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYAAAAAAAAAlgAAAAAAAAAAAAAAAADwvw"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4AAAAAAAAAngAAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"left_delete",
					null,
					"AQAAAJ4AAAAAAAAAngAAAAAAAAABAAAAMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8AAAAAAAAAnwAAAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADDAAAAaW1wb3J0IHsgU3Bhd24gfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwoKCmxldCBjaGlsZCA9IFNwYXduKCdyZWFkbGluaycsIFsnLWYnLCBgL3Byb2MvJHtwcm9jZXNzLnBpZH0vZXhlYF0sIHtibG9jazogZmFsc2UsIHN0ZGlvOiBbJ2luaGVyaXQnLCdwaXBlJywnaW5oZXJpdCcgXX0pOwoKICBjb25zb2xlLmxvZygnY2hpbGQnLGNoaWxkKTsKAAAAAAAAAADIAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMAAAAAAAAAwwAAAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAApAAAAaW1wb3J0IHsgU3Bhd24gfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAKQAAAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					2,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAABSAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "spawn"
					},
					"BgAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAAzAAAAAAAAAAUAAABTcGF3bjMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIAAAAAAAAANwAAAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "cild"
					},
					"BQAAAEAAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAABBAAAAAAAAAA8AAAAuL2lvLWhlbHBlcnMuanNBAAAAAAAAAEIAAAAAAAAAAAAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAAAAAAAAAATwAAAAAAAAAAAAAAAADwvw"
				],
				[
					138,
					3,
					"left_delete",
					null,
					"AwAAAEMAAAAAAAAAQwAAAAAAAAABAAAAZEIAAAAAAAAAQgAAAAAAAAABAAAAbEEAAAAAAAAAQQAAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "hild_process"
					},
					"DAAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAE0AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEAAAAAAAAAQQAAAAAAAAAAAAAAAADwvw"
				],
				[
					152,
					1,
					"cut",
					null,
					"AQAAANIAAAAAAAAA0gAAAAAAAAAdAAAAY29uc29sZS5sb2coJ2NoaWxkJywgY2hpbGQpOwo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIAAAAAAAAA7wAAAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					2,
					"paste",
					null,
					"AgAAANIAAAAAAAAA7wAAAAAAAAAAAAAA7wAAAAAAAAAMAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIAAAAAAAAA0gAAAAAAAAAAAAAAAADwvw"
				],
				[
					163,
					1,
					"paste",
					null,
					"AgAAAPwAAAAAAAAAAQEAAAAAAAAAAAAAAQEAAAAAAAABAQAAAAAAAAUAAABjaGlsZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwAAAAAAAAAAQEAAAAAAAAAAAAAAADwvw"
				],
				[
					168,
					1,
					"paste",
					null,
					"AgAAAAQBAAAAAAAACQEAAAAAAAAAAAAACQEAAAAAAAAJAQAAAAAAAAUAAABjaGlsZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQBAAAAAAAACQEAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"cut",
					null,
					"AQAAAFAAAAAAAAAAUAAAAAAAAACBAAAACmxldCBjaGlsZCA9IFNwYXduKCdyZWFkbGluaycsIFsnLWYnLCBgL3Byb2MvJHtwcm9jZXNzLnBpZH0vZXhlYF0sIHsKICBibG9jazogZmFsc2UsCiAgc3RkaW86IFsnaW5oZXJpdCcsICdwaXBlJywgJ2luaGVyaXQnXQp9KTsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFAAAAAAAAAA0QAAAAAAAAAAAAAAAADwvw"
				],
				[
					174,
					1,
					"paste",
					null,
					"AQAAAFAAAAAAAAAA0QAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAADwvw"
				],
				[
					177,
					1,
					"paste",
					null,
					"AQAAAAwBAAAAAAAAjQEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwBAAAAAAAADAEAAAAAAAAAAAAAAADwvw"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAA0BAAAAAAAADgEAAAAAAAAAAAAADgEAAAAAAAAOAQAAAAAAAAMAAABsZXQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0BAAAAAAAAEAEAAAAAAAAAAAAAAADwvw"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAABcBAAAAAAAAGAEAAAAAAAAAAAAAGAEAAAAAAAAYAQAAAAAAAAEAAABT",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgBAAAAAAAAFwEAAAAAAAAAAAAAAADwvw"
				],
				[
					205,
					1,
					"paste",
					null,
					"AQAAAIsBAAAAAAAAqAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsBAAAAAAAAiwEAAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACNAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoBAAAAAAAAigEAAAAAAAAAAAAAAADwvw"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKsBAAAAAAAArAEAAAAAAAAAAAAAiwEAAAAAAACLAQAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsBAAAAAAAAqwEAAAAAAAAAAAAAAAA0QA"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": "console.op"
					},
					"CgAAAKEBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACjAQAAAAAAAAAAAACjAQAAAAAAAKQBAAAAAAAAAAAAAKQBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAACmAQAAAAAAAAAAAACmAQAAAAAAAKcBAAAAAAAAAAAAAKcBAAAAAAAAqAEAAAAAAAAAAAAAqAEAAAAAAACpAQAAAAAAAAAAAACpAQAAAAAAAKoBAAAAAAAAAAAAAKoBAAAAAAAAqwEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEBAAAAAAAAoQEAAAAAAAAAAAAAAADwvw"
				],
				[
					228,
					2,
					"left_delete",
					null,
					"AgAAAKoBAAAAAAAAqgEAAAAAAAABAAAAcKkBAAAAAAAAqQEAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsBAAAAAAAAqwEAAAAAAAAAAAAAAADwvw"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "config({cus"
					},
					"CwAAAKkBAAAAAAAAqgEAAAAAAAAAAAAAqgEAAAAAAACrAQAAAAAAAAAAAACrAQAAAAAAAKwBAAAAAAAAAAAAAKwBAAAAAAAArQEAAAAAAAAAAAAArQEAAAAAAACuAQAAAAAAAAAAAACuAQAAAAAAAK8BAAAAAAAAAAAAAK8BAAAAAAAAsAEAAAAAAAAAAAAAsAEAAAAAAACxAQAAAAAAAAAAAACxAQAAAAAAALIBAAAAAAAAAAAAALIBAAAAAAAAswEAAAAAAAAAAAAAswEAAAAAAAC0AQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkBAAAAAAAAqQEAAAAAAAAAAAAAAADwvw"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "ton"
					},
					"AwAAALQBAAAAAAAAtQEAAAAAAAAAAAAAtQEAAAAAAAC2AQAAAAAAAAAAAAC2AQAAAAAAALcBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQBAAAAAAAAtAEAAAAAAAAAAAAAAADwvw"
				],
				[
					231,
					1,
					"left_delete",
					null,
					"AQAAALYBAAAAAAAAtgEAAAAAAAABAAAAbg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcBAAAAAAAAtwEAAAAAAAAAAAAAAADwvw"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "mInspect:"
					},
					"CQAAALYBAAAAAAAAtwEAAAAAAAAAAAAAtwEAAAAAAAC4AQAAAAAAAAAAAAC4AQAAAAAAALkBAAAAAAAAAAAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAC7AQAAAAAAALwBAAAAAAAAAAAAALwBAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC+AQAAAAAAAAAAAAC+AQAAAAAAAL8BAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYBAAAAAAAAtgEAAAAAAAAAAAAAAADwvw"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAL8BAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADBAQAAAAAAAAAAAADBAQAAAAAAAMIBAAAAAAAAAAAAAMIBAAAAAAAAwwEAAAAAAAAAAAAAwwEAAAAAAADEAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8BAAAAAAAAvwEAAAAAAAAAAAAAAADwvw"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": " }),"
					},
					"BAAAAMQBAAAAAAAAxQEAAAAAAAAAAAAAxQEAAAAAAADGAQAAAAAAAAAAAADGAQAAAAAAAMcBAAAAAAAAAAAAAMcBAAAAAAAAyAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQBAAAAAAAAxAEAAAAAAAAAAAAAAADwvw"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMgBAAAAAAAAyQEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgBAAAAAAAAyAEAAAAAAAAAAAAAAADwvw"
				],
				[
					239,
					4,
					"left_delete",
					null,
					"BAAAAMMBAAAAAAAAwwEAAAAAAAABAAAAZcIBAAAAAAAAwgEAAAAAAAABAAAAdcEBAAAAAAAAwQEAAAAAAAABAAAAcsABAAAAAAAAwAEAAAAAAAABAAAAdA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQBAAAAAAAAxAEAAAAAAAAAAAAAAADwvw"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAMABAAAAAAAAwQEAAAAAAAAAAAAAwQEAAAAAAADCAQAAAAAAAAAAAADCAQAAAAAAAMMBAAAAAAAAAAAAAMMBAAAAAAAAxAEAAAAAAAAAAAAAxAEAAAAAAADFAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMABAAAAAAAAwAEAAAAAAAAAAAAAAADwvw"
				],
				[
					259,
					1,
					"cut",
					null,
					"AQAAAIwBAAAAAAAAjAEAAAAAAABGAAAAY29uc29sZS5sb2coJ2NoaWxkJywgY29uc29sZS5jb25maWcoe2N1c3RvbUluc3BlY3Q6IGZhbHNlIH0pLCBjaGlsZCk7Cg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwBAAAAAAAA0gEAAAAAAAAAAAAAAADwvw"
				],
				[
					260,
					2,
					"paste",
					null,
					"AgAAAIwBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAAAYAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwBAAAAAAAAjAEAAAAAAAAAAAAAAADwvw"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "Object.getOwn"
					},
					"DgAAAKABAAAAAAAAoQEAAAAAAAAAAAAAoQEAAAAAAAChAQAAAAAAAC8AAAAgY29uc29sZS5jb25maWcoe2N1c3RvbUluc3BlY3Q6IGZhbHNlIH0pLCBjaGlsZKEBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACjAQAAAAAAAAAAAACjAQAAAAAAAKQBAAAAAAAAAAAAAKQBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAACmAQAAAAAAAAAAAACmAQAAAAAAAKcBAAAAAAAAAAAAAKcBAAAAAAAAqAEAAAAAAAAAAAAAqAEAAAAAAACpAQAAAAAAAAAAAACpAQAAAAAAAKoBAAAAAAAAAAAAAKoBAAAAAAAAqwEAAAAAAAAAAAAAqwEAAAAAAACsAQAAAAAAAAAAAACsAQAAAAAAAK0BAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKABAAAAAAAAzwEAAAAAAAAAAAAAAADwvw"
				],
				[
					267,
					1,
					"insert_completion",
					{
						"completion": "getOwnPropertyNames($1)",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "getOwnPropertyNames(...)"
					},
					"AgAAAKcBAAAAAAAApwEAAAAAAAAGAAAAZ2V0T3dupwEAAAAAAAC8AQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0BAAAAAAAArQEAAAAAAAAAAAAAAADwvw"
				],
				[
					268,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALsBAAAAAAAAvQEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsBAAAAAAAAuwEAAAAAAAAAAAAAAADwvw"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": "chil"
					},
					"BAAAALwBAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC+AQAAAAAAAAAAAAC+AQAAAAAAAL8BAAAAAAAAAAAAAL8BAAAAAAAAwAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwBAAAAAAAAvAEAAAAAAAAAAAAAAADwvw"
				],
				[
					270,
					4,
					"left_delete",
					null,
					"BAAAAL8BAAAAAAAAvwEAAAAAAAABAAAAbL4BAAAAAAAAvgEAAAAAAAABAAAAab0BAAAAAAAAvQEAAAAAAAABAAAAaLwBAAAAAAAAvAEAAAAAAAABAAAAYw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMABAAAAAAAAwAEAAAAAAAAAAAAAAADwvw"
				],
				[
					271,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAALsBAAAAAAAAuwEAAAAAAAABAAAAKLsBAAAAAAAAuwEAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwBAAAAAAAAvAEAAAAAAAAAAAAAAADwvw"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "child"
					},
					"BQAAALsBAAAAAAAAvAEAAAAAAAAAAAAAvAEAAAAAAAC9AQAAAAAAAAAAAAC9AQAAAAAAAL4BAAAAAAAAAAAAAL4BAAAAAAAAvwEAAAAAAAAAAAAAvwEAAAAAAADAAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsBAAAAAAAAuwEAAAAAAAAAAAAAAADwvw"
				],
				[
					282,
					1,
					"cut",
					null,
					"AQAAACkAAAAAAAAAKQAAAAAAAAAnAAAAaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJzsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkAAAAAAAAAUAAAAAAAAAAAAAAAAADwvw"
				],
				[
					283,
					2,
					"paste",
					null,
					"AgAAACkAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAAB3AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkAAAAAAAAAKQAAAAAAAAAAAAAAAADwvw"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": "getPr"
					},
					"BgAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABaAAAAAAAAAAUAAABzcGF3bloAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAF0AAAAAAAAAAAAAAF0AAAAAAAAAXgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkAAAAAAAAAXgAAAAAAAAAAAAAAAADwvw"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": "ikey"
					},
					"BQAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABaAAAAAAAAAAUAAABnZXRQcloAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAF0AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkAAAAAAAAAXgAAAAAAAAAAAAAAAADwvw"
				],
				[
					294,
					4,
					"left_delete",
					null,
					"BAAAAFwAAAAAAAAAXAAAAAAAAAABAAAAeVsAAAAAAAAAWwAAAAAAAAABAAAAZVoAAAAAAAAAWgAAAAAAAAABAAAAa1kAAAAAAAAAWQAAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0AAAAAAAAAXQAAAAAAAAAAAAAAAADwvw"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": "keys"
					},
					"BAAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAXQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkAAAAAAAAAWQAAAAAAAAAAAAAAAADwvw"
				],
				[
					305,
					1,
					"paste",
					null,
					"AgAAAMYBAAAAAAAAygEAAAAAAAAAAAAAygEAAAAAAADKAQAAAAAAABoAAABPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYBAAAAAAAA4AEAAAAAAAAAAAAAAADwvw"
				],
				[
					313,
					1,
					"insert",
					{
						"characters": "util"
					},
					"BQAAAGYAAAAAAAAAZwAAAAAAAAAAAAAAZwAAAAAAAABnAAAAAAAAAA0AAABjaGlsZF9wcm9jZXNzZwAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGkAAAAAAAAAAAAAAGkAAAAAAAAAagAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYAAAAAAAAAcwAAAAAAAAAAAAAAAADwvw"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": ".reduce"
					},
					"BwAAAMgBAAAAAAAAyQEAAAAAAAAAAAAAyQEAAAAAAADKAQAAAAAAAAAAAADKAQAAAAAAAMsBAAAAAAAAAAAAAMsBAAAAAAAAzAEAAAAAAAAAAAAAzAEAAAAAAADNAQAAAAAAAAAAAADNAQAAAAAAAM4BAAAAAAAAAAAAAM4BAAAAAAAAzwEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgBAAAAAAAAyAEAAAAAAAAAAAAAAADwvw"
				],
				[
					328,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAAM8BAAAAAAAA0QEAAAAAAAAAAAAA0AEAAAAAAADSAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8BAAAAAAAAzwEAAAAAAAAAAAAAAADwvw"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": "acc,"
					},
					"BAAAANEBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAADTAQAAAAAAANQBAAAAAAAAAAAAANQBAAAAAAAA1QEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEBAAAAAAAA0QEAAAAAAAAAAAAAAADwvw"
				],
				[
					330,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAANUBAAAAAAAA1gEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUBAAAAAAAA1QEAAAAAAAAAAAAAAADwvw"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANcBAAAAAAAA2AEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcBAAAAAAAA1wEAAAAAAAAAAAAAAADwvw"
				],
				[
					333,
					1,
					"left_delete",
					null,
					"AQAAANcBAAAAAAAA1wEAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgBAAAAAAAA2AEAAAAAAAAAAAAAAADwvw"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAANcBAAAAAAAA2AEAAAAAAAAAAAAA2AEAAAAAAADZAQAAAAAAAAAAAADZAQAAAAAAANoBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcBAAAAAAAA1wEAAAAAAAAAAAAAAADwvw"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANoBAAAAAAAA2wEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoBAAAAAAAA2gEAAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANsBAAAAAAAA3QEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsBAAAAAAAA2wEAAAAAAAAAAAAAAADwvw"
				],
				[
					337,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANwBAAAAAAAA3gEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwBAAAAAAAA3AEAAAAAAAAAAAAAAADwvw"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": " ...acc,"
					},
					"CAAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA3gEAAAAAAADfAQAAAAAAAAAAAADfAQAAAAAAAOABAAAAAAAAAAAAAOABAAAAAAAA4QEAAAAAAAAAAAAA4QEAAAAAAADiAQAAAAAAAAAAAADiAQAAAAAAAOMBAAAAAAAAAAAAAOMBAAAAAAAA5AEAAAAAAAAAAAAA5AEAAAAAAADlAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0BAAAAAAAA3QEAAAAAAAAAAAAAAADwvw"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOUBAAAAAAAA5gEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUBAAAAAAAA5QEAAAAAAAAAAAAAAADwvw"
				],
				[
					340,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOYBAAAAAAAA6AEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYBAAAAAAAA5gEAAAAAAAAAAAAAAADwvw"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAOcBAAAAAAAA6AEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcBAAAAAAAA5wEAAAAAAAAAAAAAAADwvw"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOkBAAAAAAAA6gEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkBAAAAAAAA6QEAAAAAAAAAAAAAAADwvw"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": "   "
					},
					"AwAAAOoBAAAAAAAA6wEAAAAAAAAAAAAA6wEAAAAAAADsAQAAAAAAAAAAAADsAQAAAAAAAO0BAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoBAAAAAAAA6gEAAAAAAAAAAAAAAADwvw"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "child"
					},
					"BQAAAOwBAAAAAAAA7QEAAAAAAAAAAAAA7QEAAAAAAADuAQAAAAAAAAAAAADuAQAAAAAAAO8BAAAAAAAAAAAAAO8BAAAAAAAA8AEAAAAAAAAAAAAA8AEAAAAAAADxAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwBAAAAAAAA7AEAAAAAAAAAAAAAAADwvw"
				],
				[
					347,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPEBAAAAAAAA8wEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEBAAAAAAAA8QEAAAAAAAAAAAAAAADwvw"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAAPIBAAAAAAAA8wEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPIBAAAAAAAA8gEAAAAAAAAAAAAAAADwvw"
				],
				[
					349,
					1,
					"left_delete",
					null,
					"AQAAAPIBAAAAAAAA8gEAAAAAAAABAAAAag",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMBAAAAAAAA8wEAAAAAAAAAAAAAAADwvw"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAPIBAAAAAAAA8wEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPIBAAAAAAAA8gEAAAAAAAAAAAAAAADwvw"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": " }),"
					},
					"BAAAAPQBAAAAAAAA9QEAAAAAAAAAAAAA9QEAAAAAAAD2AQAAAAAAAAAAAAD2AQAAAAAAAPcBAAAAAAAAAAAAAPcBAAAAAAAA+AEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQBAAAAAAAA9AEAAAAAAAAAAAAAAADwvw"
				],
				[
					353,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgBAAAAAAAA+QEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgBAAAAAAAA+AEAAAAAAAAAAAAAAADwvw"
				],
				[
					354,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPkBAAAAAAAA+wEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkBAAAAAAAA+QEAAAAAAAAAAAAAAADwvw"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAPsBAAAAAAAA/AEAAAAAAAAAAAAA/AEAAAAAAAD9AQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsBAAAAAAAA+wEAAAAAAAAAAAAAAADwvw"
				],
				[
					358,
					1,
					"cut",
					null,
					"AQAAAP0BAAAAAAAA/QEAAAAAAAAGAAAAIH0pKSk7",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0BAAAAAAAAAwIAAAAAAAD////////vfw"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAPwBAAAAAAAA/QEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwBAAAAAAAA/AEAAAAAAAAAAAAAAADwvw"
				],
				[
					366,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABGAgAAaW1wb3J0IHsgU3Bhd24gfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwppbXBvcnQgeyBzcGF3biB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnOwppbXBvcnQgeyBrZXlzIH0gZnJvbSAndXRpbCc7CgpsZXQgY2hpbGQgPSBTcGF3bigncmVhZGxpbmsnLCBbJy1mJywgYC9wcm9jLyR7cHJvY2Vzcy5waWR9L2V4ZWBdLCB7CiAgYmxvY2s6IGZhbHNlLAogIHN0ZGlvOiBbJ2luaGVyaXQnLCAncGlwZScsICdpbmhlcml0J10KfSk7Cgpjb25zb2xlLmxvZygnY2hpbGQnLCBjaGlsZCk7CmNvbnNvbGUubG9nKCdzcGF3bicsIHNwYXduKTsKCiAgY2hpbGQgPSBzcGF3bigncmVhZGxpbmsnLCBbJy1mJywgYC9wcm9jLyR7cHJvY2Vzcy5waWR9L2V4ZWBdLCB7CiAgYmxvY2s6IGZhbHNlLAogIHN0ZGlvOiBbJ2luaGVyaXQnLCAncGlwZScsICdpbmhlcml0J10KfSk7Cgpjb25zb2xlLmxvZygnY2hpbGQnLGtleXMoY2hpbGQpLnJlZHVjZSgoYWNjLGspID0+ICh7IC4uLmFjYywgW2tdOiAgY2hpbGRba10gfSksIHt9KSk7CmNvbnNvbGUubG9nKCdjaGlsZCcsIGNvbnNvbGUuY29uZmlnKHtjdXN0b21JbnNwZWN0OiBmYWxzZSB9KSwgY2hpbGQpOwoKAAAAAAAAAABLAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0BAAAAAAAA/QEAAAAAAAAAAAAAAADwvw"
				],
				[
					373,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAKYBAAAAAAAAqAEAAAAAAAAAAAAAKgEAAAAAAAAsAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACoBAAAAAAAApgEAAAAAAAAAAAAAAADwvw"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACkBAAAAAAAAKgEAAAAAAAAAAAAAKgEAAAAAAAAqAQAAAAAAAIEAAAAKLypjaGlsZCA9IHNwYXduKCdyZWFkbGluaycsIFsnLWYnLCBgL3Byb2MvJHtwcm9jZXNzLnBpZH0vZXhlYF0sIHsKICBibG9jazogZmFsc2UsCiAgc3RkaW86IFsnaW5oZXJpdCcsICdwaXBlJywgJ2luaGVyaXQnXQp9KTsKKi8",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkBAAAAAAAAqgEAAAAAAAAAAAAAAADwvw"
				],
				[
					397,
					1,
					"cut",
					null,
					"AQAAAFAAAAAAAAAAUAAAAAAAAAAdAAAAaW1wb3J0IHsga2V5cyB9IGZyb20gJ3V0aWwnOwo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFAAAAAAAAAAbQAAAAAAAAAAAAAAAADwvw"
				],
				[
					398,
					2,
					"paste",
					null,
					"AgAAAFAAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAACKAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAADwvw"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": "rewad"
					},
					"BgAAAHYAAAAAAAAAdwAAAAAAAAAAAAAAdwAAAAAAAAB3AAAAAAAAAAQAAABrZXlzdwAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHkAAAAAAAAAAAAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYAAAAAAAAAegAAAAAAAAAAAAAAAADwvw"
				],
				[
					404,
					2,
					"left_delete",
					null,
					"AgAAAHoAAAAAAAAAegAAAAAAAAABAAAAZHkAAAAAAAAAeQAAAAAAAAABAAAAYQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsAAAAAAAAAewAAAAAAAAAAAAAAAADwvw"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "ad"
					},
					"AgAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkAAAAAAAAAeQAAAAAAAAAAAAAAAADwvw"
				],
				[
					406,
					3,
					"left_delete",
					null,
					"AwAAAHoAAAAAAAAAegAAAAAAAAABAAAAZHkAAAAAAAAAeQAAAAAAAAABAAAAYXgAAAAAAAAAeAAAAAAAAAABAAAAdw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsAAAAAAAAAewAAAAAAAAAAAAAAAADwvw"
				],
				[
					407,
					1,
					"insert",
					{
						"characters": "ade"
					},
					"AwAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAADwvw"
				],
				[
					408,
					1,
					"left_delete",
					null,
					"AQAAAHoAAAAAAAAAegAAAAAAAAABAAAAZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsAAAAAAAAAewAAAAAAAAAAAAAAAADwvw"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": "All"
					},
					"AwAAAHoAAAAAAAAAewAAAAAAAAAAAAAAewAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAH0AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoAAAAAAAAAegAAAAAAAAAAAAAAAADwvw"
				],
				[
					412,
					1,
					"insert",
					{
						"characters": "\n\nlet"
					},
					"BQAAAO8BAAAAAAAA8AEAAAAAAAAAAAAA8AEAAAAAAADxAQAAAAAAAAAAAADxAQAAAAAAAPIBAAAAAAAAAAAAAPIBAAAAAAAA8wEAAAAAAAAAAAAA8wEAAAAAAAD0AQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8BAAAAAAAA7wEAAAAAAAAAAAAAAADwvw"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAPQBAAAAAAAA9QEAAAAAAAAAAAAA9QEAAAAAAAD2AQAAAAAAAAAAAAD2AQAAAAAAAPcBAAAAAAAAAAAAAPcBAAAAAAAA+AEAAAAAAAAAAAAA+AEAAAAAAAD5AQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQBAAAAAAAA9AEAAAAAAAAAAAAAAADwvw"
				],
				[
					414,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPkBAAAAAAAA+gEAAAAAAAAAAAAA+gEAAAAAAAD7AQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkBAAAAAAAA+QEAAAAAAAAAAAAAAADwvw"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPsBAAAAAAAA/AEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsBAAAAAAAA+wEAAAAAAAAAAAAAAADwvw"
				],
				[
					416,
					1,
					"paste",
					null,
					"AQAAAPwBAAAAAAAABwIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwBAAAAAAAA/AEAAAAAAAAAAAAAAADwvw"
				],
				[
					417,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAcCAAAAAAAACQIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcCAAAAAAAABwIAAAAAAAAAAAAAAADwvw"
				],
				[
					420,
					1,
					"insert",
					{
						"characters": "childst"
					},
					"BwAAAAgCAAAAAAAACQIAAAAAAAAAAAAACQIAAAAAAAAKAgAAAAAAAAAAAAAKAgAAAAAAAAsCAAAAAAAAAAAAAAsCAAAAAAAADAIAAAAAAAAAAAAADAIAAAAAAAANAgAAAAAAAAAAAAANAgAAAAAAAA4CAAAAAAAAAAAAAA4CAAAAAAAADwIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgCAAAAAAAACAIAAAAAAAAAAAAAAADwvw"
				],
				[
					421,
					2,
					"left_delete",
					null,
					"AgAAAA4CAAAAAAAADgIAAAAAAAABAAAAdA0CAAAAAAAADQIAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8CAAAAAAAADwIAAAAAAAAAAAAAAADwvw"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": ".stdout"
					},
					"BwAAAA0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAASAgAAAAAAAAAAAAASAgAAAAAAABMCAAAAAAAAAAAAABMCAAAAAAAAFAIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0CAAAAAAAADQIAAAAAAAAAAAAAAADwvw"
				],
				[
					427,
					1,
					"insert",
					{
						"characters": "stdio"
					},
					"BgAAAA4CAAAAAAAADwIAAAAAAAAAAAAADwIAAAAAAAAPAgAAAAAAAAYAAABzdGRvdXQPAgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAASAgAAAAAAAAAAAAASAgAAAAAAABMCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4CAAAAAAAAFAIAAAAAAAAAAAAAAADwvw"
				],
				[
					428,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABMCAAAAAAAAFQIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMCAAAAAAAAEwIAAAAAAAAAAAAAAADwvw"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAABQCAAAAAAAAFQIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQCAAAAAAAAFAIAAAAAAAAAAAAAAADwvw"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABcCAAAAAAAAGAIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcCAAAAAAAAFwIAAAAAAAAAAAAAAADwvw"
				],
				[
					432,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAABgCAAAAAAAAGQIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgCAAAAAAAAGAIAAAAAAAAAAAAAAADwvw"
				],
				[
					449,
					1,
					"paste",
					null,
					"AgAAAHYAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACBAAAAAAAAAAcAAAByZWFkQWxs",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYAAAAAAAAAfQAAAAAAAAAAAAAAAADwvw"
				],
				[
					452,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAdAgAAaW1wb3J0IHsgU3Bhd24gfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwppbXBvcnQgeyBzcGF3biB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnOwppbXBvcnQgeyBrZXlzIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IHJlYWRBbGxTeW5jIH0gZnJvbSAndXRpbCc7CgpsZXQgY2hpbGQgPSBTcGF3bigncmVhZGxpbmsnLCBbJy1mJywgYC9wcm9jLyR7cHJvY2Vzcy5waWR9L2V4ZWBdLCB7CiAgYmxvY2s6IGZhbHNlLAogIHN0ZGlvOiBbJ2luaGVyaXQnLCAncGlwZScsICdpbmhlcml0J10KfSk7Cgpjb25zb2xlLmxvZygnY2hpbGQnLCBjaGlsZCk7CmNvbnNvbGUubG9nKCdzcGF3bicsIHNwYXduKTsKIApjb25zb2xlLmxvZygKICAnY2hpbGQnLAogIGtleXMoY2hpbGQpLnJlZHVjZSgoYWNjLCBrKSA9PiAoeyAuLi5hY2MsIFtrXTogY2hpbGRba10gfSksIHt9KQopOwpjb25zb2xlLmxvZygnY2hpbGQnLCBjb25zb2xlLmNvbmZpZyh7IGN1c3RvbUluc3BlY3Q6IGZhbHNlIH0pLCBjaGlsZCk7CgoKbGV0IGRhdGEgPSByZWFkQWxsU3luYyhjaGlsZC5zdGRpb1sxXSk7CgAAAAAAAAAAGwIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEAAAAAAAAAgQAAAAAAAAAAAAAAAADwvw"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "fs"
					},
					"AwAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACLAAAAAAAAAAQAAAB1dGlsiwAAAAAAAACMAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoAAAAAAAAAjgAAAAAAAAAAAAAAAADwvw"
				],
				[
					467,
					1,
					"cut",
					null,
					"AQAAAKkBAAAAAAAAqQEAAAAAAABHAAAAY29uc29sZS5sb2coJ2NoaWxkJywgY29uc29sZS5jb25maWcoeyBjdXN0b21JbnNwZWN0OiBmYWxzZSB9KSwgY2hpbGQpOwo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkBAAAAAAAA8AEAAAAAAAAAAAAAAAAAAA"
				],
				[
					468,
					1,
					"paste",
					null,
					"AQAAAKkBAAAAAAAA8AEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkBAAAAAAAAqQEAAAAAAAAAAAAAAADwvw"
				],
				[
					470,
					1,
					"paste",
					null,
					"AQAAABkCAAAAAAAAYAIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkCAAAAAAAAGQIAAAAAAAAAAAAAAAAAAA"
				],
				[
					480,
					1,
					"paste",
					null,
					"AgAAACYCAAAAAAAAKgIAAAAAAAAAAAAAKgIAAAAAAAAqAgAAAAAAAAUAAABjaGlsZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYCAAAAAAAAKwIAAAAAAAAAAAAAAADwvw"
				],
				[
					483,
					1,
					"paste",
					null,
					"AgAAAC0CAAAAAAAAMQIAAAAAAAAAAAAAMQIAAAAAAAAxAgAAAAAAAC4AAABjb25zb2xlLmNvbmZpZyh7IGN1c3RvbUluc3BlY3Q6IGZhbHNlIH0pLCBjaGls",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0CAAAAAAAAWwIAAAAAAAAAAAAAAADwvw"
				],
				[
					484,
					1,
					"right_delete",
					null,
					"AQAAADECAAAAAAAAMQIAAAAAAAABAAAAZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADECAAAAAAAAMQIAAAAAAAAAAAAAAADwvw"
				],
				[
					521,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAF0AAAAAAAAAXgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0AAAAAAAAAXQAAAAAAAAAAAAAAAADwvw"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": " unescape"
					},
					"CQAAAF4AAAAAAAAAXwAAAAAAAAAAAAAAXwAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGEAAAAAAAAAAAAAAGEAAAAAAAAAYgAAAAAAAAAAAAAAYgAAAAAAAABjAAAAAAAAAAAAAABjAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAZQAAAAAAAAAAAAAAZQAAAAAAAABmAAAAAAAAAAAAAABmAAAAAAAAAGcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4AAAAAAAAAXgAAAAAAAAAAAAAAAADwvw"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": "esca"
					},
					"BQAAAF8AAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAAgAAAB1bmVzY2FwZWAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAABiAAAAAAAAAGMAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8AAAAAAAAAZwAAAAAAAAAAAAAAAADwvw"
				],
				[
					528,
					1,
					"insert_completion",
					{
						"completion": "escape",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "escape"
					},
					"AgAAAF8AAAAAAAAAXwAAAAAAAAAEAAAAZXNjYV8AAAAAAAAAZQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMAAAAAAAAAYwAAAAAAAAAAAAAAAADwvw"
				],
				[
					536,
					1,
					"paste",
					null,
					"AQAAADUCAAAAAAAAOwIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUCAAAAAAAANQIAAAAAAAAAAAAAAADwvw"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAADsCAAAAAAAAPAIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsCAAAAAAAAOwIAAAAAAAAAAAAAAADwvw"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAEECAAAAAAAAQgIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEECAAAAAAAAQQIAAAAAAAAAAAAAAADwvw"
				],
				[
					546,
					1,
					"insert",
					{
						"characters": "quote"
					},
					"BgAAAF8AAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAAYAAABlc2NhcGVgAAAAAAAAAGEAAAAAAAAAAAAAAGEAAAAAAAAAYgAAAAAAAAAAAAAAYgAAAAAAAABjAAAAAAAAAAAAAABjAAAAAAAAAGQAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8AAAAAAAAAZQAAAAAAAAAAAAAAAADwvw"
				],
				[
					562,
					1,
					"paste",
					null,
					"AgAAADQCAAAAAAAAOQIAAAAAAAAAAAAAOQIAAAAAAAA5AgAAAAAAAAYAAABlc2NhcGU",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQCAAAAAAAAOgIAAAAAAAAAAAAAAADwvw"
				],
				[
					577,
					1,
					"cut",
					null,
					"AQAAACkAAAAAAAAAKQAAAAAAAAAnAAAAaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJzsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkAAAAAAAAAUAAAAAAAAAAAAAAAAADwvw"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABsCAAAAAAAAHAIAAAAAAAAAAAAAHAIAAAAAAAAdAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsCAAAAAAAAGwIAAAAAAAAAAAAAAIBhQA"
				],
				[
					590,
					1,
					"cut",
					null,
					"AQAAAPkBAAAAAAAA+QEAAAAAAAAiAAAAY29uc29sZS5sb2coJ2RhdGEnLCBxdW90ZShkYXRhKSk7Cg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkBAAAAAAAAGwIAAAAAAAAAAAAAAAAAAA"
				],
				[
					591,
					2,
					"paste",
					null,
					"AgAAAPkBAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAA9AgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkBAAAAAAAA+QEAAAAAAAAAAAAAAADwvw"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": "ci"
					},
					"AwAAACgCAAAAAAAAKQIAAAAAAAAAAAAAKQIAAAAAAAApAgAAAAAAAAQAAABkYXRhKQIAAAAAAAAqAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACgCAAAAAAAALAIAAAAAAAAAAAAAAADwvw"
				],
				[
					597,
					1,
					"left_delete",
					null,
					"AQAAACkCAAAAAAAAKQIAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACoCAAAAAAAAKgIAAAAAAAAAAAAAAADwvw"
				],
				[
					598,
					1,
					"insert",
					{
						"characters": "hild.wait()"
					},
					"CwAAACkCAAAAAAAAKgIAAAAAAAAAAAAAKgIAAAAAAAArAgAAAAAAAAAAAAArAgAAAAAAACwCAAAAAAAAAAAAACwCAAAAAAAALQIAAAAAAAAAAAAALQIAAAAAAAAuAgAAAAAAAAAAAAAuAgAAAAAAAC8CAAAAAAAAAAAAAC8CAAAAAAAAMAIAAAAAAAAAAAAAMAIAAAAAAAAxAgAAAAAAAAAAAAAxAgAAAAAAADICAAAAAAAAAAAAADICAAAAAAAAMwIAAAAAAAAAAAAAMwIAAAAAAAA0AgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkCAAAAAAAAKQIAAAAAAAAAAAAAAADwvw"
				],
				[
					599,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADQCAAAAAAAANQIAAAAAAAAAAAAANQIAAAAAAAA2AgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQCAAAAAAAANAIAAAAAAAAAAAAAAADwvw"
				],
				[
					601,
					1,
					"insert",
					{
						"characters": "child.wait"
					},
					"CgAAADgCAAAAAAAAOQIAAAAAAAAAAAAAOQIAAAAAAAA6AgAAAAAAAAAAAAA6AgAAAAAAADsCAAAAAAAAAAAAADsCAAAAAAAAPAIAAAAAAAAAAAAAPAIAAAAAAAA9AgAAAAAAAAAAAAA9AgAAAAAAAD4CAAAAAAAAAAAAAD4CAAAAAAAAPwIAAAAAAAAAAAAAPwIAAAAAAABAAgAAAAAAAAAAAABAAgAAAAAAAEECAAAAAAAAAAAAAEECAAAAAAAAQgIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgCAAAAAAAAOAIAAAAAAAAAAAAAAADwvw"
				],
				[
					602,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEICAAAAAAAARAIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEICAAAAAAAAQgIAAAAAAAAAAAAAAADwvw"
				],
				[
					604,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAEQCAAAAAAAARQIAAAAAAAAAAAAARQIAAAAAAABGAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQCAAAAAAAARAIAAAAAAAAAAAAAAADwvw"
				],
				[
					606,
					1,
					"cut",
					null,
					"AQAAAEYCAAAAAAAARgIAAAAAAAAPAAAAIHF1b3RlKGRhdGEpKTsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYCAAAAAAAAVQIAAAAAAAAAAAAAAOB6QA"
				],
				[
					607,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEYCAAAAAAAARwIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYCAAAAAAAARgIAAAAAAAAAAAAAAADwvw"
				],
				[
					610,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABJAgAAaW1wb3J0IHsgU3Bhd24gfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwppbXBvcnQgeyBrZXlzLCBxdW90ZSB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkQWxsU3luYyB9IGZyb20gJ2ZzJzsKCmxldCBjaGlsZCA9IFNwYXduKCdyZWFkbGluaycsIFsnLWYnLCBgL3Byb2MvJHtwcm9jZXNzLnBpZH0vZXhlYF0sIHsKICBibG9jazogZmFsc2UsCiAgc3RkaW86IFsnaW5oZXJpdCcsICdwaXBlJywgJ2luaGVyaXQnXQp9KTsKCmNvbnNvbGUubG9nKCdjaGlsZCcsIGNoaWxkKTsKY29uc29sZS5sb2coJ3NwYXduJywgc3Bhd24pOwoKY29uc29sZS5sb2coCiAgJ2NoaWxkJywKICBrZXlzKGNoaWxkKS5yZWR1Y2UoKGFjYywgaykgPT4gKHsgLi4uYWNjLCBba106IGNoaWxkW2tdIH0pLCB7fSkKKTsKY29uc29sZS5sb2coJ2NoaWxkJywgY29uc29sZS5jb25maWcoeyBjdXN0b21JbnNwZWN0OiBmYWxzZSB9KSwgY2hpbGQpOwoKbGV0IGRhdGEgPSByZWFkQWxsU3luYyhjaGlsZC5zdGRpb1sxXSk7CmNvbnNvbGUubG9nKCdkYXRhJywgcXVvdGUoZGF0YSkpOwpjb25zb2xlLmxvZygnY2hpbGQud2FpdCgpID0nLGNoaWxkLndhaXQoKSk7CgoKAAAAAAAAAABIAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcCAAAAAAAARwIAAAAAAAAAAAAAAADwvw"
				],
				[
					619,
					1,
					"cut",
					null,
					"AQAAAA4BAAAAAAAADgEAAAAAAAAdAAAAY29uc29sZS5sb2coJ3NwYXduJywgc3Bhd24pOwo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4BAAAAAAAAKwEAAAAAAAAAAAAAAADwvw"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANsBAAAAAAAA3AEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsBAAAAAAAA2wEAAAAAAAAAAAAAAADwvw"
				],
				[
					633,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAsAgAAaW1wb3J0IHsgU3Bhd24gfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwppbXBvcnQgeyBrZXlzLCBxdW90ZSB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkQWxsU3luYyB9IGZyb20gJ2ZzJzsKCmxldCBjaGlsZCA9IFNwYXduKCdyZWFkbGluaycsIFsnLWYnLCBgL3Byb2MvJHtwcm9jZXNzLnBpZH0vZXhlYF0sIHsKICBibG9jazogZmFsc2UsCiAgc3RkaW86IFsnaW5oZXJpdCcsICdwaXBlJywgJ2luaGVyaXQnXQp9KTsKCmNvbnNvbGUubG9nKCdjaGlsZCcsIGNoaWxkKTsKCmNvbnNvbGUubG9nKAogICdjaGlsZCcsCiAga2V5cyhjaGlsZCkucmVkdWNlKChhY2MsIGspID0+ICh7IC4uLmFjYywgW2tdOiBjaGlsZFtrXSB9KSwge30pCik7CmNvbnNvbGUubG9nKCdjaGlsZCcsIGNvbnNvbGUuY29uZmlnKHsgY3VzdG9tSW5zcGVjdDogZmFsc2UgfSksIGNoaWxkKTsKCmxldCBkYXRhID0gcmVhZEFsbFN5bmMoY2hpbGQuc3RkaW9bMV0pOwoKY29uc29sZS5sb2coJ2RhdGEnLCBxdW90ZShkYXRhKSk7CmNvbnNvbGUubG9nKCdjaGlsZC53YWl0KCkgPScsIGNoaWxkLndhaXQoKSk7CgAAAAAAAAAAHgIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwBAAAAAAAA3AEAAAAAAAAAAAAAAADwvw"
				],
				[
					634,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeAgAAaW1wb3J0IHsgU3Bhd24gfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwppbXBvcnQgeyBrZXlzLCBxdW90ZSB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkQWxsU3luYyB9IGZyb20gJ2ZzJzsKCmxldCBjaGlsZCA9IFNwYXduKCdnY2MnLCBbJy1NJywgJy1JLicsICdzaWd2YWwuYyddLCB7CiAgYmxvY2s6IGZhbHNlLAogIHN0ZGlvOiBbJ2luaGVyaXQnLCAncGlwZScsICdpbmhlcml0J10KfSk7Cgpjb25zb2xlLmxvZygnY2hpbGQnLCBjaGlsZCk7Cgpjb25zb2xlLmxvZygKICAnY2hpbGQnLAogIGtleXMoY2hpbGQpLnJlZHVjZSgoYWNjLCBrKSA9PiAoeyAuLi5hY2MsIFtrXTogY2hpbGRba10gfSksIHt9KQopOwpjb25zb2xlLmxvZygnY2hpbGQnLCBjb25zb2xlLmNvbmZpZyh7IGN1c3RvbUluc3BlY3Q6IGZhbHNlIH0pLCBjaGlsZCk7CgpsZXQgZGF0YSA9IHJlYWRBbGxTeW5jKGNoaWxkLnN0ZGlvWzFdKTsKCmNvbnNvbGUubG9nKCdkYXRhJywgcXVvdGUoZGF0YSkpOwpjb25zb2xlLmxvZygnY2hpbGQud2FpdCgpID0nLCBjaGlsZC53YWl0KCkpOwoAAAAAAAAAALACAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwBAAAAAAAA3AEAAAAAAAAAAAAAAADwvw"
				],
				[
					676,
					1,
					"insert",
					{
						"characters": "stdo9u"
					},
					"BwAAAB8BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAgAQAAAAAAAAgAAABzdGRpb1sxXSABAAAAAAAAIQEAAAAAAAAAAAAAIQEAAAAAAAAiAQAAAAAAAAAAAAAiAQAAAAAAACMBAAAAAAAAAAAAACMBAAAAAAAAJAEAAAAAAAAAAAAAJAEAAAAAAAAlAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8BAAAAAAAAJwEAAAAAAAAAAAAAAADwvw"
				],
				[
					677,
					2,
					"left_delete",
					null,
					"AgAAACQBAAAAAAAAJAEAAAAAAAABAAAAdSMBAAAAAAAAIwEAAAAAAAABAAAAOQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUBAAAAAAAAJQEAAAAAAAAAAAAAAADwvw"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": "uit"
					},
					"AwAAACMBAAAAAAAAJAEAAAAAAAAAAAAAJAEAAAAAAAAlAQAAAAAAAAAAAAAlAQAAAAAAACYBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMBAAAAAAAAIwEAAAAAAAAAAAAAAADwvw"
				],
				[
					679,
					2,
					"left_delete",
					null,
					"AgAAACUBAAAAAAAAJQEAAAAAAAABAAAAdCQBAAAAAAAAJAEAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYBAAAAAAAAJgEAAAAAAAAAAAAAAADwvw"
				],
				[
					680,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAACQBAAAAAAAAJQEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQBAAAAAAAAJAEAAAAAAAAAAAAAAADwvw"
				],
				[
					694,
					1,
					"paste",
					null,
					"AQAAAP8AAAAAAAAAHgEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8AAAAAAAAA/wAAAAAAAAAAAAAAAADwvw"
				],
				[
					697,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAP4AAAAAAAAA/wAAAAAAAAAAAAAA/wAAAAAAAAD/AAAAAAAAAAMAAAAgLy8",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEBAAAAAAAA/gAAAAAAAAAAAAAAAADwvw"
				],
				[
					709,
					1,
					"insert",
					{
						"characters": ".stdout"
					},
					"BwAAABkBAAAAAAAAGgEAAAAAAAAAAAAAGgEAAAAAAAAbAQAAAAAAAAAAAAAbAQAAAAAAABwBAAAAAAAAAAAAABwBAAAAAAAAHQEAAAAAAAAAAAAAHQEAAAAAAAAeAQAAAAAAAAAAAAAeAQAAAAAAAB8BAAAAAAAAAAAAAB8BAAAAAAAAIAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkBAAAAAAAAGQEAAAAAAAAAAAAAAADwvw"
				],
				[
					713,
					1,
					"insert",
					{
						"characters": ".stdout"
					},
					"BwAAABEBAAAAAAAAEgEAAAAAAAAAAAAAEgEAAAAAAAATAQAAAAAAAAAAAAATAQAAAAAAABQBAAAAAAAAAAAAABQBAAAAAAAAFQEAAAAAAAAAAAAAFQEAAAAAAAAWAQAAAAAAAAAAAAAWAQAAAAAAABcBAAAAAAAAAAAAABcBAAAAAAAAGAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEBAAAAAAAAEQEAAAAAAAAAAAAAAADwvw"
				],
				[
					754,
					1,
					"cut",
					null,
					"AQAAAP4AAAAAAAAA/gAAAAAAAAAsAAAAIGNvbnNvbGUubG9nKCdjaGlsZC5zdGRvdXQnLCBjaGlsZC5zdGRvdXQpOwo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4AAAAAAAAAKgEAAAAAAAAAAAAAAADwvw"
				],
				[
					755,
					2,
					"paste",
					null,
					"AgAAAP4AAAAAAAAAKgEAAAAAAAAAAAAAKgEAAAAAAABWAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4AAAAAAAAA/gAAAAAAAAAAAAAAAADwvw"
				],
				[
					765,
					1,
					"insert",
					{
						"characters": "stduio"
					},
					"BwAAABIBAAAAAAAAEwEAAAAAAAAAAAAAEwEAAAAAAAATAQAAAAAAAAYAAABzdGRvdXQTAQAAAAAAABQBAAAAAAAAAAAAABQBAAAAAAAAFQEAAAAAAAAAAAAAFQEAAAAAAAAWAQAAAAAAAAAAAAAWAQAAAAAAABcBAAAAAAAAAAAAABcBAAAAAAAAGAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIBAAAAAAAAGAEAAAAAAAAAAAAAAADwvw"
				],
				[
					766,
					3,
					"left_delete",
					null,
					"AwAAABcBAAAAAAAAFwEAAAAAAAABAAAAbxYBAAAAAAAAFgEAAAAAAAABAAAAaRUBAAAAAAAAFQEAAAAAAAABAAAAdQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgBAAAAAAAAGAEAAAAAAAAAAAAAAADwvw"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": "io"
					},
					"AgAAABUBAAAAAAAAFgEAAAAAAAAAAAAAFgEAAAAAAAAXAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUBAAAAAAAAFQEAAAAAAAAAAAAAAADwvw"
				],
				[
					777,
					1,
					"paste",
					null,
					"AgAAACABAAAAAAAAJQEAAAAAAAAAAAAAJQEAAAAAAAAlAQAAAAAAAAYAAABzdGRvdXQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAJgEAAAAAAAAAAAAAAADwvw"
				],
				[
					792,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAFMBAAAAAAAAVQEAAAAAAAAAAAAA/wAAAAAAAAABAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8AAAAAAAAAUwEAAAAAAAAAAAAAAADwvw"
				],
				[
					799,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAHAwAAaW1wb3J0IHsgU3Bhd24gfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwppbXBvcnQgeyBrZXlzLCBxdW90ZSB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkQWxsIH0gZnJvbSAnZnMnOwoKYXN5bmMgZnVuY3Rpb24gUmVhZFByb2Nlc3MoLi4uYXJncykgewogIGxldCBjaGlsZCA9IFNwYXduKGFyZ3Muc2hpZnQoKSwgYXJncywgewogICAgYmxvY2s6IGZhbHNlLAogICAgc3RkaW86IFsnaW5oZXJpdCcsICdwaXBlJywgJ2luaGVyaXQnXQogIH0pOwogLypjb25zb2xlLmxvZygnY2hpbGQuc3RkaW8nLCBjaGlsZC5zdGRpbyk7CiBjb25zb2xlLmxvZygnY2hpbGQuc3Rkb3V0JywgY2hpbGQuc3Rkb3V0KTsqLwogbGV0IGRhdGEgPSBhd2FpdCByZWFkQWxsKGNoaWxkLnN0ZG91dCk7CgogIGNoaWxkLndhaXQoKTsKICByZXR1cm4gZGF0YTsKfQoKCgpjb25zb2xlLmxvZygnZGF0YScsICBhd2FpdCBSZWFkUHJvY2VzcygnZ2NjJywgJy1NJywgJy1JLicsICdzaWd2YWwuYycpKTsKCi8vY29uc29sZS5sb2coJ2NoaWxkJywgY2hpbGQpOwovL2NvbnNvbGUubG9nKCdjaGlsZCcsIGtleXMoY2hpbGQpLnJlZHVjZSgoYWNjLCBrKSA9PiAoeyAuLi5hY2MsIFtrXTogY2hpbGRba10gfSksIHt9KSk7Ci8vY29uc29sZS5sb2coJ2NoaWxkJywgY29uc29sZS5jb25maWcoeyBjdXN0b21JbnNwZWN0OiBmYWxzZSB9KSwgY2hpbGQpOwovLwovL2NvbnNvbGUubG9nKCdkYXRhJywgcXVvdGUoZGF0YSkpOwovL2NvbnNvbGUubG9nKCdjaGlsZC53YWl0KCkgPScsIGNoaWxkLndhaXQoKSk7CgAAAAAAAAAABgMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEBAAAAAAAAVQEAAAAAAAAAAAAAAADwvw"
				],
				[
					804,
					1,
					"cut",
					null,
					"AQAAAP4AAAAAAAAA/gAAAAAAAABbAAAAICAvKmNvbnNvbGUubG9nKCdjaGlsZC5zdGRpbycsIGNoaWxkLnN0ZGlvKTsKIGNvbnNvbGUubG9nKCdjaGlsZC5zdGRvdXQnLCBjaGlsZC5zdGRvdXQpOyovCg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4AAAAAAAAAWQEAAAAAAAAAAAAAAAAAAA"
				],
				[
					805,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAP4AAAAAAAAA/wAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4AAAAAAAAA/gAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "test-opencv.js",
			"redo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADkvAAAAAAAAOS8AAAAAAAAIAAAAICAgICAgICA4LwAAAAAAADgvAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAQS8AAAAAAABBLwAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 24136,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/async/helpers.js",
			"settings":
			{
				"buffer_size": 1778,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/meriyah.js",
			"settings":
			{
				"buffer_size": 281362,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "io-helpers.js",
			"settings":
			{
				"buffer_size": 12190,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					26,
					1,
					"cut",
					null,
					"AQAAAFQgAAAAAAAAVCAAAAAAAAANAAAAdGhpcy5zdGRpb1swXQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQgAAAAAAAAYSAAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"paste",
					null,
					"AQAAAFQgAAAAAAAAYSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQgAAAAAAAAVCAAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"paste",
					null,
					"AQAAAE0gAAAAAAAAWiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0gAAAAAAAATSAAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " !=?"
					},
					"BAAAAFogAAAAAAAAWyAAAAAAAAAAAAAAWyAAAAAAAABcIAAAAAAAAAAAAABcIAAAAAAAAF0gAAAAAAAAAAAAAF0gAAAAAAAAXiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFogAAAAAAAAWiAAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF4gAAAAAAAAXyAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4gAAAAAAAAXiAAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					4,
					"left_delete",
					null,
					"BAAAAF4gAAAAAAAAXiAAAAAAAAABAAAAIF0gAAAAAAAAXSAAAAAAAAABAAAAP1wgAAAAAAAAXCAAAAAAAAABAAAAPVsgAAAAAAAAWyAAAAAAAAABAAAAIQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8gAAAAAAAAXyAAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAFsgAAAAAAAAXCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsgAAAAAAAAWyAAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAFsgAAAAAAAAWyAAAAAAAAABAAAAXw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwgAAAAAAAAXCAAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAFsgAAAAAAAAXCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsgAAAAAAAAWyAAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAAFsgAAAAAAAAWyAAAAAAAAABAAAAIQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwgAAAAAAAAXCAAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": ">="
					},
					"AgAAAFsgAAAAAAAAXCAAAAAAAAAAAAAAXCAAAAAAAABdIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsgAAAAAAAAWyAAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAF0gAAAAAAAAXiAAAAAAAAAAAAAAXiAAAAAAAABfIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0gAAAAAAAAXSAAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAF8gAAAAAAAAYCAAAAAAAAAAAAAAYCAAAAAAAABhIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8gAAAAAAAAXyAAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEgAAAAAAAAYiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEgAAAAAAAAYSAAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAHwgAAAAAAAAfSAAAAAAAAAAAAAAfSAAAAAAAAB+IAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwgAAAAAAAAfCAAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " null"
					},
					"BQAAAH4gAAAAAAAAfyAAAAAAAAAAAAAAfyAAAAAAAACAIAAAAAAAAAAAAACAIAAAAAAAAIEgAAAAAAAAAAAAAIEgAAAAAAAAgiAAAAAAAAAAAAAAgiAAAAAAAACDIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4gAAAAAAAAfiAAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"paste",
					null,
					"AgAAAKEgAAAAAAAA2CAAAAAAAAAAAAAA2CAAAAAAAADYIAAAAAAAABwAAAAgZmRvcGVuKHRoaXMuc3RkaW9bMV0sICd3Jyk7",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEgAAAAAAAAvSAAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANggAAAAAAAA2SAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANggAAAAAAAA2CAAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPYgAAAAAAAA9yAAAAAAAAAAAAAA9yAAAAAAAAD3IAAAAAAAABwAAAAgZmRvcGVuKHRoaXMuc3RkaW9bMl0sICd3Jyk7",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYgAAAAAAAAEiEAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"paste",
					null,
					"AQAAAPcgAAAAAAAALiEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcgAAAAAAAA9yAAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAAK0gAAAAAAAAriAAAAAAAAAAAAAAriAAAAAAAACuIAAAAAAAAAEAAAAw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0gAAAAAAAAriAAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAAMhAAAAAAAABCEAAAAAAAAAAAAABCEAAAAAAAAEIQAAAAAAAAEAAAAw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMhAAAAAAAABCEAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAAMkgAAAAAAAAyiAAAAAAAAAAAAAAyiAAAAAAAADKIAAAAAAAAAEAAAAw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkgAAAAAAAAyiAAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAACAhAAAAAAAAISEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAhAAAAAAAAICEAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"left_delete",
					null,
					"AQAAAB8hAAAAAAAAHyEAAAAAAAACAAAAMDI",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8hAAAAAAAAISEAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAB8hAAAAAAAAICEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8hAAAAAAAAHyEAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAAHkgAAAAAAAAeSAAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHogAAAAAAAAeiAAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAHkgAAAAAAAAeiAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkgAAAAAAAAeSAAAAAAAAAAAAAAAADwvw"
				],
				[
					110,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB3LwAAaW1wb3J0IHsgc3RyZXJyb3IgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBkZWZpbmUsIHRvU3RyaW5nLCBlc2NhcGUsIGVycm9yLCBhc3NlcnQsIHByb3BlcnRpZXMgfSBmcm9tICcuL2xpYi9taXNjLmpzJzsKaW1wb3J0IHsgT19DUkVBVCwgT19SRE9OTFksIE9fVFJVTkMsIE9fV1JPTkxZLCBjbG9zZSwgb3BlbiwgcGlwZSwgcmVhZCwgc2V0UmVhZEhhbmRsZXIsIHN0YXQsIHdhaXRwaWQsIHdyaXRlIH0gZnJvbSAnb3MnOwppbXBvcnQgeyBTRUVLX0VORCwgbG9hZEZpbGUsIGZkb3Blbiwgb3BlbiBhcyBmb3Blbiwgb3V0IGFzIHN0ZG91dCwgcG9wZW4gfSBmcm9tICdzdGQnOwppbXBvcnQgeyBzcGF3biB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnOwoKbGV0IGJqc29uOwoKLy9pbXBvcnQoJ2Jqc29uJykgLnRoZW4obSA9PiAoYmpzb24gPSBtKSkgLmNhdGNoKCgpID0+IHt9KTsKCmxldCBtbWFwOwoKLy9pbXBvcnQoJ21tYXAnKSAudGhlbihtID0+IChtbWFwID0gbSkpIC5jYXRjaCgoKSA9PiB7fSk7CgpsZXQgeG1sOwoKLy9pbXBvcnQoJ3htbCcpIC50aGVuKG0gPT4gKHhtbCA9IG0pKSAuY2F0Y2goKCkgPT4ge30pOwoKZXhwb3J0IGZ1bmN0aW9uIElmRGVidWcodG9rZW4pIHsKICBjb25zdCB7IERFQlVHID0gJycgfSA9IGdsb2JhbFRoaXMucHJvY2VzcyA/IGdsb2JhbFRoaXMucHJvY2Vzcy5lbnYgOiB7fTsgLy9nZXRlbnZpcm9uKCk7CgogIGNvbnN0IHRva0xpc3QgPSBERUJVRy5zcGxpdCgvW15BLVphLXowLTlfXSsvZyk7CgogIHJldHVybiB0b2tMaXN0LmluZGV4T2YodG9rZW4pICE9IC0xOwp9CgpleHBvcnQgZnVuY3Rpb24gTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pIHsKICBpZighSWZEZWJ1Zyh0b2tlbikpIHJldHVybiAoKSA9PiB7fTsKCiAgcmV0dXJuIGxvZ2dlckZuOwp9Cgpjb25zdCBkZWJ1ZyA9IExvZ0lmRGVidWcoJ2lvLWhlbHBlcnMnLCAoLi4uYXJncykgPT4gY29uc29sZS5sb2coLi4uYXJncykpOwoKZXhwb3J0IGZ1bmN0aW9uIFJlYWRGZChmZCwgYmluYXJ5KSB7CiAgbGV0IGFiID0gbmV3IEFycmF5QnVmZmVyKDEwMjQpOwogIGxldCBvdXQgPSAnJzsKCiAgZm9yKDs7KSB7CiAgICBsZXQgcmV0ID0gcmVhZChmZCwgYWIsIDAsIGFiLmJ5dGVMZW5ndGgpOwoKICAgIGlmKHJldCA8PSAwKSBicmVhazsKCiAgICBvdXQgKz0gdG9TdHJpbmcoYWIuc2xpY2UoMCwgcmV0KSk7CgogICAgZGVidWcoYFJlYWQgIyR7ZmR9OiAke3JldH0gYnl0ZXNgKTsKICB9CiAgcmV0dXJuIG91dDsKfQoKZXhwb3J0IGZ1bmN0aW9uIElzU3RkaW8ob2JqKSB7CiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc3Rkb3V0KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFJlYWRDbG9zZShmaWxlLCBiaW5hcnkpIHsKICBpZihJc1N0ZGlvKGZpbGUpKSB7CiAgICBpZighYmluYXJ5KSByZXR1cm4gZmlsZS5yZWFkQXNTdHJpbmcoKTsKCiAgICByZXR1cm4gKGZ1bmN0aW9uKiAoKSB7CiAgICAgIHdoaWxlKCFmaWxlLmVvZigpKSB7CiAgICAgICAgbGV0IGFiID0gbmV3IEFycmF5QnVmZmVyKHR5cGVvZiBiaW5hcnkgPT0gJ251bWJlcicgPyBiaW5hcnkgOiAxMDI0KTsKICAgICAgICBsZXQgciA9IGZpbGUucmVhZChhYiwgMCwgYWIuYnl0ZUxlbmd0aCk7CgogICAgICAgIGlmKHIgPT0gMCkgYnJlYWs7CiAgICAgICAgaWYociA8IDAgfHwgZmlsZS5lcnJvcigpKSB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHJlYWRpbmcgZmlsZWApOwoKICAgICAgICB5aWVsZCBhYi5zbGljZSgwLCByKTsKICAgICAgfQogICAgfSkoKTsKICB9CiAgdGhyb3cgbmV3IEVycm9yKGBVbmtvd24gdHlwZSBvZiBmaWxlOiAke29ian1gKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFJlYWRGaWxlKG5hbWUsIGJpbmFyeSkgewogIGlmKCFiaW5hcnkgfHwgYmluYXJ5ID09ICd1dGYtOCcpIHJldHVybiBsb2FkRmlsZShuYW1lKTsKCiAgbGV0IGY7CgogIGlmKChmID0gZm9wZW4obmFtZSwgJ3JiJykpKSB7CiAgICBmLnNlZWsoMCwgU0VFS19FTkQpOwogICAgbGV0IHNpemUgPSBmLnRlbGwoKTsKICAgIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoc2l6ZSk7CiAgICBsZXQgcmV0ID0gZi5yZWFkKGJ1ZiwgMCwgc2l6ZSk7CgogICAgY29uc29sZS5kZWJ1ZyhgUmVhZCAke25hbWV9OiAke3JldD8uYnl0ZUxlbmd0aH0gYnl0ZXNgKTsKICAgIHJldHVybiBidWY7CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gUmVhZEFueShvYmosIGJpbmFyeSkgewogIHJldHVybiB7IG51bWJlcjogUmVhZEZkLCBzdHJpbmc6IFJlYWRGaWxlLCBvYmplY3Q6IFJlYWRDbG9zZSB9W3R5cGVvZiBvYmpdKG9iaiwgYmluYXJ5KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIExvYWRIaXN0b3J5KGZpbGVuYW1lKSB7CiAgbGV0IGNvbnRlbnRzID0gUmVhZEZpbGUoZmlsZW5hbWUsIGZhbHNlKTsKICBsZXQgZGF0YTsKCiAgY29uc3QgcGFyc2UgPSAoKSA9PiB7CiAgICB0cnkgewogICAgICBkYXRhID0gSlNPTi5wYXJzZShjb250ZW50cyk7CiAgICB9IGNhdGNoKGUpIHt9CiAgICBpZihkYXRhKSByZXR1cm4gZGF0YTsKICAgIHRyeSB7CiAgICAgIGRhdGEgPSBjb250ZW50cy5zcGxpdCgvXG4vZyk7CiAgICB9IGNhdGNoKGUpIHt9CiAgICBpZihkYXRhKSByZXR1cm4gZGF0YTsKICB9OwoKICByZXR1cm4gKHBhcnNlKCkgPz8gW10pLmZpbHRlcihlbnRyeSA9PiAoZW50cnkgKyAnJykudHJpbSgpICE9ICcnKTsKICAvLy5tYXAoZW50cnkgPT4gZW50cnkucmVwbGFjZSgvXFxuL2csICdcbicpKQp9CgpleHBvcnQgZnVuY3Rpb24gUmVhZEpTT04oZmlsZW5hbWUpIHsKICBsZXQgZGF0YSA9IFJlYWRBbnkoZmlsZW5hbWUsIGZhbHNlKTsKCiAgaWYoZGF0YSkgZGVidWcoYFJlYWRKU09OOiAke2RhdGEubGVuZ3RofSBieXRlcyByZWFkIGZyb20gJyR7ZmlsZW5hbWV9J2ApOwogIHJldHVybiBkYXRhID8gSlNPTi5wYXJzZShkYXRhKSA6IG51bGw7Cn0KCmV4cG9ydCBmdW5jdGlvbiBSZWFkWE1MKGZpbGVuYW1lKSB7CiAgbGV0IGRhdGEgPSBSZWFkQW55KGZpbGVuYW1lLCBmYWxzZSk7CgogIGlmKGRhdGEpIGRlYnVnKGBSZWFkWE1MOiAke2RhdGEubGVuZ3RofSBieXRlcyByZWFkIGZyb20gJyR7ZmlsZW5hbWV9J2ApOwogIHJldHVybiBkYXRhID8geG1sLnJlYWQoZGF0YSwgZmlsZW5hbWUsIC4uLmFyZ3MpIDogbnVsbDsKfQoKZXhwb3J0IGZ1bmN0aW9uIE1hcEZpbGUoZmlsZW5hbWUpIHsKICBsZXQgZmQgPSBvcGVuKGZpbGVuYW1lLCBPX1JET05MWSk7CiAgbGV0IHsgc2l6ZSB9ID0gc3RhdChmaWxlbmFtZSlbMF07CiAgZGVidWcoYE1hcEZpbGVgLCB7IGZpbGVuYW1lLCBmZCwgc2l6ZSB9KTsKICBsZXQgZGF0YSA9IG1tYXAubW1hcCgwLCBzaXplICsgMTAsIG1tYXAuUFJPVF9SRUFELCBtbWFwLk1BUF9QUklWQVRFLCBmZCwgMCk7CiAgY2xvc2UoZmQpOwogIHJldHVybiBkYXRhOwp9CgpleHBvcnQgZnVuY3Rpb24gV3JpdGVGaWxlKGZpbGUsIGRhdGEpIHsKICBsZXQgZiA9IGZvcGVuKGZpbGUsICd3KycpOwogIGxldCByID0gdHlwZW9mIGRhdGEgPT0gJ3N0cmluZycgPyBmLnB1dHMoZGF0YSkgOiBmLndyaXRlKGRhdGEsIDAsIGRhdGEuYnl0ZUxlbmd0aCk7CgogIGlmKGYuZXJyb3IoKSkgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3cml0aW5nIGZpbGUgJyR7ZmlsZX0nOiAke3N0cmVycm9yKGVycm9yKCkuZXJybm8pfWApOwogIGYuY2xvc2UoKTsKCiAgY29uc29sZS5sb2coJ1dyb3RlICInICsgZmlsZSArICciOiAnICsgZGF0YS5sZW5ndGggKyAnIGJ5dGVzJyArIGAgKCR7cn0pYCk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBXcml0ZUZkKGZkLCBkYXRhLCBvZmZzZXQsIGxlbmd0aCkgewogIGlmKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKSBkYXRhID0gdG9BcnJheUJ1ZmZlcihkYXRhKTsKCiAgcmV0dXJuIHdyaXRlKGZkLCBkYXRhLCBvZmZzZXQgPz8gMCwgbGVuZ3RoID8/IGRhdGEuYnl0ZUxlbmd0aCk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBXcml0ZUNsb3NlKGZpbGUsIGRhdGEsIG9mZnNldCwgbGVuZ3RoKSB7CiAgaWYoSXNTdGRpbyhmaWxlKSkgewogICAgbGV0IHI7CiAgICByID0KICAgICAgdHlwZW9mIGRhdGEgPT0gJ3N0cmluZycKICAgICAgICA/IGZpbGUucHV0cyhkYXRhKQogICAgICAgIDogZmlsZS53cml0ZShkYXRhLCBvZmZzZXQgPz8gMCwgbGVuZ3RoID8/IGRhdGEuYnl0ZUxlbmd0aCk7CgogICAgaWYociA8PSAwIHx8IGZpbGUuZXJyb3IoKSkgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3cml0aW5nIGZpbGVgKTsKCiAgICBmaWxlLmNsb3NlKCk7CiAgICByZXR1cm4gcjsKICB9CiAgdGhyb3cgbmV3IEVycm9yKGBVbmtvd24gdHlwZSBvZiBmaWxlOiAke29ian1gKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFdyaXRlQW55KG9iaiwgLi4uYXJncykgewogIHJldHVybiB7IG51bWJlcjogV3JpdGVGZCwgc3RyaW5nOiBXcml0ZUZpbGUsIG9iamVjdDogV3JpdGVDbG9zZSB9W3R5cGVvZiBvYmpdKG9iaiwgLi4uYXJncyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBXcml0ZUpTT04obmFtZSwgZGF0YSwgLi4uYXJncykgewogIGNvbnN0IFtjb21wYWN0XSA9IGFyZ3M7CiAgaWYodHlwZW9mIGNvbXBhY3QgPT0gJ2Jvb2xlYW4nKSBhcmdzID0gY29tcGFjdCA/IFtdIDogW251bGwsIDJdOwoKICByZXR1cm4gV3JpdGVBbnkobmFtZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSwgLi4uYXJncykpOwp9CgpleHBvcnQgZnVuY3Rpb24gV3JpdGVYTUwobmFtZSwgZGF0YSwgLi4uYXJncykgewogIHJldHVybiBXcml0ZUFueShuYW1lLCB4bWwud3JpdGUoZGF0YSwgLi4uYXJncykpOwp9CgpleHBvcnQgZnVuY3Rpb24gUmVhZEJKU09OKGZpbGVuYW1lKSB7CiAgbGV0IGZkID0gb3BlbihmaWxlbmFtZSwgT19SRE9OTFkpOwogIGxldCB7IHNpemUgfSA9IHN0YXQoZmlsZW5hbWUpWzBdOwogIGRlYnVnKGBSZWFkQkpTT05gLCB7IGZpbGVuYW1lLCBmZCwgc2l6ZSB9KTsKICBsZXQgZGF0YSA9IG1tYXAubW1hcCgwLCBzaXplICsgMTAsIG1tYXAuUFJPVF9SRUFELCBtbWFwLk1BUF9QUklWQVRFLCBmZCwgMCk7CiAgZGVidWcoYFJlYWRCSlNPTmAsIHsgZGF0YSB9KTsKICBsZXQgcmV0ID0gYmpzb24ucmVhZChkYXRhLCAwLCBzaXplKTsKCiAgbW1hcC5tdW5tYXAoZGF0YSk7CiAgY2xvc2UoZmQpOwogIHJldHVybiByZXQ7Cn0KCmV4cG9ydCBmdW5jdGlvbiBXcml0ZUJKU09OKG5hbWUsIGRhdGEpIHsKICBsZXQgYnVmID0gYmpzb24ud3JpdGUoZGF0YSk7CiAgbGV0IHNpemUgPSBidWYuYnl0ZUxlbmd0aDsKICBsZXQgZmQgPSBvcGVuKG5hbWUsIE9fV1JPTkxZIHwgT19DUkVBVCB8IE9fVFJVTkMpOwoKICBsZXQgcmV0ID0gd3JpdGUoZmQsIGJ1ZiwgMCwgc2l6ZSk7CiAgZGVidWcoJ1dyaXRlQkpTT04nLCB7IG5hbWUsIGZkLCBzaXplLCByZXQgfSk7CiAgY2xvc2UoZmQpOwoKICByZXR1cm4gcmV0Owp9CgpleHBvcnQgZnVuY3Rpb24qIEZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykgewogIGZvcihsZXQgaXRlbSBvZiBnZW4pIGlmKHJlZ0V4LnRlc3QoaXRlbSkpIHlpZWxkIGl0ZW07Cn0KCmV4cG9ydCBmdW5jdGlvbiBGaWx0ZXJJbWFnZXMoZ2VuKSB7CiAgcmV0dXJuIEZpbHRlcihnZW4sIC9cLihwbmd8anBlP2cpJC9pKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykgewogIHJldHVybiBbLi4uYXJyXS5zb3J0KChhLCBiKSA9PiBhLnN0YXRbZmllbGRdIC0gYi5zdGF0W2ZpZWxkXSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiogU3RhdEZpbGVzKGdlbikgewogIGZvcihsZXQgZmlsZSBvZiBnZW4pIHsKICAgIGxldCBbc3RhdCwgZXJyXSA9IHN0YXQoZmlsZSk7CiAgICBsZXQgb2JqID0gZGVmaW5lKAogICAgICB7IGZpbGUsIHN0YXQgfSwKICAgICAgewogICAgICAgIHRvU3RyaW5nKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuZmlsZTsKICAgICAgICB9CiAgICAgIH0KICAgICk7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnc2l6ZScsIHsKICAgICAgZ2V0OiBtZW1vaXplKCgpID0+IHsKICAgICAgICBsZXQgeyBmaWxlbmFtZSwgLi4uaW5mbyB9ID0gSW1hZ2VJbmZvKG9iai5maWxlKTsKICAgICAgICByZXR1cm4gZGVmaW5lKGluZm8sIHsKICAgICAgICAgIHRvU3RyaW5nKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy53aWR0aCArICd4JyArIHRoaXMuaGVpZ2h0OwogICAgICAgICAgfSwKICAgICAgICAgIGdldCBsYW5kc2NhcGUoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLndpZHRoID4gdGhpcy5oZWlnaHQ7CiAgICAgICAgICB9LAogICAgICAgICAgZ2V0IHBvcnRyYWl0KCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHQgPiB0aGlzLndpZHRoOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KQogICAgfSk7CiAgICB5aWVsZCBvYmo7CiAgfQp9CgpleHBvcnQgYXN5bmMgZnVuY3Rpb24qIEZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkgewogIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyU2l6ZSk7CiAgbGV0IHJldDsKICBkbyB7CiAgICBsZXQgciA9IGF3YWl0IHdhaXRSZWFkKGZkKTsKICAgIGNvbnNvbGUubG9nKCdyJywgcik7CiAgICByZXQgPQogICAgICB0eXBlb2YgZmQgPT0gJ251bWJlcicKICAgICAgICA/IGF3YWl0IHJlYWQoZmQsIGJ1ZiwgMCwgYnVmZmVyU2l6ZSkKICAgICAgICA6IGF3YWl0IGZkLnJlYWQoYnVmLCAwLCBidWZmZXJTaXplKTsKICAgIGlmKHJldCA+IDApIHsKICAgICAgbGV0IGRhdGEgPSBidWYuc2xpY2UoMCwgcmV0KTsKICAgICAgeWllbGQgdG9TdHJpbmcoZGF0YSk7CiAgICB9CiAgfSB3aGlsZShyZXQgPT0gYnVmZmVyU2l6ZSk7CiAgdHlwZW9mIGZkID09ICdudW1iZXInID8gYXdhaXQgY2xvc2UoZmQpIDogZmQuY2xvc2UoKTsKICByZXR1cm47Cn0KCmV4cG9ydCBmdW5jdGlvbiBDb3B5VG9DbGlwYm9hcmQodGV4dCkgewogIHJldHVybiBpbXBvcnQoJ2NoaWxkX3Byb2Nlc3MnKS50aGVuKGNoaWxkX3Byb2Nlc3MgPT4gewogICAgY29uc3QgeyBlbnYgfSA9IHByb2Nlc3M7CgogICAgbGV0IGNoaWxkID0gc3Bhd24oJ3hjbGlwJywgWyctaW4nLCAnLXZlcmJvc2UnXSwgewogICAgICBlbnYsCiAgICAgIHN0ZGlvOiBbJ3BpcGUnLCAnaW5oZXJpdCcsICdpbmhlcml0J10KICAgIH0pOwogICAgbGV0IFtwaXBlXSA9IGNoaWxkLnN0ZGlvOwoKICAgIGxldCB3cml0dGVuID0gd3JpdGUocGlwZSwgdGV4dCwgMCwgdGV4dC5sZW5ndGgpOwogICAgY2xvc2UocGlwZSk7CiAgICBsZXQgc3RhdHVzID0gY2hpbGQud2FpdCgpOwogICAgY29uc29sZS5sb2coJ2NoaWxkJywgY2hpbGQpOwogICAgcmV0dXJuIHsgd3JpdHRlbiwgc3RhdHVzIH07CiAgfSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBSZWFkQ2FsbGJhY2soZmQsIGZuID0gZGF0YSA9PiB7fSkgewogIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMTAyNCk7CiAgc2V0UmVhZEhhbmRsZXIoZmQsICgpID0+IHsKICAgIGxldCByID0gcmVhZChmZCwgYnVmLCAwLCAxMDI0KTsKICAgIGlmKHIgPD0gMCkgewogICAgICBjbG9zZShmZCk7CiAgICAgIHNldFJlYWRIYW5kbGVyKGZkLCBudWxsKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgbGV0IGRhdGEgPSBidWYuc2xpY2UoMCwgcik7CiAgICBkYXRhID0gdG9TdHJpbmcoZGF0YSk7CiAgICBmbihkYXRhKTsKICB9KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIExvZ0NhbGwoZm4sIHRoaXNPYmopIHsKICBsZXQgeyBuYW1lIH0gPSBmbjsKICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykgewogICAgbGV0IHJlc3VsdDsKICAgIHJlc3VsdCA9IGZuLmFwcGx5KHRoaXNPYmogPz8gdGhpcywgYXJncyk7CiAgICBjb25zb2xlLmxvZygKICAgICAgJ0Z1bmN0aW9uICcgKyBuYW1lICsgJygnLAogICAgICAuLi5hcmdzLm1hcChhcmcgPT4gaW5zcGVjdChhcmcsIHsgY29sb3JzOiBmYWxzZSwgbWF4U3RyaW5nTGVuZ3RoOiAyMCB9KSksCiAgICAgICcpID0nLAogICAgICByZXN1bHQKICAgICk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07Cn0KCmV4cG9ydCBmdW5jdGlvbiBTcGF3biguLi5hcmdzKSB7CiAgY29uc3QgY2hpbGQgPSBzcGF3biguLi5hcmdzKTsKCiAgLy9kZWZpbmUoY2hpbGQsIHsgZ2V0IHN0ZGluKCkgeyByZXR1cm4gdGhpcy5zdGRpb1swXTsgfSxnZXQgc3Rkb3V0KCkgeyByZXR1cm4gdGhpcy5zdGRpb1sxXTsgfSxnZXQgc3RkZXJyKCkgeyByZXR1cm4gdGhpcy5zdGRpb1syXTsgfSB9KTsKICBkZWZpbmUoCiAgICBjaGlsZCwKICAgIHByb3BlcnRpZXMoCiAgICAgIHsKICAgICAgICBzdGRpbigpIHsgcmV0dXJuIHRoaXMuc3RkaW9bMF0gPj0gMCA/IGZkb3Blbih0aGlzLnN0ZGlvWzBdLCAndycpIDogbnVsbDsgfSwKICAgICAgICBzdGRvdXQoKSB7IHJldHVybiB0aGlzLnN0ZGlvWzFdID49IDAgPyBmZG9wZW4odGhpcy5zdGRpb1sxXSwgJ3InKSA6IG51bGw7IH0sCiAgICAgICAgc3RkZXJyKCkgeyByZXR1cm4gIHRoaXMuc3RkaW9bMl0gPj0gMCA/IGZkb3Blbih0aGlzLnN0ZGlvWzJdLCAncicpIDogbnVsbCB9CiAgICAgIH0sCiAgICAgIHsgbWVtbzogdHJ1ZSB9CiAgICApCiAgKTsKCiAgcmV0dXJuIGNoaWxkOwp9Ci8qZXhwb3J0IGZ1bmN0aW9uIFNwYXduKGZpbGUsIGFyZ3MsIG9wdGlvbnMgPSB7fSkgewogIGxldCB7CiAgICBibG9jayA9IHRydWUsCiAgICB1c2VQYXRoID0gdHJ1ZSwKICAgIGN3ZCwKICAgIHN0ZGlvID0gWydpbmhlcml0JywgJ2luaGVyaXQnLCAnaW5oZXJpdCddLAogICAgZW52LAogICAgdWlkLAogICAgZ2lkCiAgfSA9IG9wdGlvbnM7CiAgbGV0IGNoaWxkLAogICAgcGFyZW50ID0gWy4uLnN0ZGlvXTsKCiAgZm9yKGxldCBpID0gMDsgaSA8IDM7IGkrKykgewogICAgaWYoc3RkaW9baV0gPT0gJ3BpcGUnKSB7CiAgICAgIGxldCBbciwgd10gPSBwaXBlKCk7CiAgICAgIHN0ZGlvW2ldID0gaSA9PSAwID8gciA6IHc7CiAgICAgIHBhcmVudFtpXSA9IGkgPT0gMCA/IHcgOiByOwogICAgfSBlbHNlIGlmKHN0ZGlvW2ldID09ICdpbmhlcml0JykgewogICAgICBzdGRpb1tpXSA9IGk7CiAgICB9CiAgfQoKICBjb25zdCBbc3RkaW4sIHN0ZG91dCwgc3RkZXJyXSA9IHN0ZGlvOwogIGNvbnN0IG9wdHMgPSB7IGJsb2NrLCB1c2VQYXRoLCBjd2QsIHN0ZGluLCBzdGRvdXQsIHN0ZGVyciwgZW52LCB1aWQsIGdpZCB9OwogIGxldCBwaWQgPSBleGVjKFtmaWxlLCAuLi5hcmdzXSwgb3B0cyk7CiAgY29uc29sZS5sb2coJ2V4ZWMoJyArIGluc3BlY3QoW2ZpbGUsIC4uLmFyZ3NdKSArICcsICcgKyBpbnNwZWN0KG9wdHMpICsgJykgPScsIHBpZCk7CgogIGZvcihsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHsKICAgIGlmKHR5cGVvZiBzdGRpb1tpXSA9PSAnbnVtYmVyJyAmJiBzdGRpb1tpXSAhPSBpKSBjbG9zZShzdGRpb1tpXSk7CiAgfQoKICBjaGlsZCA9IHsKICAgIHBpZCwKICAgIHN0ZGlvOiBwYXJlbnQsCiAgICBnZXQgc3RkaW4oKSB7CiAgICAgIHJldHVybiB0aGlzLnN0ZGlvWzBdOwogICAgfSwKICAgIGdldCBzdGRvdXQoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0ZGlvWzFdOwogICAgfSwKICAgIGdldCBzdGRlcnIoKSB7CiAgICAgIHJldHVybiB0aGlzLnN0ZGlvWzJdOwogICAgfSwKICAgIGdldCB3YWl0aW5nKCkgewogICAgICByZXR1cm4gdGhpcy5leGl0ZWQgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnRlcm1zaWcgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnN0b3BwZWQgPT09IHVuZGVmaW5lZDsKICAgIH0sCiAgICB3YWl0KCkgewogICAgICBjb25zdCB7IHdhaXRpbmcsIGV4aXRlZCwgdGVybXNpZyB9ID0gY2hpbGQ7CgogICAgICBpZighd2FpdGluZykgcmV0dXJuIFtwaWQsIChleGl0ZWQgPDwgOCkgfCB0ZXJtc2lnXTsKCiAgICAgIGFzc2VydChleGl0ZWQsIHVuZGVmaW5lZCwgJ2V4aXRlZCcpOwogICAgICBhc3NlcnQodGVybXNpZywgdW5kZWZpbmVkLCAnc2lnbmFsbGVkJyk7CgogICAgICBjb25zdCBbcmV0LCBzdGF0dXNdID0gd2FpdHBpZChwaWQsIFdOT0hBTkcpOwogICAgICBjb25zdCBzaWduYWwgPSBzdGF0dXMgJiAweDdmOwoKICAgICAgaWYocmV0ID09IHBpZCkgewogICAgICAgIGNvbnNvbGUubG9nKCd3YWl0cGlkKCcgKyBwaWQgKyAnLCBXTk9IQU5HKSA9JywgW3JldCwgc3RhdHVzXSk7CgogICAgICAgIGlmKHNpZ25hbCA9PSAwKSBjaGlsZC5leGl0ZWQgPSAoc3RhdHVzID4+PiA4KSAmIDB4ZmY7CiAgICAgICAgZWxzZSBpZihzdGF0dXMgJiAoMHhmZiA9PSAweDdmKSkgY2hpbGQuc3RvcHBlZCA9IHRydWU7CiAgICAgICAgZWxzZSBjaGlsZC50ZXJtc2lnID0gc2lnbmFsOwogICAgICB9CgogICAgICBpZihyZXQgPCAwKSB0aHJvdyBuZXcgRXJyb3IoYHdhaXRwaWQ6ICR7c3RyZXJyb3IoLXJldCl9YCk7CgogICAgICByZXR1cm4gW3JldCwgc3RhdHVzXTsKICAgIH0KICB9OwoKICByZXR1cm4gY2hpbGQ7Cn0qLwoKLy8gJ2h0dHBzOi8vd3d3LmRpc2NvZ3MuY29tL3NlbGwvb3JkZXIvODM2OTAyMi0zNjQnCgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hVUkwodXJsLCBvcHRpb25zID0ge30pIHsKICBsZXQgewogICAgaGVhZGVycywKICAgIHByb3h5LAogICAgY29va2llcyA9ICdjb29raWVzLnR4dCcsCiAgICByYW5nZSwKICAgIGJvZHksCiAgICB2ZXJzaW9uID0gJzEuMScsCiAgICB0bHN2LAogICAgJ3VzZXItYWdlbnQnOiB1c2VyQWdlbnQKICB9ID0gb3B0aW9uczsKCiAgbGV0IGFyZ3MgPSBPYmplY3QuZW50cmllcyhoZWFkZXJzID8/IHt9KQogICAgLnJlZHVjZSgoYWNjLCBbaywgdl0pID0+IGFjYy5jb25jYXQoWyctSCcsIGAke2t9OiAke3Z9YF0pLCBbXSkKICAgIC5jb25jYXQoQXJyYXkuaXNBcnJheSh1cmwpID8gdXJsIDogW3VybF0pOwoKICBhcmdzLnB1c2goJy0tY29tcHJlc3NlZCcpOwogIGFyZ3MudW5zaGlmdCgnLUwnLCAnLWsnKTsKCiAgaWYoYm9keSkgYXJncy51bnNoaWZ0KCctZCcsIGJvZHkpOwogIGlmKHZlcnNpb24pIGFyZ3MudW5zaGlmdCgnLS1odHRwJyArIHZlcnNpb24pOwogIGlmKHRsc3YpIGFyZ3MudW5zaGlmdCgnLS10bHN2JyArIHRsc3YpOwogIGlmKHVzZXJBZ2VudCkgYXJncy51bnNoaWZ0KCctQScsIHVzZXJBZ2VudCk7CiAgaWYocmFuZ2UpIGFyZ3MudW5zaGlmdCgnLXInLCByYW5nZSk7CiAgaWYoY29va2llcykgYXJncy51bnNoaWZ0KCctYycsIGNvb2tpZXMpOwogIGlmKHByb3h5KSBhcmdzLnVuc2hpZnQoJy14JywgcHJveHkpOwoKICAvL2FyZ3MudW5zaGlmdCgnLXYnKTsKICAvL2FyZ3MudW5zaGlmdCgnLXNTJyk7CiAgYXJncy51bnNoaWZ0KCctLXRjcC1mYXN0b3BlbicsICctLXRjcC1ub2RlbGF5Jyk7CgogIGNvbnNvbGUubG9nKCdGZXRjaFVSTCcsIGNvbnNvbGUuY29uZmlnKHsgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LCBjb21wYWN0OiBmYWxzZSB9KSwgeyBhcmdzIH0pOwoKICBsZXQgY2hpbGQgPSBzcGF3bignY3VybCcsIGFyZ3MsIHsKICAgIGJsb2NrOiBmYWxzZSwKICAgIHN0ZGlvOiBbJ2luaGVyaXQnLCAncGlwZScsICdwaXBlJ10KICB9KTsKCiAgbGV0IFssIG91dCwgZXJyXSA9IGNoaWxkLnN0ZGlvOwoKICBjb25zb2xlLmxvZygnY2hpbGQnLCB7IG91dCwgZXJyIH0pOwoKICBsZXQgb3V0cHV0ID0gJycsCiAgICBlcnJvcnMgPSAnJzsKCiAgUmVhZENhbGxiYWNrKG91dCwgZGF0YSA9PiB7CiAgICBvdXRwdXQgKz0gZGF0YTsKICAgIC8vIGNvbnNvbGUubG9nKCdkYXRhJyxkYXRhLmxlbmd0aCk7CiAgfSk7CiAgUmVhZENhbGxiYWNrKGVyciwgZGF0YSA9PiB7CiAgICBlcnJvcnMgKz0gZGF0YTsKICAgIGVyci5wdXRzKGRhdGEpOwogICAgZXJyLmZsdXNoKCk7CiAgfSk7CiAgbGV0IGZsYWdzID0gY2hpbGRfcHJvY2Vzcy5XTk9IQU5HOwogIGNvbnNvbGUubG9nKCdmbGFncycsIGZsYWdzKTsKICBjaGlsZC53YWl0KGZsYWdzKTsKCiAgbGV0IHN0YXR1czsKCiAgc3RhdHVzID0gY2hpbGQud2FpdCgpOwoKICBjb25zb2xlLmxvZygnRmV0Y2hVUkwnLCB7IC8qIG91dHB1dDogZXNjYXBlKG91dHB1dCksIGVycm9ycywqLyBzdGF0dXMgfSk7CgogIHJldHVybiBvdXRwdXQ7Cn0KCmV4cG9ydCBmdW5jdGlvbiBTaGVsbChjbWQpIHsKICBsZXQgZiA9IHBvcGVuKGNtZCwgJ3InKTsKICBsZXQgcyA9ICcnOwogIHdoaWxlKCFmLmVvZigpICYmICFmLmVycm9yKCkpIHsKICAgIHMgKz0gZi5yZWFkQXNTdHJpbmcoKTsKICB9CiAgZi5jbG9zZSgpOwogIHJldHVybiBzOwp9CgAAAAAAAAAArS8AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQgAAAAAAAANCAAAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQgAAAAAAAANCAAAAAAAAAAAAAAAADwvw"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"book",
				"Bookmarks: Toggle"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/usr/include/mariadb/mysql.h",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/newlib/libc/include/sys/signal.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvUtils.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/libregexp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/count-neighbours.js",
		"/home/roman/Projects/plot-cv/test-sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygwin/include/cygwin/signal.h",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygwin/local_includes/sigproc.h",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygserver/cygserver.cc",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygwin/exceptions.cc",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygwin/signal.cc",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/test-minnet.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/test-matshared.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/test-umat.js",
		"/home/roman/Projects/plot-cv/lib/iterator/helpers.js",
		"/home/roman/Projects/plot-cv/json-iterator.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.ts",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/param.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/cli-helpers.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/qjsval.c",
		"/home/roman/Dokumente/bookmarks_26.05.23.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/iterator/event.js",
		"/home/roman/Projects/plot-cv/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/test-asynciterator.js",
		"/home/roman/Projects/plot-cv/test-repeater.js",
		"/home/roman/Projects/plot-cv/lib/parse-diff.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/dir-helpers.js",
		"/home/roman/Projects/plot-cv/lib/path.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/lib/filesystem.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/static/debugger.css",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/assemblyscript/util/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs-misc.c.ast.bjson",
		"/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
		"/home/roman/Projects/plot-cv/quickjs/core",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/core.qjsm.33358.VivoBook-X512FA.1684377984",
		"/home/roman/Projects/plot-cv/core.qjsm.33302.VivoBook-X512FA.1684377956",
		"/home/roman/Projects/plot-cv/core.qjsm.33122.VivoBook-X512FA.1684377931",
		"/home/roman/Projects/plot-cv/core.qjsm.115379.VivoBook-X512FA.1684385395",
		"/home/roman/Projects/plot-cv/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs/qjsc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.hpp",
		"/home/roman/.config/sublime-text/Packages/Outline/common.py",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_object.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_subdiv2d.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/opencv/modules/core/include/opencv2/core/mat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_umat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_rect.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/geometry.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_array.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/trace_skeleton.hpp",
		"/opt/opencv-4.5.5-x86_64/include/opencv4/opencv2/imgproc.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_draw.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line_segment_detector.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/lsd/src/lsd_opencv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/line_segment_detector.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.cpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/TODO",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/getdents.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/modules.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/assemblyscript/butterchurn/src/utils.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/fire.es",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/asynciterator.h"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/libwebsockets/*,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.jsx,-*/libwebsockets/*,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/libwebsockets/*,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Parser",
			"Lexer",
			"enum mysql_status",
			"status",
			"enum mysql_status",
			"mysql_status",
			"(pending|busy|idle|ready)",
			"(pending|busy)",
			"_OPT_",
			"mysql_set_",
			"mysql.*set",
			"mysql.*set.*user",
			"user",
			"opaque",
			"consume",
			"\\bdecorate\\(",
			"SpawnCompiler\\(",
			"fdopen",
			"Spawn\\(",
			"SpawnCompiler\\(",
			"SpawnCompiler",
			"SpawnCompiler\\(",
			"SpawnCompiler",
			"Spawn",
			"SIGHANDLE",
			"IGTERM",
			"sigaction",
			"\\bexec\\b",
			"path\\.",
			"child_process\\.spawn",
			"child_process",
			"\\bspawn\\b",
			"spawn",
			"WNOHANG",
			"'os'",
			"setReadHandler",
			"setReadHandler$",
			"setReadHandler",
			"poll\\(",
			"^js_os_pol",
			"js_os_pol",
			"\\balloca\\b",
			"\\balloca\\.h\\b",
			"\\balloca\\b",
			"alloca\\(",
			"alloca",
			"USE_WORKER",
			"handle_posted_message",
			"js_os_poll",
			"propId",
			"Proxy",
			"}\\n(  |)([^ ])",
			"}\\n  ([^ ])",
			"^export",
			"std\\.",
			"__filename",
			"Window.up",
			"LineSegment",
			"opts",
			"xml_read",
			"pr0n",
			"<p>",
			"new REPL",
			"m.buffer",
			"\\bdepth\\b",
			"depth",
			"delta",
			"null'",
			"nl\\(",
			"' '",
			"source",
			"LoadAST",
			"FindFunc",
			"SharedArrayBuffer",
			"process\\.",
			"prevTime",
			"Symbol.toString",
			"toStringTag",
			"new Console",
			"Console ",
			"hideKeys",
			"Pipeline",
			"debug",
			"DEBUG",
			"pipeline",
			"atexit",
			"rectangle",
			"font",
			"Font",
			"print",
			"variables",
			"Table",
			"saveC",
			"kill\\(",
			"atexit",
			"StartDebugger",
			"child =",
			"Table",
			"FindFunction",
			"\\bfiles\\b",
			"callback",
			"LaunchDebu",
			"NewDebugger",
			"skipToMain",
			"ConnectDebugger",
			"parseFiles",
			"fileNameDiffRegex",
			"push",
			"JS_DefineProperty",
			"req\\.(url|method|body)",
			"error.css",
			"404",
			"new Directory",
			"extendGenerator",
			"Directory",
			"keys\\(",
			"logFile",
			"\\bout\\b",
			"\\bERR\\b",
			"net\\.",
			"import net",
			"'net'",
			"'net'0'",
			"debug\\(`(.*)`, ([^\\s)]*)\\)",
			"packagePaths",
			"fnmatch",
			"\\b(Emitter|EventIterator|EventEmitter|EventTarget)\\b",
			"StartDebugger"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"spawn",
			"}\\n\\n\\1\\2",
			"}\\n\\n  \\1",
			"buf",
			"\\1",
			"debug(`\\1 ${\\2}`)",
			"fs.readFileSync",
			", ",
			"strOrRegex",
			"argumentsOfType",
			"valuePointer",
			"file",
			"arrayOrString",
			"",
			"\\1//console.",
			"obj[name]"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12422,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/meriyah.js",
							"function_name_status_row": 46,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									9895,
									9905
								],
								[
									9930,
									9984
								],
								[
									10081,
									10091
								],
								[
									10294,
									10304
								],
								[
									10352,
									10392
								],
								[
									10481,
									10513
								],
								[
									10608,
									10670
								],
								[
									10738,
									10792
								],
								[
									11169,
									11196
								],
								[
									11272,
									11296
								],
								[
									11376,
									11401
								],
								[
									11504,
									11527
								],
								[
									29784,
									29812
								],
								[
									29911,
									29957
								],
								[
									30334,
									30373
								],
								[
									30537,
									30565
								],
								[
									30695,
									30736
								],
								[
									30915,
									30948
								],
								[
									31097,
									31117
								],
								[
									31180,
									31208
								],
								[
									34194,
									34226
								],
								[
									34331,
									34362
								],
								[
									34716,
									34745
								],
								[
									35014,
									35103
								],
								[
									35231,
									35311
								],
								[
									36294,
									36346
								],
								[
									38109,
									38156
								],
								[
									40153,
									40194
								],
								[
									40773,
									40816
								],
								[
									41785,
									41829
								],
								[
									45367,
									45418
								],
								[
									45771,
									45809
								],
								[
									47287,
									47323
								],
								[
									47838,
									47880
								],
								[
									48266,
									48308
								],
								[
									53268,
									53319
								],
								[
									57541,
									57599
								],
								[
									57898,
									57945
								],
								[
									58193,
									58270
								],
								[
									60069,
									60107
								],
								[
									60193,
									60237
								],
								[
									60435,
									60469
								],
								[
									62625,
									62660
								],
								[
									63197,
									63245
								],
								[
									119618,
									119649
								],
								[
									119715,
									119722
								],
								[
									120023,
									120058
								],
								[
									120402,
									120449
								],
								[
									120761,
									120800
								],
								[
									121261,
									121299
								],
								[
									122618,
									122652
								],
								[
									123211,
									123274
								],
								[
									123480,
									123543
								],
								[
									123715,
									123755
								],
								[
									123838,
									123877
								],
								[
									123967,
									124003
								],
								[
									124111,
									124153
								],
								[
									125112,
									125190
								],
								[
									125676,
									125725
								],
								[
									126226,
									126275
								],
								[
									126531,
									126575
								],
								[
									126659,
									126724
								],
								[
									126963,
									127017
								],
								[
									127159,
									127222
								],
								[
									127632,
									127668
								],
								[
									127995,
									128055
								],
								[
									128182,
									128232
								],
								[
									128350,
									128372
								],
								[
									128426,
									128462
								],
								[
									128529,
									128595
								],
								[
									128813,
									128878
								],
								[
									129547,
									129602
								],
								[
									130326,
									130371
								],
								[
									130560,
									130602
								],
								[
									130715,
									130751
								],
								[
									130762,
									130801
								],
								[
									131061,
									131095
								],
								[
									131106,
									131139
								],
								[
									131381,
									131419
								],
								[
									131718,
									131774
								],
								[
									132076,
									132131
								],
								[
									132629,
									132675
								],
								[
									134717,
									134768
								],
								[
									135327,
									135379
								],
								[
									135821,
									135869
								],
								[
									136355,
									136426
								],
								[
									137672,
									137771
								],
								[
									139806,
									139925
								],
								[
									140876,
									140948
								],
								[
									141293,
									141360
								],
								[
									141788,
									141871
								],
								[
									142042,
									142169
								],
								[
									142813,
									142939
								],
								[
									144540,
									144620
								],
								[
									145515,
									145581
								],
								[
									145718,
									145784
								],
								[
									146137,
									146215
								],
								[
									146950,
									147040
								],
								[
									147342,
									147424
								],
								[
									148800,
									148881
								],
								[
									149296,
									149364
								],
								[
									149534,
									149611
								],
								[
									150116,
									150190
								],
								[
									150722,
									150802
								],
								[
									151302,
									151371
								],
								[
									151562,
									151641
								],
								[
									152549,
									152626
								],
								[
									153406,
									153476
								],
								[
									153807,
									153890
								],
								[
									154393,
									154493
								],
								[
									155806,
									155897
								],
								[
									156229,
									156313
								],
								[
									156621,
									156696
								],
								[
									157099,
									157170
								],
								[
									158102,
									158181
								],
								[
									163127,
									163185
								],
								[
									163449,
									163504
								],
								[
									165310,
									165372
								],
								[
									165815,
									165861
								],
								[
									166009,
									166088
								],
								[
									167105,
									167178
								],
								[
									167651,
									167724
								],
								[
									168091,
									168146
								],
								[
									174273,
									174366
								],
								[
									174675,
									174760
								],
								[
									175084,
									175167
								],
								[
									175382,
									175480
								],
								[
									176611,
									176718
								],
								[
									177273,
									177352
								],
								[
									177838,
									177940
								],
								[
									178950,
									179033
								],
								[
									179735,
									179847
								],
								[
									180715,
									180802
								],
								[
									181662,
									181745
								],
								[
									182468,
									182555
								],
								[
									184363,
									184430
								],
								[
									185027,
									185128
								],
								[
									185355,
									185429
								],
								[
									185745,
									185845
								],
								[
									189089,
									189160
								],
								[
									190596,
									190656
								],
								[
									190936,
									191026
								],
								[
									191539,
									191659
								],
								[
									195058,
									195152
								],
								[
									195561,
									195639
								],
								[
									196022,
									196099
								],
								[
									196451,
									196516
								],
								[
									196979,
									197046
								],
								[
									197425,
									197464
								],
								[
									198752,
									198835
								],
								[
									199259,
									199324
								],
								[
									199658,
									199707
								],
								[
									200308,
									200360
								],
								[
									200760,
									200798
								],
								[
									201326,
									201402
								],
								[
									201822,
									201867
								],
								[
									202075,
									202187
								],
								[
									204006,
									204094
								],
								[
									205299,
									205389
								],
								[
									205675,
									205809
								],
								[
									210743,
									210865
								],
								[
									211658,
									211793
								],
								[
									216418,
									216501
								],
								[
									217163,
									217254
								],
								[
									217538,
									217670
								],
								[
									237639,
									237711
								],
								[
									240073,
									240133
								],
								[
									240360,
									240460
								],
								[
									245699,
									245768
								],
								[
									246186,
									246297
								],
								[
									246590,
									246695
								],
								[
									246921,
									247020
								],
								[
									248426,
									248507
								],
								[
									250646,
									250734
								],
								[
									252453,
									252527
								],
								[
									253546,
									253616
								],
								[
									253793,
									253876
								],
								[
									254246,
									254364
								],
								[
									258773,
									258838
								],
								[
									259292,
									259374
								],
								[
									261155,
									261231
								],
								[
									262566,
									262607
								],
								[
									262813,
									262878
								],
								[
									263227,
									263315
								],
								[
									264284,
									264414
								],
								[
									269008,
									269077
								],
								[
									269350,
									269444
								],
								[
									270395,
									270482
								],
								[
									271084,
									271178
								],
								[
									271918,
									272006
								],
								[
									273094,
									273161
								],
								[
									273297,
									273378
								],
								[
									273746,
									273828
								],
								[
									274075,
									274117
								],
								[
									274497,
									274557
								],
								[
									274891,
									274950
								],
								[
									275184,
									275284
								],
								[
									275982,
									276048
								],
								[
									276430,
									276509
								],
								[
									276743,
									276787
								],
								[
									277040,
									277110
								],
								[
									277453,
									277517
								],
								[
									278529,
									278609
								],
								[
									278868,
									278962
								],
								[
									279687,
									279753
								],
								[
									280052,
									280122
								],
								[
									280337,
									280402
								],
								[
									281029,
									281067
								],
								[
									281121,
									281159
								],
								[
									281223,
									281255
								]
							],
							"symlist":
							[
								"ParseError",
								"  constructor(startindex, line, column, type, ...params)",
								"(_, i) =>",
								"ParseError",
								"  report(parser, type, ...params)",
								"  reportScopeError(scope)",
								"  reportMessageAt(index, line, column, type, ...params)",
								"  reportScannerError(index, line, column, type)",
								"  isIDContinue(code)",
								"  isIDStart(code)",
								"  mustEscape(code)",
								"(compressed, lookup) =>",
								"  advanceChar(parser)",
								"  consumeMultiUnitCodePoint(parser, hi)",
								"  consumeLineFeed(parser, state)",
								"  scanNewLine(parser)",
								"  isExoticECMAScriptWhitespace(ch)",
								"  fromCodePoint(codePoint)",
								"  toHex(code)",
								"  convertTokenType(t)",
								"  isIdentifierStart(code)",
								"  isIdentifierPart(code)",
								"  skipHashBang(parser)",
								"  skipSingleHTMLComment(parser, source, state, context, type, start, line, column)",
								"  skipSingleLineComment(parser, source, state, type, start, line, column)",
								"  skipMultiLineComment(parser, source, state)",
								"  scanRegularExpression(parser, context)",
								"  validate(parser, pattern, flags)",
								"  scanString(parser, context, quote)",
								"  parseEscape(parser, context, first)",
								"  handleStringError(state, code, isTemplate)",
								"  scanTemplate(parser, context)",
								"  scanBadTemplate(parser, ch)",
								"  scanTemplateTail(parser, context)",
								"  scanNumber(parser, context, kind)",
								"  scanDecimalDigitsOrSeparator(parser, char)",
								"  scanIdentifier(parser, context, isValidAsKeyword)",
								"  scanUnicodeIdentifier(parser, context)",
								"  scanIdentifierSlowCase(parser, context, hasEscape, isValidAsKeyword)",
								"  scanPrivateIdentifier(parser)",
								"  scanIdentifierUnicodeEscape(parser)",
								"  scanUnicodeEscape(parser)",
								"  nextToken(parser, context)",
								"  scanSingleToken(parser, context, state)",
								"  decodeHTMLStrict(text)",
								"key =>",
								"  decodeCodePoint(codePoint)",
								"  scanJSXAttributeValue(parser, context)",
								"  scanJSXString(parser, context)",
								"  scanJSXToken(parser, context)",
								"  scanJSXIdentifier(parser)",
								"  matchOrInsertSemicolon(parser, context, specDeviation)",
								"  isValidStrictMode(parser, index, tokenPos, tokenValue)",
								"  optionalBit(parser, context, t)",
								"  consumeOpt(parser, context, t)",
								"  consume(parser, context, t)",
								"  reinterpretToPattern(state, node)",
								"  validateBindingIdentifier(parser, context, kind, t, skipEvalArgCheck)",
								"  validateFunctionName(parser, context, t)",
								"  isStrictReservedWord(parser, context, t)",
								"  isPropertyWithPrivateFieldKey(expr)",
								"  isValidLabel(parser, labels, name, isIterationStatement)",
								"  validateAndDeclareLabel(parser, labels, name)",
								"  finishNode(parser, context, start, line, column, node)",
								"  isEqualTagName(elementName)",
								"  createArrowHeadParsingScope(parser, context, value)",
								"  recordScopeError(parser, type, ...params)",
								"  createScope()",
								"  addChildScope(parent, type)",
								"  addVarOrBlock(parser, context, scope, name, kind, origin)",
								"  addBlockName(parser, context, scope, name, kind, origin)",
								"  addVarName(parser, context, scope, name, kind)",
								"  declareUnboundVariable(parser, name)",
								"  addBindingToExports(parser, name)",
								"  pushComment(context, array)",
								"function(type, value, start, end, loc)",
								"  pushToken(context, array)",
								"function(token, start, end, loc)",
								"  isValidIdentifier(context, t)",
								"  classifyIdentifier(parser, context, t, isArrow)",
								"  create(source, sourceFile, onComment, onToken)",
								"  parseSource(source, options, context)",
								"  parseStatementList(parser, context, scope)",
								"  parseModuleItemList(parser, context, scope)",
								"  parseModuleItem(parser, context, scope)",
								"  parseStatementListItem(parser, context, scope, origin, labels)",
								"  parseStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
								"  parseExpressionOrLabelledStatement(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
								"  parseBlock(parser, context, scope, labels, start, line, column)",
								"  parseReturnStatement(parser, context, start, line, column)",
								"  parseExpressionStatement(parser, context, expression, start, line, column)",
								"  parseLabelledStatement(parser, context, scope, origin, labels, value, expr, token, allowFuncDecl, start, line, column)",
								"  parseAsyncArrowOrAsyncFunctionDeclaration(parser, context, scope, origin, labels, allowFuncDecl, start, line, column)",
								"  parseDirective(parser, context, expression, token, start, line, column)",
								"  parseEmptyStatement(parser, context, start, line, column)",
								"  parseThrowStatement(parser, context, start, line, column)",
								"  parseIfStatement(parser, context, scope, labels, start, line, column)",
								"  parseConsequentOrAlternative(parser, context, scope, labels, start, line, column)",
								"  parseSwitchStatement(parser, context, scope, labels, start, line, column)",
								"  parseWhileStatement(parser, context, scope, labels, start, line, column)",
								"  parseIterationStatementBody(parser, context, scope, labels)",
								"  parseContinueStatement(parser, context, labels, start, line, column)",
								"  parseBreakStatement(parser, context, labels, start, line, column)",
								"  parseWithStatement(parser, context, scope, labels, start, line, column)",
								"  parseDebuggerStatement(parser, context, start, line, column)",
								"  parseTryStatement(parser, context, scope, labels, start, line, column)",
								"  parseCatchBlock(parser, context, scope, labels, start, line, column)",
								"  parseStaticBlock(parser, context, scope, start, line, column)",
								"  parseDoWhileStatement(parser, context, scope, labels, start, line, column)",
								"  parseLetIdentOrVarDeclarationStatement(parser, context, scope, origin, start, line, column)",
								"  parseLexicalDeclaration(parser, context, scope, kind, origin, start, line, column)",
								"  parseVariableStatement(parser, context, scope, origin, start, line, column)",
								"  parseVariableDeclarationList(parser, context, scope, kind, origin)",
								"  parseVariableDeclaration(parser, context, scope, kind, origin)",
								"  parseForStatement(parser, context, scope, labels, start, line, column)",
								"  parseRestrictedIdentifier(parser, context, scope)",
								"  parseImportDeclaration(parser, context, scope)",
								"  parseImportNamespaceSpecifier(parser, context, scope)",
								"  parseModuleSpecifier(parser, context)",
								"  parseImportSpecifierOrNamedImports(parser, context, scope, specifiers)",
								"  parseImportMetaDeclaration(parser, context, start, line, column)",
								"  parseImportCallDeclaration(parser, context, start, line, column)",
								"  parseExportDeclaration(parser, context, scope)",
								"  parseExpression(parser, context, canAssign, isPattern, inGroup, start, line, column)",
								"  parseSequenceExpression(parser, context, inGroup, start, line, column, expr)",
								"  parseExpressions(parser, context, inGroup, canAssign, start, line, column)",
								"  parseAssignmentExpression(parser, context, inGroup, isPattern, start, line, column, left)",
								"  parseAssignmentExpressionOrPattern(parser, context, inGroup, isPattern, start, line, column, left)",
								"  parseConditionalExpression(parser, context, test, start, line, column)",
								"  parseBinaryExpression(parser, context, inGroup, start, line, column, minPrec, operator, left)",
								"  parseUnaryExpression(parser, context, isLHS, start, line, column, inGroup)",
								"  parseAsyncExpression(parser, context, inGroup, isLHS, canAssign, isPattern, inNew, start, line, column)",
								"  parseYieldExpression(parser, context, inGroup, canAssign, start, line, column)",
								"  parseAwaitExpression(parser, context, inNew, inGroup, start, line, column)",
								"  parseFunctionBody(parser, context, scope, origin, firstRestricted, scopeError)",
								"  parseSuperExpression(parser, context, start, line, column)",
								"  parseLeftHandSideExpression(parser, context, canAssign, inGroup, isLHS, start, line, column)",
								"  parseUpdateExpression(parser, context, expr, start, line, column)",
								"  parseMemberOrUpdateExpression(parser, context, expr, inGroup, inChain, start, line, column)",
								"  parseOptionalChain(parser, context, expr, start, line, column)",
								"  parsePropertyOrPrivatePropertyName(parser, context)",
								"  parseUpdateExpressionPrefixed(parser, context, inNew, isLHS, start, line, column)",
								"  parsePrimaryExpression(parser, context, kind, inNew, canAssign, isPattern, inGroup, isLHS, start, line, column)",
								"  parseImportCallOrMetaExpression(parser, context, inNew, inGroup, start, line, column)",
								"  parseImportMetaExpression(parser, context, meta, start, line, column)",
								"  parseImportExpression(parser, context, inGroup, start, line, column)",
								"  parseBigIntLiteral(parser, context, start, line, column)",
								"  parseTemplateLiteral(parser, context, start, line, column)",
								"  parseTemplate(parser, context)",
								"  parseTemplateElement(parser, context, cooked, raw, start, line, col, tail)",
								"  parseSpreadElement(parser, context, start, line, column)",
								"  parseArguments(parser, context, inGroup)",
								"  parseIdentifier(parser, context, isPattern)",
								"  parseLiteral(parser, context)",
								"  parseNullOrTrueOrFalseLiteral(parser, context, start, line, column)",
								"  parseThisExpression(parser, context)",
								"  parseFunctionDeclaration(parser, context, scope, origin, allowGen, flags, isAsync, start, line, column)",
								"  parseFunctionExpression(parser, context, isAsync, inGroup, start, line, column)",
								"  parseArrayLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
								"  parseArrayExpressionOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
								"  parseArrayOrObjectAssignmentPattern(parser, context, destructible, inGroup, isPattern, start, line, column, node)",
								"  parseSpreadOrRestElement(parser, context, scope, closingToken, kind, origin, isAsync, inGroup, isPattern, start, line, column)",
								"  parseMethodDefinition(parser, context, kind, inGroup, start, line, column)",
								"  parseObjectLiteral(parser, context, skipInitializer, inGroup, start, line, column)",
								"  parseObjectLiteralOrPattern(parser, context, scope, skipInitializer, inGroup, isPattern, kind, origin, start, line, column)",
								"  parseMethodFormals(parser, context, scope, kind, type, inGroup)",
								"  parseComputedPropertyName(parser, context, inGroup)",
								"  parseParenthesizedExpression(parser, context, canAssign, kind, origin, start, line, column)",
								"  parseIdentifierOrArrow(parser, context, start, line, column)",
								"  parseArrowFromIdentifier(parser, context, value, expr, inNew, canAssign, isAsync, start, line, column)",
								"  parseParenthesizedArrow(parser, context, scope, params, canAssign, isAsync, start, line, column)",
								"  parseArrowFunctionExpression(parser, context, scope, params, isAsync, start, line, column)",
								"  parseFormalParametersOrFormalList(parser, context, scope, inGroup, kind)",
								"  parseMembeExpressionNoCall(parser, context, expr, inGroup, start, line, column)",
								"  parseNewExpression(parser, context, inGroup, start, line, column)",
								"  parseMetaProperty(parser, context, meta, start, line, column)",
								"  parseAsyncArrowAfterIdent(parser, context, canAssign, start, line, column)",
								"  parseAsyncArrowOrCallExpression(parser, context, callee, canAssign, kind, origin, flags, start, line, column)",
								"  parseRegExpLiteral(parser, context, start, line, column)",
								"  parseClassDeclaration(parser, context, scope, flags, start, line, column)",
								"  parseClassExpression(parser, context, inGroup, start, line, column)",
								"  parseDecorators(parser, context)",
								"  parseDecoratorList(parser, context, start, line, column)",
								"  parseClassBody(parser, context, inheritedContext, scope, kind, origin, inGroup)",
								"  parseClassElementList(parser, context, scope, inheritedContext, type, decorators, isStatic, inGroup, start, line, column)",
								"  parsePrivateIdentifier(parser, context, start, line, column)",
								"  parsePropertyDefinition(parser, context, key, state, decorators, start, line, column)",
								"  parseBindingPattern(parser, context, scope, type, origin, start, line, column)",
								"  parseAndClassifyIdentifier(parser, context, scope, kind, origin, start, line, column)",
								"  parseJSXRootElementOrFragment(parser, context, inJSXChild, start, line, column)",
								"  parseOpeningFragment(parser, context, start, line, column)",
								"  parseJSXClosingElement(parser, context, inJSXChild, start, line, column)",
								"  parseJSXClosingFragment(parser, context, inJSXChild, start, line, column)",
								"  parseJSXChildren(parser, context)",
								"  parseJSXChild(parser, context, start, line, column)",
								"  parseJSXText(parser, context, start, line, column)",
								"  parseJSXOpeningFragmentOrSelfCloseElement(parser, context, inJSXChild, start, line, column)",
								"  parseJSXElementName(parser, context, start, line, column)",
								"  parseJSXMemberExpression(parser, context, object, start, line, column)",
								"  parseJSXAttributes(parser, context)",
								"  parseJSXSpreadAttribute(parser, context, start, line, column)",
								"  parseJsxAttribute(parser, context, start, line, column)",
								"  parseJSXNamespacedName(parser, context, namespace, start, line, column)",
								"  parseJSXExpressionContainer(parser, context, inJSXChild, isAttr, start, line, column)",
								"  parseJSXSpreadChild(parser, context, start, line, column)",
								"  parseJSXEmptyExpression(parser, context, start, line, column)",
								"  parseJSXIdentifier(parser, context, start, line, column)",
								"  parseScript(source, options)",
								"  parseModule(source, options)",
								"  parse(source, options)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1685323609.63,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "test-spawn.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 684,
						"regions":
						{
						},
						"selection":
						[
							[
								684,
								684
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"auto_name": "import { Spawn } from './io-helpers.js';",
							"function_name_status_row": 24,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1685393480.4,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "test-opencv.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24136,
						"regions":
						{
						},
						"selection":
						[
							[
								11896,
								11896
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 347,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1686610896.87,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5013.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/async/helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1778,
						"regions":
						{
						},
						"selection":
						[
							[
								1498,
								1498
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 52,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1686613810.68,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/meriyah.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 281362,
						"regions":
						{
						},
						"selection":
						[
							[
								40592,
								40592
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 790,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1686616776.8,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 24463.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "io-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12190,
						"regions":
						{
						},
						"selection":
						[
							[
								8244,
								8244
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 325,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1685330679.57,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5696.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.coffeecompile_output":
	{
		"height": 162.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"lib/meri",
				"lib/meriyah.js"
			],
			[
				"async/help",
				"lib/async/helpers.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"clang-",
				"clang-ast.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"signal.cc",
				"msys2-runtime/msys2/winsup/cygwin/signal.cc"
			],
			[
				"modules/lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"compile_c",
				"compile_commands.js"
			],
			[
				"count",
				"count-neighbours.js"
			],
			[
				"test-sock",
				"test-sockets.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-minn",
				"test-minnet.js"
			],
			[
				"quickjs-libc.c",
				"quickjs/quickjs-libc.c"
			],
			[
				"cvutil",
				"qjs-opencv/js/cvUtils.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"test-opencv.",
				"test-opencv.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"qjsval.c",
				"qjsval.c"
			],
			[
				"test-mat",
				"test-matshared.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"matsha",
				"test-matshared.js"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"json-i",
				"json-iterator.js"
			],
			[
				"iterator/help",
				"lib/iterator/helpers.js"
			],
			[
				"repeater.ts",
				"lib/repeater/repeater.ts"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"test-uma",
				"test-umat.js"
			],
			[
				"param.",
				"param.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"cli-helper",
				"cli-helpers.js"
			],
			[
				"test-vide",
				"test-video.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"test-repeat",
				"test-repeater.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"require.js",
				"quickjs/qjs-modules/lib/require.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"events.js",
				"events.js"
			],
			[
				"lib/events",
				"lib/events.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"dir-help",
				"dir-helpers.js"
			],
			[
				"io-helpe",
				"io-helpers.js"
			],
			[
				"lib/util",
				"lib/util.js"
			],
			[
				"path.js",
				"lib/path.js"
			],
			[
				"lib/misc",
				"lib/misc.js"
			],
			[
				"lib/filesys",
				"lib/filesystem.js"
			],
			[
				"lib/path",
				"lib/path.js"
			],
			[
				"compileComm",
				"lib/compileCommand.js"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"debugger-cie",
				"debugger-client.js"
			],
			[
				"debugger-cli",
				"debugger-client.js"
			],
			[
				"preactC",
				"lib/dom/preactComponent.js"
			],
			[
				"debugger.css",
				"static/debugger.css"
			],
			[
				"debugger-clie",
				"debugger-client.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"termin",
				"assemblyscript/util/terminal.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"lib/compi",
				"lib/compileCommand.js"
			],
			[
				"compile_comm",
				"compile_commands.js"
			],
			[
				"commands",
				"lib/compileCommand.js"
			],
			[
				"dir-he",
				"dir-helpers.js"
			],
			[
				"compileCom",
				"lib/compileCommand.js"
			],
			[
				"compile_",
				"compile_commands.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"compile_com",
				"compile_commands.js"
			],
			[
				"misc",
				"lib/misc.js"
			],
			[
				"debugger",
				"debugger.js"
			],
			[
				"find-",
				"quickjs-find-module.c"
			],
			[
				"qjsc.c",
				"qjsc.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-lib",
				"quickjs-libc.h"
			],
			[
				"quickjs-libc",
				"quickjs-libc.c"
			],
			[
				"quickjs-loc",
				"qjs-modules/quickjs-location.c"
			],
			[
				"quickjs-deep",
				"qjs-modules/quickjs-deep.c"
			],
			[
				"quickjs.c",
				"quickjs.c"
			],
			[
				"js_img",
				"js_imgproc.cpp"
			],
			[
				"js_imgpr",
				"js_imgproc.cpp"
			],
			[
				"trace",
				"trace_skeleton.hpp"
			],
			[
				"js_imgp",
				"js_imgproc.cpp"
			],
			[
				"umat.hpp",
				"js_umat.hpp"
			],
			[
				"js_line_seg",
				"js_line_segment_detector.cpp"
			],
			[
				"js_cv",
				"js_cv.cpp"
			],
			[
				"util.hpp",
				"util.hpp"
			],
			[
				"mat.hpp",
				"opencv/modules/core/include/opencv2/core/mat.hpp"
			],
			[
				"line.hpp",
				"line.hpp"
			],
			[
				"js_Draw",
				"js_draw.cpp"
			],
			[
				"js_Dr",
				"js_draw.cpp"
			],
			[
				"",
				"js_line_segment_detector.cpp"
			],
			[
				"line_seg",
				"js_line_segment_detector.cpp"
			],
			[
				"geom",
				"geometry.hpp"
			],
			[
				"geomtry",
				"geometry.hpp"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"repl.j",
				"lib/repl.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"quickjs-inp",
				"quickjs-inspect.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"test_Sock",
				"tests/test_sockets.js"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"resolve-impo",
				"resolve-imports.js"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"vector.c",
				"src/vector.c"
			],
			[
				"proper",
				"src/property-enumeration.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"process.j",
				"lib/process.js"
			],
			[
				"vect",
				"src/vector.c"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"wscli",
				"wscli.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"rpc.js",
				"js/rpc.js"
			],
			[
				"asynciter",
				"lib/asynciterator.c"
			],
			[
				"asyn",
				"lib/asynciterator.c"
			],
			[
				"minnet-asy",
				"src/minnet-asynciterator.c"
			],
			[
				"asynciterat",
				"lib/asynciterator.c"
			],
			[
				"minnet-clie",
				"src/minnet-client.c"
			],
			[
				"async",
				"lib/asynciterator.c"
			],
			[
				"minnet-as",
				"src/minnet-asynciterator.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 271.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1017.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 293.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
