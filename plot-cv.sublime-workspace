{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"define",
				"defineProperty"
			],
			[
				"exists",
				"existsAndNotEmpty"
			],
			[
				"RETURN_",
				"RETURN_VALUE_PATH"
			],
			[
				"constr",
				"constructor"
			],
			[
				"RE",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"CXXRec",
				"CXXRecordDecl"
			],
			[
				"CXXReco",
				"CXXRecordDecl"
			],
			[
				"des",
				"desugared"
			],
			[
				"con",
				"constructor"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					98,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1451,
								1510
							],
							[
								1998,
								2035
							],
							[
								2254,
								2286
							],
							[
								2388,
								2425
							],
							[
								2579,
								2606
							],
							[
								2688,
								2718
							],
							[
								2785,
								2793
							],
							[
								2832,
								2859
							],
							[
								2908,
								2935
							],
							[
								3012,
								3016
							],
							[
								3039,
								3072
							],
							[
								3252,
								3295
							],
							[
								3580,
								3588
							],
							[
								3980,
								3984
							],
							[
								4003,
								4023
							],
							[
								4174,
								4206
							],
							[
								4368,
								4386
							],
							[
								4639,
								4656
							],
							[
								4963,
								4974
							],
							[
								4994,
								5001
							],
							[
								5028,
								5037
							],
							[
								5157,
								5163
							],
							[
								5275,
								5283
							],
							[
								5398,
								5407
							],
							[
								5433,
								5442
							],
							[
								5473,
								5477
							],
							[
								5538,
								5542
							],
							[
								5618,
								5634
							],
							[
								5891,
								5906
							],
							[
								5973,
								5982
							],
							[
								6043,
								6051
							],
							[
								6100,
								6109
							],
							[
								6156,
								6166
							],
							[
								6219,
								6229
							],
							[
								6260,
								6270
							],
							[
								6358,
								6369
							],
							[
								6575,
								6579
							],
							[
								6760,
								6771
							],
							[
								7002,
								7006
							],
							[
								7058,
								7072
							],
							[
								7122,
								7172
							],
							[
								7242,
								7297
							],
							[
								7302,
								7336
							],
							[
								7515,
								7519
							],
							[
								7600,
								7615
							],
							[
								7703,
								7759
							],
							[
								7833,
								7843
							],
							[
								8047,
								8054
							],
							[
								8171,
								8182
							],
							[
								8219,
								8248
							],
							[
								8309,
								8340
							],
							[
								8542,
								8552
							],
							[
								8607,
								8620
							],
							[
								8657,
								8686
							],
							[
								8747,
								8778
							],
							[
								8982,
								8992
							],
							[
								9047,
								9051
							],
							[
								9149,
								9175
							],
							[
								12155,
								12159
							],
							[
								13174,
								13186
							],
							[
								13309,
								13317
							],
							[
								13403,
								13414
							],
							[
								13537,
								13550
							],
							[
								13673,
								13685
							],
							[
								13779,
								13788
							],
							[
								13840,
								13851
							],
							[
								13940,
								13949
							],
							[
								14069,
								14085
							],
							[
								14143,
								14159
							],
							[
								14207,
								14220
							],
							[
								14367,
								14382
							],
							[
								14529,
								14544
							],
							[
								14801,
								14815
							],
							[
								14901,
								14913
							],
							[
								14980,
								14992
							],
							[
								15098,
								15115
							],
							[
								15201,
								15212
							],
							[
								15272,
								15285
							],
							[
								15428,
								15436
							],
							[
								15544,
								15554
							],
							[
								15735,
								15744
							],
							[
								17550,
								17560
							],
							[
								19639,
								19645
							],
							[
								19931,
								19942
							],
							[
								20043,
								20093
							],
							[
								20179,
								20187
							],
							[
								20247,
								20255
							],
							[
								22062,
								22092
							],
							[
								22171,
								22181
							],
							[
								22199,
								22225
							],
							[
								22354,
								22362
							],
							[
								22445,
								22453
							],
							[
								22631,
								22636
							],
							[
								22674,
								22681
							],
							[
								22765,
								22779
							],
							[
								23372,
								23376
							],
							[
								23457,
								23462
							],
							[
								24996,
								25000
							],
							[
								25902,
								25916
							],
							[
								25980,
								25990
							],
							[
								26075,
								26097
							],
							[
								26319,
								26327
							],
							[
								26449,
								26468
							],
							[
								26566,
								26574
							],
							[
								26592,
								26614
							],
							[
								26735,
								26743
							],
							[
								26848,
								26874
							],
							[
								27229,
								27237
							],
							[
								27352,
								27363
							],
							[
								27381,
								27407
							],
							[
								27479,
								27483
							],
							[
								27588,
								27598
							],
							[
								27658,
								27662
							],
							[
								27725,
								27729
							],
							[
								27779,
								27783
							],
							[
								28193,
								28203
							],
							[
								28235,
								28243
							],
							[
								28340,
								28349
							],
							[
								28367,
								28389
							],
							[
								28607,
								28619
							],
							[
								28637,
								28663
							],
							[
								28898,
								28906
							],
							[
								28969,
								28977
							],
							[
								30044,
								30063
							],
							[
								30179,
								30189
							],
							[
								30244,
								30252
							],
							[
								30361,
								30368
							],
							[
								30386,
								30408
							],
							[
								30753,
								30761
							],
							[
								30858,
								30867
							],
							[
								30891,
								30913
							],
							[
								31018,
								31029
							],
							[
								31047,
								31069
							],
							[
								31446,
								31463
							],
							[
								31481,
								31503
							],
							[
								31759,
								31767
							],
							[
								31878,
								31883
							],
							[
								31931,
								31954
							],
							[
								32076,
								32087
							],
							[
								32136,
								32148
							],
							[
								32210,
								32219
							],
							[
								32266,
								32276
							],
							[
								32314,
								32350
							],
							[
								33005,
								33017
							],
							[
								33063,
								33072
							],
							[
								33119,
								33129
							],
							[
								33309,
								33314
							],
							[
								33370,
								33378
							],
							[
								33471,
								33494
							],
							[
								33753,
								33769
							],
							[
								33988,
								34004
							],
							[
								34415,
								34428
							],
							[
								34574,
								34584
							],
							[
								34632,
								34643
							],
							[
								34735,
								34747
							],
							[
								34797,
								34810
							],
							[
								34858,
								34870
							],
							[
								34920,
								34933
							],
							[
								35181,
								35194
							],
							[
								35229,
								35244
							],
							[
								35324,
								35379
							],
							[
								35923,
								35933
							],
							[
								36176,
								36196
							],
							[
								36279,
								36325
							],
							[
								37824,
								37889
							],
							[
								38199,
								38203
							],
							[
								38464,
								38468
							],
							[
								39193,
								39200
							],
							[
								39254,
								39261
							],
							[
								39345,
								39352
							],
							[
								39529,
								39564
							],
							[
								39603,
								39623
							],
							[
								39653,
								39659
							],
							[
								39680,
								39688
							],
							[
								39795,
								39828
							],
							[
								40093,
								40118
							],
							[
								40459,
								40501
							],
							[
								41033,
								41086
							],
							[
								42496,
								42502
							],
							[
								42552,
								42558
							],
							[
								42723,
								42729
							],
							[
								42871,
								42887
							],
							[
								43432,
								43439
							],
							[
								43482,
								43486
							],
							[
								43506,
								43513
							],
							[
								43634,
								43661
							],
							[
								43720,
								43735
							],
							[
								44040,
								44047
							],
							[
								44107,
								44121
							],
							[
								44166,
								44181
							],
							[
								44207,
								44211
							],
							[
								44243,
								44254
							],
							[
								44287,
								44299
							],
							[
								44333,
								44346
							],
							[
								44422,
								44427
							],
							[
								44507,
								44511
							],
							[
								44535,
								44547
							],
							[
								44610,
								44615
							],
							[
								44645,
								44649
							],
							[
								44673,
								44682
							],
							[
								44695,
								44711
							],
							[
								45053,
								45057
							],
							[
								45081,
								45092
							],
							[
								45151,
								45155
							],
							[
								45193,
								45197
							],
							[
								45229,
								45245
							],
							[
								45284,
								45288
							],
							[
								45306,
								45310
							],
							[
								45354,
								45406
							],
							[
								45594,
								45610
							],
							[
								45970,
								45991
							],
							[
								46017,
								46021
							],
							[
								46463,
								46468
							],
							[
								46503,
								46530
							],
							[
								46724,
								46752
							],
							[
								46933,
								46958
							],
							[
								47033,
								47065
							],
							[
								47196,
								47200
							],
							[
								47337,
								47366
							],
							[
								47476,
								47480
							],
							[
								47774,
								47796
							],
							[
								48835,
								48890
							],
							[
								48970,
								48977
							],
							[
								49043,
								49050
							],
							[
								49087,
								49113
							],
							[
								49207,
								49215
							],
							[
								49281,
								49289
							],
							[
								49351,
								49362
							],
							[
								49516,
								49525
							],
							[
								49544,
								49570
							],
							[
								49623,
								49632
							],
							[
								49685,
								49711
							],
							[
								49763,
								49782
							],
							[
								49858,
								49875
							],
							[
								49910,
								49934
							],
							[
								50193,
								50198
							],
							[
								50256,
								50263
							],
							[
								50345,
								50356
							],
							[
								51064,
								51074
							],
							[
								51122,
								51126
							],
							[
								51317,
								51328
							],
							[
								51339,
								51363
							],
							[
								51431,
								51463
							],
							[
								51619,
								51644
							],
							[
								51708,
								51744
							],
							[
								51814,
								51854
							],
							[
								52106,
								52134
							],
							[
								52181,
								52212
							],
							[
								52441,
								52483
							],
							[
								52686,
								52711
							],
							[
								52869,
								52890
							],
							[
								52935,
								52954
							],
							[
								53288,
								53315
							],
							[
								53383,
								53402
							],
							[
								53606,
								53641
							],
							[
								53759,
								53807
							],
							[
								54053,
								54080
							],
							[
								54698,
								54739
							],
							[
								54977,
								55004
							],
							[
								55147,
								55168
							],
							[
								55229,
								55256
							],
							[
								55301,
								55333
							],
							[
								55583,
								55609
							],
							[
								55803,
								55822
							],
							[
								56484,
								56509
							],
							[
								56557,
								56588
							],
							[
								56655,
								56670
							],
							[
								56865,
								56886
							],
							[
								57003,
								57039
							],
							[
								57259,
								57278
							],
							[
								57682,
								57703
							],
							[
								57920,
								57953
							],
							[
								58013,
								58036
							],
							[
								58099,
								58116
							],
							[
								58236,
								58240
							],
							[
								59067,
								59092
							],
							[
								59299,
								59326
							],
							[
								59791,
								59795
							],
							[
								60005,
								60009
							],
							[
								60208,
								60227
							],
							[
								60348,
								60353
							],
							[
								60691,
								60730
							],
							[
								60829,
								60872
							],
							[
								61082,
								61097
							],
							[
								61363,
								61399
							],
							[
								61495,
								61523
							],
							[
								61793,
								61837
							],
							[
								61899,
								61930
							],
							[
								61989,
								62010
							],
							[
								62069,
								62092
							],
							[
								62515,
								62541
							],
							[
								62609,
								62635
							],
							[
								62699,
								62718
							],
							[
								62760,
								62795
							],
							[
								62969,
								63011
							],
							[
								63196,
								63217
							],
							[
								63393,
								63423
							],
							[
								63643,
								63669
							],
							[
								64098,
								64117
							],
							[
								64178,
								64201
							],
							[
								64736,
								64763
							],
							[
								64813,
								64836
							],
							[
								64993,
								65029
							],
							[
								65099,
								65128
							],
							[
								65186,
								65209
							],
							[
								65387,
								65412
							],
							[
								65496,
								65538
							],
							[
								65637,
								65662
							],
							[
								65966,
								66021
							],
							[
								66263,
								66292
							],
							[
								66543,
								66587
							],
							[
								66719,
								66763
							],
							[
								66850,
								66878
							],
							[
								67022,
								67046
							],
							[
								67294,
								67338
							],
							[
								67660,
								67713
							],
							[
								67812,
								67857
							],
							[
								67932,
								67951
							],
							[
								68012,
								68033
							],
							[
								68210,
								68237
							],
							[
								68286,
								68316
							],
							[
								68328,
								68349
							],
							[
								68361,
								68393
							],
							[
								68535,
								68565
							],
							[
								68577,
								68618
							],
							[
								68630,
								68669
							],
							[
								68681,
								68704
							],
							[
								68716,
								68739
							],
							[
								68751,
								68770
							],
							[
								68782,
								68824
							],
							[
								68836,
								68861
							],
							[
								68873,
								68900
							],
							[
								68912,
								68950
							],
							[
								68962,
								69044
							],
							[
								69056,
								69123
							],
							[
								69135,
								69160
							],
							[
								69172,
								69214
							],
							[
								69399,
								69437
							],
							[
								69449,
								69506
							],
							[
								69518,
								69556
							],
							[
								69568,
								69593
							],
							[
								69605,
								69632
							],
							[
								69644,
								69682
							],
							[
								69694,
								69750
							],
							[
								69844,
								69895
							],
							[
								69907,
								69982
							],
							[
								69994,
								70025
							],
							[
								70037,
								70056
							],
							[
								70068,
								70104
							],
							[
								70200,
								70221
							],
							[
								70233,
								70263
							],
							[
								70275,
								70298
							],
							[
								70310,
								70353
							],
							[
								70365,
								70403
							],
							[
								70415,
								70459
							],
							[
								70471,
								70495
							],
							[
								70612,
								70642
							],
							[
								70654,
								70680
							],
							[
								70724,
								70771
							],
							[
								70783,
								70825
							],
							[
								70837,
								70875
							],
							[
								70887,
								70923
							],
							[
								70935,
								70982
							],
							[
								70994,
								71017
							],
							[
								71029,
								71063
							],
							[
								71271,
								71314
							],
							[
								71326,
								71378
							],
							[
								71482,
								71529
							],
							[
								71541,
								71569
							],
							[
								71581,
								71619
							],
							[
								71631,
								71672
							],
							[
								71684,
								71703
							],
							[
								71715,
								71744
							],
							[
								71756,
								71782
							],
							[
								71794,
								71822
							],
							[
								71834,
								71886
							],
							[
								71898,
								71926
							],
							[
								71938,
								71972
							],
							[
								72104,
								72125
							],
							[
								72137,
								72160
							],
							[
								72172,
								72210
							],
							[
								72222,
								72260
							],
							[
								72272,
								72293
							],
							[
								72305,
								72330
							],
							[
								72342,
								72367
							],
							[
								72379,
								72410
							],
							[
								72497,
								72516
							],
							[
								72528,
								72551
							],
							[
								72563,
								72604
							],
							[
								72616,
								72659
							],
							[
								72671,
								72698
							],
							[
								72710,
								72748
							],
							[
								72760,
								72793
							],
							[
								72805,
								72841
							],
							[
								72853,
								72872
							],
							[
								72938,
								73001
							],
							[
								73013,
								73069
							],
							[
								73081,
								73104
							],
							[
								73116,
								73151
							],
							[
								73163,
								73219
							],
							[
								73231,
								73284
							],
							[
								73296,
								73341
							],
							[
								73353,
								73398
							],
							[
								73410,
								73455
							],
							[
								73467,
								73497
							],
							[
								73509,
								73556
							],
							[
								73568,
								73593
							],
							[
								73605,
								73638
							],
							[
								73650,
								73680
							],
							[
								73692,
								73732
							],
							[
								73744,
								73797
							],
							[
								73809,
								73832
							],
							[
								73844,
								73865
							],
							[
								73877,
								73917
							],
							[
								73929,
								73963
							],
							[
								73975,
								73997
							],
							[
								74009,
								74043
							],
							[
								74055,
								74078
							],
							[
								74090,
								74132
							],
							[
								74144,
								74175
							],
							[
								74187,
								74213
							],
							[
								74226,
								74256
							],
							[
								74830,
								74870
							],
							[
								75080,
								75084
							],
							[
								76225,
								76265
							],
							[
								76648,
								76708
							],
							[
								77144,
								77170
							],
							[
								77278,
								77316
							],
							[
								77512,
								77516
							],
							[
								77803,
								77833
							],
							[
								78292,
								78296
							],
							[
								78948,
								78987
							],
							[
								79651,
								79708
							],
							[
								80029,
								80053
							],
							[
								80526,
								80556
							],
							[
								80820,
								80861
							],
							[
								80996,
								81035
							],
							[
								81047,
								81092
							],
							[
								81104,
								81132
							],
							[
								81144,
								81180
							],
							[
								81324,
								81362
							],
							[
								81374,
								81413
							],
							[
								81425,
								81466
							],
							[
								81478,
								81513
							],
							[
								81525,
								81572
							],
							[
								81584,
								81623
							],
							[
								81636,
								81670
							],
							[
								81682,
								81730
							],
							[
								81742,
								81785
							],
							[
								81797,
								81846
							],
							[
								81858,
								81908
							],
							[
								81920,
								81969
							],
							[
								82223,
								82247
							],
							[
								82304,
								82329
							],
							[
								82708,
								82737
							],
							[
								82930,
								82935
							],
							[
								83210,
								83231
							],
							[
								83298,
								83356
							],
							[
								83502,
								83506
							],
							[
								84091,
								84099
							],
							[
								84151,
								84159
							],
							[
								84271,
								84275
							],
							[
								84528,
								84586
							],
							[
								84688,
								84693
							],
							[
								85042,
								85049
							],
							[
								85238,
								85291
							],
							[
								85528,
								85589
							],
							[
								85899,
								85979
							],
							[
								86100,
								86105
							],
							[
								86443,
								86504
							],
							[
								86846,
								86856
							],
							[
								86922,
								86947
							],
							[
								86985,
								86995
							],
							[
								87060,
								87071
							],
							[
								87145,
								87160
							],
							[
								87199,
								87203
							],
							[
								87283,
								87308
							],
							[
								87347,
								87355
							],
							[
								87397,
								87426
							],
							[
								87456,
								87460
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA1LQAAKGFzdCwgcikgPT4KRGVlcEZpbmQoYXN0LCBwcmVkLCBmbGFncyA9IGRlZXAuUkVUVVJOX1ZBTFVFKQpEZWVwU2VsZWN0KGFzdCwgcHJlZCwgZmxhZ3MgPSBkZWVwLlJFVFVSTl9WQUxVRSkKRGVlcENhY2hlUGF0aChhc3QsIHBhdGgsIG0pCkRlZXBQYXRoT2YoYXN0LCB2YWx1ZSkKRGVlcEdldChhc3QsIHBhdGgsIC4uLmFyZ3MpCkZpbGVUaW1lKGZpbGVuYW1lKQpOZXdlcihmaWxlLCAuLi5vdGhlcikKICBvdGhlciA9PgpPbGRlcihmaWxlLCBvdGhlcikKR2V0U3Vic2NyaXB0cyhzdHIpCiAgbSA9PgpUcmltU3Vic2NyaXB0cyhzdHIsIHN1YikKICBuYW1lT3JJZFByZWQobmFtZV9vcl9pZCwgLi4uYXJncykKbm9kZSA9PgpMaXN0CiAgY29uc3RydWN0b3IoLi4uYXJncykKICBmaWx0ZXIoY2FsbGJhY2ssIHRoaXNBcmcgPSBudWxsKQogIGNhbGxiYWNrID0gZWxlbSA9PgogIHNsaWNlKHN0YXJ0LCBlbmQpCiAgZ2V0IGZpcnN0KCkKICBlbGVtID0+CiAgZW50cmllcygpCiAga2V5cygpCiAgdmFsdWVzKCkKICB0b0FycmF5KCkKKGEsIG4pID0+Ckxpc3QKTm9kZQogIGNvbnN0cnVjdG9yKGFzdCkKICBzdGF0aWMgZ2V0KGFzdCkKICBnZXQgYXN0KCkKICBnZXQgaWQoKQogIGdldCBsb2MoKQogIGdldCBmaWxlKCkKKHYsIGspID0+Cih2LCBrKSA9PgogIGdldCByYW5nZSgpCiAgciA9PgogIHRvSlNPTihvYmopCk5vZGUKKG5vZGUsIGFzdCkgPT4KUGF0aE9mKG5vZGUsIGFzdCA9IGdsb2JhbFRoaXNbJyQnXS5kYXRhKQpIaWVyKG5vZGVfb3JfcGF0aCwgdCA9IChwLCBhc3QsIGFib3J0KSA9PiBwLgooYXN0KSwgYXN0ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEpCiAgcCA9PgogIGFib3J0Rm4gPSAoKSA9PgpGaW5kVHlwZSh0eXBlTmFtZSwgYXN0ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEpCihbdG9rXSkgPT4KICBub2RlID0+ClBvaW50ZXJUeXBlCiAgY29uc3RydWN0b3IocG9pbnRlZSwgYXN0LCBucykKICBzdGF0aWMgZnJvbVN0cmluZyhzdHIsIGFzdCwgbnMpCiAgdG9TdHJpbmcoKQpSZWZlcmVuY2VUeXBlCiAgY29uc3RydWN0b3IocG9pbnRlZSwgYXN0LCBucykKICBzdGF0aWMgZnJvbVN0cmluZyhzdHIsIGFzdCwgbnMpCiAgdG9TdHJpbmcoKQpUeXBlCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0LCBucykKICBuID0+CiAgZ2V0IHJlZ0V4cCgpCiAgaXNFbnVtKCkKICBpc1BvaW50ZXIoKQogIGlzUmVmZXJlbmNlKCkKICBpc0Z1bmN0aW9uKCkKICBpc0FycmF5KCkKICBpc0ludGVnZXIoKQogIGFycmF5T2YoKQogIGdldCBzdWJzY3JpcHRzKCkKICB0cmltU3Vic2NyaXB0cygpCiAgZ2V0IHBvaW50ZXIoKQogIGdldCByZWZlcmVuY2UoKQogIGdldFBvaW50ZXIoYXN0KQogIGdldCB1bnNpZ25lZCgpCiAgZ2V0IHNpZ25lZCgpCiAgaXNDb21wb3VuZCgpCiAgaXNGbG9hdGluZ1BvaW50KCkKICBnZXQgYWxpYXMoKQogIGdldCBhbGlhc2VzKCkKICBpc0VudW0oKQogIGlzU3RyaW5nKCkKICBnZXQgZmZpKCkKICBnZXQgc2l6ZSgpCiAgdG9KUygpCiAgdG9KU09OKG9iaikKICBzdGF0aWMgZ2V0KG5hbWVfb3JfaWQsIGFzdCA9IGdsb2JhbFRoaXNbJyQnXS5kYXRhKQpub2RlID0+Cm5vZGUgPT4KUm91bmRUbyh2YWx1ZSwgYWxpZ24pClJlY29yZERlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QsIG5zKQogIGNoaWxkID0+CiAgY2hpbGQgPT4KKCkgPT4KICBub2RlID0+CihhY2MsIG5vZGUpID0+CiAgaSA9PgpuID0+CiAgbiA9PgooW25hbWUsIHRdKSA9PgogIGdldCBzaXplKCkKKGFjYywgW25hbWUsIHR5cGVdKSA9PgogIHRvSlNPTigpCihbbmFtZSwgbWVtYmVyXSkgPT4KRW51bURlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgY2hpbGQgPT4KKHsgbmFtZSwgdHlwZSwgaW5uZXIgfSkgPT4KICB0b0pTT04oKQpUeXBlZGVmRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCwgbnMpCiAgbiA9PgoodiwgaykgPT4KICBuID0+CiAgbiA9PgogIG4gPT4KICBnZXQgc2l6ZSgpCiAgdG9KU09OKCkKRmllbGREZWNsCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQpGdW5jdGlvbkRlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QsIG5zKQogIGNoaWxkID0+CiAgY2hpbGQgPT4KKHsgbmFtZSwgdHlwZSB9KSA9PgogIGlzTWV0aG9kKCkKICB0b0pTT04oKQpWYXJEZWNsCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIHRvSlNPTigpCkNsYXNzRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKQnVpbHRpblR5cGUKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCkNvbnN0YW50QXJyYXlUeXBlCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIHRvSlNPTigpClJhbmdlCiAgY29uc3RydWN0b3IoYmVnaW4sIGVuZCkKICBnZXQgYmVnaW4oKQogIHNldCBiZWdpbih2KQogIGdldCBlbmQoKQogIHNldCBlbmQodikKICB0b1N0cmluZyhvcHRzID0geyBwcmludEZpbGU6IHRydWUgfSkKICBnZXQgbGVuZ3RoKCkKICB0b0FycmF5KCkKICB0b09iamVjdCgpClJhbmdlCkxvY2F0aW9uCiAgc3RhdGljIGF0KGZpbGUsIG9mZnNldCkKICBzdGF0aWMgZnJvbShsb2MpCiAgY29uc3RydWN0b3IobG9jKQogIHVwZGF0ZShvdGhlcikKICBnZXQgbGluZSgpCiAgc2V0IGxpbmUodikKICBnZXQgY29sdW1uKCkKICBzZXQgY29sdW1uKHYpCiAgZ2V0IG9mZnNldCgpCiAgc2V0IG9mZnNldCh2KQoodCwgLi4uYykgPT4KJ1x4MWJbbScgOiB0ID0+CiAgdG9TdHJpbmcob3B0cyA9IHsgcHJpbnRGaWxlOiB0cnVlLCBvbmx5T2Zmc2V0OiBmYWxzZSB9KQogIHRvT2JqZWN0KCkKICBsb2NhbGVDb21wYXJlKG90aGVyKQpUeXBlRmFjdG9yeShub2RlLCBhc3QsIGNhY2hlID0gdHJ1ZSkKU3Bhd25Db21waWxlcihjb21waWxlciwgaW5wdXQsIG91dGZpbGUsIGFyZ3MgPSBbXSkKICBwID0+CiAgcCA9PgogIGxpbmUgPT4KICBsaW5lID0+CiAgbGluZSA9PgpQaXBlUmVhZGVyKGZkLCBjYWxsYmFjaykKKHJlc29sdmUsIHJlamVjdCkgPT4KKCkgPT4KZGF0YSA9PgpSZWFkUGlwZShmZCwgY2FsbGJhY2spClJlYWRPdXRwdXQoZmQpClNvdXJjZURlcGVuZGVuY2llcyguLi5hcmdzKQpBc3REdW1wKGNvbXBpbGVyLCBzb3VyY2UsIGFyZ3MsIGZvcmNlKQogIHNpemUoKQogIGpzb24oKQogIGRhdGEoKQpTZXRGaWxlID0gbG9jID0+CiAgZmlsZXMoKQogIG4gPT4KICBmaWxlID0+CiAgcHJlZDIgPSAodXNlZCwgaW1wbGljaXQpID0+Cm5vZGUgPT4KICB0eXBlcygpCm4gPT4KKCkgPT4KTGlzdAogIGZ1bmN0aW9ucygpCm4gPT4KKCkgPT4KbiA9PgpMaXN0CiAgbmFtZXNwYWNlcygpCm4gPT4KTGlzdAogIGNsYXNzZXMoKQogIHByZWRpY2F0ZSA9IG4gPT4KTGlzdAogIHZhcmlhYmxlcygpCiAgbiA9PgpMaXN0CiAgbmFtZXMoZGVwdGggPSAxKQogIG4gPT4KICBuID0+Ck5hbWVGb3IoZGVjbCwgYXN0ID0gZ2xvYmFsVGhpc1snJCddPy5kYXRhKQoodmFsdWUsIGtleSkgPT4KTm9kZVR5cGUobikKICB0ID0+Cm4gPT4KTm9kZU5hbWUobiwgbmFtZSkKUmF3TG9jYXRpb24ocGF0aCkKUmF3UmFuZ2UocGF0aCkKQ29tcGxldGVMb2NhdGlvbihwYXRoKQogIGwgPT4KQ29tcGxldGVSYW5nZShwYXRoKQogIGwgPT4KR2V0TG9jKG5vZGUpCkdldFR5cGVOb2RlKG5vZGUsIGFzdCA9IGdsb2JhbFRoaXNbJyQnXS5kYXRhKQogIG5vZGUgPT4KICBub2RlID0+CkdldFR5cGVTdHIobm9kZSkKICBpbm5lciA9PgogIGlubmVyID0+CihbbiwgdF0pID0+Ck5vZGVFcnJvcgogIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG5vZGUpCk5vZGVFcnJvcgpOb2RlUHJpbnRlcihhc3QpCiAgcHV0KHN0cikKICB0cmltKCkKICBwcmludGVyID0gZnVuY3Rpb24obm9kZSkKICBnZXQoKQogIHZhbHVlKCkKICB2YWx1ZShub2RlKQogIHRvU3RyaW5nKCkKICBpID0+Ck5vZGVQcmludGVyCkFiaVRhZ0F0dHIoYWJpX3RhZ19hdHRyKQpBY2Nlc3NTcGVjRGVjbChhY2Nlc3Nfc3BlY19kZWNsKQpBbGlnbmVkQXR0cihhbGlnbmVkX2F0dHIpCkFsd2F5c0lubGluZUF0dHIoYWx3YXlzX2lubGluZV9hdHRyKQpBcnJheVN1YnNjcmlwdEV4cHIoYXJyYXlfc3Vic2NyaXB0X2V4cHIpCkFzbUxhYmVsQXR0cihhc21fbGFiZWxfYXR0cikKQmluYXJ5T3BlcmF0b3IoYmluYXJ5X29wZXJhdG9yKQpCbG9ja0NvbW1hbmRDb21tZW50KGJsb2NrX2NvbW1hbmRfY29tbWVudCkKQnVpbHRpbkF0dHIoYnVpbHRpbl9hdHRyKQpCcmVha1N0bXQoYnJlYWtfc3RtdCkKQ2FsbEV4cHIoY2FsbF9leHByKQpSZWNvdmVyeUV4cHIocmVjb3ZlcnlfZXhwcikKQ2FzZVN0bXQoY2FzZV9zdG10KQpDaGFyYWN0ZXJMaXRlcmFsKGNoYXJhY3Rlcl9saXRlcmFsKQpDb21wb3VuZEFzc2lnbk9wZXJhdG9yKGNvbXBvdW5kX2Fzc2lnbl9vcGVyYXRvcikKQ29tcG91bmRTdG10KGNvbXBvdW5kX3N0bXQpCkNvbmRpdGlvbmFsT3BlcmF0b3IoY29uZGl0aW9uYWxfb3BlcmF0b3IpCkNvbnN0YW50RXhwcihjb25zdGFudF9leHByKQpDb25zdEF0dHIoY29uc3RfYXR0cikKQ29udGludWVTdG10KGNvbnRpbnVlX3N0bXQpCkNTdHlsZUNhc3RFeHByKGNzdHlsZV9jYXN0X2V4cHIpCkRlY2xSZWZFeHByKGRlY2xfcmVmX2V4cHIpCkRlY2xTdG10KGRlY2xfc3RtdCkKRGVmYXVsdFN0bXQoZGVmYXVsdF9zdG10KQpEZXByZWNhdGVkQXR0cihkZXByZWNhdGVkX2F0dHIpCkRvU3RtdChkb19zdG10KQpFbXB0eURlY2woZW1wdHlfZGVjbCkKRW51bUNvbnN0YW50RGVjbChlbnVtX2NvbnN0YW50X2RlY2wpCkVudW1EZWNsKGVudW1fZGVjbCkKRmllbGREZWNsKGZpZWxkX2RlY2wpCkZsb2F0aW5nTGl0ZXJhbChmbG9hdGluZ19saXRlcmFsKQpGb3JtYXRBdHRyKGZvcm1hdF9hdHRyKQpGb3JTdG10KGZvcl9zdG10KQogIG4gPT4KRnVsbENvbW1lbnQoZnVsbF9jb21tZW50KQpGdW5jdGlvbkRlY2woZnVuY3Rpb25fZGVjbCkKICBuID0+CiAgbiA9PgpHb3RvU3RtdChnb3RvX3N0bXQpCm4gPT4KSFRNTEVuZFRhZ0NvbW1lbnQoaHRtbF9lbmRfdGFnX2NvbW1lbnQpCkhUTUxTdGFydFRhZ0NvbW1lbnQoaHRtbF9zdGFydF90YWdfY29tbWVudCkKSWZTdG10KGlmX3N0bXQpCkltcGxpY2l0Q2FzdEV4cHIoaW1wbGljaXRfY2FzdF9leHByKQpJbml0TGlzdEV4cHIoaW5pdF9saXN0X2V4cHIpCklubGluZUNvbW1hbmRDb21tZW50KGlubGluZV9jb21tYW5kX2NvbW1lbnQpCkludGVnZXJMaXRlcmFsKGludGVnZXJfbGl0ZXJhbCkKTGFiZWxTdG10KGxhYmVsX3N0bXQpCk1lbWJlckV4cHIobWVtYmVyX2V4cHIpCk5vbk51bGxBdHRyKG5vbl9udWxsX2F0dHIpCk5vVGhyb3dBdHRyKG5vX3Rocm93X2F0dHIpCk51bGxTdG10KG51bGxfc3RtdCkKUGFyYWdyYXBoQ29tbWVudChwYXJhZ3JhcGhfY29tbWVudCkKUGFyYW1Db21tYW5kQ29tbWVudChwYXJhbV9jb21tYW5kX2NvbW1lbnQpClBhcmVuRXhwcihwYXJlbl9leHByKQpQYXJlbkxpc3RFeHByKHBhcmVuX2xpc3RfZXhwcikKUGFybVZhckRlY2wocGFybV92YXJfZGVjbCkKUHVyZUF0dHIocHVyZV9hdHRyKQpSZWNvcmREZWNsKHJlY29yZF9kZWNsKQpSZXN0cmljdEF0dHIocmVzdHJpY3RfYXR0cikKUmV0dXJuU3RtdChyZXR1cm5fc3RtdCkKUmV0dXJuc1R3aWNlQXR0cihyZXR1cm5zX3R3aWNlX2F0dHIpClN0cmluZ0xpdGVyYWwoc3RyaW5nX2xpdGVyYWwpClN3aXRjaFN0bXQoc3dpdGNoX3N0bXQpClRleHRDb21tZW50KHRleHRfY29tbWVudCkKVHJhbnNsYXRpb25Vbml0RGVjbCh0cmFuc2xhdGlvbl91bml0X2RlY2wpClR5cGVkZWZEZWNsKHR5cGVkZWZfZGVjbCkKVW5hcnlFeHByT3JUeXBlVHJhaXRFeHByKHVuYXJ5X2V4cHJfb3JfdHlwZV90cmFpdF9leHByKQpVbmFyeU9wZXJhdG9yKHVuYXJ5X29wZXJhdG9yKQpVbnJlc29sdmVkTG9va3VwRXhwcih1bnJlc29sdmVkX2xvb2t1cF9leHByKQpVbnJlc29sdmVkTWVtYmVyRXhwcih1bnJlc29sdmVkX21lbWJlcl9leHByKQpWYXJEZWNsKHZhcl9kZWNsLCBiYXNlX3R5cGUpCihbb2Zmc2V0LCBzdWJzY3JpcHRdKSA9PgpWZXJiYXRpbUJsb2NrQ29tbWVudCh2ZXJiYXRpbV9ibG9ja19jb21tZW50KQpWZXJiYXRpbUJsb2NrTGluZUNvbW1lbnQodmVyYmF0aW1fYmxvY2tfbGluZV9jb21tZW50KQpXYXJuVW51c2VkUmVzdWx0QXR0cih3YXJuX3VudXNlZF9yZXN1bHRfYXR0cikKV2Vha0F0dHIod2Vha19hdHRyKQpXaGlsZVN0bXQod2hpbGVfc3RtdCkKT3ZlcnJpZGVBdHRyKG92ZXJyaWRlX2F0dHIpCkFkZHJMYWJlbEV4cHIoYWRkcl9sYWJlbF9leHByKQpBbGlhc0F0dHIoYWxpYXNfYXR0cikKQWxpZ25WYWx1ZUF0dHIoYWxpZ25fdmFsdWVfYXR0cikKQWxsb2NTaXplQXR0cihhbGxvY19zaXplX2F0dHIpCkFycmF5SW5pdEluZGV4RXhwcihhcnJheV9pbml0X2luZGV4X2V4cHIpCkFycmF5SW5pdExvb3BFeHByKGFycmF5X2luaXRfbG9vcF9leHByKQpBdG9taWNFeHByKGF0b21pY19leHByKQpBdG9taWNUeXBlKGF0b21pY190eXBlKQpBdXRvVHlwZShhdXRvX3R5cGUpCkJ1aWx0aW5UZW1wbGF0ZURlY2woYnVpbHRpbl90ZW1wbGF0ZV9kZWNsKQpCdWlsdGluVHlwZShidWlsdGluX3R5cGUpCkNhbGxiYWNrQXR0cihjYWxsYmFja19hdHRyKQpDbGFzc1RlbXBsYXRlRGVjbChjbGFzc190ZW1wbGF0ZV9kZWNsKQpDbGFzc1RlbXBsYXRlUGFydGlhbFNwZWNpYWxpemF0aW9uRGVjbChjbGFzc190ZW1wbGF0ZV9wYXJ0aWFsX3NwZWNpYWxpemF0aW9uX2RlY2wpCkNsYXNzVGVtcGxhdGVTcGVjaWFsaXphdGlvbkRlY2woY2xhc3NfdGVtcGxhdGVfc3BlY2lhbGl6YXRpb25fZGVjbCkKQ29tcGxleFR5cGUoY29tcGxleF90eXBlKQpDb21wb3VuZExpdGVyYWxFeHByKGNvbXBvdW5kX2xpdGVyYWxfZXhwcikKQ29uc3RhbnRBcnJheVR5cGUoY29uc3RhbnRfYXJyYXlfdHlwZSkKQ29uc3RydWN0b3JVc2luZ1NoYWRvd0RlY2woY29uc3RydWN0b3JfdXNpbmdfc2hhZG93X2RlY2wpCkNvbnZlcnRWZWN0b3JFeHByKGNvbnZlcnRfdmVjdG9yX2V4cHIpCkRlY2F5ZWRUeXBlKGRlY2F5ZWRfdHlwZSkKRGVjbHR5cGVUeXBlKGRlY2x0eXBlX3R5cGUpCkRlcGVuZGVudE5hbWVUeXBlKGRlcGVuZGVudF9uYW1lX3R5cGUpCkRlcGVuZGVudFNjb3BlRGVjbFJlZkV4cHIoZGVwZW5kZW50X3Njb3BlX2RlY2xfcmVmX2V4cHIpCkRlcGVuZGVudFNpemVkQXJyYXlUeXBlKGRlcGVuZGVudF9zaXplZF9hcnJheV90eXBlKQpEZXBlbmRlbnRUZW1wbGF0ZVNwZWNpYWxpemF0aW9uVHlwZShkZXBlbmRlbnRfdGVtcGxhdGVfc3BlY2lhbGl6YXRpb25fdHlwZSkKRWxhYm9yYXRlZFR5cGUoZWxhYm9yYXRlZF90eXBlKQpFbnVtVHlwZShlbnVtX3R5cGUpCkV4cHJXaXRoQ2xlYW51cHMoZXhwcl93aXRoX2NsZWFudXBzKQpGaW5hbEF0dHIoZmluYWxfYXR0cikKRm9ybWF0QXJnQXR0cihmb3JtYXRfYXJnX2F0dHIpCkZyaWVuZERlY2woZnJpZW5kX2RlY2wpCkZ1bmN0aW9uTm9Qcm90b1R5cGUoZnVuY3Rpb25fbm9fcHJvdG9fdHlwZSkKRnVuY3Rpb25Qcm90b1R5cGUoZnVuY3Rpb25fcHJvdG9fdHlwZSkKRnVuY3Rpb25UZW1wbGF0ZURlY2woZnVuY3Rpb25fdGVtcGxhdGVfZGVjbCkKR0NDQXNtU3RtdChnY2NfYXNtX3N0bXQpCkdOVUlubGluZUF0dHIoZ251X2lubGluZV9hdHRyKQpHTlVOdWxsRXhwcihnbnVfbnVsbF9leHByKQpJbXBsaWNpdFZhbHVlSW5pdEV4cHIoaW1wbGljaXRfdmFsdWVfaW5pdF9leHByKQpJbmNvbXBsZXRlQXJyYXlUeXBlKGluY29tcGxldGVfYXJyYXlfdHlwZSkKSW5kaXJlY3RGaWVsZERlY2woaW5kaXJlY3RfZmllbGRfZGVjbCkKSW5kaXJlY3RHb3RvU3RtdChpbmRpcmVjdF9nb3RvX3N0bXQpCkluamVjdGVkQ2xhc3NOYW1lVHlwZShpbmplY3RlZF9jbGFzc19uYW1lX3R5cGUpCkxhbWJkYUV4cHIobGFtYmRhX2V4cHIpCkxpbmthZ2VTcGVjRGVjbChsaW5rYWdlX3NwZWNfZGVjbCkKTFZhbHVlUmVmZXJlbmNlVHlwZShsX3ZhbHVlX3JlZmVyZW5jZV90eXBlKQpNYXRlcmlhbGl6ZVRlbXBvcmFyeUV4cHIobWF0ZXJpYWxpemVfdGVtcG9yYXJ5X2V4cHIpCk1heEZpZWxkQWxpZ25tZW50QXR0cihtYXhfZmllbGRfYWxpZ25tZW50X2F0dHIpCk1heUFsaWFzQXR0cihtYXlfYWxpYXNfYXR0cikKTWVtYmVyUG9pbnRlclR5cGUobWVtYmVyX3BvaW50ZXJfdHlwZSkKTWluVmVjdG9yV2lkdGhBdHRyKG1pbl92ZWN0b3Jfd2lkdGhfYXR0cikKTW9kZUF0dHIobW9kZV9hdHRyKQpOYW1lc3BhY2VEZWNsKG5hbWVzcGFjZV9kZWNsKQpOb0RlYnVnQXR0cihub19kZWJ1Z19hdHRyKQpOb0lubGluZUF0dHIobm9faW5saW5lX2F0dHIpCk5vblR5cGVUZW1wbGF0ZVBhcm1EZWNsKG5vbl90eXBlX3RlbXBsYXRlX3Bhcm1fZGVjbCkKT2Zmc2V0T2ZFeHByKG9mZnNldF9vZl9leHByKQpPcGFxdWVWYWx1ZUV4cHIob3BhcXVlX3ZhbHVlX2V4cHIpCk93bmVyQXR0cihvd25lcl9hdHRyKQpQYWNrZWRBdHRyKHBhY2tlZF9hdHRyKQpQYWNrRXhwYW5zaW9uRXhwcihwYWNrX2V4cGFuc2lvbl9leHByKQpQYWNrRXhwYW5zaW9uVHlwZShwYWNrX2V4cGFuc2lvbl90eXBlKQpQYXJlblR5cGUocGFyZW5fdHlwZSkKUG9pbnRlckF0dHIocG9pbnRlcl9hdHRyKQpQb2ludGVyVHlwZShwb2ludGVyX3R5cGUpClByZWRlZmluZWRFeHByKHByZWRlZmluZWRfZXhwcikKUXVhbFR5cGUocXVhbF90eXBlKQpSZWNvcmRUeXBlKHJlY29yZF90eXBlKQpSZXR1cm5zTm9uTnVsbEF0dHIocmV0dXJuc19ub25fbnVsbF9hdHRyKQpSVmFsdWVSZWZlcmVuY2VUeXBlKHJfdmFsdWVfcmVmZXJlbmNlX3R5cGUpClNlbnRpbmVsQXR0cihzZW50aW5lbF9hdHRyKQpTaHVmZmxlVmVjdG9yRXhwcihzaHVmZmxlX3ZlY3Rvcl9leHByKQpTaXplT2ZQYWNrRXhwcihzaXplX29mX3BhY2tfZXhwcikKU3RhdGljQXNzZXJ0RGVjbChzdGF0aWNfYXNzZXJ0X2RlY2wpClN0bXRFeHByKHN0bXRfZXhwcikKU3Vic3ROb25UeXBlVGVtcGxhdGVQYXJtRXhwcihzdWJzdF9ub25fdHlwZV90ZW1wbGF0ZV9wYXJtX2V4cHIpClN1YnN0VGVtcGxhdGVUeXBlUGFybVR5cGUoc3Vic3RfdGVtcGxhdGVfdHlwZV9wYXJtX3R5cGUpClRhcmdldEF0dHIodGFyZ2V0X2F0dHIpClRlbXBsYXRlQXJndW1lbnQodGVtcGxhdGVfYXJndW1lbnQpClRlbXBsYXRlU3BlY2lhbGl6YXRpb25UeXBlKHRlbXBsYXRlX3NwZWNpYWxpemF0aW9uX3R5cGUpClRlbXBsYXRlVGVtcGxhdGVQYXJtRGVjbCh0ZW1wbGF0ZV90ZW1wbGF0ZV9wYXJtX2RlY2wpClRlbXBsYXRlVHlwZVBhcm1EZWNsKHRlbXBsYXRlX3R5cGVfcGFybV9kZWNsKQpUZW1wbGF0ZVR5cGVQYXJtVHlwZSh0ZW1wbGF0ZV90eXBlX3Bhcm1fdHlwZSkKVFBhcmFtQ29tbWFuZENvbW1lbnQodF9wYXJhbV9jb21tYW5kX2NvbW1lbnQpClR5cGVBbGlhc0RlY2wodHlwZV9hbGlhc19kZWNsKQpUeXBlQWxpYXNUZW1wbGF0ZURlY2wodHlwZV9hbGlhc190ZW1wbGF0ZV9kZWNsKQpUeXBlZGVmVHlwZSh0eXBlZGVmX3R5cGUpClR5cGVPZkV4cHJUeXBlKHR5cGVfb2ZfZXhwcl90eXBlKQpUeXBlVHJhaXRFeHByKHR5cGVfdHJhaXRfZXhwcikKVW5hcnlUcmFuc2Zvcm1UeXBlKHVuYXJ5X3RyYW5zZm9ybV90eXBlKQpVbnJlc29sdmVkVXNpbmdWYWx1ZURlY2wodW5yZXNvbHZlZF91c2luZ192YWx1ZV9kZWNsKQpVbnVzZWRBdHRyKHVudXNlZF9hdHRyKQpVc2luZ0RlY2wodXNpbmdfZGVjbCkKVXNpbmdEaXJlY3RpdmVEZWNsKHVzaW5nX2RpcmVjdGl2ZV9kZWNsKQpVc2luZ1NoYWRvd0RlY2wodXNpbmdfc2hhZG93X2RlY2wpClZBQXJnRXhwcih2YV9hcmdfZXhwcikKVmFyVGVtcGxhdGVEZWNsKHZhcl90ZW1wbGF0ZV9kZWNsKQpWZWN0b3JUeXBlKHZlY3Rvcl90eXBlKQpWZXJiYXRpbUxpbmVDb21tZW50KHZlcmJhdGltX2xpbmVfY29tbWVudCkKVmlzaWJpbGl0eUF0dHIodmlzaWJpbGl0eV9hdHRyKQpXZWFrUmVmQXR0cih3ZWFrX3JlZl9hdHRyKQpDWFhSZWNvcmREZWNsKGN4eF9yZWNvcmRfZGVjbCkKQ1hYQ29uc3RydWN0b3JEZWNsKGN4eF9jb25zdHJ1Y3Rvcl9kZWNsKQogIG4gPT4KQ1hYQ3RvckluaXRpYWxpemVyKGN4eF9jdG9yX2luaXRpYWxpemVyKQpDWFhEZXBlbmRlbnRTY29wZU1lbWJlckV4cHIoY3h4X2RlcGVuZGVudF9zY29wZV9tZW1iZXJfZXhwcikKQ1hYVGhpc0V4cHIoY3h4X3RoaXNfZXhwcikKQ1hYRGVzdHJ1Y3RvckRlY2woY3h4X2Rlc3RydWN0b3JfZGVjbCkKICBuID0+CkNYWE1ldGhvZERlY2woY3h4X21ldGhvZF9kZWNsKQogIG4gPT4KQ1hYU3RhdGljQ2FzdEV4cHIoY3h4X3N0YXRpY19jYXN0X2V4cHIpCkNYWFVucmVzb2x2ZWRDb25zdHJ1Y3RFeHByKGN4eF91bnJlc29sdmVkX2NvbnN0cnVjdF9leHByKQpDWFhOZXdFeHByKGN4eF9uZXdfZXhwcikKQ1hYRGVsZXRlRXhwcihjeHhfZGVsZXRlX2V4cHIpCkNYWEJvb2xMaXRlcmFsRXhwcihjeHhfYm9vbF9saXRlcmFsX2V4cHIpCkNYWDExTm9SZXR1cm5BdHRyKGN4eDExX25vX3JldHVybl9hdHRyKQpDWFhCaW5kVGVtcG9yYXJ5RXhwcihjeHhfYmluZF90ZW1wb3JhcnlfZXhwcikKQ1hYQ2F0Y2hTdG10KGN4eF9jYXRjaF9zdG10KQpDWFhDb25zdHJ1Y3RFeHByKGN4eF9jb25zdHJ1Y3RfZXhwcikKQ1hYQ29udmVyc2lvbkRlY2woY3h4X2NvbnZlcnNpb25fZGVjbCkKQ1hYRGVmYXVsdEFyZ0V4cHIoY3h4X2RlZmF1bHRfYXJnX2V4cHIpCkNYWERlZmF1bHRJbml0RXhwcihjeHhfZGVmYXVsdF9pbml0X2V4cHIpCkNYWEZvclJhbmdlU3RtdChjeHhfZm9yX3JhbmdlX3N0bXQpCkNYWEZ1bmN0aW9uYWxDYXN0RXhwcihjeHhfZnVuY3Rpb25hbF9jYXN0X2V4cHIpCkNYWE1lbWJlckNhbGxFeHByKGN4eF9tZW1iZXJfY2FsbF9leHByKQpDWFhOb2V4Y2VwdEV4cHIoY3h4X25vZXhjZXB0X2V4cHIpCkNYWE51bGxQdHJMaXRlcmFsRXhwcihjeHhfbnVsbF9wdHJfbGl0ZXJhbF9leHByKQpDWFhPcGVyYXRvckNhbGxFeHByKGN4eF9vcGVyYXRvcl9jYWxsX2V4cHIpCkNYWFJlaW50ZXJwcmV0Q2FzdEV4cHIoY3h4X3JlaW50ZXJwcmV0X2Nhc3RfZXhwcikKQ1hYU2NhbGFyVmFsdWVJbml0RXhwcihjeHhfc2NhbGFyX3ZhbHVlX2luaXRfZXhwcikKQ1hYVGVtcG9yYXJ5T2JqZWN0RXhwcihjeHhfdGVtcG9yYXJ5X29iamVjdF9leHByKQpDWFhUcnlTdG10KGN4eF90cnlfc3RtdCkKUHJpbnROb2RlKG5vZGUpClByaW50QXN0KG5vZGUsIGFzdCkKICBnZXQoKQogIGlzTm9kZShvYmopCkdldFR5cGUobmFtZV9vcl9pZCwgYXN0ID0gZ2xvYmFsVGhpc1snJCddPy5kYXRhKQogIG4gPT4Kbm9kZSA9Pgpub2RlID0+CiAgciA9PgpHZXRDbGFzcyhuYW1lX29yX2lkLCBhc3QgPSBnbG9iYWxUaGlzWyckJ10uZGF0YSkKbiA9PgogIGJhc2VzKCkKR2V0QmFzZXMobm9kZSwgYXN0ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEpCkdldEJ5TmFtZShhcmcsIGFzdCA9IGdsb2JhbFRoaXNbJyQnXS5kYXRhLCAuLi5hcmdzKQpHZXROYW1lc3BhY2UoYXJnLCByb290ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEsIHByZWRpY2F0ZSA9ICgpID0+IHRydWUpCm4gPT4KTmFtZXNwYWNlT2Yobm9kZSwgcGF0aCwgYXN0ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEpCiAgdG9TdHJpbmcoKQpHZXRGaWVsZHMobm9kZSkKKHYsIGspID0+CihbdiwgcF0pID0+CihbbG9jLCBwdHJdKSA9PgogIGkgPT4KR2V0UGFyYW1zKG5vZGUpCiAgY2hpbGQgPT4KUGF0aFJlbW92ZUxvYyhwYXRoKQogIHAgPT4AAAAAAAAAADUtAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					99,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					100,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					101,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					102,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					103,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/compile_commands.js",
						"symkeys":
						[
							[
								476,
								483
							],
							[
								484,
								498
							],
							[
								555,
								574
							],
							[
								695,
								702
							],
							[
								703,
								717
							],
							[
								961,
								988
							],
							[
								1079,
								1085
							],
							[
								1106,
								1110
							],
							[
								1180,
								1202
							],
							[
								1235,
								1248
							],
							[
								1401,
								1440
							],
							[
								1480,
								1493
							],
							[
								1670,
								1691
							],
							[
								1774,
								1787
							],
							[
								1890,
								1903
							],
							[
								1954,
								1977
							],
							[
								2125,
								2160
							],
							[
								2336,
								2352
							],
							[
								2423,
								2427
							],
							[
								2459,
								2467
							],
							[
								2497,
								2514
							],
							[
								2592,
								2626
							],
							[
								2731,
								2756
							],
							[
								3698,
								3716
							],
							[
								3906,
								3917
							],
							[
								4467,
								4479
							],
							[
								4511,
								4515
							],
							[
								4547,
								4551
							],
							[
								4630,
								4636
							],
							[
								4666,
								4683
							],
							[
								5149,
								5167
							]
						],
						"symlist":
						[
							" fn =>",
							" (...args) =>",
							"function* iter(arr)",
							" fn =>",
							" (...args) =>",
							".sourcesMap = outputFile =>",
							"dep =>",
							"s =>",
							".depMap = inputFile =>",
							"(acc, cmd) =>",
							".transformMap = (input, output, map) =>",
							" (...args) =>",
							".workDir = workDir =>",
							"toAbsolute(p)",
							"toRelative(p)",
							" function toRel(p)",
							".relativeMap = (relativeTo, map) =>",
							"nm: (...args) =>",
							"m =>",
							"entry =>",
							"([file, data]) =>",
							"(acc, [file, addr, type, name]) =>",
							"function main(...arglist)",
							"get dependencies()",
							"(arg, i) =>",
							"get CFLAGS()",
							"d =>",
							"i =>",
							"dir =>",
							" (entry, file) =>",
							"get dependencies()"
						]
					},
					"AQAAAAAAAAAAAAAAAAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					104,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAZm4gPT4KKC4uLmFyZ3MpID0+CiAgaXRlcihhcnIpCmZuID0+CiguLi5hcmdzKSA9PgogIC5zb3VyY2VzTWFwID0gb3V0cHV0RmlsZSA9PgogIGRlcCA9PgogIHMgPT4KICAuZGVwTWFwID0gaW5wdXRGaWxlID0+CihhY2MsIGNtZCkgPT4KICAudHJhbnNmb3JtTWFwID0gKGlucHV0LCBvdXRwdXQsIG1hcCkgPT4KKC4uLmFyZ3MpID0+CiAgLndvcmtEaXIgPSB3b3JrRGlyID0+CiAgdG9BYnNvbHV0ZShwKQogIHRvUmVsYXRpdmUocCkKICB0b1JlbChwKQogIC5yZWxhdGl2ZU1hcCA9IChyZWxhdGl2ZVRvLCBtYXApID0+CiAgbm06ICguLi5hcmdzKSA9PgogIG0gPT4KICBlbnRyeSA9PgooW2ZpbGUsIGRhdGFdKSA9PgooYWNjLCBbZmlsZSwgYWRkciwgdHlwZSwgbmFtZV0pID0+CiAgbWFpbiguLi5hcmdsaXN0KQogIGdldCBkZXBlbmRlbmNpZXMoKQooYXJnLCBpKSA9PgogIGdldCBDRkxBR1MoKQogIGQgPT4KICBpID0+CiAgZGlyID0+CihlbnRyeSwgZmlsZSkgPT4KICBnZXQgZGVwZW5kZW5jaWVzKCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					105,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/compileCommand.js",
						"symkeys":
						[
							[
								219,
								226
							],
							[
								231,
								260
							],
							[
								570,
								583
							],
							[
								633,
								649
							],
							[
								677,
								695
							],
							[
								792,
								813
							],
							[
								879,
								890
							],
							[
								944,
								959
							],
							[
								1028,
								1044
							],
							[
								1111,
								1125
							],
							[
								1191,
								1205
							],
							[
								1271,
								1285
							],
							[
								1358,
								1369
							],
							[
								1428,
								1442
							],
							[
								1501,
								1513
							],
							[
								1572,
								1580
							],
							[
								1611,
								1626
							],
							[
								1684,
								1693
							],
							[
								1737,
								1752
							],
							[
								1956,
								1974
							],
							[
								2233,
								2249
							],
							[
								2302,
								2312
							],
							[
								2432,
								2443
							],
							[
								2745,
								2757
							],
							[
								2902,
								2913
							],
							[
								3443,
								3448
							],
							[
								3607,
								3614
							],
							[
								3696,
								3704
							],
							[
								4010,
								4040
							],
							[
								4124,
								4132
							],
							[
								4285,
								4299
							],
							[
								4320,
								4349
							],
							[
								4443,
								4461
							],
							[
								4524,
								4537
							],
							[
								4598,
								4610
							],
							[
								4694,
								4700
							],
							[
								4741,
								4747
							],
							[
								4803,
								4814
							],
							[
								4872,
								4882
							],
							[
								4940,
								4953
							],
							[
								4999,
								5005
							],
							[
								5032,
								5048
							],
							[
								5246,
								5258
							],
							[
								5415,
								5430
							],
							[
								5466,
								5476
							],
							[
								6554,
								6568
							],
							[
								6705,
								6717
							],
							[
								6754,
								6758
							],
							[
								6866,
								6881
							],
							[
								6918,
								6922
							],
							[
								7132,
								7143
							],
							[
								7164,
								7193
							],
							[
								7248,
								7263
							],
							[
								7333,
								7347
							],
							[
								7417,
								7432
							],
							[
								7502,
								7512
							],
							[
								7570,
								7580
							],
							[
								7608,
								7621
							],
							[
								7656,
								7667
							],
							[
								7811,
								7817
							],
							[
								7846,
								7857
							],
							[
								7899,
								7903
							],
							[
								8033,
								8044
							],
							[
								8130,
								8137
							],
							[
								8218,
								8274
							],
							[
								9576,
								9602
							],
							[
								9638,
								9645
							],
							[
								9714,
								9721
							],
							[
								9755,
								9762
							],
							[
								9799,
								9829
							],
							[
								10335,
								10378
							],
							[
								10474,
								10481
							],
							[
								10520,
								10571
							],
							[
								10701,
								10709
							],
							[
								10881,
								10892
							],
							[
								10926,
								10938
							],
							[
								10975,
								10979
							],
							[
								11108,
								11117
							],
							[
								11197,
								11212
							],
							[
								11249,
								11253
							],
							[
								11388,
								11416
							]
						],
						"symlist":
						[
							"Command",
							"constructor(a, workDir = '.')",
							"get program()",
							"set program(arg)",
							"absolutePath(path)",
							"argumentsOfType(type)",
							"(arg, i) =>",
							"get warnFlags()",
							"get debugFlags()",
							"get optFlags()",
							"get depFlags()",
							"get modeFlag()",
							"isCompile()",
							"isPreprocess()",
							"isAssemble()",
							"isLink()",
							"toString(delim)",
							"toArray()",
							"remove(...args)",
							"get dependencies()",
							"get outputFile()",
							"absolute()",
							"(arg, i) =>",
							"relative(to)",
							"(arg, i) =>",
							"run()",
							"Command",
							"toJSON()",
							"fromString(str, workDir = '.')",
							"([m]) =>",
							"CompileCommand",
							"constructor(a, workDir = '.')",
							"get includePaths()",
							"get defines()",
							"get cflags()",
							"inc =>",
							"def =>",
							"get flags()",
							"get args()",
							"get sources()",
							"arg =>",
							"set sources(arg)",
							"get source()",
							"set source(arg)",
							"toObject()",
							"CompileCommand",
							"get output()",
							"a =>",
							"set output(arg)",
							"a =>",
							"LinkCommand",
							"constructor(a, workDir = '.')",
							"get libraries()",
							"get libpaths()",
							"get linkflags()",
							"get args()",
							"(arg,i) =>",
							"get objects()",
							"(arg, i) =>",
							"arg =>",
							"get flags()",
							"t =>",
							"LinkCommand",
							"Command",
							" function ArgumentType(arg, i = Number.MAX_SAFE_INTEGER)",
							" function ArgumentIs(pred)",
							" arg =>",
							" arg =>",
							" arg =>",
							" function CommandType(command)",
							" function MakeCommands(text, workDir = '.')",
							"line =>",
							" function MakeCommand(arrayOrString, workDir = '.')",
							"([m]) =>",
							"LinkCommand",
							"get output()",
							"a =>",
							"(a, i) =>",
							"set output(arg)",
							"a =>",
							" function NinjaRule(command)"
						]
					},
					"AwAAAAAAAAAAAAAA9QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPUEAABDb21tYW5kCiAgY29uc3RydWN0b3IoYSwgd29ya0RpciA9ICcuJykKICBnZXQgcHJvZ3JhbSgpCiAgc2V0IHByb2dyYW0oYXJnKQogIGFic29sdXRlUGF0aChwYXRoKQogIGFyZ3VtZW50c09mVHlwZSh0eXBlKQooYXJnLCBpKSA9PgogIGdldCB3YXJuRmxhZ3MoKQogIGdldCBkZWJ1Z0ZsYWdzKCkKICBnZXQgb3B0RmxhZ3MoKQogIGdldCBkZXBGbGFncygpCiAgZ2V0IG1vZGVGbGFnKCkKICBpc0NvbXBpbGUoKQogIGlzUHJlcHJvY2VzcygpCiAgaXNBc3NlbWJsZSgpCiAgaXNMaW5rKCkKICB0b1N0cmluZyhkZWxpbSkKICB0b0FycmF5KCkKICByZW1vdmUoLi4uYXJncykKICBnZXQgZGVwZW5kZW5jaWVzKCkKICBnZXQgb3V0cHV0RmlsZSgpCiAgYWJzb2x1dGUoKQooYXJnLCBpKSA9PgogIHJlbGF0aXZlKHRvKQooYXJnLCBpKSA9PgogIHJ1bigpCkNvbW1hbmQKICB0b0pTT04oKQogIGZyb21TdHJpbmcoc3RyLCB3b3JrRGlyID0gJy4nKQooW21dKSA9PgpDb21waWxlQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IGluY2x1ZGVQYXRocygpCiAgZ2V0IGRlZmluZXMoKQogIGdldCBjZmxhZ3MoKQogIGluYyA9PgogIGRlZiA9PgogIGdldCBmbGFncygpCiAgZ2V0IGFyZ3MoKQogIGdldCBzb3VyY2VzKCkKICBhcmcgPT4KICBzZXQgc291cmNlcyhhcmcpCiAgZ2V0IHNvdXJjZSgpCiAgc2V0IHNvdXJjZShhcmcpCiAgdG9PYmplY3QoKQpDb21waWxlQ29tbWFuZAogIGdldCBvdXRwdXQoKQogIGEgPT4KICBzZXQgb3V0cHV0KGFyZykKICBhID0+CkxpbmtDb21tYW5kCiAgY29uc3RydWN0b3IoYSwgd29ya0RpciA9ICcuJykKICBnZXQgbGlicmFyaWVzKCkKICBnZXQgbGlicGF0aHMoKQogIGdldCBsaW5rZmxhZ3MoKQogIGdldCBhcmdzKCkKKGFyZyxpKSA9PgogIGdldCBvYmplY3RzKCkKKGFyZywgaSkgPT4KICBhcmcgPT4KICBnZXQgZmxhZ3MoKQogIHQgPT4KTGlua0NvbW1hbmQKQ29tbWFuZApBcmd1bWVudFR5cGUoYXJnLCBpID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpCkFyZ3VtZW50SXMocHJlZCkKYXJnID0+CmFyZyA9PgphcmcgPT4KQ29tbWFuZFR5cGUoY29tbWFuZCkKTWFrZUNvbW1hbmRzKHRleHQsIHdvcmtEaXIgPSAnLicpCiAgbGluZSA9PgpNYWtlQ29tbWFuZChhcnJheU9yU3RyaW5nLCB3b3JrRGlyID0gJy4nKQooW21dKSA9PgpMaW5rQ29tbWFuZAogIGdldCBvdXRwdXQoKQogIGEgPT4KKGEsIGkpID0+CiAgc2V0IG91dHB1dChhcmcpCiAgYSA9PgpOaW5qYVJ1bGUoY29tbWFuZCkAAAAAAAAAAPUEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					106,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/compile_commands.js",
						"symkeys":
						[
							[
								476,
								483
							],
							[
								484,
								498
							],
							[
								555,
								574
							],
							[
								695,
								702
							],
							[
								703,
								717
							],
							[
								961,
								988
							],
							[
								1079,
								1085
							],
							[
								1106,
								1110
							],
							[
								1180,
								1202
							],
							[
								1235,
								1248
							],
							[
								1401,
								1440
							],
							[
								1480,
								1493
							],
							[
								1670,
								1691
							],
							[
								1774,
								1787
							],
							[
								1890,
								1903
							],
							[
								1954,
								1977
							],
							[
								2125,
								2160
							],
							[
								2336,
								2352
							],
							[
								2423,
								2427
							],
							[
								2459,
								2467
							],
							[
								2497,
								2514
							],
							[
								2592,
								2626
							],
							[
								2731,
								2756
							],
							[
								3698,
								3716
							],
							[
								3906,
								3917
							],
							[
								4467,
								4479
							],
							[
								4511,
								4515
							],
							[
								4547,
								4551
							],
							[
								4630,
								4636
							],
							[
								4666,
								4683
							],
							[
								5149,
								5167
							]
						],
						"symlist":
						[
							" fn =>",
							" (...args) =>",
							"function* iter(arr)",
							" fn =>",
							" (...args) =>",
							".sourcesMap = outputFile =>",
							"dep =>",
							"s =>",
							".depMap = inputFile =>",
							"(acc, cmd) =>",
							".transformMap = (input, output, map) =>",
							" (...args) =>",
							".workDir = workDir =>",
							"toAbsolute(p)",
							"toRelative(p)",
							" function toRel(p)",
							".relativeMap = (relativeTo, map) =>",
							"nm: (...args) =>",
							"m =>",
							"entry =>",
							"([file, data]) =>",
							"(acc, [file, addr, type, name]) =>",
							"function main(...arglist)",
							"get dependencies()",
							"(arg, i) =>",
							"get CFLAGS()",
							"d =>",
							"i =>",
							"dir =>",
							" (entry, file) =>",
							"get dependencies()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD1BAAAQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IHByb2dyYW0oKQogIHNldCBwcm9ncmFtKGFyZykKICBhYnNvbHV0ZVBhdGgocGF0aCkKICBhcmd1bWVudHNPZlR5cGUodHlwZSkKKGFyZywgaSkgPT4KICBnZXQgd2FybkZsYWdzKCkKICBnZXQgZGVidWdGbGFncygpCiAgZ2V0IG9wdEZsYWdzKCkKICBnZXQgZGVwRmxhZ3MoKQogIGdldCBtb2RlRmxhZygpCiAgaXNDb21waWxlKCkKICBpc1ByZXByb2Nlc3MoKQogIGlzQXNzZW1ibGUoKQogIGlzTGluaygpCiAgdG9TdHJpbmcoZGVsaW0pCiAgdG9BcnJheSgpCiAgcmVtb3ZlKC4uLmFyZ3MpCiAgZ2V0IGRlcGVuZGVuY2llcygpCiAgZ2V0IG91dHB1dEZpbGUoKQogIGFic29sdXRlKCkKKGFyZywgaSkgPT4KICByZWxhdGl2ZSh0bykKKGFyZywgaSkgPT4KICBydW4oKQpDb21tYW5kCiAgdG9KU09OKCkKICBmcm9tU3RyaW5nKHN0ciwgd29ya0RpciA9ICcuJykKKFttXSkgPT4KQ29tcGlsZUNvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBpbmNsdWRlUGF0aHMoKQogIGdldCBkZWZpbmVzKCkKICBnZXQgY2ZsYWdzKCkKICBpbmMgPT4KICBkZWYgPT4KICBnZXQgZmxhZ3MoKQogIGdldCBhcmdzKCkKICBnZXQgc291cmNlcygpCiAgYXJnID0+CiAgc2V0IHNvdXJjZXMoYXJnKQogIGdldCBzb3VyY2UoKQogIHNldCBzb3VyY2UoYXJnKQogIHRvT2JqZWN0KCkKQ29tcGlsZUNvbW1hbmQKICBnZXQgb3V0cHV0KCkKICBhID0+CiAgc2V0IG91dHB1dChhcmcpCiAgYSA9PgpMaW5rQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IGxpYnJhcmllcygpCiAgZ2V0IGxpYnBhdGhzKCkKICBnZXQgbGlua2ZsYWdzKCkKICBnZXQgYXJncygpCihhcmcsaSkgPT4KICBnZXQgb2JqZWN0cygpCihhcmcsIGkpID0+CiAgYXJnID0+CiAgZ2V0IGZsYWdzKCkKICB0ID0+CkxpbmtDb21tYW5kCkNvbW1hbmQKQXJndW1lbnRUeXBlKGFyZywgaSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKQpBcmd1bWVudElzKHByZWQpCmFyZyA9PgphcmcgPT4KYXJnID0+CkNvbW1hbmRUeXBlKGNvbW1hbmQpCk1ha2VDb21tYW5kcyh0ZXh0LCB3b3JrRGlyID0gJy4nKQogIGxpbmUgPT4KTWFrZUNvbW1hbmQoYXJyYXlPclN0cmluZywgd29ya0RpciA9ICcuJykKKFttXSkgPT4KTGlua0NvbW1hbmQKICBnZXQgb3V0cHV0KCkKICBhID0+CihhLCBpKSA9PgogIHNldCBvdXRwdXQoYXJnKQogIGEgPT4KTmluamFSdWxlKGNvbW1hbmQpAAAAAAAAAAAAAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					107,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/compile_commands.js",
						"symkeys":
						[
							[
								476,
								483
							],
							[
								484,
								498
							],
							[
								555,
								574
							],
							[
								695,
								702
							],
							[
								703,
								717
							],
							[
								961,
								988
							],
							[
								1079,
								1085
							],
							[
								1106,
								1110
							],
							[
								1180,
								1202
							],
							[
								1235,
								1248
							],
							[
								1401,
								1440
							],
							[
								1480,
								1493
							],
							[
								1670,
								1691
							],
							[
								1774,
								1787
							],
							[
								1890,
								1903
							],
							[
								1954,
								1977
							],
							[
								2125,
								2160
							],
							[
								2336,
								2352
							],
							[
								2423,
								2427
							],
							[
								2459,
								2467
							],
							[
								2497,
								2514
							],
							[
								2592,
								2626
							],
							[
								2731,
								2756
							],
							[
								3698,
								3716
							],
							[
								3906,
								3917
							],
							[
								4467,
								4479
							],
							[
								4511,
								4515
							],
							[
								4547,
								4551
							],
							[
								4630,
								4636
							],
							[
								4666,
								4683
							],
							[
								5149,
								5167
							]
						],
						"symlist":
						[
							" fn =>",
							" (...args) =>",
							"function* iter(arr)",
							" fn =>",
							" (...args) =>",
							".sourcesMap = outputFile =>",
							"dep =>",
							"s =>",
							".depMap = inputFile =>",
							"(acc, cmd) =>",
							".transformMap = (input, output, map) =>",
							" (...args) =>",
							".workDir = workDir =>",
							"toAbsolute(p)",
							"toRelative(p)",
							" function toRel(p)",
							".relativeMap = (relativeTo, map) =>",
							"nm: (...args) =>",
							"m =>",
							"entry =>",
							"([file, data]) =>",
							"(acc, [file, addr, type, name]) =>",
							"function main(...arglist)",
							"get dependencies()",
							"(arg, i) =>",
							"get CFLAGS()",
							"d =>",
							"i =>",
							"dir =>",
							" (entry, file) =>",
							"get dependencies()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAZm4gPT4KKC4uLmFyZ3MpID0+CiAgaXRlcihhcnIpCmZuID0+CiguLi5hcmdzKSA9PgogIC5zb3VyY2VzTWFwID0gb3V0cHV0RmlsZSA9PgogIGRlcCA9PgogIHMgPT4KICAuZGVwTWFwID0gaW5wdXRGaWxlID0+CihhY2MsIGNtZCkgPT4KICAudHJhbnNmb3JtTWFwID0gKGlucHV0LCBvdXRwdXQsIG1hcCkgPT4KKC4uLmFyZ3MpID0+CiAgLndvcmtEaXIgPSB3b3JrRGlyID0+CiAgdG9BYnNvbHV0ZShwKQogIHRvUmVsYXRpdmUocCkKICB0b1JlbChwKQogIC5yZWxhdGl2ZU1hcCA9IChyZWxhdGl2ZVRvLCBtYXApID0+CiAgbm06ICguLi5hcmdzKSA9PgogIG0gPT4KICBlbnRyeSA9PgooW2ZpbGUsIGRhdGFdKSA9PgooYWNjLCBbZmlsZSwgYWRkciwgdHlwZSwgbmFtZV0pID0+CiAgbWFpbiguLi5hcmdsaXN0KQogIGdldCBkZXBlbmRlbmNpZXMoKQooYXJnLCBpKSA9PgogIGdldCBDRkxBR1MoKQogIGQgPT4KICBpID0+CiAgZGlyID0+CihlbnRyeSwgZmlsZSkgPT4KICBnZXQgZGVwZW5kZW5jaWVzKCkAAAAAAAAAAAACAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					108,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/compile_commands.js",
						"symkeys":
						[
							[
								476,
								483
							],
							[
								484,
								498
							],
							[
								555,
								574
							],
							[
								695,
								702
							],
							[
								703,
								717
							],
							[
								961,
								988
							],
							[
								1079,
								1085
							],
							[
								1106,
								1110
							],
							[
								1180,
								1202
							],
							[
								1235,
								1248
							],
							[
								1401,
								1440
							],
							[
								1480,
								1493
							],
							[
								1670,
								1691
							],
							[
								1774,
								1787
							],
							[
								1890,
								1903
							],
							[
								1954,
								1977
							],
							[
								2125,
								2160
							],
							[
								2336,
								2352
							],
							[
								2423,
								2427
							],
							[
								2459,
								2467
							],
							[
								2497,
								2514
							],
							[
								2592,
								2626
							],
							[
								2731,
								2756
							],
							[
								3698,
								3716
							],
							[
								3906,
								3917
							],
							[
								4467,
								4479
							],
							[
								4511,
								4515
							],
							[
								4547,
								4551
							],
							[
								4630,
								4636
							],
							[
								4666,
								4683
							],
							[
								5149,
								5167
							]
						],
						"symlist":
						[
							" fn =>",
							" (...args) =>",
							"function* iter(arr)",
							" fn =>",
							" (...args) =>",
							".sourcesMap = outputFile =>",
							"dep =>",
							"s =>",
							".depMap = inputFile =>",
							"(acc, cmd) =>",
							".transformMap = (input, output, map) =>",
							" (...args) =>",
							".workDir = workDir =>",
							"toAbsolute(p)",
							"toRelative(p)",
							" function toRel(p)",
							".relativeMap = (relativeTo, map) =>",
							"nm: (...args) =>",
							"m =>",
							"entry =>",
							"([file, data]) =>",
							"(acc, [file, addr, type, name]) =>",
							"function main(...arglist)",
							"get dependencies()",
							"(arg, i) =>",
							"get CFLAGS()",
							"d =>",
							"i =>",
							"dir =>",
							" (entry, file) =>",
							"get dependencies()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAZm4gPT4KKC4uLmFyZ3MpID0+CiAgaXRlcihhcnIpCmZuID0+CiguLi5hcmdzKSA9PgogIC5zb3VyY2VzTWFwID0gb3V0cHV0RmlsZSA9PgogIGRlcCA9PgogIHMgPT4KICAuZGVwTWFwID0gaW5wdXRGaWxlID0+CihhY2MsIGNtZCkgPT4KICAudHJhbnNmb3JtTWFwID0gKGlucHV0LCBvdXRwdXQsIG1hcCkgPT4KKC4uLmFyZ3MpID0+CiAgLndvcmtEaXIgPSB3b3JrRGlyID0+CiAgdG9BYnNvbHV0ZShwKQogIHRvUmVsYXRpdmUocCkKICB0b1JlbChwKQogIC5yZWxhdGl2ZU1hcCA9IChyZWxhdGl2ZVRvLCBtYXApID0+CiAgbm06ICguLi5hcmdzKSA9PgogIG0gPT4KICBlbnRyeSA9PgooW2ZpbGUsIGRhdGFdKSA9PgooYWNjLCBbZmlsZSwgYWRkciwgdHlwZSwgbmFtZV0pID0+CiAgbWFpbiguLi5hcmdsaXN0KQogIGdldCBkZXBlbmRlbmNpZXMoKQooYXJnLCBpKSA9PgogIGdldCBDRkxBR1MoKQogIGQgPT4KICBpID0+CiAgZGlyID0+CihlbnRyeSwgZmlsZSkgPT4KICBnZXQgZGVwZW5kZW5jaWVzKCkAAAAAAAAAAAACAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					109,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/compileCommand.js",
						"symkeys":
						[
							[
								219,
								226
							],
							[
								231,
								260
							],
							[
								570,
								583
							],
							[
								633,
								649
							],
							[
								677,
								695
							],
							[
								792,
								813
							],
							[
								879,
								890
							],
							[
								944,
								959
							],
							[
								1028,
								1044
							],
							[
								1111,
								1125
							],
							[
								1191,
								1205
							],
							[
								1271,
								1285
							],
							[
								1358,
								1369
							],
							[
								1428,
								1442
							],
							[
								1501,
								1513
							],
							[
								1572,
								1580
							],
							[
								1611,
								1626
							],
							[
								1684,
								1693
							],
							[
								1737,
								1752
							],
							[
								1956,
								1974
							],
							[
								2233,
								2249
							],
							[
								2302,
								2312
							],
							[
								2432,
								2443
							],
							[
								2745,
								2757
							],
							[
								2902,
								2913
							],
							[
								3443,
								3448
							],
							[
								3607,
								3614
							],
							[
								3696,
								3704
							],
							[
								4010,
								4040
							],
							[
								4124,
								4132
							],
							[
								4285,
								4299
							],
							[
								4320,
								4349
							],
							[
								4443,
								4461
							],
							[
								4524,
								4537
							],
							[
								4598,
								4610
							],
							[
								4694,
								4700
							],
							[
								4741,
								4747
							],
							[
								4803,
								4814
							],
							[
								4872,
								4882
							],
							[
								4940,
								4953
							],
							[
								4999,
								5005
							],
							[
								5032,
								5048
							],
							[
								5246,
								5258
							],
							[
								5415,
								5430
							],
							[
								5466,
								5476
							],
							[
								6554,
								6568
							],
							[
								6705,
								6717
							],
							[
								6754,
								6758
							],
							[
								6866,
								6881
							],
							[
								6918,
								6922
							],
							[
								7132,
								7143
							],
							[
								7164,
								7193
							],
							[
								7248,
								7263
							],
							[
								7333,
								7347
							],
							[
								7417,
								7432
							],
							[
								7502,
								7512
							],
							[
								7570,
								7580
							],
							[
								7608,
								7621
							],
							[
								7656,
								7667
							],
							[
								7811,
								7817
							],
							[
								7846,
								7857
							],
							[
								7899,
								7903
							],
							[
								8033,
								8044
							],
							[
								8130,
								8137
							],
							[
								8218,
								8274
							],
							[
								9576,
								9602
							],
							[
								9638,
								9645
							],
							[
								9714,
								9721
							],
							[
								9755,
								9762
							],
							[
								9799,
								9829
							],
							[
								10335,
								10378
							],
							[
								10474,
								10481
							],
							[
								10520,
								10571
							],
							[
								10701,
								10709
							],
							[
								10881,
								10892
							],
							[
								10926,
								10938
							],
							[
								10975,
								10979
							],
							[
								11108,
								11117
							],
							[
								11197,
								11212
							],
							[
								11249,
								11253
							],
							[
								11388,
								11416
							]
						],
						"symlist":
						[
							"Command",
							"constructor(a, workDir = '.')",
							"get program()",
							"set program(arg)",
							"absolutePath(path)",
							"argumentsOfType(type)",
							"(arg, i) =>",
							"get warnFlags()",
							"get debugFlags()",
							"get optFlags()",
							"get depFlags()",
							"get modeFlag()",
							"isCompile()",
							"isPreprocess()",
							"isAssemble()",
							"isLink()",
							"toString(delim)",
							"toArray()",
							"remove(...args)",
							"get dependencies()",
							"get outputFile()",
							"absolute()",
							"(arg, i) =>",
							"relative(to)",
							"(arg, i) =>",
							"run()",
							"Command",
							"toJSON()",
							"fromString(str, workDir = '.')",
							"([m]) =>",
							"CompileCommand",
							"constructor(a, workDir = '.')",
							"get includePaths()",
							"get defines()",
							"get cflags()",
							"inc =>",
							"def =>",
							"get flags()",
							"get args()",
							"get sources()",
							"arg =>",
							"set sources(arg)",
							"get source()",
							"set source(arg)",
							"toObject()",
							"CompileCommand",
							"get output()",
							"a =>",
							"set output(arg)",
							"a =>",
							"LinkCommand",
							"constructor(a, workDir = '.')",
							"get libraries()",
							"get libpaths()",
							"get linkflags()",
							"get args()",
							"(arg,i) =>",
							"get objects()",
							"(arg, i) =>",
							"arg =>",
							"get flags()",
							"t =>",
							"LinkCommand",
							"Command",
							" function ArgumentType(arg, i = Number.MAX_SAFE_INTEGER)",
							" function ArgumentIs(pred)",
							" arg =>",
							" arg =>",
							" arg =>",
							" function CommandType(command)",
							" function MakeCommands(text, workDir = '.')",
							"line =>",
							" function MakeCommand(arrayOrString, workDir = '.')",
							"([m]) =>",
							"LinkCommand",
							"get output()",
							"a =>",
							"(a, i) =>",
							"set output(arg)",
							"a =>",
							" function NinjaRule(command)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAZm4gPT4KKC4uLmFyZ3MpID0+CiAgaXRlcihhcnIpCmZuID0+CiguLi5hcmdzKSA9PgogIC5zb3VyY2VzTWFwID0gb3V0cHV0RmlsZSA9PgogIGRlcCA9PgogIHMgPT4KICAuZGVwTWFwID0gaW5wdXRGaWxlID0+CihhY2MsIGNtZCkgPT4KICAudHJhbnNmb3JtTWFwID0gKGlucHV0LCBvdXRwdXQsIG1hcCkgPT4KKC4uLmFyZ3MpID0+CiAgLndvcmtEaXIgPSB3b3JrRGlyID0+CiAgdG9BYnNvbHV0ZShwKQogIHRvUmVsYXRpdmUocCkKICB0b1JlbChwKQogIC5yZWxhdGl2ZU1hcCA9IChyZWxhdGl2ZVRvLCBtYXApID0+CiAgbm06ICguLi5hcmdzKSA9PgogIG0gPT4KICBlbnRyeSA9PgooW2ZpbGUsIGRhdGFdKSA9PgooYWNjLCBbZmlsZSwgYWRkciwgdHlwZSwgbmFtZV0pID0+CiAgbWFpbiguLi5hcmdsaXN0KQogIGdldCBkZXBlbmRlbmNpZXMoKQooYXJnLCBpKSA9PgogIGdldCBDRkxBR1MoKQogIGQgPT4KICBpID0+CiAgZGlyID0+CihlbnRyeSwgZmlsZSkgPT4KICBnZXQgZGVwZW5kZW5jaWVzKCkAAAAAAAAAAPUEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					110,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD1BAAAQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IHByb2dyYW0oKQogIHNldCBwcm9ncmFtKGFyZykKICBhYnNvbHV0ZVBhdGgocGF0aCkKICBhcmd1bWVudHNPZlR5cGUodHlwZSkKKGFyZywgaSkgPT4KICBnZXQgd2FybkZsYWdzKCkKICBnZXQgZGVidWdGbGFncygpCiAgZ2V0IG9wdEZsYWdzKCkKICBnZXQgZGVwRmxhZ3MoKQogIGdldCBtb2RlRmxhZygpCiAgaXNDb21waWxlKCkKICBpc1ByZXByb2Nlc3MoKQogIGlzQXNzZW1ibGUoKQogIGlzTGluaygpCiAgdG9TdHJpbmcoZGVsaW0pCiAgdG9BcnJheSgpCiAgcmVtb3ZlKC4uLmFyZ3MpCiAgZ2V0IGRlcGVuZGVuY2llcygpCiAgZ2V0IG91dHB1dEZpbGUoKQogIGFic29sdXRlKCkKKGFyZywgaSkgPT4KICByZWxhdGl2ZSh0bykKKGFyZywgaSkgPT4KICBydW4oKQpDb21tYW5kCiAgdG9KU09OKCkKICBmcm9tU3RyaW5nKHN0ciwgd29ya0RpciA9ICcuJykKKFttXSkgPT4KQ29tcGlsZUNvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBpbmNsdWRlUGF0aHMoKQogIGdldCBkZWZpbmVzKCkKICBnZXQgY2ZsYWdzKCkKICBpbmMgPT4KICBkZWYgPT4KICBnZXQgZmxhZ3MoKQogIGdldCBhcmdzKCkKICBnZXQgc291cmNlcygpCiAgYXJnID0+CiAgc2V0IHNvdXJjZXMoYXJnKQogIGdldCBzb3VyY2UoKQogIHNldCBzb3VyY2UoYXJnKQogIHRvT2JqZWN0KCkKQ29tcGlsZUNvbW1hbmQKICBnZXQgb3V0cHV0KCkKICBhID0+CiAgc2V0IG91dHB1dChhcmcpCiAgYSA9PgpMaW5rQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IGxpYnJhcmllcygpCiAgZ2V0IGxpYnBhdGhzKCkKICBnZXQgbGlua2ZsYWdzKCkKICBnZXQgYXJncygpCihhcmcsaSkgPT4KICBnZXQgb2JqZWN0cygpCihhcmcsIGkpID0+CiAgYXJnID0+CiAgZ2V0IGZsYWdzKCkKICB0ID0+CkxpbmtDb21tYW5kCkNvbW1hbmQKQXJndW1lbnRUeXBlKGFyZywgaSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKQpBcmd1bWVudElzKHByZWQpCmFyZyA9PgphcmcgPT4KYXJnID0+CkNvbW1hbmRUeXBlKGNvbW1hbmQpCk1ha2VDb21tYW5kcyh0ZXh0LCB3b3JrRGlyID0gJy4nKQogIGxpbmUgPT4KTWFrZUNvbW1hbmQoYXJyYXlPclN0cmluZywgd29ya0RpciA9ICcuJykKKFttXSkgPT4KTGlua0NvbW1hbmQKICBnZXQgb3V0cHV0KCkKICBhID0+CihhLCBpKSA9PgogIHNldCBvdXRwdXQoYXJnKQogIGEgPT4KTmluamFSdWxlKGNvbW1hbmQpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					111,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					112,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					113,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/compileCommand.js",
						"symkeys":
						[
							[
								219,
								226
							],
							[
								231,
								260
							],
							[
								570,
								583
							],
							[
								633,
								649
							],
							[
								677,
								695
							],
							[
								792,
								813
							],
							[
								879,
								890
							],
							[
								944,
								959
							],
							[
								1028,
								1044
							],
							[
								1111,
								1125
							],
							[
								1191,
								1205
							],
							[
								1271,
								1285
							],
							[
								1358,
								1369
							],
							[
								1428,
								1442
							],
							[
								1501,
								1513
							],
							[
								1572,
								1580
							],
							[
								1611,
								1626
							],
							[
								1684,
								1693
							],
							[
								1737,
								1752
							],
							[
								1956,
								1974
							],
							[
								2233,
								2249
							],
							[
								2302,
								2312
							],
							[
								2432,
								2443
							],
							[
								2745,
								2757
							],
							[
								2902,
								2913
							],
							[
								3443,
								3448
							],
							[
								3607,
								3614
							],
							[
								3696,
								3704
							],
							[
								4010,
								4040
							],
							[
								4124,
								4132
							],
							[
								4285,
								4299
							],
							[
								4320,
								4349
							],
							[
								4443,
								4461
							],
							[
								4524,
								4537
							],
							[
								4598,
								4610
							],
							[
								4694,
								4700
							],
							[
								4741,
								4747
							],
							[
								4803,
								4814
							],
							[
								4872,
								4882
							],
							[
								4940,
								4953
							],
							[
								4999,
								5005
							],
							[
								5032,
								5048
							],
							[
								5246,
								5258
							],
							[
								5415,
								5430
							],
							[
								5466,
								5476
							],
							[
								6554,
								6568
							],
							[
								6705,
								6717
							],
							[
								6754,
								6758
							],
							[
								6866,
								6881
							],
							[
								6918,
								6922
							],
							[
								7132,
								7143
							],
							[
								7164,
								7193
							],
							[
								7248,
								7263
							],
							[
								7333,
								7347
							],
							[
								7417,
								7432
							],
							[
								7502,
								7512
							],
							[
								7570,
								7580
							],
							[
								7608,
								7621
							],
							[
								7656,
								7667
							],
							[
								7811,
								7817
							],
							[
								7846,
								7857
							],
							[
								7899,
								7903
							],
							[
								8033,
								8044
							],
							[
								8130,
								8137
							],
							[
								8218,
								8274
							],
							[
								9576,
								9602
							],
							[
								9638,
								9645
							],
							[
								9714,
								9721
							],
							[
								9755,
								9762
							],
							[
								9799,
								9829
							],
							[
								10335,
								10378
							],
							[
								10474,
								10481
							],
							[
								10520,
								10571
							],
							[
								10701,
								10709
							],
							[
								10881,
								10892
							],
							[
								10926,
								10938
							],
							[
								10975,
								10979
							],
							[
								11108,
								11117
							],
							[
								11197,
								11212
							],
							[
								11249,
								11253
							],
							[
								11388,
								11416
							]
						],
						"symlist":
						[
							"Command",
							"constructor(a, workDir = '.')",
							"get program()",
							"set program(arg)",
							"absolutePath(path)",
							"argumentsOfType(type)",
							"(arg, i) =>",
							"get warnFlags()",
							"get debugFlags()",
							"get optFlags()",
							"get depFlags()",
							"get modeFlag()",
							"isCompile()",
							"isPreprocess()",
							"isAssemble()",
							"isLink()",
							"toString(delim)",
							"toArray()",
							"remove(...args)",
							"get dependencies()",
							"get outputFile()",
							"absolute()",
							"(arg, i) =>",
							"relative(to)",
							"(arg, i) =>",
							"run()",
							"Command",
							"toJSON()",
							"fromString(str, workDir = '.')",
							"([m]) =>",
							"CompileCommand",
							"constructor(a, workDir = '.')",
							"get includePaths()",
							"get defines()",
							"get cflags()",
							"inc =>",
							"def =>",
							"get flags()",
							"get args()",
							"get sources()",
							"arg =>",
							"set sources(arg)",
							"get source()",
							"set source(arg)",
							"toObject()",
							"CompileCommand",
							"get output()",
							"a =>",
							"set output(arg)",
							"a =>",
							"LinkCommand",
							"constructor(a, workDir = '.')",
							"get libraries()",
							"get libpaths()",
							"get linkflags()",
							"get args()",
							"(arg,i) =>",
							"get objects()",
							"(arg, i) =>",
							"arg =>",
							"get flags()",
							"t =>",
							"LinkCommand",
							"Command",
							" function ArgumentType(arg, i = Number.MAX_SAFE_INTEGER)",
							" function ArgumentIs(pred)",
							" arg =>",
							" arg =>",
							" arg =>",
							" function CommandType(command)",
							" function MakeCommands(text, workDir = '.')",
							"line =>",
							" function MakeCommand(arrayOrString, workDir = '.')",
							"([m]) =>",
							"LinkCommand",
							"get output()",
							"a =>",
							"(a, i) =>",
							"set output(arg)",
							"a =>",
							" function NinjaRule(command)"
						]
					},
					"AQAAAAAAAAAAAAAA9QQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					114,
					4,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/compileCommand.js",
						"symkeys":
						[
							[
								219,
								226
							],
							[
								231,
								260
							],
							[
								570,
								583
							],
							[
								633,
								649
							],
							[
								677,
								695
							],
							[
								792,
								813
							],
							[
								879,
								890
							],
							[
								944,
								959
							],
							[
								1028,
								1044
							],
							[
								1111,
								1125
							],
							[
								1191,
								1205
							],
							[
								1271,
								1285
							],
							[
								1358,
								1369
							],
							[
								1428,
								1442
							],
							[
								1501,
								1513
							],
							[
								1572,
								1580
							],
							[
								1611,
								1626
							],
							[
								1684,
								1693
							],
							[
								1737,
								1752
							],
							[
								1956,
								1974
							],
							[
								2233,
								2249
							],
							[
								2302,
								2312
							],
							[
								2432,
								2443
							],
							[
								2745,
								2757
							],
							[
								2902,
								2913
							],
							[
								3443,
								3455
							],
							[
								3623,
								3630
							],
							[
								3712,
								3720
							],
							[
								4026,
								4056
							],
							[
								4140,
								4148
							],
							[
								4301,
								4315
							],
							[
								4336,
								4365
							],
							[
								4459,
								4477
							],
							[
								4540,
								4553
							],
							[
								4614,
								4626
							],
							[
								4710,
								4716
							],
							[
								4757,
								4763
							],
							[
								4819,
								4830
							],
							[
								4888,
								4898
							],
							[
								4956,
								4969
							],
							[
								5015,
								5021
							],
							[
								5048,
								5064
							],
							[
								5262,
								5274
							],
							[
								5431,
								5446
							],
							[
								5482,
								5492
							],
							[
								6570,
								6584
							],
							[
								6721,
								6733
							],
							[
								6770,
								6774
							],
							[
								6882,
								6897
							],
							[
								6934,
								6938
							],
							[
								7148,
								7159
							],
							[
								7180,
								7209
							],
							[
								7264,
								7279
							],
							[
								7349,
								7363
							],
							[
								7433,
								7448
							],
							[
								7518,
								7528
							],
							[
								7586,
								7596
							],
							[
								7624,
								7637
							],
							[
								7672,
								7683
							],
							[
								7827,
								7833
							],
							[
								7862,
								7873
							],
							[
								7915,
								7919
							],
							[
								8049,
								8060
							],
							[
								8146,
								8153
							],
							[
								8234,
								8290
							],
							[
								9592,
								9618
							],
							[
								9654,
								9661
							],
							[
								9730,
								9737
							],
							[
								9771,
								9778
							],
							[
								9815,
								9845
							],
							[
								10351,
								10394
							],
							[
								10490,
								10497
							],
							[
								10536,
								10587
							],
							[
								10717,
								10725
							],
							[
								10897,
								10908
							],
							[
								10942,
								10954
							],
							[
								10991,
								10995
							],
							[
								11124,
								11133
							],
							[
								11213,
								11228
							],
							[
								11265,
								11269
							],
							[
								11404,
								11432
							]
						],
						"symlist":
						[
							"Command",
							"constructor(a, workDir = '.')",
							"get program()",
							"set program(arg)",
							"absolutePath(path)",
							"argumentsOfType(type)",
							"(arg, i) =>",
							"get warnFlags()",
							"get debugFlags()",
							"get optFlags()",
							"get depFlags()",
							"get modeFlag()",
							"isCompile()",
							"isPreprocess()",
							"isAssemble()",
							"isLink()",
							"toString(delim)",
							"toArray()",
							"remove(...args)",
							"get dependencies()",
							"get outputFile()",
							"absolute()",
							"(arg, i) =>",
							"relative(to)",
							"(arg, i) =>",
							"run(opts={})",
							"Command",
							"toJSON()",
							"fromString(str, workDir = '.')",
							"([m]) =>",
							"CompileCommand",
							"constructor(a, workDir = '.')",
							"get includePaths()",
							"get defines()",
							"get cflags()",
							"inc =>",
							"def =>",
							"get flags()",
							"get args()",
							"get sources()",
							"arg =>",
							"set sources(arg)",
							"get source()",
							"set source(arg)",
							"toObject()",
							"CompileCommand",
							"get output()",
							"a =>",
							"set output(arg)",
							"a =>",
							"LinkCommand",
							"constructor(a, workDir = '.')",
							"get libraries()",
							"get libpaths()",
							"get linkflags()",
							"get args()",
							"(arg,i) =>",
							"get objects()",
							"(arg, i) =>",
							"arg =>",
							"get flags()",
							"t =>",
							"LinkCommand",
							"Command",
							" function ArgumentType(arg, i = Number.MAX_SAFE_INTEGER)",
							" function ArgumentIs(pred)",
							" arg =>",
							" arg =>",
							" arg =>",
							" function CommandType(command)",
							" function MakeCommands(text, workDir = '.')",
							"line =>",
							" function MakeCommand(arrayOrString, workDir = '.')",
							"([m]) =>",
							"LinkCommand",
							"get output()",
							"a =>",
							"(a, i) =>",
							"set output(arg)",
							"a =>",
							" function NinjaRule(command)"
						]
					},
					"CAAAAAAAAAAAAAAAAAAAAAAAAAD1BAAAQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IHByb2dyYW0oKQogIHNldCBwcm9ncmFtKGFyZykKICBhYnNvbHV0ZVBhdGgocGF0aCkKICBhcmd1bWVudHNPZlR5cGUodHlwZSkKKGFyZywgaSkgPT4KICBnZXQgd2FybkZsYWdzKCkKICBnZXQgZGVidWdGbGFncygpCiAgZ2V0IG9wdEZsYWdzKCkKICBnZXQgZGVwRmxhZ3MoKQogIGdldCBtb2RlRmxhZygpCiAgaXNDb21waWxlKCkKICBpc1ByZXByb2Nlc3MoKQogIGlzQXNzZW1ibGUoKQogIGlzTGluaygpCiAgdG9TdHJpbmcoZGVsaW0pCiAgdG9BcnJheSgpCiAgcmVtb3ZlKC4uLmFyZ3MpCiAgZ2V0IGRlcGVuZGVuY2llcygpCiAgZ2V0IG91dHB1dEZpbGUoKQogIGFic29sdXRlKCkKKGFyZywgaSkgPT4KICByZWxhdGl2ZSh0bykKKGFyZywgaSkgPT4KICBydW4oKQpDb21tYW5kCiAgdG9KU09OKCkKICBmcm9tU3RyaW5nKHN0ciwgd29ya0RpciA9ICcuJykKKFttXSkgPT4KQ29tcGlsZUNvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBpbmNsdWRlUGF0aHMoKQogIGdldCBkZWZpbmVzKCkKICBnZXQgY2ZsYWdzKCkKICBpbmMgPT4KICBkZWYgPT4KICBnZXQgZmxhZ3MoKQogIGdldCBhcmdzKCkKICBnZXQgc291cmNlcygpCiAgYXJnID0+CiAgc2V0IHNvdXJjZXMoYXJnKQogIGdldCBzb3VyY2UoKQogIHNldCBzb3VyY2UoYXJnKQogIHRvT2JqZWN0KCkKQ29tcGlsZUNvbW1hbmQKICBnZXQgb3V0cHV0KCkKICBhID0+CiAgc2V0IG91dHB1dChhcmcpCiAgYSA9PgpMaW5rQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IGxpYnJhcmllcygpCiAgZ2V0IGxpYnBhdGhzKCkKICBnZXQgbGlua2ZsYWdzKCkKICBnZXQgYXJncygpCihhcmcsaSkgPT4KICBnZXQgb2JqZWN0cygpCihhcmcsIGkpID0+CiAgYXJnID0+CiAgZ2V0IGZsYWdzKCkKICB0ID0+CkxpbmtDb21tYW5kCkNvbW1hbmQKQXJndW1lbnRUeXBlKGFyZywgaSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKQpBcmd1bWVudElzKHByZWQpCmFyZyA9PgphcmcgPT4KYXJnID0+CkNvbW1hbmRUeXBlKGNvbW1hbmQpCk1ha2VDb21tYW5kcyh0ZXh0LCB3b3JrRGlyID0gJy4nKQogIGxpbmUgPT4KTWFrZUNvbW1hbmQoYXJyYXlPclN0cmluZywgd29ya0RpciA9ICcuJykKKFttXSkgPT4KTGlua0NvbW1hbmQKICBnZXQgb3V0cHV0KCkKICBhID0+CihhLCBpKSA9PgogIHNldCBvdXRwdXQoYXJnKQogIGEgPT4KTmluamFSdWxlKGNvbW1hbmQpAAAAAAAAAAD8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AQAAENvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBwcm9ncmFtKCkKICBzZXQgcHJvZ3JhbShhcmcpCiAgYWJzb2x1dGVQYXRoKHBhdGgpCiAgYXJndW1lbnRzT2ZUeXBlKHR5cGUpCihhcmcsIGkpID0+CiAgZ2V0IHdhcm5GbGFncygpCiAgZ2V0IGRlYnVnRmxhZ3MoKQogIGdldCBvcHRGbGFncygpCiAgZ2V0IGRlcEZsYWdzKCkKICBnZXQgbW9kZUZsYWcoKQogIGlzQ29tcGlsZSgpCiAgaXNQcmVwcm9jZXNzKCkKICBpc0Fzc2VtYmxlKCkKICBpc0xpbmsoKQogIHRvU3RyaW5nKGRlbGltKQogIHRvQXJyYXkoKQogIHJlbW92ZSguLi5hcmdzKQogIGdldCBkZXBlbmRlbmNpZXMoKQogIGdldCBvdXRwdXRGaWxlKCkKICBhYnNvbHV0ZSgpCihhcmcsIGkpID0+CiAgcmVsYXRpdmUodG8pCihhcmcsIGkpID0+CiAgcnVuKG9wdHM9e30pCkNvbW1hbmQKICB0b0pTT04oKQogIGZyb21TdHJpbmcoc3RyLCB3b3JrRGlyID0gJy4nKQooW21dKSA9PgpDb21waWxlQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IGluY2x1ZGVQYXRocygpCiAgZ2V0IGRlZmluZXMoKQogIGdldCBjZmxhZ3MoKQogIGluYyA9PgogIGRlZiA9PgogIGdldCBmbGFncygpCiAgZ2V0IGFyZ3MoKQogIGdldCBzb3VyY2VzKCkKICBhcmcgPT4KICBzZXQgc291cmNlcyhhcmcpCiAgZ2V0IHNvdXJjZSgpCiAgc2V0IHNvdXJjZShhcmcpCiAgdG9PYmplY3QoKQpDb21waWxlQ29tbWFuZAogIGdldCBvdXRwdXQoKQogIGEgPT4KICBzZXQgb3V0cHV0KGFyZykKICBhID0+CkxpbmtDb21tYW5kCiAgY29uc3RydWN0b3IoYSwgd29ya0RpciA9ICcuJykKICBnZXQgbGlicmFyaWVzKCkKICBnZXQgbGlicGF0aHMoKQogIGdldCBsaW5rZmxhZ3MoKQogIGdldCBhcmdzKCkKKGFyZyxpKSA9PgogIGdldCBvYmplY3RzKCkKKGFyZywgaSkgPT4KICBhcmcgPT4KICBnZXQgZmxhZ3MoKQogIHQgPT4KTGlua0NvbW1hbmQKQ29tbWFuZApBcmd1bWVudFR5cGUoYXJnLCBpID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpCkFyZ3VtZW50SXMocHJlZCkKYXJnID0+CmFyZyA9PgphcmcgPT4KQ29tbWFuZFR5cGUoY29tbWFuZCkKTWFrZUNvbW1hbmRzKHRleHQsIHdvcmtEaXIgPSAnLicpCiAgbGluZSA9PgpNYWtlQ29tbWFuZChhcnJheU9yU3RyaW5nLCB3b3JrRGlyID0gJy4nKQooW21dKSA9PgpMaW5rQ29tbWFuZAogIGdldCBvdXRwdXQoKQogIGEgPT4KKGEsIGkpID0+CiAgc2V0IG91dHB1dChhcmcpCiAgYSA9PgpOaW5qYVJ1bGUoY29tbWFuZCkAAAAAAAAAAPwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8BAAAQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IHByb2dyYW0oKQogIHNldCBwcm9ncmFtKGFyZykKICBhYnNvbHV0ZVBhdGgocGF0aCkKICBhcmd1bWVudHNPZlR5cGUodHlwZSkKKGFyZywgaSkgPT4KICBnZXQgd2FybkZsYWdzKCkKICBnZXQgZGVidWdGbGFncygpCiAgZ2V0IG9wdEZsYWdzKCkKICBnZXQgZGVwRmxhZ3MoKQogIGdldCBtb2RlRmxhZygpCiAgaXNDb21waWxlKCkKICBpc1ByZXByb2Nlc3MoKQogIGlzQXNzZW1ibGUoKQogIGlzTGluaygpCiAgdG9TdHJpbmcoZGVsaW0pCiAgdG9BcnJheSgpCiAgcmVtb3ZlKC4uLmFyZ3MpCiAgZ2V0IGRlcGVuZGVuY2llcygpCiAgZ2V0IG91dHB1dEZpbGUoKQogIGFic29sdXRlKCkKKGFyZywgaSkgPT4KICByZWxhdGl2ZSh0bykKKGFyZywgaSkgPT4KICBydW4ob3B0cz17fSkKQ29tbWFuZAogIHRvSlNPTigpCiAgZnJvbVN0cmluZyhzdHIsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkNvbXBpbGVDb21tYW5kCiAgY29uc3RydWN0b3IoYSwgd29ya0RpciA9ICcuJykKICBnZXQgaW5jbHVkZVBhdGhzKCkKICBnZXQgZGVmaW5lcygpCiAgZ2V0IGNmbGFncygpCiAgaW5jID0+CiAgZGVmID0+CiAgZ2V0IGZsYWdzKCkKICBnZXQgYXJncygpCiAgZ2V0IHNvdXJjZXMoKQogIGFyZyA9PgogIHNldCBzb3VyY2VzKGFyZykKICBnZXQgc291cmNlKCkKICBzZXQgc291cmNlKGFyZykKICB0b09iamVjdCgpCkNvbXBpbGVDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgogIHNldCBvdXRwdXQoYXJnKQogIGEgPT4KTGlua0NvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBsaWJyYXJpZXMoKQogIGdldCBsaWJwYXRocygpCiAgZ2V0IGxpbmtmbGFncygpCiAgZ2V0IGFyZ3MoKQooYXJnLGkpID0+CiAgZ2V0IG9iamVjdHMoKQooYXJnLCBpKSA9PgogIGFyZyA9PgogIGdldCBmbGFncygpCiAgdCA9PgpMaW5rQ29tbWFuZApDb21tYW5kCkFyZ3VtZW50VHlwZShhcmcsIGkgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikKQXJndW1lbnRJcyhwcmVkKQphcmcgPT4KYXJnID0+CmFyZyA9PgpDb21tYW5kVHlwZShjb21tYW5kKQpNYWtlQ29tbWFuZHModGV4dCwgd29ya0RpciA9ICcuJykKICBsaW5lID0+Ck1ha2VDb21tYW5kKGFycmF5T3JTdHJpbmcsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkxpbmtDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgooYSwgaSkgPT4KICBzZXQgb3V0cHV0KGFyZykKICBhID0+Ck5pbmphUnVsZShjb21tYW5kKQAAAAAAAAAA/AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPwEAABDb21tYW5kCiAgY29uc3RydWN0b3IoYSwgd29ya0RpciA9ICcuJykKICBnZXQgcHJvZ3JhbSgpCiAgc2V0IHByb2dyYW0oYXJnKQogIGFic29sdXRlUGF0aChwYXRoKQogIGFyZ3VtZW50c09mVHlwZSh0eXBlKQooYXJnLCBpKSA9PgogIGdldCB3YXJuRmxhZ3MoKQogIGdldCBkZWJ1Z0ZsYWdzKCkKICBnZXQgb3B0RmxhZ3MoKQogIGdldCBkZXBGbGFncygpCiAgZ2V0IG1vZGVGbGFnKCkKICBpc0NvbXBpbGUoKQogIGlzUHJlcHJvY2VzcygpCiAgaXNBc3NlbWJsZSgpCiAgaXNMaW5rKCkKICB0b1N0cmluZyhkZWxpbSkKICB0b0FycmF5KCkKICByZW1vdmUoLi4uYXJncykKICBnZXQgZGVwZW5kZW5jaWVzKCkKICBnZXQgb3V0cHV0RmlsZSgpCiAgYWJzb2x1dGUoKQooYXJnLCBpKSA9PgogIHJlbGF0aXZlKHRvKQooYXJnLCBpKSA9PgogIHJ1bihvcHRzPXt9KQpDb21tYW5kCiAgdG9KU09OKCkKICBmcm9tU3RyaW5nKHN0ciwgd29ya0RpciA9ICcuJykKKFttXSkgPT4KQ29tcGlsZUNvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBpbmNsdWRlUGF0aHMoKQogIGdldCBkZWZpbmVzKCkKICBnZXQgY2ZsYWdzKCkKICBpbmMgPT4KICBkZWYgPT4KICBnZXQgZmxhZ3MoKQogIGdldCBhcmdzKCkKICBnZXQgc291cmNlcygpCiAgYXJnID0+CiAgc2V0IHNvdXJjZXMoYXJnKQogIGdldCBzb3VyY2UoKQogIHNldCBzb3VyY2UoYXJnKQogIHRvT2JqZWN0KCkKQ29tcGlsZUNvbW1hbmQKICBnZXQgb3V0cHV0KCkKICBhID0+CiAgc2V0IG91dHB1dChhcmcpCiAgYSA9PgpMaW5rQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IGxpYnJhcmllcygpCiAgZ2V0IGxpYnBhdGhzKCkKICBnZXQgbGlua2ZsYWdzKCkKICBnZXQgYXJncygpCihhcmcsaSkgPT4KICBnZXQgb2JqZWN0cygpCihhcmcsIGkpID0+CiAgYXJnID0+CiAgZ2V0IGZsYWdzKCkKICB0ID0+CkxpbmtDb21tYW5kCkNvbW1hbmQKQXJndW1lbnRUeXBlKGFyZywgaSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKQpBcmd1bWVudElzKHByZWQpCmFyZyA9PgphcmcgPT4KYXJnID0+CkNvbW1hbmRUeXBlKGNvbW1hbmQpCk1ha2VDb21tYW5kcyh0ZXh0LCB3b3JrRGlyID0gJy4nKQogIGxpbmUgPT4KTWFrZUNvbW1hbmQoYXJyYXlPclN0cmluZywgd29ya0RpciA9ICcuJykKKFttXSkgPT4KTGlua0NvbW1hbmQKICBnZXQgb3V0cHV0KCkKICBhID0+CihhLCBpKSA9PgogIHNldCBvdXRwdXQoYXJnKQogIGEgPT4KTmluamFSdWxlKGNvbW1hbmQpAAAAAAAAAAD8BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					115,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/compileCommand.js",
						"symkeys":
						[
							[
								219,
								226
							],
							[
								231,
								260
							],
							[
								570,
								583
							],
							[
								633,
								649
							],
							[
								677,
								695
							],
							[
								792,
								813
							],
							[
								879,
								890
							],
							[
								944,
								959
							],
							[
								1028,
								1044
							],
							[
								1111,
								1125
							],
							[
								1191,
								1205
							],
							[
								1271,
								1285
							],
							[
								1358,
								1369
							],
							[
								1428,
								1442
							],
							[
								1501,
								1513
							],
							[
								1572,
								1580
							],
							[
								1611,
								1626
							],
							[
								1684,
								1693
							],
							[
								1737,
								1752
							],
							[
								1956,
								1974
							],
							[
								2233,
								2249
							],
							[
								2302,
								2312
							],
							[
								2432,
								2443
							],
							[
								2745,
								2757
							],
							[
								2902,
								2913
							],
							[
								3443,
								3455
							],
							[
								3623,
								3630
							],
							[
								3712,
								3720
							],
							[
								4026,
								4056
							],
							[
								4140,
								4148
							],
							[
								4301,
								4315
							],
							[
								4336,
								4365
							],
							[
								4459,
								4477
							],
							[
								4540,
								4553
							],
							[
								4614,
								4626
							],
							[
								4710,
								4716
							],
							[
								4757,
								4763
							],
							[
								4819,
								4830
							],
							[
								4888,
								4898
							],
							[
								4956,
								4969
							],
							[
								5015,
								5021
							],
							[
								5048,
								5064
							],
							[
								5262,
								5274
							],
							[
								5431,
								5446
							],
							[
								5482,
								5492
							],
							[
								6570,
								6584
							],
							[
								6721,
								6733
							],
							[
								6770,
								6774
							],
							[
								6882,
								6897
							],
							[
								6934,
								6938
							],
							[
								7148,
								7159
							],
							[
								7180,
								7209
							],
							[
								7264,
								7279
							],
							[
								7349,
								7363
							],
							[
								7433,
								7448
							],
							[
								7518,
								7528
							],
							[
								7586,
								7596
							],
							[
								7624,
								7637
							],
							[
								7672,
								7683
							],
							[
								7827,
								7833
							],
							[
								7862,
								7873
							],
							[
								7915,
								7919
							],
							[
								8049,
								8060
							],
							[
								8146,
								8153
							],
							[
								8234,
								8290
							],
							[
								9592,
								9618
							],
							[
								9654,
								9661
							],
							[
								9730,
								9737
							],
							[
								9771,
								9778
							],
							[
								9815,
								9845
							],
							[
								10351,
								10394
							],
							[
								10490,
								10497
							],
							[
								10536,
								10587
							],
							[
								10717,
								10725
							],
							[
								10897,
								10908
							],
							[
								10942,
								10954
							],
							[
								10991,
								10995
							],
							[
								11124,
								11133
							],
							[
								11213,
								11228
							],
							[
								11265,
								11269
							],
							[
								11404,
								11432
							]
						],
						"symlist":
						[
							"Command",
							"constructor(a, workDir = '.')",
							"get program()",
							"set program(arg)",
							"absolutePath(path)",
							"argumentsOfType(type)",
							"(arg, i) =>",
							"get warnFlags()",
							"get debugFlags()",
							"get optFlags()",
							"get depFlags()",
							"get modeFlag()",
							"isCompile()",
							"isPreprocess()",
							"isAssemble()",
							"isLink()",
							"toString(delim)",
							"toArray()",
							"remove(...args)",
							"get dependencies()",
							"get outputFile()",
							"absolute()",
							"(arg, i) =>",
							"relative(to)",
							"(arg, i) =>",
							"run(opts={})",
							"Command",
							"toJSON()",
							"fromString(str, workDir = '.')",
							"([m]) =>",
							"CompileCommand",
							"constructor(a, workDir = '.')",
							"get includePaths()",
							"get defines()",
							"get cflags()",
							"inc =>",
							"def =>",
							"get flags()",
							"get args()",
							"get sources()",
							"arg =>",
							"set sources(arg)",
							"get source()",
							"set source(arg)",
							"toObject()",
							"CompileCommand",
							"get output()",
							"a =>",
							"set output(arg)",
							"a =>",
							"LinkCommand",
							"constructor(a, workDir = '.')",
							"get libraries()",
							"get libpaths()",
							"get linkflags()",
							"get args()",
							"(arg,i) =>",
							"get objects()",
							"(arg, i) =>",
							"arg =>",
							"get flags()",
							"t =>",
							"LinkCommand",
							"Command",
							" function ArgumentType(arg, i = Number.MAX_SAFE_INTEGER)",
							" function ArgumentIs(pred)",
							" arg =>",
							" arg =>",
							" arg =>",
							" function CommandType(command)",
							" function MakeCommands(text, workDir = '.')",
							"line =>",
							" function MakeCommand(arrayOrString, workDir = '.')",
							"([m]) =>",
							"LinkCommand",
							"get output()",
							"a =>",
							"(a, i) =>",
							"set output(arg)",
							"a =>",
							" function NinjaRule(command)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD8BAAAQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IHByb2dyYW0oKQogIHNldCBwcm9ncmFtKGFyZykKICBhYnNvbHV0ZVBhdGgocGF0aCkKICBhcmd1bWVudHNPZlR5cGUodHlwZSkKKGFyZywgaSkgPT4KICBnZXQgd2FybkZsYWdzKCkKICBnZXQgZGVidWdGbGFncygpCiAgZ2V0IG9wdEZsYWdzKCkKICBnZXQgZGVwRmxhZ3MoKQogIGdldCBtb2RlRmxhZygpCiAgaXNDb21waWxlKCkKICBpc1ByZXByb2Nlc3MoKQogIGlzQXNzZW1ibGUoKQogIGlzTGluaygpCiAgdG9TdHJpbmcoZGVsaW0pCiAgdG9BcnJheSgpCiAgcmVtb3ZlKC4uLmFyZ3MpCiAgZ2V0IGRlcGVuZGVuY2llcygpCiAgZ2V0IG91dHB1dEZpbGUoKQogIGFic29sdXRlKCkKKGFyZywgaSkgPT4KICByZWxhdGl2ZSh0bykKKGFyZywgaSkgPT4KICBydW4ob3B0cz17fSkKQ29tbWFuZAogIHRvSlNPTigpCiAgZnJvbVN0cmluZyhzdHIsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkNvbXBpbGVDb21tYW5kCiAgY29uc3RydWN0b3IoYSwgd29ya0RpciA9ICcuJykKICBnZXQgaW5jbHVkZVBhdGhzKCkKICBnZXQgZGVmaW5lcygpCiAgZ2V0IGNmbGFncygpCiAgaW5jID0+CiAgZGVmID0+CiAgZ2V0IGZsYWdzKCkKICBnZXQgYXJncygpCiAgZ2V0IHNvdXJjZXMoKQogIGFyZyA9PgogIHNldCBzb3VyY2VzKGFyZykKICBnZXQgc291cmNlKCkKICBzZXQgc291cmNlKGFyZykKICB0b09iamVjdCgpCkNvbXBpbGVDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgogIHNldCBvdXRwdXQoYXJnKQogIGEgPT4KTGlua0NvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBsaWJyYXJpZXMoKQogIGdldCBsaWJwYXRocygpCiAgZ2V0IGxpbmtmbGFncygpCiAgZ2V0IGFyZ3MoKQooYXJnLGkpID0+CiAgZ2V0IG9iamVjdHMoKQooYXJnLCBpKSA9PgogIGFyZyA9PgogIGdldCBmbGFncygpCiAgdCA9PgpMaW5rQ29tbWFuZApDb21tYW5kCkFyZ3VtZW50VHlwZShhcmcsIGkgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikKQXJndW1lbnRJcyhwcmVkKQphcmcgPT4KYXJnID0+CmFyZyA9PgpDb21tYW5kVHlwZShjb21tYW5kKQpNYWtlQ29tbWFuZHModGV4dCwgd29ya0RpciA9ICcuJykKICBsaW5lID0+Ck1ha2VDb21tYW5kKGFycmF5T3JTdHJpbmcsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkxpbmtDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgooYSwgaSkgPT4KICBzZXQgb3V0cHV0KGFyZykKICBhID0+Ck5pbmphUnVsZShjb21tYW5kKQAAAAAAAAAA/AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					116,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD8BAAAQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IHByb2dyYW0oKQogIHNldCBwcm9ncmFtKGFyZykKICBhYnNvbHV0ZVBhdGgocGF0aCkKICBhcmd1bWVudHNPZlR5cGUodHlwZSkKKGFyZywgaSkgPT4KICBnZXQgd2FybkZsYWdzKCkKICBnZXQgZGVidWdGbGFncygpCiAgZ2V0IG9wdEZsYWdzKCkKICBnZXQgZGVwRmxhZ3MoKQogIGdldCBtb2RlRmxhZygpCiAgaXNDb21waWxlKCkKICBpc1ByZXByb2Nlc3MoKQogIGlzQXNzZW1ibGUoKQogIGlzTGluaygpCiAgdG9TdHJpbmcoZGVsaW0pCiAgdG9BcnJheSgpCiAgcmVtb3ZlKC4uLmFyZ3MpCiAgZ2V0IGRlcGVuZGVuY2llcygpCiAgZ2V0IG91dHB1dEZpbGUoKQogIGFic29sdXRlKCkKKGFyZywgaSkgPT4KICByZWxhdGl2ZSh0bykKKGFyZywgaSkgPT4KICBydW4ob3B0cz17fSkKQ29tbWFuZAogIHRvSlNPTigpCiAgZnJvbVN0cmluZyhzdHIsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkNvbXBpbGVDb21tYW5kCiAgY29uc3RydWN0b3IoYSwgd29ya0RpciA9ICcuJykKICBnZXQgaW5jbHVkZVBhdGhzKCkKICBnZXQgZGVmaW5lcygpCiAgZ2V0IGNmbGFncygpCiAgaW5jID0+CiAgZGVmID0+CiAgZ2V0IGZsYWdzKCkKICBnZXQgYXJncygpCiAgZ2V0IHNvdXJjZXMoKQogIGFyZyA9PgogIHNldCBzb3VyY2VzKGFyZykKICBnZXQgc291cmNlKCkKICBzZXQgc291cmNlKGFyZykKICB0b09iamVjdCgpCkNvbXBpbGVDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgogIHNldCBvdXRwdXQoYXJnKQogIGEgPT4KTGlua0NvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBsaWJyYXJpZXMoKQogIGdldCBsaWJwYXRocygpCiAgZ2V0IGxpbmtmbGFncygpCiAgZ2V0IGFyZ3MoKQooYXJnLGkpID0+CiAgZ2V0IG9iamVjdHMoKQooYXJnLCBpKSA9PgogIGFyZyA9PgogIGdldCBmbGFncygpCiAgdCA9PgpMaW5rQ29tbWFuZApDb21tYW5kCkFyZ3VtZW50VHlwZShhcmcsIGkgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikKQXJndW1lbnRJcyhwcmVkKQphcmcgPT4KYXJnID0+CmFyZyA9PgpDb21tYW5kVHlwZShjb21tYW5kKQpNYWtlQ29tbWFuZHModGV4dCwgd29ya0RpciA9ICcuJykKICBsaW5lID0+Ck1ha2VDb21tYW5kKGFycmF5T3JTdHJpbmcsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkxpbmtDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgooYSwgaSkgPT4KICBzZXQgb3V0cHV0KGFyZykKICBhID0+Ck5pbmphUnVsZShjb21tYW5kKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					117,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/compile_commands.js",
						"symkeys":
						[
							[
								476,
								483
							],
							[
								484,
								498
							],
							[
								555,
								574
							],
							[
								695,
								702
							],
							[
								703,
								717
							],
							[
								961,
								988
							],
							[
								1079,
								1085
							],
							[
								1106,
								1110
							],
							[
								1180,
								1202
							],
							[
								1235,
								1248
							],
							[
								1401,
								1440
							],
							[
								1480,
								1493
							],
							[
								1670,
								1691
							],
							[
								1774,
								1787
							],
							[
								1890,
								1903
							],
							[
								1954,
								1977
							],
							[
								2125,
								2160
							],
							[
								2336,
								2352
							],
							[
								2423,
								2427
							],
							[
								2459,
								2467
							],
							[
								2497,
								2514
							],
							[
								2592,
								2626
							],
							[
								2731,
								2756
							],
							[
								3698,
								3716
							],
							[
								3906,
								3917
							],
							[
								4467,
								4479
							],
							[
								4511,
								4515
							],
							[
								4547,
								4551
							],
							[
								4630,
								4636
							],
							[
								4666,
								4683
							],
							[
								5149,
								5167
							]
						],
						"symlist":
						[
							" fn =>",
							" (...args) =>",
							"function* iter(arr)",
							" fn =>",
							" (...args) =>",
							".sourcesMap = outputFile =>",
							"dep =>",
							"s =>",
							".depMap = inputFile =>",
							"(acc, cmd) =>",
							".transformMap = (input, output, map) =>",
							" (...args) =>",
							".workDir = workDir =>",
							"toAbsolute(p)",
							"toRelative(p)",
							" function toRel(p)",
							".relativeMap = (relativeTo, map) =>",
							"nm: (...args) =>",
							"m =>",
							"entry =>",
							"([file, data]) =>",
							"(acc, [file, addr, type, name]) =>",
							"function main(...arglist)",
							"get dependencies()",
							"(arg, i) =>",
							"get CFLAGS()",
							"d =>",
							"i =>",
							"dir =>",
							" (entry, file) =>",
							"get dependencies()"
						]
					},
					"AwAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAABmbiA9PgooLi4uYXJncykgPT4KICBpdGVyKGFycikKZm4gPT4KKC4uLmFyZ3MpID0+CiAgLnNvdXJjZXNNYXAgPSBvdXRwdXRGaWxlID0+CiAgZGVwID0+CiAgcyA9PgogIC5kZXBNYXAgPSBpbnB1dEZpbGUgPT4KKGFjYywgY21kKSA9PgogIC50cmFuc2Zvcm1NYXAgPSAoaW5wdXQsIG91dHB1dCwgbWFwKSA9PgooLi4uYXJncykgPT4KICAud29ya0RpciA9IHdvcmtEaXIgPT4KICB0b0Fic29sdXRlKHApCiAgdG9SZWxhdGl2ZShwKQogIHRvUmVsKHApCiAgLnJlbGF0aXZlTWFwID0gKHJlbGF0aXZlVG8sIG1hcCkgPT4KICBubTogKC4uLmFyZ3MpID0+CiAgbSA9PgogIGVudHJ5ID0+CihbZmlsZSwgZGF0YV0pID0+CihhY2MsIFtmaWxlLCBhZGRyLCB0eXBlLCBuYW1lXSkgPT4KICBtYWluKC4uLmFyZ2xpc3QpCiAgZ2V0IGRlcGVuZGVuY2llcygpCihhcmcsIGkpID0+CiAgZ2V0IENGTEFHUygpCiAgZCA9PgogIGkgPT4KICBkaXIgPT4KKGVudHJ5LCBmaWxlKSA9PgogIGdldCBkZXBlbmRlbmNpZXMoKQAAAAAAAAAAAAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					118,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAZm4gPT4KKC4uLmFyZ3MpID0+CiAgaXRlcihhcnIpCmZuID0+CiguLi5hcmdzKSA9PgogIC5zb3VyY2VzTWFwID0gb3V0cHV0RmlsZSA9PgogIGRlcCA9PgogIHMgPT4KICAuZGVwTWFwID0gaW5wdXRGaWxlID0+CihhY2MsIGNtZCkgPT4KICAudHJhbnNmb3JtTWFwID0gKGlucHV0LCBvdXRwdXQsIG1hcCkgPT4KKC4uLmFyZ3MpID0+CiAgLndvcmtEaXIgPSB3b3JrRGlyID0+CiAgdG9BYnNvbHV0ZShwKQogIHRvUmVsYXRpdmUocCkKICB0b1JlbChwKQogIC5yZWxhdGl2ZU1hcCA9IChyZWxhdGl2ZVRvLCBtYXApID0+CiAgbm06ICguLi5hcmdzKSA9PgogIG0gPT4KICBlbnRyeSA9PgooW2ZpbGUsIGRhdGFdKSA9PgooYWNjLCBbZmlsZSwgYWRkciwgdHlwZSwgbmFtZV0pID0+CiAgbWFpbiguLi5hcmdsaXN0KQogIGdldCBkZXBlbmRlbmNpZXMoKQooYXJnLCBpKSA9PgogIGdldCBDRkxBR1MoKQogIGQgPT4KICBpID0+CiAgZGlyID0+CihlbnRyeSwgZmlsZSkgPT4KICBnZXQgZGVwZW5kZW5jaWVzKCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					119,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					120,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					121,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					122,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs2/cmake/functions.cmake",
						"symkeys":
						[
							[
								9,
								19
							],
							[
								62,
								65
							],
							[
								106,
								109
							],
							[
								137,
								140
							],
							[
								168,
								171
							],
							[
								179,
								182
							],
							[
								198,
								201
							],
							[
								205,
								208
							],
							[
								238,
								241
							],
							[
								254,
								264
							],
							[
								270,
								273
							],
							[
								343,
								347
							],
							[
								365,
								369
							],
							[
								382,
								391
							],
							[
								417,
								426
							],
							[
								450,
								459
							],
							[
								486,
								489
							],
							[
								496,
								499
							],
							[
								551,
								554
							],
							[
								598,
								599
							],
							[
								635,
								644
							],
							[
								652,
								653
							],
							[
								674,
								677
							],
							[
								683,
								684
							],
							[
								707,
								711
							],
							[
								742,
								754
							],
							[
								819,
								822
							],
							[
								869,
								876
							],
							[
								900,
								907
							],
							[
								929,
								939
							],
							[
								945,
								952
							],
							[
								1020,
								1028
							],
							[
								1088,
								1091
							],
							[
								1136,
								1140
							],
							[
								1159,
								1166
							],
							[
								1194,
								1204
							],
							[
								1210,
								1217
							],
							[
								1282,
								1289
							],
							[
								1355,
								1358
							],
							[
								1403,
								1407
							],
							[
								1426,
								1433
							],
							[
								1461,
								1471
							],
							[
								1477,
								1484
							],
							[
								1548,
								1557
							],
							[
								1583,
								1589
							],
							[
								1610,
								1614
							],
							[
								1643,
								1649
							],
							[
								1652,
								1655
							],
							[
								1678,
								1682
							],
							[
								1694,
								1704
							],
							[
								1710,
								1716
							],
							[
								1784,
								1793
							],
							[
								1819,
								1825
							],
							[
								1846,
								1850
							],
							[
								1879,
								1882
							],
							[
								1885,
								1891
							],
							[
								1914,
								1918
							],
							[
								1930,
								1940
							],
							[
								1946,
								1952
							],
							[
								2020,
								2033
							],
							[
								2061,
								2065
							],
							[
								2087,
								2091
							],
							[
								2124,
								2135
							],
							[
								2141,
								2144
							],
							[
								2172,
								2175
							],
							[
								2198,
								2202
							],
							[
								2215,
								2222
							],
							[
								2228,
								2232
							],
							[
								2333,
								2351
							],
							[
								2393,
								2403
							],
							[
								2407,
								2412
							],
							[
								2424,
								2435
							],
							[
								2439,
								2444
							],
							[
								2504,
								2508
							],
							[
								2550,
								2554
							],
							[
								2627,
								2631
							],
							[
								2637,
								2647
							],
							[
								2660,
								2670
							],
							[
								2685,
								2695
							],
							[
								2754,
								2758
							],
							[
								2786,
								2797
							],
							[
								2839,
								2850
							],
							[
								2870,
								2881
							],
							[
								2909,
								2919
							],
							[
								2964,
								2979
							],
							[
								2998,
								3002
							],
							[
								3032,
								3036
							],
							[
								3077,
								3081
							],
							[
								3087,
								3097
							],
							[
								3121,
								3125
							],
							[
								3164,
								3176
							],
							[
								3211,
								3215
							],
							[
								3245,
								3260
							],
							[
								3284,
								3299
							],
							[
								3318,
								3333
							],
							[
								3363,
								3367
							],
							[
								3397,
								3412
							],
							[
								3436,
								3451
							],
							[
								3469,
								3484
							],
							[
								3510,
								3517
							],
							[
								3532,
								3542
							],
							[
								3548,
								3563
							],
							[
								3591,
								3598
							],
							[
								3613,
								3623
							],
							[
								3629,
								3644
							],
							[
								3673,
								3680
							],
							[
								3736,
								3742
							],
							[
								3788,
								3795
							],
							[
								3800,
								3804
							],
							[
								3827,
								3830
							],
							[
								3837,
								3850
							],
							[
								3890,
								3913
							],
							[
								3938,
								3941
							],
							[
								3963,
								3967
							],
							[
								3997,
								4001
							],
							[
								4045,
								4049
							],
							[
								4096,
								4100
							],
							[
								4135,
								4139
							],
							[
								4154,
								4158
							],
							[
								4219,
								4234
							],
							[
								4346,
								4352
							],
							[
								4438,
								4444
							],
							[
								4532,
								4542
							],
							[
								4547,
								4553
							],
							[
								4593,
								4599
							],
							[
								4639,
								4643
							],
							[
								4653,
								4658
							],
							[
								4664,
								4665
							],
							[
								4759,
								4763
							],
							[
								4807,
								4826
							],
							[
								4845,
								4849
							],
							[
								4878,
								4882
							],
							[
								4906,
								4910
							],
							[
								4953,
								4963
							],
							[
								5000,
								5003
							],
							[
								5061,
								5064
							],
							[
								5077,
								5087
							],
							[
								5093,
								5096
							],
							[
								5159,
								5176
							],
							[
								5217,
								5227
							],
							[
								5231,
								5236
							],
							[
								5248,
								5259
							],
							[
								5263,
								5268
							],
							[
								5319,
								5322
							],
							[
								5359,
								5364
							],
							[
								5406,
								5411
							],
							[
								5481,
								5484
							],
							[
								5490,
								5500
							],
							[
								5513,
								5523
							],
							[
								5538,
								5548
							],
							[
								5607,
								5610
							],
							[
								5641,
								5652
							],
							[
								5694,
								5705
							],
							[
								5725,
								5736
							],
							[
								5764,
								5774
							],
							[
								5817,
								5831
							],
							[
								5849,
								5853
							],
							[
								5879,
								5882
							],
							[
								5922,
								5925
							],
							[
								5931,
								5941
							],
							[
								5964,
								5968
							],
							[
								6003,
								6021
							],
							[
								6039,
								6043
							],
							[
								6071,
								6074
							],
							[
								6097,
								6101
							],
							[
								6140,
								6166
							],
							[
								6198,
								6201
							],
							[
								6237,
								6241
							],
							[
								6281,
								6284
							],
							[
								6290,
								6300
							],
							[
								6306,
								6316
							],
							[
								6330,
								6340
							],
							[
								6370,
								6374
							],
							[
								6380,
								6391
							],
							[
								6397,
								6408
							],
							[
								6424,
								6434
							],
							[
								6491,
								6504
							],
							[
								6516,
								6520
							],
							[
								6526,
								6529
							],
							[
								6555,
								6559
							],
							[
								6571,
								6574
							],
							[
								6580,
								6584
							],
							[
								6639,
								6647
							],
							[
								6682,
								6686
							],
							[
								6692,
								6697
							],
							[
								6714,
								6719
							],
							[
								6741,
								6747
							],
							[
								6763,
								6768
							],
							[
								6790,
								6796
							],
							[
								6814,
								6819
							],
							[
								6871,
								6875
							],
							[
								6891,
								6895
							],
							[
								6910,
								6915
							],
							[
								6931,
								6937
							],
							[
								6959,
								6963
							],
							[
								6978,
								6983
							],
							[
								7011,
								7015
							],
							[
								7048,
								7054
							],
							[
								7060,
								7066
							],
							[
								7133,
								7143
							],
							[
								7156,
								7162
							],
							[
								7168,
								7172
							],
							[
								7194,
								7198
							],
							[
								7224,
								7228
							],
							[
								7284,
								7288
							],
							[
								7333,
								7337
							],
							[
								7349,
								7353
							],
							[
								7359,
								7365
							],
							[
								7418,
								7425
							],
							[
								7496,
								7503
							],
							[
								7506,
								7515
							],
							[
								7524,
								7530
							],
							[
								7563,
								7576
							],
							[
								7598,
								7604
							],
							[
								7611,
								7618
							],
							[
								7621,
								7630
							],
							[
								7680,
								7692
							],
							[
								7716,
								7720
							],
							[
								7735,
								7738
							],
							[
								7767,
								7770
							],
							[
								7775,
								7780
							],
							[
								7798,
								7801
							],
							[
								7830,
								7833
							],
							[
								7838,
								7857
							],
							[
								7861,
								7866
							],
							[
								7885,
								7888
							],
							[
								7926,
								7930
							],
							[
								7970,
								7980
							],
							[
								8046,
								8050
							],
							[
								8107,
								8110
							],
							[
								8156,
								8176
							],
							[
								8208,
								8212
							],
							[
								8218,
								8221
							],
							[
								8231,
								8251
							],
							[
								8264,
								8270
							],
							[
								8276,
								8279
							],
							[
								8315,
								8319
							],
							[
								8323,
								8327
							],
							[
								8367,
								8371
							],
							[
								8449,
								8457
							],
							[
								8524,
								8534
							],
							[
								8555,
								8565
							],
							[
								8587,
								8611
							],
							[
								8615,
								8619
							],
							[
								8625,
								8629
							],
							[
								8667,
								8691
							],
							[
								8703,
								8727
							],
							[
								8731,
								8735
							],
							[
								8759,
								8779
							],
							[
								8811,
								8837
							],
							[
								8862,
								8869
							],
							[
								8896,
								8900
							],
							[
								8944,
								8954
							],
							[
								8959,
								8965
							],
							[
								8992,
								9002
							],
							[
								9007,
								9013
							],
							[
								9053,
								9063
							],
							[
								9084,
								9094
							],
							[
								9122,
								9136
							],
							[
								9191,
								9195
							],
							[
								9221,
								9225
							],
							[
								9255,
								9259
							],
							[
								9293,
								9303
							],
							[
								9321,
								9325
							],
							[
								9335,
								9342
							],
							[
								9437,
								9445
							],
							[
								9595,
								9597
							],
							[
								9601,
								9625
							],
							[
								9629,
								9632
							],
							[
								9636,
								9640
							],
							[
								9660,
								9662
							],
							[
								9668,
								9672
							],
							[
								9725,
								9727
							],
							[
								9798,
								9800
							],
							[
								9900,
								9920
							],
							[
								9950,
								9976
							],
							[
								10019,
								10026
							],
							[
								10047,
								10051
							],
							[
								10072,
								10075
							],
							[
								10105,
								10119
							],
							[
								10139,
								10149
							],
							[
								10177,
								10187
							],
							[
								10192,
								10206
							],
							[
								10231,
								10241
							],
							[
								10246,
								10260
							],
							[
								10295,
								10297
							],
							[
								10337,
								10347
							],
							[
								10375,
								10385
							],
							[
								10390,
								10400
							],
							[
								10434,
								10444
							],
							[
								10474,
								10484
							],
							[
								10512,
								10522
							],
							[
								10527,
								10537
							],
							[
								10571,
								10581
							],
							[
								10639,
								10641
							],
							[
								10764,
								10771
							],
							[
								10839,
								10847
							],
							[
								10900,
								10907
							],
							[
								10919,
								10926
							],
							[
								10931,
								10938
							]
						],
						"symlist":
						[
							"ABBREVIATE",
							"MAX",
							"STR",
							"MAX",
							"STR",
							"MAX",
							"STR",
							"STR",
							"MAX",
							"OUTPUT_VAR",
							"STR",
							"DUMP",
							"ARGN",
							"SEPARATOR",
							"SEPARATOR",
							"SEPARATOR",
							"VAR",
							"VAR",
							"VAR",
							"A",
							"SEPARATOR",
							"A",
							"VAR",
							"A",
							"ARGN",
							"CANONICALIZE",
							"STR",
							"TMP_STR",
							"TMP_STR",
							"OUTPUT_VAR",
							"TMP_STR",
							"BASENAME",
							"STR",
							"ARGN",
							"TMP_STR",
							"OUTPUT_VAR",
							"TMP_STR",
							"DIRNAME",
							"STR",
							"ARGN",
							"TMP_STR",
							"OUTPUT_VAR",
							"TMP_STR",
							"ADDPREFIX",
							"OUTPUT",
							"ARGN",
							"PREFIX",
							"ARG",
							"ARGN",
							"OUTPUT_VAR",
							"OUTPUT",
							"ADDSUFFIX",
							"OUTPUT",
							"ARGN",
							"ARG",
							"SUFFIX",
							"ARGN",
							"OUTPUT_VAR",
							"OUTPUT",
							"RELATIVE_PATH",
							"LIST",
							"ARGN",
							"RELATIVE_TO",
							"ARG",
							"ARG",
							"ARGN",
							"OUT_VAR",
							"LIST",
							"CHECK_FUNCTION_DEF",
							"RESULT_VAR",
							"ARGV1",
							"PREPROC_DEF",
							"ARGV2",
							"FUNC",
							"FUNC",
							"FUNC",
							"RESULT_VAR",
							"RESULT_VAR",
							"RESULT_VAR",
							"FUNC",
							"PREPROC_DEF",
							"PREPROC_DEF",
							"PREPROC_DEF",
							"RESULT_VAR",
							"CHECK_FUNCTIONS",
							"ARGN",
							"FUNC",
							"FUNC",
							"RESULT_VAR",
							"ARGN",
							"RESULT_VALUE",
							"ARGN",
							"POSITIVE_REPORT",
							"POSITIVE_REPORT",
							"POSITIVE_REPORT",
							"ARGN",
							"NEGATIVE_REPORT",
							"NEGATIVE_REPORT",
							"NEGATIVE_REPORT",
							"VARNAME",
							"OUTPUT_VAR",
							"POSITIVE_REPORT",
							"VARNAME",
							"OUTPUT_VAR",
							"NEGATIVE_REPORT",
							"VARNAME",
							"REPORT",
							"VARNAME",
							"ARGN",
							"MSG",
							"REPORT_RESULT",
							"CHECK_LIBRARY_FUNCTIONS",
							"LIB",
							"ARGN",
							"FUNC",
							"FUNC",
							"FUNC",
							"FUNC",
							"FUNC",
							"QUICKJS_LIBRARY",
							"RESULT",
							"RESULT",
							"RESULT_VAR",
							"RESULT",
							"RESULT",
							"FUNC",
							"LNAME",
							"R",
							"ARGN",
							"CHECK_FUNCTIONS_DEF",
							"ARGN",
							"FUNC",
							"ARGN",
							"CLEAN_NAME",
							"STR",
							"STR",
							"OUTPUT_VAR",
							"STR",
							"CHECK_INCLUDE_DEF",
							"RESULT_VAR",
							"ARGV1",
							"PREPROC_DEF",
							"ARGV2",
							"INC",
							"INC_D",
							"INC_D",
							"INC",
							"RESULT_VAR",
							"RESULT_VAR",
							"RESULT_VAR",
							"INC",
							"PREPROC_DEF",
							"PREPROC_DEF",
							"PREPROC_DEF",
							"RESULT_VAR",
							"CHECK_INCLUDES",
							"ARGN",
							"INC",
							"INC",
							"RESULT_VAR",
							"ARGN",
							"CHECK_INCLUDES_DEF",
							"ARGN",
							"INC",
							"ARGN",
							"CHECK_FUNCTION_AND_INCLUDE",
							"INC",
							"FUNC",
							"INC",
							"INC_RESULT",
							"INC_RESULT",
							"INC_RESULT",
							"FUNC",
							"FUNC_RESULT",
							"FUNC_RESULT",
							"INC_RESULT",
							"APPEND_PARENT",
							"LIST",
							"VAR",
							"ARGN",
							"VAR",
							"LIST",
							"CONTAINS",
							"LIST",
							"VALUE",
							"INDEX",
							"RESULT",
							"INDEX",
							"RESULT",
							"INDEX",
							"LIST",
							"ITEM",
							"VALUE",
							"RESULT",
							"ITEM",
							"VALUE",
							"LIST",
							"OUTPUT",
							"RESULT",
							"ADD_UNIQUE",
							"RESULT",
							"LIST",
							"ARGN",
							"ITEM",
							"ITEM",
							"ARGN",
							"LIST",
							"RESULT",
							"SYMLINK",
							"DESTDIR",
							"LINK_NAME",
							"TARGET",
							"CMAKE_COMMAND",
							"TARGET",
							"DESTDIR",
							"LINK_NAME",
							"RPATH_APPEND",
							"ARGN",
							"VAR",
							"VAR",
							"VALUE",
							"VAR",
							"VAR",
							"CMAKE_INSTALL_RPATH",
							"VALUE",
							"VAR",
							"ARGN",
							"CHECK_FLAG",
							"FLAG",
							"TMP",
							"CMAKE_REQUIRED_QUIET",
							"FLAG",
							"VAR",
							"CMAKE_REQUIRED_QUIET",
							"RESULT",
							"VAR",
							"FLAG",
							"ARGN",
							"FLAG",
							"TRY_CODE",
							"RESULT_VAR",
							"OUTPUT_VAR",
							"CMAKE_CURRENT_BINARY_DIR",
							"FILE",
							"CODE",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"FILE",
							"CMAKE_REQUIRED_FLAGS",
							"CMAKE_REQUIRED_DEFINITIONS",
							"LDFLAGS",
							"LIBS",
							"RESULT_VAR",
							"RESULT",
							"OUTPUT_VAR",
							"OUTPUT",
							"RESULT_VAR",
							"OUTPUT_VAR",
							"CHECK_EXTERNAL",
							"NAME",
							"NAME",
							"NAME",
							"OUTPUT_VAR",
							"LIBS",
							"LDFLAGS",
							"RUN_CODE",
							"FN",
							"CMAKE_CURRENT_BINARY_DIR",
							"RND",
							"FILE",
							"FN",
							"CODE",
							"FN",
							"FN",
							"CMAKE_REQUIRED_FLAGS",
							"CMAKE_REQUIRED_DEFINITIONS",
							"LDFLAGS",
							"LIBS",
							"LOG",
							"COMPILE_OUTPUT",
							"RUN_OUTPUT",
							"RESULT_VAR",
							"COMPILE_RESULT",
							"OUTPUT_VAR",
							"COMPILE_OUTPUT",
							"FN",
							"RUN_RESULT",
							"RESULT_VAR",
							"RUN_RESULT",
							"RUN_RESULT",
							"RUN_OUTPUT",
							"OUTPUT_VAR",
							"RUN_OUTPUT",
							"RUN_OUTPUT",
							"FN",
							"LIBNAME",
							"FILENAME",
							"LIBNAME",
							"OUT_VAR",
							"LIBNAME"
						]
					},
					"AQAAAAAAAAAAAAAAyQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					123,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/compileCommand.js",
						"symkeys":
						[
							[
								219,
								226
							],
							[
								231,
								260
							],
							[
								570,
								583
							],
							[
								633,
								649
							],
							[
								677,
								695
							],
							[
								792,
								813
							],
							[
								879,
								890
							],
							[
								944,
								959
							],
							[
								1028,
								1044
							],
							[
								1111,
								1125
							],
							[
								1191,
								1205
							],
							[
								1271,
								1285
							],
							[
								1358,
								1369
							],
							[
								1428,
								1442
							],
							[
								1501,
								1513
							],
							[
								1572,
								1580
							],
							[
								1611,
								1626
							],
							[
								1684,
								1693
							],
							[
								1737,
								1752
							],
							[
								1956,
								1974
							],
							[
								2233,
								2249
							],
							[
								2302,
								2312
							],
							[
								2432,
								2443
							],
							[
								2745,
								2757
							],
							[
								2902,
								2913
							],
							[
								3443,
								3455
							],
							[
								3623,
								3630
							],
							[
								3712,
								3720
							],
							[
								4026,
								4056
							],
							[
								4140,
								4148
							],
							[
								4301,
								4315
							],
							[
								4336,
								4365
							],
							[
								4459,
								4477
							],
							[
								4540,
								4553
							],
							[
								4614,
								4626
							],
							[
								4710,
								4716
							],
							[
								4757,
								4763
							],
							[
								4819,
								4830
							],
							[
								4888,
								4898
							],
							[
								4956,
								4969
							],
							[
								5015,
								5021
							],
							[
								5048,
								5064
							],
							[
								5262,
								5274
							],
							[
								5431,
								5446
							],
							[
								5482,
								5492
							],
							[
								6570,
								6584
							],
							[
								6721,
								6733
							],
							[
								6770,
								6774
							],
							[
								6882,
								6897
							],
							[
								6934,
								6938
							],
							[
								7148,
								7159
							],
							[
								7180,
								7209
							],
							[
								7264,
								7279
							],
							[
								7349,
								7363
							],
							[
								7433,
								7448
							],
							[
								7518,
								7528
							],
							[
								7586,
								7596
							],
							[
								7624,
								7637
							],
							[
								7672,
								7683
							],
							[
								7827,
								7833
							],
							[
								7862,
								7873
							],
							[
								7915,
								7919
							],
							[
								8049,
								8060
							],
							[
								8146,
								8153
							],
							[
								8234,
								8290
							],
							[
								9592,
								9618
							],
							[
								9654,
								9661
							],
							[
								9730,
								9737
							],
							[
								9771,
								9778
							],
							[
								9815,
								9845
							],
							[
								10351,
								10394
							],
							[
								10490,
								10497
							],
							[
								10536,
								10587
							],
							[
								10717,
								10725
							],
							[
								10897,
								10908
							],
							[
								10942,
								10954
							],
							[
								10991,
								10995
							],
							[
								11124,
								11133
							],
							[
								11213,
								11228
							],
							[
								11265,
								11269
							],
							[
								11404,
								11432
							]
						],
						"symlist":
						[
							"Command",
							"constructor(a, workDir = '.')",
							"get program()",
							"set program(arg)",
							"absolutePath(path)",
							"argumentsOfType(type)",
							"(arg, i) =>",
							"get warnFlags()",
							"get debugFlags()",
							"get optFlags()",
							"get depFlags()",
							"get modeFlag()",
							"isCompile()",
							"isPreprocess()",
							"isAssemble()",
							"isLink()",
							"toString(delim)",
							"toArray()",
							"remove(...args)",
							"get dependencies()",
							"get outputFile()",
							"absolute()",
							"(arg, i) =>",
							"relative(to)",
							"(arg, i) =>",
							"run(opts={})",
							"Command",
							"toJSON()",
							"fromString(str, workDir = '.')",
							"([m]) =>",
							"CompileCommand",
							"constructor(a, workDir = '.')",
							"get includePaths()",
							"get defines()",
							"get cflags()",
							"inc =>",
							"def =>",
							"get flags()",
							"get args()",
							"get sources()",
							"arg =>",
							"set sources(arg)",
							"get source()",
							"set source(arg)",
							"toObject()",
							"CompileCommand",
							"get output()",
							"a =>",
							"set output(arg)",
							"a =>",
							"LinkCommand",
							"constructor(a, workDir = '.')",
							"get libraries()",
							"get libpaths()",
							"get linkflags()",
							"get args()",
							"(arg,i) =>",
							"get objects()",
							"(arg, i) =>",
							"arg =>",
							"get flags()",
							"t =>",
							"LinkCommand",
							"Command",
							" function ArgumentType(arg, i = Number.MAX_SAFE_INTEGER)",
							" function ArgumentIs(pred)",
							" arg =>",
							" arg =>",
							" arg =>",
							" function CommandType(command)",
							" function MakeCommands(text, workDir = '.')",
							"line =>",
							" function MakeCommand(arrayOrString, workDir = '.')",
							"([m]) =>",
							"LinkCommand",
							"get output()",
							"a =>",
							"(a, i) =>",
							"set output(arg)",
							"a =>",
							" function NinjaRule(command)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADJCQAAQUJCUkVWSUFURQpNQVgKU1RSCk1BWApTVFIKTUFYClNUUgpTVFIKTUFYCk9VVFBVVF9WQVIKU1RSCkRVTVAKQVJHTgpTRVBBUkFUT1IKU0VQQVJBVE9SClNFUEFSQVRPUgpWQVIKVkFSClZBUgpBClNFUEFSQVRPUgpBClZBUgpBCkFSR04KQ0FOT05JQ0FMSVpFClNUUgpUTVBfU1RSClRNUF9TVFIKT1VUUFVUX1ZBUgpUTVBfU1RSCkJBU0VOQU1FClNUUgpBUkdOClRNUF9TVFIKT1VUUFVUX1ZBUgpUTVBfU1RSCkRJUk5BTUUKU1RSCkFSR04KVE1QX1NUUgpPVVRQVVRfVkFSClRNUF9TVFIKQUREUFJFRklYCk9VVFBVVApBUkdOClBSRUZJWApBUkcKQVJHTgpPVVRQVVRfVkFSCk9VVFBVVApBRERTVUZGSVgKT1VUUFVUCkFSR04KQVJHClNVRkZJWApBUkdOCk9VVFBVVF9WQVIKT1VUUFVUClJFTEFUSVZFX1BBVEgKTElTVApBUkdOClJFTEFUSVZFX1RPCkFSRwpBUkcKQVJHTgpPVVRfVkFSCkxJU1QKQ0hFQ0tfRlVOQ1RJT05fREVGClJFU1VMVF9WQVIKQVJHVjEKUFJFUFJPQ19ERUYKQVJHVjIKRlVOQwpGVU5DCkZVTkMKUkVTVUxUX1ZBUgpSRVNVTFRfVkFSClJFU1VMVF9WQVIKRlVOQwpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpSRVNVTFRfVkFSCkNIRUNLX0ZVTkNUSU9OUwpBUkdOCkZVTkMKRlVOQwpSRVNVTFRfVkFSCkFSR04KUkVTVUxUX1ZBTFVFCkFSR04KUE9TSVRJVkVfUkVQT1JUClBPU0lUSVZFX1JFUE9SVApQT1NJVElWRV9SRVBPUlQKQVJHTgpORUdBVElWRV9SRVBPUlQKTkVHQVRJVkVfUkVQT1JUCk5FR0FUSVZFX1JFUE9SVApWQVJOQU1FCk9VVFBVVF9WQVIKUE9TSVRJVkVfUkVQT1JUClZBUk5BTUUKT1VUUFVUX1ZBUgpORUdBVElWRV9SRVBPUlQKVkFSTkFNRQpSRVBPUlQKVkFSTkFNRQpBUkdOCk1TRwpSRVBPUlRfUkVTVUxUCkNIRUNLX0xJQlJBUllfRlVOQ1RJT05TCkxJQgpBUkdOCkZVTkMKRlVOQwpGVU5DCkZVTkMKRlVOQwpRVUlDS0pTX0xJQlJBUlkKUkVTVUxUClJFU1VMVApSRVNVTFRfVkFSClJFU1VMVApSRVNVTFQKRlVOQwpMTkFNRQpSCkFSR04KQ0hFQ0tfRlVOQ1RJT05TX0RFRgpBUkdOCkZVTkMKQVJHTgpDTEVBTl9OQU1FClNUUgpTVFIKT1VUUFVUX1ZBUgpTVFIKQ0hFQ0tfSU5DTFVERV9ERUYKUkVTVUxUX1ZBUgpBUkdWMQpQUkVQUk9DX0RFRgpBUkdWMgpJTkMKSU5DX0QKSU5DX0QKSU5DClJFU1VMVF9WQVIKUkVTVUxUX1ZBUgpSRVNVTFRfVkFSCklOQwpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpSRVNVTFRfVkFSCkNIRUNLX0lOQ0xVREVTCkFSR04KSU5DCklOQwpSRVNVTFRfVkFSCkFSR04KQ0hFQ0tfSU5DTFVERVNfREVGCkFSR04KSU5DCkFSR04KQ0hFQ0tfRlVOQ1RJT05fQU5EX0lOQ0xVREUKSU5DCkZVTkMKSU5DCklOQ19SRVNVTFQKSU5DX1JFU1VMVApJTkNfUkVTVUxUCkZVTkMKRlVOQ19SRVNVTFQKRlVOQ19SRVNVTFQKSU5DX1JFU1VMVApBUFBFTkRfUEFSRU5UCkxJU1QKVkFSCkFSR04KVkFSCkxJU1QKQ09OVEFJTlMKTElTVApWQUxVRQpJTkRFWApSRVNVTFQKSU5ERVgKUkVTVUxUCklOREVYCkxJU1QKSVRFTQpWQUxVRQpSRVNVTFQKSVRFTQpWQUxVRQpMSVNUCk9VVFBVVApSRVNVTFQKQUREX1VOSVFVRQpSRVNVTFQKTElTVApBUkdOCklURU0KSVRFTQpBUkdOCkxJU1QKUkVTVUxUClNZTUxJTksKREVTVERJUgpMSU5LX05BTUUKVEFSR0VUCkNNQUtFX0NPTU1BTkQKVEFSR0VUCkRFU1RESVIKTElOS19OQU1FClJQQVRIX0FQUEVORApBUkdOClZBUgpWQVIKVkFMVUUKVkFSClZBUgpDTUFLRV9JTlNUQUxMX1JQQVRIClZBTFVFClZBUgpBUkdOCkNIRUNLX0ZMQUcKRkxBRwpUTVAKQ01BS0VfUkVRVUlSRURfUVVJRVQKRkxBRwpWQVIKQ01BS0VfUkVRVUlSRURfUVVJRVQKUkVTVUxUClZBUgpGTEFHCkFSR04KRkxBRwpUUllfQ09ERQpSRVNVTFRfVkFSCk9VVFBVVF9WQVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkZJTEUKQ09ERQpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkZJTEUKQ01BS0VfUkVRVUlSRURfRkxBR1MKQ01BS0VfUkVRVUlSRURfREVGSU5JVElPTlMKTERGTEFHUwpMSUJTClJFU1VMVF9WQVIKUkVTVUxUCk9VVFBVVF9WQVIKT1VUUFVUClJFU1VMVF9WQVIKT1VUUFVUX1ZBUgpDSEVDS19FWFRFUk5BTApOQU1FCk5BTUUKTkFNRQpPVVRQVVRfVkFSCkxJQlMKTERGTEFHUwpSVU5fQ09ERQpGTgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKUk5ECkZJTEUKRk4KQ09ERQpGTgpGTgpDTUFLRV9SRVFVSVJFRF9GTEFHUwpDTUFLRV9SRVFVSVJFRF9ERUZJTklUSU9OUwpMREZMQUdTCkxJQlMKTE9HCkNPTVBJTEVfT1VUUFVUClJVTl9PVVRQVVQKUkVTVUxUX1ZBUgpDT01QSUxFX1JFU1VMVApPVVRQVVRfVkFSCkNPTVBJTEVfT1VUUFVUCkZOClJVTl9SRVNVTFQKUkVTVUxUX1ZBUgpSVU5fUkVTVUxUClJVTl9SRVNVTFQKUlVOX09VVFBVVApPVVRQVVRfVkFSClJVTl9PVVRQVVQKUlVOX09VVFBVVApGTgpMSUJOQU1FCkZJTEVOQU1FCkxJQk5BTUUKT1VUX1ZBUgpMSUJOQU1FAAAAAAAAAAD8BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					124,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs2/cmake/functions.cmake",
						"symkeys":
						[
							[
								9,
								19
							],
							[
								62,
								65
							],
							[
								106,
								109
							],
							[
								137,
								140
							],
							[
								168,
								171
							],
							[
								179,
								182
							],
							[
								198,
								201
							],
							[
								205,
								208
							],
							[
								238,
								241
							],
							[
								254,
								264
							],
							[
								270,
								273
							],
							[
								343,
								347
							],
							[
								365,
								369
							],
							[
								382,
								391
							],
							[
								417,
								426
							],
							[
								450,
								459
							],
							[
								486,
								489
							],
							[
								496,
								499
							],
							[
								551,
								554
							],
							[
								598,
								599
							],
							[
								635,
								644
							],
							[
								652,
								653
							],
							[
								674,
								677
							],
							[
								683,
								684
							],
							[
								707,
								711
							],
							[
								742,
								754
							],
							[
								819,
								822
							],
							[
								869,
								876
							],
							[
								900,
								907
							],
							[
								929,
								939
							],
							[
								945,
								952
							],
							[
								1020,
								1028
							],
							[
								1088,
								1091
							],
							[
								1136,
								1140
							],
							[
								1159,
								1166
							],
							[
								1194,
								1204
							],
							[
								1210,
								1217
							],
							[
								1282,
								1289
							],
							[
								1355,
								1358
							],
							[
								1403,
								1407
							],
							[
								1426,
								1433
							],
							[
								1461,
								1471
							],
							[
								1477,
								1484
							],
							[
								1548,
								1557
							],
							[
								1583,
								1589
							],
							[
								1610,
								1614
							],
							[
								1643,
								1649
							],
							[
								1652,
								1655
							],
							[
								1678,
								1682
							],
							[
								1694,
								1704
							],
							[
								1710,
								1716
							],
							[
								1784,
								1793
							],
							[
								1819,
								1825
							],
							[
								1846,
								1850
							],
							[
								1879,
								1882
							],
							[
								1885,
								1891
							],
							[
								1914,
								1918
							],
							[
								1930,
								1940
							],
							[
								1946,
								1952
							],
							[
								2020,
								2033
							],
							[
								2061,
								2065
							],
							[
								2087,
								2091
							],
							[
								2124,
								2135
							],
							[
								2141,
								2144
							],
							[
								2172,
								2175
							],
							[
								2198,
								2202
							],
							[
								2215,
								2222
							],
							[
								2228,
								2232
							],
							[
								2333,
								2351
							],
							[
								2393,
								2403
							],
							[
								2407,
								2412
							],
							[
								2424,
								2435
							],
							[
								2439,
								2444
							],
							[
								2504,
								2508
							],
							[
								2550,
								2554
							],
							[
								2627,
								2631
							],
							[
								2637,
								2647
							],
							[
								2660,
								2670
							],
							[
								2685,
								2695
							],
							[
								2754,
								2758
							],
							[
								2786,
								2797
							],
							[
								2839,
								2850
							],
							[
								2870,
								2881
							],
							[
								2909,
								2919
							],
							[
								2964,
								2979
							],
							[
								2998,
								3002
							],
							[
								3032,
								3036
							],
							[
								3077,
								3081
							],
							[
								3087,
								3097
							],
							[
								3121,
								3125
							],
							[
								3164,
								3176
							],
							[
								3211,
								3215
							],
							[
								3245,
								3260
							],
							[
								3284,
								3299
							],
							[
								3318,
								3333
							],
							[
								3363,
								3367
							],
							[
								3397,
								3412
							],
							[
								3436,
								3451
							],
							[
								3469,
								3484
							],
							[
								3510,
								3517
							],
							[
								3532,
								3542
							],
							[
								3548,
								3563
							],
							[
								3591,
								3598
							],
							[
								3613,
								3623
							],
							[
								3629,
								3644
							],
							[
								3673,
								3680
							],
							[
								3736,
								3742
							],
							[
								3788,
								3795
							],
							[
								3800,
								3804
							],
							[
								3827,
								3830
							],
							[
								3837,
								3850
							],
							[
								3890,
								3913
							],
							[
								3938,
								3941
							],
							[
								3963,
								3967
							],
							[
								3997,
								4001
							],
							[
								4045,
								4049
							],
							[
								4096,
								4100
							],
							[
								4135,
								4139
							],
							[
								4154,
								4158
							],
							[
								4219,
								4234
							],
							[
								4346,
								4352
							],
							[
								4438,
								4444
							],
							[
								4532,
								4542
							],
							[
								4547,
								4553
							],
							[
								4593,
								4599
							],
							[
								4639,
								4643
							],
							[
								4653,
								4658
							],
							[
								4664,
								4665
							],
							[
								4759,
								4763
							],
							[
								4807,
								4826
							],
							[
								4845,
								4849
							],
							[
								4878,
								4882
							],
							[
								4906,
								4910
							],
							[
								4953,
								4963
							],
							[
								5000,
								5003
							],
							[
								5061,
								5064
							],
							[
								5077,
								5087
							],
							[
								5093,
								5096
							],
							[
								5159,
								5176
							],
							[
								5217,
								5227
							],
							[
								5231,
								5236
							],
							[
								5248,
								5259
							],
							[
								5263,
								5268
							],
							[
								5319,
								5322
							],
							[
								5359,
								5364
							],
							[
								5406,
								5411
							],
							[
								5481,
								5484
							],
							[
								5490,
								5500
							],
							[
								5513,
								5523
							],
							[
								5538,
								5548
							],
							[
								5607,
								5610
							],
							[
								5641,
								5652
							],
							[
								5694,
								5705
							],
							[
								5725,
								5736
							],
							[
								5764,
								5774
							],
							[
								5817,
								5831
							],
							[
								5849,
								5853
							],
							[
								5879,
								5882
							],
							[
								5922,
								5925
							],
							[
								5931,
								5941
							],
							[
								5964,
								5968
							],
							[
								6003,
								6021
							],
							[
								6039,
								6043
							],
							[
								6071,
								6074
							],
							[
								6097,
								6101
							],
							[
								6140,
								6166
							],
							[
								6198,
								6201
							],
							[
								6237,
								6241
							],
							[
								6281,
								6284
							],
							[
								6290,
								6300
							],
							[
								6306,
								6316
							],
							[
								6330,
								6340
							],
							[
								6370,
								6374
							],
							[
								6380,
								6391
							],
							[
								6397,
								6408
							],
							[
								6424,
								6434
							],
							[
								6491,
								6504
							],
							[
								6516,
								6520
							],
							[
								6526,
								6529
							],
							[
								6555,
								6559
							],
							[
								6571,
								6574
							],
							[
								6580,
								6584
							],
							[
								6639,
								6647
							],
							[
								6682,
								6686
							],
							[
								6692,
								6697
							],
							[
								6714,
								6719
							],
							[
								6741,
								6747
							],
							[
								6763,
								6768
							],
							[
								6790,
								6796
							],
							[
								6814,
								6819
							],
							[
								6871,
								6875
							],
							[
								6891,
								6895
							],
							[
								6910,
								6915
							],
							[
								6931,
								6937
							],
							[
								6959,
								6963
							],
							[
								6978,
								6983
							],
							[
								7011,
								7015
							],
							[
								7048,
								7054
							],
							[
								7060,
								7066
							],
							[
								7133,
								7143
							],
							[
								7156,
								7162
							],
							[
								7168,
								7172
							],
							[
								7194,
								7198
							],
							[
								7224,
								7228
							],
							[
								7284,
								7288
							],
							[
								7333,
								7337
							],
							[
								7349,
								7353
							],
							[
								7359,
								7365
							],
							[
								7418,
								7425
							],
							[
								7496,
								7503
							],
							[
								7506,
								7515
							],
							[
								7524,
								7530
							],
							[
								7563,
								7576
							],
							[
								7598,
								7604
							],
							[
								7611,
								7618
							],
							[
								7621,
								7630
							],
							[
								7680,
								7692
							],
							[
								7716,
								7720
							],
							[
								7735,
								7738
							],
							[
								7767,
								7770
							],
							[
								7775,
								7780
							],
							[
								7798,
								7801
							],
							[
								7830,
								7833
							],
							[
								7838,
								7857
							],
							[
								7861,
								7866
							],
							[
								7885,
								7888
							],
							[
								7926,
								7930
							],
							[
								7970,
								7980
							],
							[
								8046,
								8050
							],
							[
								8107,
								8110
							],
							[
								8156,
								8176
							],
							[
								8208,
								8212
							],
							[
								8218,
								8221
							],
							[
								8231,
								8251
							],
							[
								8264,
								8270
							],
							[
								8276,
								8279
							],
							[
								8315,
								8319
							],
							[
								8323,
								8327
							],
							[
								8367,
								8371
							],
							[
								8449,
								8457
							],
							[
								8524,
								8534
							],
							[
								8555,
								8565
							],
							[
								8587,
								8611
							],
							[
								8615,
								8619
							],
							[
								8625,
								8629
							],
							[
								8667,
								8691
							],
							[
								8703,
								8727
							],
							[
								8731,
								8735
							],
							[
								8759,
								8779
							],
							[
								8811,
								8837
							],
							[
								8862,
								8869
							],
							[
								8896,
								8900
							],
							[
								8944,
								8954
							],
							[
								8959,
								8965
							],
							[
								8992,
								9002
							],
							[
								9007,
								9013
							],
							[
								9053,
								9063
							],
							[
								9084,
								9094
							],
							[
								9122,
								9136
							],
							[
								9191,
								9195
							],
							[
								9221,
								9225
							],
							[
								9255,
								9259
							],
							[
								9293,
								9303
							],
							[
								9321,
								9325
							],
							[
								9335,
								9342
							],
							[
								9437,
								9445
							],
							[
								9595,
								9597
							],
							[
								9601,
								9625
							],
							[
								9629,
								9632
							],
							[
								9636,
								9640
							],
							[
								9660,
								9662
							],
							[
								9668,
								9672
							],
							[
								9725,
								9727
							],
							[
								9798,
								9800
							],
							[
								9900,
								9920
							],
							[
								9950,
								9976
							],
							[
								10019,
								10026
							],
							[
								10047,
								10051
							],
							[
								10072,
								10075
							],
							[
								10105,
								10119
							],
							[
								10139,
								10149
							],
							[
								10177,
								10187
							],
							[
								10192,
								10206
							],
							[
								10231,
								10241
							],
							[
								10246,
								10260
							],
							[
								10295,
								10297
							],
							[
								10337,
								10347
							],
							[
								10375,
								10385
							],
							[
								10390,
								10400
							],
							[
								10434,
								10444
							],
							[
								10474,
								10484
							],
							[
								10512,
								10522
							],
							[
								10527,
								10537
							],
							[
								10571,
								10581
							],
							[
								10639,
								10641
							],
							[
								10764,
								10771
							],
							[
								10839,
								10847
							],
							[
								10900,
								10907
							],
							[
								10919,
								10926
							],
							[
								10931,
								10938
							]
						],
						"symlist":
						[
							"ABBREVIATE",
							"MAX",
							"STR",
							"MAX",
							"STR",
							"MAX",
							"STR",
							"STR",
							"MAX",
							"OUTPUT_VAR",
							"STR",
							"DUMP",
							"ARGN",
							"SEPARATOR",
							"SEPARATOR",
							"SEPARATOR",
							"VAR",
							"VAR",
							"VAR",
							"A",
							"SEPARATOR",
							"A",
							"VAR",
							"A",
							"ARGN",
							"CANONICALIZE",
							"STR",
							"TMP_STR",
							"TMP_STR",
							"OUTPUT_VAR",
							"TMP_STR",
							"BASENAME",
							"STR",
							"ARGN",
							"TMP_STR",
							"OUTPUT_VAR",
							"TMP_STR",
							"DIRNAME",
							"STR",
							"ARGN",
							"TMP_STR",
							"OUTPUT_VAR",
							"TMP_STR",
							"ADDPREFIX",
							"OUTPUT",
							"ARGN",
							"PREFIX",
							"ARG",
							"ARGN",
							"OUTPUT_VAR",
							"OUTPUT",
							"ADDSUFFIX",
							"OUTPUT",
							"ARGN",
							"ARG",
							"SUFFIX",
							"ARGN",
							"OUTPUT_VAR",
							"OUTPUT",
							"RELATIVE_PATH",
							"LIST",
							"ARGN",
							"RELATIVE_TO",
							"ARG",
							"ARG",
							"ARGN",
							"OUT_VAR",
							"LIST",
							"CHECK_FUNCTION_DEF",
							"RESULT_VAR",
							"ARGV1",
							"PREPROC_DEF",
							"ARGV2",
							"FUNC",
							"FUNC",
							"FUNC",
							"RESULT_VAR",
							"RESULT_VAR",
							"RESULT_VAR",
							"FUNC",
							"PREPROC_DEF",
							"PREPROC_DEF",
							"PREPROC_DEF",
							"RESULT_VAR",
							"CHECK_FUNCTIONS",
							"ARGN",
							"FUNC",
							"FUNC",
							"RESULT_VAR",
							"ARGN",
							"RESULT_VALUE",
							"ARGN",
							"POSITIVE_REPORT",
							"POSITIVE_REPORT",
							"POSITIVE_REPORT",
							"ARGN",
							"NEGATIVE_REPORT",
							"NEGATIVE_REPORT",
							"NEGATIVE_REPORT",
							"VARNAME",
							"OUTPUT_VAR",
							"POSITIVE_REPORT",
							"VARNAME",
							"OUTPUT_VAR",
							"NEGATIVE_REPORT",
							"VARNAME",
							"REPORT",
							"VARNAME",
							"ARGN",
							"MSG",
							"REPORT_RESULT",
							"CHECK_LIBRARY_FUNCTIONS",
							"LIB",
							"ARGN",
							"FUNC",
							"FUNC",
							"FUNC",
							"FUNC",
							"FUNC",
							"QUICKJS_LIBRARY",
							"RESULT",
							"RESULT",
							"RESULT_VAR",
							"RESULT",
							"RESULT",
							"FUNC",
							"LNAME",
							"R",
							"ARGN",
							"CHECK_FUNCTIONS_DEF",
							"ARGN",
							"FUNC",
							"ARGN",
							"CLEAN_NAME",
							"STR",
							"STR",
							"OUTPUT_VAR",
							"STR",
							"CHECK_INCLUDE_DEF",
							"RESULT_VAR",
							"ARGV1",
							"PREPROC_DEF",
							"ARGV2",
							"INC",
							"INC_D",
							"INC_D",
							"INC",
							"RESULT_VAR",
							"RESULT_VAR",
							"RESULT_VAR",
							"INC",
							"PREPROC_DEF",
							"PREPROC_DEF",
							"PREPROC_DEF",
							"RESULT_VAR",
							"CHECK_INCLUDES",
							"ARGN",
							"INC",
							"INC",
							"RESULT_VAR",
							"ARGN",
							"CHECK_INCLUDES_DEF",
							"ARGN",
							"INC",
							"ARGN",
							"CHECK_FUNCTION_AND_INCLUDE",
							"INC",
							"FUNC",
							"INC",
							"INC_RESULT",
							"INC_RESULT",
							"INC_RESULT",
							"FUNC",
							"FUNC_RESULT",
							"FUNC_RESULT",
							"INC_RESULT",
							"APPEND_PARENT",
							"LIST",
							"VAR",
							"ARGN",
							"VAR",
							"LIST",
							"CONTAINS",
							"LIST",
							"VALUE",
							"INDEX",
							"RESULT",
							"INDEX",
							"RESULT",
							"INDEX",
							"LIST",
							"ITEM",
							"VALUE",
							"RESULT",
							"ITEM",
							"VALUE",
							"LIST",
							"OUTPUT",
							"RESULT",
							"ADD_UNIQUE",
							"RESULT",
							"LIST",
							"ARGN",
							"ITEM",
							"ITEM",
							"ARGN",
							"LIST",
							"RESULT",
							"SYMLINK",
							"DESTDIR",
							"LINK_NAME",
							"TARGET",
							"CMAKE_COMMAND",
							"TARGET",
							"DESTDIR",
							"LINK_NAME",
							"RPATH_APPEND",
							"ARGN",
							"VAR",
							"VAR",
							"VALUE",
							"VAR",
							"VAR",
							"CMAKE_INSTALL_RPATH",
							"VALUE",
							"VAR",
							"ARGN",
							"CHECK_FLAG",
							"FLAG",
							"TMP",
							"CMAKE_REQUIRED_QUIET",
							"FLAG",
							"VAR",
							"CMAKE_REQUIRED_QUIET",
							"RESULT",
							"VAR",
							"FLAG",
							"ARGN",
							"FLAG",
							"TRY_CODE",
							"RESULT_VAR",
							"OUTPUT_VAR",
							"CMAKE_CURRENT_BINARY_DIR",
							"FILE",
							"CODE",
							"CMAKE_CURRENT_BINARY_DIR",
							"CMAKE_CURRENT_BINARY_DIR",
							"FILE",
							"CMAKE_REQUIRED_FLAGS",
							"CMAKE_REQUIRED_DEFINITIONS",
							"LDFLAGS",
							"LIBS",
							"RESULT_VAR",
							"RESULT",
							"OUTPUT_VAR",
							"OUTPUT",
							"RESULT_VAR",
							"OUTPUT_VAR",
							"CHECK_EXTERNAL",
							"NAME",
							"NAME",
							"NAME",
							"OUTPUT_VAR",
							"LIBS",
							"LDFLAGS",
							"RUN_CODE",
							"FN",
							"CMAKE_CURRENT_BINARY_DIR",
							"RND",
							"FILE",
							"FN",
							"CODE",
							"FN",
							"FN",
							"CMAKE_REQUIRED_FLAGS",
							"CMAKE_REQUIRED_DEFINITIONS",
							"LDFLAGS",
							"LIBS",
							"LOG",
							"COMPILE_OUTPUT",
							"RUN_OUTPUT",
							"RESULT_VAR",
							"COMPILE_RESULT",
							"OUTPUT_VAR",
							"COMPILE_OUTPUT",
							"FN",
							"RUN_RESULT",
							"RESULT_VAR",
							"RUN_RESULT",
							"RUN_RESULT",
							"RUN_OUTPUT",
							"OUTPUT_VAR",
							"RUN_OUTPUT",
							"RUN_OUTPUT",
							"FN",
							"LIBNAME",
							"FILENAME",
							"LIBNAME",
							"OUT_VAR",
							"LIBNAME"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD8BAAAQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IHByb2dyYW0oKQogIHNldCBwcm9ncmFtKGFyZykKICBhYnNvbHV0ZVBhdGgocGF0aCkKICBhcmd1bWVudHNPZlR5cGUodHlwZSkKKGFyZywgaSkgPT4KICBnZXQgd2FybkZsYWdzKCkKICBnZXQgZGVidWdGbGFncygpCiAgZ2V0IG9wdEZsYWdzKCkKICBnZXQgZGVwRmxhZ3MoKQogIGdldCBtb2RlRmxhZygpCiAgaXNDb21waWxlKCkKICBpc1ByZXByb2Nlc3MoKQogIGlzQXNzZW1ibGUoKQogIGlzTGluaygpCiAgdG9TdHJpbmcoZGVsaW0pCiAgdG9BcnJheSgpCiAgcmVtb3ZlKC4uLmFyZ3MpCiAgZ2V0IGRlcGVuZGVuY2llcygpCiAgZ2V0IG91dHB1dEZpbGUoKQogIGFic29sdXRlKCkKKGFyZywgaSkgPT4KICByZWxhdGl2ZSh0bykKKGFyZywgaSkgPT4KICBydW4ob3B0cz17fSkKQ29tbWFuZAogIHRvSlNPTigpCiAgZnJvbVN0cmluZyhzdHIsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkNvbXBpbGVDb21tYW5kCiAgY29uc3RydWN0b3IoYSwgd29ya0RpciA9ICcuJykKICBnZXQgaW5jbHVkZVBhdGhzKCkKICBnZXQgZGVmaW5lcygpCiAgZ2V0IGNmbGFncygpCiAgaW5jID0+CiAgZGVmID0+CiAgZ2V0IGZsYWdzKCkKICBnZXQgYXJncygpCiAgZ2V0IHNvdXJjZXMoKQogIGFyZyA9PgogIHNldCBzb3VyY2VzKGFyZykKICBnZXQgc291cmNlKCkKICBzZXQgc291cmNlKGFyZykKICB0b09iamVjdCgpCkNvbXBpbGVDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgogIHNldCBvdXRwdXQoYXJnKQogIGEgPT4KTGlua0NvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBsaWJyYXJpZXMoKQogIGdldCBsaWJwYXRocygpCiAgZ2V0IGxpbmtmbGFncygpCiAgZ2V0IGFyZ3MoKQooYXJnLGkpID0+CiAgZ2V0IG9iamVjdHMoKQooYXJnLCBpKSA9PgogIGFyZyA9PgogIGdldCBmbGFncygpCiAgdCA9PgpMaW5rQ29tbWFuZApDb21tYW5kCkFyZ3VtZW50VHlwZShhcmcsIGkgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikKQXJndW1lbnRJcyhwcmVkKQphcmcgPT4KYXJnID0+CmFyZyA9PgpDb21tYW5kVHlwZShjb21tYW5kKQpNYWtlQ29tbWFuZHModGV4dCwgd29ya0RpciA9ICcuJykKICBsaW5lID0+Ck1ha2VDb21tYW5kKGFycmF5T3JTdHJpbmcsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkxpbmtDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgooYSwgaSkgPT4KICBzZXQgb3V0cHV0KGFyZykKICBhID0+Ck5pbmphUnVsZShjb21tYW5kKQAAAAAAAAAAyQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAADJCQAAQUJCUkVWSUFURQpNQVgKU1RSCk1BWApTVFIKTUFYClNUUgpTVFIKTUFYCk9VVFBVVF9WQVIKU1RSCkRVTVAKQVJHTgpTRVBBUkFUT1IKU0VQQVJBVE9SClNFUEFSQVRPUgpWQVIKVkFSClZBUgpBClNFUEFSQVRPUgpBClZBUgpBCkFSR04KQ0FOT05JQ0FMSVpFClNUUgpUTVBfU1RSClRNUF9TVFIKT1VUUFVUX1ZBUgpUTVBfU1RSCkJBU0VOQU1FClNUUgpBUkdOClRNUF9TVFIKT1VUUFVUX1ZBUgpUTVBfU1RSCkRJUk5BTUUKU1RSCkFSR04KVE1QX1NUUgpPVVRQVVRfVkFSClRNUF9TVFIKQUREUFJFRklYCk9VVFBVVApBUkdOClBSRUZJWApBUkcKQVJHTgpPVVRQVVRfVkFSCk9VVFBVVApBRERTVUZGSVgKT1VUUFVUCkFSR04KQVJHClNVRkZJWApBUkdOCk9VVFBVVF9WQVIKT1VUUFVUClJFTEFUSVZFX1BBVEgKTElTVApBUkdOClJFTEFUSVZFX1RPCkFSRwpBUkcKQVJHTgpPVVRfVkFSCkxJU1QKQ0hFQ0tfRlVOQ1RJT05fREVGClJFU1VMVF9WQVIKQVJHVjEKUFJFUFJPQ19ERUYKQVJHVjIKRlVOQwpGVU5DCkZVTkMKUkVTVUxUX1ZBUgpSRVNVTFRfVkFSClJFU1VMVF9WQVIKRlVOQwpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpSRVNVTFRfVkFSCkNIRUNLX0ZVTkNUSU9OUwpBUkdOCkZVTkMKRlVOQwpSRVNVTFRfVkFSCkFSR04KUkVTVUxUX1ZBTFVFCkFSR04KUE9TSVRJVkVfUkVQT1JUClBPU0lUSVZFX1JFUE9SVApQT1NJVElWRV9SRVBPUlQKQVJHTgpORUdBVElWRV9SRVBPUlQKTkVHQVRJVkVfUkVQT1JUCk5FR0FUSVZFX1JFUE9SVApWQVJOQU1FCk9VVFBVVF9WQVIKUE9TSVRJVkVfUkVQT1JUClZBUk5BTUUKT1VUUFVUX1ZBUgpORUdBVElWRV9SRVBPUlQKVkFSTkFNRQpSRVBPUlQKVkFSTkFNRQpBUkdOCk1TRwpSRVBPUlRfUkVTVUxUCkNIRUNLX0xJQlJBUllfRlVOQ1RJT05TCkxJQgpBUkdOCkZVTkMKRlVOQwpGVU5DCkZVTkMKRlVOQwpRVUlDS0pTX0xJQlJBUlkKUkVTVUxUClJFU1VMVApSRVNVTFRfVkFSClJFU1VMVApSRVNVTFQKRlVOQwpMTkFNRQpSCkFSR04KQ0hFQ0tfRlVOQ1RJT05TX0RFRgpBUkdOCkZVTkMKQVJHTgpDTEVBTl9OQU1FClNUUgpTVFIKT1VUUFVUX1ZBUgpTVFIKQ0hFQ0tfSU5DTFVERV9ERUYKUkVTVUxUX1ZBUgpBUkdWMQpQUkVQUk9DX0RFRgpBUkdWMgpJTkMKSU5DX0QKSU5DX0QKSU5DClJFU1VMVF9WQVIKUkVTVUxUX1ZBUgpSRVNVTFRfVkFSCklOQwpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpSRVNVTFRfVkFSCkNIRUNLX0lOQ0xVREVTCkFSR04KSU5DCklOQwpSRVNVTFRfVkFSCkFSR04KQ0hFQ0tfSU5DTFVERVNfREVGCkFSR04KSU5DCkFSR04KQ0hFQ0tfRlVOQ1RJT05fQU5EX0lOQ0xVREUKSU5DCkZVTkMKSU5DCklOQ19SRVNVTFQKSU5DX1JFU1VMVApJTkNfUkVTVUxUCkZVTkMKRlVOQ19SRVNVTFQKRlVOQ19SRVNVTFQKSU5DX1JFU1VMVApBUFBFTkRfUEFSRU5UCkxJU1QKVkFSCkFSR04KVkFSCkxJU1QKQ09OVEFJTlMKTElTVApWQUxVRQpJTkRFWApSRVNVTFQKSU5ERVgKUkVTVUxUCklOREVYCkxJU1QKSVRFTQpWQUxVRQpSRVNVTFQKSVRFTQpWQUxVRQpMSVNUCk9VVFBVVApSRVNVTFQKQUREX1VOSVFVRQpSRVNVTFQKTElTVApBUkdOCklURU0KSVRFTQpBUkdOCkxJU1QKUkVTVUxUClNZTUxJTksKREVTVERJUgpMSU5LX05BTUUKVEFSR0VUCkNNQUtFX0NPTU1BTkQKVEFSR0VUCkRFU1RESVIKTElOS19OQU1FClJQQVRIX0FQUEVORApBUkdOClZBUgpWQVIKVkFMVUUKVkFSClZBUgpDTUFLRV9JTlNUQUxMX1JQQVRIClZBTFVFClZBUgpBUkdOCkNIRUNLX0ZMQUcKRkxBRwpUTVAKQ01BS0VfUkVRVUlSRURfUVVJRVQKRkxBRwpWQVIKQ01BS0VfUkVRVUlSRURfUVVJRVQKUkVTVUxUClZBUgpGTEFHCkFSR04KRkxBRwpUUllfQ09ERQpSRVNVTFRfVkFSCk9VVFBVVF9WQVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkZJTEUKQ09ERQpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkZJTEUKQ01BS0VfUkVRVUlSRURfRkxBR1MKQ01BS0VfUkVRVUlSRURfREVGSU5JVElPTlMKTERGTEFHUwpMSUJTClJFU1VMVF9WQVIKUkVTVUxUCk9VVFBVVF9WQVIKT1VUUFVUClJFU1VMVF9WQVIKT1VUUFVUX1ZBUgpDSEVDS19FWFRFUk5BTApOQU1FCk5BTUUKTkFNRQpPVVRQVVRfVkFSCkxJQlMKTERGTEFHUwpSVU5fQ09ERQpGTgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKUk5ECkZJTEUKRk4KQ09ERQpGTgpGTgpDTUFLRV9SRVFVSVJFRF9GTEFHUwpDTUFLRV9SRVFVSVJFRF9ERUZJTklUSU9OUwpMREZMQUdTCkxJQlMKTE9HCkNPTVBJTEVfT1VUUFVUClJVTl9PVVRQVVQKUkVTVUxUX1ZBUgpDT01QSUxFX1JFU1VMVApPVVRQVVRfVkFSCkNPTVBJTEVfT1VUUFVUCkZOClJVTl9SRVNVTFQKUkVTVUxUX1ZBUgpSVU5fUkVTVUxUClJVTl9SRVNVTFQKUlVOX09VVFBVVApPVVRQVVRfVkFSClJVTl9PVVRQVVQKUlVOX09VVFBVVApGTgpMSUJOQU1FCkZJTEVOQU1FCkxJQk5BTUUKT1VUX1ZBUgpMSUJOQU1FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "clang-list.js",
			"settings":
			{
				"buffer_size": 8043,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAADQCAAAAAAAANAIAAAAAAAABAAAARw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQIAAAAAAAA1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAADQCAAAAAAAANQIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAIAAAAAAAA0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"right_delete",
					null,
					"AQAAADUCAAAAAAAANQIAAAAAAAABAAAAaA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQIAAAAAAAA1AgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 87577,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					124,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAOVQAQAAAAAA5lABAAAAAAAAAAAA5lABAAAAAADnUAEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlUAEAAAAAAOVQAQAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAOZQAQAAAAAA5lABAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnUAEAAAAAAOdQAQAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "string"
					},
					"BgAAAOZQAQAAAAAA51ABAAAAAAAAAAAA51ABAAAAAADoUAEAAAAAAAAAAADoUAEAAAAAAOlQAQAAAAAAAAAAAOlQAQAAAAAA6lABAAAAAAAAAAAA6lABAAAAAADrUAEAAAAAAAAAAADrUAEAAAAAAOxQAQAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmUAEAAAAAAOZQAQAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOxQAQAAAAAA7lABAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsUAEAAAAAAOxQAQAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO1QAQAAAAAA7lABAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtUAEAAAAAAO1QAQAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "arg))"
					},
					"BQAAAO1QAQAAAAAA7lABAAAAAAAAAAAA7lABAAAAAADvUAEAAAAAAAAAAADvUAEAAAAAAPBQAQAAAAAAAAAAAPBQAQAAAAAA8VABAAAAAAAAAAAA8VABAAAAAADyUAEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtUAEAAAAAAO1QAQAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					28,
					"right_delete",
					null,
					"HAAAAPJQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAKfJQAQAAAAAA8lABAAAAAAABAAAAKfJQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAbvJQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAPfJQAQAAAAAA8lABAAAAAAABAAAAPvJQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAafJQAQAAAAAA8lABAAAAAAABAAAAc/JQAQAAAAAA8lABAAAAAAABAAAAT/JQAQAAAAAA8lABAAAAAAABAAAAYvJQAQAAAAAA8lABAAAAAAABAAAAavJQAQAAAAAA8lABAAAAAAABAAAAZfJQAQAAAAAA8lABAAAAAAABAAAAY/JQAQAAAAAA8lABAAAAAAABAAAAdPJQAQAAAAAA8lABAAAAAAABAAAAKPJQAQAAAAAA8lABAAAAAAABAAAAbvJQAQAAAAAA8lABAAAAAAABAAAAKfJQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAJvJQAQAAAAAA8lABAAAAAAABAAAAJvJQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAbvJQAQAAAAAA8lABAAAAAAABAAAALvJQAQAAAAAA8lABAAAAAAABAAAAbvJQAQAAAAAA8lABAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyUAEAAAAAAPJQAQAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					19,
					"right_delete",
					null,
					"EwAAAPJQAQAAAAAA8lABAAAAAAABAAAAbfJQAQAAAAAA8lABAAAAAAABAAAAZfJQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAPfJQAQAAAAAA8lABAAAAAAABAAAAPfJQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAYfJQAQAAAAAA8lABAAAAAAABAAAAcvJQAQAAAAAA8lABAAAAAAABAAAAZ/JQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAJvJQAQAAAAAA8lABAAAAAAABAAAAJvJQAQAAAAAA8lABAAAAAAABAAAAIPJQAQAAAAAA8lABAAAAAAABAAAAcPJQAQAAAAAA8lABAAAAAAABAAAAcvJQAQAAAAAA8lABAAAAAAABAAAAZfJQAQAAAAAA8lABAAAAAAABAAAAZPJQAQAAAAAA8lABAAAAAAABAAAAafJQAQAAAAAA8lABAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyUAEAAAAAAPJQAQAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					8,
					"right_delete",
					null,
					"CAAAAPJQAQAAAAAA8lABAAAAAAABAAAAYfJQAQAAAAAA8lABAAAAAAABAAAAdPJQAQAAAAAA8lABAAAAAAABAAAAZfJQAQAAAAAA8lABAAAAAAABAAAAKPJQAQAAAAAA8lABAAAAAAABAAAAbvJQAQAAAAAA8lABAAAAAAABAAAAKfJQAQAAAAAA8lABAAAAAAABAAAAKfJQAQAAAAAA8lABAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyUAEAAAAAAPJQAQAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAPJQAQAAAAAA81ABAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyUAEAAAAAAPJQAQAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAEhRAQAAAAAASVEBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIUQEAAAAAAEhRAQAAAAAAAAAAAACgdEA"
				],
				[
					151,
					1,
					"left_delete",
					null,
					"AQAAAEhRAQAAAAAASFEBAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJUQEAAAAAAElRAQAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "...args"
					},
					"CAAAABtQAQAAAAAAHFABAAAAAAAAAAAAHFABAAAAAAAcUAEAAAAAABYAAABwcmVkaWNhdGUgPSAoKSA9PiB0cnVlHFABAAAAAAAdUAEAAAAAAAAAAAAdUAEAAAAAAB5QAQAAAAAAAAAAAB5QAQAAAAAAH1ABAAAAAAAAAAAAH1ABAAAAAAAgUAEAAAAAAAAAAAAgUAEAAAAAACFQAQAAAAAAAAAAACFQAQAAAAAAIlABAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbUAEAAAAAADFQAQAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"paste",
					null,
					"AQAAAMZQAQAAAAAA0lABAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGUAEAAAAAAMZQAQAAAAAAAAAAAAAA8L8"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "/("
					},
					"AgAAANJQAQAAAAAA01ABAAAAAAAAAAAA01ABAAAAAADUUAEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSUAEAAAAAANJQAQAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					2,
					"left_delete",
					null,
					"AgAAANNQAQAAAAAA01ABAAAAAAABAAAAKNJQAQAAAAAA0lABAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUUAEAAAAAANRQAQAAAAAAAAAAAAAA8L8"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "(arg)"
					},
					"BQAAANJQAQAAAAAA01ABAAAAAAAAAAAA01ABAAAAAADUUAEAAAAAAAAAAADUUAEAAAAAANVQAQAAAAAAAAAAANVQAQAAAAAA1lABAAAAAAAAAAAA1lABAAAAAADXUAEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSUAEAAAAAANJQAQAAAAAAAAAAAAAA8L8"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANdQAQAAAAAA2FABAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXUAEAAAAAANdQAQAAAAAAAAAAAAAA8L8"
				],
				[
					188,
					1,
					"left_delete",
					null,
					"AQAAANZQAQAAAAAA1lABAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXUAEAAAAAANdQAQAAAAAAAAAAAAAA8L8"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANZQAQAAAAAA11ABAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWUAEAAAAAANZQAQAAAAAAAAAAAAAA8L8"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": " ....args"
					},
					"CQAAANdQAQAAAAAA2FABAAAAAAAAAAAA2FABAAAAAADZUAEAAAAAAAAAAADZUAEAAAAAANpQAQAAAAAAAAAAANpQAQAAAAAA21ABAAAAAAAAAAAA21ABAAAAAADcUAEAAAAAAAAAAADcUAEAAAAAAN1QAQAAAAAAAAAAAN1QAQAAAAAA3lABAAAAAAAAAAAA3lABAAAAAADfUAEAAAAAAAAAAADfUAEAAAAAAOBQAQAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXUAEAAAAAANdQAQAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					5,
					"left_delete",
					null,
					"BQAAAN9QAQAAAAAA31ABAAAAAAABAAAAc95QAQAAAAAA3lABAAAAAAABAAAAZ91QAQAAAAAA3VABAAAAAAABAAAActxQAQAAAAAA3FABAAAAAAABAAAAYdtQAQAAAAAA21ABAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgUAEAAAAAAOBQAQAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "args)))"
					},
					"BwAAANtQAQAAAAAA3FABAAAAAAAAAAAA3FABAAAAAADdUAEAAAAAAAAAAADdUAEAAAAAAN5QAQAAAAAAAAAAAN5QAQAAAAAA31ABAAAAAAAAAAAA31ABAAAAAADgUAEAAAAAAAAAAADgUAEAAAAAAOFQAQAAAAAAAAAAAOFQAQAAAAAA4lABAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbUAEAAAAAANtQAQAAAAAAAAAAAAAA8L8"
				],
				[
					195,
					1,
					"cut",
					null,
					"AQAAAOJQAQAAAAAA4lABAAAAAAAfAAAAIHByb3BlcnR5KCduYW1lJywgc3RyaW5nKGFyZykpKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiUAEAAAAAAAFRAQAAAAAAAAAAAAAA8L8"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": "path,"
					},
					"BQAAAKpTAQAAAAAAq1MBAAAAAAAAAAAAq1MBAAAAAACsUwEAAAAAAAAAAACsUwEAAAAAAK1TAQAAAAAAAAAAAK1TAQAAAAAArlMBAAAAAAAAAAAArlMBAAAAAACvUwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqUwEAAAAAAKpTAQAAAAAAAAAAAAAA8L8"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK9TAQAAAAAAsFMBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvUwEAAAAAAK9TAQAAAAAAAAAAAAAA8L8"
				],
				[
					310,
					1,
					"insert",
					{
						"characters": "path"
					},
					"BAAAAAtUAQAAAAAADFQBAAAAAAAAAAAADFQBAAAAAAANVAEAAAAAAAAAAAANVAEAAAAAAA5UAQAAAAAAAAAAAA5UAQAAAAAAD1QBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALVAEAAAAAAAtUAQAAAAAAAAAAAAAA8L8"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAAA9UAQAAAAAAEFQBAAAAAAAAAAAAEFQBAAAAAAARVAEAAAAAAAAAAAARVAEAAAAAABJUAQAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPVAEAAAAAAA9UAQAAAAAAAAAAAAAA8L8"
				],
				[
					312,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABJUAQAAAAAAE1QBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASVAEAAAAAABJUAQAAAAAAAAAAAAAA8L8"
				],
				[
					344,
					1,
					"cut",
					null,
					"AQAAAPIHAAAAAAAA8gcAAAAAAAAOAAAAID0gYXN0Mm5wKGFzdCk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyBwAAAAAAAAAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "\nc"
					},
					"AwAAAPUHAAAAAAAA9gcAAAAAAAAAAAAA9gcAAAAAAAD4BwAAAAAAAAAAAAD4BwAAAAAAAPkHAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1BwAAAAAAAPUHAAAAAAAA////////738"
				],
				[
					350,
					1,
					"left_delete",
					null,
					"AQAAAPgHAAAAAAAA+AcAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5BwAAAAAAAPkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "m??="
					},
					"BAAAAPgHAAAAAAAA+QcAAAAAAAAAAAAA+QcAAAAAAAD6BwAAAAAAAAAAAAD6BwAAAAAAAPsHAAAAAAAAAAAAAPsHAAAAAAAA/AcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4BwAAAAAAAPgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					352,
					1,
					"paste",
					null,
					"AQAAAPwHAAAAAAAACggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8BwAAAAAAAPwHAAAAAAAAAAAAAAAA8L8"
				],
				[
					354,
					1,
					"left_delete",
					null,
					"AQAAAP0HAAAAAAAA/QcAAAAAAAABAAAAPQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+BwAAAAAAAP4HAAAAAAAAAAAAAAAA8L8"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAkIAAAAAAAACggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJCAAAAAAAAAkIAAAAAAAA////////738"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkHAAAAAAAA+gcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5BwAAAAAAAPkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "\n\nfoi"
					},
					"BQAAAGgIAAAAAAAAaQgAAAAAAAAAAAAAaQgAAAAAAABqCAAAAAAAAAAAAABqCAAAAAAAAGsIAAAAAAAAAAAAAGsIAAAAAAAAbAgAAAAAAAAAAAAAbAgAAAAAAABtCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoCAAAAAAAAGgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					379,
					3,
					"left_delete",
					null,
					"AwAAAGwIAAAAAAAAbAgAAAAAAAABAAAAaWsIAAAAAAAAawgAAAAAAAABAAAAb2oIAAAAAAAAaggAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtCAAAAAAAAG0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAGoIAAAAAAAAawgAAAAAAAAAAAAAawgAAAAAAABsCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqCAAAAAAAAGoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					381,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGwIAAAAAAAAbggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsCAAAAAAAAGwIAAAAAAAAAAAAAAAA8L8"
				],
				[
					382,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAG0IAAAAAAAAbggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtCAAAAAAAAG0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG4IAAAAAAAAbwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuCAAAAAAAAG4IAAAAAAAAAAAAAAAA8L8"
				],
				[
					384,
					1,
					"left_delete",
					null,
					"AQAAAG4IAAAAAAAAbggAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvCAAAAAAAAG8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": "m.get"
					},
					"BQAAAG4IAAAAAAAAbwgAAAAAAAAAAAAAbwgAAAAAAABwCAAAAAAAAAAAAABwCAAAAAAAAHEIAAAAAAAAAAAAAHEIAAAAAAAAcggAAAAAAAAAAAAAcggAAAAAAABzCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuCAAAAAAAAG4IAAAAAAAAAAAAAAAA8L8"
				],
				[
					386,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHMIAAAAAAAAdQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzCAAAAAAAAHMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAHQIAAAAAAAAdQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0CAAAAAAAAHQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					392,
					1,
					"cut",
					null,
					"AQAAAHwIAAAAAAAAfAgAAAAAAAAZAAAAaWYodHlwZW9mIG4gPT0gJ29iamVjdCcpIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVCAAAAAAAAHwIAAAAAAAAAAAAAAAAREA"
				],
				[
					394,
					1,
					"paste",
					null,
					"AQAAAGkIAAAAAAAAgggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpCAAAAAAAAGkIAAAAAAAAAAAAAAAAREA"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIIAAAAAAAAgwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCCAAAAAAAAIIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					396,
					1,
					"left_delete",
					null,
					"AQAAAIIIAAAAAAAAgggAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDCAAAAAAAAIMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					397,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIIIAAAAAAAAhAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCCAAAAAAAAIIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					398,
					1,
					"right_delete",
					null,
					"AQAAAIMIAAAAAAAAgwgAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDCAAAAAAAAIMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BwAAALUIAAAAAAAAtggAAAAAAAAAAAAAtggAAAAAAAC6CAAAAAAAAAAAAAC2CAAAAAAAALYIAAAAAAAABAAAACAgICC2CAAAAAAAALgIAAAAAAAAAAAAALgIAAAAAAAAuQgAAAAAAAAAAAAAtggAAAAAAAC2CAAAAAAAAAIAAAAgILYIAAAAAAAAtggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1CAAAAAAAALUIAAAAAAAA////////738"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAGkIAAAAAAAAawgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpCAAAAAAAAGkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALgIAAAAAAAAuggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4CAAAAAAAALgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					412,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIYIAAAAAAAAiAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGCAAAAAAAAIYIAAAAAAAAAAAAAAAAAAA"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIgIAAAAAAAAiggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACICAAAAAAAAIgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAJwIAAAAAAAAnggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcCAAAAAAAAJwIAAAAAAAAAAAAAAAAREA"
				],
				[
					421,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBCAAAAAAAAMEIAAAAAAAAAAAAAAAATkA"
				]
			]
		},
		{
			"file": "compile_commands.js",
			"settings":
			{
				"buffer_size": 5596,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/compileCommand.js",
			"settings":
			{
				"buffer_size": 11491,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "opts="
					},
					"BQAAAHcNAAAAAAAAeA0AAAAAAAAAAAAAeA0AAAAAAAB5DQAAAAAAAAAAAAB5DQAAAAAAAHoNAAAAAAAAAAAAAHoNAAAAAAAAew0AAAAAAAAAAAAAew0AAAAAAAB8DQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3DQAAAAAAAHcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHwNAAAAAAAAfg0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8DQAAAAAAAHwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAgOAAAAAAAACQ4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIDgAAAAAAAAgOAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " ...."
					},
					"BQAAAAkOAAAAAAAACg4AAAAAAAAAAAAACg4AAAAAAAALDgAAAAAAAAAAAAALDgAAAAAAAAwOAAAAAAAAAAAAAAwOAAAAAAAADQ4AAAAAAAAAAAAADQ4AAAAAAAAODgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJDgAAAAAAAAkOAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAA0OAAAAAAAADQ4AAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAODgAAAAAAAA4OAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "opts"
					},
					"BAAAAA0OAAAAAAAADg4AAAAAAAAAAAAADg4AAAAAAAAPDgAAAAAAAAAAAAAPDgAAAAAAABAOAAAAAAAAAAAAABAOAAAAAAAAEQ4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANDgAAAAAAAA0OAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "Searching 35602 files for \"get members\" (regex, case sensitive)\n\n~/Projects/plot-cv/AudioContext.ast.bjson:\n    File too large, skipping\n\n~/Projects/plot-cv/test-labsound.ast.bjson:\n    File too large, skipping\n\n\n\nSearching 35602 files for \"\\bmembers\\b\" (regex, case sensitive)\n\n~/Projects/plot-cv/8369022-1:\n 1503                      <input id=\"order_help_order_id_field\" name=\"order_id\" type=\"hidden\" value=\"8369022-1\">\n 1504          <p class=\"no-margin\">\n 1505: <skipped 103 characters> ...ng for most of your questions, and our <a href=\"/forum/\">Forum</a> is full of experienced community members!\n 1506                      </p>\n 1507      \n\n~/Projects/plot-cv/ast-shell.js:\n  432  \n  433  const GenerateInspectStruct = StringGenerator(function* (decl, includes) {\n  434:   let { name, members } = decl;\n  435  \n  436    includes ??= [decl.loc.file.replace(/^\\/usr\\/include\\//, '')];\n  437  \n  438:   //console.log('GenerateInspectStruct', { name, members, includes });\n  439  \n  440    yield '#include <stdio.h>';\n  441    yield '#include <stddef.h>';\n  442  \n  443:   if(MemberNames(members).some(name => /:/.test(name)))\n  444      yield `\n  445  size_t\n  ...\n  501    yield `  printf(\"${name} %zu\\\\n\", sizeof(svar) * 8);`;\n  502  \n  503:   for(let member of MemberNames(members)) {\n  504      if(true /*(type == null || typeof type.size == 'number') && member != undefined*/) {\n  505        let field = member.replace(/:.*/, '');\n  ...\n  599    }\n  600  \n  601:   let { size, members = [] } = decl;\n  602    name ??= decl.name;\n  603  \n  ...\n  611      offset = 0;\n  612  \n  613:   console.log('GenerateStructClass', { decl, members });\n  614  \n  615:   for(let [name, type] of members) {\n  616      if(/reserved/.test(name)) continue;\n  617  \n  ...\n  639    yield '';\n  640  \n  641:   yield `  toString() {\\n    const { ${fields.join(', ')} } = this;\\n    return \\`${name} {${[...members]\n  642      .map(\n  643        ([field, member]) =>\n  ...\n 1047  }\n 1048  \n 1049: function MemberNames(members, flags = 0) {\n 1050    let ret = [];\n 1051  \n 1052:   if(members.members) members = members.members;\n 1053  \n 1054:   if(!Array.isArray(members)) {\n 1055:     for(let ptr of [...DeepSelect(members, n => n.kind.endsWith('Decl') && n.name, deep.RETURN_PATH)].map(\n 1056        path => new Pointer(path),\n 1057      )) {\n ....\n 1060        console.log('ptrs:', ptrs);\n 1061  \n 1062:       let names = ptrs.map(p => DeepGet(members, [...p, 'name'], deep.NO_THROW));\n 1063:       let kinds = ptrs.map(p => DeepGet(members, [...p, 'kind'], deep.NO_THROW));\n 1064  \n 1065        console.log('kinds:', kinds);\n ....\n 1070    } else {\n 1071      const memberNamePointers = [\n 1072:       ...DeepSelect(members, n => Array.isArray(n) && n.length == 2 && typeof n[0] == 'string' && n[1] !== null),\n 1073      ].map(([node, ptr]) => ptr);\n 1074      //console.log('memberNamePointers', memberNamePointers);\n ....\n 1076      for(let ptr of memberNamePointers.map(path => new Pointer(path))) {\n 1077        let ptrs = ptr.chain(3),\n 1078:         names = ptrs.map(p => DeepGet(members, [...p, 0]));\n 1079  \n 1080        ret.push(names.filter(name => name).join('.'));\n ....\n 1184    ];\n 1185  \n 1186:   const members = {\n 1187:     fields: [...node.members].filter(\n 1188        n =>\n 1189          className(n) == 'FieldDecl' &&\n ....\n 1191          !(n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1192      ),\n 1193:     static: [...node.members].filter(\n 1194        n => className(n) == 'Type' && (n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1195      ),\n 1196:     methods: [...node.members].filter(\n 1197        n =>\n 1198          n.ast.kind == 'CXXMethodDecl' &&\n ....\n 1200          !(n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1201      ),\n 1202:     functions: [...node.members].filter(\n 1203        n =>\n 1204          n.ast.kind == 'CXXMethodDecl' &&\n ....\n 1206          (n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1207      ),\n 1208:     enums: [...node.members].filter(n => n.ast.kind == 'EnumDecl'),\n 1209:     ctor_dtor: [...node.members].filter(n => !(n.ast.kind == 'CXXMethodDecl' || className(n) == 'Type')),\n 1210    };\n 1211  \n ....\n 1234      names = [];\n 1235  \n 1236:   for(let method of members.methods) {\n 1237      if(names.indexOf(method.name) == -1) names.push(method.name);\n 1238  \n ....\n 1360    }\n 1361  \n 1362:   for(let field of members.fields) {\n 1363      const { name, desugared, typeAlias, access, storageClass } = field;\n 1364  \n ....\n 1374    }\n 1375  \n 1376:   for(let en of members.enums) {\n 1377:     const { name, members } = en;\n 1378  \n 1379      //out.fns += `  /* enum ${name} */\\n`;\n 1380  \n 1381:     for(let [name, value] of members) {\n 1382        out.fns += `  JS_PROP_INT64_DEF(\"${name}\", ${value}, JS_PROP_CONFIGURABLE),\\n`;\n 1383      }\n ....\n 1399      out.mfn +\n 1400      `\\n` +\n 1401:     (members.fields.length > 0 ? out.penum + `\\n` + out.pget + `\\n` + out.pset + `\\n` : '') +\n 1402      out.fns\n 1403    );\n\n~/Projects/plot-cv/AudioContext.ast.bjson:\n    File too large, skipping\n\n~/Projects/plot-cv/bookmarks.bjson:\n  937  13055\u0012\u0007 devel.penton.com\u0014\u0007\u0006url\u0016\u0007‚Ç¨\u0001http://devel.penton.com/ed/Pages/magpages/may1799/ifd/0517id.htm\b\u0007\n  938  \u0007\"13315026477793716\f\u0007\u00020\u000e\u0007Hf4d7f00c-bf76-4471-a5a6-de3fe26d1c0e\u0010\u0007\n  939: 13056\u0012\u0007\u001emembers.cox.net\u0014\u0007\u0006url\u0016\u0007Thttp://members.cox.net/berniekm/super.html\b\u0007\n  940  \u0007\"13315026477795011\f\u0007\u00020\u000e\u0007H692e673f-99a6-4456-bc84-9b8b6ef0d366\u0010\u0007\n  941  13057\u0012\u0007\u001a404 Not Found\u0014\u0007\u0006url\u0016\u0007Thttps://wf.home.xs4all.nl/wouter/pic/wisp/\b\u0007\n\n~/Projects/plot-cv/clang-ast.js:\n  858        let tag, access;\n  859  \n  860:       Object.defineProperty(this, 'members', {\n  861          get: memoize(() =>\n  862            fields\n  ...\n  866                let type;\n  867  \n  868:               //console.log('members', console.config({ compact: true }), { name, kind });\n  869  \n  870                if(node.isBitfield) name += ':' + node.inner[0].inner[0].value;\n  ...\n  923  \n  924                /*          if(type instanceof EnumDecl) {\n  925:             for(let [name,[,value]] of type.members) {\n  926            acc.push([name, type]);\n  927  \n  ...\n  940  \n  941    get size() {\n  942:     const { members = [] } = this;\n  943  \n  944      return RoundTo(\n  945:       [...members].reduce((acc, [name, type]) => {\n  946          if(Number.isFinite(type?.size)) {\n  947            if(type.size == 8) acc = RoundTo(acc, 8);\n  ...\n  955  \n  956    toJSON() {\n  957:     const { name, size, members } = this;\n  958      return super.toJSON({\n  959        name,\n  960        size,\n  961:       members: members.map(([name, member]) => [name, member != null && member.toJSON ? member.toJSON() : member]),\n  962      });\n  963    }\n  ...\n  973      let number = 1;\n  974  \n  975:     this.members = new Map(\n  976        constants.map(({ name, type, inner }) => {\n  977          let value = inner ? PrintNode(inner[0]) : undefined;\n  ...\n  990  \n  991    toJSON() {\n  992:     const { name, size, members } = this;\n  993:     return super.toJSON({ name, size, members });\n  994    }\n  995  }\n\n~/Projects/plot-cv/clip.html:\n   28  <script type=\"application/json\"  data-content-len=\"498\" data-sjs>{\"require\":[[\"CometSSRFizzContentIn... <skipped 372 characters> ...\"mwp_ssr_enabled\":true,\"stop_render_at_splashscreen\":false},\"is_in_crawler_mode\":false}]]]}</script>\n   29  <script type=\"application/json\"  data-content-len=\"76\" data-sjs>{\"require\":[[\"JSScheduler\",\"makeSchedulerGlobalEntry\",null,[\"null\",false]]]}</script>\n   30: <skipped 49101 characters> ...play\":8.9,\"29818882.comet.group\":54.6,\"29818882.comet.group.media.photos\":2.7,\"29818882.comet.group.members\":1.3,\"29818882.comet.group.permalink\":14.5,\"29818882.comet.groups.feed\":3.7,\"29818882.comet.groups.... <skipped 61288 characters> ...\n   31  <script type=\"application/json\"  data-content-len=\"83\" data-sjs>{\"require\":[[\"qplTimingsServerJS\",null,null,[\"7344699703525347544\",\"tierOneEnd\"]]]}</script>\n   32  \n\n~/Projects/plot-cv/create-tamper.js:\n  307            ? decl.properties.map(prop => ('id' in prop ? prop.id : prop))\n  308            : decl instanceof ObjectExpression\n  309:           ? decl.members.map(prop => ('id' in prop ? prop.id : prop))\n  310            : decl\n  311        );\n\n~/Projects/plot-cv/debugger-server.es:\n 5108        )\n 5109      ),\n 5110:     properties: instance(members(v => !isFunction(v))),\n 5111:     methods: instance(members(v => isFunction(v))),\n 5112      get: instance((obj, property, instance) => {\n 5113        if(property in obj /* && !isFunction(obj[property])*/) {\n ....\n 5125    }\n 5126  \n 5127:   function members(pred = v => !isFunction(v), defaults = { maxDepth: Infinity }) {\n 5128      return (obj, keyDescriptor = true, valueDescriptor = true, source = false, d) => (\n 5129        (d = getPropertyDescriptors(obj, true, (proto, depth) => depth < (defaults.maxDepth ?? Infinity))),\n\n~/Projects/plot-cv/dump-structs.js:\n  528  }\n  529  \n  530: function* GenerateInspectStruct(type, members, includes) {\n  531    for(let include of ['stdio.h', ...includes]) yield `#include <${include}>`;\n  532    yield `${type} svar;`;\n  533    yield `int main() {`;\n  534    yield `  printf(\"${type} - %u\\\\n\", sizeof(svar));`;\n  535:   for(let member of members) yield `  printf(\".${member} %u %u\\\\n\", (char*)&svar.${member} - (char*)&svar, sizeof(svar.${member}));`;\n  536    yield `  return 0;`;\n  537    yield `}`;\n  538  }\n  539  \n  540: async function InspectStruct(type, members, includes) {\n  541:   const code = [...GenerateInspectStruct(type, members, includes)].join('\\n');\n  542    const file = `inspect-${type}-struct.c`;\n  543    WriteFile(file, code);\n\n~/Projects/plot-cv/fire.es:\n 4465    if(x !== undefined) {\n 4466      let ret,\n 4467:       members = [];\n 4468      const handler = {\n 4469        construct(target, args) {\n ....\n 4477      }\n 4478      let proto = (x && x.prototype) || Object.getPrototypeOf(ret);\n 4479:     members = Util.getMemberNames(proto).filter(m => m !== 'constructor');\n 4480:     //console.log('members:', !!ret, members, Util.fnName(x));\n 4481:     return !!ret && members.length > 0;\n 4482    }\n 4483  };\n ....\n 5404      predicates.some(pred => pred(...args));\n 5405  \n 5406: Util.members = Util.curry((pred, obj) => Util.unique([...Util.iterateMembers(obj, Util.tryPredicate(pred))]));\n 5407  \n 5408  Util.memberNameFilter = (depth = 1, start = 0) =>\n ....\n 5427    }\n 5428    filters.unshift(Util.memberNameFilter(depth, start));\n 5429:   return Util.members(Util.and(...filters))(obj);\n 5430  };\n 5431  Util.getMemberEntries = (obj, ...args) => Util.getMemberNames(obj, ...args).map(name => [name, obj[name]]);\n ....\n 5434    (filterFn, accFn = (a, m, o) => ({ ...a, [m]: o[m] }), accu = {}) =>\n 5435    (obj, ...args) =>\n 5436:     Util.members(filterFn(...args), obj).reduce(\n 5437        Util.tryFunction(\n 5438          (a, m) => accFn(a, m, obj),\n ....\n 5465    let next = Util.tryFunction(((acc, mem, idx) => (filterFn(mem, idx) ? (setFn(idx, mem), acc) : null), r => r, () => mapObj));\n 5466    fn = function ReduceIntoMap(arg, acc = mapObj) {\n 5467:     if(Util.isObject(arg) && typeof arg.reduce == 'function') return arg.reduce((acc, arg) => (Util.isArray(arg) ? arg : Util.members(arg)).reduce(reducer, acc), self.map);\n 5468      let c = Util.counter();\n 5469      for(let mem of arg) acc = next(acc, mem, c());\n ....\n 5491    );\n 5492  \n 5493: Util.getMethodNames = (obj, depth = 1, start = 0) => Util.members(Util.methodNameFilter(depth, start))(obj);\n 5494  \n 5495  Util.getMethods = Util.objectReducer(Util.methodNameFilter);\n\n~/Projects/plot-cv/grains.ast.bjson:\n 202305  \b\u0004 \u0005√à√´\u0002$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007dquickjs/qjs-sound/stk/projects/examples/grains.cpp\f\b\u0004 \u0005¬º√¨\u0002$\u0005v&\u0005\u0002(\b\u0001\u0010\u0007dquickjs/qjs... <skipped 112 characters> ...9eb7463c0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√Ä√¨\u0002\"\u0005√Ü\u0007$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007dquickjs/qjs-sound/stk/projects/examples/grains.cpp\b\b\u0002\n 202306  \b\u0004 \u0005√Ä√¨\u0002$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007dquickjs/qjs-sound/stk/projects/examples/grains.cpp\f\b\u0004 \u0005√Ñ√≠\u0002$\u0005‚Ä†\u0001&\u0005\u0002(\b\u0001\u0010\u0007dquickjs/qj... <skipped 122 characters> ...9eb7463e0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√à√≠\u0002\"\u0005√à\u0007$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007dquickjs/qjs-sound/stk/projects/examples/grains.cpp\b\b\u0002\n 202307: <skipped 49 characters> .../examples/grains.cpp\f\b\u0004 \u0005√à√Æ\u0002$\u0005‚Äö\u0001&\u0005\u0002(\b\u0001\u0010\u0007dquickjs/qjs-sound/stk/projects/examples/grains.cpp√ä\u0002\u0007‚Äö\u0001    members of the returned RtAudio::DeviceInfo structure will be\b\u0005\u0002\u0007\u001c0x7ff9eb746400\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√å√Æ\u0002\"\u0005√ä\u0007$... <skipped 64 characters> ...\n 202308  \b\u0004 \u0005√å√Æ\u0002$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007dquickjs/qjs-sound/stk/projects/examples/grains.cpp\f\b\u0004 \u0005√î√Ø\u0002$\u0005≈†\u0001&\u0005\u0002(\b\u0001\u0010\u0007dquickjs/qj... <skipped 124 characters> ...9eb746420\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√ò√Ø\u0002\"\u0005√å\u0007$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007dquickjs/qjs-sound/stk/projects/examples/grains.cpp\b\b\u0002\n 202309  \b\u0004 \u0005√ò√Ø\u0002$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007dquickjs/qjs-sound/stk/projects/examples/grains.cpp\f\b\u0004 \u0005√ö√∞\u0002$\u0005‚Äû\u0001&\u0005\u0002(\b\u0001\u0010\u0007dquickjs/qj... <skipped 121 characters> ...9eb746440\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√û√∞\u0002\"\u0005√é\u0007$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007dquickjs/qjs-sound/stk/projects/examples/grains.cpp\b\b\u0002\n\n~/Projects/plot-cv/History:\n    <binary>\n\n~/Projects/plot-cv/History.bjson:\n    <binary>\n\n~/Projects/plot-cv/lwsval.ast.bjson:\n 48647  \b\u0004 \u0005¬†?$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√≤?$\u0005X&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qj... <skipped 105 characters> ...f0\u0004\u0007(InlineCommandComment\u0006\b\u0004 \u0005√¥?$\u0005Z&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 48648  \b\u0004 \u0005√¥?$\u0005Z&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√∂?$\u0005\\&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 77 characters> ...5eedc138d10\u0004\u0007\u0016TextComment\u0006\b\u0004 \u0005‚Äö@$\u0005h&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 48649: <skipped 48 characters> ...include/libwebsockets.h\f\b\u0004 \u0005¬∞@$\u0005‚Äì\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u00070 members can be tuned to\b\u0005\u0002\u0007\u001c0x55eedc138d30\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005¬∏@\"\u0005√ú\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 48650  \b\u0004 \u0005¬∏@$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√êA$\u0005≈æ\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 137 characters> ...c138d50\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√òA\"\u0005√û\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 48651  \b\u0004 \u0005√òA$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√¨B$\u0005≈°\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 135 characters> ...c138d70\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√¥B\"\u0005√†\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n .....\n 53618  \b\u0004 \u0005¬∂¬Ø\u0005$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005¬º¬∞\u0005$\u0005≈í\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 131 characters> ...15ee00\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√Ñ¬∞\u0005\"\u0005¬º\u000f$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 53619  \b\u0004 \u0005√Ñ¬∞\u0005$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√ê¬±\u0005$\u0005‚Äô\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 134 characters> ...15ee20\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√ò¬±\u0005\"\u0005¬æ\u000f$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 53620: <skipped 94 characters> ...uickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u0007≈Ω\u0001\tusing the information in the vhost-related members, for compatibility.\b\u0005\u0002\u0007\u001c0x55eedc15ef50\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005√≤¬≤\u0005\"\u0005√Ç\u000f$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/li... <skipped 38 characters> ...\n 53621  \b\u0004 \u0005√≤¬≤\u0005$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0005 \u0005√í¬∑\u0005\"\u0005√ä\u000f$\u0005L&\u0005\u0002(\b\u0001\u0010\u0007jquic... <skipped 65 characters> ...15ee80\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√≤¬≤\u0005\"\u0005√Ç\u000f$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 53622  \b\u0004 \u0005√≤¬≤\u0005$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√™¬≥\u0005$\u0005~&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/... <skipped 122 characters> ...15eea0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√≤¬≥\u0005\"\u0005√Ñ\u000f$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n .....\n 53792  \b\u0004 \u0005√Ñ√∑\u0005$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0005 \u0005≈í√ª\u0005\"\u0005¬™\u0011$\u0005≈æ\u0001&\u0005\u0002(\b\u0001\u0010\u0007jqui... <skipped 66 characters> ...165b30\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√Ñ√∑\u0005\"\u0005¬¶\u0011$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 53793  \b\u0004 \u0005√Ñ√∑\u0005$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√ê√∏\u0005$\u0005‚Äô\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 134 characters> ...165b50\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√ò√∏\u0005\"\u0005¬®\u0011$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 53794: <skipped 51 characters> ...clude/libwebsockets.h\f\b\u0004 \u0005√¨√π\u0005$\u0005≈°\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u0007‚Äì\u0001 members of the info struct.  You can create many vhosts inside one context\b\u0005\u0002\u0007\u001c0x55eedc165b70\u0004\u0007\u0016TextComment... <skipped 80 characters> ...\n 53795  \b\u0004 \u0005√¥√π\u0005$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005≈í√ª\u0005$\u0005≈æ\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 216 characters> ...nclude/libwebsockets.h\u0010\u0007≈Ω\u0001quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h\b\b\u0002\n 53796  \b\u0006 \u0005√Ü≈†\u0006\"\u0005√ö\u0011$\u00050&\u0005\b(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\u0010\u0007≈Ω\u0001quickjs/qjs-lws/libw... <skipped 286 characters> ...eedbefa730\u0004\u0007\u0016ParmVarDecl\u0006\b\u0004 \u0005Àú‚Äπ\u0006$\u0005J&\u0005\u0004(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n .....\n 54704  \b\u0004 \u0005¬∏¬≥\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√ê¬¥\u0001$\u0005≈æ\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 145 characters> ...0\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005√û¬¥\u0001\"\u0005√à\u0004$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 54705  \b\u0004 \u0005√û¬¥\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√ä¬µ\u0001$\u0005r&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/... <skipped 57 characters> ...eedc16ac80\u0004\u0007\u0016TextComment\u0006\b\u0004 \u0005√û¬¥\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 54706: <skipped 63 characters> ...sockets.h\f\b\u0004 \u0005√ä¬µ\u0001$\u0005r&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u0007n The following members of info are used during the call\b\u0005\u0002\u0007\u001c0x55eedc16ae10\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005√ò¬µ\u0001\"\u0005√å\u0004$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquick... <skipped 51 characters> ...\n 54707  \b\u0004 \u0005√ò¬µ\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0005 \u0005√ê¬Ω\u0001\"\u0005√ö\u0004$\u0005≈†\u0001&\u0005\u0002(\b\u0001\u0010\u0007jqui... <skipped 66 characters> ...16acd0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√ò¬µ\u0001\"\u0005√å\u0004$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 54708  \b\u0004 \u0005√ò¬µ\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√î¬∂\u0001$\u0005‚Äö\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 125 characters> ...16acf0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√ú¬∂\u0001\"\u0005√é\u0004$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n .....\n 57822  \b\u0004 \u0005¬¨¬≠\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005¬º¬Æ\u0001$\u0005‚Äì\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 136 characters> ...188380\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√Ñ¬Æ\u0001\"\u0005≈í\u0005$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 57823  \b\u0004 \u0005√Ñ¬Æ\u0001$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√û¬Ø\u0001$\u0005¬†\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 141 characters> ...1883a0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√¶¬Ø\u0001\"\u0005≈Ω\u0005$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 57824: <skipped 65 characters> ...ckets.h\f\b\u0004 \u0005‚Äì¬∞\u0001$\u00056&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u00072 extensible JSON members.\b\b\u0002\u0007\u001c0x55eedbf31f08\u0004\u0007\u0018FunctionDecl\u0006\b\u0006 \u0005√∫¬Ω\u0001\"\u0005¬º\u0005$\u0005\u0002&\u0005,(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/lib... <skipped 80 characters> ...\n 57825  \b\u0006 \u0005√≤¬Ω\u0001\"\u0005¬∫\u0005$\u00050&\u0005\u0006(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\u0010\u0007|quickjs/qjs-lws/libwe... <skipped 306 characters> ...eedbf31c40\u0004\u0007\u0016ParmVarDecl\u0006\b\u0004 \u0005√Ä¬æ\u0001$\u0005H&\u0005\u0006(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 57826  \b\u0004 \u0005¬®¬æ\u0001$\u00050&\u0005\n .....\n 60361  \b\u0004 \u0005√í\u0015$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005‚Ä†\u0016$\u0005:&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 89 characters> ...af0\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005‚Äù\u0016\"\u0005>$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 60362  \b\u0004 \u0005‚Äù\u0016$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005≈æ\u0017$\u0005¬ê\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 55 characters> ...5eedc19aac0\u0004\u0007\u0016TextComment\u0006\b\u0004 \u0005‚Äù\u0016$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 60363: <skipped 60 characters> ...ebsockets.h\f\b\u0004 \u0005≈æ\u0017$\u0005¬ê\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u0007≈í\u0001 All of the members are opaque and manipulated by lws_ring_...() apis.\b\u0005\u0002\u0007\u001c0x55eedc19ab40\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005¬¨\u0017\"\u0005B$... <skipped 67 characters> ...\n 60364  \b\u0004 \u0005¬¨\u0017$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005¬∏\u0018$\u0005‚Äô\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 55 characters> ...5eedc19ab10\u0004\u0007\u0016TextComment\u0006\b\u0004 \u0005¬¨\u0017$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 60365  \b\u0004 \u0005¬¨\u0017$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005¬∏\u0018$\u0005‚Äô\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 135 characters> ...bb0\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005√Ü\u0018\"\u0005F$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n .....\n 64377   The \b\u0007\u0002\u0007\u001c0x55eedc1af360\u0004\u0007(InlineCommandComment\u0006\b\u0004 \u0005¬¢Z$\u0005\u0010&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 64378  \b\u0004 \u0005¬¢Z$\u0005\u0010&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005¬§Z$\u0005\u0012&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 75 characters> ...5eedc1af380\u0004\u0007\u0016TextComment\u0006\b\u0004 \u0005¬¨Z$\u0005\u001a&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 64379: <skipped 93 characters> ...ickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u0007‚Ä†\u0001 struct should have its start, len and flags members initialized to\b\u0005\u0002\u0007\u001c0x55eedc1af3a0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005¬∏[\"\u0005¬¢\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 64380  \b\u0004 \u0005¬∏[$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005≈æ\\$\u0005l&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 115 characters> ...a0\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005¬¨\\\"\u0005¬¶\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 64381  \b\u0004 \u0005¬¨\\$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0005 \u0005‚Äì`\"\u0005¬¨\u0002$\u0005*&\u0005\u0002(\b\u0001\u0010\u0007jquickj... <skipped 62 characters> ...c1af400\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005¬¨\\\"\u0005¬¶\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 64382  \b\u0004 \u0005¬¨\\$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√Ç]$\u0005≈ì\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 136 characters> ...c1af420\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√ä]\"\u0005¬®\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 64383  \b\u0004 \u0005√ä]$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√ê^$\u0005≈í\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 128 characters> ...c1af440\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√ò^\"\u0005¬™\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 64384: <skipped 61 characters> ...bsockets.h\f\b\u0004 \u0005√™_$\u0005Àú\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u0007‚Äù\u0001 `token_len` members set to describe the content of the delimiter or token\b\u0005\u0002\u0007\u001c0x55eedc1af460\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√≤_\"\u0005¬¨\u0002$\u0005... <skipped 66 characters> ...\n 64385  \b\u0004 \u0005√≤_$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005‚Äì`$\u0005*&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 82 characters> ...f0\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005¬§`\"\u0005¬∞\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 64386  \b\u0004 \u0005¬§`$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√º`$\u0005^&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 54 characters> ...5eedc1af4c0\u0004\u0007\u0016TextComment\u0006\b\u0004 \u0005¬§`$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n .....\n 65175  \b\u0004 \u0005‚Äô]$\u0005 &\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005‚Äö^$\u0005¬ê\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 121 characters> ...b0\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005¬ê^\"\u0005√∫\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 65176  \b\u0004 \u0005¬ê^$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0005 \u0005¬≤a\"\u0005√æ\u0002$\u0005t&\u0005\u0002(\b\u0001\u0010\u0007jquickj... <skipped 62 characters> ...c1b5330\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005¬ê^\"\u0005√∫\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 65177: <skipped 105 characters> ...s/libwebsockets/include/libwebsockets.hb\u0007Àú\u0001 The caller should memset the ftsp struct to 0 to ensure members that may be\b\u0005\u0002\u0007\u001c0x55eedc1b5350\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005¬Æ_\"\u0005√º\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 65178  \b\u0004 \u0005¬Æ_$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005¬º`$\u0005‚Äù\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 132 characters> ...c1b5370\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√Ñ`\"\u0005√æ\u0002$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 65179: <skipped 47 characters> .../include/libwebsockets.h\f\b\u0004 \u0005¬≤a$\u0005t&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u0007p members to describe the kind of search action required.\b\u0005\u0002\u0007\u001c0x55eedc1b5420\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005√Äa\"\u0005‚Äö\u0003$\u0005\u0006... <skipped 65 characters> ...\n 65180  \b\u0004 \u0005√Äa$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0005 \u0005¬ºc\"\u0005‚Äû\u0003$\u0005f&\u0005\u0002(\b\u0001\u0010\u0007jquickj... <skipped 62 characters> ...c1b53d0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√Äa\"\u0005‚Äö\u0003$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 65181  \b\u0004 \u0005√Äa$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√îb$\u0005≈°\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 135 characters> ...c1b53f0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√úb\"\u0005‚Äû\u0003$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n .....\n 66672  \b\u0004 \u0005√Ñ\u0019$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√¶\u0019$\u0005(&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 80 characters> ...9b0\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005√¥\u0019\"\u0005J$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 66673  \b\u0004 \u0005√¥\u0019$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0005 \u0005√∞\u001c\"\u0005N$\u0005P&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 60 characters> ...dc1c2930\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√¥\u0019\"\u0005J$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 66674: <skipped 83 characters> ...\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u0007‚Äù\u0001 The secure stream object contains members to record which auth plugin the\b\u0005\u0002\u0007\u001c0x55eedc1c2950\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005≈Ω\u001b\"\u0005L$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-l... <skipped 43 characters> ...\n 66675  \b\u0004 \u0005≈Ω\u001b$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005≈æ\u001c$\u0005‚Äì\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 132 characters> ...dc1c2970\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005¬¶\u001c\"\u0005N$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 66676  \b\u0004 \u0005¬¶\u001c$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√∞\u001c$\u0005P&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 100 characters> ...a20\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005√æ\u001c\"\u0005R$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n .....\n 66706  \b\u0004 \u0005√Ñ\u0019$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√¶\u0019$\u0005(&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 80 characters> ...e00\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005√¥\u0019\"\u0005J$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 66707  \b\u0004 \u0005√¥\u0019$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0005 \u0005√∞\u001c\"\u0005N$\u0005P&\u0005\u0002(\b\u0001\u0010\u0007jquickjs... <skipped 60 characters> ...dc1c4d80\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√¥\u0019\"\u0005J$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 66708: <skipped 83 characters> ...\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.hb\u0007‚Äù\u0001 The secure stream object contains members to record which auth plugin the\b\u0005\u0002\u0007\u001c0x55eedc1c4da0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005≈Ω\u001b\"\u0005L$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-l... <skipped 43 characters> ...\n 66709  \b\u0004 \u0005≈Ω\u001b$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005≈æ\u001c$\u0005‚Äì\u0001&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/q... <skipped 132 characters> ...dc1c4dc0\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005¬¶\u001c\"\u0005N$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n 66710  \b\u0004 \u0005¬¶\u001c$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\f\b\u0004 \u0005√∞\u001c$\u0005P&\u0005\u0002(\b\u0001\u0010\u0007jquickjs/qj... <skipped 100 characters> ...e70\u0004\u0007 ParagraphComment\u0006\b\u0005 \u0005√æ\u001c\"\u0005R$\u0005\u0006&\u0005\u0000(\b\u0001\u0010\u0007jquickjs/qjs-lws/libwebsockets/include/libwebsockets.h\b\b\u0002\n\n~/Projects/plot-cv/opencv-video.c:\n   30    // decoder pointer\n   31    AVCodec *videoCodec, *audioCodec;\n   32:   // Class members of the ffmpeg decoding class\n   33    AVCodecContext* pCodecCtx;\n   34    // Multimedia frame, save the decoded data frame\n\n~/Projects/plot-cv/sed.sh:\n   97  sed -e $'1 i\\\\\\nimport { className, extend, getMethodNames, getMethods } from \\'./misc.js\\';\\n' -i lib/iterator.js\n   98  sed -e $'1 i\\\\\\nimport { makeURL } from \\'./misc.js\\';\\n' -i lib/axios.js\n   99: <skipped 3746 characters> ...mapFunction, mapFunctional, mapReducer, mapWrapper, match, matchAll, match.apply, memberNameFilter, members, memoize, memoizedProperties, merge, mergeLists, mergeObjects, methodNameFilter, minmax, mod, move,... <skipped 1894 characters> ...\n  100  sed -e $'1 i\\\\\\nimport { getMemberNames, isFunction, isNaN, isNumber, keys } from \\'./misc.js\\';\\n' -i lib/eventEmitter.js\n  101  sed -e $'1 i\\\\\\nimport { bindMethods, toSource } from \\'./misc.js\\';\\n' -i lib/swipeTracker.js\n\n~/Projects/plot-cv/svg-crop-pad.es:\n 4215    if(x !== undefined) {\n 4216      let ret,\n 4217:       members = [];\n 4218      const handler = {\n 4219        construct(target, args) {\n ....\n 4227      }\n 4228      let proto = (x && x.prototype) || Object.getPrototypeOf(ret);\n 4229:     members = Util.getMemberNames(proto).filter(m => m !== 'constructor');\n 4230:     //console.log('members:', !!ret, members, Util.fnName(x));\n 4231:     return !!ret && members.length > 0;\n 4232    }\n 4233  };\n ....\n 5191      predicates.some(pred => pred(...args));\n 5192  \n 5193: Util.members = Util.curry((pred, obj) => Util.unique([...Util.iterateMembers(obj, Util.tryPredicate(pred))]));\n 5194  \n 5195  Util.memberNameFilter = (depth = 1, start = 0) =>\n ....\n 5214    }\n 5215    filters.unshift(Util.memberNameFilter(depth, start));\n 5216:   return Util.members(Util.and(...filters))(obj);\n 5217  };\n 5218  Util.getMemberEntries = (obj, ...args) => Util.getMemberNames(obj, ...args).map(name => [name, obj[name]]);\n ....\n 5221    (filterFn, accFn = (a, m, o) => ({ ...a, [m]: o[m] }), accu = {}) =>\n 5222    (obj, ...args) =>\n 5223:     Util.members(filterFn(...args), obj).reduce(\n 5224        Util.tryFunction(\n 5225          (a, m) => accFn(a, m, obj),\n ....\n 5255    fn = function ReduceIntoMap(arg, acc = mapObj) {\n 5256      if(Util.isObject(arg) && typeof arg.reduce == 'function')\n 5257:       return arg.reduce((acc, arg) => (Array.isArray(arg) ? arg : Util.members(arg)).reduce(reducer, acc), self.map);\n 5258      let c = Util.counter();\n 5259      for(let mem of arg) acc = next(acc, mem, c());\n ....\n 5281    );\n 5282  \n 5283: Util.getMethodNames = (obj, depth = 1, start = 0) => Util.members(Util.methodNameFilter(depth, start))(obj);\n 5284  \n 5285  Util.getMethods = Util.objectReducer(Util.methodNameFilter);\n\n~/Projects/plot-cv/test-labsound.ast.bjson:\n    File too large, skipping\n\n~/Projects/plot-cv/test-stk.ast.bjson:\n 367078  \b\u0004 \u0005√à√´\u0002$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\f\b\u0004 \u0005¬º√¨\u0002$\u0005v&\u0005\u0002(\b\u0001\u0010\u0007\u0018test-stk.cpp√ä\u0002\u0007v    RTAUDIO_INVALID_USE will be passed to the user-provided\b\u0005\u0002\u0007\u001c0x55f1cfa1e200\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√Ä√¨\u0002\"\u0005√Ü\u0007$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\b\b\u0002\n 367079  \b\u0004 \u0005√Ä√¨\u0002$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\f\b\u0004 \u0005√Ñ√≠\u0002$\u0005‚Ä†\u0001&\u0005\u0002(\b\u0001\u0010\u0007\u0018test-stk.cpp√ä\u0002\u0007‚Ä†\u0001    errorCallback function (or otherwise printed to stderr) and all\b\u0005\u0002\u0007\u001c0x55f1cfa1e220\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√à√≠\u0002\"\u0005√à\u0007$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\b\b\u0002\n 367080: \b\u0004 \u0005√à√≠\u0002$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\f\b\u0004 \u0005√à√Æ\u0002$\u0005‚Äö\u0001&\u0005\u0002(\b\u0001\u0010\u0007\u0018test-stk.cpp√ä\u0002\u0007‚Äö\u0001    members of the returned RtAudio::DeviceInfo structure will be\b\u0005\u0002\u0007\u001c0x55f1cfa1e240\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√å√Æ\u0002\"\u0005√ä\u0007$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\b\b\u0002\n 367081  \b\u0004 \u0005√å√Æ\u0002$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\f\b\u0004 \u0005√î√Ø\u0002$\u0005≈†\u0001&\u0005\u0002(\b\u0001\u0010\u0007\u0018test-stk.cpp√ä\u0002\u0007≈†\u0001    initialized to default, invalid values (ID = 0, empty name, ...).\b\u0005\u0002\u0007\u001c0x55f1cfa1e260\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√ò√Ø\u0002\"\u0005√å\u0007$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\b\b\u0002\n 367082  \b\u0004 \u0005√ò√Ø\u0002$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\f\b\u0004 \u0005√ö√∞\u0002$\u0005‚Äû\u0001&\u0005\u0002(\b\u0001\u0010\u0007\u0018test-stk.cpp√ä\u0002\u0007‚Äû\u0001    If the specified device is the current default input or output\b\u0005\u0002\u0007\u001c0x55f1cfa1e280\u0004\u0007\u0016TextComment\u0006\b\u0005 \u0005√û√∞\u0002\"\u0005√é\u0007$\u0005\u0002&\u0005\u0000(\b\u0001\u0010\u0007\u0018test-stk.cpp\b\b\u0002\n\n~/Projects/plot-cv/test-stk2.ast.bjson:\n    File too large, skipping\n\n~/Projects/plot-cv/video.mp4:\n    File too large, skipping\n\n~/Projects/plot-cv/webaudio.js:\n    1: export default \"{\\\"members\\\":[[{\\\"value\\\":\\\"AudioBuffer\\\"},{\\\"name\\\":\\\"AudioBuffer\\\",\\\"length\\\":1,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"length\\\"},{\\\"get\\\":\\\"function length() {  }\\\"}],[{\\\"value\\\":\\\"duration\\\"},{\\\"get\\\"... <skipped 162 characters> ...OfChannels() {  }\\\"}],[{\\\"value\\\":\\\"copyFromChannel\\\"},{\\\"name\\\":\\\"copyFromChannel\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"copyToChannel\\\"},{\\\"name\\\":\\\"copyToChannel\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"getChannelData\\\"},{\\\"name\\\":\\\"getChannelData\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioBuffer\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioBufferSourceNode\\\"},{\\\"name\\\":\\\"AudioBufferSourceNode\\\",\\\"length\\\":1,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"buffer\\\"},{\\\"get\\\":\\\"function buffer() {  }\\\",\\\"set\\\":\\\"function buffer() {  }\\\"}]... <skipped 392 characters> ...}\\\",\\\"set\\\":\\\"function loopEnd() {  }\\\"}],[{\\\"value\\\":\\\"start\\\"},{\\\"name\\\":\\\"start\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioBufferSourceNode\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioContext\\\"},{\\\"name\\\":\\\"AudioContext\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"baseLatency\\\"},{\\\"get\\\":\\\"function baseLatency() {  }\\\"}],[{\\\"value\\\":\\\"outputLatency\\\"},{\\\"get\\\":\\\"function outputLatency() {  }\\\"}],[{\\\"value\\\":\\\"close\\\"},{\\\"name\\\":\\\"close\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"createMediaElementSource\\\"},{\\\"name\\\":\\\"createMediaElementSource\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"createMediaStreamDestination\\\"},{\\\"name\\\":\\\"createMediaStreamDestination\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"createMediaStreamSource\\\"},{\\\"name\\\":\\\"createMediaStreamSource\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"getOutputTimestamp\\\"},{\\\"name\\\":\\\"getOutputTimestamp\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"resume\\\"},{\\\"name\\\":\\\"resume\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"suspend\\\"},{\\\"name\\\":\\\"suspend\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"onerror\\\"},{\\\"get\\\":\\\"function onerror() {  }\\\",\\\"set\\\":\\\"function onerror() {... <skipped 186 characters> ...\"function onsinkchange() {  }\\\"}],[{\\\"value\\\":\\\"setSinkId\\\"},{\\\"name\\\":\\\"setSinkId\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioContext\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioDestinationNode\\\"},{\\\"name\\\":\\\"AudioDestinationNode\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"maxChannelCount\\\"},{\\\"get\\\":\\\"function maxChannelCount() {  }\\\"}],[{\\\"value\\\":\\\"co... <skipped 67 characters> ...DestinationNode\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioListener\\\"},{\\\"name\\\":\\\"AudioListener\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"positionX\\\"},{\\\"get\\\":\\\"function positionX() {  }\\\"}],[{\\\"value\\\":\\\"positionY\\\"},{... <skipped 450 characters> ...function upZ() {  }\\\"}],[{\\\"value\\\":\\\"setOrientation\\\"},{\\\"name\\\":\\\"setOrientation\\\",\\\"length\\\":6,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setPosition\\\"},{\\\"name\\\":\\\"setPosition\\\",\\\"length\\\":3,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioListener\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioNode\\\"},{\\\"name\\\":\\\"AudioNode\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"context\\\"},{\\\"get\\\":\\\"function context() {  }\\\"}],[{\\\"value\\\":\\\"numberOfInputs\\\"},... <skipped 472 characters> ...tion channelInterpretation() {  }\\\"}],[{\\\"value\\\":\\\"connect\\\"},{\\\"name\\\":\\\"connect\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"disconnect\\\"},{\\\"name\\\":\\\"disconnect\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioNode\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioParam\\\"},{\\\"name\\\":\\\"AudioParam\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"value\\\"},{\\\"get\\\":\\\"function value() {  }\\\",\\\"set\\\":\\\"function value() {  }\\\"}],[{... <skipped 311 characters> ...ue() {  }\\\"}],[{\\\"value\\\":\\\"cancelAndHoldAtTime\\\"},{\\\"name\\\":\\\"cancelAndHoldAtTime\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"cancelScheduledValues\\\"},{\\\"name\\\":\\\"cancelScheduledValues\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"exponentialRampToValueAtTime\\\"},{\\\"name\\\":\\\"exponentialRampToValueAtTime\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"linearRampToValueAtTime\\\"},{\\\"name\\\":\\\"linearRampToValueAtTime\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setTargetAtTime\\\"},{\\\"name\\\":\\\"setTargetAtTime\\\",\\\"length\\\":3,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setValueAtTime\\\"},{\\\"name\\\":\\\"setValueAtTime\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setValueCurveAtTime\\\"},{\\\"name\\\":\\\"setValueCurveAtTime\\\",\\\"length\\\":3,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioParam\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioScheduledSourceNode\\\"},{\\\"name\\\":\\\"AudioScheduledSourceNode\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"onended\\\"},{\\\"get\\\":\\\"function onended() {  }\\\",\\\"set\\\":\\\"function onended() {  }\\\"}],[{\\\"value\\\":\\\"start\\\"},{\\\"name\\\":\\\"start\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"stop\\\"},{\\\"name\\\":\\\"stop\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioScheduledSourceNode\\\"}]]}]]}],[{\\\"value\\\":\\\"OscillatorNode\\\"},{\\\"name\\\":\\\"OscillatorNode\\\",\\\"length\\\":1,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"type\\\"},{\\\"get\\\":\\\"function type() {  }\\\",\\\"set\\\":\\\"function type() {  }\\\"}],[{\\\"v... <skipped 103 characters> ...ion detune() {  }\\\"}],[{\\\"value\\\":\\\"setPeriodicWave\\\"},{\\\"name\\\":\\\"setPeriodicWave\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"OscillatorNode\\\"}]]}]]}]]}\";\n    2  \n\n~/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/cimgui/imgui/imgui.cpp:\n 2983  \n 2984  // Internal state access - if you want to share ImGui state between modules (e.g. DLL) or allocate it yourself\n 2985: // Note that we still point to some static data and members (such as GFontAtlas), so the state instance you end up using will point to the static data within its module\n 2986  ImGuiContext* ImGui::GetCurrentContext()\n 2987  {\n\n~/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/cimgui/imgui/imgui.h:\n 1057  // Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.\n 1058  // NB: the enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code. During initialization, feel free to just poke into ImGuiStyle directly.\n 1059: <skipped 45 characters> ...ate the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.\n 1060  enum ImGuiStyleVar_\n 1061  {\n\n~/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/docs/Doxyfile.in:\n   78  \n   79  # If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will\n   80: # include brief member descriptions after the members that are listed in\n   81  # the file and class documentation (similar to JavaDoc).\n   82  # Set to NO to disable this.\n   ..\n  110  \n  111  # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n  112: # inherited members of a class in the documentation of that class as if those\n  113: # members were ordinary class members. Constructors, destructors and assignment\n  114  # operators of the base classes will not be shown.\n  115  \n  ...\n  218  # sources only. Doxygen will then generate output that is more tailored for C.\n  219  # For instance, some of the names that are used will be different. The list\n  220: # of all members will be omitted, etc.\n  221  \n  222  OPTIMIZE_OUTPUT_FOR_C  = YES\n  ...\n  301  # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n  302  # tag is set to YES, then doxygen will reuse the documentation of the first\n  303: # member in the group (if any) for the other members of the group. By default\n  304: # all members of a group must be documented explicitly.\n  305  \n  306  DISTRIBUTE_GROUP_DOC   = NO\n  ...\n  357  # If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in\n  358  # documentation are documented, even if no documentation was available.\n  359: # Private class members and static file members will be hidden unless\n  360  # the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES\n  361  \n  362  EXTRACT_ALL            = YES\n  363  \n  364: # If the EXTRACT_PRIVATE tag is set to YES all private members of a class\n  365  # will be included in the documentation.\n  366  \n  367  EXTRACT_PRIVATE        = NO\n  368  \n  369: # If the EXTRACT_PACKAGE tag is set to YES all members with package or internal\n  370  # scope will be included in the documentation.\n  371  \n  372  EXTRACT_PACKAGE        = NO\n  373  \n  374: # If the EXTRACT_STATIC tag is set to YES all static members of a file\n  375  # will be included in the documentation.\n  376  \n  ...\n  390  EXTRACT_LOCAL_METHODS  = NO\n  391  \n  392: # If this flag is set to YES, the members of anonymous namespaces will be\n  393  # extracted and appear in the documentation as a namespace called\n  394  # 'anonymous_namespace{file}', where file will be replaced with the base\n  ...\n  399  \n  400  # If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all\n  401: # undocumented members of documented classes, files or namespaces.\n  402: # If set to NO (the default) these members will be included in the\n  403  # various overviews, but no documentation section is generated.\n  404  # This option has no effect if EXTRACT_ALL is enabled.\n  ...\n  443  \n  444  # If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen\n  445: # will show members with their full class and namespace scopes in the\n  446  # documentation. If set to YES the scope will be hidden.\n  447  \n  ...\n  461  \n  462  # If the INLINE_INFO tag is set to YES (the default) then a tag [inline]\n  463: # is inserted in the documentation for inline members.\n  464  \n  465  INLINE_INFO            = YES\n  466  \n  467  # If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen\n  468: # will sort the (detailed) documentation of file and class members\n  469: # alphabetically by member name. If set to NO the members will appear in\n  470  # declaration order.\n  471  \n  ...\n  473  \n  474  # If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the\n  475: # brief documentation of file, namespace and class members alphabetically\n  476: # by member name. If set to NO (the default) the members will appear in\n  477  # declaration order.\n  478  \n  ...\n  480  \n  481  # If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen\n  482: # will sort the (brief and detailed) documentation of class members so that\n  483  # constructors and destructors are listed first. If set to NO (the default)\n  484  # the constructors will appear in the respective orders defined by\n  ...\n  619  \n  620  # If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings\n  621: # for undocumented members. If EXTRACT_ALL is set to YES then this flag will\n  622  # automatically be disabled.\n  623  \n  ...\n 1059  BINARY_TOC             = NO\n 1060  \n 1061: # The TOC_EXPAND flag can be set to YES to add extra items for group members\n 1062  # to the contents of the HTML help documentation and to the tree view.\n 1063  \n\n~/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/docs/internal.dox:\n   17  \n   18  The public interface uses the OpenGL naming conventions except with GLFW and\n   19: glfw instead of GL and gl.  For struct members, where OpenGL sets no precedent,\n   20  it use headless camel case.\n   21  \n   ..\n   75  Examples: `_GLFWwindowX11`, `_GLFWcontextWGL`\n   76  \n   77: These structs are incorporated as members into the internal interface structs\n   78  using special macros that name them after the specific interface used.  This\n   79: prevents shared code from accidentally using these members.\n   80  \n   81  Examples: `window->win32.handle`, `_glfw.x11.display`\n\n~/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/include/GLFW/glfw3.h:\n 1634   *\n 1635   *  @since Added in version 2.1.\n 1636:  *  @glfw3 Removed format and bytes-per-pixel members.\n 1637   *\n 1638   *  @ingroup window\n\n~/Projects/plot-cv/data/ar-wrap.functions.js:\n 1088  \n 1089  define('array_shift', dlsym(RTLD_DEFAULT, 'array_shift'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1090: export function array_shift(x, membersize, members) {\n 1091:   call('array_shift', x, membersize, members);\n 1092  }\n 1093  \n 1094  define('array_chop', dlsym(RTLD_DEFAULT, 'array_chop'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1095: export function array_chop(x, membersize, members) {\n 1096:   call('array_chop', x, membersize, members);\n 1097  }\n 1098  \n\n~/Projects/plot-cv/data/mplab.functions.js:\n 1575  \n 1576  define('array_shift', dlsym(RTLD_DEFAULT, 'array_shift'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1577: export function array_shift(x, membersize, members) {\n 1578:   call('array_shift', x, membersize, members);\n 1579  }\n 1580  \n 1581  define('array_chop', dlsym(RTLD_DEFAULT, 'array_chop'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1582: export function array_chop(x, membersize, members) {\n 1583:   call('array_chop', x, membersize, members);\n 1584  }\n 1585  \n\n~/Projects/plot-cv/lc-meter/protel/LCmeter0-LCD-8pinlcd-PIC_COMP.DDB:\n    <binary>\n\n~/Projects/plot-cv/lib/avfs.js:\n  116    );\n  117  \n  118:   // fs members\n  119  \n  120    this.Stats = factories.stats(constants, { birthtime: true, milliseconds: true });\n\n~/Projects/plot-cv/lib/dom.js:\n   29  \n   30    const extend = (e, functions) => {\n   31:     const keys = [...members(functions)].filter(\n   32        key => ['callee', 'caller', 'arguments', 'call', 'bind', 'apply', 'prototype', 'constructor', 'length'].indexOf(key) == -1 && typeof functions[key] == 'function'\n   33      );\n\n~/Projects/plot-cv/lib/lazyInitializer.js:\n   42  }\n   43  \n   44: export function lazyMembers(obj, members) {\n   45    let initializers = {};\n   46  \n   47:   for(let name in members) {\n   48:     initializers[name] = lazyInitializer(members[name]);\n   49  \n   50      Object.defineProperty(obj, name, {\n\n~/Projects/plot-cv/lib/lua.js:\n 1514    }\n 1515  \n 1516:   parse_funcname(members = true) {\n 1517      /*fname    ::= <NAME> {'.' <NAME>} [':' <NAME>] */\n 1518  \n 1519      let funcname = this.parse_name();\n 1520  \n 1521:     if(members) {\n 1522        while(this.cur_token.value == '.') {\n 1523          this.next();\n ....\n 2044    }\n 2045  \n 2046:   parse_prefixexp(members = true) {\n 2047      /*\n 2048          prefixexp   ::= <NAME>\n ....\n 2056        return expr;\n 2057      }\n 2058:     return this.parse_funcname(members);\n 2059    }\n 2060  \n\n~/Projects/plot-cv/lib/testharness.js:\n 1565  \n 1566      /**\n 1567:      * Assert that ``expected`` is an array and ``actual`` is one of the members.\n 1568       * This is implemented using ``indexOf``, so doesn't handle NaN or ¬±0 correctly.\n 1569       *\n\n~/Projects/plot-cv/lib/util.js:\n 2447    if(x !== undefined) {\n 2448      let ret,\n 2449:       members = [];\n 2450      const handler = {\n 2451        construct(target, args) {\n ....\n 2459      }\n 2460      let proto = (x && x.prototype) || Object.getPrototypeOf(ret);\n 2461:     members = Util.getMemberNames(proto).filter(m => m !== 'constructor');\n 2462:     //console.log('members:', !!ret, members, Util.fnName(x));\n 2463:     return !!ret && members.length > 0;\n 2464    }\n 2465  };\n ....\n 3389      predicates.some(pred => pred(...args));\n 3390  \n 3391: Util.members = Util.curry((pred, obj) => Util.unique([...Util.iterateMembers(obj, Util.tryPredicate(pred))]));\n 3392  \n 3393  Util.memberNameFilter = (depth = 1, start = 0) =>\n ....\n 3412    }\n 3413    filters.unshift(Util.memberNameFilter(depth, start));\n 3414:   return Util.members(Util.and(...filters))(obj);\n 3415  };\n 3416  Util.getMemberEntries = (obj, ...args) => Util.getMemberNames(obj, ...args).map(name => [name, obj[name]]);\n ....\n 3419    (filterFn, accFn = (a, m, o) => ({ ...a, [m]: o[m] }), accu = {}) =>\n 3420    (obj, ...args) =>\n 3421:     Util.members(filterFn(...args), obj).reduce(\n 3422        Util.tryFunction(\n 3423          (a, m) => accFn(a, m, obj),\n ....\n 3450    let next = Util.tryFunction(((acc, mem, idx) => (filterFn(mem, idx) ? (setFn(idx, mem), acc) : null), r => r, () => mapObj));\n 3451    fn = function ReduceIntoMap(arg, acc = mapObj) {\n 3452:     if(Util.isObject(arg) && typeof arg.reduce == 'function') return arg.reduce((acc, arg) => (Array.isArray(arg) ? arg : Util.members(arg)).reduce(reducer, acc), self.map);\n 3453      let c = Util.counter();\n 3454      for(let mem of arg) acc = next(acc, mem, c());\n ....\n 3476    );\n 3477  \n 3478: Util.getMethodNames = (obj, depth = 1, start = 0) => Util.members(Util.methodNameFilter(depth, start))(obj);\n 3479  \n 3480  Util.getMethods = Util.objectReducer(Util.methodNameFilter);\n\n~/Projects/plot-cv/lib/ecmascript/environment.js:\n  337      let self = this;\n  338      let items = [];\n  339:     const { members } = node;\n  340      log({ items, node });\n  341:     node.members.forEach(property => {\n  342        // object expression keys are static so can be calculated\n  343        // immediately\n\n~/Projects/plot-cv/lib/ecmascript/estree.js:\n   31  \n   32    /* toJSON() {\n   33:     let members = getMembers();\n   34:     for(let prop in members) {\n   35:       let value = members[prop];\n   36        if(isObject(value) && value instanceof ESNode)\n   37:         members[prop] = value.toJSON();\n   38      }\n   39:     return members;\n   40    }*/\n   41  }\n   ..\n  776  ESNode.prototype.toString = function() {\n  777    let s = '';\n  778: <skipped 95 characters> ...ons', 'exported', 'expression', 'expressions', 'id', 'identifiers', 'init', 'kind', 'left', 'loc', 'members', 'object', 'operator', 'params', 'prefix', 'property', 'right', 'source', 'test', 'update', 'value'].forEach((field) => {\n  779      if(this[field]) {\n  780        let value = this[field];\n\n~/Projects/plot-cv/lib/ecmascript/interpreter.js:\n  203  \n  204    evalClassDeclaration(class_declaration) {\n  205:     const { id, extending, members } = class_declaration;\n  206:     console.log('class_declaration:', { id, extending, members });\n  207      let fn = this.scope.newValue(id, ECMAScriptValue.types.function);\n  208      let obj = this.scope.newValue(id, ECMAScriptValue.types.object);\n  209  \n  210:     for(let member of members) {\n  211        let prop = this.evalNode(member);\n  212        console.log('member:', prop);\n  ...\n  358  \n  359    evalObjectLiteral(object_literal) {\n  360:     const { members } = object_literal;\n  361      let obj = new ECMAScriptObject();\n  362:     for(let member of members) {\n  363        let prop = this.evalNode(member);\n  364        console.log('member:', prop);\n\n~/Projects/plot-cv/lib/ecmascript/parser.js:\n 1265      this.log(`parseArray()`);\n 1266      let object,\n 1267:       members = [];\n 1268      this.expectPunctuators('[');\n 1269  \n ....\n 1286        }\n 1287  \n 1288:       members.push(element);\n 1289  \n 1290        if(this.matchPunctuators(',')) this.expectPunctuators(',');\n 1291      }\n 1292      this.expectPunctuators(']');\n 1293:     object = new ArrayExpression(members);\n 1294  \n 1295      /*\n ....\n 1369      let tok2, tok3;\n 1370      this.log(`parseJSX(${depth})`);\n 1371:     let members = [];\n 1372      for(;;) {\n 1373        this.lexer.noRegex = true;\n ....\n 1376        if(tok2.value == '/') break;\n 1377        let tag = this.parseJSXTag();\n 1378:       members.push(tag);\n 1379:       let jsx = members[members.length - 1];\n 1380        jsx.children = [];\n 1381        if(jsx.selfClosing && depth == 0) break;\n ....\n 1423      if(depth == 0) {\n 1424        this.lexer.noRegex = false;\n 1425:       return members[0];\n 1426      }\n 1427:     return members;\n 1428    }\n 1429  \n ....\n 1978      //console.log(\"parseClass decl=\", decl);\n 1979      if(this.matchPunctuators(';')) this.expectPunctuators(';');\n 1980:     //let decl = new ClassDeclaration(identifier, extending, members);\n 1981  \n 1982      if(exported) decl = new ExportNamedDeclaration(decl);\n\n~/Projects/plot-cv/lib/ecmascript/parser2.js:\n 1545      //this.log(`parseArray()`);\n 1546      let object,\n 1547:       members = [];\n 1548      this.expectPunctuators(['[']);\n 1549  \n ....\n 1554        if(this.matchPunctuators([','])) {\n 1555          this.expectPunctuators([',']);\n 1556:         members.push(null);\n 1557          continue;\n 1558        }\n ....\n 1571        }\n 1572  \n 1573:       members.push(element);\n 1574  \n 1575        if(this.matchPunctuators([','])) this.expectPunctuators([',']);\n 1576      }\n 1577      this.expectPunctuators([']']);\n 1578:     object = this.addNode(ArrayExpression, members);\n 1579  \n 1580      /*\n ....\n 1652      let tok2, tok3;\n 1653      //this.log(`parseJSX(${depth})`);\n 1654:     let members = [];\n 1655      for(;;) {\n 1656        this.lexer.noRegex = true;\n ....\n 1659        if(tok2.value == '/') break;\n 1660        let tag = this.parseJSXTag();\n 1661:       members.push(tag);\n 1662:       let jsx = members[members.length - 1];\n 1663        jsx.children = [];\n 1664        if(jsx.selfClosing && depth == 0) break;\n ....\n 1703      if(depth == 0) {\n 1704        this.lexer.noRegex = false;\n 1705:       return members[0];\n 1706      }\n 1707:     return members;\n 1708    }\n 1709  \n ....\n 2290  \n 2291      if(this.matchPunctuators([';'])) this.expectPunctuators([';']);\n 2292:     //let decl = this.addNode(ClassDeclaration, identifier, extending, members);\n 2293  \n 2294      if(exported) decl = this.addNode(ExportNamedDeclaration, decl);\n\n~/Projects/plot-cv/lib/ecmascript/printer.js:\n  660    printClassDeclaration(class_declaration) {\n  661      const { id, superClass, body } = class_declaration;\n  662:     const members = body.body;\n  663:     //console.log('printClassDeclaration', { id, superClass, members });\n  664      let output = 'class';\n  665      output = this.colorText.keywords(output);\n  ...\n  671      }\n  672      output += ' {';\n  673:     for(let member of members) {\n  674        let s = this.printNode(member);\n  675        if(member instanceof FunctionDeclaration) s = s.replace(/function\\s/, '');\n\n~/Projects/plot-cv/lib/grammars/AltPython3.g4:\n   45  tokens { INDENT, DEDENT }\n   46  \n   47: @parser::members {\n   48  \n   49    // Used in preventing double NoViableAltException throws on the current context's same start token.\n   ..\n   76  }\n   77  \n   78: @lexer::members {\n   79  \n   80    // A queue where extra tokens are pushed on (see the NEWLINE lexer rule).\n\n~/Projects/plot-cv/lib/grammars/ECMAScript.g4:\n   27  grammar ECMAScript;\n   28  \n   29: @parser::members {\n   30    \n   31      /**\n   ..\n   96  }\n   97  \n   98: @lexer::members {\n   99                   \n  100      // A flag indicating if the lexer should operate in strict mode.\n\n~/Projects/plot-cv/lib/grammars/js_tokenizer.l:\n  984  }\n  985  \n  986: // JSTokenizer members\n  987  \n  988  struct JSTokenizer::ScanBuffers\n\n~/Projects/plot-cv/lib/grammars/Python2.g4:\n   57  }\n   58  \n   59: @lexer::members {\n   60      var old_lexer = Python2Lexer;\n   61      Python2Lexer = function() {\n\n~/Projects/plot-cv/lib/grammars/Python3.g4:\n   41  \n   42  \n   43: @lexer::members {\n   44    private:\n   45    // A queue where extra tokens are pushed on (see the NEWLINE lexer rule).\n\n~/Projects/plot-cv/lib/grammars/JavaScript/ECMAScript.g4:\n   31  grammar ECMAScript;\n   32  \n   33: @parser::members {\n   34  /**\n   35   * Returns true if, on the current index of the parser's token stream,\n   ..\n   66  }\n   67  \n   68: @lexer::members {\n   69  ECMAScriptLexer.prototype.strictMode = true;\n   70  ECMAScriptLexer.prototype.lastToken = null;\n\n~/Projects/plot-cv/lib/json/xml2json.js:\n  138        else if(typeof o == 'object') {\n  139          json += ind + '{';\n  140:         //Count the members in o\n  141          var i = 0;\n  142          for(var member in o) i++;\n\n~/Projects/plot-cv/lib/whatwg/url.js:\n 1532          parts.pop();\n 1533        }\n 1534:       if(parts.length > 4) throw new TypeError('IPv4 should have no more than 4 members');\n 1535        const numbers = [];\n 1536        for(let part of parts) {\n 1537:         if(part === '') throw new TypeError('IPv4 should not have empty members');\n 1538          let radix = 10;\n 1539          if(part.startsWith('0x') || part.startsWith('0X')) {\n ....\n 1565        }\n 1566      } else if(Array.isArray(input) || ArrayBuffer.isView(input)) {\n 1567:       if(input.length !== 4) throw new TypeError('IPv4 should have 4 members');\n 1568        for(let i = 0; i < 4; i++) {\n 1569          this.#address[i] = input[i];\n ....\n 1665              }\n 1666            }\n 1667:           if(numbersSeen !== 4) throw new TypeError('Expected 4 members');\n 1668            break;\n 1669          } else if(inputCodePoints.charAt(pointer) === 0x003a) {\n ....\n 1690        }\n 1691      } else if(Array.isArray(input) || ArrayBuffer.isView(input)) {\n 1692:       if(input.length !== 8) throw new TypeError('IPv6 should have 8 uint16 members');\n 1693        for(let i = 0; i < 8; i++) {\n 1694          this.#address[i] = input[i];\n\n~/Projects/plot-cv/noip-duc_3.3.0/deny.toml:\n  160  # * all - Both lowest-version and simplest-path are used\n  161  highlight = \"all\"\n  162: # The default lint level for `default` features for crates that are members of\n  163  # the workspace that is being checked. This can be overridden by allowing/denying\n  164  # `default` on a crate-by-crate basis if desired.\n  165  workspace-default-features = \"allow\"\n  166  # The default lint level for `default` features for external crates that are not\n  167: # members of the workspace. This can be overridden by allowing/denying `default`\n  168  # on a crate-by-crate basis if desired.\n  169  external-default-features = \"allow\"\n\n~/Projects/plot-cv/noip-duc_3.3.0/README.md:\n  108      -p, --password <PASSWORD>\n  109              Your www.noip.com password. For better security, use Update Group credentials.\n  110:             https://www.noip.com/members/dns/dyn-groups.php\n  111  \n  112              [env: NOIP_PASSWORD=]\n  ...\n  114      -u, --username <USERNAME>\n  115              Your www.noip.com username. For better security, use Update Group credentials.\n  116:             https://www.noip.com/members/dns/dyn-groups.php\n  117  \n  118              [env: NOIP_USERNAME=]\n\n~/Projects/plot-cv/noip-duc_3.3.0/src/bin/main.rs:\n   21  #[clap(about = \"No-IP Dynamic Update Client\", version = clap::crate_version!())]\n   22  struct Config {\n   23:     /// Your www.noip.com username. For better security, use Update Group credentials. https://www.noip.com/members/dns/dyn-groups.php\n   24      #[clap(short, long, env = \"NOIP_USERNAME\")]\n   25      username: String,\n   26  \n   27:     /// Your www.noip.com password. For better security, use Update Group credentials. https://www.noip.com/members/dns/dyn-groups.php\n   28      #[clap(short, long, env = \"NOIP_PASSWORD\")]\n   29      password: String,\n\n~/Projects/plot-cv/openlayers/CODE_OF_CONDUCT.md:\n   19  * Gracefully accepting constructive criticism\n   20  * Focusing on what is best for the community\n   21: * Showing empathy towards other community members\n   22  \n   23  Examples of unacceptable behavior by participants include:\n   ..\n   64  Project maintainers who do not follow or enforce the Code of Conduct in good\n   65  faith may face temporary or permanent repercussions as determined by other\n   66: members of the project's leadership.\n   67  \n   68  ## Attribution\n\n~/Projects/plot-cv/openlayers/changelog/v3.20.0.md:\n  178   * [#6099](https://github.com/openlayers/openlayers/pull/6099) - Modify interaction tests : check for change events ([@tchandelle](https://github.com/tchandelle))\n  179   * [#6069](https://github.com/openlayers/openlayers/pull/6069) - If there is no features option, all features will be translated. ([@tchandelle](https://github.com/tchandelle))\n  180:  * [#6097](https://github.com/openlayers/openlayers/pull/6097) - API index page : Fix link anchor to static members ([@tchandelle](https://github.com/tchandelle))\n  181   * [#6095](https://github.com/openlayers/openlayers/pull/6095) - LineString Arrows example: rotate with the view ([@tchandelle](https://github.com/tchandelle))\n  182   * [#6093](https://github.com/openlayers/openlayers/pull/6093) - Update mustache to version 2.3.0 üöÄ ([@openlayers](https://github.com/openlayers))\n\n~/Projects/plot-cv/openlayers/changelog/v5.0.0.md:\n  382   * [#7899](https://github.com/openlayers/openlayers/pull/7899) - Use nomnom@1.8.1 ([@tschaub](https://github.com/tschaub))\n  383   * [#7897](https://github.com/openlayers/openlayers/pull/7897) - Better variables scoping ([@fredj](https://github.com/fredj))\n  384:  * [#7894](https://github.com/openlayers/openlayers/pull/7894) - More named exports, fewer static members ([@tschaub](https://github.com/tschaub))\n  385   * [#7881](https://github.com/openlayers/openlayers/pull/7881) - Better variables scoping ([@fredj](https://github.com/fredj))\n  386:  * [#7888](https://github.com/openlayers/openlayers/pull/7888) - Rework away static members from pointer related classes ([@bjornharrtell](https://github.com/bjornharrtell))\n  387   * [#7880](https://github.com/openlayers/openlayers/pull/7880) - Named exports from ol/style/Style ([@tschaub](https://github.com/tschaub))\n  388   * [#7872](https://github.com/openlayers/openlayers/pull/7872) - More named export ([@fredj](https://github.com/fredj))\n  ...\n  408   * [#7828](https://github.com/openlayers/openlayers/pull/7828) - Refactor constraints static methods to module functions ([@bjornharrtell](https://github.com/bjornharrtell))\n  409   * [#7827](https://github.com/openlayers/openlayers/pull/7827) - Named exports from ol/render/canvas ([@tschaub](https://github.com/tschaub))\n  410:  * [#7823](https://github.com/openlayers/openlayers/pull/7823) - Replace static members with named exports ([@fredj](https://github.com/fredj))\n  411   * [#7820](https://github.com/openlayers/openlayers/pull/7820) - ol/geom/flat/* exports ([@raiyni](https://github.com/raiyni))\n  412   * [#7824](https://github.com/openlayers/openlayers/pull/7824) - Fix code indentation ([@fredj](https://github.com/fredj))\n  413   * [#7821](https://github.com/openlayers/openlayers/pull/7821) - Add new canvas instruction array in ol/render/canvas/Instruction ([@fredj](https://github.com/fredj))\n  414:  * [#7817](https://github.com/openlayers/openlayers/pull/7817) - Remove more private static members ([@tschaub](https://github.com/tschaub))\n  415:  * [#7814](https://github.com/openlayers/openlayers/pull/7814) - Remove more private static members ([@tschaub](https://github.com/tschaub))\n  416   * [#7816](https://github.com/openlayers/openlayers/pull/7816) - Use toString instead of asString in asColorLike ([@openlayers](https://github.com/openlayers))\n  417   * [#7811](https://github.com/openlayers/openlayers/pull/7811) - Remove ol.FeatureStyleFunction support ([@fredj](https://github.com/fredj))\n  418   * [#7815](https://github.com/openlayers/openlayers/pull/7815) -  Remove private statics from webgl related modules ([@bjornharrtell](https://github.com/bjornharrtell))\n  419:  * [#7803](https://github.com/openlayers/openlayers/pull/7803) - Remove private static members from constructors ([@tschaub](https://github.com/tschaub))\n  420   * [#7808](https://github.com/openlayers/openlayers/pull/7808) - Make sure the requested image size matches the desired ratio ([@ahocevar](https://github.com/ahocevar))\n  421   * [#7807](https://github.com/openlayers/openlayers/pull/7807) - Run typecheck after tests, because of its current verbosity ([@ahocevar](https://github.com/ahocevar))\n  422:  * [#7805](https://github.com/openlayers/openlayers/pull/7805) - Remove private static members from constructors ([@fredj](https://github.com/fredj))\n  423   * [#7806](https://github.com/openlayers/openlayers/pull/7806) - Fix rotate import ([@ahocevar](https://github.com/ahocevar))\n  424   * [#7800](https://github.com/openlayers/openlayers/pull/7800) - More named exports ([@tschaub](https://github.com/tschaub))\n\n~/Projects/plot-cv/openlayers/changelog/v6.0.0.md:\n  692   * [#9009](https://github.com/openlayers/openlayers/pull/9009) -  Revert \"Simplify import path in examples\" ([@fredj](https://github.com/fredj))\n  693   * [#9005](https://github.com/openlayers/openlayers/pull/9005) - Simplify import path in examples ([@fredj](https://github.com/fredj))\n  694:  * [#9003](https://github.com/openlayers/openlayers/pull/9003) - Remove unused Builder/Executor functions and members ([@ahocevar](https://github.com/ahocevar))\n  695   * [#9002](https://github.com/openlayers/openlayers/pull/9002) - Fix module path ([@openlayers](https://github.com/openlayers))\n  696   * [#8996](https://github.com/openlayers/openlayers/pull/8996) - Add imageRatio option for VectorImage layers ([@fredj](https://github.com/fredj))\n\n~/Projects/plot-cv/openlayers/changelog/v6.4.0.md:\n  130   * [#10862](https://github.com/openlayers/openlayers/pull/10862) - Use prettier ([@tschaub](https://github.com/tschaub))\n  131   * [#10895](https://github.com/openlayers/openlayers/pull/10895) - Fix dependency source management for examples ([@ahocevar](https://github.com/ahocevar))\n  132:  * [#10882](https://github.com/openlayers/openlayers/pull/10882) - Apidoc - Fix toggle state when there are no hidden members ([@MoonE](https://github.com/MoonE))\n  133   * [#10893](https://github.com/openlayers/openlayers/pull/10893) - Fix focus condition ([@ahocevar](https://github.com/ahocevar))\n  134   * [#10878](https://github.com/openlayers/openlayers/pull/10878) - Avoid page scrolling when freehand drawing on mobile ([@ahocevar](https://github.com/ahocevar))\n\n~/Projects/plot-cv/openlayers/changelog/v6.6.0.md:\n  131   * [#12217](https://github.com/openlayers/openlayers/pull/12217) - Fix building of examples with latest copy-webpack-plugin ([@MoonE](https://github.com/MoonE))\n  132   * [#12198](https://github.com/openlayers/openlayers/pull/12198) - Add attributionsCollapsible option to source/TileWMS and source/WMTS ([@sbx320](https://github.com/sbx320))\n  133:  * [#12176](https://github.com/openlayers/openlayers/pull/12176) - Allow private class members to be mangled ([@bz2](https://github.com/bz2))\n  134   * [#12178](https://github.com/openlayers/openlayers/pull/12178) - Add WKB (Well-Known Binary) format ([@kikuchan](https://github.com/kikuchan))\n  135   * [#12180](https://github.com/openlayers/openlayers/pull/12180) - Fix rendering of MultiPolygon text styles ([@MoonE](https://github.com/MoonE))\n\n~/Projects/plot-cv/openlayers/config/webpack-config-legacy-build.mjs:\n   41        new TerserPlugin({\n   42          terserOptions: {\n   43:           // Mangle private members convention with underscore suffix\n   44            mangle: {properties: {regex: /_$/}},\n   45          },\n\n~/Projects/plot-cv/openlayers/config/jsdoc/api/template/publish.js:\n  224  /**\n  225   * Create the navigation sidebar.\n  226:  * @param {Object} members The members that will be used to create the sidebar.\n  227:  * @param {Array<Object>} members.classes Classes.\n  228:  * @param {Array<Object>} members.externals Externals.\n  229:  * @param {Array<Object>} members.globals Globals.\n  230:  * @param {Array<Object>} members.mixins Mixins.\n  231:  * @param {Array<Object>} members.modules Modules.\n  232:  * @param {Array<Object>} members.namespaces Namespaces.\n  233:  * @param {Array<Object>} members.tutorials Tutorials.\n  234:  * @param {Array<Object>} members.events Events.\n  235   * @return {string} The HTML for the navigation sidebar.\n  236   */\n  237: function buildNav(members) {\n  238    const nav = [];\n  239:   members.classes.forEach(function (v) {\n  240      // exclude interfaces from sidebar\n  241      if (v.interface !== true) {\n  ...\n  249            longname: v.memberof,\n  250          })[0],\n  251:         members: find({\n  252            kind: 'member',\n  253            memberof: v.longname,\n  ...\n  269      }\n  270    });\n  271:   members.modules.forEach(function (v) {\n  272      const classes = find({\n  273        kind: 'class',\n  274        memberof: v.longname,\n  275      });\n  276:     const members = find({\n  277        kind: 'member',\n  278        memberof: v.longname,\n  ...\n  294      if (\n  295        typedefs.length > classes.length ||\n  296:       members.length + methods.length > 0\n  297      ) {\n  298        nav.push({\n  ...\n  301          prettyname: getPrettyName(v),\n  302          name: v.name,\n  303:         members: members,\n  304          methods: methods,\n  305          typedefs: typedefs,\n  ...\n  487    });\n  488  \n  489:   const members = helper.getMembers(data);\n  490:   members.tutorials = tutorials.children;\n  491  \n  492    // add template helpers\n  ...\n  496    view.tutoriallink = tutoriallink;\n  497    view.htmlsafe = htmlsafe;\n  498:   view.members = members; //@davidshimjs: To make navigation for customizing\n  499  \n  500    // once for all\n  501:   view.nav = buildNav(members);\n  502  \n  503    attachModuleSymbols(\n  504      find({kind: ['class', 'function'], longname: {left: 'module:'}}),\n  505:     members.modules\n  506    );\n  507  \n  ...\n  512    }\n  513  \n  514:   if (members.globals.length) {\n  515      generate('Global', [{kind: 'globalobj'}], globalUrl);\n  516    }\n  ...\n  542  \n  543    // set up the lists that we'll use to generate pages\n  544:   const classes = taffy(members.classes);\n  545:   const modules = taffy(members.modules);\n  546:   const namespaces = taffy(members.namespaces);\n  547:   const mixins = taffy(members.mixins);\n  548:   const externals = taffy(members.externals);\n  549  \n  550    for (const longname in helper.longnameToUrl) {\n\n~/Projects/plot-cv/openlayers/config/jsdoc/api/template/static/scripts/main.js:\n   57      const navListNode = $navList.get(0);\n   58      let $classItems;\n   59:     let $members;\n   60      let stateClass = (function () {\n   61        $navList.removeClass('search-started searching');\n   ..\n   82        }\n   83        $classItems = undefined;\n   84:       $members = undefined;\n   85  \n   86        // Search again with full navigation, if user already searched\n   ..\n  113        },\n  114        getMembers: function () {\n  115:         return $members || ($members = $navList.find('.item li'));\n  116        },\n  117        changeStateClass: function (newClass) {\n  ...\n  215            cls.weight += getSearchWeight(li, true);\n  216            const memberType = itemMember.dataset.type;\n  217:           let members = cls.subItems[memberType];\n  218:           if (!members) {\n  219:             members = cls.subItems[memberType] = {\n  220                item: itemMember,\n  221                subItems: {}\n  ...\n  223              itemMember.classList.add('match');\n  224            }\n  225:           members.subItems[name] = { item: li };\n  226            li.classList.add('match');\n  227          }\n\n~/Projects/plot-cv/openlayers/config/jsdoc/api/template/static/styles/jaguar.css:\n  221    display: block;\n  222  }\n  223: /* hide all members by default when search is empty */\n  224  .navigation-list.search-empty .item .member-list {\n  225    display: none;\n  226  }\n  227: /* expand all members when input in search field available but too short to search */\n  228  .navigation-list.search-started li,\n  229  .navigation-list.search-started .member-list {\n  ...\n  238    display: block;\n  239  }\n  240: /* allow user to hide / show members */\n  241  .navigation-list .item.toggle-manual-show li,\n  242  .navigation-list .item.toggle-manual-show .member-list {\n\n~/Projects/plot-cv/openlayers/config/jsdoc/api/template/tmpl/container.tmpl:\n  149  \n  150      <?js\n  151:         var members = self.find({kind: 'member', memberof: title === 'Global' ? {isUndefined: true} : doc.longname});\n  152:         if (members && members.length && members.forEach) {\n  153      ?>\n  154          <h3 class=\"subsection-title\">Members</h3>\n  155  \n  156:         <dl><?js members.forEach(function(p) { ?>\n  157:             <?js= self.partial('members.tmpl', p) ?>\n  158          <?js }); ?></dl>\n  159      <?js } ?>\n  ...\n  185                  else {\n  186              ?>\n  187:                 <?js= self.partial('members.tmpl', e) ?>\n  188              <?js\n  189                  }\n\n~/Projects/plot-cv/openlayers/config/jsdoc/info/publish.js:\n   45    ).get();\n   46  \n   47:   // get symbols data, filter out those that are members of private classes\n   48    const symbols = [];\n   49    const defines = [];\n\n~/Projects/plot-cv/openlayers/examples/clusters-dynamic.js:\n   76  /**\n   77   * Style for clusters with features that are too close to each other, activated on click.\n   78:  * @param {Feature} cluster A cluster with overlapping members.\n   79   * @param {number} resolution The current view resolution.\n   80:  * @return {Style} A style to render an expanded view of the cluster members.\n   81   */\n   82  function clusterCircleStyle(cluster, resolution) {\n   ..\n  115   * Arranges points in a circle around the cluster center, with a line pointing from the center to\n  116   * each point.\n  117:  * @param {number} count Number of cluster members.\n  118   * @param {Array<number>} clusterCenter Center coordinate of the cluster.\n  119   * @param {number} resolution Current view resolution.\n  120:  * @return {Array<Array<number>>} An array of coordinates representing the cluster members.\n  121   */\n  122  function generatePointsCircle(count, clusterCenter, resolution) {\n  ...\n  202  });\n  203  \n  204: // Layer displaying the expanded view of overlapping cluster members.\n  205  const clusterCircles = new VectorLayer({\n  206    source: clusterSource,\n  ...\n  244        const clusterMembers = features[0].get('features');\n  245        if(clusterMembers.length > 1) {\n  246:         // Calculate the extent of the cluster members.\n  247          const extent = createEmpty();\n  248          clusterMembers.forEach(feature => extend(extent, feature.getGeometry().getExtent()));\n  ...\n  250          const resolution = map.getView().getResolution();\n  251          if(view.getZoom() === view.getMaxZoom() || (getWidth(extent) < resolution && getWidth(extent) < resolution)) {\n  252:           // Show an expanded view of the cluster members.\n  253            clickFeature = features[0];\n  254            clickResolution = resolution;\n  255            clusterCircles.setStyle(clusterCircleStyle);\n  256          } else {\n  257:           // Zoom to the extent of the cluster members.\n  258            view.fit(extent, { duration: 500, padding: [50, 50, 50, 50] });\n  259          }\n\n~/Projects/plot-cv/pictest/bootloaders/18f2550-usb-hid-xc8/FIRMWARE/PIC18F2550/src/usb/usb_host_hid_parser.h:\n  261    uint8_t interfaceNumber;    // This stores the interface number for the current report descriptor\n  262  \n  263:   // This set of members are used during parsing of Report descriptor , application does not normally need these details\n  264    bool haveDesignatorMax;      // True if report descriptor has a valid Designator Max\n  265    bool haveDesignatorMin;      // True if report descriptor has a valid Designator Min\n\n~/Projects/plot-cv/pictest/bootloaders/18f4550-usb-hid-xc8/FIRMWARE/PIC18F4550/src/usb/usb_host_hid_parser.h:\n  261    uint8_t interfaceNumber;    // This stores the interface number for the current report descriptor\n  262  \n  263:   // This set of members are used during parsing of Report descriptor , application does not normally need these details\n  264    bool haveDesignatorMax;      // True if report descriptor has a valid Designator Max\n  265    bool haveDesignatorMin;      // True if report descriptor has a valid Designator Min\n\n~/Projects/plot-cv/pictest/bootloaders/bootloader/encoder/ltmain.sh:\n 4951  \tgenerated=\"$generated $gentop\"\n 4952  \n 4953: \t# Add in members from convenience archives.\n 4954  \tfor xlib in $addlibs; do\n 4955  \t  # Extract the objects.\n\n~/Projects/plot-cv/pictest/bootloaders/bootloader/fw_update/ltmain.sh:\n 4951  \tgenerated=\"$generated $gentop\"\n 4952  \n 4953: \t# Add in members from convenience archives.\n 4954  \tfor xlib in $addlibs; do\n 4955  \t  # Extract the objects.\n\n~/Projects/plot-cv/pictest/bootloaders/bootloader-0.2.2/bootloader/encoder/ltmain.sh:\n 4951  \tgenerated=\"$generated $gentop\"\n 4952  \n 4953: \t# Add in members from convenience archives.\n 4954  \tfor xlib in $addlibs; do\n 4955  \t  # Extract the objects.\n\n~/Projects/plot-cv/pictest/bootloaders/bootloader-0.2.2/bootloader/fw_update/ltmain.sh:\n 4951  \tgenerated=\"$generated $gentop\"\n 4952  \n 4953: \t# Add in members from convenience archives.\n 4954  \tfor xlib in $addlibs; do\n 4955  \t  # Extract the objects.\n\n~/Projects/plot-cv/pictest/bootloaders/msd-bootloader/USB MSD Boot Loader v1.0/Boot/boot.c:\n  126  // Note: Currently having issues if the cluster size is increased above 1 sector/cluster.\n  127  //\n  128: // Note: As this is a fixed definition where we do not need to refer to individual members\n  129  // We have not defined a structure (which would have made it look tidier).\n  130  \n\n~/Projects/plot-cv/pictest/bootloaders/usb-msd-bootloader/USB MSD Boot Loader v1.0/Boot/boot.c:\n  126  // Note: Currently having issues if the cluster size is increased above 1 sector/cluster.\n  127  //\n  128: // Note: As this is a fixed definition where we do not need to refer to individual members\n  129  // We have not defined a structure (which would have made it look tidier).\n  130  \n\n~/Projects/plot-cv/pictest/bootloaders/XPRESS-Bootloader/framework/fileio/inc/fileio.h:\n 1265                   (only at the end of the file's name or extension).\n 1266      attr -       Inclusive OR of all of the attributes (FILEIO_ATTRIBUTES\n 1267:                  structure members) that a found file may have.\n 1268      record -     Structure containing parameters about the found file. Also\n 1269                   contains private information used for additional searches\n\n~/Projects/plot-cv/pictest/bootloaders/XPRESS-Bootloader/framework/fileio/inc/fileio_lfn.h:\n 1269                   (only at the end of the file's name or extension).\n 1270      attr -       Inclusive OR of all of the attributes (FILEIO_ATTRIBUTES\n 1271:                  structure members) that a found file may have.\n 1272      record -     Structure containing parameters about the found file. Also\n 1273                   contains private information used for additional searches\n\n~/Projects/plot-cv/qjs-opencv/Doxyfile:\n  103  \n  104  # If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member\n  105: # descriptions after the members that are listed in the file and class\n  106  # documentation (similar to Javadoc). Set to NO to disable this.\n  107  # The default value is: YES.\n  ...\n  147  \n  148  # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n  149: # inherited members of a class in the documentation of that class as if those\n  150: # members were ordinary class members. Constructors, destructors and assignment\n  151  # operators of the base classes will not be shown.\n  152  # The default value is: NO.\n  ...\n  273  # only. Doxygen will then generate output that is more tailored for C. For\n  274  # instance, some of the names that are used will be different. The list of all\n  275: # members will be omitted, etc.\n  276  # The default value is: NO.\n  277  \n  ...\n  389  # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n  390  # tag is set to YES then doxygen will reuse the documentation of the first\n  391: # member in the group (if any) for the other members of the group. By default\n  392: # all members of a group must be documented explicitly.\n  393  # The default value is: NO.\n  394  \n  ...\n  462  # If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in\n  463  # documentation are documented, even if no documentation was available. Private\n  464: # class members and static file members will be hidden unless the\n  465  # EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.\n  466: # Note: This will also disable the warnings about undocumented members that are\n  467  # normally produced when WARNINGS is set to YES.\n  468  # The default value is: NO.\n  ...\n  470  EXTRACT_ALL            = YES\n  471  \n  472: # If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will\n  473  # be included in the documentation.\n  474  # The default value is: NO.\n  ...\n  482  EXTRACT_PRIV_VIRTUAL   = NO\n  483  \n  484: # If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal\n  485  # scope will be included in the documentation.\n  486  # The default value is: NO.\n  ...\n  488  EXTRACT_PACKAGE        = YES\n  489  \n  490: # If the EXTRACT_STATIC tag is set to YES, all static members of a file will be\n  491  # included in the documentation.\n  492  # The default value is: NO.\n  ...\n  510  EXTRACT_LOCAL_METHODS  = YES\n  511  \n  512: # If this flag is set to YES, the members of anonymous namespaces will be\n  513  # extracted and appear in the documentation as a namespace called\n  514  # 'anonymous_namespace{file}', where file will be replaced with the base name of\n  ...\n  520  \n  521  # If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all\n  522: # undocumented members inside documented classes or files. If set to NO these\n  523: # members will be included in the various overviews, but no documentation\n  524  # section is generated. This option has no effect if EXTRACT_ALL is enabled.\n  525  # The default value is: NO.\n  ...\n  565  CASE_SENSE_NAMES       = YES\n  566  \n  567: # If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with\n  568  # their full class and namespace scopes in the documentation. If set to YES, the\n  569  # scope will be hidden.\n  ...\n  599  \n  600  # If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the\n  601: # documentation for inline members.\n  602  # The default value is: YES.\n  603  \n  ...\n  605  \n  606  # If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n  607: # (detailed) documentation of file and class members alphabetically by member\n  608: # name. If set to NO, the members will appear in declaration order.\n  609  # The default value is: YES.\n  610  \n  ...\n  612  \n  613  # If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n  614: # descriptions of file, namespace and class members alphabetically by member\n  615: # name. If set to NO, the members will appear in declaration order. Note that\n  616  # this will also influence the order of the classes in the class list.\n  617  # The default value is: NO.\n  ...\n  620  \n  621  # If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n  622: # (brief and detailed) documentation of class members so that constructors and\n  623  # destructors are listed first. If set to NO the constructors will appear in the\n  624  # respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n  ...\n  775  \n  776  # If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate\n  777: # warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag\n  778  # will automatically be disabled.\n  779  # The default value is: YES.\n  ...\n 1428  BINARY_TOC             = NO\n 1429  \n 1430: # The TOC_EXPAND flag can be set to YES to add extra items for group members to\n 1431  # the table of contents of the HTML help documentation and to the tree view.\n 1432  # The default value is: NO.\n ....\n 2060  \n 2061  # If the XML_NS_MEMB_FILE_SCOPE tag is set to YES, doxygen will include\n 2062: # namespace members in file scope as well, matching the HTML output.\n 2063  # The default value is: NO.\n 2064  # This tag requires that the tag GENERATE_XML is set to YES.\n\n~/Projects/plot-cv/qjs-opencv/lsd/doxygen.config:\n   55  \n   56  # If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will \n   57: # include brief member descriptions after the members that are listed in \n   58  # the file and class documentation (similar to JavaDoc). \n   59  # Set to NO to disable this.\n   ..\n   75  \n   76  # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all inherited \n   77: # members of a class in the documentation of that class as if those members were \n   78: # ordinary class members. Constructors, destructors and assignment operators of \n   79  # the base classes will not be shown.\n   80  \n   ..\n  131  # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC \n  132  # tag is set to YES, then doxygen will reuse the documentation of the first \n  133: # member in the group (if any) for the other members of the group. By default \n  134: # all members of a group must be documented explicitly.\n  135  \n  136  DISTRIBUTE_GROUP_DOC   = NO\n  ...\n  153  # only. Doxygen will then generate output that is more tailored for C. \n  154  # For instance, some of the names that are used will be different. The list \n  155: # of all members will be omitted, etc.\n  156  \n  157  OPTIMIZE_OUTPUT_FOR_C  = YES\n  ...\n  178  # If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in \n  179  # documentation are documented, even if no documentation was available. \n  180: # Private class members and static file members will be hidden unless \n  181  # the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES\n  182  \n  183  EXTRACT_ALL            = YES\n  184  \n  185: # If the EXTRACT_PRIVATE tag is set to YES all private members of a class \n  186  # will be included in the documentation.\n  187  \n  188  EXTRACT_PRIVATE        = YES\n  189  \n  190: # If the EXTRACT_STATIC tag is set to YES all static members of a file \n  191  # will be included in the documentation.\n  192  \n  ...\n  200  \n  201  # If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all \n  202: # undocumented members of documented classes, files or namespaces. \n  203: # If set to NO (the default) these members will be included in the \n  204  # various overviews, but no documentation section is generated. \n  205  # This option has no effect if EXTRACT_ALL is enabled.\n  ...\n  244  \n  245  # If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen \n  246: # will show members with their full class and namespace scopes in the \n  247  # documentation. If set to YES the scope will be hidden.\n  248  \n  ...\n  256  \n  257  # If the INLINE_INFO tag is set to YES (the default) then a tag [inline] \n  258: # is inserted in the documentation for inline members.\n  259  \n  260  INLINE_INFO            = YES\n  261  \n  262  # If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen \n  263: # will sort the (detailed) documentation of file and class members \n  264: # alphabetically by member name. If set to NO the members will appear in \n  265  # declaration order.\n  266  \n  ...\n  328  \n  329  # If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings \n  330: # for undocumented members. If EXTRACT_ALL is set to YES then this flag will \n  331  # automatically be disabled.\n  332  \n  ...\n  538  HTML_STYLESHEET        = \n  539  \n  540: # If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, \n  541  # files or namespaces will be aligned in HTML using tables. If set to \n  542  # NO a bullet list will be used.\n  ...\n  577  BINARY_TOC             = NO\n  578  \n  579: # The TOC_EXPAND flag can be set to YES to add extra items for group members \n  580  # to the contents of the HTML help documentation and to the tree view.\n  581  \n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/flatbuffers/include/flatbuffers/flatbuffer_builder.h:\n 1276    vector_downward<SizeT> buf_;\n 1277  \n 1278:   // Accumulating offsets of table members while it is being built.\n 1279    // We store these in the scratch pad of buf_, after the vtable offsets.\n 1280    uoffset_t num_field_loc;\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/flatbuffers/include/flatbuffers/struct.h:\n   23  \n   24  // \"structs\" are flat structures that do not have an offset table, thus\n   25: // always have all members present and do not support forwards/backwards\n   26  // compatible extensions.\n   27  \n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/include/opencl/1.2/CL/cl.hpp:\n  668   *  \\note\n  669   *  This differs from std::vector<> not just in memory allocation,\n  670:  *  but also in terms of when members are constructed, destroyed,\n  671   *  and assigned instead of being copy constructed.\n  672   *\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/ittnotify/include/llvm_jit_event_listener.hpp:\n  151  \n  152          // Populate the method size and name information\n  153:         // TODO: The JIT profiling API should have members as const char pointers.\n  154          mload.method_name = (char*)name.c_str();\n  155          mload.method_load_address = Code;\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libjasper/jas_stream.c:\n  197      stream->obj_ = (void *) obj;\n  198  \n  199:     /* Initialize a few important members of the memory stream object. */\n  200      obj->myalloc_ = 0;\n  201      obj->buf_ = 0;\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libjasper/jpc_bs.c:\n  155          return 0;\n  156      }\n  157:     /* Initialize all of the data members. */\n  158      bitstream->stream_ = 0;\n  159      bitstream->cnt_ = 0;\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libjasper/jpc_enc.c:\n 1928      }\n 1929  \n 1930:     /* Initialize a few members used in error recovery. */\n 1931      tile->tcmpts = 0;\n 1932      tile->lyrsizes = 0;\n ....\n 1968          goto error;\n 1969      }\n 1970:     /* Initialize a few members critical for error recovery. */\n 1971      for (cmptno = 0, tcmpt = tile->tcmpts; cmptno < cp->numcmpts;\n 1972        ++cmptno, ++tcmpt) {\n ....\n 2170      rlvlno = rlvl - tcmpt->rlvls;\n 2171  \n 2172:     /* Initialize members required for error recovery. */\n 2173      rlvl->bands = 0;\n 2174      rlvl->tcmpt = tcmpt;\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libjpeg/README:\n   12  Bill Allombert, Jim Boucher, Lee Crocker, Bob Friesenhahn, Ben Jackson,\n   13  John Korejwa, Julian Minguillon, Luis Ortiz, George Phillips, Davide Rossi,\n   14: Ge' Weijers, and other members of the Independent JPEG Group.\n   15  \n   16  IJG is not affiliated with the ISO/IEC JTC1/SC29/WG1 standards committee\n   ..\n  324  name \"libjpeg\" which is misleading because they don't have the features and\n  325  are incompatible with formats supported by actual IJG libjpeg distributions.\n  326: One of those fakes is released by members of the ISO committee and just uses\n  327  the name of libjpeg for misdirection of people, similar to the abuse of the\n  328  name JPEG as described above, while having nothing in common with actual IJG\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libjpeg-turbo/README.ijg:\n   16  Bill Allombert, Jim Boucher, Lee Crocker, Bob Friesenhahn, Ben Jackson,\n   17  Julian Minguillon, Luis Ortiz, George Phillips, Davide Rossi, Ge' Weijers,\n   18: and other members of the Independent JPEG Group.\n   19  \n   20  IJG is not affiliated with the ISO/IEC JTC1/SC29/WG1 standards committee\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libpng/CHANGES:\n  649    Added new type \"png_fixed_point\" for integers that hold float*100000 values\n  650    Restored backward compatibility of tEXt/zTXt chunk processing:\n  651:     Restored the first four members of png_text to the same order as v.1.0.5d.\n  652:     Added members \"lang_key\" and \"itxt_length\" to png_text struct.  Set\n  653      text_length=0 when \"text\" contains iTXt data.  Use the \"compression\"\n  654      member to distinguish among tEXt/zTXt/iTXt types.  Added\n  ...\n  664    Added many parentheses, e.g., \"if (a && b & c)\" becomes \"if (a && (b & c))\"\n  665    Added png_handle_as_unknown() function (Glenn)\n  666:   Added png_free_chunk_list() function and chunk_list and num_chunk_list members\n  667      of png_ptr.\n  668    Eliminated erroneous warnings about multiple sPLT chunks and sPLT-after-PLTE.\n  ...\n  779  Version 1.0.6f [April 14, 2000]\n  780    Revised png_set_iCCP() and png_set_rows() to avoid prematurely freeing data.\n  781:   Add checks in png_set_text() for NULL members of the input text structure.\n  782    Revised libpng.txt/libpng.3.\n  783    Removed superfluous prototype for png_set_iTXt from png.h\n  ...\n  790      and other revisions (Matthias Benckmann)\n  791    Relocated info_ptr->free_me, png_ptr->free_me, and other info_ptr and\n  792:     png_ptr members to restore binary compatibility with libpng-1.0.5\n  793      (breaks compatibility with libpng-1.0.6).\n  794  \n  ...\n  799  \n  800  Version 1.0.6i [May 2, 2000]\n  801:   Rearranged some members at the end of png_info and png_struct, to put\n  802      unknown_chunks_num and free_me within the original size of the png_structs\n  803      and free_me, png_read_user_fn, and png_free_fn within the original png_info,\n  ...\n  809      of the use of png_set_rows() and png_get_rows() in libpng.txt/libpng.3.\n  810    Added PNG_LEGACY_SUPPORTED macro, and #ifdef out all new (since version\n  811:     1.00) members of png_struct and png_info, to regain binary compatibility\n  812      when you define this macro.  Capabilities lost in this event\n  813      are user transforms (new in version 1.0.0),the user transform pointer\n  ...\n  832    Removed the new PNG_CREATED_READ_STRUCT and PNG_CREATED_WRITE_STRUCT modes\n  833      which are no longer used.\n  834:   Eliminated the three new members of png_text when PNG_LEGACY_SUPPORTED is\n  835      defined or when neither PNG_READ_iTXt_SUPPORTED nor PNG_WRITE_iTXt_SUPPORTED\n  836      is defined.\n  ...\n 1587  \n 1588  Version 1.2.9beta1 [February 21, 2006]\n 1589:   Initialized some structure members in pngwutil.c to avoid gcc-4.0.0 complaints\n 1590    Revised man page and libpng.txt to make it clear that one should not call\n 1591      png_read_end or png_write_end after png_read_png or png_write_png.\n ....\n 2426  \n 2427  Version 1.4.0beta85 [October 1, 2009]\n 2428:   Revised png_check_IHDR() again, to check info_ptr members instead of\n 2429      the contents of the returned parameters.\n 2430  \n ....\n 2469    Added PNG_DEPSTRUCT, PNG_DEPRECATED, PNG_USE_RESULT, PNG_NORETURN, and\n 2470      PNG_ALLOCATED macros to detect deprecated direct access to the\n 2471:     png_struct or info_struct members and other deprecated usage in\n 2472      applications (John Bowler).\n 2473    Updated scripts/makefile* to add \"-DPNG_CONFIGURE_LIBPNG\" to CFLAGS,\n ....\n 2481      that they need to be updated, to remove references to pnggccrd.c and\n 2482      pngvcrd.c and to depend on pngpriv.h\n 2483:   Removed three direct references to read_info_ptr members in pngtest.c\n 2484      that were detected by the new PNG_DEPSTRUCT macro.\n 2485    Moved the png_debug macro definitions and the png_read_destroy(),\n ....\n 4002  \n 4003  Version 1.6.0beta15 [March 2, 2012]\n 4004:   Removed unused \"current_text\" members of png_struct and the png_free()\n 4005      of png_ptr->current_text from pngread.c\n 4006    Rewrote pngstest.c for substantial speed improvement.\n ....\n 4072    Fixed a compiler warning under Cygwin (Windows-7, 32-bit system)\n 4073    Revised example.c to put text strings in a temporary character array\n 4074:     instead of directly assigning string constants to png_textp members.\n 4075      This avoids compiler warnings when -Wwrite-strings is enabled.\n 4076    Added output flushing to aid debugging under Visual Studio. Unfortunately\n ....\n 5040      in the manual, to reflect the change made in libpng-1.6.0.\n 5041    Updated README file to explain that direct access to the png_struct\n 5042:     and info_struct members has not been permitted since libpng-1.5.0.\n 5043  \n 5044  Version 1.6.14 [October 23, 2014]\n ....\n 5636      been examined and judged non-fixable at present.  The warning about\n 5637      structure padding is fixable, but it would be a significant change (moving\n 5638:     structure members around).\n 5639  \n 5640  Version 1.6.24beta03 [July 4, 2016]\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libpng/png.h:\n  253   *\n  254   *    Binary incompatibility exists only when applications make direct access\n  255:  *    to the info_ptr or png_ptr members through png.h, and the compiled\n  256   *    application is loaded with a different version of the library.\n  257   *\n  ...\n  526  \n  527  /*  When the depth of the sPLT palette is 8 bits, the color and alpha samples\n  528:  *  occupy the LSB of their respective members, and the MSB of each member\n  529   *  is zero-filled.  The frequency member always occupies the full 16 bits.\n  530   */\n  ...\n  550   * empty), never a NULL pointer, so it can be safely used in printf() and\n  551   * other string-handling functions.  Note that the \"itxt_length\", \"lang\", and\n  552:  * \"lang_key\" members of the structure only exist when the library is built\n  553   * with iTXt chunk support.  Prior to libpng-1.4.0 the library was built by\n  554   * default without iTXt support. Also note that when iTXt *is* supported,\n  ...\n 2651   *\n 2652   * 1) Declare a 'png_image' structure on the stack and memset() it to all zero.\n 2653:  * 2) Initialize the members of the structure that describe the image, setting\n 2654   *    the 'format' member to the format of the image samples.\n 2655   * 3) Call the appropriate png_image_write... function with a pointer to the\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libpng/pngget.c:\n  867     /* This is redundant if we can be sure that the info_ptr values were all\n  868      * assigned in png_set_IHDR().  We do the check anyhow in case an\n  869:     * application has ignored our advice not to mess with the members\n  870      * of info_ptr directly.\n  871      */\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libpng/pnginfo.h:\n   32   * file that is not visible to applications.\n   33   *\n   34:  * The following members may have allocated storage attached that should be\n   35   * cleaned up before the structure is discarded: palette, trans, text,\n   36   * pcal_purpose, pcal_units, pcal_params, hist, iccp_name, iccp_profile,\n   ..\n   41   *\n   42   * More allocation details: all the chunk-reading functions that\n   43:  * change these members go through the corresponding png_set_*\n   44:  * functions.  A function to clear these members is available: see\n   45   * png_free_data().  The png_set_* functions do not depend on being\n   46:  * able to point info structure members to any of the storage they are\n   47   * passed (they make their own copies), EXCEPT that the png_set_text\n   48   * functions use the same storage passed to them in the text_ptr or\n   ..\n  225  #endif\n  226  \n  227: /* New members added in libpng-1.0.6 */\n  228     png_uint_32 free_me;     /* flags items libpng is responsible for freeing */\n  229  \n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libpng/pngpriv.h:\n  610  #if PNG_ALIGN_TYPE == PNG_ALIGN_SIZE\n  611     /* This is used because in some compiler implementations non-aligned\n  612:     * structure members are supported, so the offsetof approach below fails.\n  613      * Set PNG_ALIGN_SIZE=0 for compiler combinations where unaligned access\n  614      * is good for performance.  Do not do this unless you have tested the\n  ...\n 1824  \n 1825  #ifdef PNG_WARNINGS_SUPPORTED\n 1826: /* New defines and members adding in libpng-1.5.4 */\n 1827  #  define PNG_WARNING_PARAMETER_SIZE 32\n 1828  #  define PNG_WARNING_PARAMETER_COUNT 8 /* Maximum 9; see pngerror.c */\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libpng/pngset.c:\n  794              max_text = INT_MAX;\n  795  \n  796:          /* Now allocate a new array and copy the old members in; this does all\n  797            * the overflow checks.\n  798            */\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libpng/pngstruct.h:\n  354  #endif\n  355  \n  356: /* New members added in libpng-1.0.6 */\n  357  \n  358     png_uint_32 free_me;    /* flags items libpng is responsible for freeing */\n  ...\n  372  #endif\n  373  \n  374: /* New members added in libpng-1.0.3 */\n  375  #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED\n  376     png_byte rgb_to_gray_status;\n  ...\n  400  #endif\n  401  \n  402: /* New members added in libpng-1.2.0 */\n  403  \n  404: /* New members added in libpng-1.0.2 but first enabled by default in 1.2.0 */\n  405  #ifdef PNG_USER_MEM_SUPPORTED\n  406     png_voidp mem_ptr;             /* user supplied struct for mem functions */\n  ...\n  413  \n  414  #ifdef PNG_READ_QUANTIZE_SUPPORTED\n  415: /* The following three members were added at version 1.0.14 and 1.2.4 */\n  416     png_bytep quantize_sort;          /* working sort array */\n  417     png_bytep index_to_palette;       /* where the original index currently is\n  ...\n  421  #endif\n  422  \n  423: /* New members added in libpng-1.0.16 and 1.2.6 */\n  424     png_byte compression_type;\n  425  \n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libpng/README:\n   75  that access the info struct directly incompatible with the new\n   76  library, through libpng-1.2.x.  In libpng-1.4.x, which was meant to\n   77: be a transitional release, members of the `png_struct` and the\n   78  `info_struct` can still be accessed, but the compiler will issue a\n   79  warning about deprecated usage.  Since libpng-1.5.0, direct access\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libtiff/ChangeLog:\n 3004  \t'h' hint to disable automatic TIFFReadDirectory() would be broken,\n 3005  \tbecause someone issuing a manual TIFFReadDirectory() couldn't set them,\n 3006: \tas being private members.\n 3007  \n 3008  \tThe libtiff test suite is happy with that change, and the GDAL one too.\n ....\n 8830  \tMitigations team.\n 8831  \t* libtiff/tif_write.c: fix issue in error code path of TIFFFlushData1()\n 8832: \tthat didn't reset the tif_rawcc and tif_rawcp members. I'm not\n 8833  \tcompletely sure if that could happen in practice outside of the odd\n 8834  \tbehaviour of t2p_seekproc() of tiff2pdf). The report points that a\n ....\n 14771  \n 14772  \t* libtiff/: tif_codec.c, tif_compress.c, tiffiop.h: Introduced\n 14773: \tadditional members tif->tif_decodestatus and tif->tif_encodestatus\n 14774  \tfor correct handling of unconfigured codecs (we should not try to read\n 14775  \tdata or to define data size without correct codecs).\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libtiff/tif_jpeg.c:\n  215      struct jpeg_progress_mgr progress;\n  216      /*\n  217:      * The following two members could be a union, but\n  218       * they're small enough that it's not worth the effort.\n  219       */\n  ...\n 1152  /* scanline interface. */\n 1153  /* Only reads tif->tif_dir.td_bitspersample, tif->tif_rawdata and */\n 1154: /* tif->tif_rawcc members. */\n 1155  /* Can be called independently of the usual setup/predecode/decode states */\n 1156  int TIFFJPEGIsFullStripRequired(TIFF *tif)\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libwebp/src/demux/anim_decode.c:\n  113    }\n  114  \n  115:   // Note: calloc() so that the pointer members are initialized to NULL.\n  116    dec = (WebPAnimDecoder*)WebPSafeCalloc(1ULL, sizeof(*dec));\n  117    if (dec == NULL) goto Error;\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/libwebp/src/dsp/lossless.h:\n   74  \n   75  typedef struct {\n   76:   // Note: the members are uint8_t, so that any negative values are\n   77    // automatically converted to \"mod 256\" values.\n   78    uint8_t green_to_red_;\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/openexr/Half/half.cpp:\n   41  //\n   42  //\tclass half --\n   43: //\timplementation of non-inline members\n   44  //\n   45  //---------------------------------------------------------------------------\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/openjpeg/openjp2/image.c:\n  130      l_y0 = opj_uint_max(p_cp->ty0, p_image_header->y0);\n  131      l_x1 = p_cp->tx0 + (p_cp->tw - 1U) *\n  132:            p_cp->tdx; /* validity of p_cp members used here checked in opj_j2k_read_siz. Can't overflow. */\n  133      l_y1 = p_cp->ty0 + (p_cp->th - 1U) * p_cp->tdy; /* can't overflow */\n  134      l_x1 = opj_uint_min(opj_uint_adds(l_x1, p_cp->tdx),\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/openjpeg/openjp2/tcd.c:\n 2863  \n 2864  /** Returns whether a tile componenent is fully decoded, taking into account\n 2865:  * p_tcd->win_* members.\n 2866   *\n 2867   * @param p_tcd    TCD handle.\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/protobuf/src/google/protobuf/descriptor.cc:\n 4074  \n 4075    // Work-around for broken compilers:  According to the C++ standard,\n 4076:   // OptionInterpreter should have access to the private members of any class\n 4077    // which has declared DescriptorBuilder as a friend.  Unfortunately some old\n 4078    // versions of GCC and other compilers do not implement this correctly.  So,\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/protobuf/src/google/protobuf/descriptor.h:\n  996    const Descriptor* containing_type() const;\n  997  \n  998:   // The number of (non-extension) fields which are members of this oneof.\n  999    int field_count() const;\n 1000    // Get a member of this oneof, in the order in which they were declared in the\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/protobuf/src/google/protobuf/descriptor.pb.h:\n   42  PROTOBUF_NAMESPACE_CLOSE\n   43  \n   44: // Internal implementation detail -- do not use these members.\n   45  struct PROTOBUF_EXPORT TableStruct_google_2fprotobuf_2fdescriptor_2eproto {\n   46    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/protobuf/src/google/protobuf/field_mask.pb.h:\n   41  PROTOBUF_NAMESPACE_CLOSE\n   42  \n   43: // Internal implementation detail -- do not use these members.\n   44  struct PROTOBUF_EXPORT TableStruct_google_2fprotobuf_2ffield_5fmask_2eproto {\n   45    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/protobuf/src/google/protobuf/generated_message_reflection.h:\n  246    bool HasWeakFields() const { return weak_field_map_offset_ > 0; }\n  247  \n  248:   // These members are intended to be private, but we cannot actually make them\n  249    // private because this prevents us from using aggregate initialization of\n  250    // them, ie.\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/protobuf/src/google/protobuf/generated_message_util.cc:\n  441  };\n  442  \n  443: // We need to use a helper class to get access to the private members\n  444  class AccessorHelper {\n  445   public:\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/protobuf/src/google/protobuf/text_format.cc:\n  247    // oneofs are permitted, e.g., the string \"foo: 1 foo: 2\" for a\n  248    // required/optional field named \"foo\", or \"baz: 1 qux: 2\"\n  249:   // where \"baz\" and \"qux\" are members of the same oneof.\n  250    enum SingularOverwritePolicy {\n  251      ALLOW_SINGULAR_OVERWRITES = 0,   // the last value is retained\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/zlib/ChangeLog:\n   65  - Fix deflateEnd() to not report an error at start of raw deflate\n   66  - Add legal disclaimer to README\n   67: - Emphasize the need to continue decompressing gzip members\n   68  - Correct the initialization requirements for deflateInit2()\n   69  - Fix a bug that can crash deflate on some input when using Z_FIXED\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/zlib/zlib.h:\n  868     return a Z_DATA_ERROR).  If a gzip stream is being decoded, strm->adler is a\n  869     CRC-32 instead of an Adler-32.  Unlike the gunzip utility and gzread() (see\n  870:    below), inflate() will *not* automatically decode concatenated gzip members.\n  871     inflate() will return Z_STREAM_END at the end of the gzip member.  The state\n  872     would need to be reset to continue decoding a subsequent gzip member.  This\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/zlib-ng/README.md:\n  168  ```\n  169  \n  170: The zlib-ng port in vcpkg is kept up to date by Microsoft team members and community contributors.\n  171  If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n  172  \n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/zlib-ng/zlib.h.in:\n  863     return a Z_DATA_ERROR).  If a gzip stream is being decoded, strm->adler is a\n  864     CRC-32 instead of an Adler-32.  Unlike the gunzip utility and gzread() (see\n  865:    below), inflate() will *not* automatically decode concatenated gzip members.\n  866     inflate() will return Z_STREAM_END at the end of the gzip member.  The state\n  867     would need to be reset to continue decoding a subsequent gzip member.  This\n\n~/Projects/plot-cv/qjs-opencv/opencv/doc/js_tutorials/js_imgproc/js_contours/js_contours_hierarchy/js_contours_hierarchy.markdown:\n  104  If you use this flag, it returns only extreme outer flags. All child contours are left behind. **We\n  105  can say, under this law, Only the eldest in every family is taken care of. It doesn't care about\n  106: other members of the family)**.\n  107  \n  108  \n\n~/Projects/plot-cv/qjs-opencv/opencv/doc/py_tutorials/py_imgproc/py_contours/py_contours_hierarchy/py_contours_hierarchy.markdown:\n  120  If you use this flag, it returns only extreme outer flags. All child contours are left behind. **We\n  121  can say, under this law, Only the eldest in every family is taken care of. It doesn't care about\n  122: other members of the family :)**.\n  123  \n  124  So, in our image, how many extreme outer contours are there? ie at hierarchy-0 level?. Only 3, ie\n\n~/Projects/plot-cv/qjs-opencv/opencv/doc/tutorials/introduction/windows_visual_studio_image_watch/windows_visual_studio_image_watch.markdown:\n  143  \n  144  Note that the second image in the list, *edges*, is shown as \"invalid\". This indicates that some\n  145: data members of this image object have corrupt or invalid values (for example, a negative image\n  146  width). This is expected at this point in the program, since the C++ constructor for *edges* has not\n  147: run yet, and so its members have undefined values (in debug mode they are usually filled with \"0xCD\"\n  148  bytes).\n  149  \n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/core/include/opencv2/core/cvdef.h:\n  531  \n  532  Provides compatibility operators for both classical and C++11 enum classes,\n  533: as well as exposing the C++11 enum class members for backwards compatibility\n  534  \n  535  @code\n  ...\n  537      CV_ENUM_FLAGS(AccessFlag)\n  538  \n  539:     // Exposes the listed members of the enum class AccessFlag to the current namespace\n  540      CV_ENUM_CLASS_EXPOSE(AccessFlag, ACCESS_READ [, ACCESS_WRITE [, ...] ]);\n  541  @endcode\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/core/include/opencv2/core/mat.hpp:\n   94      simply cv::Mat() as you probably did before).\n   95  -   The class is designed solely for passing parameters. That is, normally you *should not*\n   96:     declare class members, local and global variables of this type.\n   97  -   If you want to design your own function or a class method that can operate of arrays of\n   98      multiple types, you can use InputArray (or OutputArray) for the respective parameters. Inside\n   ..\n  706      roi = Scalar(0,255,0);\n  707  @endcode\n  708: Due to the additional datastart and dataend members, it is possible to compute a relative\n  709  sub-array position in the main *container* array using locateROI():\n  710  @code\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/core/include/opencv2/core/types.hpp:\n  130  also a cast operator to convert point coordinates to the specified type. The conversion from\n  131  floating-point coordinates to integer coordinates is done by rounding. Commonly, the conversion\n  132: uses this operation for each of the coordinates. Besides the class members listed in the\n  133  declaration above, the following operations on points are implemented:\n  134  @code\n  ...\n  321  /** @brief Template class for specifying the size of an image or rectangle.\n  322  \n  323: The class includes two members called width and height. The structure can be converted to and from\n  324  the old OpenCV structures CvSize and CvSize2D32f . The same set of arithmetic and comparison\n  325  operations as for Point_ is available.\n  ...\n  420          }\n  421  @endcode\n  422: In addition to the class members, the following operations on rectangles are implemented:\n  423  -   \\f$\\texttt{rect} = \\texttt{rect} \\pm \\texttt{point}\\f$ (shifting a rectangle by a certain offset)\n  424  -   \\f$\\texttt{rect} = \\texttt{rect} \\pm \\texttt{size}\\f$ (expanding or shrinking a rectangle by a\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/core/src/softfloat.cpp:\n  220  \n  221  /*----------------------------------------------------------------------------\n  222: | softfloat and softdouble methods and members\n  223  *----------------------------------------------------------------------------*/\n  224  \n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/include/opencv2/dnn/dnn.hpp:\n  378          * @see BackendNode, Target\n  379          *\n  380:         * Layer don't use own Halide::Func members because we can have applied\n  381          * layers fusing. In this way the fused function should be scheduled.\n  382          */\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/caffe/opencv-caffe.pb.h:\n   42  PROTOBUF_NAMESPACE_CLOSE\n   43  \n   44: // Internal implementation detail -- do not use these members.\n   45  struct TableStruct_opencv_2dcaffe_2eproto {\n   46    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/onnx/opencv-onnx.pb.h:\n   42  PROTOBUF_NAMESPACE_CLOSE\n   43  \n   44: // Internal implementation detail -- do not use these members.\n   45  struct TableStruct_opencv_2donnx_2eproto {\n   46    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/tensorflow/attr_value.pb.h:\n   47  PROTOBUF_NAMESPACE_CLOSE\n   48  \n   49: // Internal implementation detail -- do not use these members.\n   50  struct TableStruct_attr_5fvalue_2eproto {\n   51    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/tensorflow/function.pb.h:\n   46  PROTOBUF_NAMESPACE_CLOSE\n   47  \n   48: // Internal implementation detail -- do not use these members.\n   49  struct TableStruct_function_2eproto {\n   50    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/tensorflow/graph.pb.h:\n   47  PROTOBUF_NAMESPACE_CLOSE\n   48  \n   49: // Internal implementation detail -- do not use these members.\n   50  struct TableStruct_graph_2eproto {\n   51    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/tensorflow/op_def.pb.h:\n   43  PROTOBUF_NAMESPACE_CLOSE\n   44  \n   45: // Internal implementation detail -- do not use these members.\n   46  struct TableStruct_op_5fdef_2eproto {\n   47    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/tensorflow/tensor.pb.h:\n   43  PROTOBUF_NAMESPACE_CLOSE\n   44  \n   45: // Internal implementation detail -- do not use these members.\n   46  struct TableStruct_tensor_2eproto {\n   47    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/tensorflow/tensor_shape.pb.h:\n   41  PROTOBUF_NAMESPACE_CLOSE\n   42  \n   43: // Internal implementation detail -- do not use these members.\n   44  struct TableStruct_tensor_5fshape_2eproto {\n   45    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/tensorflow/types.pb.h:\n   40  PROTOBUF_NAMESPACE_CLOSE\n   41  \n   42: // Internal implementation detail -- do not use these members.\n   43  struct TableStruct_types_2eproto {\n   44    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/misc/tensorflow/versions.pb.h:\n   41  PROTOBUF_NAMESPACE_CLOSE\n   42  \n   43: // Internal implementation detail -- do not use these members.\n   44  struct TableStruct_versions_2eproto {\n   45    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/src/op_cann.hpp:\n  123              acl_env = AclEnvGuard::GetAclEnv();\n  124          }\n  125:         ~CannNet(); // release private members\n  126  \n  127          bool empty() const;\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/dnn/src/tflite/schema.fbs:\n   31  file_extension \"tflite\";\n   32  \n   33: // IMPORTANT: All new members of tables, enums and unions must be added at the\n   34  // end to ensure backwards compatibility.\n   35  \n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/gapi/include/opencv2/gapi/streaming/onevpl/cfg_params.hpp:\n   23   * @brief Public class is using for creation of onevpl::GSource instances.\n   24   *\n   25:  * Class members available through methods @ref CfgParam::get_name() and @ref CfgParam::get_value() are used by\n   26   * onevpl::GSource inner logic to create or find oneVPL particular implementation\n   27   * (software/hardware, specific API version and etc.).\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/gapi/misc/python/package/gapi/__init__.py:\n  313      # NB: Second lvl decorator takes class to decorate\n  314      def kernel_with_params(cls):\n  315:         # NB: Add new members to kernel class\n  316          cls.id      = op_cls.id\n  317          cls.outMeta = op_cls.outMeta\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/gapi/src/backends/fluid/gfluidbackend.hpp:\n  120  class GFluidExecutable final: public GIslandExecutable\n  121  {\n  122:     GFluidExecutable(const GFluidExecutable&) = delete;  // due std::unique_ptr in members list\n  123  \n  124      const ade::Graph &m_g;\n  ...\n  167  \n  168  class GParallelFluidExecutable final: public GIslandExecutable {\n  169:     GParallelFluidExecutable(const GParallelFluidExecutable&) = delete;  // due std::unique_ptr in members list\n  170  \n  171      std::vector<std::unique_ptr<GFluidExecutable>> tiles;\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/gapi/src/streaming/onevpl/demux/async_mfp_demux_data_provider.hpp:\n   79                                                mfx_codec_id_type &out_codec_id,\n   80                                                void *source_id);\n   81:     // members\n   82      size_t keep_preprocessed_buf_count;\n   83  \n   84:     // COM members\n   85      ComPtrGuard<IMFMediaSource> source;\n   86      ComPtrGuard<IMFSourceReader> source_reader;\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/gapi/test/common/gapi_tests_common.hpp:\n  499   * @brief Create G-API test fixture with TestWithParams base class\n  500   * @param Fixture   test fixture name\n  501:  * @param InitF     callable that will initialize default available members (from TestFunctional)\n  502   * @param API       base class API. Specifies types of user-defined parameters. If there are no such\n  503   *                  parameters, empty angle brackets (\"<>\") must be specified.\n  ...\n  521   * @param Fixture   test fixture name.\n  522     @param ExtBase   additional base class.\n  523:  * @param InitF     callable that will initialize default available members (from TestFunctional)\n  524   * @param API       base class API. Specifies types of user-defined parameters. If there are no such\n  525   *                  parameters, empty angle brackets (\"<>\") must be specified.\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/imgproc/test/test_templmatchmask.cpp:\n  204      void SetUp() override;\n  205  \n  206:     // Data members\n  207      Mat img_;\n  208      Mat templ_;\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/objc/generator/gen_objc.py:\n  246      return t\n  247  \n  248: def gen_class_doc(docstring, module, members, enums):\n  249      lines = docstring.splitlines()\n  250      lines.insert(len(lines)-1, \" *\")\n  251:     if len(members) > 0:\n  252:         lines.insert(len(lines)-1, \" * Member classes: \" + \", \".join([(\"`\" + m + \"`\") for m in members]))\n  253          lines.insert(len(lines)-1, \" *\")\n  254      else:\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/python/src2/hdr_parser.py:\n  723                  break\n  724  \n  725:         # do not process hidden class members and template classes/functions\n  726          if not stack_top[self.PUBLIC_SECTION] or stmt.startswith(\"template\"):\n  727              return stmt_type, \"\", False, None\n  ...\n  789  \n  790          if (context == \"struct\" or context == \"class\") and end_token == \";\" and stmt:\n  791:             # looks like it's member declaration; append the members to the class declaration\n  792              class_decl = stack_top[self.CLASS_DECL]\n  793              if (\"CV_PROP\" in stmt): # or (class_decl and (\"/Map\" in class_decl[2])):\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/ts/include/opencv2/ts/ts_gtest.h:\n  245  //\n  246  // Among the platforms, Cygwin, Linux, Max OS X, and Windows have the\n  247: // most stable support.  Since core members of the Google Test project\n  248  // don't have access to other platforms, support for them may be less\n  249  // stable.  If you notice any problems on your platform, please notify\n  ...\n 1103  // The compiler used in Symbian has a bug that prevents us from declaring the\n 1104  // tuple template as a friend (it complains that tuple is redefined).  This\n 1105: // bypasses the bug by declaring the members that should otherwise be\n 1106  // private as public.\n 1107  // Sun Studio versions < 12 also have the above bug.\n ....\n 3155    // This constructor intentionally does nothing.  It relies on type_ being\n 3156    // statically initialized to 0 (effectively setting it to kStatic) and on\n 3157:   // ThreadSafeLazyInit() to lazily initialize the rest of the members.\n 3158    explicit Mutex(StaticConstructorSelector /*dummy*/) {}\n 3159  \n ....\n 3177    unsigned int owner_thread_id_;\n 3178  \n 3179:   // For static mutexes, we rely on these members being initialized to zeros\n 3180    // by the linker.\n 3181    MutexType type_;\n ....\n 9107  // Adapts a native array to a read-only STL-style container.  Instead\n 9108  // of the complete STL container concept, this adaptor only implements\n 9109: // members useful for Google Mock's container matchers.  New members\n 9110  // should be added as needed.  To simplify the implementation, we only\n 9111  // support Element being a raw type (i.e. having no top-level const or\n ....\n 10003  \n 10004  class FooTest : public ::testing::TestWithParam<const char*> {\n 10005:   // You can implement all the usual class fixture members here.\n 10006  };\n 10007  \n .....\n 10105  \n 10106  class BaseTest : public ::testing::Test {\n 10107:   // You can inherit all the usual members for a non-parameterized test\n 10108    // fixture here.\n 10109  };\n 10110  \n 10111  class DerivedTest : public BaseTest, public ::testing::WithParamInterface<int> {\n 10112:   // The usual test fixture members go here too.\n 10113  };\n 10114  \n .....\n 10348    }\n 10349  \n 10350:   // Smart pointer members.\n 10351    void reset(T* ptr = NULL) {\n 10352      depart();\n .....\n 19078  #define GTEST_INCLUDE_GTEST_GTEST_PROD_H_\n 19079  \n 19080: // When you need to test the private or protected members of a class,\n 19081  // use the FRIEND_TEST macro to declare your tests as friends of the\n 19082  // class.  For example:\n .....\n 19353    // Inside a test, refer to TypeParam to get the type parameter.\n 19354    // Since we are inside a derived class template, C++ requires use to\n 19355:   // visit the members of FooTest via 'this'.\n 19356    TypeParam n = this->value_;\n 19357  \n 19358:   // To visit static members of the fixture, add the TestFixture::\n 19359    // prefix.\n 19360    n += TestFixture::shared_;\n .....\n 20331    // test case.  Only the last value for a given key is remembered.  These\n 20332    // are public static so they can be called from utility functions that are\n 20333:   // not members of the test fixture.  Calls to RecordProperty made during\n 20334    // lifespan of the test (from the moment its constructor starts to the\n 20335    // moment its destructor finishes) will be output in XML as attributes of\n .....\n 21224  \n 21225    // These classes and functions are friends as they need to access private\n 21226:   // members of UnitTest.\n 21227    friend class ScopedTrace;\n 21228    friend class Test;\n\n~/Projects/plot-cv/qjs-opencv/opencv/modules/ts/src/ts_gtest.cpp:\n  211  // Known restrictions:\n  212  //   - 'statement' cannot reference local non-static variables or\n  213: //     non-static members of the current object.\n  214  //   - 'statement' cannot return a value.\n  215  //   - You cannot stream a failure message to this macro.\n  ...\n  263  // EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS does the same but for all threads.\n  264  //\n  265: // 'statement' is allowed to reference local variables and members of\n  266  // the current object.\n  267  //\n  ...\n  776  //\n  777  // This class contains functions for processing options the user\n  778: // specifies when running the tests.  It has only static members.\n  779  //\n  780  // In most cases, the user can specify an option using either an\n  ...\n 8033  \n 8034  // Assesses the success or failure of a death test, using both private\n 8035: // members which have previously been set, and one argument:\n 8036  //\n 8037: // Private data members:\n 8038  //   outcome:  An enumeration describing how the death test\n 8039  //             concluded: DIED, LIVED, THREW, or RETURNED.  The death test\n\n~/Projects/plot-cv/qjs-opencv/opencv/samples/gdb/mat_pretty_printer.py:\n  188          # yield 'test', gdb.parse_and_eval(f'(cv::MatTypes)0')\n  189  \n  190:     def children(self):  # TODO: hide real members under new child somehow\n  191          yield from self.views()\n  192          yield from self.real()\n\n~/Projects/plot-cv/qjs-opencv/opencv/samples/winrt/ImageManipulations/MediaExtensions/OcvTransform/OcvTransform.cpp:\n  249      // NOTE: This method should succeed even when there is no media type on the\n  250      //       stream. If there is no media type, we only need to fill in the dwFlags\n  251:     //       member of MFT_INPUT_STREAM_INFO. The other members depend on having a\n  252      //       a valid media type.\n  253  \n  ...\n  296      // NOTE: This method should succeed even when there is no media type on the\n  297      //       stream. If there is no media type, we only need to fill in the dwFlags\n  298:     //       member of MFT_OUTPUT_STREAM_INFO. The other members depend on having a\n  299      //       a valid media type.\n  300  \n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/bioinspired/src/retina.cpp:\n  263  private:\n  264  \n  265:     // Parameteres setup members\n  266      RetinaParameters _retinaParameters; // structure of parameters\n  267  \n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/cudalegacy/src/NCV.cpp:\n  324  //===================================================================\n  325  //\n  326: // NCVMemStackAllocator class members implementation\n  327  //\n  328  //===================================================================\n  ...\n  495  //===================================================================\n  496  //\n  497: // NCVMemNativeAllocator class members implementation\n  498  //\n  499  //===================================================================\n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/cudalegacy/src/cuda/NCVHaarObjectDetection.cu:\n  664      cudaStream_t cuStream;\n  665  \n  666:     //Kernel arguments are stored as members;\n  667      Ncv32u *d_inMask;\n  668      Ncv32u *d_outMask;\n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/cudev/include/opencv2/cudev/ptr2d/glob.hpp:\n   81  \n   82  Typically, it is used internally by OpenCV and by users who write device code. You can call\n   83: its members from both host and device code.\n   84   */\n   85  template <typename T> struct GlobPtrSz : GlobPtr<T>\n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/cvv/src/gui/tabwidget.hpp:\n   13  /**\n   14   * @brief A simple to QTabWidget Subclass, enabling the access to protected\n   15:  * members.\n   16   */\n   17  class TabWidget : public QTabWidget\n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/matlab/include/opencv2/matlab/mxarray.hpp:\n  228  \n  229    /*!\n  230:    * @brief swap all members of this and other\n  231     *\n  232     * the swap method is used by the assignment and move constructors\n  233:    * to swap the members of two MxArrays, leaving both in destructible states\n  234     */\n  235    friend void swap(MxArray& first, MxArray& second) {\n  ...\n  349     *\n  350     * Note in particular that the other MxArray is passed by value, thus invoking\n  351:    * the copy constructor which performs a deep copy of the input. The members of\n  352     * this and other are then swapped\n  353     */\n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/optflow/include/opencv2/optflow.hpp:\n  178  The class implements the \"Dual TV L1\" optical flow algorithm described in @cite Zach2007 and\n  179  @cite Javier2012 .\n  180: Here are important members of the class that control the algorithm, which you can set after\n  181  constructing the class instance:\n  182  \n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/superres/include/opencv2/superres.hpp:\n  183          @cite Mitzel09 .\n  184  \n  185:         Here are important members of the class that control the algorithm, which you can set after\n  186          constructing the class instance:\n  187  \n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/text/src/erfilter.cpp:\n 1588  */\n 1589  template <const unsigned char method, typename t_members>\n 1590: static void NN_chain_core(const int_fast32_t N, double * const D, t_members * const members, cluster_result & Z2)\n 1591  {\n 1592      int_fast32_t i;\n ....\n 1666          //if ( method == METHOD_METR_AVERAGE )\n 1667          {\n 1668:             size1 = static_cast<double>(members[idx1]);\n 1669:             size2 = static_cast<double>(members[idx2]);\n 1670:             members[idx2] += members[idx1];\n 1671          }\n 1672  \n ....\n 1870      ptrdiff_t dim; // size_t saves many statis_cast<> in products\n 1871      int_fast32_t N;\n 1872:     int_fast32_t * members;\n 1873      void (cluster_result::*postprocessfn) (const double) const;\n 1874      double postprocessarg;\n ....\n 1890                       dim(_dim),\n 1891                       N(_Num),\n 1892:                      members(_members),\n 1893                       postprocessfn(NULL),\n 1894                       V(NULL)\n ....\n 2011      {\n 2012          cluster_result Z2(N-1);\n 2013:         auto_array_ptr<int_fast32_t> members;\n 2014:         dissimilarity dist(X, N, dim, members, method, metric, false);\n 2015          MST_linkage_core_vector(N, dist, Z2);\n 2016          dist.postprocess(Z2);\n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/tracking/include/opencv2/tracking/tracking_internals.hpp:\n  769  public:\n  770    /** @brief This structure contains all the parameters that can be varied during the course of sampling\n  771:     algorithm. Below is the structure exposed, together with its members briefly explained with\n  772      reference to the above discussion on algorithm's working.\n  773   */\n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/tracking/src/augmented_unscented_kalman.cpp:\n  115      double tmpLambda;                           // internal parameter, tmpLambda = alpha*alpha*( DP + k );\n  116  \n  117: // Auxillary members\n  118      Mat measurementEstimate;                    // estimate of current measurement (y*), MP x 1\n  119  \n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/tracking/src/tldDetector.cpp:\n  417  \t\t\tscValues.resize (ensBuffer.size());\n  418  \n  419: \t\t\t//Carefully resize standard patches with reference-counted Mat members\n  420  \t\t\tconst int oldPatchesSize = (int)standardPatches.size();\n  421  \t\t\tstandardPatches.resize (ensBuffer.size());\n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/tracking/src/unscented_kalman.cpp:\n  103      double tmpLambda;                           // internal parameter, tmpLambda = alpha*alpha*( DP + k );\n  104  \n  105: // Auxillary members\n  106      Mat measurementEstimate;                    // estimate of current measurement (y*), MP x 1\n  107  \n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/xfeatures2d/samples/bagofwords_classification.cpp:\n  202          }\n  203      };\n  204:     //data members\n  205      string m_vocPath;\n  206      string m_vocName;\n  ...\n  216      string m_classifier_gt_class;\n  217  \n  218:     //data members\n  219      string m_train_set;\n  220      string m_test_set;\n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/xfeatures2d/samples/export-boostdesc.py:\n  146        print \"static const int nWLs = %i;\" % nWLs\n  147  \n  148:     # iterate each members\n  149      for i in range( 0, nWLs ):\n  150  \n\n~/Projects/plot-cv/qjs-opencv/opencv_contrib/modules/xphoto/src/bm3d_denoising_transforms_haar.hpp:\n  259  };\n  260  \n  261: /// Explicit static members initialization\n  262  \n  263  #define INITIALIZE_HAAR_TRANSFORM(type, member, value)              \\\n\n~/Projects/plot-cv/qjs-opencv/pngpp/Doxyfile:\n   64  \n   65  # If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen\n   66: # will include brief member descriptions after the members that are\n   67  # listed in the file and class documentation (similar to JavaDoc).\n   68  # Set to NO to disable this.\n   ..\n   97  \n   98  # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show\n   99: # all inherited members of a class in the documentation of that class\n  100: # as if those members were ordinary class members. Constructors,\n  101  # destructors and assignment operators of the base classes will not be\n  102  # shown.\n  ...\n  189  # C sources only. Doxygen will then generate output that is more\n  190  # tailored for C.  For instance, some of the names that are used will\n  191: # be different. The list of all members will be omitted, etc.\n  192  \n  193  OPTIMIZE_OUTPUT_FOR_C = NO\n  ...\n  218  # DISTRIBUTE_GROUP_DOC tag is set to YES, then doxygen will reuse the\n  219  # documentation of the first member in the group (if any) for the\n  220: # other members of the group. By default all members of a group must\n  221  # be documented explicitly.\n  222  \n  ...\n  238  # If the EXTRACT_ALL tag is set to YES doxygen will assume all\n  239  # entities in documentation are documented, even if no documentation\n  240: # was available.  Private class members and static file members will\n  241  # be hidden unless the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set\n  242  # to YES\n  ...\n  244  EXTRACT_ALL = YES\n  245  \n  246: # If the EXTRACT_PRIVATE tag is set to YES all private members of a\n  247  # class will be included in the documentation.\n  248  \n  249  EXTRACT_PRIVATE = NO\n  250  \n  251: # If the EXTRACT_STATIC tag is set to YES all static members of a file\n  252  # will be included in the documentation.\n  253  \n  ...\n  269  \n  270  # If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all\n  271: # undocumented members of documented classes, files or namespaces.  If\n  272: # set to NO (the default) these members will be included in the\n  273  # various overviews, but no documentation section is generated.  This\n  274  # option has no effect if EXTRACT_ALL is enabled.\n  ...\n  314  \n  315  # If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen\n  316: # will show members with their full class and namespace scopes in the\n  317  # documentation. If set to YES the scope will be hidden.\n  318  \n  ...\n  326  \n  327  # If the INLINE_INFO tag is set to YES (the default) then a tag\n  328: # [inline] is inserted in the documentation for inline members.\n  329  \n  330  INLINE_INFO = YES\n  331  \n  332  # If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen\n  333: # will sort the (detailed) documentation of file and class members\n  334: # alphabetically by member name. If set to NO the members will appear\n  335  # in declaration order.\n  336  \n  ...\n  338  \n  339  # If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the\n  340: # brief documentation of file, namespace and class members\n  341  # alphabetically by member name. If set to NO (the default) the\n  342: # members will appear in declaration order.\n  343  \n  344  SORT_BRIEF_DOCS = NO\n  ...\n  434  \n  435  # If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate\n  436: # warnings for undocumented members. If EXTRACT_ALL is set to YES then\n  437  # this flag will automatically be disabled.\n  438  \n  ...\n  712  HTML_STYLESHEET =\n  713  \n  714: # If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes,\n  715  # files or namespaces will be aligned in HTML using tables. If set to\n  716  # NO a bullet list will be used.\n  ...\n  752  \n  753  # The TOC_EXPAND flag can be set to YES to add extra items for group\n  754: # members to the contents of the HTML help documentation and to the\n  755  # tree view.\n  756  \n\n~/Projects/plot-cv/quickjs/qjs-imgui/imgui/imgui.cpp:\n 3532  \n 3533  // Internal state access - if you want to share Dear ImGui state between modules (e.g. DLL) or allocate it yourself\n 3534: // Note that we still point to some static data and members (such as GFontAtlas), so the state instance you end up using will point to the static data within its module\n 3535  ImGuiContext* ImGui::GetCurrentContext()\n 3536  {\n\n~/Projects/plot-cv/quickjs/qjs-imgui/imgui/imgui.h:\n 1670  // - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.\n 1671  //   During initialization or between frames, feel free to just poke into ImGuiStyle directly.\n 1672: // - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.\n 1673  //   In Visual Studio IDE: CTRL+comma (\"Edit.GoToAll\") can follow symbols in comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot.\n 1674  //   With Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols in comments.\n 1675: <skipped 45 characters> ...ate the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.\n 1676  enum ImGuiStyleVar_\n 1677  {\n ....\n 2861  \n 2862  // Hold rendering data for one glyph.\n 2863: // (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)\n 2864  struct ImFontGlyph\n 2865  {\n\n~/Projects/plot-cv/quickjs/qjs-imgui/imgui/imgui_internal.h:\n 1204      ImGuiNextItemDataFlags      Flags;\n 1205      ImGuiItemFlags              ItemFlags;          // Currently only tested/used for ImGuiItemFlags_AllowOverlap.\n 1206:     // Non-flags members are NOT cleared by ItemAdd() meaning they are still valid during NavProcessItem()\n 1207      float                       Width;              // Set by SetNextItemWidth()\n 1208      ImGuiSelectionUserData      SelectionUserData;  // Set by SetNextItemSelectionUserData() (note that NULL/0 is a valid value, we use -1 == ImGuiSelectionUserData_Invalid to mark invalid values)\n\n~/Projects/plot-cv/quickjs/qjs-imgui/imgui/imgui_tables.cpp:\n  432          PushOverrideID(instance_id); // FIXME: Somehow this is not resolved by stack-tool, even tho GetIDWithSeed() submitted the symbol.\n  433  \n  434:     // Backup a copy of host window members we will modify\n  435      ImGuiWindow* inner_window = table->InnerWindow;\n  436      table->HostIndentX = inner_window->DC.Indent.x;\n\n~/Projects/plot-cv/quickjs/qjs-imgui/imgui/docs/CONTRIBUTING.md:\n   62  - Due to frequent abuse of this service from the aforementioned users, if your GitHub account is ano... <skipped 51 characters> ...rstand that your post will receive more scrutiny and incomplete questions will be harshly dismissed.\n   63  \n   64: <skipped 126 characters> ...re, it is ok to not fulfill every item to the letter. Those are guidelines and experienced users or members of the community will know which information is useful in a given context.\n   65  \n   66  ## How to open a Pull Request\n\n~/Projects/plot-cv/quickjs/qjs-imgui/imgui/examples/libs/glfw/include/GLFW/glfw3.h:\n 1181   *\n 1182   *  @since Added in version 2.1.\n 1183:  *  @glfw3 Removed format and bytes-per-pixel members.\n 1184   */\n 1185  typedef struct GLFWimage\n\n~/Projects/plot-cv/quickjs/qjs-modules/Doxyfile:\n  103  \n  104  # If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member\n  105: # descriptions after the members that are listed in the file and class\n  106  # documentation (similar to Javadoc). Set to NO to disable this.\n  107  # The default value is: YES.\n  ...\n  147  \n  148  # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n  149: # inherited members of a class in the documentation of that class as if those\n  150: # members were ordinary class members. Constructors, destructors and assignment\n  151  # operators of the base classes will not be shown.\n  152  # The default value is: NO.\n  ...\n  273  # only. Doxygen will then generate output that is more tailored for C. For\n  274  # instance, some of the names that are used will be different. The list of all\n  275: # members will be omitted, etc.\n  276  # The default value is: NO.\n  277  \n  ...\n  389  # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n  390  # tag is set to YES then doxygen will reuse the documentation of the first\n  391: # member in the group (if any) for the other members of the group. By default\n  392: # all members of a group must be documented explicitly.\n  393  # The default value is: NO.\n  394  \n  ...\n  462  # If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in\n  463  # documentation are documented, even if no documentation was available. Private\n  464: # class members and static file members will be hidden unless the\n  465  # EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.\n  466: # Note: This will also disable the warnings about undocumented members that are\n  467  # normally produced when WARNINGS is set to YES.\n  468  # The default value is: NO.\n  ...\n  470  EXTRACT_ALL            = YES\n  471  \n  472: # If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will\n  473  # be included in the documentation.\n  474  # The default value is: NO.\n  ...\n  482  EXTRACT_PRIV_VIRTUAL   = NO\n  483  \n  484: # If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal\n  485  # scope will be included in the documentation.\n  486  # The default value is: NO.\n  ...\n  488  EXTRACT_PACKAGE        = NO\n  489  \n  490: # If the EXTRACT_STATIC tag is set to YES, all static members of a file will be\n  491  # included in the documentation.\n  492  # The default value is: NO.\n  ...\n  510  EXTRACT_LOCAL_METHODS  = NO\n  511  \n  512: # If this flag is set to YES, the members of anonymous namespaces will be\n  513  # extracted and appear in the documentation as a namespace called\n  514  # 'anonymous_namespace{file}', where file will be replaced with the base name of\n  ...\n  520  \n  521  # If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all\n  522: # undocumented members inside documented classes or files. If set to NO these\n  523: # members will be included in the various overviews, but no documentation\n  524  # section is generated. This option has no effect if EXTRACT_ALL is enabled.\n  525  # The default value is: NO.\n  ...\n  565  CASE_SENSE_NAMES       = YES\n  566  \n  567: # If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with\n  568  # their full class and namespace scopes in the documentation. If set to YES, the\n  569  # scope will be hidden.\n  ...\n  599  \n  600  # If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the\n  601: # documentation for inline members.\n  602  # The default value is: YES.\n  603  \n  ...\n  605  \n  606  # If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n  607: # (detailed) documentation of file and class members alphabetically by member\n  608: # name. If set to NO, the members will appear in declaration order.\n  609  # The default value is: YES.\n  610  \n  ...\n  612  \n  613  # If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n  614: # descriptions of file, namespace and class members alphabetically by member\n  615: # name. If set to NO, the members will appear in declaration order. Note that\n  616  # this will also influence the order of the classes in the class list.\n  617  # The default value is: NO.\n  ...\n  620  \n  621  # If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n  622: # (brief and detailed) documentation of class members so that constructors and\n  623  # destructors are listed first. If set to NO the constructors will appear in the\n  624  # respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n  ...\n  775  \n  776  # If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate\n  777: # warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag\n  778  # will automatically be disabled.\n  779  # The default value is: YES.\n  ...\n 1382  BINARY_TOC             = NO\n 1383  \n 1384: # The TOC_EXPAND flag can be set to YES to add extra items for group members to\n 1385  # the table of contents of the HTML help documentation and to the tree view.\n 1386  # The default value is: NO.\n ....\n 2014  \n 2015  # If the XML_NS_MEMB_FILE_SCOPE tag is set to YES, doxygen will include\n 2016: # namespace members in file scope as well, matching the HTML output.\n 2017  # The default value is: NO.\n 2018  # This tag requires that the tag GENERATE_XML is set to YES.\n\n~/Projects/plot-cv/quickjs/qjs-modules/webaudio.json:\n    1: {\"members\":[[{\"value\":\"AudioBuffer\"},{\"name\":\"AudioBuffer\",\"length\":1,\"members\":[[{\"value\":\"arguments\"},{\"type\":\"null\"}],[{\"value\":\"caller\"},{\"type\":\"null\"}],[{\"value\":\"prototype\"},{\"members\":[[{\"value\":\"length\"},{\"get\":\"function length() {  }\"}],[{\"value\":\"duration\"},{\"get\":\"function dura... <skipped 118 characters> ...ction numberOfChannels() {  }\"}],[{\"value\":\"copyFromChannel\"},{\"name\":\"copyFromChannel\",\"length\":2,\"members\":[]}],[{\"value\":\"copyToChannel\"},{\"name\":\"copyToChannel\",\"length\":2,\"members\":[]}],[{\"value\":\"getChannelData\"},{\"name\":\"getChannelData\",\"length\":1,\"members\":[]}],[{\"value\":\"constructor\"},null],[{\"global\":\"toStringTag\"},{\"value\":\"AudioBuffer\"}]]}]]}],[{\"value\":\"AudioBufferSourceNode\"},{\"name\":\"AudioBufferSourceNode\",\"length\":1,\"members\":[[{\"value\":\"arguments\"},{\"type\":\"null\"}],[{\"value\":\"caller\"},{\"type\":\"null\"}],[{\"value\":\"prototype\"},{\"members\":[[{\"value\":\"buffer\"},{\"get\":\"function buffer() {  }\",\"set\":\"function buffer() {  }\"}],[{\"value\":\"p... <skipped 316 characters> ...on loopEnd() {  }\",\"set\":\"function loopEnd() {  }\"}],[{\"value\":\"start\"},{\"name\":\"start\",\"length\":0,\"members\":[]}],[{\"value\":\"constructor\"},null],[{\"global\":\"toStringTag\"},{\"value\":\"AudioBufferSourceNode\"}]]}]]}],[{\"value\":\"AudioContext\"},{\"name\":\"AudioContext\",\"length\":0,\"members\":[[{\"value\":\"arguments\"},{\"type\":\"null\"}],[{\"value\":\"caller\"},{\"type\":\"null\"}],[{\"value\":\"prototype\"},{\"members\":[[{\"value\":\"baseLatency\"},{\"get\":\"function baseLatency() {  }\"}],[{\"value\":\"outputLatency\"},{\"get\":\"function outputLatency() {  }\"}],[{\"value\":\"close\"},{\"name\":\"close\",\"length\":0,\"members\":[]}],[{\"value\":\"createMediaElementSource\"},{\"name\":\"createMediaElementSource\",\"length\":1,\"members\":[]}],[{\"value\":\"createMediaStreamDestination\"},{\"name\":\"createMediaStreamDestination\",\"length\":0,\"members\":[]}],[{\"value\":\"createMediaStreamSource\"},{\"name\":\"createMediaStreamSource\",\"length\":1,\"members\":[]}],[{\"value\":\"getOutputTimestamp\"},{\"name\":\"getOutputTimestamp\",\"length\":0,\"members\":[]}],[{\"value\":\"resume\"},{\"name\":\"resume\",\"length\":0,\"members\":[]}],[{\"value\":\"suspend\"},{\"name\":\"suspend\",\"length\":0,\"members\":[]}],[{\"value\":\"onerror\"},{\"get\":\"function onerror() {  }\",\"set\":\"function onerror() {  }\"}],[{\"va... <skipped 138 characters> ...{  }\",\"set\":\"function onsinkchange() {  }\"}],[{\"value\":\"setSinkId\"},{\"name\":\"setSinkId\",\"length\":1,\"members\":[]}],[{\"global\":\"toStringTag\"},{\"value\":\"AudioContext\"}]]}]]}],[{\"value\":\"AudioDestinationNode\"},{\"name\":\"AudioDestinationNode\",\"length\":0,\"members\":[[{\"value\":\"arguments\"},{\"type\":\"null\"}],[{\"value\":\"caller\"},{\"type\":\"null\"}],[{\"value\":\"prototype\"},{\"members\":[[{\"value\":\"maxChannelCount\"},{\"get\":\"function maxChannelCount() {  }\"}],[{\"value\":\"constructor\"},... <skipped 35 characters> ...alue\":\"AudioDestinationNode\"}]]}]]}],[{\"value\":\"AudioListener\"},{\"name\":\"AudioListener\",\"length\":0,\"members\":[[{\"value\":\"arguments\"},{\"type\":\"null\"}],[{\"value\":\"caller\"},{\"type\":\"null\"}],[{\"value\":\"prototype\"},{\"members\":[[{\"value\":\"positionX\"},{\"get\":\"function positionX() {  }\"}],[{\"value\":\"positionY\"},{\"get\":\"functi... <skipped 366 characters> ...Z\"},{\"get\":\"function upZ() {  }\"}],[{\"value\":\"setOrientation\"},{\"name\":\"setOrientation\",\"length\":6,\"members\":[]}],[{\"value\":\"setPosition\"},{\"name\":\"setPosition\",\"length\":3,\"members\":[]}],[{\"value\":\"constructor\"},null],[{\"global\":\"toStringTag\"},{\"value\":\"AudioListener\"}]]}]]}],[{\"value\":\"AudioNode\"},{\"name\":\"AudioNode\",\"length\":0,\"members\":[[{\"value\":\"arguments\"},{\"type\":\"null\"}],[{\"value\":\"caller\"},{\"type\":\"null\"}],[{\"value\":\"prototype\"},{\"members\":[[{\"value\":\"context\"},{\"get\":\"function context() {  }\"}],[{\"value\":\"numberOfInputs\"},{\"get\":\"funct... <skipped 400 characters> ...,\"set\":\"function channelInterpretation() {  }\"}],[{\"value\":\"connect\"},{\"name\":\"connect\",\"length\":1,\"members\":[]}],[{\"value\":\"disconnect\"},{\"name\":\"disconnect\",\"length\":0,\"members\":[]}],[{\"value\":\"constructor\"},null],[{\"global\":\"toStringTag\"},{\"value\":\"AudioNode\"}]]}]]}],[{\"value\":\"AudioParam\"},{\"name\":\"AudioParam\",\"length\":0,\"members\":[[{\"value\":\"arguments\"},{\"type\":\"null\"}],[{\"value\":\"caller\"},{\"type\":\"null\"}],[{\"value\":\"prototype\"},{\"members\":[[{\"value\":\"value\"},{\"get\":\"function value() {  }\",\"set\":\"function value() {  }\"}],[{\"value\":\"auto... <skipped 251 characters> ...ction maxValue() {  }\"}],[{\"value\":\"cancelAndHoldAtTime\"},{\"name\":\"cancelAndHoldAtTime\",\"length\":1,\"members\":[]}],[{\"value\":\"cancelScheduledValues\"},{\"name\":\"cancelScheduledValues\",\"length\":1,\"members\":[]}],[{\"value\":\"exponentialRampToValueAtTime\"},{\"name\":\"exponentialRampToValueAtTime\",\"length\":2,\"members\":[]}],[{\"value\":\"linearRampToValueAtTime\"},{\"name\":\"linearRampToValueAtTime\",\"length\":2,\"members\":[]}],[{\"value\":\"setTargetAtTime\"},{\"name\":\"setTargetAtTime\",\"length\":3,\"members\":[]}],[{\"value\":\"setValueAtTime\"},{\"name\":\"setValueAtTime\",\"length\":2,\"members\":[]}],[{\"value\":\"setValueCurveAtTime\"},{\"name\":\"setValueCurveAtTime\",\"length\":3,\"members\":[]}],[{\"value\":\"constructor\"},null],[{\"global\":\"toStringTag\"},{\"value\":\"AudioParam\"}]]}]]}],[{\"value\":\"AudioScheduledSourceNode\"},{\"name\":\"AudioScheduledSourceNode\",\"length\":0,\"members\":[[{\"value\":\"arguments\"},{\"type\":\"null\"}],[{\"value\":\"caller\"},{\"type\":\"null\"}],[{\"value\":\"prototype\"},{\"members\":[[{\"value\":\"onended\"},{\"get\":\"function onended() {  }\",\"set\":\"function onended() {  }\"}],[{\"value\":\"start\"},{\"name\":\"start\",\"length\":0,\"members\":[]}],[{\"value\":\"stop\"},{\"name\":\"stop\",\"length\":0,\"members\":[]}],[{\"value\":\"constructor\"},null],[{\"global\":\"toStringTag\"},{\"value\":\"AudioScheduledSourceNode\"}]]}]]}],[{\"value\":\"OscillatorNode\"},{\"name\":\"OscillatorNode\",\"length\":1,\"members\":[[{\"value\":\"arguments\"},{\"type\":\"null\"}],[{\"value\":\"caller\"},{\"type\":\"null\"}],[{\"value\":\"prototype\"},{\"members\":[[{\"value\":\"type\"},{\"get\":\"function type() {  }\",\"set\":\"function type() {  }\"}],[{\"value\":\"frequen... <skipped 63 characters> ...\"get\":\"function detune() {  }\"}],[{\"value\":\"setPeriodicWave\"},{\"name\":\"setPeriodicWave\",\"length\":1,\"members\":[]}],[{\"value\":\"constructor\"},null],[{\"global\":\"toStringTag\"},{\"value\":\"OscillatorNode\"}]]}]]}]]}\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/reflect.js:\n    5  /* prettier-ignore */ class JSSymbol extends JSValue { constructor(value, global) { super(value); if(global) this.global = global; } }\n    6  /* prettier-ignore */ class JSRegExp extends JSValue { constructor(source, flags) { super(); this.source = source; this.flags = flags; } }\n    7: /* prettier-ignore */ class JSObject extends JSValue { constructor(members, proto) { super(); if(members) this.members = members; if(proto) this.proto = proto; } }\n    8  /* prettier-ignore */ class JSArray extends JSObject { constructor(arr) { super(arr ? [...arr] : undefined); } }\n    9  /* prettier-ignore */ class JSTypedArray extends JSObject { constructor(arr) { super(arr ? [...arr] : undefined); this.class = (arr?.[Symbol.toStringTag] ?? arr?.constructor?.name); } }\n   10: /* prettier-ignore */ class JSFunction extends JSObject { constructor(code, members, proto) { super(members, proto); if(code) this.code = code; } }\n   11: /* prettier-ignore */ class JSConstructor extends JSFunction { constructor(code, members, proto) { super(code, members, proto); } }\n   12  /* prettier-ignore */ class JSProperty { constructor(get, set) { if(get) this.get = get;  if(set) this.set = set; } }\n   13  \n   ..\n   41  \n   42        case 'array': {\n   43:         ret.members = [];\n   44:         for(let elem of this.members) ret.members.push(elem?.toJSON() ?? elem);\n   45          break;\n   46        }\n   ..\n   66            const is_object = typeof v == 'object' && v != null;\n   67  \n   68:           if(k == 'members') {\n   69              const arr = v.map(([key, val]) => [hasPrototype(key, JSValue.prototype) ? key.toJSON() : key, hasPrototype(val, JSValue.prototype, JSProperty.prototype) ? val.toJSON() : val]);\n   70              //console.log('JSValue.toJSON(2)', { k, arr });\n   ..\n  132      const { type } = this;\n  133      const ret = { type };\n  134:     if('members' in this && this.members) ret.members = this.members;\n  135      if('proto' in this && this.proto) ret.proto = this.proto;\n  136      if('code' in this && this.code) ret.code = this.code;\n  ...\n  242        if(tag) define(info, { class: tag });\n  243        if(is_arraybuffer) info.data = [...new Uint8Array(val)].reduce((a, n) => (a ? a + ',' : '') + n.toString(16).padStart(2, '0'), '');\n  244:       if(is_typedarray) (info.members ??= {}).buffer = EncodeJS(val.buffer, [...stack, val], mapFn);\n  245        if(!is_function || is_constructor || is_object) {\n  246          const keys = [...getKeys(val, (desc, key) => true)];\n  247  \n  248:         if(!('members' in info))\n  249            if(keys.length > 0) {\n  250              Object.assign(info, {\n  251:               members: EncodeObj(val, (key, desc) => (is_function ? ['length', 'name'].indexOf(key) == -1 : true), [...stack, val], mapFn),\n  252              });\n  253            }\n  ...\n  305  \n  306  export function EncodeObj(obj, keys, stack = [], mapFn) {\n  307:   const members = [];\n  308    const props = Object.getOwnPropertyDescriptors(obj);\n  309    const is_function = typeof keys == 'function';\n  ...\n  328        if(!('value' in a) && 'writable' in a) define(r, { writable: a.writable });\n  329      } catch(e) {}\n  330:     members.push([EncodeJS(k, stack, mapFn), r]);\n  331    }\n  332  \n  333:   return members;\n  334  }\n  335  \n  ...\n  347      case 'array': {\n  348        val = [];\n  349:       for(let item of info.members) val.push(DecodeJS(item));\n  350        break;\n  351      }\n  ...\n  364          }\n  365        else if(info.type == 'array') {\n  366:         if(info.class && info.class != 'Array' && info.members.buffer) {\n  367:           const { buffer, ...members } = info.members;\n  368:           info.members = members;\n  369            val = new globalThis[info.class](DecodeJS(buffer));\n  370:         } else if(Array.isArray(info.members)) val = [...info.members].map(i => DecodeJS(i));\n  371        } else if(info.class == 'ArrayBuffer') val = new Uint8Array(info.data.split(',').map(s => parseInt(s, 16))).buffer;\n  372  \n  373        val ||= {};\n  374  \n  375:       if(info.members) {\n  376          const props = {};\n  377  \n  378:         for(const [k, v] of info.members) {\n  379            const key = DecodeJS(k);\n  380  \n\n~/Projects/plot-cv/quickjs/qjs-modules/libarchive/cpio/test/test_format_newc.c:\n  177  \tino = from_hex(e + 6, 8); /* ino */\n  178  #if defined(_WIN32) && !defined(__CYGWIN__)\n  179: \t/* Group members bits and others bits do not work. */\n  180  \tassertEqualInt(0x8180, from_hex(e + 14, 8) & 0xffc0); /* Mode */\n  181  #else\n  ...\n  221  \t\tassert(is_hex(e + 6, 8)); /* ino */\n  222  #if defined(_WIN32) && !defined(CYGWIN)\n  223: \t\t/* Mode: Group members bits and others bits do not work. */\n  224  \t\tassertEqualInt(0xa180, from_hex(e + 14, 8) & 0xffc0);\n  225  #else\n  ...\n  254  \tassert(is_hex(e + 6, 8)); /* ino */\n  255  #if defined(_WIN32) && !defined(__CYGWIN__)\n  256: \t/* Group members bits and others bits do not work. */\n  257  \tassertEqualInt(0x41c0, from_hex(e + 14, 8) & 0xffc0); /* Mode */\n  258  #else\n  ...\n  291  \tassertEqualInt(ino, from_hex(e + 6, 8)); /* ino */\n  292  #if defined(_WIN32) && !defined(__CYGWIN__)\n  293: \t/* Group members bits and others bits do not work. */\n  294  \tassertEqualInt(0x8180, from_hex(e + 14, 8) & 0xffc0); /* Mode */\n  295  #else\n\n~/Projects/plot-cv/quickjs/qjs-modules/libarchive/cpio/test/test_option_c.c:\n  106  \tino = (int)from_octal(e + 12, 6);\n  107  #if defined(_WIN32) && !defined(__CYGWIN__)\n  108: \t/* Group members bits and others bits do not work. */\n  109  \tassertEqualMem(e + 18, \"100666\", 6); /* Mode */\n  110  #else\n  ...\n  136  \t\tassert(ino != (int)from_octal(e + 12, 6)); /* ino */\n  137  #if !defined(_WIN32) || defined(__CYGWIN__)\n  138: \t\t/* On Windows, symbolic link and group members bits and\n  139  \t\t * others bits do not work. */\n  140  \t\tassertEqualMem(e + 18, \"120777\", 6); /* Mode */\n  ...\n  166  \tassert(ino != (int)from_octal(e + 12, 6));\n  167  #if defined(_WIN32) && !defined(__CYGWIN__)\n  168: \t/* Group members bits and others bits do not work. */\n  169  \tassertEqualMem(e + 18, \"040777\", 6); /* Mode */\n  170  #else\n\n~/Projects/plot-cv/quickjs/qjs-modules/libarchive/libarchive/archive_read_support_format_rar.c:\n  340    char filename_must_match;\n  341  \n  342:   /* LZSS members */\n  343    struct huffman_code maincode;\n  344    struct huffman_code offsetcode;\n  ...\n  357    struct rar_filters filters;\n  358  \n  359:   /* PPMd Variant H members */\n  360    char ppmd_valid;\n  361    char ppmd_eod;\n\n~/Projects/plot-cv/quickjs/qjs-modules/libarchive/libarchive/libarchive-formats.5:\n  353  large archives, and a seeking strategy which can correctly\n  354  process self-extracting Zip archives and archives with\n  355: deleted members or other in-place modifications.\n  356  .Pp\n  357  The streaming reader processes Zip archives as they are read.\n\n~/Projects/plot-cv/quickjs/qjs-modules/libarchive/libarchive/test/test_write_disk_hardlink.c:\n   26  \n   27  #if defined(_WIN32) && !defined(__CYGWIN__)\n   28: /* Execution bits, Group members bits and others bits do not work. */\n   29  #define UMASK 0177\n   30  #define E_MASK (~0177)\n\n~/Projects/plot-cv/quickjs/qjs-modules/libarchive/unzip/bsdunzip.1:\n  106  mode 1 is supported, which lists the file names one per line.\n  107  .It Ar [member ...]\n  108: Optional list of members to extract from the zipfile.\n  109  Can include patterns, e.g.,\n  110  .Ar 'memberdir/*'\n\n~/Projects/plot-cv/quickjs/qjs-modules/libarchive/unzip/bsdunzip.c:\n 1245  \t * For compatibility with Info-ZIP's unzip(1) we need to treat\n 1246  \t * non-option arguments following an -x after the zipfile as\n 1247: \t * exclude list members.\n 1248  \t */\n 1249  \tif (unzip_exclude_mode) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/libserialport/Doxyfile:\n  103  \n  104  # If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member\n  105: # descriptions after the members that are listed in the file and class\n  106  # documentation (similar to Javadoc). Set to NO to disable this.\n  107  # The default value is: YES.\n  ...\n  137  \n  138  # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n  139: # inherited members of a class in the documentation of that class as if those\n  140: # members were ordinary class members. Constructors, destructors and assignment\n  141  # operators of the base classes will not be shown.\n  142  # The default value is: NO.\n  ...\n  263  # only. Doxygen will then generate output that is more tailored for C. For\n  264  # instance, some of the names that are used will be different. The list of all\n  265: # members will be omitted, etc.\n  266  # The default value is: NO.\n  267  \n  ...\n  379  # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n  380  # tag is set to YES then doxygen will reuse the documentation of the first\n  381: # member in the group (if any) for the other members of the group. By default\n  382: # all members of a group must be documented explicitly.\n  383  # The default value is: NO.\n  384  \n  ...\n  452  # If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in\n  453  # documentation are documented, even if no documentation was available. Private\n  454: # class members and static file members will be hidden unless the\n  455  # EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.\n  456: # Note: This will also disable the warnings about undocumented members that are\n  457  # normally produced when WARNINGS is set to YES.\n  458  # The default value is: NO.\n  ...\n  460  EXTRACT_ALL            = YES\n  461  \n  462: # If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will\n  463  # be included in the documentation.\n  464  # The default value is: NO.\n  ...\n  472  EXTRACT_PRIV_VIRTUAL   = NO\n  473  \n  474: # If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal\n  475  # scope will be included in the documentation.\n  476  # The default value is: NO.\n  ...\n  478  EXTRACT_PACKAGE        = NO\n  479  \n  480: # If the EXTRACT_STATIC tag is set to YES, all static members of a file will be\n  481  # included in the documentation.\n  482  # The default value is: NO.\n  ...\n  500  EXTRACT_LOCAL_METHODS  = NO\n  501  \n  502: # If this flag is set to YES, the members of anonymous namespaces will be\n  503  # extracted and appear in the documentation as a namespace called\n  504  # 'anonymous_namespace{file}', where file will be replaced with the base name of\n  ...\n  510  \n  511  # If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all\n  512: # undocumented members inside documented classes or files. If set to NO these\n  513: # members will be included in the various overviews, but no documentation\n  514  # section is generated. This option has no effect if EXTRACT_ALL is enabled.\n  515  # The default value is: NO.\n  ...\n  555  CASE_SENSE_NAMES       = NO\n  556  \n  557: # If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with\n  558  # their full class and namespace scopes in the documentation. If set to YES, the\n  559  # scope will be hidden.\n  ...\n  589  \n  590  # If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the\n  591: # documentation for inline members.\n  592  # The default value is: YES.\n  593  \n  ...\n  595  \n  596  # If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n  597: # (detailed) documentation of file and class members alphabetically by member\n  598: # name. If set to NO, the members will appear in declaration order.\n  599  # The default value is: YES.\n  600  \n  ...\n  602  \n  603  # If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n  604: # descriptions of file, namespace and class members alphabetically by member\n  605: # name. If set to NO, the members will appear in declaration order. Note that\n  606  # this will also influence the order of the classes in the class list.\n  607  # The default value is: NO.\n  ...\n  610  \n  611  # If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n  612: # (brief and detailed) documentation of class members so that constructors and\n  613  # destructors are listed first. If set to NO the constructors will appear in the\n  614  # respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n  ...\n  765  \n  766  # If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate\n  767: # warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag\n  768  # will automatically be disabled.\n  769  # The default value is: YES.\n  ...\n 1370  BINARY_TOC             = NO\n 1371  \n 1372: # The TOC_EXPAND flag can be set to YES to add extra items for group members to\n 1373  # the table of contents of the HTML help documentation and to the tree view.\n 1374  # The default value is: NO.\n ....\n 1996  \n 1997  # If the XML_NS_MEMB_FILE_SCOPE tag is set to YES, doxygen will include\n 1998: # namespace members in file scope as well, matching the HTML output.\n 1999  # The default value is: NO.\n 2000  # This tag requires that the tag GENERATE_XML is set to YES.\n\n~/Projects/plot-cv/quickjs/qjs-net/Doxyfile:\n  103  \n  104  # If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member\n  105: # descriptions after the members that are listed in the file and class\n  106  # documentation (similar to Javadoc). Set to NO to disable this.\n  107  # The default value is: YES.\n  ...\n  147  \n  148  # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n  149: # inherited members of a class in the documentation of that class as if those\n  150: # members were ordinary class members. Constructors, destructors and assignment\n  151  # operators of the base classes will not be shown.\n  152  # The default value is: NO.\n  ...\n  273  # only. Doxygen will then generate output that is more tailored for C. For\n  274  # instance, some of the names that are used will be different. The list of all\n  275: # members will be omitted, etc.\n  276  # The default value is: NO.\n  277  \n  ...\n  389  # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n  390  # tag is set to YES then doxygen will reuse the documentation of the first\n  391: # member in the group (if any) for the other members of the group. By default\n  392: # all members of a group must be documented explicitly.\n  393  # The default value is: NO.\n  394  \n  ...\n  462  # If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in\n  463  # documentation are documented, even if no documentation was available. Private\n  464: # class members and static file members will be hidden unless the\n  465  # EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.\n  466: # Note: This will also disable the warnings about undocumented members that are\n  467  # normally produced when WARNINGS is set to YES.\n  468  # The default value is: NO.\n  ...\n  470  EXTRACT_ALL            = NO\n  471  \n  472: # If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will\n  473  # be included in the documentation.\n  474  # The default value is: NO.\n  ...\n  482  EXTRACT_PRIV_VIRTUAL   = NO\n  483  \n  484: # If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal\n  485  # scope will be included in the documentation.\n  486  # The default value is: NO.\n  ...\n  488  EXTRACT_PACKAGE        = NO\n  489  \n  490: # If the EXTRACT_STATIC tag is set to YES, all static members of a file will be\n  491  # included in the documentation.\n  492  # The default value is: NO.\n  ...\n  510  EXTRACT_LOCAL_METHODS  = NO\n  511  \n  512: # If this flag is set to YES, the members of anonymous namespaces will be\n  513  # extracted and appear in the documentation as a namespace called\n  514  # 'anonymous_namespace{file}', where file will be replaced with the base name of\n  ...\n  520  \n  521  # If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all\n  522: # undocumented members inside documented classes or files. If set to NO these\n  523: # members will be included in the various overviews, but no documentation\n  524  # section is generated. This option has no effect if EXTRACT_ALL is enabled.\n  525  # The default value is: NO.\n  ...\n  565  CASE_SENSE_NAMES       = YES\n  566  \n  567: # If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with\n  568  # their full class and namespace scopes in the documentation. If set to YES, the\n  569  # scope will be hidden.\n  ...\n  599  \n  600  # If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the\n  601: # documentation for inline members.\n  602  # The default value is: YES.\n  603  \n  ...\n  605  \n  606  # If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n  607: # (detailed) documentation of file and class members alphabetically by member\n  608: # name. If set to NO, the members will appear in declaration order.\n  609  # The default value is: YES.\n  610  \n  ...\n  612  \n  613  # If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n  614: # descriptions of file, namespace and class members alphabetically by member\n  615: # name. If set to NO, the members will appear in declaration order. Note that\n  616  # this will also influence the order of the classes in the class list.\n  617  # The default value is: NO.\n  ...\n  620  \n  621  # If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n  622: # (brief and detailed) documentation of class members so that constructors and\n  623  # destructors are listed first. If set to NO the constructors will appear in the\n  624  # respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n  ...\n  775  \n  776  # If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate\n  777: # warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag\n  778  # will automatically be disabled.\n  779  # The default value is: YES.\n  ...\n 1383  BINARY_TOC             = NO\n 1384  \n 1385: # The TOC_EXPAND flag can be set to YES to add extra items for group members to\n 1386  # the table of contents of the HTML help documentation and to the tree view.\n 1387  # The default value is: NO.\n ....\n 2015  \n 2016  # If the XML_NS_MEMB_FILE_SCOPE tag is set to YES, doxygen will include\n 2017: # namespace members in file scope as well, matching the HTML output.\n 2018  # The default value is: NO.\n 2019  # This tag requires that the tag GENERATE_XML is set to YES.\n\n~/Projects/plot-cv/quickjs/qjs-net/js/reflect.js:\n    7  /* prettier-ignore */ class JSSymbol extends JSValue { constructor(value, global) { super(); if(global) this.global=global;   if(value) this.value = value; } }\n    8  /* prettier-ignore */ class JSRegExp extends JSValue { constructor(source, flags) { super(); this.source = source; this.flags = flags; } }\n    9: /* prettier-ignore */ class JSObject extends JSValue { constructor(members, proto) { super(); if(members) this.members = members; if(proto) this.proto = proto; } }\n   10  /* prettier-ignore */ class JSArray extends JSObject { constructor(arr) { super(arr ? [...arr] : undefined); } }\n   11: /* prettier-ignore */ class JSFunction extends JSObject { constructor(code, members, proto) { super(members,proto); if(code) this.code = code; } }\n   12  /* prettier-ignore */ class JSProperty   { constructor(get, set) { if(get) this.get = get;  if(set) this.set = set; } }\n   13  \n   ..\n   52        if(isArrayBuffer) info.data = [...new Uint8Array(val)].reduce((a, n) => (a ? a + ',' : '') + n.toString(16).padStart(2, '0'), '');\n   53        if(!isFunction) {\n   54:         const members = isArray || isTypedArray ? [...val].map(i => EncodeJS(i)) : EncodeObj(val);\n   55:         if(isTypedArray) (info.members ??= {}).buffer = EncodeJS(val.buffer);\n   56:         else if(Object.keys(members).length > 0) info.members = members;\n   57          if(!(isArray || isTypedArray)) if (proto) define(info, { proto: EncodeJS(proto) });\n   58        }\n   ..\n   91  \n   92  export function EncodeObj(obj) {\n   93:   const members = Object.setPrototypeOf({}, null);\n   94    const props = Object.getOwnPropertyDescriptors(obj);\n   95    for(let k in props) {\n   ..\n  101      if(a.configurable === false) define(r, { configurable: a.configurable });\n  102      if(!('value' in a) && 'writable' in a) define(r, { writable: a.writable });\n  103:     members[k] = r;\n  104    }\n  105:   return members;\n  106  }\n  107  \n  ...\n  120          }\n  121        else if(info.type == 'array') {\n  122:         if(info.class && info.class != 'Array' && info.members.buffer) {\n  123:           const { buffer, ...members } = info.members;\n  124:           info.members = members;\n  125            val = new globalThis[info.class](DecodeJS(buffer));\n  126:         } else if(Array.isArray(info.members)) val = [...info.members].map(i => DecodeJS(i));\n  127        } else if(info.class == 'ArrayBuffer') val = new Uint8Array(info.data.split(',').map(s => parseInt(s, 16))).buffer;\n  128        else val = {};\n  129:       if(info.members) {\n  130          const props = {};\n  131:         for(const k in info.members) {\n  132:           const v = info.members[k];\n  133            if(v.get || v.set) {\n  134              const prop = { enumerable: true, configurable: true };\n\n~/Projects/plot-cv/quickjs/qjs-net/js/rpc.js:\n  361        )\n  362      ),\n  363:     properties: instance(members(v => !isFunction(v))),\n  364:     methods: instance(members(v => isFunction(v))),\n  365      get: instance((obj, property, instance) => {\n  366        if(property in obj /* && !isFunction(obj[property])*/) {\n  ...\n  378    }\n  379  \n  380:   function members(pred = v => !isFunction(v), defaults = { maxDepth: Infinity }) {\n  381      return (obj, keyDescriptor = true, valueDescriptor = true, source = false, d) => (\n  382        (d = getPropertyDescriptors(obj, true, (proto, depth) => depth < (defaults.maxDepth ?? Infinity))),\n\n~/Projects/plot-cv/quickjs/qjs-sound/Doxyfile:\n  103  \n  104  # If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member\n  105: # descriptions after the members that are listed in the file and class\n  106  # documentation (similar to Javadoc). Set to NO to disable this.\n  107  # The default value is: YES.\n  ...\n  147  \n  148  # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n  149: # inherited members of a class in the documentation of that class as if those\n  150: # members were ordinary class members. Constructors, destructors and assignment\n  151  # operators of the base classes will not be shown.\n  152  # The default value is: NO.\n  ...\n  273  # only. Doxygen will then generate output that is more tailored for C. For\n  274  # instance, some of the names that are used will be different. The list of all\n  275: # members will be omitted, etc.\n  276  # The default value is: NO.\n  277  \n  ...\n  389  # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n  390  # tag is set to YES then doxygen will reuse the documentation of the first\n  391: # member in the group (if any) for the other members of the group. By default\n  392: # all members of a group must be documented explicitly.\n  393  # The default value is: NO.\n  394  \n  ...\n  462  # If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in\n  463  # documentation are documented, even if no documentation was available. Private\n  464: # class members and static file members will be hidden unless the\n  465  # EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.\n  466: # Note: This will also disable the warnings about undocumented members that are\n  467  # normally produced when WARNINGS is set to YES.\n  468  # The default value is: NO.\n  ...\n  470  EXTRACT_ALL            =  NO\n  471  \n  472: # If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will\n  473  # be included in the documentation.\n  474  # The default value is: NO.\n  ...\n  482  EXTRACT_PRIV_VIRTUAL   = NO\n  483  \n  484: # If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal\n  485  # scope will be included in the documentation.\n  486  # The default value is: NO.\n  ...\n  488  EXTRACT_PACKAGE        = NO\n  489  \n  490: # If the EXTRACT_STATIC tag is set to YES, all static members of a file will be\n  491  # included in the documentation.\n  492  # The default value is: NO.\n  ...\n  510  EXTRACT_LOCAL_METHODS  = NO\n  511  \n  512: # If this flag is set to YES, the members of anonymous namespaces will be\n  513  # extracted and appear in the documentation as a namespace called\n  514  # 'anonymous_namespace{file}', where file will be replaced with the base name of\n  ...\n  520  \n  521  # If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all\n  522: # undocumented members inside documented classes or files. If set to NO these\n  523: # members will be included in the various overviews, but no documentation\n  524  # section is generated. This option has no effect if EXTRACT_ALL is enabled.\n  525  # The default value is: NO.\n  ...\n  565  CASE_SENSE_NAMES       = YES\n  566  \n  567: # If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with\n  568  # their full class and namespace scopes in the documentation. If set to YES, the\n  569  # scope will be hidden.\n  ...\n  599  \n  600  # If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the\n  601: # documentation for inline members.\n  602  # The default value is: YES.\n  603  \n  ...\n  605  \n  606  # If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n  607: # (detailed) documentation of file and class members alphabetically by member\n  608: # name. If set to NO, the members will appear in declaration order.\n  609  # The default value is: YES.\n  610  \n  ...\n  612  \n  613  # If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n  614: # descriptions of file, namespace and class members alphabetically by member\n  615: # name. If set to NO, the members will appear in declaration order. Note that\n  616  # this will also influence the order of the classes in the class list.\n  617  # The default value is: NO.\n  ...\n  620  \n  621  # If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n  622: # (brief and detailed) documentation of class members so that constructors and\n  623  # destructors are listed first. If set to NO the constructors will appear in the\n  624  # respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n  ...\n  775  \n  776  # If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate\n  777: # warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag\n  778  # will automatically be disabled.\n  779  # The default value is: YES.\n  ...\n 1428  BINARY_TOC             = NO\n 1429  \n 1430: # The TOC_EXPAND flag can be set to YES to add extra items for group members to\n 1431  # the table of contents of the HTML help documentation and to the tree view.\n 1432  # The default value is: NO.\n ....\n 2060  \n 2061  # If the XML_NS_MEMB_FILE_SCOPE tag is set to YES, doxygen will include\n 2062: # namespace members in file scope as well, matching the HTML output.\n 2063  # The default value is: NO.\n 2064  # This tag requires that the tag GENERATE_XML is set to YES.\n\n~/Projects/plot-cv/quickjs/qjs-sound/doc/html/group__from__js.html:\n   63  <div class=\"header\">\n   64    <div class=\"summary\">\n   65: <a href=\"#func-members\">Functions</a>  </div>\n   66    <div class=\"headertitle\">\n   67  <div class=\"title\">&lt;Output&gt; shims</div>  </div>\n   ..\n   69  <div class=\"contents\">\n   70  <table class=\"memberdecls\">\n   71: <tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"func-members\"></a>\n   72  Functions</h2></td></tr>\n   73  <tr class=\"memitem:gadcc49c9942adbf920c9e618705a1f731\"><td class=\"memTemplParams\" colspan=\"2\"><a id=\"gadcc49c9942adbf920c9e618705a1f731\"></a>\n\n~/Projects/plot-cv/quickjs/qjs-sound/doc/html/group__to__js.html:\n   63  <div class=\"header\">\n   64    <div class=\"summary\">\n   65: <a href=\"#func-members\">Functions</a>  </div>\n   66    <div class=\"headertitle\">\n   67  <div class=\"title\">&lt;Input&gt; shims</div>  </div>\n   ..\n   69  <div class=\"contents\">\n   70  <table class=\"memberdecls\">\n   71: <tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"func-members\"></a>\n   72  Functions</h2></td></tr>\n   73  <tr class=\"memitem:gac1eb5caa2b9ab3b367d05e1045cc0b0a\"><td class=\"memTemplParams\" colspan=\"2\"><a id=\"gac1eb5caa2b9ab3b367d05e1045cc0b0a\"></a>\n\n~/Projects/plot-cv/quickjs/qjs-sound/doc/html/structAudioNodePtr-members.html:\n   67  <div class=\"contents\">\n   68  \n   69: <p>This is the complete list of members for <a class=\"el\" href=\"structAudioNodePtr.html\">AudioNodePtr</a>, including all inherited members.</p>\n   70  <table class=\"directory\">\n   71    <tr bgcolor=\"#f0f0f0\" class=\"even\"><td class=\"entry\"><b>AudioNodePtr</b>(const base_type &amp;an, ... <skipped 156 characters> ...dioNodePtr.html\">AudioNodePtr</a></td><td class=\"entry\"><span class=\"mlabel\">inline</span></td></tr>\n\n~/Projects/plot-cv/quickjs/qjs-sound/doc/html/structAudioNodePtr.html:\n   66  <a href=\"#pub-methods\">Public Member Functions</a> &#124;\n   67  <a href=\"#pub-attribs\">Public Attributes</a> &#124;\n   68: <a href=\"structAudioNodePtr-members.html\">List of all members</a>  </div>\n   69    <div class=\"headertitle\">\n   70  <div class=\"title\">AudioNodePtr Class Reference</div>  </div>\n\n~/Projects/plot-cv/quickjs/qjs-sound/doc/html/structClassId-members.html:\n   67  <div class=\"contents\">\n   68  \n   69: <p>This is the complete list of members for <a class=\"el\" href=\"structClassId.html\">ClassId</a>, including all inherited members.</p>\n   70  <table class=\"directory\">\n   71    <tr bgcolor=\"#f0f0f0\" class=\"even\"><td class=\"entry\"><b>ClassId</b>() (defined in <a class=\"el\" hr... <skipped 77 characters> ...=\"structClassId.html\">ClassId</a></td><td class=\"entry\"><span class=\"mlabel\">inline</span></td></tr>\n\n~/Projects/plot-cv/quickjs/qjs-sound/doc/html/structClassId.html:\n   64    <div class=\"summary\">\n   65  <a href=\"#pub-methods\">Public Member Functions</a> &#124;\n   66: <a href=\"structClassId-members.html\">List of all members</a>  </div>\n   67    <div class=\"headertitle\">\n   68  <div class=\"title\">ClassId Class Reference</div>  </div>\n\n~/Projects/plot-cv/quickjs/qjs-sound/third_party/LabSound/src/backends/RtAudio/RtAudio.h:\n  451      will be thrown.  If a device is busy or otherwise unavailable, the\n  452      structure member \"probed\" will have a value of \"false\" and all\n  453:     other members are undefined.  If the specified device is the\n  454      current default input or output device, the corresponding\n  455      \"isDefault\" member will have a value of \"true\".\n\n~/Projects/plot-cv/quickjs/qjs-sound/third_party/LabSound/third_party/concurrentqueue/README.md:\n  465  and an abstract block pool that comprises the initial pool and any blocks on the free list. There's ones that handle the producer list\n  466  (a lock-free add-only linked list of all the producers in the system). There's ones that handle the implicit producer lookup table (which\n  467: <skipped 31 characters> ... TLS lookup). And then there's some helper methods for allocating and freeing objects, and the data members\n  468  of the queue itself, followed lastly by the free-standing swap functions.\n  469  \n\n\n\nSearching 2586 files for \"\\bmembers\\b\" (regex, case sensitive)\n\n~/Projects/plot-cv/create-tamper.js:\n  307            ? decl.properties.map(prop => ('id' in prop ? prop.id : prop))\n  308            : decl instanceof ObjectExpression\n  309:           ? decl.members.map(prop => ('id' in prop ? prop.id : prop))\n  310            : decl\n  311        );\n\n~/Projects/plot-cv/dump-structs.js:\n  528  }\n  529  \n  530: function* GenerateInspectStruct(type, members, includes) {\n  531    for(let include of ['stdio.h', ...includes]) yield `#include <${include}>`;\n  532    yield `${type} svar;`;\n  533    yield `int main() {`;\n  534    yield `  printf(\"${type} - %u\\\\n\", sizeof(svar));`;\n  535:   for(let member of members) yield `  printf(\".${member} %u %u\\\\n\", (char*)&svar.${member} - (char*)&svar, sizeof(svar.${member}));`;\n  536    yield `  return 0;`;\n  537    yield `}`;\n  538  }\n  539  \n  540: async function InspectStruct(type, members, includes) {\n  541:   const code = [...GenerateInspectStruct(type, members, includes)].join('\\n');\n  542    const file = `inspect-${type}-struct.c`;\n  543    WriteFile(file, code);\n\n~/Projects/plot-cv/webaudio.js:\n    1: export default \"{\\\"members\\\":[[{\\\"value\\\":\\\"AudioBuffer\\\"},{\\\"name\\\":\\\"AudioBuffer\\\",\\\"length\\\":1,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"length\\\"},{\\\"get\\\":\\\"function length() {  }\\\"}],[{\\\"value\\\":\\\"duration\\\"},{\\\"get\\\"... <skipped 162 characters> ...OfChannels() {  }\\\"}],[{\\\"value\\\":\\\"copyFromChannel\\\"},{\\\"name\\\":\\\"copyFromChannel\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"copyToChannel\\\"},{\\\"name\\\":\\\"copyToChannel\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"getChannelData\\\"},{\\\"name\\\":\\\"getChannelData\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioBuffer\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioBufferSourceNode\\\"},{\\\"name\\\":\\\"AudioBufferSourceNode\\\",\\\"length\\\":1,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"buffer\\\"},{\\\"get\\\":\\\"function buffer() {  }\\\",\\\"set\\\":\\\"function buffer() {  }\\\"}]... <skipped 392 characters> ...}\\\",\\\"set\\\":\\\"function loopEnd() {  }\\\"}],[{\\\"value\\\":\\\"start\\\"},{\\\"name\\\":\\\"start\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioBufferSourceNode\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioContext\\\"},{\\\"name\\\":\\\"AudioContext\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"baseLatency\\\"},{\\\"get\\\":\\\"function baseLatency() {  }\\\"}],[{\\\"value\\\":\\\"outputLatency\\\"},{\\\"get\\\":\\\"function outputLatency() {  }\\\"}],[{\\\"value\\\":\\\"close\\\"},{\\\"name\\\":\\\"close\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"createMediaElementSource\\\"},{\\\"name\\\":\\\"createMediaElementSource\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"createMediaStreamDestination\\\"},{\\\"name\\\":\\\"createMediaStreamDestination\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"createMediaStreamSource\\\"},{\\\"name\\\":\\\"createMediaStreamSource\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"getOutputTimestamp\\\"},{\\\"name\\\":\\\"getOutputTimestamp\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"resume\\\"},{\\\"name\\\":\\\"resume\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"suspend\\\"},{\\\"name\\\":\\\"suspend\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"onerror\\\"},{\\\"get\\\":\\\"function onerror() {  }\\\",\\\"set\\\":\\\"function onerror() {... <skipped 186 characters> ...\"function onsinkchange() {  }\\\"}],[{\\\"value\\\":\\\"setSinkId\\\"},{\\\"name\\\":\\\"setSinkId\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioContext\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioDestinationNode\\\"},{\\\"name\\\":\\\"AudioDestinationNode\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"maxChannelCount\\\"},{\\\"get\\\":\\\"function maxChannelCount() {  }\\\"}],[{\\\"value\\\":\\\"co... <skipped 67 characters> ...DestinationNode\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioListener\\\"},{\\\"name\\\":\\\"AudioListener\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"positionX\\\"},{\\\"get\\\":\\\"function positionX() {  }\\\"}],[{\\\"value\\\":\\\"positionY\\\"},{... <skipped 450 characters> ...function upZ() {  }\\\"}],[{\\\"value\\\":\\\"setOrientation\\\"},{\\\"name\\\":\\\"setOrientation\\\",\\\"length\\\":6,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setPosition\\\"},{\\\"name\\\":\\\"setPosition\\\",\\\"length\\\":3,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioListener\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioNode\\\"},{\\\"name\\\":\\\"AudioNode\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"context\\\"},{\\\"get\\\":\\\"function context() {  }\\\"}],[{\\\"value\\\":\\\"numberOfInputs\\\"},... <skipped 472 characters> ...tion channelInterpretation() {  }\\\"}],[{\\\"value\\\":\\\"connect\\\"},{\\\"name\\\":\\\"connect\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"disconnect\\\"},{\\\"name\\\":\\\"disconnect\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioNode\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioParam\\\"},{\\\"name\\\":\\\"AudioParam\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"value\\\"},{\\\"get\\\":\\\"function value() {  }\\\",\\\"set\\\":\\\"function value() {  }\\\"}],[{... <skipped 311 characters> ...ue() {  }\\\"}],[{\\\"value\\\":\\\"cancelAndHoldAtTime\\\"},{\\\"name\\\":\\\"cancelAndHoldAtTime\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"cancelScheduledValues\\\"},{\\\"name\\\":\\\"cancelScheduledValues\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"exponentialRampToValueAtTime\\\"},{\\\"name\\\":\\\"exponentialRampToValueAtTime\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"linearRampToValueAtTime\\\"},{\\\"name\\\":\\\"linearRampToValueAtTime\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setTargetAtTime\\\"},{\\\"name\\\":\\\"setTargetAtTime\\\",\\\"length\\\":3,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setValueAtTime\\\"},{\\\"name\\\":\\\"setValueAtTime\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setValueCurveAtTime\\\"},{\\\"name\\\":\\\"setValueCurveAtTime\\\",\\\"length\\\":3,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioParam\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioScheduledSourceNode\\\"},{\\\"name\\\":\\\"AudioScheduledSourceNode\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"onended\\\"},{\\\"get\\\":\\\"function onended() {  }\\\",\\\"set\\\":\\\"function onended() {  }\\\"}],[{\\\"value\\\":\\\"start\\\"},{\\\"name\\\":\\\"start\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"stop\\\"},{\\\"name\\\":\\\"stop\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioScheduledSourceNode\\\"}]]}]]}],[{\\\"value\\\":\\\"OscillatorNode\\\"},{\\\"name\\\":\\\"OscillatorNode\\\",\\\"length\\\":1,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"type\\\"},{\\\"get\\\":\\\"function type() {  }\\\",\\\"set\\\":\\\"function type() {  }\\\"}],[{\\\"v... <skipped 103 characters> ...ion detune() {  }\\\"}],[{\\\"value\\\":\\\"setPeriodicWave\\\"},{\\\"name\\\":\\\"setPeriodicWave\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"OscillatorNode\\\"}]]}]]}]]}\";\n    2  \n\n~/Projects/plot-cv/ast-shell.js:\n  432  \n  433  const GenerateInspectStruct = StringGenerator(function* (decl, includes) {\n  434:   let { name, members } = decl;\n  435  \n  436    includes ??= [decl.loc.file.replace(/^\\/usr\\/include\\//, '')];\n  437  \n  438:   //console.log('GenerateInspectStruct', { name, members, includes });\n  439  \n  440    yield '#include <stdio.h>';\n  441    yield '#include <stddef.h>';\n  442  \n  443:   if(MemberNames(members).some(name => /:/.test(name)))\n  444      yield `\n  445  size_t\n  ...\n  501    yield `  printf(\"${name} %zu\\\\n\", sizeof(svar) * 8);`;\n  502  \n  503:   for(let member of MemberNames(members)) {\n  504      if(true /*(type == null || typeof type.size == 'number') && member != undefined*/) {\n  505        let field = member.replace(/:.*/, '');\n  ...\n  599    }\n  600  \n  601:   let { size, members = [] } = decl;\n  602    name ??= decl.name;\n  603  \n  ...\n  611      offset = 0;\n  612  \n  613:   console.log('GenerateStructClass', { decl, members });\n  614  \n  615:   for(let [name, type] of members) {\n  616      if(/reserved/.test(name)) continue;\n  617  \n  ...\n  639    yield '';\n  640  \n  641:   yield `  toString() {\\n    const { ${fields.join(', ')} } = this;\\n    return \\`${name} {${[...members]\n  642      .map(\n  643        ([field, member]) =>\n  ...\n 1047  }\n 1048  \n 1049: function MemberNames(members, flags = 0) {\n 1050    let ret = [];\n 1051  \n 1052:   if(members.members) members = members.members;\n 1053  \n 1054:   if(!Array.isArray(members)) {\n 1055:     for(let ptr of [...DeepSelect(members, n => n.kind.endsWith('Decl') && n.name, deep.RETURN_PATH)].map(\n 1056        path => new Pointer(path),\n 1057      )) {\n ....\n 1060        console.log('ptrs:', ptrs);\n 1061  \n 1062:       let names = ptrs.map(p => DeepGet(members, [...p, 'name'], deep.NO_THROW));\n 1063:       let kinds = ptrs.map(p => DeepGet(members, [...p, 'kind'], deep.NO_THROW));\n 1064  \n 1065        console.log('kinds:', kinds);\n ....\n 1070    } else {\n 1071      const memberNamePointers = [\n 1072:       ...DeepSelect(members, n => Array.isArray(n) && n.length == 2 && typeof n[0] == 'string' && n[1] !== null),\n 1073      ].map(([node, ptr]) => ptr);\n 1074      //console.log('memberNamePointers', memberNamePointers);\n ....\n 1076      for(let ptr of memberNamePointers.map(path => new Pointer(path))) {\n 1077        let ptrs = ptr.chain(3),\n 1078:         names = ptrs.map(p => DeepGet(members, [...p, 0]));\n 1079  \n 1080        ret.push(names.filter(name => name).join('.'));\n ....\n 1184    ];\n 1185  \n 1186:   const members = {\n 1187:     fields: [...node.members].filter(\n 1188        n =>\n 1189          className(n) == 'FieldDecl' &&\n ....\n 1191          !(n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1192      ),\n 1193:     static: [...node.members].filter(\n 1194        n => className(n) == 'Type' && (n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1195      ),\n 1196:     methods: [...node.members].filter(\n 1197        n =>\n 1198          n.ast.kind == 'CXXMethodDecl' &&\n ....\n 1200          !(n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1201      ),\n 1202:     functions: [...node.members].filter(\n 1203        n =>\n 1204          n.ast.kind == 'CXXMethodDecl' &&\n ....\n 1206          (n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1207      ),\n 1208:     enums: [...node.members].filter(n => n.ast.kind == 'EnumDecl'),\n 1209:     ctor_dtor: [...node.members].filter(n => !(n.ast.kind == 'CXXMethodDecl' || className(n) == 'Type')),\n 1210    };\n 1211  \n ....\n 1234      names = [];\n 1235  \n 1236:   for(let method of members.methods) {\n 1237      if(names.indexOf(method.name) == -1) names.push(method.name);\n 1238  \n ....\n 1360    }\n 1361  \n 1362:   for(let field of members.fields) {\n 1363      const { name, desugared, typeAlias, access, storageClass } = field;\n 1364  \n ....\n 1374    }\n 1375  \n 1376:   for(let en of members.enums) {\n 1377:     const { name, members } = en;\n 1378  \n 1379      //out.fns += `  /* enum ${name} */\\n`;\n 1380  \n 1381:     for(let [name, value] of members) {\n 1382        out.fns += `  JS_PROP_INT64_DEF(\"${name}\", ${value}, JS_PROP_CONFIGURABLE),\\n`;\n 1383      }\n ....\n 1399      out.mfn +\n 1400      `\\n` +\n 1401:     (members.fields.length > 0 ? out.penum + `\\n` + out.pget + `\\n` + out.pset + `\\n` : '') +\n 1402      out.fns\n 1403    );\n\n~/Projects/plot-cv/clang-ast.js:\n  858        let tag, access;\n  859  \n  860:       Object.defineProperty(this, 'members', {\n  861          get: memoize(() =>\n  862            fields\n  ...\n  866                let type;\n  867  \n  868:               //console.log('members', console.config({ compact: true }), { name, kind });\n  869  \n  870                if(node.isBitfield) name += ':' + node.inner[0].inner[0].value;\n  ...\n  923  \n  924                /*          if(type instanceof EnumDecl) {\n  925:             for(let [name,[,value]] of type.members) {\n  926            acc.push([name, type]);\n  927  \n  ...\n  940  \n  941    get size() {\n  942:     const { members = [] } = this;\n  943  \n  944      return RoundTo(\n  945:       [...members].reduce((acc, [name, type]) => {\n  946          if(Number.isFinite(type?.size)) {\n  947            if(type.size == 8) acc = RoundTo(acc, 8);\n  ...\n  955  \n  956    toJSON() {\n  957:     const { name, size, members } = this;\n  958      return super.toJSON({\n  959        name,\n  960        size,\n  961:       members: members.map(([name, member]) => [name, member != null && member.toJSON ? member.toJSON() : member]),\n  962      });\n  963    }\n  ...\n  973      let number = 1;\n  974  \n  975:     this.members = new Map(\n  976        constants.map(({ name, type, inner }) => {\n  977          let value = inner ? PrintNode(inner[0]) : undefined;\n  ...\n  990  \n  991    toJSON() {\n  992:     const { name, size, members } = this;\n  993:     return super.toJSON({ name, size, members });\n  994    }\n  995  }\n\n~/Projects/plot-cv/quickjs2/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/testharness.js:\n 1542  \n 1543  /**\n 1544:  * Assert that ``expected`` is an array and ``actual`` is one of the members.\n 1545   * This is implemented using ``indexOf``, so doesn't handle NaN or ¬±0 correctly.\n 1546   *\n\n~/Projects/plot-cv/quickjs2/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/testharness.js:\n 1542  \n 1543  /**\n 1544:  * Assert that ``expected`` is an array and ``actual`` is one of the members.\n 1545   * This is implemented using ``indexOf``, so doesn't handle NaN or ¬±0 correctly.\n 1546   *\n\n~/Projects/plot-cv/quickjs2/inst/x86_64-linux-debug/usr/local/lib/quickjs/testharness.js:\n 1542  \n 1543  /**\n 1544:  * Assert that ``expected`` is an array and ``actual`` is one of the members.\n 1545   * This is implemented using ``indexOf``, so doesn't handle NaN or ¬±0 correctly.\n 1546   *\n\n~/Projects/plot-cv/quickjs2/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/testharness.js:\n 1542  \n 1543  /**\n 1544:  * Assert that ``expected`` is an array and ``actual`` is one of the members.\n 1545   * This is implemented using ``indexOf``, so doesn't handle NaN or ¬±0 correctly.\n 1546   *\n\n~/Projects/plot-cv/quickjs2/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/testharness.js:\n 1542  \n 1543  /**\n 1544:  * Assert that ``expected`` is an array and ``actual`` is one of the members.\n 1545   * This is implemented using ``indexOf``, so doesn't handle NaN or ¬±0 correctly.\n 1546   *\n\n~/Projects/plot-cv/quickjs2/inst/opt/musl/lib/quickjs/testharness.js:\n 1542  \n 1543  /**\n 1544:  * Assert that ``expected`` is an array and ``actual`` is one of the members.\n 1545   * This is implemented using ``indexOf``, so doesn't handle NaN or ¬±0 correctly.\n 1546   *\n\n~/Projects/plot-cv/data/mplab.functions.js:\n 1575  \n 1576  define('array_shift', dlsym(RTLD_DEFAULT, 'array_shift'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1577: export function array_shift(x, membersize, members) {\n 1578:   call('array_shift', x, membersize, members);\n 1579  }\n 1580  \n 1581  define('array_chop', dlsym(RTLD_DEFAULT, 'array_chop'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1582: export function array_chop(x, membersize, members) {\n 1583:   call('array_chop', x, membersize, members);\n 1584  }\n 1585  \n\n~/Projects/plot-cv/data/ar-wrap.functions.js:\n 1088  \n 1089  define('array_shift', dlsym(RTLD_DEFAULT, 'array_shift'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1090: export function array_shift(x, membersize, members) {\n 1091:   call('array_shift', x, membersize, members);\n 1092  }\n 1093  \n 1094  define('array_chop', dlsym(RTLD_DEFAULT, 'array_chop'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1095: export function array_chop(x, membersize, members) {\n 1096:   call('array_chop', x, membersize, members);\n 1097  }\n 1098  \n\n~/Projects/plot-cv/quickjs/qjs-net/js/reflect.js:\n    7  /* prettier-ignore */ class JSSymbol extends JSValue { constructor(value, global) { super(); if(global) this.global=global;   if(value) this.value = value; } }\n    8  /* prettier-ignore */ class JSRegExp extends JSValue { constructor(source, flags) { super(); this.source = source; this.flags = flags; } }\n    9: /* prettier-ignore */ class JSObject extends JSValue { constructor(members, proto) { super(); if(members) this.members = members; if(proto) this.proto = proto; } }\n   10  /* prettier-ignore */ class JSArray extends JSObject { constructor(arr) { super(arr ? [...arr] : undefined); } }\n   11: /* prettier-ignore */ class JSFunction extends JSObject { constructor(code, members, proto) { super(members,proto); if(code) this.code = code; } }\n   12  /* prettier-ignore */ class JSProperty   { constructor(get, set) { if(get) this.get = get;  if(set) this.set = set; } }\n   13  \n   ..\n   52        if(isArrayBuffer) info.data = [...new Uint8Array(val)].reduce((a, n) => (a ? a + ',' : '') + n.toString(16).padStart(2, '0'), '');\n   53        if(!isFunction) {\n   54:         const members = isArray || isTypedArray ? [...val].map(i => EncodeJS(i)) : EncodeObj(val);\n   55:         if(isTypedArray) (info.members ??= {}).buffer = EncodeJS(val.buffer);\n   56:         else if(Object.keys(members).length > 0) info.members = members;\n   57          if(!(isArray || isTypedArray)) if (proto) define(info, { proto: EncodeJS(proto) });\n   58        }\n   ..\n   91  \n   92  export function EncodeObj(obj) {\n   93:   const members = Object.setPrototypeOf({}, null);\n   94    const props = Object.getOwnPropertyDescriptors(obj);\n   95    for(let k in props) {\n   ..\n  101      if(a.configurable === false) define(r, { configurable: a.configurable });\n  102      if(!('value' in a) && 'writable' in a) define(r, { writable: a.writable });\n  103:     members[k] = r;\n  104    }\n  105:   return members;\n  106  }\n  107  \n  ...\n  120          }\n  121        else if(info.type == 'array') {\n  122:         if(info.class && info.class != 'Array' && info.members.buffer) {\n  123:           const { buffer, ...members } = info.members;\n  124:           info.members = members;\n  125            val = new globalThis[info.class](DecodeJS(buffer));\n  126:         } else if(Array.isArray(info.members)) val = [...info.members].map(i => DecodeJS(i));\n  127        } else if(info.class == 'ArrayBuffer') val = new Uint8Array(info.data.split(',').map(s => parseInt(s, 16))).buffer;\n  128        else val = {};\n  129:       if(info.members) {\n  130          const props = {};\n  131:         for(const k in info.members) {\n  132:           const v = info.members[k];\n  133            if(v.get || v.set) {\n  134              const prop = { enumerable: true, configurable: true };\n\n~/Projects/plot-cv/quickjs/qjs-net/js/rpc.js:\n  361        )\n  362      ),\n  363:     properties: instance(members(v => !isFunction(v))),\n  364:     methods: instance(members(v => isFunction(v))),\n  365      get: instance((obj, property, instance) => {\n  366        if(property in obj /* && !isFunction(obj[property])*/) {\n  ...\n  378    }\n  379  \n  380:   function members(pred = v => !isFunction(v), defaults = { maxDepth: Infinity }) {\n  381      return (obj, keyDescriptor = true, valueDescriptor = true, source = false, d) => (\n  382        (d = getPropertyDescriptors(obj, true, (proto, depth) => depth < (defaults.maxDepth ?? Infinity))),\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/reflect.js:\n    5  /* prettier-ignore */ class JSSymbol extends JSValue { constructor(value, global) { super(value); if(global) this.global = global; } }\n    6  /* prettier-ignore */ class JSRegExp extends JSValue { constructor(source, flags) { super(); this.source = source; this.flags = flags; } }\n    7: /* prettier-ignore */ class JSObject extends JSValue { constructor(members, proto) { super(); if(members) this.members = members; if(proto) this.proto = proto; } }\n    8  /* prettier-ignore */ class JSArray extends JSObject { constructor(arr) { super(arr ? [...arr] : undefined); } }\n    9  /* prettier-ignore */ class JSTypedArray extends JSObject { constructor(arr) { super(arr ? [...arr] : undefined); this.class = (arr?.[Symbol.toStringTag] ?? arr?.constructor?.name); } }\n   10: /* prettier-ignore */ class JSFunction extends JSObject { constructor(code, members, proto) { super(members, proto); if(code) this.code = code; } }\n   11: /* prettier-ignore */ class JSConstructor extends JSFunction { constructor(code, members, proto) { super(code, members, proto); } }\n   12  /* prettier-ignore */ class JSProperty { constructor(get, set) { if(get) this.get = get;  if(set) this.set = set; } }\n   13  \n   ..\n   41  \n   42        case 'array': {\n   43:         ret.members = [];\n   44:         for(let elem of this.members) ret.members.push(elem?.toJSON() ?? elem);\n   45          break;\n   46        }\n   ..\n   66            const is_object = typeof v == 'object' && v != null;\n   67  \n   68:           if(k == 'members') {\n   69              const arr = v.map(([key, val]) => [hasPrototype(key, JSValue.prototype) ? key.toJSON() : key, hasPrototype(val, JSValue.prototype, JSProperty.prototype) ? val.toJSON() : val]);\n   70              //console.log('JSValue.toJSON(2)', { k, arr });\n   ..\n  132      const { type } = this;\n  133      const ret = { type };\n  134:     if('members' in this && this.members) ret.members = this.members;\n  135      if('proto' in this && this.proto) ret.proto = this.proto;\n  136      if('code' in this && this.code) ret.code = this.code;\n  ...\n  242        if(tag) define(info, { class: tag });\n  243        if(is_arraybuffer) info.data = [...new Uint8Array(val)].reduce((a, n) => (a ? a + ',' : '') + n.toString(16).padStart(2, '0'), '');\n  244:       if(is_typedarray) (info.members ??= {}).buffer = EncodeJS(val.buffer, [...stack, val], mapFn);\n  245        if(!is_function || is_constructor || is_object) {\n  246          const keys = [...getKeys(val, (desc, key) => true)];\n  247  \n  248:         if(!('members' in info))\n  249            if(keys.length > 0) {\n  250              Object.assign(info, {\n  251:               members: EncodeObj(val, (key, desc) => (is_function ? ['length', 'name'].indexOf(key) == -1 : true), [...stack, val], mapFn),\n  252              });\n  253            }\n  ...\n  305  \n  306  export function EncodeObj(obj, keys, stack = [], mapFn) {\n  307:   const members = [];\n  308    const props = Object.getOwnPropertyDescriptors(obj);\n  309    const is_function = typeof keys == 'function';\n  ...\n  328        if(!('value' in a) && 'writable' in a) define(r, { writable: a.writable });\n  329      } catch(e) {}\n  330:     members.push([EncodeJS(k, stack, mapFn), r]);\n  331    }\n  332  \n  333:   return members;\n  334  }\n  335  \n  ...\n  347      case 'array': {\n  348        val = [];\n  349:       for(let item of info.members) val.push(DecodeJS(item));\n  350        break;\n  351      }\n  ...\n  364          }\n  365        else if(info.type == 'array') {\n  366:         if(info.class && info.class != 'Array' && info.members.buffer) {\n  367:           const { buffer, ...members } = info.members;\n  368:           info.members = members;\n  369            val = new globalThis[info.class](DecodeJS(buffer));\n  370:         } else if(Array.isArray(info.members)) val = [...info.members].map(i => DecodeJS(i));\n  371        } else if(info.class == 'ArrayBuffer') val = new Uint8Array(info.data.split(',').map(s => parseInt(s, 16))).buffer;\n  372  \n  373        val ||= {};\n  374  \n  375:       if(info.members) {\n  376          const props = {};\n  377  \n  378:         for(const [k, v] of info.members) {\n  379            const key = DecodeJS(k);\n  380  \n\n~/Projects/plot-cv/lib/testharness.js:\n 1565  \n 1566      /**\n 1567:      * Assert that ``expected`` is an array and ``actual`` is one of the members.\n 1568       * This is implemented using ``indexOf``, so doesn't handle NaN or ¬±0 correctly.\n 1569       *\n\n~/Projects/plot-cv/lib/avfs.js:\n  116    );\n  117  \n  118:   // fs members\n  119  \n  120    this.Stats = factories.stats(constants, { birthtime: true, milliseconds: true });\n\n~/Projects/plot-cv/lib/lua.js:\n 1514    }\n 1515  \n 1516:   parse_funcname(members = true) {\n 1517      /*fname    ::= <NAME> {'.' <NAME>} [':' <NAME>] */\n 1518  \n 1519      let funcname = this.parse_name();\n 1520  \n 1521:     if(members) {\n 1522        while(this.cur_token.value == '.') {\n 1523          this.next();\n ....\n 2044    }\n 2045  \n 2046:   parse_prefixexp(members = true) {\n 2047      /*\n 2048          prefixexp   ::= <NAME>\n ....\n 2056        return expr;\n 2057      }\n 2058:     return this.parse_funcname(members);\n 2059    }\n 2060  \n\n~/Projects/plot-cv/lib/dom.js:\n   29  \n   30    const extend = (e, functions) => {\n   31:     const keys = [...members(functions)].filter(\n   32        key => ['callee', 'caller', 'arguments', 'call', 'bind', 'apply', 'prototype', 'constructor', 'length'].indexOf(key) == -1 && typeof functions[key] == 'function'\n   33      );\n\n~/Projects/plot-cv/lib/util.js:\n 2447    if(x !== undefined) {\n 2448      let ret,\n 2449:       members = [];\n 2450      const handler = {\n 2451        construct(target, args) {\n ....\n 2459      }\n 2460      let proto = (x && x.prototype) || Object.getPrototypeOf(ret);\n 2461:     members = Util.getMemberNames(proto).filter(m => m !== 'constructor');\n 2462:     //console.log('members:', !!ret, members, Util.fnName(x));\n 2463:     return !!ret && members.length > 0;\n 2464    }\n 2465  };\n ....\n 3389      predicates.some(pred => pred(...args));\n 3390  \n 3391: Util.members = Util.curry((pred, obj) => Util.unique([...Util.iterateMembers(obj, Util.tryPredicate(pred))]));\n 3392  \n 3393  Util.memberNameFilter = (depth = 1, start = 0) =>\n ....\n 3412    }\n 3413    filters.unshift(Util.memberNameFilter(depth, start));\n 3414:   return Util.members(Util.and(...filters))(obj);\n 3415  };\n 3416  Util.getMemberEntries = (obj, ...args) => Util.getMemberNames(obj, ...args).map(name => [name, obj[name]]);\n ....\n 3419    (filterFn, accFn = (a, m, o) => ({ ...a, [m]: o[m] }), accu = {}) =>\n 3420    (obj, ...args) =>\n 3421:     Util.members(filterFn(...args), obj).reduce(\n 3422        Util.tryFunction(\n 3423          (a, m) => accFn(a, m, obj),\n ....\n 3450    let next = Util.tryFunction(((acc, mem, idx) => (filterFn(mem, idx) ? (setFn(idx, mem), acc) : null), r => r, () => mapObj));\n 3451    fn = function ReduceIntoMap(arg, acc = mapObj) {\n 3452:     if(Util.isObject(arg) && typeof arg.reduce == 'function') return arg.reduce((acc, arg) => (Array.isArray(arg) ? arg : Util.members(arg)).reduce(reducer, acc), self.map);\n 3453      let c = Util.counter();\n 3454      for(let mem of arg) acc = next(acc, mem, c());\n ....\n 3476    );\n 3477  \n 3478: Util.getMethodNames = (obj, depth = 1, start = 0) => Util.members(Util.methodNameFilter(depth, start))(obj);\n 3479  \n 3480  Util.getMethods = Util.objectReducer(Util.methodNameFilter);\n\n~/Projects/plot-cv/lib/lazyInitializer.js:\n   42  }\n   43  \n   44: export function lazyMembers(obj, members) {\n   45    let initializers = {};\n   46  \n   47:   for(let name in members) {\n   48:     initializers[name] = lazyInitializer(members[name]);\n   49  \n   50      Object.defineProperty(obj, name, {\n\n~/Projects/plot-cv/lib/whatwg/url.js:\n 1532          parts.pop();\n 1533        }\n 1534:       if(parts.length > 4) throw new TypeError('IPv4 should have no more than 4 members');\n 1535        const numbers = [];\n 1536        for(let part of parts) {\n 1537:         if(part === '') throw new TypeError('IPv4 should not have empty members');\n 1538          let radix = 10;\n 1539          if(part.startsWith('0x') || part.startsWith('0X')) {\n ....\n 1565        }\n 1566      } else if(Array.isArray(input) || ArrayBuffer.isView(input)) {\n 1567:       if(input.length !== 4) throw new TypeError('IPv4 should have 4 members');\n 1568        for(let i = 0; i < 4; i++) {\n 1569          this.#address[i] = input[i];\n ....\n 1665              }\n 1666            }\n 1667:           if(numbersSeen !== 4) throw new TypeError('Expected 4 members');\n 1668            break;\n 1669          } else if(inputCodePoints.charAt(pointer) === 0x003a) {\n ....\n 1690        }\n 1691      } else if(Array.isArray(input) || ArrayBuffer.isView(input)) {\n 1692:       if(input.length !== 8) throw new TypeError('IPv6 should have 8 uint16 members');\n 1693        for(let i = 0; i < 8; i++) {\n 1694          this.#address[i] = input[i];\n\n~/Projects/plot-cv/lib/json/xml2json.js:\n  138        else if(typeof o == 'object') {\n  139          json += ind + '{';\n  140:         //Count the members in o\n  141          var i = 0;\n  142          for(var member in o) i++;\n\n~/Projects/plot-cv/lib/ecmascript/environment.js:\n  337      let self = this;\n  338      let items = [];\n  339:     const { members } = node;\n  340      log({ items, node });\n  341:     node.members.forEach(property => {\n  342        // object expression keys are static so can be calculated\n  343        // immediately\n\n~/Projects/plot-cv/lib/ecmascript/estree.js:\n   31  \n   32    /* toJSON() {\n   33:     let members = getMembers();\n   34:     for(let prop in members) {\n   35:       let value = members[prop];\n   36        if(isObject(value) && value instanceof ESNode)\n   37:         members[prop] = value.toJSON();\n   38      }\n   39:     return members;\n   40    }*/\n   41  }\n   ..\n  776  ESNode.prototype.toString = function() {\n  777    let s = '';\n  778: <skipped 95 characters> ...ons', 'exported', 'expression', 'expressions', 'id', 'identifiers', 'init', 'kind', 'left', 'loc', 'members', 'object', 'operator', 'params', 'prefix', 'property', 'right', 'source', 'test', 'update', 'value'].forEach((field) => {\n  779      if(this[field]) {\n  780        let value = this[field];\n\n~/Projects/plot-cv/lib/ecmascript/printer.js:\n  660    printClassDeclaration(class_declaration) {\n  661      const { id, superClass, body } = class_declaration;\n  662:     const members = body.body;\n  663:     //console.log('printClassDeclaration', { id, superClass, members });\n  664      let output = 'class';\n  665      output = this.colorText.keywords(output);\n  ...\n  671      }\n  672      output += ' {';\n  673:     for(let member of members) {\n  674        let s = this.printNode(member);\n  675        if(member instanceof FunctionDeclaration) s = s.replace(/function\\s/, '');\n\n~/Projects/plot-cv/lib/ecmascript/interpreter.js:\n  203  \n  204    evalClassDeclaration(class_declaration) {\n  205:     const { id, extending, members } = class_declaration;\n  206:     console.log('class_declaration:', { id, extending, members });\n  207      let fn = this.scope.newValue(id, ECMAScriptValue.types.function);\n  208      let obj = this.scope.newValue(id, ECMAScriptValue.types.object);\n  209  \n  210:     for(let member of members) {\n  211        let prop = this.evalNode(member);\n  212        console.log('member:', prop);\n  ...\n  358  \n  359    evalObjectLiteral(object_literal) {\n  360:     const { members } = object_literal;\n  361      let obj = new ECMAScriptObject();\n  362:     for(let member of members) {\n  363        let prop = this.evalNode(member);\n  364        console.log('member:', prop);\n\n~/Projects/plot-cv/lib/ecmascript/parser.js:\n 1265      this.log(`parseArray()`);\n 1266      let object,\n 1267:       members = [];\n 1268      this.expectPunctuators('[');\n 1269  \n ....\n 1286        }\n 1287  \n 1288:       members.push(element);\n 1289  \n 1290        if(this.matchPunctuators(',')) this.expectPunctuators(',');\n 1291      }\n 1292      this.expectPunctuators(']');\n 1293:     object = new ArrayExpression(members);\n 1294  \n 1295      /*\n ....\n 1369      let tok2, tok3;\n 1370      this.log(`parseJSX(${depth})`);\n 1371:     let members = [];\n 1372      for(;;) {\n 1373        this.lexer.noRegex = true;\n ....\n 1376        if(tok2.value == '/') break;\n 1377        let tag = this.parseJSXTag();\n 1378:       members.push(tag);\n 1379:       let jsx = members[members.length - 1];\n 1380        jsx.children = [];\n 1381        if(jsx.selfClosing && depth == 0) break;\n ....\n 1423      if(depth == 0) {\n 1424        this.lexer.noRegex = false;\n 1425:       return members[0];\n 1426      }\n 1427:     return members;\n 1428    }\n 1429  \n ....\n 1978      //console.log(\"parseClass decl=\", decl);\n 1979      if(this.matchPunctuators(';')) this.expectPunctuators(';');\n 1980:     //let decl = new ClassDeclaration(identifier, extending, members);\n 1981  \n 1982      if(exported) decl = new ExportNamedDeclaration(decl);\n\n~/Projects/plot-cv/lib/ecmascript/parser2.js:\n 1545      //this.log(`parseArray()`);\n 1546      let object,\n 1547:       members = [];\n 1548      this.expectPunctuators(['[']);\n 1549  \n ....\n 1554        if(this.matchPunctuators([','])) {\n 1555          this.expectPunctuators([',']);\n 1556:         members.push(null);\n 1557          continue;\n 1558        }\n ....\n 1571        }\n 1572  \n 1573:       members.push(element);\n 1574  \n 1575        if(this.matchPunctuators([','])) this.expectPunctuators([',']);\n 1576      }\n 1577      this.expectPunctuators([']']);\n 1578:     object = this.addNode(ArrayExpression, members);\n 1579  \n 1580      /*\n ....\n 1652      let tok2, tok3;\n 1653      //this.log(`parseJSX(${depth})`);\n 1654:     let members = [];\n 1655      for(;;) {\n 1656        this.lexer.noRegex = true;\n ....\n 1659        if(tok2.value == '/') break;\n 1660        let tag = this.parseJSXTag();\n 1661:       members.push(tag);\n 1662:       let jsx = members[members.length - 1];\n 1663        jsx.children = [];\n 1664        if(jsx.selfClosing && depth == 0) break;\n ....\n 1703      if(depth == 0) {\n 1704        this.lexer.noRegex = false;\n 1705:       return members[0];\n 1706      }\n 1707:     return members;\n 1708    }\n 1709  \n ....\n 2290  \n 2291      if(this.matchPunctuators([';'])) this.expectPunctuators([';']);\n 2292:     //let decl = this.addNode(ClassDeclaration, identifier, extending, members);\n 2293  \n 2294      if(exported) decl = this.addNode(ExportNamedDeclaration, decl);\n\n~/Projects/plot-cv/openlayers/config/jsdoc/api/template/publish.js:\n  224  /**\n  225   * Create the navigation sidebar.\n  226:  * @param {Object} members The members that will be used to create the sidebar.\n  227:  * @param {Array<Object>} members.classes Classes.\n  228:  * @param {Array<Object>} members.externals Externals.\n  229:  * @param {Array<Object>} members.globals Globals.\n  230:  * @param {Array<Object>} members.mixins Mixins.\n  231:  * @param {Array<Object>} members.modules Modules.\n  232:  * @param {Array<Object>} members.namespaces Namespaces.\n  233:  * @param {Array<Object>} members.tutorials Tutorials.\n  234:  * @param {Array<Object>} members.events Events.\n  235   * @return {string} The HTML for the navigation sidebar.\n  236   */\n  237: function buildNav(members) {\n  238    const nav = [];\n  239:   members.classes.forEach(function (v) {\n  240      // exclude interfaces from sidebar\n  241      if (v.interface !== true) {\n  ...\n  249            longname: v.memberof,\n  250          })[0],\n  251:         members: find({\n  252            kind: 'member',\n  253            memberof: v.longname,\n  ...\n  269      }\n  270    });\n  271:   members.modules.forEach(function (v) {\n  272      const classes = find({\n  273        kind: 'class',\n  274        memberof: v.longname,\n  275      });\n  276:     const members = find({\n  277        kind: 'member',\n  278        memberof: v.longname,\n  ...\n  294      if (\n  295        typedefs.length > classes.length ||\n  296:       members.length + methods.length > 0\n  297      ) {\n  298        nav.push({\n  ...\n  301          prettyname: getPrettyName(v),\n  302          name: v.name,\n  303:         members: members,\n  304          methods: methods,\n  305          typedefs: typedefs,\n  ...\n  487    });\n  488  \n  489:   const members = helper.getMembers(data);\n  490:   members.tutorials = tutorials.children;\n  491  \n  492    // add template helpers\n  ...\n  496    view.tutoriallink = tutoriallink;\n  497    view.htmlsafe = htmlsafe;\n  498:   view.members = members; //@davidshimjs: To make navigation for customizing\n  499  \n  500    // once for all\n  501:   view.nav = buildNav(members);\n  502  \n  503    attachModuleSymbols(\n  504      find({kind: ['class', 'function'], longname: {left: 'module:'}}),\n  505:     members.modules\n  506    );\n  507  \n  ...\n  512    }\n  513  \n  514:   if (members.globals.length) {\n  515      generate('Global', [{kind: 'globalobj'}], globalUrl);\n  516    }\n  ...\n  542  \n  543    // set up the lists that we'll use to generate pages\n  544:   const classes = taffy(members.classes);\n  545:   const modules = taffy(members.modules);\n  546:   const namespaces = taffy(members.namespaces);\n  547:   const mixins = taffy(members.mixins);\n  548:   const externals = taffy(members.externals);\n  549  \n  550    for (const longname in helper.longnameToUrl) {\n\n~/Projects/plot-cv/openlayers/config/jsdoc/api/template/static/scripts/main.js:\n   57      const navListNode = $navList.get(0);\n   58      let $classItems;\n   59:     let $members;\n   60      let stateClass = (function () {\n   61        $navList.removeClass('search-started searching');\n   ..\n   82        }\n   83        $classItems = undefined;\n   84:       $members = undefined;\n   85  \n   86        // Search again with full navigation, if user already searched\n   ..\n  113        },\n  114        getMembers: function () {\n  115:         return $members || ($members = $navList.find('.item li'));\n  116        },\n  117        changeStateClass: function (newClass) {\n  ...\n  215            cls.weight += getSearchWeight(li, true);\n  216            const memberType = itemMember.dataset.type;\n  217:           let members = cls.subItems[memberType];\n  218:           if (!members) {\n  219:             members = cls.subItems[memberType] = {\n  220                item: itemMember,\n  221                subItems: {}\n  ...\n  223              itemMember.classList.add('match');\n  224            }\n  225:           members.subItems[name] = { item: li };\n  226            li.classList.add('match');\n  227          }\n\n~/Projects/plot-cv/openlayers/config/jsdoc/info/publish.js:\n   45    ).get();\n   46  \n   47:   // get symbols data, filter out those that are members of private classes\n   48    const symbols = [];\n   49    const defines = [];\n\n~/Projects/plot-cv/openlayers/examples/clusters-dynamic.js:\n   76  /**\n   77   * Style for clusters with features that are too close to each other, activated on click.\n   78:  * @param {Feature} cluster A cluster with overlapping members.\n   79   * @param {number} resolution The current view resolution.\n   80:  * @return {Style} A style to render an expanded view of the cluster members.\n   81   */\n   82  function clusterCircleStyle(cluster, resolution) {\n   ..\n  115   * Arranges points in a circle around the cluster center, with a line pointing from the center to\n  116   * each point.\n  117:  * @param {number} count Number of cluster members.\n  118   * @param {Array<number>} clusterCenter Center coordinate of the cluster.\n  119   * @param {number} resolution Current view resolution.\n  120:  * @return {Array<Array<number>>} An array of coordinates representing the cluster members.\n  121   */\n  122  function generatePointsCircle(count, clusterCenter, resolution) {\n  ...\n  202  });\n  203  \n  204: // Layer displaying the expanded view of overlapping cluster members.\n  205  const clusterCircles = new VectorLayer({\n  206    source: clusterSource,\n  ...\n  244        const clusterMembers = features[0].get('features');\n  245        if(clusterMembers.length > 1) {\n  246:         // Calculate the extent of the cluster members.\n  247          const extent = createEmpty();\n  248          clusterMembers.forEach(feature => extend(extent, feature.getGeometry().getExtent()));\n  ...\n  250          const resolution = map.getView().getResolution();\n  251          if(view.getZoom() === view.getMaxZoom() || (getWidth(extent) < resolution && getWidth(extent) < resolution)) {\n  252:           // Show an expanded view of the cluster members.\n  253            clickFeature = features[0];\n  254            clickResolution = resolution;\n  255            clusterCircles.setStyle(clusterCircleStyle);\n  256          } else {\n  257:           // Zoom to the extent of the cluster members.\n  258            view.fit(extent, { duration: 500, padding: [50, 50, 50, 50] });\n  259          }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/create-tamper.js:\n  307            ? decl.properties.map(prop => ('id' in prop ? prop.id : prop))\n  308            : decl instanceof ObjectExpression\n  309:           ? decl.members.map(prop => ('id' in prop ? prop.id : prop))\n  310            : decl\n  311        );\n\n278 matches across 35 files\n\n\nSearching 2172 files for \"\\bmembers\\b\" (regex, case sensitive)\n\n~/Projects/plot-cv/create-tamper.js:\n  307            ? decl.properties.map(prop => ('id' in prop ? prop.id : prop))\n  308            : decl instanceof ObjectExpression\n  309:           ? decl.members.map(prop => ('id' in prop ? prop.id : prop))\n  310            : decl\n  311        );\n\n~/Projects/plot-cv/dump-structs.js:\n  528  }\n  529  \n  530: function* GenerateInspectStruct(type, members, includes) {\n  531    for(let include of ['stdio.h', ...includes]) yield `#include <${include}>`;\n  532    yield `${type} svar;`;\n  533    yield `int main() {`;\n  534    yield `  printf(\"${type} - %u\\\\n\", sizeof(svar));`;\n  535:   for(let member of members) yield `  printf(\".${member} %u %u\\\\n\", (char*)&svar.${member} - (char*)&svar, sizeof(svar.${member}));`;\n  536    yield `  return 0;`;\n  537    yield `}`;\n  538  }\n  539  \n  540: async function InspectStruct(type, members, includes) {\n  541:   const code = [...GenerateInspectStruct(type, members, includes)].join('\\n');\n  542    const file = `inspect-${type}-struct.c`;\n  543    WriteFile(file, code);\n\n~/Projects/plot-cv/webaudio.js:\n    1: export default \"{\\\"members\\\":[[{\\\"value\\\":\\\"AudioBuffer\\\"},{\\\"name\\\":\\\"AudioBuffer\\\",\\\"length\\\":1,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"length\\\"},{\\\"get\\\":\\\"function length() {  }\\\"}],[{\\\"value\\\":\\\"duration\\\"},{\\\"get\\\"... <skipped 162 characters> ...OfChannels() {  }\\\"}],[{\\\"value\\\":\\\"copyFromChannel\\\"},{\\\"name\\\":\\\"copyFromChannel\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"copyToChannel\\\"},{\\\"name\\\":\\\"copyToChannel\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"getChannelData\\\"},{\\\"name\\\":\\\"getChannelData\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioBuffer\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioBufferSourceNode\\\"},{\\\"name\\\":\\\"AudioBufferSourceNode\\\",\\\"length\\\":1,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"buffer\\\"},{\\\"get\\\":\\\"function buffer() {  }\\\",\\\"set\\\":\\\"function buffer() {  }\\\"}]... <skipped 392 characters> ...}\\\",\\\"set\\\":\\\"function loopEnd() {  }\\\"}],[{\\\"value\\\":\\\"start\\\"},{\\\"name\\\":\\\"start\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioBufferSourceNode\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioContext\\\"},{\\\"name\\\":\\\"AudioContext\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"baseLatency\\\"},{\\\"get\\\":\\\"function baseLatency() {  }\\\"}],[{\\\"value\\\":\\\"outputLatency\\\"},{\\\"get\\\":\\\"function outputLatency() {  }\\\"}],[{\\\"value\\\":\\\"close\\\"},{\\\"name\\\":\\\"close\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"createMediaElementSource\\\"},{\\\"name\\\":\\\"createMediaElementSource\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"createMediaStreamDestination\\\"},{\\\"name\\\":\\\"createMediaStreamDestination\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"createMediaStreamSource\\\"},{\\\"name\\\":\\\"createMediaStreamSource\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"getOutputTimestamp\\\"},{\\\"name\\\":\\\"getOutputTimestamp\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"resume\\\"},{\\\"name\\\":\\\"resume\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"suspend\\\"},{\\\"name\\\":\\\"suspend\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"onerror\\\"},{\\\"get\\\":\\\"function onerror() {  }\\\",\\\"set\\\":\\\"function onerror() {... <skipped 186 characters> ...\"function onsinkchange() {  }\\\"}],[{\\\"value\\\":\\\"setSinkId\\\"},{\\\"name\\\":\\\"setSinkId\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioContext\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioDestinationNode\\\"},{\\\"name\\\":\\\"AudioDestinationNode\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"maxChannelCount\\\"},{\\\"get\\\":\\\"function maxChannelCount() {  }\\\"}],[{\\\"value\\\":\\\"co... <skipped 67 characters> ...DestinationNode\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioListener\\\"},{\\\"name\\\":\\\"AudioListener\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"positionX\\\"},{\\\"get\\\":\\\"function positionX() {  }\\\"}],[{\\\"value\\\":\\\"positionY\\\"},{... <skipped 450 characters> ...function upZ() {  }\\\"}],[{\\\"value\\\":\\\"setOrientation\\\"},{\\\"name\\\":\\\"setOrientation\\\",\\\"length\\\":6,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setPosition\\\"},{\\\"name\\\":\\\"setPosition\\\",\\\"length\\\":3,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioListener\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioNode\\\"},{\\\"name\\\":\\\"AudioNode\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"context\\\"},{\\\"get\\\":\\\"function context() {  }\\\"}],[{\\\"value\\\":\\\"numberOfInputs\\\"},... <skipped 472 characters> ...tion channelInterpretation() {  }\\\"}],[{\\\"value\\\":\\\"connect\\\"},{\\\"name\\\":\\\"connect\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"disconnect\\\"},{\\\"name\\\":\\\"disconnect\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioNode\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioParam\\\"},{\\\"name\\\":\\\"AudioParam\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"value\\\"},{\\\"get\\\":\\\"function value() {  }\\\",\\\"set\\\":\\\"function value() {  }\\\"}],[{... <skipped 311 characters> ...ue() {  }\\\"}],[{\\\"value\\\":\\\"cancelAndHoldAtTime\\\"},{\\\"name\\\":\\\"cancelAndHoldAtTime\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"cancelScheduledValues\\\"},{\\\"name\\\":\\\"cancelScheduledValues\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"exponentialRampToValueAtTime\\\"},{\\\"name\\\":\\\"exponentialRampToValueAtTime\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"linearRampToValueAtTime\\\"},{\\\"name\\\":\\\"linearRampToValueAtTime\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setTargetAtTime\\\"},{\\\"name\\\":\\\"setTargetAtTime\\\",\\\"length\\\":3,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setValueAtTime\\\"},{\\\"name\\\":\\\"setValueAtTime\\\",\\\"length\\\":2,\\\"members\\\":[]}],[{\\\"value\\\":\\\"setValueCurveAtTime\\\"},{\\\"name\\\":\\\"setValueCurveAtTime\\\",\\\"length\\\":3,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioParam\\\"}]]}]]}],[{\\\"value\\\":\\\"AudioScheduledSourceNode\\\"},{\\\"name\\\":\\\"AudioScheduledSourceNode\\\",\\\"length\\\":0,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"onended\\\"},{\\\"get\\\":\\\"function onended() {  }\\\",\\\"set\\\":\\\"function onended() {  }\\\"}],[{\\\"value\\\":\\\"start\\\"},{\\\"name\\\":\\\"start\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"stop\\\"},{\\\"name\\\":\\\"stop\\\",\\\"length\\\":0,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"AudioScheduledSourceNode\\\"}]]}]]}],[{\\\"value\\\":\\\"OscillatorNode\\\"},{\\\"name\\\":\\\"OscillatorNode\\\",\\\"length\\\":1,\\\"members\\\":[[{\\\"value\\\":\\\"arguments\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"caller\\\"},{\\\"type\\\":\\\"null\\\"}],[{\\\"value\\\":\\\"prototype\\\"},{\\\"members\\\":[[{\\\"value\\\":\\\"type\\\"},{\\\"get\\\":\\\"function type() {  }\\\",\\\"set\\\":\\\"function type() {  }\\\"}],[{\\\"v... <skipped 103 characters> ...ion detune() {  }\\\"}],[{\\\"value\\\":\\\"setPeriodicWave\\\"},{\\\"name\\\":\\\"setPeriodicWave\\\",\\\"length\\\":1,\\\"members\\\":[]}],[{\\\"value\\\":\\\"constructor\\\"},null],[{\\\"global\\\":\\\"toStringTag\\\"},{\\\"value\\\":\\\"OscillatorNode\\\"}]]}]]}]]}\";\n    2  \n\n~/Projects/plot-cv/ast-shell.js:\n  432  \n  433  const GenerateInspectStruct = StringGenerator(function* (decl, includes) {\n  434:   let { name, members } = decl;\n  435  \n  436    includes ??= [decl.loc.file.replace(/^\\/usr\\/include\\//, '')];\n  437  \n  438:   //console.log('GenerateInspectStruct', { name, members, includes });\n  439  \n  440    yield '#include <stdio.h>';\n  441    yield '#include <stddef.h>';\n  442  \n  443:   if(MemberNames(members).some(name => /:/.test(name)))\n  444      yield `\n  445  size_t\n  ...\n  501    yield `  printf(\"${name} %zu\\\\n\", sizeof(svar) * 8);`;\n  502  \n  503:   for(let member of MemberNames(members)) {\n  504      if(true /*(type == null || typeof type.size == 'number') && member != undefined*/) {\n  505        let field = member.replace(/:.*/, '');\n  ...\n  599    }\n  600  \n  601:   let { size, members = [] } = decl;\n  602    name ??= decl.name;\n  603  \n  ...\n  611      offset = 0;\n  612  \n  613:   console.log('GenerateStructClass', { decl, members });\n  614  \n  615:   for(let [name, type] of members) {\n  616      if(/reserved/.test(name)) continue;\n  617  \n  ...\n  639    yield '';\n  640  \n  641:   yield `  toString() {\\n    const { ${fields.join(', ')} } = this;\\n    return \\`${name} {${[...members]\n  642      .map(\n  643        ([field, member]) =>\n  ...\n 1047  }\n 1048  \n 1049: function MemberNames(members, flags = 0) {\n 1050    let ret = [];\n 1051  \n 1052:   if(members.members) members = members.members;\n 1053  \n 1054:   if(!Array.isArray(members)) {\n 1055:     for(let ptr of [...DeepSelect(members, n => n.kind.endsWith('Decl') && n.name, deep.RETURN_PATH)].map(\n 1056        path => new Pointer(path),\n 1057      )) {\n ....\n 1060        console.log('ptrs:', ptrs);\n 1061  \n 1062:       let names = ptrs.map(p => DeepGet(members, [...p, 'name'], deep.NO_THROW));\n 1063:       let kinds = ptrs.map(p => DeepGet(members, [...p, 'kind'], deep.NO_THROW));\n 1064  \n 1065        console.log('kinds:', kinds);\n ....\n 1070    } else {\n 1071      const memberNamePointers = [\n 1072:       ...DeepSelect(members, n => Array.isArray(n) && n.length == 2 && typeof n[0] == 'string' && n[1] !== null),\n 1073      ].map(([node, ptr]) => ptr);\n 1074      //console.log('memberNamePointers', memberNamePointers);\n ....\n 1076      for(let ptr of memberNamePointers.map(path => new Pointer(path))) {\n 1077        let ptrs = ptr.chain(3),\n 1078:         names = ptrs.map(p => DeepGet(members, [...p, 0]));\n 1079  \n 1080        ret.push(names.filter(name => name).join('.'));\n ....\n 1184    ];\n 1185  \n 1186:   const members = {\n 1187:     fields: [...node.members].filter(\n 1188        n =>\n 1189          className(n) == 'FieldDecl' &&\n ....\n 1191          !(n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1192      ),\n 1193:     static: [...node.members].filter(\n 1194        n => className(n) == 'Type' && (n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1195      ),\n 1196:     methods: [...node.members].filter(\n 1197        n =>\n 1198          n.ast.kind == 'CXXMethodDecl' &&\n ....\n 1200          !(n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1201      ),\n 1202:     functions: [...node.members].filter(\n 1203        n =>\n 1204          n.ast.kind == 'CXXMethodDecl' &&\n ....\n 1206          (n.storageClass == 'static' || n.ast.storageClass == 'static'),\n 1207      ),\n 1208:     enums: [...node.members].filter(n => n.ast.kind == 'EnumDecl'),\n 1209:     ctor_dtor: [...node.members].filter(n => !(n.ast.kind == 'CXXMethodDecl' || className(n) == 'Type')),\n 1210    };\n 1211  \n ....\n 1234      names = [];\n 1235  \n 1236:   for(let method of members.methods) {\n 1237      if(names.indexOf(method.name) == -1) names.push(method.name);\n 1238  \n ....\n 1360    }\n 1361  \n 1362:   for(let field of members.fields) {\n 1363      const { name, desugared, typeAlias, access, storageClass } = field;\n 1364  \n ....\n 1374    }\n 1375  \n 1376:   for(let en of members.enums) {\n 1377:     const { name, members } = en;\n 1378  \n 1379      //out.fns += `  /* enum ${name} */\\n`;\n 1380  \n 1381:     for(let [name, value] of members) {\n 1382        out.fns += `  JS_PROP_INT64_DEF(\"${name}\", ${value}, JS_PROP_CONFIGURABLE),\\n`;\n 1383      }\n ....\n 1399      out.mfn +\n 1400      `\\n` +\n 1401:     (members.fields.length > 0 ? out.penum + `\\n` + out.pget + `\\n` + out.pset + `\\n` : '') +\n 1402      out.fns\n 1403    );\n\n~/Projects/plot-cv/clang-ast.js:\n  858        let tag, access;\n  859  \n  860:       Object.defineProperty(this, 'members', {\n  861          get: memoize(() =>\n  862            fields\n  ...\n  866                let type;\n  867  \n  868:               //console.log('members', console.config({ compact: true }), { name, kind });\n  869  \n  870                if(node.isBitfield) name += ':' + node.inner[0].inner[0].value;\n  ...\n  923  \n  924                /*          if(type instanceof EnumDecl) {\n  925:             for(let [name,[,value]] of type.members) {\n  926            acc.push([name, type]);\n  927  \n  ...\n  940  \n  941    get size() {\n  942:     const { members = [] } = this;\n  943  \n  944      return RoundTo(\n  945:       [...members].reduce((acc, [name, type]) => {\n  946          if(Number.isFinite(type?.size)) {\n  947            if(type.size == 8) acc = RoundTo(acc, 8);\n  ...\n  955  \n  956    toJSON() {\n  957:     const { name, size, members } = this;\n  958      return super.toJSON({\n  959        name,\n  960        size,\n  961:       members: members.map(([name, member]) => [name, member != null && member.toJSON ? member.toJSON() : member]),\n  962      });\n  963    }\n  ...\n  973      let number = 1;\n  974  \n  975:     this.members = new Map(\n  976        constants.map(({ name, type, inner }) => {\n  977          let value = inner ? PrintNode(inner[0]) : undefined;\n  ...\n  990  \n  991    toJSON() {\n  992:     const { name, size, members } = this;\n  993:     return super.toJSON({ name, size, members });\n  994    }\n  995  }\n\n~/Projects/plot-cv/data/mplab.functions.js:\n 1575  \n 1576  define('array_shift', dlsym(RTLD_DEFAULT, 'array_shift'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1577: export function array_shift(x, membersize, members) {\n 1578:   call('array_shift', x, membersize, members);\n 1579  }\n 1580  \n 1581  define('array_chop', dlsym(RTLD_DEFAULT, 'array_chop'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1582: export function array_chop(x, membersize, members) {\n 1583:   call('array_chop', x, membersize, members);\n 1584  }\n 1585  \n\n~/Projects/plot-cv/data/ar-wrap.functions.js:\n 1088  \n 1089  define('array_shift', dlsym(RTLD_DEFAULT, 'array_shift'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1090: export function array_shift(x, membersize, members) {\n 1091:   call('array_shift', x, membersize, members);\n 1092  }\n 1093  \n 1094  define('array_chop', dlsym(RTLD_DEFAULT, 'array_chop'), null, 'void', 'void *', 'unsigned long', 'unsigned long');\n 1095: export function array_chop(x, membersize, members) {\n 1096:   call('array_chop', x, membersize, members);\n 1097  }\n 1098  \n\n~/Projects/plot-cv/quickjs/qjs-net/js/reflect.js:\n    7  /* prettier-ignore */ class JSSymbol extends JSValue { constructor(value, global) { super(); if(global) this.global=global;   if(value) this.value = value; } }\n    8  /* prettier-ignore */ class JSRegExp extends JSValue { constructor(source, flags) { super(); this.source = source; this.flags = flags; } }\n    9: /* prettier-ignore */ class JSObject extends JSValue { constructor(members, proto) { super(); if(members) this.members = members; if(proto) this.proto = proto; } }\n   10  /* prettier-ignore */ class JSArray extends JSObject { constructor(arr) { super(arr ? [...arr] : undefined); } }\n   11: /* prettier-ignore */ class JSFunction extends JSObject { constructor(code, members, proto) { super(members,proto); if(code) this.code = code; } }\n   12  /* prettier-ignore */ class JSProperty   { constructor(get, set) { if(get) this.get = get;  if(set) this.set = set; } }\n   13  \n   ..\n   52        if(isArrayBuffer) info.data = [...new Uint8Array(val)].reduce((a, n) => (a ? a + ',' : '') + n.toString(16).padStart(2, '0'), '');\n   53        if(!isFunction) {\n   54:         const members = isArray || isTypedArray ? [...val].map(i => EncodeJS(i)) : EncodeObj(val);\n   55:         if(isTypedArray) (info.members ??= {}).buffer = EncodeJS(val.buffer);\n   56:         else if(Object.keys(members).length > 0) info.members = members;\n   57          if(!(isArray || isTypedArray)) if (proto) define(info, { proto: EncodeJS(proto) });\n   58        }\n   ..\n   91  \n   92  export function EncodeObj(obj) {\n   93:   const members = Object.setPrototypeOf({}, null);\n   94    const props = Object.getOwnPropertyDescriptors(obj);\n   95    for(let k in props) {\n   ..\n  101      if(a.configurable === false) define(r, { configurable: a.configurable });\n  102      if(!('value' in a) && 'writable' in a) define(r, { writable: a.writable });\n  103:     members[k] = r;\n  104    }\n  105:   return members;\n  106  }\n  107  \n  ...\n  120          }\n  121        else if(info.type == 'array') {\n  122:         if(info.class && info.class != 'Array' && info.members.buffer) {\n  123:           const { buffer, ...members } = info.members;\n  124:           info.members = members;\n  125            val = new globalThis[info.class](DecodeJS(buffer));\n  126:         } else if(Array.isArray(info.members)) val = [...info.members].map(i => DecodeJS(i));\n  127        } else if(info.class == 'ArrayBuffer') val = new Uint8Array(info.data.split(',').map(s => parseInt(s, 16))).buffer;\n  128        else val = {};\n  129:       if(info.members) {\n  130          const props = {};\n  131:         for(const k in info.members) {\n  132:           const v = info.members[k];\n  133            if(v.get || v.set) {\n  134              const prop = { enumerable: true, configurable: true };\n\n~/Projects/plot-cv/quickjs/qjs-net/js/rpc.js:\n  361        )\n  362      ),\n  363:     properties: instance(members(v => !isFunction(v))),\n  364:     methods: instance(members(v => isFunction(v))),\n  365      get: instance((obj, property, instance) => {\n  366        if(property in obj /* && !isFunction(obj[property])*/) {\n  ...\n  378    }\n  379  \n  380:   function members(pred = v => !isFunction(v), defaults = { maxDepth: Infinity }) {\n  381      return (obj, keyDescriptor = true, valueDescriptor = true, source = false, d) => (\n  382        (d = getPropertyDescriptors(obj, true, (proto, depth) => depth < (defaults.maxDepth ?? Infinity))),\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/reflect.js:\n    5  /* prettier-ignore */ class JSSymbol extends JSValue { constructor(value, global) { super(value); if(global) this.global = global; } }\n    6  /* prettier-ignore */ class JSRegExp extends JSValue { constructor(source, flags) { super(); this.source = source; this.flags = flags; } }\n    7: /* prettier-ignore */ class JSObject extends JSValue { constructor(members, proto) { super(); if(members) this.members = members; if(proto) this.proto = proto; } }\n    8  /* prettier-ignore */ class JSArray extends JSObject { constructor(arr) { super(arr ? [...arr] : undefined); } }\n    9  /* prettier-ignore */ class JSTypedArray extends JSObject { constructor(arr) { super(arr ? [...arr] : undefined); this.class = (arr?.[Symbol.toStringTag] ?? arr?.constructor?.name); } }\n   10: /* prettier-ignore */ class JSFunction extends JSObject { constructor(code, members, proto) { super(members, proto); if(code) this.code = code; } }\n   11: /* prettier-ignore */ class JSConstructor extends JSFunction { constructor(code, members, proto) { super(code, members, proto); } }\n   12  /* prettier-ignore */ class JSProperty { constructor(get, set) { if(get) this.get = get;  if(set) this.set = set; } }\n   13  \n   ..\n   41  \n   42        case 'array': {\n   43:         ret.members = [];\n   44:         for(let elem of this.members) ret.members.push(elem?.toJSON() ?? elem);\n   45          break;\n   46        }\n   ..\n   66            const is_object = typeof v == 'object' && v != null;\n   67  \n   68:           if(k == 'members') {\n   69              const arr = v.map(([key, val]) => [hasPrototype(key, JSValue.prototype) ? key.toJSON() : key, hasPrototype(val, JSValue.prototype, JSProperty.prototype) ? val.toJSON() : val]);\n   70              //console.log('JSValue.toJSON(2)', { k, arr });\n   ..\n  132      const { type } = this;\n  133      const ret = { type };\n  134:     if('members' in this && this.members) ret.members = this.members;\n  135      if('proto' in this && this.proto) ret.proto = this.proto;\n  136      if('code' in this && this.code) ret.code = this.code;\n  ...\n  242        if(tag) define(info, { class: tag });\n  243        if(is_arraybuffer) info.data = [...new Uint8Array(val)].reduce((a, n) => (a ? a + ',' : '') + n.toString(16).padStart(2, '0'), '');\n  244:       if(is_typedarray) (info.members ??= {}).buffer = EncodeJS(val.buffer, [...stack, val], mapFn);\n  245        if(!is_function || is_constructor || is_object) {\n  246          const keys = [...getKeys(val, (desc, key) => true)];\n  247  \n  248:         if(!('members' in info))\n  249            if(keys.length > 0) {\n  250              Object.assign(info, {\n  251:               members: EncodeObj(val, (key, desc) => (is_function ? ['length', 'name'].indexOf(key) == -1 : true), [...stack, val], mapFn),\n  252              });\n  253            }\n  ...\n  305  \n  306  export function EncodeObj(obj, keys, stack = [], mapFn) {\n  307:   const members = [];\n  308    const props = Object.getOwnPropertyDescriptors(obj);\n  309    const is_function = typeof keys == 'function';\n  ...\n  328        if(!('value' in a) && 'writable' in a) define(r, { writable: a.writable });\n  329      } catch(e) {}\n  330:     members.push([EncodeJS(k, stack, mapFn), r]);\n  331    }\n  332  \n  333:   return members;\n  334  }\n  335  \n  ...\n  347      case 'array': {\n  348        val = [];\n  349:       for(let item of info.members) val.push(DecodeJS(item));\n  350        break;\n  351      }\n  ...\n  364          }\n  365        else if(info.type == 'array') {\n  366:         if(info.class && info.class != 'Array' && info.members.buffer) {\n  367:           const { buffer, ...members } = info.members;\n  368:           info.members = members;\n  369            val = new globalThis[info.class](DecodeJS(buffer));\n  370:         } else if(Array.isArray(info.members)) val = [...info.members].map(i => DecodeJS(i));\n  371        } else if(info.class == 'ArrayBuffer') val = new Uint8Array(info.data.split(',').map(s => parseInt(s, 16))).buffer;\n  372  \n  373        val ||= {};\n  374  \n  375:       if(info.members) {\n  376          const props = {};\n  377  \n  378:         for(const [k, v] of info.members) {\n  379            const key = DecodeJS(k);\n  380  \n\n~/Projects/plot-cv/lib/testharness.js:\n 1565  \n 1566      /**\n 1567:      * Assert that ``expected`` is an array and ``actual`` is one of the members.\n 1568       * This is implemented using ``indexOf``, so doesn't handle NaN or ¬±0 correctly.\n 1569       *\n\n~/Projects/plot-cv/lib/avfs.js:\n  116    );\n  117  \n  118:   // fs members\n  119  \n  120    this.Stats = factories.stats(constants, { birthtime: true, milliseconds: true });\n\n~/Projects/plot-cv/lib/lua.js:\n 1514    }\n 1515  \n 1516:   parse_funcname(members = true) {\n 1517      /*fname    ::= <NAME> {'.' <NAME>} [':' <NAME>] */\n 1518  \n 1519      let funcname = this.parse_name();\n 1520  \n 1521:     if(members) {\n 1522        while(this.cur_token.value == '.') {\n 1523          this.next();\n ....\n 2044    }\n 2045  \n 2046:   parse_prefixexp(members = true) {\n 2047      /*\n 2048          prefixexp   ::= <NAME>\n ....\n 2056        return expr;\n 2057      }\n 2058:     return this.parse_funcname(members);\n 2059    }\n 2060  \n\n~/Projects/plot-cv/lib/dom.js:\n   29  \n   30    const extend = (e, functions) => {\n   31:     const keys = [...members(functions)].filter(\n   32        key => ['callee', 'caller', 'arguments', 'call', 'bind', 'apply', 'prototype', 'constructor', 'length'].indexOf(key) == -1 && typeof functions[key] == 'function'\n   33      );\n\n~/Projects/plot-cv/lib/util.js:\n 2447    if(x !== undefined) {\n 2448      let ret,\n 2449:       members = [];\n 2450      const handler = {\n 2451        construct(target, args) {\n ....\n 2459      }\n 2460      let proto = (x && x.prototype) || Object.getPrototypeOf(ret);\n 2461:     members = Util.getMemberNames(proto).filter(m => m !== 'constructor');\n 2462:     //console.log('members:', !!ret, members, Util.fnName(x));\n 2463:     return !!ret && members.length > 0;\n 2464    }\n 2465  };\n ....\n 3389      predicates.some(pred => pred(...args));\n 3390  \n 3391: Util.members = Util.curry((pred, obj) => Util.unique([...Util.iterateMembers(obj, Util.tryPredicate(pred))]));\n 3392  \n 3393  Util.memberNameFilter = (depth = 1, start = 0) =>\n ....\n 3412    }\n 3413    filters.unshift(Util.memberNameFilter(depth, start));\n 3414:   return Util.members(Util.and(...filters))(obj);\n 3415  };\n 3416  Util.getMemberEntries = (obj, ...args) => Util.getMemberNames(obj, ...args).map(name => [name, obj[name]]);\n ....\n 3419    (filterFn, accFn = (a, m, o) => ({ ...a, [m]: o[m] }), accu = {}) =>\n 3420    (obj, ...args) =>\n 3421:     Util.members(filterFn(...args), obj).reduce(\n 3422        Util.tryFunction(\n 3423          (a, m) => accFn(a, m, obj),\n ....\n 3450    let next = Util.tryFunction(((acc, mem, idx) => (filterFn(mem, idx) ? (setFn(idx, mem), acc) : null), r => r, () => mapObj));\n 3451    fn = function ReduceIntoMap(arg, acc = mapObj) {\n 3452:     if(Util.isObject(arg) && typeof arg.reduce == 'function') return arg.reduce((acc, arg) => (Array.isArray(arg) ? arg : Util.members(arg)).reduce(reducer, acc), self.map);\n 3453      let c = Util.counter();\n 3454      for(let mem of arg) acc = next(acc, mem, c());\n ....\n 3476    );\n 3477  \n 3478: Util.getMethodNames = (obj, depth = 1, start = 0) => Util.members(Util.methodNameFilter(depth, start))(obj);\n 3479  \n 3480  Util.getMethods = Util.objectReducer(Util.methodNameFilter);\n\n~/Projects/plot-cv/lib/lazyInitializer.js:\n   42  }\n   43  \n   44: export function lazyMembers(obj, members) {\n   45    let initializers = {};\n   46  \n   47:   for(let name in members) {\n   48:     initializers[name] = lazyInitializer(members[name]);\n   49  \n   50      Object.defineProperty(obj, name, {\n\n~/Projects/plot-cv/lib/whatwg/url.js:\n 1532          parts.pop();\n 1533        }\n 1534:       if(parts.length > 4) throw new TypeError('IPv4 should have no more than 4 members');\n 1535        const numbers = [];\n 1536        for(let part of parts) {\n 1537:         if(part === '') throw new TypeError('IPv4 should not have empty members');\n 1538          let radix = 10;\n 1539          if(part.startsWith('0x') || part.startsWith('0X')) {\n ....\n 1565        }\n 1566      } else if(Array.isArray(input) || ArrayBuffer.isView(input)) {\n 1567:       if(input.length !== 4) throw new TypeError('IPv4 should have 4 members');\n 1568        for(let i = 0; i < 4; i++) {\n 1569          this.#address[i] = input[i];\n ....\n 1665              }\n 1666            }\n 1667:           if(numbersSeen !== 4) throw new TypeError('Expected 4 members');\n 1668            break;\n 1669          } else if(inputCodePoints.charAt(pointer) === 0x003a) {\n ....\n 1690        }\n 1691      } else if(Array.isArray(input) || ArrayBuffer.isView(input)) {\n 1692:       if(input.length !== 8) throw new TypeError('IPv6 should have 8 uint16 members');\n 1693        for(let i = 0; i < 8; i++) {\n 1694          this.#address[i] = input[i];\n\n~/Projects/plot-cv/lib/json/xml2json.js:\n  138        else if(typeof o == 'object') {\n  139          json += ind + '{';\n  140:         //Count the members in o\n  141          var i = 0;\n  142          for(var member in o) i++;\n\n~/Projects/plot-cv/lib/ecmascript/environment.js:\n  337      let self = this;\n  338      let items = [];\n  339:     const { members } = node;\n  340      log({ items, node });\n  341:     node.members.forEach(property => {\n  342        // object expression keys are static so can be calculated\n  343        // immediately\n\n~/Projects/plot-cv/lib/ecmascript/estree.js:\n   31  \n   32    /* toJSON() {\n   33:     let members = getMembers();\n   34:     for(let prop in members) {\n   35:       let value = members[prop];\n   36        if(isObject(value) && value instanceof ESNode)\n   37:         members[prop] = value.toJSON();\n   38      }\n   39:     return members;\n   40    }*/\n   41  }\n   ..\n  776  ESNode.prototype.toString = function() {\n  777    let s = '';\n  778: <skipped 95 characters> ...ons', 'exported', 'expression', 'expressions', 'id', 'identifiers', 'init', 'kind', 'left', 'loc', 'members', 'object', 'operator', 'params', 'prefix', 'property', 'right', 'source', 'test', 'update', 'value'].forEach((field) => {\n  779      if(this[field]) {\n  780        let value = this[field];\n\n~/Projects/plot-cv/lib/ecmascript/printer.js:\n  660    printClassDeclaration(class_declaration) {\n  661      const { id, superClass, body } = class_declaration;\n  662:     const members = body.body;\n  663:     //console.log('printClassDeclaration', { id, superClass, members });\n  664      let output = 'class';\n  665      output = this.colorText.keywords(output);\n  ...\n  671      }\n  672      output += ' {';\n  673:     for(let member of members) {\n  674        let s = this.printNode(member);\n  675        if(member instanceof FunctionDeclaration) s = s.replace(/function\\s/, '');\n\n~/Projects/plot-cv/lib/ecmascript/interpreter.js:\n  203  \n  204    evalClassDeclaration(class_declaration) {\n  205:     const { id, extending, members } = class_declaration;\n  206:     console.log('class_declaration:', { id, extending, members });\n  207      let fn = this.scope.newValue(id, ECMAScriptValue.types.function);\n  208      let obj = this.scope.newValue(id, ECMAScriptValue.types.object);\n  209  \n  210:     for(let member of members) {\n  211        let prop = this.evalNode(member);\n  212        console.log('member:', prop);\n  ...\n  358  \n  359    evalObjectLiteral(object_literal) {\n  360:     const { members } = object_literal;\n  361      let obj = new ECMAScriptObject();\n  362:     for(let member of members) {\n  363        let prop = this.evalNode(member);\n  364        console.log('member:', prop);\n\n~/Projects/plot-cv/lib/ecmascript/parser.js:\n 1265      this.log(`parseArray()`);\n 1266      let object,\n 1267:       members = [];\n 1268      this.expectPunctuators('[');\n 1269  \n ....\n 1286        }\n 1287  \n 1288:       members.push(element);\n 1289  \n 1290        if(this.matchPunctuators(',')) this.expectPunctuators(',');\n 1291      }\n 1292      this.expectPunctuators(']');\n 1293:     object = new ArrayExpression(members);\n 1294  \n 1295      /*\n ....\n 1369      let tok2, tok3;\n 1370      this.log(`parseJSX(${depth})`);\n 1371:     let members = [];\n 1372      for(;;) {\n 1373        this.lexer.noRegex = true;\n ....\n 1376        if(tok2.value == '/') break;\n 1377        let tag = this.parseJSXTag();\n 1378:       members.push(tag);\n 1379:       let jsx = members[members.length - 1];\n 1380        jsx.children = [];\n 1381        if(jsx.selfClosing && depth == 0) break;\n ....\n 1423      if(depth == 0) {\n 1424        this.lexer.noRegex = false;\n 1425:       return members[0];\n 1426      }\n 1427:     return members;\n 1428    }\n 1429  \n ....\n 1978      //console.log(\"parseClass decl=\", decl);\n 1979      if(this.matchPunctuators(';')) this.expectPunctuators(';');\n 1980:     //let decl = new ClassDeclaration(identifier, extending, members);\n 1981  \n 1982      if(exported) decl = new ExportNamedDeclaration(decl);\n\n~/Projects/plot-cv/lib/ecmascript/parser2.js:\n 1545      //this.log(`parseArray()`);\n 1546      let object,\n 1547:       members = [];\n 1548      this.expectPunctuators(['[']);\n 1549  \n ....\n 1554        if(this.matchPunctuators([','])) {\n 1555          this.expectPunctuators([',']);\n 1556:         members.push(null);\n 1557          continue;\n 1558        }\n ....\n 1571        }\n 1572  \n 1573:       members.push(element);\n 1574  \n 1575        if(this.matchPunctuators([','])) this.expectPunctuators([',']);\n 1576      }\n 1577      this.expectPunctuators([']']);\n 1578:     object = this.addNode(ArrayExpression, members);\n 1579  \n 1580      /*\n ....\n 1652      let tok2, tok3;\n 1653      //this.log(`parseJSX(${depth})`);\n 1654:     let members = [];\n 1655      for(;;) {\n 1656        this.lexer.noRegex = true;\n ....\n 1659        if(tok2.value == '/') break;\n 1660        let tag = this.parseJSXTag();\n 1661:       members.push(tag);\n 1662:       let jsx = members[members.length - 1];\n 1663        jsx.children = [];\n 1664        if(jsx.selfClosing && depth == 0) break;\n ....\n 1703      if(depth == 0) {\n 1704        this.lexer.noRegex = false;\n 1705:       return members[0];\n 1706      }\n 1707:     return members;\n 1708    }\n 1709  \n ....\n 2290  \n 2291      if(this.matchPunctuators([';'])) this.expectPunctuators([';']);\n 2292:     //let decl = this.addNode(ClassDeclaration, identifier, extending, members);\n 2293  \n 2294      if(exported) decl = this.addNode(ExportNamedDeclaration, decl);\n\n~/Projects/plot-cv/openlayers/config/jsdoc/api/template/publish.js:\n  224  /**\n  225   * Create the navigation sidebar.\n  226:  * @param {Object} members The members that will be used to create the sidebar.\n  227:  * @param {Array<Object>} members.classes Classes.\n  228:  * @param {Array<Object>} members.externals Externals.\n  229:  * @param {Array<Object>} members.globals Globals.\n  230:  * @param {Array<Object>} members.mixins Mixins.\n  231:  * @param {Array<Object>} members.modules Modules.\n  232:  * @param {Array<Object>} members.namespaces Namespaces.\n  233:  * @param {Array<Object>} members.tutorials Tutorials.\n  234:  * @param {Array<Object>} members.events Events.\n  235   * @return {string} The HTML for the navigation sidebar.\n  236   */\n  237: function buildNav(members) {\n  238    const nav = [];\n  239:   members.classes.forEach(function (v) {\n  240      // exclude interfaces from sidebar\n  241      if (v.interface !== true) {\n  ...\n  249            longname: v.memberof,\n  250          })[0],\n  251:         members: find({\n  252            kind: 'member',\n  253            memberof: v.longname,\n  ...\n  269      }\n  270    });\n  271:   members.modules.forEach(function (v) {\n  272      const classes = find({\n  273        kind: 'class',\n  274        memberof: v.longname,\n  275      });\n  276:     const members = find({\n  277        kind: 'member',\n  278        memberof: v.longname,\n  ...\n  294      if (\n  295        typedefs.length > classes.length ||\n  296:       members.length + methods.length > 0\n  297      ) {\n  298        nav.push({\n  ...\n  301          prettyname: getPrettyName(v),\n  302          name: v.name,\n  303:         members: members,\n  304          methods: methods,\n  305          typedefs: typedefs,\n  ...\n  487    });\n  488  \n  489:   const members = helper.getMembers(data);\n  490:   members.tutorials = tutorials.children;\n  491  \n  492    // add template helpers\n  ...\n  496    view.tutoriallink = tutoriallink;\n  497    view.htmlsafe = htmlsafe;\n  498:   view.members = members; //@davidshimjs: To make navigation for customizing\n  499  \n  500    // once for all\n  501:   view.nav = buildNav(members);\n  502  \n  503    attachModuleSymbols(\n  504      find({kind: ['class', 'function'], longname: {left: 'module:'}}),\n  505:     members.modules\n  506    );\n  507  \n  ...\n  512    }\n  513  \n  514:   if (members.globals.length) {\n  515      generate('Global', [{kind: 'globalobj'}], globalUrl);\n  516    }\n  ...\n  542  \n  543    // set up the lists that we'll use to generate pages\n  544:   const classes = taffy(members.classes);\n  545:   const modules = taffy(members.modules);\n  546:   const namespaces = taffy(members.namespaces);\n  547:   const mixins = taffy(members.mixins);\n  548:   const externals = taffy(members.externals);\n  549  \n  550    for (const longname in helper.longnameToUrl) {\n\n~/Projects/plot-cv/openlayers/config/jsdoc/api/template/static/scripts/main.js:\n   57      const navListNode = $navList.get(0);\n   58      let $classItems;\n   59:     let $members;\n   60      let stateClass = (function () {\n   61        $navList.removeClass('search-started searching');\n   ..\n   82        }\n   83        $classItems = undefined;\n   84:       $members = undefined;\n   85  \n   86        // Search again with full navigation, if user already searched\n   ..\n  113        },\n  114        getMembers: function () {\n  115:         return $members || ($members = $navList.find('.item li'));\n  116        },\n  117        changeStateClass: function (newClass) {\n  ...\n  215            cls.weight += getSearchWeight(li, true);\n  216            const memberType = itemMember.dataset.type;\n  217:           let members = cls.subItems[memberType];\n  218:           if (!members) {\n  219:             members = cls.subItems[memberType] = {\n  220                item: itemMember,\n  221                subItems: {}\n  ...\n  223              itemMember.classList.add('match');\n  224            }\n  225:           members.subItems[name] = { item: li };\n  226            li.classList.add('match');\n  227          }\n\n~/Projects/plot-cv/openlayers/config/jsdoc/info/publish.js:\n   45    ).get();\n   46  \n   47:   // get symbols data, filter out those that are members of private classes\n   48    const symbols = [];\n   49    const defines = [];\n\n~/Projects/plot-cv/openlayers/examples/clusters-dynamic.js:\n   76  /**\n   77   * Style for clusters with features that are too close to each other, activated on click.\n   78:  * @param {Feature} cluster A cluster with overlapping members.\n   79   * @param {number} resolution The current view resolution.\n   80:  * @return {Style} A style to render an expanded view of the cluster members.\n   81   */\n   82  function clusterCircleStyle(cluster, resolution) {\n   ..\n  115   * Arranges points in a circle around the cluster center, with a line pointing from the center to\n  116   * each point.\n  117:  * @param {number} count Number of cluster members.\n  118   * @param {Array<number>} clusterCenter Center coordinate of the cluster.\n  119   * @param {number} resolution Current view resolution.\n  120:  * @return {Array<Array<number>>} An array of coordinates representing the cluster members.\n  121   */\n  122  function generatePointsCircle(count, clusterCenter, resolution) {\n  ...\n  202  });\n  203  \n  204: // Layer displaying the expanded view of overlapping cluster members.\n  205  const clusterCircles = new VectorLayer({\n  206    source: clusterSource,\n  ...\n  244        const clusterMembers = features[0].get('features');\n  245        if(clusterMembers.length > 1) {\n  246:         // Calculate the extent of the cluster members.\n  247          const extent = createEmpty();\n  248          clusterMembers.forEach(feature => extend(extent, feature.getGeometry().getExtent()));\n  ...\n  250          const resolution = map.getView().getResolution();\n  251          if(view.getZoom() === view.getMaxZoom() || (getWidth(extent) < resolution && getWidth(extent) < resolution)) {\n  252:           // Show an expanded view of the cluster members.\n  253            clickFeature = features[0];\n  254            clickResolution = resolution;\n  255            clusterCircles.setStyle(clusterCircleStyle);\n  256          } else {\n  257:           // Zoom to the extent of the cluster members.\n  258            view.fit(extent, { duration: 500, padding: [50, 50, 50, 50] });\n  259          }\n\n271 matches across 28 files\n\n\nSearching 3281 files for \"try_run\" (regex, case sensitive)\n\n~/Projects/plot-cv/quickjs2/cmake/functions.cmake:\n  323    # dump(FN)\n  324  \n  325:   try_run(\n  326      RUN_RESULT COMPILE_RESULT SOURCES \"${FN}\"\n  327      COMPILE_OUTPUT_VARIABLE COMPILE_OUTPUT\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/zlib-ng/cmake/detect-arch.cmake:\n   24      # Let preprocessor parse archdetect.c and raise an error containing the arch identifier\n   25      enable_language(C)\n   26:     try_run(\n   27          run_result_unused\n   28          compile_result_unused\n\n~/Projects/plot-cv/qjs-opencv/opencv/cmake/OpenCVUtils.cmake:\n  592      file(RELATIVE_PATH _rname \"${CMAKE_SOURCE_DIR}\" \"${_fname}\")\n  593      message(STATUS \"Performing Runtime Test ${result} (check file: ${_rname})\")\n  594:     try_run(exec_return compile_result\n  595        \"${CMAKE_BINARY_DIR}\"\n  596        \"${_fname}\"\n\n3 matches across 3 files\n\n\nSearching 3281 files for \"try_run\" (regex)\n\n~/Projects/plot-cv/quickjs2/cmake/functions.cmake:\n  323    # dump(FN)\n  324  \n  325:   try_run(\n  326      RUN_RESULT COMPILE_RESULT SOURCES \"${FN}\"\n  327      COMPILE_OUTPUT_VARIABLE COMPILE_OUTPUT\n\n~/Projects/plot-cv/qjs-opencv/opencv/3rdparty/zlib-ng/cmake/detect-arch.cmake:\n   24      # Let preprocessor parse archdetect.c and raise an error containing the arch identifier\n   25      enable_language(C)\n   26:     try_run(\n   27          run_result_unused\n   28          compile_result_unused\n\n~/Projects/plot-cv/qjs-opencv/opencv/cmake/OpenCVUtils.cmake:\n  592      file(RELATIVE_PATH _rname \"${CMAKE_SOURCE_DIR}\" \"${_fname}\")\n  593      message(STATUS \"Performing Runtime Test ${result} (check file: ${_rname})\")\n  594:     try_run(exec_return compile_result\n  595        \"${CMAKE_BINARY_DIR}\"\n  596        \"${_fname}\"\n\n3 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 266586,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "io-helpers.js",
			"settings":
			{
				"buffer_size": 6588,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyA4AAAAAAADIDgAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyA4AAAAAAADIDgAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyA4AAAAAAADIDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyA4AAAAAAADIDgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"BQAAAAAAAAAAAAAAAAAAAAAAAADxGQAAaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJzsKaW1wb3J0IHsgcmVhZCBhcyByZWFkQkpTT04sIHdyaXRlIGFzIHdyaXRlQkpTT04gfSBmcm9tICdianNvbic7CmltcG9ydCB7IGNsb3NlU3luYywgcmVhZEZpbGVTeW5jLCBzdGF0U3luYywgd3JpdGVGaWxlU3luYywgcmVhZFN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IGRlZmluZSwgZXJyb3IsIHRvU3RyaW5nIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CgpsZXQgeG1sOwoKLy9pbXBvcnQoJ3htbCcpIC50aGVuKG0gPT4gKHhtbCA9IG0pKSAuY2F0Y2goKCkgPT4ge30pOwoKZXhwb3J0IGZ1bmN0aW9uIElmRGVidWcodG9rZW4pIHsKICBjb25zdCB7IERFQlVHID0gJycgfSA9IGdsb2JhbFRoaXMucHJvY2VzcyA/IGdsb2JhbFRoaXMucHJvY2Vzcy5lbnYgOiB7fTsgLy9nZXRlbnZpcm9uKCk7CgogIGNvbnN0IHRva0xpc3QgPSBERUJVRy5zcGxpdCgvW15BLVphLXowLTlfXSsvZyk7CgogIHJldHVybiB0b2tMaXN0LmluZGV4T2YodG9rZW4pICE9IC0xOwp9CgpleHBvcnQgZnVuY3Rpb24gTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pIHsKICBpZighSWZEZWJ1Zyh0b2tlbikpIHJldHVybiAoKSA9PiB7fTsKCiAgcmV0dXJuIGxvZ2dlckZuOwp9Cgpjb25zdCBkZWJ1ZyA9IExvZ0lmRGVidWcoJ2lvLWhlbHBlcnMnLCAoLi4uYXJncykgPT4gY29uc29sZS5sb2coLi4uYXJncykpOwoKZXhwb3J0IGZ1bmN0aW9uIFJlYWRGZChmZCwgYmluYXJ5KSB7CiAgbGV0IGFiID0gbmV3IEFycmF5QnVmZmVyKDEwMjQpOwogIGxldCBzID0gJyc7CgogIGZvcig7OykgewogICAgbGV0IHJldCA9IHJlYWRTeW5jKGZkLCBhYiwgMCwgYWIuYnl0ZUxlbmd0aCk7CgogICAgaWYocmV0IDw9IDApIGJyZWFrOwoKICAgIHMgKz0gdG9TdHJpbmcoYWIuc2xpY2UoMCwgcmV0KSk7CgogICAgZGVidWcoYFJlYWQgIyR7ZmR9OiAke3JldH0gYnl0ZXNgKTsKICB9CgogIHJldHVybiBzOwp9CgpleHBvcnQgZnVuY3Rpb24gSXNTdGRpbyhvYmopIHsKICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihzdGRvdXQpOwp9CgpleHBvcnQgZnVuY3Rpb24gUmVhZENsb3NlKGZpbGUsIGJpbmFyeSkgewogIGlmKElzU3RkaW8oZmlsZSkpIHsKICAgIGlmKCFiaW5hcnkpIHJldHVybiBmaWxlLnJlYWRBc1N0cmluZygpOwoKICAgIHJldHVybiAoZnVuY3Rpb24qICgpIHsKICAgICAgd2hpbGUoIWZpbGUuZW9mKCkpIHsKICAgICAgICBsZXQgYWIgPSBuZXcgQXJyYXlCdWZmZXIodHlwZW9mIGJpbmFyeSA9PSAnbnVtYmVyJyA/IGJpbmFyeSA6IDEwMjQpOwogICAgICAgIGxldCByID0gZmlsZS5yZWFkKGFiLCAwLCBhYi5ieXRlTGVuZ3RoKTsKCiAgICAgICAgaWYociA9PSAwKSBicmVhazsKICAgICAgICBpZihyIDwgMCB8fCBmaWxlLmVycm9yKCkpIHRocm93IG5ldyBFcnJvcihgRXJyb3IgcmVhZGluZyBmaWxlYCk7CgogICAgICAgIHlpZWxkIGFiLnNsaWNlKDAsIHIpOwogICAgICB9CiAgICB9KSgpOwogIH0KICB0aHJvdyBuZXcgRXJyb3IoYFVua293biB0eXBlIG9mIGZpbGU6ICR7b2JqfWApOwp9CgpleHBvcnQgZnVuY3Rpb24gUmVhZEZpbGUobmFtZSwgYmluYXJ5KSB7CiAgcmV0dXJuIHJlYWRGaWxlU3luYyhuYW1lLCBiaW5hcnkgPyBudWxsIDogJ3V0Zi04Jyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBSZWFkQW55KG9iaiwgYmluYXJ5KSB7CiAgcmV0dXJuIHsgbnVtYmVyOiBSZWFkRmQsIHN0cmluZzogUmVhZEZpbGUsIG9iamVjdDogUmVhZENsb3NlIH1bdHlwZW9mIG9ial0ob2JqLCBiaW5hcnkpOwp9CgpleHBvcnQgZnVuY3Rpb24gTG9hZEhpc3RvcnkoZmlsZW5hbWUpIHsKICBsZXQgY29udGVudHMgPSBSZWFkRmlsZShmaWxlbmFtZSwgZmFsc2UpOwogIGxldCBkYXRhOwoKICBjb25zdCBwYXJzZSA9ICgpID0+IHsKICAgIHRyeSB7CiAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGNvbnRlbnRzKTsKICAgIH0gY2F0Y2goZSkge30KICAgIGlmKGRhdGEpIHJldHVybiBkYXRhOwogICAgdHJ5IHsKICAgICAgZGF0YSA9IGNvbnRlbnRzLnNwbGl0KC9cbi9nKTsKICAgIH0gY2F0Y2goZSkge30KICAgIGlmKGRhdGEpIHJldHVybiBkYXRhOwogIH07CgogIHJldHVybiAocGFyc2UoKSA/PyBbXSkuZmlsdGVyKGVudHJ5ID0+IChlbnRyeSArICcnKS50cmltKCkgIT0gJycpOwogIC8vLm1hcChlbnRyeSA9PiBlbnRyeS5yZXBsYWNlKC9cXG4vZywgJ1xuJykpCn0KCmV4cG9ydCBmdW5jdGlvbiBSZWFkSlNPTihmaWxlbmFtZSkgewogIGxldCBkYXRhID0gUmVhZEFueShmaWxlbmFtZSwgZmFsc2UpOwoKICBpZihkYXRhKSBkZWJ1ZyhgUmVhZEpTT046ICR7ZGF0YS5sZW5ndGh9IGJ5dGVzIHJlYWQgZnJvbSAnJHtmaWxlbmFtZX0nYCk7CiAgcmV0dXJuIGRhdGEgPyBKU09OLnBhcnNlKGRhdGEpIDogbnVsbDsKfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFJlYWRYTUwoZmlsZW5hbWUsIC4uLmFyZ3MpIHsKICBjb25zdCB7IHJlYWQgfSA9IGF3YWl0IGltcG9ydCgneG1sJyk7CiAgbGV0IGRhdGEgPSBSZWFkQW55KGZpbGVuYW1lLCBmYWxzZSk7CgogIGlmKGRhdGEpIGRlYnVnKGBSZWFkWE1MOiAke2RhdGEubGVuZ3RofSBieXRlcyByZWFkIGZyb20gJyR7ZmlsZW5hbWV9J2ApOwogIHJldHVybiBkYXRhID8gcmVhZChkYXRhLCBmaWxlbmFtZSwgLi4uYXJncykgOiBudWxsOwp9CgpleHBvcnQgYXN5bmMgZnVuY3Rpb24gV3JpdGVYTUwobmFtZSwgZGF0YSwgLi4uYXJncykgewogIGNvbnN0IHsgd3JpdGUgfSA9IGF3YWl0IGltcG9ydCgneG1sJyk7CiAgcmV0dXJuIFdyaXRlQW55KG5hbWUsIHdyaXRlKGRhdGEsIC4uLmFyZ3MpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFdyaXRlRmlsZShmaWxlLCBkYXRhKSB7CiAgcmV0dXJuIHdyaXRlRmlsZVN5bmMoZmlsZSwgZGF0YSk7CiAgLypsZXQgZiA9IGZvcGVuKGZpbGUsICd3KycpOwogIGxldCByID0gdHlwZW9mIGRhdGEgPT0gJ3N0cmluZycgPyBmLnB1dHMoZGF0YSkgOiBmLndyaXRlKGRhdGEsIDAsIGRhdGEuYnl0ZUxlbmd0aCk7CgogIGlmKGYuZXJyb3IoKSkgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3cml0aW5nIGZpbGUgJyR7ZmlsZX0nOiAke3N0cmVycm9yKGVycm9yKCkuZXJybm8pfWApOwogIGYuY2xvc2UoKTsqLwoKICAvL2NvbnNvbGUubG9nKCdXcm90ZSAiJyArIGZpbGUgKyAnIjogJyArIGRhdGEubGVuZ3RoICsgJyBieXRlcycgKyBgICgke3J9KWApOwogIHJldHVybiByOwp9CgpleHBvcnQgZnVuY3Rpb24gV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpIHsKICBpZih0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJykgZGF0YSA9IHRvQXJyYXlCdWZmZXIoZGF0YSk7CgogIHJldHVybiB3cml0ZVN5bmMoZmQsIGRhdGEsIG9mZnNldCA/PyAwLCBsZW5ndGggPz8gZGF0YS5ieXRlTGVuZ3RoKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFdyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpIHsKICBpZihJc1N0ZGlvKGZpbGUpKSB7CiAgICBsZXQgcjsKICAgIHIgPQogICAgICB0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJwogICAgICAgID8gZmlsZS5wdXRzKGRhdGEpCiAgICAgICAgOiBmaWxlLndyaXRlKGRhdGEsIG9mZnNldCA/PyAwLCBsZW5ndGggPz8gZGF0YS5ieXRlTGVuZ3RoKTsKCiAgICBpZihyIDw9IDAgfHwgZmlsZS5lcnJvcigpKSB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHdyaXRpbmcgZmlsZWApOwoKICAgIGZpbGUuY2xvc2UoKTsKICAgIHJldHVybiByOwogIH0KICB0aHJvdyBuZXcgRXJyb3IoYFVua293biB0eXBlIG9mIGZpbGU6ICR7b2JqfWApOwp9CgpleHBvcnQgZnVuY3Rpb24gV3JpdGVBbnkob2JqLCAuLi5hcmdzKSB7CiAgcmV0dXJuIHsgbnVtYmVyOiBXcml0ZUZkLCBzdHJpbmc6IFdyaXRlRmlsZSwgb2JqZWN0OiBXcml0ZUNsb3NlIH1bdHlwZW9mIG9ial0ob2JqLCAuLi5hcmdzKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFdyaXRlSlNPTihuYW1lLCBkYXRhLCAuLi5hcmdzKSB7CiAgY29uc3QgW2NvbXBhY3RdID0gYXJnczsKICBpZih0eXBlb2YgY29tcGFjdCA9PSAnYm9vbGVhbicpIGFyZ3MgPSBjb21wYWN0ID8gW10gOiBbbnVsbCwgMl07CgogIHJldHVybiBXcml0ZUFueShuYW1lLCBKU09OLnN0cmluZ2lmeShkYXRhLCAuLi5hcmdzKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBSZWFkQkpTT04oZmlsZW5hbWUpIHsKICBsZXQgZGF0YSA9IHJlYWRGaWxlU3luYyhmaWxlbmFtZSk7CiAgY29uc3QgeyBieXRlTGVuZ3RoOiBzaXplIH0gPSBkYXRhOwogIHJldHVybiByZWFkQkpTT04oZGF0YSwgMCwgc2l6ZSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBXcml0ZUJKU09OKG5hbWUsIHZhbHVlKSB7CiAgcmV0dXJuIHdyaXRlRmlsZVN5bmMobmFtZSwgd3JpdGVCSlNPTih2YWx1ZSkpOwp9CgpleHBvcnQgZnVuY3Rpb24qIEZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykgewogIGZvcihsZXQgaXRlbSBvZiBnZW4pIGlmKHJlZ0V4LnRlc3QoaXRlbSkpIHlpZWxkIGl0ZW07Cn0KCmV4cG9ydCBmdW5jdGlvbiBGaWx0ZXJJbWFnZXMoZ2VuKSB7CiAgcmV0dXJuIEZpbHRlcihnZW4sIC9cLihwbmd8anBlP2cpJC9pKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykgewogIHJldHVybiBbLi4uYXJyXS5zb3J0KChhLCBiKSA9PiBhLnN0YXRbZmllbGRdIC0gYi5zdGF0W2ZpZWxkXSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiogU3RhdEZpbGVzKGdlbikgewogIGZvcihsZXQgZmlsZSBvZiBnZW4pIHsKICAgIGxldCBbc3RhdCwgZXJyXSA9IHN0YXRTeW5jKGZpbGUpOwogICAgbGV0IG9iaiA9IGRlZmluZSgKICAgICAgeyBmaWxlLCBzdGF0IH0sCiAgICAgIHsKICAgICAgICB0b1N0cmluZygpIHsKICAgICAgICAgIHJldHVybiB0aGlzLmZpbGU7CiAgICAgICAgfSwKICAgICAgfSwKICAgICk7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnc2l6ZScsIHsKICAgICAgZ2V0OiBtZW1vaXplKCgpID0+IHsKICAgICAgICBsZXQgeyBmaWxlbmFtZSwgLi4uaW5mbyB9ID0gSW1hZ2VJbmZvKG9iai5maWxlKTsKICAgICAgICByZXR1cm4gZGVmaW5lKGluZm8sIHsKICAgICAgICAgIHRvU3RyaW5nKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy53aWR0aCArICd4JyArIHRoaXMuaGVpZ2h0OwogICAgICAgICAgfSwKICAgICAgICAgIGdldCBsYW5kc2NhcGUoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLndpZHRoID4gdGhpcy5oZWlnaHQ7CiAgICAgICAgICB9LAogICAgICAgICAgZ2V0IHBvcnRyYWl0KCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHQgPiB0aGlzLndpZHRoOwogICAgICAgICAgfSwKICAgICAgICB9KTsKICAgICAgfSksCiAgICB9KTsKICAgIHlpZWxkIG9iajsKICB9Cn0KCmV4cG9ydCBhc3luYyBmdW5jdGlvbiogRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KSB7CiAgbGV0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJTaXplKTsKICBsZXQgcmV0OwogIGRvIHsKICAgIGxldCByID0gYXdhaXQgd2FpdFJlYWQoZmQpOwogICAgY29uc29sZS5sb2coJ3InLCByKTsKICAgIHJldCA9IHR5cGVvZiBmZCA9PSAnbnVtYmVyJyA/IHJlYWRTeW5jKGZkLCBidWYsIDAsIGJ1ZmZlclNpemUpIDogZmQucmVhZChidWYsIDAsIGJ1ZmZlclNpemUpOwogICAgaWYocmV0ID4gMCkgewogICAgICBsZXQgZGF0YSA9IGJ1Zi5zbGljZSgwLCByZXQpOwogICAgICB5aWVsZCB0b1N0cmluZyhkYXRhKTsKICAgIH0KICB9IHdoaWxlKHJldCA9PSBidWZmZXJTaXplKTsKICB0eXBlb2YgZmQgPT0gJ251bWJlcicgPyBjbG9zZVN5bmMoZmQpIDogZmQuY2xvc2UoKTsKICByZXR1cm47Cn0KCmV4cG9ydCBmdW5jdGlvbiBDb3B5VG9DbGlwYm9hcmQodGV4dCkgewogIHJldHVybiBpbXBvcnQoJ2NoaWxkX3Byb2Nlc3MnKS50aGVuKGNoaWxkX3Byb2Nlc3MgPT4gewogICAgY29uc3QgeyBlbnYgfSA9IHByb2Nlc3M7CgogICAgbGV0IGNoaWxkID0gc3Bhd24oJ3hjbGlwJywgWyctaW4nLCAnLXZlcmJvc2UnXSwgewogICAgICBlbnYsCiAgICAgIHN0ZGlvOiBbJ3BpcGUnLCAnaW5oZXJpdCcsICdpbmhlcml0J10sCiAgICB9KTsKICAgIGxldCBbcGlwZV0gPSBjaGlsZC5zdGRpbzsKCiAgICBsZXQgd3JpdHRlbiA9IHdyaXRlU3luYyhwaXBlLCB0ZXh0LCAwLCB0ZXh0Lmxlbmd0aCk7CiAgICBjbG9zZVN5bmMocGlwZSk7CiAgICBsZXQgc3RhdHVzID0gY2hpbGQud2FpdCgpOwogICAgY29uc29sZS5sb2coJ2NoaWxkJywgY2hpbGQpOwogICAgcmV0dXJuIHsgd3JpdHRlbiwgc3RhdHVzIH07CiAgfSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBMb2dDYWxsKGZuLCB0aGlzT2JqKSB7CiAgbGV0IHsgbmFtZSB9ID0gZm47CiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHsKICAgIGxldCByZXN1bHQ7CiAgICByZXN1bHQgPSBmbi5hcHBseSh0aGlzT2JqID8/IHRoaXMsIGFyZ3MpOwogICAgY29uc29sZS5sb2coCiAgICAgICdGdW5jdGlvbiAnICsgbmFtZSArICcoJywKICAgICAgLi4uYXJncy5tYXAoYXJnID0+IGluc3BlY3QoYXJnLCB7IGNvbG9yczogZmFsc2UsIG1heFN0cmluZ0xlbmd0aDogMjAgfSkpLAogICAgICAnKSA9JywKICAgICAgcmVzdWx0LAogICAgKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKfQoAAAAAAAAAALwZAAAAAAAAAAAAAAAAAAAAAAAAvBkAAAAAAAAAAAAAAAAAAAAAAAC8GQAAAAAAAAAAAAAAAAAAAAAAALwZAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyA4AAAAAAADIDgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "mozdev.js",
			"settings":
			{
				"buffer_size": 2478,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import { Parser } from 'dom';"
			},
			"undo_stack":
			[
				[
					1476,
					1,
					"cut",
					null,
					"AQAAAEcGAAAAAAAARwYAAAAAAAAjAAAAcHJvcCA9PSBuYW1lICsgJygpJyB8fCBwcm9wID09IG5hbWU",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwYAAAAAAABqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1487,
					1,
					"left_delete",
					null,
					"AQAAAEkGAAAAAAAASQYAAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgYAAAAAAABKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1490,
					9,
					"left_delete",
					null,
					"CQAAAIMGAAAAAAAAgwYAAAAAAAABAAAAfYEGAAAAAAAAgQYAAAAAAAACAAAAICB/BgAAAAAAAH8GAAAAAAAAAgAAACAgfQYAAAAAAAB9BgAAAAAAAAIAAAAgIHsGAAAAAAAAewYAAAAAAAACAAAAICB5BgAAAAAAAHkGAAAAAAAAAgAAACAgdwYAAAAAAAB3BgAAAAAAAAIAAAAgIHUGAAAAAAAAdQYAAAAAAAACAAAAICB0BgAAAAAAAHQGAAAAAAAAAQAAAAo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhAYAAAAAAACEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1495,
					1,
					"left_delete",
					null,
					"AQAAAL0FAAAAAAAAvQUAAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgUAAAAAAAC+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1498,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAOcFAAAAAAAA6AUAAAAAAAAAAAAA6AUAAAAAAADrBQAAAAAAAAAAAADrBQAAAAAAAOsFAAAAAAAAEQAAACAgICAgICAgIH0gZWxzZSB7",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+AUAAAAAAADnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1501,
					8,
					"left_delete",
					null,
					"CQAAAHMGAAAAAAAAcwYAAAAAAAABAAAAfegFAAAAAAAA6AUAAAAAAAADAAAAICAgbgYAAAAAAABuBgAAAAAAAAIAAAAgIGwGAAAAAAAAbAYAAAAAAAACAAAAICBqBgAAAAAAAGoGAAAAAAAAAgAAACAgaAYAAAAAAABoBgAAAAAAAAIAAAAgIGYGAAAAAAAAZgYAAAAAAAACAAAAICBkBgAAAAAAAGQGAAAAAAAAAgAAACAgYwYAAAAAAABjBgAAAAAAAAEAAAAK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdAYAAAAAAAB0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1504,
					1,
					"left_delete",
					null,
					"AQAAAOcFAAAAAAAA5wUAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AUAAAAAAADoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1519,
					1,
					"cut",
					null,
					"AQAAAE8FAAAAAAAATwUAAAAAAAAIAAAAa2V5c1tpZF0",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwUAAAAAAABXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1520,
					1,
					"paste",
					null,
					"AQAAAE8FAAAAAAAAVwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwUAAAAAAABPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1525,
					1,
					"paste",
					null,
					"AgAAAHoFAAAAAAAAggUAAAAAAAAAAAAAggUAAAAAAACCBQAAAAAAAAMAAABrZXk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegUAAAAAAAB9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1536,
					2,
					"right_delete",
					null,
					"AgAAADkFAAAAAAAAOQUAAAAAAAAgAAAAICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaWRdOwo5BQAAAAAAADkFAAAAAAAAAQAAAAo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQUAAAAAAABZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1549,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB1BgAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBkZWZpbmUsIHByb3BlcnRpZXMsIG5vbmVudW1lcmFibGUgfSBmcm9tICd1dGlsJzsKCmV4cG9ydCBmdW5jdGlvbiBGZXRjaENsYXNzKHVybCkgewogIGNvbnN0IHUgPSBuZXcgVVJMKHVybC5yZXBsYWNlKC9cL1teXC9dKiQvLCAnJykpOwogIGNvbnN0IGJhc2UgPSB1LnBhdGhuYW1lOwogIGNvbnN0IHJlID0gbmV3IFJlZ0V4cCgnXicgKyBiYXNlICsgJy8nKTsKICBjb25zdCBkb2MgPSBuZXcgUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHVybEdldCh1cmwpKTsKCiAgY29uc3Qga2V5cyA9IHsKICAgIENvbnN0cnVjdG9yOiAnY29uc3RydWN0b3InLAogICAgJ0luc3RhbmNlIHByb3BlcnRpZXMnOiAncHJvcGVydGllcycsCiAgICAnSW5zdGFuY2UgbWV0aG9kcyc6ICdtZXRob2RzJywKICAgIEV2ZW50czogJ2V2ZW50cycsCiAgICBJbmhlcml0YW5jZTogJ2Jhc2VzJywKICAgICdSZWxhdGVkIHBhZ2VzIGZvciBXZWIgQXVkaW8gQVBJJzogJ3JlbGF0ZWQnLAogIH07CgogIGNvbnN0IHN1bW1hcnlFbGVtZW50cyA9IFsuLi5kb2MucXVlcnlTZWxlY3RvckFsbCgnc3VtbWFyeScpXS5maWx0ZXIoZSA9PiBlLmlubmVyVGV4dCBpbiBrZXlzKTsKCiAgY29uc3Qgc2ltcGxpZnlMaXN0ID0gbGlzdCA9PiB7CiAgICBpZihsaXN0LmV2ZXJ5KChbYSwgYl0pID0+IGEucmVwbGFjZSgvXHNFeHBlcmltZW50YWwkLywgJycpID09IGIpKSByZXR1cm4gbGlzdC5tYXAoKFthXSkgPT4gYSk7CgogICAgcmV0dXJuIG5ldyBNYXAobGlzdCk7CiAgfTsKCiAgY29uc3Qgc3VtbWFyeUxpc3QgPSBzdW1tYXJ5ID0+CiAgICBzaW1wbGlmeUxpc3QoWy4uLnN1bW1hcnkubmV4dFNpYmxpbmcucXVlcnlTZWxlY3RvckFsbCgnbGknKV0ubWFwKGUgPT4gW2UuaW5uZXJUZXh0LCBlLnF1ZXJ5U2VsZWN0b3IoJ2EnKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKS5yZXBsYWNlKHJlLCAnJyldKS5maWx0ZXIoKFtuYW1lXSkgPT4gIS9cc0RlcHJlY2F0ZWQkLy50ZXN0KG5hbWUpKSk7CgogIGNvbnN0IHN1bW1hcmllcyA9IHN1bW1hcnlFbGVtZW50cy5yZWR1Y2UoKGEsIGUpID0+ICh7IC4uLmEsIFtrZXlzW2UuaW5uZXJUZXh0XSA/PyBlLmlubmVyVGV4dF06IHN1bW1hcnlMaXN0KGUpIH0pLCB7fSk7CgogIHJldHVybiBkZWZpbmUoCiAgICBzdW1tYXJpZXMsCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgZ2V0VVJMKG5hbWUpIHsKY29uc3QgcmUgPSBuZXcgUmVnRXhwKCdeJytuYW1lKycoXHMuKnxcKFwpfCkkJyk7CgogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgewogICAgICAgICAgZm9yKGxldCBlbnRyeSBvZiB0aGlzW2tleXNbaWRdXSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIAogICAgICAgICAgICAgIHJldHVybiB1ICsgJy8nICsgZW50cnk7CiAgIAogICAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgICAgaWYocmUudGVzdChwcm9wKSkgCiAgICAgICAgICAgICAgICByZXR1cm4gdSArICcvJyArIHBhdGhuYW1lOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgIH0pLAogICk7Cn0KAAAAAAAAAACGBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQYAAAAAAABlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1562,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAAEEFAAAAAAAAQgUAAAAAAAAAAAAAQgUAAAAAAABDBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQUAAAAAAABBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1563,
					1,
					"left_delete",
					null,
					"AQAAAEIFAAAAAAAAQgUAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwUAAAAAAABDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1564,
					1,
					"insert",
					{
						"characters": "\\(\\)"
					},
					"BAAAAEIFAAAAAAAAQwUAAAAAAAAAAAAAQwUAAAAAAABEBQAAAAAAAAAAAABEBQAAAAAAAEUFAAAAAAAAAAAAAEUFAAAAAAAARgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgUAAAAAAABCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1565,
					1,
					"insert",
					{
						"characters": "|)"
					},
					"AgAAAEYFAAAAAAAARwUAAAAAAAAAAAAARwUAAAAAAABIBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgUAAAAAAABGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1568,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAE4FAAAAAAAATwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgUAAAAAAABOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1569,
					6,
					"right_delete",
					null,
					"BgAAAE8FAAAAAAAATwUAAAAAAAABAAAAXE8FAAAAAAAATwUAAAAAAAABAAAAKE8FAAAAAAAATwUAAAAAAAABAAAAXE8FAAAAAAAATwUAAAAAAAABAAAAKU8FAAAAAAAATwUAAAAAAAABAAAAfE8FAAAAAAAATwUAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwUAAAAAAABPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1589,
					5,
					"right_delete",
					null,
					"BQAAADMFAAAAAAAAMwUAAAAAAAABAAAAJzMFAAAAAAAAMwUAAAAAAAABAAAAXjMFAAAAAAAAMwUAAAAAAAABAAAAJzMFAAAAAAAAMwUAAAAAAAABAAAAIDMFAAAAAAAAMwUAAAAAAAABAAAAKw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwUAAAAAAAAzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1592,
					1,
					"left_delete",
					null,
					"AQAAAEoFAAAAAAAASgUAAAAAAAABAAAAJA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwUAAAAAAABLBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1601,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACCBgAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBkZWZpbmUsIHByb3BlcnRpZXMsIG5vbmVudW1lcmFibGUgfSBmcm9tICd1dGlsJzsKCmV4cG9ydCBmdW5jdGlvbiBGZXRjaENsYXNzKHVybCkgewogIGNvbnN0IHUgPSBuZXcgVVJMKHVybC5yZXBsYWNlKC9cL1teXC9dKiQvLCAnJykpOwogIGNvbnN0IGJhc2UgPSB1LnBhdGhuYW1lOwogIGNvbnN0IHJlID0gbmV3IFJlZ0V4cCgnXicgKyBiYXNlICsgJy8nKTsKICBjb25zdCBkb2MgPSBuZXcgUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHVybEdldCh1cmwpKTsKCiAgY29uc3Qga2V5cyA9IHsKICAgIENvbnN0cnVjdG9yOiAnY29uc3RydWN0b3InLAogICAgJ0luc3RhbmNlIHByb3BlcnRpZXMnOiAncHJvcGVydGllcycsCiAgICAnSW5zdGFuY2UgbWV0aG9kcyc6ICdtZXRob2RzJywKICAgIEV2ZW50czogJ2V2ZW50cycsCiAgICBJbmhlcml0YW5jZTogJ2Jhc2VzJywKICAgICdSZWxhdGVkIHBhZ2VzIGZvciBXZWIgQXVkaW8gQVBJJzogJ3JlbGF0ZWQnLAogIH07CgogIGNvbnN0IHN1bW1hcnlFbGVtZW50cyA9IFsuLi5kb2MucXVlcnlTZWxlY3RvckFsbCgnc3VtbWFyeScpXS5maWx0ZXIoZSA9PiBlLmlubmVyVGV4dCBpbiBrZXlzKTsKCiAgY29uc3Qgc2ltcGxpZnlMaXN0ID0gbGlzdCA9PiB7CiAgICBpZihsaXN0LmV2ZXJ5KChbYSwgYl0pID0+IGEucmVwbGFjZSgvXHNFeHBlcmltZW50YWwkLywgJycpID09IGIpKSByZXR1cm4gbGlzdC5tYXAoKFthXSkgPT4gYSk7CgogICAgcmV0dXJuIG5ldyBNYXAobGlzdCk7CiAgfTsKCiAgY29uc3Qgc3VtbWFyeUxpc3QgPSBzdW1tYXJ5ID0+CiAgICBzaW1wbGlmeUxpc3QoCiAgICAgIFsuLi5zdW1tYXJ5Lm5leHRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyldCiAgICAgICAgLm1hcChlID0+IFtlLmlubmVyVGV4dCwgZS5xdWVyeVNlbGVjdG9yKCdhJykuZ2V0QXR0cmlidXRlKCdocmVmJykucmVwbGFjZShyZSwgJycpXSkKICAgICAgICAuZmlsdGVyKChbbmFtZV0pID0+ICEvXHNEZXByZWNhdGVkJC8udGVzdChuYW1lKSksCiAgICApOwoKICBjb25zdCBzdW1tYXJpZXMgPSBzdW1tYXJ5RWxlbWVudHMucmVkdWNlKAogICAgKGEsIGUpID0+ICh7IC4uLmEsIFtrZXlzW2UuaW5uZXJUZXh0XSA/PyBlLmlubmVyVGV4dF06IHN1bW1hcnlMaXN0KGUpIH0pLAogICAge30sCiAgKTsKCiAgcmV0dXJuIGRlZmluZSgKICAgIHN1bW1hcmllcywKICAgIG5vbmVudW1lcmFibGUoewogICAgICBnZXRVUkwobmFtZSkgewogICAgICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cCggbmFtZSArICcoXChcKXwpKFxzLip8KScpOwoKICAgICAgICBmb3IobGV0IGlkIGluIGtleXMpIHsKICAgICAgICAgIGZvcihsZXQgZW50cnkgb2YgdGhpc1trZXlzW2lkXV0pIHsKICAgICAgICAgICAgaWYodHlwZW9mIGVudHJ5ID09ICdzdHJpbmcnICYmIHJlLnRlc3QoZW50cnkpKSByZXR1cm4gdSArICcvJyArIGVudHJ5OwoKICAgICAgICAgICAgY29uc3QgW3Byb3AsIHBhdGhuYW1lXSA9IGVudHJ5OwoKICAgICAgICAgICAgaWYocmUudGVzdChwcm9wKSkgcmV0dXJuIHUgKyAnLycgKyBwYXRobmFtZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICB9KSwKICApOwp9CgAAAAAAAAAAgQYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgUAAAAAAABKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1606,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAGsFAAAAAAAAbAUAAAAAAAAAAAAAbAUAAAAAAAB0BQAAAAAAAAAAAAB0BQAAAAAAAHYFAAAAAAAAAAAAAHYFAAAAAAAAdwUAAAAAAAAAAAAAdwUAAAAAAACBBQAAAAAAAAAAAABsBQAAAAAAAGwFAAAAAAAACgAAACAgICAgICAgICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAawUAAAAAAABrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1608,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AwAAAGwFAAAAAAAAbQUAAAAAAAAAAAAAbgUAAAAAAABuBQAAAAAAAAoAAAAgICAgICAgICAgbQUAAAAAAABuBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbAUAAAAAAABsBQAAAAAAAAAAAAAAAFRA"
				],
				[
					1609,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG4FAAAAAAAAcAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbgUAAAAAAABuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1610,
					1,
					"insert",
					{
						"characters": "id"
					},
					"AgAAAG8FAAAAAAAAcAUAAAAAAAAAAAAAcAUAAAAAAABxBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwUAAAAAAABvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1611,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAHEFAAAAAAAAcgUAAAAAAAAAAAAAcgUAAAAAAABzBQAAAAAAAAAAAABzBQAAAAAAAHQFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcQUAAAAAAABxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1612,
					1,
					"insert",
					{
						"characters": " name"
					},
					"BQAAAHQFAAAAAAAAdQUAAAAAAAAAAAAAdQUAAAAAAAB2BQAAAAAAAAAAAAB2BQAAAAAAAHcFAAAAAAAAAAAAAHcFAAAAAAAAeAUAAAAAAAAAAAAAeAUAAAAAAAB5BQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdAUAAAAAAAB0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1614,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAHoFAAAAAAAAewUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegUAAAAAAAB6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1615,
					1,
					"left_delete",
					null,
					"AQAAAHoFAAAAAAAAegUAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewUAAAAAAAB7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1616,
					1,
					"insert",
					{
						"characters": " return"
					},
					"BwAAAHoFAAAAAAAAewUAAAAAAAAAAAAAewUAAAAAAAB8BQAAAAAAAAAAAAB8BQAAAAAAAH0FAAAAAAAAAAAAAH0FAAAAAAAAfgUAAAAAAAAAAAAAfgUAAAAAAAB/BQAAAAAAAAAAAAB/BQAAAAAAAIAFAAAAAAAAAAAAAIAFAAAAAAAAgQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegUAAAAAAAB6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1617,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIEFAAAAAAAAggUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQUAAAAAAACBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1624,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIFAAAAAAAAgwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggUAAAAAAACCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1630,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAIMFAAAAAAAAhQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgwUAAAAAAACDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1631,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAAIQFAAAAAAAAhQUAAAAAAAAAAAAAhQUAAAAAAACGBQAAAAAAAAAAAACGBQAAAAAAAIcFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhAUAAAAAAACEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1632,
					1,
					"paste",
					null,
					"AQAAAIcFAAAAAAAAlQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhwUAAAAAAACHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1634,
					1,
					"insert",
					{
						"characters": ".map"
					},
					"BAAAAJYFAAAAAAAAlwUAAAAAAAAAAAAAlwUAAAAAAACYBQAAAAAAAAAAAACYBQAAAAAAAJkFAAAAAAAAAAAAAJkFAAAAAAAAmgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlgUAAAAAAACWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1635,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJoFAAAAAAAAnAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgUAAAAAAACaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1636,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJsFAAAAAAAAnAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwUAAAAAAACbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1638,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJsFAAAAAAAAnQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwUAAAAAAACbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1639,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJwFAAAAAAAAngUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAUAAAAAAACcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1640,
					2,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"BAAAAJwFAAAAAAAAnAUAAAAAAAABAAAAW5wFAAAAAAAAnAUAAAAAAAABAAAAXZsFAAAAAAAAmwUAAAAAAAABAAAAKJsFAAAAAAAAmwUAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQUAAAAAAACdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1641,
					1,
					"insert",
					{
						"characters": "entry"
					},
					"BQAAAJsFAAAAAAAAnAUAAAAAAAAAAAAAnAUAAAAAAACdBQAAAAAAAAAAAACdBQAAAAAAAJ4FAAAAAAAAAAAAAJ4FAAAAAAAAnwUAAAAAAAAAAAAAnwUAAAAAAACgBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwUAAAAAAACbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1642,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKAFAAAAAAAAoQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAUAAAAAAACgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1644,
					1,
					"cut",
					null,
					"AQAAAKEFAAAAAAAAoQUAAAAAAAACAAAAICk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQUAAAAAAACjBQAAAAAAAP///////+9/"
				],
				[
					1647,
					1,
					"insert",
					{
						"characters": "=)>"
					},
					"AwAAAKEFAAAAAAAAogUAAAAAAAAAAAAAogUAAAAAAACjBQAAAAAAAAAAAACjBQAAAAAAAKQFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQUAAAAAAAChBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1648,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKQFAAAAAAAApQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAUAAAAAAACkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1649,
					3,
					"left_delete",
					null,
					"AwAAAKQFAAAAAAAApAUAAAAAAAABAAAAIKMFAAAAAAAAowUAAAAAAAABAAAAPqIFAAAAAAAAogUAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQUAAAAAAAClBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1650,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAKIFAAAAAAAAowUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogUAAAAAAACiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1651,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKMFAAAAAAAApAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowUAAAAAAACjBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1656,
					1,
					"insert",
					{
						"characters": "ARray."
					},
					"BgAAAKQFAAAAAAAApQUAAAAAAAAAAAAApQUAAAAAAACmBQAAAAAAAAAAAACmBQAAAAAAAKcFAAAAAAAAAAAAAKcFAAAAAAAAqAUAAAAAAAAAAAAAqAUAAAAAAACpBQAAAAAAAAAAAACpBQAAAAAAAKoFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAUAAAAAAACkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1657,
					5,
					"left_delete",
					null,
					"BQAAAKkFAAAAAAAAqQUAAAAAAAABAAAALqgFAAAAAAAAqAUAAAAAAAABAAAAeacFAAAAAAAApwUAAAAAAAABAAAAYaYFAAAAAAAApgUAAAAAAAABAAAAcqUFAAAAAAAApQUAAAAAAAABAAAAUg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqgUAAAAAAACqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1658,
					1,
					"insert",
					{
						"characters": "rray.isArray"
					},
					"DAAAAKUFAAAAAAAApgUAAAAAAAAAAAAApgUAAAAAAACnBQAAAAAAAAAAAACnBQAAAAAAAKgFAAAAAAAAAAAAAKgFAAAAAAAAqQUAAAAAAAAAAAAAqQUAAAAAAACqBQAAAAAAAAAAAACqBQAAAAAAAKsFAAAAAAAAAAAAAKsFAAAAAAAArAUAAAAAAAAAAAAArAUAAAAAAACtBQAAAAAAAAAAAACtBQAAAAAAAK4FAAAAAAAAAAAAAK4FAAAAAAAArwUAAAAAAAAAAAAArwUAAAAAAACwBQAAAAAAAAAAAACwBQAAAAAAALEFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQUAAAAAAAClBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1659,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALEFAAAAAAAAswUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsQUAAAAAAACxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1660,
					1,
					"insert",
					{
						"characters": "entry"
					},
					"BQAAALIFAAAAAAAAswUAAAAAAAAAAAAAswUAAAAAAAC0BQAAAAAAAAAAAAC0BQAAAAAAALUFAAAAAAAAAAAAALUFAAAAAAAAtgUAAAAAAAAAAAAAtgUAAAAAAAC3BQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgUAAAAAAACyBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1662,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAALgFAAAAAAAAuQUAAAAAAAAAAAAAuQUAAAAAAAC6BQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuAUAAAAAAAC4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1663,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAALoFAAAAAAAAuwUAAAAAAAAAAAAAuwUAAAAAAAC8BQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAugUAAAAAAAC6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1664,
					1,
					"left_delete",
					null,
					"AQAAALsFAAAAAAAAuwUAAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAUAAAAAAAC8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1665,
					1,
					"insert",
					{
						"characters": "entry"
					},
					"BQAAALsFAAAAAAAAvAUAAAAAAAAAAAAAvAUAAAAAAAC9BQAAAAAAAAAAAAC9BQAAAAAAAL4FAAAAAAAAAAAAAL4FAAAAAAAAvwUAAAAAAAAAAAAAvwUAAAAAAADABQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuwUAAAAAAAC7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1666,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMAFAAAAAAAAwQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwAUAAAAAAADABQAAAAAAAAAAAAAAAPC/"
				],
				[
					1667,
					1,
					"left_delete",
					null,
					"AQAAAMAFAAAAAAAAwAUAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQUAAAAAAADBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1668,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAMAFAAAAAAAAwgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwAUAAAAAAADABQAAAAAAAAAAAAAAAPC/"
				],
				[
					1669,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAMEFAAAAAAAAwgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQUAAAAAAADBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1671,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAMMFAAAAAAAAxAUAAAAAAAAAAAAAxAUAAAAAAADFBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwUAAAAAAADDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1672,
					1,
					"insert",
					{
						"characters": " entry)"
					},
					"BwAAAMUFAAAAAAAAxgUAAAAAAAAAAAAAxgUAAAAAAADHBQAAAAAAAAAAAADHBQAAAAAAAMgFAAAAAAAAAAAAAMgFAAAAAAAAyQUAAAAAAAAAAAAAyQUAAAAAAADKBQAAAAAAAAAAAADKBQAAAAAAAMsFAAAAAAAAAAAAAMsFAAAAAAAAzAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQUAAAAAAADFBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1673,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMwFAAAAAAAAzQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAUAAAAAAADMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1674,
					1,
					"left_delete",
					null,
					"AQAAAMwFAAAAAAAAzAUAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzQUAAAAAAADNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1675,
					1,
					"insert",
					{
						"characters": ".map"
					},
					"BAAAAMwFAAAAAAAAzQUAAAAAAAAAAAAAzQUAAAAAAADOBQAAAAAAAAAAAADOBQAAAAAAAM8FAAAAAAAAAAAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAUAAAAAAADMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1676,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANAFAAAAAAAA0gUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0AUAAAAAAADQBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1677,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAANEFAAAAAAAA0gUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0QUAAAAAAADRBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1678,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAANIFAAAAAAAA0wUAAAAAAAAAAAAA0wUAAAAAAADUBQAAAAAAAAAAAADUBQAAAAAAANUFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gUAAAAAAADSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1679,
					1,
					"insert",
					{
						"characters": "  r"
					},
					"AwAAANUFAAAAAAAA1gUAAAAAAAAAAAAA1gUAAAAAAADXBQAAAAAAAAAAAADXBQAAAAAAANgFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QUAAAAAAADVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1680,
					1,
					"left_delete",
					null,
					"AQAAANcFAAAAAAAA1wUAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AUAAAAAAADYBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1681,
					1,
					"insert",
					{
						"characters": "u+"
					},
					"AgAAANcFAAAAAAAA2AUAAAAAAAAAAAAA2AUAAAAAAADZBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1wUAAAAAAADXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1682,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANkFAAAAAAAA2wUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QUAAAAAAADZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1683,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANoFAAAAAAAA2wUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gUAAAAAAADaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1685,
					1,
					"insert",
					{
						"characters": "+pathname"
					},
					"CQAAANwFAAAAAAAA3QUAAAAAAAAAAAAA3QUAAAAAAADeBQAAAAAAAAAAAADeBQAAAAAAAN8FAAAAAAAAAAAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA4AUAAAAAAADhBQAAAAAAAAAAAADhBQAAAAAAAOIFAAAAAAAAAAAAAOIFAAAAAAAA4wUAAAAAAAAAAAAA4wUAAAAAAADkBQAAAAAAAAAAAADkBQAAAAAAAOUFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AUAAAAAAADcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1687,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOYFAAAAAAAA5wUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5gUAAAAAAADmBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1692,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD+BgAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBkZWZpbmUsIHByb3BlcnRpZXMsIG5vbmVudW1lcmFibGUgfSBmcm9tICd1dGlsJzsKCmV4cG9ydCBmdW5jdGlvbiBGZXRjaENsYXNzKHVybCkgewogIGNvbnN0IHUgPSBuZXcgVVJMKHVybC5yZXBsYWNlKC9cL1teXC9dKiQvLCAnJykpOwogIGNvbnN0IGJhc2UgPSB1LnBhdGhuYW1lOwogIGNvbnN0IHJlID0gbmV3IFJlZ0V4cCgnXicgKyBiYXNlICsgJy8nKTsKICBjb25zdCBkb2MgPSBuZXcgUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHVybEdldCh1cmwpKTsKCiAgY29uc3Qga2V5cyA9IHsKICAgIENvbnN0cnVjdG9yOiAnY29uc3RydWN0b3InLAogICAgJ0luc3RhbmNlIHByb3BlcnRpZXMnOiAncHJvcGVydGllcycsCiAgICAnSW5zdGFuY2UgbWV0aG9kcyc6ICdtZXRob2RzJywKICAgIEV2ZW50czogJ2V2ZW50cycsCiAgICBJbmhlcml0YW5jZTogJ2Jhc2VzJywKICAgICdSZWxhdGVkIHBhZ2VzIGZvciBXZWIgQXVkaW8gQVBJJzogJ3JlbGF0ZWQnLAogIH07CgogIGNvbnN0IHN1bW1hcnlFbGVtZW50cyA9IFsuLi5kb2MucXVlcnlTZWxlY3RvckFsbCgnc3VtbWFyeScpXS5maWx0ZXIoZSA9PiBlLmlubmVyVGV4dCBpbiBrZXlzKTsKCiAgY29uc3Qgc2ltcGxpZnlMaXN0ID0gbGlzdCA9PiB7CiAgICBpZihsaXN0LmV2ZXJ5KChbYSwgYl0pID0+IGEucmVwbGFjZSgvXHNFeHBlcmltZW50YWwkLywgJycpID09IGIpKSByZXR1cm4gbGlzdC5tYXAoKFthXSkgPT4gYSk7CgogICAgcmV0dXJuIG5ldyBNYXAobGlzdCk7CiAgfTsKCiAgY29uc3Qgc3VtbWFyeUxpc3QgPSBzdW1tYXJ5ID0+CiAgICBzaW1wbGlmeUxpc3QoCiAgICAgIFsuLi5zdW1tYXJ5Lm5leHRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyldCiAgICAgICAgLm1hcChlID0+IFtlLmlubmVyVGV4dCwgZS5xdWVyeVNlbGVjdG9yKCdhJykuZ2V0QXR0cmlidXRlKCdocmVmJykucmVwbGFjZShyZSwgJycpXSkKICAgICAgICAuZmlsdGVyKChbbmFtZV0pID0+ICEvXHNEZXByZWNhdGVkJC8udGVzdChuYW1lKSksCiAgICApOwoKICBjb25zdCBzdW1tYXJpZXMgPSBzdW1tYXJ5RWxlbWVudHMucmVkdWNlKAogICAgKGEsIGUpID0+ICh7IC4uLmEsIFtrZXlzW2UuaW5uZXJUZXh0XSA/PyBlLmlubmVyVGV4dF06IHN1bW1hcnlMaXN0KGUpIH0pLAogICAge30sCiAgKTsKCiAgcmV0dXJuIGRlZmluZSgKICAgIHN1bW1hcmllcywKICAgIG5vbmVudW1lcmFibGUoewogICAgICBnZXRVUkwobmFtZSkgewogICAgICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChuYW1lICsgJyhcKFwpfCkoXHMuKnwpJyk7CgogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgewppZihpZCA9PSBuYW1lKSByZXR1cm4gIFsuLi50aGlzW2tleXNbaWRdXV0ubWFwKGVudHJ5ID0+IEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkubWFwKHAgPT4gIHUrJy8nK3BhdGhuYW1lKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5c1tpZF1dKSB7CiAgICAgICAgICAgIGlmKHR5cGVvZiBlbnRyeSA9PSAnc3RyaW5nJyAmJiByZS50ZXN0KGVudHJ5KSkgcmV0dXJuIHUgKyAnLycgKyBlbnRyeTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiB1ICsgJy8nICsgcGF0aG5hbWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgfSksCiAgKTsKfQoAAAAAAAAAADYHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5wUAAAAAAADnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1707,
					1,
					"paste",
					null,
					"AgAAAHkFAAAAAAAAgQUAAAAAAAAAAAAAgQUAAAAAAACBBQAAAAAAAAIAAABpZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQUAAAAAAAB7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1723,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AgAAABsGAAAAAAAAHAYAAAAAAAAAAAAAHAYAAAAAAAAcBgAAAAAAAAgAAABwYXRobmFtZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwYAAAAAAAAjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1737,
					1,
					"insert",
					{
						"characters": "Object.set"
					},
					"CgAAAMIEAAAAAAAAwwQAAAAAAAAAAAAAwwQAAAAAAADEBAAAAAAAAAAAAADEBAAAAAAAAMUEAAAAAAAAAAAAAMUEAAAAAAAAxgQAAAAAAAAAAAAAxgQAAAAAAADHBAAAAAAAAAAAAADHBAAAAAAAAMgEAAAAAAAAAAAAAMgEAAAAAAAAyQQAAAAAAAAAAAAAyQQAAAAAAADKBAAAAAAAAAAAAADKBAAAAAAAAMsEAAAAAAAAAAAAAMsEAAAAAAAAzAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgQAAAAAAADCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1738,
					1,
					"insert_completion",
					{
						"completion": "setPrototypeOf($1)",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setPrototypeOf(...)"
					},
					"AgAAAMkEAAAAAAAAyQQAAAAAAAADAAAAc2V0yQQAAAAAAADZBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAQAAAAAAADMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1739,
					1,
					"right_delete",
					null,
					"AQAAANgEAAAAAAAA2AQAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AQAAAAAAADYBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1741,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANoEAAAAAAAA2wQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gQAAAAAAADaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1742,
					1,
					"insert",
					{
						"characters": " null)"
					},
					"BgAAANsEAAAAAAAA3AQAAAAAAAAAAAAA3AQAAAAAAADdBAAAAAAAAAAAAADdBAAAAAAAAN4EAAAAAAAAAAAAAN4EAAAAAAAA3wQAAAAAAAAAAAAA3wQAAAAAAADgBAAAAAAAAAAAAADgBAAAAAAAAOEEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2wQAAAAAAADbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1755,
					1,
					"insert",
					{
						"characters": "\ngetMembetrs"
					},
					"DQAAAEIHAAAAAAAAQwcAAAAAAAAAAAAAQwcAAAAAAABJBwAAAAAAAAAAAABJBwAAAAAAAEoHAAAAAAAAAAAAAEoHAAAAAAAASwcAAAAAAAAAAAAASwcAAAAAAABMBwAAAAAAAAAAAABMBwAAAAAAAE0HAAAAAAAAAAAAAE0HAAAAAAAATgcAAAAAAAAAAAAATgcAAAAAAABPBwAAAAAAAAAAAABPBwAAAAAAAFAHAAAAAAAAAAAAAFAHAAAAAAAAUQcAAAAAAAAAAAAAUQcAAAAAAABSBwAAAAAAAAAAAABSBwAAAAAAAFMHAAAAAAAAAAAAAFMHAAAAAAAAVAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgcAAAAAAABCBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1756,
					3,
					"left_delete",
					null,
					"AwAAAFMHAAAAAAAAUwcAAAAAAAABAAAAc1IHAAAAAAAAUgcAAAAAAAABAAAAclEHAAAAAAAAUQcAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVAcAAAAAAABUBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1757,
					1,
					"insert",
					{
						"characters": "rs"
					},
					"AgAAAFEHAAAAAAAAUgcAAAAAAAAAAAAAUgcAAAAAAABTBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQcAAAAAAABRBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1758,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFMHAAAAAAAAVQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwcAAAAAAABTBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1760,
					1,
					"left_delete",
					null,
					"AQAAAFQHAAAAAAAAVAcAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVQcAAAAAAABVBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1761,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFQHAAAAAAAAVQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVAcAAAAAAABUBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1762,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFUHAAAAAAAAVgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVQcAAAAAAABVBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1763,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFYHAAAAAAAAWAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVgcAAAAAAABWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1764,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAFcHAAAAAAAAWAcAAAAAAAAAAAAAWAcAAAAAAABeBwAAAAAAAAAAAABeBwAAAAAAAF8HAAAAAAAAAAAAAF8HAAAAAAAAZQcAAAAAAAAAAAAAWAcAAAAAAABYBwAAAAAAAAYAAAAgICAgICBYBwAAAAAAAGAHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwcAAAAAAABXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1769,
					1,
					"insert",
					{
						"characters": "keys"
					},
					"BgAAAEkHAAAAAAAASgcAAAAAAAAAAAAASgcAAAAAAABKBwAAAAAAAAoAAABnZXRNZW1iZXJzTwcAAAAAAABPBwAAAAAAAAgAAAAgICAgICAgIEoHAAAAAAAASwcAAAAAAAAAAAAASwcAAAAAAABMBwAAAAAAAAAAAABMBwAAAAAAAE0HAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQcAAAAAAABTBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1771,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAEkHAAAAAAAASgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQcAAAAAAABJBwAAAAAAAAAAAAAAAEhA"
				],
				[
					1778,
					1,
					"paste",
					null,
					"AQAAAFMHAAAAAAAAGgkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwcAAAAAAABTBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1781,
					1,
					"right_delete",
					null,
					"AQAAAHMHAAAAAAAAcwcAAAAAAAAVAAAAIGlmKGtleXNbaWRdID09IG5hbWUp",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwcAAAAAAACIBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1785,
					1,
					"insert",
					{
						"characters": "yield"
					},
					"BgAAAH0HAAAAAAAAfgcAAAAAAAAAAAAAfgcAAAAAAAB+BwAAAAAAABMAAAAgICByZXR1cm4gWy4uLnRoaXNbfgcAAAAAAAB/BwAAAAAAAAAAAAB/BwAAAAAAAIAHAAAAAAAAAAAAAIAHAAAAAAAAgQcAAAAAAAAAAAAAgQcAAAAAAACCBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkAcAAAAAAAB9BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1786,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIHAAAAAAAAgwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggcAAAAAAACCBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1788,
					2,
					"left_delete",
					null,
					"AgAAAIwHAAAAAAAAjAcAAAAAAAABAAAAXYsHAAAAAAAAiwcAAAAAAAABAAAAXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQcAAAAAAACNBwAAAAAAAP///////+9/"
				],
				[
					1789,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIsHAAAAAAAAjAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwcAAAAAAACLBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1791,
					1,
					"left_delete",
					null,
					"AQAAAGgHAAAAAAAAaAcAAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQcAAAAAAABpBwAAAAAAAAAAAAAAAGhA"
				],
				[
					1793,
					7,
					"left_delete",
					null,
					"BwAAAHEHAAAAAAAAcQcAAAAAAAABAAAAIG8HAAAAAAAAbwcAAAAAAAACAAAAICBtBwAAAAAAAG0HAAAAAAAAAgAAACAgawcAAAAAAABrBwAAAAAAAAIAAAAgIGkHAAAAAAAAaQcAAAAAAAACAAAAICBoBwAAAAAAAGgHAAAAAAAAAQAAAApnBwAAAAAAAGcHAAAAAAAAAQAAACA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcgcAAAAAAAByBwAAAAAAAAAAAAAAAGVA"
				],
				[
					1798,
					1,
					"cut",
					null,
					"AQAAAIEHAAAAAAAAgQcAAAAAAABhAQAAICAgICAgICAgICAgICAubWFwKGVudHJ5ID0+IChBcnJheS5pc0FycmF5KGVudHJ5KSA/IGVudHJ5WzFdIDogZW50cnkpKQogICAgICAgICAgICAgIC5tYXAocCA9PiB1ICsgJy8nICsgcCk7CgogICAgICAgICAgZm9yKGxldCBlbnRyeSBvZiB0aGlzW2tleXNbaWRdXSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiB1ICsgJy8nICsgZW50cnk7CgogICAgICAgICAgICBjb25zdCBbcHJvcCwgcGF0aG5hbWVdID0gZW50cnk7CgogICAgICAgICAgICBpZihyZS50ZXN0KHByb3ApKSByZXR1cm4gdSArICcvJyArIHBhdGhuYW1lOwogICAgICAgICAgfQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQcAAAAAAADiCAAAAAAAAAAAAAAAAAAA"
				],
				[
					1800,
					1,
					"right_delete",
					null,
					"AQAAAIEHAAAAAAAAgQcAAAAAAAAKAAAAICAgICAgICB9Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQcAAAAAAACLBwAAAAAAAAAAAAAAAAAA"
				],
				[
					1817,
					1,
					"insert",
					{
						"characters": "key"
					},
					"BAAAAHsFAAAAAAAAfAUAAAAAAAAAAAAAfAUAAAAAAAB8BQAAAAAAAAIAAABpZHwFAAAAAAAAfQUAAAAAAAAAAAAAfQUAAAAAAAB+BQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewUAAAAAAAB9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1823,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AgAAAH8FAAAAAAAAgAUAAAAAAAAAAAAAgAUAAAAAAACABQAAAAAAAAcAAABpbiBrZXlz",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwUAAAAAAACGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1824,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIAFAAAAAAAAgQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAUAAAAAAACABQAAAAAAAAAAAAAAAPC/"
				],
				[
					1825,
					2,
					"left_delete",
					null,
					"AgAAAIAFAAAAAAAAgAUAAAAAAAABAAAAIH8FAAAAAAAAfwUAAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQUAAAAAAACBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1826,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AgAAAH8FAAAAAAAAgAUAAAAAAAAAAAAAgAUAAAAAAACBBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwUAAAAAAAB/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1827,
					1,
					"insert",
					{
						"characters": " this.keys"
					},
					"CgAAAIEFAAAAAAAAggUAAAAAAAAAAAAAggUAAAAAAACDBQAAAAAAAAAAAACDBQAAAAAAAIQFAAAAAAAAAAAAAIQFAAAAAAAAhQUAAAAAAAAAAAAAhQUAAAAAAACGBQAAAAAAAAAAAACGBQAAAAAAAIcFAAAAAAAAAAAAAIcFAAAAAAAAiAUAAAAAAAAAAAAAiAUAAAAAAACJBQAAAAAAAAAAAACJBQAAAAAAAIoFAAAAAAAAAAAAAIoFAAAAAAAAiwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQUAAAAAAACBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1828,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIsFAAAAAAAAjQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwUAAAAAAACLBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1838,
					1,
					"insert",
					{
						"characters": "key"
					},
					"BAAAAJ4FAAAAAAAAnwUAAAAAAAAAAAAAnwUAAAAAAACfBQAAAAAAAAgAAABrZXlzW2lkXZ8FAAAAAAAAoAUAAAAAAAAAAAAAoAUAAAAAAAChBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAngUAAAAAAACmBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1850,
					1,
					"paste",
					null,
					"AgAAAMcFAAAAAAAAygUAAAAAAAAAAAAAygUAAAAAAADKBQAAAAAAAAgAAABrZXlzW2lkXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwUAAAAAAADPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1857,
					1,
					"paste",
					null,
					"AgAAAFsGAAAAAAAAXgYAAAAAAAAAAAAAXgYAAAAAAABeBgAAAAAAAAgAAABrZXlzW2lkXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWwYAAAAAAABjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1878,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIEHAAAAAAAAggcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQcAAAAAAACBBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1879,
					1,
					"left_delete",
					null,
					"AQAAAIEHAAAAAAAAgQcAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggcAAAAAAACCBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1880,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAAIEHAAAAAAAAggcAAAAAAAAAAAAAggcAAAAAAACDBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQcAAAAAAACBBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1881,
					1,
					"left_delete",
					null,
					"AQAAAIIHAAAAAAAAggcAAAAAAAABAAAAbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgwcAAAAAAACDBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1882,
					1,
					"insert",
					{
						"characters": "\ngetMembers"
					},
					"DAAAAIIHAAAAAAAAgwcAAAAAAAAAAAAAgwcAAAAAAACJBwAAAAAAAAAAAACJBwAAAAAAAIoHAAAAAAAAAAAAAIoHAAAAAAAAiwcAAAAAAAAAAAAAiwcAAAAAAACMBwAAAAAAAAAAAACMBwAAAAAAAI0HAAAAAAAAAAAAAI0HAAAAAAAAjgcAAAAAAAAAAAAAjgcAAAAAAACPBwAAAAAAAAAAAACPBwAAAAAAAJAHAAAAAAAAAAAAAJAHAAAAAAAAkQcAAAAAAAAAAAAAkQcAAAAAAACSBwAAAAAAAAAAAACSBwAAAAAAAJMHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggcAAAAAAACCBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1883,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJMHAAAAAAAAlQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkwcAAAAAAACTBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1885,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUHAAAAAAAAlgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQcAAAAAAACVBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1886,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJYHAAAAAAAAmAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlgcAAAAAAACWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1887,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJcHAAAAAAAAmAcAAAAAAAAAAAAAmAcAAAAAAACeBwAAAAAAAAAAAACeBwAAAAAAAJ8HAAAAAAAAAAAAAJ8HAAAAAAAApQcAAAAAAAAAAAAAmAcAAAAAAACYBwAAAAAAAAYAAAAgICAgICCYBwAAAAAAAKAHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwcAAAAAAACXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1890,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAKAHAAAAAAAAoQcAAAAAAAAAAAAAoQcAAAAAAACiBwAAAAAAAAAAAACiBwAAAAAAAKMHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAcAAAAAAACgBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1891,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKMHAAAAAAAApQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowcAAAAAAACjBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1892,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKQHAAAAAAAApQcAAAAAAAAAAAAApQcAAAAAAACmBwAAAAAAAAAAAACmBwAAAAAAAKcHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAcAAAAAAACkBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1893,
					1,
					"insert",
					{
						"characters": " key"
					},
					"BAAAAKcHAAAAAAAAqAcAAAAAAAAAAAAAqAcAAAAAAACpBwAAAAAAAAAAAACpBwAAAAAAAKoHAAAAAAAAAAAAAKoHAAAAAAAAqwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwcAAAAAAACnBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1894,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAKsHAAAAAAAArAcAAAAAAAAAAAAArAcAAAAAAACtBwAAAAAAAAAAAACtBwAAAAAAAK4HAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqwcAAAAAAACrBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1895,
					1,
					"insert",
					{
						"characters": " this.keys"
					},
					"CgAAAK4HAAAAAAAArwcAAAAAAAAAAAAArwcAAAAAAACwBwAAAAAAAAAAAACwBwAAAAAAALEHAAAAAAAAAAAAALEHAAAAAAAAsgcAAAAAAAAAAAAAsgcAAAAAAACzBwAAAAAAAAAAAACzBwAAAAAAALQHAAAAAAAAAAAAALQHAAAAAAAAtQcAAAAAAAAAAAAAtQcAAAAAAAC2BwAAAAAAAAAAAAC2BwAAAAAAALcHAAAAAAAAAAAAALcHAAAAAAAAuAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArgcAAAAAAACuBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1896,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALgHAAAAAAAAugcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuAcAAAAAAAC4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1898,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALsHAAAAAAAAvQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuwcAAAAAAAC7BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1899,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAALwHAAAAAAAAvQcAAAAAAAAAAAAAvQcAAAAAAADFBwAAAAAAAAAAAADFBwAAAAAAAMYHAAAAAAAAAAAAAMYHAAAAAAAAzgcAAAAAAAAAAAAAvQcAAAAAAAC9BwAAAAAAAAgAAAAgICAgICAgIL0HAAAAAAAAxwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAcAAAAAAAC8BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1909,
					1,
					"cut",
					null,
					"AQAAADoHAAAAAAAAOgcAAAAAAABIAAAALAogICAgICAqa2V5cygpIHsKIGZvcihsZXQgaWQgaW4ga2V5cykKICAgICAgICAgeWllbGQga2V5c1tpZF07CiAgICAgIH0s",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgcAAAAAAACCBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1910,
					2,
					"paste",
					null,
					"AgAAADoHAAAAAAAAggcAAAAAAAAAAAAAggcAAAAAAADKBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgcAAAAAAAA6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1912,
					1,
					"right_delete",
					null,
					"AgAAAIIHAAAAAAAAggcAAAAAAAABAAAALAQIAAAAAAAABAgAAAAAAAAKAAAAICAgICAgICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggcAAAAAAACCBwAAAAAAAAAAAAAAAFBA"
				],
				[
					1918,
					1,
					"insert",
					{
						"characters": "values"
					},
					"BwAAAIoHAAAAAAAAiwcAAAAAAAAAAAAAiwcAAAAAAACLBwAAAAAAAAQAAABrZXlziwcAAAAAAACMBwAAAAAAAAAAAACMBwAAAAAAAI0HAAAAAAAAAAAAAI0HAAAAAAAAjgcAAAAAAAAAAAAAjgcAAAAAAACPBwAAAAAAAAAAAACPBwAAAAAAAJAHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjgcAAAAAAACKBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1923,
					1,
					"insert",
					{
						"characters": "this[]"
					},
					"BgAAALkHAAAAAAAAugcAAAAAAAAAAAAAugcAAAAAAAC7BwAAAAAAAAAAAAC7BwAAAAAAALwHAAAAAAAAAAAAALwHAAAAAAAAvQcAAAAAAAAAAAAAvQcAAAAAAAC+BwAAAAAAAAAAAAC+BwAAAAAAAL8HAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQcAAAAAAAC5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1924,
					1,
					"left_delete",
					null,
					"AQAAAL4HAAAAAAAAvgcAAAAAAAABAAAAXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvwcAAAAAAAC/BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1927,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAMYHAAAAAAAAxwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxgcAAAAAAADGBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1938,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BgAAAAMIAAAAAAAABAgAAAAAAAAAAAAABAgAAAAAAAAECAAAAAAAAAQAAABrZXlzBAgAAAAAAAAFCAAAAAAAAAAAAAAFCAAAAAAAAAYIAAAAAAAAAAAAAAYIAAAAAAAABwgAAAAAAAAAAAAABwgAAAAAAAAICAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwgAAAAAAAAHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1945,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAgIAAAAAAAACQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAgAAAAAAAAICAAAAAAAAAAAAAAAAPC/"
				],
				[
					1952,
					3,
					"left_delete",
					null,
					"AwAAAPkHAAAAAAAA+QcAAAAAAAABAAAAefgHAAAAAAAA+AcAAAAAAAABAAAAZfcHAAAAAAAA9wcAAAAAAAABAAAAaw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gcAAAAAAAD6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1953,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BQAAAPcHAAAAAAAA+AcAAAAAAAAAAAAA+AcAAAAAAAD5BwAAAAAAAAAAAAD5BwAAAAAAAPoHAAAAAAAAAAAAAPoHAAAAAAAA+wcAAAAAAAAAAAAA+wcAAAAAAAD8BwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9wcAAAAAAAD3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1962,
					1,
					"insert",
					{
						"characters": "types,"
					},
					"BgAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABLAAAAAAAAAAAAAABLAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAABOAAAAAAAAAE8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1965,
					1,
					"insert",
					{
						"characters": "oif"
					},
					"AwAAABYIAAAAAAAAFwgAAAAAAAAAAAAAFwgAAAAAAAAYCAAAAAAAAAAAAAAYCAAAAAAAABkIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFggAAAAAAAAWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1966,
					3,
					"left_delete",
					null,
					"AwAAABgIAAAAAAAAGAgAAAAAAAABAAAAZhcIAAAAAAAAFwgAAAAAAAABAAAAaRYIAAAAAAAAFggAAAAAAAABAAAAbw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQgAAAAAAAAZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1967,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAABYIAAAAAAAAFwgAAAAAAAAAAAAAFwgAAAAAAAAYCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFggAAAAAAAAWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1968,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABgIAAAAAAAAGggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAgAAAAAAAAYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1969,
					1,
					"insert",
					{
						"characters": "/ty"
					},
					"AwAAABkIAAAAAAAAGggAAAAAAAAAAAAAGggAAAAAAAAbCAAAAAAAAAAAAAAbCAAAAAAAABwIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQgAAAAAAAAZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1970,
					3,
					"left_delete",
					null,
					"AwAAABsIAAAAAAAAGwgAAAAAAAABAAAAeRoIAAAAAAAAGggAAAAAAAABAAAAdBkIAAAAAAAAGQgAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAgAAAAAAAAcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1971,
					1,
					"insert",
					{
						"characters": "types.isMap"
					},
					"CwAAABkIAAAAAAAAGggAAAAAAAAAAAAAGggAAAAAAAAbCAAAAAAAAAAAAAAbCAAAAAAAABwIAAAAAAAAAAAAABwIAAAAAAAAHQgAAAAAAAAAAAAAHQgAAAAAAAAeCAAAAAAAAAAAAAAeCAAAAAAAAB8IAAAAAAAAAAAAAB8IAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAhCAAAAAAAAAAAAAAhCAAAAAAAACIIAAAAAAAAAAAAACIIAAAAAAAAIwgAAAAAAAAAAAAAIwgAAAAAAAAkCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQgAAAAAAAAZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1972,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACQIAAAAAAAAJggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJAgAAAAAAAAkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1973,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BQAAACUIAAAAAAAAJggAAAAAAAAAAAAAJggAAAAAAAAnCAAAAAAAAAAAAAAnCAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAAKQgAAAAAAAAAAAAAKQgAAAAAAAAqCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQgAAAAAAAAlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1975,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACwIAAAAAAAALQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALAgAAAAAAAAsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1976,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAC0IAAAAAAAALwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQgAAAAAAAAtCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1977,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAC4IAAAAAAAALwgAAAAAAAAAAAAALwgAAAAAAAAwCAAAAAAAAAAAAAAvCAAAAAAAADEIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALggAAAAAAAAuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1984,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AgAAAN4HAAAAAAAA3wcAAAAAAAAAAAAAMAgAAAAAAAAwCAAAAAAAAAIAAAAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gcAAAAAAADeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1990,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAADAIAAAAAAAAMQgAAAAAAAAAAAAAMQgAAAAAAAAyCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMAgAAAAAAAAwCAAAAAAAAAAAAAAAAExA"
				],
				[
					1991,
					1,
					"insert",
					{
						"characters": "yield"
					},
					"BQAAADIIAAAAAAAAMwgAAAAAAAAAAAAAMwgAAAAAAAA0CAAAAAAAAAAAAAA0CAAAAAAAADUIAAAAAAAAAAAAADUIAAAAAAAANggAAAAAAAAAAAAANggAAAAAAAA3CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMggAAAAAAAAyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1992,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAADcIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA5CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwgAAAAAAAA3CAAAAAAAAAAAAAAAAPC/"
				],
				[
					1993,
					1,
					"insert",
					{
						"characters": "value.keys"
					},
					"CgAAADkIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA7CAAAAAAAAAAAAAA7CAAAAAAAADwIAAAAAAAAAAAAADwIAAAAAAAAPQgAAAAAAAAAAAAAPQgAAAAAAAA+CAAAAAAAAAAAAAA+CAAAAAAAAD8IAAAAAAAAAAAAAD8IAAAAAAAAQAgAAAAAAAAAAAAAQAgAAAAAAABBCAAAAAAAAAAAAABBCAAAAAAAAEIIAAAAAAAAAAAAAEIIAAAAAAAAQwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQgAAAAAAAA5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					1994,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEMIAAAAAAAARQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwgAAAAAAABDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1996,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEUIAAAAAAAARggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQgAAAAAAABFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2005,
					1,
					"insert",
					{
						"characters": "enmt"
					},
					"BQAAAD8IAAAAAAAAQAgAAAAAAAAAAAAAQAgAAAAAAABACAAAAAAAAAQAAABrZXlzQAgAAAAAAABBCAAAAAAAAAAAAABBCAAAAAAAAEIIAAAAAAAAAAAAAEIIAAAAAAAAQwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwgAAAAAAABDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2006,
					2,
					"left_delete",
					null,
					"AgAAAEIIAAAAAAAAQggAAAAAAAABAAAAdEEIAAAAAAAAQQgAAAAAAAABAAAAbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwgAAAAAAABDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2007,
					1,
					"insert",
					{
						"characters": "tries"
					},
					"BQAAAEEIAAAAAAAAQggAAAAAAAAAAAAAQggAAAAAAABDCAAAAAAAAAAAAABDCAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAARQgAAAAAAAAAAAAARQgAAAAAAABGCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQgAAAAAAABBCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2010,
					1,
					"right_delete",
					null,
					"AQAAAC4IAAAAAAAALggAAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALggAAAAAAAAuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2012,
					2,
					"left_delete",
					null,
					"AgAAAEkIAAAAAAAASQgAAAAAAAABAAAAfUgIAAAAAAAASAgAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASggAAAAAAABKCAAAAAAAAAAAAAAAAGdA"
				],
				[
					2015,
					1,
					"left_delete",
					null,
					"AQAAABUIAAAAAAAAFQgAAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFggAAAAAAAAWCAAAAAAAAP///////+9/"
				],
				[
					2017,
					6,
					"left_delete",
					null,
					"BgAAAFAIAAAAAAAAUAgAAAAAAAABAAAAfU4IAAAAAAAATggAAAAAAAACAAAAICBMCAAAAAAAAEwIAAAAAAAAAgAAACAgSggAAAAAAABKCAAAAAAAAAIAAAAgIEgIAAAAAAAASAgAAAAAAAACAAAAICBHCAAAAAAAAEcIAAAAAAAAAQAAAAo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQgAAAAAAABRCAAAAAAAAAAAAAAAgHNA"
				],
				[
					2020,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABfCAAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQge3R5cGVzLCBkZWZpbmUsIHByb3BlcnRpZXMsIG5vbmVudW1lcmFibGUgfSBmcm9tICd1dGlsJzsKCmV4cG9ydCBmdW5jdGlvbiBGZXRjaENsYXNzKHVybCkgewogIGNvbnN0IHUgPSBuZXcgVVJMKHVybC5yZXBsYWNlKC9cL1teXC9dKiQvLCAnJykpOwogIGNvbnN0IGJhc2UgPSB1LnBhdGhuYW1lOwogIGNvbnN0IHJlID0gbmV3IFJlZ0V4cCgnXicgKyBiYXNlICsgJy8nKTsKICBjb25zdCBkb2MgPSBuZXcgUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHVybEdldCh1cmwpKTsKCiAgY29uc3Qga2V5cyA9IHsKICAgIENvbnN0cnVjdG9yOiAnY29uc3RydWN0b3InLAogICAgJ0luc3RhbmNlIHByb3BlcnRpZXMnOiAncHJvcGVydGllcycsCiAgICAnSW5zdGFuY2UgbWV0aG9kcyc6ICdtZXRob2RzJywKICAgIEV2ZW50czogJ2V2ZW50cycsCiAgICBJbmhlcml0YW5jZTogJ2Jhc2VzJywKICAgICdSZWxhdGVkIHBhZ2VzIGZvciBXZWIgQXVkaW8gQVBJJzogJ3JlbGF0ZWQnLAogIH07CgogIGNvbnN0IHN1bW1hcnlFbGVtZW50cyA9IFsuLi5kb2MucXVlcnlTZWxlY3RvckFsbCgnc3VtbWFyeScpXS5maWx0ZXIoZSA9PiBlLmlubmVyVGV4dCBpbiBrZXlzKTsKCiAgY29uc3Qgc2ltcGxpZnlMaXN0ID0gbGlzdCA9PiB7CiAgICBpZihsaXN0LmV2ZXJ5KChbYSwgYl0pID0+IGEucmVwbGFjZSgvXHNFeHBlcmltZW50YWwkLywgJycpID09IGIpKSByZXR1cm4gbGlzdC5tYXAoKFthXSkgPT4gYSk7CgogICAgcmV0dXJuIG5ldyBNYXAobGlzdCk7CiAgfTsKCiAgY29uc3Qgc3VtbWFyeUxpc3QgPSBzdW1tYXJ5ID0+CiAgICBzaW1wbGlmeUxpc3QoCiAgICAgIFsuLi5zdW1tYXJ5Lm5leHRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyldCiAgICAgICAgLm1hcChlID0+IFtlLmlubmVyVGV4dCwgZS5xdWVyeVNlbGVjdG9yKCdhJykuZ2V0QXR0cmlidXRlKCdocmVmJykucmVwbGFjZShyZSwgJycpXSkKICAgICAgICAuZmlsdGVyKChbbmFtZV0pID0+ICEvXHNEZXByZWNhdGVkJC8udGVzdChuYW1lKSksCiAgICApOwoKICBjb25zdCBzdW1tYXJpZXMgPSBzdW1tYXJ5RWxlbWVudHMucmVkdWNlKAogICAgKGEsIGUpID0+ICh7IC4uLmEsIFtrZXlzW2UuaW5uZXJUZXh0XSA/PyBlLmlubmVyVGV4dF06IHN1bW1hcnlMaXN0KGUpIH0pLAogICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHt9LCBudWxsKSwKICApOwoKICByZXR1cm4gZGVmaW5lKAogICAgc3VtbWFyaWVzLAogICAgbm9uZW51bWVyYWJsZSh7CiAgICAgIGdldFVSTChuYW1lKSB7CiAgICAgICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKG5hbWUgKyAnKFwoXCl8KShccy4qfCknKTsKCiAgICAgICAgZm9yKGxldCBrZXkgb2YgdGhpcy5rZXlzKCkpIHsKICAgICAgICAgIGlmKGtleSA9PSBuYW1lKQogICAgICAgICAgICByZXR1cm4gWy4uLnRoaXNba2V5XV0KICAgICAgICAgICAgICAubWFwKGVudHJ5ID0+IChBcnJheS5pc0FycmF5KGVudHJ5KSA/IGVudHJ5WzFdIDogZW50cnkpKQogICAgICAgICAgICAgIC5tYXAocCA9PiB1ICsgJy8nICsgcCk7CgogICAgICAgICAgZm9yKGxldCBlbnRyeSBvZiB0aGlzW2tleV0pIHsKICAgICAgICAgICAgaWYodHlwZW9mIGVudHJ5ID09ICdzdHJpbmcnICYmIHJlLnRlc3QoZW50cnkpKSByZXR1cm4gdSArICcvJyArIGVudHJ5OwoKICAgICAgICAgICAgY29uc3QgW3Byb3AsIHBhdGhuYW1lXSA9IGVudHJ5OwoKICAgICAgICAgICAgaWYocmUudGVzdChwcm9wKSkgcmV0dXJuIHUgKyAnLycgKyBwYXRobmFtZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogZm9yKGxldCBpZCBpbiBrZXlzKQogICAgICAgICB5aWVsZCBrZXlzW2lkXTsKICAgICAgfSwKICAgICAgKnZhbHVlcygpIHsKIGZvcihsZXQgaWQgaW4ga2V5cykKICAgICAgICAgeWllbGQgdGhpc1trZXlzW2lkXV07CiAgICAgIH0sCiAgICAgICpnZXRNZW1iZXJzKCkgewogICAgICAgIGZvcihsZXQgdmFsdWUgb2YgdGhpcy52YWx1ZXMoKSkKaWYodHlwZXMuaXNNYXAodmFsdWUpKSAKICB5aWVsZCAqdmFsdWUuZW50cmllcygpOwogICAgICB9CiAgICB9KSwKICApOwp9CgAAAAAAAAAAWggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwgAAAAAAABHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2041,
					1,
					"insert",
					{
						"characters": "\n\nconst"
					},
					"CgAAAO4EAAAAAAAA7wQAAAAAAAAAAAAA7wQAAAAAAADxBAAAAAAAAAAAAADxBAAAAAAAAPIEAAAAAAAAAAAAAPIEAAAAAAAA9AQAAAAAAAAAAAAA7wQAAAAAAADvBAAAAAAAAAIAAAAgIPIEAAAAAAAA8wQAAAAAAAAAAAAA8wQAAAAAAAD0BAAAAAAAAAAAAAD0BAAAAAAAAPUEAAAAAAAAAAAAAPUEAAAAAAAA9gQAAAAAAAAAAAAA9gQAAAAAAAD3BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7gQAAAAAAADuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					2042,
					1,
					"insert",
					{
						"characters": " makeURL"
					},
					"CAAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD5BAAAAAAAAAAAAAD5BAAAAAAAAPoEAAAAAAAAAAAAAPoEAAAAAAAA+wQAAAAAAAAAAAAA+wQAAAAAAAD8BAAAAAAAAAAAAAD8BAAAAAAAAP0EAAAAAAAAAAAAAP0EAAAAAAAA/gQAAAAAAAAAAAAA/gQAAAAAAAD/BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9wQAAAAAAAD3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					2043,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAP8EAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAABBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/wQAAAAAAAD/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					2044,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAAEFAAAAAAAAAgUAAAAAAAAAAAAAAgUAAAAAAAADBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAQUAAAAAAAABBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2045,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAAMFAAAAAAAABAUAAAAAAAAAAAAABAUAAAAAAAAFBQAAAAAAAAAAAAAFBQAAAAAAAAYFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwUAAAAAAAADBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2046,
					1,
					"insert",
					{
						"characters": " u"
					},
					"AgAAAAYFAAAAAAAABwUAAAAAAAAAAAAABwUAAAAAAAAIBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABgUAAAAAAAAGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2047,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAAgFAAAAAAAACQUAAAAAAAAAAAAACQUAAAAAAAAKBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAUAAAAAAAAIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2048,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAoFAAAAAAAACwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACgUAAAAAAAAKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2049,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAsFAAAAAAAADQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACwUAAAAAAAALBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2050,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAAwFAAAAAAAADQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAUAAAAAAAAMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2052,
					1,
					"insert",
					{
						"characters": " +p"
					},
					"AwAAAA4FAAAAAAAADwUAAAAAAAAAAAAADwUAAAAAAAAQBQAAAAAAAAAAAAAQBQAAAAAAABEFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgUAAAAAAAAOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2053,
					1,
					"left_delete",
					null,
					"AQAAABAFAAAAAAAAEAUAAAAAAAABAAAAcA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2054,
					1,
					"insert",
					{
						"characters": " p;"
					},
					"AwAAABAFAAAAAAAAEQUAAAAAAAAAAAAAEQUAAAAAAAASBQAAAAAAAAAAAAASBQAAAAAAABMFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAUAAAAAAAAQBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2068,
					1,
					"paste",
					null,
					"AQAAANEGAAAAAAAA2AYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0QYAAAAAAADRBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2069,
					1,
					"insert",
					{
						"characters": "(entry)"
					},
					"BwAAANgGAAAAAAAA2QYAAAAAAAAAAAAA2QYAAAAAAADaBgAAAAAAAAAAAADaBgAAAAAAANsGAAAAAAAAAAAAANsGAAAAAAAA3AYAAAAAAAAAAAAA3AYAAAAAAADdBgAAAAAAAAAAAADdBgAAAAAAAN4GAAAAAAAAAAAAAN4GAAAAAAAA3wYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AYAAAAAAADYBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2072,
					1,
					"cut",
					null,
					"AQAAAN8GAAAAAAAA3wYAAAAAAAAPAAAAdSArICcvJyArIGVudHJ5",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wYAAAAAAADuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2075,
					1,
					"insert",
					{
						"characters": "makeURL("
					},
					"CAAAADQHAAAAAAAANQcAAAAAAAAAAAAANQcAAAAAAAA2BwAAAAAAAAAAAAA2BwAAAAAAADcHAAAAAAAAAAAAADcHAAAAAAAAOAcAAAAAAAAAAAAAOAcAAAAAAAA5BwAAAAAAAAAAAAA5BwAAAAAAADoHAAAAAAAAAAAAADoHAAAAAAAAOwcAAAAAAAAAAAAAOwcAAAAAAAA8BwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAcAAAAAAAA0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					2076,
					11,
					"right_delete",
					null,
					"CwAAADwHAAAAAAAAPAcAAAAAAAABAAAAdTwHAAAAAAAAPAcAAAAAAAABAAAAIDwHAAAAAAAAPAcAAAAAAAABAAAAKzwHAAAAAAAAPAcAAAAAAAABAAAAIDwHAAAAAAAAPAcAAAAAAAABAAAAJzwHAAAAAAAAPAcAAAAAAAABAAAALzwHAAAAAAAAPAcAAAAAAAABAAAAJzwHAAAAAAAAPAcAAAAAAAABAAAAIDwHAAAAAAAAPAcAAAAAAAABAAAAKzwHAAAAAAAAPAcAAAAAAAABAAAAIDwHAAAAAAAAPAcAAAAAAAABAAAAcA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAcAAAAAAAA8BwAAAAAAAAAAAAAAAPC/"
				],
				[
					2077,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAADwHAAAAAAAAPQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAcAAAAAAAA8BwAAAAAAAAAAAAAAAPC/"
				],
				[
					2080,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAEQHAAAAAAAARQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARAcAAAAAAABEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					2086,
					1,
					"insert",
					{
						"characters": "makeURL("
					},
					"CAAAAFgGAAAAAAAAWQYAAAAAAAAAAAAAWQYAAAAAAABaBgAAAAAAAAAAAABaBgAAAAAAAFsGAAAAAAAAAAAAAFsGAAAAAAAAXAYAAAAAAAAAAAAAXAYAAAAAAABdBgAAAAAAAAAAAABdBgAAAAAAAF4GAAAAAAAAAAAAAF4GAAAAAAAAXwYAAAAAAAAAAAAAXwYAAAAAAABgBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWAYAAAAAAABYBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2090,
					1,
					"insert",
					{
						"characters": "makeURL"
					},
					"CAAAAFMGAAAAAAAAVAYAAAAAAAAAAAAAVAYAAAAAAABUBgAAAAAAABgAAABwID0+IG1ha2VVUkwodSArICcvJyArIHBUBgAAAAAAAFUGAAAAAAAAAAAAAFUGAAAAAAAAVgYAAAAAAAAAAAAAVgYAAAAAAABXBgAAAAAAAAAAAABXBgAAAAAAAFgGAAAAAAAAAAAAAFgGAAAAAAAAWQYAAAAAAAAAAAAAWQYAAAAAAABaBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwYAAAAAAABrBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2133,
					1,
					"insert",
					{
						"characters": "'^+"
					},
					"AwAAAHwFAAAAAAAAfQUAAAAAAAAAAAAAfQUAAAAAAAB+BQAAAAAAAAAAAAB+BQAAAAAAAH8FAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfAUAAAAAAAB8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					2134,
					1,
					"left_delete",
					null,
					"AQAAAH4FAAAAAAAAfgUAAAAAAAABAAAAKw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwUAAAAAAAB/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					2135,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAH4FAAAAAAAAfwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfgUAAAAAAAB+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					2136,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAH8FAAAAAAAAgAUAAAAAAAAAAAAAgAUAAAAAAACBBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwUAAAAAAAB/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					2137,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIEFAAAAAAAAggUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQUAAAAAAACBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2140,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAJkFAAAAAAAAmgUAAAAAAAAAAAAAmgUAAAAAAACbBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmQUAAAAAAACZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2141,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJsFAAAAAAAAnAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwUAAAAAAACbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2142,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJwFAAAAAAAAngUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAUAAAAAAACcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2143,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAJ0FAAAAAAAAngUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQUAAAAAAACdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2159,
					1,
					"cut",
					null,
					"AQAAALAHAAAAAAAAsAcAAAAAAABNAAAAICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAcAAAAAAAD9BwAAAAAAAAAAAAAAAPC/"
				],
				[
					2160,
					2,
					"paste",
					null,
					"AgAAALAHAAAAAAAA/QcAAAAAAAAAAAAA/QcAAAAAAABKCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAcAAAAAAACwBwAAAAAAAAAAAAAAAPC/"
				],
				[
					2164,
					1,
					"insert",
					{
						"characters": "[keysd["
					},
					"BwAAAC8IAAAAAAAAMAgAAAAAAAAAAAAAMAgAAAAAAAAxCAAAAAAAAAAAAAAxCAAAAAAAADIIAAAAAAAAAAAAADIIAAAAAAAAMwgAAAAAAAAAAAAAMwgAAAAAAAA0CAAAAAAAAAAAAAA0CAAAAAAAADUIAAAAAAAAAAAAADUIAAAAAAAANggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwgAAAAAAAAvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2165,
					2,
					"left_delete",
					null,
					"AgAAADUIAAAAAAAANQgAAAAAAAABAAAAWzQIAAAAAAAANAgAAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANggAAAAAAAA2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					2166,
					1,
					"insert",
					{
						"characters": "[id],"
					},
					"BQAAADQIAAAAAAAANQgAAAAAAAAAAAAANQgAAAAAAAA2CAAAAAAAAAAAAAA2CAAAAAAAADcIAAAAAAAAAAAAADcIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA5CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAgAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					2167,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkIAAAAAAAAOggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQgAAAAAAAA5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					2170,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAEgIAAAAAAAASQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAgAAAAAAABICAAAAAAAAAAAAAAAAPC/"
				],
				[
					2177,
					1,
					"insert",
					{
						"characters": "entries"
					},
					"CAAAAAIIAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADCAAAAAAAAAYAAAB2YWx1ZXMDCAAAAAAAAAQIAAAAAAAAAAAAAAQIAAAAAAAABQgAAAAAAAAAAAAABQgAAAAAAAAGCAAAAAAAAAAAAAAGCAAAAAAAAAcIAAAAAAAAAAAAAAcIAAAAAAAACAgAAAAAAAAAAAAACAgAAAAAAAAJCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAgAAAAAAAACCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2182,
					1,
					"insert",
					{
						"characters": "[key,"
					},
					"BQAAAHsIAAAAAAAAfAgAAAAAAAAAAAAAfAgAAAAAAAB9CAAAAAAAAAAAAAB9CAAAAAAAAH4IAAAAAAAAAAAAAH4IAAAAAAAAfwgAAAAAAAAAAAAAfwgAAAAAAACACAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewgAAAAAAAB7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					2184,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAIUIAAAAAAAAhggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2186,
					6,
					"right_delete",
					null,
					"BgAAAI8IAAAAAAAAjwgAAAAAAAABAAAAdo8IAAAAAAAAjwgAAAAAAAABAAAAYY8IAAAAAAAAjwgAAAAAAAABAAAAbI8IAAAAAAAAjwgAAAAAAAABAAAAdY8IAAAAAAAAjwgAAAAAAAABAAAAZY8IAAAAAAAAjwgAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwgAAAAAAACPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2187,
					1,
					"insert",
					{
						"characters": "entries"
					},
					"BwAAAI8IAAAAAAAAkAgAAAAAAAAAAAAAkAgAAAAAAACRCAAAAAAAAAAAAACRCAAAAAAAAJIIAAAAAAAAAAAAAJIIAAAAAAAAkwgAAAAAAAAAAAAAkwgAAAAAAACUCAAAAAAAAAAAAACUCAAAAAAAAJUIAAAAAAAAAAAAAJUIAAAAAAAAlggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwgAAAAAAACPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2198,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADhCAAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyB0eXBlcywgZGVmaW5lLCBwcm9wZXJ0aWVzLCBub25lbnVtZXJhYmxlIH0gZnJvbSAndXRpbCc7CgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hDbGFzcyh1cmwpIHsKICBjb25zdCB1ID0gbmV3IFVSTCh1cmwucmVwbGFjZSgvXC9bXlwvXSokLywgJycpKTsKICBjb25zdCBiYXNlID0gdS5wYXRobmFtZTsKICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgYmFzZSArICcvJyk7CiAgY29uc3QgZG9jID0gbmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh1cmxHZXQodXJsKSk7CgogIGNvbnN0IGtleXMgPSB7CiAgICBDb25zdHJ1Y3RvcjogJ2NvbnN0cnVjdG9yJywKICAgICdJbnN0YW5jZSBwcm9wZXJ0aWVzJzogJ3Byb3BlcnRpZXMnLAogICAgJ0luc3RhbmNlIG1ldGhvZHMnOiAnbWV0aG9kcycsCiAgICBFdmVudHM6ICdldmVudHMnLAogICAgSW5oZXJpdGFuY2U6ICdiYXNlcycsCiAgICAnUmVsYXRlZCBwYWdlcyBmb3IgV2ViIEF1ZGlvIEFQSSc6ICdyZWxhdGVkJywKICB9OwoKICBjb25zdCBzdW1tYXJ5RWxlbWVudHMgPSBbLi4uZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N1bW1hcnknKV0uZmlsdGVyKGUgPT4gZS5pbm5lclRleHQgaW4ga2V5cyk7CgogIGNvbnN0IHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4gewogICAgaWYobGlzdC5ldmVyeSgoW2EsIGJdKSA9PiBhLnJlcGxhY2UoL1xzRXhwZXJpbWVudGFsJC8sICcnKSA9PSBiKSkgcmV0dXJuIGxpc3QubWFwKChbYV0pID0+IGEpOwoKICAgIHJldHVybiBuZXcgTWFwKGxpc3QpOwogIH07CgogIGNvbnN0IHN1bW1hcnlMaXN0ID0gc3VtbWFyeSA9PgogICAgc2ltcGxpZnlMaXN0KAogICAgICBbLi4uc3VtbWFyeS5uZXh0U2libGluZy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXQogICAgICAgIC5tYXAoZSA9PiBbZS5pbm5lclRleHQsIGUucXVlcnlTZWxlY3RvcignYScpLmdldEF0dHJpYnV0ZSgnaHJlZicpLnJlcGxhY2UocmUsICcnKV0pCiAgICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiAhL1xzRGVwcmVjYXRlZCQvLnRlc3QobmFtZSkpLAogICAgKTsKCiAgY29uc3Qgc3VtbWFyaWVzID0gc3VtbWFyeUVsZW1lbnRzLnJlZHVjZSgKICAgIChhLCBlKSA9PiAoeyAuLi5hLCBba2V5c1tlLmlubmVyVGV4dF0gPz8gZS5pbm5lclRleHRdOiBzdW1tYXJ5TGlzdChlKSB9KSwKICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih7fSwgbnVsbCksCiAgKTsKCiAgY29uc3QgbWFrZVVSTCA9IHAgPT4gdSArICcvJyArIHA7CgogIHJldHVybiBkZWZpbmUoCiAgICBzdW1tYXJpZXMsCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgZ2V0VVJMKG5hbWUpIHsKICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZSArICcoXChcKXwpKFxzLip8KScgKyAnJCcpOwoKICAgICAgICBmb3IobGV0IGtleSBvZiB0aGlzLmtleXMoKSkgewogICAgICAgICAgaWYoa2V5ID09IG5hbWUpCiAgICAgICAgICAgIHJldHVybiBbLi4udGhpc1trZXldXQogICAgICAgICAgICAgIC5tYXAoZW50cnkgPT4gKEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkpCiAgICAgICAgICAgICAgLm1hcChtYWtlVVJMKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5XSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiBtYWtlVVJMKGVudHJ5KTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiBtYWtlVVJMKHBhdGhuYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgeWllbGQga2V5c1tpZF07CiAgICAgIH0sCiAgICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICAgICAgKmVudHJpZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCBba2V5c1tpZF0sIHRoaXNba2V5c1tpZF1dXTsKICAgICAgfSwKICAgICAgKmdldE1lbWJlcnMoKSB7CiAgICAgICAgZm9yKGxldCBba2V5LHZhbHVlXSBvZiB0aGlzLmVudHJpZXMoKSkgaWYodHlwZXMuaXNNYXAodmFsdWUpKSB5aWVsZCogdmFsdWUuZW50cmllcygpOwogICAgICB9LAogICAgfSksCiAgKTsKfQoAAAAAAAAAAOIIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlggAAAAAAACWCAAAAAAAAAAAAAAAgHVA"
				],
				[
					2207,
					1,
					"insert",
					{
						"characters": "pred"
					},
					"BAAAAGcIAAAAAAAAaAgAAAAAAAAAAAAAaAgAAAAAAABpCAAAAAAAAAAAAABpCAAAAAAAAGoIAAAAAAAAAAAAAGoIAAAAAAAAawgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZwgAAAAAAABnCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2208,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAGsIAAAAAAAAbAgAAAAAAAAAAAAAbAgAAAAAAABtCAAAAAAAAAAAAABtCAAAAAAAAG4IAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAawgAAAAAAABrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2209,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG4IAAAAAAAAbwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbggAAAAAAABuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2210,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG8IAAAAAAAAcQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwgAAAAAAABvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2212,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAHEIAAAAAAAAcggAAAAAAAAAAAAAcggAAAAAAABzCAAAAAAAAAAAAABzCAAAAAAAAHQIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcQgAAAAAAABxCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2213,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAHQIAAAAAAAAdQgAAAAAAAAAAAAAdQgAAAAAAAB2CAAAAAAAAAAAAAB2CAAAAAAAAHcIAAAAAAAAAAAAAHcIAAAAAAAAeAgAAAAAAAAAAAAAeAgAAAAAAAB5CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdAgAAAAAAAB0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					2215,
					1,
					"insert",
					{
						"characters": "\nuf"
					},
					"BQAAAHwIAAAAAAAAfQgAAAAAAAAAAAAAfQgAAAAAAACDCAAAAAAAAAAAAACDCAAAAAAAAIUIAAAAAAAAAAAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfAgAAAAAAAB8CAAAAAAAAP///////+9/"
				],
				[
					2216,
					2,
					"left_delete",
					null,
					"AgAAAIYIAAAAAAAAhggAAAAAAAABAAAAZoUIAAAAAAAAhQgAAAAAAAABAAAAdQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhwgAAAAAAACHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2217,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2218,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIcIAAAAAAAAiQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhwgAAAAAAACHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2219,
					1,
					"insert",
					{
						"characters": "Array.isArray"
					},
					"DQAAAIgIAAAAAAAAiQgAAAAAAAAAAAAAiQgAAAAAAACKCAAAAAAAAAAAAACKCAAAAAAAAIsIAAAAAAAAAAAAAIsIAAAAAAAAjAgAAAAAAAAAAAAAjAgAAAAAAACNCAAAAAAAAAAAAACNCAAAAAAAAI4IAAAAAAAAAAAAAI4IAAAAAAAAjwgAAAAAAAAAAAAAjwgAAAAAAACQCAAAAAAAAAAAAACQCAAAAAAAAJEIAAAAAAAAAAAAAJEIAAAAAAAAkggAAAAAAAAAAAAAkggAAAAAAACTCAAAAAAAAAAAAACTCAAAAAAAAJQIAAAAAAAAAAAAAJQIAAAAAAAAlQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiAgAAAAAAACICAAAAAAAAAAAAAAAAPC/"
				],
				[
					2220,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJUIAAAAAAAAlwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQgAAAAAAACVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2221,
					1,
					"insert",
					{
						"characters": "pred"
					},
					"BAAAAJYIAAAAAAAAlwgAAAAAAAAAAAAAlwgAAAAAAACYCAAAAAAAAAAAAACYCAAAAAAAAJkIAAAAAAAAAAAAAJkIAAAAAAAAmggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlggAAAAAAACWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2223,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwIAAAAAAAAnQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAgAAAAAAACcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2224,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJ0IAAAAAAAAnwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQgAAAAAAACdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2225,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJ4IAAAAAAAAnwgAAAAAAAAAAAAAnwgAAAAAAACnCAAAAAAAAAAAAACnCAAAAAAAAKgIAAAAAAAAAAAAAKgIAAAAAAAAsAgAAAAAAAAAAAAAnwgAAAAAAACfCAAAAAAAAAgAAAAgICAgICAgIJ8IAAAAAAAAqQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2226,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKkIAAAAAAAAqggAAAAAAAAAAAAAqggAAAAAAACrCAAAAAAAAAAAAACrCAAAAAAAAKwIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQgAAAAAAACpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2227,
					1,
					"insert",
					{
						"characters": " adr"
					},
					"BAAAAKwIAAAAAAAArQgAAAAAAAAAAAAArQgAAAAAAACuCAAAAAAAAAAAAACuCAAAAAAAAK8IAAAAAAAAAAAAAK8IAAAAAAAAsAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArAgAAAAAAACsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2228,
					2,
					"left_delete",
					null,
					"AgAAAK8IAAAAAAAArwgAAAAAAAABAAAAcq4IAAAAAAAArggAAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAgAAAAAAACwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2229,
					1,
					"insert",
					{
						"characters": "rr=pred;"
					},
					"CAAAAK4IAAAAAAAArwgAAAAAAAAAAAAArwgAAAAAAACwCAAAAAAAAAAAAACwCAAAAAAAALEIAAAAAAAAAAAAALEIAAAAAAAAsggAAAAAAAAAAAAAsggAAAAAAACzCAAAAAAAAAAAAACzCAAAAAAAALQIAAAAAAAAAAAAALQIAAAAAAAAtQgAAAAAAAAAAAAAtQgAAAAAAAC2CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArggAAAAAAACuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2230,
					1,
					"insert",
					{
						"characters": "\npred="
					},
					"BwAAALYIAAAAAAAAtwgAAAAAAAAAAAAAtwgAAAAAAADBCAAAAAAAAAAAAADBCAAAAAAAAMIIAAAAAAAAAAAAAMIIAAAAAAAAwwgAAAAAAAAAAAAAwwgAAAAAAADECAAAAAAAAAAAAADECAAAAAAAAMUIAAAAAAAAAAAAAMUIAAAAAAAAxggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtggAAAAAAAC2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					2231,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMYIAAAAAAAAxwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxggAAAAAAADGCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2232,
					1,
					"left_delete",
					null,
					"AQAAAMYIAAAAAAAAxggAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwgAAAAAAADHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2233,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMYIAAAAAAAAyAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxggAAAAAAADGCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2234,
					1,
					"insert",
					{
						"characters": "key,value"
					},
					"CQAAAMcIAAAAAAAAyAgAAAAAAAAAAAAAyAgAAAAAAADJCAAAAAAAAAAAAADJCAAAAAAAAMoIAAAAAAAAAAAAAMoIAAAAAAAAywgAAAAAAAAAAAAAywgAAAAAAADMCAAAAAAAAAAAAADMCAAAAAAAAM0IAAAAAAAAAAAAAM0IAAAAAAAAzggAAAAAAAAAAAAAzggAAAAAAADPCAAAAAAAAAAAAADPCAAAAAAAANAIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwgAAAAAAADHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2236,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAANEIAAAAAAAA0ggAAAAAAAAAAAAA0ggAAAAAAADTCAAAAAAAAAAAAADTCAAAAAAAANQIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0QgAAAAAAADRCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2237,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANQIAAAAAAAA1QgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AgAAAAAAADUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2244,
					1,
					"insert",
					{
						"characters": "arr.indexOf"
					},
					"CwAAANUIAAAAAAAA1ggAAAAAAAAAAAAA1ggAAAAAAADXCAAAAAAAAAAAAADXCAAAAAAAANgIAAAAAAAAAAAAANgIAAAAAAAA2QgAAAAAAAAAAAAA2QgAAAAAAADaCAAAAAAAAAAAAADaCAAAAAAAANsIAAAAAAAAAAAAANsIAAAAAAAA3AgAAAAAAAAAAAAA3AgAAAAAAADdCAAAAAAAAAAAAADdCAAAAAAAAN4IAAAAAAAAAAAAAN4IAAAAAAAA3wgAAAAAAAAAAAAA3wgAAAAAAADgCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QgAAAAAAADVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2245,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOAIAAAAAAAA4ggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AgAAAAAAADgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2246,
					1,
					"insert",
					{
						"characters": "key"
					},
					"AwAAAOEIAAAAAAAA4ggAAAAAAAAAAAAA4ggAAAAAAADjCAAAAAAAAAAAAADjCAAAAAAAAOQIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QgAAAAAAADhCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2248,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAOUIAAAAAAAA5ggAAAAAAAAAAAAA5ggAAAAAAADnCAAAAAAAAAAAAADnCAAAAAAAAOgIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QgAAAAAAADlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2249,
					1,
					"insert",
					{
						"characters": " -1)"
					},
					"BAAAAOgIAAAAAAAA6QgAAAAAAAAAAAAA6QgAAAAAAADqCAAAAAAAAAAAAADqCAAAAAAAAOsIAAAAAAAAAAAAAOsIAAAAAAAA7AgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AgAAAAAAADoCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2250,
					1,
					"left_delete",
					null,
					"AQAAAOsIAAAAAAAA6wgAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7AgAAAAAAADsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2251,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOsIAAAAAAAA7AgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6wgAAAAAAADrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2256,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAD0JAAAAAAAAPgkAAAAAAAAAAAAAPgkAAAAAAAA/CQAAAAAAAAAAAAA/CQAAAAAAAEAJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQkAAAAAAAA9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2257,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEAJAAAAAAAAQgkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAkAAAAAAABACQAAAAAAAAAAAAAAAPC/"
				],
				[
					2258,
					1,
					"insert",
					{
						"characters": "pred"
					},
					"BAAAAEEJAAAAAAAAQgkAAAAAAAAAAAAAQgkAAAAAAABDCQAAAAAAAAAAAABDCQAAAAAAAEQJAAAAAAAAAAAAAEQJAAAAAAAARQkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQkAAAAAAABBCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2259,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEUJAAAAAAAARwkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQkAAAAAAABFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2260,
					1,
					"insert",
					{
						"characters": "key,value"
					},
					"CQAAAEYJAAAAAAAARwkAAAAAAAAAAAAARwkAAAAAAABICQAAAAAAAAAAAABICQAAAAAAAEkJAAAAAAAAAAAAAEkJAAAAAAAASgkAAAAAAAAAAAAASgkAAAAAAABLCQAAAAAAAAAAAABLCQAAAAAAAEwJAAAAAAAAAAAAAEwJAAAAAAAATQkAAAAAAAAAAAAATQkAAAAAAABOCQAAAAAAAAAAAABOCQAAAAAAAE8JAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgkAAAAAAABGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2277,
					1,
					"left_delete",
					null,
					"AQAAAG0IAAAAAAAAbQgAAAAAAAABAAAAPg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbggAAAAAAABuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2279,
					1,
					"insert",
					{
						"characters": "key,value"
					},
					"CQAAAG8IAAAAAAAAcAgAAAAAAAAAAAAAcAgAAAAAAABxCAAAAAAAAAAAAABxCAAAAAAAAHIIAAAAAAAAAAAAAHIIAAAAAAAAcwgAAAAAAAAAAAAAcwgAAAAAAAB0CAAAAAAAAAAAAAB0CAAAAAAAAHUIAAAAAAAAAAAAAHUIAAAAAAAAdggAAAAAAAAAAAAAdggAAAAAAAB3CAAAAAAAAAAAAAB3CAAAAAAAAHgIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwgAAAAAAABvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2280,
					8,
					"left_delete",
					null,
					"CAAAAHcIAAAAAAAAdwgAAAAAAAABAAAAZXYIAAAAAAAAdggAAAAAAAABAAAAdXUIAAAAAAAAdQgAAAAAAAABAAAAbHQIAAAAAAAAdAgAAAAAAAABAAAAYXMIAAAAAAAAcwgAAAAAAAABAAAAdnIIAAAAAAAAcggAAAAAAAABAAAALHEIAAAAAAAAcQgAAAAAAAABAAAAeXAIAAAAAAAAcAgAAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeAgAAAAAAAB4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					2281,
					1,
					"insert",
					{
						"characters": ",v"
					},
					"AgAAAHAIAAAAAAAAcQgAAAAAAAAAAAAAcQgAAAAAAAByCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcAgAAAAAAABwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2286,
					1,
					"insert",
					{
						"characters": "\ngetName"
					},
					"CwAAAHQJAAAAAAAAdQkAAAAAAAAAAAAAdQkAAAAAAAB7CQAAAAAAAAAAAAB1CQAAAAAAAHUJAAAAAAAABgAAACAgICAgIHUJAAAAAAAAeQkAAAAAAAAAAAAAeQkAAAAAAAB6CQAAAAAAAAAAAAB6CQAAAAAAAHsJAAAAAAAAAAAAAHsJAAAAAAAAfAkAAAAAAAAAAAAAfAkAAAAAAAB9CQAAAAAAAAAAAAB9CQAAAAAAAH4JAAAAAAAAAAAAAH4JAAAAAAAAfwkAAAAAAAAAAAAAfwkAAAAAAACACQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdAkAAAAAAAB0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2287,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIAJAAAAAAAAggkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAkAAAAAAACACQAAAAAAAAAAAAAAAPC/"
				],
				[
					2289,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIJAAAAAAAAgwkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggkAAAAAAACCCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2290,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIMJAAAAAAAAhQkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgwkAAAAAAACDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2291,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAIQJAAAAAAAAhQkAAAAAAAAAAAAAhQkAAAAAAACJCQAAAAAAAAAAAACJCQAAAAAAAIoJAAAAAAAAAAAAAIoJAAAAAAAAjgkAAAAAAAAAAAAAhQkAAAAAAACFCQAAAAAAAAQAAAAgICAghQkAAAAAAACLCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhAkAAAAAAACECQAAAAAAAAAAAAAAAPC/"
				],
				[
					2292,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAIsJAAAAAAAAjAkAAAAAAAAAAAAAjAkAAAAAAACNCQAAAAAAAAAAAACNCQAAAAAAAI4JAAAAAAAAAAAAAI4JAAAAAAAAjwkAAAAAAAAAAAAAjwkAAAAAAACQCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwkAAAAAAACLCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2293,
					1,
					"insert",
					{
						"characters": " it"
					},
					"AwAAAJAJAAAAAAAAkQkAAAAAAAAAAAAAkQkAAAAAAACSCQAAAAAAAAAAAACSCQAAAAAAAJMJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkAkAAAAAAACQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2294,
					2,
					"left_delete",
					null,
					"AgAAAJIJAAAAAAAAkgkAAAAAAAABAAAAdJEJAAAAAAAAkQkAAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkwkAAAAAAACTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2295,
					1,
					"insert",
					{
						"characters": "gen=this.getMembe"
					},
					"EQAAAJEJAAAAAAAAkgkAAAAAAAAAAAAAkgkAAAAAAACTCQAAAAAAAAAAAACTCQAAAAAAAJQJAAAAAAAAAAAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAACWCQAAAAAAAJcJAAAAAAAAAAAAAJcJAAAAAAAAmAkAAAAAAAAAAAAAmAkAAAAAAACZCQAAAAAAAAAAAACZCQAAAAAAAJoJAAAAAAAAAAAAAJoJAAAAAAAAmwkAAAAAAAAAAAAAmwkAAAAAAACcCQAAAAAAAAAAAACcCQAAAAAAAJ0JAAAAAAAAAAAAAJ0JAAAAAAAAngkAAAAAAAAAAAAAngkAAAAAAACfCQAAAAAAAAAAAACfCQAAAAAAAKAJAAAAAAAAAAAAAKAJAAAAAAAAoQkAAAAAAAAAAAAAoQkAAAAAAACiCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkQkAAAAAAACRCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2296,
					1,
					"insert",
					{
						"characters": "rs"
					},
					"AgAAAKIJAAAAAAAAowkAAAAAAAAAAAAAowkAAAAAAACkCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2297,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKQJAAAAAAAApgkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAkAAAAAAACkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2298,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKUJAAAAAAAApwkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQkAAAAAAAClCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2299,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAKYJAAAAAAAAqAkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgkAAAAAAACmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2300,
					1,
					"insert",
					{
						"characters": "constructor"
					},
					"CwAAAKcJAAAAAAAAqAkAAAAAAAAAAAAAqAkAAAAAAACpCQAAAAAAAAAAAACpCQAAAAAAAKoJAAAAAAAAAAAAAKoJAAAAAAAAqwkAAAAAAAAAAAAAqwkAAAAAAACsCQAAAAAAAAAAAACsCQAAAAAAAK0JAAAAAAAAAAAAAK0JAAAAAAAArgkAAAAAAAAAAAAArgkAAAAAAACvCQAAAAAAAAAAAACvCQAAAAAAALAJAAAAAAAAAAAAALAJAAAAAAAAsQkAAAAAAAAAAAAAsQkAAAAAAACyCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwkAAAAAAACnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2302,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALUJAAAAAAAAtgkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQkAAAAAAAC1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2305,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALYJAAAAAAAAtwkAAAAAAAAAAAAAtwkAAAAAAAC9CQAAAAAAAAAAAAC9CQAAAAAAAL4JAAAAAAAAAAAAAL4JAAAAAAAAxAkAAAAAAAAAAAAAtwkAAAAAAAC3CQAAAAAAAAYAAAAgICAgICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgkAAAAAAAC2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2308,
					1,
					"insert",
					{
						"characters": "gen.next"
					},
					"CAAAAL4JAAAAAAAAvwkAAAAAAAAAAAAAvwkAAAAAAADACQAAAAAAAAAAAADACQAAAAAAAMEJAAAAAAAAAAAAAMEJAAAAAAAAwgkAAAAAAAAAAAAAwgkAAAAAAADDCQAAAAAAAAAAAADDCQAAAAAAAMQJAAAAAAAAAAAAAMQJAAAAAAAAxQkAAAAAAAAAAAAAxQkAAAAAAADGCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgkAAAAAAAC+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2309,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMYJAAAAAAAAyAkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxgkAAAAAAADGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2312,
					1,
					"insert",
					{
						"characters": "const{value}="
					},
					"DQAAAL4JAAAAAAAAvwkAAAAAAAAAAAAAvwkAAAAAAADACQAAAAAAAAAAAADACQAAAAAAAMEJAAAAAAAAAAAAAMEJAAAAAAAAwgkAAAAAAAAAAAAAwgkAAAAAAADDCQAAAAAAAAAAAADDCQAAAAAAAMQJAAAAAAAAAAAAAMQJAAAAAAAAxQkAAAAAAAAAAAAAxQkAAAAAAADGCQAAAAAAAAAAAADGCQAAAAAAAMcJAAAAAAAAAAAAAMcJAAAAAAAAyAkAAAAAAAAAAAAAyAkAAAAAAADJCQAAAAAAAAAAAADJCQAAAAAAAMoJAAAAAAAAAAAAAMoJAAAAAAAAywkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgkAAAAAAAC+CQAAAAAAAAAAAAAAAEhA"
				],
				[
					2314,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANUJAAAAAAAA1gkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QkAAAAAAADVCQAAAAAAAP///////+9/"
				],
				[
					2316,
					1,
					"left_delete",
					null,
					"AQAAALYJAAAAAAAAtgkAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtwkAAAAAAAC3CQAAAAAAAAAAAAAAAG5A"
				],
				[
					2320,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANUJAAAAAAAA1gkAAAAAAAAAAAAA1gkAAAAAAADcCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QkAAAAAAADVCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2323,
					1,
					"insert",
					{
						"characters": "\nrert"
					},
					"BwAAANwJAAAAAAAA3QkAAAAAAAAAAAAA3QkAAAAAAADjCQAAAAAAAAAAAADWCQAAAAAAANYJAAAAAAAABgAAACAgICAgIN0JAAAAAAAA3gkAAAAAAAAAAAAA3gkAAAAAAADfCQAAAAAAAAAAAADfCQAAAAAAAOAJAAAAAAAAAAAAAOAJAAAAAAAA4QkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AkAAAAAAADcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2324,
					2,
					"left_delete",
					null,
					"AgAAAOAJAAAAAAAA4AkAAAAAAAABAAAAdN8JAAAAAAAA3wkAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QkAAAAAAADhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2325,
					1,
					"insert",
					{
						"characters": "turn"
					},
					"BAAAAN8JAAAAAAAA4AkAAAAAAAAAAAAA4AkAAAAAAADhCQAAAAAAAAAAAADhCQAAAAAAAOIJAAAAAAAAAAAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wkAAAAAAADfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2326,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMJAAAAAAAA5AkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4wkAAAAAAADjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2327,
					1,
					"insert",
					{
						"characters": "value.replace"
					},
					"DQAAAOQJAAAAAAAA5QkAAAAAAAAAAAAA5QkAAAAAAADmCQAAAAAAAAAAAADmCQAAAAAAAOcJAAAAAAAAAAAAAOcJAAAAAAAA6AkAAAAAAAAAAAAA6AkAAAAAAADpCQAAAAAAAAAAAADpCQAAAAAAAOoJAAAAAAAAAAAAAOoJAAAAAAAA6wkAAAAAAAAAAAAA6wkAAAAAAADsCQAAAAAAAAAAAADsCQAAAAAAAO0JAAAAAAAAAAAAAO0JAAAAAAAA7gkAAAAAAAAAAAAA7gkAAAAAAADvCQAAAAAAAAAAAADvCQAAAAAAAPAJAAAAAAAAAAAAAPAJAAAAAAAA8QkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5AkAAAAAAADkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2328,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPEJAAAAAAAA8wkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8QkAAAAAAADxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2330,
					1,
					"left_delete",
					null,
					"AQAAAPIJAAAAAAAA8gkAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8wkAAAAAAADzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2331,
					1,
					"insert",
					{
						"characters": "/\\/"
					},
					"AwAAAPIJAAAAAAAA8wkAAAAAAAAAAAAA8wkAAAAAAAD0CQAAAAAAAAAAAAD0CQAAAAAAAPUJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gkAAAAAAADyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2332,
					1,
					"left_delete",
					null,
					"AQAAAPQJAAAAAAAA9AkAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9QkAAAAAAAD1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2333,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPQJAAAAAAAA9gkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9AkAAAAAAAD0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2334,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAPUJAAAAAAAA9gkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9QkAAAAAAAD1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2336,
					1,
					"insert",
					{
						"characters": "$/."
					},
					"AwAAAPcJAAAAAAAA+AkAAAAAAAAAAAAA+AkAAAAAAAD5CQAAAAAAAAAAAAD5CQAAAAAAAPoJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9wkAAAAAAAD3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2337,
					1,
					"left_delete",
					null,
					"AQAAAPkJAAAAAAAA+QkAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gkAAAAAAAD6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2338,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPkJAAAAAAAA+gkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QkAAAAAAAD5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2339,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gkAAAAAAAD6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2340,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPsJAAAAAAAA/QkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+wkAAAAAAAD7CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2342,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QkAAAAAAAD9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2343,
					1,
					"left_delete",
					null,
					"AQAAAP0JAAAAAAAA/QkAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gkAAAAAAAD+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2344,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA/gkAAAAAAAD/CQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QkAAAAAAAD9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2357,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAANYJAAAAAAAA1wkAAAAAAAAAAAAA1wkAAAAAAADYCQAAAAAAAAAAAADYCQAAAAAAANkJAAAAAAAAAAAAANkJAAAAAAAA2gkAAAAAAAAAAAAA2gkAAAAAAADbCQAAAAAAAAAAAADbCQAAAAAAANwJAAAAAAAAAAAAANwJAAAAAAAA3QkAAAAAAAAAAAAA3QkAAAAAAADeCQAAAAAAAAAAAADeCQAAAAAAAN8JAAAAAAAAAAAAAN8JAAAAAAAA4AkAAAAAAAAAAAAA4AkAAAAAAADhCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1gkAAAAAAADWCQAAAAAAAAAAAAAAADBA"
				],
				[
					2358,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOEJAAAAAAAA4wkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QkAAAAAAADhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2361,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMIJAAAAAAAAwwkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgkAAAAAAADCCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2364,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"BAAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADECQAAAAAAAAcAAAB7dmFsdWV9xAkAAAAAAADFCQAAAAAAAAAAAADFCQAAAAAAAMYJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwkAAAAAAADKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2370,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAN8JAAAAAAAA4AkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wkAAAAAAADfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2371,
					1,
					"left_delete",
					null,
					"AQAAAN8JAAAAAAAA3wkAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AkAAAAAAADgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2372,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAN8JAAAAAAAA4QkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wkAAAAAAADfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2373,
					1,
					"insert",
					{
						"characters": "getName"
					},
					"BwAAAOAJAAAAAAAA4QkAAAAAAAAAAAAA4QkAAAAAAADiCQAAAAAAAAAAAADiCQAAAAAAAOMJAAAAAAAAAAAAAOMJAAAAAAAA5AkAAAAAAAAAAAAA5AkAAAAAAADlCQAAAAAAAAAAAADlCQAAAAAAAOYJAAAAAAAAAAAAAOYJAAAAAAAA5wkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AkAAAAAAADgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2375,
					1,
					"insert",
					{
						"characters": ",ret"
					},
					"BAAAAOgJAAAAAAAA6QkAAAAAAAAAAAAA6QkAAAAAAADqCQAAAAAAAAAAAADqCQAAAAAAAOsJAAAAAAAAAAAAAOsJAAAAAAAA7AkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AkAAAAAAADoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2377,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAO0JAAAAAAAA7gkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7QkAAAAAAADtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2382,
					1,
					"insert",
					{
						"characters": "\nco"
					},
					"AwAAAO4JAAAAAAAA7wkAAAAAAAAAAAAA7wkAAAAAAADwCQAAAAAAAAAAAADwCQAAAAAAAPEJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7gkAAAAAAADuCQAAAAAAAAAAAAAAAGtA"
				],
				[
					2383,
					2,
					"left_delete",
					null,
					"AgAAAPAJAAAAAAAA8AkAAAAAAAABAAAAb+8JAAAAAAAA7wkAAAAAAAABAAAAYw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8QkAAAAAAADxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2384,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAO8JAAAAAAAA8AkAAAAAAAAAAAAA8AkAAAAAAADxCQAAAAAAAAAAAADxCQAAAAAAAPIJAAAAAAAAAAAAAPIJAAAAAAAA8wkAAAAAAAAAAAAA8wkAAAAAAAD0CQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7wkAAAAAAADvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2385,
					1,
					"insert",
					{
						"characters": " value=ret.value;"
					},
					"EQAAAPQJAAAAAAAA9QkAAAAAAAAAAAAA9QkAAAAAAAD2CQAAAAAAAAAAAAD2CQAAAAAAAPcJAAAAAAAAAAAAAPcJAAAAAAAA+AkAAAAAAAAAAAAA+AkAAAAAAAD5CQAAAAAAAAAAAAD5CQAAAAAAAPoJAAAAAAAAAAAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA+wkAAAAAAAD8CQAAAAAAAAAAAAD8CQAAAAAAAP0JAAAAAAAAAAAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA/gkAAAAAAAD/CQAAAAAAAAAAAAD/CQAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAQoAAAAAAAAAAAAAAQoAAAAAAAACCgAAAAAAAAAAAAACCgAAAAAAAAMKAAAAAAAAAAAAAAMKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAFCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9AkAAAAAAAD0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2392,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AgAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADECQAAAAAAAAMAAAByZXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwkAAAAAAADGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2393,
					1,
					"left_delete",
					null,
					"AQAAAMMJAAAAAAAAwwkAAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAkAAAAAAADECQAAAAAAAAAAAAAAAPC/"
				],
				[
					2394,
					1,
					"insert",
					{
						"characters": "{value}"
					},
					"BwAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADFCQAAAAAAAAAAAADFCQAAAAAAAMYJAAAAAAAAAAAAAMYJAAAAAAAAxwkAAAAAAAAAAAAAxwkAAAAAAADICQAAAAAAAAAAAADICQAAAAAAAMkJAAAAAAAAAAAAAMkJAAAAAAAAygkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwkAAAAAAADDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2399,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAMMJAAAAAAAAxAkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwkAAAAAAADDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2400,
					1,
					"insert",
					{
						"characters": "value]"
					},
					"BgAAAMQJAAAAAAAAxQkAAAAAAAAAAAAAxQkAAAAAAADGCQAAAAAAAAAAAADGCQAAAAAAAMcJAAAAAAAAAAAAAMcJAAAAAAAAyAkAAAAAAAAAAAAAyAkAAAAAAADJCQAAAAAAAAAAAADJCQAAAAAAAMoJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAkAAAAAAADECQAAAAAAAAAAAAAAAPC/"
				],
				[
					2401,
					7,
					"right_delete",
					null,
					"BwAAAMoJAAAAAAAAygkAAAAAAAABAAAAe8oJAAAAAAAAygkAAAAAAAABAAAAdsoJAAAAAAAAygkAAAAAAAABAAAAYcoJAAAAAAAAygkAAAAAAAABAAAAbMoJAAAAAAAAygkAAAAAAAABAAAAdcoJAAAAAAAAygkAAAAAAAABAAAAZcoJAAAAAAAAygkAAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAygkAAAAAAADKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2404,
					1,
					"insert",
					{
						"characters": ".valuze"
					},
					"BwAAANUJAAAAAAAA1gkAAAAAAAAAAAAA1gkAAAAAAADXCQAAAAAAAAAAAADXCQAAAAAAANgJAAAAAAAAAAAAANgJAAAAAAAA2QkAAAAAAAAAAAAA2QkAAAAAAADaCQAAAAAAAAAAAADaCQAAAAAAANsJAAAAAAAAAAAAANsJAAAAAAAA3AkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QkAAAAAAADVCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2405,
					2,
					"left_delete",
					null,
					"AgAAANsJAAAAAAAA2wkAAAAAAAABAAAAZdoJAAAAAAAA2gkAAAAAAAABAAAAeg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AkAAAAAAADcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2406,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAANoJAAAAAAAA2wkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gkAAAAAAADaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2409,
					1,
					"cut",
					null,
					"AQAAAN0JAAAAAAAA3QkAAAAAAAAzAAAAY29uc29sZS5sb2coJ2dldE5hbWUnLHJldCk7CmNvbnN0IHZhbHVlPXJldC52YWx1ZTsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QkAAAAAAAAQCgAAAAAAAAAAAAAAAAAA"
				],
				[
					2440,
					1,
					"paste",
					null,
					"AgAAAOoJAAAAAAAA+gkAAAAAAAAAAAAA+gkAAAAAAAD6CQAAAAAAAAUAAAB2YWx1ZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gkAAAAAAADvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2441,
					1,
					"insert",
					{
						"characters": "[0]"
					},
					"AwAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA+wkAAAAAAAD8CQAAAAAAAAAAAAD8CQAAAAAAAP0JAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gkAAAAAAAD6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2447,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAPQJAAAAAAAA9QkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9AkAAAAAAAD0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2450,
					1,
					"insert",
					{
						"characters": "?."
					},
					"AgAAAPsJAAAAAAAA/AkAAAAAAAAAAAAA/AkAAAAAAAD9CQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+wkAAAAAAAD7CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2453,
					1,
					"insert",
					{
						"characters": "?="
					},
					"AgAAAAAKAAAAAAAAAQoAAAAAAAAAAAAAAQoAAAAAAAACCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAPC/"
				],
				[
					2454,
					1,
					"left_delete",
					null,
					"AQAAAAEKAAAAAAAAAQoAAAAAAAABAAAAPQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAgoAAAAAAAACCgAAAAAAAAAAAAAAAPC/"
				],
				[
					2464,
					1,
					"right_delete",
					null,
					"AQAAAL0JAAAAAAAAvQkAAAAAAAAmAAAAY29uc3QgW3ZhbHVlXT1nZW4ubmV4dCgpLnZhbHVlOwogICAgICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQkAAAAAAADjCQAAAAAAAAAAAAAAAEhA"
				],
				[
					2471,
					1,
					"cut",
					null,
					"AQAAAJUJAAAAAAAAlQkAAAAAAAAgAAAAdGhpcy5nZXRNZW1iZXJzKFsnY29uc3RydWN0b3InXSk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQkAAAAAAAC1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2476,
					1,
					"paste",
					null,
					"AgAAAKQJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADECQAAAAAAAAMAAABnZW4",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAkAAAAAAACnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2485,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACGCQAAAAAAABIAAAAgICAgICBjb25zdCBnZW49Owo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQkAAAAAAACXCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2490,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADzCQAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyB0eXBlcywgZGVmaW5lLCBwcm9wZXJ0aWVzLCBub25lbnVtZXJhYmxlIH0gZnJvbSAndXRpbCc7CgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hDbGFzcyh1cmwpIHsKICBjb25zdCB1ID0gbmV3IFVSTCh1cmwucmVwbGFjZSgvXC9bXlwvXSokLywgJycpKTsKICBjb25zdCBiYXNlID0gdS5wYXRobmFtZTsKICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgYmFzZSArICcvJyk7CiAgY29uc3QgZG9jID0gbmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh1cmxHZXQodXJsKSk7CgogIGNvbnN0IGtleXMgPSB7CiAgICBDb25zdHJ1Y3RvcjogJ2NvbnN0cnVjdG9yJywKICAgICdJbnN0YW5jZSBwcm9wZXJ0aWVzJzogJ3Byb3BlcnRpZXMnLAogICAgJ0luc3RhbmNlIG1ldGhvZHMnOiAnbWV0aG9kcycsCiAgICBFdmVudHM6ICdldmVudHMnLAogICAgSW5oZXJpdGFuY2U6ICdiYXNlcycsCiAgICAnUmVsYXRlZCBwYWdlcyBmb3IgV2ViIEF1ZGlvIEFQSSc6ICdyZWxhdGVkJywKICB9OwoKICBjb25zdCBzdW1tYXJ5RWxlbWVudHMgPSBbLi4uZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N1bW1hcnknKV0uZmlsdGVyKGUgPT4gZS5pbm5lclRleHQgaW4ga2V5cyk7CgogIGNvbnN0IHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4gewogICAgaWYobGlzdC5ldmVyeSgoW2EsIGJdKSA9PiBhLnJlcGxhY2UoL1xzRXhwZXJpbWVudGFsJC8sICcnKSA9PSBiKSkgcmV0dXJuIGxpc3QubWFwKChbYV0pID0+IGEpOwoKICAgIHJldHVybiBuZXcgTWFwKGxpc3QpOwogIH07CgogIGNvbnN0IHN1bW1hcnlMaXN0ID0gc3VtbWFyeSA9PgogICAgc2ltcGxpZnlMaXN0KAogICAgICBbLi4uc3VtbWFyeS5uZXh0U2libGluZy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXQogICAgICAgIC5tYXAoZSA9PiBbZS5pbm5lclRleHQsIGUucXVlcnlTZWxlY3RvcignYScpLmdldEF0dHJpYnV0ZSgnaHJlZicpLnJlcGxhY2UocmUsICcnKV0pCiAgICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiAhL1xzRGVwcmVjYXRlZCQvLnRlc3QobmFtZSkpLAogICAgKTsKCiAgY29uc3Qgc3VtbWFyaWVzID0gc3VtbWFyeUVsZW1lbnRzLnJlZHVjZSgKICAgIChhLCBlKSA9PiAoeyAuLi5hLCBba2V5c1tlLmlubmVyVGV4dF0gPz8gZS5pbm5lclRleHRdOiBzdW1tYXJ5TGlzdChlKSB9KSwKICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih7fSwgbnVsbCksCiAgKTsKCiAgY29uc3QgbWFrZVVSTCA9IHAgPT4gdSArICcvJyArIHA7CgogIHJldHVybiBkZWZpbmUoCiAgICBzdW1tYXJpZXMsCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgZ2V0VVJMKG5hbWUpIHsKICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZSArICcoXChcKXwpKFxzLip8KScgKyAnJCcpOwoKICAgICAgICBmb3IobGV0IGtleSBvZiB0aGlzLmtleXMoKSkgewogICAgICAgICAgaWYoa2V5ID09IG5hbWUpCiAgICAgICAgICAgIHJldHVybiBbLi4udGhpc1trZXldXQogICAgICAgICAgICAgIC5tYXAoZW50cnkgPT4gKEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkpCiAgICAgICAgICAgICAgLm1hcChtYWtlVVJMKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5XSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiBtYWtlVVJMKGVudHJ5KTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiBtYWtlVVJMKHBhdGhuYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgeWllbGQga2V5c1tpZF07CiAgICAgIH0sCiAgICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICAgICAgKmVudHJpZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCBba2V5c1tpZF0sIHRoaXNba2V5c1tpZF1dXTsKICAgICAgfSwKICAgICAgKmdldE1lbWJlcnMocHJlZCA9IChrLHYpID0+IHRydWUpIHsKICAgICAgICBpZihBcnJheS5pc0FycmF5KHByZWQpKSB7CiAgICAgICAgICBsZXQgYXJyPXByZWQ7CiAgICAgICAgICBwcmVkPShrZXksdmFsdWUpID0+IGFyci5pbmRleE9mKGtleSkgIT0gLTE7CiAgICAgICAgfQogICAgICAgIGZvcihsZXQgW2tleSwgdmFsdWVdIG9mIHRoaXMuZW50cmllcygpKSBpZih0eXBlcy5pc01hcCh2YWx1ZSkpIGlmKHByZWQoa2V5LHZhbHVlKSkgeWllbGQqIHZhbHVlLmVudHJpZXMoKTsKICAgICAgfSwKICAgIGdldE5hbWUoKSB7CiAgICAgICByZXR1cm4gdGhpcy5nZXRNZW1iZXJzKFsnY29uc3RydWN0b3InXSkubmV4dCgpPy52YWx1ZT8uWzBdPy5yZXBsYWNlKC9cKFwpJC8sICcnKTsKICAgIH0KICAgIH0pLAogICk7Cn0KAAAAAAAAAAALCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhgkAAAAAAACGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2497,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAAKwIAAAAAAAArQgAAAAAAAAAAAAArQgAAAAAAACtCAAAAAAAAAMAAABsZXStCAAAAAAAAK4IAAAAAAAAAAAAAK4IAAAAAAAArwgAAAAAAAAAAAAArwgAAAAAAACwCAAAAAAAAAAAAACwCAAAAAAAALEIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArAgAAAAAAACvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					2527,
					1,
					"insert",
					{
						"characters": "get"
					},
					"AwAAAIoJAAAAAAAAiwkAAAAAAAAAAAAAiwkAAAAAAACMCQAAAAAAAAAAAACMCQAAAAAAAI0JAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigkAAAAAAACKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2529,
					4,
					"right_delete",
					null,
					"BAAAAJIJAAAAAAAAkgkAAAAAAAABAAAAZ5IJAAAAAAAAkgkAAAAAAAABAAAAZZIJAAAAAAAAkgkAAAAAAAABAAAAdJIJAAAAAAAAkgkAAAAAAAABAAAATg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkgkAAAAAAACSCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2530,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAJIJAAAAAAAAkwkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkgkAAAAAAACSCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2541,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANCgAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyB0eXBlcywgZGVmaW5lLCBwcm9wZXJ0aWVzLCBub25lbnVtZXJhYmxlIH0gZnJvbSAndXRpbCc7CgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hDbGFzcyh1cmwpIHsKICBjb25zdCB1ID0gbmV3IFVSTCh1cmwucmVwbGFjZSgvXC9bXlwvXSokLywgJycpKTsKICBjb25zdCBiYXNlID0gdS5wYXRobmFtZTsKICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgYmFzZSArICcvJyk7CiAgY29uc3QgZG9jID0gbmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh1cmxHZXQodXJsKSk7CgogIGNvbnN0IGtleXMgPSB7CiAgICBDb25zdHJ1Y3RvcjogJ2NvbnN0cnVjdG9yJywKICAgICdJbnN0YW5jZSBwcm9wZXJ0aWVzJzogJ3Byb3BlcnRpZXMnLAogICAgJ0luc3RhbmNlIG1ldGhvZHMnOiAnbWV0aG9kcycsCiAgICBFdmVudHM6ICdldmVudHMnLAogICAgSW5oZXJpdGFuY2U6ICdiYXNlcycsCiAgICAnUmVsYXRlZCBwYWdlcyBmb3IgV2ViIEF1ZGlvIEFQSSc6ICdyZWxhdGVkJywKICB9OwoKICBjb25zdCBzdW1tYXJ5RWxlbWVudHMgPSBbLi4uZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N1bW1hcnknKV0uZmlsdGVyKGUgPT4gZS5pbm5lclRleHQgaW4ga2V5cyk7CgogIGNvbnN0IHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4gewogICAgaWYobGlzdC5ldmVyeSgoW2EsIGJdKSA9PiBhLnJlcGxhY2UoL1xzRXhwZXJpbWVudGFsJC8sICcnKSA9PSBiKSkgcmV0dXJuIGxpc3QubWFwKChbYV0pID0+IGEpOwoKICAgIHJldHVybiBuZXcgTWFwKGxpc3QpOwogIH07CgogIGNvbnN0IHN1bW1hcnlMaXN0ID0gc3VtbWFyeSA9PgogICAgc2ltcGxpZnlMaXN0KAogICAgICBbLi4uc3VtbWFyeS5uZXh0U2libGluZy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXQogICAgICAgIC5tYXAoZSA9PiBbZS5pbm5lclRleHQsIGUucXVlcnlTZWxlY3RvcignYScpLmdldEF0dHJpYnV0ZSgnaHJlZicpLnJlcGxhY2UocmUsICcnKV0pCiAgICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiAhL1xzRGVwcmVjYXRlZCQvLnRlc3QobmFtZSkpLAogICAgKTsKCiAgY29uc3Qgc3VtbWFyaWVzID0gc3VtbWFyeUVsZW1lbnRzLnJlZHVjZSgKICAgIChhLCBlKSA9PiAoeyAuLi5hLCBba2V5c1tlLmlubmVyVGV4dF0gPz8gZS5pbm5lclRleHRdOiBzdW1tYXJ5TGlzdChlKSB9KSwKICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih7fSwgbnVsbCksCiAgKTsKCiAgY29uc3QgbWFrZVVSTCA9IHAgPT4gdSArICcvJyArIHA7CgogIHJldHVybiBkZWZpbmUoCiAgICBzdW1tYXJpZXMsCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgZ2V0VVJMKG5hbWUpIHsKICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZSArICcoXChcKXwpKFxzLip8KScgKyAnJCcpOwoKICAgICAgICBmb3IobGV0IGtleSBvZiB0aGlzLmtleXMoKSkgewogICAgICAgICAgaWYoa2V5ID09IG5hbWUpCiAgICAgICAgICAgIHJldHVybiBbLi4udGhpc1trZXldXQogICAgICAgICAgICAgIC5tYXAoZW50cnkgPT4gKEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkpCiAgICAgICAgICAgICAgLm1hcChtYWtlVVJMKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5XSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiBtYWtlVVJMKGVudHJ5KTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiBtYWtlVVJMKHBhdGhuYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgeWllbGQga2V5c1tpZF07CiAgICAgIH0sCiAgICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICAgICAgKmVudHJpZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCBba2V5c1tpZF0sIHRoaXNba2V5c1tpZF1dXTsKICAgICAgfSwKICAgICAgKmdldE1lbWJlcnMocHJlZCA9IChrLCB2KSA9PiB0cnVlKSB7CiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShwcmVkKSkgewogICAgICAgICAgY29uc3QgYXJyID0gcHJlZDsKICAgICAgICAgIHByZWQgPSAoa2V5LCB2YWx1ZSkgPT4gYXJyLmluZGV4T2Yoa2V5KSAhPSAtMTsKICAgICAgICB9CiAgICAgICAgZm9yKGxldCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5lbnRyaWVzKCkpCiAgICAgICAgICBpZih0eXBlcy5pc01hcCh2YWx1ZSkpIGlmIChwcmVkKGtleSwgdmFsdWUpKSB5aWVsZCogdmFsdWUuZW50cmllcygpOwogICAgICB9LAogZ2V0ICAgICBuYW1lKCkgewogICAgICAgIHJldHVybiB0aGlzLmdldE1lbWJlcnMoWydjb25zdHJ1Y3RvciddKS5uZXh0KCk/LnZhbHVlPy5bMF0/LnJlcGxhY2UoL1woXCkkLywgJycpOwogICAgICB9LAogICAgfSksCiAgKTsKfQoAAAAAAAAAAA4KAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkwkAAAAAAACTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2552,
					1,
					"revert",
					null,
					"BQAAAAAAAAAAAAAAAAAAAAAAAAAOCgAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyB0eXBlcywgZGVmaW5lLCBwcm9wZXJ0aWVzLCBub25lbnVtZXJhYmxlIH0gZnJvbSAndXRpbCc7CgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hDbGFzcyh1cmwpIHsKICBjb25zdCB1ID0gbmV3IFVSTCh1cmwucmVwbGFjZSgvXC9bXlwvXSokLywgJycpKTsKICBjb25zdCBiYXNlID0gdS5wYXRobmFtZTsKICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgYmFzZSArICcvJyk7CiAgY29uc3QgZG9jID0gbmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh1cmxHZXQodXJsKSk7CgogIGNvbnN0IGtleXMgPSB7CiAgICBDb25zdHJ1Y3RvcjogJ2NvbnN0cnVjdG9yJywKICAgICdJbnN0YW5jZSBwcm9wZXJ0aWVzJzogJ3Byb3BlcnRpZXMnLAogICAgJ0luc3RhbmNlIG1ldGhvZHMnOiAnbWV0aG9kcycsCiAgICBFdmVudHM6ICdldmVudHMnLAogICAgSW5oZXJpdGFuY2U6ICdiYXNlcycsCiAgICAnUmVsYXRlZCBwYWdlcyBmb3IgV2ViIEF1ZGlvIEFQSSc6ICdyZWxhdGVkJywKICB9OwoKICBjb25zdCBzdW1tYXJ5RWxlbWVudHMgPSBbLi4uZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N1bW1hcnknKV0uZmlsdGVyKGUgPT4gZS5pbm5lclRleHQgaW4ga2V5cyk7CgogIGNvbnN0IHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4gewogICAgaWYobGlzdC5ldmVyeSgoW2EsIGJdKSA9PiBhLnJlcGxhY2UoL1xzRXhwZXJpbWVudGFsJC8sICcnKSA9PSBiKSkgcmV0dXJuIGxpc3QubWFwKChbYV0pID0+IGEpOwoKICAgIHJldHVybiBuZXcgTWFwKGxpc3QpOwogIH07CgogIGNvbnN0IHN1bW1hcnlMaXN0ID0gc3VtbWFyeSA9PgogICAgc2ltcGxpZnlMaXN0KAogICAgICBbLi4uc3VtbWFyeS5uZXh0U2libGluZy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXQogICAgICAgIC5tYXAoZSA9PiBbZS5pbm5lclRleHQsIGUucXVlcnlTZWxlY3RvcignYScpLmdldEF0dHJpYnV0ZSgnaHJlZicpLnJlcGxhY2UocmUsICcnKV0pCiAgICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiAhL1xzRGVwcmVjYXRlZCQvLnRlc3QobmFtZSkpLAogICAgKTsKCiAgY29uc3Qgc3VtbWFyaWVzID0gc3VtbWFyeUVsZW1lbnRzLnJlZHVjZSgKICAgIChhLCBlKSA9PiAoeyAuLi5hLCBba2V5c1tlLmlubmVyVGV4dF0gPz8gZS5pbm5lclRleHRdOiBzdW1tYXJ5TGlzdChlKSB9KSwKICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih7fSwgbnVsbCksCiAgKTsKCiAgY29uc3QgbWFrZVVSTCA9IHAgPT4gdSArICcvJyArIHA7CgogIHJldHVybiBkZWZpbmUoCiAgICBzdW1tYXJpZXMsCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgZ2V0VVJMKG5hbWUpIHsKICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZSArICcoXChcKXwpKFxzLip8KScgKyAnJCcpOwoKICAgICAgICBmb3IobGV0IGtleSBvZiB0aGlzLmtleXMoKSkgewogICAgICAgICAgaWYoa2V5ID09IG5hbWUpCiAgICAgICAgICAgIHJldHVybiBbLi4udGhpc1trZXldXQogICAgICAgICAgICAgIC5tYXAoZW50cnkgPT4gKEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkpCiAgICAgICAgICAgICAgLm1hcChtYWtlVVJMKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5XSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiBtYWtlVVJMKGVudHJ5KTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiBtYWtlVVJMKHBhdGhuYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgeWllbGQga2V5c1tpZF07CiAgICAgIH0sCiAgICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICAgICAgKmVudHJpZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCBba2V5c1tpZF0sIHRoaXNba2V5c1tpZF1dXTsKICAgICAgfSwKICAgICAgKmdldE1lbWJlcnMocHJlZCA9IChrLCB2KSA9PiB0cnVlKSB7CiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShwcmVkKSkgewogICAgICAgICAgY29uc3QgYXJyID0gcHJlZDsKICAgICAgICAgIHByZWQgPSAoa2V5LCB2YWx1ZSkgPT4gYXJyLmluZGV4T2Yoa2V5KSAhPSAtMTsKICAgICAgICB9CiAgICAgICAgZm9yKGxldCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5lbnRyaWVzKCkpCiAgICAgICAgICBpZih0eXBlcy5pc01hcCh2YWx1ZSkpIGlmIChwcmVkKGtleSwgdmFsdWUpKSB5aWVsZCogdmFsdWUuZW50cmllcygpOwogICAgICB9LAogICAgICBnZXQgbmFtZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5nZXRNZW1iZXJzKFsnY29uc3RydWN0b3InXSkubmV4dCgpPy52YWx1ZT8uWzBdPy5yZXBsYWNlKC9cKFwpJC8sICcnKTsKICAgICAgfSwKICAgIH0pLAogICk7Cn0KAAAAAAAAAACuCQAAAAAAAAAAAAAAAAAAAAAAAK4JAAAAAAAAAAAAAAAAAAAAAAAArgkAAAAAAAAAAAAAAAAAAAAAAACuCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgYAAAAAAAAeBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 70174,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAU2cAAAAAAABYZwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "ast-shell.js",
			"settings":
			{
				"buffer_size": 46678,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2808,
					1,
					"insert",
					{
						"characters": "scriptArgs"
					},
					"CgAAAMSWAAAAAAAAxZYAAAAAAAAAAAAAxZYAAAAAAADGlgAAAAAAAAAAAADGlgAAAAAAAMeWAAAAAAAAAAAAAMeWAAAAAAAAyJYAAAAAAAAAAAAAyJYAAAAAAADJlgAAAAAAAAAAAADJlgAAAAAAAMqWAAAAAAAAAAAAAMqWAAAAAAAAy5YAAAAAAAAAAAAAy5YAAAAAAADMlgAAAAAAAAAAAADMlgAAAAAAAM2WAAAAAAAAAAAAAM2WAAAAAAAAzpYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADElgAAAAAAAMSWAAAAAAAAAAAAAAAA8L8"
				],
				[
					2809,
					4,
					"right_delete",
					null,
					"BAAAAM6WAAAAAAAAzpYAAAAAAAABAAAAYc6WAAAAAAAAzpYAAAAAAAABAAAAcs6WAAAAAAAAzpYAAAAAAAABAAAAZ86WAAAAAAAAzpYAAAAAAAABAAAAcw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOlgAAAAAAAM6WAAAAAAAAAAAAAAAA8L8"
				],
				[
					2819,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADFsgAAaW1wb3J0IHsgRGVlcEZpbmQsIERlZXBTZWxlY3QsIERlZXBQYXRoT2YsIERlZXBHZXQsIEFzdER1bXAsIENvbXBsZXRlTG9jYXRpb24sIENvbXBsZXRlUmFuZ2UsIEVudW1EZWNsLCBGaW5kVHlwZSwgRnVuY3Rpb25EZWNsLCBHZXRGaWVsZHMsIEdldExvYywgR2V0UGFyYW1zLCBHZXRDbGFzcywgR2V0QmFzZXMsIEdldEJ5TmFtZSwgR2V0VHlwZSwgR2V0VHlwZU5vZGUsIEdldFR5cGVTdHIsIEhpZXIsIGlzTm9kZSwgTGlzdCwgTG9jYXRpb24sIE5vZGUsIE5vZGVOYW1lLCBOb2RlUHJpbnRlciwgTm9kZVR5cGUsIFBhdGhPZiwgUGF0aFJlbW92ZUxvYywgUHJpbnRBc3QsIFJhbmdlLCBSYXdMb2NhdGlvbiwgUmF3UmFuZ2UsIFJlY29yZERlY2wsIFNJWkVPRl9QT0lOVEVSLCBTb3VyY2VEZXBlbmRlbmNpZXMsIFNwYXduQ29tcGlsZXIsIFR5cGUsIFR5cGVkZWZEZWNsLCBUeXBlRmFjdG9yeSwgVmFyRGVjbCwgbmFtZU9ySWRQcmVkLCBOYW1lc3BhY2VPZiwgR2V0TmFtZXNwYWNlLCBQb2ludGVyVHlwZSwgUmVmZXJlbmNlVHlwZSwgRmllbGREZWNsLCBOYW1lRm9yLCB9IGZyb20gJy4vY2xhbmctYXN0LmpzJzsKaW1wb3J0IHsgRGlySXRlcmF0b3IsIFJlY3Vyc2l2ZURpckl0ZXJhdG9yIH0gZnJvbSAnLi9kaXItaGVscGVycy5qcyc7CmltcG9ydCB7IExvYWRIaXN0b3J5LCBSZWFkRmlsZSwgUmVhZEpTT04sIFdyaXRlRmlsZSwgV3JpdGVKU09OIH0gZnJvbSAnLi9pby1oZWxwZXJzLmpzJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICcuL2xpYi9kZWVwLmpzJzsKaW1wb3J0ICogYXMgRUNNQVNjcmlwdCBmcm9tICcuL2xpYi9lY21hc2NyaXB0LmpzJzsKaW1wb3J0ICogYXMgZnMgZnJvbSAnLi9saWIvZmlsZXN5c3RlbS5qcyc7CmltcG9ydCB7IGRlZmluZSwgcHJvcGVydGllcywgbm9uZW51bWVyYWJsZSwgZGVmaW5lR2V0dGVyLCBnZXRPcHQsIGlzT2JqZWN0LCBsYXp5UHJvcGVydHksIG1lbW9pemUsIHB1c2hVbmlxdWUsIHRvQXJyYXlCdWZmZXIsIHRvU3RyaW5nLCB3ZWFrTWFwcGVyIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IGV4dGVuZEFycmF5IH0gZnJvbSAnZXh0ZW5kQXJyYXknOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgeyBQb2ludGVyIH0gZnJvbSAnLi9saWIvcG9pbnRlci5qcyc7CmltcG9ydCBUcmVlIGZyb20gJy4vbGliL3RyZWUuanMnOwppbXBvcnQgeyBzcGxpdCwgZGVjYW1lbGl6ZSwgY2FtZWxpemUsIGNsYXNzTmFtZSwgbWFwV3JhcHBlciB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyBTaGVsbCwgU3Bhd24gfSBmcm9tICcuL29zLWhlbHBlcnMuanMnOwppbXBvcnQgKiBhcyBUZXJtaW5hbCBmcm9tICd0ZXJtaW5hbCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgUkVQTCB9IGZyb20gJ3JlcGwnOwppbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnaW5zcGVjdCc7Ci8vaW1wb3J0IFBvcnRhYmxlU3Bhd24gZnJvbSAnLi9saWIvc3Bhd24uanMnOwoKZXh0ZW5kQXJyYXkoQXJyYXkucHJvdG90eXBlKTsKCmdsb2JhbFRoaXMuZnMgPSBmczsKCmxldCBwYXJhbXM7CmxldCBmaWxlczsKbGV0IHNwYXduLCBiYXNlLCBjbWRoaXN0LCBjb25maWc7CmxldCBkZWZzLCBpbmNsdWRlcywgbGlicywgc291cmNlczsKbGV0IGxpYmRpcnMgPSBbCiAgJy9saWInLAogICcvbGliL2kzODYtbGludXgtZ251JywKICAnL2xpYi94ODZfNjQtbGludXgtZ251JywKICAnL2xpYjMyJywKICAnL2xpYngzMicsCiAgJy91c3IvbGliJywKICAnL3Vzci9saWIvaTM4Ni1saW51eC1nbnUnLAogICcvdXNyL2xpYi9pMzg2LWxpbnV4LWdudS9pNjg2L3NzZTInLAogICcvdXNyL2xpYi9pMzg2LWxpbnV4LWdudS9zc2UyJywKICAnL3Vzci9saWIveDg2XzY0LWxpbnV4LWdudScsCiAgJy91c3IvbGliL3g4Nl82NC1saW51eC1nbnUvbGliZmFrZXJvb3QnLAogICcvdXNyL2xpYjMyJywKICAnL3Vzci9saWJ4MzInLAogICcvdXNyL2xvY2FsL2xpYicsCiAgJy91c3IvbG9jYWwvbGliL2kzODYtbGludXgtZ251JywKICAnL3Vzci9sb2NhbC9saWIveDg2XzY0LWxpbnV4LWdudScsCl07CmxldCBsaWJkaXJzMzIgPSBsaWJkaXJzLmZpbHRlcihkID0+IC8oMzIkfGlbMC05XTg2KS8udGVzdChkKSk7CmxldCBsaWJkaXJzNjQgPSBsaWJkaXJzLmZpbHRlcihkID0+ICEvKDMyJHxpWzAtOV04NikvLnRlc3QoZCkpOwoKY29uc3QgdHJhY2VQcm94eSA9IChvYmosIGhhbmRsZXIpID0+IHsKICBsZXQgcHJveHk7CiAgaGFuZGxlciA9IC8qaGFuZGxlciB8fCAqLyBmdW5jdGlvbihuYW1lLCBhcmdzKSB7CiAgICBjb25zb2xlLmxvZyhgQ2FsbGluZyBtZXRob2QgJyR7bmFtZX0nOmAsIC4uLmFyZ3MpOwogIH07CiAgLy9jb25zb2xlLmxvZygnaGFuZGxlcicsIHsgaGFuZGxlciB9LCBoYW5kbGVyICsgJycpOwogIHByb3h5ID0gbmV3IFByb3h5KG9iaiwgewogICAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikgewogICAgICBsZXQgbWVtYmVyID0gUmVmbGVjdC5nZXQob2JqLCBrZXksIHJlY2VpdmVyKTsKICAgICAgaWYoMCAmJiB0eXBlb2YgbWVtYmVyID09ICdmdW5jdGlvbicpIHsKICAgICAgICBsZXQgbWV0aG9kID0gbWVtYmVyOyAvLyBtZW1iZXIuYmluZChvYmopOwogICAgICAgIG1lbWJlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgLy8gICAgICAgICAgaGFuZGxlci5jYWxsKHJlY2VpdmVyLCBrZXksIGFyZ3VtZW50cyk7CiAgICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICAgIG1lbWJlciA9IG1ldGhvZC5iaW5kKG9iaik7CiAgICAgICAgY29uc29sZS5sb2coJ1V0aWwudHJhY2VQcm94eScsIGtleSwgKG1lbWJlciArICcnKS5yZXBsYWNlKC9cblxzKy9nLCAnICcpLnNwbGl0KGxpbmVTcGxpdClbMF0pOwogICAgICB9CiAgICAgIHJldHVybiBtZW1iZXI7CiAgICB9LAogIH0pOwogIHJldHVybiBwcm94eTsKfTsKCmNvbnN0IENvbmNhdEl0ZXJhdG9yID0gaXRlcmF0b3IgPT4gewogIGxldCByZXN1bHQsCiAgICBzID0gJyc7CgogIGlmKCEoJ25leHQnIGluIGl0ZXJhdG9yKSkgewogICAgaWYoU3ltYm9sLml0ZXJhdG9yIGluIGl0ZXJhdG9yKSBpdGVyYXRvciA9IGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTsKICB9CgogIHdoaWxlKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkgewogICAgaWYocyAhPSAnJykgcyArPSAnXG4nOwogICAgcyArPSByZXN1bHQudmFsdWU7CiAgfQoKICByZXR1cm4gczsKfTsKCmNvbnN0IFN0cmluZ0dlbmVyYXRvciA9CiAgZ2VuID0+CiAgKC4uLmFyZ3MpID0+IHsKICAgIGNvbnN0IGl0ZXJhdG9yID0gZ2VuKC4uLmFyZ3MpOwoKICAgIHJldHVybiBPYmplY3QuYXNzaWduKGl0ZXJhdG9yLCB7CiAgICAgIHRvU3RyaW5nKCkgewogICAgICAgIHJldHVybiBDb25jYXRJdGVyYXRvcih0aGlzKTsKICAgICAgfSwKICAgIH0pOwogIH07Cgphc3luYyBmdW5jdGlvbiBJbXBvcnRNb2R1bGUobW9kdWxlUGF0aCwgLi4uYXJncykgewogIGxldCBkb25lID0gZmFsc2UsCiAgICBtb2R1bGVOYW1lID0gcGF0aC5iYXNlbmFtZShtb2R1bGVQYXRoLCAnLmpzJyk7CgogIHJldHVybiBhd2FpdCBpbXBvcnQobW9kdWxlUGF0aCkudGhlbihtb2R1bGUgPT4gewogICAgZG9uZSA9IHRydWU7CiAgICBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKAogICAgICBudWxsLAogICAgICBnZXRNZW1iZXJOYW1lcyhtb2R1bGUsIEluZmluaXR5LCAwKS5yZWR1Y2UoCiAgICAgICAgKGFjYywgaXRlbSkgPT4gKHsKICAgICAgICAgIC4uLmFjYywKICAgICAgICAgIFtpdGVtXTogeyB2YWx1ZTogbW9kdWxlW2l0ZW1dLCBlbnVtZXJhYmxlOiB0cnVlIH0sCiAgICAgICAgfSksCiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobW9kdWxlKSwKICAgICAgKSwKICAgICk7CgogICAgaWYoIWdsb2JhbFRoaXMubW9kdWxlcykgZ2xvYmFsVGhpcy5tb2R1bGVzID0ge307CiAgICBnbG9iYWxUaGlzLm1vZHVsZXNbbW9kdWxlTmFtZV0gPSBtb2R1bGU7CgogICAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCBtb2R1bGUpOwogICAgcmV0dXJuIHsgbW9kdWxlTmFtZSwgbW9kdWxlUGF0aCwgbW9kdWxlIH07CiAgfSk7CiAgLyouY2F0Y2goZSA9PiB7CiAgICAgIGRvbmUgPSB0cnVlOwogICAgICByZXR1cm4geyBtb2R1bGVOYW1lLCBtb2R1bGVQYXRoLCBtb2R1bGU6IGUubWVzc2FnZSB9OwogICAgfSkqLwp9CgpmdW5jdGlvbiBDb21tYW5kTGluZSgpIHsKICBsZXQgbG9nID0gY29uc29sZS5yZWFsbG9nOwogIC8vIGxldCBvdXRwdXRMb2cgPSBmcy5vcGVuU3luYygnb3V0cHV0LmxvZycsICd3KycpOwoKICBsZXQgcmVwbDsKICByZXBsID0gZ2xvYmFsVGhpcy5yZXBsID0gbmV3IFJFUEwoJ0FTVCcsIGZhbHNlKTsKCiAgbGV0IGNmZyA9IFJlYWRKU09OKGNvbmZpZyk7CgogIGlmKGNmZykgT2JqZWN0LmFzc2lnbihjb25zb2xlLm9wdGlvbnMsIGNmZy5pbnNwZWN0T3B0aW9ucyk7CgogIHJlcGwuaW1wb3J0TW9kdWxlID0gSW1wb3J0TW9kdWxlOwogIHJlcGwuaGlzdG9yeSA9IExvYWRIaXN0b3J5KGNtZGhpc3QpOwogIE9iamVjdC5hc3NpZ24ocmVwbC5kaXJlY3RpdmVzLCB7CiAgICBjOiBbCiAgICAgICguLi5hcmdzKSA9PiB7CiAgICAgICAgQ29tcGlsZSguLi5hcmdzKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0sCiAgICAgICdjb21waWxlIHNvdXJjZScsCiAgICBdLAogICAgbDogWwogICAgICAoLi4uYXJncykgPT4gewogICAgICAgIFByb2Nlc3NGaWxlKC4uLmFyZ3MpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSwKICAgICAgJ2xvYWQgc291cmNlIGZpbGUnLAogICAgXSwKICAgIGk6IFsKICAgICAgKG1vZHVsZSwgLi4uYXJncykgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCdhcmdzJywgYXJncyk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJldHVybiByZXF1aXJlKG1vZHVsZSk7CiAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgIGltcG9ydChtb2R1bGUpLnRoZW4obSA9PiAoZ2xvYmFsVGhpc1ttb2R1bGVdID0gbSkpOwogICAgICB9LAogICAgICAnaW1wb3J0IG1vZHVsZScsCiAgICBdLAogIH0pOwogIHJlcGwuc2hvdyA9IHZhbHVlID0+IHsKICAgIGxldCBmaXJzdCwgc3RyOwogICAgaWYoaXNPYmplY3QodmFsdWUpICYmIChmaXJzdCA9IHZhbHVlLmZpcnN0ID8/IHZhbHVlWzBdKSAmJiBpc09iamVjdChmaXJzdCkgJiYgKCdpZCcgaW4gZmlyc3QgfHwgJ2tpbmQnIGluIGZpcnN0KSkgc3RyID0gVGFibGUodmFsdWUpOwogICAgZWxzZSBpZih0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHN0ciA9IHZhbHVlOwogICAgZWxzZQogICAgICBzdHIgPSBpbnNwZWN0KHZhbHVlLCB7CiAgICAgICAgLi4uKGNmZz8uaW5zcGVjdE9wdGlvbnMgPz8ge30pLAogICAgICAgIC4uLnJlcGwuaW5zcGVjdE9wdGlvbnMsCiAgICAgICAgaGlkZUtleXM6IFsnbG9jJywgJ3JhbmdlJ10sCiAgICAgIH0pOwogICAgc3RkLm91dC5wdXRzKHN0ciArICdcbicpOwogIH07CgogIHJlcGwubG9hZFNhdmVPcHRpb25zKCk7CiAgcmVwbC5pbnNwZWN0T3B0aW9ucyA/Pz0gY29uc29sZS5vcHRpb25zOwoKICBnbG9iYWxUaGlzLnByaW50Tm9kZSA9IGFyZyA9PiB7CiAgICBjb25zb2xlLmxvZyhOb2RlUHJpbnRlcigkLmRhdGEpLnByaW50KGFyZykpOwogIH07CgogIC8qbGV0IGRlYnVnTG9nID0gZnMub3BlblN5bmMoJ2RlYnVnLmxvZycsICdhJyk7CiAgcmVwbC5kZWJ1Z0xvZyA9IGRlYnVnTG9nOwogIHJlcGwuZGVidWcgPSAoLi4uYXJncykgPT4gewogICAgbGV0IHMgPSAnJzsKICAgIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgICAgaWYocykgcyArPSAnICc7CiAgICAgIGlmKHR5cGVvZiBhcmcgIT0gJ3N0cnBpbmcnIHx8IGFyZy5pbmRleE9mKCdceDFiJykgPT0gLTEpIHMgKz0gaW5zcGVjdChhcmcsIHsgZGVwdGg6IEluZmluaXR5LCBkZXB0aDogNiwgY29tcGFjdDogZmFsc2UgfSk7CiAgICAgIGVsc2UgcyArPSBhcmc7CiAgICB9CiAgICBmcy53cml0ZVN5bmMoZGVidWdMb2csIHMgKyAnXG4nKTsKICAgIGlmKGRlYnVnTG9nLmZsdXNoKSBkZWJ1Z0xvZy5mbHVzaCgpOwogIH07Ki8KCiAgcmVwbC5hZGRDbGVhbnVwSGFuZGxlcigoKSA9PiB7CiAgICBUZXJtaW5hbC5tb3VzZXRyYWNraW5nRGlzYWJsZSgpOwogICAgbGV0IGhpc3QgPSByZXBsLmhpc3RvcnkuZmlsdGVyKChpdGVtLCBpLCBhKSA9PiBhLmxhc3RJbmRleE9mKGl0ZW0pID09IGkpOwogICAgV3JpdGVGaWxlKAogICAgICBjbWRoaXN0LAogICAgICBoaXN0CiAgICAgICAgLmZpbHRlcihlbnRyeSA9PiAoZW50cnkgKyAnJykudHJpbSgpICE9ICcnKQogICAgICAgIC5tYXAoZW50cnkgPT4gZW50cnkucmVwbGFjZSgvXG4vZywgJ1xcbicpICsgJ1xuJykKICAgICAgICAuam9pbignJyksCiAgICApOwoKICAgIGxldCBjZmcgPSB7IGluc3BlY3RPcHRpb25zOiBjb25zb2xlLm9wdGlvbnMgfTsKICAgIFdyaXRlSlNPTihjb25maWcsIGNmZyk7CgogICAgY29uc29sZS5sb2coYEVYSVQgKHdyb3RlICR7aGlzdC5sZW5ndGh9IGhpc3RvcnkgZW50cmllcylgKTsKICAgIHN0ZC5leGl0KDApOwogIH0pOwoKICAvL2F0ZXhpdCgoKSA9PiByZXBsLmNsZWFudXAoKSk7CgogIHJlcGwgPSB0cmFjZVByb3h5KHJlcGwpOwoKICBpZihwYXJhbXMuZXhlYykgcmVwbC5ldmFsQW5kUHJpbnQocGFyYW1zLmV4ZWMpOwogIGVsc2UgcmVwbC5ydW4oZmFsc2UpOwp9CgpmdW5jdGlvbiogSW5jbHVkZUFsbChkaXIsIG1heERlcHRoID0gSW5maW5pdHksIHByZWQgPSBlbnRyeSA9PiAvXC5bY2hdJC8udGVzdChlbnRyeSkpIHsKICBmb3IobGV0IGVudHJ5IG9mIFJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgbWF4RGVwdGgsIHByZWQpKSB5aWVsZCBgI2luY2x1ZGUgIiR7ZW50cnl9ImA7Cn0KCmZ1bmN0aW9uIFNlbGVjdExvY2F0aW9ucyhub2RlKSB7CiAgcmV0dXJuIFsuLi5EZWVwU2VsZWN0KG5vZGUsIG4gPT4gWydvZmZzZXQnLCAnbGluZScsICdmaWxlJ10uc29tZShwcm9wID0+IG5bcHJvcF0gIT09IHVuZGVmaW5lZCkpXTsKfQoKZnVuY3Rpb24gTG9jYXRpb25TdHJpbmcobG9jKSB7CiAgaWYodHlwZW9mIGxvYyA9PSAnb2JqZWN0JyAmJiBsb2MgIT0gbnVsbCkgewogICAgbGV0IGZpbGUgPSBsb2MuZmlsZSA/PyAobG9jLmluY2x1ZGVkRnJvbSAmJiBsb2MuaW5jbHVkZWRGcm9tLmZpbGUpOwoKICAgIGlmKHR5cGVvZiBsb2MubGluZSA9PSAnbnVtYmVyJykgcmV0dXJuIGAke2ZpbGUgPyBmaWxlICsgJzonIDogJyd9JHtsb2MubGluZX0ke3R5cGVvZiBsb2MuY29sID09ICdudW1iZXInID8gJzonICsgbG9jLmNvbCA6ICcnfWA7CiAgICByZXR1cm4gYCR7ZmlsZSA/IGZpbGUgOiAnJ31AJHtsb2Mub2Zmc2V0fWA7CiAgfQp9Cgpjb25zdCBUeXBlTWFwID0gd2Vha01hcHBlcihub2RlID0+IG5ldyBUeXBlKG5vZGUpKTsKCmZ1bmN0aW9uIFN0cnVjdHMobm9kZXMpIHsKICByZXR1cm4gbm9kZXMKICAgIC5maWx0ZXIobm9kZSA9PiBub2RlLmlubmVyICYmIG5vZGUuaW5uZXIuc29tZShmaWVsZCA9PiBmaWVsZC5raW5kID09ICdGaWVsZERlY2wnKSkKICAgIC5tYXAobm9kZSA9PiBbCiAgICAgIC8vZGVlcC5maW5kKG5vZGUsIG4gPT4gdHlwZW9mIG4ubGluZSA9PSAnbnVtYmVyJyksCiAgICAgIG5ldyBMb2NhdGlvbihHZXRMb2Mobm9kZSkpLAogICAgICAoKG5vZGUudGFnVXNlZCA/IG5vZGUudGFnVXNlZCArICcgJyA6ICcnKSArIChub2RlLm5hbWUgPz8gJycpKS50cmltKCksCiAgICAgIG5ldyBNYXAobm9kZS5pbm5lci5tYXAoKGZpZWxkLCBpKSA9PiAoL0F0dHIvLnRlc3QoZmllbGQua2luZCkgPyBbU3ltYm9sKGZpZWxkLmtpbmQpLCBmaWVsZC5pZF0gOiBbZmllbGQubmFtZSB8fCBpLCAoZmllbGQudHlwZSAmJiBUeXBlRmFjdG9yeShmaWVsZC50eXBlKSkgfHwgZmllbGQua2luZF0pKSksCiAgICBdKTsKICAvKi5tYXAobm9kZSA9PiB0eXBlcyhub2RlKSkqLwp9CgpmdW5jdGlvbiBUYWJsZShsaXN0LCBwcmVkID0gKG4sIGwpID0+IHRydWUpIHsKICBsZXQgZW50cmllcyA9IFsuLi5saXN0XS5tYXAoKG4sIGkpID0+IChuID8gW2ksIExvY2F0aW9uU3RyaW5nKEdldExvYyhuKSksIG5dIDogdW5kZWZpbmVkKSkuZmlsdGVyKGUgPT4gZSk7CiAgbGV0IHR5cGVLZXkgPSAna2luZCcgaW4gbGlzdFswXSA/ICdraW5kJyA6ICd0eXBlJzsKICBsZXQga2V5cyA9IFsnaWQnLCB0eXBlS2V5LCAnbmFtZSddLmZpbHRlcihrID0+ICEhayk7CiAgbGV0IGl0ZW1zID0gZW50cmllcy5maWx0ZXIoKFtpLCBsLCBuXSkgPT4gcHJlZChuLCBsKSk7CiAgY29uc3QgZmlyc3QgPSBpdGVtc1swXVsyXTsKCiAgaWYoL0Z1bmN0aW9uLy50ZXN0KGZpcnN0W3R5cGVLZXldKSkgewogICAga2V5cyA9IFsKICAgICAgLi4ua2V5cywKICAgICAgZnVuY3Rpb24gcmV0dXJuVHlwZShuKSB7CiAgICAgICAgaWYobi50eXBlICYmIHR5cGVvZiBuLnR5cGUgPT0gJ29iamVjdCcpIHsKICAgICAgICAgIGNvbnN0IHsgcXVhbFR5cGUgfSA9IG4udHlwZTsKICAgICAgICAgIHJldHVybiBxdWFsVHlwZS5yZXBsYWNlKC9ccypcKC4qJC9nLCAnJyk7CiAgICAgICAgfQogICAgICAgIGlmKG5bdHlwZUtleV0pIHJldHVybiBuW3R5cGVLZXldOwogICAgICB9LAogICAgICBmdW5jdGlvbiBudW1BcmdzKG4pIHsKICAgICAgICBsZXQgcGFyYW1zID0gR2V0UGFyYW1zKG4pOwogICAgICAgIHJldHVybiBwYXJhbXMgPyBwYXJhbXMubGVuZ3RoIDogdW5kZWZpbmVkOwogICAgICB9LAogICAgICBmdW5jdGlvbiBQYXJhbXMobikgewogICAgICAgIGxldCBwYXJhbXMgPSBHZXRQYXJhbXMobik7CiAgICAgICAgcmV0dXJuIHBhcmFtcyA/IHBhcmFtcy5tYXAocCA9PiBQcmludEFzdChwKSkuam9pbignLCcpIDogdW5kZWZpbmVkOwogICAgICB9LAogICAgXTsKICB9CiAga2V5cyA9IFsnbicsIC4uLmtleXMsICdsb2NhdGlvbiddOwogIGNvbnN0IG5hbWVzID0ga2V5cy5tYXAoayA9PiAodHlwZW9mIGsgPT0gJ2Z1bmN0aW9uJyA/IGsubmFtZSA6IGspKTsKICBsZXQgcm93cyA9IGl0ZW1zLm1hcCgoW2ksIGwsIG5dKSA9PiBPYmplY3QuZnJvbUVudHJpZXMoW1snbicsIGldLCAuLi5rZXlzLnNsaWNlKDEsIC0xKS5tYXAoKGssIGopID0+IFtuYW1lc1tqICsgMV0sICh0eXBlb2YgayA9PSAnc3RyaW5nJyA/IG5ba10gOiBrKG4pKSA/PyAnJ10pLCBbJ2xvY2F0aW9uJywgbF1dKSk7CiAgbGV0IHNpemVzID0ge307CgogIGZvcihsZXQgcm93IG9mIHJvd3MpIHsKICAgIGZvcihsZXQgW2osIGldIG9mIG5hbWVzLmVudHJpZXMoKSkgewogICAgICBjb25zdCBjb2wgPSByb3dbaV0gKyAnJzsKICAgICAgaWYoKHNpemVzW2ldID8/IDApIDwgY29sLmxlbmd0aCkgc2l6ZXNbaV0gPSBjb2wubGVuZ3RoOwogICAgfQogIH0KCiAgbGV0IHdpZHRoID0gbmFtZXMucmVkdWNlKChhY2MsIG5hbWUpID0+IChhY2MgPyBhY2MgKyAzICsgc2l6ZXNbbmFtZV0gOiBzaXplc1tuYW1lXSksIDApOwogIGlmKHdpZHRoID4gcmVwbC50ZXJtV2lkdGgpIHNpemVzWydQYXJhbXMnXSAtPSB3aWR0aCAtIHJlcGwudGVybVdpZHRoOwoKICBmdW5jdGlvbiBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykgewogICAgbGV0IG0gPSAncGFkJyArIChsZW4gPj0gMCA/ICdFbmQnIDogJ1N0YXJ0Jyk7CiAgICBsZW4gPSBNYXRoLmFicyhsZW4pOwoKICAgIHJldHVybiBzID0+IHsKICAgICAgcyA9IHMgKyAnJzsKICAgICAgcmV0dXJuIHMubGVuZ3RoID4gbGVuID8gcy5zbGljZSgwLCBsZW4pIDogc1ttXShsZW4sIHBhZCk7CiAgICB9OwogIH0KCiAgY29uc3QgdHJ1bmMgPSBuYW1lcy5tYXAoKG5hbWUsIGkpID0+IHBhZFRydW5jKChpID09IDAgPyAtMSA6IDEpICogc2l6ZXNbbmFtZV0pKTsKICBjb25zdCBwYWQgPSAoY29scywgcGFkLCBzZXApID0+IHsKICAgIGlmKCFBcnJheS5pc0FycmF5KGNvbHMpKSBjb2xzID0gbmFtZXMubWFwKChrZXksIGkpID0+IGNvbHNba2V5XSk7CiAgICByZXR1cm4gY29scwogICAgICAubWFwKChzLCBjb2wpID0+IHRydW5jW2NvbF0ocywgcGFkKSkKICAgICAgLmpvaW4oc2VwID8/ICcg4pSCICcpCiAgICAgIC50cmltRW5kKCk7CiAgfTsKCiAgcmV0dXJuICgKICAgIHBhZChuYW1lcykgKwogICAgJ1xuJyArCiAgICBwYWQoCiAgICAgIG5hbWVzLnJlZHVjZSgoYWNjLCBuKSA9PiAoeyAuLi5hY2MsIFtuXTogJycgfSksIHt9KSwKICAgICAgJ+KUgCcsCiAgICAgICfilIDilLzilIAnLAogICAgKSArCiAgICAnXG4nICsKICAgIHJvd3MucmVkdWNlKChhY2MsIHJvdykgPT4gewogICAgICByZXR1cm4gYWNjICsgcGFkKHJvdykuc2xpY2UoMCwgcmVwbC5jb2x1bW5zKSArICdcbic7CiAgICB9LCAnJykKICApOwp9CgpmdW5jdGlvbiBQcmludFJhbmdlKHJhbmdlLCBmaWxlKSB7CiAgaWYoJ3JhbmdlJyBpbiByYW5nZSkgcmFuZ2UgPSByYW5nZS5yYW5nZTsKCiAgY29uc3QgeyBiZWdpbiwgZW5kIH0gPSByYW5nZTsKCiAgZmlsZSA/Pz0gYmVnaW4uZmlsZSA/PyAkLnNvdXJjZTsKCiAgbGV0IGRhdGEgPSBSZWFkRmlsZShmaWxlLCAndXRmLTgnKTsKICByZXR1cm4gZGF0YSA/IGRhdGEuc2xpY2UoYmVnaW4ub2Zmc2V0LCBlbmQub2Zmc2V0ICsgKGVuZC50b2tMZW4gfCAwKSkgOiBudWxsOwp9CgpmdW5jdGlvbiBPdmVybGFwUmFuZ2UocjEsIHIyKSB7CiAgY29uc3QgR2V0UmFuZ2UgPSByID0+IFtyLmJlZ2luLm9mZnNldCwgci5lbmQub2Zmc2V0ICsgKHIuZW5kLnRva0xlbiB8IDApXTsKICBjb25zdCBJblJhbmdlID0gKGksIHIpID0+IGkgPj0gclswXSAmJiBpIDwgclsxXTsKCiAgcjEgPSBHZXRSYW5nZShyMSk7CiAgcjIgPSBHZXRSYW5nZShyMik7CgogIGlmKEluUmFuZ2UocjFbMF0sIHIyKSB8fCBJblJhbmdlKHIxWzFdLCByMikpIHJldHVybiB0cnVlOwogIGlmKEluUmFuZ2UocjJbMF0sIHIxKSB8fCBJblJhbmdlKHIyWzFdLCByMSkpIHJldHVybiB0cnVlOwoKICByZXR1cm4gZmFsc2U7Cn0KCmZ1bmN0aW9uIFBhcmVudE5vZGUobm9kZSwgYXN0ID0gJC5kYXRhKSB7CiAgbGV0IHAgPSBQYXRoT2Yobm9kZSwgYXN0KTsKCiAgcmV0dXJuIHAudXAoMikuZGVyZWYoYXN0KTsKfQoKZnVuY3Rpb24gTmV4dFNpYmxpbmcobm9kZSwgYXN0ID0gJC5kYXRhKSB7CiAgbGV0IHAgPSBQYXRoT2Yobm9kZSwgYXN0KTsKICBwW3AubGVuZ3RoIC0gMV0gKz0gMTsKCiAgcmV0dXJuIHAuZGVyZWYoYXN0KTsKfQoKZnVuY3Rpb24gUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkgewogIGxldCBwID0gUGF0aE9mKG5vZGUsIGFzdCk7CiAgcFtwLmxlbmd0aCAtIDFdICs9IDE7CiAgcmV0dXJuIHAuZGVyZWYoYXN0KTsKfQoKZnVuY3Rpb24gRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpIHsKICByZXR1cm4gUGF0aE9mKG5vZGUsIGFzdCkuZG93bignaW5uZXInLCAwKS5kZXJlZihhc3QpOwp9CgpmdW5jdGlvbiBMYXN0Q2hpbGQobm9kZSwgYXN0ID0gJC5kYXRhKSB7CiAgbGV0IGEgPSBQYXRoT2Yobm9kZSwgYXN0KS5kb3duKCdpbm5lcicpLmRlcmVmKGFzdCk7CiAgcmV0dXJuIGFbYS5sZW5ndGggLSAxXTsKfQoKZnVuY3Rpb24gVGVybWluYXRlKGV4aXRDb2RlKSB7CiAgY29uc29sZS5sb2coJ1Rlcm1pbmF0ZScsIGV4aXRDb2RlKTsKCiAgZXhpdChleGl0Q29kZSk7Cn0KCmZ1bmN0aW9uIFBhcnNlU3RydWN0cyh0ZXh0KSB7CiAgY29uc3QgcmUgPSAvKFteXG5dKilccj9cbi9nbXk7CiAgbGV0IGxpbmUsCiAgICBmaWVsZHMsCiAgICBzdHJ1Y3RzID0gW107CgogIHdoaWxlKChsaW5lID0gcmUuZXhlYyh0ZXh0KSkpIHsKICAgIGlmKC9eXHMqJC9nLnRlc3QobGluZVsxXSkpIGNvbnRpbnVlOwogICAgbGV0IGNvbHVtbnMgPSBsaW5lWzFdLnNwbGl0KC9ccysvZyk7CgogICAgaWYoaXNOYU4oK2NvbHVtbnNbMV0pKSBjb250aW51ZTsKCiAgICBsZXQgW25hbWVdID0gY29sdW1uczsKCiAgICBpZihmaWVsZHMgJiYgbmFtZVswXSA9PSAnLicpIHsKICAgICAgbGV0IFssIG9mZnNldCwgc2l6ZV0gPSBjb2x1bW5zOwogICAgICBmaWVsZHMucHVzaChbbmFtZSwgK29mZnNldCwgK3NpemVdKTsKICAgIH0gZWxzZSB7CiAgICAgIHN0cnVjdHMucHVzaChbbmFtZSwgeyBzaXplOiArY29sdW1uc1sxXSwgZmllbGRzOiAoZmllbGRzID0gW10pIH1dKTsKICAgIH0KICB9CgogIHJldHVybiBuZXcgTWFwKHN0cnVjdHMpOwp9Cgpjb25zdCBHZW5lcmF0ZUluc3BlY3RTdHJ1Y3QgPSBTdHJpbmdHZW5lcmF0b3IoZnVuY3Rpb24qIChkZWNsLCBpbmNsdWRlcykgewogIGxldCB7IG5hbWUsIG1lbWJlcnMgfSA9IGRlY2w7CgogIGluY2x1ZGVzID8/PSBbZGVjbC5sb2MuZmlsZS5yZXBsYWNlKC9eXC91c3JcL2luY2x1ZGVcLy8sICcnKV07CgogIC8vY29uc29sZS5sb2coJ0dlbmVyYXRlSW5zcGVjdFN0cnVjdCcsIHsgbmFtZSwgbWVtYmVycywgaW5jbHVkZXMgfSk7CgogIHlpZWxkICcjaW5jbHVkZSA8c3RkaW8uaD4nOwogIHlpZWxkICcjaW5jbHVkZSA8c3RkZGVmLmg+JzsKCiAgaWYoTWVtYmVyTmFtZXMobWVtYmVycykuc29tZShuYW1lID0+IC86Ly50ZXN0KG5hbWUpKSkKICAgIHlpZWxkIGAKc2l6ZV90CmJ5dGVfZmlyc3Rub3QoY29uc3Qgdm9pZCogcCwgc2l6ZV90IGxlbiwgdW5zaWduZWQgY2hhciB2KSB7CiAgY29uc3QgdW5zaWduZWQgY2hhciogeDsKICBmb3IoeCA9IHA7IGxlbjsgbGVuLS0sIHgrKykKICAgIGlmKCp4ICE9IHYpIGJyZWFrOwogIHJldHVybiB4IC0gKGNvbnN0IHVuc2lnbmVkIGNoYXIqKXA7Cn0KCnNpemVfdApieXRlX2xhc3Rub3QoY29uc3Qgdm9pZCogcCwgc2l6ZV90IGxlbiwgdW5zaWduZWQgY2hhciB2KSB7CiAgY29uc3QgdW5zaWduZWQgY2hhciogeDsKICBmb3IoeCA9IChjb25zdCB1bnNpZ25lZCBjaGFyKilwICsgbGVuIC0gMTsgbGVuOyBsZW4tLSwgeC0tKQogICAgaWYoKnggIT0gdikgYnJlYWs7CiAgcmV0dXJuIHggLSAoY29uc3QgdW5zaWduZWQgY2hhciopcDsKfQoKc2l6ZV90CmJpdF9maXJzdG5vdCh1bnNpZ25lZCBjaGFyIHYsIHVuc2lnbmVkIGNoYXIgYikgewogIGludCBpOwogIGZvcihpID0gMDsgaSA8IDg7IGkrKywgdiA+Pj0gMSkgCiAgICBpZigodiAmIDEpID09ICFiKSBicmVhazsKICByZXR1cm4gaTsKfQoKc2l6ZV90CmJpdF9sYXN0bm90KHVuc2lnbmVkIGNoYXIgdiwgdW5zaWduZWQgY2hhciBiKSB7CiAgaW50IGk7CiAgZm9yKGkgPSA3OyBpID49IDA7IGktLSkgCiAgICBpZighISh2ICYgKDEgPDwgaSkpID09ICFiKSBicmVhazsKICByZXR1cm4gaSA+PSAwID8gaSA6IDg7Cn0KCnNpemVfdApmaXJzdG5vdChjb25zdCB2b2lkKiBwLCBzaXplX3QgbGVuLCB1bnNpZ25lZCBjaGFyIHYpIHsKIGNvbnN0IGNoYXIqIHggPSBwOwogc2l6ZV90IGkgPSBieXRlX2ZpcnN0bm90KHAsIGxlbiwgdik7CiByZXR1cm4gaSAqIDggKyBiaXRfZmlyc3Rub3QoeFtpXSwgdik7Cn0KCnNpemVfdApsYXN0bm90KGNvbnN0IHZvaWQqIHAsIHNpemVfdCBsZW4sIHVuc2lnbmVkIGNoYXIgdikgewogY29uc3QgdW5zaWduZWQgY2hhciogeCA9IHA7CiBzaXplX3QgaSA9IGJ5dGVfbGFzdG5vdChwLCBsZW4sIHYpOwogcmV0dXJuIGkgKiA4ICsgYml0X2xhc3Rub3QoeFtpXSwgdik7Cn0KCnNpemVfdApiaXRzaXplKGNvbnN0IHZvaWQqIHAsIHNpemVfdCBsZW4pIHsKIHJldHVybiBsYXN0bm90KHAsIGxlbiwgMHhmZikgKyAxIC0gZmlyc3Rub3QocCwgbGVuLCAweGZmKTsKfQoKYDsKCiAgZm9yKGxldCBpbmNsdWRlIG9mIGluY2x1ZGVzKSB5aWVsZCBgI2luY2x1ZGUgIiR7aW5jbHVkZX0iYDsKICB5aWVsZCBgJHtuYW1lfSBzdmFyO2A7CiAgeWllbGQgYGludCBtYWluKCkge2A7CiAgeWllbGQgYCAgcHJpbnRmKCIke25hbWV9ICV6dVxcbiIsIHNpemVvZihzdmFyKSAqIDgpO2A7CgogIGZvcihsZXQgbWVtYmVyIG9mIE1lbWJlck5hbWVzKG1lbWJlcnMpKSB7CiAgICBpZih0cnVlIC8qKHR5cGUgPT0gbnVsbCB8fCB0eXBlb2YgdHlwZS5zaXplID09ICdudW1iZXInKSAmJiBtZW1iZXIgIT0gdW5kZWZpbmVkKi8pIHsKICAgICAgbGV0IGZpZWxkID0gbWVtYmVyLnJlcGxhY2UoLzouKi8sICcnKTsKICAgICAgaWYoLzovLnRlc3QobWVtYmVyKSkgewogICAgICAgIHlpZWxkIGAKICBtZW1zZXQoJnN2YXIsIDB4ZmYsIHNpemVvZihzdmFyKSk7CiAgc3Zhci4ke2ZpZWxkfSA9IDA7CiAgcHJpbnRmKCIuJHtmaWVsZH0gJXp1ICV6aVxcbiIsIGZpcnN0bm90KCZzdmFyLCBzaXplb2Yoc3ZhciksIDB4ZmYpLCBiaXRzaXplKCZzdmFyLCBzaXplb2Yoc3ZhcikpKTtgOwogICAgICB9IGVsc2UgewogICAgICAgIHlpZWxkIGAgIHByaW50ZigiLiR7ZmllbGR9ICV6dSAlenVcXG4iLCBvZmZzZXRvZigke25hbWV9LCAke2ZpZWxkfSkgKiA4LCBzaXplb2Yoc3Zhci4ke2ZpZWxkfSkgKiA4KTtgOwogICAgICB9CiAgICB9CiAgfQoKICB5aWVsZCBgICByZXR1cm4gMDtgOwogIHlpZWxkIGB9YDsKfSk7CgpmdW5jdGlvbiBJbnNwZWN0U3RydWN0KGRlY2wsIGluY2x1ZGVzLCBjb21waWxlciA9ICdjbGFuZycpIHsKICBpZih0eXBlb2YgZGVjbCA9PSAnc3RyaW5nJykgewogICAgbGV0IG5hbWUgPSAoZGVjbC5pbmRleE9mKCcgJykgIT0gLTEgPyAnJyA6ICdzdHJ1Y3QgJykgKyBkZWNsOwogICAgZGVjbCA9IFR5cGUuZ2V0KG5hbWUsICQuZGF0YSk7CiAgICBkZWNsID8/PSAkLmdldFR5cGUobmFtZSk7CiAgICBkZWNsLm5hbWUgPSBuYW1lOwogIH0KICBjb25zb2xlLmxvZygnSW5zcGVjdFN0cnVjdCcsIGRlY2wpOwoKICBjb25zdCBjb2RlID0gWy4uLkdlbmVyYXRlSW5zcGVjdFN0cnVjdChkZWNsLCBpbmNsdWRlcyldLmpvaW4oJ1xuJyk7CiAgY29uc3QgcHJvZ3JhbSA9IGAvdG1wL2luc3BlY3QtJHtkZWNsLm5hbWUucmVwbGFjZSgvIC9nLCAnXycpfWA7CiAgV3JpdGVGaWxlKHByb2dyYW0gKyAnLmMnLCBjb2RlKTsKCiAgbGV0IGNvbW1hbmQgPSBbY29tcGlsZXIsICctTzInLCAnLWcnLCAnLXcnLCAnLW8nLCBwcm9ncmFtLCBwcm9ncmFtICsgJy5jJywgLi4uZmxhZ3NdOwogIGNvbnNvbGUubG9nKCdJbnNwZWN0U3RydWN0JywgeyBjb21tYW5kOiBjb21tYW5kLmpvaW4oJyAnKSB9KTsKCiAgbGV0IHJlc3VsdCA9IG9zLmV4ZWMoY29tbWFuZCk7CgogIGlmKHJlc3VsdCA9PSAwKSB7CiAgICBsZXQgW2ZkLCBzdGRvdXRdID0gb3MucGlwZSgpOwoKICAgIG9zLmV4ZWMoWyhwcm9ncmFtLnN0YXJ0c1dpdGgoJy8nKSA/ICcnIDogYC4vYCkgKyBwcm9ncmFtXSwgeyBzdGRvdXQgfSk7CiAgICBsZXQgb3V0cHV0ID0gZnMucmVhZEFsbChmZCk7CgogICAgbGV0IGxpbmVzID0gb3V0cHV0LnRyaW0oKS5zcGxpdCgnXG4nKTsKICAgIGxldCBmaXJzdExpbmUgPSBsaW5lcy5zaGlmdCgpOwoKICAgIGxldCBbbmFtZSwgc2l6ZV0gPSBbLi4uc3BsaXQoZmlyc3RMaW5lLCBbLi4uZmlyc3RMaW5lXS5sYXN0SW5kZXhPZignICcpKV07CgogICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvXihzdHJ1Y3R8dW5pb258ZW51bSlcIC8sICcnKTsKCiAgICAvL2NvbnNvbGUubG9nKCJsaW5lczoiLCBsaW5lcyk7CiAgICByZXN1bHQgPSBsaW5lcwogICAgICAubWFwKGxpbmUgPT4gKHR5cGVvZiBsaW5lID09ICdzdHJpbmcnID8gbGluZS5zcGxpdCgnICcpIDogbGluZSkpCiAgICAgIC5tYXAobGluZSA9PiBsaW5lLm1hcCgoY29sLCBpKSA9PiAoaXNOYU4oK2NvbCkgPyBjb2wgOiArY29sKSkpCiAgICAgIC5tYXAoKFtmaWVsZCwgb2Zmc2V0LCBzaXplXSkgPT4gW2ZpZWxkLnJlcGxhY2UoLzouKi8sICcnKS5yZXBsYWNlKC9eXC4vLCBuYW1lICsgJy4nKSwgb2Zmc2V0LCBzaXplXSk7CgogICAgbGV0IGVuZCA9IDA7CiAgICByZXN1bHQgPSByZXN1bHQucmVkdWNlKChhY2MsIGxpbmUpID0+IHsKICAgICAgaWYoYWNjLmxlbmd0aCkgewogICAgICAgIGlmKGVuZCA8IGFjYy5sYXN0WzFdICsgYWNjLmxhc3RbMl0pIGVuZCA9IGFjYy5sYXN0WzFdICsgYWNjLmxhc3RbMl07CgogICAgICAgIGlmKGVuZCA8IGxpbmVbMV0pIGFjYy5wdXNoKFtudWxsLCBlbmQsIGxpbmVbMV0gLSBlbmRdKTsKICAgICAgfQogICAgICBhY2MucHVzaChsaW5lKTsKICAgICAgcmV0dXJuIGFjYzsKICAgIH0sIFtdKTsKCiAgICByZXN1bHQudW5zaGlmdChbbmFtZSwgJy0nLCArc2l6ZV0pOwoKICAgIGRlZmluZShyZXN1bHQsIHsKICAgICAgdG9TdHJpbmcoc2VwID0gJyAnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubWFwKGxpbmUgPT4gbGluZS5qb2luKHNlcCkucmVwbGFjZSgnLicsICcgJykpLmpvaW4oJ1xuJyk7CiAgICAgIH0sCiAgICB9KTsKICB9CgogIHJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIFJvdW5kVG8odmFsdWUsIGFsaWduKSB7CiAgcmV0dXJuIE1hdGguZmxvb3IoKHZhbHVlICsgKGFsaWduIC0gMSkpIC8gYWxpZ24pICogYWxpZ247Cn0KCmZ1bmN0aW9uIE1ha2VTdHJ1Y3RDbGFzcyhkZWNsLCBmaWxlbmFtZSkgewogIGxldCBjb2RlID0gWy4uLkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCldLmpvaW4oJ1xuJyk7CgogIFdyaXRlRmlsZSgoZmlsZW5hbWUgPz8gZGVjbC5uYW1lLnJlcGxhY2UoL1teQS1aYS16MC05X10vZywgJy0nKSkgKyAnLmpzJywgY29kZSk7CgogIGlmKCFmaWxlbmFtZSkgcmV0dXJuIGNvZGU7Cn0KCmZ1bmN0aW9uKiBHZW5lcmF0ZVN0cnVjdENsYXNzKGRlY2wsIGZmaVByZWZpeCA9ICcnKSB7CiAgbGV0IG5hbWU7CgogIGlmKGRlY2wgaW5zdGFuY2VvZiBUeXBlZGVmRGVjbCkgewogICAgbmFtZSA9IGRlY2wubmFtZTsKICAgIGRlY2wgPSBkZWNsLnR5cGU7CiAgfQoKICBsZXQgeyBzaXplLCBtZW1iZXJzID0gW10gfSA9IGRlY2w7CiAgbmFtZSA/Pz0gZGVjbC5uYW1lOwoKICBsZXQgY2xhc3NOYW1lID0gbmFtZS5yZXBsYWNlKC9zdHJ1Y3RccyovLCAnJyk7CgogIHlpZWxkIGBjbGFzcyAke2NsYXNzTmFtZX0gZXh0ZW5kcyBBcnJheUJ1ZmZlciB7YDsKICB5aWVsZCBgICBjb25zdHJ1Y3RvcihvYmogPSB7fSkge1xuICAgIHN1cGVyKCR7c2l6ZX0pO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb2JqKTtcbiAgfWA7CiAgeWllbGQgYCAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkgeyByZXR1cm4gXGBbJHtuYW1lfSBAIFwke3RoaXN9IF1cYDsgfWA7CgogIGxldCBmaWVsZHMgPSBbXSwKICAgIG9mZnNldCA9IDA7CgogIGNvbnNvbGUubG9nKCdHZW5lcmF0ZVN0cnVjdENsYXNzJywgeyBkZWNsLCBtZW1iZXJzIH0pOwoKICBmb3IobGV0IFtuYW1lLCB0eXBlXSBvZiBtZW1iZXJzKSB7CiAgICBpZigvcmVzZXJ2ZWQvLnRlc3QobmFtZSkpIGNvbnRpbnVlOwoKICAgIGlmKHR5cGUuc2l6ZSA9PSA4KSBvZmZzZXQgPSBSb3VuZFRvKG9mZnNldCwgOCk7CiAgICBsZXQgZGVzdWdhcmVkID0gdHlwZS5kZXN1Z2FyZWQgJiYgdHlwZS5kZXN1Z2FyZWQgIT0gdHlwZSA/IGAgKCR7dHlwZS5kZXN1Z2FyZWR9KWAgOiAnJzsKICAgIGxldCBwb2ludGVyID0gdHlwZS5wb2ludGVyOwoKICAgIHlpZWxkICcnOwoKICAgIGxldCBzdWJzY3JpcHQgPSB0eXBlLnN1YnNjcmlwdCA/PyAnJzsKCiAgICB5aWVsZCBgICAvKiAke29mZnNldH06ICR7dHlwZX0ke2Rlc3VnYXJlZH0gJHtuYW1lfSR7c3Vic2NyaXB0fSAqL2A7CgogICAgdHJ5IHsKICAgICAgeWllbGQqIEdlbmVyYXRlR2V0U2V0KG5hbWUsIG9mZnNldCwgdHlwZSwgZmZpUHJlZml4KS5tYXAobGluZSA9PiBgICAke2xpbmV9YCk7CiAgICB9IGNhdGNoKGUpIHt9CgogICAgZmllbGRzLnB1c2gobmFtZSk7CgogICAgb2Zmc2V0ICs9IFJvdW5kVG8odHlwZS5zaXplLCA0KTsKICB9CgogIHlpZWxkICcnOwogIHlpZWxkIGAgIHN0YXRpYyBmcm9tKGFkZHJlc3MpIHtcbiAgICBsZXQgcmV0ID0gJHtmZmlQcmVmaXh9dG9BcnJheUJ1ZmZlcihhZGRyZXNzLCAke29mZnNldH0pO1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YocmV0LCAke2NsYXNzTmFtZX0ucHJvdG90eXBlKTtcbiAgfWA7CiAgeWllbGQgJyc7CgogIHlpZWxkIGAgIHRvU3RyaW5nKCkge1xuICAgIGNvbnN0IHsgJHtmaWVsZHMuam9pbignLCAnKX0gfSA9IHRoaXM7XG4gICAgcmV0dXJuIFxgJHtuYW1lfSB7JHtbLi4ubWVtYmVyc10KICAgIC5tYXAoKFtmaWVsZCwgbWVtYmVyXSkgPT4gJ1xcblxcdC4nICsgZmllbGQgKyAnID0gJyArIChtZW1iZXIuaXNQb2ludGVyKCkgPyAnMHgnIDogJycpICsgJyR7JyArIGZpZWxkICsgKG1lbWJlci5pc1BvaW50ZXIoKSA/ICcudG9TdHJpbmcoMTYpJyA6ICcnKSArICd9JykKICAgIC5qb2luKCcsJyl9XFxufVxgO1xuICB9YDsKICB5aWVsZCAnfSc7Cn0KCmZ1bmN0aW9uIEdlbmVyYXRlR2V0U2V0KG5hbWUsIG9mZnNldCwgdHlwZSwgZmZpUHJlZml4KSB7CiAgY29uc3QgeyBzaXplLCBzaWduZWQgfSA9IHR5cGU7CiAgY29uc3QgZmxvYXRpbmcgPSB0eXBlLmlzRmxvYXRpbmdQb2ludCgpOwogIGNvbnN0IHBvaW50ZXIgPSB0eXBlLmdldFBvaW50ZXIoJC5kYXRhKTsKCiAgbGV0IGN0b3IgPSBCeXRlTGVuZ3RoMlR5cGVkQXJyYXkoc2l6ZSwgc2lnbmVkLCBmbG9hdGluZyk7CiAgbGV0IHRvSGV4ID0gdiA9PiB2OwoKICBpZih0eXBlLmlzUG9pbnRlcigpKSB0b0hleCA9IHYgPT4gYCcweCcrJHt2fS50b1N0cmluZygxNilgOwoKICBjb25zdCBhID0gW107CgogIGlmKHBvaW50ZXIpIHsKICAgIGNvbnN0IHsgbmFtZSwgc2l6ZSwgc2lnbmVkLCBkZXN1Z2FyZWQgfSA9IHBvaW50ZXI7CiAgICBhLnVuc2hpZnQoYC8qICR7bmFtZX0ke2Rlc3VnYXJlZCA/IGAgKCR7ZGVzdWdhcmVkfSlgIDogJyd9ICR7c2l6ZX0gJHtzaWduZWR9ICovYCk7CiAgICBjb25zb2xlLmxvZygnR2VuZXJhdGVTdHJ1Y3RDbGFzcycsIHsgcG9pbnRlciB9KTsKICB9CgogIHJldHVybiBbCiAgICAuLi5hLAogICAgYHNldCAke25hbWV9KHZhbHVlKSB7IGlmKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHZhbHVlID0gJHtmZmlQcmVmaXh9dG9Qb2ludGVyKHZhbHVlKTsgbmV3ICR7Y3Rvcn0odGhpcywgJHtvZmZzZXR9KVswXSA9ICR7Qnl0ZUxlbmd0aDJWYWx1ZSgKICAgICAgc2l6ZSwKICAgICAgc2lnbmVkLAogICAgICBmbG9hdGluZywKICAgICl9OyB9YCwKICAgIGBnZXQgJHtuYW1lfSgpIHsgcmV0dXJuICR7dG9IZXgoYG5ldyAke2N0b3J9KHRoaXMsICR7b2Zmc2V0fSlbMF1gKX07IH1gLAogIF07Cn0KCmZ1bmN0aW9uIEJ5dGVMZW5ndGgyVHlwZWRBcnJheShieXRlTGVuZ3RoLCBzaWduZWQsIGZsb2F0aW5nKSB7CiAgaWYoZmxvYXRpbmcpIHsKICAgIHN3aXRjaCAoYnl0ZUxlbmd0aCkgewogICAgICBjYXNlIDQ6CiAgICAgICAgcmV0dXJuICdGbG9hdDMyQXJyYXknOwogICAgICBjYXNlIDg6CiAgICAgICAgcmV0dXJuICdGbG9hdDY0QXJyYXknOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFcnJvcihgRmxvYXRpbmcgcG9pbnQsIGJ1dCAke2J5dGVMZW5ndGh9IHNpemVgKTsKICAgIH0KICB9CgogIHN3aXRjaCAoYnl0ZUxlbmd0aCkgewogICAgY2FzZSAxOgogICAgICByZXR1cm4gc2lnbmVkID8gJ0ludDhBcnJheScgOiAnVWludDhBcnJheSc7CiAgICBjYXNlIDI6CiAgICAgIHJldHVybiBzaWduZWQgPyAnSW50MTZBcnJheScgOiAnVWludDE2QXJyYXknOwogICAgY2FzZSA0OgogICAgICByZXR1cm4gc2lnbmVkID8gJ0ludDMyQXJyYXknIDogJ1VpbnQzMkFycmF5JzsKICAgIGNhc2UgODoKICAgICAgcmV0dXJuIGZsb2F0aW5nID8gJ0Zsb2F0NjRBcnJheScgOiBzaWduZWQgPyAnQmlnSW50NjRBcnJheScgOiAnQmlnVWludDY0QXJyYXknOwogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIHNpZ25lZCA/ICdJbnQ4QXJyYXknIDogJ1VpbnQ4QXJyYXknOwogIH0KfQoKZnVuY3Rpb24gQnl0ZUxlbmd0aDJWYWx1ZShieXRlTGVuZ3RoLCBzaWduZWQsIGZsb2F0aW5nKSB7CiAgaWYoYnl0ZUxlbmd0aCA9PSA4ICYmICFmbG9hdGluZykgcmV0dXJuICdCaWdJbnQodmFsdWUpJzsKICByZXR1cm4gJ3ZhbHVlJzsKfQoKZXhwb3J0IGNsYXNzIEZGSV9GdW5jdGlvbiB7CiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpIHsKICAgIGNvbnN0IHsgbmFtZSwgcmV0dXJuVHlwZSA9ICd2b2lkJywgcGFyYW1ldGVycyA9IFtdIH0gPSBub2RlOwoKICAgIC8vY29uc29sZS5sb2coJ0ZGSV9GdW5jdGlvbi5jb25zdHJ1Y3RvcicsIG5vZGUsIHsgbmFtZSwgcGFyYW1ldGVycyB9KTsKCiAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7CiAgICB0aGlzLnJldHVyblR5cGUgPSByZXR1cm5UeXBlLmZmaTsKICAgIHRoaXMucGFyYW1ldGVycyA9IFsuLi4ocGFyYW1ldGVycyB8fCBbXSldLm1hcCgoW25hbWUsIHR5cGVdLCBpZHgpID0+IFtuYW1lID8/IGBhcmcke2lkeCArIDF9YCwgdHlwZS5mZmldKTsKICB9CgogIGdlbmVyYXRlRGVmaW5lKGZwLCBsaWIpIHsKICAgIGNvbnN0IHsgcHJlZml4LCBuYW1lLCByZXR1cm5UeXBlLCBwYXJhbWV0ZXJzIH0gPSB0aGlzOwogICAgZnAgPz89IChuYW1lLCBsaWIpID0+IGAke3ByZWZpeH1kbHN5bSgke2xpYiA/PyAnUlRMRF9ERUZBVUxUJ30sICcke25hbWV9JylgOwogICAgbGV0IGNvZGUgPSBgJyR7bmFtZX0nLCAke2ZwKG5hbWUsIGxpYil9LCBudWxsLCAnJHtyZXR1cm5UeXBlfSdgOwogICAgY29uc3QgY29sb3JUZXh0ID0geCA9PiB4OwoKICAgIC8vY29uc29sZS5sb2coJ2Z1bmN0aW9uJywgY29sb3JUZXh0KG5hbWUsIDEsIDMzKSwgJ3JldHVyblR5cGU6JywgY29sb3JUZXh0KHJldHVyblR5cGUsIDEsIDMxKSk7CgogICAgbGV0IHBhcmFtSW5kZXggPSAwOwoKICAgIGZvcihsZXQgW3BhcmFtTmFtZSwgdHlwZV0gb2YgcGFyYW1ldGVycykgewogICAgICArK3BhcmFtSW5kZXg7CgogICAgICAvL2NvbnNvbGUubG9nKGBwYXJhbSAjJHtwYXJhbUluZGV4fWAsIC4uLihwYXJhbU5hbWUgPyBbJ25hbWU6JywgcGFyYW1OYW1lXSA6IFtdKSwgJ3R5cGU6JywgdHlwZSk7CgogICAgICBjb2RlICs9ICcsICc7CiAgICAgIGNvZGUgKz0gYCcke3R5cGV9J2A7CiAgICB9CiAgICByZXR1cm4gYCR7cHJlZml4fWRlZmluZSgke2NvZGV9KTtgOwogIH0KCiAgZ2VuZXJhdGVEb2MoKSB7CiAgICBjb25zdCB7IHByZWZpeCwgbmFtZSwgcmV0dXJuVHlwZSwgcGFyYW1ldGVycyB9ID0gdGhpczsKICAgIGNvbnN0IGxpbmVzID0gW107CiAgICBjb25zdCBjb2x1bW5zID0gWzEwLCAxNl07CgogICAgY29uc3QgcHVzaCA9ICguLi5hcmdzKSA9PgogICAgICBsaW5lcy5wdXNoKAogICAgICAgIFsuLi5hcmdzXQogICAgICAgICAgLm1hcChmaWVsZCA9PiAodHlwZW9mIGZpZWxkICE9ICdzdHJpbmcnID8gJycgOiBmaWVsZCkpCiAgICAgICAgICAubWFwKChmaWVsZCwgY29sKSA9PiBmaWVsZC5wYWRFbmQoY29sdW1uc1tjb2xdID8/IDApKQogICAgICAgICAgLmpvaW4oJycpLAogICAgICApOwoKICAgIHB1c2goJy8qKicpOwogICAgcHVzaChgQGZ1bmN0aW9uYCwgYCR7bmFtZX1gKTsKCiAgICBpZihwYXJhbWV0ZXJzLmxlbmd0aCkgcHVzaCgpOwoKICAgIGxldCBqcyA9IHR5cGUgPT4gewogICAgICBsZXQgdHlwZU9iaiA9IFR5cGUuZGVjbGFyYXRpb25zLmdldCh0eXBlKTsKICAgICAgcmV0dXJuIHR5cGVPYmogPyB0eXBlT2JqLnRvSlMoKSA6IHR5cGU7CiAgICB9OwoKICAgIGZvcihsZXQgW3BhcmFtTmFtZSwgdHlwZV0gb2YgcGFyYW1ldGVycykgcHVzaChgQHBhcmFtYCwgYHske2pzKHR5cGUpfX1gLCBwYXJhbU5hbWUpOwoKICAgIGlmKHJldHVyblR5cGUgIT0gJ3ZvaWQnKSB7CiAgICAgIHB1c2goKTsKICAgICAgcHVzaChgQHJldHVybmAsIGB7JHtqcyhyZXR1cm5UeXBlKX19YCk7CiAgICB9CgogICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xuICogJykgKyAnXG4gKi9cbic7CiAgfQoKICBnZW5lcmF0ZUNhbGwoKSB7CiAgICBjb25zdCB7IHByZWZpeCwgbmFtZSwgcmV0dXJuVHlwZSwgcGFyYW1ldGVycyB9ID0gdGhpczsKICAgIGNvbnN0IHBhcmFtTmFtZXMgPSBwYXJhbWV0ZXJzLm1hcCgoW25hbWUsIHR5cGVdKSA9PiBuYW1lKTsKICAgIGxldCBjb2RlID0gYGZ1bmN0aW9uICR7bmFtZX0oJHtwYXJhbU5hbWVzLmpvaW4oJywgJyl9KSB7XG5gOwoKICAgIGNvZGUgKz0gYCAgJHtyZXR1cm5UeXBlICE9ICd2b2lkJyA/ICdyZXR1cm4gJyA6ICcnfSR7cHJlZml4fWNhbGwoJyR7bmFtZX0nLCAke3BhcmFtTmFtZXMuam9pbignLCAnKX0pO1xuYDsKICAgIGNvZGUgKz0gYH1gOwoKICAgIHJldHVybiBjb2RlOwogIH0KCiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKSB7CiAgICByZXR1cm4gW3RoaXMuZ2VuZXJhdGVEZWZpbmUoZnAsIGxpYiksICdcbicsIGV4cCA/ICdleHBvcnQgJyA6ICcnLCB0aGlzLmdlbmVyYXRlQ2FsbCgpLCAnXG4nXS5qb2luKCcnKTsKICB9CgogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikgewogICAgY29uc3QgeyBwcmVmaXgsIG5hbWUsIHJldHVyblR5cGUsIHBhcmFtZXRlcnMgfSA9IHRoaXM7CiAgICBjb25zdCBwYXJhbU5hbWVzID0gcGFyYW1ldGVycy5tYXAoKFtuYW1lLCB0eXBlXSkgPT4gbmFtZSk7CgogICAgbGV0IGNvZGUgPSBgbmV3IEZ1bmN0aW9uKCR7cGFyYW1OYW1lcy5tYXAocCA9PiBgJyR7cH0nYCkuam9pbignLCAnKX0sIGA7CiAgICBjb2RlICs9IGAncmV0dXJuICR7cHJlZml4fWNhbGwoIiR7bmFtZX0iJHtwYXJhbU5hbWVzLm1hcChwID0+IGAsICR7cH1gKS5qb2luKCcnKX0pJyk7YDsKCiAgICByZXR1cm4gY29kZTsKICB9CgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKSB7CiAgICBsZXQgY29kZSA9IHRoaXMuZ2VuZXJhdGVDYWxsKGZwLCBsaWIpOwogICAgbGV0IGZuID0gbmV3IEZ1bmN0aW9uKGByZXR1cm4gJHtjb2RlfWApOwoKICAgIHJldHVybiBmbigpOwogIH0KfQoKZnVuY3Rpb24gRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KSB7CiAgbGV0IGJ1ZiA9IGZzLmJ1ZmZlcihidWZmZXJTaXplKTsKCiAgcmV0dXJuIG5ldyBSZXBlYXRlcihhc3luYyAocHVzaCwgc3RvcCkgPT4gewogICAgbGV0IHJldDsKCiAgICBkbyB7CiAgICAgIGxldCByID0gYXdhaXQgZnMud2FpdFJlYWQoZmQpOwogICAgICByZXQgPSBmcy5yZWFkKGZkLCBidWYpOwoKICAgICAgaWYocmV0ID4gMCkgewogICAgICAgIGxldCBkYXRhID0gYnVmLnNsaWNlKDAsIHJldCk7CiAgICAgICAgYXdhaXQgcHVzaChmcy5idWZmZXJUb1N0cmluZyhkYXRhKSk7CiAgICAgIH0KICAgIH0gd2hpbGUocmV0ID09IGJ1ZmZlclNpemUpOwoKICAgIHN0b3AoKTsKICAgIGZzLmNsb3NlKGZkKTsKICB9KTsKfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIENvbW1hbmRSZWFkKGFyZ3MpIHsKICBsZXQgY2hpbGQgPSBTcGF3bihhcmdzLCB7CiAgICBibG9jazogZmFsc2UsCiAgICBzdGRpbzogWydpbmhlcml0JywgJ3BpcGUnLCAnaW5oZXJpdCddLAogIH0pOwoKICBsZXQgb3V0cHV0ID0gJycsCiAgICBkb25lID0gZmFsc2UsCiAgICBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMTAyNCk7CgogIGlmKHBsYXRmb3JtID09ICdxdWlja2pzJykgewogICAgbGV0IHsgZmQgfSA9IGNoaWxkLnN0ZG91dDsKCiAgICBmb3IoOzspIHsKICAgICAgMTsKICAgICAgbGV0IHI7CiAgICAgIGF3YWl0IGZzLndhaXRSZWFkKGZkKTsKICAgICAgciA9IFJlYWRPdXRwdXQoZmQpOwogICAgICBpZihyID4gMCAmJiByIDwgYnVmLmJ5dGVMZW5ndGgpIGJyZWFrOwogICAgfQoKICAgIGxldCByZXN1bHQgPSBhd2FpdCBjaGlsZC53YWl0KCk7CgogICAgcmV0dXJuIG91dHB1dC50cmltRW5kKCk7CiAgfSBlbHNlIHsKICAgIEFjcXVpcmVSZWFkZXIoY2hpbGQuc3Rkb3V0LCBhc3luYyByZWFkZXIgPT4gewogICAgICBsZXQgcjsKCiAgICAgIHdoaWxlKChyID0gYXdhaXQgcmVhZGVyLnJlYWQoKSkpIGlmKCFyLmRvbmUpIGVycm9ycyArPSByLnZhbHVlLnRvU3RyaW5nKCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIFJlYWRPdXRwdXQoZmQpIHsKICAgIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMTAyNCk7CiAgICBsZXQgciA9IG9zLnJlYWQoZmQsIGJ1ZiwgMCwgYnVmLmJ5dGVMZW5ndGgpOwoKICAgIG91dHB1dCArPSBmcy5idWZmZXJUb1N0cmluZyhidWYuc2xpY2UoMCwgcikpOwoKICAgIHJldHVybiByOwogIH0KfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIExpYnJhcnlFeHBvcnRzKGZpbGUpIHsKICBjb25zb2xlLmxvZyhgTGlicmFyeUV4cG9ydHM6YCwgZmlsZSk7CgogIGxldCBvdXRwdXQgPSBhd2FpdCBDb21tYW5kUmVhZChbJy9vcHQvZGlldC9iaW4vb2JqZHVtcCcsICctVCcsIGZpbGVdKTsKICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvLipEWU5BTUlDIFNZTUJPTCBUQUJMRTpccy9tLCAnJyk7CgogIGxldCBsaW5lcyA9IG91dHB1dC5zcGxpdCgvXG4vZykuZmlsdGVyKGxpbmUgPT4gL1xzQmFzZVxzLy50ZXN0KGxpbmUpKTsKICBsZXQgY29sdW1ucyA9IGNvbEluZGV4ZXMobGluZXNbMF0pOwogIGxldCBlbnRyaWVzID0gbGluZXMubWFwKGxpbmUgPT4gY29sU3BsaXQobGluZSwgY29sdW1ucykubWFwKGNvbHVtbiA9PiBjb2x1bW4udHJpbUVuZCgpKSk7CgogIGVudHJpZXMuc29ydCgoYSwgYikgPT4gYVswXS5sb2NhbGVDb21wYXJlKGJbMF0pKTsKCiAgcmV0dXJuIGVudHJpZXMubWFwKGVudHJ5ID0+IGVudHJ5W2VudHJ5Lmxlbmd0aCAtIDFdLnRyaW1TdGFydCgpKTsKfQoKZnVuY3Rpb24gU2F2ZUxpYnJhcmllcygpIHsKICBjb25zdCBsYXllcnMgPSBPYmplY3QudmFsdWVzKFsuLi5wcm9qZWN0LnNjaGVtYXRpYy5sYXllcnMsIC4uLnByb2plY3QuYm9hcmQubGF5ZXJzXS5yZWR1Y2UoKGFjYywgW24sIGVdKSA9PiAoeyAuLi5hY2MsIFtuXTogZS5yYXcgfSksIHt9KSk7Cn0KCmZ1bmN0aW9uIFByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkgewogIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShmaWxlKTsKICBsZXQgcmV0ID0gbnVsbDsKCiAgc3dpdGNoIChleHQpIHsKICAgIGNhc2UgJy5qcyc6CiAgICAgIHJldCA9IFBhcnNlRUNNQVNjcmlwdChmaWxlLCBkZWJ1Zyk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnLmNwcCc6CiAgICBjYXNlICcuY3h4JzoKICAgIGNhc2UgJy5jYyc6CiAgICBjYXNlICcuYyc6CiAgICBjYXNlICcuaCc6CiAgICAgIHJldCA9IENvbXBpbGUoZmlsZSAvKiwgZGVidWcqLyk7CiAgICAgIGJyZWFrOwogIH0KCiAgcmV0dXJuIHJldDsKfQoKZnVuY3Rpb24gUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KSB7CiAgbGV0IGRhdGEsIGIsIHJldDsKICBjb25zdCB7IGRlYnVnIH0gPSBwYXJhbXM7CgogIGlmKGZpbGUgPT0gJy0nKSBmaWxlID0gJy9kZXYvc3RkaW4nOwoKICBpZihmaWxlICYmIGZzLmV4aXN0c1N5bmMoZmlsZSkpIHsKICAgIGRhdGEgPSBSZWFkRmlsZShmaWxlLCAndXRmOCcpOwogICAgY29uc29sZS5sb2coJ29wZW5lZDonLCBmaWxlKTsKICB9IGVsc2UgewogICAgZmlsZSA9ICdzdGRpbic7CiAgICBkYXRhID0gc291cmNlOwogIH0KCiAgY29uc29sZS5sb2coJ09LLCBkYXRhOiAnLCBhYmJyZXZpYXRlKGVzY2FwZShkYXRhKSkpOwoKICBpZihkZWJ1ZykgRUNNQVNjcmlwdFBhcnNlci5pbnN0cnVtZW50YXRlKCk7CgogIGNvbnNvbGUubG9nKCdFQ01BU2NyaXB0UGFyc2VyOicsIEVDTUFTY3JpcHRQYXJzZXIpOwoKICBsZXQgcGFyc2VyLCBhc3QsIGVycm9yOwoKICBnbG9iYWxUaGlzLnBhcnNlciA9IHBhcnNlciA9IG51bGw7CiAgZ2xvYmFsVGhpcy5wYXJzZXIgPSBwYXJzZXIgPSBuZXcgRUNNQVNjcmlwdFBhcnNlcihkYXRhID8gZGF0YS50b1N0cmluZygpIDogZGF0YSwgZmlsZSwgZGVidWcpOwoKICB0cnkgewogICAgYXN0ID0gcGFyc2VyLnBhcnNlUHJvZ3JhbSgpOwogIH0gY2F0Y2goZXJyKSB7CiAgICBjb25zdCB0b2tlbnMgPSBbLi4ucGFyc2VyLnByb2Nlc3NlZCwgLi4ucGFyc2VyLnRva2Vuc107CiAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07CgogICAgY29uc29sZS5sb2coJ3BhcnNlUHJvZ3JhbSB0b2tlbicsIHRva2VuKTsKCiAgICBpZihlcnIgIT09IG51bGwpIHsKICAgICAgY29uc29sZS5sb2coJ3BhcnNlUHJvZ3JhbSBFUlJPUiBtZXNzYWdlOicsIGVycj8ubWVzc2FnZSk7CiAgICAgIGNvbnNvbGUubG9nKCdwYXJzZVByb2dyYW0gRVJST1Igc3RhY2s6XG4gICcgKyBuZXcgU3RhY2soZXJyPy5zdGFjaywgKGZyLCBpKSA9PiBmci5mdW5jdGlvbk5hbWUgIT0gJ2VzZmFjdG9yeScgJiYgaSA8IDUpLnRvU3RyaW5nKCkucmVwbGFjZSgvXG4vZywgJ1xuICAnKSk7CgogICAgICB0aHJvdyBlcnI7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmxvZygncGFyc2VQcm9ncmFtIEVSUk9SOicsIGVycik7CiAgICAgIHRocm93IG5ldyBFcnJvcigncGFyc2VQcm9ncmFtJyk7CiAgICB9CiAgfQoKICBwYXJzZXIuYWRkQ29tbWVudHNUb05vZGVzKGFzdCk7CiAgcmV0dXJuIGFzdDsKfQoKLypmdW5jdGlvbiBQYXJzZUVDTUFTY3JpcHQoZmlsZSwgZGVidWcgPSBmYWxzZSkgewogIGNvbnNvbGUubG9nKGBQYXJzaW5nICcke2ZpbGV9Jy4uLmApOwogIGxldCBkYXRhID0gUmVhZEZpbGUoZmlsZSwgJ3V0Zi04Jyk7CiAgbGV0IGFzdCwgZXJyb3I7CiAgbGV0IHBhcnNlcjsKICBjb25zb2xlLmxvZygnZGF0YScsIGRhdGEpOwogIGdsb2JhbFRoaXMucGFyc2VyID0gcGFyc2VyID0gbmV3IEVDTUFTY3JpcHRQYXJzZXIoZGF0YT8udG9TdHJpbmcgPyBkYXRhLnRvU3RyaW5nKCkgOiBkYXRhLCBmaWxlLCBkZWJ1Zyk7CgogIGdsb2JhbFRoaXMuYXN0ID0gYXN0ID0gcGFyc2VyLnBhcnNlUHJvZ3JhbSgpOwogIHBhcnNlci5hZGRDb21tZW50c1RvTm9kZXMoYXN0KTsKCiAgZ2xvYmFsVGhpcy5maWxlc1tmaWxlXSA9IGFzdDsKCiAgcmV0dXJuIHsKICAgIGFzdCwKICAgIGdldCBkYXRhKCkgewogICAgICByZXR1cm4gdGhpcy5hc3Q7CiAgICB9CiAgfTsKfSovCgpmdW5jdGlvbiBQcmludEVDTUFTY3JpcHQoYXN0LCBjb21tZW50cywgcHJpbnRlciA9IG5ldyBFQ01BU2NyaXB0LlByaW50ZXIoeyBpbmRlbnQ6IDQgfSwgY29tbWVudHMpKSB7CiAgcmV0dXJuIHByaW50ZXIucHJpbnQoYXN0KTsKfQoKZnVuY3Rpb24gUHJpbnRDQXJyYXkoc3RyaW5ncykgewogIGxldCBvID0gJyc7CgogIGZvcihsZXQgc3RyIG9mIHN0cmluZ3MpIHsKICAgIGlmKG8gIT0gJycpIG8gKz0gJywgJzsKCiAgICBpZih0eXBlb2Ygc3RyID09ICdzdHJpbmcnKSBvICs9ICciJyArIHN0ciArICciJzsKICAgIGVsc2UgbyArPSAnMCc7CiAgfQoKICAvKiBzdHJpbmdzLm1hcChzdHIgPT4gKHR5cGVvZiBzdHIgPT0gJ3N0cmluZycgJiYgc3RyID8gJyInICsgc3RyICsgJyInIDogJyIiJykpLm1hcChzdHIgPT4gc3RyICE9ICcnID8gc3RyIDogJyIiJykuam9pbignLFxuJykgKyovCgogIG8gKz0gYCB9KTtgOwogIHJldHVybiBgKChjb25zdCBjaGFyKmNvbnN0IFtdKXsgYCArIG87Cn0KCmZ1bmN0aW9uIE5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkgewogIGxldCBwdHIgPSBuZXcgUG9pbnRlcihub2RlUGF0aCk7CiAgbGV0IHB0cnMgPSBwdHIuY2hhaW4oMik7CiAgbGV0IGdldCA9IHAgPT4gRGVlcEdldChhc3QsIHApOwoKICBsZXQgbnMgPSBwdHJzLm1hcChwID0+IGdldChwKSkuZmlsdGVyKG4gPT4gbi5raW5kID09ICdOYW1lc3BhY2VEZWNsJyk7CiAgcmV0dXJuIG5zOwp9CgpmdW5jdGlvbiogQ29uc3RhbnRzKG5vZGUsIHQgPSAobmFtZSwgdmFsdWUpID0+IFtuYW1lLCAhaXNOYU4oK3ZhbHVlKSA/ICt2YWx1ZSA6IHZhbHVlXSkgewogIGZvcihsZXQgaW5uZXIgb2Ygbm9kZS5pbm5lcikgewogICAgeWllbGQgdCguLi5QcmludEFzdChpbm5lcikuc3BsaXQoLyA9IC9nKSk7CiAgfQp9CgpNZW1iZXJOYW1lcy5VUFBFUiA9IDE7Ck1lbWJlck5hbWVzLk1FVEhPRFMgPSAyOwpNZW1iZXJOYW1lcy5QUk9QRVJUSUVTID0gNDsKCmZ1bmN0aW9uIEdldEltcG9ydHMoYXN0ID0gJC5kYXRhKSB7CiAgY29uc3QgciA9IFtdOwoKICBmb3IobGV0IFtuLCBwXSBvZiBEZWVwU2VsZWN0KCQuZGF0YSwgbiA9PiAobi50eXBlID8/IG4ua2luZCkuc3RhcnRzV2l0aCgnSW1wb3J0JykpKSByLnB1c2gobik7CgogIHJldHVybiByOwp9CgpmdW5jdGlvbiBHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkgewogIGNvbnN0IHIgPSBbXTsKCiAgZm9yKGxldCBub2RlIG9mIG5vZGVzKSBmb3IgKGxldCBuIG9mIERlZXBTZWxlY3Qobm9kZSwgKG4sIGspID0+IChuLnR5cGUgPz8gbi5raW5kKSA9PSAnSWRlbnRpZmllcicgJiYgKGtleSA9PT0gbnVsbCB8fCBrID09IGtleSkpKSByLnB1c2gobi5uYW1lKTsKCiAgcmV0dXJuIHI7Cn0KCmZ1bmN0aW9uIE1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkgewogIGxldCByZXQgPSBbXTsKCiAgaWYobWVtYmVycy5tZW1iZXJzKSBtZW1iZXJzID0gbWVtYmVycy5tZW1iZXJzOwoKICBpZighQXJyYXkuaXNBcnJheShtZW1iZXJzKSkgewogICAgZm9yKGxldCBwdHIgb2YgWy4uLkRlZXBTZWxlY3QobWVtYmVycywgbiA9PiBuLmtpbmQuZW5kc1dpdGgoJ0RlY2wnKSAmJiBuLm5hbWUsIGRlZXAuUkVUVVJOX1BBVEgpXS5tYXAocGF0aCA9PiBuZXcgUG9pbnRlcihwYXRoKSkpIHsKICAgICAgbGV0IHB0cnMgPSBwdHIuY2hhaW4oMik7CgogICAgICBjb25zb2xlLmxvZygncHRyczonLCBwdHJzKTsKCiAgICAgIGxldCBuYW1lcyA9IHB0cnMubWFwKHAgPT4gRGVlcEdldChtZW1iZXJzLCBbLi4ucCwgJ25hbWUnXSwgZGVlcC5OT19USFJPVykpOwogICAgICBsZXQga2luZHMgPSBwdHJzLm1hcChwID0+IERlZXBHZXQobWVtYmVycywgWy4uLnAsICdraW5kJ10sIGRlZXAuTk9fVEhST1cpKTsKCiAgICAgIGNvbnNvbGUubG9nKCdraW5kczonLCBraW5kcyk7CiAgICAgIGNvbnNvbGUubG9nKCduYW1lczonLCBuYW1lcyk7CgogICAgICByZXQucHVzaChuYW1lcy5maWx0ZXIobmFtZSA9PiBuYW1lKS5qb2luKCcuJykpOwogICAgfQogIH0gZWxzZSB7CiAgICBjb25zdCBtZW1iZXJOYW1lUG9pbnRlcnMgPSBbLi4uRGVlcFNlbGVjdChtZW1iZXJzLCBuID0+IEFycmF5LmlzQXJyYXkobikgJiYgbi5sZW5ndGggPT0gMiAmJiB0eXBlb2YgblswXSA9PSAnc3RyaW5nJyAmJiBuWzFdICE9PSBudWxsKV0ubWFwKChbbm9kZSwgcHRyXSkgPT4gcHRyKTsKICAgIC8vY29uc29sZS5sb2coJ21lbWJlck5hbWVQb2ludGVycycsIG1lbWJlck5hbWVQb2ludGVycyk7CgogICAgZm9yKGxldCBwdHIgb2YgbWVtYmVyTmFtZVBvaW50ZXJzLm1hcChwYXRoID0+IG5ldyBQb2ludGVyKHBhdGgpKSkgewogICAgICBsZXQgcHRycyA9IHB0ci5jaGFpbigzKSwKICAgICAgICBuYW1lcyA9IHB0cnMubWFwKHAgPT4gRGVlcEdldChtZW1iZXJzLCBbLi4ucCwgMF0pKTsKCiAgICAgIHJldC5wdXNoKG5hbWVzLmZpbHRlcihuYW1lID0+IG5hbWUpLmpvaW4oJy4nKSk7CiAgICB9CiAgfQoKICBpZihmbGFncyAmIE1lbWJlck5hbWVzLlVQUEVSKSByZXQgPSByZXQubWFwKG5hbWUgPT4gZGVjYW1lbGl6ZShuYW1lLCAnXycpLnRvVXBwZXJDYXNlKCkpOwoKICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpIHsKICBmb3IobGV0IFt2LCBwXSBvZiBEZWVwU2VsZWN0KG5vZGUsICh2LCBrKSA9PiBrID09ICdsb2MnIHx8IGsgPT0gJ3JhbmdlJywgZGVlcC5SRVRVUk5fVkFMVUVfUEFUSCkpIGlmKHByZWQoRGVlcEdldChub2RlLCBbLi4ucF0uc2xpY2UoMCwgLTEpKSwgWy4uLnBdLmxhc3QpKSBkZWVwLnVuc2V0KG5vZGUsIHApOwoKICByZXR1cm4gbm9kZTsKfQoKZnVuY3Rpb24gTWFrZUZGSShub2RlLCBsaWIsIGV4cCwgZnApIHsKICBpZihBcnJheS5pc0FycmF5KG5vZGUpKQogICAgcmV0dXJuIChmdW5jdGlvbiogKCkgewogICAgICBsZXQgaSA9IDA7CgogICAgICBpZighZnApIHlpZWxkIGBpbXBvcnQgeyBkbG9wZW4sIGRlZmluZSwgZGxlcnJvciwgZGxjbG9zZSwgZGxzeW0sIGNhbGwsIGVycm5vLCBSVExEX05PVyB9IGZyb20gJ2ZmaSc7XG5gOwoKICAgICAgaWYobGliKSB7CiAgICAgICAgbGV0IGxpYnZhciA9IGxpYi5yZXBsYWNlKC9cLnNvKCR8XC4uKikvZywgJycpLnJlcGxhY2UoL1teQS1aYS16MC05X10vZywgJ18nKTsKCiAgICAgICAgeWllbGQgYGNvbnN0ICR7bGlidmFyfSA9IGRsb3BlbignJHtsaWJ9JywgUlRMRF9OT1cpO1xuYDsKCiAgICAgICAgbGliID0gbGlidmFyOwogICAgICB9CgogICAgICBmb3IobGV0IGl0ZW0gb2Ygbm9kZSkgewogICAgICAgIGxldCBvdXQgPSAnJzsKICAgICAgICAvL2NvbnNvbGUubG9nKGBNYWtlRkZJIGl0ZW0gIyR7aSArIDF9LyR7bm9kZS5sZW5ndGh9YCk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBsZXQgcmV0ID0gTWFrZUZGSShpdGVtLCBsaWIsIGV4cCwgZnApOwoKICAgICAgICAgIGlmKHR5cGVvZiByZXQgPT0gJ3N0cmluZycgJiYgcmV0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgaWYob3V0KSBvdXQgKz0gJ1xuJzsKICAgICAgICAgICAgb3V0ICs9IHJldDsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoKGVycm9yKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhgRVJST1IgaXRlbSBbJHtpfV06YCwgZXJyb3IubWVzc2FnZSArICdcbicgKyBlcnJvci5zdGFjayk7CiAgICAgICAgfQoKICAgICAgICBpKys7CgogICAgICAgIHlpZWxkIG91dDsKICAgICAgfQogICAgfSkoKTsKCiAgdHJ5IHsKICAgIGlmKCEobm9kZSBpbnN0YW5jZW9mIE5vZGUpKSBub2RlID0gVHlwZUZhY3Rvcnkobm9kZSwgJC5kYXRhKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUuZXJyb3IoJ1R5cGVGYWN0b3J5JywgZT8ubWVzc2FnZSk7CiAgfQoKICBpZih0eXBlb2Ygbm9kZSA9PSAnb2JqZWN0JyAmJiBub2RlICYmIG5vZGUua2luZCA9PSAnRnVuY3Rpb25EZWNsJykgbm9kZSA9IG5ldyBGdW5jdGlvbkRlY2wobm9kZSk7CgogIGlmKG5vZGUgaW5zdGFuY2VvZiBGdW5jdGlvbkRlY2wpIHsKICAgIGNvbnNvbGUubG9nKCdub2RlJywgKGdsb2JhbFRoaXMubm9kZSA9IG5vZGUpKTsKCiAgICBsZXQgZmZpID0gbmV3IEZGSV9GdW5jdGlvbihub2RlKTsKCiAgICBsZXQgcHJvdG9TdHIgPSBQcmludEFzdChub2RlLmFzdCwgJC5kYXRhKQogICAgICAucmVwbGFjZSgvXihbXlxuXChdKilcbi8sICckMSAnKQogICAgICAuc3BsaXQoL1xuL2cpWzBdCiAgICAgIC5yZXBsYWNlKC9cIHskLywgJzsnKTsKCiAgICBwcm90b1N0ciA9IHByb3RvU3RyLnJlcGxhY2UoL15ccypleHRlcm5ccysvLCAnJyk7CgogICAgcmV0dXJuIChmZmkuZ2VuZXJhdGVEb2MoZnAsIGxpYiwgZXhwKSA/PyBgLyogJHtwcm90b1N0cn0gKi9cbmApICsgZmZpLmdlbmVyYXRlKGZwLCBsaWIsIGV4cCk7CiAgfSBlbHNlIGlmKG5vZGUgaW5zdGFuY2VvZiBSZWNvcmREZWNsIHx8IG5vZGUgaW5zdGFuY2VvZiBUeXBlZGVmRGVjbCkgewogICAgcmV0dXJuIEdlbmVyYXRlU3RydWN0Q2xhc3Mobm9kZSk7CiAgICAvL3JldHVybiBbLi4uR2VuZXJhdGVTdHJ1Y3RDbGFzcyhub2RlKV0uam9pbignXG4nKTsKICB9Cn0KCmZ1bmN0aW9uIE1ha2VJZChuYW1lKSB7CiAgbGV0IHMgPSAnJzsKCiAgbmFtZSA9IG5hbWUucmVwbGFjZUFsbCgnOjonLCAnXycpOwoKICBmb3IobGV0IGNoIG9mIG5hbWUpIHsKICAgIGlmKC9bQS1aYS16MC05X10vLnRlc3QoY2gpKSB7CiAgICAgIHMgKz0gY2g7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIHMgKz0gJ19fJyArIGNoLmNvZGVQb2ludEF0KDApLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpOwogIH0KCiAgcmV0dXJuIHM7Cn0KCmZ1bmN0aW9uIE1ha2VRdWlja0pTQ2xhc3Mobm9kZSwgYXN0ID0gJCkgewogIGNvbnN0IGNpZCA9IE1ha2VJZChkZWNhbWVsaXplKG5vZGUubmFtZSwgJycpKS50b0xvd2VyQ2FzZSgpOwogIGNvbnN0IGNuYW1lID0gYXN0Lm5hbWVzcGFjZU9mKG5vZGUpICsgJyc7CgogIGNvbnN0IFtkZWNsLCBhc3NpZ25dID0gWwogICAgKGNuYW1lLCB2bmFtZSA9ICdwdHInKSA9PiBgICAke2NuYW1lfSogJHt2bmFtZX07YCwKICAgIChjbmFtZSwgdm5hbWUgPSAncHRyJykgPT4gYCAgaWYoISgke3ZuYW1lfSA9IHN0YXRpY19jYXN0PCR7Y25hbWV9Kj4oSlNfR2V0T3BhcXVlMihjdHgsIHRoaXNfdmFsLCBqc18ke2NpZH1fY2xhc3NfaWQpKSkpXG4gICAgcmV0dXJuIEpTX0VYQ0VQVElPTjtgLAogIF07CgogIGNvbnN0IG1lbWJlcnMgPSB7CiAgICBmaWVsZHM6IFsuLi5ub2RlLm1lbWJlcnNdLmZpbHRlcihuID0+IGNsYXNzTmFtZShuKSA9PSAnRmllbGREZWNsJyAmJiAhWydwcm90ZWN0ZWQnLCAncHJpdmF0ZSddLmluY2x1ZGVzKG4uYWNjZXNzKSAmJiAhKG4uc3RvcmFnZUNsYXNzID09ICdzdGF0aWMnIHx8IG4uYXN0LnN0b3JhZ2VDbGFzcyA9PSAnc3RhdGljJykpLAogICAgc3RhdGljOiBbLi4ubm9kZS5tZW1iZXJzXS5maWx0ZXIobiA9PiBjbGFzc05hbWUobikgPT0gJ1R5cGUnICYmIChuLnN0b3JhZ2VDbGFzcyA9PSAnc3RhdGljJyB8fCBuLmFzdC5zdG9yYWdlQ2xhc3MgPT0gJ3N0YXRpYycpKSwKICAgIG1ldGhvZHM6IFsuLi5ub2RlLm1lbWJlcnNdLmZpbHRlcihuID0+IG4uYXN0LmtpbmQgPT0gJ0NYWE1ldGhvZERlY2wnICYmICFbJ3Byb3RlY3RlZCcsICdwcml2YXRlJ10uaW5jbHVkZXMobi5hY2Nlc3MpICYmICEobi5zdG9yYWdlQ2xhc3MgPT0gJ3N0YXRpYycgfHwgbi5hc3Quc3RvcmFnZUNsYXNzID09ICdzdGF0aWMnKSksCiAgICBmdW5jdGlvbnM6IFsuLi5ub2RlLm1lbWJlcnNdLmZpbHRlcihuID0+IG4uYXN0LmtpbmQgPT0gJ0NYWE1ldGhvZERlY2wnICYmICFbJ3Byb3RlY3RlZCcsICdwcml2YXRlJ10uaW5jbHVkZXMobi5hY2Nlc3MpICYmIChuLnN0b3JhZ2VDbGFzcyA9PSAnc3RhdGljJyB8fCBuLmFzdC5zdG9yYWdlQ2xhc3MgPT0gJ3N0YXRpYycpKSwKICAgIGVudW1zOiBbLi4ubm9kZS5tZW1iZXJzXS5maWx0ZXIobiA9PiBuLmFzdC5raW5kID09ICdFbnVtRGVjbCcpLAogICAgY3Rvcl9kdG9yOiBbLi4ubm9kZS5tZW1iZXJzXS5maWx0ZXIobiA9PiAhKG4uYXN0LmtpbmQgPT0gJ0NYWE1ldGhvZERlY2wnIHx8IGNsYXNzTmFtZShuKSA9PSAnVHlwZScpKSwKICB9OwoKICBsZXQgaW5zdCA9IGRlY2woY25hbWUpICsgJ1xuXG4nICsgYXNzaWduKGNuYW1lKSArICdcbic7CgogIGluc3QgKz0gYFxuICBzd2l0Y2gobWFnaWMpIHtcbmA7CgogIGNvbnN0IG91dCA9IHsKICAgIG1lbnVtOiBgZW51bSB7XG5gLAogICAgcGVudW06IGBlbnVtIHtcbmAsCiAgICBmbnM6IGBzdGF0aWMgY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfJHtjaWR9X3Byb3RvX2Z1bmNzW10gPSB7XG5gLAogICAgcGdldDogYHN0YXRpYyBKU1ZhbHVlXG5qc18ke2NpZH1fZ2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBtYWdpYykge1xuICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDtcbmAgKyBpbnN0LAogICAgcHNldDogYHN0YXRpYyBKU1ZhbHVlXG5qc18ke2NpZH1fc2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIEpTVmFsdWVDb25zdCB2YWx1ZSwgaW50IG1hZ2ljKSB7XG4gIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEO1xuYCArIGluc3QsCiAgICBtZm46IGBzdGF0aWMgSlNWYWx1ZVxuanNfJHtjaWR9X21ldGhvZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljKSB7XG4gIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEO1xuYCArIGluc3QsCiAgICBzZm46IGBzdGF0aWMgSlNWYWx1ZVxuanNfJHtjaWR9X2Z1bmN0aW9ucyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljKSB7XG4gIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEO1xuYCArIGluc3QsCiAgfTsKICBjb25zdCBtZXRob2RzID0ge30sCiAgICBuYW1lcyA9IFtdOwoKICBmb3IobGV0IG1ldGhvZCBvZiBtZW1iZXJzLm1ldGhvZHMpIHsKICAgIGlmKG5hbWVzLmluZGV4T2YobWV0aG9kLm5hbWUpID09IC0xKSBuYW1lcy5wdXNoKG1ldGhvZC5uYW1lKTsKCiAgICBtZXRob2RzW21ldGhvZC5uYW1lXSA/Pz0gW107CiAgICBtZXRob2RzW21ldGhvZC5uYW1lXS5wdXNoKG1ldGhvZCk7CiAgfQoKICBmb3IobGV0IG5hbWUgb2YgbmFtZXMpIHsKICAgIGNvbnN0IG1ldGhvZGxpc3QgPSBtZXRob2RzW25hbWVdOwogICAgY29uc3QgW21ldGhvZF0gPSBtZXRob2RsaXN0OwoKICAgIGNvbnN0IHsgcGFyYW1ldGVycywgcmV0dXJuVHlwZSB9ID0gbWV0aG9kOwogICAgY29uc3QgY25hbWUgPSAnTUVUSE9EXycgKyBNYWtlSWQoZGVjYW1lbGl6ZShuYW1lLCAnXycpKS50b1VwcGVyQ2FzZSgpLnJlcGxhY2VBbGwoJ19fJywgJ194Jyk7CgogICAgb3V0LmZucyArPSBgICBKU19DRlVOQ19NQUdJQ19ERUYoIiR7bmFtZX0iLCAke3BhcmFtZXRlcnMubGVuZ3RofSwgIGpzXyR7Y2lkfV9tZXRob2QsICR7Y25hbWV9KSxcbmA7CiAgICBvdXQubWVudW0gKz0gYCAgJHtjbmFtZX0sXG5gOwogICAgb3V0Lm1mbiArPSBgICAgIGNhc2UgJHtjbmFtZX06IHtcbmA7CgogICAgaWYocGFyYW1ldGVycy5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnN0IHR5cGVzID0ge30sCiAgICAgICAgdG0gPSBuZXcgTWFwKCk7CiAgICAgIGxldCBpID0gMDsKCiAgICAgIGZvcihsZXQgW25hbWUgPSBgYXJnJHtpfWAsIHBhcmFtXSBvZiBwYXJhbWV0ZXJzKSB7CiAgICAgICAgY29uc3QgeyBkZXN1Z2FyZWQsIHF1YWxUeXBlIH0gPSBwYXJhbTsKCiAgICAgICAgbGV0IHR5cGUgPSBkZXN1Z2FyZWQgPz8gcXVhbFR5cGUgPz8gcGFyYW07CgogICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgY2FzZSAnaW50JzoKICAgICAgICAgICAgdHlwZSA9ICdpbnQzMl90JzsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICd1bnNpZ25lZCBpbnQnOgogICAgICAgICAgICB0eXBlID0gJ3VpbnQzMl90JzsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGNvbnNvbGUubG9nKCcnLCB7IG5hbWUsIHBhcmFtLCB0eXBlIH0pOwoKICAgICAgICB0eXBlc1t0eXBlXSA/Pz0gW107CiAgICAgICAgdHlwZXNbdHlwZV0ucHVzaChuYW1lKTsKCiAgICAgICAgdG0uc2V0KHR5cGUgKyAnJywgdHlwZSk7CgogICAgICAgICsraTsKICAgICAgfQoKICAgICAgY29uc3QgdG9fanN0eXBlID0gdHlwZSA9PiAoeyBpbnQ6ICdJbnQzMicsICd1bnNpZ25lZCBpbnQnOiAnVWludDMyJywgZG91YmxlOiAnRmxvYXQ2NCcsIGZsb2F0OiAnRmxvYXQ2NCcsIGludDMyX3Q6ICdJbnQzMicsIHVpbnQzMl90OiAnVWludDMyJywgaW50NjRfdDogJ0ludDY0JywgdWludDY0X3Q6ICdJbmRleCcgfVt0eXBlXSk7CgogICAgICBmb3IobGV0IHR5cGUgaW4gdHlwZXMpIHsKICAgICAgICBjb25zdCBqc3R5cGUgPSB0b19qc3R5cGUodHlwZSk7CiAgICAgICAgbGV0IHQgPSB0bS5nZXQodHlwZSk7CgogICAgICAgIGlmKGpzdHlwZSA9PSB1bmRlZmluZWQpIG91dC5tZm4gKz0gYCAgICBgICsgZGVjbCh0Py5wb2ludGVlID8/IHQgPz8gdHlwZSwgdHlwZXNbdHlwZV0uam9pbignLCAnKSkgKyAnXG4nOwogICAgICAgIGVsc2Ugb3V0Lm1mbiArPSBgICAgICAgJHt0eXBlfSAke3R5cGVzW3R5cGVdLmpvaW4oJywgJyl9O1xuYDsKICAgICAgfQoKICAgICAgb3V0Lm1mbiArPSBgXG5gOwoKICAgICAgaSA9IDA7CgogICAgICBmb3IobGV0IFtuYW1lID0gYGFyZyR7aX1gLCBwYXJhbV0gb2YgcGFyYW1ldGVycykgewogICAgICAgIGNvbnN0IHsgZGVzdWdhcmVkLCBxdWFsVHlwZSB9ID0gcGFyYW07CiAgICAgICAgbGV0IHR5cGUgPSBkZXN1Z2FyZWQgPz8gcXVhbFR5cGUgPz8gcGFyYW07CgogICAgICAgIGNvbnN0IGpzdHlwZSA9IHRvX2pzdHlwZSh0eXBlKTsKCiAgICAgICAgaWYoanN0eXBlID09IHVuZGVmaW5lZCkgb3V0Lm1mbiArPSBgICAgIGAgKyBhc3NpZ24odHlwZT8ucG9pbnRlZSA/PyB0eXBlLCBuYW1lKS5yZXBsYWNlQWxsKCdcbicsICdcbiAgICAnKSArICdcbic7CiAgICAgICAgZWxzZSBvdXQubWZuICs9IGAgICAgICBKU19UbyR7anN0eXBlfShjdHgsICYke25hbWV9LCBhcmd2WyR7aX1dKTtcbmA7CgogICAgICAgIC8vIGNvbnNvbGUubG9nKCcnLCB7IG5hbWUsIGRlc3VnYXJlZCwgdHlwZUFsaWFzIH0pOwogICAgICAgICsraTsKICAgICAgfQoKICAgICAgb3V0Lm1mbiArPSBgXG5gOwogICAgfQoKICAgIGxldCBwYXJhbXMgPSBbXTsKCiAgICBmb3IobGV0IFtuYW1lLCBwYXJhbV0gb2YgcGFyYW1ldGVycykgcGFyYW1zLnB1c2gobmFtZSA/PyAnb3RoZXInKTsKCiAgICBsZXQgY2FsbCA9IGBwdHItPiR7bmFtZX0oYCArIHBhcmFtcy5qb2luKCcsICcpICsgYClgOwoKICAgIGlmKHJldHVyblR5cGUpIHsKICAgICAgc3dpdGNoIChyZXR1cm5UeXBlICsgJycpIHsKICAgICAgICBjYXNlICd2b2lkJzoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdmbG9hdCc6CiAgICAgICAgY2FzZSAnZG91YmxlJzoKICAgICAgICAgIGNhbGwgPSBgcmV0ID0gSlNfTmV3RmxvYXQ2NChjdHgsICR7Y2FsbH0pYDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdpbnQnOgogICAgICAgIGNhc2UgJ2ludDMyX3QnOgogICAgICAgICAgY2FsbCA9IGByZXQgPSBKU19OZXdJbnQzMihjdHgsICR7Y2FsbH0pYDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICd1bnNpZ25lZCBpbnQnOgogICAgICAgIGNhc2UgJ3VpbnQzMl90JzoKICAgICAgICAgIGNhbGwgPSBgcmV0ID0gSlNfTmV3VWludDMyKGN0eCwgJHtjYWxsfSlgOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2xvbmcnOgogICAgICAgIGNhc2UgJ3Vuc2lnbmVkIGxvbmcnOgogICAgICAgIGNhc2UgJ2ludDY0X3QnOgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBjYWxsID0gYHJldCA9IEpTX05ld0ludDY0KGN0eCwgJHtjYWxsfSlgOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICBvdXQubWZuICs9IGAgICAgICAke2NhbGx9O1xuYDsKICAgIG91dC5tZm4gKz0gYCAgICAgIGJyZWFrO1xuICAgIH1cbmA7CiAgfQoKICBmb3IobGV0IGZpZWxkIG9mIG1lbWJlcnMuZmllbGRzKSB7CiAgICBjb25zdCB7IG5hbWUsIGRlc3VnYXJlZCwgdHlwZUFsaWFzLCBhY2Nlc3MsIHN0b3JhZ2VDbGFzcyB9ID0gZmllbGQ7CgogICAgaWYoc3RvcmFnZUNsYXNzID09ICdzdGF0aWMnKSBjb250aW51ZTsKICAgIGlmKGZpZWxkLmFzdC5zdG9yYWdlQ2xhc3MgPT0gJ3N0YXRpYycpIGNvbnRpbnVlOwoKICAgIGNvbnN0IGNuYW1lID0gJ1BST1BfJyArIE1ha2VJZChkZWNhbWVsaXplKG5hbWUsICdfJykpLnRvVXBwZXJDYXNlKCkucmVwbGFjZUFsbCgnX18nLCAnX3gnKTsKCiAgICBvdXQuZm5zICs9IGAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCIke25hbWV9IiwganNfJHtjaWR9X2dldCwganNfJHtjaWR9X3NldCwgJHtjbmFtZX0pLFxuYDsKICAgIG91dC5wZW51bSArPSBgICAke2NuYW1lfSxcbmA7CiAgICBvdXQucGdldCArPSBgICAgIGNhc2UgJHtjbmFtZX06IHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbmA7CiAgICBvdXQucHNldCArPSBgICAgIGNhc2UgJHtjbmFtZX06IHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbmA7CiAgfQoKICBmb3IobGV0IGVuIG9mIG1lbWJlcnMuZW51bXMpIHsKICAgIGNvbnN0IHsgbmFtZSwgbWVtYmVycyB9ID0gZW47CgogICAgLy9vdXQuZm5zICs9IGAgIC8qIGVudW0gJHtuYW1lfSAqL1xuYDsKCiAgICBmb3IobGV0IFtuYW1lLCB2YWx1ZV0gb2YgbWVtYmVycykgewogICAgICBvdXQuZm5zICs9IGAgIEpTX1BST1BfSU5UNjRfREVGKCIke25hbWV9IiwgJHt2YWx1ZX0sIEpTX1BST1BfQ09ORklHVVJBQkxFKSxcbmA7CiAgICB9CiAgfQoKICBvdXQuZm5zICs9IGAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiJHtjbmFtZX0iLCBKU19QUk9QX0NPTkZJR1VSQUJMRSksXG5gOwoKICBvdXQuZm5zICs9IGB9O1xuYDsKICBvdXQubWVudW0gKz0gYH07XG5gOwogIG91dC5wZW51bSArPSBgfTtcbmA7CgogIG91dC5wZ2V0ICs9IGAgIH1cblxuICByZXR1cm4gcmV0O1xufTtcbmA7CiAgb3V0LnBzZXQgKz0gYCAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuYDsKICBvdXQubWZuICs9IGAgIH1cblxuICByZXR1cm4gcmV0O1xufTtcbmA7CgogIHJldHVybiBvdXQubWVudW0gKyBgXG5gICsgb3V0Lm1mbiArIGBcbmAgKyAobWVtYmVycy5maWVsZHMubGVuZ3RoID4gMCA/IG91dC5wZW51bSArIGBcbmAgKyBvdXQucGdldCArIGBcbmAgKyBvdXQucHNldCArIGBcbmAgOiAnJykgKyBvdXQuZm5zOwp9Cgphc3luYyBmdW5jdGlvbiBBU1RTaGVsbCguLi5hcmdzKSB7CiAgbGV0IGluc3BlY3RPcHRpb25zID0gewogICAgZGVwdGg6IDIsCiAgICAvKmJyZWFrTGVuZ3RoOiAyNDAsICovIGN1c3RvbUluc3BlY3Q6IHRydWUsCiAgICBjb21wYWN0OiBmYWxzZSwKICAgIGRlcHRoOiBJbmZpbml0eSwKICAgIG1heEFycmF5TGVuZ3RoOiBJbmZpbml0eSwKICAgIGhpZGVLZXlzOiBbJ2xvYycsICdyYW5nZSddLAogIH07CgogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsgaW5zcGVjdE9wdGlvbnMgfSk7CgogIGdsb2JhbFRoaXMuZmlsZXMgPSBmaWxlcyA9IHt9OwoKICBiYXNlID0gcGF0aC5iYXNlbmFtZShzY3JpcHRBcmdzWzBdLCAnLmpzJykucmVwbGFjZSgvXC5bYS16XSokLywgJycpOwogIGNtZGhpc3QgPSBgLiR7YmFzZX0tY21kaGlzdG9yeWA7CiAgY29uZmlnID0gYC4ke2Jhc2V9LWNvbmZpZ2A7CgogIHBhcmFtcyA9IGdsb2JhbFRoaXMucGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICBpbmNsdWRlOiBbdHJ1ZSwgKGEsIHApID0+IChwIHx8IFtdKS5jb25jYXQoW2FdKSwgJ0knXSwKICAgICAgZGVmaW5lOiBbdHJ1ZSwgKGEsIHApID0+IChwIHx8IFtdKS5jb25jYXQoW2FdKSwgJ0QnXSwKICAgICAgbGliczogW3RydWUsIChhLCBwKSA9PiAocCB8fCBbXSkuY29uY2F0KFthXSksICdsJ10sCiAgICAgIGRlYnVnOiBbZmFsc2UsIG51bGwsICd4J10sCiAgICAgIGZvcmNlOiBbZmFsc2UsIG51bGwsICdmJ10sCiAgICAgIHRhcmdldDogW3RydWUsIG51bGwsICd0J10sCiAgICAgIGV4ZWM6IFt0cnVlLCBudWxsLCAnZSddLAogICAgICAnc3lzdGVtLWluY2x1ZGVzJzogW2ZhbHNlLCBudWxsLCAncyddLAogICAgICAnbm8tcmVtb3ZlLWVtcHR5JzogW2ZhbHNlLCBudWxsLCAnRSddLAogICAgICAnb3V0cHV0LWRpcic6IFt0cnVlLCBudWxsLCAnZCddLAogICAgICBjb21waWxlcjogWydjbGFuZycsIG51bGwsICdjJ10sCiAgICAgICdAJzogJ2lucHV0JywKICAgIH0sCiAgICBhcmdzLAogICk7CgogIGRlZnMgPSBwYXJhbXMuZGVmaW5lIHx8IFtdOwogIGluY2x1ZGVzID0gcGFyYW1zLmluY2x1ZGUgfHwgW107CiAgbGlicyA9IHBhcmFtcy5saWJzIHx8IFtdOwogIHNvdXJjZXMgPSBwYXJhbXNbJ0AnXSB8fCBbXTsKCiAgZGVmaW5lKGdsb2JhbFRoaXMsIHsKICAgIGRlZnMsCiAgICBpbmNsdWRlcywKICAgIGxpYnMsCiAgICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IGZsYWdzKCkgewogICAgICByZXR1cm4gWyAuLi4ocGFyYW1zLnRhcmdldD8gW2AtLXRhcmdldD0ke3BhcmFtcy50YXJnZXR9YF0gOiBbXSksICAuLi5pbmNsdWRlcy5maWx0ZXIodiA9PiB0eXBlb2YgdiA9PSAnc3RyaW5nJykubWFwKHYgPT4gYC1JJHt2fWApLCAuLi5kZWZzLm1hcChkID0+IGAtRCR7ZH1gKSwgLi4ubGlicy5tYXAobCA9PiBgLWwke2x9YCldOwogICAgfSwKICB9KTsKCiAgYXN5bmMgZnVuY3Rpb24gQ29tcGlsZShmaWxlLCAuLi5hcmdzKSB7CiAgICBsZXQgcjsKCiAgICAvKiBpZihwYXJhbXMudGFyZ2V0KQogICAgICBhcmdzLnVuc2hpZnQoYC0tdGFyZ2V0PSR7cGFyYW1zLnRhcmdldH1gKTsqLwoKICAgIHRyeSB7CiAgICAgIHIgPSBnbG9iYWxUaGlzLnIgPSBhd2FpdCBBc3REdW1wKHBhcmFtcy5jb21waWxlciwgZmlsZSwgWy4uLmdsb2JhbFRoaXMuZmxhZ3MsIC4uLmFyZ3NdLCBwYXJhbXMuZm9yY2UpOwogICAgfSBjYXRjaChlKSB7CiAgICAgIGNvbnNvbGUubG9nKCdDb21waWxlIEVSUk9SOicsIGUubWVzc2FnZSArICdcbicgKyBlLnN0YWNrKTsKICAgICAgcmV0dXJuIGU7CiAgICB9CiAgICByLnNvdXJjZSA9IGZpbGU7CgogICAgZ2xvYmFsVGhpcy5maWxlc1tmaWxlXSA9IHI7CgogICAgbGV0IGFzdDJwYXRoID0gbWFwV3JhcHBlcihuZXcgV2Vha01hcCgpKTsKCiAgICBkZWZpbmUociwgewogICAgICBzZWxlY3QobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkgewogICAgICAgIHJldHVybiB0aGlzLmRhdGEuaW5uZXIuZmlsdGVyKG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkKSk7CiAgICAgIH0sCiAgICAgIGdldEJ5SWRPck5hbWUobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkgewogICAgICAgIGxldCBub2RlID0gdGhpcy5kYXRhLmlubmVyLmZpbmRMYXN0KG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkKSk7CgogICAgICAgIG5vZGUgPz89IHRoaXMuY2xhc3Nlcy5maW5kTGFzdChuYW1lT3JJZFByZWQobmFtZV9vcl9pZCwgcHJlZCkpOwogICAgICAgIG5vZGUgPz89IERlZXBGaW5kKHRoaXMuZGF0YSwgbmFtZU9ySWRQcmVkKG5hbWVfb3JfaWQsIHByZWQpKTsKICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgfSwKICAgICAgZ2V0VHlwZTogbWVtb2l6ZShmdW5jdGlvbiBnZXRUeXBlKG5hbWVfb3JfaWQpIHsKICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5nZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIG4gPT4gIS8oRnVuY3Rpb25EZWNsfE5hbWVzcGFjZURlY2wpLy50ZXN0KG4ua2luZCkgJiYgL0RlY2wvLnRlc3Qobi5raW5kKSk7CiAgICAgICAgLy9sZXQgcmVzdWx0ID0gdGhpcy5nZXROYW1lc3BhY2UobmFtZV9vcl9pZCwgdGhpcy5kYXRhLCBuID0+ICEvKEZ1bmN0aW9uRGVjbCkvLnRlc3Qobi5raW5kKSAmJiAvRGVjbC8udGVzdChuLmtpbmQpKTsKCiAgICAgICAgcmVzdWx0ID8/PSBHZXRUeXBlKG5hbWVfb3JfaWQsIHRoaXMuZGF0YSk7CgogICAgICAgIGlmKHJlc3VsdCkgewogICAgICAgICAgbGV0IHR5cGUgPSBUeXBlRmFjdG9yeShyZXN1bHQsIHRoaXMuZGF0YSk7CiAgICAgICAgICBpZih0eXBlKSByZXN1bHQgPSB0eXBlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfSksCiAgICAgIGdldE5hbWVzcGFjZShhcmcsIHJvb3QgPSB0aGlzLmRhdGEsIHByZWRpY2F0ZSA9ICgpID0+IHRydWUpIHsKICAgICAgICByZXR1cm4gR2V0TmFtZXNwYWNlKGFyZywgcm9vdCwgcHJlZGljYXRlKTsKICAgICAgfSwKICAgICAgbmFtZXNwYWNlT2Yobm9kZSkgewogICAgICAgIHJldHVybiBOYW1lc3BhY2VPZihub2RlPy5hc3QgPz8gbm9kZSwgdGhpcy5kYXRhKTsKICAgICAgfSwKICAgICAgZ2V0Q2xhc3M6IG1lbW9pemUoZnVuY3Rpb24gZ2V0Q2xhc3MobmFtZV9vcl9pZCkgewogICAgICAgIHJldHVybiBHZXRDbGFzcyhuYW1lX29yX2lkLCB0aGlzLmRhdGEpOwogICAgICB9KSwKICAgICAgZ2V0RnVuY3Rpb24obmFtZV9vcl9pZCkgewogICAgICAgIGxldCByZXN1bHQgPSBpc05vZGUobmFtZV9vcl9pZCkgPyBuYW1lX29yX2lkIDogdGhpcy5nZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIG4gPT4gLyhGdW5jdGlvbkRlY2wpLy50ZXN0KG4ua2luZCkpOwoKICAgICAgICBpZihyZXN1bHQpIHJldHVybiBuZXcgRnVuY3Rpb25EZWNsKHJlc3VsdCwgdGhpcy5kYXRhKTsKICAgICAgfSwKICAgICAgZ2V0VmFyaWFibGUobmFtZV9vcl9pZCkgewogICAgICAgIGxldCByZXN1bHQgPSBpc05vZGUobmFtZV9vcl9pZCkgPyBuYW1lX29yX2lkIDogdGhpcy5nZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIG4gPT4gLyhWYXJEZWNsKS8udGVzdChuLmtpbmQpKTsKCiAgICAgICAgaWYocmVzdWx0KSByZXR1cm4gbmV3IFZhckRlY2wocmVzdWx0LCB0aGlzLmRhdGEpOwogICAgICB9LAogICAgICBnZXRMb2Mobm9kZSkgewogICAgICAgIHJldHVybiBDb21wbGV0ZUxvY2F0aW9uKG5vZGUpOwogICAgICB9LAogICAgfSk7CgogICAgZGVmaW5lR2V0dGVyKAogICAgICByLAogICAgICAndHJlZScsCiAgICAgIG1lbW9pemUoKCkgPT4gbmV3IFRyZWUoci5kYXRhKSksCiAgICApOwogICAgcmV0dXJuIGRlZmluZShyLCB7CiAgICAgIHBhdGhPZihuZWVkbGUsIG1heERlcHRoID0gMTApIHsKICAgICAgICBsZXQgcCA9IGFzdDJwYXRoKG5lZWRsZT8uYXN0ID8/IG5lZWRsZSk7CiAgICAgICAgaWYocCkgcmV0dXJuIHA7CgogICAgICAgIGlmKCdhc3QnIGluIG5lZWRsZSkgbmVlZGxlID0gbmVlZGxlLmFzdDsKCiAgICAgICAgZm9yKGxldCBbbm9kZSwgcGF0aF0gb2YgRGVlcFNlbGVjdChyLmRhdGEsIG4gPT4gdHlwZW9mIG4gPT0gJ29iamVjdCcgJiYgbiAhPSBudWxsLCBkZWVwLlJFVFVSTl9WQUxVRV9QQVRILCBtYXhEZXB0aCkpIGlmKG5vZGUgPT09IG5lZWRsZSkgcmV0dXJuIG5ldyBQb2ludGVyKHBhdGgpOwogICAgICB9LAogICAgfSk7CiAgfQoKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIERlZXBTZWxlY3QsCiAgICBEZWVwR2V0LAogICAgRGVlcEZpbmQsCiAgICBEZWVwUGF0aE9mLAogICAgU0laRU9GX1BPSU5URVIsCiAgICBUeXBlLAogICAgUG9pbnRlclR5cGUsCiAgICBSZWZlcmVuY2VUeXBlLAogICAgRmllbGREZWNsLAogICAgTmFtZUZvciwKICAgIEFzdER1bXAsCiAgICBTb3VyY2VEZXBlbmRlbmNpZXMsCiAgICBOb2RlUHJpbnRlciwKICAgIE5vZGVUeXBlLAogICAgTm9kZU5hbWUsCiAgICBHZXRMb2MsCiAgICBSYXdMb2NhdGlvbiwKICAgIENvbXBsZXRlTG9jYXRpb24sCiAgICBSYXdSYW5nZSwKICAgIENvbXBsZXRlUmFuZ2UsCiAgICBHZXRUeXBlU3RyLAogICAgUHJpbnRSYW5nZSwKICAgIE92ZXJsYXBSYW5nZSwKICAgIFBhcmVudE5vZGUsCiAgICBOZXh0U2libGluZywKICAgIFByZXZpb3VzU2libGluZywKICAgIEZpcnN0Q2hpbGQsCiAgICBMYXN0Q2hpbGQsCiAgICBHZW5lcmF0ZUluc3BlY3RTdHJ1Y3QsCiAgICBHZW5lcmF0ZVN0cnVjdENsYXNzLAogICAgSW5zcGVjdFN0cnVjdCwKICAgIE1ha2VTdHJ1Y3RDbGFzcywKICAgIERpckl0ZXJhdG9yLAogICAgUmVjdXJzaXZlRGlySXRlcmF0b3IsCiAgICBJbmNsdWRlQWxsLAogICAgVGVybWluYWwsCiAgICBQcmludEFzdCwKICAgIENvbmNhdEl0ZXJhdG9yLAogICAgU3RyaW5nR2VuZXJhdG9yLAogICAgUmVhZEZpbGUsCiAgICBXcml0ZUZpbGUsCiAgICBNYWtlRkZJLAogICAgTWFrZVF1aWNrSlNDbGFzcywKICAgIFBhcnNlRUNNQVNjcmlwdCwKICAgIFByaW50RUNNQVNjcmlwdCwKICAgIFByb2Nlc3NGaWxlLAogICAgdG9BcnJheUJ1ZmZlciwKICAgIHRvU3RyaW5nLAogICAgQ29uc3RhbnRzLAogICAgUHJpbnRDQXJyYXksCiAgICBHZXRQYXJhbXMsCiAgICBMaXN0LAogICAgU2hlbGwsCiAgICBQYXJzZVN0cnVjdHMsCiAgfSk7CgogIFBvaW50ZXIucHJvdG90eXBlLmNoYWluID0gZnVuY3Rpb24oc3RlcCwgbGltaXQgPSBJbmZpbml0eSkgewogICAgbGV0IHB0ciA9IHRoaXMsCiAgICAgIHJldCA9IFtdLAogICAgICBsZW4gPSBwdHIubGVuZ3RoOwoKICAgIGZvcig7OykgewogICAgICBpZihyZXQubGVuZ3RoID49IGxpbWl0KSBicmVhazsKICAgICAgcmV0LnVuc2hpZnQocHRyKTsKCiAgICAgIGxlbiAtPSBzdGVwOwogICAgICBpZihsZW4gPD0gMCkgYnJlYWs7CiAgICAgIHB0ciA9IHB0ci5zbGljZSgwLCAtc3RlcCk7CiAgICB9CgogICAgcmV0dXJuIHJldDsKICB9OwoKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIFBvaW50ZXIsCiAgICBUcmVlLAogICAgZGVlcCwKICAgIHBhdGgsCiAgICBDb21waWxlLAogICAgU2VsZWN0TG9jYXRpb25zLAogICAgTG9jYXRpb25TdHJpbmcsCiAgICBUYWJsZSwKICAgIFN0cnVjdHMsCiAgICBOb2RlLAogICAgVHlwZSwKICAgIFJlY29yZERlY2wsCiAgICBFbnVtRGVjbCwKICAgIFR5cGVkZWZEZWNsLAogICAgVmFyRGVjbCwKICAgIEZpbmRUeXBlLAogICAgSGllciwKICAgIFBhdGhPZiwKICAgIEZ1bmN0aW9uRGVjbCwKICAgIExvY2F0aW9uLAogICAgUmFuZ2UsCiAgICBUeXBlRmFjdG9yeSwKICAgIFNwYXduQ29tcGlsZXIsCiAgICBBc3REdW1wLAogICAgTm9kZVR5cGUsCiAgICBOb2RlTmFtZSwKICAgIEdldExvYywKICAgIEdldENsYXNzLAogICAgR2V0QmFzZXMsCiAgICBHZXRCeU5hbWUsCiAgICBHZXROYW1lc3BhY2UsCiAgICBOYW1lc3BhY2VPZiwKICAgIEdldFR5cGUsCiAgICBHZXRUeXBlU3RyLAogICAgR2V0VHlwZU5vZGUsCiAgICBHZXRGaWVsZHMsCiAgICBQYXRoUmVtb3ZlTG9jLAogICAgRkZJX0Z1bmN0aW9uLAogICAgbGliZGlycywKICAgIGxpYmRpcnMzMiwKICAgIGxpYmRpcnM2NCwKICAgIExpYnJhcnlFeHBvcnRzLAogICAgTWVtYmVyTmFtZXMsCiAgICBHZXRJbXBvcnRzLAogICAgR2V0SWRlbnRpZmllcnMsCiAgICBOYW1lc3BhY2VzLAogICAgVW5zZXRMb2MsCiAgfSk7CiAgLy9nbG9iYWxUaGlzLlV0aWwgPSBVdGlsOwogIGdsb2JhbFRoaXMuRiA9IGFyZyA9PiAkLmdldEZ1bmN0aW9uKGFyZyk7CiAgZ2xvYmFsVGhpcy5UID0gYXJnID0+ICQuZ2V0VHlwZShhcmcpOwoKICBsYXp5UHJvcGVydHkoZ2xvYmFsVGhpcywgJ1AnLCAoKSA9PiB7CiAgICBsZXQgcHJpbnRlciA9IE5vZGVQcmludGVyKCQuZGF0YSk7CgogICAgcmV0dXJuIG5vZGUgPT4gewogICAgICBpZignYXN0JyBpbiBub2RlKSBub2RlID0gbm9kZS5hc3Q7CiAgICAgIHByaW50ZXIuY2xlYXIoKTsKICAgICAgcmV0dXJuIHByaW50ZXIucHJpbnQobm9kZSk7CiAgICB9OwogIH0pOwoKICAvL2NvbnNvbGUubG9nKCdMb2FkaW5nIGhpc3RvcnknKTsKCiAgY29uc3QgdW5pdGhpc3QgPSBgLiR7YmFzZX0tdW5pdGhpc3RvcnlgOwogIGxldCBpdGVtcyA9IFtdLAogICAgaGlzdCA9IFJlYWRKU09OKHVuaXRoaXN0KSB8fCBbXTsKCiAgY29uc29sZS5sb2coJ0xvYWRpbmcgc291cmNlczonICsgc291cmNlcy5tYXAocyA9PiAnICcgKyBzKS5qb2luKCcsJykpOwoKICBnbG9iYWxUaGlzWydfJ10gPSBpdGVtczsKCiAgZm9yKGxldCBzb3VyY2Ugb2Ygc291cmNlcykgewogICAgbGV0IGl0ZW0gPSBhd2FpdCBQcm9jZXNzRmlsZShzb3VyY2UpOwoKICAgIGdsb2JhbFRoaXNbJyQnXSA9IGl0ZW07CgogICAgLyppZigvXC5qcyQvLnRlc3Qoc291cmNlKSkgaXRlbSA9IFBhcnNlRUNNQVNjcmlwdChzb3VyY2UpOwogICAgZWxzZSBpdGVtID0gYXdhaXQgQ29tcGlsZShzb3VyY2UpOyovCgogICAgaWYoaXRlbSkgewogICAgICBwdXNoVW5pcXVlKGhpc3QsIFsuLi5mbGFncywgc291cmNlXSk7CiAgICAgIGl0ZW1zLnB1c2goaXRlbSk7CiAgICB9CiAgfQoKICBXcml0ZUZpbGUodW5pdGhpc3QsIEpTT04uc3RyaW5naWZ5KGhpc3QsIG51bGwsIDIpKTsKCiAgLy8gZ2xvYmFsVGhpcy4kID0gaXRlbXMubGVuZ3RoID09IDEgPyBpdGVtc1swXSA6IGl0ZW1zOwogIGF3YWl0IENvbW1hbmRMaW5lKCk7Cn0KCmxldCBlcnJvcjsKCnRyeSB7CiAgY29uc3QgYXJndiA9IHNjcmlwdEFyZ3Muc2xpY2UoMSk7CiAgQVNUU2hlbGwoLi4uYXJndik7Cn0gY2F0Y2goZSkgewogIGVycm9yID0gZTsKfSBmaW5hbGx5IHsKICBpZihlcnJvcikgewogICAgY29uc29sZS5sb2coJ0ZBSUw6ICcgKyBlcnJvci5tZXNzYWdlLCAnXG4gICcgKyBuZXcgU3RhY2soZXJyb3Iuc3RhY2ssIGZyID0+IGZyLmZ1bmN0aW9uTmFtZSAhPSAnZXNmYWN0b3J5JykudG9TdHJpbmcoKS5yZXBsYWNlKC9cbi9nLCAnXG4gICcpKTsKICAgIGNvbnNvbGUubG9nKCdGQUlMJyk7CiAgICBzdGQuZXhpdCgxKTsKICB9Cn0KAAAAAAAAAAC7sgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVlwAAAAAAABWXAAAAAAAAAAAAAACAcEA"
				],
				[
					2855,
					1,
					"revert",
					null,
					"",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9AgAAAAAAAD0CAAAAAAAAAAAAAAAAAAA"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs2/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/soundcloud-tracks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/janos/Projects/plot-cv/out.gz",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fsPromises.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-magic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pgsql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-list.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-serial.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-directory.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_pton.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharnessreport.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/streams/readable-streams/async-iterator.any.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharness.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/strverscmp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/memmem.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_ntop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/getdents.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/clock_gettime.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pgsql.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-llvm/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-release/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser/ebnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/bnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_blob.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_predicate.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_op_overloading.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/bin/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/bin/resolve-imports.js"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"try_run",
			"run\\b",
			"GetClass",
			"ast2np",
			"NamespaceOf",
			"GetClass",
			"DeepSelect",
			"nameOrIdPred",
			"GetByName",
			"nameOrIdPred",
			"DeepFind",
			"members",
			"\\bmembers\\b",
			"get members",
			"getType",
			"\\bimport\\b[^\\n]*\\bTree(Iterator|Walker)\\b[^\\n]*\\bfrom\\b",
			"\\bTree(Iterator|Walker)\\b.*\\bfrom\\b",
			"Tree(Iterator|Walker)",
			"isMap",
			"}\n",
			"WriteJS",
			"ReadJSON",
			"WriteJS",
			"ReadJSON",
			"class Location",
			"Location",
			"Location\\b",
			"TYPE_BIG_INT",
			"fs\\.",
			"fs'",
			"Symbol.for",
			"Newer",
			"remove",
			"fs\\.",
			"Writing",
			"base =",
			"unithist",
			"'FunctionDecl",
			"No such",
			"'Type.cons",
			"GetClass",
			"getClass",
			"nameOrIdPred",
			"Deep(Find|Select)\\(",
			"Deep(Find|Select).*name ==",
			"DeepFind.*name ==",
			"DeepFind",
			"decl\\(",
			"\n        ",
			"EnumDecl",
			"class EnumDecl",
			"EnumDecl",
			"ions.get",
			"ions.set",
			"GetClass",
			"getClass",
			"'Type.cons",
			"completeDef",
			"MakeId",
			"cid =",
			"GetByName",
			"GetClass",
			"getClass",
			"GetByName",
			"GetBasese",
			"GetByName",
			"Object.assign",
			"mapFunction\\b",
			"function Get",
			"NameFor",
			"DeepPathOf",
			"deep.pathOf",
			"NamespaceOf",
			"function NamespaceOf",
			"node2path",
			"deep\\.",
			"deep\\.get",
			"deep\\..get",
			"deep\\.",
			"deep\\.get",
			"deep.get",
			"deep\\.",
			"deep\\.select",
			"deep\\.",
			"deep\\.pathOf",
			"deep.pathOf",
			"export const ([\\w]+) = (\\(?)(.*[^)])(\\)?) => {",
			"export const ([\\w]+) = (\\(?)(.*)(\\)?) => {",
			"export const ([\\w]+) = (\\(?)(.*)(\\)?) => {\n",
			"pathOf",
			"deep\\.",
			"deep\\.find",
			"\n      ",
			"deep\\.find",
			"DeepFind",
			"DeepFind.*RETURN_",
			"deep\\.find",
			"deep.find",
			"DeepFind",
			"deep.find",
			"DeepFind.*RETURN",
			"DeepFind",
			"deep\\.find",
			"\\= \\$\\.data",
			"class Type\\b",
			"RecordDecl",
			"new RecordDecl",
			"= \\$\\.data",
			"NamespaceOf",
			"new RecordDecl",
			"NameFor",
			"class RecordDecl",
			"NameFor",
			"RecordDecl",
			"NamespaceOf",
			"class FunctionDecl",
			"new FunctionDecl",
			"GetClass",
			"class Type\\b",
			"'Access'",
			"storageClass",
			"new Type\\b",
			"WeakMap",
			"'CXX",
			"class FieldDecl",
			"class PointerType",
			"FieldDecl",
			"'FieldDecl"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"DeepGet",
			"DeepPathOf",
			"export function \\1(\\3) {",
			"DeepFind",
			"= globalThis['\\$'].data",
			"= globalThis['$'].data",
			"namespaceOf"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": null,
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747022161.66,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "clang-list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8043,
						"regions":
						{
						},
						"selection":
						[
							[
								251,
								255
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 5,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747489058.67,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 87577,
						"regions":
						{
						},
						"selection":
						[
							[
								84538,
								84546
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2833,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747501692.09,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 56340.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "compile_commands.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5596,
						"regions":
						{
						},
						"selection":
						[
							[
								3981,
								3981
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 124,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747502616.41,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2001.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/compileCommand.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11491,
						"regions":
						{
						},
						"selection":
						[
							[
								3517,
								3517
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 120,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747502640.04,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2040.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 266586,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								265827,
								265827
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 5216,
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1747502629.89,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 126280.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "io-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6588,
						"regions":
						{
						},
						"selection":
						[
							[
								3784,
								3784
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 141,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747488901.31,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2256.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "mozdev.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2478,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"auto_name": "import { Parser } from 'dom';",
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747488900.59,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "quickjs/qjs-modules/lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 70174,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										30564,
										30568
									],
									[
										30618,
										30622
									],
									[
										31110,
										31114
									],
									[
										33338,
										33342
									],
									[
										33536,
										33540
									],
									[
										33767,
										33771
									],
									[
										34830,
										34834
									],
									[
										34943,
										34947
									],
									[
										35141,
										35145
									],
									[
										35225,
										35229
									],
									[
										35334,
										35338
									],
									[
										35562,
										35566
									],
									[
										35624,
										35628
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										30549,
										30549
									],
									[
										30573,
										30573
									],
									[
										31104,
										31104
									],
									[
										33312,
										33312
									],
									[
										33498,
										33498
									],
									[
										33736,
										33736
									],
									[
										34818,
										34818
									],
									[
										34933,
										34933
									],
									[
										35131,
										35131
									],
									[
										35182,
										35182
									],
									[
										35295,
										35295
									],
									[
										35536,
										35536
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										30557,
										30562
									],
									[
										30609,
										30614
									],
									[
										31063,
										31068
									],
									[
										33331,
										33336
									],
									[
										33517,
										33522
									],
									[
										33526,
										33531
									],
									[
										33760,
										33765
									],
									[
										34811,
										34816
									],
									[
										34920,
										34925
									],
									[
										35090,
										35095
									],
									[
										35218,
										35223
									],
									[
										35360,
										35365
									],
									[
										35555,
										35560
									],
									[
										35617,
										35622
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										30549,
										30549
									],
									[
										30573,
										30573
									],
									[
										31057,
										31057
									],
									[
										33312,
										33312
									],
									[
										33498,
										33498
									],
									[
										33736,
										33736
									],
									[
										34799,
										34799
									],
									[
										34910,
										34910
									],
									[
										35080,
										35080
									],
									[
										35182,
										35182
									],
									[
										35295,
										35295
									],
									[
										35536,
										35536
									]
								],
								"scope": "col_gutter"
							},
							"col_00FFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										31157,
										31161
									]
								],
								"scope": "col_00FFFFFF"
							},
							"col_00FFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00FFFFFF_circle.png",
								"regions":
								[
									[
										31151,
										31151
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										31019,
										31024
									],
									[
										32012,
										32017
									],
									[
										33437,
										33442
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										31013,
										31013
									],
									[
										31994,
										31994
									],
									[
										33426,
										33426
									]
								],
								"scope": "col_gutter"
							},
							"col_808080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										32021,
										32025
									],
									[
										32031,
										32035
									]
								],
								"scope": "col_808080FF"
							},
							"col_808080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_808080FF_circle.png",
								"regions":
								[
									[
										31994,
										31994
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										30552,
										30555
									],
									[
										30602,
										30605
									],
									[
										31042,
										31045
									],
									[
										33326,
										33329
									],
									[
										33509,
										33512
									],
									[
										33557,
										33560
									],
									[
										33617,
										33620
									],
									[
										33697,
										33700
									],
									[
										33755,
										33758
									],
									[
										34794,
										34797
									],
									[
										34873,
										34876
									],
									[
										34928,
										34931
									],
									[
										34950,
										34953
									],
									[
										35045,
										35048
									],
									[
										35213,
										35216
									],
									[
										35386,
										35389
									],
									[
										35550,
										35553
									],
									[
										35612,
										35615
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										30549,
										30549
									],
									[
										30573,
										30573
									],
									[
										31036,
										31036
									],
									[
										33312,
										33312
									],
									[
										33498,
										33498
									],
									[
										33544,
										33544
									],
									[
										33604,
										33604
									],
									[
										33667,
										33667
									],
									[
										33736,
										33736
									],
									[
										34782,
										34782
									],
									[
										34863,
										34863
									],
									[
										34910,
										34910
									],
									[
										34933,
										34933
									],
									[
										35035,
										35035
									],
									[
										35182,
										35182
									],
									[
										35295,
										35295
									],
									[
										35536,
										35536
									]
								],
								"scope": "col_gutter"
							},
							"col_FF00FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										31132,
										31139
									]
								],
								"scope": "col_FF00FFFF"
							},
							"col_FF00FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF00FFFF_circle.png",
								"regions":
								[
									[
										31126,
										31126
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										31086,
										31092
									]
								],
								"scope": "col_FFFF00FF"
							},
							"col_FFFF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFF00FF_circle.png",
								"regions":
								[
									[
										31080,
										31080
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										31179,
										31184
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										31173,
										31173
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								26451,
								26456
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 921,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747488900.97,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14389.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "ast-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46678,
						"regions":
						{
						},
						"selection":
						[
							[
								41851,
								41863
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1501,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747490506.23,
							"tabs_extra_last_activated_sheet_index": -1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 29700.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.764828128058,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.coffeecompile_output":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"compile_commands.js"
			],
			[
				"compileCommand",
				"lib/compileCommand.js"
			],
			[
				"command",
				"compile_commands.js"
			],
			[
				"lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"lib/deep",
				"lib/deep.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"clang-",
				"clang-list.js"
			],
			[
				"sound",
				"soundcloud-tracks.js"
			],
			[
				"out",
				"out.gz"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"queue.c",
				"src/queue.c"
			],
			[
				"queue.h",
				"include/queue.h"
			],
			[
				"mysql",
				"tests/test_mysql.js"
			],
			[
				"child-",
				"src/child-process.c"
			],
			[
				"quickjs-chil",
				"quickjs-child-process.c"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"pointer",
				"lib/pointer.js"
			],
			[
				"predicate.c",
				"src/predicate.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"char-ut",
				"include/char-utils.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"css3",
				"lib/css3-selectors.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"pointer.js",
				"lib/pointer.js"
			],
			[
				"extendArra",
				"lib/extendArray.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"xml-shell",
				"xml-shell.js"
			],
			[
				"cmake/",
				"cmake/QuickJSModule.cmake"
			],
			[
				"quickjs-arc",
				"quickjs-archive.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"vfs",
				"lib/vfs.js"
			],
			[
				"quickjs-que",
				"quickjs-queue.c"
			],
			[
				"archive.h",
				"libarchive/libarchive/archive.h"
			],
			[
				"sz",
				"/tmp/sz.js"
			],
			[
				"archive_en",
				"libarchive/libarchive/archive_entry.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"archive_write_open_fil",
				"libarchive/libarchive/archive_write_open_filename.c"
			],
			[
				"vfs.j",
				"lib/vfs.js"
			],
			[
				"cutils",
				"~/Projects/plot-cv/quickjs/cutils.c"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
