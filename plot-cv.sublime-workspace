{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"getOwn",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			],
			[
				"arg",
				"argc"
			],
			[
				"instru",
				"instrument"
			],
			[
				"defaul",
				"defaultExport"
			],
			[
				"getBy",
				"getByIdOrName"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "FileTime(filename)\nNewer(file, ...other)\n  other =>\nOlder(file, other)\nGetSubscripts(str)\n  m =>\nTrimSubscripts(str, sub)\nList\n  constructor(...args)\n  filter(callback, thisArg = null)\n  callback = elem =>\n  get first()\n  elem =>\n  entries()\n  keys()\n  values()\n  toArray()\n(a, n) =>\nList\nNode\n  constructor(ast)\n  static get(ast)\n  get ast()\n  get id()\n  get loc()\n  get file()\n  (v,k) =>\n  (v,k) =>\n  get range()\n  r =>\n  toJSON(obj)\n(node, ast) =>\nPathOf(node, ast = $.data)\n  n =>\nHier(node_or_path, ast = $.data)\n  p =>\n([p, n]) =>\n  ([p, n]) =>\nFindType(typeName, ast = $.data)\n([tok]) =>\n  n =>\n  node =>\nType\n  constructor(node, ast)\n  n =>\n  n =>\n  (n, p) =>\n  get regExp()\n  isEnum()\n  isPointer()\n  isFunction()\n  isArray()\n  arrayOf()\n  get subscripts()\n  trimSubscripts()\n  get pointer()\n  getPointer(ast)\n  n =>\n  get unsigned()\n  get signed()\n  isCompound()\n  isFloatingPoint()\n  get alias()\n  get aliases()\n  isEnum()\n  isString()\n  get ffi()\n  get size()\n  toJS()\n  toJSON(obj)\n  static get(name_or_id, ast = $.data)\n  node =>\n  node =>\nRoundTo(value, align)\nRecordDecl\n  constructor(node, ast)\n  child =>\n  child =>\n  node =>\n(acc, node) =>\n  i =>\n  n =>\n  n =>\n  get size()\n(acc,[name,type]) =>\n  toJSON()\n([name, member]) =>\nEnumDecl\n  constructor(node, ast)\n  child =>\n({ name, type, inner }) =>\n  toJSON()\nTypedefDecl\n  constructor(node, ast)\n  n =>\n  (v, k) =>\n  n =>\n  n =>\n  n =>\n  get size()\n  toJSON()\nFieldDecl\n  constructor(node, ast)\n  n =>\nFunctionDecl\n  constructor(node, ast)\n  child =>\n  child =>\n  n =>\n({ name, type }) =>\n  toJSON()\nVarDecl\n  constructor(node, ast)\n  toJSON()\nClassDecl\nBuiltinType\n  constructor(node, ast)\nPointerType\n  constructor(node, ast)\n  toJSON()\nConstantArrayType\n  constructor(node, ast)\n  toJSON()\nLocation\n  constructor(loc)\n  (t, ...c) =>\n'\\x1b[m' : t =>\n  toString()\n  localeCompare(other)\nTypeFactory(node, ast, cache = true)\nSpawnCompiler(compiler, input, output, args = [])\n  p =>\n  data =>\n  data =>\n  reader =>\n  line =>\n  line =>\n  line =>\nPipeReader(fd, callback)\n(resolve, reject) =>\n  () =>\n  data =>\nReadPipe(fd, callback)\nReadOutput(fd)\nSourceDependencies(...args)\nAstDump(compiler, source, args, force)\n  size()\n  json()\n  data()\nSetFile = loc =>\n  files()\n  n =>\n  file =>\n  pred2 = (used, implicit) =>\n  node =>\n  types()\n  n =>\n  () =>\nList\n  functions()\n  n =>\n  () =>\n  n =>\nList\n  namespaces()\n  n =>\nList\n  classes()\n  predicate = n =>\nList\n  variables()\n  n =>\nList\nNameFor(decl, ast = this.data)\n  (value, key) =>\nNodeType(n)\n  t =>\n  n =>\nNodeName(n, name)\nGetLoc(node)\nGetTypeNode(node, ast = $.data)\n  node =>\n  node =>\nGetTypeStr(node)\n  inner =>\n  inner =>\n([n, t]) =>\nNodePrinter(ast)\n  put(str)\n  trim()\n  printer = function(node)\n  get()\n  value()\n  value(node)\n  toString()\n  i =>\nNodePrinter\nAbiTagAttr(abi_tag_attr)\nAccessSpecDecl(access_spec_decl)\nAlignedAttr(aligned_attr)\nAlwaysInlineAttr(always_inline_attr)\nArraySubscriptExpr(array_subscript_expr)\nAsmLabelAttr(asm_label_attr)\nBinaryOperator(binary_operator)\nBlockCommandComment(block_command_comment)\nBreakStmt(break_stmt)\nCallExpr(call_expr)\nCaseStmt(case_stmt)\nCharacterLiteral(character_literal)\nCompoundAssignOperator(compound_assign_operator)\nCompoundStmt(compound_stmt)\nConditionalOperator(conditional_operator)\nConstantExpr(constant_expr)\nConstAttr(const_attr)\nContinueStmt(continue_stmt)\nCStyleCastExpr(cstyle_cast_expr)\nDeclRefExpr(decl_ref_expr)\nDeclStmt(decl_stmt)\nDefaultStmt(default_stmt)\nDeprecatedAttr(deprecated_attr)\nDoStmt(do_stmt)\nEmptyDecl(empty_decl)\nEnumConstantDecl(enum_constant_decl)\nEnumDecl(enum_decl)\nFieldDecl(field_decl)\nFloatingLiteral(floating_literal)\nFormatAttr(format_attr)\nForStmt(for_stmt)\n  n =>\nFullComment(full_comment)\nFunctionDecl(function_decl)\n  n =>\n  n =>\nGotoStmt(goto_stmt)\n  n =>\nHTMLEndTagComment(html_end_tag_comment)\nHTMLStartTagComment(html_start_tag_comment)\nIfStmt(if_stmt)\nImplicitCastExpr(implicit_cast_expr)\nInitListExpr(init_list_expr)\nInlineCommandComment(inline_command_comment)\nIntegerLiteral(integer_literal)\nLabelStmt(label_stmt)\nMemberExpr(member_expr)\nNonNullAttr(non_null_attr)\nNoThrowAttr(no_throw_attr)\nNullStmt(null_stmt)\nParagraphComment(paragraph_comment)\nParamCommandComment(param_command_comment)\nParenExpr(paren_expr)\nParenListExpr(paren_list_expr)\nParmVarDecl(parm_var_decl)\nPureAttr(pure_attr)\nRecordDecl(record_decl)\nRestrictAttr(restrict_attr)\nReturnStmt(return_stmt)\nReturnsTwiceAttr(returns_twice_attr)\nStringLiteral(string_literal)\nSwitchStmt(switch_stmt)\nTextComment(text_comment)\nTranslationUnitDecl(translation_unit_decl)\nTypedefDecl(typedef_decl)\nUnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)\nUnaryOperator(unary_operator)\nUnresolvedLookupExpr(unresolved_lookup_expr)\nUnresolvedMemberExpr(unresolved_member_expr)\nVarDecl(var_decl, base_type)\n([offset, subscript]) =>\nVerbatimBlockComment(verbatim_block_comment)\nVerbatimBlockLineComment(verbatim_block_line_comment)\nWarnUnusedResultAttr(warn_unused_result_attr)\nWeakAttr(weak_attr)\nWhileStmt(while_stmt)\nOverrideAttr(override_attr)\nAddrLabelExpr(addr_label_expr)\nAliasAttr(alias_attr)\nAlignValueAttr(align_value_attr)\nAllocSizeAttr(alloc_size_attr)\nArrayInitIndexExpr(array_init_index_expr)\nArrayInitLoopExpr(array_init_loop_expr)\nAtomicExpr(atomic_expr)\nAtomicType(atomic_type)\nAutoType(auto_type)\nBuiltinTemplateDecl(builtin_template_decl)\nBuiltinType(builtin_type)\nCallbackAttr(callback_attr)\nClassTemplateDecl(class_template_decl)\nClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)\nClassTemplateSpecializationDecl(class_template_specialization_decl)\nComplexType(complex_type)\nCompoundLiteralExpr(compound_literal_expr)\nConstantArrayType(constant_array_type)\nConstructorUsingShadowDecl(constructor_using_shadow_decl)\nConvertVectorExpr(convert_vector_expr)\nDecayedType(decayed_type)\nDecltypeType(decltype_type)\nDependentNameType(dependent_name_type)\nDependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)\nDependentSizedArrayType(dependent_sized_array_type)\nDependentTemplateSpecializationType(dependent_template_specialization_type)\nElaboratedType(elaborated_type)\nEnumType(enum_type)\nExprWithCleanups(expr_with_cleanups)\nFinalAttr(final_attr)\nFormatArgAttr(format_arg_attr)\nFriendDecl(friend_decl)\nFunctionNoProtoType(function_no_proto_type)\nFunctionProtoType(function_proto_type)\nFunctionTemplateDecl(function_template_decl)\nGCCAsmStmt(gcc_asm_stmt)\nGNUInlineAttr(gnu_inline_attr)\nGNUNullExpr(gnu_null_expr)\nImplicitValueInitExpr(implicit_value_init_expr)\nIncompleteArrayType(incomplete_array_type)\nIndirectFieldDecl(indirect_field_decl)\nIndirectGotoStmt(indirect_goto_stmt)\nInjectedClassNameType(injected_class_name_type)\nLambdaExpr(lambda_expr)\nLinkageSpecDecl(linkage_spec_decl)\nLValueReferenceType(l_value_reference_type)\nMaterializeTemporaryExpr(materialize_temporary_expr)\nMaxFieldAlignmentAttr(max_field_alignment_attr)\nMayAliasAttr(may_alias_attr)\nMemberPointerType(member_pointer_type)\nMinVectorWidthAttr(min_vector_width_attr)\nModeAttr(mode_attr)\nNamespaceDecl(namespace_decl)\nNoDebugAttr(no_debug_attr)\nNoInlineAttr(no_inline_attr)\nNonTypeTemplateParmDecl(non_type_template_parm_decl)\nOffsetOfExpr(offset_of_expr)\nOpaqueValueExpr(opaque_value_expr)\nOwnerAttr(owner_attr)\nPackedAttr(packed_attr)\nPackExpansionExpr(pack_expansion_expr)\nPackExpansionType(pack_expansion_type)\nParenType(paren_type)\nPointerAttr(pointer_attr)\nPointerType(pointer_type)\nPredefinedExpr(predefined_expr)\nQualType(qual_type)\nRecordType(record_type)\nReturnsNonNullAttr(returns_non_null_attr)\nRValueReferenceType(r_value_reference_type)\nSentinelAttr(sentinel_attr)\nShuffleVectorExpr(shuffle_vector_expr)\nSizeOfPackExpr(size_of_pack_expr)\nStaticAssertDecl(static_assert_decl)\nStmtExpr(stmt_expr)\nSubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)\nSubstTemplateTypeParmType(subst_template_type_parm_type)\nTargetAttr(target_attr)\nTemplateArgument(template_argument)\nTemplateSpecializationType(template_specialization_type)\nTemplateTemplateParmDecl(template_template_parm_decl)\nTemplateTypeParmDecl(template_type_parm_decl)\nTemplateTypeParmType(template_type_parm_type)\nTParamCommandComment(t_param_command_comment)\nTypeAliasDecl(type_alias_decl)\nTypeAliasTemplateDecl(type_alias_template_decl)\nTypedefType(typedef_type)\nTypeOfExprType(type_of_expr_type)\nTypeTraitExpr(type_trait_expr)\nUnaryTransformType(unary_transform_type)\nUnresolvedUsingValueDecl(unresolved_using_value_decl)\nUnusedAttr(unused_attr)\nUsingDecl(using_decl)\nUsingDirectiveDecl(using_directive_decl)\nUsingShadowDecl(using_shadow_decl)\nVAArgExpr(va_arg_expr)\nVarTemplateDecl(var_template_decl)\nVectorType(vector_type)\nVerbatimLineComment(verbatim_line_comment)\nVisibilityAttr(visibility_attr)\nWeakRefAttr(weak_ref_attr)\nCXXRecordDecl(cxx_record_decl)\nCXXConstructorDecl(cxx_constructor_decl)\n  n =>\nCXXCtorInitializer(cxx_ctor_initializer)\nCXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)\nCXXThisExpr(cxx_this_expr)\nCXXDestructorDecl(cxx_destructor_decl)\n  n =>\nCXXMethodDecl(cxx_method_decl)\n  n =>\nCXXStaticCastExpr(cxx_static_cast_expr)\nCXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)\nCXXNewExpr(cxx_new_expr)\nCXXDeleteExpr(cxx_delete_expr)\nCXXBoolLiteralExpr(cxx_bool_literal_expr)\nCXX11NoReturnAttr(cxx11_no_return_attr)\nCXXBindTemporaryExpr(cxx_bind_temporary_expr)\nCXXCatchStmt(cxx_catch_stmt)\nCXXConstructExpr(cxx_construct_expr)\nCXXConversionDecl(cxx_conversion_decl)\nCXXDefaultArgExpr(cxx_default_arg_expr)\nCXXDefaultInitExpr(cxx_default_init_expr)\nCXXForRangeStmt(cxx_for_range_stmt)\nCXXFunctionalCastExpr(cxx_functional_cast_expr)\nCXXMemberCallExpr(cxx_member_call_expr)\nCXXNoexceptExpr(cxx_noexcept_expr)\nCXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)\nCXXOperatorCallExpr(cxx_operator_call_expr)\nCXXReinterpretCastExpr(cxx_reinterpret_cast_expr)\nCXXScalarValueInitExpr(cxx_scalar_value_init_expr)\nCXXTemporaryObjectExpr(cxx_temporary_object_expr)\nCXXTryStmt(cxx_try_stmt)\nPrintNode(node)\nPrintAst(node, ast)\n  get()\n  isNode(obj)\nGetType(name_or_id, ast = $.data)\n  n =>\n  node =>\n  node =>\n  r =>\nGetFields(node)\n  (v, k) =>\n([v, p]) =>\n([loc, ptr]) =>\n  i =>\nGetParams(node)\n  child =>\nPathRemoveLoc(path)\n  p =>",
			"settings":
			{
				"buffer_size": 10149,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					69,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAADlCwAAICBkID0+CiAgZCA9PgpJbXBvcnRNb2R1bGUobW9kdWxlUGF0aCwgLi4uYXJncykKICBtb2R1bGUgPT4KICAoYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiAgYyguLi5hcmdzKQogIGwoLi4uYXJncykKICAuc2hvdyA9IHZhbHVlID0+CiAgLnByaW50Tm9kZSA9IGFyZyA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgooKSA9PgooaXRlbSwgaSwgYSkgPT4KICBlbnRyeSA9PgogIGVudHJ5ID0+CigpID0+CkluY2x1ZGVBbGwoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5LCBwcmVkID0gZW50cnkgPT4gL1wuW2NoXSQvLgooZW50cnkpKQpTZWxlY3RMb2NhdGlvbnMobm9kZSkKICBuID0+CiAgcHJvcCA9PgpMb2NhdGlvblN0cmluZyhsb2MpCiAgbm9kZSA9PgpTdHJ1Y3RzKG5vZGVzKQogIG5vZGUgPT4KICBmaWVsZCA9PgogIG5vZGUgPT4KKGZpZWxkLCBpKSA9PgpUYWJsZShsaXN0LCBwcmVkID0gKG4sIGwpID0+IHRydWUpCihuLCBpKSA9PgogIGUgPT4KICBrID0+CihbaSwgbCwgbl0pID0+CiAgcmV0dXJuVHlwZShuKQogIG51bUFyZ3MobikKUGFyYW1zKG4pCiAgcCA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KKGssIGopID0+CihhY2MsIG5hbWUpID0+CihuYW1lLCBpKSA9PgogIHBhZCA9IChjb2xzLCBwYWQsIHNlcCkgPT4KKGtleSwgaSkgPT4KKHMsIGNvbCkgPT4KKGFjYywgbikgPT4KKGFjYywgcm93KSA9PgpQcmludFJhbmdlKHJhbmdlKQpPdmVybGFwUmFuZ2UocjEsIHIyKQpHZXRSYW5nZSA9IHIgPT4KSW5SYW5nZSA9IChpLCByKSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCkdlbmVyYXRlSW5zcGVjdFN0cnVjdChkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQogIChuYW1lLCBsaWIpID0+CiAgZ2VuZXJhdGVEb2MoKQogIHB1c2ggPSAoLi4uYXJncykgPT4KICBmaWVsZCA9PgooZmllbGQsIGNvbCkgPT4KICBqcyA9IHR5cGUgPT4KICBnZW5lcmF0ZUNhbGwoKQooW25hbWUsIHR5cGVdKSA9PgogIGdlbmVyYXRlKGZwLCBsaWIsIGV4cCkKICBnZW5lcmF0ZUZ1bmN0aW9uKGZwLCBsaWIpCihbbmFtZSwgdHlwZV0pID0+CiAgcCA9PgogIHAgPT4KICBjb21waWxlRnVuY3Rpb24oZnAsIGxpYikKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29tbWFuZFJlYWQoYXJncykKICByZWFkZXIgPT4KUmVhZE91dHB1dChmZCkKTGlicmFyeUV4cG9ydHMoZmlsZSkKICBsaW5lID0+CiAgbGluZSA9PgogIGNvbHVtbiA9PgooYSwgYikgPT4KICBlbnRyeSA9PgpTYXZlTGlicmFyaWVzKCkKKGFjYywgW24sIGVdKSA9PgpQcm9jZXNzRmlsZShmaWxlLCBkZWJ1ZyA9IHRydWUpClBhcnNlRUNNQVNjcmlwdChmaWxlLCBkZWJ1ZyA9IGZhbHNlKQogIGdldCBkYXRhKCkKUHJpbnRFQ01BU2NyaXB0KGFzdCwgY29tbWVudHMsIHByaW50ZXIgPSAKKHsgaW5kZW50OiA0IH0sIGNvbW1lbnRzKSkKUHJpbnRDQXJyYXkoc3RyaW5ncykKTmFtZXNwYWNlcyhub2RlUGF0aCwgYXN0ID0gJC5kYXRhKQogIHAgPT4KICBuID0+CkNvbnN0YW50cyhub2RlLCB0ID0gKG5hbWUsIHZhbHVlKSA9PiBbbmFtZSwgIWlzTmFOKCt2YWx1ZSkgPyArdmFsdWUgOiB2YWx1ZV0pCkdldEltcG9ydHMoYXN0ID0gJC5kYXRhKQogIG4gPT4KR2V0SWRlbnRpZmllcnMobm9kZXMsIGtleSA9IG51bGwpCiAgKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKICBuID0+CiAgcCA9PgogIHAgPT4KICBuYW1lID0+CiAgbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcCA9PgogIG5hbWUgPT4KICBuYW1lID0+ClVuc2V0TG9jKG5vZGUsIHByZWQgPSAodiwgcCkgPT4gdHJ1ZSkKICAodiwgaykgPT4KTWFrZUZGSShub2RlLCBsaWIsIGV4cCwgZnApCigpCkFTVFNoZWxsKC4uLmFyZ3MpCiAgZm4gPT4KICBtb2R1bGUgPT4KICBtb2R1bGUgPT4KICBtb2R1bGUgPT4KICBtb2R1bGUgPT4KICAoYSwgcCkgPT4KICAoYSwgcCkgPT4KICAoYSwgcCkgPT4KICBnZXQgZmxhZ3MoKQogIHYgPT4KICB2ID0+CiAgZCA9PgogIGwgPT4KQ29tcGlsZShmaWxlLCAuLi5hcmdzKQogIG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQogIG5vZGUgPT4KICBub2RlID0+CiAgbm9kZSA9PgogIHNlbGVjdChuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQogIGdldEJ5SWRPck5hbWUobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkKICBuID0+CiAgZ2V0VHlwZShuYW1lX29yX2lkKQogIG4gPT4KICBnZXRGdW5jdGlvbihuYW1lX29yX2lkKQogIG4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQogIG4gPT4KICBnZXRMb2Mobm9kZSkKKCkgPT4KICBwYXRoT2YobmVlZGxlLCBtYXhEZXB0aCA9IDEwKQogIG4gPT4KUG9pbnRlci5wcm90b3R5cGUuY2hhaW4gPSBmdW5jdGlvbihzdGVwLCBsaW1pdCA9IEluZmluaXR5KQogIC5GID0gYXJnID0+CiAgLlQgPSBhcmcgPT4KICAoKSA9PgogIG5vZGUgPT4KICBwdXNoVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KICBlbGVtID0+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					70,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					71,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								390,
								417
							],
							[
								497,
								527
							],
							[
								594,
								602
							],
							[
								640,
								667
							],
							[
								716,
								743
							],
							[
								825,
								829
							],
							[
								852,
								885
							],
							[
								1072,
								1076
							],
							[
								1095,
								1115
							],
							[
								1271,
								1303
							],
							[
								1467,
								1485
							],
							[
								1759,
								1770
							],
							[
								1794,
								1801
							],
							[
								1830,
								1839
							],
							[
								1969,
								1975
							],
							[
								2097,
								2105
							],
							[
								2230,
								2239
							],
							[
								2265,
								2274
							],
							[
								2305,
								2309
							],
							[
								2370,
								2374
							],
							[
								2450,
								2466
							],
							[
								2726,
								2741
							],
							[
								2808,
								2817
							],
							[
								2885,
								2893
							],
							[
								2948,
								2957
							],
							[
								3031,
								3041
							],
							[
								3095,
								3104
							],
							[
								3134,
								3143
							],
							[
								3253,
								3264
							],
							[
								3466,
								3470
							],
							[
								4125,
								4136
							],
							[
								4386,
								4400
							],
							[
								4450,
								4486
							],
							[
								4524,
								4529
							],
							[
								4570,
								4612
							],
							[
								4805,
								4809
							],
							[
								4843,
								4854
							],
							[
								4886,
								4905
							],
							[
								5224,
								5266
							],
							[
								5338,
								5348
							],
							[
								5569,
								5574
							],
							[
								5640,
								5647
							],
							[
								5764,
								5768
							],
							[
								5866,
								5888
							],
							[
								6379,
								6384
							],
							[
								8206,
								8210
							],
							[
								8991,
								9001
							],
							[
								9219,
								9231
							],
							[
								9372,
								9380
							],
							[
								9463,
								9474
							],
							[
								9550,
								9562
							],
							[
								9654,
								9663
							],
							[
								9734,
								9743
							],
							[
								9861,
								9877
							],
							[
								9947,
								9963
							],
							[
								10052,
								10065
							],
							[
								10598,
								10613
							],
							[
								10698,
								10703
							],
							[
								10955,
								10969
							],
							[
								11075,
								11087
							],
							[
								11156,
								11168
							],
							[
								11227,
								11244
							],
							[
								11330,
								11341
							],
							[
								11435,
								11448
							],
							[
								11588,
								11596
							],
							[
								11703,
								11713
							],
							[
								11915,
								11924
							],
							[
								13405,
								13415
							],
							[
								16280,
								16286
							],
							[
								16570,
								16581
							],
							[
								16681,
								16717
							],
							[
								16895,
								16903
							],
							[
								16963,
								16971
							],
							[
								18769,
								18799
							],
							[
								18878,
								18888
							],
							[
								18906,
								18928
							],
							[
								19108,
								19116
							],
							[
								19197,
								19205
							],
							[
								19382,
								19389
							],
							[
								19440,
								19454
							],
							[
								19863,
								19867
							],
							[
								20047,
								20052
							],
							[
								20680,
								20684
							],
							[
								21427,
								21437
							],
							[
								21512,
								21532
							],
							[
								21735,
								21743
							],
							[
								21865,
								21884
							],
							[
								21981,
								21989
							],
							[
								22007,
								22029
							],
							[
								22145,
								22153
							],
							[
								22258,
								22284
							],
							[
								22535,
								22543
							],
							[
								22658,
								22669
							],
							[
								22687,
								22709
							],
							[
								22777,
								22781
							],
							[
								22887,
								22897
							],
							[
								22957,
								22961
							],
							[
								23024,
								23028
							],
							[
								23078,
								23082
							],
							[
								23555,
								23565
							],
							[
								23603,
								23611
							],
							[
								23708,
								23717
							],
							[
								23735,
								23757
							],
							[
								23861,
								23865
							],
							[
								24275,
								24287
							],
							[
								24305,
								24327
							],
							[
								24517,
								24525
							],
							[
								24588,
								24596
							],
							[
								24786,
								24791
							],
							[
								25100,
								25119
							],
							[
								25180,
								25188
							],
							[
								25297,
								25304
							],
							[
								25322,
								25344
							],
							[
								25687,
								25695
							],
							[
								25792,
								25801
							],
							[
								25838,
								25849
							],
							[
								25867,
								25889
							],
							[
								25939,
								25950
							],
							[
								25968,
								25990
							],
							[
								26161,
								26169
							],
							[
								26272,
								26289
							],
							[
								26307,
								26329
							],
							[
								26595,
								26603
							],
							[
								26714,
								26722
							],
							[
								26727,
								26743
							],
							[
								26945,
								26958
							],
							[
								26993,
								27008
							],
							[
								27093,
								27103
							],
							[
								27416,
								27436
							],
							[
								27519,
								27565
							],
							[
								29018,
								29082
							],
							[
								29360,
								29364
							],
							[
								30125,
								30133
							],
							[
								30241,
								30249
							],
							[
								30324,
								30339
							],
							[
								30619,
								30626
							],
							[
								30680,
								30687
							],
							[
								30771,
								30778
							],
							[
								30955,
								30990
							],
							[
								31029,
								31049
							],
							[
								31079,
								31085
							],
							[
								31106,
								31114
							],
							[
								31220,
								31253
							],
							[
								31566,
								31591
							],
							[
								31986,
								32028
							],
							[
								32679,
								32732
							],
							[
								33677,
								33683
							],
							[
								33733,
								33739
							],
							[
								33823,
								33829
							],
							[
								34025,
								34041
							],
							[
								34346,
								34353
							],
							[
								34396,
								34400
							],
							[
								34420,
								34427
							],
							[
								34547,
								34574
							],
							[
								34632,
								34639
							],
							[
								34908,
								34915
							],
							[
								34975,
								34989
							],
							[
								35034,
								35049
							],
							[
								35074,
								35078
							],
							[
								35109,
								35120
							],
							[
								35153,
								35165
							],
							[
								35199,
								35212
							],
							[
								35284,
								35289
							],
							[
								35387,
								35391
							],
							[
								35415,
								35427
							],
							[
								35496,
								35501
							],
							[
								35561,
								35565
							],
							[
								35596,
								35605
							],
							[
								35618,
								35634
							],
							[
								35995,
								35999
							],
							[
								36023,
								36034
							],
							[
								36093,
								36097
							],
							[
								36135,
								36139
							],
							[
								36192,
								36232
							],
							[
								36291,
								36307
							],
							[
								36669,
								36690
							],
							[
								36716,
								36720
							],
							[
								37163,
								37168
							],
							[
								37209,
								37236
							],
							[
								37430,
								37452
							],
							[
								38458,
								38499
							],
							[
								38579,
								38586
							],
							[
								38652,
								38659
							],
							[
								38696,
								38722
							],
							[
								38816,
								38824
							],
							[
								38890,
								38898
							],
							[
								38960,
								38971
							],
							[
								39118,
								39144
							],
							[
								39196,
								39215
							],
							[
								39291,
								39308
							],
							[
								39343,
								39367
							],
							[
								39613,
								39618
							],
							[
								39675,
								39682
							],
							[
								39763,
								39774
							],
							[
								40264,
								40274
							],
							[
								40320,
								40324
							],
							[
								40982,
								40993
							],
							[
								41004,
								41028
							],
							[
								41096,
								41128
							],
							[
								41284,
								41309
							],
							[
								41373,
								41409
							],
							[
								41479,
								41519
							],
							[
								41771,
								41799
							],
							[
								41846,
								41877
							],
							[
								42106,
								42148
							],
							[
								42351,
								42372
							],
							[
								42417,
								42436
							],
							[
								42770,
								42789
							],
							[
								42993,
								43028
							],
							[
								43146,
								43194
							],
							[
								43440,
								43467
							],
							[
								44085,
								44126
							],
							[
								44364,
								44391
							],
							[
								44534,
								44555
							],
							[
								44616,
								44643
							],
							[
								44688,
								44720
							],
							[
								44970,
								44996
							],
							[
								45190,
								45209
							],
							[
								45871,
								45896
							],
							[
								45944,
								45975
							],
							[
								46042,
								46057
							],
							[
								46252,
								46273
							],
							[
								46390,
								46426
							],
							[
								46646,
								46665
							],
							[
								47069,
								47090
							],
							[
								47307,
								47340
							],
							[
								47400,
								47423
							],
							[
								47486,
								47503
							],
							[
								47623,
								47627
							],
							[
								48454,
								48479
							],
							[
								48686,
								48713
							],
							[
								49178,
								49182
							],
							[
								49392,
								49396
							],
							[
								49595,
								49614
							],
							[
								49711,
								49716
							],
							[
								49870,
								49909
							],
							[
								50008,
								50051
							],
							[
								50261,
								50276
							],
							[
								50446,
								50482
							],
							[
								50578,
								50606
							],
							[
								50876,
								50920
							],
							[
								50982,
								51013
							],
							[
								51072,
								51093
							],
							[
								51152,
								51175
							],
							[
								51598,
								51624
							],
							[
								51692,
								51718
							],
							[
								51782,
								51801
							],
							[
								51842,
								51877
							],
							[
								52051,
								52093
							],
							[
								52278,
								52299
							],
							[
								52475,
								52505
							],
							[
								52725,
								52751
							],
							[
								53179,
								53198
							],
							[
								53259,
								53282
							],
							[
								53817,
								53844
							],
							[
								53894,
								53917
							],
							[
								54074,
								54110
							],
							[
								54180,
								54209
							],
							[
								54267,
								54290
							],
							[
								54468,
								54493
							],
							[
								54577,
								54619
							],
							[
								54718,
								54743
							],
							[
								55047,
								55102
							],
							[
								55344,
								55373
							],
							[
								55624,
								55668
							],
							[
								55800,
								55844
							],
							[
								55931,
								55959
							],
							[
								56103,
								56127
							],
							[
								56375,
								56419
							],
							[
								56741,
								56794
							],
							[
								56893,
								56938
							],
							[
								57013,
								57032
							],
							[
								57093,
								57114
							],
							[
								57291,
								57318
							],
							[
								57367,
								57397
							],
							[
								57409,
								57430
							],
							[
								57442,
								57474
							],
							[
								57616,
								57646
							],
							[
								57658,
								57699
							],
							[
								57711,
								57750
							],
							[
								57762,
								57785
							],
							[
								57797,
								57820
							],
							[
								57832,
								57851
							],
							[
								57863,
								57905
							],
							[
								57917,
								57942
							],
							[
								57954,
								57981
							],
							[
								57993,
								58031
							],
							[
								58043,
								58125
							],
							[
								58137,
								58204
							],
							[
								58216,
								58241
							],
							[
								58253,
								58295
							],
							[
								58307,
								58345
							],
							[
								58357,
								58414
							],
							[
								58426,
								58464
							],
							[
								58476,
								58501
							],
							[
								58513,
								58540
							],
							[
								58552,
								58590
							],
							[
								58602,
								58658
							],
							[
								58752,
								58803
							],
							[
								58815,
								58890
							],
							[
								58902,
								58933
							],
							[
								58945,
								58964
							],
							[
								58976,
								59012
							],
							[
								59108,
								59129
							],
							[
								59141,
								59171
							],
							[
								59183,
								59206
							],
							[
								59218,
								59261
							],
							[
								59273,
								59311
							],
							[
								59323,
								59367
							],
							[
								59379,
								59403
							],
							[
								59415,
								59445
							],
							[
								59457,
								59483
							],
							[
								59527,
								59574
							],
							[
								59586,
								59628
							],
							[
								59640,
								59678
							],
							[
								59690,
								59726
							],
							[
								59738,
								59785
							],
							[
								59797,
								59820
							],
							[
								59832,
								59866
							],
							[
								59878,
								59921
							],
							[
								59933,
								59985
							],
							[
								60089,
								60136
							],
							[
								60148,
								60176
							],
							[
								60188,
								60226
							],
							[
								60238,
								60279
							],
							[
								60291,
								60310
							],
							[
								60322,
								60351
							],
							[
								60363,
								60389
							],
							[
								60401,
								60429
							],
							[
								60441,
								60493
							],
							[
								60505,
								60533
							],
							[
								60545,
								60579
							],
							[
								60591,
								60612
							],
							[
								60624,
								60647
							],
							[
								60659,
								60697
							],
							[
								60709,
								60747
							],
							[
								60759,
								60780
							],
							[
								60792,
								60817
							],
							[
								60829,
								60854
							],
							[
								60866,
								60897
							],
							[
								60909,
								60928
							],
							[
								60940,
								60963
							],
							[
								60975,
								61016
							],
							[
								61028,
								61071
							],
							[
								61083,
								61110
							],
							[
								61122,
								61160
							],
							[
								61172,
								61205
							],
							[
								61217,
								61253
							],
							[
								61265,
								61284
							],
							[
								61296,
								61359
							],
							[
								61371,
								61427
							],
							[
								61439,
								61462
							],
							[
								61474,
								61509
							],
							[
								61521,
								61577
							],
							[
								61589,
								61642
							],
							[
								61654,
								61699
							],
							[
								61711,
								61756
							],
							[
								61768,
								61813
							],
							[
								61825,
								61855
							],
							[
								61867,
								61914
							],
							[
								61926,
								61951
							],
							[
								61963,
								61996
							],
							[
								62008,
								62038
							],
							[
								62050,
								62090
							],
							[
								62102,
								62155
							],
							[
								62167,
								62190
							],
							[
								62202,
								62223
							],
							[
								62235,
								62275
							],
							[
								62287,
								62321
							],
							[
								62333,
								62355
							],
							[
								62367,
								62401
							],
							[
								62413,
								62436
							],
							[
								62448,
								62490
							],
							[
								62502,
								62533
							],
							[
								62545,
								62571
							],
							[
								62584,
								62614
							],
							[
								63188,
								63228
							],
							[
								63438,
								63442
							],
							[
								64583,
								64623
							],
							[
								65005,
								65065
							],
							[
								65501,
								65527
							],
							[
								65635,
								65673
							],
							[
								65869,
								65873
							],
							[
								66160,
								66190
							],
							[
								66648,
								66652
							],
							[
								67304,
								67343
							],
							[
								68006,
								68063
							],
							[
								68384,
								68408
							],
							[
								68880,
								68910
							],
							[
								69173,
								69214
							],
							[
								69349,
								69388
							],
							[
								69400,
								69445
							],
							[
								69457,
								69485
							],
							[
								69497,
								69533
							],
							[
								69677,
								69715
							],
							[
								69727,
								69766
							],
							[
								69778,
								69819
							],
							[
								69831,
								69866
							],
							[
								69878,
								69925
							],
							[
								69937,
								69976
							],
							[
								69989,
								70023
							],
							[
								70035,
								70083
							],
							[
								70095,
								70138
							],
							[
								70150,
								70199
							],
							[
								70211,
								70261
							],
							[
								70273,
								70322
							],
							[
								70576,
								70600
							],
							[
								70655,
								70680
							],
							[
								71059,
								71088
							],
							[
								71267,
								71272
							],
							[
								71544,
								71565
							],
							[
								71632,
								71675
							],
							[
								71862,
								71866
							],
							[
								72448,
								72456
							],
							[
								72508,
								72516
							],
							[
								72628,
								72632
							],
							[
								72884,
								72909
							],
							[
								72944,
								72954
							],
							[
								73018,
								73029
							],
							[
								73103,
								73118
							],
							[
								73157,
								73161
							],
							[
								73240,
								73265
							],
							[
								73304,
								73312
							],
							[
								73353,
								73382
							],
							[
								73412,
								73416
							]
						],
						"symlist":
						[
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v,k) =>",
							" (v,k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"(node, ast) =>",
							" function PathOf(node, ast = $.data)",
							" n =>",
							" function Hier(node_or_path, ast = $.data)",
							"p =>",
							"([p, n]) =>",
							" ([p, n]) =>",
							" function FindType(typeName, ast = $.data)",
							"([tok]) =>",
							" n =>",
							"node =>",
							"Type",
							"constructor(node, ast)",
							" n =>",
							"n =>",
							" (n, p) =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isFunction()",
							"isArray()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"getPointer(ast)",
							" n =>",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = $.data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"get size()",
							"(acc,[name,type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"n =>",
							"FunctionDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							" n =>",
							"({ name, type }) =>",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"BuiltinType",
							"constructor(node, ast)",
							"PointerType",
							"constructor(node, ast)",
							"toJSON()",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Location",
							"constructor(loc)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, output, args = [])",
							"p =>",
							" data =>",
							" data =>",
							"async reader =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							"node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							" function NameFor(decl, ast = this.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = $.data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = $.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AQAAAAAAAAAAAAAApScAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					72,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					73,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								390,
								417
							],
							[
								497,
								527
							],
							[
								594,
								602
							],
							[
								640,
								667
							],
							[
								716,
								743
							],
							[
								825,
								829
							],
							[
								852,
								885
							],
							[
								1072,
								1076
							],
							[
								1095,
								1115
							],
							[
								1271,
								1303
							],
							[
								1467,
								1485
							],
							[
								1759,
								1770
							],
							[
								1794,
								1801
							],
							[
								1830,
								1839
							],
							[
								1969,
								1975
							],
							[
								2097,
								2105
							],
							[
								2230,
								2239
							],
							[
								2265,
								2274
							],
							[
								2305,
								2309
							],
							[
								2370,
								2374
							],
							[
								2450,
								2466
							],
							[
								2726,
								2741
							],
							[
								2808,
								2817
							],
							[
								2885,
								2893
							],
							[
								2948,
								2957
							],
							[
								3031,
								3041
							],
							[
								3095,
								3104
							],
							[
								3134,
								3143
							],
							[
								3253,
								3264
							],
							[
								3466,
								3470
							],
							[
								4125,
								4136
							],
							[
								4386,
								4400
							],
							[
								4450,
								4486
							],
							[
								4524,
								4529
							],
							[
								4570,
								4612
							],
							[
								4805,
								4809
							],
							[
								4843,
								4854
							],
							[
								4886,
								4905
							],
							[
								5224,
								5266
							],
							[
								5338,
								5348
							],
							[
								5569,
								5574
							],
							[
								5640,
								5647
							],
							[
								5764,
								5768
							],
							[
								5866,
								5888
							],
							[
								6379,
								6384
							],
							[
								8206,
								8210
							],
							[
								8991,
								9001
							],
							[
								9219,
								9231
							],
							[
								9372,
								9380
							],
							[
								9463,
								9474
							],
							[
								9550,
								9562
							],
							[
								9654,
								9663
							],
							[
								9734,
								9743
							],
							[
								9861,
								9877
							],
							[
								9947,
								9963
							],
							[
								10052,
								10065
							],
							[
								10598,
								10613
							],
							[
								10698,
								10703
							],
							[
								10955,
								10969
							],
							[
								11075,
								11087
							],
							[
								11156,
								11168
							],
							[
								11227,
								11244
							],
							[
								11330,
								11341
							],
							[
								11435,
								11448
							],
							[
								11588,
								11596
							],
							[
								11703,
								11713
							],
							[
								11915,
								11924
							],
							[
								13405,
								13415
							],
							[
								16280,
								16286
							],
							[
								16570,
								16581
							],
							[
								16681,
								16717
							],
							[
								16895,
								16903
							],
							[
								16963,
								16971
							],
							[
								18769,
								18799
							],
							[
								18878,
								18888
							],
							[
								18906,
								18928
							],
							[
								19108,
								19116
							],
							[
								19197,
								19205
							],
							[
								19382,
								19389
							],
							[
								19440,
								19454
							],
							[
								19863,
								19867
							],
							[
								20047,
								20052
							],
							[
								20680,
								20684
							],
							[
								21427,
								21437
							],
							[
								21512,
								21532
							],
							[
								21735,
								21743
							],
							[
								21865,
								21884
							],
							[
								21981,
								21989
							],
							[
								22007,
								22029
							],
							[
								22145,
								22153
							],
							[
								22258,
								22284
							],
							[
								22535,
								22543
							],
							[
								22658,
								22669
							],
							[
								22687,
								22709
							],
							[
								22777,
								22781
							],
							[
								22887,
								22897
							],
							[
								22957,
								22961
							],
							[
								23024,
								23028
							],
							[
								23078,
								23082
							],
							[
								23555,
								23565
							],
							[
								23603,
								23611
							],
							[
								23708,
								23717
							],
							[
								23735,
								23757
							],
							[
								23861,
								23865
							],
							[
								24275,
								24287
							],
							[
								24305,
								24327
							],
							[
								24517,
								24525
							],
							[
								24588,
								24596
							],
							[
								24786,
								24791
							],
							[
								25100,
								25119
							],
							[
								25180,
								25188
							],
							[
								25297,
								25304
							],
							[
								25322,
								25344
							],
							[
								25687,
								25695
							],
							[
								25792,
								25801
							],
							[
								25838,
								25849
							],
							[
								25867,
								25889
							],
							[
								25939,
								25950
							],
							[
								25968,
								25990
							],
							[
								26161,
								26169
							],
							[
								26272,
								26289
							],
							[
								26307,
								26329
							],
							[
								26595,
								26603
							],
							[
								26714,
								26722
							],
							[
								26727,
								26743
							],
							[
								26945,
								26958
							],
							[
								26993,
								27008
							],
							[
								27093,
								27103
							],
							[
								27416,
								27436
							],
							[
								27519,
								27565
							],
							[
								29018,
								29082
							],
							[
								29360,
								29364
							],
							[
								30125,
								30133
							],
							[
								30241,
								30249
							],
							[
								30324,
								30339
							],
							[
								30619,
								30626
							],
							[
								30680,
								30687
							],
							[
								30771,
								30778
							],
							[
								30955,
								30990
							],
							[
								31029,
								31049
							],
							[
								31079,
								31085
							],
							[
								31106,
								31114
							],
							[
								31220,
								31253
							],
							[
								31566,
								31591
							],
							[
								31986,
								32028
							],
							[
								32679,
								32732
							],
							[
								33677,
								33683
							],
							[
								33733,
								33739
							],
							[
								33823,
								33829
							],
							[
								34025,
								34041
							],
							[
								34346,
								34353
							],
							[
								34396,
								34400
							],
							[
								34420,
								34427
							],
							[
								34547,
								34574
							],
							[
								34632,
								34639
							],
							[
								34908,
								34915
							],
							[
								34975,
								34989
							],
							[
								35034,
								35049
							],
							[
								35074,
								35078
							],
							[
								35109,
								35120
							],
							[
								35153,
								35165
							],
							[
								35199,
								35212
							],
							[
								35284,
								35289
							],
							[
								35387,
								35391
							],
							[
								35415,
								35427
							],
							[
								35496,
								35501
							],
							[
								35561,
								35565
							],
							[
								35596,
								35605
							],
							[
								35618,
								35634
							],
							[
								35995,
								35999
							],
							[
								36023,
								36034
							],
							[
								36093,
								36097
							],
							[
								36135,
								36139
							],
							[
								36192,
								36232
							],
							[
								36291,
								36307
							],
							[
								36669,
								36690
							],
							[
								36716,
								36720
							],
							[
								37163,
								37168
							],
							[
								37209,
								37236
							],
							[
								37430,
								37452
							],
							[
								38458,
								38499
							],
							[
								38579,
								38586
							],
							[
								38652,
								38659
							],
							[
								38696,
								38722
							],
							[
								38816,
								38824
							],
							[
								38890,
								38898
							],
							[
								38960,
								38971
							],
							[
								39118,
								39144
							],
							[
								39196,
								39215
							],
							[
								39291,
								39308
							],
							[
								39343,
								39367
							],
							[
								39613,
								39618
							],
							[
								39675,
								39682
							],
							[
								39763,
								39774
							],
							[
								40264,
								40274
							],
							[
								40320,
								40324
							],
							[
								40982,
								40993
							],
							[
								41004,
								41028
							],
							[
								41096,
								41128
							],
							[
								41284,
								41309
							],
							[
								41373,
								41409
							],
							[
								41479,
								41519
							],
							[
								41771,
								41799
							],
							[
								41846,
								41877
							],
							[
								42106,
								42148
							],
							[
								42351,
								42372
							],
							[
								42417,
								42436
							],
							[
								42770,
								42789
							],
							[
								42993,
								43028
							],
							[
								43146,
								43194
							],
							[
								43440,
								43467
							],
							[
								44085,
								44126
							],
							[
								44364,
								44391
							],
							[
								44534,
								44555
							],
							[
								44616,
								44643
							],
							[
								44688,
								44720
							],
							[
								44970,
								44996
							],
							[
								45190,
								45209
							],
							[
								45871,
								45896
							],
							[
								45944,
								45975
							],
							[
								46042,
								46057
							],
							[
								46252,
								46273
							],
							[
								46390,
								46426
							],
							[
								46646,
								46665
							],
							[
								47069,
								47090
							],
							[
								47307,
								47340
							],
							[
								47400,
								47423
							],
							[
								47486,
								47503
							],
							[
								47623,
								47627
							],
							[
								48454,
								48479
							],
							[
								48686,
								48713
							],
							[
								49178,
								49182
							],
							[
								49392,
								49396
							],
							[
								49595,
								49614
							],
							[
								49711,
								49716
							],
							[
								49870,
								49909
							],
							[
								50008,
								50051
							],
							[
								50261,
								50276
							],
							[
								50446,
								50482
							],
							[
								50578,
								50606
							],
							[
								50876,
								50920
							],
							[
								50982,
								51013
							],
							[
								51072,
								51093
							],
							[
								51152,
								51175
							],
							[
								51598,
								51624
							],
							[
								51692,
								51718
							],
							[
								51782,
								51801
							],
							[
								51842,
								51877
							],
							[
								52051,
								52093
							],
							[
								52278,
								52299
							],
							[
								52475,
								52505
							],
							[
								52725,
								52751
							],
							[
								53179,
								53198
							],
							[
								53259,
								53282
							],
							[
								53817,
								53844
							],
							[
								53894,
								53917
							],
							[
								54074,
								54110
							],
							[
								54180,
								54209
							],
							[
								54267,
								54290
							],
							[
								54468,
								54493
							],
							[
								54577,
								54619
							],
							[
								54718,
								54743
							],
							[
								55047,
								55102
							],
							[
								55344,
								55373
							],
							[
								55624,
								55668
							],
							[
								55800,
								55844
							],
							[
								55931,
								55959
							],
							[
								56103,
								56127
							],
							[
								56375,
								56419
							],
							[
								56741,
								56794
							],
							[
								56893,
								56938
							],
							[
								57013,
								57032
							],
							[
								57093,
								57114
							],
							[
								57291,
								57318
							],
							[
								57367,
								57397
							],
							[
								57409,
								57430
							],
							[
								57442,
								57474
							],
							[
								57616,
								57646
							],
							[
								57658,
								57699
							],
							[
								57711,
								57750
							],
							[
								57762,
								57785
							],
							[
								57797,
								57820
							],
							[
								57832,
								57851
							],
							[
								57863,
								57905
							],
							[
								57917,
								57942
							],
							[
								57954,
								57981
							],
							[
								57993,
								58031
							],
							[
								58043,
								58125
							],
							[
								58137,
								58204
							],
							[
								58216,
								58241
							],
							[
								58253,
								58295
							],
							[
								58307,
								58345
							],
							[
								58357,
								58414
							],
							[
								58426,
								58464
							],
							[
								58476,
								58501
							],
							[
								58513,
								58540
							],
							[
								58552,
								58590
							],
							[
								58602,
								58658
							],
							[
								58752,
								58803
							],
							[
								58815,
								58890
							],
							[
								58902,
								58933
							],
							[
								58945,
								58964
							],
							[
								58976,
								59012
							],
							[
								59108,
								59129
							],
							[
								59141,
								59171
							],
							[
								59183,
								59206
							],
							[
								59218,
								59261
							],
							[
								59273,
								59311
							],
							[
								59323,
								59367
							],
							[
								59379,
								59403
							],
							[
								59415,
								59445
							],
							[
								59457,
								59483
							],
							[
								59527,
								59574
							],
							[
								59586,
								59628
							],
							[
								59640,
								59678
							],
							[
								59690,
								59726
							],
							[
								59738,
								59785
							],
							[
								59797,
								59820
							],
							[
								59832,
								59866
							],
							[
								59878,
								59921
							],
							[
								59933,
								59985
							],
							[
								60089,
								60136
							],
							[
								60148,
								60176
							],
							[
								60188,
								60226
							],
							[
								60238,
								60279
							],
							[
								60291,
								60310
							],
							[
								60322,
								60351
							],
							[
								60363,
								60389
							],
							[
								60401,
								60429
							],
							[
								60441,
								60493
							],
							[
								60505,
								60533
							],
							[
								60545,
								60579
							],
							[
								60591,
								60612
							],
							[
								60624,
								60647
							],
							[
								60659,
								60697
							],
							[
								60709,
								60747
							],
							[
								60759,
								60780
							],
							[
								60792,
								60817
							],
							[
								60829,
								60854
							],
							[
								60866,
								60897
							],
							[
								60909,
								60928
							],
							[
								60940,
								60963
							],
							[
								60975,
								61016
							],
							[
								61028,
								61071
							],
							[
								61083,
								61110
							],
							[
								61122,
								61160
							],
							[
								61172,
								61205
							],
							[
								61217,
								61253
							],
							[
								61265,
								61284
							],
							[
								61296,
								61359
							],
							[
								61371,
								61427
							],
							[
								61439,
								61462
							],
							[
								61474,
								61509
							],
							[
								61521,
								61577
							],
							[
								61589,
								61642
							],
							[
								61654,
								61699
							],
							[
								61711,
								61756
							],
							[
								61768,
								61813
							],
							[
								61825,
								61855
							],
							[
								61867,
								61914
							],
							[
								61926,
								61951
							],
							[
								61963,
								61996
							],
							[
								62008,
								62038
							],
							[
								62050,
								62090
							],
							[
								62102,
								62155
							],
							[
								62167,
								62190
							],
							[
								62202,
								62223
							],
							[
								62235,
								62275
							],
							[
								62287,
								62321
							],
							[
								62333,
								62355
							],
							[
								62367,
								62401
							],
							[
								62413,
								62436
							],
							[
								62448,
								62490
							],
							[
								62502,
								62533
							],
							[
								62545,
								62571
							],
							[
								62584,
								62614
							],
							[
								63188,
								63228
							],
							[
								63438,
								63442
							],
							[
								64583,
								64623
							],
							[
								65005,
								65065
							],
							[
								65501,
								65527
							],
							[
								65635,
								65673
							],
							[
								65869,
								65873
							],
							[
								66160,
								66190
							],
							[
								66648,
								66652
							],
							[
								67304,
								67343
							],
							[
								68006,
								68063
							],
							[
								68384,
								68408
							],
							[
								68880,
								68910
							],
							[
								69173,
								69214
							],
							[
								69349,
								69388
							],
							[
								69400,
								69445
							],
							[
								69457,
								69485
							],
							[
								69497,
								69533
							],
							[
								69677,
								69715
							],
							[
								69727,
								69766
							],
							[
								69778,
								69819
							],
							[
								69831,
								69866
							],
							[
								69878,
								69925
							],
							[
								69937,
								69976
							],
							[
								69989,
								70023
							],
							[
								70035,
								70083
							],
							[
								70095,
								70138
							],
							[
								70150,
								70199
							],
							[
								70211,
								70261
							],
							[
								70273,
								70322
							],
							[
								70576,
								70600
							],
							[
								70655,
								70680
							],
							[
								71059,
								71088
							],
							[
								71267,
								71272
							],
							[
								71544,
								71565
							],
							[
								71632,
								71675
							],
							[
								71862,
								71866
							],
							[
								72448,
								72456
							],
							[
								72508,
								72516
							],
							[
								72628,
								72632
							],
							[
								72884,
								72909
							],
							[
								72944,
								72954
							],
							[
								73018,
								73029
							],
							[
								73103,
								73118
							],
							[
								73157,
								73161
							],
							[
								73240,
								73265
							],
							[
								73304,
								73312
							],
							[
								73353,
								73382
							],
							[
								73412,
								73416
							]
						],
						"symlist":
						[
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v,k) =>",
							" (v,k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"(node, ast) =>",
							" function PathOf(node, ast = $.data)",
							" n =>",
							" function Hier(node_or_path, ast = $.data)",
							"p =>",
							"([p, n]) =>",
							" ([p, n]) =>",
							" function FindType(typeName, ast = $.data)",
							"([tok]) =>",
							" n =>",
							"node =>",
							"Type",
							"constructor(node, ast)",
							" n =>",
							"n =>",
							" (n, p) =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isFunction()",
							"isArray()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"getPointer(ast)",
							" n =>",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = $.data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"get size()",
							"(acc,[name,type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"n =>",
							"FunctionDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							" n =>",
							"({ name, type }) =>",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"BuiltinType",
							"constructor(node, ast)",
							"PointerType",
							"constructor(node, ast)",
							"toJSON()",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Location",
							"constructor(loc)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, output, args = [])",
							"p =>",
							" data =>",
							" data =>",
							"async reader =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							"node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							" function NameFor(decl, ast = this.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = $.data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = $.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AQAAAAAAAAAAAAAApScAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					74,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								390,
								417
							],
							[
								497,
								527
							],
							[
								594,
								602
							],
							[
								640,
								667
							],
							[
								716,
								743
							],
							[
								825,
								829
							],
							[
								852,
								885
							],
							[
								1072,
								1076
							],
							[
								1095,
								1115
							],
							[
								1271,
								1303
							],
							[
								1467,
								1485
							],
							[
								1759,
								1770
							],
							[
								1794,
								1801
							],
							[
								1830,
								1839
							],
							[
								1969,
								1975
							],
							[
								2097,
								2105
							],
							[
								2230,
								2239
							],
							[
								2265,
								2274
							],
							[
								2305,
								2309
							],
							[
								2370,
								2374
							],
							[
								2450,
								2466
							],
							[
								2726,
								2741
							],
							[
								2808,
								2817
							],
							[
								2885,
								2893
							],
							[
								2948,
								2957
							],
							[
								3031,
								3041
							],
							[
								3095,
								3104
							],
							[
								3134,
								3143
							],
							[
								3253,
								3264
							],
							[
								3466,
								3470
							],
							[
								4125,
								4136
							],
							[
								4386,
								4400
							],
							[
								4450,
								4486
							],
							[
								4524,
								4529
							],
							[
								4570,
								4612
							],
							[
								4805,
								4809
							],
							[
								4843,
								4854
							],
							[
								4886,
								4905
							],
							[
								5224,
								5266
							],
							[
								5338,
								5348
							],
							[
								5569,
								5574
							],
							[
								5640,
								5647
							],
							[
								5764,
								5768
							],
							[
								5866,
								5888
							],
							[
								6379,
								6384
							],
							[
								8206,
								8210
							],
							[
								8991,
								9001
							],
							[
								9219,
								9231
							],
							[
								9372,
								9380
							],
							[
								9463,
								9474
							],
							[
								9550,
								9562
							],
							[
								9654,
								9663
							],
							[
								9734,
								9743
							],
							[
								9861,
								9877
							],
							[
								9947,
								9963
							],
							[
								10052,
								10065
							],
							[
								10598,
								10613
							],
							[
								10698,
								10703
							],
							[
								10955,
								10969
							],
							[
								11075,
								11087
							],
							[
								11156,
								11168
							],
							[
								11227,
								11244
							],
							[
								11330,
								11341
							],
							[
								11435,
								11448
							],
							[
								11588,
								11596
							],
							[
								11703,
								11713
							],
							[
								11915,
								11924
							],
							[
								13405,
								13415
							],
							[
								16280,
								16286
							],
							[
								16570,
								16581
							],
							[
								16681,
								16717
							],
							[
								16895,
								16903
							],
							[
								16963,
								16971
							],
							[
								18769,
								18799
							],
							[
								18878,
								18888
							],
							[
								18906,
								18928
							],
							[
								19108,
								19116
							],
							[
								19197,
								19205
							],
							[
								19382,
								19389
							],
							[
								19440,
								19454
							],
							[
								19863,
								19867
							],
							[
								20047,
								20052
							],
							[
								20680,
								20684
							],
							[
								21427,
								21437
							],
							[
								21512,
								21532
							],
							[
								21735,
								21743
							],
							[
								21865,
								21884
							],
							[
								21981,
								21989
							],
							[
								22007,
								22029
							],
							[
								22145,
								22153
							],
							[
								22258,
								22284
							],
							[
								22535,
								22543
							],
							[
								22658,
								22669
							],
							[
								22687,
								22709
							],
							[
								22777,
								22781
							],
							[
								22887,
								22897
							],
							[
								22957,
								22961
							],
							[
								23024,
								23028
							],
							[
								23078,
								23082
							],
							[
								23555,
								23565
							],
							[
								23603,
								23611
							],
							[
								23708,
								23717
							],
							[
								23735,
								23757
							],
							[
								23861,
								23865
							],
							[
								24275,
								24287
							],
							[
								24305,
								24327
							],
							[
								24517,
								24525
							],
							[
								24588,
								24596
							],
							[
								24786,
								24791
							],
							[
								25100,
								25119
							],
							[
								25180,
								25188
							],
							[
								25297,
								25304
							],
							[
								25322,
								25344
							],
							[
								25687,
								25695
							],
							[
								25792,
								25801
							],
							[
								25838,
								25849
							],
							[
								25867,
								25889
							],
							[
								25939,
								25950
							],
							[
								25968,
								25990
							],
							[
								26161,
								26169
							],
							[
								26272,
								26289
							],
							[
								26307,
								26329
							],
							[
								26595,
								26603
							],
							[
								26714,
								26722
							],
							[
								26727,
								26743
							],
							[
								26945,
								26958
							],
							[
								26993,
								27008
							],
							[
								27093,
								27103
							],
							[
								27416,
								27436
							],
							[
								27519,
								27565
							],
							[
								29018,
								29082
							],
							[
								29360,
								29364
							],
							[
								30125,
								30133
							],
							[
								30241,
								30249
							],
							[
								30324,
								30339
							],
							[
								30619,
								30626
							],
							[
								30680,
								30687
							],
							[
								30771,
								30778
							],
							[
								30955,
								30990
							],
							[
								31029,
								31049
							],
							[
								31079,
								31085
							],
							[
								31106,
								31114
							],
							[
								31220,
								31253
							],
							[
								31566,
								31591
							],
							[
								31986,
								32028
							],
							[
								32679,
								32732
							],
							[
								33677,
								33683
							],
							[
								33733,
								33739
							],
							[
								33823,
								33829
							],
							[
								34027,
								34043
							],
							[
								34348,
								34355
							],
							[
								34398,
								34402
							],
							[
								34422,
								34429
							],
							[
								34549,
								34576
							],
							[
								34634,
								34641
							],
							[
								34910,
								34917
							],
							[
								34977,
								34991
							],
							[
								35036,
								35051
							],
							[
								35076,
								35080
							],
							[
								35111,
								35122
							],
							[
								35155,
								35167
							],
							[
								35201,
								35214
							],
							[
								35286,
								35291
							],
							[
								35389,
								35393
							],
							[
								35417,
								35429
							],
							[
								35498,
								35503
							],
							[
								35563,
								35567
							],
							[
								35598,
								35607
							],
							[
								35620,
								35636
							],
							[
								35997,
								36001
							],
							[
								36025,
								36036
							],
							[
								36095,
								36099
							],
							[
								36137,
								36141
							],
							[
								36194,
								36234
							],
							[
								36293,
								36309
							],
							[
								36671,
								36692
							],
							[
								36718,
								36722
							],
							[
								37165,
								37170
							],
							[
								37211,
								37238
							],
							[
								37432,
								37454
							],
							[
								38460,
								38501
							],
							[
								38581,
								38588
							],
							[
								38654,
								38661
							],
							[
								38698,
								38724
							],
							[
								38818,
								38826
							],
							[
								38892,
								38900
							],
							[
								38962,
								38973
							],
							[
								39120,
								39146
							],
							[
								39198,
								39217
							],
							[
								39293,
								39310
							],
							[
								39345,
								39369
							],
							[
								39615,
								39620
							],
							[
								39677,
								39684
							],
							[
								39765,
								39776
							],
							[
								40266,
								40276
							],
							[
								40322,
								40326
							],
							[
								40984,
								40995
							],
							[
								41006,
								41030
							],
							[
								41098,
								41130
							],
							[
								41286,
								41311
							],
							[
								41375,
								41411
							],
							[
								41481,
								41521
							],
							[
								41773,
								41801
							],
							[
								41848,
								41879
							],
							[
								42108,
								42150
							],
							[
								42353,
								42374
							],
							[
								42419,
								42438
							],
							[
								42772,
								42791
							],
							[
								42995,
								43030
							],
							[
								43148,
								43196
							],
							[
								43442,
								43469
							],
							[
								44087,
								44128
							],
							[
								44366,
								44393
							],
							[
								44536,
								44557
							],
							[
								44618,
								44645
							],
							[
								44690,
								44722
							],
							[
								44972,
								44998
							],
							[
								45192,
								45211
							],
							[
								45873,
								45898
							],
							[
								45946,
								45977
							],
							[
								46044,
								46059
							],
							[
								46254,
								46275
							],
							[
								46392,
								46428
							],
							[
								46648,
								46667
							],
							[
								47071,
								47092
							],
							[
								47309,
								47342
							],
							[
								47402,
								47425
							],
							[
								47488,
								47505
							],
							[
								47625,
								47629
							],
							[
								48456,
								48481
							],
							[
								48688,
								48715
							],
							[
								49180,
								49184
							],
							[
								49394,
								49398
							],
							[
								49597,
								49616
							],
							[
								49713,
								49718
							],
							[
								49872,
								49911
							],
							[
								50010,
								50053
							],
							[
								50263,
								50278
							],
							[
								50448,
								50484
							],
							[
								50580,
								50608
							],
							[
								50878,
								50922
							],
							[
								50984,
								51015
							],
							[
								51074,
								51095
							],
							[
								51154,
								51177
							],
							[
								51600,
								51626
							],
							[
								51694,
								51720
							],
							[
								51784,
								51803
							],
							[
								51844,
								51879
							],
							[
								52053,
								52095
							],
							[
								52280,
								52301
							],
							[
								52477,
								52507
							],
							[
								52727,
								52753
							],
							[
								53181,
								53200
							],
							[
								53261,
								53284
							],
							[
								53819,
								53846
							],
							[
								53896,
								53919
							],
							[
								54076,
								54112
							],
							[
								54182,
								54211
							],
							[
								54269,
								54292
							],
							[
								54470,
								54495
							],
							[
								54579,
								54621
							],
							[
								54720,
								54745
							],
							[
								55049,
								55104
							],
							[
								55346,
								55375
							],
							[
								55626,
								55670
							],
							[
								55802,
								55846
							],
							[
								55933,
								55961
							],
							[
								56105,
								56129
							],
							[
								56377,
								56421
							],
							[
								56743,
								56796
							],
							[
								56895,
								56940
							],
							[
								57015,
								57034
							],
							[
								57095,
								57116
							],
							[
								57293,
								57320
							],
							[
								57369,
								57399
							],
							[
								57411,
								57432
							],
							[
								57444,
								57476
							],
							[
								57618,
								57648
							],
							[
								57660,
								57701
							],
							[
								57713,
								57752
							],
							[
								57764,
								57787
							],
							[
								57799,
								57822
							],
							[
								57834,
								57853
							],
							[
								57865,
								57907
							],
							[
								57919,
								57944
							],
							[
								57956,
								57983
							],
							[
								57995,
								58033
							],
							[
								58045,
								58127
							],
							[
								58139,
								58206
							],
							[
								58218,
								58243
							],
							[
								58255,
								58297
							],
							[
								58309,
								58347
							],
							[
								58359,
								58416
							],
							[
								58428,
								58466
							],
							[
								58478,
								58503
							],
							[
								58515,
								58542
							],
							[
								58554,
								58592
							],
							[
								58604,
								58660
							],
							[
								58754,
								58805
							],
							[
								58817,
								58892
							],
							[
								58904,
								58935
							],
							[
								58947,
								58966
							],
							[
								58978,
								59014
							],
							[
								59110,
								59131
							],
							[
								59143,
								59173
							],
							[
								59185,
								59208
							],
							[
								59220,
								59263
							],
							[
								59275,
								59313
							],
							[
								59325,
								59369
							],
							[
								59381,
								59405
							],
							[
								59417,
								59447
							],
							[
								59459,
								59485
							],
							[
								59529,
								59576
							],
							[
								59588,
								59630
							],
							[
								59642,
								59680
							],
							[
								59692,
								59728
							],
							[
								59740,
								59787
							],
							[
								59799,
								59822
							],
							[
								59834,
								59868
							],
							[
								59880,
								59923
							],
							[
								59935,
								59987
							],
							[
								60091,
								60138
							],
							[
								60150,
								60178
							],
							[
								60190,
								60228
							],
							[
								60240,
								60281
							],
							[
								60293,
								60312
							],
							[
								60324,
								60353
							],
							[
								60365,
								60391
							],
							[
								60403,
								60431
							],
							[
								60443,
								60495
							],
							[
								60507,
								60535
							],
							[
								60547,
								60581
							],
							[
								60593,
								60614
							],
							[
								60626,
								60649
							],
							[
								60661,
								60699
							],
							[
								60711,
								60749
							],
							[
								60761,
								60782
							],
							[
								60794,
								60819
							],
							[
								60831,
								60856
							],
							[
								60868,
								60899
							],
							[
								60911,
								60930
							],
							[
								60942,
								60965
							],
							[
								60977,
								61018
							],
							[
								61030,
								61073
							],
							[
								61085,
								61112
							],
							[
								61124,
								61162
							],
							[
								61174,
								61207
							],
							[
								61219,
								61255
							],
							[
								61267,
								61286
							],
							[
								61298,
								61361
							],
							[
								61373,
								61429
							],
							[
								61441,
								61464
							],
							[
								61476,
								61511
							],
							[
								61523,
								61579
							],
							[
								61591,
								61644
							],
							[
								61656,
								61701
							],
							[
								61713,
								61758
							],
							[
								61770,
								61815
							],
							[
								61827,
								61857
							],
							[
								61869,
								61916
							],
							[
								61928,
								61953
							],
							[
								61965,
								61998
							],
							[
								62010,
								62040
							],
							[
								62052,
								62092
							],
							[
								62104,
								62157
							],
							[
								62169,
								62192
							],
							[
								62204,
								62225
							],
							[
								62237,
								62277
							],
							[
								62289,
								62323
							],
							[
								62335,
								62357
							],
							[
								62369,
								62403
							],
							[
								62415,
								62438
							],
							[
								62450,
								62492
							],
							[
								62504,
								62535
							],
							[
								62547,
								62573
							],
							[
								62586,
								62616
							],
							[
								63190,
								63230
							],
							[
								63440,
								63444
							],
							[
								64585,
								64625
							],
							[
								65007,
								65067
							],
							[
								65503,
								65529
							],
							[
								65637,
								65675
							],
							[
								65871,
								65875
							],
							[
								66162,
								66192
							],
							[
								66650,
								66654
							],
							[
								67306,
								67345
							],
							[
								68008,
								68065
							],
							[
								68386,
								68410
							],
							[
								68882,
								68912
							],
							[
								69175,
								69216
							],
							[
								69351,
								69390
							],
							[
								69402,
								69447
							],
							[
								69459,
								69487
							],
							[
								69499,
								69535
							],
							[
								69679,
								69717
							],
							[
								69729,
								69768
							],
							[
								69780,
								69821
							],
							[
								69833,
								69868
							],
							[
								69880,
								69927
							],
							[
								69939,
								69978
							],
							[
								69991,
								70025
							],
							[
								70037,
								70085
							],
							[
								70097,
								70140
							],
							[
								70152,
								70201
							],
							[
								70213,
								70263
							],
							[
								70275,
								70324
							],
							[
								70578,
								70602
							],
							[
								70657,
								70682
							],
							[
								71061,
								71090
							],
							[
								71269,
								71274
							],
							[
								71546,
								71567
							],
							[
								71634,
								71677
							],
							[
								71864,
								71868
							],
							[
								72450,
								72458
							],
							[
								72510,
								72518
							],
							[
								72630,
								72634
							],
							[
								72886,
								72911
							],
							[
								72946,
								72956
							],
							[
								73020,
								73031
							],
							[
								73105,
								73120
							],
							[
								73159,
								73163
							],
							[
								73242,
								73267
							],
							[
								73306,
								73314
							],
							[
								73355,
								73384
							],
							[
								73414,
								73418
							]
						],
						"symlist":
						[
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v,k) =>",
							" (v,k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"(node, ast) =>",
							" function PathOf(node, ast = $.data)",
							" n =>",
							" function Hier(node_or_path, ast = $.data)",
							"p =>",
							"([p, n]) =>",
							" ([p, n]) =>",
							" function FindType(typeName, ast = $.data)",
							"([tok]) =>",
							" n =>",
							"node =>",
							"Type",
							"constructor(node, ast)",
							" n =>",
							"n =>",
							" (n, p) =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isFunction()",
							"isArray()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"getPointer(ast)",
							" n =>",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = $.data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"get size()",
							"(acc,[name,type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"n =>",
							"FunctionDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							" n =>",
							"({ name, type }) =>",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"BuiltinType",
							"constructor(node, ast)",
							"PointerType",
							"constructor(node, ast)",
							"toJSON()",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Location",
							"constructor(loc)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, output, args = [])",
							"p =>",
							" data =>",
							" data =>",
							"async reader =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							"node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							" function NameFor(decl, ast = this.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = $.data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = $.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClJwAARmlsZVRpbWUoZmlsZW5hbWUpCk5ld2VyKGZpbGUsIC4uLm90aGVyKQogIG90aGVyID0+Ck9sZGVyKGZpbGUsIG90aGVyKQpHZXRTdWJzY3JpcHRzKHN0cikKICBtID0+ClRyaW1TdWJzY3JpcHRzKHN0ciwgc3ViKQpMaXN0CiAgY29uc3RydWN0b3IoLi4uYXJncykKICBmaWx0ZXIoY2FsbGJhY2ssIHRoaXNBcmcgPSBudWxsKQogIGNhbGxiYWNrID0gZWxlbSA9PgogIGdldCBmaXJzdCgpCiAgZWxlbSA9PgogIGVudHJpZXMoKQogIGtleXMoKQogIHZhbHVlcygpCiAgdG9BcnJheSgpCihhLCBuKSA9PgpMaXN0Ck5vZGUKICBjb25zdHJ1Y3Rvcihhc3QpCiAgc3RhdGljIGdldChhc3QpCiAgZ2V0IGFzdCgpCiAgZ2V0IGlkKCkKICBnZXQgbG9jKCkKICBnZXQgZmlsZSgpCiAgKHYsaykgPT4KICAodixrKSA9PgogIGdldCByYW5nZSgpCiAgciA9PgogIHRvSlNPTihvYmopCihub2RlLCBhc3QpID0+ClBhdGhPZihub2RlLCBhc3QgPSAkLmRhdGEpCiAgbiA9PgpIaWVyKG5vZGVfb3JfcGF0aCwgYXN0ID0gJC5kYXRhKQogIHAgPT4KKFtwLCBuXSkgPT4KICAoW3AsIG5dKSA9PgpGaW5kVHlwZSh0eXBlTmFtZSwgYXN0ID0gJC5kYXRhKQooW3Rva10pID0+CiAgbiA9PgogIG5vZGUgPT4KVHlwZQogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICBuID0+CiAgbiA9PgogIChuLCBwKSA9PgogIGdldCByZWdFeHAoKQogIGlzRW51bSgpCiAgaXNQb2ludGVyKCkKICBpc0Z1bmN0aW9uKCkKICBpc0FycmF5KCkKICBhcnJheU9mKCkKICBnZXQgc3Vic2NyaXB0cygpCiAgdHJpbVN1YnNjcmlwdHMoKQogIGdldCBwb2ludGVyKCkKICBnZXRQb2ludGVyKGFzdCkKICBuID0+CiAgZ2V0IHVuc2lnbmVkKCkKICBnZXQgc2lnbmVkKCkKICBpc0NvbXBvdW5kKCkKICBpc0Zsb2F0aW5nUG9pbnQoKQogIGdldCBhbGlhcygpCiAgZ2V0IGFsaWFzZXMoKQogIGlzRW51bSgpCiAgaXNTdHJpbmcoKQogIGdldCBmZmkoKQogIGdldCBzaXplKCkKICB0b0pTKCkKICB0b0pTT04ob2JqKQogIHN0YXRpYyBnZXQobmFtZV9vcl9pZCwgYXN0ID0gJC5kYXRhKQogIG5vZGUgPT4KICBub2RlID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpSZWNvcmREZWNsCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIGNoaWxkID0+CiAgY2hpbGQgPT4KICBub2RlID0+CihhY2MsIG5vZGUpID0+CiAgaSA9PgogIG4gPT4KICBuID0+CiAgZ2V0IHNpemUoKQooYWNjLFtuYW1lLHR5cGVdKSA9PgogIHRvSlNPTigpCihbbmFtZSwgbWVtYmVyXSkgPT4KRW51bURlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgY2hpbGQgPT4KKHsgbmFtZSwgdHlwZSwgaW5uZXIgfSkgPT4KICB0b0pTT04oKQpUeXBlZGVmRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICBuID0+CiAgKHYsIGspID0+CiAgbiA9PgogIG4gPT4KICBuID0+CiAgZ2V0IHNpemUoKQogIHRvSlNPTigpCkZpZWxkRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICBuID0+CkZ1bmN0aW9uRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgbiA9PgooeyBuYW1lLCB0eXBlIH0pID0+CiAgdG9KU09OKCkKVmFyRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICB0b0pTT04oKQpDbGFzc0RlY2wKQnVpbHRpblR5cGUKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpClBvaW50ZXJUeXBlCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIHRvSlNPTigpCkNvbnN0YW50QXJyYXlUeXBlCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIHRvSlNPTigpCkxvY2F0aW9uCiAgY29uc3RydWN0b3IobG9jKQogICh0LCAuLi5jKSA9PgonXHgxYlttJyA6IHQgPT4KICB0b1N0cmluZygpCiAgbG9jYWxlQ29tcGFyZShvdGhlcikKVHlwZUZhY3Rvcnkobm9kZSwgYXN0LCBjYWNoZSA9IHRydWUpClNwYXduQ29tcGlsZXIoY29tcGlsZXIsIGlucHV0LCBvdXRwdXQsIGFyZ3MgPSBbXSkKICBwID0+CiAgZGF0YSA9PgogIGRhdGEgPT4KICByZWFkZXIgPT4KICBsaW5lID0+CiAgbGluZSA9PgogIGxpbmUgPT4KUGlwZVJlYWRlcihmZCwgY2FsbGJhY2spCihyZXNvbHZlLCByZWplY3QpID0+CiAgKCkgPT4KICBkYXRhID0+ClJlYWRQaXBlKGZkLCBjYWxsYmFjaykKUmVhZE91dHB1dChmZCkKU291cmNlRGVwZW5kZW5jaWVzKC4uLmFyZ3MpCkFzdER1bXAoY29tcGlsZXIsIHNvdXJjZSwgYXJncywgZm9yY2UpCiAgc2l6ZSgpCiAganNvbigpCiAgZGF0YSgpClNldEZpbGUgPSBsb2MgPT4KICBmaWxlcygpCiAgbiA9PgogIGZpbGUgPT4KICBwcmVkMiA9ICh1c2VkLCBpbXBsaWNpdCkgPT4KICBub2RlID0+CiAgdHlwZXMoKQogIG4gPT4KICAoKSA9PgpMaXN0CiAgZnVuY3Rpb25zKCkKICBuID0+CiAgKCkgPT4KICBuID0+Ckxpc3QKICBuYW1lc3BhY2VzKCkKICBuID0+Ckxpc3QKICBjbGFzc2VzKCkKICBwcmVkaWNhdGUgPSBuID0+Ckxpc3QKICB2YXJpYWJsZXMoKQogIG4gPT4KTGlzdApOYW1lRm9yKGRlY2wsIGFzdCA9IHRoaXMuZGF0YSkKICAodmFsdWUsIGtleSkgPT4KTm9kZVR5cGUobikKICB0ID0+CiAgbiA9PgpOb2RlTmFtZShuLCBuYW1lKQpHZXRMb2Mobm9kZSkKR2V0VHlwZU5vZGUobm9kZSwgYXN0ID0gJC5kYXRhKQogIG5vZGUgPT4KICBub2RlID0+CkdldFR5cGVTdHIobm9kZSkKICBpbm5lciA9PgogIGlubmVyID0+CihbbiwgdF0pID0+Ck5vZGVQcmludGVyKGFzdCkKICBwdXQoc3RyKQogIHRyaW0oKQogIHByaW50ZXIgPSBmdW5jdGlvbihub2RlKQogIGdldCgpCiAgdmFsdWUoKQogIHZhbHVlKG5vZGUpCiAgdG9TdHJpbmcoKQogIGkgPT4KTm9kZVByaW50ZXIKQWJpVGFnQXR0cihhYmlfdGFnX2F0dHIpCkFjY2Vzc1NwZWNEZWNsKGFjY2Vzc19zcGVjX2RlY2wpCkFsaWduZWRBdHRyKGFsaWduZWRfYXR0cikKQWx3YXlzSW5saW5lQXR0cihhbHdheXNfaW5saW5lX2F0dHIpCkFycmF5U3Vic2NyaXB0RXhwcihhcnJheV9zdWJzY3JpcHRfZXhwcikKQXNtTGFiZWxBdHRyKGFzbV9sYWJlbF9hdHRyKQpCaW5hcnlPcGVyYXRvcihiaW5hcnlfb3BlcmF0b3IpCkJsb2NrQ29tbWFuZENvbW1lbnQoYmxvY2tfY29tbWFuZF9jb21tZW50KQpCcmVha1N0bXQoYnJlYWtfc3RtdCkKQ2FsbEV4cHIoY2FsbF9leHByKQpDYXNlU3RtdChjYXNlX3N0bXQpCkNoYXJhY3RlckxpdGVyYWwoY2hhcmFjdGVyX2xpdGVyYWwpCkNvbXBvdW5kQXNzaWduT3BlcmF0b3IoY29tcG91bmRfYXNzaWduX29wZXJhdG9yKQpDb21wb3VuZFN0bXQoY29tcG91bmRfc3RtdCkKQ29uZGl0aW9uYWxPcGVyYXRvcihjb25kaXRpb25hbF9vcGVyYXRvcikKQ29uc3RhbnRFeHByKGNvbnN0YW50X2V4cHIpCkNvbnN0QXR0cihjb25zdF9hdHRyKQpDb250aW51ZVN0bXQoY29udGludWVfc3RtdCkKQ1N0eWxlQ2FzdEV4cHIoY3N0eWxlX2Nhc3RfZXhwcikKRGVjbFJlZkV4cHIoZGVjbF9yZWZfZXhwcikKRGVjbFN0bXQoZGVjbF9zdG10KQpEZWZhdWx0U3RtdChkZWZhdWx0X3N0bXQpCkRlcHJlY2F0ZWRBdHRyKGRlcHJlY2F0ZWRfYXR0cikKRG9TdG10KGRvX3N0bXQpCkVtcHR5RGVjbChlbXB0eV9kZWNsKQpFbnVtQ29uc3RhbnREZWNsKGVudW1fY29uc3RhbnRfZGVjbCkKRW51bURlY2woZW51bV9kZWNsKQpGaWVsZERlY2woZmllbGRfZGVjbCkKRmxvYXRpbmdMaXRlcmFsKGZsb2F0aW5nX2xpdGVyYWwpCkZvcm1hdEF0dHIoZm9ybWF0X2F0dHIpCkZvclN0bXQoZm9yX3N0bXQpCiAgbiA9PgpGdWxsQ29tbWVudChmdWxsX2NvbW1lbnQpCkZ1bmN0aW9uRGVjbChmdW5jdGlvbl9kZWNsKQogIG4gPT4KICBuID0+CkdvdG9TdG10KGdvdG9fc3RtdCkKICBuID0+CkhUTUxFbmRUYWdDb21tZW50KGh0bWxfZW5kX3RhZ19jb21tZW50KQpIVE1MU3RhcnRUYWdDb21tZW50KGh0bWxfc3RhcnRfdGFnX2NvbW1lbnQpCklmU3RtdChpZl9zdG10KQpJbXBsaWNpdENhc3RFeHByKGltcGxpY2l0X2Nhc3RfZXhwcikKSW5pdExpc3RFeHByKGluaXRfbGlzdF9leHByKQpJbmxpbmVDb21tYW5kQ29tbWVudChpbmxpbmVfY29tbWFuZF9jb21tZW50KQpJbnRlZ2VyTGl0ZXJhbChpbnRlZ2VyX2xpdGVyYWwpCkxhYmVsU3RtdChsYWJlbF9zdG10KQpNZW1iZXJFeHByKG1lbWJlcl9leHByKQpOb25OdWxsQXR0cihub25fbnVsbF9hdHRyKQpOb1Rocm93QXR0cihub190aHJvd19hdHRyKQpOdWxsU3RtdChudWxsX3N0bXQpClBhcmFncmFwaENvbW1lbnQocGFyYWdyYXBoX2NvbW1lbnQpClBhcmFtQ29tbWFuZENvbW1lbnQocGFyYW1fY29tbWFuZF9jb21tZW50KQpQYXJlbkV4cHIocGFyZW5fZXhwcikKUGFyZW5MaXN0RXhwcihwYXJlbl9saXN0X2V4cHIpClBhcm1WYXJEZWNsKHBhcm1fdmFyX2RlY2wpClB1cmVBdHRyKHB1cmVfYXR0cikKUmVjb3JkRGVjbChyZWNvcmRfZGVjbCkKUmVzdHJpY3RBdHRyKHJlc3RyaWN0X2F0dHIpClJldHVyblN0bXQocmV0dXJuX3N0bXQpClJldHVybnNUd2ljZUF0dHIocmV0dXJuc190d2ljZV9hdHRyKQpTdHJpbmdMaXRlcmFsKHN0cmluZ19saXRlcmFsKQpTd2l0Y2hTdG10KHN3aXRjaF9zdG10KQpUZXh0Q29tbWVudCh0ZXh0X2NvbW1lbnQpClRyYW5zbGF0aW9uVW5pdERlY2wodHJhbnNsYXRpb25fdW5pdF9kZWNsKQpUeXBlZGVmRGVjbCh0eXBlZGVmX2RlY2wpClVuYXJ5RXhwck9yVHlwZVRyYWl0RXhwcih1bmFyeV9leHByX29yX3R5cGVfdHJhaXRfZXhwcikKVW5hcnlPcGVyYXRvcih1bmFyeV9vcGVyYXRvcikKVW5yZXNvbHZlZExvb2t1cEV4cHIodW5yZXNvbHZlZF9sb29rdXBfZXhwcikKVW5yZXNvbHZlZE1lbWJlckV4cHIodW5yZXNvbHZlZF9tZW1iZXJfZXhwcikKVmFyRGVjbCh2YXJfZGVjbCwgYmFzZV90eXBlKQooW29mZnNldCwgc3Vic2NyaXB0XSkgPT4KVmVyYmF0aW1CbG9ja0NvbW1lbnQodmVyYmF0aW1fYmxvY2tfY29tbWVudCkKVmVyYmF0aW1CbG9ja0xpbmVDb21tZW50KHZlcmJhdGltX2Jsb2NrX2xpbmVfY29tbWVudCkKV2FyblVudXNlZFJlc3VsdEF0dHIod2Fybl91bnVzZWRfcmVzdWx0X2F0dHIpCldlYWtBdHRyKHdlYWtfYXR0cikKV2hpbGVTdG10KHdoaWxlX3N0bXQpCk92ZXJyaWRlQXR0cihvdmVycmlkZV9hdHRyKQpBZGRyTGFiZWxFeHByKGFkZHJfbGFiZWxfZXhwcikKQWxpYXNBdHRyKGFsaWFzX2F0dHIpCkFsaWduVmFsdWVBdHRyKGFsaWduX3ZhbHVlX2F0dHIpCkFsbG9jU2l6ZUF0dHIoYWxsb2Nfc2l6ZV9hdHRyKQpBcnJheUluaXRJbmRleEV4cHIoYXJyYXlfaW5pdF9pbmRleF9leHByKQpBcnJheUluaXRMb29wRXhwcihhcnJheV9pbml0X2xvb3BfZXhwcikKQXRvbWljRXhwcihhdG9taWNfZXhwcikKQXRvbWljVHlwZShhdG9taWNfdHlwZSkKQXV0b1R5cGUoYXV0b190eXBlKQpCdWlsdGluVGVtcGxhdGVEZWNsKGJ1aWx0aW5fdGVtcGxhdGVfZGVjbCkKQnVpbHRpblR5cGUoYnVpbHRpbl90eXBlKQpDYWxsYmFja0F0dHIoY2FsbGJhY2tfYXR0cikKQ2xhc3NUZW1wbGF0ZURlY2woY2xhc3NfdGVtcGxhdGVfZGVjbCkKQ2xhc3NUZW1wbGF0ZVBhcnRpYWxTcGVjaWFsaXphdGlvbkRlY2woY2xhc3NfdGVtcGxhdGVfcGFydGlhbF9zcGVjaWFsaXphdGlvbl9kZWNsKQpDbGFzc1RlbXBsYXRlU3BlY2lhbGl6YXRpb25EZWNsKGNsYXNzX3RlbXBsYXRlX3NwZWNpYWxpemF0aW9uX2RlY2wpCkNvbXBsZXhUeXBlKGNvbXBsZXhfdHlwZSkKQ29tcG91bmRMaXRlcmFsRXhwcihjb21wb3VuZF9saXRlcmFsX2V4cHIpCkNvbnN0YW50QXJyYXlUeXBlKGNvbnN0YW50X2FycmF5X3R5cGUpCkNvbnN0cnVjdG9yVXNpbmdTaGFkb3dEZWNsKGNvbnN0cnVjdG9yX3VzaW5nX3NoYWRvd19kZWNsKQpDb252ZXJ0VmVjdG9yRXhwcihjb252ZXJ0X3ZlY3Rvcl9leHByKQpEZWNheWVkVHlwZShkZWNheWVkX3R5cGUpCkRlY2x0eXBlVHlwZShkZWNsdHlwZV90eXBlKQpEZXBlbmRlbnROYW1lVHlwZShkZXBlbmRlbnRfbmFtZV90eXBlKQpEZXBlbmRlbnRTY29wZURlY2xSZWZFeHByKGRlcGVuZGVudF9zY29wZV9kZWNsX3JlZl9leHByKQpEZXBlbmRlbnRTaXplZEFycmF5VHlwZShkZXBlbmRlbnRfc2l6ZWRfYXJyYXlfdHlwZSkKRGVwZW5kZW50VGVtcGxhdGVTcGVjaWFsaXphdGlvblR5cGUoZGVwZW5kZW50X3RlbXBsYXRlX3NwZWNpYWxpemF0aW9uX3R5cGUpCkVsYWJvcmF0ZWRUeXBlKGVsYWJvcmF0ZWRfdHlwZSkKRW51bVR5cGUoZW51bV90eXBlKQpFeHByV2l0aENsZWFudXBzKGV4cHJfd2l0aF9jbGVhbnVwcykKRmluYWxBdHRyKGZpbmFsX2F0dHIpCkZvcm1hdEFyZ0F0dHIoZm9ybWF0X2FyZ19hdHRyKQpGcmllbmREZWNsKGZyaWVuZF9kZWNsKQpGdW5jdGlvbk5vUHJvdG9UeXBlKGZ1bmN0aW9uX25vX3Byb3RvX3R5cGUpCkZ1bmN0aW9uUHJvdG9UeXBlKGZ1bmN0aW9uX3Byb3RvX3R5cGUpCkZ1bmN0aW9uVGVtcGxhdGVEZWNsKGZ1bmN0aW9uX3RlbXBsYXRlX2RlY2wpCkdDQ0FzbVN0bXQoZ2NjX2FzbV9zdG10KQpHTlVJbmxpbmVBdHRyKGdudV9pbmxpbmVfYXR0cikKR05VTnVsbEV4cHIoZ251X251bGxfZXhwcikKSW1wbGljaXRWYWx1ZUluaXRFeHByKGltcGxpY2l0X3ZhbHVlX2luaXRfZXhwcikKSW5jb21wbGV0ZUFycmF5VHlwZShpbmNvbXBsZXRlX2FycmF5X3R5cGUpCkluZGlyZWN0RmllbGREZWNsKGluZGlyZWN0X2ZpZWxkX2RlY2wpCkluZGlyZWN0R290b1N0bXQoaW5kaXJlY3RfZ290b19zdG10KQpJbmplY3RlZENsYXNzTmFtZVR5cGUoaW5qZWN0ZWRfY2xhc3NfbmFtZV90eXBlKQpMYW1iZGFFeHByKGxhbWJkYV9leHByKQpMaW5rYWdlU3BlY0RlY2wobGlua2FnZV9zcGVjX2RlY2wpCkxWYWx1ZVJlZmVyZW5jZVR5cGUobF92YWx1ZV9yZWZlcmVuY2VfdHlwZSkKTWF0ZXJpYWxpemVUZW1wb3JhcnlFeHByKG1hdGVyaWFsaXplX3RlbXBvcmFyeV9leHByKQpNYXhGaWVsZEFsaWdubWVudEF0dHIobWF4X2ZpZWxkX2FsaWdubWVudF9hdHRyKQpNYXlBbGlhc0F0dHIobWF5X2FsaWFzX2F0dHIpCk1lbWJlclBvaW50ZXJUeXBlKG1lbWJlcl9wb2ludGVyX3R5cGUpCk1pblZlY3RvcldpZHRoQXR0cihtaW5fdmVjdG9yX3dpZHRoX2F0dHIpCk1vZGVBdHRyKG1vZGVfYXR0cikKTmFtZXNwYWNlRGVjbChuYW1lc3BhY2VfZGVjbCkKTm9EZWJ1Z0F0dHIobm9fZGVidWdfYXR0cikKTm9JbmxpbmVBdHRyKG5vX2lubGluZV9hdHRyKQpOb25UeXBlVGVtcGxhdGVQYXJtRGVjbChub25fdHlwZV90ZW1wbGF0ZV9wYXJtX2RlY2wpCk9mZnNldE9mRXhwcihvZmZzZXRfb2ZfZXhwcikKT3BhcXVlVmFsdWVFeHByKG9wYXF1ZV92YWx1ZV9leHByKQpPd25lckF0dHIob3duZXJfYXR0cikKUGFja2VkQXR0cihwYWNrZWRfYXR0cikKUGFja0V4cGFuc2lvbkV4cHIocGFja19leHBhbnNpb25fZXhwcikKUGFja0V4cGFuc2lvblR5cGUocGFja19leHBhbnNpb25fdHlwZSkKUGFyZW5UeXBlKHBhcmVuX3R5cGUpClBvaW50ZXJBdHRyKHBvaW50ZXJfYXR0cikKUG9pbnRlclR5cGUocG9pbnRlcl90eXBlKQpQcmVkZWZpbmVkRXhwcihwcmVkZWZpbmVkX2V4cHIpClF1YWxUeXBlKHF1YWxfdHlwZSkKUmVjb3JkVHlwZShyZWNvcmRfdHlwZSkKUmV0dXJuc05vbk51bGxBdHRyKHJldHVybnNfbm9uX251bGxfYXR0cikKUlZhbHVlUmVmZXJlbmNlVHlwZShyX3ZhbHVlX3JlZmVyZW5jZV90eXBlKQpTZW50aW5lbEF0dHIoc2VudGluZWxfYXR0cikKU2h1ZmZsZVZlY3RvckV4cHIoc2h1ZmZsZV92ZWN0b3JfZXhwcikKU2l6ZU9mUGFja0V4cHIoc2l6ZV9vZl9wYWNrX2V4cHIpClN0YXRpY0Fzc2VydERlY2woc3RhdGljX2Fzc2VydF9kZWNsKQpTdG10RXhwcihzdG10X2V4cHIpClN1YnN0Tm9uVHlwZVRlbXBsYXRlUGFybUV4cHIoc3Vic3Rfbm9uX3R5cGVfdGVtcGxhdGVfcGFybV9leHByKQpTdWJzdFRlbXBsYXRlVHlwZVBhcm1UeXBlKHN1YnN0X3RlbXBsYXRlX3R5cGVfcGFybV90eXBlKQpUYXJnZXRBdHRyKHRhcmdldF9hdHRyKQpUZW1wbGF0ZUFyZ3VtZW50KHRlbXBsYXRlX2FyZ3VtZW50KQpUZW1wbGF0ZVNwZWNpYWxpemF0aW9uVHlwZSh0ZW1wbGF0ZV9zcGVjaWFsaXphdGlvbl90eXBlKQpUZW1wbGF0ZVRlbXBsYXRlUGFybURlY2wodGVtcGxhdGVfdGVtcGxhdGVfcGFybV9kZWNsKQpUZW1wbGF0ZVR5cGVQYXJtRGVjbCh0ZW1wbGF0ZV90eXBlX3Bhcm1fZGVjbCkKVGVtcGxhdGVUeXBlUGFybVR5cGUodGVtcGxhdGVfdHlwZV9wYXJtX3R5cGUpClRQYXJhbUNvbW1hbmRDb21tZW50KHRfcGFyYW1fY29tbWFuZF9jb21tZW50KQpUeXBlQWxpYXNEZWNsKHR5cGVfYWxpYXNfZGVjbCkKVHlwZUFsaWFzVGVtcGxhdGVEZWNsKHR5cGVfYWxpYXNfdGVtcGxhdGVfZGVjbCkKVHlwZWRlZlR5cGUodHlwZWRlZl90eXBlKQpUeXBlT2ZFeHByVHlwZSh0eXBlX29mX2V4cHJfdHlwZSkKVHlwZVRyYWl0RXhwcih0eXBlX3RyYWl0X2V4cHIpClVuYXJ5VHJhbnNmb3JtVHlwZSh1bmFyeV90cmFuc2Zvcm1fdHlwZSkKVW5yZXNvbHZlZFVzaW5nVmFsdWVEZWNsKHVucmVzb2x2ZWRfdXNpbmdfdmFsdWVfZGVjbCkKVW51c2VkQXR0cih1bnVzZWRfYXR0cikKVXNpbmdEZWNsKHVzaW5nX2RlY2wpClVzaW5nRGlyZWN0aXZlRGVjbCh1c2luZ19kaXJlY3RpdmVfZGVjbCkKVXNpbmdTaGFkb3dEZWNsKHVzaW5nX3NoYWRvd19kZWNsKQpWQUFyZ0V4cHIodmFfYXJnX2V4cHIpClZhclRlbXBsYXRlRGVjbCh2YXJfdGVtcGxhdGVfZGVjbCkKVmVjdG9yVHlwZSh2ZWN0b3JfdHlwZSkKVmVyYmF0aW1MaW5lQ29tbWVudCh2ZXJiYXRpbV9saW5lX2NvbW1lbnQpClZpc2liaWxpdHlBdHRyKHZpc2liaWxpdHlfYXR0cikKV2Vha1JlZkF0dHIod2Vha19yZWZfYXR0cikKQ1hYUmVjb3JkRGVjbChjeHhfcmVjb3JkX2RlY2wpCkNYWENvbnN0cnVjdG9yRGVjbChjeHhfY29uc3RydWN0b3JfZGVjbCkKICBuID0+CkNYWEN0b3JJbml0aWFsaXplcihjeHhfY3Rvcl9pbml0aWFsaXplcikKQ1hYRGVwZW5kZW50U2NvcGVNZW1iZXJFeHByKGN4eF9kZXBlbmRlbnRfc2NvcGVfbWVtYmVyX2V4cHIpCkNYWFRoaXNFeHByKGN4eF90aGlzX2V4cHIpCkNYWERlc3RydWN0b3JEZWNsKGN4eF9kZXN0cnVjdG9yX2RlY2wpCiAgbiA9PgpDWFhNZXRob2REZWNsKGN4eF9tZXRob2RfZGVjbCkKICBuID0+CkNYWFN0YXRpY0Nhc3RFeHByKGN4eF9zdGF0aWNfY2FzdF9leHByKQpDWFhVbnJlc29sdmVkQ29uc3RydWN0RXhwcihjeHhfdW5yZXNvbHZlZF9jb25zdHJ1Y3RfZXhwcikKQ1hYTmV3RXhwcihjeHhfbmV3X2V4cHIpCkNYWERlbGV0ZUV4cHIoY3h4X2RlbGV0ZV9leHByKQpDWFhCb29sTGl0ZXJhbEV4cHIoY3h4X2Jvb2xfbGl0ZXJhbF9leHByKQpDWFgxMU5vUmV0dXJuQXR0cihjeHgxMV9ub19yZXR1cm5fYXR0cikKQ1hYQmluZFRlbXBvcmFyeUV4cHIoY3h4X2JpbmRfdGVtcG9yYXJ5X2V4cHIpCkNYWENhdGNoU3RtdChjeHhfY2F0Y2hfc3RtdCkKQ1hYQ29uc3RydWN0RXhwcihjeHhfY29uc3RydWN0X2V4cHIpCkNYWENvbnZlcnNpb25EZWNsKGN4eF9jb252ZXJzaW9uX2RlY2wpCkNYWERlZmF1bHRBcmdFeHByKGN4eF9kZWZhdWx0X2FyZ19leHByKQpDWFhEZWZhdWx0SW5pdEV4cHIoY3h4X2RlZmF1bHRfaW5pdF9leHByKQpDWFhGb3JSYW5nZVN0bXQoY3h4X2Zvcl9yYW5nZV9zdG10KQpDWFhGdW5jdGlvbmFsQ2FzdEV4cHIoY3h4X2Z1bmN0aW9uYWxfY2FzdF9leHByKQpDWFhNZW1iZXJDYWxsRXhwcihjeHhfbWVtYmVyX2NhbGxfZXhwcikKQ1hYTm9leGNlcHRFeHByKGN4eF9ub2V4Y2VwdF9leHByKQpDWFhOdWxsUHRyTGl0ZXJhbEV4cHIoY3h4X251bGxfcHRyX2xpdGVyYWxfZXhwcikKQ1hYT3BlcmF0b3JDYWxsRXhwcihjeHhfb3BlcmF0b3JfY2FsbF9leHByKQpDWFhSZWludGVycHJldENhc3RFeHByKGN4eF9yZWludGVycHJldF9jYXN0X2V4cHIpCkNYWFNjYWxhclZhbHVlSW5pdEV4cHIoY3h4X3NjYWxhcl92YWx1ZV9pbml0X2V4cHIpCkNYWFRlbXBvcmFyeU9iamVjdEV4cHIoY3h4X3RlbXBvcmFyeV9vYmplY3RfZXhwcikKQ1hYVHJ5U3RtdChjeHhfdHJ5X3N0bXQpClByaW50Tm9kZShub2RlKQpQcmludEFzdChub2RlLCBhc3QpCiAgZ2V0KCkKICBpc05vZGUob2JqKQpHZXRUeXBlKG5hbWVfb3JfaWQsIGFzdCA9ICQuZGF0YSkKICBuID0+CiAgbm9kZSA9PgogIG5vZGUgPT4KICByID0+CkdldEZpZWxkcyhub2RlKQogICh2LCBrKSA9PgooW3YsIHBdKSA9PgooW2xvYywgcHRyXSkgPT4KICBpID0+CkdldFBhcmFtcyhub2RlKQogIGNoaWxkID0+ClBhdGhSZW1vdmVMb2MocGF0aCkKICBwID0+AAAAAAAAAAClJwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					75,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								390,
								417
							],
							[
								497,
								527
							],
							[
								594,
								602
							],
							[
								640,
								667
							],
							[
								716,
								743
							],
							[
								825,
								829
							],
							[
								852,
								885
							],
							[
								1072,
								1076
							],
							[
								1095,
								1115
							],
							[
								1271,
								1303
							],
							[
								1467,
								1485
							],
							[
								1759,
								1770
							],
							[
								1794,
								1801
							],
							[
								1830,
								1839
							],
							[
								1969,
								1975
							],
							[
								2097,
								2105
							],
							[
								2230,
								2239
							],
							[
								2265,
								2274
							],
							[
								2305,
								2309
							],
							[
								2370,
								2374
							],
							[
								2450,
								2466
							],
							[
								2726,
								2741
							],
							[
								2808,
								2817
							],
							[
								2885,
								2893
							],
							[
								2948,
								2957
							],
							[
								3031,
								3041
							],
							[
								3095,
								3104
							],
							[
								3134,
								3143
							],
							[
								3253,
								3264
							],
							[
								3466,
								3470
							],
							[
								4125,
								4136
							],
							[
								4386,
								4400
							],
							[
								4450,
								4486
							],
							[
								4524,
								4529
							],
							[
								4570,
								4612
							],
							[
								4805,
								4809
							],
							[
								4843,
								4854
							],
							[
								4886,
								4905
							],
							[
								5224,
								5266
							],
							[
								5338,
								5348
							],
							[
								5569,
								5574
							],
							[
								5640,
								5647
							],
							[
								5764,
								5768
							],
							[
								5866,
								5888
							],
							[
								6379,
								6384
							],
							[
								8206,
								8210
							],
							[
								8991,
								9001
							],
							[
								9219,
								9231
							],
							[
								9372,
								9380
							],
							[
								9463,
								9474
							],
							[
								9550,
								9562
							],
							[
								9654,
								9663
							],
							[
								9734,
								9743
							],
							[
								9861,
								9877
							],
							[
								9947,
								9963
							],
							[
								10052,
								10065
							],
							[
								10598,
								10613
							],
							[
								10698,
								10703
							],
							[
								10955,
								10969
							],
							[
								11075,
								11087
							],
							[
								11156,
								11168
							],
							[
								11227,
								11244
							],
							[
								11330,
								11341
							],
							[
								11435,
								11448
							],
							[
								11588,
								11596
							],
							[
								11703,
								11713
							],
							[
								11915,
								11924
							],
							[
								13405,
								13415
							],
							[
								16280,
								16286
							],
							[
								16570,
								16581
							],
							[
								16681,
								16717
							],
							[
								16895,
								16903
							],
							[
								16963,
								16971
							],
							[
								18769,
								18799
							],
							[
								18878,
								18888
							],
							[
								18906,
								18928
							],
							[
								19108,
								19116
							],
							[
								19197,
								19205
							],
							[
								19382,
								19389
							],
							[
								19440,
								19454
							],
							[
								19863,
								19867
							],
							[
								20047,
								20052
							],
							[
								20680,
								20684
							],
							[
								21427,
								21437
							],
							[
								21512,
								21532
							],
							[
								21735,
								21743
							],
							[
								21865,
								21884
							],
							[
								21981,
								21989
							],
							[
								22007,
								22029
							],
							[
								22145,
								22153
							],
							[
								22258,
								22284
							],
							[
								22535,
								22543
							],
							[
								22658,
								22669
							],
							[
								22687,
								22709
							],
							[
								22777,
								22781
							],
							[
								22887,
								22897
							],
							[
								22957,
								22961
							],
							[
								23024,
								23028
							],
							[
								23078,
								23082
							],
							[
								23555,
								23565
							],
							[
								23603,
								23611
							],
							[
								23708,
								23717
							],
							[
								23735,
								23757
							],
							[
								23861,
								23865
							],
							[
								24275,
								24287
							],
							[
								24305,
								24327
							],
							[
								24517,
								24525
							],
							[
								24588,
								24596
							],
							[
								24786,
								24791
							],
							[
								25100,
								25119
							],
							[
								25180,
								25188
							],
							[
								25297,
								25304
							],
							[
								25322,
								25344
							],
							[
								25687,
								25695
							],
							[
								25792,
								25801
							],
							[
								25838,
								25849
							],
							[
								25867,
								25889
							],
							[
								25939,
								25950
							],
							[
								25968,
								25990
							],
							[
								26161,
								26169
							],
							[
								26272,
								26289
							],
							[
								26307,
								26329
							],
							[
								26595,
								26603
							],
							[
								26714,
								26722
							],
							[
								26727,
								26743
							],
							[
								26945,
								26958
							],
							[
								26993,
								27008
							],
							[
								27093,
								27103
							],
							[
								27416,
								27436
							],
							[
								27519,
								27565
							],
							[
								29018,
								29082
							],
							[
								29360,
								29364
							],
							[
								30125,
								30133
							],
							[
								30241,
								30249
							],
							[
								30324,
								30339
							],
							[
								30619,
								30626
							],
							[
								30680,
								30687
							],
							[
								30771,
								30778
							],
							[
								30955,
								30990
							],
							[
								31029,
								31049
							],
							[
								31079,
								31085
							],
							[
								31106,
								31114
							],
							[
								31220,
								31253
							],
							[
								31566,
								31591
							],
							[
								31986,
								32028
							],
							[
								32679,
								32732
							],
							[
								33677,
								33683
							],
							[
								33733,
								33739
							],
							[
								33823,
								33829
							],
							[
								34027,
								34043
							],
							[
								34348,
								34355
							],
							[
								34398,
								34402
							],
							[
								34422,
								34429
							],
							[
								34549,
								34576
							],
							[
								34634,
								34641
							],
							[
								34910,
								34917
							],
							[
								34977,
								34991
							],
							[
								35036,
								35051
							],
							[
								35076,
								35080
							],
							[
								35111,
								35122
							],
							[
								35155,
								35167
							],
							[
								35201,
								35214
							],
							[
								35286,
								35291
							],
							[
								35389,
								35393
							],
							[
								35417,
								35429
							],
							[
								35498,
								35503
							],
							[
								35563,
								35567
							],
							[
								35598,
								35607
							],
							[
								35620,
								35636
							],
							[
								35997,
								36001
							],
							[
								36025,
								36036
							],
							[
								36095,
								36099
							],
							[
								36137,
								36141
							],
							[
								36194,
								36234
							],
							[
								36293,
								36309
							],
							[
								36671,
								36692
							],
							[
								36718,
								36722
							],
							[
								37165,
								37170
							],
							[
								37211,
								37238
							],
							[
								37432,
								37454
							],
							[
								38460,
								38501
							],
							[
								38581,
								38588
							],
							[
								38654,
								38661
							],
							[
								38698,
								38724
							],
							[
								38818,
								38826
							],
							[
								38892,
								38900
							],
							[
								38962,
								38973
							],
							[
								39120,
								39146
							],
							[
								39198,
								39217
							],
							[
								39293,
								39310
							],
							[
								39345,
								39369
							],
							[
								39615,
								39620
							],
							[
								39677,
								39684
							],
							[
								39765,
								39776
							],
							[
								40266,
								40276
							],
							[
								40322,
								40326
							],
							[
								40984,
								40995
							],
							[
								41006,
								41030
							],
							[
								41098,
								41130
							],
							[
								41286,
								41311
							],
							[
								41375,
								41411
							],
							[
								41481,
								41521
							],
							[
								41773,
								41801
							],
							[
								41848,
								41879
							],
							[
								42108,
								42150
							],
							[
								42353,
								42374
							],
							[
								42419,
								42438
							],
							[
								42772,
								42791
							],
							[
								42995,
								43030
							],
							[
								43148,
								43196
							],
							[
								43442,
								43469
							],
							[
								44087,
								44128
							],
							[
								44366,
								44393
							],
							[
								44536,
								44557
							],
							[
								44618,
								44645
							],
							[
								44690,
								44722
							],
							[
								44972,
								44998
							],
							[
								45192,
								45211
							],
							[
								45873,
								45898
							],
							[
								45946,
								45977
							],
							[
								46044,
								46059
							],
							[
								46254,
								46275
							],
							[
								46392,
								46428
							],
							[
								46648,
								46667
							],
							[
								47071,
								47092
							],
							[
								47309,
								47342
							],
							[
								47402,
								47425
							],
							[
								47488,
								47505
							],
							[
								47625,
								47629
							],
							[
								48456,
								48481
							],
							[
								48688,
								48715
							],
							[
								49180,
								49184
							],
							[
								49394,
								49398
							],
							[
								49597,
								49616
							],
							[
								49713,
								49718
							],
							[
								49872,
								49911
							],
							[
								50010,
								50053
							],
							[
								50263,
								50278
							],
							[
								50448,
								50484
							],
							[
								50580,
								50608
							],
							[
								50878,
								50922
							],
							[
								50984,
								51015
							],
							[
								51074,
								51095
							],
							[
								51154,
								51177
							],
							[
								51600,
								51626
							],
							[
								51694,
								51720
							],
							[
								51784,
								51803
							],
							[
								51844,
								51879
							],
							[
								52053,
								52095
							],
							[
								52280,
								52301
							],
							[
								52477,
								52507
							],
							[
								52727,
								52753
							],
							[
								53181,
								53200
							],
							[
								53261,
								53284
							],
							[
								53819,
								53846
							],
							[
								53896,
								53919
							],
							[
								54076,
								54112
							],
							[
								54182,
								54211
							],
							[
								54269,
								54292
							],
							[
								54470,
								54495
							],
							[
								54579,
								54621
							],
							[
								54720,
								54745
							],
							[
								55049,
								55104
							],
							[
								55346,
								55375
							],
							[
								55626,
								55670
							],
							[
								55802,
								55846
							],
							[
								55933,
								55961
							],
							[
								56105,
								56129
							],
							[
								56377,
								56421
							],
							[
								56743,
								56796
							],
							[
								56895,
								56940
							],
							[
								57015,
								57034
							],
							[
								57095,
								57116
							],
							[
								57293,
								57320
							],
							[
								57369,
								57399
							],
							[
								57411,
								57432
							],
							[
								57444,
								57476
							],
							[
								57618,
								57648
							],
							[
								57660,
								57701
							],
							[
								57713,
								57752
							],
							[
								57764,
								57787
							],
							[
								57799,
								57822
							],
							[
								57834,
								57853
							],
							[
								57865,
								57907
							],
							[
								57919,
								57944
							],
							[
								57956,
								57983
							],
							[
								57995,
								58033
							],
							[
								58045,
								58127
							],
							[
								58139,
								58206
							],
							[
								58218,
								58243
							],
							[
								58255,
								58297
							],
							[
								58309,
								58347
							],
							[
								58359,
								58416
							],
							[
								58428,
								58466
							],
							[
								58478,
								58503
							],
							[
								58515,
								58542
							],
							[
								58554,
								58592
							],
							[
								58604,
								58660
							],
							[
								58754,
								58805
							],
							[
								58817,
								58892
							],
							[
								58904,
								58935
							],
							[
								58947,
								58966
							],
							[
								58978,
								59014
							],
							[
								59110,
								59131
							],
							[
								59143,
								59173
							],
							[
								59185,
								59208
							],
							[
								59220,
								59263
							],
							[
								59275,
								59313
							],
							[
								59325,
								59369
							],
							[
								59381,
								59405
							],
							[
								59417,
								59447
							],
							[
								59459,
								59485
							],
							[
								59529,
								59576
							],
							[
								59588,
								59630
							],
							[
								59642,
								59680
							],
							[
								59692,
								59728
							],
							[
								59740,
								59787
							],
							[
								59799,
								59822
							],
							[
								59834,
								59868
							],
							[
								59880,
								59923
							],
							[
								59935,
								59987
							],
							[
								60091,
								60138
							],
							[
								60150,
								60178
							],
							[
								60190,
								60228
							],
							[
								60240,
								60281
							],
							[
								60293,
								60312
							],
							[
								60324,
								60353
							],
							[
								60365,
								60391
							],
							[
								60403,
								60431
							],
							[
								60443,
								60495
							],
							[
								60507,
								60535
							],
							[
								60547,
								60581
							],
							[
								60593,
								60614
							],
							[
								60626,
								60649
							],
							[
								60661,
								60699
							],
							[
								60711,
								60749
							],
							[
								60761,
								60782
							],
							[
								60794,
								60819
							],
							[
								60831,
								60856
							],
							[
								60868,
								60899
							],
							[
								60911,
								60930
							],
							[
								60942,
								60965
							],
							[
								60977,
								61018
							],
							[
								61030,
								61073
							],
							[
								61085,
								61112
							],
							[
								61124,
								61162
							],
							[
								61174,
								61207
							],
							[
								61219,
								61255
							],
							[
								61267,
								61286
							],
							[
								61298,
								61361
							],
							[
								61373,
								61429
							],
							[
								61441,
								61464
							],
							[
								61476,
								61511
							],
							[
								61523,
								61579
							],
							[
								61591,
								61644
							],
							[
								61656,
								61701
							],
							[
								61713,
								61758
							],
							[
								61770,
								61815
							],
							[
								61827,
								61857
							],
							[
								61869,
								61916
							],
							[
								61928,
								61953
							],
							[
								61965,
								61998
							],
							[
								62010,
								62040
							],
							[
								62052,
								62092
							],
							[
								62104,
								62157
							],
							[
								62169,
								62192
							],
							[
								62204,
								62225
							],
							[
								62237,
								62277
							],
							[
								62289,
								62323
							],
							[
								62335,
								62357
							],
							[
								62369,
								62403
							],
							[
								62415,
								62438
							],
							[
								62450,
								62492
							],
							[
								62504,
								62535
							],
							[
								62547,
								62573
							],
							[
								62586,
								62616
							],
							[
								63190,
								63230
							],
							[
								63440,
								63444
							],
							[
								64585,
								64625
							],
							[
								65007,
								65067
							],
							[
								65503,
								65529
							],
							[
								65637,
								65675
							],
							[
								65871,
								65875
							],
							[
								66162,
								66192
							],
							[
								66650,
								66654
							],
							[
								67306,
								67345
							],
							[
								68008,
								68065
							],
							[
								68386,
								68410
							],
							[
								68882,
								68912
							],
							[
								69175,
								69216
							],
							[
								69351,
								69390
							],
							[
								69402,
								69447
							],
							[
								69459,
								69487
							],
							[
								69499,
								69535
							],
							[
								69679,
								69717
							],
							[
								69729,
								69768
							],
							[
								69780,
								69821
							],
							[
								69833,
								69868
							],
							[
								69880,
								69927
							],
							[
								69939,
								69978
							],
							[
								69991,
								70025
							],
							[
								70037,
								70085
							],
							[
								70097,
								70140
							],
							[
								70152,
								70201
							],
							[
								70213,
								70263
							],
							[
								70275,
								70324
							],
							[
								70578,
								70602
							],
							[
								70657,
								70682
							],
							[
								71061,
								71090
							],
							[
								71269,
								71274
							],
							[
								71546,
								71567
							],
							[
								71634,
								71677
							],
							[
								71864,
								71868
							],
							[
								72450,
								72458
							],
							[
								72510,
								72518
							],
							[
								72630,
								72634
							],
							[
								72886,
								72911
							],
							[
								72946,
								72956
							],
							[
								73020,
								73031
							],
							[
								73105,
								73120
							],
							[
								73159,
								73163
							],
							[
								73242,
								73267
							],
							[
								73306,
								73314
							],
							[
								73355,
								73384
							],
							[
								73414,
								73418
							]
						],
						"symlist":
						[
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v,k) =>",
							" (v,k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"(node, ast) =>",
							" function PathOf(node, ast = $.data)",
							" n =>",
							" function Hier(node_or_path, ast = $.data)",
							"p =>",
							"([p, n]) =>",
							" ([p, n]) =>",
							" function FindType(typeName, ast = $.data)",
							"([tok]) =>",
							" n =>",
							"node =>",
							"Type",
							"constructor(node, ast)",
							" n =>",
							"n =>",
							" (n, p) =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isFunction()",
							"isArray()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"getPointer(ast)",
							" n =>",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = $.data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"get size()",
							"(acc,[name,type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"n =>",
							"FunctionDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							" n =>",
							"({ name, type }) =>",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"BuiltinType",
							"constructor(node, ast)",
							"PointerType",
							"constructor(node, ast)",
							"toJSON()",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Location",
							"constructor(loc)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, output, args = [])",
							"p =>",
							" data =>",
							" data =>",
							"async reader =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							"node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							" function NameFor(decl, ast = this.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = $.data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = $.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 184103,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ast-shell.js",
			"settings":
			{
				"buffer_size": 35073,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					37,
					1,
					"cut",
					null,
					"AQAAADdUAAAAAAAAN1QAAAAAAAAPAAAAICAgIGNhc2UgJy5jJzoK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADdUAAAAAAAARlQAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					2,
					"paste",
					null,
					"AgAAADdUAAAAAAAARlQAAAAAAAAAAAAARlQAAAAAAABVVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADdUAAAAAAAAN1QAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "pp"
					},
					"AgAAAENUAAAAAAAARFQAAAAAAAAAAAAARFQAAAAAAABFVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAENUAAAAAAAAQ1QAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"cut",
					null,
					"AQAAADdUAAAAAAAAN1QAAAAAAAARAAAAICAgIGNhc2UgJy5jcHAnOgo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADdUAAAAAAAASFQAAAAAAAAAAAAAAAAAAA"
				],
				[
					48,
					3,
					"paste",
					null,
					"AwAAADdUAAAAAAAASFQAAAAAAAAAAAAASFQAAAAAAABZVAAAAAAAAAAAAABZVAAAAAAAAGpUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADdUAAAAAAAAN1QAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					2,
					"left_delete",
					null,
					"AgAAAFVUAAAAAAAAVVQAAAAAAAABAAAAcFRUAAAAAAAAVFQAAAAAAAABAAAAcA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFZUAAAAAAAAVlQAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "xx"
					},
					"AgAAAFRUAAAAAAAAVVQAAAAAAAAAAAAAVVQAAAAAAABWVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFRUAAAAAAAAVFQAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					2,
					"left_delete",
					null,
					"AgAAAERUAAAAAAAARFQAAAAAAAABAAAAcENUAAAAAAAAQ1QAAAAAAAABAAAAcA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEVUAAAAAAAARVQAAAAAAAAAAAAAAIBhQA"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "cc"
					},
					"AgAAAENUAAAAAAAARFQAAAAAAAAAAAAARFQAAAAAAABFVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAENUAAAAAAAAQ1QAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"cut",
					null,
					"AQAAADdUAAAAAAAAN1QAAAAAAAAiAAAAICAgIGNhc2UgJy5jY2MnOgogICAgY2FzZSAnLmN4eCc6Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADdUAAAAAAAAWVQAAAAAAAAAAAAAAAAAAA"
				],
				[
					61,
					1,
					"paste",
					null,
					"AQAAAEhUAAAAAAAAalQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEhUAAAAAAAASFQAAAAAAAAAAAAAAAAAAA"
				],
				[
					64,
					2,
					"left_delete",
					null,
					"AgAAAFVUAAAAAAAAVVQAAAAAAAABAAAAY1RUAAAAAAAAVFQAAAAAAAABAAAAYw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFZUAAAAAAAAVlQAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "xx"
					},
					"AgAAAFRUAAAAAAAAVVQAAAAAAAAAAAAAVVQAAAAAAABWVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFRUAAAAAAAAVFQAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					2,
					"left_delete",
					null,
					"AgAAAGZUAAAAAAAAZlQAAAAAAAABAAAAeGVUAAAAAAAAZVQAAAAAAAABAAAAeA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGdUAAAAAAAAZ1QAAAAAAAAAAAAAAIBhQA"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAGVUAAAAAAAAZlQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGVUAAAAAAAAZVQAAAAAAAAAAAAAAADwvw"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "depot"
					},
					"BQAAAPwMAAAAAAAA/QwAAAAAAAAAAAAA/QwAAAAAAAD+DAAAAAAAAAAAAAD+DAAAAAAAAP8MAAAAAAAAAAAAAP8MAAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAABDQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwMAAAAAAAA/AwAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					2,
					"left_delete",
					null,
					"AgAAAAANAAAAAAAAAA0AAAAAAAABAAAAdP8MAAAAAAAA/wwAAAAAAAABAAAAbw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAENAAAAAAAAAQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "th:"
					},
					"AwAAAP8MAAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAABDQAAAAAAAAAAAAABDQAAAAAAAAINAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8MAAAAAAAA/wwAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": " 4"
					},
					"AgAAAAINAAAAAAAAAw0AAAAAAAAAAAAAAw0AAAAAAAAEDQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAINAAAAAAAAAg0AAAAAAAAAAAAAAADwvw"
				],
				[
					120,
					1,
					"left_delete",
					null,
					"AQAAAAMNAAAAAAAAAw0AAAAAAAABAAAANA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQNAAAAAAAABA0AAAAAAAAAAAAAAADwvw"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "1,"
					},
					"AgAAAAMNAAAAAAAABA0AAAAAAAAAAAAABA0AAAAAAAAFDQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMNAAAAAAAAAw0AAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUNAAAAAAAABg0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUNAAAAAAAABQ0AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "Searching 3105 files for \"this.json\" (regex, case sensitive)\n\n/home/roman/Projects/plot-cv/clang-ast.js:\n 1158      },\n 1159      data() {\n 1160:       console.log('this.json', this.json);\n 1161:       let data = JSON.parse(this.json);\n 1162        let file;\n 1163        let maxDepth = 0;\n\n3 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 311,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 73534,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					39,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAC6EAAAAAAAAL4QAAAAAAAAAAAAAL4QAAAAAAAAwhAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC6EAAAAAAAALoQAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "clang-list.js",
			"settings":
			{
				"buffer_size": 8698,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/eagle",
		"/home/roman/Projects/plot-cv/lib/eda",
		"/home/roman/Projects/plot-cv/modules",
		"/home/roman/Projects/plot-cv/static",
		"/home/roman/Projects/plot-cv/static/css"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/eda/units.js",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/eagle-query.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/cross.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/dimension.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/sheet.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/rectangle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/lib/xml.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/preact.js",
		"/home/roman/Projects/plot-cv/lib/hooks.js",
		"/home/roman/Projects/plot-cv/lib/preact.mjs",
		"/home/roman/Projects/plot-cv/lib/preact.standalone.js",
		"/home/roman/Projects/plot-cv/lib/preact.m.js",
		"/home/roman/Projects/plot-cv/lib/preact.esm.js",
		"/home/roman/Projects/plot-cv/test-imread.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useEvent.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/test-sockets.js",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tmp.xml",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/test-umat.js",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/test-net.js",
		"/home/roman/Projects/plot-cv/test-minnet.js",
		"/home/roman/Projects/plot-cv/plot-cv.js",
		"/home/roman/Projects/plot-cv/list-proxies.js",
		"/home/roman/Projects/plot-cv/libraries.js",
		"/home/roman/Projects/plot-cv/grammar-geda-netlist.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/test.js",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/test-glfw.js",
		"/home/roman/Projects/plot-cv/modules/tty.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js",
		"/home/roman/Projects/plot-cv/src/plot-cv.cpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/test-features2d.js",
		"/home/roman/Projects/plot-cv/static/css/list.css",
		"/home/roman/Projects/plot-cv/fontsample.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/videoSource.js",
		"/home/roman/Projects/plot-cv/lib/compat.mjs",
		"/home/roman/Projects/plot-cv/lib/hooks.mjs",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/preact.mjs",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useTrkl.js",
		"/home/roman/Projects/plot-cv/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/static/svg/sort-size-2.svg",
		"/home/roman/Projects/plot-cv/static/svg/sort-name-2.svg",
		"/home/roman/Projects/plot-cv/static/svg/sort-time-2.svg",
		"/home/roman/Projects/plot-cv/commands.js",
		"/home/roman/Projects/plot-cv/static/debugger.css",
		"/home/roman/Projects/plot-cv/tlite.css",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/lib/geom/align.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/inotify_event.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/palette.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/geometry.hpp",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/plot-cv/test-voronoi.js",
		"/home/roman/Projects/plot-cv/quickjs/README.md",
		"/home/roman/Projects/plot-cv/quickjs/readme.txt",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/skeletonization.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/gif_write.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_gif.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/png_write.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/DomColors.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant_colors_grabber.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_imgproc.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant_colors_grabber.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/qjs-opencv/gifenc/example.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/DomColors.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/.git",
		"/home/roman/Projects/plot-cv/image-helpers.js",
		"/home/roman/Projects/plot-cv/test-eagle.js",
		"/home/roman/Projects/plot-cv/test-ecmascript2.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.cpp"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"this.json",
			"repl.show",
			"repl.shoow",
			"ProcessFile",
			"Compile",
			"range =",
			"DrawText",
			"JS_GetPropert",
			"JS_GetProperty",
			"isConstructor",
			"color.text",
			"replace",
			"GetColorBa",
			"GetExponent, GetMantissa, ValueToNumber, NumberToValue, GetMultipliers, GetFactor, GetColorBands, BG, digit2color ",
			"App",
			"GetColorBands, updateMeasures, alignItem, alignAll, scientific, num2color",
			"{\n",
			"pushTransform",
			"lookup",
			"unique",
			"function isObject",
			"isObject",
			"Util\\.",
			"ansi",
			"assign",
			"digit2color",
			"nameValue",
			"components:",
			"Util\\.(define|isObject|memoize|range|unique)\\(",
			"Util\\.(define|isObject|memoize|range|unique)",
			"(Util\\.define|Util\\.isObject|Util\\.memoize|Util\\.range|Util\\.unique)",
			"unique",
			"(Util\\.define|Util\\.isObject|Util\\.memoize|Util\\.range|Util\\.unique)",
			"globalThi",
			"put_banner",
			"openSync",
			"filesystem",
			"import",
			"\n        //rational(value).toExponential()",
			"xmlize",
			"scientific",
			"EagleDoc",
			"^function",
			"^funct",
			"^\\s*console",
			"assign",
			"fromXML",
			"xml.js",
			"xml",
			"../an-tronics/eagle/Headphone-Amplifier-ClassAB-alt2.brd",
			"filesystem\\.",
			"u\\$1 =",
			"u$1 =",
			"rectangle",
			"// ",
			"gulp",
			"serialport",
			"libbpg",
			"\",    ",
			"jison",
			"_moduleAl",
			"\"\n",
			"hier",
			"findContours",
			"2",
			"openSync",
			"writeFileSync",
			"ResizeHandler",
			"\\.properties",
			"rect",
			"handler",
			"MouseIterator",
			"filesystem",
			"std\\.",
			"inspect",
			"          \n",
			"sort.*svg",
			"ButtonGroup",
			"useEvent",
			"mousedown",
			"ButtonGr",
			"sort-",
			"createRef",
			"IS_HYDRATE",
			"hydrate",
			"createRef",
			"preactCom",
			"Fragment",
			"vnode",
			"cloneElement",
			"cloneEleme",
			"clone",
			"\\(Button,",
			"\\(Button, ",
			"'group'",
			"ButtonGroup",
			"black",
			"#000",
			"black",
			"#000",
			"#fff",
			"#000",
			"fill",
			"button",
			"components.js",
			"ButtonGroup",
			"align",
			"CCimage",
			"resize",
			"fromImages",
			"input",
			"'ImageSize",
			"seq\\.size",
			"FAIL:",
			"ImageSize",
			"dst",
			"firstSize",
			"dst0Size",
			"videoSize",
			"video\\.",
			"videos",
			"ImageSequence",
			"fetch",
			"'/save'",
			"save'",
			"Compile\\(",
			"args",
			"SpawnCom"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log",
			"puts",
			"export function",
			"type",
			"header.",
			"#000000",
			"a",
			"MakeListCommand",
			"si",
			"pi",
			"plen",
			"slen",
			"pattern[0]",
			"string[0]",
			"string.length",
			"pattern.length",
			"string.length",
			"export const",
			"this",
			"item",
			"js_deep_defaultflags",
			"sheet",
			"makeListMembersCmd",
			"get_websocket_obj",
			"0",
			"searchPath",
			"makeValueDescriptor",
			"socket",
			"",
			", func",
			"func,",
			"func",
			"function ",
			"readline",
			"",
			"(",
			"Pointer",
			"deref",
			"export \\1",
			"log"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10149,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/clang-ast.js",
							"function_name_status_row": 7,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									390,
									417
								],
								[
									497,
									527
								],
								[
									594,
									602
								],
								[
									640,
									667
								],
								[
									716,
									743
								],
								[
									825,
									829
								],
								[
									852,
									885
								],
								[
									1072,
									1076
								],
								[
									1095,
									1115
								],
								[
									1271,
									1303
								],
								[
									1467,
									1485
								],
								[
									1759,
									1770
								],
								[
									1794,
									1801
								],
								[
									1830,
									1839
								],
								[
									1969,
									1975
								],
								[
									2097,
									2105
								],
								[
									2230,
									2239
								],
								[
									2265,
									2274
								],
								[
									2305,
									2309
								],
								[
									2370,
									2374
								],
								[
									2450,
									2466
								],
								[
									2726,
									2741
								],
								[
									2808,
									2817
								],
								[
									2885,
									2893
								],
								[
									2948,
									2957
								],
								[
									3031,
									3041
								],
								[
									3095,
									3104
								],
								[
									3134,
									3143
								],
								[
									3253,
									3264
								],
								[
									3466,
									3470
								],
								[
									4125,
									4136
								],
								[
									4386,
									4400
								],
								[
									4450,
									4486
								],
								[
									4524,
									4529
								],
								[
									4570,
									4612
								],
								[
									4805,
									4809
								],
								[
									4843,
									4854
								],
								[
									4886,
									4905
								],
								[
									5224,
									5266
								],
								[
									5338,
									5348
								],
								[
									5569,
									5574
								],
								[
									5640,
									5647
								],
								[
									5764,
									5768
								],
								[
									5866,
									5888
								],
								[
									6379,
									6384
								],
								[
									8206,
									8210
								],
								[
									8991,
									9001
								],
								[
									9219,
									9231
								],
								[
									9372,
									9380
								],
								[
									9463,
									9474
								],
								[
									9550,
									9562
								],
								[
									9654,
									9663
								],
								[
									9734,
									9743
								],
								[
									9861,
									9877
								],
								[
									9947,
									9963
								],
								[
									10052,
									10065
								],
								[
									10598,
									10613
								],
								[
									10698,
									10703
								],
								[
									10955,
									10969
								],
								[
									11075,
									11087
								],
								[
									11156,
									11168
								],
								[
									11227,
									11244
								],
								[
									11330,
									11341
								],
								[
									11435,
									11448
								],
								[
									11588,
									11596
								],
								[
									11703,
									11713
								],
								[
									11915,
									11924
								],
								[
									13405,
									13415
								],
								[
									16280,
									16286
								],
								[
									16570,
									16581
								],
								[
									16681,
									16717
								],
								[
									16895,
									16903
								],
								[
									16963,
									16971
								],
								[
									18769,
									18799
								],
								[
									18878,
									18888
								],
								[
									18906,
									18928
								],
								[
									19108,
									19116
								],
								[
									19197,
									19205
								],
								[
									19382,
									19389
								],
								[
									19440,
									19454
								],
								[
									19863,
									19867
								],
								[
									20047,
									20052
								],
								[
									20680,
									20684
								],
								[
									21427,
									21437
								],
								[
									21512,
									21532
								],
								[
									21735,
									21743
								],
								[
									21865,
									21884
								],
								[
									21981,
									21989
								],
								[
									22007,
									22029
								],
								[
									22145,
									22153
								],
								[
									22258,
									22284
								],
								[
									22535,
									22543
								],
								[
									22658,
									22669
								],
								[
									22687,
									22709
								],
								[
									22777,
									22781
								],
								[
									22887,
									22897
								],
								[
									22957,
									22961
								],
								[
									23024,
									23028
								],
								[
									23078,
									23082
								],
								[
									23555,
									23565
								],
								[
									23603,
									23611
								],
								[
									23708,
									23717
								],
								[
									23735,
									23757
								],
								[
									23861,
									23865
								],
								[
									24275,
									24287
								],
								[
									24305,
									24327
								],
								[
									24517,
									24525
								],
								[
									24588,
									24596
								],
								[
									24786,
									24791
								],
								[
									25100,
									25119
								],
								[
									25180,
									25188
								],
								[
									25297,
									25304
								],
								[
									25322,
									25344
								],
								[
									25687,
									25695
								],
								[
									25792,
									25801
								],
								[
									25838,
									25849
								],
								[
									25867,
									25889
								],
								[
									25939,
									25950
								],
								[
									25968,
									25990
								],
								[
									26161,
									26169
								],
								[
									26272,
									26289
								],
								[
									26307,
									26329
								],
								[
									26595,
									26603
								],
								[
									26714,
									26722
								],
								[
									26727,
									26743
								],
								[
									26945,
									26958
								],
								[
									26993,
									27008
								],
								[
									27093,
									27103
								],
								[
									27416,
									27436
								],
								[
									27519,
									27565
								],
								[
									29018,
									29082
								],
								[
									29360,
									29364
								],
								[
									30125,
									30133
								],
								[
									30241,
									30249
								],
								[
									30324,
									30339
								],
								[
									30619,
									30626
								],
								[
									30680,
									30687
								],
								[
									30771,
									30778
								],
								[
									30955,
									30990
								],
								[
									31029,
									31049
								],
								[
									31079,
									31085
								],
								[
									31106,
									31114
								],
								[
									31220,
									31253
								],
								[
									31566,
									31591
								],
								[
									31986,
									32028
								],
								[
									32679,
									32732
								],
								[
									33677,
									33683
								],
								[
									33733,
									33739
								],
								[
									33823,
									33829
								],
								[
									34027,
									34043
								],
								[
									34348,
									34355
								],
								[
									34398,
									34402
								],
								[
									34422,
									34429
								],
								[
									34549,
									34576
								],
								[
									34634,
									34641
								],
								[
									34910,
									34917
								],
								[
									34977,
									34991
								],
								[
									35036,
									35051
								],
								[
									35076,
									35080
								],
								[
									35111,
									35122
								],
								[
									35155,
									35167
								],
								[
									35201,
									35214
								],
								[
									35286,
									35291
								],
								[
									35389,
									35393
								],
								[
									35417,
									35429
								],
								[
									35498,
									35503
								],
								[
									35563,
									35567
								],
								[
									35598,
									35607
								],
								[
									35620,
									35636
								],
								[
									35997,
									36001
								],
								[
									36025,
									36036
								],
								[
									36095,
									36099
								],
								[
									36137,
									36141
								],
								[
									36194,
									36234
								],
								[
									36293,
									36309
								],
								[
									36671,
									36692
								],
								[
									36718,
									36722
								],
								[
									37165,
									37170
								],
								[
									37211,
									37238
								],
								[
									37432,
									37454
								],
								[
									38460,
									38501
								],
								[
									38581,
									38588
								],
								[
									38654,
									38661
								],
								[
									38698,
									38724
								],
								[
									38818,
									38826
								],
								[
									38892,
									38900
								],
								[
									38962,
									38973
								],
								[
									39120,
									39146
								],
								[
									39198,
									39217
								],
								[
									39293,
									39310
								],
								[
									39345,
									39369
								],
								[
									39615,
									39620
								],
								[
									39677,
									39684
								],
								[
									39765,
									39776
								],
								[
									40266,
									40276
								],
								[
									40322,
									40326
								],
								[
									40984,
									40995
								],
								[
									41006,
									41030
								],
								[
									41098,
									41130
								],
								[
									41286,
									41311
								],
								[
									41375,
									41411
								],
								[
									41481,
									41521
								],
								[
									41773,
									41801
								],
								[
									41848,
									41879
								],
								[
									42108,
									42150
								],
								[
									42353,
									42374
								],
								[
									42419,
									42438
								],
								[
									42772,
									42791
								],
								[
									42995,
									43030
								],
								[
									43148,
									43196
								],
								[
									43442,
									43469
								],
								[
									44087,
									44128
								],
								[
									44366,
									44393
								],
								[
									44536,
									44557
								],
								[
									44618,
									44645
								],
								[
									44690,
									44722
								],
								[
									44972,
									44998
								],
								[
									45192,
									45211
								],
								[
									45873,
									45898
								],
								[
									45946,
									45977
								],
								[
									46044,
									46059
								],
								[
									46254,
									46275
								],
								[
									46392,
									46428
								],
								[
									46648,
									46667
								],
								[
									47071,
									47092
								],
								[
									47309,
									47342
								],
								[
									47402,
									47425
								],
								[
									47488,
									47505
								],
								[
									47625,
									47629
								],
								[
									48456,
									48481
								],
								[
									48688,
									48715
								],
								[
									49180,
									49184
								],
								[
									49394,
									49398
								],
								[
									49597,
									49616
								],
								[
									49713,
									49718
								],
								[
									49872,
									49911
								],
								[
									50010,
									50053
								],
								[
									50263,
									50278
								],
								[
									50448,
									50484
								],
								[
									50580,
									50608
								],
								[
									50878,
									50922
								],
								[
									50984,
									51015
								],
								[
									51074,
									51095
								],
								[
									51154,
									51177
								],
								[
									51600,
									51626
								],
								[
									51694,
									51720
								],
								[
									51784,
									51803
								],
								[
									51844,
									51879
								],
								[
									52053,
									52095
								],
								[
									52280,
									52301
								],
								[
									52477,
									52507
								],
								[
									52727,
									52753
								],
								[
									53181,
									53200
								],
								[
									53261,
									53284
								],
								[
									53819,
									53846
								],
								[
									53896,
									53919
								],
								[
									54076,
									54112
								],
								[
									54182,
									54211
								],
								[
									54269,
									54292
								],
								[
									54470,
									54495
								],
								[
									54579,
									54621
								],
								[
									54720,
									54745
								],
								[
									55049,
									55104
								],
								[
									55346,
									55375
								],
								[
									55626,
									55670
								],
								[
									55802,
									55846
								],
								[
									55933,
									55961
								],
								[
									56105,
									56129
								],
								[
									56377,
									56421
								],
								[
									56743,
									56796
								],
								[
									56895,
									56940
								],
								[
									57015,
									57034
								],
								[
									57095,
									57116
								],
								[
									57293,
									57320
								],
								[
									57369,
									57399
								],
								[
									57411,
									57432
								],
								[
									57444,
									57476
								],
								[
									57618,
									57648
								],
								[
									57660,
									57701
								],
								[
									57713,
									57752
								],
								[
									57764,
									57787
								],
								[
									57799,
									57822
								],
								[
									57834,
									57853
								],
								[
									57865,
									57907
								],
								[
									57919,
									57944
								],
								[
									57956,
									57983
								],
								[
									57995,
									58033
								],
								[
									58045,
									58127
								],
								[
									58139,
									58206
								],
								[
									58218,
									58243
								],
								[
									58255,
									58297
								],
								[
									58309,
									58347
								],
								[
									58359,
									58416
								],
								[
									58428,
									58466
								],
								[
									58478,
									58503
								],
								[
									58515,
									58542
								],
								[
									58554,
									58592
								],
								[
									58604,
									58660
								],
								[
									58754,
									58805
								],
								[
									58817,
									58892
								],
								[
									58904,
									58935
								],
								[
									58947,
									58966
								],
								[
									58978,
									59014
								],
								[
									59110,
									59131
								],
								[
									59143,
									59173
								],
								[
									59185,
									59208
								],
								[
									59220,
									59263
								],
								[
									59275,
									59313
								],
								[
									59325,
									59369
								],
								[
									59381,
									59405
								],
								[
									59417,
									59447
								],
								[
									59459,
									59485
								],
								[
									59529,
									59576
								],
								[
									59588,
									59630
								],
								[
									59642,
									59680
								],
								[
									59692,
									59728
								],
								[
									59740,
									59787
								],
								[
									59799,
									59822
								],
								[
									59834,
									59868
								],
								[
									59880,
									59923
								],
								[
									59935,
									59987
								],
								[
									60091,
									60138
								],
								[
									60150,
									60178
								],
								[
									60190,
									60228
								],
								[
									60240,
									60281
								],
								[
									60293,
									60312
								],
								[
									60324,
									60353
								],
								[
									60365,
									60391
								],
								[
									60403,
									60431
								],
								[
									60443,
									60495
								],
								[
									60507,
									60535
								],
								[
									60547,
									60581
								],
								[
									60593,
									60614
								],
								[
									60626,
									60649
								],
								[
									60661,
									60699
								],
								[
									60711,
									60749
								],
								[
									60761,
									60782
								],
								[
									60794,
									60819
								],
								[
									60831,
									60856
								],
								[
									60868,
									60899
								],
								[
									60911,
									60930
								],
								[
									60942,
									60965
								],
								[
									60977,
									61018
								],
								[
									61030,
									61073
								],
								[
									61085,
									61112
								],
								[
									61124,
									61162
								],
								[
									61174,
									61207
								],
								[
									61219,
									61255
								],
								[
									61267,
									61286
								],
								[
									61298,
									61361
								],
								[
									61373,
									61429
								],
								[
									61441,
									61464
								],
								[
									61476,
									61511
								],
								[
									61523,
									61579
								],
								[
									61591,
									61644
								],
								[
									61656,
									61701
								],
								[
									61713,
									61758
								],
								[
									61770,
									61815
								],
								[
									61827,
									61857
								],
								[
									61869,
									61916
								],
								[
									61928,
									61953
								],
								[
									61965,
									61998
								],
								[
									62010,
									62040
								],
								[
									62052,
									62092
								],
								[
									62104,
									62157
								],
								[
									62169,
									62192
								],
								[
									62204,
									62225
								],
								[
									62237,
									62277
								],
								[
									62289,
									62323
								],
								[
									62335,
									62357
								],
								[
									62369,
									62403
								],
								[
									62415,
									62438
								],
								[
									62450,
									62492
								],
								[
									62504,
									62535
								],
								[
									62547,
									62573
								],
								[
									62586,
									62616
								],
								[
									63190,
									63230
								],
								[
									63440,
									63444
								],
								[
									64585,
									64625
								],
								[
									65007,
									65067
								],
								[
									65503,
									65529
								],
								[
									65637,
									65675
								],
								[
									65871,
									65875
								],
								[
									66162,
									66192
								],
								[
									66650,
									66654
								],
								[
									67306,
									67345
								],
								[
									68008,
									68065
								],
								[
									68386,
									68410
								],
								[
									68882,
									68912
								],
								[
									69175,
									69216
								],
								[
									69351,
									69390
								],
								[
									69402,
									69447
								],
								[
									69459,
									69487
								],
								[
									69499,
									69535
								],
								[
									69679,
									69717
								],
								[
									69729,
									69768
								],
								[
									69780,
									69821
								],
								[
									69833,
									69868
								],
								[
									69880,
									69927
								],
								[
									69939,
									69978
								],
								[
									69991,
									70025
								],
								[
									70037,
									70085
								],
								[
									70097,
									70140
								],
								[
									70152,
									70201
								],
								[
									70213,
									70263
								],
								[
									70275,
									70324
								],
								[
									70578,
									70602
								],
								[
									70657,
									70682
								],
								[
									71061,
									71090
								],
								[
									71269,
									71274
								],
								[
									71546,
									71567
								],
								[
									71634,
									71677
								],
								[
									71864,
									71868
								],
								[
									72450,
									72458
								],
								[
									72510,
									72518
								],
								[
									72630,
									72634
								],
								[
									72886,
									72911
								],
								[
									72946,
									72956
								],
								[
									73020,
									73031
								],
								[
									73105,
									73120
								],
								[
									73159,
									73163
								],
								[
									73242,
									73267
								],
								[
									73306,
									73314
								],
								[
									73355,
									73384
								],
								[
									73414,
									73418
								]
							],
							"symlist":
							[
								"FileTime(filename)",
								"Newer(file, ...other)",
								"  other =>",
								"Older(file, other)",
								"GetSubscripts(str)",
								"  m =>",
								"TrimSubscripts(str, sub)",
								"List",
								"  constructor(...args)",
								"  filter(callback, thisArg = null)",
								"  callback = elem =>",
								"  get first()",
								"  elem =>",
								"  entries()",
								"  keys()",
								"  values()",
								"  toArray()",
								"(a, n) =>",
								"List",
								"Node",
								"  constructor(ast)",
								"  static get(ast)",
								"  get ast()",
								"  get id()",
								"  get loc()",
								"  get file()",
								"\t(v,k) =>",
								"\t(v,k) =>",
								"  get range()",
								"  r =>",
								"  toJSON(obj)",
								"(node, ast) =>",
								"PathOf(node, ast = $.data)",
								"\tn =>",
								"Hier(node_or_path, ast = $.data)",
								"  p =>",
								"([p, n]) =>",
								"\t([p, n]) =>",
								"FindType(typeName, ast = $.data)",
								"([tok]) =>",
								"\tn =>",
								"  node =>",
								"Type",
								"  constructor(node, ast)",
								"\tn =>",
								"  n =>",
								"\t(n, p) =>",
								"  get regExp()",
								"  isEnum()",
								"  isPointer()",
								"  isFunction()",
								"  isArray()",
								"  arrayOf()",
								"  get subscripts()",
								"  trimSubscripts()",
								"  get pointer()",
								"  getPointer(ast)",
								"\tn =>",
								"  get unsigned()",
								"  get signed()",
								"  isCompound()",
								"  isFloatingPoint()",
								"  get alias()",
								"  get aliases()",
								"  isEnum()",
								"  isString()",
								"  get ffi()",
								"  get size()",
								"  toJS()",
								"  toJSON(obj)",
								"  static get(name_or_id, ast = $.data)",
								"\tnode =>",
								"\tnode =>",
								"RoundTo(value, align)",
								"RecordDecl",
								"  constructor(node, ast)",
								"  child =>",
								"  child =>",
								"  node =>",
								"(acc, node) =>",
								"  i =>",
								"\tn =>",
								"  n =>",
								"  get size()",
								"(acc,[name,type]) =>",
								"  toJSON()",
								"([name, member]) =>",
								"EnumDecl",
								"  constructor(node, ast)",
								"  child =>",
								"({ name, type, inner }) =>",
								"  toJSON()",
								"TypedefDecl",
								"  constructor(node, ast)",
								"  n =>",
								"\t(v, k) =>",
								"  n =>",
								"  n =>",
								"  n =>",
								"  get size()",
								"  toJSON()",
								"FieldDecl",
								"  constructor(node, ast)",
								"  n =>",
								"FunctionDecl",
								"  constructor(node, ast)",
								"  child =>",
								"  child =>",
								"\tn =>",
								"({ name, type }) =>",
								"  toJSON()",
								"VarDecl",
								"  constructor(node, ast)",
								"  toJSON()",
								"ClassDecl",
								"BuiltinType",
								"  constructor(node, ast)",
								"PointerType",
								"  constructor(node, ast)",
								"  toJSON()",
								"ConstantArrayType",
								"  constructor(node, ast)",
								"  toJSON()",
								"Location",
								"  constructor(loc)",
								"\t(t, ...c) =>",
								"'\\x1b[m' : t =>",
								"  toString()",
								"  localeCompare(other)",
								"TypeFactory(node, ast, cache = true)",
								"SpawnCompiler(compiler, input, output, args = [])",
								"  p =>",
								"\tdata =>",
								"\tdata =>",
								"  reader =>",
								"  line =>",
								"  line =>",
								"  line =>",
								"PipeReader(fd, callback)",
								"(resolve, reject) =>",
								"\t() =>",
								"\tdata =>",
								"ReadPipe(fd, callback)",
								"ReadOutput(fd)",
								"SourceDependencies(...args)",
								"AstDump(compiler, source, args, force)",
								"  size()",
								"  json()",
								"  data()",
								"SetFile = loc =>",
								"  files()",
								"  n =>",
								"  file =>",
								"  pred2 = (used, implicit) =>",
								"  node =>",
								"  types()",
								"\tn =>",
								"\t() =>",
								"List",
								"  functions()",
								"\tn =>",
								"\t() =>",
								"\tn =>",
								"List",
								"  namespaces()",
								"\tn =>",
								"List",
								"  classes()",
								"  predicate = n =>",
								"List",
								"  variables()",
								"  n =>",
								"List",
								"NameFor(decl, ast = this.data)",
								"\t(value, key) =>",
								"NodeType(n)",
								"  t =>",
								"\tn =>",
								"NodeName(n, name)",
								"GetLoc(node)",
								"GetTypeNode(node, ast = $.data)",
								"  node =>",
								"  node =>",
								"GetTypeStr(node)",
								"  inner =>",
								"  inner =>",
								"([n, t]) =>",
								"NodePrinter(ast)",
								"  put(str)",
								"  trim()",
								"  printer = function(node)",
								"  get()",
								"  value()",
								"  value(node)",
								"  toString()",
								"  i =>",
								"NodePrinter",
								"AbiTagAttr(abi_tag_attr)",
								"AccessSpecDecl(access_spec_decl)",
								"AlignedAttr(aligned_attr)",
								"AlwaysInlineAttr(always_inline_attr)",
								"ArraySubscriptExpr(array_subscript_expr)",
								"AsmLabelAttr(asm_label_attr)",
								"BinaryOperator(binary_operator)",
								"BlockCommandComment(block_command_comment)",
								"BreakStmt(break_stmt)",
								"CallExpr(call_expr)",
								"CaseStmt(case_stmt)",
								"CharacterLiteral(character_literal)",
								"CompoundAssignOperator(compound_assign_operator)",
								"CompoundStmt(compound_stmt)",
								"ConditionalOperator(conditional_operator)",
								"ConstantExpr(constant_expr)",
								"ConstAttr(const_attr)",
								"ContinueStmt(continue_stmt)",
								"CStyleCastExpr(cstyle_cast_expr)",
								"DeclRefExpr(decl_ref_expr)",
								"DeclStmt(decl_stmt)",
								"DefaultStmt(default_stmt)",
								"DeprecatedAttr(deprecated_attr)",
								"DoStmt(do_stmt)",
								"EmptyDecl(empty_decl)",
								"EnumConstantDecl(enum_constant_decl)",
								"EnumDecl(enum_decl)",
								"FieldDecl(field_decl)",
								"FloatingLiteral(floating_literal)",
								"FormatAttr(format_attr)",
								"ForStmt(for_stmt)",
								"  n =>",
								"FullComment(full_comment)",
								"FunctionDecl(function_decl)",
								"  n =>",
								"  n =>",
								"GotoStmt(goto_stmt)",
								"\tn =>",
								"HTMLEndTagComment(html_end_tag_comment)",
								"HTMLStartTagComment(html_start_tag_comment)",
								"IfStmt(if_stmt)",
								"ImplicitCastExpr(implicit_cast_expr)",
								"InitListExpr(init_list_expr)",
								"InlineCommandComment(inline_command_comment)",
								"IntegerLiteral(integer_literal)",
								"LabelStmt(label_stmt)",
								"MemberExpr(member_expr)",
								"NonNullAttr(non_null_attr)",
								"NoThrowAttr(no_throw_attr)",
								"NullStmt(null_stmt)",
								"ParagraphComment(paragraph_comment)",
								"ParamCommandComment(param_command_comment)",
								"ParenExpr(paren_expr)",
								"ParenListExpr(paren_list_expr)",
								"ParmVarDecl(parm_var_decl)",
								"PureAttr(pure_attr)",
								"RecordDecl(record_decl)",
								"RestrictAttr(restrict_attr)",
								"ReturnStmt(return_stmt)",
								"ReturnsTwiceAttr(returns_twice_attr)",
								"StringLiteral(string_literal)",
								"SwitchStmt(switch_stmt)",
								"TextComment(text_comment)",
								"TranslationUnitDecl(translation_unit_decl)",
								"TypedefDecl(typedef_decl)",
								"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
								"UnaryOperator(unary_operator)",
								"UnresolvedLookupExpr(unresolved_lookup_expr)",
								"UnresolvedMemberExpr(unresolved_member_expr)",
								"VarDecl(var_decl, base_type)",
								"([offset, subscript]) =>",
								"VerbatimBlockComment(verbatim_block_comment)",
								"VerbatimBlockLineComment(verbatim_block_line_comment)",
								"WarnUnusedResultAttr(warn_unused_result_attr)",
								"WeakAttr(weak_attr)",
								"WhileStmt(while_stmt)",
								"OverrideAttr(override_attr)",
								"AddrLabelExpr(addr_label_expr)",
								"AliasAttr(alias_attr)",
								"AlignValueAttr(align_value_attr)",
								"AllocSizeAttr(alloc_size_attr)",
								"ArrayInitIndexExpr(array_init_index_expr)",
								"ArrayInitLoopExpr(array_init_loop_expr)",
								"AtomicExpr(atomic_expr)",
								"AtomicType(atomic_type)",
								"AutoType(auto_type)",
								"BuiltinTemplateDecl(builtin_template_decl)",
								"BuiltinType(builtin_type)",
								"CallbackAttr(callback_attr)",
								"ClassTemplateDecl(class_template_decl)",
								"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
								"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
								"ComplexType(complex_type)",
								"CompoundLiteralExpr(compound_literal_expr)",
								"ConstantArrayType(constant_array_type)",
								"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
								"ConvertVectorExpr(convert_vector_expr)",
								"DecayedType(decayed_type)",
								"DecltypeType(decltype_type)",
								"DependentNameType(dependent_name_type)",
								"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
								"DependentSizedArrayType(dependent_sized_array_type)",
								"DependentTemplateSpecializationType(dependent_template_specialization_type)",
								"ElaboratedType(elaborated_type)",
								"EnumType(enum_type)",
								"ExprWithCleanups(expr_with_cleanups)",
								"FinalAttr(final_attr)",
								"FormatArgAttr(format_arg_attr)",
								"FriendDecl(friend_decl)",
								"FunctionNoProtoType(function_no_proto_type)",
								"FunctionProtoType(function_proto_type)",
								"FunctionTemplateDecl(function_template_decl)",
								"GCCAsmStmt(gcc_asm_stmt)",
								"GNUInlineAttr(gnu_inline_attr)",
								"GNUNullExpr(gnu_null_expr)",
								"ImplicitValueInitExpr(implicit_value_init_expr)",
								"IncompleteArrayType(incomplete_array_type)",
								"IndirectFieldDecl(indirect_field_decl)",
								"IndirectGotoStmt(indirect_goto_stmt)",
								"InjectedClassNameType(injected_class_name_type)",
								"LambdaExpr(lambda_expr)",
								"LinkageSpecDecl(linkage_spec_decl)",
								"LValueReferenceType(l_value_reference_type)",
								"MaterializeTemporaryExpr(materialize_temporary_expr)",
								"MaxFieldAlignmentAttr(max_field_alignment_attr)",
								"MayAliasAttr(may_alias_attr)",
								"MemberPointerType(member_pointer_type)",
								"MinVectorWidthAttr(min_vector_width_attr)",
								"ModeAttr(mode_attr)",
								"NamespaceDecl(namespace_decl)",
								"NoDebugAttr(no_debug_attr)",
								"NoInlineAttr(no_inline_attr)",
								"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
								"OffsetOfExpr(offset_of_expr)",
								"OpaqueValueExpr(opaque_value_expr)",
								"OwnerAttr(owner_attr)",
								"PackedAttr(packed_attr)",
								"PackExpansionExpr(pack_expansion_expr)",
								"PackExpansionType(pack_expansion_type)",
								"ParenType(paren_type)",
								"PointerAttr(pointer_attr)",
								"PointerType(pointer_type)",
								"PredefinedExpr(predefined_expr)",
								"QualType(qual_type)",
								"RecordType(record_type)",
								"ReturnsNonNullAttr(returns_non_null_attr)",
								"RValueReferenceType(r_value_reference_type)",
								"SentinelAttr(sentinel_attr)",
								"ShuffleVectorExpr(shuffle_vector_expr)",
								"SizeOfPackExpr(size_of_pack_expr)",
								"StaticAssertDecl(static_assert_decl)",
								"StmtExpr(stmt_expr)",
								"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
								"SubstTemplateTypeParmType(subst_template_type_parm_type)",
								"TargetAttr(target_attr)",
								"TemplateArgument(template_argument)",
								"TemplateSpecializationType(template_specialization_type)",
								"TemplateTemplateParmDecl(template_template_parm_decl)",
								"TemplateTypeParmDecl(template_type_parm_decl)",
								"TemplateTypeParmType(template_type_parm_type)",
								"TParamCommandComment(t_param_command_comment)",
								"TypeAliasDecl(type_alias_decl)",
								"TypeAliasTemplateDecl(type_alias_template_decl)",
								"TypedefType(typedef_type)",
								"TypeOfExprType(type_of_expr_type)",
								"TypeTraitExpr(type_trait_expr)",
								"UnaryTransformType(unary_transform_type)",
								"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
								"UnusedAttr(unused_attr)",
								"UsingDecl(using_decl)",
								"UsingDirectiveDecl(using_directive_decl)",
								"UsingShadowDecl(using_shadow_decl)",
								"VAArgExpr(va_arg_expr)",
								"VarTemplateDecl(var_template_decl)",
								"VectorType(vector_type)",
								"VerbatimLineComment(verbatim_line_comment)",
								"VisibilityAttr(visibility_attr)",
								"WeakRefAttr(weak_ref_attr)",
								"CXXRecordDecl(cxx_record_decl)",
								"CXXConstructorDecl(cxx_constructor_decl)",
								"  n =>",
								"CXXCtorInitializer(cxx_ctor_initializer)",
								"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
								"CXXThisExpr(cxx_this_expr)",
								"CXXDestructorDecl(cxx_destructor_decl)",
								"  n =>",
								"CXXMethodDecl(cxx_method_decl)",
								"  n =>",
								"CXXStaticCastExpr(cxx_static_cast_expr)",
								"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
								"CXXNewExpr(cxx_new_expr)",
								"CXXDeleteExpr(cxx_delete_expr)",
								"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
								"CXX11NoReturnAttr(cxx11_no_return_attr)",
								"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
								"CXXCatchStmt(cxx_catch_stmt)",
								"CXXConstructExpr(cxx_construct_expr)",
								"CXXConversionDecl(cxx_conversion_decl)",
								"CXXDefaultArgExpr(cxx_default_arg_expr)",
								"CXXDefaultInitExpr(cxx_default_init_expr)",
								"CXXForRangeStmt(cxx_for_range_stmt)",
								"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
								"CXXMemberCallExpr(cxx_member_call_expr)",
								"CXXNoexceptExpr(cxx_noexcept_expr)",
								"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
								"CXXOperatorCallExpr(cxx_operator_call_expr)",
								"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
								"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
								"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
								"CXXTryStmt(cxx_try_stmt)",
								"PrintNode(node)",
								"PrintAst(node, ast)",
								"  get()",
								"  isNode(obj)",
								"GetType(name_or_id, ast = $.data)",
								"  n =>",
								"\tnode =>",
								"\tnode =>",
								"  r =>",
								"GetFields(node)",
								"\t(v, k) =>",
								"([v, p]) =>",
								"([loc, ptr]) =>",
								"  i =>",
								"GetParams(node)",
								"  child =>",
								"PathRemoveLoc(path)",
								"  p =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639442428.82,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 184103,
						"regions":
						{
						},
						"selection":
						[
							[
								34152,
								34158
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1170,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639874293.07,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 22215.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "ast-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35073,
						"regions":
						{
						},
						"selection":
						[
							[
								3334,
								3334
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 84,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639874738.92,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1103.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 311,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										165,
										174
									],
									[
										177,
										186
									],
									[
										224,
										233
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								171,
								171
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 5,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1639874744.66,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "clang-ast.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73534,
						"regions":
						{
						},
						"selection":
						[
							[
								34336,
								34336
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1178,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639874767.92,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21889.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "clang-list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8698,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639874302.77,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"clang-li",
				"clang-list.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"ser",
				"server.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"io-h",
				"io-helpers.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"colorCo",
				"lib/eda/colorCoding.js"
			],
			[
				"quickjs-mi",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"util.j",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"packa",
				"package.json"
			],
			[
				"xml.js",
				"lib/xml.js"
			],
			[
				"eagle-q",
				"eagle-query.js"
			],
			[
				"eagle-qu",
				"eagle-query.js"
			],
			[
				"componen",
				"components.js"
			],
			[
				"preact.m.",
				"lib/preact.m.js"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/utils.c"
			],
			[
				"packag",
				"package.json"
			],
			[
				"plot-cv.cpp",
				"src/plot-cv.cpp"
			],
			[
				"test-im",
				"test-imread.js"
			],
			[
				"test-imre",
				"test-imread.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"cvPipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"debugger.",
				"debugger.html"
			],
			[
				"test_xml",
				"quickjs/qjs-modules/tests/test_xml.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"list.htm",
				"list.html"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"useEve",
				"lib/hooks/useEvent.js"
			],
			[
				"ompat.mjs",
				"lib/compat.mjs"
			],
			[
				".mjs",
				"lib/compat.mjs"
			],
			[
				"hooks.mj",
				"lib/hooks.mjs"
			],
			[
				"preact.mjs",
				"preact.mjs"
			],
			[
				"hooks.",
				"lib/hooks.mjs"
			],
			[
				"compat.mj",
				"lib/compat.mjs"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"components.",
				"components.js"
			],
			[
				"tlite.css",
				"tlite.css"
			],
			[
				"debugger.css",
				"static/debugger.css"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"useTrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"schema",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"commands",
				"commands.js"
			],
			[
				"components",
				"components.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"align.js",
				"lib/geom/align.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"cvVid",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"cvpip",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"imagepip",
				"imagePipeline.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"usetrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"fetch.j",
				"lib/fetch.js"
			],
			[
				"comm",
				"commands.js"
			],
			[
				"package",
				"package.json"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"js_Cv",
				"qjs-opencv/js_cv.cpp"
			],
			[
				"gif_wr",
				"qjs-opencv/gif_write.hpp"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"js_mat",
				"qjs-opencv/js_mat.cpp"
			],
			[
				"image-he",
				"image-helpers.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"test-eagle",
				"test-eagle.js"
			],
			[
				"test-xml",
				"test-xml.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-misc.c",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-mmap",
				"quickjs/qjs-modules/quickjs-mmap.c"
			],
			[
				"quickjs-libc.c",
				"quickjs/quickjs-libc.c"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-ins",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"webSOc",
				"webSocket.js"
			],
			[
				"timers.",
				"lib/repeater/timers.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvGUI",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"js_Mat",
				"qjs-opencv/js_mat.cpp"
			],
			[
				"-helper",
				"io-helpers.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"quickjs-lib",
				"quickjs/quickjs-libc.c"
			],
			[
				"test-repe",
				"test-repeater.js"
			],
			[
				"repea",
				"lib/repeater/repeater.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"jpeg.js",
				"lib/jpeg.js"
			],
			[
				"image-h",
				"image-helpers.js"
			],
			[
				"estree.js",
				"lib/ecmascript/estree.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"terminal",
				"qjs-modules/lib/terminal.js"
			],
			[
				"Svgpath",
				"lib/svg/path.js"
			],
			[
				"cvVIde",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"js_poin",
				"qjs-opencv/js_point.hpp"
			],
			[
				"js_cont",
				"qjs-opencv/js_contour.hpp"
			],
			[
				"test.js",
				"test.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"path",
				"lib/svg/path.js"
			],
			[
				"path.js",
				"lib/svg/path.js"
			],
			[
				"svgpa",
				"lib/svg/path-parser.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"test-clip",
				"test-clipper.js"
			],
			[
				"13",
				"opencv/disabled/code10-3.cpp"
			],
			[
				"test-svg",
				"test-svgpath.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 317.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
