{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Extra",
				"ExtractRotation"
			],
			[
				"tra",
				"transformation"
			],
			[
				"define",
				"defineProperties"
			],
			[
				"getters",
				"gettersSetters"
			],
			[
				"circui",
				"circuitFilePath"
			],
			[
				"Conn",
				"ConnectionPoint"
			],
			[
				"parseCom",
				"parseCommentOrEmpty"
			],
			[
				"circ",
				"circuitFilePath"
			],
			[
				"built",
				"builtin_attr"
			],
			[
				"dep",
				"depthOrPred"
			],
			[
				"exte",
				"extendAsyncGenerator"
			],
			[
				"extend",
				"extendArray"
			],
			[
				"allo",
				"allowedDirs"
			],
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "(global)\n  add_props(obj, props)\n  operators_set(proto, ...op_list)\n  generic_pow(a, b)\n  miller_rabin_test(n, t)\n  fact_rec(a, b)\n  isInteger(a)\n  gcd(a, b)\n  fact(n)\n  comb(n, k)\n  invmod(x, y)\n  pmod(a, b, m)\n  isPrime(n, t)\n  nextPrime(n)\n  factor(n)\nInteger\n  inverse()\n  norm2()\n  abs()\n  conj()\n  arg()\n  exp()\n  log()\nFraction = function Fraction(a, b)\nFraction\n  fraction_add(a, b)\n  fraction_sub(a, b)\n  fraction_mul(a, b)\n  fraction_div(a, b)\n  fraction_mod(a, b)\n  fraction_eq(a, b)\n  fraction_lt(a, b)\n  float_add(a, b)\n  float_sub(a, b)\n  float_mul(a, b)\n  float_div(a, b)\n  float_mod(a, b)\n  float_pow(a, b)\n  float_eq(a, b)\n  float_lt(a, b)\nFraction\n  pos(a)\n  neg(a)\n  toFraction(a, b)\nFraction\n  inverse()\n  toString()\n  norm2()\n  abs()\n  conj()\n  arg()\n  exp()\n  log()\n  inverse()\n  norm2()\n  abs()\n  conj()\n  arg()\n  exp()\n  log()\n  get_const(n)\n  isFloat(a)\n  bestappr(u, b)\n  get E()\n  get LN10()\n  get LOG2E()\n  get LOG10E()\n  get SQRT1_2()\n  get SQRT2()\nFloat\n  inverse()\n  norm2()\n  abs()\n  conj()\n  arg()\n  exp()\n  log()\nComplex = function Complex(re, im)\nComplex\n  complex_add(a, b)\n  complex_sub(a, b)\n  complex_mul(a, b)\n  complex_div(a, b)\n  complex_eq(a, b)\nComplex\n  pos(a)\n  neg(a)\n  toComplex(re, im)\nComplex\n  inverse()\n  toString()\n  norm2()\n  abs()\n  conj()\n  arg()\n  exp()\n  log()\nMod = function Mod(a, m)\nMod\n  mod_add(a, b)\n  mod_sub(a, b)\n  mod_mul(a, b)\n  mod_div(a, b)\n  mod_eq(a, b)\nMod\n  pos(a)\n  neg(a)\nMod\n  inverse()\n  toString()\n  polynomial_is_scalar(a)\nPolynomial = function Polynomial(a)\nPolynomial\nPolynomial\n  number_need_paren(c)\n  monomial_toString(c, i)\n  poly_root_laguerre1(p, z, max_it)\n  poly_roots(p)\nPolynomial\n  trim()\n  conj()\n  inverse()\n  toString()\n  deg()\n  apply(b)\n  deriv()\n  integ()\n  norm2()\n  polynomial_add(a, b)\n  polynomial_sub(a, b)\n  polynomial_mul(a, b)\n  polynomial_div_scalar(a, b)\n  polynomial_div(a, b)\n  polynomial_mod(a, b)\n  polynomial_eq(a, b)\nPolynomial\n  pos(a)\n  neg(a)\n  divrem(a, b)\n  gcd(a, b)\n  invmod(x, y)\n  roots(p)\nPolyMod = function PolyMod(a, m)\nPolyMod\n  polymod_add(a, b)\n  polymod_sub(a, b)\n  polymod_mul(a, b)\n  polymod_div(a, b)\n  polymod_eq(a, b)\nPolyMod\n  pos(a)\n  neg(a)\nPolyMod\n  inverse()\n  toString()\nRationalFunction = function RationalFunction(a, b)\nRationalFunction\nRationalFunction\n  inverse()\n  conj()\n  toString()\n  apply(b)\n  deriv()\n  ratfunc_add(a, b)\n  ratfunc_sub(a, b)\n  ratfunc_mul(a, b)\n  ratfunc_div(a, b)\n  ratfunc_eq(a, b)\nRationalFunction\n  pos(a)\n  neg(a)\n  toRationalFunction(a)\nRationalFunction\n  get_emin(a)\n  series_is_scalar_or_polynomial(a)\nSeries = function Series(a, n)\n  series_add(v1, v2)\n  series_sub(a, b)\n  series_mul(v1, v2)\n  series_div(v1, v2)\n  series_pow(a, b)\n  series_eq(a, b)\nSeries\n  pos(a)\n  neg(a)\nSeries\n  conj()\n  inverse()\n  trim()\n  toString()\n  apply(b)\n  deriv()\n  integ()\n  exp()\n  log()\n  zero(n, emin)\nSeries\nO(a)\nErrorO()\nMatrix = function Matrix(h, w)\n  idn(n)\n  diag(a)\n  hilbert(n)\n  trans(a)\n  check_square(a)\n  trace(a)\n  charpoly(a)\n  eigenvals(a)\n  det(a)\n  inverse(a)\n  rank(a)\n  ker(a)\n  dp(a, b)\n  cp(v1, v2)\n  array_add(a, b)\n  array_sub(a, b)\n  array_scalar_mul(a, b)\n  array_mul(a, b)\n  array_div(a, b)\n  array_element_wise_inverse(a)\n  array_eq(a, b)\n  pos(a)\n  neg(a)\n  conj()\n  dup()\n  inverse()\nPolynomial\n  get: function()\n  deriv(a)\n  integ(a)\n  norm2(a)\n  abs(a)\n  conj(a)\n  arg(a)\n  inverse(a)\n  trunc(a)\n  floor(a)\n  ceil(a)\n  sqrt(a)\n  exp(a)\n  log(a)\n  log2(a)\n  log10(a)\n  todb(a)\n  fromdb(a)\n  sin(a)\n  cos(a)\n  tan(a)\n  asin(a)\n  acos(a)\n  atan(a)\n  atan2(a, b)\n  sinc(a)\n  todeg(a)\n  fromdeg(a)\n  sinh(a)\n  cosh(a)\n  tanh(a)\n  asinh(a)\n  acosh(a)\n  atanh(a)\n  sigmoid(x)\n  lerp(a, b, t)",
			"settings":
			{
				"buffer_size": 3680,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABgDgAAKGdsb2JhbCkKICBhZGRfcHJvcHMob2JqLCBwcm9wcykKICBvcGVyYXRvcnNfc2V0KHByb3RvLCAuLi5vcF9saXN0KQogIGdlbmVyaWNfcG93KGEsIGIpCiAgbWlsbGVyX3JhYmluX3Rlc3QobiwgdCkKICBmYWN0X3JlYyhhLCBiKQogIGlzSW50ZWdlcihhKQogIGdjZChhLCBiKQogIGZhY3QobikKICBjb21iKG4sIGspCiAgaW52bW9kKHgsIHkpCiAgcG1vZChhLCBiLCBtKQogIGlzUHJpbWUobiwgdCkKICBuZXh0UHJpbWUobikKICBmYWN0b3IobikKSW50ZWdlcgogIGludmVyc2UoKQogIG5vcm0yKCkKICBhYnMoKQogIGNvbmooKQogIGFyZygpCiAgZXhwKCkKICBsb2coKQpGcmFjdGlvbiA9IGZ1bmN0aW9uIEZyYWN0aW9uKGEsIGIpCkZyYWN0aW9uCiAgZnJhY3Rpb25fYWRkKGEsIGIpCiAgZnJhY3Rpb25fc3ViKGEsIGIpCiAgZnJhY3Rpb25fbXVsKGEsIGIpCiAgZnJhY3Rpb25fZGl2KGEsIGIpCiAgZnJhY3Rpb25fbW9kKGEsIGIpCiAgZnJhY3Rpb25fZXEoYSwgYikKICBmcmFjdGlvbl9sdChhLCBiKQogIGZsb2F0X2FkZChhLCBiKQogIGZsb2F0X3N1YihhLCBiKQogIGZsb2F0X211bChhLCBiKQogIGZsb2F0X2RpdihhLCBiKQogIGZsb2F0X21vZChhLCBiKQogIGZsb2F0X3BvdyhhLCBiKQogIGZsb2F0X2VxKGEsIGIpCiAgZmxvYXRfbHQoYSwgYikKRnJhY3Rpb24KICBwb3MoYSkKICBuZWcoYSkKICB0b0ZyYWN0aW9uKGEsIGIpCkZyYWN0aW9uCiAgaW52ZXJzZSgpCiAgdG9TdHJpbmcoKQogIG5vcm0yKCkKICBhYnMoKQogIGNvbmooKQogIGFyZygpCiAgZXhwKCkKICBsb2coKQogIGludmVyc2UoKQogIG5vcm0yKCkKICBhYnMoKQogIGNvbmooKQogIGFyZygpCiAgZXhwKCkKICBsb2coKQogIGdldF9jb25zdChuKQogIGlzRmxvYXQoYSkKICBiZXN0YXBwcih1LCBiKQogIGdldCBFKCkKICBnZXQgTE4xMCgpCiAgZ2V0IExPRzJFKCkKICBnZXQgTE9HMTBFKCkKICBnZXQgU1FSVDFfMigpCiAgZ2V0IFNRUlQyKCkKRmxvYXQKICBpbnZlcnNlKCkKICBub3JtMigpCiAgYWJzKCkKICBjb25qKCkKICBhcmcoKQogIGV4cCgpCiAgbG9nKCkKQ29tcGxleCA9IGZ1bmN0aW9uIENvbXBsZXgocmUsIGltKQpDb21wbGV4CiAgY29tcGxleF9hZGQoYSwgYikKICBjb21wbGV4X3N1YihhLCBiKQogIGNvbXBsZXhfbXVsKGEsIGIpCiAgY29tcGxleF9kaXYoYSwgYikKICBjb21wbGV4X2VxKGEsIGIpCkNvbXBsZXgKICBwb3MoYSkKICBuZWcoYSkKICB0b0NvbXBsZXgocmUsIGltKQpDb21wbGV4CiAgaW52ZXJzZSgpCiAgdG9TdHJpbmcoKQogIG5vcm0yKCkKICBhYnMoKQogIGNvbmooKQogIGFyZygpCiAgZXhwKCkKICBsb2coKQpNb2QgPSBmdW5jdGlvbiBNb2QoYSwgbSkKTW9kCiAgbW9kX2FkZChhLCBiKQogIG1vZF9zdWIoYSwgYikKICBtb2RfbXVsKGEsIGIpCiAgbW9kX2RpdihhLCBiKQogIG1vZF9lcShhLCBiKQpNb2QKICBwb3MoYSkKICBuZWcoYSkKTW9kCiAgaW52ZXJzZSgpCiAgdG9TdHJpbmcoKQogIHBvbHlub21pYWxfaXNfc2NhbGFyKGEpClBvbHlub21pYWwgPSBmdW5jdGlvbiBQb2x5bm9taWFsKGEpClBvbHlub21pYWwKUG9seW5vbWlhbAogIG51bWJlcl9uZWVkX3BhcmVuKGMpCiAgbW9ub21pYWxfdG9TdHJpbmcoYywgaSkKICBwb2x5X3Jvb3RfbGFndWVycmUxKHAsIHosIG1heF9pdCkKICBwb2x5X3Jvb3RzKHApClBvbHlub21pYWwKICB0cmltKCkKICBjb25qKCkKICBpbnZlcnNlKCkKICB0b1N0cmluZygpCiAgZGVnKCkKICBhcHBseShiKQogIGRlcml2KCkKICBpbnRlZygpCiAgbm9ybTIoKQogIHBvbHlub21pYWxfYWRkKGEsIGIpCiAgcG9seW5vbWlhbF9zdWIoYSwgYikKICBwb2x5bm9taWFsX211bChhLCBiKQogIHBvbHlub21pYWxfZGl2X3NjYWxhcihhLCBiKQogIHBvbHlub21pYWxfZGl2KGEsIGIpCiAgcG9seW5vbWlhbF9tb2QoYSwgYikKICBwb2x5bm9taWFsX2VxKGEsIGIpClBvbHlub21pYWwKICBwb3MoYSkKICBuZWcoYSkKICBkaXZyZW0oYSwgYikKICBnY2QoYSwgYikKICBpbnZtb2QoeCwgeSkKICByb290cyhwKQpQb2x5TW9kID0gZnVuY3Rpb24gUG9seU1vZChhLCBtKQpQb2x5TW9kCiAgcG9seW1vZF9hZGQoYSwgYikKICBwb2x5bW9kX3N1YihhLCBiKQogIHBvbHltb2RfbXVsKGEsIGIpCiAgcG9seW1vZF9kaXYoYSwgYikKICBwb2x5bW9kX2VxKGEsIGIpClBvbHlNb2QKICBwb3MoYSkKICBuZWcoYSkKUG9seU1vZAogIGludmVyc2UoKQogIHRvU3RyaW5nKCkKUmF0aW9uYWxGdW5jdGlvbiA9IGZ1bmN0aW9uIFJhdGlvbmFsRnVuY3Rpb24oYSwgYikKUmF0aW9uYWxGdW5jdGlvbgpSYXRpb25hbEZ1bmN0aW9uCiAgaW52ZXJzZSgpCiAgY29uaigpCiAgdG9TdHJpbmcoKQogIGFwcGx5KGIpCiAgZGVyaXYoKQogIHJhdGZ1bmNfYWRkKGEsIGIpCiAgcmF0ZnVuY19zdWIoYSwgYikKICByYXRmdW5jX211bChhLCBiKQogIHJhdGZ1bmNfZGl2KGEsIGIpCiAgcmF0ZnVuY19lcShhLCBiKQpSYXRpb25hbEZ1bmN0aW9uCiAgcG9zKGEpCiAgbmVnKGEpCiAgdG9SYXRpb25hbEZ1bmN0aW9uKGEpClJhdGlvbmFsRnVuY3Rpb24KICBnZXRfZW1pbihhKQogIHNlcmllc19pc19zY2FsYXJfb3JfcG9seW5vbWlhbChhKQpTZXJpZXMgPSBmdW5jdGlvbiBTZXJpZXMoYSwgbikKICBzZXJpZXNfYWRkKHYxLCB2MikKICBzZXJpZXNfc3ViKGEsIGIpCiAgc2VyaWVzX211bCh2MSwgdjIpCiAgc2VyaWVzX2Rpdih2MSwgdjIpCiAgc2VyaWVzX3BvdyhhLCBiKQogIHNlcmllc19lcShhLCBiKQpTZXJpZXMKICBwb3MoYSkKICBuZWcoYSkKU2VyaWVzCiAgY29uaigpCiAgaW52ZXJzZSgpCiAgdHJpbSgpCiAgdG9TdHJpbmcoKQogIGFwcGx5KGIpCiAgZGVyaXYoKQogIGludGVnKCkKICBleHAoKQogIGxvZygpCiAgemVybyhuLCBlbWluKQpTZXJpZXMKTyhhKQpFcnJvck8oKQpNYXRyaXggPSBmdW5jdGlvbiBNYXRyaXgoaCwgdykKICBpZG4obikKICBkaWFnKGEpCiAgaGlsYmVydChuKQogIHRyYW5zKGEpCiAgY2hlY2tfc3F1YXJlKGEpCiAgdHJhY2UoYSkKICBjaGFycG9seShhKQogIGVpZ2VudmFscyhhKQogIGRldChhKQogIGludmVyc2UoYSkKICByYW5rKGEpCiAga2VyKGEpCiAgZHAoYSwgYikKICBjcCh2MSwgdjIpCiAgYXJyYXlfYWRkKGEsIGIpCiAgYXJyYXlfc3ViKGEsIGIpCiAgYXJyYXlfc2NhbGFyX211bChhLCBiKQogIGFycmF5X211bChhLCBiKQogIGFycmF5X2RpdihhLCBiKQogIGFycmF5X2VsZW1lbnRfd2lzZV9pbnZlcnNlKGEpCiAgYXJyYXlfZXEoYSwgYikKICBwb3MoYSkKICBuZWcoYSkKICBjb25qKCkKICBkdXAoKQogIGludmVyc2UoKQpQb2x5bm9taWFsCiAgZ2V0OiBmdW5jdGlvbigpCiAgZGVyaXYoYSkKICBpbnRlZyhhKQogIG5vcm0yKGEpCiAgYWJzKGEpCiAgY29uaihhKQogIGFyZyhhKQogIGludmVyc2UoYSkKICB0cnVuYyhhKQogIGZsb29yKGEpCiAgY2VpbChhKQogIHNxcnQoYSkKICBleHAoYSkKICBsb2coYSkKICBsb2cyKGEpCiAgbG9nMTAoYSkKICB0b2RiKGEpCiAgZnJvbWRiKGEpCiAgc2luKGEpCiAgY29zKGEpCiAgdGFuKGEpCiAgYXNpbihhKQogIGFjb3MoYSkKICBhdGFuKGEpCiAgYXRhbjIoYSwgYikKICBzaW5jKGEpCiAgdG9kZWcoYSkKICBmcm9tZGVnKGEpCiAgc2luaChhKQogIGNvc2goYSkKICB0YW5oKGEpCiAgYXNpbmgoYSkKICBhY29zaChhKQogIGF0YW5oKGEpCiAgc2lnbW9pZCh4KQogIGxlcnAoYSwgYiwgdCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								2010,
								2018
							],
							[
								2034,
								2054
							],
							[
								2629,
								2662
							],
							[
								2752,
								2783
							],
							[
								3109,
								3131
							],
							[
								3345,
								3386
							],
							[
								3397,
								3410
							],
							[
								3488,
								3523
							],
							[
								3568,
								3586
							],
							[
								3622,
								3664
							],
							[
								3730,
								3763
							],
							[
								3785,
								3789
							],
							[
								4178,
								4183
							],
							[
								4233,
								4237
							],
							[
								4264,
								4268
							],
							[
								4296,
								4300
							],
							[
								4323,
								4343
							],
							[
								4397,
								4401
							],
							[
								4471,
								4493
							],
							[
								4583,
								4588
							],
							[
								4620,
								4642
							],
							[
								4836,
								4858
							],
							[
								5281,
								5347
							],
							[
								5693,
								5702
							],
							[
								5807,
								5837
							],
							[
								6198,
								6233
							],
							[
								6265,
								6306
							],
							[
								6338,
								6404
							],
							[
								6437,
								6471
							],
							[
								6542,
								6589
							],
							[
								7125,
								7161
							],
							[
								7274,
								7283
							],
							[
								7519,
								7527
							],
							[
								7633,
								7640
							],
							[
								7690,
								7714
							],
							[
								8095,
								8106
							],
							[
								8196,
								8207
							],
							[
								8271,
								8282
							],
							[
								8336,
								8345
							],
							[
								8383,
								8394
							],
							[
								8482,
								8509
							],
							[
								8647,
								8651
							],
							[
								8675,
								8682
							],
							[
								8715,
								8731
							],
							[
								8860,
								8905
							],
							[
								9121,
								9179
							],
							[
								9491,
								9513
							],
							[
								9862,
								9872
							],
							[
								10116,
								10130
							],
							[
								11083,
								11107
							],
							[
								11233,
								11237
							],
							[
								11329,
								11343
							],
							[
								11443,
								11459
							],
							[
								11813,
								11826
							],
							[
								11844,
								11849
							],
							[
								11931,
								11938
							],
							[
								11966,
								11971
							],
							[
								12093,
								12118
							],
							[
								12293,
								12332
							],
							[
								12409,
								12420
							],
							[
								14007,
								14038
							],
							[
								14568,
								14601
							],
							[
								14873,
								14908
							],
							[
								14993,
								15026
							],
							[
								15970,
								15980
							],
							[
								16811,
								16815
							],
							[
								17231,
								17238
							],
							[
								17631,
								17667
							],
							[
								17879,
								17883
							],
							[
								18508,
								18540
							],
							[
								18833,
								18837
							],
							[
								19307,
								19324
							],
							[
								19485,
								19520
							],
							[
								20368,
								20373
							],
							[
								21100,
								21104
							],
							[
								21198,
								21202
							],
							[
								21322,
								21331
							],
							[
								21461,
								21468
							],
							[
								21749,
								21756
							],
							[
								21837,
								21844
							],
							[
								21908,
								21924
							],
							[
								21989,
								22009
							],
							[
								22708,
								22720
							],
							[
								22819,
								22831
							],
							[
								23033,
								23049
							],
							[
								23143,
								23156
							],
							[
								23432,
								23450
							],
							[
								23640,
								23669
							],
							[
								24077,
								24096
							],
							[
								24529,
								24550
							],
							[
								25768,
								25790
							],
							[
								26263,
								26284
							],
							[
								26835,
								26854
							],
							[
								27288,
								27296
							],
							[
								29999,
								30011
							],
							[
								31858,
								31893
							],
							[
								32566,
								32585
							],
							[
								32693,
								32709
							],
							[
								32844,
								32861
							],
							[
								32906,
								32919
							],
							[
								32955,
								32965
							],
							[
								33819,
								33835
							],
							[
								33924,
								33943
							],
							[
								33954,
								33973
							],
							[
								33999,
								34019
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"([dir]) =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							"s =>",
							"async function* files(req, resp)",
							"n =>",
							"([name, type]) =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAmwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					3,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAACbBwAAICB2YWx1ZSA9PgogIChsZXZlbCwgbWVzc2FnZSkgPT4KQXN5bmNDb2xsZWN0KGl0ZXIpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYXRjaGVyKHBhdHRlcm4sIHQgPSBhcmcgPT4gYXJnKQogICguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQogIChba2V5LCB2YWx1ZV0pID0+CkdldFJvb3REaXJlY3RvcmllcyhwYXR0ZXJuID0gJyonKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CiAgZCA9PgogIGQgPT4KR2V0RGlyKGRpcikKICBuID0+CkRpck5hbWUobmFtZSkKICBpdCA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCihbZGlyXSkgPT4KICBmID0+CiAgZmlsZSA9PgogIHVwbG9hZHMocmVxLCByZXNwKQogIHMgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgooW25hbWUsIHR5cGVdKSA9PgogIGZpbGVzMihyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUsIHJlbF0pID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgc3RyaW5nKGEsIGIpCiAgbnVtYmVyKGEsIGIpCihbbmFtZSwgb2JqXSkgPT4KKHsgbmFtZSB9KSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					8,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								2010,
								2018
							],
							[
								2034,
								2054
							],
							[
								2629,
								2662
							],
							[
								2752,
								2783
							],
							[
								3109,
								3131
							],
							[
								3345,
								3386
							],
							[
								3397,
								3410
							],
							[
								3488,
								3523
							],
							[
								3568,
								3586
							],
							[
								3622,
								3664
							],
							[
								3730,
								3763
							],
							[
								3785,
								3789
							],
							[
								4178,
								4183
							],
							[
								4233,
								4237
							],
							[
								4264,
								4268
							],
							[
								4296,
								4300
							],
							[
								4323,
								4343
							],
							[
								4397,
								4401
							],
							[
								4471,
								4493
							],
							[
								4583,
								4588
							],
							[
								4620,
								4642
							],
							[
								4836,
								4858
							],
							[
								5281,
								5347
							],
							[
								5693,
								5702
							],
							[
								5807,
								5837
							],
							[
								6198,
								6233
							],
							[
								6265,
								6306
							],
							[
								6338,
								6404
							],
							[
								6437,
								6471
							],
							[
								6542,
								6589
							],
							[
								7125,
								7161
							],
							[
								7274,
								7283
							],
							[
								7519,
								7527
							],
							[
								7633,
								7640
							],
							[
								7690,
								7714
							],
							[
								8095,
								8106
							],
							[
								8196,
								8207
							],
							[
								8271,
								8282
							],
							[
								8336,
								8345
							],
							[
								8383,
								8394
							],
							[
								8482,
								8509
							],
							[
								8647,
								8651
							],
							[
								8675,
								8682
							],
							[
								8715,
								8731
							],
							[
								8860,
								8905
							],
							[
								9121,
								9179
							],
							[
								9491,
								9513
							],
							[
								9862,
								9872
							],
							[
								10116,
								10130
							],
							[
								11083,
								11107
							],
							[
								11233,
								11237
							],
							[
								11329,
								11343
							],
							[
								11443,
								11459
							],
							[
								11813,
								11826
							],
							[
								11844,
								11849
							],
							[
								11931,
								11938
							],
							[
								11966,
								11971
							],
							[
								12093,
								12118
							],
							[
								12293,
								12332
							],
							[
								12409,
								12420
							],
							[
								14007,
								14038
							],
							[
								14568,
								14601
							],
							[
								14873,
								14908
							],
							[
								14993,
								15026
							],
							[
								15970,
								15980
							],
							[
								16811,
								16815
							],
							[
								17231,
								17238
							],
							[
								17631,
								17667
							],
							[
								17879,
								17883
							],
							[
								18508,
								18540
							],
							[
								18833,
								18837
							],
							[
								19307,
								19324
							],
							[
								19485,
								19520
							],
							[
								20368,
								20373
							],
							[
								21100,
								21104
							],
							[
								21198,
								21202
							],
							[
								21322,
								21331
							],
							[
								21461,
								21468
							],
							[
								21749,
								21756
							],
							[
								21837,
								21844
							],
							[
								21908,
								21924
							],
							[
								21989,
								22009
							],
							[
								22708,
								22720
							],
							[
								22819,
								22831
							],
							[
								23033,
								23049
							],
							[
								23143,
								23156
							],
							[
								23432,
								23450
							],
							[
								23640,
								23669
							],
							[
								24077,
								24096
							],
							[
								24529,
								24550
							],
							[
								25768,
								25790
							],
							[
								26263,
								26284
							],
							[
								26835,
								26854
							],
							[
								27288,
								27296
							],
							[
								29999,
								30011
							],
							[
								31858,
								31893
							],
							[
								32566,
								32585
							],
							[
								32693,
								32709
							],
							[
								32844,
								32861
							],
							[
								32906,
								32919
							],
							[
								32955,
								32965
							],
							[
								33819,
								33835
							],
							[
								33924,
								33943
							],
							[
								33954,
								33973
							],
							[
								33999,
								34019
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"([dir]) =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							"s =>",
							"async function* files(req, resp)",
							"n =>",
							"([name, type]) =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAmwcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/-o",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACbBwAAICB2YWx1ZSA9PgogIChsZXZlbCwgbWVzc2FnZSkgPT4KQXN5bmNDb2xsZWN0KGl0ZXIpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYXRjaGVyKHBhdHRlcm4sIHQgPSBhcmcgPT4gYXJnKQogICguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQogIChba2V5LCB2YWx1ZV0pID0+CkdldFJvb3REaXJlY3RvcmllcyhwYXR0ZXJuID0gJyonKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CiAgZCA9PgogIGQgPT4KR2V0RGlyKGRpcikKICBuID0+CkRpck5hbWUobmFtZSkKICBpdCA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCihbZGlyXSkgPT4KICBmID0+CiAgZmlsZSA9PgogIHVwbG9hZHMocmVxLCByZXNwKQogIHMgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgooW25hbWUsIHR5cGVdKSA9PgogIGZpbGVzMihyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUsIHJlbF0pID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgc3RyaW5nKGEsIGIpCiAgbnVtYmVyKGEsIGIpCihbbmFtZSwgb2JqXSkgPT4KKHsgbmFtZSB9KSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								2010,
								2018
							],
							[
								2034,
								2054
							],
							[
								2629,
								2662
							],
							[
								2752,
								2783
							],
							[
								3109,
								3131
							],
							[
								3345,
								3386
							],
							[
								3397,
								3410
							],
							[
								3488,
								3523
							],
							[
								3568,
								3586
							],
							[
								3622,
								3664
							],
							[
								3730,
								3763
							],
							[
								3785,
								3789
							],
							[
								4178,
								4183
							],
							[
								4233,
								4237
							],
							[
								4264,
								4268
							],
							[
								4296,
								4300
							],
							[
								4323,
								4343
							],
							[
								4397,
								4401
							],
							[
								4471,
								4493
							],
							[
								4583,
								4588
							],
							[
								4620,
								4642
							],
							[
								4836,
								4858
							],
							[
								5281,
								5347
							],
							[
								5693,
								5702
							],
							[
								5807,
								5837
							],
							[
								6198,
								6233
							],
							[
								6265,
								6306
							],
							[
								6338,
								6404
							],
							[
								6437,
								6471
							],
							[
								6542,
								6589
							],
							[
								7125,
								7161
							],
							[
								7274,
								7283
							],
							[
								7519,
								7527
							],
							[
								7633,
								7640
							],
							[
								7690,
								7714
							],
							[
								8095,
								8106
							],
							[
								8196,
								8207
							],
							[
								8271,
								8282
							],
							[
								8336,
								8345
							],
							[
								8383,
								8394
							],
							[
								8482,
								8509
							],
							[
								8647,
								8651
							],
							[
								8675,
								8682
							],
							[
								8715,
								8731
							],
							[
								8860,
								8905
							],
							[
								9121,
								9179
							],
							[
								9491,
								9513
							],
							[
								9862,
								9872
							],
							[
								10116,
								10130
							],
							[
								11083,
								11107
							],
							[
								11233,
								11237
							],
							[
								11329,
								11343
							],
							[
								11443,
								11459
							],
							[
								11813,
								11826
							],
							[
								11844,
								11849
							],
							[
								11931,
								11938
							],
							[
								11966,
								11971
							],
							[
								12093,
								12118
							],
							[
								12293,
								12332
							],
							[
								12409,
								12420
							],
							[
								14007,
								14038
							],
							[
								14568,
								14601
							],
							[
								14873,
								14908
							],
							[
								14993,
								15026
							],
							[
								15970,
								15980
							],
							[
								16811,
								16815
							],
							[
								17231,
								17238
							],
							[
								17631,
								17667
							],
							[
								17879,
								17883
							],
							[
								18508,
								18540
							],
							[
								18833,
								18837
							],
							[
								19307,
								19324
							],
							[
								19485,
								19520
							],
							[
								20368,
								20373
							],
							[
								21100,
								21104
							],
							[
								21198,
								21202
							],
							[
								21322,
								21331
							],
							[
								21461,
								21468
							],
							[
								21749,
								21756
							],
							[
								21837,
								21844
							],
							[
								21908,
								21924
							],
							[
								21989,
								22009
							],
							[
								22708,
								22720
							],
							[
								22819,
								22831
							],
							[
								23033,
								23049
							],
							[
								23143,
								23156
							],
							[
								23432,
								23450
							],
							[
								23640,
								23669
							],
							[
								24077,
								24096
							],
							[
								24529,
								24550
							],
							[
								25768,
								25790
							],
							[
								26263,
								26284
							],
							[
								26835,
								26854
							],
							[
								27288,
								27296
							],
							[
								29999,
								30011
							],
							[
								31858,
								31893
							],
							[
								32566,
								32585
							],
							[
								32693,
								32709
							],
							[
								32844,
								32861
							],
							[
								32906,
								32919
							],
							[
								32955,
								32965
							],
							[
								33819,
								33835
							],
							[
								33924,
								33943
							],
							[
								33954,
								33973
							],
							[
								33999,
								34019
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"([dir]) =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							"s =>",
							"async function* files(req, resp)",
							"n =>",
							"([name, type]) =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAmwcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACbBwAAICB2YWx1ZSA9PgogIChsZXZlbCwgbWVzc2FnZSkgPT4KQXN5bmNDb2xsZWN0KGl0ZXIpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYXRjaGVyKHBhdHRlcm4sIHQgPSBhcmcgPT4gYXJnKQogICguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQogIChba2V5LCB2YWx1ZV0pID0+CkdldFJvb3REaXJlY3RvcmllcyhwYXR0ZXJuID0gJyonKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CiAgZCA9PgogIGQgPT4KR2V0RGlyKGRpcikKICBuID0+CkRpck5hbWUobmFtZSkKICBpdCA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCihbZGlyXSkgPT4KICBmID0+CiAgZmlsZSA9PgogIHVwbG9hZHMocmVxLCByZXNwKQogIHMgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgooW25hbWUsIHR5cGVdKSA9PgogIGZpbGVzMihyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUsIHJlbF0pID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgc3RyaW5nKGEsIGIpCiAgbnVtYmVyKGEsIGIpCihbbmFtZSwgb2JqXSkgPT4KKHsgbmFtZSB9KSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/getModuleProps.js",
						"symkeys":
						[
							[
								0,
								27
							],
							[
								99,
								103
							],
							[
								134,
								138
							]
						],
						"symlist":
						[
							"function* getModuleProps(m)",
							"n =>",
							"n =>"
						]
					},
					"AQAAAAAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/getModuleProps.js",
						"symkeys":
						[
							[
								0,
								26
							],
							[
								111,
								115
							],
							[
								146,
								150
							]
						],
						"symlist":
						[
							"function getModuleProps(m)",
							"n =>",
							"n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAICBnZXRNb2R1bGVQcm9wcyhtKQogIG4gPT4KICBuID0+AAAAAAAAAAAhAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/getModuleProps.js",
						"symkeys":
						[
							[
								0,
								26
							],
							[
								111,
								115
							],
							[
								146,
								150
							]
						],
						"symlist":
						[
							"function getModuleProps(m)",
							"n =>",
							"n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAICBnZXRNb2R1bGVQcm9wcyhtKQogIG4gPT4KICBuID0+AAAAAAAAAAAhAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/getModuleProps.js",
						"symkeys":
						[
							[
								0,
								26
							],
							[
								111,
								115
							],
							[
								146,
								150
							]
						],
						"symlist":
						[
							"function getModuleProps(m)",
							"n =>",
							"n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAICBnZXRNb2R1bGVQcm9wcyhtKQogIG4gPT4KICBuID0+AAAAAAAAAAAhAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/getModuleProps.js",
						"symkeys":
						[
							[
								0,
								26
							],
							[
								111,
								115
							],
							[
								146,
								150
							]
						],
						"symlist":
						[
							"function getModuleProps(m)",
							"n =>",
							"n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAICBnZXRNb2R1bGVQcm9wcyhtKQogIG4gPT4KICBuID0+AAAAAAAAAAAhAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/getModuleProps.js",
						"symkeys":
						[
							[
								0,
								26
							],
							[
								111,
								115
							],
							[
								146,
								150
							]
						],
						"symlist":
						[
							"function getModuleProps(m)",
							"n =>",
							"n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAICBnZXRNb2R1bGVQcm9wcyhtKQogIG4gPT4KICBuID0+AAAAAAAAAAAhAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/getModuleProps.js",
						"symkeys":
						[
							[
								0,
								26
							],
							[
								111,
								115
							],
							[
								146,
								150
							]
						],
						"symlist":
						[
							"function getModuleProps(m)",
							"n =>",
							"n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAICBnZXRNb2R1bGVQcm9wcyhtKQogIG4gPT4KICBuID0+AAAAAAAAAAAhAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/getModuleProps.js",
						"symkeys":
						[
							[
								0,
								26
							],
							[
								114,
								118
							],
							[
								149,
								153
							]
						],
						"symlist":
						[
							"function getModuleProps(m)",
							"n =>",
							"n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAICBnZXRNb2R1bGVQcm9wcyhtKQogIG4gPT4KICBuID0+AAAAAAAAAAAhAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								2010,
								2018
							],
							[
								2034,
								2054
							],
							[
								2629,
								2662
							],
							[
								2752,
								2783
							],
							[
								3109,
								3131
							],
							[
								3345,
								3386
							],
							[
								3397,
								3410
							],
							[
								3488,
								3523
							],
							[
								3568,
								3586
							],
							[
								3622,
								3664
							],
							[
								3730,
								3763
							],
							[
								3785,
								3789
							],
							[
								4178,
								4183
							],
							[
								4233,
								4237
							],
							[
								4264,
								4268
							],
							[
								4296,
								4300
							],
							[
								4323,
								4343
							],
							[
								4397,
								4401
							],
							[
								4471,
								4493
							],
							[
								4583,
								4588
							],
							[
								4620,
								4642
							],
							[
								4836,
								4858
							],
							[
								5281,
								5347
							],
							[
								5693,
								5702
							],
							[
								5807,
								5837
							],
							[
								6198,
								6233
							],
							[
								6265,
								6306
							],
							[
								6338,
								6404
							],
							[
								6437,
								6471
							],
							[
								6542,
								6589
							],
							[
								7125,
								7161
							],
							[
								7274,
								7283
							],
							[
								7519,
								7527
							],
							[
								7633,
								7640
							],
							[
								7690,
								7714
							],
							[
								8095,
								8106
							],
							[
								8196,
								8207
							],
							[
								8271,
								8282
							],
							[
								8336,
								8345
							],
							[
								8383,
								8394
							],
							[
								8482,
								8509
							],
							[
								8647,
								8651
							],
							[
								8675,
								8682
							],
							[
								8715,
								8731
							],
							[
								8860,
								8905
							],
							[
								9121,
								9179
							],
							[
								9491,
								9513
							],
							[
								9862,
								9872
							],
							[
								10116,
								10130
							],
							[
								11083,
								11107
							],
							[
								11233,
								11237
							],
							[
								11329,
								11343
							],
							[
								11443,
								11459
							],
							[
								11813,
								11826
							],
							[
								11844,
								11849
							],
							[
								11931,
								11938
							],
							[
								11966,
								11971
							],
							[
								12093,
								12118
							],
							[
								12293,
								12332
							],
							[
								12409,
								12420
							],
							[
								14007,
								14038
							],
							[
								14568,
								14601
							],
							[
								14873,
								14908
							],
							[
								14993,
								15026
							],
							[
								15970,
								15980
							],
							[
								16811,
								16815
							],
							[
								17231,
								17238
							],
							[
								17631,
								17667
							],
							[
								17879,
								17883
							],
							[
								18508,
								18540
							],
							[
								18833,
								18837
							],
							[
								19307,
								19324
							],
							[
								19485,
								19520
							],
							[
								20368,
								20373
							],
							[
								21100,
								21104
							],
							[
								21198,
								21202
							],
							[
								21322,
								21331
							],
							[
								21461,
								21468
							],
							[
								21749,
								21756
							],
							[
								21837,
								21844
							],
							[
								21908,
								21924
							],
							[
								21989,
								22009
							],
							[
								22708,
								22720
							],
							[
								22819,
								22831
							],
							[
								23033,
								23049
							],
							[
								23143,
								23156
							],
							[
								23432,
								23450
							],
							[
								23640,
								23669
							],
							[
								24077,
								24096
							],
							[
								24529,
								24550
							],
							[
								25768,
								25790
							],
							[
								26263,
								26284
							],
							[
								26835,
								26854
							],
							[
								27288,
								27296
							],
							[
								29999,
								30011
							],
							[
								31858,
								31893
							],
							[
								32566,
								32585
							],
							[
								32693,
								32709
							],
							[
								32844,
								32861
							],
							[
								32906,
								32919
							],
							[
								32955,
								32965
							],
							[
								33819,
								33835
							],
							[
								33924,
								33943
							],
							[
								33954,
								33973
							],
							[
								33999,
								34019
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"([dir]) =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							"s =>",
							"async function* files(req, resp)",
							"n =>",
							"([name, type]) =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAICBnZXRNb2R1bGVQcm9wcyhtKQogIG4gPT4KICBuID0+AAAAAAAAAACbBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
						"symkeys":
						[
							[
								1289,
								1306
							],
							[
								1447,
								1479
							],
							[
								2128,
								2171
							],
							[
								2976,
								3004
							],
							[
								4118,
								4152
							],
							[
								4715,
								4740
							],
							[
								5521,
								5533
							],
							[
								5704,
								5713
							],
							[
								5835,
								5842
							],
							[
								5929,
								5939
							],
							[
								6145,
								6157
							],
							[
								6551,
								6564
							],
							[
								6965,
								6978
							],
							[
								7460,
								7472
							],
							[
								7652,
								7661
							],
							[
								8389,
								8396
							],
							[
								8414,
								8423
							],
							[
								8460,
								8467
							],
							[
								8507,
								8512
							],
							[
								8586,
								8592
							],
							[
								8625,
								8630
							],
							[
								8702,
								8707
							],
							[
								8786,
								8791
							],
							[
								8894,
								8928
							],
							[
								9563,
								9571
							],
							[
								9640,
								9669
							],
							[
								9796,
								9825
							],
							[
								9952,
								9981
							],
							[
								10092,
								10121
							],
							[
								10232,
								10261
							],
							[
								10387,
								10415
							],
							[
								10558,
								10586
							],
							[
								10721,
								10747
							],
							[
								10786,
								10812
							],
							[
								10851,
								10877
							],
							[
								10916,
								10942
							],
							[
								10981,
								11007
							],
							[
								11046,
								11072
							],
							[
								11112,
								11137
							],
							[
								11252,
								11277
							],
							[
								11498,
								11506
							],
							[
								11729,
								11735
							],
							[
								11771,
								11777
							],
							[
								12433,
								12449
							],
							[
								12580,
								12588
							],
							[
								12774,
								12783
							],
							[
								12840,
								12850
							],
							[
								12904,
								12911
							],
							[
								12951,
								12956
							],
							[
								13031,
								13037
							],
							[
								13070,
								13075
							],
							[
								13151,
								13156
							],
							[
								13207,
								13212
							],
							[
								13322,
								13331
							],
							[
								13368,
								13375
							],
							[
								13415,
								13420
							],
							[
								13463,
								13469
							],
							[
								13502,
								13507
							],
							[
								13579,
								13584
							],
							[
								13628,
								13633
							],
							[
								13851,
								13874
							],
							[
								14650,
								14660
							],
							[
								14737,
								14751
							],
							[
								15314,
								15321
							],
							[
								15374,
								15384
							],
							[
								15487,
								15498
							],
							[
								15551,
								15563
							],
							[
								15665,
								15678
							],
							[
								15731,
								15742
							],
							[
								15787,
								15792
							],
							[
								15810,
								15819
							],
							[
								15858,
								15865
							],
							[
								15905,
								15910
							],
							[
								15954,
								15960
							],
							[
								15993,
								15998
							],
							[
								16070,
								16075
							],
							[
								16119,
								16124
							],
							[
								16271,
								16305
							],
							[
								16499,
								16506
							],
							[
								16575,
								16603
							],
							[
								16706,
								16734
							],
							[
								16837,
								16865
							],
							[
								16996,
								17024
							],
							[
								17099,
								17126
							],
							[
								17236,
								17243
							],
							[
								17412,
								17418
							],
							[
								17454,
								17460
							],
							[
								17848,
								17865
							],
							[
								17974,
								17981
							],
							[
								17999,
								18008
							],
							[
								18099,
								18109
							],
							[
								18467,
								18474
							],
							[
								18540,
								18545
							],
							[
								18597,
								18603
							],
							[
								18658,
								18663
							],
							[
								18721,
								18726
							],
							[
								18842,
								18847
							],
							[
								18942,
								18966
							],
							[
								19066,
								19069
							],
							[
								19485,
								19509
							],
							[
								19796,
								19820
							],
							[
								20107,
								20131
							],
							[
								20418,
								20442
							],
							[
								20532,
								20555
							],
							[
								20629,
								20632
							],
							[
								20781,
								20787
							],
							[
								20823,
								20829
							],
							[
								21111,
								21114
							],
							[
								21132,
								21141
							],
							[
								21344,
								21354
							],
							[
								21445,
								21479
							],
							[
								21689,
								21724
							],
							[
								21932,
								21942
							],
							[
								22065,
								22075
							],
							[
								22168,
								22199
							],
							[
								22352,
								22386
							],
							[
								22956,
								23000
							],
							[
								24009,
								24033
							],
							[
								24668,
								24678
							],
							[
								24696,
								24702
							],
							[
								24844,
								24850
							],
							[
								25013,
								25022
							],
							[
								25090,
								25100
							],
							[
								25553,
								25558
							],
							[
								25668,
								25676
							],
							[
								25867,
								25874
							],
							[
								26153,
								26160
							],
							[
								26364,
								26371
							],
							[
								26555,
								26586
							],
							[
								26911,
								26942
							],
							[
								26983,
								27014
							],
							[
								27338,
								27376
							],
							[
								27407,
								27438
							],
							[
								27504,
								27535
							],
							[
								27581,
								27611
							],
							[
								27797,
								27807
							],
							[
								27991,
								27997
							],
							[
								28033,
								28039
							],
							[
								28705,
								28717
							],
							[
								29334,
								29343
							],
							[
								29544,
								29556
							],
							[
								29980,
								29988
							],
							[
								30063,
								30095
							],
							[
								30195,
								30202
							],
							[
								30634,
								30662
							],
							[
								30969,
								30997
							],
							[
								31035,
								31063
							],
							[
								31370,
								31398
							],
							[
								31500,
								31527
							],
							[
								31601,
								31608
							],
							[
								31777,
								31783
							],
							[
								31819,
								31825
							],
							[
								32207,
								32214
							],
							[
								32232,
								32241
							],
							[
								32454,
								32464
							],
							[
								32568,
								32618
							],
							[
								33072,
								33088
							],
							[
								33169,
								33185
							],
							[
								33203,
								33212
							],
							[
								33277,
								33283
							],
							[
								33362,
								33372
							],
							[
								33608,
								33616
							],
							[
								33682,
								33689
							],
							[
								33820,
								33848
							],
							[
								34026,
								34054
							],
							[
								34232,
								34260
							],
							[
								34422,
								34450
							],
							[
								34612,
								34639
							],
							[
								34858,
								34874
							],
							[
								35043,
								35049
							],
							[
								35085,
								35091
							],
							[
								35702,
								35723
							],
							[
								35844,
								35860
							],
							[
								36026,
								36048
							],
							[
								36167,
								36211
							],
							[
								36347,
								36377
							],
							[
								36982,
								37011
							],
							[
								38049,
								38076
							],
							[
								38113,
								38142
							],
							[
								38616,
								38645
							],
							[
								38753,
								38780
							],
							[
								38957,
								38983
							],
							[
								39208,
								39214
							],
							[
								39377,
								39383
							],
							[
								39419,
								39425
							],
							[
								39914,
								39920
							],
							[
								39938,
								39944
							],
							[
								40141,
								40150
							],
							[
								40593,
								40599
							],
							[
								40898,
								40908
							],
							[
								41454,
								41462
							],
							[
								41717,
								41724
							],
							[
								42118,
								42125
							],
							[
								42512,
								42517
							],
							[
								42935,
								42940
							],
							[
								43271,
								43284
							],
							[
								43451,
								43457
							],
							[
								43557,
								43561
							],
							[
								43564,
								43587
							],
							[
								44058,
								44088
							],
							[
								44317,
								44323
							],
							[
								44435,
								44442
							],
							[
								44580,
								44590
							],
							[
								44779,
								44787
							],
							[
								45264,
								45279
							],
							[
								45502,
								45510
							],
							[
								45673,
								45684
							],
							[
								46060,
								46072
							],
							[
								46137,
								46143
							],
							[
								46864,
								46874
							],
							[
								47852,
								47859
							],
							[
								48708,
								48714
							],
							[
								50395,
								50403
							],
							[
								50686,
								50696
							],
							[
								50979,
								51005
							],
							[
								51186,
								51212
							],
							[
								51393,
								51426
							],
							[
								51538,
								51564
							],
							[
								52645,
								52671
							],
							[
								52716,
								52756
							],
							[
								52874,
								52899
							],
							[
								53224,
								53230
							],
							[
								53266,
								53272
							],
							[
								53977,
								53983
							],
							[
								54121,
								54126
							],
							[
								54377,
								54386
							],
							[
								54442,
								54452
							],
							[
								54619,
								54634
							],
							[
								54948,
								54965
							],
							[
								54991,
								55008
							],
							[
								55034,
								55051
							],
							[
								55077,
								55092
							],
							[
								55116,
								55132
							],
							[
								55157,
								55172
							],
							[
								55196,
								55215
							],
							[
								55243,
								55260
							],
							[
								55571,
								55588
							],
							[
								55755,
								55771
							],
							[
								55937,
								55953
							],
							[
								56355,
								56370
							],
							[
								56394,
								56409
							],
							[
								56433,
								56449
							],
							[
								56486,
								56503
							],
							[
								56541,
								56557
							],
							[
								56587,
								56605
							],
							[
								56635,
								56650
							],
							[
								56818,
								56833
							],
							[
								56995,
								57010
							],
							[
								57143,
								57159
							],
							[
								57196,
								57212
							],
							[
								57249,
								57265
							],
							[
								57302,
								57322
							],
							[
								57370,
								57386
							],
							[
								57478,
								57495
							],
							[
								57532,
								57551
							],
							[
								57588,
								57604
							],
							[
								57669,
								57685
							],
							[
								57750,
								57766
							],
							[
								57835,
								57852
							],
							[
								57913,
								57930
							],
							[
								57991,
								58008
							],
							[
								58073,
								58092
							],
							[
								58142,
								58164
							]
						],
						"symlist":
						[
							"function (global)",
							" function add_props(obj, props)",
							" function operators_set(proto, ...op_list)",
							" function generic_pow(a, b)",
							" function miller_rabin_test(n, t)",
							" function fact_rec(a, b)",
							"isInteger(a)",
							"gcd(a, b)",
							"fact(n)",
							"comb(n, k)",
							"invmod(x, y)",
							"pmod(a, b, m)",
							"isPrime(n, t)",
							"nextPrime(n)",
							"factor(n)",
							"Integer",
							"inverse()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							"Fraction = function Fraction(a, b)",
							"Fraction",
							" function fraction_add(a, b)",
							" function fraction_sub(a, b)",
							" function fraction_mul(a, b)",
							" function fraction_div(a, b)",
							" function fraction_mod(a, b)",
							" function fraction_eq(a, b)",
							" function fraction_lt(a, b)",
							" function float_add(a, b)",
							" function float_sub(a, b)",
							" function float_mul(a, b)",
							" function float_div(a, b)",
							" function float_mod(a, b)",
							" function float_pow(a, b)",
							" function float_eq(a, b)",
							" function float_lt(a, b)",
							"Fraction",
							"pos(a)",
							"neg(a)",
							"toFraction(a, b)",
							"Fraction",
							"inverse()",
							"toString()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							"inverse()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							" function get_const(n)",
							"isFloat(a)",
							"bestappr(u, b)",
							"get E()",
							"get LN10()",
							"get LOG2E()",
							"get LOG10E()",
							"get SQRT1_2()",
							"get SQRT2()",
							"Float",
							"inverse()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							"Complex = function Complex(re, im)",
							"Complex",
							" function complex_add(a, b)",
							" function complex_sub(a, b)",
							" function complex_mul(a, b)",
							" function complex_div(a, b)",
							" function complex_eq(a, b)",
							"Complex",
							"pos(a)",
							"neg(a)",
							"toComplex(re, im)",
							"Complex",
							"inverse()",
							"toString()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							"Mod = function Mod(a, m)",
							"Mod",
							" function mod_add(a, b)",
							" function mod_sub(a, b)",
							" function mod_mul(a, b)",
							" function mod_div(a, b)",
							" function mod_eq(a, b)",
							"Mod",
							"pos(a)",
							"neg(a)",
							"Mod",
							"inverse()",
							"toString()",
							" function polynomial_is_scalar(a)",
							"Polynomial = function Polynomial(a)",
							"Polynomial",
							"Polynomial",
							" function number_need_paren(c)",
							" function monomial_toString(c, i)",
							" function poly_root_laguerre1(p, z, max_it)",
							" function poly_roots(p)",
							"Polynomial",
							"trim()",
							"conj()",
							"inverse()",
							"toString()",
							"deg()",
							"apply(b)",
							"deriv()",
							"integ()",
							"norm2()",
							" function polynomial_add(a, b)",
							" function polynomial_sub(a, b)",
							" function polynomial_mul(a, b)",
							" function polynomial_div_scalar(a, b)",
							" function polynomial_div(a, b)",
							" function polynomial_mod(a, b)",
							" function polynomial_eq(a, b)",
							"Polynomial",
							"pos(a)",
							"neg(a)",
							"divrem(a, b)",
							"gcd(a, b)",
							"invmod(x, y)",
							"roots(p)",
							"PolyMod = function PolyMod(a, m)",
							"PolyMod",
							" function polymod_add(a, b)",
							" function polymod_sub(a, b)",
							" function polymod_mul(a, b)",
							" function polymod_div(a, b)",
							" function polymod_eq(a, b)",
							"PolyMod",
							"pos(a)",
							"neg(a)",
							"PolyMod",
							"inverse()",
							"toString()",
							"RationalFunction = function RationalFunction(a, b)",
							"RationalFunction",
							"RationalFunction",
							"inverse()",
							"conj()",
							"toString()",
							"apply(b)",
							"deriv()",
							" function ratfunc_add(a, b)",
							" function ratfunc_sub(a, b)",
							" function ratfunc_mul(a, b)",
							" function ratfunc_div(a, b)",
							" function ratfunc_eq(a, b)",
							"RationalFunction",
							"pos(a)",
							"neg(a)",
							"toRationalFunction(a)",
							"RationalFunction",
							" function get_emin(a)",
							" function series_is_scalar_or_polynomial(a)",
							"Series = function Series(a, n)",
							" function series_add(v1, v2)",
							" function series_sub(a, b)",
							" function series_mul(v1, v2)",
							" function series_div(v1, v2)",
							" function series_pow(a, b)",
							" function series_eq(a, b)",
							"Series",
							"pos(a)",
							"neg(a)",
							"Series",
							"conj()",
							"inverse()",
							"trim()",
							"toString()",
							"apply(b)",
							"deriv()",
							"integ()",
							"exp()",
							"log()",
							"zero(n, emin)",
							"Series",
							"O(a)",
							" function ErrorO()",
							"Matrix = function Matrix(h, w)",
							"idn(n)",
							"diag(a)",
							"hilbert(n)",
							"trans(a)",
							"check_square(a)",
							"trace(a)",
							"charpoly(a)",
							"eigenvals(a)",
							"det(a)",
							"inverse(a)",
							"rank(a)",
							"ker(a)",
							"dp(a, b)",
							"cp(v1, v2)",
							" function array_add(a, b)",
							" function array_sub(a, b)",
							" function array_scalar_mul(a, b)",
							" function array_mul(a, b)",
							" function array_div(a, b)",
							" function array_element_wise_inverse(a)",
							" function array_eq(a, b)",
							"pos(a)",
							"neg(a)",
							"conj()",
							"dup()",
							"inverse()",
							"Polynomial",
							"get: function()",
							"function deriv(a)",
							"function integ(a)",
							"function norm2(a)",
							"function abs(a)",
							"function conj(a)",
							"function arg(a)",
							"function inverse(a)",
							"function trunc(a)",
							"function floor(a)",
							"function ceil(a)",
							"function sqrt(a)",
							"function exp(a)",
							"function log(a)",
							"function log2(a)",
							"function log10(a)",
							"function todb(a)",
							"function fromdb(a)",
							"function sin(a)",
							"function cos(a)",
							"function tan(a)",
							"function asin(a)",
							"function acos(a)",
							"function atan(a)",
							"function atan2(a, b)",
							"function sinc(a)",
							"function todeg(a)",
							"function fromdeg(a)",
							"function sinh(a)",
							"function cosh(a)",
							"function tanh(a)",
							"function asinh(a)",
							"function acosh(a)",
							"function atanh(a)",
							"function sigmoid(x)",
							"function lerp(a, b, t)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACbBwAAICB2YWx1ZSA9PgogIChsZXZlbCwgbWVzc2FnZSkgPT4KQXN5bmNDb2xsZWN0KGl0ZXIpCkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYXRjaGVyKHBhdHRlcm4sIHQgPSBhcmcgPT4gYXJnKQogICguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQogIChba2V5LCB2YWx1ZV0pID0+CkdldFJvb3REaXJlY3RvcmllcyhwYXR0ZXJuID0gJyonKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CiAgZCA9PgogIGQgPT4KR2V0RGlyKGRpcikKICBuID0+CkRpck5hbWUobmFtZSkKICBpdCA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCihbZGlyXSkgPT4KICBmID0+CiAgZmlsZSA9PgogIHVwbG9hZHMocmVxLCByZXNwKQogIHMgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgooW25hbWUsIHR5cGVdKSA9PgogIGZpbGVzMihyZXEsIHJlc3ApCiAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUsIHJlbF0pID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgc3RyaW5nKGEsIGIpCiAgbnVtYmVyKGEsIGIpCihbbmFtZSwgb2JqXSkgPT4KKHsgbmFtZSB9KSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABgDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
						"symkeys":
						[
							[
								1289,
								1306
							],
							[
								1447,
								1479
							],
							[
								2128,
								2171
							],
							[
								2976,
								3004
							],
							[
								4118,
								4152
							],
							[
								4715,
								4740
							],
							[
								5521,
								5533
							],
							[
								5704,
								5713
							],
							[
								5835,
								5842
							],
							[
								5929,
								5939
							],
							[
								6145,
								6157
							],
							[
								6551,
								6564
							],
							[
								6965,
								6978
							],
							[
								7460,
								7472
							],
							[
								7652,
								7661
							],
							[
								8389,
								8396
							],
							[
								8414,
								8423
							],
							[
								8460,
								8467
							],
							[
								8507,
								8512
							],
							[
								8586,
								8592
							],
							[
								8625,
								8630
							],
							[
								8702,
								8707
							],
							[
								8786,
								8791
							],
							[
								8894,
								8928
							],
							[
								9563,
								9571
							],
							[
								9640,
								9669
							],
							[
								9796,
								9825
							],
							[
								9952,
								9981
							],
							[
								10092,
								10121
							],
							[
								10232,
								10261
							],
							[
								10387,
								10415
							],
							[
								10558,
								10586
							],
							[
								10721,
								10747
							],
							[
								10786,
								10812
							],
							[
								10851,
								10877
							],
							[
								10916,
								10942
							],
							[
								10981,
								11007
							],
							[
								11046,
								11072
							],
							[
								11112,
								11137
							],
							[
								11252,
								11277
							],
							[
								11498,
								11506
							],
							[
								11729,
								11735
							],
							[
								11771,
								11777
							],
							[
								12433,
								12449
							],
							[
								12580,
								12588
							],
							[
								12774,
								12783
							],
							[
								12840,
								12850
							],
							[
								12904,
								12911
							],
							[
								12951,
								12956
							],
							[
								13031,
								13037
							],
							[
								13070,
								13075
							],
							[
								13151,
								13156
							],
							[
								13207,
								13212
							],
							[
								13322,
								13331
							],
							[
								13368,
								13375
							],
							[
								13415,
								13420
							],
							[
								13463,
								13469
							],
							[
								13502,
								13507
							],
							[
								13579,
								13584
							],
							[
								13628,
								13633
							],
							[
								13851,
								13874
							],
							[
								14650,
								14660
							],
							[
								14737,
								14751
							],
							[
								15314,
								15321
							],
							[
								15374,
								15384
							],
							[
								15487,
								15498
							],
							[
								15551,
								15563
							],
							[
								15665,
								15678
							],
							[
								15731,
								15742
							],
							[
								15787,
								15792
							],
							[
								15810,
								15819
							],
							[
								15858,
								15865
							],
							[
								15905,
								15910
							],
							[
								15954,
								15960
							],
							[
								15993,
								15998
							],
							[
								16070,
								16075
							],
							[
								16119,
								16124
							],
							[
								16271,
								16305
							],
							[
								16499,
								16506
							],
							[
								16575,
								16603
							],
							[
								16706,
								16734
							],
							[
								16837,
								16865
							],
							[
								16996,
								17024
							],
							[
								17099,
								17126
							],
							[
								17236,
								17243
							],
							[
								17412,
								17418
							],
							[
								17454,
								17460
							],
							[
								17848,
								17865
							],
							[
								17974,
								17981
							],
							[
								17999,
								18008
							],
							[
								18099,
								18109
							],
							[
								18467,
								18474
							],
							[
								18540,
								18545
							],
							[
								18597,
								18603
							],
							[
								18658,
								18663
							],
							[
								18721,
								18726
							],
							[
								18842,
								18847
							],
							[
								18942,
								18966
							],
							[
								19066,
								19069
							],
							[
								19485,
								19509
							],
							[
								19796,
								19820
							],
							[
								20107,
								20131
							],
							[
								20418,
								20442
							],
							[
								20532,
								20555
							],
							[
								20629,
								20632
							],
							[
								20781,
								20787
							],
							[
								20823,
								20829
							],
							[
								21111,
								21114
							],
							[
								21132,
								21141
							],
							[
								21344,
								21354
							],
							[
								21445,
								21479
							],
							[
								21689,
								21724
							],
							[
								21932,
								21942
							],
							[
								22065,
								22075
							],
							[
								22168,
								22199
							],
							[
								22352,
								22386
							],
							[
								22956,
								23000
							],
							[
								24009,
								24033
							],
							[
								24668,
								24678
							],
							[
								24696,
								24702
							],
							[
								24844,
								24850
							],
							[
								25013,
								25022
							],
							[
								25090,
								25100
							],
							[
								25553,
								25558
							],
							[
								25668,
								25676
							],
							[
								25867,
								25874
							],
							[
								26153,
								26160
							],
							[
								26364,
								26371
							],
							[
								26555,
								26586
							],
							[
								26911,
								26942
							],
							[
								26983,
								27014
							],
							[
								27338,
								27376
							],
							[
								27407,
								27438
							],
							[
								27504,
								27535
							],
							[
								27581,
								27611
							],
							[
								27797,
								27807
							],
							[
								27991,
								27997
							],
							[
								28033,
								28039
							],
							[
								28705,
								28717
							],
							[
								29334,
								29343
							],
							[
								29544,
								29556
							],
							[
								29980,
								29988
							],
							[
								30063,
								30095
							],
							[
								30195,
								30202
							],
							[
								30634,
								30662
							],
							[
								30969,
								30997
							],
							[
								31035,
								31063
							],
							[
								31370,
								31398
							],
							[
								31500,
								31527
							],
							[
								31601,
								31608
							],
							[
								31777,
								31783
							],
							[
								31819,
								31825
							],
							[
								32207,
								32214
							],
							[
								32232,
								32241
							],
							[
								32454,
								32464
							],
							[
								32568,
								32618
							],
							[
								33072,
								33088
							],
							[
								33169,
								33185
							],
							[
								33203,
								33212
							],
							[
								33277,
								33283
							],
							[
								33362,
								33372
							],
							[
								33608,
								33616
							],
							[
								33682,
								33689
							],
							[
								33820,
								33848
							],
							[
								34026,
								34054
							],
							[
								34232,
								34260
							],
							[
								34422,
								34450
							],
							[
								34612,
								34639
							],
							[
								34858,
								34874
							],
							[
								35043,
								35049
							],
							[
								35085,
								35091
							],
							[
								35702,
								35723
							],
							[
								35844,
								35860
							],
							[
								36026,
								36048
							],
							[
								36167,
								36211
							],
							[
								36347,
								36377
							],
							[
								36982,
								37011
							],
							[
								38049,
								38076
							],
							[
								38113,
								38142
							],
							[
								38616,
								38645
							],
							[
								38753,
								38780
							],
							[
								38957,
								38983
							],
							[
								39208,
								39214
							],
							[
								39377,
								39383
							],
							[
								39419,
								39425
							],
							[
								39914,
								39920
							],
							[
								39938,
								39944
							],
							[
								40141,
								40150
							],
							[
								40593,
								40599
							],
							[
								40898,
								40908
							],
							[
								41454,
								41462
							],
							[
								41717,
								41724
							],
							[
								42118,
								42125
							],
							[
								42512,
								42517
							],
							[
								42935,
								42940
							],
							[
								43271,
								43284
							],
							[
								43451,
								43457
							],
							[
								43557,
								43561
							],
							[
								43564,
								43587
							],
							[
								44058,
								44088
							],
							[
								44317,
								44323
							],
							[
								44435,
								44442
							],
							[
								44580,
								44590
							],
							[
								44779,
								44787
							],
							[
								45264,
								45279
							],
							[
								45502,
								45510
							],
							[
								45673,
								45684
							],
							[
								46060,
								46072
							],
							[
								46137,
								46143
							],
							[
								46864,
								46874
							],
							[
								47852,
								47859
							],
							[
								48708,
								48714
							],
							[
								50395,
								50403
							],
							[
								50686,
								50696
							],
							[
								50979,
								51005
							],
							[
								51186,
								51212
							],
							[
								51393,
								51426
							],
							[
								51538,
								51564
							],
							[
								52645,
								52671
							],
							[
								52716,
								52756
							],
							[
								52874,
								52899
							],
							[
								53224,
								53230
							],
							[
								53266,
								53272
							],
							[
								53977,
								53983
							],
							[
								54121,
								54126
							],
							[
								54377,
								54386
							],
							[
								54442,
								54452
							],
							[
								54619,
								54634
							],
							[
								54948,
								54965
							],
							[
								54991,
								55008
							],
							[
								55034,
								55051
							],
							[
								55077,
								55092
							],
							[
								55116,
								55132
							],
							[
								55157,
								55172
							],
							[
								55196,
								55215
							],
							[
								55243,
								55260
							],
							[
								55571,
								55588
							],
							[
								55755,
								55771
							],
							[
								55937,
								55953
							],
							[
								56355,
								56370
							],
							[
								56394,
								56409
							],
							[
								56433,
								56449
							],
							[
								56486,
								56503
							],
							[
								56541,
								56557
							],
							[
								56587,
								56605
							],
							[
								56635,
								56650
							],
							[
								56818,
								56833
							],
							[
								56995,
								57010
							],
							[
								57143,
								57159
							],
							[
								57196,
								57212
							],
							[
								57249,
								57265
							],
							[
								57302,
								57322
							],
							[
								57370,
								57386
							],
							[
								57478,
								57495
							],
							[
								57532,
								57551
							],
							[
								57588,
								57604
							],
							[
								57669,
								57685
							],
							[
								57750,
								57766
							],
							[
								57835,
								57852
							],
							[
								57913,
								57930
							],
							[
								57991,
								58008
							],
							[
								58073,
								58092
							],
							[
								58142,
								58164
							]
						],
						"symlist":
						[
							"function (global)",
							" function add_props(obj, props)",
							" function operators_set(proto, ...op_list)",
							" function generic_pow(a, b)",
							" function miller_rabin_test(n, t)",
							" function fact_rec(a, b)",
							"isInteger(a)",
							"gcd(a, b)",
							"fact(n)",
							"comb(n, k)",
							"invmod(x, y)",
							"pmod(a, b, m)",
							"isPrime(n, t)",
							"nextPrime(n)",
							"factor(n)",
							"Integer",
							"inverse()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							"Fraction = function Fraction(a, b)",
							"Fraction",
							" function fraction_add(a, b)",
							" function fraction_sub(a, b)",
							" function fraction_mul(a, b)",
							" function fraction_div(a, b)",
							" function fraction_mod(a, b)",
							" function fraction_eq(a, b)",
							" function fraction_lt(a, b)",
							" function float_add(a, b)",
							" function float_sub(a, b)",
							" function float_mul(a, b)",
							" function float_div(a, b)",
							" function float_mod(a, b)",
							" function float_pow(a, b)",
							" function float_eq(a, b)",
							" function float_lt(a, b)",
							"Fraction",
							"pos(a)",
							"neg(a)",
							"toFraction(a, b)",
							"Fraction",
							"inverse()",
							"toString()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							"inverse()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							" function get_const(n)",
							"isFloat(a)",
							"bestappr(u, b)",
							"get E()",
							"get LN10()",
							"get LOG2E()",
							"get LOG10E()",
							"get SQRT1_2()",
							"get SQRT2()",
							"Float",
							"inverse()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							"Complex = function Complex(re, im)",
							"Complex",
							" function complex_add(a, b)",
							" function complex_sub(a, b)",
							" function complex_mul(a, b)",
							" function complex_div(a, b)",
							" function complex_eq(a, b)",
							"Complex",
							"pos(a)",
							"neg(a)",
							"toComplex(re, im)",
							"Complex",
							"inverse()",
							"toString()",
							"norm2()",
							"abs()",
							"conj()",
							"arg()",
							"exp()",
							"log()",
							"Mod = function Mod(a, m)",
							"Mod",
							" function mod_add(a, b)",
							" function mod_sub(a, b)",
							" function mod_mul(a, b)",
							" function mod_div(a, b)",
							" function mod_eq(a, b)",
							"Mod",
							"pos(a)",
							"neg(a)",
							"Mod",
							"inverse()",
							"toString()",
							" function polynomial_is_scalar(a)",
							"Polynomial = function Polynomial(a)",
							"Polynomial",
							"Polynomial",
							" function number_need_paren(c)",
							" function monomial_toString(c, i)",
							" function poly_root_laguerre1(p, z, max_it)",
							" function poly_roots(p)",
							"Polynomial",
							"trim()",
							"conj()",
							"inverse()",
							"toString()",
							"deg()",
							"apply(b)",
							"deriv()",
							"integ()",
							"norm2()",
							" function polynomial_add(a, b)",
							" function polynomial_sub(a, b)",
							" function polynomial_mul(a, b)",
							" function polynomial_div_scalar(a, b)",
							" function polynomial_div(a, b)",
							" function polynomial_mod(a, b)",
							" function polynomial_eq(a, b)",
							"Polynomial",
							"pos(a)",
							"neg(a)",
							"divrem(a, b)",
							"gcd(a, b)",
							"invmod(x, y)",
							"roots(p)",
							"PolyMod = function PolyMod(a, m)",
							"PolyMod",
							" function polymod_add(a, b)",
							" function polymod_sub(a, b)",
							" function polymod_mul(a, b)",
							" function polymod_div(a, b)",
							" function polymod_eq(a, b)",
							"PolyMod",
							"pos(a)",
							"neg(a)",
							"PolyMod",
							"inverse()",
							"toString()",
							"RationalFunction = function RationalFunction(a, b)",
							"RationalFunction",
							"RationalFunction",
							"inverse()",
							"conj()",
							"toString()",
							"apply(b)",
							"deriv()",
							" function ratfunc_add(a, b)",
							" function ratfunc_sub(a, b)",
							" function ratfunc_mul(a, b)",
							" function ratfunc_div(a, b)",
							" function ratfunc_eq(a, b)",
							"RationalFunction",
							"pos(a)",
							"neg(a)",
							"toRationalFunction(a)",
							"RationalFunction",
							" function get_emin(a)",
							" function series_is_scalar_or_polynomial(a)",
							"Series = function Series(a, n)",
							" function series_add(v1, v2)",
							" function series_sub(a, b)",
							" function series_mul(v1, v2)",
							" function series_div(v1, v2)",
							" function series_pow(a, b)",
							" function series_eq(a, b)",
							"Series",
							"pos(a)",
							"neg(a)",
							"Series",
							"conj()",
							"inverse()",
							"trim()",
							"toString()",
							"apply(b)",
							"deriv()",
							"integ()",
							"exp()",
							"log()",
							"zero(n, emin)",
							"Series",
							"O(a)",
							" function ErrorO()",
							"Matrix = function Matrix(h, w)",
							"idn(n)",
							"diag(a)",
							"hilbert(n)",
							"trans(a)",
							"check_square(a)",
							"trace(a)",
							"charpoly(a)",
							"eigenvals(a)",
							"det(a)",
							"inverse(a)",
							"rank(a)",
							"ker(a)",
							"dp(a, b)",
							"cp(v1, v2)",
							" function array_add(a, b)",
							" function array_sub(a, b)",
							" function array_scalar_mul(a, b)",
							" function array_mul(a, b)",
							" function array_div(a, b)",
							" function array_element_wise_inverse(a)",
							" function array_eq(a, b)",
							"pos(a)",
							"neg(a)",
							"conj()",
							"dup()",
							"inverse()",
							"Polynomial",
							"get: function()",
							"function deriv(a)",
							"function integ(a)",
							"function norm2(a)",
							"function abs(a)",
							"function conj(a)",
							"function arg(a)",
							"function inverse(a)",
							"function trunc(a)",
							"function floor(a)",
							"function ceil(a)",
							"function sqrt(a)",
							"function exp(a)",
							"function log(a)",
							"function log2(a)",
							"function log10(a)",
							"function todb(a)",
							"function fromdb(a)",
							"function sin(a)",
							"function cos(a)",
							"function tan(a)",
							"function asin(a)",
							"function acos(a)",
							"function atan(a)",
							"function atan2(a, b)",
							"function sinc(a)",
							"function todeg(a)",
							"function fromdeg(a)",
							"function sinh(a)",
							"function cosh(a)",
							"function tanh(a)",
							"function asinh(a)",
							"function acosh(a)",
							"function atanh(a)",
							"function sigmoid(x)",
							"function lerp(a, b, t)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABgDgAAKGdsb2JhbCkKICBhZGRfcHJvcHMob2JqLCBwcm9wcykKICBvcGVyYXRvcnNfc2V0KHByb3RvLCAuLi5vcF9saXN0KQogIGdlbmVyaWNfcG93KGEsIGIpCiAgbWlsbGVyX3JhYmluX3Rlc3QobiwgdCkKICBmYWN0X3JlYyhhLCBiKQogIGlzSW50ZWdlcihhKQogIGdjZChhLCBiKQogIGZhY3QobikKICBjb21iKG4sIGspCiAgaW52bW9kKHgsIHkpCiAgcG1vZChhLCBiLCBtKQogIGlzUHJpbWUobiwgdCkKICBuZXh0UHJpbWUobikKICBmYWN0b3IobikKSW50ZWdlcgogIGludmVyc2UoKQogIG5vcm0yKCkKICBhYnMoKQogIGNvbmooKQogIGFyZygpCiAgZXhwKCkKICBsb2coKQpGcmFjdGlvbiA9IGZ1bmN0aW9uIEZyYWN0aW9uKGEsIGIpCkZyYWN0aW9uCiAgZnJhY3Rpb25fYWRkKGEsIGIpCiAgZnJhY3Rpb25fc3ViKGEsIGIpCiAgZnJhY3Rpb25fbXVsKGEsIGIpCiAgZnJhY3Rpb25fZGl2KGEsIGIpCiAgZnJhY3Rpb25fbW9kKGEsIGIpCiAgZnJhY3Rpb25fZXEoYSwgYikKICBmcmFjdGlvbl9sdChhLCBiKQogIGZsb2F0X2FkZChhLCBiKQogIGZsb2F0X3N1YihhLCBiKQogIGZsb2F0X211bChhLCBiKQogIGZsb2F0X2RpdihhLCBiKQogIGZsb2F0X21vZChhLCBiKQogIGZsb2F0X3BvdyhhLCBiKQogIGZsb2F0X2VxKGEsIGIpCiAgZmxvYXRfbHQoYSwgYikKRnJhY3Rpb24KICBwb3MoYSkKICBuZWcoYSkKICB0b0ZyYWN0aW9uKGEsIGIpCkZyYWN0aW9uCiAgaW52ZXJzZSgpCiAgdG9TdHJpbmcoKQogIG5vcm0yKCkKICBhYnMoKQogIGNvbmooKQogIGFyZygpCiAgZXhwKCkKICBsb2coKQogIGludmVyc2UoKQogIG5vcm0yKCkKICBhYnMoKQogIGNvbmooKQogIGFyZygpCiAgZXhwKCkKICBsb2coKQogIGdldF9jb25zdChuKQogIGlzRmxvYXQoYSkKICBiZXN0YXBwcih1LCBiKQogIGdldCBFKCkKICBnZXQgTE4xMCgpCiAgZ2V0IExPRzJFKCkKICBnZXQgTE9HMTBFKCkKICBnZXQgU1FSVDFfMigpCiAgZ2V0IFNRUlQyKCkKRmxvYXQKICBpbnZlcnNlKCkKICBub3JtMigpCiAgYWJzKCkKICBjb25qKCkKICBhcmcoKQogIGV4cCgpCiAgbG9nKCkKQ29tcGxleCA9IGZ1bmN0aW9uIENvbXBsZXgocmUsIGltKQpDb21wbGV4CiAgY29tcGxleF9hZGQoYSwgYikKICBjb21wbGV4X3N1YihhLCBiKQogIGNvbXBsZXhfbXVsKGEsIGIpCiAgY29tcGxleF9kaXYoYSwgYikKICBjb21wbGV4X2VxKGEsIGIpCkNvbXBsZXgKICBwb3MoYSkKICBuZWcoYSkKICB0b0NvbXBsZXgocmUsIGltKQpDb21wbGV4CiAgaW52ZXJzZSgpCiAgdG9TdHJpbmcoKQogIG5vcm0yKCkKICBhYnMoKQogIGNvbmooKQogIGFyZygpCiAgZXhwKCkKICBsb2coKQpNb2QgPSBmdW5jdGlvbiBNb2QoYSwgbSkKTW9kCiAgbW9kX2FkZChhLCBiKQogIG1vZF9zdWIoYSwgYikKICBtb2RfbXVsKGEsIGIpCiAgbW9kX2RpdihhLCBiKQogIG1vZF9lcShhLCBiKQpNb2QKICBwb3MoYSkKICBuZWcoYSkKTW9kCiAgaW52ZXJzZSgpCiAgdG9TdHJpbmcoKQogIHBvbHlub21pYWxfaXNfc2NhbGFyKGEpClBvbHlub21pYWwgPSBmdW5jdGlvbiBQb2x5bm9taWFsKGEpClBvbHlub21pYWwKUG9seW5vbWlhbAogIG51bWJlcl9uZWVkX3BhcmVuKGMpCiAgbW9ub21pYWxfdG9TdHJpbmcoYywgaSkKICBwb2x5X3Jvb3RfbGFndWVycmUxKHAsIHosIG1heF9pdCkKICBwb2x5X3Jvb3RzKHApClBvbHlub21pYWwKICB0cmltKCkKICBjb25qKCkKICBpbnZlcnNlKCkKICB0b1N0cmluZygpCiAgZGVnKCkKICBhcHBseShiKQogIGRlcml2KCkKICBpbnRlZygpCiAgbm9ybTIoKQogIHBvbHlub21pYWxfYWRkKGEsIGIpCiAgcG9seW5vbWlhbF9zdWIoYSwgYikKICBwb2x5bm9taWFsX211bChhLCBiKQogIHBvbHlub21pYWxfZGl2X3NjYWxhcihhLCBiKQogIHBvbHlub21pYWxfZGl2KGEsIGIpCiAgcG9seW5vbWlhbF9tb2QoYSwgYikKICBwb2x5bm9taWFsX2VxKGEsIGIpClBvbHlub21pYWwKICBwb3MoYSkKICBuZWcoYSkKICBkaXZyZW0oYSwgYikKICBnY2QoYSwgYikKICBpbnZtb2QoeCwgeSkKICByb290cyhwKQpQb2x5TW9kID0gZnVuY3Rpb24gUG9seU1vZChhLCBtKQpQb2x5TW9kCiAgcG9seW1vZF9hZGQoYSwgYikKICBwb2x5bW9kX3N1YihhLCBiKQogIHBvbHltb2RfbXVsKGEsIGIpCiAgcG9seW1vZF9kaXYoYSwgYikKICBwb2x5bW9kX2VxKGEsIGIpClBvbHlNb2QKICBwb3MoYSkKICBuZWcoYSkKUG9seU1vZAogIGludmVyc2UoKQogIHRvU3RyaW5nKCkKUmF0aW9uYWxGdW5jdGlvbiA9IGZ1bmN0aW9uIFJhdGlvbmFsRnVuY3Rpb24oYSwgYikKUmF0aW9uYWxGdW5jdGlvbgpSYXRpb25hbEZ1bmN0aW9uCiAgaW52ZXJzZSgpCiAgY29uaigpCiAgdG9TdHJpbmcoKQogIGFwcGx5KGIpCiAgZGVyaXYoKQogIHJhdGZ1bmNfYWRkKGEsIGIpCiAgcmF0ZnVuY19zdWIoYSwgYikKICByYXRmdW5jX211bChhLCBiKQogIHJhdGZ1bmNfZGl2KGEsIGIpCiAgcmF0ZnVuY19lcShhLCBiKQpSYXRpb25hbEZ1bmN0aW9uCiAgcG9zKGEpCiAgbmVnKGEpCiAgdG9SYXRpb25hbEZ1bmN0aW9uKGEpClJhdGlvbmFsRnVuY3Rpb24KICBnZXRfZW1pbihhKQogIHNlcmllc19pc19zY2FsYXJfb3JfcG9seW5vbWlhbChhKQpTZXJpZXMgPSBmdW5jdGlvbiBTZXJpZXMoYSwgbikKICBzZXJpZXNfYWRkKHYxLCB2MikKICBzZXJpZXNfc3ViKGEsIGIpCiAgc2VyaWVzX211bCh2MSwgdjIpCiAgc2VyaWVzX2Rpdih2MSwgdjIpCiAgc2VyaWVzX3BvdyhhLCBiKQogIHNlcmllc19lcShhLCBiKQpTZXJpZXMKICBwb3MoYSkKICBuZWcoYSkKU2VyaWVzCiAgY29uaigpCiAgaW52ZXJzZSgpCiAgdHJpbSgpCiAgdG9TdHJpbmcoKQogIGFwcGx5KGIpCiAgZGVyaXYoKQogIGludGVnKCkKICBleHAoKQogIGxvZygpCiAgemVybyhuLCBlbWluKQpTZXJpZXMKTyhhKQpFcnJvck8oKQpNYXRyaXggPSBmdW5jdGlvbiBNYXRyaXgoaCwgdykKICBpZG4obikKICBkaWFnKGEpCiAgaGlsYmVydChuKQogIHRyYW5zKGEpCiAgY2hlY2tfc3F1YXJlKGEpCiAgdHJhY2UoYSkKICBjaGFycG9seShhKQogIGVpZ2VudmFscyhhKQogIGRldChhKQogIGludmVyc2UoYSkKICByYW5rKGEpCiAga2VyKGEpCiAgZHAoYSwgYikKICBjcCh2MSwgdjIpCiAgYXJyYXlfYWRkKGEsIGIpCiAgYXJyYXlfc3ViKGEsIGIpCiAgYXJyYXlfc2NhbGFyX211bChhLCBiKQogIGFycmF5X211bChhLCBiKQogIGFycmF5X2RpdihhLCBiKQogIGFycmF5X2VsZW1lbnRfd2lzZV9pbnZlcnNlKGEpCiAgYXJyYXlfZXEoYSwgYikKICBwb3MoYSkKICBuZWcoYSkKICBjb25qKCkKICBkdXAoKQogIGludmVyc2UoKQpQb2x5bm9taWFsCiAgZ2V0OiBmdW5jdGlvbigpCiAgZGVyaXYoYSkKICBpbnRlZyhhKQogIG5vcm0yKGEpCiAgYWJzKGEpCiAgY29uaihhKQogIGFyZyhhKQogIGludmVyc2UoYSkKICB0cnVuYyhhKQogIGZsb29yKGEpCiAgY2VpbChhKQogIHNxcnQoYSkKICBleHAoYSkKICBsb2coYSkKICBsb2cyKGEpCiAgbG9nMTAoYSkKICB0b2RiKGEpCiAgZnJvbWRiKGEpCiAgc2luKGEpCiAgY29zKGEpCiAgdGFuKGEpCiAgYXNpbihhKQogIGFjb3MoYSkKICBhdGFuKGEpCiAgYXRhbjIoYSwgYikKICBzaW5jKGEpCiAgdG9kZWcoYSkKICBmcm9tZGVnKGEpCiAgc2luaChhKQogIGNvc2goYSkKICB0YW5oKGEpCiAgYXNpbmgoYSkKICBhY29zaChhKQogIGF0YW5oKGEpCiAgc2lnbW9pZCh4KQogIGxlcnAoYSwgYiwgdCkAAAAAAAAAAGAOAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "import * as std from 'std';\nimport * as os from 'os';\nimport * as deep from './lib/deep.js';\nimport * as xml from 'xml';\nimport * as path from 'path';\nimport { Console } from 'console';\nimport { Directory, BOTH, TYPE_DIR, TYPE_LNK, TYPE_REG, TYPE_MASK } from 'directory';\nimport REPL from './quickjs/qjs-modules/lib/repl.js';\nimport inspect from './lib/objectInspect.js';\nimport * as Terminal from './terminal.js';\nimport * as fs from 'fs';\nimport { link, unlink, error, fnmatch, FNM_EXTMATCH } from 'misc';\nimport { toString, define, toUnixTime, getOpt, randStr, isObject, isNumeric, isArrayBuffer, glob, GLOB_BRACE, waitFor } from 'util';\nimport { setLog, LLL_USER, LLL_NOTICE, LLL_WARN, LLL_INFO, client, server, FormParser, Hash, Response, Socket } from 'net';\nimport { parseDate, dateToObject } from './date-helpers.js';\nimport { IfDebug, LogIfDebug, ReadFile, LoadHistory, ReadJSON, ReadXML, MapFile, WriteFile, WriteJSON, WriteXML, ReadBJSON, WriteBJSON, DirIterator, RecursiveDirIterator, ReadDirRecursive, Filter, FilterImages, SortFiles, StatFiles, ReadFd, FdReader, CopyToClipboard, ReadCallback, LogCall, Spawn, FetchURL } from './io-helpers.js';\nimport { parseDegMinSec, parseGPSLocation } from './string-helpers.js';\nimport { h, html, render, Component, useState, useLayoutEffect, useRef } from './lib/preact.mjs';\nimport renderToString from './lib/preact-render-to-string.js';\nimport { exec, spawn } from 'child_process';\nimport { Execute } from './os-helpers.js';\nimport trkl from './lib/trkl.js';\nimport { take } from './lib/iterator/helpers.js';\nimport { extendArray, extendGenerator, extendAsyncGenerator } from 'util';\n\nextendArray();\nextendGenerator();\nextendGenerator(Object.getPrototypeOf(new Map().keys()));\nextendGenerator(Object.getPrototypeOf(new Directory('.')));\nextendAsyncGenerator();\n\nglobalThis.fs = fs;\nglobalThis.logFilter =\n  /(ws_set_timeout: on immortal stream|Unhandled|PROXY-|VHOST_CERT_AGING|BIND|EVENT_WAIT|WRITABLE)/;\n\ntrkl.property(globalThis, 'logLevel').subscribe(value =>\n  setLog(value, (level, message) => {\n    if(\n      /__lws|serve_(resolved|generator|promise|response)|XXbl(\\([123]\\).*writable|x\\([/]\\).*WRITEABLE)|lws_/.test(message)\n    )\n      return;\n    if(level == LLL_INFO && !/proxy/.test(message)) return;\n    if(logFilter.test(message)) return;\n\n    //if(params.debug || level <= LLL_WARN)\n    out(\n      (\n        ['ERR', 'WARN', 'NOTICE', 'INFO', 'DEBUG', 'PARSER', 'HEADER', 'EXT', 'CLIENT', 'LATENCY', 'MINNET', 'THREAD'][\n          Math.log2(level)\n        ] ?? level + ''\n      ).padEnd(8) + message.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r')\n    );\n  })\n);\n\nasync function AsyncCollect(iter) {\n  let ret = [];\n  for await(let chunk of await iter) ret.push(chunk);\n  return ret;\n}\n\nfunction ExecTool(cmd, ...args) {\n  let child = spawn(cmd, args, { stdio: [0, 'pipe', 2] });\n  let [stdin, stdout, stderr] = child.stdio;\n  let r;\n  let b = new ArrayBuffer(1024);\n  r = child.wait();\n  // console.log('ExecTool', { args, child });\n\n  r = os.read(stdout, b, 0, 1024);\n  let data = b.slice(0, r);\n  let str = toString(data);\n\n  return str;\n}\n\nfunction GetMime(file) {\n  let output = ExecTool('file', '-i', file);\n  output = output.replace(/[\\r\\n]*$/g, '');\n  output = output.replace(new RegExp(file + ':\\\\s+'), '');\n  output = output.replace(/\\;\\s*.*/g, '');\n  return output;\n}\n\nfunction Matcher(pattern, t = arg => arg) {\n  return (...args) => pattern == t(...args) || 0 == fnmatch(pattern, t(...args), FNM_EXTMATCH);\n}\n\nfunction KeyOrValueMatcher(pattern) {\n  let matcher = Matcher(pattern);\n  return ([key, value]) => matcher(key) || matcher(value);\n}\n\nfunction GetRootDirectories(pattern = '*') {\n  return allowedDirs.keys().filter(Matcher(pattern));\n}\n\nconst MakeUUID = (rng = Math.random) => [8, 4, 4, 4, 12].map(n => randStr(n, '0123456789abcdef'), rng).join('-');\n\nconst defaultDirs = (globalThis.defaultDirs = [\n  '.',\n  ...glob('../*/eagle'),\n  './uploads/*.{sch,brd,lbr}',\n  '/mnt/extext/Photos/*APPLE/*.{JPG,PNG,GIF,AAE,MOV,HEIC,MP4,WEBP}',\n  ['/home/roman/Bilder', new RegExp('.(jpg|jpeg|png|heic|tif|tiff)$', 'i')]\n]);\n\nconst allowedDirs = (globalThis.allowedDirs = new Map(\n  defaultDirs\n    .map(dd => GetDir(Array.isArray(dd) ? dd[0] : dd))\n    .map(d => path.resolve(d))\n    .map(d => path.relative(d))\n    .map(d => [DirName(d), d])\n));\n\nfunction GetDir(dir) {\n  let a = path.toArray(dir);\n  let i = a.findIndex(n => /[*{}]/.test(n));\n  return i != -1 ? path.slice(dir, 0, i) : dir;\n}\n\nfunction DirName(name) {\n  let p = path.relative(name);\n\n  p = path.slice(\n    p,\n    path.toArray(p).findIndex(it => it != '..')\n  );\n  return p;\n}\nfunction DateStr(date) {\n  let str = date.toISOString();\n  let ti = str.indexOf('T');\n  return (\n    str.substring(0, ti) /*.replace(/-/g, '')*/ + ' ' + str.substring(ti + 1, ti + 1 + 8) //.replace(/:/g, '')\n  );\n}\n\nfunction ModeStr(mode) {\n  return (\n    (mode & (0o120000 == 0o120000) ? 'l' : mode & 0o40000 ? 'd' : '-') +\n    (mode & 0b100000000 ? 'r' : '-') +\n    (mode & 0b010000000 ? 'w' : '-') +\n    (mode & 0b001000000 ? 'x' : '-') +\n    (mode & 0b100000 ? 'r' : '-') +\n    (mode & 0b010000 ? 'w' : '-') +\n    (mode & 0b001000 ? 'x' : '-') +\n    (mode & 0b100 ? 'r' : '-') +\n    (mode & 0b010 ? 'w' : '-') +\n    (mode & 0b001 ? 'x' : '-')\n  );\n}\n\nconst HTMLPage = ({ title, style, scripts = [], children, ...props }) => {\n  return h('html', {}, [\n    h(\n      'head',\n      {},\n      [\n        h('title', {}, [title]),\n        ...(style ? [h('style', { type: 'text/css' }, [style])] : []),\n        h(\n          'link',\n          {\n            rel: 'stylesheet',\n            href: 'static/css/list.css'\n          },\n          []\n        )\n      ].concat(scripts.map(script => h('script', { type: 'module', src: script })))\n    ),\n    h('body', {}, children ?? [])\n  ]);\n};\n\nconst FilterForm = ({ ...props }) =>\n  h('form', { action: 'file', method: 'POST' }, [\n    h(\n      'input',\n      {\n        type: 'text',\n        size: 20,\n        name: 'filter',\n        value: '.*' /*,\n          onchange: e => {\n            console.log('onchange', e);\n          }*/\n      },\n      []\n    ),\n    h('input', { type: 'submit', value: 'Submit', class: 'hidden' }, [])\n  ]);\n\nconst HTMLTable = ({ rows, ...props }) => h('table', props, rows);\nconst HTMLTableRow = ({ columns, ...props }) => h('tr', props, columns);\nconst HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) => h(tag, props, children);\n\nconst FileLink = ({ file, ...props }) => {\n  return h('a', { href: 'file/uploads/' + file }, [file]);\n};\nconst FileObject = ({ file, stat = {}, ...props }) => {\n  stat ??= fs.lstatSync('uploads/' + file);\n  // console.log('FileObject', { file, stat });\n  let isDir = stat.isDirectory();\n\n  return h(HTMLTableRow, {}, [\n    h(HTMLTableColumn, { class: 'mode' }, [\n      //(stat.mode & 0b111111111).toString(8),\n      ModeStr(stat.mode)\n    ]),\n    h(HTMLTableColumn, { class: 'file' }, [h(FileLink, { file: file + (isDir ? '/' : '') }, [])]),\n    h(HTMLTableColumn, { class: 'size' }, [stat.size + '']),\n    h(HTMLTableColumn, { class: 'date' }, [DateStr(new Date(stat.atime))])\n  ]);\n};\n\nconst FileTable = ({ files, ...props }) => {\n  //console.log('FileTable', files);\n\n  let fields = ['mode', 'file', 'size', 'atime'];\n\n  files = files.sort((a, b) => a.file.localeCompare(b.file));\n\n  return h(\n    HTMLTable,\n    {\n      ...props,\n      cellspacing: 0,\n      cellpadding: 0,\n      border: 0,\n      rows: [\n        h(\n          HTMLTableRow,\n          {\n            columns: fields.map(field => h(HTMLTableColumn, { tag: 'th' }, [field]))\n          },\n          []\n        )\n      ].concat(files.map(file => h(FileObject, file, [])))\n    },\n    []\n  );\n};\n\nfunction ReadExiv2(file) {\n  console.log('ReadExiv2', file);\n  let [rdf, stdout] = os.pipe();\n  os.exec(['exiv2', '-e', 'X-', 'ex', file], { stdout });\n  os.close(stdout);\n  let xmpdat = fs.readAllSync(rdf);\n  fs.closeSync(rdf);\n  // console.log('xmpdat', xmpdat);\n  let xmp = xml.read(xmpdat);\n  // console.log('xmp', xmp);\n  let flat = Object.fromEntries(\n    deep\n      .flatten(xmp, [])\n      .filter(([k, v]) => v !== '' && /attributes.*:/.test(k) && !/\\.xmlns/.test(k) && !isObject(v))\n      .filter(([k, v]) => /(GPS|[XY]Dim|[XY]Res|Date$|Make$|Model$)/.test(k))\n      .map(([k, v]) => [k.replace(/.*\\.attributes\\./g, ''), v])\n      .sort((a, b) => a[0].localeCompare(b[0]))\n      .map(([k, v]) => [k, isNaN(+v) ? (isNaN(Date.parse(v)) ? v : new Date(v)) : +v])\n  );\n  return flat;\n}\n\nfunction ReadExiftool(file) {\n  console.log('ReadExiftool', file);\n\n  let [ret, out] = Execute('exiftool', '-S', '-ee', file);\n\n  let a = out.split(/\\r?\\n/g).filter(l => l != '');\n\n  a = a.map(line => [line, line.indexOf(': ')]).map(([line, idx]) => [line.slice(0, idx), line.slice(idx + 2)]);\n  let o = Object.fromEntries(a);\n\n  //console.log('ReadExiftool',o);\n  return o;\n}\n\nfunction HeifConvert(src, dst, quality = 100) {\n  console.log('HeifConvert', src, dst);\n  let args = ['heif-convert', '-q', quality + '', src, dst];\n  let [ret, out] = Execute(...args);\n\n  console.log('HeifConvert', { args, ret, out });\n  return [ret, out];\n}\n\nfunction MagickResize(src, dst, rotate = 0, width, height) {\n  console.log('MagickResize', {\n    width,\n    height,\n    dst,\n    rotate\n  });\n  let args = ['convert', src, '-resize', width + 'x' + height, ...(rotate ? ['-rotate', '-' + rotate] : []), dst];\n  let [ret, out] = Execute(...args);\n\n  console.log('MagickResize', { args, ret, out });\n  return [ret, out];\n}\n\nfunction main(...args) {\n  const base = path.basename(scriptArgs[0], '.js').replace(/\\.[a-z]*$/, '');\n  const config = ReadJSON(`.${base}-config`) ?? {};\n\n  globalThis.console = new Console({\n    inspectOptions: {\n      compact: 2,\n      depth: Infinity,\n      customInspect: true,\n      maxArrayLength: 200\n    }\n  });\n  let params = getOpt(\n    {\n      verbose: [false, (a, v) => (v | 0) + 1, 'v'],\n      listen: [false, null, 'l'],\n      connect: [false, null, 'c'],\n      client: [false, null, 'C'],\n      server: [false, null, 'S'],\n      debug: [false, null, 'x'],\n      tls: [false, null, 't'],\n      'no-tls': [false, (v, pv, o) => ((o.tls = false), true), 'T'],\n      address: [true, null, 'a'],\n      port: [true, null, 'p'],\n      'ssl-cert': [true, null],\n      'ssl-private-key': [true, null],\n      '@': 'address,port'\n    },\n    args\n  );\n  if(params['no-tls'] === true) params.tls = false;\n\n  const {\n    address = '0.0.0.0',\n    port = 8999,\n    'ssl-cert': sslCert = 'localhost.crt',\n    'ssl-private-key': sslPrivateKey = 'localhost.key'\n  } = params;\n  const listen = params.connect && !params.listen ? false : true;\n  const is_server = !params.client || params.server;\n\n  let name = process.env['NAME'] ?? base;\n\n  name = name\n    .replace(/.*\\//, '')\n    .replace(/-/g, ' ')\n    .replace(/\\.[^\\/.]*$/, '');\n\n  let [prefix, suffix] = name.split(' ');\n\n  let repl = new REPL(`\\x1b[38;5;165m${prefix} \\x1b[38;5;39m${suffix}\\x1b[0m`, false);\n  const histfile = '.upload-server-history';\n  repl.historyLoad(histfile, false);\n  repl.loadSaveOptions();\n  repl.directives.i = [\n    (module, ...args) => {\n      console.log('args', args);\n      try {\n        return require(module);\n      } catch(e) {}\n      import(module).then(m => (globalThis[module] = m));\n    },\n    'import module'\n  ];\n\n  let { log } = console;\n  repl.show = arg => std.puts((typeof arg == 'string' ? arg : inspect(arg, globalThis.console.options)) + '\\n');\n\n  repl.cleanup = () => {\n    repl.readlineRemovePrompt();\n    Terminal.mousetrackingDisable();\n    let numLines = repl.historySave(histfile);\n\n    repl.printStatus(`EXIT (wrote ${numLines} history entries)`, false);\n\n    std.exit(0);\n  };\n\n  repl.inspectOptions = {\n    ...(repl.inspectOptions ?? console.options),\n    depth: Infinity,\n    compact: false\n  };\n\n  console.log = (...args) => repl.printStatus(() => log(console.config(repl.inspectOptions), ...args));\n\n  let logFile =\n    {\n      puts(s) {\n        repl.printStatus(() => std.puts(s));\n      }\n    } ?? std.open('upload-server.log', 'w+');\n\n  let connections = new Set();\n  let by_uuid = {};\n\n  function ParseBody(gen) {\n    let prom,\n      o = '',\n      x;\n\n    while((x = gen.next())) {\n      let { value, done } = x;\n      o += value;\n    }\n    return o;\n  }\n\n  const createWS = (globalThis.createWS = (url, callbacks, listen) => {\n    //console.log('createWS', { url, callbacks, listen });\n\n    globalThis.out = s => logFile.puts(s + '\\n');\n\n    logLevel = (params.debug ? LLL_USER : 0) | (((params.debug ? LLL_INFO : LLL_WARN) << 1) - 1);\n    console.log('createWS', { logLevel });\n\n    return [client, server][+listen]({\n      block: false,\n      tls: params.tls,\n      sslCert,\n      sslPrivateKey,\n      mimetypes: [\n        ['.svgz', 'application/gzip'],\n        ['.mjs', 'application/javascript'],\n        ['.js', 'application/javascript'],\n        ['.wasm', 'application/octet-stream'],\n        ['.eot', 'application/vnd.ms-fontobject'],\n        ['.lib', 'application/x-archive'],\n        ['.bz2', 'application/x-bzip2'],\n        ['.gitignore', 'text/plain'],\n        ['.cmake', 'text/plain'],\n        ['.hex', 'text/plain'],\n        ['.md', 'text/plain'],\n        ['.pbxproj', 'text/plain'],\n        ['.wat', 'text/plain'],\n        ['.c', 'text/x-c'],\n        ['.h', 'text/x-c'],\n        ['.cpp', 'text/x-c++'],\n        ['.hpp', 'text/x-c++'],\n        ['.filters', 'text/xml'],\n        ['.plist', 'text/xml'],\n        ['.storyboard', 'text/xml'],\n        ['.vcxproj', 'text/xml'],\n        ['.bat', 'text/x-msdos-batch'],\n        ['.mm', 'text/x-objective-c'],\n        ['.m', 'text/x-objective-c'],\n        ['.sh', 'text/x-shellscript']\n      ],\n      mounts: [\n        ['/', '.', 'upload.html'],\n        ['/get', './uploads', ''],\n        ['/warmcat', 'https://warmcat.com/', 'index.html'],\n        ['/distrelec', 'https://www.distrelec.ch/', 'login'],\n        ['/hasura', 'http://wild-beauty.herokuapp.com/v1/', 'graphql'],\n        // ['/upload', 'lws-deaddrop', null, 'lws-deaddrop'],\n        async function* test(req, resp) {\n          resp.type = 'text/plain';\n\n          console.log('*test', { req, resp });\n\n          let bodyStr = '';\n          if(req.method == 'POST') {\n            for await(let chunk of await req.body) {\n              console.log('chunk', chunk);\n              bodyStr += toString(chunk);\n            }\n          }\n          console.log('bodyStr', bodyStr);\n\n          for(let i = 0; i < 10; i++) {\n            yield `line #${i}\\n`;\n            await waitFor((10 - i + 1) * 10);\n          }\n\n          yield 'done!';\n        },\n        function proxy(req, resp) {\n          console.log('proxy', { req, resp });\n          const { url, method, headers } = req;\n          console.log('proxy', { url, method, headers });\n          const { status, ok, type } = resp;\n\n          console.log('proxy', { status, ok, url, type });\n        },\n        function* config(req, resp) {\n          console.log('*config', { req, resp });\n          yield '{}';\n        },\n        function* file(req, resp) {\n          let { body, headers, json, url } = req;\n          let { query } = url;\n\n          if(typeof body == 'string')\n            query = {\n              ...query,\n              ...(JSON.parse(body) ?? {})\n            };\n\n          let { action = 'list', charset = 'utf-8', binary = false, file, contents } = query ?? {};\n\n          if(/^\\/file\\/./.test(url.path)) {\n            file = url.path.replace(/^\\/file\\//, '');\n            action = 'load';\n          }\n          console.log('*file', { query, body, file });\n\n          console.log(`*file`, { action, file });\n\n          if(file) {\n            file = path.absolute(file);\n            file = path.collapse(file);\n            console.log(\n              `allowedDirs:`,\n              allowedDirs //.map(dir => path.normalize(dir))\n            );\n\n            //console.log(`allowed:`, allowedDirs/*.map(dir => path.isin(file, dir))*/);\n            let allowed = [...allowedDirs].some(([dir]) => path.isin(file, path.normalize(dir)));\n\n            if(!allowed) {\n              console.log(`Not allowed: '${file}'`);\n              throw new Error(`Not allowed: '${file}'`);\n            }\n          }\n\n          switch (action) {\n            case 'load':\n              let mime = GetMime(file);\n              resp.type = mime;\n              resp.headers = { 'content-type': mime };\n              let data = fs.readFileSync(file, 1 | binary ? null : charset);\n              console.log(`*file.load`, { data, mime });\n              yield data;\n              resp.body = data;\n              //yield\n              break;\n            case 'save':\n              fs.writeFileSync(file, contents);\n              yield 'done!\\r\\n';\n              break;\n            case 'list':\n              let files = fs.readdirSync('uploads').filter(f => !/^\\.$/.test(f));\n              let component = h(\n                HTMLPage,\n                {\n                  title: 'File list',\n                  style: `body, * {\n  font-family: MiscFixedSC613,Fixed,\"Courier New\";\n}`,\n                  scripts: ['filelist.js']\n                },\n                [\n                  h(FilterForm, {}, []),\n                  h(FileTable, {\n                    files: files.map(file => ({\n                      file,\n                      stat: fs.statSync(file)\n                    }))\n                  })\n                ]\n              );\n              yield renderToString(component);\n              break;\n              yield files.join('\\n');\n\n              break;\n            default:\n              throw new Error(`No such command: '${action}'`);\n          }\n        },\n        function* uploads(req, resp) {\n          resp.type = 'application/json';\n          console.log('uploads', req, resp);\n          const { limit = '0,100', pretty = 0 } = req.url.query ?? {};\n          let [start, end] = limit.split(/,/g).map(s => +s);\n          console.log('uploads', { start, end });\n          let result = [],\n            entries = glob('uploads/*.json');\n          for(let entry of (Array.isArray(entries) ? entries : []).slice(start, end)) {\n            let json = ReadJSON(entry);\n            const { storage, filename, uploaded, address, exif, thumbnail } = json;\n            json.size = fs.sizeSync(storage);\n            result.push(json);\n          }\n\n          console.log('uploads', console.config({ depth: 1, compact: 2, maxArrayLength: 10 }), result);\n          yield JSON.stringify(result, ...(+pretty ? [null, 2] : []));\n        },\n        async function* files(req, resp) {\n          console.log('*files query =', req.url.query);\n          const { filter = '*', root, type = TYPE_DIR | TYPE_REG | TYPE_LNK, limit = '0' } = req.url.query;\n          console.log('*files', { root, filter, type });\n          const [offset = 0, size = Infinity] = limit.split(',').map(n => +n);\n          console.log('*files', { offset, size });\n          let i = 0;\n          let f = Matcher(filter);\n          if(!root) {\n            for(let name of allowedDirs.keys().filter(f)) yield name + '/\\r\\n';\n          } else {\n            for(let [key, value] of allowedDirs.entries().filter(KeyOrValueMatcher(root))) {\n              let dir = new Directory(value, BOTH, +type);\n              yield key + ':\\r\\n';\n              for(let [name, type] of dir.filter(([name, type]) => f(name)))\n                yield name + (+type == TYPE_DIR ? '/' : '') + '\\r\\n';\n            }\n          }\n          console.log('*files', { i, f });\n        },\n        function* files2(req, resp) {\n          let { body, headers, json, url } = req;\n          let { query } = url;\n          define(globalThis, { filesRequest: { req, resp, body, query } });\n          console.log('*files', { req, resp, body, query });\n          const data = query ?? {};\n          resp.type = 'application/json';\n          let {\n            dirs = defaultDirs,\n            filter = '[^.].*' ?? '.(brd|sch|G[A-Z][A-Z])$',\n            verbose = false,\n            objects = true,\n            key = 'mtime',\n            limit = null,\n            flat = false\n          } = data ?? {};\n          let results = [];\n          for(let dir of dirs) {\n            let st,\n              names = [];\n            if(Array.isArray(dir)) {\n              let [, re] = dir;\n              let absdir = path.realpath(dir[0]);\n              names = [...RecursiveDirIterator(absdir, n => re.test(n))];\n              dir = path.relative(absdir, path.getcwd());\n            } else if((st = fs.statSync(dir)) && st.isDirectory()) {\n              let absdir = path.realpath(dir);\n              let components = absdir.split(path.sep);\n              if(components.length && components[0] === '') components.shift();\n              if(components.length < 2 || components[0] != 'home') throw new Error(`Access error`);\n              names = fs.readdirSync(absdir) ?? [];\n              dir = path.relative(absdir, path.getcwd());\n            } else {\n              names = glob(dir, GLOB_BRACE);\n              if(!Array.isArray(names)) names = [];\n              let a = path.toArray(dir);\n              let i = a.findIndex(n => /[*{}]/.test(n));\n              dir = path.slice(dir, 0, i);\n              names = names.map(n => n.slice(dir.length + 1));\n            }\n            if(!Array.isArray(names)) continue;\n            names = names.sort((a, b) => '' + b < '' + a);\n            if(filter) {\n              const re = new RegExp(filter, 'gi');\n              names = names.filter(name => re.test(name));\n            }\n            if(limit) {\n              let [offset = 0] = limit;\n              let [, length = names.length - start] = limit;\n              names = names.slice(offset, offset + length);\n            }\n            let entries = names\n              .map(file => (fs.existsSync(`${dir}/${file}`) ? `${dir}/${file}` : file))\n              .map(file => [file, path.relative(file, path.getcwd())])\n              .map(([file, rel]) => [file, fs.statSync(rel)]);\n            entries = entries.reduce((acc, [file, st]) => {\n              let name = file + (st && st.isDirectory() ? '/' : '');\n              let obj = {\n                name\n              };\n              acc.push([\n                name,\n                Object.assign(\n                  obj,\n                  st\n                    ? {\n                        mtime: toUnixTime(st.mtime),\n                        time: toUnixTime(st.ctime),\n                        mode: `0${(st.mode & 0x09ff).toString(8)}`,\n                        size: st.size\n                      }\n                    : {}\n                )\n              ]);\n              return acc;\n            }, []);\n            if(entries.length) {\n              let cmp = {\n                string(a, b) {\n                  return a[1][key].localeCompare(b[1][key]);\n                },\n                number(a, b) {\n                  return a[1][key] - b[1][key];\n                }\n              }[typeof entries[0][1][key]];\n              entries = entries.sort(cmp);\n            }\n            names = entries.map(([name, obj]) => (objects ? obj : name));\n            if(names.length > 0) {\n              if(flat) names.map(({ name }) => results.push({ name: path.normalize(path.join(dir, name)) }));\n              else results.push({ dir, names });\n            }\n          }\n          yield JSON.stringify(...[results, ...(verbose ? [null, 2] : [])]);\n        }\n      ],\n      ...url,\n\n      ...callbacks,\n      onConnect(ws, req) {\n        console.log('onConnect\\x1b');\n        const { peer, address, port, protocol } = ws;\n\n        console.log('\\x1b[38;5;33monConnect\\x1b[0m', { address, port, protocol });\n\n        ws.sendCommand = function(data) {\n          if(!isArrayBuffer(data) /*&& isObject(data)*/) data = JSON.stringify(data);\n\n          return this.send(data);\n        };\n        if(!ws.uuid) {\n          let data = (ws.uuid = MakeUUID());\n\n          ws.sendCommand({ type: 'uuid', data });\n          by_uuid[data] = ws;\n        }\n        connections.add(ws);\n\n        if(callbacks.onConnect) return callbacks.onConnect(ws, req);\n      },\n      onClose(ws, reason) {\n        connections.delete(ws);\n\n        return callbacks.onClose(ws, reason);\n      },\n      /*      onRead(data) {\n           const req = this;\n          console.log('onRead', { req, data });\n        },*/\n      /* onPost(data) {\n         const req = this;\n          try {\n            req.json = JSON.parse(data);\n          } catch(error) {\n            console.log('onPost', { req, data, error });\n          }\n        },*/\n      onHttp(ws, req, resp) {\n        /* if(req.method != 'GET')*/ //console.log('onHttp', console.config({ compact: 0 }), ws);\n        //   console.log('\\x1b[38;5;220monHttp(1)\\x1b[0m', console.config({ compact: 0 }), { req });\n\n        define(globalThis, { ws, req, resp });\n\n        const { peer, address, port } = ws;\n        const { method, headers } = req;\n\n        //resp.headers['Server'] = 'upload-server';\n        resp.headers = { Server: 'upload-server' };\n        //console.log('onHttp resp.headers', resp.headers, resp.headers['Server']);\n\n        if((req.url.path ?? '').endsWith('files')) {\n          return;\n          //resp.type = 'application/json';\n        } else if(\n          req.method != 'GET' &&\n          (req.headers['content-type'] == 'application/x-www-form-urlencoded' ||\n            (req.headers['content-type'] ?? '').startsWith('multipart/form-data'))\n        ) {\n          let fp,\n            hash,\n            tmpnam,\n            ext,\n            progress = 0;\n          console.log(req.method, headers);\n          if(req.url.path.endsWith('upload')) resp.status = 200;\n          resp.type = 'text/raw';\n\n          fp = new FormParser(ws, ['files', 'uuid'], {\n            chunkSize: 8192 /** 256*/,\n            onOpen(name, filename) {\n              console.log(`onOpen(${name}, ${filename})`);\n              if(this.file) {\n                this.onclose.call(this, name);\n              }\n\n              this.name = name;\n              this.filename = filename;\n              ext = path.extname(filename).toLowerCase();\n\n              this.file = fs.openSync((this.temp = 'uploads/' + (tmpnam = randStr(20) + '.tmp')), 'w+', 0o644);\n              hash = new Hash(Hash.TYPE_SHA1);\n            },\n            onContent(name, data) {\n              // console.log(`onContent(${this.filename})`,data.byteLength);\n              progress += data.byteLength;\n\n              let ws2 = by_uuid[ws.uuid ?? this.uuid];\n\n              fs.writeSync(this.file, data);\n              hash.update(data);\n              if(ws2)\n                ws2.sendCommand({\n                  type: 'progress',\n                  done: progress,\n                  name,\n                  filename: this.filename,\n                  total: +headers['content-length']\n                });\n            },\n\n            onClose(name, file) {\n              try {\n                console.log(`onClose[1](${name}, ${file})`, this.uuid);\n                let exif, cache, sha1;\n                if(hash) {\n                  hash.finalize();\n                  sha1 = hash.toString();\n                }\n                if(this.file) {\n                  fs.closeSync(this.file);\n                  this.file = null;\n                }\n                if(sha1) {\n                  let f = x => 'uploads/' + sha1 + x;\n                  let ret = link(this.temp, f(ext));\n                  let { errno } = error();\n                  let json = f('.json');\n                  if(fs.existsSync(json) && (cache = ReadJSON(json))) {\n                    exif = cache.exif;\n                  } else {\n                    if(!/(png|svg|gif|tga)$/i.test(ext)) {\n                      try {\n                        exif = ReadExiftool(f(ext));\n                      } catch(e) {\n                        try {\n                          exif = ReadExiftool(this.temp);\n                        } catch(e) {}\n                      }\n                    }\n                    let obj = {\n                      filename: this.filename,\n                      storage: f(ext),\n                      uploaded: Date.now(),\n                      address,\n                      exif\n                    };\n                    if(!/jpe?g$/.test(ext)) {\n                      HeifConvert(f(ext), f('.jpg'));\n                      if(fs.existsSync(f('.jpg'))) obj.jpg = f('.jpg');\n                    }\n                    let width = '',\n                      height = '256';\n\n                    if(exif) {\n                      const { ImageSize, ImageHeight, ImageWidth } = exif;\n                      let aspect = ImageWidth / ImageHeight;\n                      if(aspect >= 1) {\n                        width = 256;\n                        height = width / aspect;\n                      } else {\n                        /* height = 256;\n                          width = height * aspect;*/\n                      }\n                    }\n\n                    MagickResize(obj.jpg ?? f(ext), f('.thumb.jpg'), obj.exif?.Rotation ?? 0, width, height);\n\n                    if(fs.existsSync(f('.thumb.jpg'))) obj.thumbnail = f('.thumb.jpg');\n                    WriteJSON(json, obj);\n                    // console.log(`by_uuid`, by_uuid);\n                    console.log(`uuid`, ws.uuid ?? this.uuid);\n                    cache = obj;\n                  }\n                  if(ret == 0 || errno == 17) {\n                    unlink(this.temp);\n                    this.temp = null;\n                  }\n                }\n                const { filename } = this;\n                let ws2 = by_uuid[ws.uuid ?? this.uuid];\n                if(ws2)\n                  ws2.sendCommand({\n                    type: 'upload',\n                    ...(cache ?? {}),\n                    filename,\n                    exif\n                  });\n                //  console.log(`onClose[2](${name}, ${file})`);\n              } catch(e) {\n                console.log(`onClose ERROR:`, e.message);\n              }\n            },\n            onFinalize() {\n              console.log(`onFinalize() form parser`, this.uuid);\n              resp.body = `done: ${progress} bytes read\\r\\n`;\n            }\n          });\n        }\n\n        //throw new Error(`http ${method} request`);\n\n        if(!req.headers || typeof req.headers != 'object') console.log('No headers', req);\n\n        const { body, url } = resp;\n        const { referer } = req.headers;\n\n        let file = url.path.slice(1);\n        const dir = path.dirname(file); //file.replace(/\\/[^\\/]*$/g, '');\n\n        if(file.endsWith('.txt') || file.endsWith('.html') || file.endsWith('.css')) {\n          resp.body = fs.readFileSync(file, 'utf-8');\n        } else if(file.endsWith('.js')) {\n          let file1 = file;\n          if(/qjs-modules\\/lib/.test(file) && !/(dom|util)\\.js/.test(file)) {\n            let file2 = file.replace(/.*qjs-modules\\//g, '');\n            if(fs.existsSync(file2)) {\n              file = file2;\n            }\n          } else if(!fs.existsSync(file)) {\n            for(let dir of ['quickjs/qjs-modules', 'quickjs/qjs-modules/lib', '.', 'lib']) {\n              let file2 = dir + '/' + file;\n              console.log('inexistent file', file, file2, fs.existsSync(file2), referer);\n              if(fs.existsSync(file2)) {\n                file = file2;\n                break;\n              }\n            }\n          }\n\n          if(file1 != file) {\n            //  console.log('\\x1b[38;5;214monHttp\\x1b[0m', file1, '->', file);\n            resp.status = 302;\n            resp.headers = { ['Location']: '/' + file };\n            return resp;\n          }\n          //console.log('\\x1b[38;5;33monHttp\\x1b[0m', file1, file);\n\n          //\n          let body = fs.readFileSync(file, 'utf-8');\n\n          const re = /^(\\s*(im|ex)port[^\\n]*from ['\"])([^./'\"]*)(['\"]\\s*;[\\t ]*\\n?)/gm;\n\n          resp.body = body.replaceAll(re, (match, p1, p0, p2, p3, offset) => {\n            if(!/[\\/\\.]/.test(p2)) {\n              let fname = `${p2}.js`;\n              let rel = path.relative(fname, dir);\n              console.log('onHttp', { match, fname }, rel);\n\n              // if(!fs.existsSync(  rel)) return ``;\n\n              match = [p1, rel, p3].join('');\n\n              console.log('args', {\n                match,\n                p1,\n                p2,\n                p3,\n                offset\n              });\n            }\n            return match;\n          });\n        }\n        {\n          let { body } = resp;\n          //console.log('\\x1b[38;5;212monHttp(2)\\x1b[0m', { body });\n        }\n\n        return resp;\n      },\n      onMessage(ws, data) {\n        console.log('onMessage', ws, data);\n        return callbacks.onMessage(ws, data);\n      },\n      onFd(fd, rd, wr) {\n        return callbacks.onFd(fd, rd, wr);\n      },\n      ...(url && url.host ? url : {})\n    });\n  });\n\n  define(globalThis, {\n    get connections() {\n      return [...connections];\n    },\n    get by_uuid() {\n      return by_uuid;\n    },\n    uuid(data) {\n      return by_uuid[data];\n    }\n  });\n\n  Object.assign(globalThis, {\n    repl,\n    quit,\n    exit: quit,\n    std,\n    os,\n    deep,\n    fs,\n    path,\n    ReadJSON,\n    WriteJSON,\n    ReadFile,\n    WriteFile,\n    ReadBJSON,\n    WriteBJSON,\n    parseDate,\n    dateToObject,\n    Hash,\n    FormParser,\n    ExecTool,\n    Execute,\n    extendGenerator,\n    extendArray,\n    extendAsyncGenerator,\n    Matcher,\n    ExecTool,\n    GetMime,\n    Matcher,\n    KeyOrValueMatcher,\n    GetRootDirectories,\n    GetDir,\n    DirName,\n    DateStr,\n    ModeStr,\n    ReadExiv2,\n    ReadExiftool,\n    HeifConvert,\n    MagickResize,\n    Directory,\n    net: { setLog, LLL_USER, LLL_NOTICE, LLL_WARN, LLL_INFO, client, server, FormParser, Hash, Response, Socket }\n  });\n\n  delete globalThis.DEBUG;\n\n  createWS(\n    { protocol: 'ws', host: '0.0.0.0', port: 8999 },\n    {\n      onFd(fd, rd, wr) {\n        os.setReadHandler(fd, rd);\n        os.setWriteHandler(fd, wr);\n      },\n      onClose(ws, reason) {},\n      onMessage(ws, data) {}\n    },\n    true\n  );\n\n  function quit(why) {\n    console.log(`quit('${why}')`);\n\n    let cfg = { inspectOptions: console.options };\n    WriteJSON(`.${base}-config`, cfg);\n    repl.cleanup(why);\n  }\n\n  repl.runSync();\n}\n\ntry {\n  main(...scriptArgs.slice(1));\n} catch(error) {\n  console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n  1;\n  std.exit(1);\n} finally {\n}\n",
			"file": "upload-server.js",
			"file_size": 34352,
			"file_write_time": 133242956103071418,
			"settings":
			{
				"buffer_size": 34354,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					44,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAIFHAAAAAAAAgkcAAAAAAAAAAAAAgkcAAAAAAACORwAAAAAAAAAAAACORwAAAAAAAI9HAAAAAAAAAAAAAI9HAAAAAAAAm0cAAAAAAAAAAAAAgkcAAAAAAACCRwAAAAAAAAwAAAAgICAgICAgICAgICCPRwAAAAAAAJBHAAAAAAAAAAAAAJBHAAAAAAAAnEcAAAAAAAAAAAAAg0cAAAAAAACDRwAAAAAAAAwAAAAgICAgICAgICAgICA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIFHAAAAAAAAgUcAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAAINHAAAAAAAAhEcAAAAAAAAAAAAAhUcAAAAAAACFRwAAAAAAAAwAAAAgICAgICAgICAgICCERwAAAAAAAIVHAAAAAAAAAAAAAIVHAAAAAAAAhkcAAAAAAAAAAAAAhkcAAAAAAACHRwAAAAAAAAAAAACHRwAAAAAAAIhHAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAINHAAAAAAAAg0cAAAAAAAAAAAAAAABbQA"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIhHAAAAAAAAiUcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIhHAAAAAAAAiEcAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIlHAAAAAAAAi0cAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIlHAAAAAAAAiUcAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "storage,"
					},
					"CAAAAIpHAAAAAAAAi0cAAAAAAAAAAAAAi0cAAAAAAACMRwAAAAAAAAAAAACMRwAAAAAAAI1HAAAAAAAAAAAAAI1HAAAAAAAAjkcAAAAAAAAAAAAAjkcAAAAAAACPRwAAAAAAAAAAAACPRwAAAAAAAJBHAAAAAAAAAAAAAJBHAAAAAAAAkUcAAAAAAAAAAAAAkUcAAAAAAACSRwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIpHAAAAAAAAikcAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "filenmae,"
					},
					"CQAAAJJHAAAAAAAAk0cAAAAAAAAAAAAAk0cAAAAAAACURwAAAAAAAAAAAACURwAAAAAAAJVHAAAAAAAAAAAAAJVHAAAAAAAAlkcAAAAAAAAAAAAAlkcAAAAAAACXRwAAAAAAAAAAAACXRwAAAAAAAJhHAAAAAAAAAAAAAJhHAAAAAAAAmUcAAAAAAAAAAAAAmUcAAAAAAACaRwAAAAAAAAAAAACaRwAAAAAAAJtHAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJJHAAAAAAAAkkcAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					4,
					"left_delete",
					null,
					"BAAAAJpHAAAAAAAAmkcAAAAAAAABAAAALJlHAAAAAAAAmUcAAAAAAAABAAAAZZhHAAAAAAAAmEcAAAAAAAABAAAAYZdHAAAAAAAAl0cAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJtHAAAAAAAAm0cAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "ame,iup"
					},
					"BwAAAJdHAAAAAAAAmEcAAAAAAAAAAAAAmEcAAAAAAACZRwAAAAAAAAAAAACZRwAAAAAAAJpHAAAAAAAAAAAAAJpHAAAAAAAAm0cAAAAAAAAAAAAAm0cAAAAAAACcRwAAAAAAAAAAAACcRwAAAAAAAJ1HAAAAAAAAAAAAAJ1HAAAAAAAAnkcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdHAAAAAAAAl0cAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					3,
					"left_delete",
					null,
					"AwAAAJ1HAAAAAAAAnUcAAAAAAAABAAAAcJxHAAAAAAAAnEcAAAAAAAABAAAAdZtHAAAAAAAAm0cAAAAAAAABAAAAaQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ5HAAAAAAAAnkcAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "uploaded,"
					},
					"CQAAAJtHAAAAAAAAnEcAAAAAAAAAAAAAnEcAAAAAAACdRwAAAAAAAAAAAACdRwAAAAAAAJ5HAAAAAAAAAAAAAJ5HAAAAAAAAn0cAAAAAAAAAAAAAn0cAAAAAAACgRwAAAAAAAAAAAACgRwAAAAAAAKFHAAAAAAAAAAAAAKFHAAAAAAAAokcAAAAAAAAAAAAAokcAAAAAAACjRwAAAAAAAAAAAACjRwAAAAAAAKRHAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJtHAAAAAAAAm0cAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "address,"
					},
					"CAAAAKRHAAAAAAAApUcAAAAAAAAAAAAApUcAAAAAAACmRwAAAAAAAAAAAACmRwAAAAAAAKdHAAAAAAAAAAAAAKdHAAAAAAAAqEcAAAAAAAAAAAAAqEcAAAAAAACpRwAAAAAAAAAAAACpRwAAAAAAAKpHAAAAAAAAAAAAAKpHAAAAAAAAq0cAAAAAAAAAAAAAq0cAAAAAAACsRwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKRHAAAAAAAApEcAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "exif,thumbnail"
					},
					"DgAAAKxHAAAAAAAArUcAAAAAAAAAAAAArUcAAAAAAACuRwAAAAAAAAAAAACuRwAAAAAAAK9HAAAAAAAAAAAAAK9HAAAAAAAAsEcAAAAAAAAAAAAAsEcAAAAAAACxRwAAAAAAAAAAAACxRwAAAAAAALJHAAAAAAAAAAAAALJHAAAAAAAAs0cAAAAAAAAAAAAAs0cAAAAAAAC0RwAAAAAAAAAAAAC0RwAAAAAAALVHAAAAAAAAAAAAALVHAAAAAAAAtkcAAAAAAAAAAAAAtkcAAAAAAAC3RwAAAAAAAAAAAAC3RwAAAAAAALhHAAAAAAAAAAAAALhHAAAAAAAAuUcAAAAAAAAAAAAAuUcAAAAAAAC6RwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKxHAAAAAAAArEcAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "=jsoin;"
					},
					"BwAAALtHAAAAAAAAvEcAAAAAAAAAAAAAvEcAAAAAAAC9RwAAAAAAAAAAAAC9RwAAAAAAAL5HAAAAAAAAAAAAAL5HAAAAAAAAv0cAAAAAAAAAAAAAv0cAAAAAAADARwAAAAAAAAAAAADARwAAAAAAAMFHAAAAAAAAAAAAAMFHAAAAAAAAwkcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALtHAAAAAAAAu0cAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					3,
					"left_delete",
					null,
					"AwAAAMFHAAAAAAAAwUcAAAAAAAABAAAAO8BHAAAAAAAAwEcAAAAAAAABAAAAbr9HAAAAAAAAv0cAAAAAAAABAAAAaQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJHAAAAAAAAwkcAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "n;"
					},
					"AgAAAL9HAAAAAAAAwEcAAAAAAAAAAAAAwEcAAAAAAADBRwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL9HAAAAAAAAv0cAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMFHAAAAAAAAwkcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMFHAAAAAAAAwUcAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "\njson.f"
					},
					"BwAAAMJHAAAAAAAAw0cAAAAAAAAAAAAAw0cAAAAAAADERwAAAAAAAAAAAADERwAAAAAAAMVHAAAAAAAAAAAAAMVHAAAAAAAAxkcAAAAAAAAAAAAAxkcAAAAAAADHRwAAAAAAAAAAAADHRwAAAAAAAMhHAAAAAAAAAAAAAMhHAAAAAAAAyUcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJHAAAAAAAAwkcAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAMhHAAAAAAAAyEcAAAAAAAABAAAAZg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMlHAAAAAAAAyUcAAAAAAAAAAAAAAADwvw"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "size="
					},
					"BQAAAMhHAAAAAAAAyUcAAAAAAAAAAAAAyUcAAAAAAADKRwAAAAAAAAAAAADKRwAAAAAAAMtHAAAAAAAAAAAAAMtHAAAAAAAAzEcAAAAAAAAAAAAAzEcAAAAAAADNRwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMhHAAAAAAAAyEcAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "fs.size"
					},
					"BwAAAM1HAAAAAAAAzkcAAAAAAAAAAAAAzkcAAAAAAADPRwAAAAAAAAAAAADPRwAAAAAAANBHAAAAAAAAAAAAANBHAAAAAAAA0UcAAAAAAAAAAAAA0UcAAAAAAADSRwAAAAAAAAAAAADSRwAAAAAAANNHAAAAAAAAAAAAANNHAAAAAAAA1EcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM1HAAAAAAAAzUcAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "Sync"
					},
					"BAAAANRHAAAAAAAA1UcAAAAAAAAAAAAA1UcAAAAAAADWRwAAAAAAAAAAAADWRwAAAAAAANdHAAAAAAAAAAAAANdHAAAAAAAA2EcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANRHAAAAAAAA1EcAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANhHAAAAAAAA2kcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANhHAAAAAAAA2EcAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "storage"
					},
					"BwAAANlHAAAAAAAA2kcAAAAAAAAAAAAA2kcAAAAAAADbRwAAAAAAAAAAAADbRwAAAAAAANxHAAAAAAAAAAAAANxHAAAAAAAA3UcAAAAAAAAAAAAA3UcAAAAAAADeRwAAAAAAAAAAAADeRwAAAAAAAN9HAAAAAAAAAAAAAN9HAAAAAAAA4EcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANlHAAAAAAAA2UcAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOFHAAAAAAAA4kcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOFHAAAAAAAA4UcAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAM9jAAAAAAAA0GMAAAAAAAAAAAAA0GMAAAAAAADYYwAAAAAAAAAAAADYYwAAAAAAANljAAAAAAAAAAAAANljAAAAAAAA4WMAAAAAAAAAAAAA0GMAAAAAAADQYwAAAAAAAAgAAAAgICAgICAgIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPYwAAAAAAAM9jAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"paste",
					null,
					"AQAAANljAAAAAAAAE2QAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZYwAAAAAAANljAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " resp.head"
					},
					"CgAAAO5jAAAAAAAA72MAAAAAAAAAAAAA72MAAAAAAADwYwAAAAAAAAAAAADwYwAAAAAAAPFjAAAAAAAAAAAAAPFjAAAAAAAA8mMAAAAAAAAAAAAA8mMAAAAAAADzYwAAAAAAAAAAAADzYwAAAAAAAPRjAAAAAAAAAAAAAPRjAAAAAAAA9WMAAAAAAAAAAAAA9WMAAAAAAAD2YwAAAAAAAAAAAAD2YwAAAAAAAPdjAAAAAAAAAAAAAPdjAAAAAAAA+GMAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuYwAAAAAAAO5jAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "ers"
					},
					"AwAAAPhjAAAAAAAA+WMAAAAAAAAAAAAA+WMAAAAAAAD6YwAAAAAAAAAAAAD6YwAAAAAAAPtjAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4YwAAAAAAAPhjAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"cut",
					null,
					"AQAAAPtjAAAAAAAA+2MAAAAAAAAjAAAAIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogMCB9KSwgd3M",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7YwAAAAAAAB5kAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOtjAAAAAAAA7GMAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrYwAAAAAAAOtjAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"left_delete",
					null,
					"AQAAAOtjAAAAAAAA62MAAAAAAAABAAAAIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsYwAAAAAAAOxjAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOxjAAAAAAAA7WMAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsYwAAAAAAAOxjAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"paste",
					null,
					"AQAAAO1jAAAAAAAA+WMAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtYwAAAAAAAO1jAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "\nresp.headers"
					},
					"DgAAAApkAAAAAAAAC2QAAAAAAAAAAAAAC2QAAAAAAAATZAAAAAAAAAAAAAATZAAAAAAAABRkAAAAAAAAAAAAABRkAAAAAAAAFWQAAAAAAAAAAAAAFWQAAAAAAAAWZAAAAAAAAAAAAAAWZAAAAAAAABdkAAAAAAAAAAAAABdkAAAAAAAAGGQAAAAAAAAAAAAAGGQAAAAAAAAZZAAAAAAAAAAAAAAZZAAAAAAAABpkAAAAAAAAAAAAABpkAAAAAAAAG2QAAAAAAAAAAAAAG2QAAAAAAAAcZAAAAAAAAAAAAAAcZAAAAAAAAB1kAAAAAAAAAAAAAB1kAAAAAAAAHmQAAAAAAAAAAAAAHmQAAAAAAAAfZAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKZAAAAAAAAApkAAAAAAAA////////738"
				],
				[
					87,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAB9kAAAAAAAAIWQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfZAAAAAAAAB9kAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACBkAAAAAAAAImQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgZAAAAAAAACBkAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "Server"
					},
					"BgAAACFkAAAAAAAAImQAAAAAAAAAAAAAImQAAAAAAAAjZAAAAAAAAAAAAAAjZAAAAAAAACRkAAAAAAAAAAAAACRkAAAAAAAAJWQAAAAAAAAAAAAAJWQAAAAAAAAmZAAAAAAAAAAAAAAmZAAAAAAAACdkAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhZAAAAAAAACFkAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAClkAAAAAAAAKmQAAAAAAAAAAAAAKmQAAAAAAAArZAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApZAAAAAAAAClkAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACtkAAAAAAAALGQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArZAAAAAAAACtkAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACxkAAAAAAAALmQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsZAAAAAAAACxkAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAC1kAAAAAAAALmQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtZAAAAAAAAC1kAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"left_delete",
					null,
					"AQAAAC1kAAAAAAAALWQAAAAAAAABAAAAMA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuZAAAAAAAAC5kAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "uzp"
					},
					"AwAAAC1kAAAAAAAALmQAAAAAAAAAAAAALmQAAAAAAAAvZAAAAAAAAAAAAAAvZAAAAAAAADBkAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtZAAAAAAAAC1kAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					2,
					"left_delete",
					null,
					"AgAAAC9kAAAAAAAAL2QAAAAAAAABAAAAcC5kAAAAAAAALmQAAAAAAAABAAAAeg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwZAAAAAAAADBkAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "pload-server"
					},
					"DAAAAC5kAAAAAAAAL2QAAAAAAAAAAAAAL2QAAAAAAAAwZAAAAAAAAAAAAAAwZAAAAAAAADFkAAAAAAAAAAAAADFkAAAAAAAAMmQAAAAAAAAAAAAAMmQAAAAAAAAzZAAAAAAAAAAAAAAzZAAAAAAAADRkAAAAAAAAAAAAADRkAAAAAAAANWQAAAAAAAAAAAAANWQAAAAAAAA2ZAAAAAAAAAAAAAA2ZAAAAAAAADdkAAAAAAAAAAAAADdkAAAAAAAAOGQAAAAAAAAAAAAAOGQAAAAAAAA5ZAAAAAAAAAAAAAA5ZAAAAAAAADpkAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuZAAAAAAAAC5kAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADtkAAAAAAAAPGQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7ZAAAAAAAADtkAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"cut",
					null,
					"AQAAAAtkAAAAAAAAC2QAAAAAAAAyAAAAICAgICAgICByZXNwLmhlYWRlcnNbJ1NlcnZlciddID0gJ3VwbG9hZC1zZXJ2ZXInOwo",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALZAAAAAAAAD1kAAAAAAAAAAAAAAAAAAA"
				],
				[
					110,
					1,
					"paste",
					null,
					"AQAAANFjAAAAAAAAA2QAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRYwAAAAAAANFjAAAAAAAAAAAAAAAAAAA"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADpkAAAAAAAAO2QAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6ZAAAAAAAADpkAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " resplhewad"
					},
					"CwAAADtkAAAAAAAAPGQAAAAAAAAAAAAAPGQAAAAAAAA9ZAAAAAAAAAAAAAA9ZAAAAAAAAD5kAAAAAAAAAAAAAD5kAAAAAAAAP2QAAAAAAAAAAAAAP2QAAAAAAABAZAAAAAAAAAAAAABAZAAAAAAAAEFkAAAAAAAAAAAAAEFkAAAAAAAAQmQAAAAAAAAAAAAAQmQAAAAAAABDZAAAAAAAAAAAAABDZAAAAAAAAERkAAAAAAAAAAAAAERkAAAAAAAARWQAAAAAAAAAAAAARWQAAAAAAABGZAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7ZAAAAAAAADtkAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					6,
					"left_delete",
					null,
					"BgAAAEVkAAAAAAAARWQAAAAAAAABAAAAZERkAAAAAAAARGQAAAAAAAABAAAAYUNkAAAAAAAAQ2QAAAAAAAABAAAAd0JkAAAAAAAAQmQAAAAAAAABAAAAZUFkAAAAAAAAQWQAAAAAAAABAAAAaEBkAAAAAAAAQGQAAAAAAAABAAAAbA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGZAAAAAAAAEZkAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": ".hew3ad"
					},
					"BwAAAEBkAAAAAAAAQWQAAAAAAAAAAAAAQWQAAAAAAABCZAAAAAAAAAAAAABCZAAAAAAAAENkAAAAAAAAAAAAAENkAAAAAAAARGQAAAAAAAAAAAAARGQAAAAAAABFZAAAAAAAAAAAAABFZAAAAAAAAEZkAAAAAAAAAAAAAEZkAAAAAAAAR2QAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAZAAAAAAAAEBkAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					4,
					"left_delete",
					null,
					"BAAAAEZkAAAAAAAARmQAAAAAAAABAAAAZEVkAAAAAAAARWQAAAAAAAABAAAAYURkAAAAAAAARGQAAAAAAAABAAAAM0NkAAAAAAAAQ2QAAAAAAAABAAAAdw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHZAAAAAAAAEdkAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "aders"
					},
					"BQAAAENkAAAAAAAARGQAAAAAAAAAAAAARGQAAAAAAABFZAAAAAAAAAAAAABFZAAAAAAAAEZkAAAAAAAAAAAAAEZkAAAAAAAAR2QAAAAAAAAAAAAAR2QAAAAAAABIZAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDZAAAAAAAAENkAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEhkAAAAAAAASmQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIZAAAAAAAAEhkAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAElkAAAAAAAAS2QAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJZAAAAAAAAElkAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "Server"
					},
					"BgAAAEpkAAAAAAAAS2QAAAAAAAAAAAAAS2QAAAAAAABMZAAAAAAAAAAAAABMZAAAAAAAAE1kAAAAAAAAAAAAAE1kAAAAAAAATmQAAAAAAAAAAAAATmQAAAAAAABPZAAAAAAAAAAAAABPZAAAAAAAAFBkAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKZAAAAAAAAEpkAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"cut",
					null,
					"AQAAANFjAAAAAAAA0WMAAAAAAAAyAAAAICAgICAgICByZXNwLmhlYWRlcnNbJ1NlcnZlciddID0gJ3VwbG9hZC1zZXJ2ZXInOwo",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRYwAAAAAAAANkAAAAAAAAAAAAAAAAAAA"
				],
				[
					150,
					2,
					"paste",
					null,
					"AgAAANFjAAAAAAAAA2QAAAAAAAAAAAAAA2QAAAAAAAA1ZAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRYwAAAAAAANFjAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAABdkAAAAAAAAGGQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXZAAAAAAAABdkAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " {"
					},
					"AgAAABhkAAAAAAAAGWQAAAAAAAAAAAAAGWQAAAAAAAAaZAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYZAAAAAAAABhkAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABpkAAAAAAAAG2QAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaZAAAAAAAABpkAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					2,
					"left_delete",
					null,
					"AgAAABxkAAAAAAAAHGQAAAAAAAABAAAAJxtkAAAAAAAAG2QAAAAAAAABAAAAWw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdZAAAAAAAAB1kAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					4,
					"right_delete",
					null,
					"BAAAACJkAAAAAAAAImQAAAAAAAABAAAAXSJkAAAAAAAAImQAAAAAAAABAAAAICJkAAAAAAAAImQAAAAAAAABAAAAPSJkAAAAAAAAImQAAAAAAAABAAAAIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiZAAAAAAAACJkAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"left_delete",
					null,
					"AQAAACFkAAAAAAAAIWQAAAAAAAABAAAAJw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiZAAAAAAAACJkAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAACFkAAAAAAAAImQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhZAAAAAAAACFkAAAAAAAAAAAAAAAA8L8"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACJkAAAAAAAAI2QAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiZAAAAAAAACJkAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAADJkAAAAAAAAM2QAAAAAAAAAAAAAM2QAAAAAAAA0ZAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyZAAAAAAAADJkAAAAAAAAAAAAAAAA8L8"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAH1JAAAAAAAAfkkAAAAAAAAAAAAAfkkAAAAAAACCSQAAAAAAAAAAAACCSQAAAAAAAIJJAAAAAAAAAgEAACAgICAgIC8qaWYocmVxLmJvZHkpIHsKICAgICAgICAgICBsZXQgY2h1bmtzID0gW107CiAgICAgICAgICAgIGNvbnN0IHsgYm9keSB9ID0gcmVxOwogICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnKmZpbGVzIGF3YWl0IHJlcS5hcnJheUJ1ZmZlcigpJywgYXdhaXQgcmVxLmFycmF5QnVmZmVyKCkpOwogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCcqZmlsZXMgYXdhaXQgcmVxLnRleHQoKScsIGF3YWl0IHJlcS50ZXh0KCkpOwogICAgICAgICAgfSovCg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9SQAAAAAAAH9KAAAAAAAAAAAAAAAA8L8"
				],
				[
					201,
					1,
					"left_delete",
					null,
					"AQAAABNJAAAAAAAAE0kAAAAAAAAuAAAAICAgICAgICAgIC8vY29uc29sZS5sb2coJypmaWxlcycse3JlcSxyZXNwfSk7Cg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATSQAAAAAAAEFJAAAAAAAAAAAAAAAA8L8"
				],
				[
					210,
					1,
					"left_delete",
					null,
					"AQAAALhKAAAAAAAAuEoAAAAAAAAuAAAAICAgICAgICAgIC8qICBsZXQgZ2VuID0gKGZ1bmN0aW9uKiBpdGVyKCkgeyovCg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4SgAAAAAAAOZKAAAAAAAAAAAAAAAA8L8"
				],
				[
					215,
					1,
					"left_delete",
					null,
					"AQAAAMhMAAAAAAAAyEwAAAAAAACLAAAAICAgICAgICAvKiB9KSgpOwogICAgICAgICAgICBjb25zb2xlLmxvZygnKmZpbGVzJywgeyBpLGYsZ2VuIH0pOwoKICAgICAgICAgICAgeWllbGQqIGdlbi5yYW5nZShvZmZzZXQsIHNpemUpOyovCgogICAgICAgICAgLy95aWVsZCAnXHJcbic7Cg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADITAAAAAAAAFNNAAAAAAAAAAAAAAAA8L8"
				],
				[
					218,
					2,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AgAAACZJAAAAAAAAgkwAAAAAAABoAwAAb2coJypmaWxlcyBxdWVyeSA9JywgcmVxLnVybC5xdWVyeSk7CiAgICAKICAgICAgICAgICAgICBjb25zdCB7IGZpbHRlciA9ICcqJywgcm9vdCwgdHlwZSA9IFRZUEVfRElSIHwgVFlQRV9SRUcgfCBUWVBFX0xOSywgbGltaXQgPSAnMCcgfSA9IHJlcS51cmwucXVlcnk7CgogICAgICAgICAgY29uc29sZS5sb2coJypmaWxlcycsIHsgcm9vdCwgZmlsdGVyLCB0eXBlIH0pOwoKICAgICAgICAgIGNvbnN0IFtvZmZzZXQgPSAwLCBzaXplID0gSW5maW5pdHldID0gbGltaXQuc3BsaXQoJywnKS5tYXAobiA9PiArbik7CgogICAgICAgICAgY29uc29sZS5sb2coJypmaWxlcycsIHsgb2Zmc2V0LCBzaXplIH0pOwoKICAgICAgICAgIGxldCBpID0gMDsKICAgICAgICAgIGxldCBmID0gTWF0Y2hlcihmaWx0ZXIpOwoKICAgICAgICAgIGlmKCFyb290KSB7CiAgICAgICAgICAgIGZvcihsZXQgbmFtZSBvZiBhbGxvd2VkRGlycy5rZXlzKCkuZmlsdGVyKGYpKSB5aWVsZCBuYW1lICsgJy9cclxuJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvcihsZXQgW2tleSwgdmFsdWVdIG9mIGFsbG93ZWREaXJzLmVudHJpZXMoKS5maWx0ZXIoS2V5T3JWYWx1ZU1hdGNoZXIocm9vdCkpKSB7CiAgICAgICAgICAgICAgbGV0IGRpciA9IG5ldyBEaXJlY3RvcnkodmFsdWUsIEJPVEgsICt0eXBlKTsKCiAgICAgICAgICAgICAgeWllbGQga2V5ICsgJzpcclxuJzsKCiAgICAgICAgICAgICAgZm9yKGxldCBbbmFtZSwgdHlwZV0gb2YgZGlyLmZpbHRlcigoW25hbWUsIHR5cGVdKSA9PiBmKG5hbWUpKSkKICAgICAgICAgICAgICAgIHlpZWxkIG5hbWUgKyAoK3R5cGUgPT0gVFlQRV9ESVIgPyAnLycgOiAnJykgKyAnXHJcbic7CiAgICAgICAgICAgIH0mSQAAAAAAAIJMAAAAAAAAXAMAAG9nKCcqZmlsZXMgcXVlcnkgPScsIHJlcS51cmwucXVlcnkpOwogICAgICAgICAgICAgIGNvbnN0IHsgZmlsdGVyID0gJyonLCByb290LCB0eXBlID0gVFlQRV9ESVIgfCBUWVBFX1JFRyB8IFRZUEVfTE5LLCBsaW1pdCA9ICcwJyB9ID0gcmVxLnVybC5xdWVyeTsKICAgICAgICAgIGNvbnNvbGUubG9nKCcqZmlsZXMnLCB7IHJvb3QsIGZpbHRlciwgdHlwZSB9KTsKICAgICAgICAgIGNvbnN0IFtvZmZzZXQgPSAwLCBzaXplID0gSW5maW5pdHldID0gbGltaXQuc3BsaXQoJywnKS5tYXAobiA9PiArbik7CiAgICAgICAgICBjb25zb2xlLmxvZygnKmZpbGVzJywgeyBvZmZzZXQsIHNpemUgfSk7CiAgICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgICBsZXQgZiA9IE1hdGNoZXIoZmlsdGVyKTsKICAgICAgICAgIGlmKCFyb290KSB7CiAgICAgICAgICAgIGZvcihsZXQgbmFtZSBvZiBhbGxvd2VkRGlycy5rZXlzKCkuZmlsdGVyKGYpKSB5aWVsZCBuYW1lICsgJy9cclxuJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvcihsZXQgW2tleSwgdmFsdWVdIG9mIGFsbG93ZWREaXJzLmVudHJpZXMoKS5maWx0ZXIoS2V5T3JWYWx1ZU1hdGNoZXIocm9vdCkpKSB7CiAgICAgICAgICAgICAgbGV0IGRpciA9IG5ldyBEaXJlY3RvcnkodmFsdWUsIEJPVEgsICt0eXBlKTsKICAgICAgICAgICAgICB5aWVsZCBrZXkgKyAnOlxyXG4nOwogICAgICAgICAgICAgIGZvcihsZXQgW25hbWUsIHR5cGVdIG9mIGRpci5maWx0ZXIoKFtuYW1lLCB0eXBlXSkgPT4gZihuYW1lKSkpCiAgICAgICAgICAgICAgICB5aWVsZCBuYW1lICsgKCt0eXBlID09IFRZUEVfRElSID8gJy8nIDogJycpICsgJ1xyXG4nOwogICAgICAgICAgICB9",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmSQAAAAAAAI5MAAAAAAAAAAAAAAAA8L8"
				],
				[
					225,
					2,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AgAAAPlFAAAAAAAAJEgAAAAAAAAzAgAACiAgICAgICAgICBjb25zdCB7IGxpbWl0ID0gJzAsMTAwJywgcHJldHR5ID0gMCB9ID0gcmVxLnVybC5xdWVyeSA/PyB7fTsKCiAgICAgICAgICBsZXQgW3N0YXJ0LCBlbmRdID0gbGltaXQuc3BsaXQoLywvZykubWFwKHMgPT4gK3MpOwoKICAgICAgICAgIGNvbnNvbGUubG9nKCd1cGxvYWRzJywgeyBzdGFydCwgZW5kIH0pOwoKICAgICAgICAgIGxldCByZXN1bHQgPSBbXSwKICAgICAgICAgICAgZW50cmllcyA9IGdsb2IoJ3VwbG9hZHMvKi5qc29uJyk7CgogICAgICAgICAgZm9yKGxldCBlbnRyeSBvZiAoQXJyYXkuaXNBcnJheShlbnRyaWVzKSA/IGVudHJpZXMgOiBbXSkuc2xpY2Uoc3RhcnQsIGVuZCkpIHsKICAgICAgICAgICAgbGV0IGpzb24gPSBSZWFkSlNPTihlbnRyeSk7CgogICAgICAgICAgICBjb25zdCB7IHN0b3JhZ2UsIGZpbGVuYW1lLCB1cGxvYWRlZCwgYWRkcmVzcywgZXhpZiwgdGh1bWJuYWlsIH0gPSBqc29uOwoKICAgICAgICAgICAganNvbi5zaXplID0gZnMuc2l6ZVN5bmMoc3RvcmFnZSk7CgogICAgICAgICAgICByZXN1bHQucHVzaChqc29uKTsKICAgICAgICAgIH35RQAAAAAAACRIAAAAAAAAKwIAACAgICAgICAgICBjb25zdCB7IGxpbWl0ID0gJzAsMTAwJywgcHJldHR5ID0gMCB9ID0gcmVxLnVybC5xdWVyeSA/PyB7fTsKICAgICAgICAgIGxldCBbc3RhcnQsIGVuZF0gPSBsaW1pdC5zcGxpdCgvLC9nKS5tYXAocyA9PiArcyk7CiAgICAgICAgICBjb25zb2xlLmxvZygndXBsb2FkcycsIHsgc3RhcnQsIGVuZCB9KTsKICAgICAgICAgIGxldCByZXN1bHQgPSBbXSwKICAgICAgICAgICAgZW50cmllcyA9IGdsb2IoJ3VwbG9hZHMvKi5qc29uJyk7CiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIChBcnJheS5pc0FycmF5KGVudHJpZXMpID8gZW50cmllcyA6IFtdKS5zbGljZShzdGFydCwgZW5kKSkgewogICAgICAgICAgICBsZXQganNvbiA9IFJlYWRKU09OKGVudHJ5KTsKICAgICAgICAgICAgY29uc3QgeyBzdG9yYWdlLCBmaWxlbmFtZSwgdXBsb2FkZWQsIGFkZHJlc3MsIGV4aWYsIHRodW1ibmFpbCB9ID0ganNvbjsKICAgICAgICAgICAganNvbi5zaXplID0gZnMuc2l6ZVN5bmMoc3RvcmFnZSk7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGpzb24pOwogICAgICAgICAgfQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5RQAAAAAAACxIAAAAAAAAAAAAAAAA8L8"
				],
				[
					242,
					3,
					"right_delete",
					null,
					"AwAAANBCAAAAAAAA0EIAAAAAAAABAAAACtBCAAAAAAAA0EIAAAAAAAABAAAAINBCAAAAAAAA0EIAAAAAAAABAAAAIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQQgAAAAAAANBCAAAAAAAAAAAAAAAA8L8"
				],
				[
					244,
					19,
					"right_delete",
					null,
					"EwAAABJDAAAAAAAAEkMAAAAAAAABAAAAChJDAAAAAAAAEkMAAAAAAAABAAAAChJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIBJDAAAAAAAAEkMAAAAAAAABAAAAIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASQwAAAAAAABJDAAAAAAAAAAAAAABAbUA"
				],
				[
					245,
					1,
					"right_delete",
					null,
					"AQAAABJDAAAAAAAAEkMAAAAAAAABAAAAIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASQwAAAAAAABJDAAAAAAAAAAAAAAAA8L8"
				],
				[
					249,
					1,
					"left_delete",
					null,
					"AQAAANpCAAAAAAAA2kIAAAAAAAAEAAAAICAgIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeQgAAAAAAANpCAAAAAAAAAAAAAAAAAAA"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAANpCAAAAAAAA20IAAAAAAAAAAAAA20IAAAAAAADcQgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaQgAAAAAAANpCAAAAAAAAAAAAAAAA8L8"
				],
				[
					254,
					2,
					"left_delete",
					null,
					"AgAAAA1DAAAAAAAADUMAAAAAAAACAAAAICAMQwAAAAAAAAxDAAAAAAAAAQAAAAo",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPQwAAAAAAAA9DAAAAAAAAAAAAAAAA8L8"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAAxDAAAAAAAADUMAAAAAAAAAAAAADUMAAAAAAAAPQwAAAAAAAAAAAAANQwAAAAAAAA1DAAAAAAAAAgAAACAgDUMAAAAAAAANQwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMQwAAAAAAAAxDAAAAAAAAAAAAAAAA8L8"
				],
				[
					256,
					1,
					"left_delete",
					null,
					"AQAAAAxDAAAAAAAADEMAAAAAAAABAAAACg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANQwAAAAAAAA1DAAAAAAAAAAAAAAAA8L8"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAxDAAAAAAAADUMAAAAAAAAAAAAADUMAAAAAAAAPQwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMQwAAAAAAAAxDAAAAAAAAAAAAAAAA8L8"
				],
				[
					258,
					1,
					"left_delete",
					null,
					"AQAAAA1DAAAAAAAADUMAAAAAAAACAAAAICA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPQwAAAAAAAA9DAAAAAAAAAAAAAAAA8L8"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAG43AAAAAAAAbzcAAAAAAAAAAAAAbzcAAAAAAABvNwAAAAAAAIEAAAAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXEuYm9keScsIHJlcS5ib2R5KTsKICAgICAgICAgICAgLy8gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXEuYm9keS5uZXh0KCknLCBhd2FpdCByZXEuYm9keS5uZXh0KCkpOwo",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuNwAAAAAAAO83AAAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					3,
					"left_delete",
					null,
					"AwAAAG03AAAAAAAAbTcAAAAAAAACAAAAICBrNwAAAAAAAGs3AAAAAAAAAgAAACAgajcAAAAAAABqNwAAAAAAAAEAAAAK",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvNwAAAAAAAG83AAAAAAAAAAAAAAAA8L8"
				],
				[
					275,
					1,
					"revert",
					null,
					"",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLOQAAAAAAAIs5AAAAAAAAAAAAAABAdEA"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKFhAAAAAAAAomEAAAAAAAAAAAAAomEAAAAAAACjYQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChYQAAAAAAAKFhAAAAAAAAAAAAAAAA8L8"
				],
				[
					312,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADthAAAAAAAAPGEAAAAAAAAAAAAAPGEAAAAAAAA9YQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7YQAAAAAAADthAAAAAAAAAAAAAAAA8L8"
				],
				[
					359,
					1,
					"cut",
					null,
					"AQAAAEsIAAAAAAAASwgAAAAAAAAUAAAAXChbMTIzXVwpLip3cml0YWJsZXw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLCAAAAAAAAF8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					360,
					1,
					"paste",
					null,
					"AQAAAEsIAAAAAAAAXwgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLCAAAAAAAAEsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					362,
					1,
					"insert",
					{
						"characters": "XX"
					},
					"AgAAAEoIAAAAAAAASwgAAAAAAAAAAAAASwgAAAAAAABMCAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKCAAAAAAAAEoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"insert",
					{
						"characters": "bl"
					},
					"AgAAAEwIAAAAAAAATQgAAAAAAAAAAAAATQgAAAAAAABOCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATAgAAAAAAABMCAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjscalc.js",
			"redo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAPqmAAAAAAAA+qYAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAA/KYAAAAAAAD8pgAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 58533,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					341,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGitAAAAAAAAbK0AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "quickjs/quickjs.c",
			"settings":
			{
				"buffer_size": 1774447,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Project: Edit Project"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/getModuleProps.js",
		"/home/roman/Projects/plot-cv/test-operators.js",
		"/home/roman/Projects/plot-cv/data/test-websocket.functions.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/lib/alea.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/usr/include/sqlite3.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/test-sqlite3.js",
		"/home/roman/Projects/plot-cv/sqlite3.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/mysql_system_tables.sql",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/fill_help_tables.sql",
		"/home/roman/Projects/plot-cv/quickjs/run-test262.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build-libwebsockets.sh",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/build.ninja",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-schematic.svg",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-board.svg",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/dsp/util.js",
		"/home/roman/Projects/plot-cv/Zeichnung.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/svg/ZoomRedraw.svg",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/elementProxy.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wirePath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/quickjs/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/lib/container/spatial-hash.js",
		"/home/roman/Projects/plot-cv/lib/container/Hash-Multimap.js",
		"/home/roman/Projects/plot-cv/lib/container/componentMap.js",
		"/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util-w-2.diff",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/new.diff",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/lib/delegate.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/package.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/origin.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/board.js",
		"/home/roman/Projects/plot-cv/lib/json/pathMapper.js",
		"/home/roman/Projects/plot-cv/eagle-query.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Dokumente/Electronics/example.circuit",
		"/home/roman/Projects/plot-cv/circuit.js",
		"/home/roman/Projects/pictest/eagle/OpenProg-18F2550.brd",
		"/home/roman/Projects/plot-cv/OpenProg-18F2550.circuit",
		"/home/roman/Projects/plot-cv/read.hex",
		"/home/roman/Projects/plot-cv/test-bitset.js",
		"/home/roman/Projects/plot-cv/example.circuit",
		"/home/roman/Projects/plot-cv/test-circuit.js",
		"/home/roman/Projects/plot-cv/OProg-18F2550.hex",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/lib/async/websocket.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/eagle2gerber.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/svg-crop-pad.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/plugins/mirror.c",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/lib/stream/utils.js",
		"/home/roman/Projects/plot-cv/string-helpers.js",
		"/home/roman/Projects/plot-cv/bjson.js",
		"/home/roman/Projects/plot-cv/openlayers/examples/wms-tiled-wrap-180.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/lib/iterator/helpers.js"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js,-*/build/*,-*/inst/*",
			"<open files>,/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"mounts",
			"\"qjscalc",
			"bignum_ext",
			"JS_EnableBignumExt",
			"Matrix =",
			"Matrix",
			"operators_set",
			"resp.headers",
			"onHttp",
			"path\\.relative",
			"Alea.singleton",
			"singleton",
			"RootStore.loadItems",
			"\\.load",
			"action=",
			"action=lo",
			"'uploads'",
			"'uploads",
			"uploads'",
			"create table",
			"path",
			"pathj",
			"path",
			"pr\\[",
			"'pr",
			"isNative",
			"is[A-Za-z]*Function",
			"is.*Function",
			"returnType",
			"FunctionDecl",
			", js_value_typestr(ctx, stack)",
			"stack",
			"error_prin",
			"str",
			"error_prin",
			"jsm_dump",
			"print_err",
			"js_load_file",
			"js_eval_file",
			"generateDoc",
			"exp",
			"MakeFFI",
			"function.*FFI",
			"PROMISE_REJE",
			"JS_GetBigInt",
			"cur_func = fd",
			"goto except",
			"JS_FreeValue.*m->module",
			"js_dynamic_import_reject\\(",
			"JS_MarkValue.*module_ns",
			"_call2\\(",
			"call2",
			"js_evaluate_module",
			"js_evaluate_moduel",
			"NewClass1",
			"emit_op\\(s, OP_ret",
			"has_ex",
			"clean:",
			"eval_has",
			"eval_has_ex",
			"\\(JS_IsEx",
			"JS_IsEx",
			"JSPromiseFunctionDataResolved",
			"emit_op.*OP_return_undef",
			"OP_return_undef",
			"eval_has_ex",
			"module_ns",
			"module_nas",
			"struct JSModuleDef",
			"JSModuleDef",
			"3\\.1\\.0",
			"\\.\\.\\/",
			"range",
			"range =",
			"Tracked",
			"'kind'",
			"kind",
			"'kind'",
			"map\\(",
			"roundTo",
			"R",
			"R2",
			"parentRot",
			"log",
			"const",
			"TransformationList",
			"rot=\"M",
			"transformation",
			"vec",
			"transform",
			"R2<",
			"R2",
			"children.push(\n      h('circle', {\n        class: 'pin-x',\n        stroke: '#ff00ff',\n        fill: 'none',\n        cx: tp.x,\n        cy: tp.y,\n        r: 0.5,\n        'stroke-width': 0.1\n      })\n    );\n    children.push(\n      h('circle', {\n        class: 'pin-y',\n        stroke: '#4219ff',\n        opacity: 0.8,\n        fill: 'none',\n        cx: x,\n        cy: y,\n        r: 0.75,\n        'stroke-width': 0.1\n      })\n    );",
			"IC1<",
			"font-size:",
			"console\\.",
			");\n",
			"<pin",
			"transform",
			"tp =",
			"IC1\"",
			"IC1",
			"name",
			"555_ALT",
			"IC1\"",
			"IC1",
			"Fragment",
			")]));",
			"'SVGRenderer",
			"Renderer\\.render",
			"\\.render",
			"svg\\(",
			"elem",
			"555_ALT3",
			"IC1\"",
			"isNumeric.*parseFloat",
			"indexOf",
			"'value'",
			"'element'",
			"'element'w",
			"'element'",
			"'value'",
			"get value",
			"D1\"",
			"renderItem",
			"renderItem'",
			"round =",
			"roundTo ="
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"3.0.2",
			"$srcdir/",
			"",
			"'EagleSVGRenderer",
			"this.debug",
			"\\1//console.",
			"isFunction(\\1)",
			"",
			"\\1",
			"is",
			"define",
			"!isString(\\1)",
			"!isFunction(\\1)",
			"isObject(\\1)",
			"isFunction(\\1)",
			"diff --git a/lib/util.js b/lib/util.js\nindex ab76720..001e53e 100644\n--- a/lib/util.js\n+++ b/lib/util.js\n@@",
			"function \\1(\\2) {",
			"function \\1(\\2)",
			"!isString(\\1)",
			"types.isBigInt(\\1)",
			"!isObject(\\1)",
			"isSymbol(\\1)",
			"isString(\\1)",
			"isObject(\\1)",
			"isNumber(\\1)",
			"!isFunction(\\1)",
			"!isString(\\1)",
			"isNumber(\\1)",
			"isString(\\1)",
			"isObject(\\1)",
			"isFunction(\\1)",
			"",
			"^\\1//this.debug",
			"'./components",
			"}\\n\\n\\1",
			"this.circuit",
			"",
			"\\1//console",
			"packageToPosMap",
			"(this.parse",
			"line",
			"maxDepthOrPred",
			"define",
			"isObject",
			"\\1//\\2",
			""
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3680,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
							"function_name_status_row": 24,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1289,
									1306
								],
								[
									1447,
									1479
								],
								[
									2128,
									2171
								],
								[
									2976,
									3004
								],
								[
									4118,
									4152
								],
								[
									4715,
									4740
								],
								[
									5521,
									5533
								],
								[
									5704,
									5713
								],
								[
									5835,
									5842
								],
								[
									5929,
									5939
								],
								[
									6145,
									6157
								],
								[
									6551,
									6564
								],
								[
									6965,
									6978
								],
								[
									7460,
									7472
								],
								[
									7652,
									7661
								],
								[
									8389,
									8396
								],
								[
									8414,
									8423
								],
								[
									8460,
									8467
								],
								[
									8507,
									8512
								],
								[
									8586,
									8592
								],
								[
									8625,
									8630
								],
								[
									8702,
									8707
								],
								[
									8786,
									8791
								],
								[
									8894,
									8928
								],
								[
									9563,
									9571
								],
								[
									9640,
									9669
								],
								[
									9796,
									9825
								],
								[
									9952,
									9981
								],
								[
									10092,
									10121
								],
								[
									10232,
									10261
								],
								[
									10387,
									10415
								],
								[
									10558,
									10586
								],
								[
									10721,
									10747
								],
								[
									10786,
									10812
								],
								[
									10851,
									10877
								],
								[
									10916,
									10942
								],
								[
									10981,
									11007
								],
								[
									11046,
									11072
								],
								[
									11112,
									11137
								],
								[
									11252,
									11277
								],
								[
									11498,
									11506
								],
								[
									11729,
									11735
								],
								[
									11771,
									11777
								],
								[
									12433,
									12449
								],
								[
									12580,
									12588
								],
								[
									12774,
									12783
								],
								[
									12840,
									12850
								],
								[
									12904,
									12911
								],
								[
									12951,
									12956
								],
								[
									13031,
									13037
								],
								[
									13070,
									13075
								],
								[
									13151,
									13156
								],
								[
									13207,
									13212
								],
								[
									13322,
									13331
								],
								[
									13368,
									13375
								],
								[
									13415,
									13420
								],
								[
									13463,
									13469
								],
								[
									13502,
									13507
								],
								[
									13579,
									13584
								],
								[
									13628,
									13633
								],
								[
									13851,
									13874
								],
								[
									14650,
									14660
								],
								[
									14737,
									14751
								],
								[
									15314,
									15321
								],
								[
									15374,
									15384
								],
								[
									15487,
									15498
								],
								[
									15551,
									15563
								],
								[
									15665,
									15678
								],
								[
									15731,
									15742
								],
								[
									15787,
									15792
								],
								[
									15810,
									15819
								],
								[
									15858,
									15865
								],
								[
									15905,
									15910
								],
								[
									15954,
									15960
								],
								[
									15993,
									15998
								],
								[
									16070,
									16075
								],
								[
									16119,
									16124
								],
								[
									16271,
									16305
								],
								[
									16499,
									16506
								],
								[
									16575,
									16603
								],
								[
									16706,
									16734
								],
								[
									16837,
									16865
								],
								[
									16996,
									17024
								],
								[
									17099,
									17126
								],
								[
									17236,
									17243
								],
								[
									17412,
									17418
								],
								[
									17454,
									17460
								],
								[
									17848,
									17865
								],
								[
									17974,
									17981
								],
								[
									17999,
									18008
								],
								[
									18099,
									18109
								],
								[
									18467,
									18474
								],
								[
									18540,
									18545
								],
								[
									18597,
									18603
								],
								[
									18658,
									18663
								],
								[
									18721,
									18726
								],
								[
									18842,
									18847
								],
								[
									18942,
									18966
								],
								[
									19066,
									19069
								],
								[
									19485,
									19509
								],
								[
									19796,
									19820
								],
								[
									20107,
									20131
								],
								[
									20418,
									20442
								],
								[
									20532,
									20555
								],
								[
									20629,
									20632
								],
								[
									20781,
									20787
								],
								[
									20823,
									20829
								],
								[
									21111,
									21114
								],
								[
									21132,
									21141
								],
								[
									21344,
									21354
								],
								[
									21445,
									21479
								],
								[
									21689,
									21724
								],
								[
									21932,
									21942
								],
								[
									22065,
									22075
								],
								[
									22168,
									22199
								],
								[
									22352,
									22386
								],
								[
									22956,
									23000
								],
								[
									24009,
									24033
								],
								[
									24668,
									24678
								],
								[
									24696,
									24702
								],
								[
									24844,
									24850
								],
								[
									25013,
									25022
								],
								[
									25090,
									25100
								],
								[
									25553,
									25558
								],
								[
									25668,
									25676
								],
								[
									25867,
									25874
								],
								[
									26153,
									26160
								],
								[
									26364,
									26371
								],
								[
									26555,
									26586
								],
								[
									26911,
									26942
								],
								[
									26983,
									27014
								],
								[
									27338,
									27376
								],
								[
									27407,
									27438
								],
								[
									27504,
									27535
								],
								[
									27581,
									27611
								],
								[
									27797,
									27807
								],
								[
									27991,
									27997
								],
								[
									28033,
									28039
								],
								[
									28705,
									28717
								],
								[
									29334,
									29343
								],
								[
									29544,
									29556
								],
								[
									29980,
									29988
								],
								[
									30063,
									30095
								],
								[
									30195,
									30202
								],
								[
									30634,
									30662
								],
								[
									30969,
									30997
								],
								[
									31035,
									31063
								],
								[
									31370,
									31398
								],
								[
									31500,
									31527
								],
								[
									31601,
									31608
								],
								[
									31777,
									31783
								],
								[
									31819,
									31825
								],
								[
									32207,
									32214
								],
								[
									32232,
									32241
								],
								[
									32454,
									32464
								],
								[
									32568,
									32618
								],
								[
									33072,
									33088
								],
								[
									33169,
									33185
								],
								[
									33203,
									33212
								],
								[
									33277,
									33283
								],
								[
									33362,
									33372
								],
								[
									33608,
									33616
								],
								[
									33682,
									33689
								],
								[
									33820,
									33848
								],
								[
									34026,
									34054
								],
								[
									34232,
									34260
								],
								[
									34422,
									34450
								],
								[
									34612,
									34639
								],
								[
									34858,
									34874
								],
								[
									35043,
									35049
								],
								[
									35085,
									35091
								],
								[
									35702,
									35723
								],
								[
									35844,
									35860
								],
								[
									36026,
									36048
								],
								[
									36167,
									36211
								],
								[
									36347,
									36377
								],
								[
									36982,
									37011
								],
								[
									38049,
									38076
								],
								[
									38113,
									38142
								],
								[
									38616,
									38645
								],
								[
									38753,
									38780
								],
								[
									38957,
									38983
								],
								[
									39208,
									39214
								],
								[
									39377,
									39383
								],
								[
									39419,
									39425
								],
								[
									39914,
									39920
								],
								[
									39938,
									39944
								],
								[
									40141,
									40150
								],
								[
									40593,
									40599
								],
								[
									40898,
									40908
								],
								[
									41454,
									41462
								],
								[
									41717,
									41724
								],
								[
									42118,
									42125
								],
								[
									42512,
									42517
								],
								[
									42935,
									42940
								],
								[
									43271,
									43284
								],
								[
									43451,
									43457
								],
								[
									43557,
									43561
								],
								[
									43564,
									43587
								],
								[
									44058,
									44088
								],
								[
									44317,
									44323
								],
								[
									44435,
									44442
								],
								[
									44580,
									44590
								],
								[
									44779,
									44787
								],
								[
									45264,
									45279
								],
								[
									45502,
									45510
								],
								[
									45673,
									45684
								],
								[
									46060,
									46072
								],
								[
									46137,
									46143
								],
								[
									46864,
									46874
								],
								[
									47852,
									47859
								],
								[
									48708,
									48714
								],
								[
									50395,
									50403
								],
								[
									50686,
									50696
								],
								[
									50979,
									51005
								],
								[
									51186,
									51212
								],
								[
									51393,
									51426
								],
								[
									51538,
									51564
								],
								[
									52645,
									52671
								],
								[
									52716,
									52756
								],
								[
									52874,
									52899
								],
								[
									53224,
									53230
								],
								[
									53266,
									53272
								],
								[
									53977,
									53983
								],
								[
									54121,
									54126
								],
								[
									54377,
									54386
								],
								[
									54442,
									54452
								],
								[
									54619,
									54634
								],
								[
									54948,
									54965
								],
								[
									54991,
									55008
								],
								[
									55034,
									55051
								],
								[
									55077,
									55092
								],
								[
									55116,
									55132
								],
								[
									55157,
									55172
								],
								[
									55196,
									55215
								],
								[
									55243,
									55260
								],
								[
									55571,
									55588
								],
								[
									55755,
									55771
								],
								[
									55937,
									55953
								],
								[
									56355,
									56370
								],
								[
									56394,
									56409
								],
								[
									56433,
									56449
								],
								[
									56486,
									56503
								],
								[
									56541,
									56557
								],
								[
									56587,
									56605
								],
								[
									56635,
									56650
								],
								[
									56818,
									56833
								],
								[
									56995,
									57010
								],
								[
									57143,
									57159
								],
								[
									57196,
									57212
								],
								[
									57249,
									57265
								],
								[
									57302,
									57322
								],
								[
									57370,
									57386
								],
								[
									57478,
									57495
								],
								[
									57532,
									57551
								],
								[
									57588,
									57604
								],
								[
									57669,
									57685
								],
								[
									57750,
									57766
								],
								[
									57835,
									57852
								],
								[
									57913,
									57930
								],
								[
									57991,
									58008
								],
								[
									58073,
									58092
								],
								[
									58142,
									58164
								]
							],
							"symlist":
							[
								"(global)",
								"  add_props(obj, props)",
								"  operators_set(proto, ...op_list)",
								"  generic_pow(a, b)",
								"  miller_rabin_test(n, t)",
								"  fact_rec(a, b)",
								"  isInteger(a)",
								"  gcd(a, b)",
								"  fact(n)",
								"  comb(n, k)",
								"  invmod(x, y)",
								"  pmod(a, b, m)",
								"  isPrime(n, t)",
								"  nextPrime(n)",
								"  factor(n)",
								"Integer",
								"  inverse()",
								"  norm2()",
								"  abs()",
								"  conj()",
								"  arg()",
								"  exp()",
								"  log()",
								"Fraction = function Fraction(a, b)",
								"Fraction",
								"  fraction_add(a, b)",
								"  fraction_sub(a, b)",
								"  fraction_mul(a, b)",
								"  fraction_div(a, b)",
								"  fraction_mod(a, b)",
								"  fraction_eq(a, b)",
								"  fraction_lt(a, b)",
								"  float_add(a, b)",
								"  float_sub(a, b)",
								"  float_mul(a, b)",
								"  float_div(a, b)",
								"  float_mod(a, b)",
								"  float_pow(a, b)",
								"  float_eq(a, b)",
								"  float_lt(a, b)",
								"Fraction",
								"  pos(a)",
								"  neg(a)",
								"  toFraction(a, b)",
								"Fraction",
								"  inverse()",
								"  toString()",
								"  norm2()",
								"  abs()",
								"  conj()",
								"  arg()",
								"  exp()",
								"  log()",
								"  inverse()",
								"  norm2()",
								"  abs()",
								"  conj()",
								"  arg()",
								"  exp()",
								"  log()",
								"  get_const(n)",
								"  isFloat(a)",
								"  bestappr(u, b)",
								"  get E()",
								"  get LN10()",
								"  get LOG2E()",
								"  get LOG10E()",
								"  get SQRT1_2()",
								"  get SQRT2()",
								"Float",
								"  inverse()",
								"  norm2()",
								"  abs()",
								"  conj()",
								"  arg()",
								"  exp()",
								"  log()",
								"Complex = function Complex(re, im)",
								"Complex",
								"  complex_add(a, b)",
								"  complex_sub(a, b)",
								"  complex_mul(a, b)",
								"  complex_div(a, b)",
								"  complex_eq(a, b)",
								"Complex",
								"  pos(a)",
								"  neg(a)",
								"  toComplex(re, im)",
								"Complex",
								"  inverse()",
								"  toString()",
								"  norm2()",
								"  abs()",
								"  conj()",
								"  arg()",
								"  exp()",
								"  log()",
								"Mod = function Mod(a, m)",
								"Mod",
								"  mod_add(a, b)",
								"  mod_sub(a, b)",
								"  mod_mul(a, b)",
								"  mod_div(a, b)",
								"  mod_eq(a, b)",
								"Mod",
								"  pos(a)",
								"  neg(a)",
								"Mod",
								"  inverse()",
								"  toString()",
								"  polynomial_is_scalar(a)",
								"Polynomial = function Polynomial(a)",
								"Polynomial",
								"Polynomial",
								"  number_need_paren(c)",
								"  monomial_toString(c, i)",
								"  poly_root_laguerre1(p, z, max_it)",
								"  poly_roots(p)",
								"Polynomial",
								"  trim()",
								"  conj()",
								"  inverse()",
								"  toString()",
								"  deg()",
								"  apply(b)",
								"  deriv()",
								"  integ()",
								"  norm2()",
								"  polynomial_add(a, b)",
								"  polynomial_sub(a, b)",
								"  polynomial_mul(a, b)",
								"  polynomial_div_scalar(a, b)",
								"  polynomial_div(a, b)",
								"  polynomial_mod(a, b)",
								"  polynomial_eq(a, b)",
								"Polynomial",
								"  pos(a)",
								"  neg(a)",
								"  divrem(a, b)",
								"  gcd(a, b)",
								"  invmod(x, y)",
								"  roots(p)",
								"PolyMod = function PolyMod(a, m)",
								"PolyMod",
								"  polymod_add(a, b)",
								"  polymod_sub(a, b)",
								"  polymod_mul(a, b)",
								"  polymod_div(a, b)",
								"  polymod_eq(a, b)",
								"PolyMod",
								"  pos(a)",
								"  neg(a)",
								"PolyMod",
								"  inverse()",
								"  toString()",
								"RationalFunction = function RationalFunction(a, b)",
								"RationalFunction",
								"RationalFunction",
								"  inverse()",
								"  conj()",
								"  toString()",
								"  apply(b)",
								"  deriv()",
								"  ratfunc_add(a, b)",
								"  ratfunc_sub(a, b)",
								"  ratfunc_mul(a, b)",
								"  ratfunc_div(a, b)",
								"  ratfunc_eq(a, b)",
								"RationalFunction",
								"  pos(a)",
								"  neg(a)",
								"  toRationalFunction(a)",
								"RationalFunction",
								"  get_emin(a)",
								"  series_is_scalar_or_polynomial(a)",
								"Series = function Series(a, n)",
								"  series_add(v1, v2)",
								"  series_sub(a, b)",
								"  series_mul(v1, v2)",
								"  series_div(v1, v2)",
								"  series_pow(a, b)",
								"  series_eq(a, b)",
								"Series",
								"  pos(a)",
								"  neg(a)",
								"Series",
								"  conj()",
								"  inverse()",
								"  trim()",
								"  toString()",
								"  apply(b)",
								"  deriv()",
								"  integ()",
								"  exp()",
								"  log()",
								"  zero(n, emin)",
								"Series",
								"O(a)",
								"ErrorO()",
								"Matrix = function Matrix(h, w)",
								"  idn(n)",
								"  diag(a)",
								"  hilbert(n)",
								"  trans(a)",
								"  check_square(a)",
								"  trace(a)",
								"  charpoly(a)",
								"  eigenvals(a)",
								"  det(a)",
								"  inverse(a)",
								"  rank(a)",
								"  ker(a)",
								"  dp(a, b)",
								"  cp(v1, v2)",
								"  array_add(a, b)",
								"  array_sub(a, b)",
								"  array_scalar_mul(a, b)",
								"  array_mul(a, b)",
								"  array_div(a, b)",
								"  array_element_wise_inverse(a)",
								"  array_eq(a, b)",
								"  pos(a)",
								"  neg(a)",
								"  conj()",
								"  dup()",
								"  inverse()",
								"Polynomial",
								"  get: function()",
								"  deriv(a)",
								"  integ(a)",
								"  norm2(a)",
								"  abs(a)",
								"  conj(a)",
								"  arg(a)",
								"  inverse(a)",
								"  trunc(a)",
								"  floor(a)",
								"  ceil(a)",
								"  sqrt(a)",
								"  exp(a)",
								"  log(a)",
								"  log2(a)",
								"  log10(a)",
								"  todb(a)",
								"  fromdb(a)",
								"  sin(a)",
								"  cos(a)",
								"  tan(a)",
								"  asin(a)",
								"  acos(a)",
								"  atan(a)",
								"  atan2(a, b)",
								"  sinc(a)",
								"  todeg(a)",
								"  fromdeg(a)",
								"  sinh(a)",
								"  cosh(a)",
								"  tanh(a)",
								"  asinh(a)",
								"  acosh(a)",
								"  atanh(a)",
								"  sigmoid(x)",
								"  lerp(a, b, t)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679835189.81,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34354,
						"regions":
						{
						},
						"selection":
						[
							[
								14531,
								14531
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 476,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680008505.84,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7242.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "quickjs/qjscalc.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58533,
						"regions":
						{
						},
						"selection":
						[
							[
								42746,
								42746
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1767,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680009950.04,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 29665.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "quickjs/quickjs.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1774447,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 31019,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679883315.54,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 526898.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 303.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Run with qjsm",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"getMod",
				"getModuleProps.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"nanovg",
				"test-nanovg.js"
			],
			[
				"alea",
				"lib/alea.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"jsut",
				"quickjs/qjs-modules/src/js-utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"run-test",
				"quickjs/run-test262.c"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"build-libwe",
				"quickjs/qjs-net/build-libwebsockets.sh"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"transform",
				"lib/geom/transformation.js"
			],
			[
				"pin.js",
				"lib/eagle/components/pin.js"
			],
			[
				"",
				"~/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"symb",
				"lib/eagle/components/symbol.js"
			],
			[
				"schematicren",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardren",
				"lib/eagle/boardRenderer.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"svgRend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"renderUtil",
				"lib/eagle/renderUtils.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"text.js",
				"lib/eagle/components/text.js"
			],
			[
				"project",
				"lib/eagle/project.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"common",
				"lib/eagle/common.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"common.j",
				"lib/eagle/common.js"
			],
			[
				"nodeLi",
				"lib/eagle/nodeList.js"
			],
			[
				"common.js",
				"lib/eagle/common.js"
			],
			[
				"elementP",
				"lib/eagle/elementProxy.js"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"wirePa",
				"lib/eagle/components/wirePath.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"renderer.js",
				"lib/eagle/renderer.js"
			],
			[
				"functions.cmake",
				"qjs-opencv/cmake/functions.cmake"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"textEle",
				"lib/eagle/components/textElement.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"drawing",
				"lib/eagle/components/drawing.js"
			],
			[
				"pathMapper",
				"lib/json/pathMapper.js"
			],
			[
				"xml-shell",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				"server.js",
				"upload-server.js"
			],
			[
				"delega",
				"lib/delegate.js"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"colorCod",
				"lib/eda/colorCoding.js"
			],
			[
				"eagle-qu",
				"eagle-query.js"
			],
			[
				"eagle-q",
				"eagle-query.js"
			],
			[
				"read.hex",
				"read.hex"
			],
			[
				"exam",
				"example.circuit"
			],
			[
				"xpath.js",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"Document",
				"lib/eagle/document.js"
			],
			[
				"test-",
				"test-bitset.js"
			],
			[
				"circuit",
				"circuit.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"eagle2ger",
				"eagle2gerber.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"websock",
				"lib/async/websocket.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"websocket.js",
				"lib/async/websocket.js"
			],
			[
				"test-bj",
				"test-bjson.js"
			],
			[
				"bjson",
				"bjson.js"
			],
			[
				"string-he",
				"string-helpers.js"
			],
			[
				"quickjs-po",
				"quickjs/qjs-modules/quickjs-pointer.c"
			],
			[
				"list-exp",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"utils.js",
				"lib/stream/utils.js"
			],
			[
				"mirror",
				"quickjs/qjs-net/src/plugins/mirror.c"
			],
			[
				"list-ex",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"fire.html",
				"fire.html"
			],
			[
				"server-htt",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"-ws.c",
				"quickjs/qjs-net/minnet-server-ws.c"
			],
			[
				"filelist",
				"filelist.js"
			],
			[
				"filelist.js",
				"filelist.js"
			],
			[
				"extendGe",
				"quickjs/qjs-modules/lib/extendGenerator.js"
			],
			[
				"test-debugger",
				"test-debuggerprotocol.js"
			],
			[
				"fire.htm",
				"fire.html"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"fontsample",
				"fontsample.js"
			],
			[
				"upload.htm",
				"upload.html"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"test-gpio",
				"test-gpio.js"
			],
			[
				"index.html",
				"index.html"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"repl",
				"repl.js"
			],
			[
				"test-minnet",
				"test-minnet.js"
			],
			[
				"list-dir",
				"list-directory.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"transformation",
				"lib/geom/transformation.js"
			],
			[
				"element.",
				"lib/dom/element.js"
			],
			[
				"crosskit",
				"lib/crosskit.js"
			],
			[
				"fire-es",
				"fire-es.html"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"fire-es.h",
				"fire-es.html"
			],
			[
				"fire-es.js",
				"fire-es.js"
			],
			[
				"fire.es",
				"fire.es"
			],
			[
				"quickjs",
				"qjs-opencv/cmake/QuickJSModule.cmake"
			],
			[
				"test-strea",
				"test-stream.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 784.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
