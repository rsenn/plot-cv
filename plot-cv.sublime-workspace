{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"iden",
				"identity"
			],
			[
				"Valu",
				"ValueT"
			],
			[
				"take",
				"takenLines"
			],
			[
				"iterator",
				"iterator_type"
			],
			[
				"Cont",
				"ContainerT"
			],
			[
				"filter",
				"filteredLines"
			],
			[
				"point",
				"point_distance2"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "PointVec\nPoint2fVec\ncoord_pointer\ncoord_pointer\nsimplify_polyline\ncoord_type\nout_point\nout_hier\nout_points\nfilter_contours\npolyline_from_contour\ncv::Scalar\nhs_vto_rgb\nsvg::Color\nfrom_scalar\nconvert_points\ntransform_points\nexport_svg\npolygon_area\napply_clahe\nbrightness_and_contrast_auto\ncv::Mat\nimage_to_binary\nget_contours\nget_mass_centers\nto_point_vec\nangle\nfind_rectangles\ndraw_polylines\ninvert_color\nhough_lines\ndraw_lines\ncorner_harris_detection\ntrackbar\nwrite_image\ndraw_all_contours\ndraw_all_lines\niterator_type\nfilter_lines\niterator_type\nvalue_type\nPredicateTraits\n function\nfilter_lines\nangle_diffs\niterator_type\npoint_type\nvalue_type\nret_type\nline_distances\niterator_type\nline_type\nvalue_type\nret_type\noperator<<\niterator_type\nmain\nline_type\nline_list\nref_list",
			"settings":
			{
				"buffer_size": 770,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			}
		},
		{
			"file": "src/CannyWebcam1.cpp",
			"settings":
			{
				"buffer_size": 33178,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/matrix.h",
			"settings":
			{
				"buffer_size": 8345,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/opencv4/include/opencv4/opencv2/core/mat.hpp",
			"settings":
			{
				"buffer_size": 160980,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/opencv4/include/opencv4/opencv2/core/types.hpp",
			"settings":
			{
				"buffer_size": 72186,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/include/opencv4/opencv2/core/affine.hpp",
			"settings":
			{
				"buffer_size": 21525,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*M///////////////////////////////////////////////////////////////////////////////////////\n//\n//  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.\n//\n//  By downloading, copying, installing or using the software you agree to this license.\n//  If you do not agree to this license, do not download, install,\n//  copy or use the software.\n//\n//\n//                          License Agreement\n//                For Open Source Computer Vision Library\n//\n// Copyright (C) 2000-2008, Intel Corporation, all rights reserved.\n// Copyright (C) 2009, Willow Garage Inc., all rights reserved.\n// Copyright (C) 2013, OpenCV Foundation, all rights reserved.\n// Third party copyrights are property of their respective owners.\n//\n// Redistribution and use in source and binary forms, with or without modification,\n// are permitted provided that the following conditions are met:\n//\n//   * Redistribution's of source code must retain the above copyright notice,\n//     this list of conditions and the following disclaimer.\n//\n//   * Redistribution's in binary form must reproduce the above copyright notice,\n//     this list of conditions and the following disclaimer in the documentation\n//     and/or other materials provided with the distribution.\n//\n//   * The name of the copyright holders may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n//\n// This software is provided by the copyright holders and contributors \"as is\" and\n// any express or implied warranties, including, but not limited to, the implied\n// warranties of merchantability and fitness for a particular purpose are disclaimed.\n// In no event shall the Intel Corporation or contributors be liable for any direct,\n// indirect, incidental, special, exemplary, or consequential damages\n// (including, but not limited to, procurement of substitute goods or services;\n// loss of use, data, or profits; or business interruption) however caused\n// and on any theory of liability, whether in contract, strict liability,\n// or tort (including negligence or otherwise) arising in any way out of\n// the use of this software, even if advised of the possibility of such damage.\n//\n//M*/\n\n#ifndef OPENCV_CORE_AFFINE3_HPP\n#define OPENCV_CORE_AFFINE3_HPP\n\n#ifdef __cplusplus\n\n#include <opencv2/core.hpp>\n\nnamespace cv\n{\n\n//! @addtogroup core\n//! @{\n\n    /** @brief Affine transform\n     *\n     * It represents a 4x4 homogeneous transformation matrix \\f$T\\f$\n     *\n     *  \\f[T =\n     *  \\begin{bmatrix}\n     *  R & t\\\\\n     *  0 & 1\\\\\n     *  \\end{bmatrix}\n     *  \\f]\n     *\n     *  where \\f$R\\f$ is a 3x3 rotation matrix and \\f$t\\f$ is a 3x1 translation vector.\n     *\n     *  You can specify \\f$R\\f$ either by a 3x3 rotation matrix or by a 3x1 rotation vector,\n     *  which is converted to a 3x3 rotation matrix by the Rodrigues formula.\n     *\n     *  To construct a matrix \\f$T\\f$ representing first rotation around the axis \\f$r\\f$ with rotation\n     *  angle \\f$|r|\\f$ in radian (right hand rule) and then translation by the vector \\f$t\\f$, you can use\n     *\n     *  @code\n     *  cv::Vec3f r, t;\n     *  cv::Affine3f T(r, t);\n     *  @endcode\n     *\n     *  If you already have the rotation matrix \\f$R\\f$, then you can use\n     *\n     *  @code\n     *  cv::Matx33f R;\n     *  cv::Affine3f T(R, t);\n     *  @endcode\n     *\n     *  To extract the rotation matrix \\f$R\\f$ from \\f$T\\f$, use\n     *\n     *  @code\n     *  cv::Matx33f R = T.rotation();\n     *  @endcode\n     *\n     *  To extract the translation vector \\f$t\\f$ from \\f$T\\f$, use\n     *\n     *  @code\n     *  cv::Vec3f t = T.translation();\n     *  @endcode\n     *\n     *  To extract the rotation vector \\f$r\\f$ from \\f$T\\f$, use\n     *\n     *  @code\n     *  cv::Vec3f r = T.rvec();\n     *  @endcode\n     *\n     *  Note that since the mapping from rotation vectors to rotation matrices\n     *  is many to one. The returned rotation vector is not necessarily the one\n     *  you used before to set the matrix.\n     *\n     *  If you have two transformations \\f$T = T_1 * T_2\\f$, use\n     *\n     *  @code\n     *  cv::Affine3f T, T1, T2;\n     *  T = T2.concatenate(T1);\n     *  @endcode\n     *\n     *  To get the inverse transform of \\f$T\\f$, use\n     *\n     *  @code\n     *  cv::Affine3f T, T_inv;\n     *  T_inv = T.inv();\n     *  @endcode\n     *\n     */\n    template<typename T>\n    class Affine3\n    {\n    public:\n        typedef T float_type;\n        typedef Matx<float_type, 3, 3> Mat3;\n        typedef Matx<float_type, 4, 4> Mat4;\n        typedef Vec<float_type, 3> Vec3;\n\n       //! Default constructor. It represents a 4x4 identity matrix.\n        Affine3();\n\n        //! Augmented affine matrix\n        Affine3(const Mat4& affine);\n\n        /**\n         *  The resulting 4x4 matrix is\n         *\n         *  \\f[\n         *  \\begin{bmatrix}\n         *  R & t\\\\\n         *  0 & 1\\\\\n         *  \\end{bmatrix}\n         *  \\f]\n         *\n         * @param R 3x3 rotation matrix.\n         * @param t 3x1 translation vector.\n         */\n        Affine3(const Mat3& R, const Vec3& t = Vec3::all(0));\n\n        /**\n         * Rodrigues vector.\n         *\n         * The last row of the current matrix is set to [0,0,0,1].\n         *\n         * @param rvec 3x1 rotation vector. Its direction indicates the rotation axis and its length\n         *             indicates the rotation angle in radian (using right hand rule).\n         * @param t 3x1 translation vector.\n         */\n        Affine3(const Vec3& rvec, const Vec3& t = Vec3::all(0));\n\n        /**\n         * Combines all constructors above. Supports 4x4, 3x4, 3x3, 1x3, 3x1 sizes of data matrix.\n         *\n         * The last row of the current matrix is set to [0,0,0,1] when data is not 4x4.\n         *\n         * @param data 1-channel matrix.\n         *             when it is 4x4, it is copied to the current matrix and t is not used.\n         *             When it is 3x4, it is copied to the upper part 3x4 of the current matrix and t is not used.\n         *             When it is 3x3, it is copied to the upper left 3x3 part of the current matrix.\n         *             When it is 3x1 or 1x3, it is treated as a rotation vector and the Rodrigues formula is used\n         *                             to compute a 3x3 rotation matrix.\n         * @param t 3x1 translation vector. It is used only when data is neither 4x4 nor 3x4.\n         */\n        explicit Affine3(const Mat& data, const Vec3& t = Vec3::all(0));\n\n        //! From 16-element array\n        explicit Affine3(const float_type* vals);\n\n        //! Create an 4x4 identity transform\n        static Affine3 Identity();\n\n        /**\n         * Rotation matrix.\n         *\n         * Copy the rotation matrix to the upper left 3x3 part of the current matrix.\n         * The remaining elements of the current matrix are not changed.\n         *\n         * @param R 3x3 rotation matrix.\n         *\n         */\n        void rotation(const Mat3& R);\n\n        /**\n         * Rodrigues vector.\n         *\n         * It sets the upper left 3x3 part of the matrix. The remaining part is unaffected.\n         *\n         * @param rvec 3x1 rotation vector. The direction indicates the rotation axis and\n         *             its length indicates the rotation angle in radian (using the right thumb convention).\n         */\n        void rotation(const Vec3& rvec);\n\n        /**\n         * Combines rotation methods above. Supports 3x3, 1x3, 3x1 sizes of data matrix.\n         *\n         * It sets the upper left 3x3 part of the matrix. The remaining part is unaffected.\n         *\n         * @param data 1-channel matrix.\n         *             When it is a 3x3 matrix, it sets the upper left 3x3 part of the current matrix.\n         *             When it is a 1x3 or 3x1 matrix, it is used as a rotation vector. The Rodrigues formula\n         *             is used to compute the rotation matrix and sets the upper left 3x3 part of the current matrix.\n         */\n        void rotation(const Mat& data);\n\n        /**\n         * Copy the 3x3 matrix L to the upper left part of the current matrix\n         *\n         * It sets the upper left 3x3 part of the matrix. The remaining part is unaffected.\n         *\n         * @param L 3x3 matrix.\n         */\n        void linear(const Mat3& L);\n\n        /**\n         * Copy t to the first three elements of the last column of the current matrix\n         *\n         * It sets the upper right 3x1 part of the matrix. The remaining part is unaffected.\n         *\n         * @param t 3x1 translation vector.\n         */\n        void translation(const Vec3& t);\n\n        //! @return the upper left 3x3 part\n        Mat3 rotation() const;\n\n        //! @return the upper left 3x3 part\n        Mat3 linear() const;\n\n        //! @return the upper right 3x1 part\n        Vec3 translation() const;\n\n        //! Rodrigues vector.\n        //! @return a vector representing the upper left 3x3 rotation matrix of the current matrix.\n        //! @warning  Since the mapping between rotation vectors and rotation matrices is many to one,\n        //!           this function returns only one rotation vector that represents the current rotation matrix,\n        //!           which is not necessarily the same one set by `rotation(const Vec3& rvec)`.\n        Vec3 rvec() const;\n\n        //! @return the inverse of the current matrix.\n        Affine3 inv(int method = cv::DECOMP_SVD) const;\n\n        //! a.rotate(R) is equivalent to Affine(R, 0) * a;\n        Affine3 rotate(const Mat3& R) const;\n\n        //! a.rotate(rvec) is equivalent to Affine(rvec, 0) * a;\n        Affine3 rotate(const Vec3& rvec) const;\n\n        //! a.translate(t) is equivalent to Affine(E, t) * a, where E is an identity matrix\n        Affine3 translate(const Vec3& t) const;\n\n        //! a.concatenate(affine) is equivalent to affine * a;\n        Affine3 concatenate(const Affine3& affine) const;\n\n        template <typename Y> operator Affine3<Y>() const;\n\n        template <typename Y> Affine3<Y> cast() const;\n\n        Mat4 matrix;\n\n#if defined EIGEN_WORLD_VERSION && defined EIGEN_GEOMETRY_MODULE_H\n        Affine3(const Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)>& affine);\n        Affine3(const Eigen::Transform<T, 3, Eigen::Affine>& affine);\n        operator Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)>() const;\n        operator Eigen::Transform<T, 3, Eigen::Affine>() const;\n#endif\n    };\n\n    template<typename T> static\n    Affine3<T> operator*(const Affine3<T>& affine1, const Affine3<T>& affine2);\n\n    //! V is a 3-element vector with member fields x, y and z\n    template<typename T, typename V> static\n    V operator*(const Affine3<T>& affine, const V& vector);\n\n    typedef Affine3<float> Affine3f;\n    typedef Affine3<double> Affine3d;\n\n    static Vec3f operator*(const Affine3f& affine, const Vec3f& vector);\n    static Vec3d operator*(const Affine3d& affine, const Vec3d& vector);\n\n    template<typename _Tp> class DataType< Affine3<_Tp> >\n    {\n    public:\n        typedef Affine3<_Tp>                               value_type;\n        typedef Affine3<typename DataType<_Tp>::work_type> work_type;\n        typedef _Tp                                        channel_type;\n\n        enum { generic_type = 0,\n               channels     = 16,\n               fmt          = traits::SafeFmt<channel_type>::fmt + ((channels - 1) << 8)\n#ifdef OPENCV_TRAITS_ENABLE_DEPRECATED\n               ,depth        = DataType<channel_type>::depth\n               ,type         = CV_MAKETYPE(depth, channels)\n#endif\n             };\n\n        typedef Vec<channel_type, channels> vec_type;\n    };\n\n    namespace traits {\n    template<typename _Tp>\n    struct Depth< Affine3<_Tp> > { enum { value = Depth<_Tp>::value }; };\n    template<typename _Tp>\n    struct Type< Affine3<_Tp> > { enum { value = CV_MAKETYPE(Depth<_Tp>::value, 16) }; };\n    } // namespace\n\n//! @} core\n\n}\n\n//! @cond IGNORED\n\n///////////////////////////////////////////////////////////////////////////////////\n// Implementation\n\ntemplate<typename T> inline\ncv::Affine3<T>::Affine3()\n    : matrix(Mat4::eye())\n{}\n\ntemplate<typename T> inline\ncv::Affine3<T>::Affine3(const Mat4& affine)\n    : matrix(affine)\n{}\n\ntemplate<typename T> inline\ncv::Affine3<T>::Affine3(const Mat3& R, const Vec3& t)\n{\n    rotation(R);\n    translation(t);\n    matrix.val[12] = matrix.val[13] = matrix.val[14] = 0;\n    matrix.val[15] = 1;\n}\n\ntemplate<typename T> inline\ncv::Affine3<T>::Affine3(const Vec3& _rvec, const Vec3& t)\n{\n    rotation(_rvec);\n    translation(t);\n    matrix.val[12] = matrix.val[13] = matrix.val[14] = 0;\n    matrix.val[15] = 1;\n}\n\ntemplate<typename T> inline\ncv::Affine3<T>::Affine3(const cv::Mat& data, const Vec3& t)\n{\n    CV_Assert(data.type() == cv::traits::Type<T>::value);\n    CV_Assert(data.channels() == 1);\n\n    if (data.cols == 4 && data.rows == 4)\n    {\n        data.copyTo(matrix);\n        return;\n    }\n    else if (data.cols == 4 && data.rows == 3)\n    {\n        rotation(data(Rect(0, 0, 3, 3)));\n        translation(data(Rect(3, 0, 1, 3)));\n    }\n    else\n    {\n        rotation(data);\n        translation(t);\n    }\n\n    matrix.val[12] = matrix.val[13] = matrix.val[14] = 0;\n    matrix.val[15] = 1;\n}\n\ntemplate<typename T> inline\ncv::Affine3<T>::Affine3(const float_type* vals) : matrix(vals)\n{}\n\ntemplate<typename T> inline\ncv::Affine3<T> cv::Affine3<T>::Identity()\n{\n    return Affine3<T>(cv::Affine3<T>::Mat4::eye());\n}\n\ntemplate<typename T> inline\nvoid cv::Affine3<T>::rotation(const Mat3& R)\n{\n    linear(R);\n}\n\ntemplate<typename T> inline\nvoid cv::Affine3<T>::rotation(const Vec3& _rvec)\n{\n    double theta = norm(_rvec);\n\n    if (theta < DBL_EPSILON)\n        rotation(Mat3::eye());\n    else\n    {\n        double c = std::cos(theta);\n        double s = std::sin(theta);\n        double c1 = 1. - c;\n        double itheta = (theta != 0) ? 1./theta : 0.;\n\n        Point3_<T> r = _rvec*itheta;\n\n        Mat3 rrt( r.x*r.x, r.x*r.y, r.x*r.z, r.x*r.y, r.y*r.y, r.y*r.z, r.x*r.z, r.y*r.z, r.z*r.z );\n        Mat3 r_x( 0, -r.z, r.y, r.z, 0, -r.x, -r.y, r.x, 0 );\n\n        // R = cos(theta)*I + (1 - cos(theta))*r*rT + sin(theta)*[r_x]\n        // where [r_x] is [0 -rz ry; rz 0 -rx; -ry rx 0]\n        Mat3 R = c*Mat3::eye() + c1*rrt + s*r_x;\n\n        rotation(R);\n    }\n}\n\n//Combines rotation methods above. Supports 3x3, 1x3, 3x1 sizes of data matrix;\ntemplate<typename T> inline\nvoid cv::Affine3<T>::rotation(const cv::Mat& data)\n{\n    CV_Assert(data.type() == cv::traits::Type<T>::value);\n    CV_Assert(data.channels() == 1);\n\n    if (data.cols == 3 && data.rows == 3)\n    {\n        Mat3 R;\n        data.copyTo(R);\n        rotation(R);\n    }\n    else if ((data.cols == 3 && data.rows == 1) || (data.cols == 1 && data.rows == 3))\n    {\n        Vec3 _rvec;\n        data.reshape(1, 3).copyTo(_rvec);\n        rotation(_rvec);\n    }\n    else\n        CV_Error(Error::StsError, \"Input matrix can only be 3x3, 1x3 or 3x1\");\n}\n\ntemplate<typename T> inline\nvoid cv::Affine3<T>::linear(const Mat3& L)\n{\n    matrix.val[0] = L.val[0]; matrix.val[1] = L.val[1];  matrix.val[ 2] = L.val[2];\n    matrix.val[4] = L.val[3]; matrix.val[5] = L.val[4];  matrix.val[ 6] = L.val[5];\n    matrix.val[8] = L.val[6]; matrix.val[9] = L.val[7];  matrix.val[10] = L.val[8];\n}\n\ntemplate<typename T> inline\nvoid cv::Affine3<T>::translation(const Vec3& t)\n{\n    matrix.val[3] = t[0]; matrix.val[7] = t[1]; matrix.val[11] = t[2];\n}\n\ntemplate<typename T> inline\ntypename cv::Affine3<T>::Mat3 cv::Affine3<T>::rotation() const\n{\n    return linear();\n}\n\ntemplate<typename T> inline\ntypename cv::Affine3<T>::Mat3 cv::Affine3<T>::linear() const\n{\n    typename cv::Affine3<T>::Mat3 R;\n    R.val[0] = matrix.val[0];  R.val[1] = matrix.val[1];  R.val[2] = matrix.val[ 2];\n    R.val[3] = matrix.val[4];  R.val[4] = matrix.val[5];  R.val[5] = matrix.val[ 6];\n    R.val[6] = matrix.val[8];  R.val[7] = matrix.val[9];  R.val[8] = matrix.val[10];\n    return R;\n}\n\ntemplate<typename T> inline\ntypename cv::Affine3<T>::Vec3 cv::Affine3<T>::translation() const\n{\n    return Vec3(matrix.val[3], matrix.val[7], matrix.val[11]);\n}\n\ntemplate<typename T> inline\ntypename cv::Affine3<T>::Vec3 cv::Affine3<T>::rvec() const\n{\n    cv::Vec3d w;\n    cv::Matx33d u, vt, R = rotation();\n    cv::SVD::compute(R, w, u, vt, cv::SVD::FULL_UV + cv::SVD::MODIFY_A);\n    R = u * vt;\n\n    double rx = R.val[7] - R.val[5];\n    double ry = R.val[2] - R.val[6];\n    double rz = R.val[3] - R.val[1];\n\n    double s = std::sqrt((rx*rx + ry*ry + rz*rz)*0.25);\n    double c = (R.val[0] + R.val[4] + R.val[8] - 1) * 0.5;\n    c = c > 1.0 ? 1.0 : c < -1.0 ? -1.0 : c;\n    double theta = acos(c);\n\n    if( s < 1e-5 )\n    {\n        if( c > 0 )\n            rx = ry = rz = 0;\n        else\n        {\n            double t;\n            t = (R.val[0] + 1) * 0.5;\n            rx = std::sqrt(std::max(t, 0.0));\n            t = (R.val[4] + 1) * 0.5;\n            ry = std::sqrt(std::max(t, 0.0)) * (R.val[1] < 0 ? -1.0 : 1.0);\n            t = (R.val[8] + 1) * 0.5;\n            rz = std::sqrt(std::max(t, 0.0)) * (R.val[2] < 0 ? -1.0 : 1.0);\n\n            if( fabs(rx) < fabs(ry) && fabs(rx) < fabs(rz) && (R.val[5] > 0) != (ry*rz > 0) )\n                rz = -rz;\n            theta /= std::sqrt(rx*rx + ry*ry + rz*rz);\n            rx *= theta;\n            ry *= theta;\n            rz *= theta;\n        }\n    }\n    else\n    {\n        double vth = 1/(2*s);\n        vth *= theta;\n        rx *= vth; ry *= vth; rz *= vth;\n    }\n\n    return cv::Vec3d(rx, ry, rz);\n}\n\ntemplate<typename T> inline\ncv::Affine3<T> cv::Affine3<T>::inv(int method) const\n{\n    return matrix.inv(method);\n}\n\ntemplate<typename T> inline\ncv::Affine3<T> cv::Affine3<T>::rotate(const Mat3& R) const\n{\n    Mat3 Lc = linear();\n    Vec3 tc = translation();\n    Mat4 result;\n    result.val[12] = result.val[13] = result.val[14] = 0;\n    result.val[15] = 1;\n\n    for(int j = 0; j < 3; ++j)\n    {\n        for(int i = 0; i < 3; ++i)\n        {\n            float_type value = 0;\n            for(int k = 0; k < 3; ++k)\n                value += R(j, k) * Lc(k, i);\n            result(j, i) = value;\n        }\n\n        result(j, 3) = R.row(j).dot(tc.t());\n    }\n    return result;\n}\n\ntemplate<typename T> inline\ncv::Affine3<T> cv::Affine3<T>::rotate(const Vec3& _rvec) const\n{\n    return rotate(Affine3f(_rvec).rotation());\n}\n\ntemplate<typename T> inline\ncv::Affine3<T> cv::Affine3<T>::translate(const Vec3& t) const\n{\n    Mat4 m = matrix;\n    m.val[ 3] += t[0];\n    m.val[ 7] += t[1];\n    m.val[11] += t[2];\n    return m;\n}\n\ntemplate<typename T> inline\ncv::Affine3<T> cv::Affine3<T>::concatenate(const Affine3<T>& affine) const\n{\n    return (*this).rotate(affine.rotation()).translate(affine.translation());\n}\n\ntemplate<typename T> template <typename Y> inline\ncv::Affine3<T>::operator Affine3<Y>() const\n{\n    return Affine3<Y>(matrix);\n}\n\ntemplate<typename T> template <typename Y> inline\ncv::Affine3<Y> cv::Affine3<T>::cast() const\n{\n    return Affine3<Y>(matrix);\n}\n\ntemplate<typename T> inline\ncv::Affine3<T> cv::operator*(const cv::Affine3<T>& affine1, const cv::Affine3<T>& affine2)\n{\n    return affine2.concatenate(affine1);\n}\n\ntemplate<typename T, typename V> inline\nV cv::operator*(const cv::Affine3<T>& affine, const V& v)\n{\n    const typename Affine3<T>::Mat4& m = affine.matrix;\n\n    V r;\n    r.x = m.val[0] * v.x + m.val[1] * v.y + m.val[ 2] * v.z + m.val[ 3];\n    r.y = m.val[4] * v.x + m.val[5] * v.y + m.val[ 6] * v.z + m.val[ 7];\n    r.z = m.val[8] * v.x + m.val[9] * v.y + m.val[10] * v.z + m.val[11];\n    return r;\n}\n\nstatic inline\ncv::Vec3f cv::operator*(const cv::Affine3f& affine, const cv::Vec3f& v)\n{\n    const cv::Matx44f& m = affine.matrix;\n    cv::Vec3f r;\n    r.val[0] = m.val[0] * v[0] + m.val[1] * v[1] + m.val[ 2] * v[2] + m.val[ 3];\n    r.val[1] = m.val[4] * v[0] + m.val[5] * v[1] + m.val[ 6] * v[2] + m.val[ 7];\n    r.val[2] = m.val[8] * v[0] + m.val[9] * v[1] + m.val[10] * v[2] + m.val[11];\n    return r;\n}\n\nstatic inline\ncv::Vec3d cv::operator*(const cv::Affine3d& affine, const cv::Vec3d& v)\n{\n    const cv::Matx44d& m = affine.matrix;\n    cv::Vec3d r;\n    r.val[0] = m.val[0] * v[0] + m.val[1] * v[1] + m.val[ 2] * v[2] + m.val[ 3];\n    r.val[1] = m.val[4] * v[0] + m.val[5] * v[1] + m.val[ 6] * v[2] + m.val[ 7];\n    r.val[2] = m.val[8] * v[0] + m.val[9] * v[1] + m.val[10] * v[2] + m.val[11];\n    return r;\n}\n\n\n\n#if defined EIGEN_WORLD_VERSION && defined EIGEN_GEOMETRY_MODULE_H\n\ntemplate<typename T> inline\ncv::Affine3<T>::Affine3(const Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)>& affine)\n{\n    cv::Mat(4, 4, cv::traits::Type<T>::value, affine.matrix().data()).copyTo(matrix);\n}\n\ntemplate<typename T> inline\ncv::Affine3<T>::Affine3(const Eigen::Transform<T, 3, Eigen::Affine>& affine)\n{\n    Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)> a = affine;\n    cv::Mat(4, 4, cv::traits::Type<T>::value, a.matrix().data()).copyTo(matrix);\n}\n\ntemplate<typename T> inline\ncv::Affine3<T>::operator Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)>() const\n{\n    Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)> r;\n    cv::Mat hdr(4, 4, cv::traits::Type<T>::value, r.matrix().data());\n    cv::Mat(matrix, false).copyTo(hdr);\n    return r;\n}\n\ntemplate<typename T> inline\ncv::Affine3<T>::operator Eigen::Transform<T, 3, Eigen::Affine>() const\n{\n    return this->operator Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)>();\n}\n\n#endif /* defined EIGEN_WORLD_VERSION && defined EIGEN_GEOMETRY_MODULE_H */\n\n//! @endcond\n\n#endif /* __cplusplus */\n\n#endif /* OPENCV_CORE_AFFINE3_HPP */\n",
			"file": "/home/roman/Dokumente/Sources/opencv-4.1.2/modules/core/include/opencv2/core/affine.hpp",
			"file_size": 21608,
			"file_write_time": 132181413525579396,
			"settings":
			{
				"buffer_size": 21525,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 803 files for \"to_string\" (regex)\n\n/home/roman/Dokumente/Sources/contours/plot-cv/FaceDetector.cpp:\n   66      BiggestRegion.height = faces[BiggestFaceIndex].height;\n   67  \n   68:     text = \"Bigest face area: \" + to_string(BiggestRegion.width) + \"x\" + to_string(BiggestRegion.height);\n   69      printf(\"Face detected\\n\");\n   70    }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/gravador_source.cpp:\n   52      int Pos_int = Pos;\n   53  \n   54:     string varAsString = to_string(Pos_int);\n   55  \n   56      String directory = \"../../data/Output/Canny_Image_Teste\" + varAsString + \".jpg\";\n\n/home/roman/Dokumente/Sources/contours/plot-cv/process.cpp:\n  269        cout << \"img_num : \" << endl;\n  270        cin >> img_num;\n  271:       if(!tools::readImage(\"InputImage/\" + to_string(img_num) + \".jpg\", image)) {\n  272          cerr << \"File No Exist.\" << endl;\n  273          exit(1);\n  ...\n  434  \n  435          if(mode & WINDOWON)\n  436:           imshow(\"warp\" /*+ to_string(i)*/, foundPlate.img);\n  437  \n  438          k++;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/CannyWebcam1.cpp:\n  111      double area = contourArea(contours_un[i]);\n  112      if(showDiagnostics) {\n  113:       std::cout << \"Area: \" + to_string(area) + \"Index: \" + to_string(i) << std::endl;\n  114      }\n  115      if(area > maxArea) {\n  ...\n  531    std::ostringstream filename;\n  532    filename << \"frame-\";\n  533:   filename << to_string((++count) % 100, 3, '0');\n  534    filename << \".png\";\n  535  \n  ...\n  646    for(iterator_type it = c.begin(); it != end; ++it) {\n  647      os << ' ';\n  648:     os << to_string(*it);\n  649    }\n  650    return os;\n  ...\n  892          mult =  t * r * s;\n  893  \n  894:         cout << \"matrix x \" << to_string(mult) << endl;\n  895:         cout << \"matrix init \" << to_string(m) << endl;\n  896:         cout << \"matrix scale \" << to_string(s) << endl;\n  897:         cout << \"matrix rotate \" << to_string(r) << endl;\n  898:         cout << \"matrix translate \" << to_string(t) << endl;\n  899  \n  900          cv::Point2f p(100, 50);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/alexnet.cpp:\n  123  \n  124      s1 = classNames.at(classId);\n  125:     s2 = \"Probability \" + std::to_string(classProb * 100) + \" %\";\n  126  \n  127      texte(matImg, s1, 0, 15);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/basicscanner.cpp:\n   37      double area = contourArea(contours_un[i]);\n   38      if(showDiagnostics) {\n   39:       std::cout << \"Area: \" + to_string(area) + \"Index: \" + to_string(i) << std::endl;\n   40      }\n   41      if(area > maxArea) {\n   ..\n  128    filter_contours(contours);\n  129    if(showDiagnostics) {\n  130:     std::cout << \"largest Contour Index: \" + to_string(largestContour) << std::endl;\n  131:     std::cout << \"largest Contour Area: \" + to_string(contourArea(bigContour)) << std::endl;\n  132    }\n  133    Mat drawing = Mat::zeros(canny_output.size(), CV_8UC3);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/caffenet.cpp:\n  123  \n  124      s1 = classNames.at(classId);\n  125:     s2 = \"Probabilite \" + std::to_string(classProb * 100) + \" %\";\n  126  \n  127      texte(matImg, s1, 0, 15);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/face-recognition-start.cpp:\n  483      // Add the training mode text\n  484      if(trainingMode) {\n  485:       text = \"Training Mode: ON (\" + trainingLabel + \"...\" + to_string(trainingFaceImageCounter) + \"\\\\\" + to_string(maxTrainingFaceImages) + \")\";\n  486        textSize = cv::getTextSize(text, font, fontSizeLarge, fontLineThickness, &textBaseline);\n  487        cv::putText(frame, text, cv::Point(textMargin, cameraHeight - textMargin), font, fontSizeLarge, fontColour, fontLineThickness, fontLineType);\n  ...\n  493  \n  494      // Add the frames per second text\n  495:     text = \"FPS: \" + to_string(framesPerSecond);\n  496      textSize = cv::getTextSize(text, font, fontSizeLarge, fontLineThickness, &textBaseline);\n  497      cv::putText(frame, text, cv::Point(cameraWidth - textSize.width - textMargin, cameraHeight - textSize.height - (textMargin * 2)), font, fontSizeLarge, fontColour, fontLineThickness, fontLineType);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/googlenet.cpp:\n  121  \n  122      s1 = classNames.at(classId);\n  123:     s2 = \"Probabilite \" + std::to_string(classProb * 100) + \" %\";\n  124  \n  125      texte(matImg, s1, 0, 15);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/laser.cpp:\n   84              /* Draw a circle on the laser and put a text with the distance on it. */\n   85              cv::circle(video, cv::Point(coord_x, coord_y), 5, cv::Scalar(0, 0, 0), 1, 8);\n   86:             cv::putText(video, std::to_string(distance), cv::Point(coord_x, coord_y), cv::FONT_HERSHEY_SCRIPT_SIMPLEX, 0.5, cv::Scalar(255, 0, 0), 1);\n   87            }\n   88          }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/line.h:\n   11  template <class T, typename std::enable_if<std::is_integral<T>::value || std::is_floating_point<T>::value, T>::type* = nullptr>\n   12  inline std::string\n   13: to_string(const T& t, size_t n_pad = 3, char ch_pad = ' ') {\n   14    std::ostringstream oss;\n   15    oss << t;\n   ..\n   30  template <class T>\n   31  inline std::string\n   32: to_string(const cv::Point_<T>& pt, size_t n_pad = 3, char ch_pad = '0') {\n   33    std::ostringstream oss;\n   34:   oss << to_string(pt.x) << ',' << to_string(pt.y);\n   35    return oss.str();\n   36  }\n   ..\n  256      std::basic_ostringstream<Char> os;\n  257      // os << '[';\n  258:     os << to_string(a.x) << comma << to_string(a.y);\n  259:     os << sep << to_string(b.x);\n  260:     os << comma << to_string(b.y);\n  261:     os << '=' << to_string(length());\n  262:     // os << '@' << to_string(floor(angle()*180/ M_PI));\n  263      // os << ']';\n  264      return os.str();\n  ...\n  277  template <class T, class Char = char>\n  278  inline std::basic_string<Char>\n  279: to_string(const Line<T>& line) {\n  280    std::basic_string<Char> ret;\n  281    ret = line.str(\",\", \"|\");\n  ...\n  286  template <class ValueT, template <typename> typename Container = std::vector, class Char = char>\n  287  inline std::basic_string<Char>\n  288: to_string(const Container<Line<ValueT>>& lines) {\n  289    typedef typename Container<Line<ValueT>>::const_iterator iterator_type;\n  290    typedef Line<ValueT> value_type;\n  ...\n  294      if(ret.length())\n  295        ret += \" \";\n  296:     ret += to_string<ValueT, Char>(*it);\n  297    }\n  298    return ret;\n  ...\n  308      if(i++ > 0)\n  309        os << \" \";\n  310:     os << to_string(*it);\n  311    }\n  312    return os;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/matrix.h:\n   91  \n   92  inline std::string\n   93: to_string(const cv::Mat& mat) {\n   94    std::ostringstream oss;\n   95    oss << \"rows: \" << mat.rows;\n   ..\n  114  inline std::basic_ostream<Char>&\n  115  operator<<(std::basic_ostream<Char>& os, const Matrix<Value>& m) {\n  116:   os << to_string(m) << std::endl;\n  117  }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/opencv_test.cpp:\n   85            servoController->MovePanServoBy(difference[0] * 0.08);\n   86            servoController->MoveTiltServoBy(-difference[1] * 0.08);\n   87:           // putText(frame, boost::to_string(difference[0]) + \", \" + boost::to_string(difference[1]), Point(50,50),\n   88:           // FONT_HERSHEY_SIMPLEX, 1, Scalar(0,200,200), 4);  putText(frame, boost::to_string(frameCenter.x) + \", \" +\n   89:           // boost::to_string(frameCenter.y), Point(50,50), FONT_HERSHEY_SIMPLEX, 1, Scalar(0,200,200), 4);\n   90          }\n   91          counter = 0;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/simple_svg_writer.h:\n   11  //-----------------------------------------------------------------------------\n   12  inline std::string\n   13: to_string(double value) {\n   14    std::stringstream s;\n   15    s << value;\n   ..\n   24  public:\n   25    Attribute(std::string name, std::string value) : name(name), value(value) {}\n   26:   Attribute(std::string name, double value) : name(name), value(to_string(value)) {}\n   27:   Attribute(std::string name, int32_t value) : name(name), value(std::to_string(value)) {}\n   28    Attribute(std::string name, bool value) : name(name), value(value ? \"true\" : \"false\") {}\n   29  \n   ..\n  432    Document() : GroupBase(\"svg\", {{\"xmlns\", std::string(\"http://www.w3.org/2000/svg\")}, {\"xmlns:xlink\", std::string(\"http://www.w3.org/1999/xlink\")}, {\"xmlns:inkscape\", std::string(\"http://www.inkscape.org/namespaces/inkscape\")}}) {}\n  433    Document(double width, double height)\n  434:       : GroupBase(\"svg\", {{\"width\", to_string(width)}, {\"height\", to_string(height)}, {\"xmlns\", std::string(\"http://www.w3.org/2000/svg\")}, {\"xmlns:xlink\", std::string(\"http://www.w3.org/1999/xlink\")}, {\"xmlns:inkscape\", std::string(\"http://www.inkscape.org/namespaces/inkscape\")}}) {}\n  435    virtual ~Document() override {}\n  436  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/tracking_by_matching.cpp:\n  211      for(const auto& detection : tracker->trackedDetections()) {\n  212        cv::rectangle(frame, detection.rect, cv::Scalar(0, 0, 255), 3);\n  213:       std::string text = std::to_string(detection.object_id) + \" conf: \" + std::to_string(detection.confidence);\n  214        cv::putText(frame, text, detection.rect.tl(), cv::FONT_HERSHEY_COMPLEX, 1.0, cv::Scalar(0, 0, 255), 3);\n  215      }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/usb_alexnet.cpp:\n  119  \n  120      s1 = classNames.at(classId);\n  121:     s2 = \"Probabilite \" + std::to_string(classProb * 100) + \" %\";\n  122  \n  123      texte(matImg, s1, 0, 15);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/utils.cpp:\n 1029        }\n 1030  \n 1031:       string det_name = \"others/deteval/det_\" + to_string(thresh_step) + \"_\" + to_string(min_area) + \".xml\";\n 1032        save_deteval_xml(det_text, det_name);\n 1033      }\n\n55 matches across 17 files\n\n\nSearching 803 files for \"rows:\" (regex)\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/matrix.h:\n  281  to_string(const cv::Mat& mat) {\n  282    std::ostringstream oss;\n  283:   oss << \"rows: \" << mat.rows;\n  284    oss << \" cols: \" << mat.cols;\n  285    for(int i = 0; i < mat.rows; ++i) {\n\n/usr/include/opencv4/opencv2/core/mat.hpp:\n  776  smaller, which is especially noticeable in case of small matrices.\n  777  \n  778: Finally, there are STL-style iterators that are smart enough to skip gaps between successive rows:\n  779  @code\n  780      // compute sum of positive matrix elements, iterator-based variant\n\n/usr/include/opencv4/opencv2/core/persistence.hpp:\n   83      %YAML:1.0\n   84      A: !!opencv-matrix\n   85:       rows: 3\n   86        cols: 3\n   87        dt: f\n   ..\n  165  calibrationDate: \"Fri Jun 17 14:09:29 2011\\n\"\n  166  cameraMatrix: !!opencv-matrix\n  167:    rows: 3\n  168     cols: 3\n  169     dt: d\n  170     data: [ 1000., 0., 320., 0., 1000., 240., 0., 0., 1. ]\n  171  distCoeffs: !!opencv-matrix\n  172:    rows: 5\n  173     cols: 1\n  174     dt: d\n\n5 matches across 3 files\n\n\nSearching 803 files for \"\", \"\" (regex)\n\n/home/roman/Dokumente/Sources/contours/plot-cv/data.cpp:\n   90      //\tcout << \"Drawing line: \" << i << endl;\n   91      /*\t} else {\n   92:             cout << \"Point of polygon: \" << (int)p.x << \", \" << (int) p.y<< endl;\n   93              cout << \"Step: \" << i << \" is invalid.\" << endl;\n   94              cout << \"Scalaire: \" << scalar << endl;\n   95:             cout << \"Gradient: \" << gradx << \", \" << grady << endl;\n   96:             cout << \"Normale: \" << nx << \", \" << ny << endl;\n   97              cout << \"Curvature: \" <<curv << endl;\n   98              cout << \"g : \" << g << endl;\n   99:             cout << \"Point: \" << nextP.x << \", \" << nextP.y << endl;\n  100          }*/\n  101:     // cout << \"Step i: \" <<p.x <<\", \" << p.y << endl;\n  102    }\n  103    imshow(\"images\", copyImage);\n  ...\n  168  computeGradient(const Mat& I) {\n  169    int m = I.rows, n = I.cols;\n  170:   cout << m << \", \" << n << endl;\n  171    Mat Ix(m, n, CV_32F), Iy(m, n, CV_32F);\n  172    for(int i = 0; i < m; i++) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/polygon.cpp:\n   86      double y = normales[i](1);\n   87      Point2d p(20 * x + regularPoints[i].x, 20 * y + regularPoints[i].y);\n   88:     // cout << p.x <<\", \" << p.y << endl;\n   89      line(Image, regularPoints[i], p, Scalar(0, 0, 255));\n   90    }\n   ..\n   99      double y = normales[i](1);\n  100      Point2d p(600 * curvature[i] * x + regularPoints[i].x, 600 * curvature[i] * y + regularPoints[i].y);\n  101:     // cout << p.x <<\", \" << p.y << endl;\n  102      line(Image, regularPoints[i], p, Scalar(255, 120, 255));\n  103    }\n  ...\n  252    }\n  253    if(found) {\n  254:     cout << \"Found loop: \" << cut1 << \", \" << cut2 << endl;\n  255      // waitKey();\n  256      if(cut2 < cut1) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/7.Track.cpp:\n   60                   Threshold_Convert); // Ham thuc thi khi keo thanh truot\n   61    // Tao trackbar de chon gia tri nguong\n   62:   createTrackbar(\"Gia tri nguong\", \"Camera\", &threshold_value, max_value, Threshold_Convert);\n   63    // Bat khung hinh dau tien cho trackbar\n   64    Camera_capture();\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/BGMain_Raspberry.cpp:\n  110  saveConfig() {\n  111    CvFileStorage* fs = cvOpenFileStorage(config_xml.c_str(), 0, CV_STORAGE_WRITE);\n  112:   cvWriteString(fs, \"commit_camera\", \"启动哪个摄像头，默认0\");\n  113    cvWriteInt(fs, \"CAMERA_NUM\", CAMERA_NUM);\n  114:   cvWriteString(fs, \"commit_X\", \"左上角x坐标\");\n  115    cvWriteInt(fs, \"LEFT_TOP_X\", LEFT_TOP_X);\n  116:   cvWriteString(fs, \"commit_Y\", \"左上角y坐标\");\n  117    cvWriteInt(fs, \"LEFT_TOP_Y\", LEFT_TOP_Y);\n  118:   cvWriteString(fs, \"commit_BX\", \"右下角x坐标\");\n  119    cvWriteInt(fs, \"RIGHT_BOTTOM_X\", RIGHT_BOTTOM_X);\n  120:   cvWriteString(fs, \"commit_BY\", \"右下角y坐标\");\n  121    cvWriteInt(fs, \"RIGHT_BOTTOM_Y\", RIGHT_BOTTOM_Y);\n  122:   cvWriteString(fs, \"commit_show\", \"是否显示图像以及打印终端信息\");\n  123    cvWriteInt(fs, \"showOutput\", showOutput);\n  124  \n  125:   cvWriteString(fs, \"commit_mode2\", \"是否设置为人体扫描模式\");\n  126    cvWriteInt(fs, \"modeScan\", modeScan);\n  127:   cvWriteString(fs, \"commit_mode4\", \"格子检测的另一种方法, 1使用普通USB摄像头，2表示需要进行额外初始化的摄像头\");\n  128    cvWriteInt(fs, \"modeGrid2\", modeGrid2);\n  129:   cvWriteString(fs, \"commit_brightness\", \"洛日摄像头的亮度设置0-64\");\n  130    cvWriteInt(fs, \"camera_BRIGHTNESS\", camera_BRIGHTNESS);\n  131:   cvWriteString(fs, \"commit_gain\", \"洛日摄像头的增益设置0-100\");\n  132    cvWriteInt(fs, \"camera_GAIN\", camera_GAIN);\n  133  \n  134:   cvWriteString(fs, \"row_resolution_commit\", \"定义格子的横向精度，是一个百分比值1-100，同时需要将modeScan设置为1，建议取可以被100整除的值\");\n  135    cvWriteInt(fs, \"row_resolution\", row_resolution);\n  136:   cvWriteString(fs, \"col_resolution_commit\", \"定义格子的竖向精度，是一个百分比值1-100\");\n  137    cvWriteInt(fs, \"col_resolution\", col_resolution);\n  138:   cvWriteString(fs, \"image_fliped_direc_commit\", \"定义原始图像翻转的形式，0: 沿横向x轴翻转, 1: 沿竖向y轴翻转, -1: x、y轴同时翻转, -2不进行翻转\");\n  139    cvWriteInt(fs, \"image_fliped_direc\", image_fliped_direc);\n  140:   cvWriteString(fs, \"g_medianBlurGridThresh_commit\", \"图像滤波因子，数值越大则过滤越好\");\n  141    cvWriteInt(fs, \"g_medianBlurGridThresh\", g_medianBlurGridThresh);\n  142    cvWriteInt(fs, \"histMinValue\", histMinValue);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/CV.cpp:\n   18  \n   19    while(true) {\n   20:     cv::createTrackbar(\"upperH\", \"dst\", &upperH, 255);\n   21:     cv::createTrackbar(\"upperS\", \"dst\", &upperS, 255);\n   22:     cv::createTrackbar(\"upperV\", \"dst\", &upperV, 255);\n   23  \n   24:     cv::createTrackbar(\"lowerH\", \"dst\", &lowerH, 255);\n   25:     cv::createTrackbar(\"lowerS\", \"dst\", &lowerS, 255);\n   26:     cv::createTrackbar(\"lowerV\", \"dst\", &lowerV, 255);\n   27  \n   28      vcore.setBounds(cv::Scalar(lowerH, lowerS, lowerV), cv::Scalar(upperH, upperS, upperV));\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/CannyWebcam1.cpp:\n  687    cv::namedWindow(\"imgCanny\", CV_WINDOW_AUTOSIZE);\n  688    // cv::namedWindow(\"imgGrayscale\", CV_WINDOW_AUTOSIZE);\n  689:   cv::createTrackbar(\"epsilon\", \"contours\", &eps, 7, trackbar, (void*)\"eps\");\n  690:   cv::createTrackbar(\"blur\", \"contours\", &blur, 7, trackbar, (void*)\"blur\");\n  691  \n  692    while(charCheckForEscKey != 27 /*&& capWebcam.isOpened()*/) { // until the Esc key is pressed or webcam connection is lost\n  ...\n  948  \n  949        //      unlink(\"contour.svg\");\n  950:       rename(\"contour.svg.tmp\", \"contour.svg\");\n  951  \n  952        vector<PointVec> squares;\n  ...\n  990        // cv::imshow(\"imgGrayscale\", imgBlurred); //\n  991  \n  992:       // cv::createTrackbar(\"Thre\", \"demoProc\", &thresholdValue, 255, &trackbar);\n  993  \n  994        charCheckForEscKey = cv::waitKey(100); // delay (in ms) and get key press, if any\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/Contour_detection.cpp:\n   35    imshow(source_window, src);\n   36  \n   37:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   38    thresh_callback(0, 0);\n   39  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/ObjectProcessor.cpp:\n  389    namedWindow(source_window, WINDOW_AUTOSIZE); // using canny algorithm from openCV\n  390    imshow(source_window, src);\n  391:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, contour_figure);\n  392    contour_figure(0, 0); // call reference function\n  393    waitKey(0);           // program exits when user presses ENTER\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/Threshold_inRange.cpp:\n   35    //! [trackbar]\n   36    //-- Trackbars to set thresholds for RGB values\n   37:   createTrackbar(\"Low R\", \"Object Detection\", &low_r, 255, on_low_r_thresh_trackbar);\n   38:   createTrackbar(\"High R\", \"Object Detection\", &high_r, 255, on_high_r_thresh_trackbar);\n   39:   createTrackbar(\"Low G\", \"Object Detection\", &low_g, 255, on_low_g_thresh_trackbar);\n   40:   createTrackbar(\"High G\", \"Object Detection\", &high_g, 255, on_high_g_thresh_trackbar);\n   41:   createTrackbar(\"Low B\", \"Object Detection\", &low_b, 255, on_low_b_thresh_trackbar);\n   42:   createTrackbar(\"High B\", \"Object Detection\", &high_b, 255, on_high_b_thresh_trackbar);\n   43    //! [trackbar]\n   44    while((char)waitKey(1) != 'q') {\n   ..\n   63  on_low_r_thresh_trackbar(int, void*) {\n   64    low_r = min(high_r - 1, low_r);\n   65:   setTrackbarPos(\"Low R\", \"Object Detection\", low_r);\n   66  }\n   67  //! [low]\n   ..\n   71  on_high_r_thresh_trackbar(int, void*) {\n   72    high_r = max(high_r, low_r + 1);\n   73:   setTrackbarPos(\"High R\", \"Object Detection\", high_r);\n   74  }\n   75  //![high]\n   ..\n   78  on_low_g_thresh_trackbar(int, void*) {\n   79    low_g = min(high_g - 1, low_g);\n   80:   setTrackbarPos(\"Low G\", \"Object Detection\", low_g);\n   81  }\n   82  \n   ..\n   85  on_high_g_thresh_trackbar(int, void*) {\n   86    high_g = max(high_g, low_g + 1);\n   87:   setTrackbarPos(\"High G\", \"Object Detection\", high_g);\n   88  }\n   89  \n   ..\n   92  on_low_b_thresh_trackbar(int, void*) {\n   93    low_b = min(high_b - 1, low_b);\n   94:   setTrackbarPos(\"Low B\", \"Object Detection\", low_b);\n   95  }\n   96  \n   ..\n   99  on_high_b_thresh_trackbar(int, void*) {\n  100    high_b = max(high_b, low_b + 1);\n  101:   setTrackbarPos(\"High B\", \"Object Detection\", high_b);\n  102  }\n  103  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/a.cpp:\n  150  \n  151    namedWindow(\"MORPH\", CV_WINDOW_NORMAL);\n  152:   createTrackbar(\"morph_pixel\", \"MORPH\", &morph_pixel, 20);\n  153  \n  154    namedWindow(\"ColorField\", CV_WINDOW_NORMAL);\n  155:   createTrackbar(\"Y1\", \"ColorField\", &Y1, 255);\n  156:   createTrackbar(\"Cr1\", \"ColorField\", &Cr1, 255);\n  157:   createTrackbar(\"Cb1\", \"ColorField\", &Cb1, 255);\n  158:   createTrackbar(\"Y2\", \"ColorField\", &Y2, 255);\n  159:   createTrackbar(\"Cr2\", \"ColorField\", &Cr2, 255);\n  160:   createTrackbar(\"Cb2\", \"ColorField\", &Cb2, 255);\n  161  \n  162    namedWindow(\"Circle\", CV_WINDOW_NORMAL);\n  163:   createTrackbar(\"acc_res\", \"Circle\", &acc_res, 255);\n  164:   createTrackbar(\"min_dis\", \"Circle\", &min_dis, 255);\n  165:   createTrackbar(\"high_thres\", \"Circle\", &high_thres, 255);\n  166:   createTrackbar(\"low_thres\", \"Circle\", &low_thres, 255);\n  167:   createTrackbar(\"min_rad\", \"Circle\", &min_rad, 255);\n  168:   createTrackbar(\"max_rad\", \"Circle\", &max_rad, 1000);\n  169  \n  170    while(charCheckForEscKey != 27 && cap.isOpened()) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/aruco_ar_demo.cpp:\n   41    Ptr<ovis::WindowScene> win = ovis::createWindow(String(\"arucoAR\"), imsize, ovis::SCENE_INTERACTIVE | ovis::SCENE_AA);\n   42    win->setCameraIntrinsics(K, imsize);\n   43:   win->createEntity(\"sinbad\", \"Sinbad.mesh\", Vec3i(0, 0, 5), Vec3f(1.57, 0.0, 0.0));\n   44    win->createLightEntity(\"sun\", Vec3i(0, 0, 100));\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/aruco_simple.cpp:\n  144      iThresParam1 = ThresParam1;\n  145      iThresParam2 = ThresParam2;\n  146:     cv::createTrackbar(\"ThresParam1\", \"in\", &iThresParam1, 13, cvTackBarEvents);\n  147:     cv::createTrackbar(\"ThresParam2\", \"in\", &iThresParam2, 13, cvTackBarEvents);\n  148  \n  149      char key = 0;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/camshift.cpp:\n   91    cv::namedWindow(\"CamShift Demo\", cv::WINDOW_NORMAL);\n   92    cv::setMouseCallback(\"CamShift Demo\", onMouse);\n   93:   cv::createTrackbar(\"Vmin\", \"CamShift Demo\", &vmin, 256);\n   94:   cv::createTrackbar(\"Vmax\", \"CamShift Demo\", &vmax, 256);\n   95:   cv::createTrackbar(\"Smin\", \"CamShift Demo\", &smin, 256);\n   96  \n   97    cv::Mat frame, histimg(200, 320, CV_8UC3, cv::Scalar::all(0));\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/camshiftdemo.cpp:\n   88    namedWindow(\"CamShift Demo\", 0);\n   89    setMouseCallback(\"CamShift Demo\", onMouse, 0);\n   90:   createTrackbar(\"Vmin\", \"CamShift Demo\", &vmin, 256, 0);\n   91:   createTrackbar(\"Vmax\", \"CamShift Demo\", &vmax, 256, 0);\n   92:   createTrackbar(\"Smin\", \"CamShift Demo\", &smin, 256, 0);\n   93  \n   94    Mat frame, hsv, hue, mask, hist, histimg = Mat::zeros(200, 320, CV_8UC3), backproj;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cap_aravis.cpp:\n  546    if(init_buffers()) {\n  547      arv_camera_set_acquisition_mode(camera, ARV_ACQUISITION_MODE_CONTINUOUS);\n  548:     arv_device_set_string_feature_value(arv_camera_get_device(camera), \"TriggerMode\", \"Off\");\n  549      arv_camera_start_acquisition(camera);\n  550  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cap_gstreamer.cpp:\n  623    if(!caps || !(GST_IS_CAPS(caps.get()))) {\n  624      if(type == G_TYPE_INT) {\n  625:       caps.attach(gst_caps_new_simple(\"video/x-raw\", \"format\", G_TYPE_STRING, \"BGR\", prop, type, v1, NULL));\n  626      } else {\n  627:       caps.attach(gst_caps_new_simple(\"video/x-raw\", \"format\", G_TYPE_STRING, \"BGR\", prop, type, v1, v2, NULL));\n  628      }\n  629    } else {\n  ...\n 1444  \n 1445      // create encodebin profile\n 1446:     containerprofile.attach(gst_encoding_container_profile_new(\"container\", \"container\", containercaps.get(), NULL));\n 1447      videoprofile.reset(gst_encoding_video_profile_new(videocaps.get(), NULL, NULL, 1));\n 1448      gst_encoding_container_profile_add_profile(containerprofile.get(), (GstEncodingProfile*)videoprofile.get());\n ....\n 1460    if(fourcc == CV_FOURCC('M', 'J', 'P', 'G') && frameSize.height == 1) {\n 1461      input_pix_fmt = GST_VIDEO_FORMAT_ENCODED;\n 1462:     caps.attach(gst_caps_new_simple(\"image/jpeg\", \"framerate\", GST_TYPE_FRACTION, int(fps_num), int(fps_denom), NULL));\n 1463      caps.attach(gst_caps_fixate(caps.detach()));\n 1464    } else if(is_color) {\n ....\n 1466      bufsize = frameSize.width * frameSize.height * 3;\n 1467  \n 1468:     caps.attach(gst_caps_new_simple(\"video/x-raw\", \"format\", G_TYPE_STRING, \"BGR\", \"width\", G_TYPE_INT, frameSize.width, \"height\", G_TYPE_INT, frameSize.height, \"framerate\", GST_TYPE_FRACTION, gint(fps_num), gint(fps_denom), NULL));\n 1469      CV_Assert(caps);\n 1470      caps.attach(gst_caps_fixate(caps.detach()));\n ....\n 1474      bufsize = frameSize.width * frameSize.height;\n 1475  \n 1476:     caps.attach(gst_caps_new_simple(\"video/x-raw\", \"format\", G_TYPE_STRING, \"GRAY8\", \"width\", G_TYPE_INT, frameSize.width, \"height\", G_TYPE_INT, frameSize.height, \"framerate\", GST_TYPE_FRACTION, gint(fps_num), gint(fps_denom), NULL));\n 1477      caps.attach(gst_caps_fixate(caps.detach()));\n 1478    }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cap_mjpeg_decoder.cpp:\n   95  struct AviStreamHeader {\n   96    uint32_t fccType;            // 'vids', 'auds', 'txts'...\n   97:   uint32_t fccHandler;         // \"cvid\", \"DIB \"\n   98    DWORD dwFlags;               // 0\n   99    DWORD dwPriority;            // 0\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cap_pvapi.cpp:\n  324      case CV_CAP_PROP_PVAPI_MULTICASTIP:\n  325        if(value == -1) {\n  326:         if((PvAttrEnumSet(Camera.Handle, \"MulticastEnable\", \"Off\") == ePvErrSuccess))\n  327            break;\n  328          else\n  ...\n  330        } else {\n  331          cv::String ip = cv::format(\"%d.%d.%d.%d\", ((unsigned int)value >> 24) & 255, ((unsigned int)value >> 16) & 255, ((unsigned int)value >> 8) & 255, (unsigned int)value & 255);\n  332:         if((PvAttrEnumSet(Camera.Handle, \"MulticastEnable\", \"On\") == ePvErrSuccess) && (PvAttrStringSet(Camera.Handle, \"MulticastIPAddress\", ip.c_str()) == ePvErrSuccess))\n  333            break;\n  334          else\n  ...\n  342      case CV_CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE:\n  343        if(value == 0)\n  344:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"Freerun\");\n  345        else if(value == 1)\n  346:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"SyncIn1\");\n  347        else if(value == 2)\n  348:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"SyncIn2\");\n  349        else if(value == 3)\n  350:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"FixedRate\");\n  351        else if(value == 4)\n  352:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"Software\");\n  353        else\n  354          error = ePvErrOutOfRange;\n  ...\n  445  \n  446    // Set the camera to capture continuously\n  447:   if(PvAttrEnumSet(Camera.Handle, \"AcquisitionMode\", \"Continuous\") != ePvErrSuccess) {\n  448      fprintf(stderr, \"Could not set PvAPI Acquisition Mode\\n\");\n  449      return false;\n  ...\n  455    }\n  456  \n  457:   if(PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"Freerun\") != ePvErrSuccess) {\n  458      fprintf(stderr, \"Error setting PvAPI trigger to \\\"Freerun\\\"\");\n  459      return false;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cascadeclassifier.cpp:\n  214        Rect* faceRects = useGPU ? faces_downloaded.ptr<Rect>() : &facesBuf_cpu[0];\n  215        for(int i = 0; i < min(detections_num, 2); ++i) {\n  216:         cout << \", [\" << setw(4) << faceRects[i].x << \", \" << setw(4) << faceRects[i].y << \", \" << setw(4) << faceRects[i].width << \", \" << setw(4) << faceRects[i].height << \"]\";\n  217        }\n  218      }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/clahe.cpp:\n   49  \n   50    namedWindow(\"CLAHE\");\n   51:   createTrackbar(\"Tile Size\", \"CLAHE\", &tilesize, 32, (TrackbarCallback)TSize_Callback);\n   52:   createTrackbar(\"Clip Limit\", \"CLAHE\", &cliplimit, 20, (TrackbarCallback)Clip_Callback);\n   53  \n   54    UMat frame, outframe;\n   ..\n   60    cur_clip = (int)pFilter->getClipLimit();\n   61    cur_tilesize = pFilter->getTilesGridSize();\n   62:   setTrackbarPos(\"Tile Size\", \"CLAHE\", cur_tilesize.width);\n   63:   setTrackbarPos(\"Clip Limit\", \"CLAHE\", cur_clip);\n   64  \n   65    if(!infile.empty()) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code10-3.cpp:\n   18    switch(rgb_slider) {\n   19      case 0:\n   20:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   21:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   22        break;\n   23      case 1:\n   24:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   25:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   26        break;\n   27      case 2:\n   28:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   29:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   30        break;\n   31    }\n   ..\n   37      case 0:\n   38        low_r = min(high_slider - 1, low_slider);\n   39:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   40        break;\n   41      case 1:\n   42        low_g = min(high_slider - 1, low_slider);\n   43:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   44        break;\n   45      case 2:\n   46        low_b = min(high_slider - 1, low_slider);\n   47:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   48        break;\n   49    }\n   ..\n   55      case 0:\n   56        high_r = max(low_slider + 1, high_slider);\n   57:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   58        break;\n   59      case 1:\n   60        high_g = max(low_slider + 1, high_slider);\n   61:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   62        break;\n   63      case 2:\n   64        high_b = max(low_slider + 1, high_slider);\n   65:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   66        break;\n   67    }\n   ..\n   77    namedWindow(\"Segmentation\");\n   78  \n   79:   createTrackbar(\"0. R\\n1. G\\n2.B\", \"Segmentation\", &rgb_slider, 2, on_rgb_trackbar);\n   80:   createTrackbar(\"Low threshold\", \"Segmentation\", &low_slider, 255, on_low_thresh_trackbar);\n   81:   createTrackbar(\"High threshold\", \"Segmentation\", &high_slider, 255, on_high_thresh_trackbar);\n   82  \n   83    double time = 0;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code5-7.cpp:\n   18    switch(rgb_slider) {\n   19      case 0:\n   20:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   21:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   22        break;\n   23      case 1:\n   24:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   25:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   26        break;\n   27      case 2:\n   28:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   29:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   30        break;\n   31    }\n   ..\n   37      case 0:\n   38        low_r = min(high_slider - 1, low_slider);\n   39:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   40        break;\n   41      case 1:\n   42        low_g = min(high_slider - 1, low_slider);\n   43:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   44        break;\n   45      case 2:\n   46        low_b = min(high_slider - 1, low_slider);\n   47:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   48        break;\n   49    }\n   ..\n   55      case 0:\n   56        high_r = max(low_slider + 1, high_slider);\n   57:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   58        break;\n   59      case 1:\n   60        high_g = max(low_slider + 1, high_slider);\n   61:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   62        break;\n   63      case 2:\n   64        high_b = max(low_slider + 1, high_slider);\n   65:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   66        break;\n   67    }\n   ..\n   85    namedWindow(\"Segmentation\");\n   86  \n   87:   createTrackbar(\"0. R\\n1. G\\n2.B\", \"Segmentation\", &rgb_slider, 2, on_rgb_trackbar);\n   88:   createTrackbar(\"Low threshold\", \"Segmentation\", &low_slider, 255, on_low_thresh_trackbar);\n   89:   createTrackbar(\"High threshold\", \"Segmentation\", &high_slider, 255, on_high_thresh_trackbar);\n   90  \n   91    double time = 0;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code5-8.cpp:\n   18    switch(rgb_slider) {\n   19      case 0:\n   20:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   21:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   22        break;\n   23      case 1:\n   24:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   25:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   26        break;\n   27      case 2:\n   28:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   29:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   30        break;\n   31    }\n   ..\n   37      case 0:\n   38        low_r = min(high_slider - 1, low_slider);\n   39:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   40        break;\n   41      case 1:\n   42        low_g = min(high_slider - 1, low_slider);\n   43:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   44        break;\n   45      case 2:\n   46        low_b = min(high_slider - 1, low_slider);\n   47:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   48        break;\n   49    }\n   ..\n   55      case 0:\n   56        high_r = max(low_slider + 1, high_slider);\n   57:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   58        break;\n   59      case 1:\n   60        high_g = max(low_slider + 1, high_slider);\n   61:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   62        break;\n   63      case 2:\n   64        high_b = max(low_slider + 1, high_slider);\n   65:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   66        break;\n   67    }\n   ..\n   83    namedWindow(\"Segmentation\");\n   84  \n   85:   createTrackbar(\"0. R\\n1. G\\n2.B\", \"Segmentation\", &rgb_slider, 2, on_rgb_trackbar);\n   86:   createTrackbar(\"Low threshold\", \"Segmentation\", &low_slider, 255, on_low_thresh_trackbar);\n   87:   createTrackbar(\"High threshold\", \"Segmentation\", &high_slider, 255, on_high_thresh_trackbar);\n   88  \n   89    while(char(waitKey(1)) != 'q' && cap.isOpened()) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code6-1.cpp:\n   34    namedWindow(\"Contours\", CV_WINDOW_AUTOSIZE);\n   35  \n   36:   createTrackbar(\"Levels\", \"Contours\", &levels, 15, on_trackbar);\n   37  \n   38    on_trackbar(0, 0);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code7-1.cpp:\n   17    switch(hs_slider) {\n   18      case 0:\n   19:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_h);\n   20:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_h);\n   21        break;\n   22      case 1:\n   23:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_s);\n   24:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_s);\n   25        break;\n   26    }\n   ..\n   32      case 0:\n   33        low_h = min(high_slider - 1, low_slider);\n   34:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_h);\n   35        break;\n   36      case 1:\n   37        low_s = min(high_slider - 1, low_slider);\n   38:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_s);\n   39        break;\n   40    }\n   ..\n   46      case 0:\n   47        high_h = max(low_slider + 1, high_slider);\n   48:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_h);\n   49        break;\n   50      case 1:\n   51        high_s = max(low_slider + 1, high_slider);\n   52:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_s);\n   53        break;\n   54    }\n   ..\n   70    namedWindow(\"Segmentation\");\n   71  \n   72:   createTrackbar(\"0. H\\n1. S\", \"Segmentation\", &hs_slider, 1, on_hs_trackbar);\n   73:   createTrackbar(\"Low threshold\", \"Segmentation\", &low_slider, 255, on_low_thresh_trackbar);\n   74:   createTrackbar(\"High threshold\", \"Segmentation\", &high_slider, 255, on_high_thresh_trackbar);\n   75  \n   76    while(char(waitKey(1)) != 'q' && cap.isOpened()) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code7-2.cpp:\n   59    namedWindow(\"Segmentation\");\n   60  \n   61:   createTrackbar(\"Low Diff\", \"Segmentation\", &low_diff, 50, on_low_diff_trackbar);\n   62:   createTrackbar(\"High Diff \", \"Segmentation\", &high_diff, 50, on_high_diff_trackbar);\n   63  \n   64    setMouseCallback(\"Video\", on_mouse);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code9-6.cpp:\n   39    disparity* disp_obj = (disparity*)_disp_obj;\n   40    num_disp = (num_disp / 16) * 16;\n   41:   setTrackbarPos(\"numDisparity\", \"Disparity\", num_disp);\n   42    disp_obj->set_numDisp(num_disp);\n   43  }\n   ..\n   80    namedWindow(\"Disparity\", CV_WINDOW_NORMAL);\n   81    namedWindow(\"Left\", CV_WINDOW_NORMAL);\n   82:   createTrackbar(\"minDisparity + 30\", \"Disparity\", &min_disp, 60, on_minDisp, (void*)this);\n   83:   createTrackbar(\"numDisparity\", \"Disparity\", &num_disp, 150, on_numDisp, (void*)this);\n   84  \n   85    on_minDisp(min_disp, this);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code9-7.cpp:\n   39    disparity* disp_obj = (disparity*)_disp_obj;\n   40    num_disp = (num_disp / 16) * 16;\n   41:   setTrackbarPos(\"numDisparity\", \"Disparity\", num_disp);\n   42    disp_obj->set_numDisp(num_disp);\n   43  }\n   ..\n   79    namedWindow(\"Disparity\", CV_WINDOW_NORMAL);\n   80    namedWindow(\"Left\", CV_WINDOW_NORMAL);\n   81:   createTrackbar(\"minDisparity + 30\", \"Disparity\", &min_disp, 60, on_minDisp, (void*)this);\n   82:   createTrackbar(\"numDisparity\", \"Disparity\", &num_disp, 150, on_numDisp, (void*)this);\n   83  \n   84    on_minDisp(min_disp, this);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/connected_components.cpp:\n   62  \n   63    namedWindow(\"Connected Components\", 1);\n   64:   createTrackbar(\"Threshold\", \"Connected Components\", &threshval, 255, on_trackbar);\n   65    on_trackbar(threshval, 0);\n   66  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/contours.cpp:\n   31    imshow(source_window, src);\n   32  \n   33:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   34    thresh_callback(0, 0);\n   35  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/contours2.cpp:\n   66    for(size_t k = 0; k < contours0.size(); k++) approxPolyDP(cv::Mat(contours0[k]), contours[k], 3, true);\n   67    namedWindow(\"contours\", 1);\n   68:   createTrackbar(\"levels+3\", \"contours\", &levels, 7, on_trackbar);\n   69    on_trackbar(0, 0);\n   70    waitKey();\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/contours4.cpp:\n   34    imshow(source_window, src);\n   35  \n   36:   createTrackbar(\" Threshold:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   37    thresh_callback(0, 0);\n   38  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/findContours_demo.cpp:\n   45    imshow(source_window, src);\n   46  \n   47:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   48    thresh_callback(0, 0);\n   49  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/findLaserPoint.cpp:\n  102    // cvNamedWindow(\"demoProc\",0);\n  103    cvNamedWindow(\"demoMap\", 1);\n  104:   createTrackbar(\"Thre\", \"demoProc\", &thresholdValue, 255, trackbar);\n  105    // createTrackbar(\"Thre\",\"demoHSV\",&thresholdValueHSV,255,trackbar2);\n  106    setMouseCallback(\"demoRaw\", mouseCall1);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/fitellipse.cpp:\n   50  \n   51    // Create toolbars. HighGUI use.\n   52:   createTrackbar(\"threshold\", \"result\", &sliderPos, 255, processImage);\n   53    processImage(0, 0);\n   54  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/generalContours_demo1.cpp:\n   41    imshow(source_window, src);\n   42  \n   43:   createTrackbar(\" Threshold:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   44    thresh_callback(0, 0);\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/generalContours_demo2.cpp:\n   41    imshow(source_window, src);\n   42  \n   43:   createTrackbar(\" Threshold:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   44    thresh_callback(0, 0);\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/glsl-test.cpp:\n   55    auto totstart = steady_clock::now();\n   56    cv::Mat image, out;\n   57:   // FILE *fp = fopen(\"log.txt\", \"w\");\n   58  \n   59  #if(CV_MAJOR_VERSION < 3)\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/hog.cpp:\n  235    cout << \"Scale: \" << scale << endl;\n  236    if(args.resize_src)\n  237:     cout << \"Resized source: (\" << args.width << \", \" << args.height << \")\\n\";\n  238    cout << \"Group threshold: \" << gr_threshold << endl;\n  239    cout << \"Levels number: \" << nlevels << endl;\n  240    cout << \"Win width: \" << args.win_width << endl;\n  241:   cout << \"Win stride: (\" << args.win_stride_width << \", \" << args.win_stride_height << \")\\n\";\n  242    cout << \"Hit threshold: \" << hit_threshold << endl;\n  243    cout << \"Gamma correction: \" << gamma_corr << endl;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/hull_demo.cpp:\n   41    imshow(source_window, src);\n   42  \n   43:   createTrackbar(\" Threshold:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   44    thresh_callback(0, 0);\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/images.cpp:\n   23    Data* D = (Data*)p;\n   24    D->polygon.addPoint(m1);\n   25:   cout << \"Adding point: (\" << x << \", \" << y << \")\" << endl;\n   26    D->polygon.drawPolygon(D->image.clone());\n   27  }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/intelperc_capture.cpp:\n  105    cout << \"  Saturation value = \" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE) << endl;\n  106    cout << \"  Confidence threshold = \" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD) << endl;\n  107:   cout << \"  Focal length = (\" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ) << \", \" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT) << \")\" << endl;\n  108    cout << \"Depth streams profiles:\" << endl;\n  109    for(size_t i = 0; i < profilesCount; i++) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/laplace.cpp:\n   47  \n   48    namedWindow(\"Laplacian\", 0);\n   49:   createTrackbar(\"Sigma\", \"Laplacian\", &sigma, 15, 0);\n   50  \n   51    Mat smoothed, laplace, result;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/line.h:\n  284  to_string(const Line<T>& line) {\n  285    std::basic_string<Char> ret;\n  286:   ret = line.str(\",\", \"|\");\n  287  \n  288    return ret;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/live_demo.cpp:\n  184  \n  185    namedWindow(\"Demo\");\n  186:   displayOverlay(\"Demo\", \"Press Ctrl+P to show property window\", 5000);\n  187  \n  188    // Thread trackbar\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/lock.cpp:\n   43  main(int argc, char* argv[]) {\n   44  \n   45:   // GPIO input_pin(\"17\", \"in\");\n   46    // std::cout << input_pin.read_value() << std::endl;\n   47  \n   ..\n   85        model->predict(image, label, confidence);\n   86  \n   87:       std::cout << \"Results: \" << label << \", \" << confidence << std::endl;\n   88  \n   89        // If a face is recognized and authorized\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/moments_demo.cpp:\n   41    imshow(source_window, src);\n   42  \n   43:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   44    thresh_callback(0, 0);\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/o_angle.cpp:\n  166      // pub_area.publish(msg_area); //20170420\n  167      // pub_if_image.publish(msg_if_image);\n  168:     // ROS_INFO_STREAM(\"cv::Point (\" << msg_xy_angle.x << \", \" << msg_xy_angle.y << \")\\tangle \" << msg_xy_angle.z << \"\\t\n  169      // Area \" << msg_area.data); //20170420\n  170      imshow(\"src\", src);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/obj_track.cpp:\n  102  \n  103    namedWindow(\"Params\", WINDOW_NORMAL);\n  104:   createTrackbar(\"medianBlur\", \"Params\", &medianBlurStrng, 35);\n  105:   createTrackbar(\"PrevBlur\", \"Params\", &BlurStrng, 10);\n  106:   createTrackbar(\"PostBlur\", \"Params\", &SecondBlurStrng, 10);\n  107  \n  108    switch(m) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/omxcv-test.cpp:\n   62    auto totstart = steady_clock::now();\n   63    cv::Mat image;\n   64:   // FILE *fp = fopen(\"log.txt\", \"w\");\n   65  \n   66    for(int i = 0; i < framecount; i++) {\n   ..\n   77    // fclose(fp);\n   78  \n   79:   // FILE *fp = fopen(\"Orig.rgb\", \"wb\");\n   80    // fwrite(image.data, 3 * image.cols * image.rows, 1, fp);\n   81    // fclose(fp);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/opencv_test.cpp:\n   85            servoController->MovePanServoBy(difference[0] * 0.08);\n   86            servoController->MoveTiltServoBy(-difference[1] * 0.08);\n   87:           // putText(frame, boost::to_string(difference[0]) + \", \" + boost::to_string(difference[1]), Point(50,50),\n   88:           // FONT_HERSHEY_SIMPLEX, 1, Scalar(0,200,200), 4);  putText(frame, boost::to_string(frameCenter.x) + \", \" +\n   89            // boost::to_string(frameCenter.y), Point(50,50), FONT_HERSHEY_SIMPLEX, 1, Scalar(0,200,200), 4);\n   90          }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/select3dobj.cpp:\n  491      if(boardFound && grabNext) {\n  492        if(box.empty()) {\n  493:         int code = select3DBox(\"View\", \"Selected Object\", frame, cameraMatrix, rvec, tvec, box);\n  494          if(code == -100)\n  495            break;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/simple_svg_1.0.0.hpp:\n  549    toString() const {\n  550      std::stringstream ss;\n  551:     ss << \"<?xml \" << attribute(\"version\", \"1.0\") << attribute(\"standalone\", \"no\") << \"?>\\n<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \"\n  552:        << \"\\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\\n<svg \" << attribute(\"width\", layout.dimensions.width, \"px\") << attribute(\"height\", layout.dimensions.height, \"px\") << attribute(\"xmlns\", \"http://www.w3.org/2000/svg\") << attribute(\"version\", \"1.1\") << \">\\n\"\n  553         << body_nodes_str << elemEnd(\"svg\");\n  554      return ss.str();\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/squares.cpp:\n  130  int\n  131  main(int /*argc*/, char** /*argv*/) {\n  132:   static const char* names[] = {\"pic1.png\", \"pic2.png\", \"pic3.png\", \"pic4.png\", \"pic5.png\", \"pic6.png\", 0};\n  133    help();\n  134    namedWindow(wndname, 1);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/targeting.cpp:\n   82    Mat newframe; // mat of the threshholded (threshheld?) image\n   83  \n   84:   cvCreateTrackbar(\"Threshold\", \"Threshold Image\", &thresh, 100, NULL);\n   85    for(;;) {\n   86  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/targeting2.cpp:\n  206    namedWindow(\"Threshold Image\", CV_WINDOW_KEEPRATIO);\n  207  \n  208:   cvCreateTrackbar(\"Threshold\", \"Threshold Image\", &thresh, 200, NULL);\n  209  }\n  210  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/tracking_calibration.cpp:\n  116          minMaxLoc(splitHsv[2], &lower[2], &upper[2]);\n  117  \n  118:         setTrackbarPos(\"H Low\", \"trackbar\", (int)lower[0]);\n  119:         setTrackbarPos(\"S Low\", \"trackbar\", (int)lower[1]);\n  120:         setTrackbarPos(\"V Low\", \"trackbar\", (int)lower[2]);\n  121  \n  122:         setTrackbarPos(\"H Up\", \"trackbar\", (int)upper[0]);\n  123:         setTrackbarPos(\"S Up\", \"trackbar\", (int)upper[1]);\n  124:         setTrackbarPos(\"V Up\", \"trackbar\", (int)upper[2]);\n  125  \n  126          saveROI = false;\n  ...\n  198    setMouseCallback(\"frame\", leftClick);\n  199  \n  200:   createTrackbar(\"H Low\", \"trackbar\", &intLow[0], 255, on_trackbar);\n  201:   createTrackbar(\"S Low\", \"trackbar\", &intLow[1], 255, on_trackbar);\n  202:   createTrackbar(\"V Low\", \"trackbar\", &intLow[2], 255, on_trackbar);\n  203  \n  204:   createTrackbar(\"H Up\", \"trackbar\", &intUp[0], 255, on_trackbar);\n  205:   createTrackbar(\"S Up\", \"trackbar\", &intUp[1], 255, on_trackbar);\n  206:   createTrackbar(\"V Up\", \"trackbar\", &intUp[2], 255, on_trackbar);\n  207  \n  208    ros::spin();\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/tracking_calibration_with_img.cpp:\n  107    setMouseCallback(\"frame\", leftClick);\n  108  \n  109:   createTrackbar(\"H Low\", \"trackbar\", &intLow[0], 255, on_trackbar);\n  110:   createTrackbar(\"S Low\", \"trackbar\", &intLow[1], 255, on_trackbar);\n  111:   createTrackbar(\"V Low\", \"trackbar\", &intLow[2], 255, on_trackbar);\n  112  \n  113:   createTrackbar(\"H Up\", \"trackbar\", &intUp[0], 255, on_trackbar);\n  114:   createTrackbar(\"S Up\", \"trackbar\", &intUp[1], 255, on_trackbar);\n  115:   createTrackbar(\"V Up\", \"trackbar\", &intUp[2], 255, on_trackbar);\n  116  \n  117    for(;;) {\n  ...\n  136          minMaxLoc(splitHsv[2], &lower[2], &upper[2]);\n  137  \n  138:         setTrackbarPos(\"H Low\", \"trackbar\", (int)lower[0]);\n  139:         setTrackbarPos(\"S Low\", \"trackbar\", (int)lower[1]);\n  140:         setTrackbarPos(\"V Low\", \"trackbar\", (int)lower[2]);\n  141  \n  142:         setTrackbarPos(\"H Up\", \"trackbar\", (int)upper[0]);\n  143:         setTrackbarPos(\"S Up\", \"trackbar\", (int)upper[1]);\n  144:         setTrackbarPos(\"V Up\", \"trackbar\", (int)upper[2]);\n  145  \n  146          saveROI = false;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/video.cpp:\n   63          msg.z = 1;\n   64          cout << \"x= \" << center[i].x << \", y= \" << center[i].y << endl;\n   65:         ROS_INFO_STREAM(\"Found a ball at (\" << msg.x << \", \" << msg.y << \")\");\n   66  \n   67        } // if\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/videocapture_intelperc.cpp:\n  102    cout << \"  Saturation value = \" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE) << endl;\n  103    cout << \"  Confidence threshold = \" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD) << endl;\n  104:   cout << \"  Focal length = (\" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ) << \", \" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT) << \")\" << endl;\n  105    cout << \"Depth streams profiles:\" << endl;\n  106    for(size_t i = 0; i < profilesCount; i++) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/warpPerspective_demo.cpp:\n   24  Mat warping(Mat image, Size warped_image_size, vector<Point2f> srcPoints, vector<Point2f> dstPoints);\n   25  String windowTitle = \"Perspective Transformation Demo\";\n   26: String labels[4] = {\"TL\", \"TR\", \"BR\", \"BL\"};\n   27  vector<Point2f> roi_corners;\n   28  vector<Point2f> dst_corners(4);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/webcam_demo.cpp:\n  124    int RECOGNITION = 0;\n  125  \n  126:   String region_types_str[2] = {\"ERStats\", \"MSER\"};\n  127:   String grouping_algorithms_str[2] = {\"exhaustive_search\", \"multioriented\"};\n  128:   String recognitions_str[2] = {\"Tesseract\", \"NM_chain_features + KNN\"};\n  129  \n  130    std::vector<cv::Mat> channels;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/tests.cpp:\n  887  \n  888      for(int ksize = 3; ksize <= 16; ksize += 2) {\n  889:       SUBTEST << \"ksize = \" << ksize << \", \" << size << 'x' << size << \", 8UC4\";\n  890  \n  891        Mat kernel;\n  ...\n 1157  \n 1158  TEST(FarnebackOpticalFlow) {\n 1159:   const string datasets[] = {\"rubberwhale\", \"basketball\"};\n 1160    for(size_t i = 0; i < sizeof(datasets) / sizeof(*datasets); ++i) {\n 1161      for(int fastPyramids = 0; fastPyramids < 2; ++fastPyramids) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/utils.cpp:\n 1201    AdaBoost* adb2 = new CascadeBoost(AdaBoost::REAL, AdaBoost::DECISION_STUMP, Ftarget2, f2, d2);\n 1202  \n 1203:   std::cout << \"Training text detection classifier, \" << endl << \"log are saved to \\\"training/detection_training_log.txt\\\", \" << endl << \"this would take serval minutes(depends on target false postive rate)\" << endl;\n 1204:   freopen(\"training/detection_training_log.txt\", \"w\", stdout);\n 1205  \n 1206    chrono::high_resolution_clock::time_point start, middle, end;\n ....\n 1329  get_ocr_data() {\n 1330    const char* table = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&()\"; // 10 num, 52 alphabet, 3 symbol and 1 '\\0'\n 1331:   vector<string> font_name = {\"Arial\",  \"Bitter\",    \"Calibri\", \"Cambria\", \"Coda\", \"Comic_Sans_MS\", \"Courier_New\", \"Domine\",    \"Droid_Serif\", \"Fine_Ming\", \"Gill_Sans\",      \"Francois_One\", \"Georgia\",           \"Impact\", \"Lato\",\n 1332:                               \"Neuton\", \"Open_Sans\", \"Oswald\",  \"Oxygen\",  \"Play\", \"PT_Serif\",      \"Roboto_Slab\", \"Russo_One\", \"Sans_Serif\",  \"Syncopate\", \"Time_New_Roman\", \"Trebuchet_MS\", \"Twentieth_Century\", \"Ubuntu\", \"Verdana\"};\n 1333:   vector<string> font_type = {\"Bold\", \"Bold_and_Italic\", \"Italic\", \"Normal\"};\n 1334:   vector<string> category = {\"number\", \"upper\", \"lower\", \"symbol\"};\n 1335    vector<int> cat_num = {10, 26, 26, 3};\n 1336  \n\n/usr/include/opencv4/opencv2/core/cvstd.inl.hpp:\n  124  std::ostream& operator << (std::ostream& out, const Point_<_Tp>& p)\n  125  {\n  126:     out << \"[\" << p.x << \", \" << p.y << \"]\";\n  127      return out;\n  128  }\n  ...\n  131  std::ostream& operator << (std::ostream& out, const Point3_<_Tp>& p)\n  132  {\n  133:     out << \"[\" << p.x << \", \" << p.y << \", \" << p.z << \"]\";\n  134      return out;\n  135  }\n  ...\n  142      {\n  143          for (int i = 0; i < n - 1; ++i) {\n  144:             out << (int)vec[i] << \", \";\n  145          }\n  146          out << (int)vec[n-1] << \"]\";\n  ...\n  149      {\n  150          for (int i = 0; i < n - 1; ++i) {\n  151:             out << vec[i] << \", \";\n  152          }\n  153          out << vec[n-1] << \"]\";\n  ...\n  166  std::ostream& operator << (std::ostream& out, const Rect_<_Tp>& rect)\n  167  {\n  168:     return out << \"[\" << rect.width << \" x \" << rect.height << \" from (\" << rect.x << \", \" << rect.y << \")]\";\n  169  }\n  170  \n\n/usr/include/opencv4/opencv2/core/mat.hpp:\n 2623              printf(\"(\");\n 2624              for(int i = 0; i < dims; i++)\n 2625:                 printf(\"%d%s\", n->idx[i], i < dims-1 ? \", \" : \")\");\n 2626              printf(\": %g\\n\", it.value<float>());\n 2627              s += *it;\n\n/usr/include/opencv4/opencv2/core/opencl/opencl_info.hpp:\n   59          {\n   60              DUMP_MESSAGE_STDOUT(\"OpenCL is disabled\");\n   61:             DUMP_CONFIG_PROPERTY(\"cv_ocl\", \"disabled\");\n   62              return;\n   63          }\n   ..\n   88          {\n   89              DUMP_MESSAGE_STDOUT(\"OpenCL is not available\");\n   90:             DUMP_CONFIG_PROPERTY(\"cv_ocl\", \"not available\");\n   91              return;\n   92          }\n   ..\n  190          DUMP_MESSAGE_STDOUT(\"Exception. Can't dump OpenCL info\");\n  191          DUMP_MESSAGE_STDOUT(\"OpenCL device not available\");\n  192:         DUMP_CONFIG_PROPERTY(\"cv_ocl\", \"not available\");\n  193      }\n  194  }\n\n/usr/include/opencv4/opencv2/core/persistence.hpp:\n  118  FileStorage::FileStorage constructor that takes a filename, or you can use the default constructor\n  119  and then call FileStorage::open. Format of the file (XML, YAML or JSON) is determined from the filename\n  120: extension (\".xml\", \".yml\"/\".yaml\" and \".json\", respectively)\n  121  -# Write all the data you want using the streaming operator `<<`, just like in the case of STL\n  122  streams.\n\n/usr/include/opencv4/opencv2/core/traits.hpp:\n  101      Mat B = Mat_<std::complex<double> >(3, 3);\n  102      // the statement below will print 6, 2 , that is depth == CV_64F, channels == 2\n  103:     cout << B.depth() << \", \" << B.channels() << endl;\n  104  @endcode\n  105  So, such traits are used to tell OpenCV which data type you are working with, even if such a type is\n\n/usr/include/opencv4/opencv2/core/types.hpp:\n  152      Point2f a(0.3f, 0.f), b(0.f, 0.4f);\n  153      Point pt = (a + b)*10.f;\n  154:     cout << pt.x << \", \" << pt.y << endl;\n  155  @endcode\n  156  */\n\n/usr/include/opencv4/opencv2/core/vsx_utils.hpp:\n  132  /*\n  133   * there's no a direct instruction for supporting 8-bit, 16-bit multiplication in ISA 2.07,\n  134:  * XLC Implement it by using instruction \"multiply even\", \"multiply odd\" and \"permute\"\n  135  **/\n  136  #   define VSX_IMPL_MULH(Tvec, cperm)                                        \\\n\n/usr/include/opencv4/opencv2/datasets/track_alov.hpp:\n   66  };\n   67  \n   68: const string sectionNames[] = { \"01-Light\", \"02-SurfaceCover\", \"03-Specularity\", \"04-Transparency\", \"05-Shape\", \"06-MotionSmoothness\", \"07-MotionCoherence\",\n   69: \"08-Clutter\", \"09-Confusion\", \"10-LowContrast\", \"11-Occlusion\", \"12-MovingCamera\", \"13-ZoomingCamera\", \"14-LongDuration\" };\n   70  \n   71  const int sectionSizes[] = { 33, 15, 18, 20, 24, 22, 12, 15, 37, 23, 34, 22, 29, 10 };\n\n/usr/include/opencv4/opencv2/dnn/dnn.inl.hpp:\n  305      {\n  306          for (i = 0; i < dictv.size() - 1; i++)\n  307:             stream << dictv.get<int64>(i) << \", \";\n  308          stream << dictv.get<int64>(i);\n  309      }\n  ...\n  311      {\n  312          for (i = 0; i < dictv.size() - 1; i++)\n  313:             stream << dictv.get<double>(i) << \", \";\n  314          stream << dictv.get<double>(i);\n  315      }\n  ...\n  317      {\n  318          for (i = 0; i < dictv.size() - 1; i++)\n  319:             stream << \"\\\"\" << dictv.get<String>(i) << \"\\\", \";\n  320          stream << dictv.get<String>(i);\n  321      }\n\n/usr/include/opencv4/opencv2/gapi/own/types.hpp:\n   83  inline std::ostream& operator<<(std::ostream& o, const Rect& rect)\n   84  {\n   85:     return o << \"[\" << rect.width << \" x \" << rect.height << \" from (\" << rect.x << \", \" << rect.y << \")]\";\n   86  }\n   87  \n\n/usr/include/opencv4/opencv2/highgui.hpp:\n   95              namedWindow(\"main1\",WINDOW_NORMAL);\n   96              namedWindow(\"main2\",WINDOW_AUTOSIZE | CV_GUI_NORMAL);\n   97:             createTrackbar( \"track1\", \"main1\", &value, 255,  NULL);\n   98  \n   99              String nameb1 = \"button1\";\n\n/usr/include/opencv4/opencv2/tracking/tracker.hpp:\n 1504      bool use_segmentation;\n 1505  \n 1506:     std::string window_function; //!<  Window function: \"hann\", \"cheb\", \"kaiser\"\n 1507      float kaiser_alpha;\n 1508      float cheb_attenuation;\n\n296 matches across 76 files\n\n\nSearching 803 files for \"\",* \"\" (regex)\n\n/home/roman/Dokumente/Sources/contours/plot-cv/data.cpp:\n   90      //\tcout << \"Drawing line: \" << i << endl;\n   91      /*\t} else {\n   92:             cout << \"Point of polygon: \" << (int)p.x << \", \" << (int) p.y<< endl;\n   93              cout << \"Step: \" << i << \" is invalid.\" << endl;\n   94              cout << \"Scalaire: \" << scalar << endl;\n   95:             cout << \"Gradient: \" << gradx << \", \" << grady << endl;\n   96:             cout << \"Normale: \" << nx << \", \" << ny << endl;\n   97              cout << \"Curvature: \" <<curv << endl;\n   98              cout << \"g : \" << g << endl;\n   99:             cout << \"Point: \" << nextP.x << \", \" << nextP.y << endl;\n  100          }*/\n  101:     // cout << \"Step i: \" <<p.x <<\", \" << p.y << endl;\n  102    }\n  103    imshow(\"images\", copyImage);\n  ...\n  168  computeGradient(const Mat& I) {\n  169    int m = I.rows, n = I.cols;\n  170:   cout << m << \", \" << n << endl;\n  171    Mat Ix(m, n, CV_32F), Iy(m, n, CV_32F);\n  172    for(int i = 0; i < m; i++) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/polygon.cpp:\n   86      double y = normales[i](1);\n   87      Point2d p(20 * x + regularPoints[i].x, 20 * y + regularPoints[i].y);\n   88:     // cout << p.x <<\", \" << p.y << endl;\n   89      line(Image, regularPoints[i], p, Scalar(0, 0, 255));\n   90    }\n   ..\n   99      double y = normales[i](1);\n  100      Point2d p(600 * curvature[i] * x + regularPoints[i].x, 600 * curvature[i] * y + regularPoints[i].y);\n  101:     // cout << p.x <<\", \" << p.y << endl;\n  102      line(Image, regularPoints[i], p, Scalar(255, 120, 255));\n  103    }\n  ...\n  252    }\n  253    if(found) {\n  254:     cout << \"Found loop: \" << cut1 << \", \" << cut2 << endl;\n  255      // waitKey();\n  256      if(cut2 < cut1) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/4c.Threshold.cpp:\n   32      resizeWindow(\"Anh GRAY\", 300, 300);\n   33      imshow(\"Anh GRAY\", image_gray);\n   34:     // cout << \"GRAY value = \"<< endl << \" \" << image_gray << endl << endl;\n   35      /*--------- Chuyen ve muc nguong ----------------*/\n   36      Mat image_result;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/7.Track.cpp:\n   60                   Threshold_Convert); // Ham thuc thi khi keo thanh truot\n   61    // Tao trackbar de chon gia tri nguong\n   62:   createTrackbar(\"Gia tri nguong\", \"Camera\", &threshold_value, max_value, Threshold_Convert);\n   63    // Bat khung hinh dau tien cho trackbar\n   64    Camera_capture();\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/BGMain_Raspberry.cpp:\n  110  saveConfig() {\n  111    CvFileStorage* fs = cvOpenFileStorage(config_xml.c_str(), 0, CV_STORAGE_WRITE);\n  112:   cvWriteString(fs, \"commit_camera\", \"启动哪个摄像头，默认0\");\n  113    cvWriteInt(fs, \"CAMERA_NUM\", CAMERA_NUM);\n  114:   cvWriteString(fs, \"commit_X\", \"左上角x坐标\");\n  115    cvWriteInt(fs, \"LEFT_TOP_X\", LEFT_TOP_X);\n  116:   cvWriteString(fs, \"commit_Y\", \"左上角y坐标\");\n  117    cvWriteInt(fs, \"LEFT_TOP_Y\", LEFT_TOP_Y);\n  118:   cvWriteString(fs, \"commit_BX\", \"右下角x坐标\");\n  119    cvWriteInt(fs, \"RIGHT_BOTTOM_X\", RIGHT_BOTTOM_X);\n  120:   cvWriteString(fs, \"commit_BY\", \"右下角y坐标\");\n  121    cvWriteInt(fs, \"RIGHT_BOTTOM_Y\", RIGHT_BOTTOM_Y);\n  122:   cvWriteString(fs, \"commit_show\", \"是否显示图像以及打印终端信息\");\n  123    cvWriteInt(fs, \"showOutput\", showOutput);\n  124  \n  125:   cvWriteString(fs, \"commit_mode2\", \"是否设置为人体扫描模式\");\n  126    cvWriteInt(fs, \"modeScan\", modeScan);\n  127:   cvWriteString(fs, \"commit_mode4\", \"格子检测的另一种方法, 1使用普通USB摄像头，2表示需要进行额外初始化的摄像头\");\n  128    cvWriteInt(fs, \"modeGrid2\", modeGrid2);\n  129:   cvWriteString(fs, \"commit_brightness\", \"洛日摄像头的亮度设置0-64\");\n  130    cvWriteInt(fs, \"camera_BRIGHTNESS\", camera_BRIGHTNESS);\n  131:   cvWriteString(fs, \"commit_gain\", \"洛日摄像头的增益设置0-100\");\n  132    cvWriteInt(fs, \"camera_GAIN\", camera_GAIN);\n  133  \n  134:   cvWriteString(fs, \"row_resolution_commit\", \"定义格子的横向精度，是一个百分比值1-100，同时需要将modeScan设置为1，建议取可以被100整除的值\");\n  135    cvWriteInt(fs, \"row_resolution\", row_resolution);\n  136:   cvWriteString(fs, \"col_resolution_commit\", \"定义格子的竖向精度，是一个百分比值1-100\");\n  137    cvWriteInt(fs, \"col_resolution\", col_resolution);\n  138:   cvWriteString(fs, \"image_fliped_direc_commit\", \"定义原始图像翻转的形式，0: 沿横向x轴翻转, 1: 沿竖向y轴翻转, -1: x、y轴同时翻转, -2不进行翻转\");\n  139    cvWriteInt(fs, \"image_fliped_direc\", image_fliped_direc);\n  140:   cvWriteString(fs, \"g_medianBlurGridThresh_commit\", \"图像滤波因子，数值越大则过滤越好\");\n  141    cvWriteInt(fs, \"g_medianBlurGridThresh\", g_medianBlurGridThresh);\n  142    cvWriteInt(fs, \"histMinValue\", histMinValue);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/CV.cpp:\n   18  \n   19    while(true) {\n   20:     cv::createTrackbar(\"upperH\", \"dst\", &upperH, 255);\n   21:     cv::createTrackbar(\"upperS\", \"dst\", &upperS, 255);\n   22:     cv::createTrackbar(\"upperV\", \"dst\", &upperV, 255);\n   23  \n   24:     cv::createTrackbar(\"lowerH\", \"dst\", &lowerH, 255);\n   25:     cv::createTrackbar(\"lowerS\", \"dst\", &lowerS, 255);\n   26:     cv::createTrackbar(\"lowerV\", \"dst\", &lowerV, 255);\n   27  \n   28      vcore.setBounds(cv::Scalar(lowerH, lowerS, lowerV), cv::Scalar(upperH, upperS, upperV));\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/CamPaho.cpp:\n  236        cout << \"in if GetAreyouok\" << endl;\n  237        string message;\n  238:       message = thisNodeType + \" \" + thisNodeName;\n  239        strcpy(buffer, message.c_str());\n  240        int data_len = message.length();\n  ...\n  266        }\n  267        if(centroid.size() > 0) {\n  268:         string message = thisNodeType + \" \" + thisNodeName + \" \" + timeNowStream.str();\n  269          strcpy(buffer, message.c_str());\n  270          int data_len = message.length();\n  ...\n  294          xString << centroid[0].first;\n  295          yString << centroid[0].second;\n  296:         // cout << thisNodeName<< \" \"<< \"x: \" << centroid[0].first << \" \" << \"y: \" << centroid[0].second << endl;\n  297        } else {\n  298          xString << -1.0;\n  299          yString << -1.0;\n  300        }\n  301:       string message = timeString.str() + \" \" + thisNodeName + \" \" + xString.str() + \" \" + yString.str();\n  302  \n  303        strcpy(buffer, message.c_str());\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/CannyWebcam1.cpp:\n  687    cv::namedWindow(\"imgCanny\", CV_WINDOW_AUTOSIZE);\n  688    // cv::namedWindow(\"imgGrayscale\", CV_WINDOW_AUTOSIZE);\n  689:   cv::createTrackbar(\"epsilon\", \"contours\", &eps, 7, trackbar, (void*)\"eps\");\n  690:   cv::createTrackbar(\"blur\", \"contours\", &blur, 7, trackbar, (void*)\"blur\");\n  691  \n  692    while(charCheckForEscKey != 27 /*&& capWebcam.isOpened()*/) { // until the Esc key is pressed or webcam connection is lost\n  ...\n  948  \n  949        //      unlink(\"contour.svg\");\n  950:       rename(\"contour.svg.tmp\", \"contour.svg\");\n  951  \n  952        vector<PointVec> squares;\n  ...\n  990        // cv::imshow(\"imgGrayscale\", imgBlurred); //\n  991  \n  992:       // cv::createTrackbar(\"Thre\", \"demoProc\", &thresholdValue, 255, &trackbar);\n  993  \n  994        charCheckForEscKey = cv::waitKey(100); // delay (in ms) and get key press, if any\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/Contour_detection.cpp:\n   35    imshow(source_window, src);\n   36  \n   37:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   38    thresh_callback(0, 0);\n   39  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/ObjectProcessor.cpp:\n  121    int position = int((80 - 1) / 2); // Writes OBJECTPROCESSOR in the center\n  122    for(int i = 0; i < position; i++) {\n  123:     cout << \" \";\n  124    }\n  125    cout << a;\n  ...\n  389    namedWindow(source_window, WINDOW_AUTOSIZE); // using canny algorithm from openCV\n  390    imshow(source_window, src);\n  391:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, contour_figure);\n  392    contour_figure(0, 0); // call reference function\n  393    waitKey(0);           // program exits when user presses ENTER\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/Threshold_inRange.cpp:\n   35    //! [trackbar]\n   36    //-- Trackbars to set thresholds for RGB values\n   37:   createTrackbar(\"Low R\", \"Object Detection\", &low_r, 255, on_low_r_thresh_trackbar);\n   38:   createTrackbar(\"High R\", \"Object Detection\", &high_r, 255, on_high_r_thresh_trackbar);\n   39:   createTrackbar(\"Low G\", \"Object Detection\", &low_g, 255, on_low_g_thresh_trackbar);\n   40:   createTrackbar(\"High G\", \"Object Detection\", &high_g, 255, on_high_g_thresh_trackbar);\n   41:   createTrackbar(\"Low B\", \"Object Detection\", &low_b, 255, on_low_b_thresh_trackbar);\n   42:   createTrackbar(\"High B\", \"Object Detection\", &high_b, 255, on_high_b_thresh_trackbar);\n   43    //! [trackbar]\n   44    while((char)waitKey(1) != 'q') {\n   ..\n   63  on_low_r_thresh_trackbar(int, void*) {\n   64    low_r = min(high_r - 1, low_r);\n   65:   setTrackbarPos(\"Low R\", \"Object Detection\", low_r);\n   66  }\n   67  //! [low]\n   ..\n   71  on_high_r_thresh_trackbar(int, void*) {\n   72    high_r = max(high_r, low_r + 1);\n   73:   setTrackbarPos(\"High R\", \"Object Detection\", high_r);\n   74  }\n   75  //![high]\n   ..\n   78  on_low_g_thresh_trackbar(int, void*) {\n   79    low_g = min(high_g - 1, low_g);\n   80:   setTrackbarPos(\"Low G\", \"Object Detection\", low_g);\n   81  }\n   82  \n   ..\n   85  on_high_g_thresh_trackbar(int, void*) {\n   86    high_g = max(high_g, low_g + 1);\n   87:   setTrackbarPos(\"High G\", \"Object Detection\", high_g);\n   88  }\n   89  \n   ..\n   92  on_low_b_thresh_trackbar(int, void*) {\n   93    low_b = min(high_b - 1, low_b);\n   94:   setTrackbarPos(\"Low B\", \"Object Detection\", low_b);\n   95  }\n   96  \n   ..\n   99  on_high_b_thresh_trackbar(int, void*) {\n  100    high_b = max(high_b, low_b + 1);\n  101:   setTrackbarPos(\"High B\", \"Object Detection\", high_b);\n  102  }\n  103  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/a.cpp:\n  150  \n  151    namedWindow(\"MORPH\", CV_WINDOW_NORMAL);\n  152:   createTrackbar(\"morph_pixel\", \"MORPH\", &morph_pixel, 20);\n  153  \n  154    namedWindow(\"ColorField\", CV_WINDOW_NORMAL);\n  155:   createTrackbar(\"Y1\", \"ColorField\", &Y1, 255);\n  156:   createTrackbar(\"Cr1\", \"ColorField\", &Cr1, 255);\n  157:   createTrackbar(\"Cb1\", \"ColorField\", &Cb1, 255);\n  158:   createTrackbar(\"Y2\", \"ColorField\", &Y2, 255);\n  159:   createTrackbar(\"Cr2\", \"ColorField\", &Cr2, 255);\n  160:   createTrackbar(\"Cb2\", \"ColorField\", &Cb2, 255);\n  161  \n  162    namedWindow(\"Circle\", CV_WINDOW_NORMAL);\n  163:   createTrackbar(\"acc_res\", \"Circle\", &acc_res, 255);\n  164:   createTrackbar(\"min_dis\", \"Circle\", &min_dis, 255);\n  165:   createTrackbar(\"high_thres\", \"Circle\", &high_thres, 255);\n  166:   createTrackbar(\"low_thres\", \"Circle\", &low_thres, 255);\n  167:   createTrackbar(\"min_rad\", \"Circle\", &min_rad, 255);\n  168:   createTrackbar(\"max_rad\", \"Circle\", &max_rad, 1000);\n  169  \n  170    while(charCheckForEscKey != 27 && cap.isOpened()) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/aruco_ar_demo.cpp:\n   41    Ptr<ovis::WindowScene> win = ovis::createWindow(String(\"arucoAR\"), imsize, ovis::SCENE_INTERACTIVE | ovis::SCENE_AA);\n   42    win->setCameraIntrinsics(K, imsize);\n   43:   win->createEntity(\"sinbad\", \"Sinbad.mesh\", Vec3i(0, 0, 5), Vec3f(1.57, 0.0, 0.0));\n   44    win->createLightEntity(\"sun\", Vec3i(0, 0, 100));\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/aruco_simple.cpp:\n  144      iThresParam1 = ThresParam1;\n  145      iThresParam2 = ThresParam2;\n  146:     cv::createTrackbar(\"ThresParam1\", \"in\", &iThresParam1, 13, cvTackBarEvents);\n  147:     cv::createTrackbar(\"ThresParam2\", \"in\", &iThresParam2, 13, cvTackBarEvents);\n  148  \n  149      char key = 0;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/camera_calibration.cpp:\n   63      goodInput = true;\n   64      if(boardSize.width <= 0 || boardSize.height <= 0) {\n   65:       cerr << \"Invalid Board size: \" << boardSize.width << \" \" << boardSize.height << endl;\n   66        goodInput = false;\n   67      }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/camshift.cpp:\n   91    cv::namedWindow(\"CamShift Demo\", cv::WINDOW_NORMAL);\n   92    cv::setMouseCallback(\"CamShift Demo\", onMouse);\n   93:   cv::createTrackbar(\"Vmin\", \"CamShift Demo\", &vmin, 256);\n   94:   cv::createTrackbar(\"Vmax\", \"CamShift Demo\", &vmax, 256);\n   95:   cv::createTrackbar(\"Smin\", \"CamShift Demo\", &smin, 256);\n   96  \n   97    cv::Mat frame, histimg(200, 320, CV_8UC3, cv::Scalar::all(0));\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/camshiftdemo.cpp:\n   88    namedWindow(\"CamShift Demo\", 0);\n   89    setMouseCallback(\"CamShift Demo\", onMouse, 0);\n   90:   createTrackbar(\"Vmin\", \"CamShift Demo\", &vmin, 256, 0);\n   91:   createTrackbar(\"Vmax\", \"CamShift Demo\", &vmax, 256, 0);\n   92:   createTrackbar(\"Smin\", \"CamShift Demo\", &smin, 256, 0);\n   93  \n   94    Mat frame, hsv, hue, mask, hist, histimg = Mat::zeros(200, 320, CV_8UC3), backproj;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cap_aravis.cpp:\n  546    if(init_buffers()) {\n  547      arv_camera_set_acquisition_mode(camera, ARV_ACQUISITION_MODE_CONTINUOUS);\n  548:     arv_device_set_string_feature_value(arv_camera_get_device(camera), \"TriggerMode\", \"Off\");\n  549      arv_camera_start_acquisition(camera);\n  550  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cap_gstreamer.cpp:\n  623    if(!caps || !(GST_IS_CAPS(caps.get()))) {\n  624      if(type == G_TYPE_INT) {\n  625:       caps.attach(gst_caps_new_simple(\"video/x-raw\", \"format\", G_TYPE_STRING, \"BGR\", prop, type, v1, NULL));\n  626      } else {\n  627:       caps.attach(gst_caps_new_simple(\"video/x-raw\", \"format\", G_TYPE_STRING, \"BGR\", prop, type, v1, v2, NULL));\n  628      }\n  629    } else {\n  ...\n 1444  \n 1445      // create encodebin profile\n 1446:     containerprofile.attach(gst_encoding_container_profile_new(\"container\", \"container\", containercaps.get(), NULL));\n 1447      videoprofile.reset(gst_encoding_video_profile_new(videocaps.get(), NULL, NULL, 1));\n 1448      gst_encoding_container_profile_add_profile(containerprofile.get(), (GstEncodingProfile*)videoprofile.get());\n ....\n 1460    if(fourcc == CV_FOURCC('M', 'J', 'P', 'G') && frameSize.height == 1) {\n 1461      input_pix_fmt = GST_VIDEO_FORMAT_ENCODED;\n 1462:     caps.attach(gst_caps_new_simple(\"image/jpeg\", \"framerate\", GST_TYPE_FRACTION, int(fps_num), int(fps_denom), NULL));\n 1463      caps.attach(gst_caps_fixate(caps.detach()));\n 1464    } else if(is_color) {\n ....\n 1466      bufsize = frameSize.width * frameSize.height * 3;\n 1467  \n 1468:     caps.attach(gst_caps_new_simple(\"video/x-raw\", \"format\", G_TYPE_STRING, \"BGR\", \"width\", G_TYPE_INT, frameSize.width, \"height\", G_TYPE_INT, frameSize.height, \"framerate\", GST_TYPE_FRACTION, gint(fps_num), gint(fps_denom), NULL));\n 1469      CV_Assert(caps);\n 1470      caps.attach(gst_caps_fixate(caps.detach()));\n ....\n 1474      bufsize = frameSize.width * frameSize.height;\n 1475  \n 1476:     caps.attach(gst_caps_new_simple(\"video/x-raw\", \"format\", G_TYPE_STRING, \"GRAY8\", \"width\", G_TYPE_INT, frameSize.width, \"height\", G_TYPE_INT, frameSize.height, \"framerate\", GST_TYPE_FRACTION, gint(fps_num), gint(fps_denom), NULL));\n 1477      caps.attach(gst_caps_fixate(caps.detach()));\n 1478    }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cap_mjpeg_decoder.cpp:\n   95  struct AviStreamHeader {\n   96    uint32_t fccType;            // 'vids', 'auds', 'txts'...\n   97:   uint32_t fccHandler;         // \"cvid\", \"DIB \"\n   98    DWORD dwFlags;               // 0\n   99    DWORD dwPriority;            // 0\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cap_pvapi.cpp:\n  324      case CV_CAP_PROP_PVAPI_MULTICASTIP:\n  325        if(value == -1) {\n  326:         if((PvAttrEnumSet(Camera.Handle, \"MulticastEnable\", \"Off\") == ePvErrSuccess))\n  327            break;\n  328          else\n  ...\n  330        } else {\n  331          cv::String ip = cv::format(\"%d.%d.%d.%d\", ((unsigned int)value >> 24) & 255, ((unsigned int)value >> 16) & 255, ((unsigned int)value >> 8) & 255, (unsigned int)value & 255);\n  332:         if((PvAttrEnumSet(Camera.Handle, \"MulticastEnable\", \"On\") == ePvErrSuccess) && (PvAttrStringSet(Camera.Handle, \"MulticastIPAddress\", ip.c_str()) == ePvErrSuccess))\n  333            break;\n  334          else\n  ...\n  342      case CV_CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE:\n  343        if(value == 0)\n  344:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"Freerun\");\n  345        else if(value == 1)\n  346:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"SyncIn1\");\n  347        else if(value == 2)\n  348:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"SyncIn2\");\n  349        else if(value == 3)\n  350:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"FixedRate\");\n  351        else if(value == 4)\n  352:         error = PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"Software\");\n  353        else\n  354          error = ePvErrOutOfRange;\n  ...\n  445  \n  446    // Set the camera to capture continuously\n  447:   if(PvAttrEnumSet(Camera.Handle, \"AcquisitionMode\", \"Continuous\") != ePvErrSuccess) {\n  448      fprintf(stderr, \"Could not set PvAPI Acquisition Mode\\n\");\n  449      return false;\n  ...\n  455    }\n  456  \n  457:   if(PvAttrEnumSet(Camera.Handle, \"FrameStartTriggerMode\", \"Freerun\") != ePvErrSuccess) {\n  458      fprintf(stderr, \"Error setting PvAPI trigger to \\\"Freerun\\\"\");\n  459      return false;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cascadeclassifier.cpp:\n  214        Rect* faceRects = useGPU ? faces_downloaded.ptr<Rect>() : &facesBuf_cpu[0];\n  215        for(int i = 0; i < min(detections_num, 2); ++i) {\n  216:         cout << \", [\" << setw(4) << faceRects[i].x << \", \" << setw(4) << faceRects[i].y << \", \" << setw(4) << faceRects[i].width << \", \" << setw(4) << faceRects[i].height << \"]\";\n  217        }\n  218      }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/clahe.cpp:\n   49  \n   50    namedWindow(\"CLAHE\");\n   51:   createTrackbar(\"Tile Size\", \"CLAHE\", &tilesize, 32, (TrackbarCallback)TSize_Callback);\n   52:   createTrackbar(\"Clip Limit\", \"CLAHE\", &cliplimit, 20, (TrackbarCallback)Clip_Callback);\n   53  \n   54    UMat frame, outframe;\n   ..\n   60    cur_clip = (int)pFilter->getClipLimit();\n   61    cur_tilesize = pFilter->getTilesGridSize();\n   62:   setTrackbarPos(\"Tile Size\", \"CLAHE\", cur_tilesize.width);\n   63:   setTrackbarPos(\"Clip Limit\", \"CLAHE\", cur_clip);\n   64  \n   65    if(!infile.empty()) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code10-3.cpp:\n   18    switch(rgb_slider) {\n   19      case 0:\n   20:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   21:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   22        break;\n   23      case 1:\n   24:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   25:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   26        break;\n   27      case 2:\n   28:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   29:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   30        break;\n   31    }\n   ..\n   37      case 0:\n   38        low_r = min(high_slider - 1, low_slider);\n   39:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   40        break;\n   41      case 1:\n   42        low_g = min(high_slider - 1, low_slider);\n   43:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   44        break;\n   45      case 2:\n   46        low_b = min(high_slider - 1, low_slider);\n   47:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   48        break;\n   49    }\n   ..\n   55      case 0:\n   56        high_r = max(low_slider + 1, high_slider);\n   57:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   58        break;\n   59      case 1:\n   60        high_g = max(low_slider + 1, high_slider);\n   61:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   62        break;\n   63      case 2:\n   64        high_b = max(low_slider + 1, high_slider);\n   65:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   66        break;\n   67    }\n   ..\n   77    namedWindow(\"Segmentation\");\n   78  \n   79:   createTrackbar(\"0. R\\n1. G\\n2.B\", \"Segmentation\", &rgb_slider, 2, on_rgb_trackbar);\n   80:   createTrackbar(\"Low threshold\", \"Segmentation\", &low_slider, 255, on_low_thresh_trackbar);\n   81:   createTrackbar(\"High threshold\", \"Segmentation\", &high_slider, 255, on_high_thresh_trackbar);\n   82  \n   83    double time = 0;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code5-7.cpp:\n   18    switch(rgb_slider) {\n   19      case 0:\n   20:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   21:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   22        break;\n   23      case 1:\n   24:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   25:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   26        break;\n   27      case 2:\n   28:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   29:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   30        break;\n   31    }\n   ..\n   37      case 0:\n   38        low_r = min(high_slider - 1, low_slider);\n   39:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   40        break;\n   41      case 1:\n   42        low_g = min(high_slider - 1, low_slider);\n   43:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   44        break;\n   45      case 2:\n   46        low_b = min(high_slider - 1, low_slider);\n   47:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   48        break;\n   49    }\n   ..\n   55      case 0:\n   56        high_r = max(low_slider + 1, high_slider);\n   57:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   58        break;\n   59      case 1:\n   60        high_g = max(low_slider + 1, high_slider);\n   61:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   62        break;\n   63      case 2:\n   64        high_b = max(low_slider + 1, high_slider);\n   65:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   66        break;\n   67    }\n   ..\n   85    namedWindow(\"Segmentation\");\n   86  \n   87:   createTrackbar(\"0. R\\n1. G\\n2.B\", \"Segmentation\", &rgb_slider, 2, on_rgb_trackbar);\n   88:   createTrackbar(\"Low threshold\", \"Segmentation\", &low_slider, 255, on_low_thresh_trackbar);\n   89:   createTrackbar(\"High threshold\", \"Segmentation\", &high_slider, 255, on_high_thresh_trackbar);\n   90  \n   91    double time = 0;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code5-8.cpp:\n   18    switch(rgb_slider) {\n   19      case 0:\n   20:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   21:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   22        break;\n   23      case 1:\n   24:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   25:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   26        break;\n   27      case 2:\n   28:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   29:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   30        break;\n   31    }\n   ..\n   37      case 0:\n   38        low_r = min(high_slider - 1, low_slider);\n   39:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_r);\n   40        break;\n   41      case 1:\n   42        low_g = min(high_slider - 1, low_slider);\n   43:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_g);\n   44        break;\n   45      case 2:\n   46        low_b = min(high_slider - 1, low_slider);\n   47:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_b);\n   48        break;\n   49    }\n   ..\n   55      case 0:\n   56        high_r = max(low_slider + 1, high_slider);\n   57:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_r);\n   58        break;\n   59      case 1:\n   60        high_g = max(low_slider + 1, high_slider);\n   61:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_g);\n   62        break;\n   63      case 2:\n   64        high_b = max(low_slider + 1, high_slider);\n   65:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_b);\n   66        break;\n   67    }\n   ..\n   83    namedWindow(\"Segmentation\");\n   84  \n   85:   createTrackbar(\"0. R\\n1. G\\n2.B\", \"Segmentation\", &rgb_slider, 2, on_rgb_trackbar);\n   86:   createTrackbar(\"Low threshold\", \"Segmentation\", &low_slider, 255, on_low_thresh_trackbar);\n   87:   createTrackbar(\"High threshold\", \"Segmentation\", &high_slider, 255, on_high_thresh_trackbar);\n   88  \n   89    while(char(waitKey(1)) != 'q' && cap.isOpened()) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code6-1.cpp:\n   34    namedWindow(\"Contours\", CV_WINDOW_AUTOSIZE);\n   35  \n   36:   createTrackbar(\"Levels\", \"Contours\", &levels, 15, on_trackbar);\n   37  \n   38    on_trackbar(0, 0);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code7-1.cpp:\n   17    switch(hs_slider) {\n   18      case 0:\n   19:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_h);\n   20:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_h);\n   21        break;\n   22      case 1:\n   23:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_s);\n   24:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_s);\n   25        break;\n   26    }\n   ..\n   32      case 0:\n   33        low_h = min(high_slider - 1, low_slider);\n   34:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_h);\n   35        break;\n   36      case 1:\n   37        low_s = min(high_slider - 1, low_slider);\n   38:       setTrackbarPos(\"Low threshold\", \"Segmentation\", low_s);\n   39        break;\n   40    }\n   ..\n   46      case 0:\n   47        high_h = max(low_slider + 1, high_slider);\n   48:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_h);\n   49        break;\n   50      case 1:\n   51        high_s = max(low_slider + 1, high_slider);\n   52:       setTrackbarPos(\"High threshold\", \"Segmentation\", high_s);\n   53        break;\n   54    }\n   ..\n   70    namedWindow(\"Segmentation\");\n   71  \n   72:   createTrackbar(\"0. H\\n1. S\", \"Segmentation\", &hs_slider, 1, on_hs_trackbar);\n   73:   createTrackbar(\"Low threshold\", \"Segmentation\", &low_slider, 255, on_low_thresh_trackbar);\n   74:   createTrackbar(\"High threshold\", \"Segmentation\", &high_slider, 255, on_high_thresh_trackbar);\n   75  \n   76    while(char(waitKey(1)) != 'q' && cap.isOpened()) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code7-2.cpp:\n   59    namedWindow(\"Segmentation\");\n   60  \n   61:   createTrackbar(\"Low Diff\", \"Segmentation\", &low_diff, 50, on_low_diff_trackbar);\n   62:   createTrackbar(\"High Diff \", \"Segmentation\", &high_diff, 50, on_high_diff_trackbar);\n   63  \n   64    setMouseCallback(\"Video\", on_mouse);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code8-5.cpp:\n  215        string category = category_names[i];\n  216        float prediction = svms[category].predict(test, true);\n  217:       // cout << category << \" \" << prediction << \" \";\n  218        if(prediction < best_score) {\n  219          best_score = prediction;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code9-6.cpp:\n   39    disparity* disp_obj = (disparity*)_disp_obj;\n   40    num_disp = (num_disp / 16) * 16;\n   41:   setTrackbarPos(\"numDisparity\", \"Disparity\", num_disp);\n   42    disp_obj->set_numDisp(num_disp);\n   43  }\n   ..\n   80    namedWindow(\"Disparity\", CV_WINDOW_NORMAL);\n   81    namedWindow(\"Left\", CV_WINDOW_NORMAL);\n   82:   createTrackbar(\"minDisparity + 30\", \"Disparity\", &min_disp, 60, on_minDisp, (void*)this);\n   83:   createTrackbar(\"numDisparity\", \"Disparity\", &num_disp, 150, on_numDisp, (void*)this);\n   84  \n   85    on_minDisp(min_disp, this);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/code9-7.cpp:\n   39    disparity* disp_obj = (disparity*)_disp_obj;\n   40    num_disp = (num_disp / 16) * 16;\n   41:   setTrackbarPos(\"numDisparity\", \"Disparity\", num_disp);\n   42    disp_obj->set_numDisp(num_disp);\n   43  }\n   ..\n   79    namedWindow(\"Disparity\", CV_WINDOW_NORMAL);\n   80    namedWindow(\"Left\", CV_WINDOW_NORMAL);\n   81:   createTrackbar(\"minDisparity + 30\", \"Disparity\", &min_disp, 60, on_minDisp, (void*)this);\n   82:   createTrackbar(\"numDisparity\", \"Disparity\", &num_disp, 150, on_numDisp, (void*)this);\n   83  \n   84    on_minDisp(min_disp, this);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/connected_components.cpp:\n   62  \n   63    namedWindow(\"Connected Components\", 1);\n   64:   createTrackbar(\"Threshold\", \"Connected Components\", &threshval, 255, on_trackbar);\n   65    on_trackbar(threshval, 0);\n   66  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/contours.cpp:\n   31    imshow(source_window, src);\n   32  \n   33:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   34    thresh_callback(0, 0);\n   35  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/contours2.cpp:\n   66    for(size_t k = 0; k < contours0.size(); k++) approxPolyDP(cv::Mat(contours0[k]), contours[k], 3, true);\n   67    namedWindow(\"contours\", 1);\n   68:   createTrackbar(\"levels+3\", \"contours\", &levels, 7, on_trackbar);\n   69    on_trackbar(0, 0);\n   70    waitKey();\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/contours4.cpp:\n   34    imshow(source_window, src);\n   35  \n   36:   createTrackbar(\" Threshold:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   37    thresh_callback(0, 0);\n   38  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/facedetect.cpp:\n   19            \"   [filename|camera_index]\\n\\n\"\n   20            \"see facedetect.cmd for one call:\\n\"\n   21:           \"./facedetect --cascade=\\\"../../data/haarcascades/haarcascade_frontalface_alt.xml\\\" \"\n   22            \"--nested-cascade=\\\"../../data/haarcascades/haarcascade_eye_tree_eyeglasses.xml\\\" --scale=1.3\\n\\n\"\n   23            \"During execution:\\n\\tHit any key to quit.\\n\"\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/findContours_demo.cpp:\n   45    imshow(source_window, src);\n   46  \n   47:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   48    thresh_callback(0, 0);\n   49  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/findLaserPoint.cpp:\n  102    // cvNamedWindow(\"demoProc\",0);\n  103    cvNamedWindow(\"demoMap\", 1);\n  104:   createTrackbar(\"Thre\", \"demoProc\", &thresholdValue, 255, trackbar);\n  105    // createTrackbar(\"Thre\",\"demoHSV\",&thresholdValueHSV,255,trackbar2);\n  106    setMouseCallback(\"demoRaw\", mouseCall1);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/fitellipse.cpp:\n   50  \n   51    // Create toolbars. HighGUI use.\n   52:   createTrackbar(\"threshold\", \"result\", &sliderPos, 255, processImage);\n   53    processImage(0, 0);\n   54  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/generalContours_demo1.cpp:\n   41    imshow(source_window, src);\n   42  \n   43:   createTrackbar(\" Threshold:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   44    thresh_callback(0, 0);\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/generalContours_demo2.cpp:\n   41    imshow(source_window, src);\n   42  \n   43:   createTrackbar(\" Threshold:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   44    thresh_callback(0, 0);\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/glsl-test.cpp:\n   55    auto totstart = steady_clock::now();\n   56    cv::Mat image, out;\n   57:   // FILE *fp = fopen(\"log.txt\", \"w\");\n   58  \n   59  #if(CV_MAJOR_VERSION < 3)\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/hog.cpp:\n  235    cout << \"Scale: \" << scale << endl;\n  236    if(args.resize_src)\n  237:     cout << \"Resized source: (\" << args.width << \", \" << args.height << \")\\n\";\n  238    cout << \"Group threshold: \" << gr_threshold << endl;\n  239    cout << \"Levels number: \" << nlevels << endl;\n  240    cout << \"Win width: \" << args.win_width << endl;\n  241:   cout << \"Win stride: (\" << args.win_stride_width << \", \" << args.win_stride_height << \")\\n\";\n  242    cout << \"Hit threshold: \" << hit_threshold << endl;\n  243    cout << \"Gamma correction: \" << gamma_corr << endl;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/hull_demo.cpp:\n   41    imshow(source_window, src);\n   42  \n   43:   createTrackbar(\" Threshold:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   44    thresh_callback(0, 0);\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/images.cpp:\n   23    Data* D = (Data*)p;\n   24    D->polygon.addPoint(m1);\n   25:   cout << \"Adding point: (\" << x << \", \" << y << \")\" << endl;\n   26    D->polygon.drawPolygon(D->image.clone());\n   27  }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/intelperc_capture.cpp:\n  105    cout << \"  Saturation value = \" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE) << endl;\n  106    cout << \"  Confidence threshold = \" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD) << endl;\n  107:   cout << \"  Focal length = (\" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ) << \", \" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT) << \")\" << endl;\n  108    cout << \"Depth streams profiles:\" << endl;\n  109    for(size_t i = 0; i < profilesCount; i++) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/kinfu_demo.cpp:\n   70      if(!imwrite(fullDepthFname, depth))\n   71        throw std::runtime_error(\"Failed to write depth to file \" + fullDepthFname);\n   72:     file << count++ << \" \" << depthFname << endl;\n   73    }\n   74  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/laplace.cpp:\n   47  \n   48    namedWindow(\"Laplacian\", 0);\n   49:   createTrackbar(\"Sigma\", \"Laplacian\", &sigma, 15, 0);\n   50  \n   51    Mat smoothed, laplace, result;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/line.h:\n  284  to_string(const Line<T>& line) {\n  285    std::basic_string<Char> ret;\n  286:   ret = line.str(\",\", \"|\");\n  287  \n  288    return ret;\n  ...\n  298    for(iterator_type it = lines.cbegin(); it != end; ++it) {\n  299      if(ret.length())\n  300:       ret += \" \";\n  301      ret += to_string<ValueT, Char>(*it);\n  302    }\n  ...\n  312    for(iterator_type it = c.cbegin(); it != end; ++it) {\n  313      if(i++ > 0)\n  314:       os << \" \";\n  315      os << to_string(*it);\n  316    }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/live_demo.cpp:\n  184  \n  185    namedWindow(\"Demo\");\n  186:   displayOverlay(\"Demo\", \"Press Ctrl+P to show property window\", 5000);\n  187  \n  188    // Thread trackbar\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/lock.cpp:\n   43  main(int argc, char* argv[]) {\n   44  \n   45:   // GPIO input_pin(\"17\", \"in\");\n   46    // std::cout << input_pin.read_value() << std::endl;\n   47  \n   ..\n   85        model->predict(image, label, confidence);\n   86  \n   87:       std::cout << \"Results: \" << label << \", \" << confidence << std::endl;\n   88  \n   89        // If a face is recognized and authorized\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/matrix.h:\n  285    for(int i = 0; i < mat.rows; ++i) {\n  286      if(i)\n  287:       oss << \" \";\n  288      oss << \"(\";\n  289      for(int j = 0; j < mat.cols; ++j) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/moments_demo.cpp:\n   41    imshow(source_window, src);\n   42  \n   43:   createTrackbar(\" Canny thresh:\", \"Source\", &thresh, max_thresh, thresh_callback);\n   44    thresh_callback(0, 0);\n   45  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/mulobject.cpp:\n  537  //\tif (balld == \"NORTHWEST\")\n  538  //\t{\n  539: //\t\tcout << balld << \" \" << playerrear.getXPos() << \" \" <<playerrear.getYPos() << \" \" <<ball.getXPos()<<\"\n  540  //\"<<ball.getYPos()<<endl; \t\twhile (!((playerrear.getXPos() - playerfront.getXPos() > 0) && (playerfront.getYPos() -\n  541  // playerrear.getYPos()<10)))\n  ...\n  572  //\t//if direction is southwest x is decreased and y is increased until they match\n  573  //\tif (balld == \"SOUTHWEST\") {\n  574: //\t\tcout << balld << \" \" << playerrear.getXPos() << \" \" << playerrear.getYPos() << \" \" << ball.getXPos() << \" \" <<\n  575  // ball.getYPos() << endl;\n  576  //\t\t//turn left until car rear x - car front x >= whatever distance is between them && car's front y == car's rear y\n  ...\n  604  //\t//if direction is southeast x and y both are increased until they match\n  605  //\tif (balld == \"SOUTHEAST\") {\n  606: //\t\tcout << balld << \" \" << playerrear.getXPos() << \" \" << playerrear.getYPos() << \" \" << ball.getXPos() << \" \" <<\n  607  // ball.getYPos() << endl;\n  608  //\t\t//turn right until car front x - car rear x >= whatever distance is between them && car's front y == car's rear\n  ...\n  635  //\t//if direction is northeast x is increased and y is decreased until they match\n  636  //\tif (balld == \"NORTHEAST\") {\n  637: //\t\tcout << balld << \" \" << playerrear.getXPos() << \" \" << playerrear.getYPos() << \" \" << ball.getXPos() << \" \" <<\n  638  // ball.getYPos() << endl;\n  639  //\t\t//turn right until car front x - car rear x >= whatever distance is between them && car's front y == car's rear\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/o_angle.cpp:\n  166      // pub_area.publish(msg_area); //20170420\n  167      // pub_if_image.publish(msg_if_image);\n  168:     // ROS_INFO_STREAM(\"cv::Point (\" << msg_xy_angle.x << \", \" << msg_xy_angle.y << \")\\tangle \" << msg_xy_angle.z << \"\\t\n  169      // Area \" << msg_area.data); //20170420\n  170      imshow(\"src\", src);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/obj_track.cpp:\n  102  \n  103    namedWindow(\"Params\", WINDOW_NORMAL);\n  104:   createTrackbar(\"medianBlur\", \"Params\", &medianBlurStrng, 35);\n  105:   createTrackbar(\"PrevBlur\", \"Params\", &BlurStrng, 10);\n  106:   createTrackbar(\"PostBlur\", \"Params\", &SecondBlurStrng, 10);\n  107  \n  108    switch(m) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/omxcv-test.cpp:\n   62    auto totstart = steady_clock::now();\n   63    cv::Mat image;\n   64:   // FILE *fp = fopen(\"log.txt\", \"w\");\n   65  \n   66    for(int i = 0; i < framecount; i++) {\n   ..\n   77    // fclose(fp);\n   78  \n   79:   // FILE *fp = fopen(\"Orig.rgb\", \"wb\");\n   80    // fwrite(image.data, 3 * image.cols * image.rows, 1, fp);\n   81    // fclose(fp);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/opencv_test.cpp:\n   85            servoController->MovePanServoBy(difference[0] * 0.08);\n   86            servoController->MoveTiltServoBy(-difference[1] * 0.08);\n   87:           // putText(frame, boost::to_string(difference[0]) + \", \" + boost::to_string(difference[1]), Point(50,50),\n   88:           // FONT_HERSHEY_SIMPLEX, 1, Scalar(0,200,200), 4);  putText(frame, boost::to_string(frameCenter.x) + \", \" +\n   89            // boost::to_string(frameCenter.y), Point(50,50), FONT_HERSHEY_SIMPLEX, 1, Scalar(0,200,200), 4);\n   90          }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/select3dobj.cpp:\n  491      if(boardFound && grabNext) {\n  492        if(box.empty()) {\n  493:         int code = select3DBox(\"View\", \"Selected Object\", frame, cameraMatrix, rvec, tvec, box);\n  494          if(code == -100)\n  495            break;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/simple_svg_1.0.0.hpp:\n   47  attribute(std::string const& attribute_name, T const& value, std::string const& unit = \"\") {\n   48    std::stringstream ss;\n   49:   ss << attribute_name << \"=\\\"\" << value << unit << \"\\\" \";\n   50    return ss.str();\n   51  }\n   52  std::string\n   53  elemStart(std::string const& element_name) {\n   54:   return \"\\t<\" + element_name + \" \";\n   55  }\n   56  std::string\n   ..\n  385  \n  386      ss << \"points=\\\"\";\n  387:     for(unsigned i = 0; i < points.size(); ++i) ss << translateX(points[i].x, layout) << \",\" << translateY(points[i].y, layout) << \" \";\n  388:     ss << \"\\\" \";\n  389  \n  390      ss << fill.toString(layout) << stroke.toString(layout) << emptyElemEnd();\n  ...\n  419  \n  420      ss << \"points=\\\"\";\n  421:     for(unsigned i = 0; i < points.size(); ++i) ss << translateX(points[i].x, layout) << \",\" << translateY(points[i].y, layout) << \" \";\n  422:     ss << \"\\\" \";\n  423  \n  424      ss << fill.toString(layout) << stroke.toString(layout) << emptyElemEnd();\n  ...\n  549    toString() const {\n  550      std::stringstream ss;\n  551:     ss << \"<?xml \" << attribute(\"version\", \"1.0\") << attribute(\"standalone\", \"no\") << \"?>\\n<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \"\n  552:        << \"\\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\\n<svg \" << attribute(\"width\", layout.dimensions.width, \"px\") << attribute(\"height\", layout.dimensions.height, \"px\") << attribute(\"xmlns\", \"http://www.w3.org/2000/svg\") << attribute(\"version\", \"1.1\") << \">\\n\"\n  553         << body_nodes_str << elemEnd(\"svg\");\n  554      return ss.str();\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/simple_svg_writer.h:\n   62    matrix(double a, double b, double c, double d, double e, double f) {\n   63      std::stringstream stream;\n   64:     stream << \"matrix(\" << a << \" \" << b << \" \" << c << \" \" << d << \" \" << e << \" \" << f << ')';\n   65      transforms.push_back(stream.str());\n   66  \n   ..\n   71    Translate(double dx, double dy = 0.0) {\n   72      std::stringstream stream;\n   73:     stream << \"translate(\" << dx << \" \" << dy << ')';\n   74      transforms.push_back(stream.str());\n   75  \n   ..\n   81      std::stringstream stream;\n   82      stream << \"scale(\"\n   83:            << \" \" << scale_x << \" \" << scale_y << ')';\n   84      transforms.push_back(stream.str());\n   85  \n   ..\n   95    Rotate(double angle, double about_x = 0.0, double about_y = 0.0) {\n   96      std::stringstream stream;\n   97:     stream << \"rotate(\" << angle << \" \" << about_x << \" \" << about_y << ')';\n   98      transforms.push_back(stream.str());\n   99  \n  ...\n  105      std::stringstream stream;\n  106      stream << \"skewX(\"\n  107:            << \" \" << skew_x << ')';\n  108      transforms.push_back(stream.str());\n  109  \n  ...\n  115      std::stringstream stream;\n  116      stream << \"skewY(\"\n  117:            << \" \" << skew_y << ')';\n  118      transforms.push_back(stream.str());\n  119  \n  ...\n  128      // for (const auto &t : transforms)\n  129      {\n  130:       stream << transforms[i - 1] << \" \";\n  131      }\n  132  \n  ...\n  260  \n  261      for(const auto& p : points) {\n  262:       stream << p << \" \";\n  263      }\n  264  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/smiledetect.cpp:\n   17            \"   [video_filename|camera_index]\\n\\n\"\n   18            \"Example:\\n\"\n   19:           \"./smiledetect --cascade=\\\"../../data/haarcascades/haarcascade_frontalface_alt.xml\\\" \"\n   20            \"--smile-cascade=\\\"../../data/haarcascades/haarcascade_smile.xml\\\" --scale=2.0\\n\\n\"\n   21            \"During execution:\\n\\tHit any key to quit.\\n\"\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/squares.cpp:\n  130  int\n  131  main(int /*argc*/, char** /*argv*/) {\n  132:   static const char* names[] = {\"pic1.png\", \"pic2.png\", \"pic3.png\", \"pic4.png\", \"pic5.png\", \"pic6.png\", 0};\n  133    help();\n  134    namedWindow(wndname, 1);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/targeting.cpp:\n   82    Mat newframe; // mat of the threshholded (threshheld?) image\n   83  \n   84:   cvCreateTrackbar(\"Threshold\", \"Threshold Image\", &thresh, 100, NULL);\n   85    for(;;) {\n   86  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/targeting2.cpp:\n  206    namedWindow(\"Threshold Image\", CV_WINDOW_KEEPRATIO);\n  207  \n  208:   cvCreateTrackbar(\"Threshold\", \"Threshold Image\", &thresh, 200, NULL);\n  209  }\n  210  \n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/tracking_calibration.cpp:\n  116          minMaxLoc(splitHsv[2], &lower[2], &upper[2]);\n  117  \n  118:         setTrackbarPos(\"H Low\", \"trackbar\", (int)lower[0]);\n  119:         setTrackbarPos(\"S Low\", \"trackbar\", (int)lower[1]);\n  120:         setTrackbarPos(\"V Low\", \"trackbar\", (int)lower[2]);\n  121  \n  122:         setTrackbarPos(\"H Up\", \"trackbar\", (int)upper[0]);\n  123:         setTrackbarPos(\"S Up\", \"trackbar\", (int)upper[1]);\n  124:         setTrackbarPos(\"V Up\", \"trackbar\", (int)upper[2]);\n  125  \n  126          saveROI = false;\n  ...\n  198    setMouseCallback(\"frame\", leftClick);\n  199  \n  200:   createTrackbar(\"H Low\", \"trackbar\", &intLow[0], 255, on_trackbar);\n  201:   createTrackbar(\"S Low\", \"trackbar\", &intLow[1], 255, on_trackbar);\n  202:   createTrackbar(\"V Low\", \"trackbar\", &intLow[2], 255, on_trackbar);\n  203  \n  204:   createTrackbar(\"H Up\", \"trackbar\", &intUp[0], 255, on_trackbar);\n  205:   createTrackbar(\"S Up\", \"trackbar\", &intUp[1], 255, on_trackbar);\n  206:   createTrackbar(\"V Up\", \"trackbar\", &intUp[2], 255, on_trackbar);\n  207  \n  208    ros::spin();\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/tracking_calibration_with_img.cpp:\n  107    setMouseCallback(\"frame\", leftClick);\n  108  \n  109:   createTrackbar(\"H Low\", \"trackbar\", &intLow[0], 255, on_trackbar);\n  110:   createTrackbar(\"S Low\", \"trackbar\", &intLow[1], 255, on_trackbar);\n  111:   createTrackbar(\"V Low\", \"trackbar\", &intLow[2], 255, on_trackbar);\n  112  \n  113:   createTrackbar(\"H Up\", \"trackbar\", &intUp[0], 255, on_trackbar);\n  114:   createTrackbar(\"S Up\", \"trackbar\", &intUp[1], 255, on_trackbar);\n  115:   createTrackbar(\"V Up\", \"trackbar\", &intUp[2], 255, on_trackbar);\n  116  \n  117    for(;;) {\n  ...\n  136          minMaxLoc(splitHsv[2], &lower[2], &upper[2]);\n  137  \n  138:         setTrackbarPos(\"H Low\", \"trackbar\", (int)lower[0]);\n  139:         setTrackbarPos(\"S Low\", \"trackbar\", (int)lower[1]);\n  140:         setTrackbarPos(\"V Low\", \"trackbar\", (int)lower[2]);\n  141  \n  142:         setTrackbarPos(\"H Up\", \"trackbar\", (int)upper[0]);\n  143:         setTrackbarPos(\"S Up\", \"trackbar\", (int)upper[1]);\n  144:         setTrackbarPos(\"V Up\", \"trackbar\", (int)upper[2]);\n  145  \n  146          saveROI = false;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/ufacedetect.cpp:\n   20            \"   [filename|camera_index]\\n\\n\"\n   21            \"see facedetect.cmd for one call:\\n\"\n   22:           \"./ufacedetect --cascade=\\\"../../data/haarcascades/haarcascade_frontalface_alt.xml\\\" \"\n   23            \"--nested-cascade=\\\"../../data/haarcascades/haarcascade_eye_tree_eyeglasses.xml\\\" --scale=1.3\\n\\n\"\n   24            \"During execution:\\n\\tHit any key to quit.\\n\"\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/video.cpp:\n   63          msg.z = 1;\n   64          cout << \"x= \" << center[i].x << \", y= \" << center[i].y << endl;\n   65:         ROS_INFO_STREAM(\"Found a ball at (\" << msg.x << \", \" << msg.y << \")\");\n   66  \n   67        } // if\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/videocapture_intelperc.cpp:\n  102    cout << \"  Saturation value = \" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE) << endl;\n  103    cout << \"  Confidence threshold = \" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD) << endl;\n  104:   cout << \"  Focal length = (\" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ) << \", \" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT) << \")\" << endl;\n  105    cout << \"Depth streams profiles:\" << endl;\n  106    for(size_t i = 0; i < profilesCount; i++) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/warpPerspective_demo.cpp:\n   24  Mat warping(Mat image, Size warped_image_size, vector<Point2f> srcPoints, vector<Point2f> dstPoints);\n   25  String windowTitle = \"Perspective Transformation Demo\";\n   26: String labels[4] = {\"TL\", \"TR\", \"BR\", \"BL\"};\n   27  vector<Point2f> roi_corners;\n   28  vector<Point2f> dst_corners(4);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/webcam_demo.cpp:\n  124    int RECOGNITION = 0;\n  125  \n  126:   String region_types_str[2] = {\"ERStats\", \"MSER\"};\n  127:   String grouping_algorithms_str[2] = {\"exhaustive_search\", \"multioriented\"};\n  128:   String recognitions_str[2] = {\"Tesseract\", \"NM_chain_features + KNN\"};\n  129  \n  130    std::vector<cv::Mat> channels;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/tests.cpp:\n  887  \n  888      for(int ksize = 3; ksize <= 16; ksize += 2) {\n  889:       SUBTEST << \"ksize = \" << ksize << \", \" << size << 'x' << size << \", 8UC4\";\n  890  \n  891        Mat kernel;\n  ...\n 1157  \n 1158  TEST(FarnebackOpticalFlow) {\n 1159:   const string datasets[] = {\"rubberwhale\", \"basketball\"};\n 1160    for(size_t i = 0; i < sizeof(datasets) / sizeof(*datasets); ++i) {\n 1161      for(int fastPyramids = 0; fastPyramids < 2; ++fastPyramids) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/utils.cpp:\n  656      std::cout << \"pixel number: \" << tmp.total();\n  657      std::cout << \"\\ttime: \" << chrono::duration<double>(end - start).count() * 1000 / root.size() << \"ms\\n\";\n  658:     fout << tmp.total() << \" \" << chrono::duration<double>(end - start).count() * 1000 / root.size() << endl;\n  659      coef += 0.01;\n  660    }\n  ...\n 1005    for(int thresh_step = 9; thresh_step <= 16; thresh_step++) {\n 1006      for(int min_area = 20; min_area <= 200; min_area += 10) {\n 1007:       cout << \"Test \" << thresh_step << \" \" << min_area << endl;\n 1008        er_filter->set_thresh_step(thresh_step);\n 1009        er_filter->set_min_area(min_area);\n ....\n 1201    AdaBoost* adb2 = new CascadeBoost(AdaBoost::REAL, AdaBoost::DECISION_STUMP, Ftarget2, f2, d2);\n 1202  \n 1203:   std::cout << \"Training text detection classifier, \" << endl << \"log are saved to \\\"training/detection_training_log.txt\\\", \" << endl << \"this would take serval minutes(depends on target false postive rate)\" << endl;\n 1204:   freopen(\"training/detection_training_log.txt\", \"w\", stdout);\n 1205  \n 1206    chrono::high_resolution_clock::time_point start, middle, end;\n ....\n 1267  write_lbp_hist(fstream& fout, vector<double>& spacial_hist, int direction) {\n 1268    fout << direction;\n 1269:   for(int f = 0; f < spacial_hist.size(); f++) fout << \" \" << spacial_hist[f];\n 1270    fout << endl;\n 1271  }\n ....\n 1329  get_ocr_data() {\n 1330    const char* table = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&()\"; // 10 num, 52 alphabet, 3 symbol and 1 '\\0'\n 1331:   vector<string> font_name = {\"Arial\",  \"Bitter\",    \"Calibri\", \"Cambria\", \"Coda\", \"Comic_Sans_MS\", \"Courier_New\", \"Domine\",    \"Droid_Serif\", \"Fine_Ming\", \"Gill_Sans\",      \"Francois_One\", \"Georgia\",           \"Impact\", \"Lato\",\n 1332:                               \"Neuton\", \"Open_Sans\", \"Oswald\",  \"Oxygen\",  \"Play\", \"PT_Serif\",      \"Roboto_Slab\", \"Russo_One\", \"Sans_Serif\",  \"Syncopate\", \"Time_New_Roman\", \"Trebuchet_MS\", \"Twentieth_Century\", \"Ubuntu\", \"Verdana\"};\n 1333:   vector<string> font_type = {\"Bold\", \"Bold_and_Italic\", \"Italic\", \"Normal\"};\n 1334:   vector<string> category = {\"number\", \"upper\", \"lower\", \"symbol\"};\n 1335    vector<int> cat_num = {10, 26, 26, 3};\n 1336  \n ....\n 1374            int m = 0;\n 1375            while(fv[m].index != -1) {\n 1376:             fout << \" \" << fv[m].index << \":\" << fv[m].value;\n 1377              m++;\n 1378            }\n\n/usr/include/opencv4/opencv2/core/cvdef.h:\n  102  #  endif\n  103  #  if __has_extension(cxx_static_assert)\n  104: #    define CV_StaticAssert(condition, reason)    static_assert((condition), reason \" \" #condition)\n  105  #  elif __has_extension(c_static_assert)\n  106: #    define CV_StaticAssert(condition, reason)    _Static_assert((condition), reason \" \" #condition)\n  107  #  endif\n  108  #elif defined(__GNUC__)\n  109  #  if (defined(__GXX_EXPERIMENTAL_CXX0X__) || __cplusplus >= 201103L)\n  110: #    define CV_StaticAssert(condition, reason)    static_assert((condition), reason \" \" #condition)\n  111  #  endif\n  112  #elif defined(_MSC_VER)\n  113  #  if _MSC_VER >= 1600 /* MSVC 10 */\n  114: #    define CV_StaticAssert(condition, reason)    static_assert((condition), reason \" \" #condition)\n  115  #  endif\n  116  #endif\n  117  #ifndef CV_StaticAssert\n  118  #  if !defined(__clang__) && defined(__GNUC__) && (__GNUC__*100 + __GNUC_MINOR__ > 302)\n  119: #    define CV_StaticAssert(condition, reason) ({ extern int __attribute__((error(\"CV_StaticAssert: \" reason \" \" #condition))) CV_StaticAssert(); ((condition) ? 0 : CV_StaticAssert()); })\n  120  #  else\n  121       template <bool x> struct CV_StaticAssert_failed;\n\n/usr/include/opencv4/opencv2/core/cvstd.inl.hpp:\n  124  std::ostream& operator << (std::ostream& out, const Point_<_Tp>& p)\n  125  {\n  126:     out << \"[\" << p.x << \", \" << p.y << \"]\";\n  127      return out;\n  128  }\n  ...\n  131  std::ostream& operator << (std::ostream& out, const Point3_<_Tp>& p)\n  132  {\n  133:     out << \"[\" << p.x << \", \" << p.y << \", \" << p.z << \"]\";\n  134      return out;\n  135  }\n  ...\n  142      {\n  143          for (int i = 0; i < n - 1; ++i) {\n  144:             out << (int)vec[i] << \", \";\n  145          }\n  146          out << (int)vec[n-1] << \"]\";\n  ...\n  149      {\n  150          for (int i = 0; i < n - 1; ++i) {\n  151:             out << vec[i] << \", \";\n  152          }\n  153          out << vec[n-1] << \"]\";\n  ...\n  166  std::ostream& operator << (std::ostream& out, const Rect_<_Tp>& rect)\n  167  {\n  168:     return out << \"[\" << rect.width << \" x \" << rect.height << \" from (\" << rect.x << \", \" << rect.y << \")]\";\n  169  }\n  170  \n\n/usr/include/opencv4/opencv2/core/mat.hpp:\n 2623              printf(\"(\");\n 2624              for(int i = 0; i < dims; i++)\n 2625:                 printf(\"%d%s\", n->idx[i], i < dims-1 ? \", \" : \")\");\n 2626              printf(\": %g\\n\", it.value<float>());\n 2627              s += *it;\n\n/usr/include/opencv4/opencv2/core/opencl/opencl_info.hpp:\n   59          {\n   60              DUMP_MESSAGE_STDOUT(\"OpenCL is disabled\");\n   61:             DUMP_CONFIG_PROPERTY(\"cv_ocl\", \"disabled\");\n   62              return;\n   63          }\n   ..\n   88          {\n   89              DUMP_MESSAGE_STDOUT(\"OpenCL is not available\");\n   90:             DUMP_CONFIG_PROPERTY(\"cv_ocl\", \"not available\");\n   91              return;\n   92          }\n   ..\n  190          DUMP_MESSAGE_STDOUT(\"Exception. Can't dump OpenCL info\");\n  191          DUMP_MESSAGE_STDOUT(\"OpenCL device not available\");\n  192:         DUMP_CONFIG_PROPERTY(\"cv_ocl\", \"not available\");\n  193      }\n  194  }\n\n/usr/include/opencv4/opencv2/core/persistence.hpp:\n  118  FileStorage::FileStorage constructor that takes a filename, or you can use the default constructor\n  119  and then call FileStorage::open. Format of the file (XML, YAML or JSON) is determined from the filename\n  120: extension (\".xml\", \".yml\"/\".yaml\" and \".json\", respectively)\n  121  -# Write all the data you want using the streaming operator `<<`, just like in the case of STL\n  122  streams.\n  ...\n  260          (*it)[\"lbp\"] >> lbpval;\n  261          for( int i = 0; i < (int)lbpval.size(); i++ )\n  262:             cout << \" \" << (int)lbpval[i];\n  263          cout << \")\" << endl;\n  264      }\n\n/usr/include/opencv4/opencv2/core/traits.hpp:\n  101      Mat B = Mat_<std::complex<double> >(3, 3);\n  102      // the statement below will print 6, 2 , that is depth == CV_64F, channels == 2\n  103:     cout << B.depth() << \", \" << B.channels() << endl;\n  104  @endcode\n  105  So, such traits are used to tell OpenCV which data type you are working with, even if such a type is\n\n/usr/include/opencv4/opencv2/core/types.hpp:\n  152      Point2f a(0.3f, 0.f), b(0.f, 0.4f);\n  153      Point pt = (a + b)*10.f;\n  154:     cout << pt.x << \", \" << pt.y << endl;\n  155  @endcode\n  156  */\n\n/usr/include/opencv4/opencv2/core/vsx_utils.hpp:\n  132  /*\n  133   * there's no a direct instruction for supporting 8-bit, 16-bit multiplication in ISA 2.07,\n  134:  * XLC Implement it by using instruction \"multiply even\", \"multiply odd\" and \"permute\"\n  135  **/\n  136  #   define VSX_IMPL_MULH(Tvec, cperm)                                        \\\n\n/usr/include/opencv4/opencv2/datasets/track_alov.hpp:\n   66  };\n   67  \n   68: const string sectionNames[] = { \"01-Light\", \"02-SurfaceCover\", \"03-Specularity\", \"04-Transparency\", \"05-Shape\", \"06-MotionSmoothness\", \"07-MotionCoherence\",\n   69: \"08-Clutter\", \"09-Confusion\", \"10-LowContrast\", \"11-Occlusion\", \"12-MovingCamera\", \"13-ZoomingCamera\", \"14-LongDuration\" };\n   70  \n   71  const int sectionSizes[] = { 33, 15, 18, 20, 24, 22, 12, 15, 37, 23, 34, 22, 29, 10 };\n\n/usr/include/opencv4/opencv2/dnn/dnn.inl.hpp:\n  305      {\n  306          for (i = 0; i < dictv.size() - 1; i++)\n  307:             stream << dictv.get<int64>(i) << \", \";\n  308          stream << dictv.get<int64>(i);\n  309      }\n  ...\n  311      {\n  312          for (i = 0; i < dictv.size() - 1; i++)\n  313:             stream << dictv.get<double>(i) << \", \";\n  314          stream << dictv.get<double>(i);\n  315      }\n  ...\n  317      {\n  318          for (i = 0; i < dictv.size() - 1; i++)\n  319:             stream << \"\\\"\" << dictv.get<String>(i) << \"\\\", \";\n  320          stream << dictv.get<String>(i);\n  321      }\n\n/usr/include/opencv4/opencv2/flann/lsh_table.h:\n  469  \n  470      //  BOOST_FOREACH(int size, stats.bucket_sizes_)\n  471:     //          std::cout << size << \" \";\n  472      //  std::cout << std::endl;\n  473      stats.bucket_size_median_ = stats.bucket_sizes_[stats.bucket_sizes_.size() / 2];\n\n/usr/include/opencv4/opencv2/gapi/own/types.hpp:\n   83  inline std::ostream& operator<<(std::ostream& o, const Rect& rect)\n   84  {\n   85:     return o << \"[\" << rect.width << \" x \" << rect.height << \" from (\" << rect.x << \", \" << rect.y << \")]\";\n   86  }\n   87  \n\n/usr/include/opencv4/opencv2/highgui.hpp:\n   95              namedWindow(\"main1\",WINDOW_NORMAL);\n   96              namedWindow(\"main2\",WINDOW_AUTOSIZE | CV_GUI_NORMAL);\n   97:             createTrackbar( \"track1\", \"main1\", &value, 255,  NULL);\n   98  \n   99              String nameb1 = \"button1\";\n\n/usr/include/opencv4/opencv2/tracking/tracker.hpp:\n 1504      bool use_segmentation;\n 1505  \n 1506:     std::string window_function; //!<  Window function: \"hann\", \"cheb\", \"kaiser\"\n 1507      float kaiser_alpha;\n 1508      float cheb_attenuation;\n\n363 matches across 89 files\n\n\nSearching 803 files for \"<< \", \"\" (regex)\n\n/home/roman/Dokumente/Sources/contours/plot-cv/data.cpp:\n   90      //\tcout << \"Drawing line: \" << i << endl;\n   91      /*\t} else {\n   92:             cout << \"Point of polygon: \" << (int)p.x << \", \" << (int) p.y<< endl;\n   93              cout << \"Step: \" << i << \" is invalid.\" << endl;\n   94              cout << \"Scalaire: \" << scalar << endl;\n   95:             cout << \"Gradient: \" << gradx << \", \" << grady << endl;\n   96:             cout << \"Normale: \" << nx << \", \" << ny << endl;\n   97              cout << \"Curvature: \" <<curv << endl;\n   98              cout << \"g : \" << g << endl;\n   99:             cout << \"Point: \" << nextP.x << \", \" << nextP.y << endl;\n  100          }*/\n  101      // cout << \"Step i: \" <<p.x <<\", \" << p.y << endl;\n  ...\n  168  computeGradient(const Mat& I) {\n  169    int m = I.rows, n = I.cols;\n  170:   cout << m << \", \" << n << endl;\n  171    Mat Ix(m, n, CV_32F), Iy(m, n, CV_32F);\n  172    for(int i = 0; i < m; i++) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/polygon.cpp:\n  252    }\n  253    if(found) {\n  254:     cout << \"Found loop: \" << cut1 << \", \" << cut2 << endl;\n  255      // waitKey();\n  256      if(cut2 < cut1) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/cascadeclassifier.cpp:\n  214        Rect* faceRects = useGPU ? faces_downloaded.ptr<Rect>() : &facesBuf_cpu[0];\n  215        for(int i = 0; i < min(detections_num, 2); ++i) {\n  216:         cout << \", [\" << setw(4) << faceRects[i].x << \", \" << setw(4) << faceRects[i].y << \", \" << setw(4) << faceRects[i].width << \", \" << setw(4) << faceRects[i].height << \"]\";\n  217        }\n  218      }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/hog.cpp:\n  235    cout << \"Scale: \" << scale << endl;\n  236    if(args.resize_src)\n  237:     cout << \"Resized source: (\" << args.width << \", \" << args.height << \")\\n\";\n  238    cout << \"Group threshold: \" << gr_threshold << endl;\n  239    cout << \"Levels number: \" << nlevels << endl;\n  240    cout << \"Win width: \" << args.win_width << endl;\n  241:   cout << \"Win stride: (\" << args.win_stride_width << \", \" << args.win_stride_height << \")\\n\";\n  242    cout << \"Hit threshold: \" << hit_threshold << endl;\n  243    cout << \"Gamma correction: \" << gamma_corr << endl;\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/images.cpp:\n   23    Data* D = (Data*)p;\n   24    D->polygon.addPoint(m1);\n   25:   cout << \"Adding point: (\" << x << \", \" << y << \")\" << endl;\n   26    D->polygon.drawPolygon(D->image.clone());\n   27  }\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/intelperc_capture.cpp:\n  105    cout << \"  Saturation value = \" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE) << endl;\n  106    cout << \"  Confidence threshold = \" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD) << endl;\n  107:   cout << \"  Focal length = (\" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ) << \", \" << capture.get(CV_CAP_INTELPERC_DEPTH_GENERATOR | CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT) << \")\" << endl;\n  108    cout << \"Depth streams profiles:\" << endl;\n  109    for(size_t i = 0; i < profilesCount; i++) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/lock.cpp:\n   85        model->predict(image, label, confidence);\n   86  \n   87:       std::cout << \"Results: \" << label << \", \" << confidence << std::endl;\n   88  \n   89        // If a face is recognized and authorized\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/o_angle.cpp:\n  166      // pub_area.publish(msg_area); //20170420\n  167      // pub_if_image.publish(msg_if_image);\n  168:     // ROS_INFO_STREAM(\"cv::Point (\" << msg_xy_angle.x << \", \" << msg_xy_angle.y << \")\\tangle \" << msg_xy_angle.z << \"\\t\n  169      // Area \" << msg_area.data); //20170420\n  170      imshow(\"src\", src);\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/video.cpp:\n   63          msg.z = 1;\n   64          cout << \"x= \" << center[i].x << \", y= \" << center[i].y << endl;\n   65:         ROS_INFO_STREAM(\"Found a ball at (\" << msg.x << \", \" << msg.y << \")\");\n   66  \n   67        } // if\n\n/home/roman/Dokumente/Sources/contours/plot-cv/src/videocapture_intelperc.cpp:\n  102    cout << \"  Saturation value = \" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE) << endl;\n  103    cout << \"  Confidence threshold = \" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD) << endl;\n  104:   cout << \"  Focal length = (\" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ) << \", \" << capture.get(CAP_INTELPERC_DEPTH_GENERATOR | CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT) << \")\" << endl;\n  105    cout << \"Depth streams profiles:\" << endl;\n  106    for(size_t i = 0; i < profilesCount; i++) {\n\n/home/roman/Dokumente/Sources/contours/plot-cv/tests.cpp:\n  887  \n  888      for(int ksize = 3; ksize <= 16; ksize += 2) {\n  889:       SUBTEST << \"ksize = \" << ksize << \", \" << size << 'x' << size << \", 8UC4\";\n  890  \n  891        Mat kernel;\n\n/usr/include/opencv4/opencv2/core/cvstd.inl.hpp:\n  124  std::ostream& operator << (std::ostream& out, const Point_<_Tp>& p)\n  125  {\n  126:     out << \"[\" << p.x << \", \" << p.y << \"]\";\n  127      return out;\n  128  }\n  ...\n  131  std::ostream& operator << (std::ostream& out, const Point3_<_Tp>& p)\n  132  {\n  133:     out << \"[\" << p.x << \", \" << p.y << \", \" << p.z << \"]\";\n  134      return out;\n  135  }\n  ...\n  142      {\n  143          for (int i = 0; i < n - 1; ++i) {\n  144:             out << (int)vec[i] << \", \";\n  145          }\n  146          out << (int)vec[n-1] << \"]\";\n  ...\n  149      {\n  150          for (int i = 0; i < n - 1; ++i) {\n  151:             out << vec[i] << \", \";\n  152          }\n  153          out << vec[n-1] << \"]\";\n  ...\n  166  std::ostream& operator << (std::ostream& out, const Rect_<_Tp>& rect)\n  167  {\n  168:     return out << \"[\" << rect.width << \" x \" << rect.height << \" from (\" << rect.x << \", \" << rect.y << \")]\";\n  169  }\n  170  \n\n/usr/include/opencv4/opencv2/core/traits.hpp:\n  101      Mat B = Mat_<std::complex<double> >(3, 3);\n  102      // the statement below will print 6, 2 , that is depth == CV_64F, channels == 2\n  103:     cout << B.depth() << \", \" << B.channels() << endl;\n  104  @endcode\n  105  So, such traits are used to tell OpenCV which data type you are working with, even if such a type is\n\n/usr/include/opencv4/opencv2/core/types.hpp:\n  152      Point2f a(0.3f, 0.f), b(0.f, 0.4f);\n  153      Point pt = (a + b)*10.f;\n  154:     cout << pt.x << \", \" << pt.y << endl;\n  155  @endcode\n  156  */\n\n/usr/include/opencv4/opencv2/dnn/dnn.inl.hpp:\n  305      {\n  306          for (i = 0; i < dictv.size() - 1; i++)\n  307:             stream << dictv.get<int64>(i) << \", \";\n  308          stream << dictv.get<int64>(i);\n  309      }\n  ...\n  311      {\n  312          for (i = 0; i < dictv.size() - 1; i++)\n  313:             stream << dictv.get<double>(i) << \", \";\n  314          stream << dictv.get<double>(i);\n  315      }\n\n/usr/include/opencv4/opencv2/gapi/own/types.hpp:\n   83  inline std::ostream& operator<<(std::ostream& o, const Rect& rect)\n   84  {\n   85:     return o << \"[\" << rect.width << \" x \" << rect.height << \" from (\" << rect.x << \", \" << rect.y << \")]\";\n   86  }\n   87  \n\n29 matches across 16 files\n",
			"settings":
			{
				"buffer_size": 123272,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/line.h",
			"settings":
			{
				"buffer_size": 10709,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 126.0,
		"last_filter": "install pa",
		"selected_items":
		[
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"tags",
				"CTags: Show Symbols (all)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 583.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Dokumente/Sources/contours/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Dokumente/Sources/opencv-4.1.2/modules/calib3d/src/circlesgrid.cpp",
		"/home/roman/Dokumente/Sources/contours/plot-cv/modules/core/include/opencv2/core/affine.hpp",
		"/home/roman/lotto/utils/dom.js",
		"/home/roman/Dokumente/Sources/contours/plot-cv/src/line.h",
		"/usr/include/opencv4/opencv2/core/affine.hpp",
		"/home/roman/Dokumente/Sources/contours/plot-cv/polygon.cpp",
		"/usr/include/opencv4/opencv2/core/core.hpp",
		"/home/roman/Dokumente/Sources/contours/plot-cv/src/matrix.h",
		"/usr/include/opencv4/opencv2/core/types.hpp",
		"/usr/include/opencv4/opencv2/core/mat.hpp",
		"/usr/include/opencv4/opencv2/imgproc/imgproc_c.h",
		"/home/roman/Dokumente/Sources/opencv-4.1.2/modules/imgproc/include/opencv2/imgproc.hpp",
		"/home/roman/Dokumente/Sources/opencv-4.1.2/modules/calib3d/src/calibration.cpp",
		"/home/roman/Dokumente/Sources/opencv-4.1.2/modules/core/include/opencv2/core/mat.hpp",
		"/usr/include/opencv4/opencv2/imgproc.hpp",
		"/home/roman/Dokumente/Sources/contours/plot-cv/src/basicscanner.cpp",
		"/usr/include/opencv2",
		"/home/roman/Dokumente/Sources/opencv-4.1.2/modules/core/include/opencv2/core/affine.hpp",
		"/usr/include/opencv4/opencv2/core.hpp",
		"/home/roman/Dokumente/Sources/contours/plot-cv/src/psimpl.h",
		"/home/roman/Dokumente/Sources/contours/plot-cv/src/CannyWebcam1.cpp",
		"/home/roman/Dokumente/Sources/contours/plot-cv/plot-cv.sublime-project",
		"/usr/include/opencv4/opencv2/core/types"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 109.0,
		"where_history":
		[
			"/home/roman/Dokumente/Sources/contours/plot-cv,/usr/include/opencv4,*.cpp,*.h*",
			"/home/roman/Dokumente/Sources/contours/plot-cv,*.cpp,*.h*",
			"/home/roman/Dokumente/Sources/contours/plot-cv,*.cpp,*.h",
			"/home/roman/Dokumente/Sources/contours/plot-cv,*.cpp",
			"/home/roman/Dokumente/Sources/contours/plot-cv",
			"/home/roman/Dokumente/Sources/contours/plot-cv/src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"imgOr",
			"imgOri",
			"imgOr",
			"imgRaw",
			"VideoCa",
			"100",
			"%% 100",
			"100",
			"write_im",
			"imwrite",
			"main\\(",
			"to_string",
			"<< \", \"",
			"<<\\s*\",* \"",
			"\",* \"",
			"\", \"",
			"rows:",
			"\\[3",
			", 3",
			"3>",
			"3",
			"3, ",
			"3, 3",
			", 3>",
			"3, 3",
			"3,",
			"dim",
			"setRow",
			"other\\[0",
			"row\\(",
			"t \\* r",
			"r \\* s",
			"r * s",
			"Row row",
			"T\\(angle\\)",
			"T\\(-",
			"(-",
			"rotation",
			"multiplicate",
			"matrix1",
			"multipl",
			"product",
			"multiply\\(",
			"setRow",
			"\\(angle\\)",
			"\\(angle)",
			"setRow",
			"cols",
			"setRow",
			"set\\(",
			"zeroes",
			"3ype",
			"3,T",
			"int ",
			"copyTo",
			"\\*ptr",
			"multipl",
			"concat",
			"conca",
			"compose",
			"multi",
			"Affine3<",
			"Affine3",
			"b =",
			"63",
			"<< 1",
			"rotation",
			"cv::Mat ",
			"\\*/$",
			"$\\*/",
			"rotate",
			"matrix x",
			"3, 2",
			"to_string",
			"<<",
			"to_string",
			"strea,",
			"<<< ",
			"OutputIterator",
			"\\[]",
			"this\\.",
			" p\\.",
			"matmul",
			"this\\.",
			" m\\.",
			"yy",
			"y0",
			"x0",
			"yx",
			"xx",
			"xy",
			"matmul",
			"m",
			"cv::Mat",
			"','",
			"operator<<",
			"to_string",
			"is_same",
			"Mat",
			"operator.*Mat",
			"rows\\(",
			"class Mat_",
			"class Mat",
			"to_string",
			"class Affine3",
			"Affine3",
			"Affine3<",
			"Affine3",
			"transform",
			"transform.*\\(.*point",
			"transform.*point",
			"rotat",
			"matrix",
			"matrix.*2d",
			"matrix",
			"rotate",
			"matrix",
			"transform.*src",
			"warpAffine",
			"affine.*2d",
			"transform",
			"Matrix",
			"matrix",
			"angle\\(",
			"moment_from_angle",
			"norm\\.",
			"norm\\(",
			"norm"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"dim, dim",
			", dim>",
			"dim, dim",
			"angle",
			"-T(",
			"(T(angle))",
			"zeros",
			"type",
			"T,3",
			"T ",
			"Matrix<T> ",
			"",
			" pt.",
			"",
			" other.",
			"at<T>(1,1)",
			"at<T>(1,2)",
			"at<T>(0,2)",
			"at<T>(1,0)",
			"at<T>(0,0)",
			"at<T>(0,1)",
			"\", \"",
			"line_distances",
			"value_type",
			"adjacent_lines.",
			".end",
			".begin",
			"Line",
			"lines.begi",
			"lines.end",
			"Line<float>",
			"int",
			"",
			"point_type",
			"Line",
			"other.a",
			"b",
			"a",
			"other.\\1",
			"ContainerT",
			"lines",
			"point_type"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 770,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"current_file": "/home/roman/Dokumente/Sources/contours/plot-cv/src/CannyWebcam1.cpp",
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									562,
									570
								],
								[
									605,
									615
								],
								[
									936,
									949
								],
								[
									1070,
									1083
								],
								[
									1223,
									1240
								],
								[
									1316,
									1326
								],
								[
									2130,
									2139
								],
								[
									2242,
									2250
								],
								[
									2534,
									2544
								],
								[
									2820,
									2835
								],
								[
									3268,
									3289
								],
								[
									3819,
									3840
								],
								[
									4472,
									4494
								],
								[
									4599,
									4613
								],
								[
									4910,
									4926
								],
								[
									5099,
									5109
								],
								[
									6446,
									6458
								],
								[
									7284,
									7295
								],
								[
									8288,
									8316
								],
								[
									10447,
									10470
								],
								[
									10919,
									10931
								],
								[
									11258,
									11274
								],
								[
									11672,
									11684
								],
								[
									11987,
									11992
								],
								[
									12268,
									12283
								],
								[
									13697,
									13711
								],
								[
									13903,
									13915
								],
								[
									14081,
									14092
								],
								[
									14411,
									14421
								],
								[
									14649,
									14672
								],
								[
									15613,
									15621
								],
								[
									15855,
									15866
								],
								[
									16097,
									16114
								],
								[
									16580,
									16594
								],
								[
									16803,
									16816
								],
								[
									17223,
									17235
								],
								[
									17316,
									17329
								],
								[
									17398,
									17408
								],
								[
									17670,
									17685
								],
								[
									17795,
									17803
								],
								[
									17856,
									17868
								],
								[
									18169,
									18180
								],
								[
									18265,
									18278
								],
								[
									18347,
									18357
								],
								[
									18401,
									18411
								],
								[
									18447,
									18455
								],
								[
									18715,
									18729
								],
								[
									18858,
									18871
								],
								[
									18940,
									18949
								],
								[
									18992,
									19002
								],
								[
									19033,
									19041
								],
								[
									19335,
									19345
								],
								[
									19461,
									19474
								],
								[
									19727,
									19731
								],
								[
									23727,
									23736
								],
								[
									23770,
									23779
								],
								[
									23807,
									23815
								]
							],
							"symlist":
							[
								"PointVec",
								"Point2fVec",
								"coord_pointer",
								"coord_pointer",
								"simplify_polyline",
								"coord_type",
								"out_point",
								"out_hier",
								"out_points",
								"filter_contours",
								"polyline_from_contour",
								"cv::Scalar\nhs_vto_rgb",
								"svg::Color\nfrom_scalar",
								"convert_points",
								"transform_points",
								"export_svg",
								"polygon_area",
								"apply_clahe",
								"brightness_and_contrast_auto",
								"cv::Mat\nimage_to_binary",
								"get_contours",
								"get_mass_centers",
								"to_point_vec",
								"angle",
								"find_rectangles",
								"draw_polylines",
								"invert_color",
								"hough_lines",
								"draw_lines",
								"corner_harris_detection",
								"trackbar",
								"write_image",
								"draw_all_contours",
								"draw_all_lines",
								"iterator_type",
								"filter_lines",
								"iterator_type",
								"value_type",
								"PredicateTraits",
								" function",
								"filter_lines",
								"angle_diffs",
								"iterator_type",
								"point_type",
								"value_type",
								"ret_type",
								"line_distances",
								"iterator_type",
								"line_type",
								"value_type",
								"ret_type",
								"operator<<",
								"iterator_type",
								"main",
								"line_type",
								"line_list",
								"ref_list"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "src/CannyWebcam1.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33178,
						"regions":
						{
						},
						"selection":
						[
							[
								21485,
								21485
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".#",
									"selector": "text.html"
								}
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 2,
								"tabSize": 2
							}
						},
						"translation.x": 0.0,
						"translation.y": 11219.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/matrix.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8345,
						"regions":
						{
						},
						"selection":
						[
							[
								8134,
								8134
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".#",
									"selector": "text.html"
								}
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 2,
								"tabSize": 2
							}
						},
						"translation.x": 0.0,
						"translation.y": 4686.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/opt/opencv4/include/opencv4/opencv2/core/mat.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 160980,
						"regions":
						{
						},
						"selection":
						[
							[
								54847,
								54847
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".#",
									"selector": "text.html"
								}
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 19940.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/opt/opencv4/include/opencv4/opencv2/core/types.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 72186,
						"regions":
						{
						},
						"selection":
						[
							[
								138,
								138
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".#",
									"selector": "text.html"
								}
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/usr/include/opencv4/opencv2/core/affine.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21525,
						"regions":
						{
						},
						"selection":
						[
							[
								19085,
								19085
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".#",
									"selector": "text.html"
								}
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9514.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/roman/Dokumente/Sources/opencv-4.1.2/modules/core/include/opencv2/core/affine.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21525,
						"regions":
						{
						},
						"selection":
						[
							[
								10042,
								10042
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".#",
									"selector": "text.html"
								}
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4278.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 123272,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										225,
										234
									],
									[
										264,
										273
									],
									[
										485,
										494
									],
									[
										788,
										797
									],
									[
										984,
										993
									],
									[
										1239,
										1248
									],
									[
										1269,
										1278
									],
									[
										1437,
										1446
									],
									[
										1617,
										1626
									],
									[
										1750,
										1759
									],
									[
										1816,
										1825
									],
									[
										1880,
										1889
									],
									[
										1945,
										1954
									],
									[
										2013,
										2022
									],
									[
										2233,
										2242
									],
									[
										2507,
										2516
									],
									[
										2537,
										2546
									],
									[
										2734,
										2743
									],
									[
										2825,
										2834
									],
									[
										3102,
										3111
									],
									[
										3401,
										3410
									],
									[
										3446,
										3455
									],
									[
										3830,
										3839
									],
									[
										4319,
										4328
									],
									[
										4694,
										4703
									],
									[
										5073,
										5082
									],
									[
										5251,
										5260
									],
									[
										5374,
										5383
									],
									[
										5400,
										5409
									],
									[
										5547,
										5556
									],
									[
										5574,
										5583
									],
									[
										5614,
										5623
									],
									[
										5656,
										5665
									],
									[
										5696,
										5705
									],
									[
										5744,
										5753
									],
									[
										5930,
										5939
									],
									[
										6191,
										6200
									],
									[
										6441,
										6450
									],
									[
										6573,
										6582
									],
									[
										6723,
										6732
									],
									[
										6961,
										6970
									],
									[
										7254,
										7263
									],
									[
										7295,
										7304
									],
									[
										7426,
										7435
									],
									[
										7487,
										7496
									],
									[
										7813,
										7822
									],
									[
										8068,
										8077
									],
									[
										8166,
										8175
									],
									[
										8629,
										8638
									],
									[
										8659,
										8668
									],
									[
										9191,
										9200
									],
									[
										9241,
										9250
									],
									[
										9559,
										9568
									],
									[
										9776,
										9785
									],
									[
										9807,
										9816
									],
									[
										10122,
										10127
									],
									[
										10453,
										10458
									],
									[
										10666,
										10671
									],
									[
										10820,
										10825
									],
									[
										10972,
										10977
									],
									[
										11278,
										11282
									],
									[
										11483,
										11487
									],
									[
										11554,
										11558
									],
									[
										11730,
										11734
									],
									[
										11815,
										11819
									],
									[
										11989,
										11993
									],
									[
										12302,
										12306
									],
									[
										12582,
										12586
									],
									[
										12765,
										12769
									],
									[
										13073,
										13077
									],
									[
										13437,
										13441
									],
									[
										13543,
										13547
									],
									[
										13644,
										13648
									],
									[
										13746,
										13750
									],
									[
										13856,
										13860
									],
									[
										13968,
										13972
									],
									[
										14089,
										14093
									],
									[
										14195,
										14199
									],
									[
										14337,
										14341
									],
									[
										14463,
										14467
									],
									[
										14596,
										14600
									],
									[
										14766,
										14770
									],
									[
										14908,
										14912
									],
									[
										15097,
										15101
									],
									[
										15379,
										15383
									],
									[
										15441,
										15445
									],
									[
										15503,
										15507
									],
									[
										15573,
										15577
									],
									[
										15635,
										15639
									],
									[
										15697,
										15701
									],
									[
										16059,
										16063
									],
									[
										16141,
										16145
									],
									[
										16426,
										16430
									],
									[
										16605,
										16609
									],
									[
										16916,
										16920
									],
									[
										17248,
										17252
									],
									[
										17615,
										17619
									],
									[
										17709,
										17713
									],
									[
										17804,
										17808
									],
									[
										17898,
										17902
									],
									[
										17993,
										17997
									],
									[
										18087,
										18091
									],
									[
										18341,
										18345
									],
									[
										18524,
										18528
									],
									[
										18705,
										18709
									],
									[
										18879,
										18883
									],
									[
										19051,
										19055
									],
									[
										19225,
										19229
									],
									[
										19426,
										19430
									],
									[
										19546,
										19550
									],
									[
										19602,
										19606
									],
									[
										19659,
										19663
									],
									[
										19715,
										19719
									],
									[
										19771,
										19775
									],
									[
										19828,
										19832
									],
									[
										19947,
										19951
									],
									[
										20008,
										20012
									],
									[
										20072,
										20076
									],
									[
										20138,
										20142
									],
									[
										20201,
										20205
									],
									[
										20262,
										20266
									],
									[
										20639,
										20643
									],
									[
										20953,
										20957
									],
									[
										21041,
										21045
									],
									[
										21338,
										21342
									],
									[
										21404,
										21408
									],
									[
										21470,
										21474
									],
									[
										21780,
										21784
									],
									[
										21845,
										21849
									],
									[
										21910,
										21914
									],
									[
										22320,
										22324
									],
									[
										22603,
										22607
									],
									[
										22739,
										22743
									],
									[
										22966,
										22970
									],
									[
										23419,
										23423
									],
									[
										23709,
										23713
									],
									[
										23741,
										23745
									],
									[
										24104,
										24108
									],
									[
										24138,
										24142
									],
									[
										24578,
										24582
									],
									[
										24883,
										24887
									],
									[
										25237,
										25241
									],
									[
										25561,
										25565
									],
									[
										25683,
										25687
									],
									[
										25805,
										25809
									],
									[
										25927,
										25931
									],
									[
										26051,
										26055
									],
									[
										26248,
										26252
									],
									[
										26468,
										26472
									],
									[
										26889,
										26893
									],
									[
										26926,
										26930
									],
									[
										26967,
										26971
									],
									[
										27178,
										27182
									],
									[
										27275,
										27279
									],
									[
										27519,
										27523
									],
									[
										27587,
										27591
									],
									[
										27806,
										27810
									],
									[
										27876,
										27880
									],
									[
										27985,
										27989
									],
									[
										28055,
										28059
									],
									[
										28164,
										28168
									],
									[
										28234,
										28238
									],
									[
										28415,
										28419
									],
									[
										28578,
										28582
									],
									[
										28741,
										28745
									],
									[
										28923,
										28927
									],
									[
										29089,
										29093
									],
									[
										29255,
										29259
									],
									[
										29406,
										29410
									],
									[
										29497,
										29501
									],
									[
										29598,
										29602
									],
									[
										29852,
										29856
									],
									[
										29922,
										29926
									],
									[
										30031,
										30035
									],
									[
										30101,
										30105
									],
									[
										30210,
										30214
									],
									[
										30280,
										30284
									],
									[
										30461,
										30465
									],
									[
										30624,
										30628
									],
									[
										30787,
										30791
									],
									[
										30969,
										30973
									],
									[
										31135,
										31139
									],
									[
										31301,
										31305
									],
									[
										31452,
										31456
									],
									[
										31543,
										31547
									],
									[
										31644,
										31648
									],
									[
										31898,
										31902
									],
									[
										31968,
										31972
									],
									[
										32077,
										32081
									],
									[
										32147,
										32151
									],
									[
										32256,
										32260
									],
									[
										32326,
										32330
									],
									[
										32507,
										32511
									],
									[
										32670,
										32674
									],
									[
										32833,
										32837
									],
									[
										33015,
										33019
									],
									[
										33181,
										33185
									],
									[
										33347,
										33351
									],
									[
										33498,
										33502
									],
									[
										33589,
										33593
									],
									[
										33690,
										33694
									],
									[
										33980,
										33984
									],
									[
										34213,
										34217
									],
									[
										34283,
										34287
									],
									[
										34392,
										34396
									],
									[
										34462,
										34466
									],
									[
										34643,
										34647
									],
									[
										34806,
										34810
									],
									[
										34988,
										34992
									],
									[
										35154,
										35158
									],
									[
										35300,
										35304
									],
									[
										35389,
										35393
									],
									[
										35490,
										35494
									],
									[
										35766,
										35770
									],
									[
										35858,
										35862
									],
									[
										36169,
										36173
									],
									[
										36396,
										36400
									],
									[
										36490,
										36494
									],
									[
										36791,
										36795
									],
									[
										37018,
										37022
									],
									[
										37112,
										37116
									],
									[
										37384,
										37388
									],
									[
										37636,
										37640
									],
									[
										37978,
										37982
									],
									[
										38215,
										38219
									],
									[
										38466,
										38470
									],
									[
										38738,
										38742
									],
									[
										39067,
										39071
									],
									[
										39309,
										39313
									],
									[
										39561,
										39565
									],
									[
										39832,
										39836
									],
									[
										40073,
										40077
									],
									[
										40339,
										40343
									],
									[
										40650,
										40654
									],
									[
										40912,
										40916
									],
									[
										41511,
										41515
									],
									[
										41875,
										41879
									],
									[
										42119,
										42123
									],
									[
										42291,
										42295
									],
									[
										42515,
										42519
									],
									[
										42714,
										42718
									],
									[
										42964,
										42968
									],
									[
										43289,
										43293
									],
									[
										43591,
										43595
									],
									[
										43660,
										43664
									],
									[
										43723,
										43727
									],
									[
										43963,
										43967
									],
									[
										44103,
										44107
									],
									[
										44489,
										44493
									],
									[
										44661,
										44665
									],
									[
										44983,
										44987
									],
									[
										45282,
										45286
									],
									[
										45316,
										45320
									],
									[
										45591,
										45595
									],
									[
										45645,
										45649
									],
									[
										45912,
										45916
									],
									[
										45924,
										45928
									],
									[
										45936,
										45940
									],
									[
										45948,
										45952
									],
									[
										45960,
										45964
									],
									[
										46211,
										46215
									],
									[
										46455,
										46459
									],
									[
										46698,
										46702
									],
									[
										46765,
										46769
									],
									[
										46832,
										46836
									],
									[
										46906,
										46910
									],
									[
										46972,
										46976
									],
									[
										47038,
										47042
									],
									[
										47200,
										47204
									],
									[
										47276,
										47280
									],
									[
										47352,
										47356
									],
									[
										47435,
										47439
									],
									[
										47509,
										47513
									],
									[
										47583,
										47587
									],
									[
										47830,
										47834
									],
									[
										47906,
										47910
									],
									[
										47982,
										47986
									],
									[
										48065,
										48069
									],
									[
										48139,
										48143
									],
									[
										48213,
										48217
									],
									[
										48396,
										48400
									],
									[
										48463,
										48467
									],
									[
										48530,
										48534
									],
									[
										48604,
										48608
									],
									[
										48670,
										48674
									],
									[
										48736,
										48740
									],
									[
										49038,
										49042
									],
									[
										49590,
										49594
									],
									[
										50087,
										50091
									],
									[
										50093,
										50097
									],
									[
										50099,
										50103
									],
									[
										50338,
										50342
									],
									[
										50414,
										50418
									],
									[
										50484,
										50488
									],
									[
										50734,
										50738
									],
									[
										50906,
										50910
									],
									[
										51372,
										51376
									],
									[
										51521,
										51525
									],
									[
										51857,
										51861
									],
									[
										51868,
										51872
									],
									[
										51876,
										51880
									],
									[
										51893,
										51897
									],
									[
										51908,
										51912
									],
									[
										51936,
										51940
									],
									[
										51949,
										51953
									],
									[
										51983,
										51987
									],
									[
										52014,
										52018
									],
									[
										52069,
										52073
									],
									[
										52082,
										52086
									],
									[
										52112,
										52116
									],
									[
										52144,
										52148
									],
									[
										52157,
										52161
									],
									[
										52185,
										52189
									],
									[
										52203,
										52207
									],
									[
										52219,
										52223
									],
									[
										52240,
										52244
									],
									[
										52250,
										52254
									],
									[
										52307,
										52311
									],
									[
										52326,
										52330
									],
									[
										52336,
										52340
									],
									[
										52393,
										52397
									],
									[
										52402,
										52406
									],
									[
										52411,
										52415
									],
									[
										52647,
										52651
									],
									[
										52822,
										52826
									],
									[
										52837,
										52841
									],
									[
										52998,
										53002
									],
									[
										53169,
										53173
									],
									[
										53416,
										53420
									],
									[
										53644,
										53648
									],
									[
										53927,
										53931
									],
									[
										54124,
										54128
									],
									[
										54378,
										54382
									],
									[
										54713,
										54717
									],
									[
										55100,
										55104
									],
									[
										55410,
										55414
									],
									[
										55679,
										55683
									],
									[
										55929,
										55933
									],
									[
										55948,
										55952
									],
									[
										55966,
										55970
									],
									[
										55985,
										55989
									],
									[
										55997,
										56001
									],
									[
										56020,
										56024
									],
									[
										56063,
										56067
									],
									[
										56079,
										56083
									],
									[
										56097,
										56101
									],
									[
										56113,
										56117
									],
									[
										56132,
										56136
									],
									[
										56152,
										56156
									],
									[
										56444,
										56448
									],
									[
										56635,
										56639
									],
									[
										56837,
										56841
									],
									[
										57127,
										57131
									],
									[
										57381,
										57385
									],
									[
										57630,
										57634
									],
									[
										57638,
										57642
									],
									[
										57984,
										57988
									],
									[
										58189,
										58193
									],
									[
										58260,
										58264
									],
									[
										58436,
										58440
									],
									[
										58521,
										58525
									],
									[
										58695,
										58699
									],
									[
										59008,
										59012
									],
									[
										59288,
										59292
									],
									[
										59471,
										59475
									],
									[
										59755,
										59758
									],
									[
										60114,
										60118
									],
									[
										60478,
										60482
									],
									[
										60584,
										60588
									],
									[
										60685,
										60689
									],
									[
										60787,
										60791
									],
									[
										60897,
										60901
									],
									[
										61009,
										61013
									],
									[
										61130,
										61134
									],
									[
										61236,
										61240
									],
									[
										61378,
										61382
									],
									[
										61504,
										61508
									],
									[
										61637,
										61641
									],
									[
										61807,
										61811
									],
									[
										61949,
										61953
									],
									[
										62138,
										62142
									],
									[
										62420,
										62424
									],
									[
										62482,
										62486
									],
									[
										62544,
										62548
									],
									[
										62614,
										62618
									],
									[
										62676,
										62680
									],
									[
										62738,
										62742
									],
									[
										63053,
										63056
									],
									[
										63272,
										63275
									],
									[
										63293,
										63296
									],
									[
										63554,
										63557
									],
									[
										63590,
										63593
									],
									[
										63784,
										63787
									],
									[
										63805,
										63808
									],
									[
										63827,
										63830
									],
									[
										64131,
										64135
									],
									[
										64213,
										64217
									],
									[
										64498,
										64502
									],
									[
										64677,
										64681
									],
									[
										64988,
										64992
									],
									[
										65300,
										65303
									],
									[
										65509,
										65513
									],
									[
										65876,
										65880
									],
									[
										65970,
										65974
									],
									[
										66065,
										66069
									],
									[
										66159,
										66163
									],
									[
										66254,
										66258
									],
									[
										66348,
										66352
									],
									[
										66602,
										66606
									],
									[
										66785,
										66789
									],
									[
										66966,
										66970
									],
									[
										67140,
										67144
									],
									[
										67312,
										67316
									],
									[
										67486,
										67490
									],
									[
										67687,
										67691
									],
									[
										67807,
										67811
									],
									[
										67863,
										67867
									],
									[
										67920,
										67924
									],
									[
										67976,
										67980
									],
									[
										68032,
										68036
									],
									[
										68089,
										68093
									],
									[
										68208,
										68212
									],
									[
										68269,
										68273
									],
									[
										68333,
										68337
									],
									[
										68399,
										68403
									],
									[
										68462,
										68466
									],
									[
										68523,
										68527
									],
									[
										68900,
										68904
									],
									[
										69214,
										69218
									],
									[
										69302,
										69306
									],
									[
										69615,
										69618
									],
									[
										69911,
										69915
									],
									[
										69977,
										69981
									],
									[
										70043,
										70047
									],
									[
										70353,
										70357
									],
									[
										70418,
										70422
									],
									[
										70483,
										70487
									],
									[
										70893,
										70897
									],
									[
										71176,
										71180
									],
									[
										71312,
										71316
									],
									[
										71539,
										71543
									],
									[
										71992,
										71996
									],
									[
										72282,
										72286
									],
									[
										72314,
										72318
									],
									[
										72677,
										72681
									],
									[
										72711,
										72715
									],
									[
										73151,
										73155
									],
									[
										73456,
										73460
									],
									[
										73810,
										73814
									],
									[
										74134,
										74138
									],
									[
										74256,
										74260
									],
									[
										74378,
										74382
									],
									[
										74500,
										74504
									],
									[
										74624,
										74628
									],
									[
										74821,
										74825
									],
									[
										75041,
										75045
									],
									[
										75462,
										75466
									],
									[
										75499,
										75503
									],
									[
										75540,
										75544
									],
									[
										75751,
										75755
									],
									[
										75848,
										75852
									],
									[
										76092,
										76096
									],
									[
										76160,
										76164
									],
									[
										76379,
										76383
									],
									[
										76449,
										76453
									],
									[
										76558,
										76562
									],
									[
										76628,
										76632
									],
									[
										76737,
										76741
									],
									[
										76807,
										76811
									],
									[
										76988,
										76992
									],
									[
										77151,
										77155
									],
									[
										77314,
										77318
									],
									[
										77496,
										77500
									],
									[
										77662,
										77666
									],
									[
										77828,
										77832
									],
									[
										77979,
										77983
									],
									[
										78070,
										78074
									],
									[
										78171,
										78175
									],
									[
										78425,
										78429
									],
									[
										78495,
										78499
									],
									[
										78604,
										78608
									],
									[
										78674,
										78678
									],
									[
										78783,
										78787
									],
									[
										78853,
										78857
									],
									[
										79034,
										79038
									],
									[
										79197,
										79201
									],
									[
										79360,
										79364
									],
									[
										79542,
										79546
									],
									[
										79708,
										79712
									],
									[
										79874,
										79878
									],
									[
										80025,
										80029
									],
									[
										80116,
										80120
									],
									[
										80217,
										80221
									],
									[
										80471,
										80475
									],
									[
										80541,
										80545
									],
									[
										80650,
										80654
									],
									[
										80720,
										80724
									],
									[
										80829,
										80833
									],
									[
										80899,
										80903
									],
									[
										81080,
										81084
									],
									[
										81243,
										81247
									],
									[
										81406,
										81410
									],
									[
										81588,
										81592
									],
									[
										81754,
										81758
									],
									[
										81920,
										81924
									],
									[
										82071,
										82075
									],
									[
										82162,
										82166
									],
									[
										82263,
										82267
									],
									[
										82553,
										82557
									],
									[
										82786,
										82790
									],
									[
										82856,
										82860
									],
									[
										82965,
										82969
									],
									[
										83035,
										83039
									],
									[
										83216,
										83220
									],
									[
										83379,
										83383
									],
									[
										83561,
										83565
									],
									[
										83727,
										83731
									],
									[
										83873,
										83877
									],
									[
										83962,
										83966
									],
									[
										84063,
										84067
									],
									[
										84339,
										84343
									],
									[
										84431,
										84435
									],
									[
										84763,
										84766
									],
									[
										84784,
										84787
									],
									[
										85070,
										85074
									],
									[
										85297,
										85301
									],
									[
										85391,
										85395
									],
									[
										85692,
										85696
									],
									[
										85919,
										85923
									],
									[
										86013,
										86017
									],
									[
										86285,
										86289
									],
									[
										86537,
										86541
									],
									[
										86879,
										86883
									],
									[
										87116,
										87120
									],
									[
										87479,
										87482
									],
									[
										87821,
										87825
									],
									[
										88093,
										88097
									],
									[
										88422,
										88426
									],
									[
										88664,
										88668
									],
									[
										88916,
										88920
									],
									[
										89187,
										89191
									],
									[
										89428,
										89432
									],
									[
										89694,
										89698
									],
									[
										90005,
										90009
									],
									[
										90267,
										90271
									],
									[
										90866,
										90870
									],
									[
										91324,
										91327
									],
									[
										91511,
										91515
									],
									[
										91755,
										91759
									],
									[
										91914,
										91917
									],
									[
										92089,
										92092
									],
									[
										92272,
										92276
									],
									[
										92496,
										92500
									],
									[
										92695,
										92699
									],
									[
										92935,
										92938
									],
									[
										93164,
										93168
									],
									[
										93399,
										93402
									],
									[
										93430,
										93433
									],
									[
										93460,
										93463
									],
									[
										93806,
										93809
									],
									[
										93837,
										93840
									],
									[
										93868,
										93871
									],
									[
										93893,
										93896
									],
									[
										94212,
										94215
									],
									[
										94243,
										94246
									],
									[
										94274,
										94277
									],
									[
										94299,
										94302
									],
									[
										94624,
										94627
									],
									[
										94655,
										94658
									],
									[
										94686,
										94689
									],
									[
										94711,
										94714
									],
									[
										95108,
										95112
									],
									[
										95410,
										95414
									],
									[
										95479,
										95483
									],
									[
										95542,
										95546
									],
									[
										95782,
										95786
									],
									[
										95922,
										95926
									],
									[
										96308,
										96312
									],
									[
										96480,
										96484
									],
									[
										96802,
										96806
									],
									[
										97185,
										97188
									],
									[
										97335,
										97338
									],
									[
										97550,
										97553
									],
									[
										97574,
										97577
									],
									[
										97854,
										97857
									],
									[
										97878,
										97881
									],
									[
										98090,
										98094
									],
									[
										98124,
										98128
									],
									[
										98188,
										98191
									],
									[
										98399,
										98403
									],
									[
										98453,
										98457
									],
									[
										98778,
										98781
									],
									[
										98790,
										98793
									],
									[
										98802,
										98805
									],
									[
										98814,
										98817
									],
									[
										98826,
										98829
									],
									[
										99033,
										99036
									],
									[
										99200,
										99203
									],
									[
										99218,
										99221
									],
									[
										99458,
										99461
									],
									[
										99476,
										99479
									],
									[
										99648,
										99651
									],
									[
										99819,
										99822
									],
									[
										100006,
										100009
									],
									[
										100115,
										100118
									],
									[
										100396,
										100399
									],
									[
										100733,
										100737
									],
									[
										100745,
										100749
									],
									[
										100757,
										100761
									],
									[
										100769,
										100773
									],
									[
										100781,
										100785
									],
									[
										101032,
										101036
									],
									[
										101276,
										101280
									],
									[
										101519,
										101523
									],
									[
										101586,
										101590
									],
									[
										101653,
										101657
									],
									[
										101727,
										101731
									],
									[
										101793,
										101797
									],
									[
										101859,
										101863
									],
									[
										102021,
										102025
									],
									[
										102097,
										102101
									],
									[
										102173,
										102177
									],
									[
										102256,
										102260
									],
									[
										102330,
										102334
									],
									[
										102404,
										102408
									],
									[
										102651,
										102655
									],
									[
										102727,
										102731
									],
									[
										102803,
										102807
									],
									[
										102886,
										102890
									],
									[
										102960,
										102964
									],
									[
										103034,
										103038
									],
									[
										103217,
										103221
									],
									[
										103284,
										103288
									],
									[
										103351,
										103355
									],
									[
										103425,
										103429
									],
									[
										103491,
										103495
									],
									[
										103557,
										103561
									],
									[
										103901,
										103904
									],
									[
										104315,
										104319
									],
									[
										104867,
										104871
									],
									[
										105364,
										105368
									],
									[
										105370,
										105374
									],
									[
										105376,
										105380
									],
									[
										105615,
										105619
									],
									[
										105691,
										105695
									],
									[
										105761,
										105765
									],
									[
										106011,
										106015
									],
									[
										106183,
										106187
									],
									[
										106616,
										106619
									],
									[
										106927,
										106930
									],
									[
										107300,
										107304
									],
									[
										107449,
										107453
									],
									[
										107725,
										107728
									],
									[
										108021,
										108025
									],
									[
										108032,
										108036
									],
									[
										108040,
										108044
									],
									[
										108057,
										108061
									],
									[
										108072,
										108076
									],
									[
										108100,
										108104
									],
									[
										108113,
										108117
									],
									[
										108147,
										108151
									],
									[
										108178,
										108182
									],
									[
										108233,
										108237
									],
									[
										108246,
										108250
									],
									[
										108276,
										108280
									],
									[
										108308,
										108312
									],
									[
										108321,
										108325
									],
									[
										108349,
										108353
									],
									[
										108367,
										108371
									],
									[
										108383,
										108387
									],
									[
										108404,
										108408
									],
									[
										108414,
										108418
									],
									[
										108471,
										108475
									],
									[
										108490,
										108494
									],
									[
										108500,
										108504
									],
									[
										108557,
										108561
									],
									[
										108566,
										108570
									],
									[
										108575,
										108579
									],
									[
										108750,
										108753
									],
									[
										109034,
										109037
									],
									[
										109190,
										109193
									],
									[
										109421,
										109424
									],
									[
										109619,
										109622
									],
									[
										109907,
										109910
									],
									[
										110228,
										110232
									],
									[
										110403,
										110407
									],
									[
										110418,
										110422
									],
									[
										110579,
										110583
									],
									[
										110750,
										110754
									],
									[
										110997,
										111001
									],
									[
										111225,
										111229
									],
									[
										111508,
										111512
									],
									[
										111705,
										111709
									],
									[
										111959,
										111963
									],
									[
										112294,
										112298
									],
									[
										112590,
										112593
									],
									[
										112886,
										112890
									],
									[
										113196,
										113200
									],
									[
										113465,
										113469
									],
									[
										113715,
										113719
									],
									[
										113734,
										113738
									],
									[
										113752,
										113756
									],
									[
										113771,
										113775
									],
									[
										113783,
										113787
									],
									[
										113806,
										113810
									],
									[
										113849,
										113853
									],
									[
										113865,
										113869
									],
									[
										113883,
										113887
									],
									[
										113899,
										113903
									],
									[
										113918,
										113922
									],
									[
										113938,
										113942
									],
									[
										114230,
										114234
									],
									[
										114421,
										114425
									],
									[
										114623,
										114627
									],
									[
										114850,
										114853
									],
									[
										115210,
										115214
									],
									[
										115464,
										115468
									],
									[
										115713,
										115717
									],
									[
										115721,
										115725
									],
									[
										116066,
										116073
									],
									[
										116271,
										116278
									],
									[
										116342,
										116349
									],
									[
										116518,
										116525
									],
									[
										116728,
										116735
									],
									[
										116972,
										116979
									],
									[
										117336,
										117343
									],
									[
										117373,
										117380
									],
									[
										117414,
										117421
									],
									[
										117680,
										117687
									],
									[
										117946,
										117953
									],
									[
										118279,
										118286
									],
									[
										118878,
										118885
									],
									[
										119276,
										119283
									],
									[
										119605,
										119612
									],
									[
										119981,
										119988
									],
									[
										120533,
										120540
									],
									[
										120921,
										120928
									],
									[
										121161,
										121168
									],
									[
										121336,
										121343
									],
									[
										121351,
										121358
									],
									[
										121512,
										121519
									],
									[
										121683,
										121690
									],
									[
										121930,
										121937
									],
									[
										122195,
										122202
									],
									[
										122505,
										122512
									],
									[
										122719,
										122726
									],
									[
										122910,
										122917
									],
									[
										123200,
										123207
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								115830,
								115830
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 5,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 43741.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/line.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10709,
						"regions":
						{
						},
						"selection":
						[
							[
								1088,
								1088
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".#",
									"selector": "text.html"
								}
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.CSS Extended Completions":
	{
		"height": 0.0
	},
	"output.doc":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"line",
				"src/line.h"
			],
			[
				"matr",
				"src/matrix.h"
			],
			[
				"lien",
				"src/line.h"
			],
			[
				"matrix",
				"src/matrix.h"
			],
			[
				"mat.",
				"/usr/include/opencv4/opencv2/core/mat.hpp"
			],
			[
				"canny",
				"src/CannyWebcam1.cpp"
			],
			[
				"cann",
				"src/CannyWebcam1.cpp"
			],
			[
				"types",
				"/usr/include/opencv4/opencv2/core/types.hpp"
			],
			[
				"core",
				"/usr/include/opencv4/opencv2/core/core.hpp"
			],
			[
				"line.h",
				"src/line.h"
			],
			[
				"core.hpp",
				"/usr/include/opencv4/opencv2/core.hpp"
			],
			[
				"line.",
				"src/line.h"
			],
			[
				"",
				"src/CannyWebcam1.cpp"
			],
			[
				"psim",
				"src/psimpl.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
