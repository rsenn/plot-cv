{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Extra",
				"ExtractRotation"
			],
			[
				"tra",
				"transformation"
			],
			[
				"define",
				"defineProperties"
			],
			[
				"getters",
				"gettersSetters"
			],
			[
				"circui",
				"circuitFilePath"
			],
			[
				"Conn",
				"ConnectionPoint"
			],
			[
				"parseCom",
				"parseCommentOrEmpty"
			],
			[
				"circ",
				"circuitFilePath"
			],
			[
				"built",
				"builtin_attr"
			],
			[
				"dep",
				"depthOrPred"
			],
			[
				"exte",
				"extendAsyncGenerator"
			],
			[
				"extend",
				"extendArray"
			],
			[
				"allo",
				"allowedDirs"
			],
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  value =>\n  (level, message) =>\nAsyncCollect(iter)\nExecTool(cmd, ...args)\nGetMime(file)\nMatcher(pattern, t = arg => arg)\n  (...args) =>\nKeyOrValueMatcher(pattern)\n  ([key, value]) =>\nGetRootDirectories(pattern = '*')\nMakeUUID = (rng = Math.random) =>\n  n =>\n  dd =>\n  d =>\n  d =>\n  d =>\nGetDir(dir)\n  n =>\nDirName(name)\n  it =>\nDateStr(date)\nModeStr(mode)\nHTMLPage = ({ title, style, scripts = [], children, ...props }) =>\n  script =>\nFilterForm = ({ ...props }) =>\nHTMLTable = ({ rows, ...props }) =>\nHTMLTableRow = ({ columns, ...props }) =>\nHTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>\nFileLink = ({ file, ...props }) =>\nFileObject = ({ file, stat = {}, ...props }) =>\nFileTable = ({ files, ...props }) =>\n(a, b) =>\n  field =>\n  file =>\nReadExiv2(file)\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n(a, b) =>\n([k, v]) =>\nReadExiftool(file)\n  l =>\n  line =>\n([line, idx]) =>\nHeifConvert(src, dst, quality = 100)\nMagickResize(src, dst, rotate = 0, width, height)\n  main(...args)\n  (a, v) =>\n  (v, pv, o) =>\n  (module, ...args) =>\n  m =>\n  .show = arg =>\n  .cleanup = () =>\n  (...args) =>\n() =>\n  puts(s)\n() =>\nParseBody(gen)\n  .createWS = (url, callbacks, listen) =>\n  .out = s =>\n  test(req, resp)\n  proxy(req, resp)\n  config(req, resp)\n  file(req, resp)\n  dir =>\n  f =>\n  file =>\n  uploads(req, resp)\n  s =>\n  files(req, resp)\n  n =>\n([name, type]) =>\n  files2(req, resp)\n  n =>\n  n =>\n  n =>\n(a, b) =>\n  name =>\n  file =>\n  file =>\n([file, rel]) =>\n(acc, [file, st]) =>\n  string(a, b)\n  number(a, b)\n([name, obj]) =>\n({ name }) =>\n  onConnect(ws, req)\n  .sendCommand = function(data)\n  onClose(ws, reason)\n  onHttp(ws, req, resp)\n  onOpen(name, filename)\n  onContent(name, data)\n  onClose(name, file)\n  f = x =>\n  onFinalize()\n  (match, p1, p0, p2, p3, offset) =>\n  onMessage(ws, data)\n  onFd(fd, rd, wr)\n  get connections()\n  get by_uuid()\n  uuid(data)\n  onFd(fd, rd, wr)\n  onClose(ws, reason)\n  onMessage(ws, data)\n  quit(why)",
			"settings":
			{
				"buffer_size": 1945,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 34600,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAO92AAAAAAAA8HYAAAAAAAAAAAAA8HYAAAAAAADxdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA73YAAAAAAADvdgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"left_delete",
					null,
					"AQAAAPB2AAAAAAAA8HYAAAAAAAABAAAAfA",
					"AQAAAAAAAAABAAAA8XYAAAAAAADxdgAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "??"
					},
					"AgAAAPB2AAAAAAAA8XYAAAAAAAAAAAAA8XYAAAAAAADydgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8HYAAAAAAADwdgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " }{"
					},
					"AwAAAPJ2AAAAAAAA83YAAAAAAAAAAAAA83YAAAAAAAD0dgAAAAAAAAAAAAD0dgAAAAAAAPV2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8nYAAAAAAADydgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					2,
					"left_delete",
					null,
					"AgAAAPR2AAAAAAAA9HYAAAAAAAABAAAAe/N2AAAAAAAA83YAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAA9XYAAAAAAAD1dgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "{}"
					},
					"AgAAAPN2AAAAAAAA9HYAAAAAAAAAAAAA9HYAAAAAAAD1dgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA83YAAAAAAADzdgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKN2AAAAAAAApHYAAAAAAAAAAAAApHYAAAAAAACldgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAo3YAAAAAAACjdgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAKR2AAAAAAAApXYAAAAAAAAAAAAApXYAAAAAAACmdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApHYAAAAAAACkdgAAAAAAAAAAAAAAAAAA"
				],
				[
					69,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKZ2AAAAAAAAqHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApnYAAAAAAACmdgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "!req.headers"
					},
					"DAAAAKd2AAAAAAAAqHYAAAAAAAAAAAAAqHYAAAAAAACpdgAAAAAAAAAAAACpdgAAAAAAAKp2AAAAAAAAAAAAAKp2AAAAAAAAq3YAAAAAAAAAAAAAq3YAAAAAAACsdgAAAAAAAAAAAACsdgAAAAAAAK12AAAAAAAAAAAAAK12AAAAAAAArnYAAAAAAAAAAAAArnYAAAAAAACvdgAAAAAAAAAAAACvdgAAAAAAALB2AAAAAAAAAAAAALB2AAAAAAAAsXYAAAAAAAAAAAAAsXYAAAAAAACydgAAAAAAAAAAAACydgAAAAAAALN2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAp3YAAAAAAACndgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DQAAALR2AAAAAAAAtXYAAAAAAAAAAAAAtXYAAAAAAAC3dgAAAAAAAAAAAAC3dgAAAAAAALh2AAAAAAAAAAAAALh2AAAAAAAAuXYAAAAAAAAAAAAAuXYAAAAAAAC6dgAAAAAAAAAAAAC6dgAAAAAAALt2AAAAAAAAAAAAALt2AAAAAAAAvHYAAAAAAAAAAAAAvHYAAAAAAAC9dgAAAAAAAAAAAAC9dgAAAAAAAL52AAAAAAAAAAAAAL52AAAAAAAAv3YAAAAAAAAAAAAAv3YAAAAAAADAdgAAAAAAAAAAAADAdgAAAAAAAMF2AAAAAAAAAAAAAMF2AAAAAAAAwnYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtHYAAAAAAAC0dgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMJ2AAAAAAAAxHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwnYAAAAAAADCdgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMN2AAAAAAAAxXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw3YAAAAAAADDdgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "No"
					},
					"AgAAAMR2AAAAAAAAxXYAAAAAAAAAAAAAxXYAAAAAAADGdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxHYAAAAAAADEdgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " headers"
					},
					"CAAAAMZ2AAAAAAAAx3YAAAAAAAAAAAAAx3YAAAAAAADIdgAAAAAAAAAAAADIdgAAAAAAAMl2AAAAAAAAAAAAAMl2AAAAAAAAynYAAAAAAAAAAAAAynYAAAAAAADLdgAAAAAAAAAAAADLdgAAAAAAAMx2AAAAAAAAAAAAAMx2AAAAAAAAzXYAAAAAAAAAAAAAzXYAAAAAAADOdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxnYAAAAAAADGdgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAM92AAAAAAAA0HYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz3YAAAAAAADPdgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " req"
					},
					"BAAAANB2AAAAAAAA0XYAAAAAAAAAAAAA0XYAAAAAAADSdgAAAAAAAAAAAADSdgAAAAAAANN2AAAAAAAAAAAAANN2AAAAAAAA1HYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0HYAAAAAAADQdgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANV2AAAAAAAA1nYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1XYAAAAAAADVdgAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"left_delete",
					null,
					"AQAAACN3AAAAAAAAI3cAAAAAAAAGAAAAID8/IHt9",
					"AQAAAAAAAAABAAAAI3cAAAAAAAApdwAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					2,
					"indent",
					null,
					"BAAAAKR2AAAAAAAApnYAAAAAAAAAAAAAt3YAAAAAAAC5dgAAAAAAAAAAAACkdgAAAAAAAKZ2AAAAAAAAAAAAALl2AAAAAAAAu3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApHYAAAAAAADXdgAAAAAAAAAAAAAAAAAA"
				],
				[
					105,
					2,
					"left_delete",
					null,
					"AgAAALd2AAAAAAAAt3YAAAAAAAABAAAAKbZ2AAAAAAAAtnYAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAuHYAAAAAAAC4dgAAAAAAAP///////+9/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALZ2AAAAAAAAt3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtnYAAAAAAAC2dgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAALd2AAAAAAAAuHYAAAAAAAAAAAAAuHYAAAAAAAC5dgAAAAAAAAAAAAC5dgAAAAAAALp2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAt3YAAAAAAAC3dgAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": " typeof"
					},
					"BwAAALp2AAAAAAAAu3YAAAAAAAAAAAAAu3YAAAAAAAC8dgAAAAAAAAAAAAC8dgAAAAAAAL12AAAAAAAAAAAAAL12AAAAAAAAvnYAAAAAAAAAAAAAvnYAAAAAAAC/dgAAAAAAAAAAAAC/dgAAAAAAAMB2AAAAAAAAAAAAAMB2AAAAAAAAwXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAunYAAAAAAAC6dgAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": " req.headers"
					},
					"DAAAAMF2AAAAAAAAwnYAAAAAAAAAAAAAwnYAAAAAAADDdgAAAAAAAAAAAADDdgAAAAAAAMR2AAAAAAAAAAAAAMR2AAAAAAAAxXYAAAAAAAAAAAAAxXYAAAAAAADGdgAAAAAAAAAAAADGdgAAAAAAAMd2AAAAAAAAAAAAAMd2AAAAAAAAyHYAAAAAAAAAAAAAyHYAAAAAAADJdgAAAAAAAAAAAADJdgAAAAAAAMp2AAAAAAAAAAAAAMp2AAAAAAAAy3YAAAAAAAAAAAAAy3YAAAAAAADMdgAAAAAAAAAAAADMdgAAAAAAAM12AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwXYAAAAAAADBdgAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAM12AAAAAAAAznYAAAAAAAAAAAAAznYAAAAAAADPdgAAAAAAAAAAAADPdgAAAAAAANB2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzXYAAAAAAADNdgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANB2AAAAAAAA0XYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0HYAAAAAAADQdgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANF2AAAAAAAA03YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0XYAAAAAAADRdgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "object"
					},
					"BgAAANJ2AAAAAAAA03YAAAAAAAAAAAAA03YAAAAAAADUdgAAAAAAAAAAAADUdgAAAAAAANV2AAAAAAAAAAAAANV2AAAAAAAA1nYAAAAAAAAAAAAA1nYAAAAAAADXdgAAAAAAAAAAAADXdgAAAAAAANh2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0nYAAAAAAADSdgAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAANl2AAAAAAAA2nYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2XYAAAAAAADZdgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA2nYAAAAAAADadgAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKN2AAAAAAAApHYAAAAAAAAAAAAApHYAAAAAAACldgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAo3YAAAAAAACjdgAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "throw"
					},
					"BQAAAKV2AAAAAAAApnYAAAAAAAAAAAAApnYAAAAAAACndgAAAAAAAAAAAACndgAAAAAAAKh2AAAAAAAAAAAAAKh2AAAAAAAAqXYAAAAAAAAAAAAAqXYAAAAAAACqdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApXYAAAAAAACldgAAAAAAAAAAAAAAAAAA"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAAKp2AAAAAAAAq3YAAAAAAAAAAAAAq3YAAAAAAACsdgAAAAAAAAAAAACsdgAAAAAAAK12AAAAAAAAAAAAAK12AAAAAAAArnYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqnYAAAAAAACqdgAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": " Error"
					},
					"BgAAAK52AAAAAAAAr3YAAAAAAAAAAAAAr3YAAAAAAACwdgAAAAAAAAAAAACwdgAAAAAAALF2AAAAAAAAAAAAALF2AAAAAAAAsnYAAAAAAAAAAAAAsnYAAAAAAACzdgAAAAAAAAAAAACzdgAAAAAAALR2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArnYAAAAAAACudgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALR2AAAAAAAAtnYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtHYAAAAAAAC0dgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAALV2AAAAAAAAt3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtXYAAAAAAAC1dgAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"left_delete",
					null,
					"AQAAALV2AAAAAAAAtXYAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAtnYAAAAAAAC2dgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "http"
					},
					"BAAAALZ2AAAAAAAAt3YAAAAAAAAAAAAAt3YAAAAAAAC4dgAAAAAAAAAAAAC4dgAAAAAAALl2AAAAAAAAAAAAALl2AAAAAAAAunYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtnYAAAAAAAC2dgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": " request"
					},
					"CAAAALp2AAAAAAAAu3YAAAAAAAAAAAAAu3YAAAAAAAC8dgAAAAAAAAAAAAC8dgAAAAAAAL12AAAAAAAAAAAAAL12AAAAAAAAvnYAAAAAAAAAAAAAvnYAAAAAAAC/dgAAAAAAAAAAAAC/dgAAAAAAAMB2AAAAAAAAAAAAAMB2AAAAAAAAwXYAAAAAAAAAAAAAwXYAAAAAAADCdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAunYAAAAAAAC6dgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMJ2AAAAAAAAw3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwnYAAAAAAADCdgAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "${"
					},
					"AgAAALt2AAAAAAAAvHYAAAAAAAAAAAAAvHYAAAAAAAC9dgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAu3YAAAAAAAC7dgAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL12AAAAAAAAvnYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvXYAAAAAAAC9dgAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"left_delete",
					null,
					"AQAAAL12AAAAAAAAvXYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAvnYAAAAAAAC+dgAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": "method}"
					},
					"BwAAAL12AAAAAAAAvnYAAAAAAAAAAAAAvnYAAAAAAAC/dgAAAAAAAAAAAAC/dgAAAAAAAMB2AAAAAAAAAAAAAMB2AAAAAAAAwXYAAAAAAAAAAAAAwXYAAAAAAADCdgAAAAAAAAAAAADCdgAAAAAAAMN2AAAAAAAAAAAAAMN2AAAAAAAAxHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvXYAAAAAAAC9dgAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMR2AAAAAAAAxXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxHYAAAAAAADEdgAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"left_delete",
					null,
					"AQAAAMx2AAAAAAAAzHYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAzXYAAAAAAADNdgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAMx2AAAAAAAAzXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzHYAAAAAAADMdgAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM52AAAAAAAAz3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAznYAAAAAAADOdgAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAM92AAAAAAAA0HYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz3YAAAAAAADPdgAAAAAAAP///////+9/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAKV2AAAAAAAAp3YAAAAAAAAAAAAAp3YAAAAAAACpdgAAAAAAAAAAAACpdgAAAAAAAKt2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApXYAAAAAAACldgAAAAAAAAAAAAAAAAAA"
				],
				[
					205,
					1,
					"left_delete",
					null,
					"AQAAAKN2AAAAAAAAo3YAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAApHYAAAAAAACkdgAAAAAAAAAAAAAAAEhA"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKR2AAAAAAAApnYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApHYAAAAAAACkdgAAAAAAAAAAAAAAAAAA"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKx2AAAAAAAArXYAAAAAAAAAAAAArXYAAAAAAACudgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArHYAAAAAAACsdgAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					3,
					"right_delete",
					null,
					"AwAAAKt2AAAAAAAAq3YAAAAAAAABAAAAIKt2AAAAAAAAq3YAAAAAAAABAAAAL6t2AAAAAAAAq3YAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAq3YAAAAAAACrdgAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"left_delete",
					null,
					"AQAAAKp2AAAAAAAAqnYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAq3YAAAAAAACrdgAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKp2AAAAAAAAq3YAAAAAAAAAAAAAq3YAAAAAAACsdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqnYAAAAAAACqdgAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					1,
					"left_delete",
					null,
					"AQAAAKt2AAAAAAAAq3YAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAArHYAAAAAAACsdgAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAKt2AAAAAAAArHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAq3YAAAAAAACrdgAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"cut",
					null,
					"AQAAAJFGAAAAAAAAkUYAAAAAAAAWAAAAZ2xvYigndXBsb2Fkcy8qLmpzb24nKQ",
					"AQAAAAAAAAABAAAAkUYAAAAAAACnRgAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"paste",
					null,
					"AQAAAJFGAAAAAAAAp0YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkUYAAAAAAACRRgAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					1,
					"left_delete",
					null,
					"AQAAAHJGAAAAAAAAckYAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAc0YAAAAAAABzRgAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHJGAAAAAAAAc0YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAckYAAAAAAAByRgAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": " entries="
					},
					"CQAAAHNGAAAAAAAAdEYAAAAAAAAAAAAAdEYAAAAAAAB1RgAAAAAAAAAAAAB1RgAAAAAAAHZGAAAAAAAAAAAAAHZGAAAAAAAAd0YAAAAAAAAAAAAAd0YAAAAAAAB4RgAAAAAAAAAAAAB4RgAAAAAAAHlGAAAAAAAAAAAAAHlGAAAAAAAAekYAAAAAAAAAAAAAekYAAAAAAAB7RgAAAAAAAAAAAAB7RgAAAAAAAHxGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc0YAAAAAAABzRgAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"paste",
					null,
					"AQAAAHxGAAAAAAAAkkYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfEYAAAAAAAB8RgAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJJGAAAAAAAAk0YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkkYAAAAAAACSRgAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAALFGAAAAAAAAskYAAAAAAAAAAAAAskYAAAAAAACzRgAAAAAAAAAAAACzRgAAAAAAALRGAAAAAAAAAAAAALRGAAAAAAAAtUYAAAAAAAAAAAAAtUYAAAAAAAC2RgAAAAAAAAAAAAC2RgAAAAAAALdGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsUYAAAAAAACxRgAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": " entries"
					},
					"CAAAALdGAAAAAAAAuEYAAAAAAAAAAAAAuEYAAAAAAAC5RgAAAAAAAAAAAAC5RgAAAAAAALpGAAAAAAAAAAAAALpGAAAAAAAAu0YAAAAAAAAAAAAAu0YAAAAAAAC8RgAAAAAAAAAAAAC8RgAAAAAAAL1GAAAAAAAAAAAAAL1GAAAAAAAAvkYAAAAAAAAAAAAAvkYAAAAAAAC/RgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAt0YAAAAAAAC3RgAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL9GAAAAAAAAwEYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAv0YAAAAAAAC/RgAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					15,
					"left_delete",
					null,
					"DwAAAL9GAAAAAAAAv0YAAAAAAAABAAAAIL5GAAAAAAAAvkYAAAAAAAABAAAAc71GAAAAAAAAvUYAAAAAAAABAAAAZbxGAAAAAAAAvEYAAAAAAAABAAAAabtGAAAAAAAAu0YAAAAAAAABAAAAcrpGAAAAAAAAukYAAAAAAAABAAAAdLlGAAAAAAAAuUYAAAAAAAABAAAAbrhGAAAAAAAAuEYAAAAAAAABAAAAZbdGAAAAAAAAt0YAAAAAAAABAAAAILZGAAAAAAAAtkYAAAAAAAABAAAAZrVGAAAAAAAAtUYAAAAAAAABAAAAb7RGAAAAAAAAtEYAAAAAAAABAAAAZbNGAAAAAAAAs0YAAAAAAAABAAAAcLJGAAAAAAAAskYAAAAAAAABAAAAebFGAAAAAAAAsUYAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAwEYAAAAAAADARgAAAAAAAAAAAAAAAPC/"
				],
				[
					301,
					1,
					"insert",
					{
						"characters": "Array.isAr"
					},
					"CgAAALFGAAAAAAAAskYAAAAAAAAAAAAAskYAAAAAAACzRgAAAAAAAAAAAACzRgAAAAAAALRGAAAAAAAAAAAAALRGAAAAAAAAtUYAAAAAAAAAAAAAtUYAAAAAAAC2RgAAAAAAAAAAAAC2RgAAAAAAALdGAAAAAAAAAAAAALdGAAAAAAAAuEYAAAAAAAAAAAAAuEYAAAAAAAC5RgAAAAAAAAAAAAC5RgAAAAAAALpGAAAAAAAAAAAAALpGAAAAAAAAu0YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsUYAAAAAAACxRgAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": "ray(entries)"
					},
					"DAAAALtGAAAAAAAAvEYAAAAAAAAAAAAAvEYAAAAAAAC9RgAAAAAAAAAAAAC9RgAAAAAAAL5GAAAAAAAAAAAAAL5GAAAAAAAAv0YAAAAAAAAAAAAAv0YAAAAAAADARgAAAAAAAAAAAADARgAAAAAAAMFGAAAAAAAAAAAAAMFGAAAAAAAAwkYAAAAAAAAAAAAAwkYAAAAAAADDRgAAAAAAAAAAAADDRgAAAAAAAMRGAAAAAAAAAAAAAMRGAAAAAAAAxUYAAAAAAAAAAAAAxUYAAAAAAADGRgAAAAAAAAAAAADGRgAAAAAAAMdGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAu0YAAAAAAAC7RgAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAMdGAAAAAAAAyEYAAAAAAAAAAAAAyEYAAAAAAADJRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAx0YAAAAAAADHRgAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMlGAAAAAAAAykYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyUYAAAAAAADJRgAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "entries"
					},
					"CAAAAMpGAAAAAAAAy0YAAAAAAAAAAAAAy0YAAAAAAADLRgAAAAAAABcAAABnbG9iKCd1cGxvYWRzLyouanNvbicpIMtGAAAAAAAAzEYAAAAAAAAAAAAAzEYAAAAAAADNRgAAAAAAAAAAAADNRgAAAAAAAM5GAAAAAAAAAAAAAM5GAAAAAAAAz0YAAAAAAAAAAAAAz0YAAAAAAADQRgAAAAAAAAAAAADQRgAAAAAAANFGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAykYAAAAAAADhRgAAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAANFGAAAAAAAA0kYAAAAAAAAAAAAA0kYAAAAAAADTRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0UYAAAAAAADRRgAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANNGAAAAAAAA1EYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA00YAAAAAAADTRgAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					3,
					"right_delete",
					null,
					"AwAAANRGAAAAAAAA1EYAAAAAAAABAAAAP9RGAAAAAAAA1EYAAAAAAAABAAAAP9RGAAAAAAAA1EYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA1EYAAAAAAADURgAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANRGAAAAAAAA1UYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1EYAAAAAAADURgAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAlEYAAAAAAACURgAAAAAAAAAAAAAAwIBA"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 79597,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					120,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHRiAAAAAAAAdWIAAAAAAAAAAAAAdWIAAAAAAAB1YgAAAAAAAAYAAAAgICAvLyA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6YgAAAAAAAHRiAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAFBiAAAAAAAAUWIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQYgAAAAAAAFBiAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFFiAAAAAAAAUmIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRYgAAAAAAAFFiAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					2,
					"left_delete",
					null,
					"AgAAAFFiAAAAAAAAUWIAAAAAAAABAAAAIFBiAAAAAAAAUGIAAAAAAAABAAAAbA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSYgAAAAAAAFJiAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFBiAAAAAAAAUWIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQYgAAAAAAAFBiAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": " deep."
					},
					"BgAAAFFiAAAAAAAAUmIAAAAAAAAAAAAAUmIAAAAAAABTYgAAAAAAAAAAAABTYgAAAAAAAFRiAAAAAAAAAAAAAFRiAAAAAAAAVWIAAAAAAAAAAAAAVWIAAAAAAABWYgAAAAAAAAAAAABWYgAAAAAAAFdiAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRYgAAAAAAAFFiAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "RETURN_VALUE"
					},
					"DAAAAFdiAAAAAAAAWGIAAAAAAAAAAAAAWGIAAAAAAABZYgAAAAAAAAAAAABZYgAAAAAAAFpiAAAAAAAAAAAAAFpiAAAAAAAAW2IAAAAAAAAAAAAAW2IAAAAAAABcYgAAAAAAAAAAAABcYgAAAAAAAF1iAAAAAAAAAAAAAF1iAAAAAAAAXmIAAAAAAAAAAAAAXmIAAAAAAABfYgAAAAAAAAAAAABfYgAAAAAAAGBiAAAAAAAAAAAAAGBiAAAAAAAAYWIAAAAAAAAAAAAAYWIAAAAAAABiYgAAAAAAAAAAAABiYgAAAAAAAGNiAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXYgAAAAAAAFdiAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjYgAAAAAAAGNiAAAAAAAAAAAAAAAAjEA"
				],
				[
					155,
					1,
					"cut",
					null,
					"AQAAANFhAAAAAAAA0WEAAAAAAAAiAAAAICAgIC8vIGNvbnNvbGUubG9nKCdhc3Q6JywgYXN0KTsKCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRYQAAAAAAAPNhAAAAAAAAAAAAAAAAAAA"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "(("
					},
					"AgAAAGhiAAAAAAAAaWIAAAAAAAAAAAAAaWIAAAAAAABqYgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoYgAAAAAAAGhiAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					2,
					"left_delete",
					null,
					"AgAAAGliAAAAAAAAaWIAAAAAAAABAAAAKGhiAAAAAAAAaGIAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqYgAAAAAAAGpiAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGhiAAAAAAAAaWIAAAAAAAAAAAAAaWIAAAAAAABqYgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoYgAAAAAAAGhiAAAAAAAAAAAAAAAA8L8"
				],
				[
					167,
					1,
					"left_delete",
					null,
					"AQAAAHVjAAAAAAAAdWMAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2YwAAAAAAAHZjAAAAAAAAAAAAAAAASEA"
				]
			]
		},
		{
			"file": "io-helpers.js",
			"settings":
			{
				"buffer_size": 11744,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"cut",
					null,
					"AQAAACwMAAAAAAAALAwAAAAAAAAOAAAAY29tcGFjdCA9IHRydWU",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsDAAAAAAAADoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "...args"
					},
					"BwAAACwMAAAAAAAALQwAAAAAAAAAAAAALQwAAAAAAAAuDAAAAAAAAAAAAAAuDAAAAAAAAC8MAAAAAAAAAAAAAC8MAAAAAAAAMAwAAAAAAAAAAAAAMAwAAAAAAAAxDAAAAAAAAAAAAAAxDAAAAAAAADIMAAAAAAAAAAAAADIMAAAAAAAAMwwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsDAAAAAAAACwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\nconst"
					},
					"BwAAADYMAAAAAAAANwwAAAAAAAAAAAAANwwAAAAAAAA5DAAAAAAAAAAAAAA5DAAAAAAAADoMAAAAAAAAAAAAADoMAAAAAAAAOwwAAAAAAAAAAAAAOwwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAD0MAAAAAAAAAAAAAD0MAAAAAAAAPgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2DAAAAAAAADYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD4MAAAAAAAAPwwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+DAAAAAAAAD4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAD8MAAAAAAAAQQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/DAAAAAAAAD8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "compat"
					},
					"BgAAAEAMAAAAAAAAQQwAAAAAAAAAAAAAQQwAAAAAAABCDAAAAAAAAAAAAABCDAAAAAAAAEMMAAAAAAAAAAAAAEMMAAAAAAAARAwAAAAAAAAAAAAARAwAAAAAAABFDAAAAAAAAAAAAABFDAAAAAAAAEYMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABADAAAAAAAAEAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAEUMAAAAAAAARQwAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGDAAAAAAAAEYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "ct=true"
					},
					"BwAAAEUMAAAAAAAARgwAAAAAAAAAAAAARgwAAAAAAABHDAAAAAAAAAAAAABHDAAAAAAAAEgMAAAAAAAAAAAAAEgMAAAAAAAASQwAAAAAAAAAAAAASQwAAAAAAABKDAAAAAAAAAAAAABKDAAAAAAAAEsMAAAAAAAAAAAAAEsMAAAAAAAATAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFDAAAAAAAAEUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAE0MAAAAAAAATgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNDAAAAAAAAE0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " args;"
					},
					"BgAAAE4MAAAAAAAATwwAAAAAAAAAAAAATwwAAAAAAABQDAAAAAAAAAAAAABQDAAAAAAAAFEMAAAAAAAAAAAAAFEMAAAAAAAAUgwAAAAAAAAAAAAAUgwAAAAAAABTDAAAAAAAAAAAAABTDAAAAAAAAFQMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABODAAAAAAAAE4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFQMAAAAAAAAVQwAAAAAAAAAAAAAVQwAAAAAAABXDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					1,
					"cut",
					null,
					"AQAAAEcMAAAAAAAARwwAAAAAAAAFAAAAPXRydWU",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHDAAAAAAAAEwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAE8MAAAAAAAAUAwAAAAAAAAAAAAAUAwAAAAAAABSDAAAAAAAAAAAAABTDAAAAAAAAFMMAAAAAAAAAgAAACAgUgwAAAAAAABTDAAAAAAAAAAAAABTDAAAAAAAAFQMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPDAAAAAAAAE8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFQMAAAAAAAAVgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAAFUMAAAAAAAAVgwAAAAAAAAAAAAAVgwAAAAAAABXDAAAAAAAAAAAAABXDAAAAAAAAFgMAAAAAAAAAAAAAFgMAAAAAAAAWQwAAAAAAAAAAAAAWQwAAAAAAABaDAAAAAAAAAAAAABaDAAAAAAAAFsMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVDAAAAAAAAFUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " compact"
					},
					"CAAAAFsMAAAAAAAAXAwAAAAAAAAAAAAAXAwAAAAAAABdDAAAAAAAAAAAAABdDAAAAAAAAF4MAAAAAAAAAAAAAF4MAAAAAAAAXwwAAAAAAAAAAAAAXwwAAAAAAABgDAAAAAAAAAAAAABgDAAAAAAAAGEMAAAAAAAAAAAAAGEMAAAAAAAAYgwAAAAAAAAAAAAAYgwAAAAAAABjDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbDAAAAAAAAFsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAGMMAAAAAAAAZAwAAAAAAAAAAAAAZAwAAAAAAABlDAAAAAAAAAAAAABlDAAAAAAAAGYMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjDAAAAAAAAGMMAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGYMAAAAAAAAZwwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmDAAAAAAAAGYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAGcMAAAAAAAAaQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnDAAAAAAAAGcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "boolean"
					},
					"BwAAAGgMAAAAAAAAaQwAAAAAAAAAAAAAaQwAAAAAAABqDAAAAAAAAAAAAABqDAAAAAAAAGsMAAAAAAAAAAAAAGsMAAAAAAAAbAwAAAAAAAAAAAAAbAwAAAAAAABtDAAAAAAAAAAAAABtDAAAAAAAAG4MAAAAAAAAAAAAAG4MAAAAAAAAbwwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoDAAAAAAAAGgMAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "‚Åæ"
					},
					"AQAAAHAMAAAAAAAAcQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwDAAAAAAAAHAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"left_delete",
					null,
					"AQAAAHAMAAAAAAAAcAwAAAAAAAADAAAA4oG+",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxDAAAAAAAAHEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "\nargs"
					},
					"CAAAAHEMAAAAAAAAcgwAAAAAAAAAAAAAcgwAAAAAAAB0DAAAAAAAAAAAAAByDAAAAAAAAHIMAAAAAAAAAgAAACAgcgwAAAAAAAB2DAAAAAAAAAAAAAB2DAAAAAAAAHcMAAAAAAAAAAAAAHcMAAAAAAAAeAwAAAAAAAAAAAAAeAwAAAAAAAB5DAAAAAAAAAAAAAB5DAAAAAAAAHoMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxDAAAAAAAAHEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					4,
					"left_delete",
					null,
					"BAAAAHkMAAAAAAAAeQwAAAAAAAABAAAAc3gMAAAAAAAAeAwAAAAAAAABAAAAZ3cMAAAAAAAAdwwAAAAAAAABAAAAcnYMAAAAAAAAdgwAAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6DAAAAAAAAHoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "args="
					},
					"BQAAAHYMAAAAAAAAdwwAAAAAAAAAAAAAdwwAAAAAAAB4DAAAAAAAAAAAAAB4DAAAAAAAAHkMAAAAAAAAAAAAAHkMAAAAAAAAegwAAAAAAAAAAAAAegwAAAAAAAB7DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2DAAAAAAAAHYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHsMAAAAAAAAfAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7DAAAAAAAAHsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert_completion",
					{
						"completion": "LogCall(fn, thisObj);",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "function LogCall"
					},
					"AQAAAHwMAAAAAAAAkQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8DAAAAAAAAHwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"cut",
					null,
					"AQAAAMUMAAAAAAAAxQwAAAAAAAAYAAAAY29tcGFjdCA/IFtdIDogW251bGwsIDJd",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFDAAAAAAAAN0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"paste",
					null,
					"AQAAAMUMAAAAAAAA3QwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFDAAAAAAAAMUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"paste",
					null,
					"AgAAAHsMAAAAAAAAkwwAAAAAAAAAAAAAkwwAAAAAAACTDAAAAAAAABYAAAAgTG9nQ2FsbChmbiwgdGhpc09iaik7",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7DAAAAAAAAJEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJMMAAAAAAAAlAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTDAAAAAAAAJMMAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					1,
					"left_delete",
					null,
					"AQAAAMgMAAAAAAAAyAwAAAAAAAAaAAAAY29tcGFjdCA/IFtdIDogW251bGwsIDJdKSk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIDAAAAAAAAOIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAMcMAAAAAAAAxwwAAAAAAAABAAAAKMcMAAAAAAAAxwwAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIDAAAAAAAAMgMAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "arfgs"
					},
					"BQAAAMcMAAAAAAAAyAwAAAAAAAAAAAAAyAwAAAAAAADJDAAAAAAAAAAAAADJDAAAAAAAAMoMAAAAAAAAAAAAAMoMAAAAAAAAywwAAAAAAAAAAAAAywwAAAAAAADMDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHDAAAAAAAAMcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					3,
					"left_delete",
					null,
					"AwAAAMsMAAAAAAAAywwAAAAAAAABAAAAc8oMAAAAAAAAygwAAAAAAAABAAAAZ8kMAAAAAAAAyQwAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMDAAAAAAAAMwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "gs))"
					},
					"BAAAAMkMAAAAAAAAygwAAAAAAAAAAAAAygwAAAAAAADLDAAAAAAAAAAAAADLDAAAAAAAAMwMAAAAAAAAAAAAAMwMAAAAAAAAzQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJDAAAAAAAAMkMAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 60278,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ast-shell.js",
			"settings":
			{
				"buffer_size": 39942,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					53,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLdwAAAAAAAFZ3AAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "sqlite3.js",
			"settings":
			{
				"buffer_size": 3858,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					38,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAAAAAAAAAI8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"",
					null,
					"AQAAAJAAAAAAAAAAhAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					52,
					1,
					"",
					null,
					"AgAAAI8AAAAAAAAA9QkAAAAAAAAAAAAA9QkAAAAAAAD1CQAAAAAAAPUDAAAKZXhwb3J0IGNvbnN0IFNRTElURV9PSyA9IDA7CmV4cG9ydCBjb25zdCBTUUxJVEVfRVJST1IgPSAxOwpleHBvcnQgY29uc3QgU1FMSVRFX0lOVEVSTkFMID0gMjsKZXhwb3J0IGNvbnN0IFNRTElURV9QRVJNID0gMzsKZXhwb3J0IGNvbnN0IFNRTElURV9BQk9SVCA9IDQ7CmV4cG9ydCBjb25zdCBTUUxJVEVfQlVTWSA9IDU7CmV4cG9ydCBjb25zdCBTUUxJVEVfTE9DS0VEID0gNjsKZXhwb3J0IGNvbnN0IFNRTElURV9OT01FTSA9IDc7CmV4cG9ydCBjb25zdCBTUUxJVEVfUkVBRE9OTFkgPSA4OwpleHBvcnQgY29uc3QgU1FMSVRFX0lOVEVSUlVQVCA9IDk7CmV4cG9ydCBjb25zdCBTUUxJVEVfSU9FUlIgPSAxMDsKZXhwb3J0IGNvbnN0IFNRTElURV9DT1JSVVBUID0gMTE7CmV4cG9ydCBjb25zdCBTUUxJVEVfTk9URk9VTkQgPSAxMjsKZXhwb3J0IGNvbnN0IFNRTElURV9GVUxMID0gMTM7CmV4cG9ydCBjb25zdCBTUUxJVEVfQ0FOVE9QRU4gPSAxNDsKZXhwb3J0IGNvbnN0IFNRTElURV9QUk9UT0NPTCA9IDE1OwpleHBvcnQgY29uc3QgU1FMSVRFX0VNUFRZID0gMTY7CmV4cG9ydCBjb25zdCBTUUxJVEVfU0NIRU1BID0gMTc7CmV4cG9ydCBjb25zdCBTUUxJVEVfVE9PQklHID0gMTg7CmV4cG9ydCBjb25zdCBTUUxJVEVfQ09OU1RSQUlOVCA9IDE5OwpleHBvcnQgY29uc3QgU1FMSVRFX01JU01BVENIID0gMjA7CmV4cG9ydCBjb25zdCBTUUxJVEVfTUlTVVNFID0gMjE7CmV4cG9ydCBjb25zdCBTUUxJVEVfTk9MRlMgPSAyMjsKZXhwb3J0IGNvbnN0IFNRTElURV9BVVRIID0gMjM7CmV4cG9ydCBjb25zdCBTUUxJVEVfRk9STUFUID0gMjQ7CmV4cG9ydCBjb25zdCBTUUxJVEVfUkFOR0UgPSAyNTsKZXhwb3J0IGNvbnN0IFNRTElURV9OT1RBREIgPSAyNjsKZXhwb3J0IGNvbnN0IFNRTElURV9OT1RJQ0UgPSAyNzsKZXhwb3J0IGNvbnN0IFNRTElURV9XQVJOSU5HID0gMjg7CmV4cG9ydCBjb25zdCBTUUxJVEVfUk9XID0gMTAwOwpleHBvcnQgY29uc3QgU1FMSVRFX0RPTkUgPSAxMDE7Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAAAAAAAAAIQEAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAI4AAAAAAAAAjwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAAAAAAAAAI4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAABzEAAAaW1wb3J0IHsgZGxvcGVuLCBkZWZpbmUsIGRsZXJyb3IsIGRsY2xvc2UsIGRsc3ltLCBjYWxsLCBlcnJubywgUlRMRF9OT1cgfSBmcm9tICdmZmknOwoKY29uc3QgbGlic3FsaXRlMyA9IGRsb3BlbignbGlic3FsaXRlMy5zby4wJywgUlRMRF9OT1cpOwoKZXhwb3J0IGNvbnN0IFNRTElURV9PSyAgICAgICAgICAgPSAwOyAgICAvKiBTdWNjZXNzZnVsIHJlc3VsdCAqLwpleHBvcnQgY29uc3QgU1FMSVRFX0VSUk9SICAgICAgICA9IDE7ICAgIC8qIEdlbmVyaWMgZXJyb3IgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9JTlRFUk5BTCAgICAgPSAyOyAgICAvKiBJbnRlcm5hbCBsb2dpYyBlcnJvciBpbiBTUUxpdGUgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9QRVJNICAgICAgICAgPSAzOyAgICAvKiBBY2Nlc3MgcGVybWlzc2lvbiBkZW5pZWQgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9BQk9SVCAgICAgICAgPSA0OyAgICAvKiBDYWxsYmFjayByb3V0aW5lIHJlcXVlc3RlZCBhbiBhYm9ydCAqLwpleHBvcnQgY29uc3QgU1FMSVRFX0JVU1kgICAgICAgICA9IDU7ICAgIC8qIFRoZSBkYXRhYmFzZSBmaWxlIGlzIGxvY2tlZCAqLwpleHBvcnQgY29uc3QgU1FMSVRFX0xPQ0tFRCAgICAgICA9IDY7ICAgIC8qIEEgdGFibGUgaW4gdGhlIGRhdGFiYXNlIGlzIGxvY2tlZCAqLwpleHBvcnQgY29uc3QgU1FMSVRFX05PTUVNICAgICAgICA9IDc7ICAgIC8qIEEgbWFsbG9jKCkgZmFpbGVkICovCmV4cG9ydCBjb25zdCBTUUxJVEVfUkVBRE9OTFkgICAgID0gODsgICAgLyogQXR0ZW1wdCB0byB3cml0ZSBhIHJlYWRvbmx5IGRhdGFiYXNlICovCmV4cG9ydCBjb25zdCBTUUxJVEVfSU5URVJSVVBUICAgID0gOTsgICAgLyogT3BlcmF0aW9uIHRlcm1pbmF0ZWQgYnkgc3FsaXRlM19pbnRlcnJ1cHQoKSovCmV4cG9ydCBjb25zdCBTUUxJVEVfSU9FUlIgICAgICAgPSAxMDsgICAgLyogU29tZSBraW5kIG9mIGRpc2sgSS9PIGVycm9yIG9jY3VycmVkICovCmV4cG9ydCBjb25zdCBTUUxJVEVfQ09SUlVQVCAgICAgPSAxMTsgICAgLyogVGhlIGRhdGFiYXNlIGRpc2sgaW1hZ2UgaXMgbWFsZm9ybWVkICovCmV4cG9ydCBjb25zdCBTUUxJVEVfTk9URk9VTkQgICAgPSAxMjsgICAgLyogVW5rbm93biBvcGNvZGUgaW4gc3FsaXRlM19maWxlX2NvbnRyb2woKSAqLwpleHBvcnQgY29uc3QgU1FMSVRFX0ZVTEwgICAgICAgID0gMTM7ICAgIC8qIEluc2VydGlvbiBmYWlsZWQgYmVjYXVzZSBkYXRhYmFzZSBpcyBmdWxsICovCmV4cG9ydCBjb25zdCBTUUxJVEVfQ0FOVE9QRU4gICAgPSAxNDsgICAgLyogVW5hYmxlIHRvIG9wZW4gdGhlIGRhdGFiYXNlIGZpbGUgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9QUk9UT0NPTCAgICA9IDE1OyAgICAvKiBEYXRhYmFzZSBsb2NrIHByb3RvY29sIGVycm9yICovCmV4cG9ydCBjb25zdCBTUUxJVEVfRU1QVFkgICAgICAgPSAxNjsgICAgLyogSW50ZXJuYWwgdXNlIG9ubHkgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9TQ0hFTUEgICAgICA9IDE3OyAgICAvKiBUaGUgZGF0YWJhc2Ugc2NoZW1hIGNoYW5nZWQgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9UT09CSUcgICAgICA9IDE4OyAgICAvKiBTdHJpbmcgb3IgQkxPQiBleGNlZWRzIHNpemUgbGltaXQgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9DT05TVFJBSU5UICA9IDE5OyAgICAvKiBBYm9ydCBkdWUgdG8gY29uc3RyYWludCB2aW9sYXRpb24gKi8KZXhwb3J0IGNvbnN0IFNRTElURV9NSVNNQVRDSCAgICA9IDIwOyAgICAvKiBEYXRhIHR5cGUgbWlzbWF0Y2ggKi8KZXhwb3J0IGNvbnN0IFNRTElURV9NSVNVU0UgICAgICA9IDIxOyAgICAvKiBMaWJyYXJ5IHVzZWQgaW5jb3JyZWN0bHkgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9OT0xGUyAgICAgICA9IDIyOyAgICAvKiBVc2VzIE9TIGZlYXR1cmVzIG5vdCBzdXBwb3J0ZWQgb24gaG9zdCAqLwpleHBvcnQgY29uc3QgU1FMSVRFX0FVVEggICAgICAgID0gMjM7ICAgIC8qIEF1dGhvcml6YXRpb24gZGVuaWVkICovCmV4cG9ydCBjb25zdCBTUUxJVEVfRk9STUFUICAgICAgPSAyNDsgICAgLyogTm90IHVzZWQgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9SQU5HRSAgICAgICA9IDI1OyAgICAvKiAybmQgcGFyYW1ldGVyIHRvIHNxbGl0ZTNfYmluZCBvdXQgb2YgcmFuZ2UgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9OT1RBREIgICAgICA9IDI2OyAgICAvKiBGaWxlIG9wZW5lZCB0aGF0IGlzIG5vdCBhIGRhdGFiYXNlIGZpbGUgKi8KZXhwb3J0IGNvbnN0IFNRTElURV9OT1RJQ0UgICAgICA9IDI3OyAgICAvKiBOb3RpZmljYXRpb25zIGZyb20gc3FsaXRlM19sb2coKSAqLwpleHBvcnQgY29uc3QgU1FMSVRFX1dBUk5JTkcgICAgID0gMjg7ICAgIC8qIFdhcm5pbmdzIGZyb20gc3FsaXRlM19sb2coKSAqLwpleHBvcnQgY29uc3QgU1FMSVRFX1JPVyAgICAgICAgID0gMTAwOyAgIC8qIHNxbGl0ZTNfc3RlcCgpIGhhcyBhbm90aGVyIHJvdyByZWFkeSAqLwpleHBvcnQgY29uc3QgU1FMSVRFX0RPTkUgICAgICAgID0gMTAxOyAgIC8qIHNxbGl0ZTNfc3RlcCgpIGhhcyBmaW5pc2hlZCBleGVjdXRpbmcgKi8KCgovKiogICAgICAgCiAqIEBmdW5jdGlvbiBzcWxpdGUzX2Nsb3NlICAgCiAqIAogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIGFyZzEKICogCiAqIEByZXR1cm4gICB7TnVtYmVyfSAgICAgICAgCiAqLwpkZWZpbmUoJ3NxbGl0ZTNfY2xvc2UnLCBkbHN5bShsaWJzcWxpdGUzLCAnc3FsaXRlM19jbG9zZScpLCBudWxsLCAnaW50JywgJ3ZvaWQgKicpOwpleHBvcnQgZnVuY3Rpb24gc3FsaXRlM19jbG9zZShhcmcxKSB7CiAgcmV0dXJuIGNhbGwoJ3NxbGl0ZTNfY2xvc2UnLCBhcmcxKTsKfQoKLyoqICAgICAgIAogKiBAZnVuY3Rpb24gc3FsaXRlM19leGVjICAgIAogKiAKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBhcmcxCiAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgICAgc3FsCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgY2FsbGJhY2sKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBhcmc0CiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgZXJybXNnCiAqIAogKiBAcmV0dXJuICAge051bWJlcn0gICAgICAgIAogKi8KZGVmaW5lKCdzcWxpdGUzX2V4ZWMnLCBkbHN5bShsaWJzcWxpdGUzLCAnc3FsaXRlM19leGVjJyksIG51bGwsICdpbnQnLCAndm9pZCAqJywgJ2NoYXIgKicsICdsb25nJywgJ3ZvaWQgKicsICd2b2lkIConKTsKZXhwb3J0IGZ1bmN0aW9uIHNxbGl0ZTNfZXhlYyhhcmcxLCBzcWwsIGNhbGxiYWNrLCBhcmc0LCBlcnJtc2cpIHsKICByZXR1cm4gY2FsbCgnc3FsaXRlM19leGVjJywgYXJnMSwgc3FsLCBjYWxsYmFjaywgYXJnNCwgZXJybXNnKTsKfQoKLyoqICAgICAgIAogKiBAZnVuY3Rpb24gc3FsaXRlM19mcmVlICAgIAogKiAKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBhcmcxCiAqLwpkZWZpbmUoJ3NxbGl0ZTNfZnJlZScsIGRsc3ltKGxpYnNxbGl0ZTMsICdzcWxpdGUzX2ZyZWUnKSwgbnVsbCwgJ3ZvaWQnLCAndm9pZCAqJyk7CmV4cG9ydCBmdW5jdGlvbiBzcWxpdGUzX2ZyZWUoYXJnMSkgewogIGNhbGwoJ3NxbGl0ZTNfZnJlZScsIGFyZzEpOwp9CgovKiogICAgICAgCiAqIEBmdW5jdGlvbiBzcWxpdGUzX29wZW4gICAgCiAqIAogKiBAcGFyYW0gICAge1N0cmluZ30gICAgICAgIGZpbGVuYW1lCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgcHBEYgogKiAKICogQHJldHVybiAgIHtOdW1iZXJ9ICAgICAgICAKICovCmRlZmluZSgnc3FsaXRlM19vcGVuJywgZGxzeW0obGlic3FsaXRlMywgJ3NxbGl0ZTNfb3BlbicpLCBudWxsLCAnaW50JywgJ2NoYXIgKicsICd2b2lkIConKTsKZXhwb3J0IGZ1bmN0aW9uIHNxbGl0ZTNfb3BlbihmaWxlbmFtZSwgcHBEYikgewogIHJldHVybiBjYWxsKCdzcWxpdGUzX29wZW4nLCBmaWxlbmFtZSwgcHBEYik7Cn0KCi8qKiAgICAgICAKICogQGZ1bmN0aW9uIHNxbGl0ZTNfZXJybXNnICAKICogCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgYXJnMQogKiAKICogQHJldHVybiAgIHtTdHJpbmd9ICAgICAgICAKICovCmRlZmluZSgnc3FsaXRlM19lcnJtc2cnLCBkbHN5bShsaWJzcWxpdGUzLCAnc3FsaXRlM19lcnJtc2cnKSwgbnVsbCwgJ2NoYXIgKicsICd2b2lkIConKTsKZXhwb3J0IGZ1bmN0aW9uIHNxbGl0ZTNfZXJybXNnKGFyZzEpIHsKICByZXR1cm4gY2FsbCgnc3FsaXRlM19lcnJtc2cnLCBhcmcxKTsKfQoAAAAAAAAAABIPAAAAAAAAAAAAAAAAAAAAAAAAEg8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAAAAAAAAAI8AAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test-sqlite3.js",
			"settings":
			{
				"buffer_size": 778,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADUCAAAAAAAANgIAAAAAAAAAAAAANgIAAAAAAAA3AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1AgAAAAAAADUCAAAAAAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"",
					null,
					"AQAAADcCAAAAAAAAaAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "sqlite3_open("
					},
					"DQAAADcCAAAAAAAAOAIAAAAAAAAAAAAAOAIAAAAAAAA5AgAAAAAAAAAAAAA5AgAAAAAAADoCAAAAAAAAAAAAADoCAAAAAAAAOwIAAAAAAAAAAAAAOwIAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAAD0CAAAAAAAAAAAAAD0CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAEACAAAAAAAAAAAAAEACAAAAAAAAQQIAAAAAAAAAAAAAQQIAAAAAAABCAgAAAAAAAAAAAABCAgAAAAAAAEMCAAAAAAAAAAAAAEMCAAAAAAAARAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAEQCAAAAAAAARQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEAgAAAAAAAEQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "'\t"
					},
					"AgAAAHYCAAAAAAAAdwIAAAAAAAAAAAAAdwIAAAAAAAB5AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2AgAAAAAAAHYCAAAAAAAA////////738"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAHgCAAAAAAAAeAIAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5AgAAAAAAAHkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHgCAAAAAAAAeQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4AgAAAAAAAHgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkCAAAAAAAAegIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5AgAAAAAAAHkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADYCAAAAAAAANwIAAAAAAAAAAAAANwIAAAAAAAA4AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AgAAAAAAADYCAAAAAAAAAAAAAADAgEA"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAADcCAAAAAAAAOAIAAAAAAAAAAAAAOAIAAAAAAAA5AgAAAAAAAAAAAAA5AgAAAAAAADoCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " Uint32Array"
					},
					"DAAAADoCAAAAAAAAOwIAAAAAAAAAAAAAOwIAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAAD0CAAAAAAAAAAAAAD0CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAEACAAAAAAAAAAAAAEACAAAAAAAAQQIAAAAAAAAAAAAAQQIAAAAAAABCAgAAAAAAAAAAAABCAgAAAAAAAEMCAAAAAAAAAAAAAEMCAAAAAAAARAIAAAAAAAAAAAAARAIAAAAAAABFAgAAAAAAAAAAAABFAgAAAAAAAEYCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6AgAAAAAAADoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEYCAAAAAAAASAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGAgAAAAAAAEYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAEcCAAAAAAAASAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHAgAAAAAAAEcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEkCAAAAAAAASgIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJAgAAAAAAAEkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "a="
					},
					"AgAAADcCAAAAAAAAOAIAAAAAAAAAAAAAOAIAAAAAAAA5AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAADcCAAAAAAAAOAIAAAAAAAAAAAAAOAIAAAAAAAA5AgAAAAAAAAAAAAA5AgAAAAAAADoCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoCAAAAAAAAOwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6AgAAAAAAADoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "a.buffer);"
					},
					"CgAAAJUCAAAAAAAAlgIAAAAAAAAAAAAAlgIAAAAAAACXAgAAAAAAAAAAAACXAgAAAAAAAJgCAAAAAAAAAAAAAJgCAAAAAAAAmQIAAAAAAAAAAAAAmQIAAAAAAACaAgAAAAAAAAAAAACaAgAAAAAAAJsCAAAAAAAAAAAAAJsCAAAAAAAAnAIAAAAAAAAAAAAAnAIAAAAAAACdAgAAAAAAAAAAAACdAgAAAAAAAJ4CAAAAAAAAAAAAAJ4CAAAAAAAAnwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVAgAAAAAAAJUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAFICAAAAAAAAUwIAAAAAAAAAAAAAUwIAAAAAAABUAgAAAAAAAAAAAABUAgAAAAAAAFUCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSAgAAAAAAAFICAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAAFUCAAAAAAAAVgIAAAAAAAAAAAAAVgIAAAAAAABXAgAAAAAAAAAAAABXAgAAAAAAAFgCAAAAAAAAAAAAAFgCAAAAAAAAWQIAAAAAAAAAAAAAWQIAAAAAAABaAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVAgAAAAAAAFUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "ret,"
					},
					"BAAAADsCAAAAAAAAPAIAAAAAAAAAAAAAPAIAAAAAAAA9AgAAAAAAAAAAAAA9AgAAAAAAAD4CAAAAAAAAAAAAAD4CAAAAAAAAPwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7AgAAAAAAADsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					3,
					"right_delete",
					null,
					"AwAAAFYCAAAAAAAAVgIAAAAAAAABAAAAbFYCAAAAAAAAVgIAAAAAAAABAAAAZVYCAAAAAAAAVgIAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWAgAAAAAAAFYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "\n\nconsole.log"
					},
					"EAAAAKgCAAAAAAAAqQIAAAAAAAAAAAAAqQIAAAAAAACqAgAAAAAAAAAAAACqAgAAAAAAAKsCAAAAAAAAAAAAAKsCAAAAAAAArAIAAAAAAAAAAAAAqQIAAAAAAACpAgAAAAAAAAEAAAAgqwIAAAAAAACsAgAAAAAAAAAAAACsAgAAAAAAAK0CAAAAAAAAAAAAAK0CAAAAAAAArgIAAAAAAAAAAAAArgIAAAAAAACvAgAAAAAAAAAAAACvAgAAAAAAALACAAAAAAAAAAAAALACAAAAAAAAsQIAAAAAAAAAAAAAsQIAAAAAAACyAgAAAAAAAAAAAACyAgAAAAAAALMCAAAAAAAAAAAAALMCAAAAAAAAtAIAAAAAAAAAAAAAtAIAAAAAAAC1AgAAAAAAAAAAAAC1AgAAAAAAALYCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAgAAAAAAAKgCAAAAAAAA////////738"
				],
				[
					49,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALYCAAAAAAAAuAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2AgAAAAAAALYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAALcCAAAAAAAAuQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3AgAAAAAAALcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "ret,"
					},
					"BAAAALgCAAAAAAAAuQIAAAAAAAAAAAAAuQIAAAAAAAC6AgAAAAAAAAAAAAC6AgAAAAAAALsCAAAAAAAAAAAAALsCAAAAAAAAvAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AgAAAAAAALgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"left_delete",
					null,
					"AQAAALsCAAAAAAAAuwIAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8AgAAAAAAALwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": ",ret"
					},
					"BAAAALwCAAAAAAAAvQIAAAAAAAAAAAAAvQIAAAAAAAC+AgAAAAAAAAAAAAC+AgAAAAAAAL8CAAAAAAAAAAAAAL8CAAAAAAAAwAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8AgAAAAAAALwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMECAAAAAAAAwgIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBAgAAAAAAAMECAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAMICAAAAAAAAwwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCAgAAAAAAAMICAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADDAgAAaW1wb3J0IHsgU1FMSVRFX09LLCBTUUxJVEVfRVJST1IsIFNRTElURV9JTlRFUk5BTCwgU1FMSVRFX1BFUk0sIFNRTElURV9BQk9SVCwgU1FMSVRFX0JVU1ksIFNRTElURV9MT0NLRUQsIFNRTElURV9OT01FTSwgU1FMSVRFX1JFQURPTkxZLCBTUUxJVEVfSU5URVJSVVBULCBTUUxJVEVfSU9FUlIsIFNRTElURV9DT1JSVVBULCBTUUxJVEVfTk9URk9VTkQsIFNRTElURV9GVUxMLCBTUUxJVEVfQ0FOVE9QRU4sIFNRTElURV9QUk9UT0NPTCwgU1FMSVRFX0VNUFRZLCBTUUxJVEVfU0NIRU1BLCBTUUxJVEVfVE9PQklHLCBTUUxJVEVfQ09OU1RSQUlOVCwgU1FMSVRFX01JU01BVENILCBTUUxJVEVfTUlTVVNFLCBTUUxJVEVfTk9MRlMsIFNRTElURV9BVVRILCBTUUxJVEVfRk9STUFULCBTUUxJVEVfUkFOR0UsIFNRTElURV9OT1RBREIsIFNRTElURV9OT1RJQ0UsIFNRTElURV9XQVJOSU5HLCBTUUxJVEVfUk9XLCBTUUxJVEVfRE9ORSwgc3FsaXRlM19jbG9zZSwgc3FsaXRlM19leGVjLCBzcWxpdGUzX2ZyZWUsIHNxbGl0ZTNfb3Blbiwgc3FsaXRlM19lcnJtc2cgfSBmcm9tICcuL3NxbGl0ZTMuanMnCgoKbGV0IHJldCxhPW5ldyBVaW50MzJBcnJheSgyKTsKCiByZXQ9c3FsaXRlM19vcGVuKCcvaG9tZS9yb21hbi8uY29uZmlnL2dvb2dsZS1jaHJvbWUvRGVmYXVsdC9IaXN0b3J5JyAsIGEuYnVmZmVyKTsKCiBjb25zb2xlLmxvZygncmV0JyxyZXQpOwoAAAAAAAAAAMgCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "\nfunction"
					},
					"CQAAADYCAAAAAAAANwIAAAAAAAAAAAAANwIAAAAAAAA4AgAAAAAAAAAAAAA4AgAAAAAAADkCAAAAAAAAAAAAADkCAAAAAAAAOgIAAAAAAAAAAAAAOgIAAAAAAAA7AgAAAAAAAAAAAAA7AgAAAAAAADwCAAAAAAAAAAAAADwCAAAAAAAAPQIAAAAAAAAAAAAAPQIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD8CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AgAAAAAAADYCAAAAAAAAAAAAAAAAAAA"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " main"
					},
					"BQAAAD8CAAAAAAAAQAIAAAAAAAAAAAAAQAIAAAAAAABBAgAAAAAAAAAAAABBAgAAAAAAAEICAAAAAAAAAAAAAEICAAAAAAAAQwIAAAAAAAAAAAAAQwIAAAAAAABEAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/AgAAAAAAAD8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEQCAAAAAAAARgIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEAgAAAAAAAEQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEYCAAAAAAAARwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGAgAAAAAAAEYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEcCAAAAAAAASQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHAgAAAAAAAEcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "...args"
					},
					"BwAAAEUCAAAAAAAARgIAAAAAAAAAAAAARgIAAAAAAABHAgAAAAAAAAAAAABHAgAAAAAAAEgCAAAAAAAAAAAAAEgCAAAAAAAASQIAAAAAAAAAAAAASQIAAAAAAABKAgAAAAAAAAAAAABKAgAAAAAAAEsCAAAAAAAAAAAAAEsCAAAAAAAATAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFAgAAAAAAAEUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAE8CAAAAAAAATwIAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQAgAAAAAAAFACAAAAAAAA////////738"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"AgAAAOECAAAAAAAA4gIAAAAAAAAAAAAA4gIAAAAAAADjAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhAgAAAAAAAOECAAAAAAAAAAAAAAAAaEA"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\n\nmain"
					},
					"BgAAAOMCAAAAAAAA5AIAAAAAAAAAAAAA5AIAAAAAAADlAgAAAAAAAAAAAADlAgAAAAAAAOYCAAAAAAAAAAAAAOYCAAAAAAAA5wIAAAAAAAAAAAAA5wIAAAAAAADoAgAAAAAAAAAAAADoAgAAAAAAAOkCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjAgAAAAAAAOMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOkCAAAAAAAA6wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpAgAAAAAAAOkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "...scriptArgs"
					},
					"DQAAAOoCAAAAAAAA6wIAAAAAAAAAAAAA6wIAAAAAAADsAgAAAAAAAAAAAADsAgAAAAAAAO0CAAAAAAAAAAAAAO0CAAAAAAAA7gIAAAAAAAAAAAAA7gIAAAAAAADvAgAAAAAAAAAAAADvAgAAAAAAAPACAAAAAAAAAAAAAPACAAAAAAAA8QIAAAAAAAAAAAAA8QIAAAAAAADyAgAAAAAAAAAAAADyAgAAAAAAAPMCAAAAAAAAAAAAAPMCAAAAAAAA9AIAAAAAAAAAAAAA9AIAAAAAAAD1AgAAAAAAAAAAAAD1AgAAAAAAAPYCAAAAAAAAAAAAAPYCAAAAAAAA9wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqAgAAAAAAAOoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": ".slice"
					},
					"BgAAAPcCAAAAAAAA+AIAAAAAAAAAAAAA+AIAAAAAAAD5AgAAAAAAAAAAAAD5AgAAAAAAAPoCAAAAAAAAAAAAAPoCAAAAAAAA+wIAAAAAAAAAAAAA+wIAAAAAAAD8AgAAAAAAAAAAAAD8AgAAAAAAAP0CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3AgAAAAAAAPcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP0CAAAAAAAA/wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AgAAAAAAAP0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAP4CAAAAAAAA/wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+AgAAAAAAAP4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAEDAAAAAAAAAgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAwAAAAAAAAEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAAIDAAAAAAAAAwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAwAAAAAAAAIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAADAwAAaW1wb3J0IHsgU1FMSVRFX09LLCBTUUxJVEVfRVJST1IsIFNRTElURV9JTlRFUk5BTCwgU1FMSVRFX1BFUk0sIFNRTElURV9BQk9SVCwgU1FMSVRFX0JVU1ksIFNRTElURV9MT0NLRUQsIFNRTElURV9OT01FTSwgU1FMSVRFX1JFQURPTkxZLCBTUUxJVEVfSU5URVJSVVBULCBTUUxJVEVfSU9FUlIsIFNRTElURV9DT1JSVVBULCBTUUxJVEVfTk9URk9VTkQsIFNRTElURV9GVUxMLCBTUUxJVEVfQ0FOVE9QRU4sIFNRTElURV9QUk9UT0NPTCwgU1FMSVRFX0VNUFRZLCBTUUxJVEVfU0NIRU1BLCBTUUxJVEVfVE9PQklHLCBTUUxJVEVfQ09OU1RSQUlOVCwgU1FMSVRFX01JU01BVENILCBTUUxJVEVfTUlTVVNFLCBTUUxJVEVfTk9MRlMsIFNRTElURV9BVVRILCBTUUxJVEVfRk9STUFULCBTUUxJVEVfUkFOR0UsIFNRTElURV9OT1RBREIsIFNRTElURV9OT1RJQ0UsIFNRTElURV9XQVJOSU5HLCBTUUxJVEVfUk9XLCBTUUxJVEVfRE9ORSwgc3FsaXRlM19jbG9zZSwgc3FsaXRlM19leGVjLCBzcWxpdGUzX2ZyZWUsIHNxbGl0ZTNfb3Blbiwgc3FsaXRlM19lcnJtc2cgfSBmcm9tICcuL3NxbGl0ZTMuanMnOwoKZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CmxldCByZXQsCiAgYSA9IG5ldyBVaW50MzJBcnJheSgyKTsKCnJldCA9IHNxbGl0ZTNfb3BlbignL2hvbWUvcm9tYW4vLmNvbmZpZy9nb29nbGUtY2hyb21lL0RlZmF1bHQvSGlzdG9yeScsIGEuYnVmZmVyKTsKCmNvbnNvbGUubG9nKCdyZXQnLCByZXQpOwoKfQoKbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKAAAAAAAAAAAKAwAAAAAAAAAAAAAAAAAAAAAAAAoDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAwAAAAAAAAIDAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/src/qjsm.c",
			"settings":
			{
				"buffer_size": 45849,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					225,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAPckAAAAAAAA+SQAAAAAAAAAAAAAPSQAAAAAAAA/JAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9JAAAAAAAAPckAAAAAAAAAAAAAAAA8L8"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPskAAAAAAAA/CQAAAAAAAAAAAAA/CQAAAAAAAAAJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7JAAAAAAAAPskAAAAAAAA////////738"
				],
				[
					239,
					2,
					"right_delete",
					null,
					"AwAAAD0kAAAAAAAAPSQAAAAAAAABAAAAL/skAAAAAAAA+yQAAAAAAAAEAAAAICAgID0kAAAAAAAAPSQAAAAAAAABAAAAKg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9JAAAAAAAAD0kAAAAAAAAAAAAAAAAQEA"
				],
				[
					307,
					2,
					"left_delete",
					null,
					"AgAAAPgkAAAAAAAA+CQAAAAAAAABAAAAL/ckAAAAAAAA9yQAAAAAAAABAAAAKg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5JAAAAAAAAPkkAAAAAAAA////////738"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAPckAAAAAAAA+CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3JAAAAAAAAPckAAAAAAAAAAAAAAAA8L8"
				],
				[
					309,
					1,
					"left_delete",
					null,
					"AQAAAPckAAAAAAAA9yQAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4JAAAAAAAAPgkAAAAAAAAAAAAAAAA8L8"
				],
				[
					410,
					1,
					"insert",
					{
						"characters": "\nJS"
					},
					"BAAAAIkkAAAAAAAAiiQAAAAAAAAAAAAAiiQAAAAAAACOJAAAAAAAAAAAAACOJAAAAAAAAI8kAAAAAAAAAAAAAI8kAAAAAAAAkCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJJAAAAAAAAIkkAAAAAAAAAAAAAAAA8L8"
				],
				[
					411,
					2,
					"left_delete",
					null,
					"AgAAAI8kAAAAAAAAjyQAAAAAAAABAAAAU44kAAAAAAAAjiQAAAAAAAABAAAASg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQJAAAAAAAAJAkAAAAAAAAAAAAAAAA8L8"
				],
				[
					412,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAI4kAAAAAAAAjyQAAAAAAAAAAAAAjyQAAAAAAACQJAAAAAAAAAAAAACQJAAAAAAAAJEkAAAAAAAAAAAAAJEkAAAAAAAAkiQAAAAAAAAAAAAAkiQAAAAAAACTJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOJAAAAAAAAI4kAAAAAAAAAAAAAAAA8L8"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": " char*"
					},
					"BgAAAJMkAAAAAAAAlCQAAAAAAAAAAAAAlCQAAAAAAACVJAAAAAAAAAAAAACVJAAAAAAAAJYkAAAAAAAAAAAAAJYkAAAAAAAAlyQAAAAAAAAAAAAAlyQAAAAAAACYJAAAAAAAAAAAAACYJAAAAAAAAJkkAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTJAAAAAAAAJMkAAAAAAAAAAAAAAAA8L8"
				],
				[
					414,
					1,
					"insert",
					{
						"characters": " msg"
					},
					"BAAAAJkkAAAAAAAAmiQAAAAAAAAAAAAAmiQAAAAAAACbJAAAAAAAAAAAAACbJAAAAAAAAJwkAAAAAAAAAAAAAJwkAAAAAAAAnSQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZJAAAAAAAAJkkAAAAAAAAAAAAAAAA8L8"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": " =)"
					},
					"AwAAAJ0kAAAAAAAAniQAAAAAAAAAAAAAniQAAAAAAACfJAAAAAAAAAAAAACfJAAAAAAAAKAkAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdJAAAAAAAAJ0kAAAAAAAAAAAAAAAA8L8"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKAkAAAAAAAAoSQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgJAAAAAAAAKAkAAAAAAAAAAAAAAAA8L8"
				],
				[
					417,
					2,
					"left_delete",
					null,
					"AgAAAKAkAAAAAAAAoCQAAAAAAAABAAAAIJ8kAAAAAAAAnyQAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChJAAAAAAAAKEkAAAAAAAAAAAAAAAA8L8"
				],
				[
					418,
					1,
					"insert",
					{
						"characters": " JS_ToCStriong"
					},
					"DgAAAJ8kAAAAAAAAoCQAAAAAAAAAAAAAoCQAAAAAAAChJAAAAAAAAAAAAAChJAAAAAAAAKIkAAAAAAAAAAAAAKIkAAAAAAAAoyQAAAAAAAAAAAAAoyQAAAAAAACkJAAAAAAAAAAAAACkJAAAAAAAAKUkAAAAAAAAAAAAAKUkAAAAAAAApiQAAAAAAAAAAAAApiQAAAAAAACnJAAAAAAAAAAAAACnJAAAAAAAAKgkAAAAAAAAAAAAAKgkAAAAAAAAqSQAAAAAAAAAAAAAqSQAAAAAAACqJAAAAAAAAAAAAACqJAAAAAAAAKskAAAAAAAAAAAAAKskAAAAAAAArCQAAAAAAAAAAAAArCQAAAAAAACtJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfJAAAAAAAAJ8kAAAAAAAAAAAAAAAA8L8"
				],
				[
					419,
					3,
					"left_delete",
					null,
					"AwAAAKwkAAAAAAAArCQAAAAAAAABAAAAZ6skAAAAAAAAqyQAAAAAAAABAAAAbqokAAAAAAAAqiQAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtJAAAAAAAAK0kAAAAAAAAAAAAAAAA8L8"
				],
				[
					420,
					1,
					"insert",
					{
						"characters": "ng"
					},
					"AgAAAKokAAAAAAAAqyQAAAAAAAAAAAAAqyQAAAAAAACsJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqJAAAAAAAAKokAAAAAAAAAAAAAAAA8L8"
				],
				[
					421,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKwkAAAAAAAAriQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsJAAAAAAAAKwkAAAAAAAAAAAAAAAA8L8"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": "/c"
					},
					"AgAAAK0kAAAAAAAAriQAAAAAAAAAAAAAriQAAAAAAACvJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtJAAAAAAAAK0kAAAAAAAAAAAAAAAA8L8"
				],
				[
					423,
					2,
					"left_delete",
					null,
					"AgAAAK4kAAAAAAAAriQAAAAAAAABAAAAY60kAAAAAAAArSQAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvJAAAAAAAAK8kAAAAAAAAAAAAAAAA8L8"
				],
				[
					424,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAK0kAAAAAAAAriQAAAAAAAAAAAAAriQAAAAAAACvJAAAAAAAAAAAAACvJAAAAAAAALAkAAAAAAAAAAAAALAkAAAAAAAAsSQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtJAAAAAAAAK0kAAAAAAAAAAAAAAAA8L8"
				],
				[
					425,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAALEkAAAAAAAAsiQAAAAAAAAAAAAAsiQAAAAAAACzJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxJAAAAAAAALEkAAAAAAAAAAAAAAAA8L8"
				],
				[
					431,
					1,
					"paste",
					null,
					"AQAAALMkAAAAAAAAziQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzJAAAAAAAALMkAAAAAAAAAAAAAAAA8L8"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM8kAAAAAAAA0CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPJAAAAAAAAM8kAAAAAAAAAAAAAAAA8L8"
				],
				[
					453,
					1,
					"insert",
					{
						"characters": "msg"
					},
					"AwAAAA8lAAAAAAAAECUAAAAAAAAAAAAAECUAAAAAAAARJQAAAAAAAAAAAAARJQAAAAAAABIlAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPJQAAAAAAAA8lAAAAAAAAAAAAAAAA8L8"
				],
				[
					455,
					1,
					"left_delete",
					null,
					"AQAAABIlAAAAAAAAEiUAAAAAAAAPAAAAc3RyZXJyb3IoZXJybm8p",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASJQAAAAAAACElAAAAAAAAAAAAAAAA8L8"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAADIlAAAAAAAAMyUAAAAAAAAAAAAAMyUAAAAAAAA3JQAAAAAAAAAAAAA3JQAAAAAAADglAAAAAAAAAAAAADglAAAAAAAAOSUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyJQAAAAAAADIlAAAAAAAA////////738"
				],
				[
					458,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADklAAAAAAAAOyUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5JQAAAAAAADklAAAAAAAAAAAAAAAA8L8"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "msg"
					},
					"AwAAADolAAAAAAAAOyUAAAAAAAAAAAAAOyUAAAAAAAA8JQAAAAAAAAAAAAA8JQAAAAAAAD0lAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6JQAAAAAAADolAAAAAAAAAAAAAAAA8L8"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "\nJS_FreeV"
					},
					"DAAAAD4lAAAAAAAAPyUAAAAAAAAAAAAAPyUAAAAAAABDJQAAAAAAAAAAAAA/JQAAAAAAAD8lAAAAAAAABAAAACAgICA/JQAAAAAAAEUlAAAAAAAAAAAAAEUlAAAAAAAARiUAAAAAAAAAAAAARiUAAAAAAABHJQAAAAAAAAAAAABHJQAAAAAAAEglAAAAAAAAAAAAAEglAAAAAAAASSUAAAAAAAAAAAAASSUAAAAAAABKJQAAAAAAAAAAAABKJQAAAAAAAEslAAAAAAAAAAAAAEslAAAAAAAATCUAAAAAAAAAAAAATCUAAAAAAABNJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+JQAAAAAAAD4lAAAAAAAAAAAAAAAA8L8"
				],
				[
					462,
					1,
					"left_delete",
					null,
					"AQAAAEwlAAAAAAAATCUAAAAAAAABAAAAVg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNJQAAAAAAAE0lAAAAAAAAAAAAAAAA8L8"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": "CS"
					},
					"AgAAAEwlAAAAAAAATSUAAAAAAAAAAAAATSUAAAAAAABOJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMJQAAAAAAAEwlAAAAAAAAAAAAAAAA8L8"
				],
				[
					464,
					1,
					"insert_completion",
					{
						"completion": "JS_FreeCString",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "JS_FreeCString"
					},
					"AgAAAEUlAAAAAAAARSUAAAAAAAAJAAAASlNfRnJlZUNTRSUAAAAAAABTJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOJQAAAAAAAE4lAAAAAAAAAAAAAAAA8L8"
				],
				[
					465,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFMlAAAAAAAAVSUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTJQAAAAAAAFMlAAAAAAAAAAAAAAAA8L8"
				],
				[
					466,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAFQlAAAAAAAAVSUAAAAAAAAAAAAAVSUAAAAAAABWJQAAAAAAAAAAAABWJQAAAAAAAFclAAAAAAAAAAAAAFclAAAAAAAAWCUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUJQAAAAAAAFQlAAAAAAAAAAAAAAAA8L8"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": " msg"
					},
					"BAAAAFglAAAAAAAAWSUAAAAAAAAAAAAAWSUAAAAAAABaJQAAAAAAAAAAAABaJQAAAAAAAFslAAAAAAAAAAAAAFslAAAAAAAAXCUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYJQAAAAAAAFglAAAAAAAAAAAAAAAA8L8"
				],
				[
					469,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAF0lAAAAAAAAXiUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdJQAAAAAAAF0lAAAAAAAAAAAAAAAA8L8"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADclAAAAAAAAOCUAAAAAAAAAAAAAOCUAAAAAAAA8JQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3JQAAAAAAADclAAAAAAAAAAAAAAAAQEA"
				],
				[
					479,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AgAAADIlAAAAAAAAMyUAAAAAAAAAAAAAMyUAAAAAAAA3JQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVJAAAAAAAANUkAAAAAAAAAAAAAAAAQEA"
				],
				[
					482,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3JQAAAAAAADclAAAAAAAAAAAAAAAA8L8"
				],
				[
					583,
					1,
					"insert",
					{
						"characters": "JS_IdsO"
					},
					"BwAAAE0kAAAAAAAATiQAAAAAAAAAAAAATiQAAAAAAABPJAAAAAAAAAAAAABPJAAAAAAAAFAkAAAAAAAAAAAAAFAkAAAAAAAAUSQAAAAAAAAAAAAAUSQAAAAAAABSJAAAAAAAAAAAAABSJAAAAAAAAFMkAAAAAAAAAAAAAFMkAAAAAAAAVCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNJAAAAAAAAE0kAAAAAAAAAAAAAAAA8L8"
				],
				[
					584,
					2,
					"left_delete",
					null,
					"AgAAAFMkAAAAAAAAUyQAAAAAAAABAAAAT1IkAAAAAAAAUiQAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUJAAAAAAAAFQkAAAAAAAAAAAAAAAA8L8"
				],
				[
					585,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAFIkAAAAAAAAUyQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSJAAAAAAAAFIkAAAAAAAAAAAAAAAA8L8"
				],
				[
					586,
					2,
					"left_delete",
					null,
					"AgAAAFIkAAAAAAAAUiQAAAAAAAABAAAAc1EkAAAAAAAAUSQAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTJAAAAAAAAFMkAAAAAAAAAAAAAAAA8L8"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": "sObject(ctx-"
					},
					"DAAAAFEkAAAAAAAAUiQAAAAAAAAAAAAAUiQAAAAAAABTJAAAAAAAAAAAAABTJAAAAAAAAFQkAAAAAAAAAAAAAFQkAAAAAAAAVSQAAAAAAAAAAAAAVSQAAAAAAABWJAAAAAAAAAAAAABWJAAAAAAAAFckAAAAAAAAAAAAAFckAAAAAAAAWCQAAAAAAAAAAAAAWCQAAAAAAABZJAAAAAAAAAAAAABZJAAAAAAAAFokAAAAAAAAAAAAAFokAAAAAAAAWyQAAAAAAAAAAAAAWyQAAAAAAABcJAAAAAAAAAAAAABcJAAAAAAAAF0kAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRJAAAAAAAAFEkAAAAAAAAAAAAAAAA8L8"
				],
				[
					588,
					1,
					"insert",
					{
						"characters": ">rt->current_exce"
					},
					"EQAAAF0kAAAAAAAAXiQAAAAAAAAAAAAAXiQAAAAAAABfJAAAAAAAAAAAAABfJAAAAAAAAGAkAAAAAAAAAAAAAGAkAAAAAAAAYSQAAAAAAAAAAAAAYSQAAAAAAABiJAAAAAAAAAAAAABiJAAAAAAAAGMkAAAAAAAAAAAAAGMkAAAAAAAAZCQAAAAAAAAAAAAAZCQAAAAAAABlJAAAAAAAAAAAAABlJAAAAAAAAGYkAAAAAAAAAAAAAGYkAAAAAAAAZyQAAAAAAAAAAAAAZyQAAAAAAABoJAAAAAAAAAAAAABoJAAAAAAAAGkkAAAAAAAAAAAAAGkkAAAAAAAAaiQAAAAAAAAAAAAAaiQAAAAAAABrJAAAAAAAAAAAAABrJAAAAAAAAGwkAAAAAAAAAAAAAGwkAAAAAAAAbSQAAAAAAAAAAAAAbSQAAAAAAABuJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdJAAAAAAAAF0kAAAAAAAAAAAAAAAA8L8"
				],
				[
					589,
					1,
					"insert",
					{
						"characters": "ption)"
					},
					"BgAAAG4kAAAAAAAAbyQAAAAAAAAAAAAAbyQAAAAAAABwJAAAAAAAAAAAAABwJAAAAAAAAHEkAAAAAAAAAAAAAHEkAAAAAAAAciQAAAAAAAAAAAAAciQAAAAAAABzJAAAAAAAAAAAAABzJAAAAAAAAHQkAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuJAAAAAAAAG4kAAAAAAAAAAAAAAAA8L8"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAHQkAAAAAAAAdSQAAAAAAAAAAAAAdSQAAAAAAAB2JAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0JAAAAAAAAHQkAAAAAAAAAAAAAAAA8L8"
				],
				[
					591,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHYkAAAAAAAAdyQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2JAAAAAAAAHYkAAAAAAAAAAAAAAAA8L8"
				],
				[
					594,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAALIkAAAAAAAAsyQAAAAAAAAAAAAAsyQAAAAAAAC0JAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyJAAAAAAAALIkAAAAAAAAAAAAAAAA8L8"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": " JKS"
					},
					"BAAAALQkAAAAAAAAtSQAAAAAAAAAAAAAtSQAAAAAAAC2JAAAAAAAAAAAAAC2JAAAAAAAALckAAAAAAAAAAAAALckAAAAAAAAuCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0JAAAAAAAALQkAAAAAAAAAAAAAAAA8L8"
				],
				[
					596,
					2,
					"left_delete",
					null,
					"AgAAALckAAAAAAAAtyQAAAAAAAABAAAAU7YkAAAAAAAAtiQAAAAAAAABAAAASw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4JAAAAAAAALgkAAAAAAAAAAAAAAAA8L8"
				],
				[
					597,
					1,
					"insert",
					{
						"characters": "S_UNDEFINED"
					},
					"CwAAALYkAAAAAAAAtyQAAAAAAAAAAAAAtyQAAAAAAAC4JAAAAAAAAAAAAAC4JAAAAAAAALkkAAAAAAAAAAAAALkkAAAAAAAAuiQAAAAAAAAAAAAAuiQAAAAAAAC7JAAAAAAAAAAAAAC7JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAvSQAAAAAAAAAAAAAvSQAAAAAAAC+JAAAAAAAAAAAAAC+JAAAAAAAAL8kAAAAAAAAAAAAAL8kAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADBJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2JAAAAAAAALYkAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "quickjs/quickjs.c",
			"settings":
			{
				"buffer_size": 1522746,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/quickjs-internal.h",
			"settings":
			{
				"buffer_size": 37512,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/src/js-utils.c",
			"settings":
			{
				"buffer_size": 3373,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs/qjs-modules/src/utils.c",
			"settings":
			{
				"buffer_size": 88554,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/include/sqlite3.h",
			"settings":
			{
				"buffer_size": 576161,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Project: Edit Project"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/run-test262.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build-libwebsockets.sh",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/build.ninja",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-schematic.svg",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-board.svg",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/dsp/util.js",
		"/home/roman/Projects/plot-cv/Zeichnung.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/svg/ZoomRedraw.svg",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/elementProxy.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wirePath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/quickjs/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/lib/container/spatial-hash.js",
		"/home/roman/Projects/plot-cv/lib/container/Hash-Multimap.js",
		"/home/roman/Projects/plot-cv/lib/container/componentMap.js",
		"/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util-w-2.diff",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/new.diff",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/lib/delegate.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/package.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/origin.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/board.js",
		"/home/roman/Projects/plot-cv/lib/json/pathMapper.js",
		"/home/roman/Projects/plot-cv/eagle-query.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Dokumente/Electronics/example.circuit",
		"/home/roman/Projects/plot-cv/circuit.js",
		"/home/roman/Projects/pictest/eagle/OpenProg-18F2550.brd",
		"/home/roman/Projects/plot-cv/OpenProg-18F2550.circuit",
		"/home/roman/Projects/plot-cv/read.hex",
		"/home/roman/Projects/plot-cv/test-bitset.js",
		"/home/roman/Projects/plot-cv/example.circuit",
		"/home/roman/Projects/plot-cv/test-circuit.js",
		"/home/roman/Projects/plot-cv/OProg-18F2550.hex",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/lib/async/websocket.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/eagle2gerber.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/svg-crop-pad.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/plugins/mirror.c",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/lib/stream/utils.js",
		"/home/roman/Projects/plot-cv/string-helpers.js",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/plot-cv/bjson.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/openlayers/examples/wms-tiled-wrap-180.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/lib/iterator/helpers.js",
		"/home/roman/Projects/plot-cv/lib/stream.js",
		"/home/roman/Projects/plot-cv/filelist.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/lib/hooks/useAsyncIterator.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useAsyncGenerator.js",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/test-gpio.js",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/pic-programmer/a-p-prog/fw/pp/pp.ino",
		"/home/roman/Projects/plot-cv/fontsample.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/lib/eagle,*.js,-*/build/*,-*/inst/*",
			"<open files>,/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"pr\\[",
			"'pr",
			"isNative",
			"is[A-Za-z]*Function",
			"is.*Function",
			"returnType",
			"FunctionDecl",
			", js_value_typestr(ctx, stack)",
			"stack",
			"error_prin",
			"str",
			"error_prin",
			"jsm_dump",
			"print_err",
			"js_load_file",
			"js_eval_file",
			"generateDoc",
			"exp",
			"MakeFFI",
			"function.*FFI",
			"PROMISE_REJE",
			"JS_GetBigInt",
			"cur_func = fd",
			"goto except",
			"JS_FreeValue.*m->module",
			"js_dynamic_import_reject\\(",
			"JS_MarkValue.*module_ns",
			"_call2\\(",
			"call2",
			"js_evaluate_module",
			"js_evaluate_moduel",
			"NewClass1",
			"emit_op\\(s, OP_ret",
			"has_ex",
			"clean:",
			"eval_has",
			"eval_has_ex",
			"\\(JS_IsEx",
			"JS_IsEx",
			"JSPromiseFunctionDataResolved",
			"emit_op.*OP_return_undef",
			"OP_return_undef",
			"eval_has_ex",
			"module_ns",
			"module_nas",
			"struct JSModuleDef",
			"JSModuleDef",
			"3\\.1\\.0",
			"\\.\\.\\/",
			"range",
			"range =",
			"Tracked",
			"'kind'",
			"kind",
			"'kind'",
			"map\\(",
			"roundTo",
			"R",
			"R2",
			"parentRot",
			"log",
			"const",
			"TransformationList",
			"rot=\"M",
			"transformation",
			"vec",
			"transform",
			"R2<",
			"R2",
			"children.push(\n      h('circle', {\n        class: 'pin-x',\n        stroke: '#ff00ff',\n        fill: 'none',\n        cx: tp.x,\n        cy: tp.y,\n        r: 0.5,\n        'stroke-width': 0.1\n      })\n    );\n    children.push(\n      h('circle', {\n        class: 'pin-y',\n        stroke: '#4219ff',\n        opacity: 0.8,\n        fill: 'none',\n        cx: x,\n        cy: y,\n        r: 0.75,\n        'stroke-width': 0.1\n      })\n    );",
			"IC1<",
			"font-size:",
			"console\\.",
			");\n",
			"<pin",
			"transform",
			"tp =",
			"IC1\"",
			"IC1",
			"name",
			"555_ALT",
			"IC1\"",
			"IC1",
			"Fragment",
			")]));",
			"'SVGRenderer",
			"Renderer\\.render",
			"\\.render",
			"svg\\(",
			"elem",
			"555_ALT3",
			"IC1\"",
			"isNumeric.*parseFloat",
			"indexOf",
			"'value'",
			"'element'",
			"'element'w",
			"'element'",
			"'value'",
			"get value",
			"D1\"",
			"renderItem",
			"renderItem'",
			"round =",
			"roundTo =",
			"round =",
			"inspect",
			"toStringTag",
			"getBounds",
			"getOther",
			"getOther =",
			"getOther",
			"getOther =",
			"getOther",
			"quot =",
			"console\\.log",
			"console.log",
			"renderItem",
			"^(\\s*)console\\.",
			"lazyOpen",
			"replaceProperty",
			"addLib",
			"Util",
			"Util\\.",
			"})();\n",
			"ifThenElse",
			"Util\\.",
			"isIterable"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"3.0.2",
			"$srcdir/",
			"",
			"'EagleSVGRenderer",
			"this.debug",
			"\\1//console.",
			"isFunction(\\1)",
			"",
			"\\1",
			"is",
			"define",
			"!isString(\\1)",
			"!isFunction(\\1)",
			"isObject(\\1)",
			"isFunction(\\1)",
			"diff --git a/lib/util.js b/lib/util.js\nindex ab76720..001e53e 100644\n--- a/lib/util.js\n+++ b/lib/util.js\n@@",
			"function \\1(\\2) {",
			"function \\1(\\2)",
			"!isString(\\1)",
			"types.isBigInt(\\1)",
			"!isObject(\\1)",
			"isSymbol(\\1)",
			"isString(\\1)",
			"isObject(\\1)",
			"isNumber(\\1)",
			"!isFunction(\\1)",
			"!isString(\\1)",
			"isNumber(\\1)",
			"isString(\\1)",
			"isObject(\\1)",
			"isFunction(\\1)",
			"",
			"^\\1//this.debug",
			"'./components",
			"}\\n\\n\\1",
			"this.circuit",
			"",
			"\\1//console",
			"packageToPosMap",
			"(this.parse",
			"line",
			"maxDepthOrPred",
			"define",
			"isObject",
			"\\1//\\2",
			""
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1945,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										1945,
										1945
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										1945,
										1945
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1945,
										1945
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										1945,
										1945
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1945,
										1945
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										1945,
										1945
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/upload-server.js",
							"function_name_status_row": 22,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									2010,
									2018
								],
								[
									2034,
									2054
								],
								[
									2625,
									2658
								],
								[
									2748,
									2779
								],
								[
									3105,
									3127
								],
								[
									3341,
									3382
								],
								[
									3393,
									3406
								],
								[
									3484,
									3519
								],
								[
									3564,
									3582
								],
								[
									3618,
									3660
								],
								[
									3726,
									3759
								],
								[
									3781,
									3785
								],
								[
									4174,
									4179
								],
								[
									4229,
									4233
								],
								[
									4260,
									4264
								],
								[
									4292,
									4296
								],
								[
									4319,
									4339
								],
								[
									4393,
									4397
								],
								[
									4467,
									4489
								],
								[
									4579,
									4584
								],
								[
									4616,
									4638
								],
								[
									4832,
									4854
								],
								[
									5277,
									5343
								],
								[
									5689,
									5698
								],
								[
									5803,
									5833
								],
								[
									6194,
									6229
								],
								[
									6261,
									6302
								],
								[
									6334,
									6400
								],
								[
									6433,
									6467
								],
								[
									6538,
									6585
								],
								[
									7121,
									7157
								],
								[
									7270,
									7279
								],
								[
									7515,
									7523
								],
								[
									7629,
									7636
								],
								[
									7686,
									7710
								],
								[
									8091,
									8102
								],
								[
									8192,
									8203
								],
								[
									8267,
									8278
								],
								[
									8332,
									8341
								],
								[
									8379,
									8390
								],
								[
									8478,
									8505
								],
								[
									8643,
									8647
								],
								[
									8671,
									8678
								],
								[
									8711,
									8727
								],
								[
									8856,
									8901
								],
								[
									9117,
									9175
								],
								[
									9487,
									9509
								],
								[
									9858,
									9868
								],
								[
									10112,
									10126
								],
								[
									11079,
									11103
								],
								[
									11229,
									11233
								],
								[
									11325,
									11339
								],
								[
									11439,
									11455
								],
								[
									11809,
									11822
								],
								[
									11840,
									11845
								],
								[
									11927,
									11934
								],
								[
									11962,
									11967
								],
								[
									12089,
									12114
								],
								[
									12289,
									12328
								],
								[
									12405,
									12416
								],
								[
									13983,
									14014
								],
								[
									14677,
									14710
								],
								[
									14982,
									15017
								],
								[
									15102,
									15135
								],
								[
									16074,
									16080
								],
								[
									16850,
									16854
								],
								[
									17297,
									17304
								],
								[
									17697,
									17733
								],
								[
									17947,
									17951
								],
								[
									18449,
									18481
								],
								[
									19084,
									19088
								],
								[
									19609,
									19626
								],
								[
									19928,
									19963
								],
								[
									20811,
									20816
								],
								[
									21543,
									21547
								],
								[
									21641,
									21645
								],
								[
									21765,
									21774
								],
								[
									21904,
									21911
								],
								[
									22192,
									22199
								],
								[
									22280,
									22287
								],
								[
									22351,
									22367
								],
								[
									22432,
									22452
								],
								[
									23151,
									23163
								],
								[
									23262,
									23274
								],
								[
									23476,
									23492
								],
								[
									23586,
									23599
								],
								[
									23875,
									23893
								],
								[
									24083,
									24112
								],
								[
									24520,
									24539
								],
								[
									24972,
									24993
								],
								[
									26014,
									26036
								],
								[
									26509,
									26530
								],
								[
									27081,
									27100
								],
								[
									27534,
									27542
								],
								[
									30245,
									30257
								],
								[
									32104,
									32139
								],
								[
									32812,
									32831
								],
								[
									32939,
									32955
								],
								[
									33090,
									33107
								],
								[
									33152,
									33165
								],
								[
									33201,
									33211
								],
								[
									34065,
									34081
								],
								[
									34170,
									34189
								],
								[
									34200,
									34219
								],
								[
									34245,
									34265
								]
							],
							"symlist":
							[
								"  value =>",
								"\t(level, message) =>",
								"AsyncCollect(iter)",
								"ExecTool(cmd, ...args)",
								"GetMime(file)",
								"Matcher(pattern, t = arg => arg)",
								"\t(...args) =>",
								"KeyOrValueMatcher(pattern)",
								"\t([key, value]) =>",
								"GetRootDirectories(pattern = '*')",
								"MakeUUID = (rng = Math.random) =>",
								"  n =>",
								"  dd =>",
								"  d =>",
								"  d =>",
								"  d =>",
								"GetDir(dir)",
								"  n =>",
								"DirName(name)",
								"  it =>",
								"DateStr(date)",
								"ModeStr(mode)",
								"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
								"  script =>",
								"FilterForm = ({ ...props }) =>",
								"HTMLTable = ({ rows, ...props }) =>",
								"HTMLTableRow = ({ columns, ...props }) =>",
								"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
								"FileLink = ({ file, ...props }) =>",
								"FileObject = ({ file, stat = {}, ...props }) =>",
								"FileTable = ({ files, ...props }) =>",
								"(a, b) =>",
								"  field =>",
								"  file =>",
								"ReadExiv2(file)",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"(a, b) =>",
								"([k, v]) =>",
								"ReadExiftool(file)",
								"  l =>",
								"  line =>",
								"([line, idx]) =>",
								"HeifConvert(src, dst, quality = 100)",
								"MagickResize(src, dst, rotate = 0, width, height)",
								"  main(...args)",
								"\t(a, v) =>",
								"\t(v, pv, o) =>",
								"\t(module, ...args) =>",
								"  m =>",
								"  .show = arg =>",
								"  .cleanup = () =>",
								"\t(...args) =>",
								"() =>",
								"  puts(s)",
								"() =>",
								"ParseBody(gen)",
								"  .createWS = (url, callbacks, listen) =>",
								"  .out = s =>",
								"  test(req, resp)",
								"  proxy(req, resp)",
								"  config(req, resp)",
								"  file(req, resp)",
								"  dir =>",
								"  f =>",
								"  file =>",
								"  uploads(req, resp)",
								"  s =>",
								"  files(req, resp)",
								"  n =>",
								"([name, type]) =>",
								"  files2(req, resp)",
								"\tn =>",
								"  n =>",
								"  n =>",
								"(a, b) =>",
								"  name =>",
								"  file =>",
								"  file =>",
								"([file, rel]) =>",
								"(acc, [file, st]) =>",
								"  string(a, b)",
								"  number(a, b)",
								"([name, obj]) =>",
								"({ name }) =>",
								"  onConnect(ws, req)",
								"  .sendCommand = function(data)",
								"  onClose(ws, reason)",
								"  onHttp(ws, req, resp)",
								"  onOpen(name, filename)",
								"  onContent(name, data)",
								"  onClose(name, file)",
								"  f = x =>",
								"  onFinalize()",
								"\t(match, p1, p0, p2, p3, offset) =>",
								"  onMessage(ws, data)",
								"  onFd(fd, rd, wr)",
								"  get connections()",
								"  get by_uuid()",
								"  uuid(data)",
								"  onFd(fd, rd, wr)",
								"  onClose(ws, reason)",
								"  onMessage(ws, data)",
								"  quit(why)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679204948.35,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "upload-server.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34600,
						"regions":
						{
						},
						"selection":
						[
							[
								14830,
								14833
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 484,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679267246.9,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5884.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 79597,
						"regions":
						{
						},
						"selection":
						[
							[
								24473,
								24473
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 809,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679232847.27,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 51.0,
						"translation.y": 12045.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "io-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11744,
						"regions":
						{
						},
						"selection":
						[
							[
								3277,
								3277
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 126,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679233457.57,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "quickjs/qjs-modules/lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 60278,
						"regions":
						{
						},
						"selection":
						[
							[
								2086,
								2094
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 42,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679204156.67,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "ast-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39942,
						"regions":
						{
						},
						"selection":
						[
							[
								30539,
								30550
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1051,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679226506.59,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15339.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "sqlite3.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3858,
						"regions":
						{
						},
						"selection":
						[
							[
								143,
								143
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 3,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679211668.53,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "test-sqlite3.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 778,
						"regions":
						{
						},
						"selection":
						[
							[
								770,
								770
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 11,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679211668.94,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "quickjs/qjs-modules/src/qjsm.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 45849,
						"regions":
						{
						},
						"selection":
						[
							[
								9479,
								9479
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 390,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679211669.42,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5490.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "quickjs/quickjs.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1522746,
						"regions":
						{
						},
						"selection":
						[
							[
								786543,
								786543
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 26781,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679211669.94,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 401715.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "quickjs/qjs-modules/quickjs-internal.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37512,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679229944.24,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "quickjs/qjs-modules/src/js-utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3373,
						"regions":
						{
						},
						"selection":
						[
							[
								42,
								45
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 3,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679229129.15,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "quickjs/qjs-modules/src/utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88554,
						"regions":
						{
						},
						"selection":
						[
							[
								62349,
								62349
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2399,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679229128.29,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 35595.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/usr/include/sqlite3.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 576161,
						"regions":
						{
						},
						"selection":
						[
							[
								162502,
								162502
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 3222,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1679228952.88,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 47955.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"jsut",
				"quickjs/qjs-modules/src/js-utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"run-test",
				"quickjs/run-test262.c"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"build-libwe",
				"quickjs/qjs-net/build-libwebsockets.sh"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"transform",
				"lib/geom/transformation.js"
			],
			[
				"pin.js",
				"lib/eagle/components/pin.js"
			],
			[
				"",
				"~/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"symb",
				"lib/eagle/components/symbol.js"
			],
			[
				"schematicren",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardren",
				"lib/eagle/boardRenderer.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"svgRend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"renderUtil",
				"lib/eagle/renderUtils.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"text.js",
				"lib/eagle/components/text.js"
			],
			[
				"project",
				"lib/eagle/project.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"common",
				"lib/eagle/common.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"common.j",
				"lib/eagle/common.js"
			],
			[
				"nodeLi",
				"lib/eagle/nodeList.js"
			],
			[
				"common.js",
				"lib/eagle/common.js"
			],
			[
				"elementP",
				"lib/eagle/elementProxy.js"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"wirePa",
				"lib/eagle/components/wirePath.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"renderer.js",
				"lib/eagle/renderer.js"
			],
			[
				"functions.cmake",
				"qjs-opencv/cmake/functions.cmake"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"textEle",
				"lib/eagle/components/textElement.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"drawing",
				"lib/eagle/components/drawing.js"
			],
			[
				"pathMapper",
				"lib/json/pathMapper.js"
			],
			[
				"xml-shell",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"server.js",
				"upload-server.js"
			],
			[
				"delega",
				"lib/delegate.js"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"colorCod",
				"lib/eda/colorCoding.js"
			],
			[
				"eagle-qu",
				"eagle-query.js"
			],
			[
				"eagle-q",
				"eagle-query.js"
			],
			[
				"read.hex",
				"read.hex"
			],
			[
				"exam",
				"example.circuit"
			],
			[
				"xpath.js",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"Document",
				"lib/eagle/document.js"
			],
			[
				"test-",
				"test-bitset.js"
			],
			[
				"circuit",
				"circuit.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"eagle2ger",
				"eagle2gerber.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"websock",
				"lib/async/websocket.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"websocket.js",
				"lib/async/websocket.js"
			],
			[
				"test-bj",
				"test-bjson.js"
			],
			[
				"bjson",
				"bjson.js"
			],
			[
				"string-he",
				"string-helpers.js"
			],
			[
				"quickjs-po",
				"quickjs/qjs-modules/quickjs-pointer.c"
			],
			[
				"list-exp",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"utils.js",
				"lib/stream/utils.js"
			],
			[
				"mirror",
				"quickjs/qjs-net/src/plugins/mirror.c"
			],
			[
				"list-ex",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"fire.html",
				"fire.html"
			],
			[
				"server-htt",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"-ws.c",
				"quickjs/qjs-net/minnet-server-ws.c"
			],
			[
				"filelist",
				"filelist.js"
			],
			[
				"filelist.js",
				"filelist.js"
			],
			[
				"extendGe",
				"quickjs/qjs-modules/lib/extendGenerator.js"
			],
			[
				"test-debugger",
				"test-debuggerprotocol.js"
			],
			[
				"fire.htm",
				"fire.html"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"fontsample",
				"fontsample.js"
			],
			[
				"upload.htm",
				"upload.html"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"test-gpio",
				"test-gpio.js"
			],
			[
				"index.html",
				"index.html"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"repl",
				"repl.js"
			],
			[
				"test-minnet",
				"test-minnet.js"
			],
			[
				"list-dir",
				"list-directory.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"transformation",
				"lib/geom/transformation.js"
			],
			[
				"element.",
				"lib/dom/element.js"
			],
			[
				"crosskit",
				"lib/crosskit.js"
			],
			[
				"fire-es",
				"fire-es.html"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"fire-es.h",
				"fire-es.html"
			],
			[
				"fire-es.js",
				"fire-es.js"
			],
			[
				"fire.es",
				"fire.es"
			],
			[
				"quickjs",
				"qjs-opencv/cmake/QuickJSModule.cmake"
			],
			[
				"test-strea",
				"test-stream.js"
			],
			[
				"worker.js",
				"worker.js"
			],
			[
				"vector.h",
				"quickjs/qjs-modules/include/vector.h"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"test-work",
				"test-worker.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 784.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
