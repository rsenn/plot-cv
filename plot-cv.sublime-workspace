{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"getMem",
				"getMemberNames"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"getOwn",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"from",
				"fromCodePoint"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"getOwnProp",
				"getOwnPropertyNames"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			],
			[
				"arg",
				"argc"
			],
			[
				"instru",
				"instrument"
			],
			[
				"defaul",
				"defaultExport"
			],
			[
				"getBy",
				"getByIdOrName"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "() =>\n  res =>\n() =>\n  r =>\n  r =>\n  entries()\nGetProject = arg =>\n  p =>\n  add = (arr, ...items) =>\n  useSlot = (arr, i) =>\n() =>\n  v =>\n  trklGetSet = (get, set) => value =>\nMouseEvents = h =>\n() =>\n(parent, delegate) =>\n  append_to(elem, p)\nDrawSVG(...args)\n  append_to(elem, p)\n  adjustViewBox(e)\n  calcViewBox(box)\n  setViewBox(svgOwner, box)\nElementToXML = (e, predicate) =>\n  (v, k) =>\n  (v, k) =>\n  (v, k) =>\n  readFile(filename)\n  writeFile(filename, data, overwrite = true)\n  exists(filename)\n  realpath(filename)\nLoadFile(file)\nSaveFile(filename, data, contentType)\n  s =>\n() =>\nSaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])\n  predicate = element =>\nLoadSVG(filename)\nLoadImage(filename)\n() =>\nRenderComponent(component)\nModifyColors = fn => e =>\nFindLayer = name_or_id =>\n  n =>\n  l =>\n(id = '#geom') =>\n(props = {}) =>\n  maxZIndex = () =>\n  e =>\n  z =>\n  z =>\n() =>\n  randomColor = () =>\nDrawArc(start, end, angle)\n  props =>\n  p =>\n  a =>\n  m =>\n  hex =>\n  p =>\n  p =>\n  p =>\n({ x, y }) =>\n  a =>\n({ x, y }, i) =>\n  e =>\n(l, i) =>\n(p, i) =>\n(p, i) =>\n  add = (level, item) =>\nRecurseBinaryNode(node, parent = null, depth = 0)\n(nodes, i, level) =>\n  fx = j =>\n(node, j) =>\n  item =>\nDrawNode(x, y, node)\nDrawEdge(item, parent)\nGetPaths(query, parent = project.svgElement)\n  (a, e) =>\nPathToPolylines(path, step = 0.01)\n  p =>\n  poly =>\n  poly =>\n  (p, d, set, stop) =>\nPathToPolyline(path, step = 0.01)\n  (p, d, set, stop) =>\nPathsToPolylines(paths, step = 0.01)\nOutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)\n  .toPolylines = function()\n  p =>\n({ X, Y }) =>\nOutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)\n(a, p) =>\nClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)\n  add = (p, clip = false) =>\n  .toPolylines = function()\n  p =>\n({ X, Y }) =>\n  saveItemStates(itemList, get = item => Util.is.\n(item.\n))\n  item =>\n  restoreItemStates( itemStates, /*prettier-ignore */ set = (item, value) => item.\n(value ? 'yes' : 'no') )\nEagleMaps(project)\n  transformPath = p =>\n  e =>\n  dom2eagle = node =>\n  eagle2dom = elem =>\n  path2dom = p =>\n(key, value) =>\n(key, value) =>\nPackageNames(doc = project.doc)\n  e =>\n([e, b]) =>\n([e, w, h, m, v]) =>\n({ index, ...match }) =>\n  ({ s, v, indexes }, match, i) =>\n([token, index]) =>\n([token, index]) =>\nNextDocument(n = 1)\n  (idx, i) =>\n  (idx, i) =>\nLoadDocument(project, parentElem)\n  err =>\n() =>\n  ent =>\n() =>\n  ent =>\n  renamePackages()\n  a =>\n  value =>\n  layer =>\n() =>\n  layer =>\n() =>\n  fn = function(v)\n() =>\n  .makeGroup = function({ transform, ...props } = {})\n  id =>\n() =>\n  xx()\n  () =>\n(transform)\n  (tag, attr, children = []) =>\n  value =>\n() =>\nRect\nChooseDocument(project, i)\nGenerateVoronoi = () =>\nRect\n  p =>\n  e =>\n({ lSite, rSite, ...edge }) =>\n  e =>\n({ lSite, rSite, ...edge }) =>\n  e =>\n({ va, vb, ...edge }) =>\n  v =>\n  add = (arr, ...items) =>\n  l =>\n  t =>\n  l =>\n  t =>\n  p =>\n  (acc, { site, halfedges }) =>\n({ site }) =>\nPackageChildren(element, layer)\n(c, i) =>\n([i, p]) =>\n([i, e]) =>\nElementChildren(layer = 'tPlace', rfn = ent => \n(ent))\n([name, element]) =>\nElementGeometries(layer = 'tPlace', rfn = ent => \n(ent))\n  ent =>\n([name, children]) =>\n([i, e]) =>\n([name, lines]) =>\n  pts =>\n([name, lines, polygons]) =>\nNewPath(path)\nMakeFitAction = index =>\n  event =>\nZoomFactor(val = config.\n)\nZoomLog(factor)\nAdjustZoom(l = config.\n)\nCreateGrblSocket = (port = 'tnt1') =>\nHandleMessage(msg)\n  pointStr =>\n  socketFn = () =>\n  .send = (...args) =>\nAuthorizationDialog = ({ onAuth, ...props }) =>\n  onSubmit: () =>\n  onInput: e =>\n  onInput: e =>\n  onClick: e =>\n  arg =>\n  .onload = () =>\n  response =>\n  e =>\n  v =>\nTestArc: () =>\n() =>\n(push, stop) =>\n() =>\n(push, stop) =>\n  target =>\n  (key, modifiers = 0) =>\n  .focusSearch = state =>\n  children: () =>\n  geometries: () =>\n  value =>\n() =>\n  testComponent = props =>\nFile(obj, i)\nFile\nFile.prototype.toString = function()\n(a, b) =>\n(obj, i) =>\n(acc, file) =>\n  i =>\n  value =>\n  value =>\n  value =>\n  value =>\n  value =>\n  value =>\n  updateIfChanged = (trkl, newValue, callback) =>\n  (elem, i) =>\n  changeInput = e =>\n  p =>\n  arg =>\nConsumer = props =>\n()\n  log(type, time, msg)\nLogger = props =>\n()\n([type, d, t, m], i) =>\nDumper = props =>\n  value =>\n([k, v], i) =>\nCommander = ({ onCommand, ...props }) =>\n  handler = e =>\n  toggle = trkl =>\nLayer = ({ title, name, label, i, color, element, className, ...props }) =>\n  setVisible = value =>\n  e =>\n  e =>\n  l =>\n  l =>\n  (item, value) =>\n  item =>\n  l =>\n([l, state]) =>\n  e =>\n  onMouseMove: e =>\n  onMouseUp: e =>\nDocumentList\n  constructor()\n(push, stop) =>\n  add(name, component)\n  addEntry([name, component])\n  remove(name)\n  update()\n  fn: e =>\n  fn: () =>\n  open =>\n  props =>\n  props =>\n  e =>\n  i =>\n  i =>\n({ coord }) =>\n  side =>\n  create: (project, props = {}) =>\n  a =>\n  e =>\n  e =>\n  name =>\n  e =>\n  makeLayerName(name, side)\n  fn: () =>\n  onChange(event)\n  props =>\n  props =>\n  props =>\n(e, p, i) =>\n  makeSortCompare: key =>\n  function(a, b)\n  function(a, b)\n  onCommand: cmdStr =>\n  handleChange: e =>\n  event =>\n  e =>\nMoveEvent(event, prevEvent)\nWalkUp(e)\n  e =>\n  z =>\n  p =>\n  e =>\n  e =>\n  e =>\n  v =>\n  l =>\n  e =>\n  () =>\n  (e, depth) =>\n  classes =>\n  e =>\n  e =>\n  (a, b) =>\n  (a, b) =>\nNode\n  e =>\n  (p, d, set, stop) =>\n  e =>\n  e =>\nTouchEvent(event)\n  e =>\n(p, i) =>\n(a, b) =>\n  size =>\n  border =>\n  r =>\n  mod(n, m)\n() =>\n  (pos, last, first) =>\n  cancel()\n  .oncontextmenu = function(e)\n  .processEvents = function eventLoop()\n  event =>\n  e =>\n  onRuntimeInitialized: () =>\n  print: txt =>",
			"settings":
			{
				"buffer_size": 5585,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ws-worker.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADRFQAAKCkgPT4KICByZXMgPT4KKCkgPT4KICByID0+CiAgciA9PgogIGVudHJpZXMoKQpHZXRQcm9qZWN0ID0gYXJnID0+CiAgcCA9PgogIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgogIHVzZVNsb3QgPSAoYXJyLCBpKSA9PgooKSA9PgogIHYgPT4KICB0cmtsR2V0U2V0ID0gKGdldCwgc2V0KSA9PiB2YWx1ZSA9PgpNb3VzZUV2ZW50cyA9IGggPT4KKCkgPT4KKHBhcmVudCwgZGVsZWdhdGUpID0+CiAgYXBwZW5kX3RvKGVsZW0sIHApCkRyYXdTVkcoLi4uYXJncykKICBhcHBlbmRfdG8oZWxlbSwgcCkKICBhZGp1c3RWaWV3Qm94KGUpCiAgY2FsY1ZpZXdCb3goYm94KQogIHNldFZpZXdCb3goc3ZnT3duZXIsIGJveCkKRWxlbWVudFRvWE1MID0gKGUsIHByZWRpY2F0ZSkgPT4KICAodiwgaykgPT4KICAodiwgaykgPT4KICAodiwgaykgPT4KICByZWFkRmlsZShmaWxlbmFtZSkKICB3cml0ZUZpbGUoZmlsZW5hbWUsIGRhdGEsIG92ZXJ3cml0ZSA9IHRydWUpCiAgZXhpc3RzKGZpbGVuYW1lKQogIHJlYWxwYXRoKGZpbGVuYW1lKQpMb2FkRmlsZShmaWxlKQpTYXZlRmlsZShmaWxlbmFtZSwgZGF0YSwgY29udGVudFR5cGUpCiAgcyA9PgooKSA9PgpTYXZlU1ZHKGZpbGVuYW1lLCBsYXllcnMgPSBbMSwgMTYsIDIwLCAyMSwgMjIsIDIzLCAyNSwgMjcsIDQ3LCA0OCwgNTFdKQogIHByZWRpY2F0ZSA9IGVsZW1lbnQgPT4KTG9hZFNWRyhmaWxlbmFtZSkKTG9hZEltYWdlKGZpbGVuYW1lKQooKSA9PgpSZW5kZXJDb21wb25lbnQoY29tcG9uZW50KQpNb2RpZnlDb2xvcnMgPSBmbiA9PiBlID0+CkZpbmRMYXllciA9IG5hbWVfb3JfaWQgPT4KICBuID0+CiAgbCA9PgooaWQgPSAnI2dlb20nKSA9PgoocHJvcHMgPSB7fSkgPT4KICBtYXhaSW5kZXggPSAoKSA9PgogIGUgPT4KICB6ID0+CiAgeiA9PgooKSA9PgogIHJhbmRvbUNvbG9yID0gKCkgPT4KRHJhd0FyYyhzdGFydCwgZW5kLCBhbmdsZSkKICBwcm9wcyA9PgogIHAgPT4KICBhID0+CiAgbSA9PgogIGhleCA9PgogIHAgPT4KICBwID0+CiAgcCA9PgooeyB4LCB5IH0pID0+CiAgYSA9PgooeyB4LCB5IH0sIGkpID0+CiAgZSA9PgoobCwgaSkgPT4KKHAsIGkpID0+CihwLCBpKSA9PgogIGFkZCA9IChsZXZlbCwgaXRlbSkgPT4KUmVjdXJzZUJpbmFyeU5vZGUobm9kZSwgcGFyZW50ID0gbnVsbCwgZGVwdGggPSAwKQoobm9kZXMsIGksIGxldmVsKSA9PgogIGZ4ID0gaiA9Pgoobm9kZSwgaikgPT4KICBpdGVtID0+CkRyYXdOb2RlKHgsIHksIG5vZGUpCkRyYXdFZGdlKGl0ZW0sIHBhcmVudCkKR2V0UGF0aHMocXVlcnksIHBhcmVudCA9IHByb2plY3Quc3ZnRWxlbWVudCkKICAoYSwgZSkgPT4KUGF0aFRvUG9seWxpbmVzKHBhdGgsIHN0ZXAgPSAwLjAxKQogIHAgPT4KICBwb2x5ID0+CiAgcG9seSA9PgogIChwLCBkLCBzZXQsIHN0b3ApID0+ClBhdGhUb1BvbHlsaW5lKHBhdGgsIHN0ZXAgPSAwLjAxKQogIChwLCBkLCBzZXQsIHN0b3ApID0+ClBhdGhzVG9Qb2x5bGluZXMocGF0aHMsIHN0ZXAgPSAwLjAxKQpPdXRzZXRQYXRoKHBhdGgsIG9mZnNldCwgbWl0ZXJMaW1pdCA9IDIsIGFyY1RvbGVyYW5jZSA9IDAuMDEpCiAgLnRvUG9seWxpbmVzID0gZnVuY3Rpb24oKQogIHAgPT4KKHsgWCwgWSB9KSA9PgpPdXRzZXRQYXRocyhwYXRocywgb2Zmc2V0LCBtaXRlckxpbWl0ID0gMiwgYXJjVG9sZXJhbmNlID0gMC4yNSkKKGEsIHApID0+CkNsaXBQYXRoKHBhdGgsIGNsaXAsIG1vZGUgPSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24pCiAgYWRkID0gKHAsIGNsaXAgPSBmYWxzZSkgPT4KICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+CiAgc2F2ZUl0ZW1TdGF0ZXMoaXRlbUxpc3QsIGdldCA9IGl0ZW0gPT4gVXRpbC5pcy4KKGl0ZW0uCikpCiAgaXRlbSA9PgogIHJlc3RvcmVJdGVtU3RhdGVzKCBpdGVtU3RhdGVzLCAvKnByZXR0aWVyLWlnbm9yZSAqLyBzZXQgPSAoaXRlbSwgdmFsdWUpID0+IGl0ZW0uCih2YWx1ZSA/ICd5ZXMnIDogJ25vJykgKQpFYWdsZU1hcHMocHJvamVjdCkKICB0cmFuc2Zvcm1QYXRoID0gcCA9PgogIGUgPT4KICBkb20yZWFnbGUgPSBub2RlID0+CiAgZWFnbGUyZG9tID0gZWxlbSA9PgogIHBhdGgyZG9tID0gcCA9Pgooa2V5LCB2YWx1ZSkgPT4KKGtleSwgdmFsdWUpID0+ClBhY2thZ2VOYW1lcyhkb2MgPSBwcm9qZWN0LmRvYykKICBlID0+CihbZSwgYl0pID0+CihbZSwgdywgaCwgbSwgdl0pID0+Cih7IGluZGV4LCAuLi5tYXRjaCB9KSA9PgogICh7IHMsIHYsIGluZGV4ZXMgfSwgbWF0Y2gsIGkpID0+CihbdG9rZW4sIGluZGV4XSkgPT4KKFt0b2tlbiwgaW5kZXhdKSA9PgpOZXh0RG9jdW1lbnQobiA9IDEpCiAgKGlkeCwgaSkgPT4KICAoaWR4LCBpKSA9PgpMb2FkRG9jdW1lbnQocHJvamVjdCwgcGFyZW50RWxlbSkKICBlcnIgPT4KKCkgPT4KICBlbnQgPT4KKCkgPT4KICBlbnQgPT4KICByZW5hbWVQYWNrYWdlcygpCiAgYSA9PgogIHZhbHVlID0+CiAgbGF5ZXIgPT4KKCkgPT4KICBsYXllciA9PgooKSA9PgogIGZuID0gZnVuY3Rpb24odikKKCkgPT4KICAubWFrZUdyb3VwID0gZnVuY3Rpb24oeyB0cmFuc2Zvcm0sIC4uLnByb3BzIH0gPSB7fSkKICBpZCA9PgooKSA9PgogIHh4KCkKICAoKSA9PgoodHJhbnNmb3JtKQogICh0YWcsIGF0dHIsIGNoaWxkcmVuID0gW10pID0+CiAgdmFsdWUgPT4KKCkgPT4KUmVjdApDaG9vc2VEb2N1bWVudChwcm9qZWN0LCBpKQpHZW5lcmF0ZVZvcm9ub2kgPSAoKSA9PgpSZWN0CiAgcCA9PgogIGUgPT4KKHsgbFNpdGUsIHJTaXRlLCAuLi5lZGdlIH0pID0+CiAgZSA9PgooeyBsU2l0ZSwgclNpdGUsIC4uLmVkZ2UgfSkgPT4KICBlID0+Cih7IHZhLCB2YiwgLi4uZWRnZSB9KSA9PgogIHYgPT4KICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBsID0+CiAgdCA9PgogIGwgPT4KICB0ID0+CiAgcCA9PgogIChhY2MsIHsgc2l0ZSwgaGFsZmVkZ2VzIH0pID0+Cih7IHNpdGUgfSkgPT4KUGFja2FnZUNoaWxkcmVuKGVsZW1lbnQsIGxheWVyKQooYywgaSkgPT4KKFtpLCBwXSkgPT4KKFtpLCBlXSkgPT4KRWxlbWVudENoaWxkcmVuKGxheWVyID0gJ3RQbGFjZScsIHJmbiA9IGVudCA9PiAKKGVudCkpCihbbmFtZSwgZWxlbWVudF0pID0+CkVsZW1lbnRHZW9tZXRyaWVzKGxheWVyID0gJ3RQbGFjZScsIHJmbiA9IGVudCA9PiAKKGVudCkpCiAgZW50ID0+CihbbmFtZSwgY2hpbGRyZW5dKSA9PgooW2ksIGVdKSA9PgooW25hbWUsIGxpbmVzXSkgPT4KICBwdHMgPT4KKFtuYW1lLCBsaW5lcywgcG9seWdvbnNdKSA9PgpOZXdQYXRoKHBhdGgpCk1ha2VGaXRBY3Rpb24gPSBpbmRleCA9PgogIGV2ZW50ID0+Clpvb21GYWN0b3IodmFsID0gY29uZmlnLgopClpvb21Mb2coZmFjdG9yKQpBZGp1c3Rab29tKGwgPSBjb25maWcuCikKQ3JlYXRlR3JibFNvY2tldCA9IChwb3J0ID0gJ3RudDEnKSA9PgpIYW5kbGVNZXNzYWdlKG1zZykKICBwb2ludFN0ciA9PgogIHNvY2tldEZuID0gKCkgPT4KICAuc2VuZCA9ICguLi5hcmdzKSA9PgpBdXRob3JpemF0aW9uRGlhbG9nID0gKHsgb25BdXRoLCAuLi5wcm9wcyB9KSA9PgogIG9uU3VibWl0OiAoKSA9PgogIG9uSW5wdXQ6IGUgPT4KICBvbklucHV0OiBlID0+CiAgb25DbGljazogZSA9PgogIGFyZyA9PgogIC5vbmxvYWQgPSAoKSA9PgogIHJlc3BvbnNlID0+CiAgZSA9PgogIHYgPT4KVGVzdEFyYzogKCkgPT4KKCkgPT4KKHB1c2gsIHN0b3ApID0+CigpID0+CihwdXNoLCBzdG9wKSA9PgogIHRhcmdldCA9PgogIChrZXksIG1vZGlmaWVycyA9IDApID0+CiAgLmZvY3VzU2VhcmNoID0gc3RhdGUgPT4KICBjaGlsZHJlbjogKCkgPT4KICBnZW9tZXRyaWVzOiAoKSA9PgogIHZhbHVlID0+CigpID0+CiAgdGVzdENvbXBvbmVudCA9IHByb3BzID0+CkZpbGUob2JqLCBpKQpGaWxlCkZpbGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKQooYSwgYikgPT4KKG9iaiwgaSkgPT4KKGFjYywgZmlsZSkgPT4KICBpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CiAgdXBkYXRlSWZDaGFuZ2VkID0gKHRya2wsIG5ld1ZhbHVlLCBjYWxsYmFjaykgPT4KICAoZWxlbSwgaSkgPT4KICBjaGFuZ2VJbnB1dCA9IGUgPT4KICBwID0+CiAgYXJnID0+CkNvbnN1bWVyID0gcHJvcHMgPT4KKCkKICBsb2codHlwZSwgdGltZSwgbXNnKQpMb2dnZXIgPSBwcm9wcyA9PgooKQooW3R5cGUsIGQsIHQsIG1dLCBpKSA9PgpEdW1wZXIgPSBwcm9wcyA9PgogIHZhbHVlID0+Cihbaywgdl0sIGkpID0+CkNvbW1hbmRlciA9ICh7IG9uQ29tbWFuZCwgLi4ucHJvcHMgfSkgPT4KICBoYW5kbGVyID0gZSA9PgogIHRvZ2dsZSA9IHRya2wgPT4KTGF5ZXIgPSAoeyB0aXRsZSwgbmFtZSwgbGFiZWwsIGksIGNvbG9yLCBlbGVtZW50LCBjbGFzc05hbWUsIC4uLnByb3BzIH0pID0+CiAgc2V0VmlzaWJsZSA9IHZhbHVlID0+CiAgZSA9PgogIGUgPT4KICBsID0+CiAgbCA9PgogIChpdGVtLCB2YWx1ZSkgPT4KICBpdGVtID0+CiAgbCA9PgooW2wsIHN0YXRlXSkgPT4KICBlID0+CiAgb25Nb3VzZU1vdmU6IGUgPT4KICBvbk1vdXNlVXA6IGUgPT4KRG9jdW1lbnRMaXN0CiAgY29uc3RydWN0b3IoKQoocHVzaCwgc3RvcCkgPT4KICBhZGQobmFtZSwgY29tcG9uZW50KQogIGFkZEVudHJ5KFtuYW1lLCBjb21wb25lbnRdKQogIHJlbW92ZShuYW1lKQogIHVwZGF0ZSgpCiAgZm46IGUgPT4KICBmbjogKCkgPT4KICBvcGVuID0+CiAgcHJvcHMgPT4KICBwcm9wcyA9PgogIGUgPT4KICBpID0+CiAgaSA9PgooeyBjb29yZCB9KSA9PgogIHNpZGUgPT4KICBjcmVhdGU6IChwcm9qZWN0LCBwcm9wcyA9IHt9KSA9PgogIGEgPT4KICBlID0+CiAgZSA9PgogIG5hbWUgPT4KICBlID0+CiAgbWFrZUxheWVyTmFtZShuYW1lLCBzaWRlKQogIGZuOiAoKSA9PgogIG9uQ2hhbmdlKGV2ZW50KQogIHByb3BzID0+CiAgcHJvcHMgPT4KICBwcm9wcyA9PgooZSwgcCwgaSkgPT4KICBtYWtlU29ydENvbXBhcmU6IGtleSA9PgogIGZ1bmN0aW9uKGEsIGIpCiAgZnVuY3Rpb24oYSwgYikKICBvbkNvbW1hbmQ6IGNtZFN0ciA9PgogIGhhbmRsZUNoYW5nZTogZSA9PgogIGV2ZW50ID0+CiAgZSA9PgpNb3ZlRXZlbnQoZXZlbnQsIHByZXZFdmVudCkKV2Fsa1VwKGUpCiAgZSA9PgogIHogPT4KICBwID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgdiA9PgogIGwgPT4KICBlID0+CiAgKCkgPT4KICAoZSwgZGVwdGgpID0+CiAgY2xhc3NlcyA9PgogIGUgPT4KICBlID0+CiAgKGEsIGIpID0+CiAgKGEsIGIpID0+Ck5vZGUKICBlID0+CiAgKHAsIGQsIHNldCwgc3RvcCkgPT4KICBlID0+CiAgZSA9PgpUb3VjaEV2ZW50KGV2ZW50KQogIGUgPT4KKHAsIGkpID0+CihhLCBiKSA9PgogIHNpemUgPT4KICBib3JkZXIgPT4KICByID0+CiAgbW9kKG4sIG0pCigpID0+CiAgKHBvcywgbGFzdCwgZmlyc3QpID0+CiAgY2FuY2VsKCkKICAub25jb250ZXh0bWVudSA9IGZ1bmN0aW9uKGUpCiAgLnByb2Nlc3NFdmVudHMgPSBmdW5jdGlvbiBldmVudExvb3AoKQogIGV2ZW50ID0+CiAgZSA9PgogIG9uUnVudGltZUluaXRpYWxpemVkOiAoKSA9PgogIHByaW50OiB0eHQgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-server.js",
						"symkeys":
						[
							[
								754,
								781
							],
							[
								952,
								998
							],
							[
								1565,
								1595
							],
							[
								1651,
								1684
							],
							[
								1692,
								1693
							],
							[
								1707,
								1732
							],
							[
								1927,
								1940
							],
							[
								1976,
								1990
							],
							[
								2083,
								2099
							],
							[
								2344,
								2356
							],
							[
								2453,
								2475
							],
							[
								2776,
								2786
							],
							[
								3030,
								3044
							],
							[
								3858,
								3897
							],
							[
								4069,
								4089
							],
							[
								5552,
								5570
							],
							[
								5641,
								5669
							],
							[
								5873,
								5884
							],
							[
								6029,
								6045
							],
							[
								6222,
								6241
							],
							[
								6327,
								6369
							],
							[
								7366,
								7372
							],
							[
								8114,
								8129
							],
							[
								8297,
								8308
							],
							[
								11536,
								11552
							],
							[
								11783,
								11800
							],
							[
								11852,
								11866
							],
							[
								12273,
								12293
							]
						],
						"symlist":
						[
							"function ReadJSON(filename)",
							"function WriteFile(name, data, verbose = true)",
							"function WriteJSON(name, data)",
							"function StartREPL(prefix = path.",
							"(",
							"[0], '.js'), suffix = '')",
							".help = () =>",
							".show = arg =>",
							".cleanup = () =>",
							"(...args) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							".createWS = (url, callbacks, listen) =>",
							" (level, ...args) =>",
							"onConnect(ws, req)",
							".sendMessage = function(msg)",
							"onClose(ws)",
							"onHttp(req, rsp)",
							"onMessage(ws, data)",
							" function handleCommand(ws, data)",
							" () =>",
							" (dbg, sock) =>",
							"async () =>",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get socklist()",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAGAIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/grammar-geda-netlist.js",
						"symkeys":
						[
							[
								118,
								145
							],
							[
								156,
								170
							],
							[
								357,
								387
							],
							[
								463,
								486
							],
							[
								555,
								579
							],
							[
								640,
								668
							],
							[
								750,
								772
							],
							[
								842,
								869
							],
							[
								941,
								962
							],
							[
								1028,
								1051
							],
							[
								1116,
								1138
							],
							[
								1203,
								1227
							],
							[
								1287,
								1311
							],
							[
								1371,
								1395
							],
							[
								1455,
								1479
							],
							[
								1539,
								1569
							],
							[
								1656,
								1676
							]
						],
						"symlist":
						[
							"function wrap(parser, name)",
							" (str, pos) =>",
							"function geda_netlist(...args)",
							"function value(...args)",
							"function values(...args)",
							"function components(...args)",
							"function nets(...args)",
							"function component(...args)",
							"function net(...args)",
							"function DELIM(...args)",
							"function TEXT(...args)",
							"function LBRACK(...args)",
							"function RBRACK(...args)",
							"function LPAREN(...args)",
							"function RPAREN(...args)",
							"function LINE_COMMENT(...args)",
							"function NL(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAYAgAAUmVhZEpTT04oZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpClN0YXJ0UkVQTChwcmVmaXggPSBwYXRoLgooClswXSwgJy5qcycpLCBzdWZmaXggPSAnJykKICAuaGVscCA9ICgpID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CiAgKGxldmVsLCAuLi5hcmdzKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykKICBvbkNsb3NlKHdzKQogIG9uSHR0cChyZXEsIHJzcCkKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgaGFuZGxlQ29tbWFuZCh3cywgZGF0YSkKICAoKSA9PgogIChkYmcsIHNvY2spID0+CigpID0+CiAgb25GZChmZCwgcmQsIHdyKQogIGdldCBjb25uZWN0aW9ucygpCiAgZ2V0IHNvY2tsaXN0KCkKICBxdWl0KHdoeSkAAAAAAAAAACgBAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/list-proxies.js",
						"symkeys":
						[
							[
								985,
								1015
							],
							[
								1132,
								1152
							],
							[
								1298,
								1304
							],
							[
								1372,
								1378
							],
							[
								1420,
								1427
							],
							[
								1467,
								1473
							],
							[
								1499,
								1547
							],
							[
								1552,
								1553
							],
							[
								1716,
								1765
							],
							[
								1890,
								1910
							],
							[
								2114,
								2126
							],
							[
								2826,
								2845
							],
							[
								3370,
								3377
							],
							[
								3598,
								3629
							],
							[
								3660,
								3692
							],
							[
								3862,
								3894
							],
							[
								3982,
								4014
							],
							[
								4053,
								4081
							],
							[
								4167,
								4187
							],
							[
								4399,
								4405
							],
							[
								4471,
								4477
							],
							[
								4519,
								4526
							],
							[
								4566,
								4572
							],
							[
								4598,
								4646
							],
							[
								4651,
								4652
							],
							[
								4917,
								4928
							],
							[
								4988,
								5016
							],
							[
								5755,
								5776
							],
							[
								6397,
								6418
							],
							[
								6459,
								6482
							],
							[
								6608,
								6629
							],
							[
								6806,
								6822
							],
							[
								7090,
								7096
							],
							[
								7169,
								7178
							],
							[
								7277,
								7283
							],
							[
								8360,
								8371
							],
							[
								9149,
								9225
							],
							[
								9422,
								9431
							],
							[
								9438,
								9442
							],
							[
								9475,
								9483
							],
							[
								9490,
								9494
							],
							[
								9576,
								9586
							],
							[
								9599,
								9603
							],
							[
								9787,
								9793
							]
						],
						"symlist":
						[
							"function TCPSocket(host, port)",
							"(resolve, reject) =>",
							" () =>",
							" () =>",
							" err =>",
							" () =>",
							" function finish(msg, start = -1, end = Date.",
							")",
							"function HTTPRequest(url, proxy_host, proxy_port)",
							"(resolve, reject) =>",
							" res =>",
							"function Proxy(obj)",
							"prop =>",
							".prototype.valueOf = function()",
							".prototype.toSource = function()",
							".prototype.toString = function()",
							".prototype.check = function(url)",
							".prototype.ping = function()",
							"(resolve, reject) =>",
							" () =>",
							" () =>",
							" err =>",
							" () =>",
							" function finish(msg, start = -1, end = Date.",
							")",
							" function()",
							"async function main(...args)",
							"async (push, stop) =>",
							"async (push, stop) =>",
							"async (err, proxies) =>",
							"async (push, stop) =>",
							"async proxies =>",
							"err =>",
							" error =>",
							" () =>",
							"async () =>",
							"async function writeResults(results, format = 'txt', outputName = 'proxies')",
							"txt: r =>",
							"p =>",
							"sh: r =>",
							"p =>",
							"json: r =>",
							"p =>",
							"err =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAoAQAAICB3cmFwKHBhcnNlciwgbmFtZSkKICAoc3RyLCBwb3MpID0+CiAgZ2VkYV9uZXRsaXN0KC4uLmFyZ3MpCiAgdmFsdWUoLi4uYXJncykKICB2YWx1ZXMoLi4uYXJncykKICBjb21wb25lbnRzKC4uLmFyZ3MpCiAgbmV0cyguLi5hcmdzKQogIGNvbXBvbmVudCguLi5hcmdzKQogIG5ldCguLi5hcmdzKQpERUxJTSguLi5hcmdzKQpURVhUKC4uLmFyZ3MpCkxCUkFDSyguLi5hcmdzKQpSQlJBQ0soLi4uYXJncykKTFBBUkVOKC4uLmFyZ3MpClJQQVJFTiguLi5hcmdzKQpMSU5FX0NPTU1FTlQoLi4uYXJncykKTkwoLi4uYXJncykAAAAAAAAAAOcCAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/plot-cv.js",
						"symkeys":
						[
							[
								297,
								315
							],
							[
								397,
								417
							],
							[
								495,
								522
							],
							[
								580,
								595
							],
							[
								665,
								690
							],
							[
								774,
								832
							],
							[
								1851,
								1855
							],
							[
								1882,
								1886
							]
						],
						"symlist":
						[
							"function connect()",
							"onConnect: socket =>",
							"onMessage: (socket, msg) =>",
							"onClose: why =>",
							"onPong: (socket, data) =>",
							".process = async function process(contours, hier, ...args)",
							"c =>",
							"c =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADnAgAAVENQU29ja2V0KGhvc3QsIHBvcnQpCihyZXNvbHZlLCByZWplY3QpID0+CiAgKCkgPT4KICAoKSA9PgogIGVyciA9PgogICgpID0+CiAgZmluaXNoKG1zZywgc3RhcnQgPSAtMSwgZW5kID0gRGF0ZS4KKQpIVFRQUmVxdWVzdCh1cmwsIHByb3h5X2hvc3QsIHByb3h5X3BvcnQpCihyZXNvbHZlLCByZWplY3QpID0+CiAgcmVzID0+ClByb3h5KG9iaikKICBwcm9wID0+CiAgLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKQogIC5wcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbigpCiAgLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkKICAucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24odXJsKQogIC5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uKCkKKHJlc29sdmUsIHJlamVjdCkgPT4KICAoKSA9PgogICgpID0+CiAgZXJyID0+CiAgKCkgPT4KICBmaW5pc2gobXNnLCBzdGFydCA9IC0xLCBlbmQgPSBEYXRlLgopCiAgZnVuY3Rpb24oKQogIG1haW4oLi4uYXJncykKKHB1c2gsIHN0b3ApID0+CihwdXNoLCBzdG9wKSA9PgooZXJyLCBwcm94aWVzKSA9PgoocHVzaCwgc3RvcCkgPT4KICBwcm94aWVzID0+CiAgZXJyID0+CiAgZXJyb3IgPT4KICAoKSA9PgooKSA9PgogIHdyaXRlUmVzdWx0cyhyZXN1bHRzLCBmb3JtYXQgPSAndHh0Jywgb3V0cHV0TmFtZSA9ICdwcm94aWVzJykKICB0eHQ6IHIgPT4KICBwID0+CiAgc2g6IHIgPT4KICBwID0+CiAganNvbjogciA9PgogIHAgPT4KICBlcnIgPT4AAAAAAAAAALMAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-minnet.js",
						"symkeys":
						[
							[
								194,
								217
							],
							[
								310,
								330
							],
							[
								451,
								478
							],
							[
								524,
								539
							],
							[
								604,
								629
							],
							[
								676,
								699
							],
							[
								753,
								772
							],
							[
								989,
								1007
							],
							[
								1136,
								1154
							],
							[
								1225,
								1231
							],
							[
								1619,
								1625
							],
							[
								1739,
								1754
							],
							[
								1806,
								1822
							],
							[
								1894,
								1910
							],
							[
								2049,
								2067
							],
							[
								2423,
								2445
							]
						],
						"symlist":
						[
							"function CreateServer()",
							"onConnect: socket =>",
							"onMessage: (socket, msg) =>",
							"onClose: why =>",
							"onPong: (socket, data) =>",
							"function CreateClient()",
							"(level, ...args) =>",
							"onMessage(ws, msg)",
							"onConnect(ws, req)",
							" () =>",
							" () =>",
							"onPong(ws, req)",
							"onClose(ws, req)",
							"onFd(fd, rd, wr)",
							"function getJSON()",
							"function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACzAAAAICBjb25uZWN0KCkKICBvbkNvbm5lY3Q6IHNvY2tldCA9PgogIG9uTWVzc2FnZTogKHNvY2tldCwgbXNnKSA9PgogIG9uQ2xvc2U6IHdoeSA9PgogIG9uUG9uZzogKHNvY2tldCwgZGF0YSkgPT4KICAucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoY29udG91cnMsIGhpZXIsIC4uLmFyZ3MpCiAgYyA9PgogIGMgPT4AAAAAAAAAACIBAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-net.js",
						"symkeys":
						[
							[
								427,
								449
							]
						],
						"symlist":
						[
							"function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAiAQAAQ3JlYXRlU2VydmVyKCkKICBvbkNvbm5lY3Q6IHNvY2tldCA9PgogIG9uTWVzc2FnZTogKHNvY2tldCwgbXNnKSA9PgogIG9uQ2xvc2U6IHdoeSA9PgogIG9uUG9uZzogKHNvY2tldCwgZGF0YSkgPT4KQ3JlYXRlQ2xpZW50KCkKKGxldmVsLCAuLi5hcmdzKSA9PgogIG9uTWVzc2FnZSh3cywgbXNnKQogIG9uQ29ubmVjdCh3cywgcmVxKQogICgpID0+CiAgKCkgPT4KICBvblBvbmcod3MsIHJlcSkKICBvbkNsb3NlKHdzLCByZXEpCiAgb25GZChmZCwgcmQsIHdyKQogIGdldEpTT04oKQogIG1haW4oLi4uYXJncykAAAAAAAAAAA8AAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-rpc.js",
						"symkeys":
						[
							[
								693,
								720
							],
							[
								891,
								937
							],
							[
								1504,
								1534
							],
							[
								1590,
								1612
							],
							[
								1897,
								1907
							],
							[
								2151,
								2165
							],
							[
								3077,
								3090
							],
							[
								3126,
								3140
							],
							[
								3240,
								3256
							],
							[
								3788,
								3827
							],
							[
								3999,
								4019
							],
							[
								4424,
								4456
							],
							[
								4649,
								4683
							],
							[
								4767,
								4801
							],
							[
								5136,
								5143
							],
							[
								5212,
								5220
							],
							[
								5276,
								5283
							],
							[
								5387,
								5402
							],
							[
								5436,
								5445
							],
							[
								5493,
								5513
							],
							[
								6058,
								6076
							],
							[
								6215,
								6226
							],
							[
								6320,
								6336
							],
							[
								6503,
								6522
							],
							[
								6630,
								6646
							],
							[
								6880,
								6897
							],
							[
								7402,
								7422
							]
						],
						"symlist":
						[
							"function ReadJSON(filename)",
							"function WriteFile(name, data, verbose = true)",
							"function WriteJSON(name, data)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							".help = () =>",
							".show = arg =>",
							".cleanup = () =>",
							".createWS = (url, callbacks, listen) =>",
							" (level, ...args) =>",
							" function proxy(req, res)",
							" function* config(req, res)",
							" function* files(req, resp)",
							"name =>",
							"entry =>",
							"file =>",
							"([file, st]) =>",
							"(a, b) =>",
							"(acc, [file, st]) =>",
							"onConnect(ws, req)",
							"onClose(ws)",
							"onHttp(req, rsp)",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAICBtYWluKC4uLmFyZ3MpAAAAAAAAAADzAQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-net.js",
						"symkeys":
						[
							[
								427,
								449
							]
						],
						"symlist":
						[
							"function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADzAQAAUmVhZEpTT04oZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQogIChhLCB2KSA9PgogICh2LCBwdiwgbykgPT4KICAuaGVscCA9ICgpID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CiAgKGxldmVsLCAuLi5hcmdzKSA9PgogIHByb3h5KHJlcSwgcmVzKQogIGNvbmZpZyhyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbmFtZSA9PgogIGVudHJ5ID0+CiAgZmlsZSA9PgooW2ZpbGUsIHN0XSkgPT4KKGEsIGIpID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgb25DbG9zZSh3cykKICBvbkh0dHAocmVxLCByc3ApCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIHF1aXQod2h5KQAAAAAAAAAADwAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-cv.js",
						"symkeys":
						[
							[
								1003,
								1033
							],
							[
								1113,
								1143
							],
							[
								1209,
								1220
							],
							[
								1362,
								1383
							],
							[
								1599,
								1610
							],
							[
								1634,
								1645
							],
							[
								1726,
								1748
							],
							[
								2416,
								2421
							],
							[
								2510,
								2517
							],
							[
								2759,
								2785
							],
							[
								3840,
								3844
							],
							[
								3938,
								3942
							],
							[
								7366,
								7370
							]
						],
						"symlist":
						[
							"function WriteImage(name, mat)",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>",
							"function main(...args)",
							"() =>",
							"name =>",
							" function toHex(n, b = 2)",
							"k =>",
							"k =>",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAICBtYWluKC4uLmFyZ3MpAAAAAAAAAACjAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-opencv.js",
						"symkeys":
						[
							[
								672,
								694
							],
							[
								1527,
								1557
							],
							[
								1647,
								1677
							],
							[
								1743,
								1754
							],
							[
								2008,
								2029
							],
							[
								2203,
								2214
							],
							[
								2238,
								2249
							],
							[
								2359,
								2383
							],
							[
								2499,
								2521
							],
							[
								2615,
								2645
							],
							[
								2679,
								2707
							],
							[
								2867,
								2876
							],
							[
								2925,
								2933
							],
							[
								2981,
								2987
							],
							[
								3118,
								3125
							],
							[
								3203,
								3225
							],
							[
								5011,
								5035
							],
							[
								5514,
								5521
							],
							[
								7083,
								7120
							],
							[
								7192,
								7226
							],
							[
								7380,
								7409
							],
							[
								7513,
								7547
							],
							[
								7625,
								7660
							],
							[
								7953,
								7993
							],
							[
								8043,
								8085
							],
							[
								8534,
								8570
							],
							[
								9527,
								9531
							],
							[
								9580,
								9595
							],
							[
								9669,
								9673
							],
							[
								9742,
								9751
							],
							[
								9904,
								9923
							],
							[
								9984,
								10000
							],
							[
								10067,
								10071
							],
							[
								10105,
								10109
							],
							[
								10142,
								10151
							],
							[
								10184,
								10192
							],
							[
								10238,
								10242
							],
							[
								10275,
								10279
							],
							[
								10312,
								10321
							],
							[
								10354,
								10362
							],
							[
								10485,
								10503
							],
							[
								11554,
								11591
							],
							[
								12540,
								12548
							],
							[
								13222,
								13247
							],
							[
								13845,
								13859
							],
							[
								14243,
								14268
							],
							[
								14605,
								14621
							],
							[
								14733,
								14745
							],
							[
								14761,
								14776
							],
							[
								14813,
								14827
							]
						],
						"symlist":
						[
							"function GLFW(...args)",
							"function WriteImage(name, mat)",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>",
							"function InspectMat(mat)",
							"function ToHex(number)",
							"function Accumulator(callback)",
							"self = function(name, value)",
							"entries()",
							"values()",
							"keys()",
							"clear()",
							"function main(...args)",
							" (event, x, y, flags) =>",
							"file =>",
							" function AcquireFrame(src, dst)",
							" function Grayscale(src, dst)",
							" function Blur(src, dst)",
							" function Threshold(src, dst)",
							" function Morphology(src, dst)",
							" function Skeletonization(src, dst)",
							" function PixelNeighborhood(src, dst)",
							" function HoughLinesP(src, dst)",
							"l =>",
							"GetAngle = l =>",
							"l =>",
							"(a, b) =>",
							"isHorizontal = l =>",
							"firstLast = a =>",
							"l =>",
							"l =>",
							"(a, b) =>",
							"([l]) =>",
							"l =>",
							"l =>",
							"(a, b) =>",
							"([l]) =>",
							"angle2Color = a =>",
							" function HoughCircles(src, dst)",
							" i =>",
							" function RedrawStatus()",
							"(name, idx) =>",
							" function RedrawWindow()",
							"(name, param) =>",
							"processor =>",
							".before = () =>",
							".after = () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACjAAAAV3JpdGVJbWFnZShuYW1lLCBtYXQpClNhdmVDb25maWcoY29uZmlnT2JqKQooW2ssIHZdKSA9PgpMb2FkQ29uZmlnKCkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCigpID0+CiAgbmFtZSA9PgogIHRvSGV4KG4sIGIgPSAyKQogIGsgPT4KICBrID0+CiAgcCA9PgAAAAAAAAAAAAMAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-cv.js",
						"symkeys":
						[
							[
								1003,
								1033
							],
							[
								1113,
								1143
							],
							[
								1209,
								1220
							],
							[
								1362,
								1383
							],
							[
								1599,
								1610
							],
							[
								1634,
								1645
							],
							[
								1726,
								1748
							],
							[
								2416,
								2421
							],
							[
								2510,
								2517
							],
							[
								2759,
								2785
							],
							[
								3840,
								3844
							],
							[
								3938,
								3942
							],
							[
								7366,
								7370
							]
						],
						"symlist":
						[
							"function WriteImage(name, mat)",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>",
							"function main(...args)",
							"() =>",
							"name =>",
							" function toHex(n, b = 2)",
							"k =>",
							"k =>",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAR0xGVyguLi5hcmdzKQpXcml0ZUltYWdlKG5hbWUsIG1hdCkKU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgpJbnNwZWN0TWF0KG1hdCkKVG9IZXgobnVtYmVyKQpBY2N1bXVsYXRvcihjYWxsYmFjaykKICBzZWxmID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpCiAgZW50cmllcygpCiAgdmFsdWVzKCkKICBrZXlzKCkKICBjbGVhcigpCiAgbWFpbiguLi5hcmdzKQogIChldmVudCwgeCwgeSwgZmxhZ3MpID0+CiAgZmlsZSA9PgpBY3F1aXJlRnJhbWUoc3JjLCBkc3QpCkdyYXlzY2FsZShzcmMsIGRzdCkKQmx1cihzcmMsIGRzdCkKVGhyZXNob2xkKHNyYywgZHN0KQpNb3JwaG9sb2d5KHNyYywgZHN0KQpTa2VsZXRvbml6YXRpb24oc3JjLCBkc3QpClBpeGVsTmVpZ2hib3Job29kKHNyYywgZHN0KQpIb3VnaExpbmVzUChzcmMsIGRzdCkKICBsID0+CkdldEFuZ2xlID0gbCA9PgogIGwgPT4KKGEsIGIpID0+CiAgaXNIb3Jpem9udGFsID0gbCA9PgogIGZpcnN0TGFzdCA9IGEgPT4KICBsID0+CiAgbCA9PgooYSwgYikgPT4KKFtsXSkgPT4KICBsID0+CiAgbCA9PgooYSwgYikgPT4KKFtsXSkgPT4KICBhbmdsZTJDb2xvciA9IGEgPT4KSG91Z2hDaXJjbGVzKHNyYywgZHN0KQogIGkgPT4KUmVkcmF3U3RhdHVzKCkKKG5hbWUsIGlkeCkgPT4KUmVkcmF3V2luZG93KCkKKG5hbWUsIHBhcmFtKSA9PgogIHByb2Nlc3NvciA9PgogIC5iZWZvcmUgPSAoKSA9PgogIC5hZnRlciA9ICgpID0+AAAAAAAAAACjAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACjAAAAV3JpdGVJbWFnZShuYW1lLCBtYXQpClNhdmVDb25maWcoY29uZmlnT2JqKQooW2ssIHZdKSA9PgpMb2FkQ29uZmlnKCkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCigpID0+CiAgbmFtZSA9PgogIHRvSGV4KG4sIGIgPSAyKQogIGsgPT4KICBrID0+CiAgcCA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/config.js",
						"symkeys":
						[
							[
								124,
								129
							],
							[
								176,
								207
							],
							[
								273,
								284
							],
							[
								543,
								565
							],
							[
								742,
								753
							],
							[
								777,
								788
							]
						],
						"symlist":
						[
							"() =>",
							" function SaveConfig(configObj)",
							"([k, v]) =>",
							" function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>"
						]
					},
					"AQAAAAAAAAAAAAAATAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-cv.js",
						"symkeys":
						[
							[
								1003,
								1033
							],
							[
								1113,
								1143
							],
							[
								1209,
								1220
							],
							[
								1362,
								1383
							],
							[
								1599,
								1610
							],
							[
								1634,
								1645
							],
							[
								1726,
								1748
							],
							[
								2416,
								2421
							],
							[
								2510,
								2517
							],
							[
								2759,
								2785
							],
							[
								3840,
								3844
							],
							[
								3938,
								3942
							],
							[
								7366,
								7370
							]
						],
						"symlist":
						[
							"function WriteImage(name, mat)",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>",
							"function main(...args)",
							"() =>",
							"name =>",
							" function toHex(n, b = 2)",
							"k =>",
							"k =>",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABMAAAAKCkgPT4KU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgAAAAAAAAAAowAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/config.js",
						"symkeys":
						[
							[
								124,
								129
							],
							[
								176,
								207
							],
							[
								273,
								284
							],
							[
								543,
								565
							],
							[
								742,
								753
							],
							[
								777,
								788
							]
						],
						"symlist":
						[
							"() =>",
							" function SaveConfig(configObj)",
							"([k, v]) =>",
							" function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACjAAAAV3JpdGVJbWFnZShuYW1lLCBtYXQpClNhdmVDb25maWcoY29uZmlnT2JqKQooW2ssIHZdKSA9PgpMb2FkQ29uZmlnKCkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCigpID0+CiAgbmFtZSA9PgogIHRvSGV4KG4sIGIgPSAyKQogIGsgPT4KICBrID0+CiAgcCA9PgAAAAAAAAAATAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-server.js",
						"symkeys":
						[
							[
								754,
								781
							],
							[
								952,
								998
							],
							[
								1565,
								1595
							],
							[
								1651,
								1684
							],
							[
								1692,
								1693
							],
							[
								1707,
								1732
							],
							[
								1927,
								1940
							],
							[
								1976,
								1990
							],
							[
								2083,
								2099
							],
							[
								2344,
								2356
							],
							[
								2453,
								2475
							],
							[
								2776,
								2786
							],
							[
								3030,
								3044
							],
							[
								3858,
								3897
							],
							[
								4069,
								4089
							],
							[
								5552,
								5570
							],
							[
								5641,
								5669
							],
							[
								5873,
								5884
							],
							[
								6029,
								6045
							],
							[
								6222,
								6241
							],
							[
								6327,
								6369
							],
							[
								7366,
								7372
							],
							[
								8114,
								8129
							],
							[
								8297,
								8308
							],
							[
								11536,
								11552
							],
							[
								11783,
								11800
							],
							[
								11852,
								11866
							],
							[
								12273,
								12293
							]
						],
						"symlist":
						[
							"function ReadJSON(filename)",
							"function WriteFile(name, data, verbose = true)",
							"function WriteJSON(name, data)",
							"function StartREPL(prefix = path.",
							"(",
							"[0], '.js'), suffix = '')",
							".help = () =>",
							".show = arg =>",
							".cleanup = () =>",
							"(...args) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							".createWS = (url, callbacks, listen) =>",
							" (level, ...args) =>",
							"onConnect(ws, req)",
							".sendMessage = function(msg)",
							"onClose(ws)",
							"onHttp(req, rsp)",
							"onMessage(ws, data)",
							" function handleCommand(ws, data)",
							" () =>",
							" (dbg, sock) =>",
							"async () =>",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get socklist()",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABMAAAAKCkgPT4KU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgAAAAAAAAAAGAIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/config.js",
						"symkeys":
						[
							[
								124,
								129
							],
							[
								170,
								200
							],
							[
								266,
								277
							],
							[
								549,
								571
							],
							[
								748,
								759
							],
							[
								783,
								794
							]
						],
						"symlist":
						[
							"() =>",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							" function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAYAgAAUmVhZEpTT04oZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpClN0YXJ0UkVQTChwcmVmaXggPSBwYXRoLgooClswXSwgJy5qcycpLCBzdWZmaXggPSAnJykKICAuaGVscCA9ICgpID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CiAgKGxldmVsLCAuLi5hcmdzKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykKICBvbkNsb3NlKHdzKQogIG9uSHR0cChyZXEsIHJzcCkKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgaGFuZGxlQ29tbWFuZCh3cywgZGF0YSkKICAoKSA9PgogIChkYmcsIHNvY2spID0+CigpID0+CiAgb25GZChmZCwgcmQsIHdyKQogIGdldCBjb25uZWN0aW9ucygpCiAgZ2V0IHNvY2tsaXN0KCkKICBxdWl0KHdoeSkAAAAAAAAAAEwAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABMAAAAKCkgPT4KU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/config.js",
						"symkeys":
						[
							[
								145,
								150
							],
							[
								191,
								221
							],
							[
								287,
								298
							],
							[
								570,
								592
							],
							[
								769,
								780
							],
							[
								804,
								815
							]
						],
						"symlist":
						[
							"() =>",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							" function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>"
						]
					},
					"AQAAAAAAAAAAAAAATAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/config.js",
						"symkeys":
						[
							[
								86,
								91
							],
							[
								132,
								162
							],
							[
								228,
								239
							],
							[
								511,
								533
							],
							[
								710,
								721
							],
							[
								745,
								756
							]
						],
						"symlist":
						[
							"() =>",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							" function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABMAAAAKCkgPT4KU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgAAAAAAAAAATAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABMAAAAKCkgPT4KU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-cv.js",
						"symkeys":
						[
							[
								1003,
								1033
							],
							[
								1113,
								1143
							],
							[
								1209,
								1220
							],
							[
								1362,
								1383
							],
							[
								1599,
								1610
							],
							[
								1634,
								1645
							],
							[
								1726,
								1748
							],
							[
								2416,
								2421
							],
							[
								2510,
								2517
							],
							[
								2759,
								2785
							],
							[
								3840,
								3844
							],
							[
								3938,
								3942
							],
							[
								7366,
								7370
							]
						],
						"symlist":
						[
							"function WriteImage(name, mat)",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>",
							"function main(...args)",
							"() =>",
							"name =>",
							" function toHex(n, b = 2)",
							"k =>",
							"k =>",
							"p =>"
						]
					},
					"AQAAAAAAAAAAAAAAowAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/config.js",
						"symkeys":
						[
							[
								86,
								91
							],
							[
								132,
								162
							],
							[
								228,
								239
							],
							[
								511,
								533
							],
							[
								710,
								721
							],
							[
								745,
								756
							]
						],
						"symlist":
						[
							"() =>",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							" function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACjAAAAV3JpdGVJbWFnZShuYW1lLCBtYXQpClNhdmVDb25maWcoY29uZmlnT2JqKQooW2ssIHZdKSA9PgpMb2FkQ29uZmlnKCkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCigpID0+CiAgbmFtZSA9PgogIHRvSGV4KG4sIGIgPSAyKQogIGsgPT4KICBrID0+CiAgcCA9PgAAAAAAAAAATAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					37,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAABMAAAAKCkgPT4KU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					38,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					39,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/config.js",
						"symkeys":
						[
							[
								86,
								91
							],
							[
								132,
								162
							],
							[
								228,
								239
							],
							[
								505,
								526
							],
							[
								742,
								753
							],
							[
								777,
								788
							]
						],
						"symlist":
						[
							"() =>",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>"
						]
					},
					"AQAAAAAAAAAAAAAATAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					40,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/config.js",
						"symkeys":
						[
							[
								86,
								91
							],
							[
								132,
								162
							],
							[
								228,
								239
							],
							[
								497,
								518
							],
							[
								726,
								737
							],
							[
								761,
								772
							]
						],
						"symlist":
						[
							"() =>",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABMAAAAKCkgPT4KU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgAAAAAAAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAAAoKSA9PgpTYXZlQ29uZmlnKGNvbmZpZ09iaikKKFtrLCB2XSkgPT4KTG9hZENvbmZpZygpCihbaywgdl0pID0+Cihbaywgdl0pID0+AAAAAAAAAABMAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					41,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABMAAAAKCkgPT4KU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					42,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					43,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					44,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					45,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					47,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					48,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					49,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					50,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					51,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					52,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					53,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					54,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					55,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					56,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					57,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					58,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					59,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/config.js",
						"symkeys":
						[
							[
								86,
								91
							],
							[
								132,
								162
							],
							[
								228,
								239
							],
							[
								497,
								518
							],
							[
								726,
								737
							],
							[
								761,
								772
							]
						],
						"symlist":
						[
							"() =>",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>"
						]
					},
					"AQAAAAAAAAAAAAAATAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-cv.js",
						"symkeys":
						[
							[
								1003,
								1033
							],
							[
								1113,
								1143
							],
							[
								1209,
								1220
							],
							[
								1362,
								1383
							],
							[
								1599,
								1610
							],
							[
								1634,
								1645
							],
							[
								1726,
								1748
							],
							[
								2416,
								2421
							],
							[
								2510,
								2517
							],
							[
								2759,
								2785
							],
							[
								3840,
								3844
							],
							[
								3938,
								3942
							],
							[
								7366,
								7370
							]
						],
						"symlist":
						[
							"function WriteImage(name, mat)",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>",
							"function main(...args)",
							"() =>",
							"name =>",
							" function toHex(n, b = 2)",
							"k =>",
							"k =>",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABMAAAAKCkgPT4KU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgAAAAAAAAAAowAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/plot-cv.js",
						"symkeys":
						[
							[
								297,
								315
							],
							[
								397,
								417
							],
							[
								495,
								522
							],
							[
								580,
								595
							],
							[
								665,
								690
							],
							[
								774,
								832
							],
							[
								1851,
								1855
							],
							[
								1882,
								1886
							]
						],
						"symlist":
						[
							"function connect()",
							"onConnect: socket =>",
							"onMessage: (socket, msg) =>",
							"onClose: why =>",
							"onPong: (socket, data) =>",
							".process = async function process(contours, hier, ...args)",
							"c =>",
							"c =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACjAAAAV3JpdGVJbWFnZShuYW1lLCBtYXQpClNhdmVDb25maWcoY29uZmlnT2JqKQooW2ssIHZdKSA9PgpMb2FkQ29uZmlnKCkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCigpID0+CiAgbmFtZSA9PgogIHRvSGV4KG4sIGIgPSAyKQogIGsgPT4KICBrID0+CiAgcCA9PgAAAAAAAAAAswAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/libraries.js",
						"symkeys":
						[
							[
								197,
								232
							],
							[
								697,
								710
							],
							[
								764,
								777
							],
							[
								854,
								882
							],
							[
								1066,
								1090
							]
						],
						"symlist":
						[
							"async function Search(q, languages)",
							" (v, p) =>",
							" (p, v) =>",
							"async function main(...args)",
							"add = (arr, ...items) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACzAAAAICBjb25uZWN0KCkKICBvbkNvbm5lY3Q6IHNvY2tldCA9PgogIG9uTWVzc2FnZTogKHNvY2tldCwgbXNnKSA9PgogIG9uQ2xvc2U6IHdoeSA9PgogIG9uUG9uZzogKHNvY2tldCwgZGF0YSkgPT4KICAucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoY29udG91cnMsIGhpZXIsIC4uLmFyZ3MpCiAgYyA9PgogIGMgPT4AAAAAAAAAAFcAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/grammar-geda-netlist.js",
						"symkeys":
						[
							[
								118,
								145
							],
							[
								156,
								170
							],
							[
								357,
								387
							],
							[
								463,
								486
							],
							[
								555,
								579
							],
							[
								640,
								668
							],
							[
								750,
								772
							],
							[
								842,
								869
							],
							[
								941,
								962
							],
							[
								1028,
								1051
							],
							[
								1116,
								1138
							],
							[
								1203,
								1227
							],
							[
								1287,
								1311
							],
							[
								1371,
								1395
							],
							[
								1455,
								1479
							],
							[
								1539,
								1569
							],
							[
								1656,
								1676
							]
						],
						"symlist":
						[
							"function wrap(parser, name)",
							" (str, pos) =>",
							"function geda_netlist(...args)",
							"function value(...args)",
							"function values(...args)",
							"function components(...args)",
							"function nets(...args)",
							"function component(...args)",
							"function net(...args)",
							"function DELIM(...args)",
							"function TEXT(...args)",
							"function LBRACK(...args)",
							"function RBRACK(...args)",
							"function LPAREN(...args)",
							"function RPAREN(...args)",
							"function LINE_COMMENT(...args)",
							"function NL(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABXAAAAU2VhcmNoKHEsIGxhbmd1YWdlcykKICAodiwgcCkgPT4KICAocCwgdikgPT4KICBtYWluKC4uLmFyZ3MpCiAgYWRkID0gKGFyciwgLi4uaXRlbXMpID0+AAAAAAAAAAAoAQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-server.js",
						"symkeys":
						[
							[
								754,
								781
							],
							[
								952,
								998
							],
							[
								1565,
								1595
							],
							[
								1651,
								1684
							],
							[
								1692,
								1693
							],
							[
								1707,
								1732
							],
							[
								1927,
								1940
							],
							[
								1976,
								1990
							],
							[
								2083,
								2099
							],
							[
								2344,
								2356
							],
							[
								2453,
								2475
							],
							[
								2776,
								2786
							],
							[
								3030,
								3044
							],
							[
								3858,
								3897
							],
							[
								4069,
								4089
							],
							[
								5552,
								5570
							],
							[
								5641,
								5669
							],
							[
								5873,
								5884
							],
							[
								6029,
								6045
							],
							[
								6222,
								6241
							],
							[
								6327,
								6369
							],
							[
								7366,
								7372
							],
							[
								8114,
								8129
							],
							[
								8297,
								8308
							],
							[
								11536,
								11552
							],
							[
								11783,
								11800
							],
							[
								11852,
								11866
							],
							[
								12273,
								12293
							]
						],
						"symlist":
						[
							"function ReadJSON(filename)",
							"function WriteFile(name, data, verbose = true)",
							"function WriteJSON(name, data)",
							"function StartREPL(prefix = path.",
							"(",
							"[0], '.js'), suffix = '')",
							".help = () =>",
							".show = arg =>",
							".cleanup = () =>",
							"(...args) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							".createWS = (url, callbacks, listen) =>",
							" (level, ...args) =>",
							"onConnect(ws, req)",
							".sendMessage = function(msg)",
							"onClose(ws)",
							"onHttp(req, rsp)",
							"onMessage(ws, data)",
							" function handleCommand(ws, data)",
							" () =>",
							" (dbg, sock) =>",
							"async () =>",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get socklist()",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAoAQAAICB3cmFwKHBhcnNlciwgbmFtZSkKICAoc3RyLCBwb3MpID0+CiAgZ2VkYV9uZXRsaXN0KC4uLmFyZ3MpCiAgdmFsdWUoLi4uYXJncykKICB2YWx1ZXMoLi4uYXJncykKICBjb21wb25lbnRzKC4uLmFyZ3MpCiAgbmV0cyguLi5hcmdzKQogIGNvbXBvbmVudCguLi5hcmdzKQogIG5ldCguLi5hcmdzKQpERUxJTSguLi5hcmdzKQpURVhUKC4uLmFyZ3MpCkxCUkFDSyguLi5hcmdzKQpSQlJBQ0soLi4uYXJncykKTFBBUkVOKC4uLmFyZ3MpClJQQVJFTiguLi5hcmdzKQpMSU5FX0NPTU1FTlQoLi4uYXJncykKTkwoLi4uYXJncykAAAAAAAAAABgCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/main.js",
						"symkeys":
						[
							[
								8625,
								8630
							],
							[
								8812,
								8818
							],
							[
								8876,
								8881
							],
							[
								8934,
								8938
							],
							[
								9012,
								9016
							],
							[
								9038,
								9047
							],
							[
								9706,
								9725
							],
							[
								9846,
								9850
							],
							[
								10230,
								10254
							],
							[
								10295,
								10316
							],
							[
								10318,
								10323
							],
							[
								10331,
								10336
							],
							[
								10358,
								10393
							],
							[
								10507,
								10525
							],
							[
								10607,
								10612
							],
							[
								10804,
								10825
							],
							[
								10958,
								10976
							],
							[
								11655,
								11680
							],
							[
								11726,
								11744
							],
							[
								12720,
								12747
							],
							[
								13108,
								13133
							],
							[
								13492,
								13526
							],
							[
								14042,
								14074
							],
							[
								14249,
								14259
							],
							[
								14392,
								14402
							],
							[
								14525,
								14535
							],
							[
								14706,
								14730
							],
							[
								14789,
								14838
							],
							[
								15079,
								15101
							],
							[
								15108,
								15132
							],
							[
								15140,
								15169
							],
							[
								15754,
								15806
							],
							[
								16259,
								16263
							],
							[
								16290,
								16295
							],
							[
								16730,
								16816
							],
							[
								17014,
								17036
							],
							[
								17549,
								17581
							],
							[
								17909,
								17943
							],
							[
								18058,
								18063
							],
							[
								18088,
								18124
							],
							[
								18337,
								18362
							],
							[
								18553,
								18578
							],
							[
								18633,
								18637
							],
							[
								18692,
								18696
							],
							[
								19143,
								19160
							],
							[
								19354,
								19369
							],
							[
								19492,
								19509
							],
							[
								19561,
								19565
							],
							[
								19610,
								19614
							],
							[
								19645,
								19649
							],
							[
								19692,
								19697
							],
							[
								19784,
								19803
							],
							[
								20018,
								20053
							],
							[
								20091,
								20099
							],
							[
								20168,
								20172
							],
							[
								20735,
								20739
							],
							[
								20798,
								20802
							],
							[
								21388,
								21394
							],
							[
								21569,
								21573
							],
							[
								21594,
								21598
							],
							[
								21633,
								21637
							],
							[
								21902,
								21915
							],
							[
								22043,
								22047
							],
							[
								22248,
								22264
							],
							[
								22530,
								22535
							],
							[
								22648,
								22657
							],
							[
								22729,
								22738
							],
							[
								22815,
								22824
							],
							[
								23464,
								23486
							],
							[
								23663,
								23723
							],
							[
								23972,
								23992
							],
							[
								24003,
								24012
							],
							[
								24067,
								24079
							],
							[
								24125,
								24136
							],
							[
								24225,
								24256
							],
							[
								24578,
								24611
							],
							[
								25690,
								25743
							],
							[
								25794,
								25807
							],
							[
								25889,
								25932
							],
							[
								26011,
								26015
							],
							[
								26144,
								26151
							],
							[
								26178,
								26185
							],
							[
								26263,
								26284
							],
							[
								26580,
								26622
							],
							[
								26745,
								26766
							],
							[
								27026,
								27071
							],
							[
								27264,
								27334
							],
							[
								27783,
								27808
							],
							[
								27831,
								27835
							],
							[
								27855,
								27868
							],
							[
								27984,
								28056
							],
							[
								28365,
								28374
							],
							[
								28806,
								28871
							],
							[
								28958,
								28984
							],
							[
								29230,
								29255
							],
							[
								29278,
								29282
							],
							[
								29302,
								29315
							],
							[
								29369,
								29425
							],
							[
								29427,
								29433
							],
							[
								29442,
								29444
							],
							[
								29469,
								29476
							],
							[
								29500,
								29594
							],
							[
								29601,
								29625
							],
							[
								29688,
								29715
							],
							[
								29724,
								29744
							],
							[
								29879,
								29883
							],
							[
								30070,
								30089
							],
							[
								30173,
								30192
							],
							[
								30289,
								30304
							],
							[
								31198,
								31213
							],
							[
								31313,
								31328
							],
							[
								32009,
								32050
							],
							[
								32255,
								32259
							],
							[
								32289,
								32300
							],
							[
								32383,
								32403
							],
							[
								32666,
								32690
							],
							[
								32748,
								32788
							],
							[
								33160,
								33179
							],
							[
								33230,
								33249
							],
							[
								34111,
								34139
							],
							[
								34358,
								34370
							],
							[
								34407,
								34419
							],
							[
								34930,
								34978
							],
							[
								35203,
								35209
							],
							[
								35359,
								35364
							],
							[
								35390,
								35397
							],
							[
								35460,
								35465
							],
							[
								35497,
								35504
							],
							[
								36140,
								36156
							],
							[
								36279,
								36283
							],
							[
								36791,
								36799
							],
							[
								37242,
								37250
							],
							[
								37303,
								37308
							],
							[
								37349,
								37357
							],
							[
								37497,
								37502
							],
							[
								37589,
								37605
							],
							[
								39281,
								39286
							],
							[
								39919,
								39970
							],
							[
								40394,
								40399
							],
							[
								40418,
								40423
							],
							[
								40731,
								40748
							],
							[
								40924,
								40930
							],
							[
								41078,
								41098
							],
							[
								41175,
								41205
							],
							[
								41381,
								41389
							],
							[
								41493,
								41504
							],
							[
								41620,
								41624
							],
							[
								42361,
								42402
							],
							[
								43025,
								43048
							],
							[
								43637,
								43641
							],
							[
								43785,
								43789
							],
							[
								44301,
								44305
							],
							[
								44320,
								44350
							],
							[
								44403,
								44407
							],
							[
								44426,
								44456
							],
							[
								44515,
								44519
							],
							[
								44543,
								44567
							],
							[
								44632,
								44636
							],
							[
								44676,
								44700
							],
							[
								44817,
								44821
							],
							[
								44860,
								44864
							],
							[
								44939,
								44943
							],
							[
								44982,
								44986
							],
							[
								45084,
								45088
							],
							[
								45446,
								45481
							],
							[
								45592,
								45605
							],
							[
								46046,
								46086
							],
							[
								46137,
								46146
							],
							[
								46167,
								46178
							],
							[
								46270,
								46281
							],
							[
								46327,
								46383
							],
							[
								46390,
								46396
							],
							[
								46478,
								46498
							],
							[
								46545,
								46603
							],
							[
								46610,
								46616
							],
							[
								46659,
								46666
							],
							[
								46683,
								46704
							],
							[
								46766,
								46777
							],
							[
								47007,
								47025
							],
							[
								47065,
								47071
							],
							[
								47104,
								47132
							],
							[
								47170,
								47192
							],
							[
								47277,
								47301
							],
							[
								47302,
								47316
							],
							[
								48438,
								48471
							],
							[
								48480,
								48481
							],
							[
								48533,
								48557
							],
							[
								48598,
								48629
							],
							[
								48638,
								48639
							],
							[
								48883,
								48926
							],
							[
								49245,
								49272
							],
							[
								49566,
								49585
							],
							[
								49798,
								49814
							],
							[
								50138,
								50158
							],
							[
								51053,
								51100
							],
							[
								51483,
								51498
							],
							[
								51715,
								51728
							],
							[
								52005,
								52018
							],
							[
								52224,
								52237
							],
							[
								52461,
								52467
							],
							[
								52517,
								52538
							],
							[
								56273,
								56284
							],
							[
								57120,
								57124
							],
							[
								57573,
								57578
							],
							[
								57732,
								57746
							],
							[
								57775,
								57780
							],
							[
								57908,
								57929
							],
							[
								57987,
								57992
							],
							[
								58100,
								58121
							],
							[
								58346,
								58359
							],
							[
								58360,
								58387
							],
							[
								58528,
								58551
							],
							[
								58833,
								58848
							],
							[
								58873,
								58890
							],
							[
								58957,
								58965
							],
							[
								59038,
								59043
							],
							[
								59149,
								59173
							],
							[
								59820,
								59847
							],
							[
								59943,
								59947
							],
							[
								60312,
								60348
							],
							[
								60453,
								60462
							],
							[
								60497,
								60508
							],
							[
								60569,
								60583
							],
							[
								61168,
								61172
							],
							[
								61857,
								61865
							],
							[
								61981,
								61989
							],
							[
								62109,
								62117
							],
							[
								62232,
								62240
							],
							[
								62297,
								62305
							],
							[
								62777,
								62785
							],
							[
								62970,
								63017
							],
							[
								63163,
								63176
							],
							[
								63339,
								63357
							],
							[
								63525,
								63529
							],
							[
								63601,
								63608
							],
							[
								63856,
								63875
							],
							[
								63907,
								63925
							],
							[
								64451,
								64471
							],
							[
								64796,
								64813
							],
							[
								65021,
								65039
							],
							[
								65316,
								65339
							],
							[
								65790,
								65807
							],
							[
								65899,
								65907
							],
							[
								66126,
								66140
							],
							[
								66323,
								66363
							],
							[
								66428,
								66442
							],
							[
								67017,
								67033
							],
							[
								67071,
								67146
							],
							[
								67397,
								67418
							],
							[
								67527,
								67531
							],
							[
								68010,
								68024
							],
							[
								68328,
								68332
							],
							[
								68404,
								68408
							],
							[
								68690,
								68707
							],
							[
								68875,
								68883
							],
							[
								69081,
								69085
							],
							[
								69181,
								69196
							],
							[
								69442,
								69446
							],
							[
								69653,
								69670
							],
							[
								69762,
								69777
							],
							[
								70575,
								70587
							],
							[
								70594,
								70607
							],
							[
								70645,
								70660
							],
							[
								70764,
								70784
							],
							[
								70964,
								70991
							],
							[
								71045,
								71057
							],
							[
								71175,
								71183
							],
							[
								71632,
								71640
							],
							[
								72462,
								72471
							],
							[
								72706,
								72713
							],
							[
								72812,
								72832
							],
							[
								73019,
								73039
							],
							[
								73405,
								73415
							],
							[
								74218,
								74222
							],
							[
								74318,
								74322
							],
							[
								74357,
								74371
							],
							[
								74628,
								74635
							],
							[
								77025,
								77057
							],
							[
								77566,
								77570
							],
							[
								77835,
								77839
							],
							[
								77907,
								77911
							],
							[
								77995,
								78002
							],
							[
								78081,
								78085
							],
							[
								79159,
								79205
							],
							[
								79672,
								79681
							],
							[
								80753,
								80768
							],
							[
								80947,
								80961
							],
							[
								81090,
								81104
							],
							[
								81253,
								81267
							],
							[
								82255,
								82273
							],
							[
								82471,
								82494
							],
							[
								82536,
								82551
							],
							[
								82907,
								82922
							],
							[
								83335,
								83355
							],
							[
								83837,
								83855
							],
							[
								84571,
								84580
							],
							[
								84623,
								84627
							],
							[
								84839,
								84877
							],
							[
								85052,
								85075
							],
							[
								85219,
								85224
							],
							[
								85263,
								85273
							],
							[
								85437,
								85441
							],
							[
								85588,
								85592
							],
							[
								85631,
								85636
							],
							[
								86041,
								86045
							],
							[
								86084,
								86098
							],
							[
								86102,
								86116
							],
							[
								86123,
								86127
							],
							[
								86148,
								86163
							],
							[
								86219,
								86244
							],
							[
								86376,
								86387
							],
							[
								86437,
								86442
							],
							[
								86502,
								86507
							],
							[
								86962,
								86972
							],
							[
								87086,
								87103
							],
							[
								87116,
								87120
							],
							[
								87310,
								87314
							],
							[
								87482,
								87503
							],
							[
								88649,
								88653
							],
							[
								88759,
								88763
							],
							[
								89057,
								89085
							],
							[
								89536,
								89540
							],
							[
								89996,
								90005
							],
							[
								90137,
								90146
							],
							[
								90250,
								90258
							],
							[
								90764,
								90773
							],
							[
								90922,
								90926
							],
							[
								90991,
								91017
							],
							[
								91662,
								91667
							],
							[
								91974,
								92005
							],
							[
								93042,
								93063
							],
							[
								93268,
								93296
							],
							[
								93663,
								93706
							],
							[
								95036,
								95045
							],
							[
								95925,
								95929
							],
							[
								96669,
								96696
							],
							[
								96819,
								96832
							]
						],
						"symlist":
						[
							"() =>",
							"res =>",
							"() =>",
							"r =>",
							"r =>",
							"entries()",
							"GetProject = arg =>",
							"p =>",
							"add = (arr, ...items) =>",
							"useSlot = (arr, i) =>",
							"() =>",
							" v =>",
							"trklGetSet = (get, set) => value =>",
							"MouseEvents = h =>",
							"() =>",
							"(parent, delegate) =>",
							"append_to(elem, p)",
							"function DrawSVG(...args)",
							"append_to(elem, p)",
							" function adjustViewBox(e)",
							"function calcViewBox(box)",
							"function setViewBox(svgOwner, box)",
							"ElementToXML = (e, predicate) =>",
							" (v, k) =>",
							" (v, k) =>",
							" (v, k) =>",
							"async readFile(filename)",
							"async writeFile(filename, data, overwrite = true)",
							"async exists(filename)",
							"async realpath(filename)",
							"async function LoadFile(file)",
							"async function SaveFile(filename, data, contentType)",
							"s =>",
							"() =>",
							"async function SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])",
							"predicate = element =>",
							"async function LoadSVG(filename)",
							"async function LoadImage(filename)",
							"() =>",
							" function RenderComponent(component)",
							"ModifyColors = fn => e =>",
							"FindLayer = name_or_id =>",
							"n =>",
							"l =>",
							"(id = '#geom') =>",
							"(props = {}) =>",
							"maxZIndex = () =>",
							"e =>",
							"z =>",
							"z =>",
							"() =>",
							"randomColor = () =>",
							"function DrawArc(start, end, angle)",
							"props =>",
							"p =>",
							"a =>",
							"m =>",
							"hex =>",
							"p =>",
							"p =>",
							"p =>",
							"({ x, y }) =>",
							"a =>",
							"({ x, y }, i) =>",
							" e =>",
							"(l, i) =>",
							"(p, i) =>",
							"(p, i) =>",
							"add = (level, item) =>",
							" function RecurseBinaryNode(node, parent = null, depth = 0)",
							"(nodes, i, level) =>",
							"fx = j =>",
							"(node, j) =>",
							" item =>",
							" function DrawNode(x, y, node)",
							" function DrawEdge(item, parent)",
							"function GetPaths(query, parent = project.svgElement)",
							" (a, e) =>",
							"function PathToPolylines(path, step = 0.01)",
							"p =>",
							"poly =>",
							"poly =>",
							" (p, d, set, stop) =>",
							"function PathToPolyline(path, step = 0.01)",
							" (p, d, set, stop) =>",
							"function PathsToPolylines(paths, step = 0.01)",
							"function OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)",
							"(a, p) =>",
							"function ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)",
							"add = (p, clip = false) =>",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function saveItemStates(itemList, get = item => Util.is.",
							"(item.",
							"))",
							"item =>",
							"function restoreItemStates( itemStates, /* prettier-ignore */ set = (item, value) => item.",
							"(value ? 'yes' : 'no') )",
							"function EagleMaps(project)",
							"transformPath = p =>",
							"e =>",
							"dom2eagle = node =>",
							"eagle2dom = elem =>",
							"path2dom = p =>",
							"(key, value) =>",
							"(key, value) =>",
							"function* PackageNames(doc = project.doc)",
							"e =>",
							"([e, b]) =>",
							"([e, w, h, m, v]) =>",
							"({ index, ...match }) =>",
							" ({ s, v, indexes }, match, i) =>",
							"([token, index]) =>",
							"([token, index]) =>",
							"function NextDocument(n = 1)",
							" (idx, i) =>",
							" (idx, i) =>",
							"async function LoadDocument(project, parentElem)",
							"err =>",
							"() =>",
							" ent =>",
							"() =>",
							" ent =>",
							"renamePackages()",
							"a =>",
							"value =>",
							"layer =>",
							"() =>",
							"layer =>",
							"() =>",
							"fn = function(v)",
							"() =>",
							".makeGroup = function({ transform, ...props } = {})",
							"id =>",
							"() =>",
							" function xx()",
							" () =>",
							"function (transform)",
							" (tag, attr, children = []) =>",
							"value =>",
							"async () =>",
							"Rect",
							"async function ChooseDocument(project, i)",
							"GenerateVoronoi = () =>",
							"Rect",
							"p =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ va, vb, ...edge }) =>",
							"v =>",
							"add = (arr, ...items) =>",
							"l =>",
							"t =>",
							"l =>",
							"t =>",
							"p =>",
							" (acc, { site, halfedges }) =>",
							"({ site }) =>",
							"function PackageChildren(element, layer)",
							"(c, i) =>",
							"([i, p]) =>",
							"([i, e]) =>",
							"function ElementChildren(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							"([name, element]) =>",
							"function ElementGeometries(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							" ent =>",
							"([name, children]) =>",
							"([i, e]) =>",
							"([name, lines]) =>",
							"pts =>",
							"([name, lines, polygons]) =>",
							"function NewPath(path)",
							"MakeFitAction = index =>",
							"async event =>",
							"function ZoomFactor(val = config.",
							")",
							"function ZoomLog(factor)",
							"function AdjustZoom(l = config.",
							")",
							"CreateGrblSocket = async (port = 'tnt1') =>",
							"function HandleMessage(msg)",
							" pointStr =>",
							"socketFn = () =>",
							".send = (...args) =>",
							"AuthorizationDialog = ({ onAuth, ...props }) =>",
							"onSubmit: () =>",
							"onInput: e =>",
							"onInput: e =>",
							"onClick: e =>",
							"arg =>",
							".onload = async () =>",
							"response =>",
							"e =>",
							" v =>",
							"TestArc: () =>",
							"() =>",
							"async (push, stop) =>",
							"() =>",
							"async (push, stop) =>",
							" target =>",
							" (key, modifiers = 0) =>",
							".focusSearch = state =>",
							"children: () =>",
							"geometries: () =>",
							"value =>",
							"() =>",
							"testComponent = props =>",
							" function File(obj, i)",
							"File",
							"File.prototype.toString = function()",
							"(a, b) =>",
							"(obj, i) =>",
							"(acc, file) =>",
							"i =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"updateIfChanged = (trkl, newValue, callback) =>",
							" (elem, i) =>",
							"changeInput = e =>",
							"p =>",
							" arg =>",
							"Consumer = props =>",
							"async function* ()",
							"log(type, time, msg)",
							"Logger = props =>",
							"async function* ()",
							"([type, d, t, m], i) =>",
							"Dumper = props =>",
							"value =>",
							"([k, v], i) =>",
							"Commander = ({ onCommand, ...props }) =>",
							"handler = e =>",
							"toggle = trkl =>",
							"Layer = ({ title, name, label, i, color, element, className, ...props }) =>",
							"setVisible = value =>",
							"e =>",
							" e =>",
							"l =>",
							"l =>",
							" (item, value) =>",
							" item =>",
							"l =>",
							"([l, state]) =>",
							"e =>",
							"onMouseMove: e =>",
							"onMouseUp: e =>",
							"DocumentList",
							"constructor()",
							"(push, stop) =>",
							"add(name, component)",
							"addEntry([name, component])",
							"remove(name)",
							"update()",
							"fn: e =>",
							"fn: () =>",
							"open =>",
							" props =>",
							" props =>",
							"async e =>",
							"i =>",
							"i =>",
							"({ coord }) =>",
							"side =>",
							"create: (project, props = {}) =>",
							"a =>",
							"e =>",
							"e =>",
							"name =>",
							"e =>",
							" function makeLayerName(name, side)",
							"fn: () =>",
							"onChange(event)",
							" props =>",
							" props =>",
							" props =>",
							"async (e, p, i) =>",
							"makeSortCompare: key =>",
							" function(a, b)",
							" function(a, b)",
							"onCommand: cmdStr =>",
							"handleChange: e =>",
							" event =>",
							"e =>",
							" function MoveEvent(event, prevEvent)",
							" function* WalkUp(e)",
							" e =>",
							" z =>",
							"p =>",
							"e =>",
							" e =>",
							"e =>",
							" v =>",
							" l =>",
							"e =>",
							" () =>",
							" (e, depth) =>",
							" classes =>",
							" e =>",
							" e =>",
							" (a, b) =>",
							" (a, b) =>",
							"Node",
							"e =>",
							" (p, d, set, stop) =>",
							"e =>",
							"e =>",
							" function TouchEvent(event)",
							"e =>",
							"(p, i) =>",
							"(a, b) =>",
							" size =>",
							"border =>",
							"r =>",
							" function mod(n, m)",
							"() =>",
							" (pos, last, first) =>",
							" function cancel()",
							".oncontextmenu = function(e)",
							".processEvents = async function eventLoop()",
							" event =>",
							"e =>",
							"onRuntimeInitialized: () =>",
							"print: txt =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAYAgAAUmVhZEpTT04oZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpClN0YXJ0UkVQTChwcmVmaXggPSBwYXRoLgooClswXSwgJy5qcycpLCBzdWZmaXggPSAnJykKICAuaGVscCA9ICgpID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CiAgKGxldmVsLCAuLi5hcmdzKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykKICBvbkNsb3NlKHdzKQogIG9uSHR0cChyZXEsIHJzcCkKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgaGFuZGxlQ29tbWFuZCh3cywgZGF0YSkKICAoKSA9PgogIChkYmcsIHNvY2spID0+CigpID0+CiAgb25GZChmZCwgcmQsIHdyKQogIGdldCBjb25uZWN0aW9ucygpCiAgZ2V0IHNvY2tsaXN0KCkKICBxdWl0KHdoeSkAAAAAAAAAANEVAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADRFQAAKCkgPT4KICByZXMgPT4KKCkgPT4KICByID0+CiAgciA9PgogIGVudHJpZXMoKQpHZXRQcm9qZWN0ID0gYXJnID0+CiAgcCA9PgogIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgogIHVzZVNsb3QgPSAoYXJyLCBpKSA9PgooKSA9PgogIHYgPT4KICB0cmtsR2V0U2V0ID0gKGdldCwgc2V0KSA9PiB2YWx1ZSA9PgpNb3VzZUV2ZW50cyA9IGggPT4KKCkgPT4KKHBhcmVudCwgZGVsZWdhdGUpID0+CiAgYXBwZW5kX3RvKGVsZW0sIHApCkRyYXdTVkcoLi4uYXJncykKICBhcHBlbmRfdG8oZWxlbSwgcCkKICBhZGp1c3RWaWV3Qm94KGUpCiAgY2FsY1ZpZXdCb3goYm94KQogIHNldFZpZXdCb3goc3ZnT3duZXIsIGJveCkKRWxlbWVudFRvWE1MID0gKGUsIHByZWRpY2F0ZSkgPT4KICAodiwgaykgPT4KICAodiwgaykgPT4KICAodiwgaykgPT4KICByZWFkRmlsZShmaWxlbmFtZSkKICB3cml0ZUZpbGUoZmlsZW5hbWUsIGRhdGEsIG92ZXJ3cml0ZSA9IHRydWUpCiAgZXhpc3RzKGZpbGVuYW1lKQogIHJlYWxwYXRoKGZpbGVuYW1lKQpMb2FkRmlsZShmaWxlKQpTYXZlRmlsZShmaWxlbmFtZSwgZGF0YSwgY29udGVudFR5cGUpCiAgcyA9PgooKSA9PgpTYXZlU1ZHKGZpbGVuYW1lLCBsYXllcnMgPSBbMSwgMTYsIDIwLCAyMSwgMjIsIDIzLCAyNSwgMjcsIDQ3LCA0OCwgNTFdKQogIHByZWRpY2F0ZSA9IGVsZW1lbnQgPT4KTG9hZFNWRyhmaWxlbmFtZSkKTG9hZEltYWdlKGZpbGVuYW1lKQooKSA9PgpSZW5kZXJDb21wb25lbnQoY29tcG9uZW50KQpNb2RpZnlDb2xvcnMgPSBmbiA9PiBlID0+CkZpbmRMYXllciA9IG5hbWVfb3JfaWQgPT4KICBuID0+CiAgbCA9PgooaWQgPSAnI2dlb20nKSA9PgoocHJvcHMgPSB7fSkgPT4KICBtYXhaSW5kZXggPSAoKSA9PgogIGUgPT4KICB6ID0+CiAgeiA9PgooKSA9PgogIHJhbmRvbUNvbG9yID0gKCkgPT4KRHJhd0FyYyhzdGFydCwgZW5kLCBhbmdsZSkKICBwcm9wcyA9PgogIHAgPT4KICBhID0+CiAgbSA9PgogIGhleCA9PgogIHAgPT4KICBwID0+CiAgcCA9PgooeyB4LCB5IH0pID0+CiAgYSA9PgooeyB4LCB5IH0sIGkpID0+CiAgZSA9PgoobCwgaSkgPT4KKHAsIGkpID0+CihwLCBpKSA9PgogIGFkZCA9IChsZXZlbCwgaXRlbSkgPT4KUmVjdXJzZUJpbmFyeU5vZGUobm9kZSwgcGFyZW50ID0gbnVsbCwgZGVwdGggPSAwKQoobm9kZXMsIGksIGxldmVsKSA9PgogIGZ4ID0gaiA9Pgoobm9kZSwgaikgPT4KICBpdGVtID0+CkRyYXdOb2RlKHgsIHksIG5vZGUpCkRyYXdFZGdlKGl0ZW0sIHBhcmVudCkKR2V0UGF0aHMocXVlcnksIHBhcmVudCA9IHByb2plY3Quc3ZnRWxlbWVudCkKICAoYSwgZSkgPT4KUGF0aFRvUG9seWxpbmVzKHBhdGgsIHN0ZXAgPSAwLjAxKQogIHAgPT4KICBwb2x5ID0+CiAgcG9seSA9PgogIChwLCBkLCBzZXQsIHN0b3ApID0+ClBhdGhUb1BvbHlsaW5lKHBhdGgsIHN0ZXAgPSAwLjAxKQogIChwLCBkLCBzZXQsIHN0b3ApID0+ClBhdGhzVG9Qb2x5bGluZXMocGF0aHMsIHN0ZXAgPSAwLjAxKQpPdXRzZXRQYXRoKHBhdGgsIG9mZnNldCwgbWl0ZXJMaW1pdCA9IDIsIGFyY1RvbGVyYW5jZSA9IDAuMDEpCiAgLnRvUG9seWxpbmVzID0gZnVuY3Rpb24oKQogIHAgPT4KKHsgWCwgWSB9KSA9PgpPdXRzZXRQYXRocyhwYXRocywgb2Zmc2V0LCBtaXRlckxpbWl0ID0gMiwgYXJjVG9sZXJhbmNlID0gMC4yNSkKKGEsIHApID0+CkNsaXBQYXRoKHBhdGgsIGNsaXAsIG1vZGUgPSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24pCiAgYWRkID0gKHAsIGNsaXAgPSBmYWxzZSkgPT4KICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+CiAgc2F2ZUl0ZW1TdGF0ZXMoaXRlbUxpc3QsIGdldCA9IGl0ZW0gPT4gVXRpbC5pcy4KKGl0ZW0uCikpCiAgaXRlbSA9PgogIHJlc3RvcmVJdGVtU3RhdGVzKCBpdGVtU3RhdGVzLCAvKnByZXR0aWVyLWlnbm9yZSAqLyBzZXQgPSAoaXRlbSwgdmFsdWUpID0+IGl0ZW0uCih2YWx1ZSA/ICd5ZXMnIDogJ25vJykgKQpFYWdsZU1hcHMocHJvamVjdCkKICB0cmFuc2Zvcm1QYXRoID0gcCA9PgogIGUgPT4KICBkb20yZWFnbGUgPSBub2RlID0+CiAgZWFnbGUyZG9tID0gZWxlbSA9PgogIHBhdGgyZG9tID0gcCA9Pgooa2V5LCB2YWx1ZSkgPT4KKGtleSwgdmFsdWUpID0+ClBhY2thZ2VOYW1lcyhkb2MgPSBwcm9qZWN0LmRvYykKICBlID0+CihbZSwgYl0pID0+CihbZSwgdywgaCwgbSwgdl0pID0+Cih7IGluZGV4LCAuLi5tYXRjaCB9KSA9PgogICh7IHMsIHYsIGluZGV4ZXMgfSwgbWF0Y2gsIGkpID0+CihbdG9rZW4sIGluZGV4XSkgPT4KKFt0b2tlbiwgaW5kZXhdKSA9PgpOZXh0RG9jdW1lbnQobiA9IDEpCiAgKGlkeCwgaSkgPT4KICAoaWR4LCBpKSA9PgpMb2FkRG9jdW1lbnQocHJvamVjdCwgcGFyZW50RWxlbSkKICBlcnIgPT4KKCkgPT4KICBlbnQgPT4KKCkgPT4KICBlbnQgPT4KICByZW5hbWVQYWNrYWdlcygpCiAgYSA9PgogIHZhbHVlID0+CiAgbGF5ZXIgPT4KKCkgPT4KICBsYXllciA9PgooKSA9PgogIGZuID0gZnVuY3Rpb24odikKKCkgPT4KICAubWFrZUdyb3VwID0gZnVuY3Rpb24oeyB0cmFuc2Zvcm0sIC4uLnByb3BzIH0gPSB7fSkKICBpZCA9PgooKSA9PgogIHh4KCkKICAoKSA9PgoodHJhbnNmb3JtKQogICh0YWcsIGF0dHIsIGNoaWxkcmVuID0gW10pID0+CiAgdmFsdWUgPT4KKCkgPT4KUmVjdApDaG9vc2VEb2N1bWVudChwcm9qZWN0LCBpKQpHZW5lcmF0ZVZvcm9ub2kgPSAoKSA9PgpSZWN0CiAgcCA9PgogIGUgPT4KKHsgbFNpdGUsIHJTaXRlLCAuLi5lZGdlIH0pID0+CiAgZSA9PgooeyBsU2l0ZSwgclNpdGUsIC4uLmVkZ2UgfSkgPT4KICBlID0+Cih7IHZhLCB2YiwgLi4uZWRnZSB9KSA9PgogIHYgPT4KICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBsID0+CiAgdCA9PgogIGwgPT4KICB0ID0+CiAgcCA9PgogIChhY2MsIHsgc2l0ZSwgaGFsZmVkZ2VzIH0pID0+Cih7IHNpdGUgfSkgPT4KUGFja2FnZUNoaWxkcmVuKGVsZW1lbnQsIGxheWVyKQooYywgaSkgPT4KKFtpLCBwXSkgPT4KKFtpLCBlXSkgPT4KRWxlbWVudENoaWxkcmVuKGxheWVyID0gJ3RQbGFjZScsIHJmbiA9IGVudCA9PiAKKGVudCkpCihbbmFtZSwgZWxlbWVudF0pID0+CkVsZW1lbnRHZW9tZXRyaWVzKGxheWVyID0gJ3RQbGFjZScsIHJmbiA9IGVudCA9PiAKKGVudCkpCiAgZW50ID0+CihbbmFtZSwgY2hpbGRyZW5dKSA9PgooW2ksIGVdKSA9PgooW25hbWUsIGxpbmVzXSkgPT4KICBwdHMgPT4KKFtuYW1lLCBsaW5lcywgcG9seWdvbnNdKSA9PgpOZXdQYXRoKHBhdGgpCk1ha2VGaXRBY3Rpb24gPSBpbmRleCA9PgogIGV2ZW50ID0+Clpvb21GYWN0b3IodmFsID0gY29uZmlnLgopClpvb21Mb2coZmFjdG9yKQpBZGp1c3Rab29tKGwgPSBjb25maWcuCikKQ3JlYXRlR3JibFNvY2tldCA9IChwb3J0ID0gJ3RudDEnKSA9PgpIYW5kbGVNZXNzYWdlKG1zZykKICBwb2ludFN0ciA9PgogIHNvY2tldEZuID0gKCkgPT4KICAuc2VuZCA9ICguLi5hcmdzKSA9PgpBdXRob3JpemF0aW9uRGlhbG9nID0gKHsgb25BdXRoLCAuLi5wcm9wcyB9KSA9PgogIG9uU3VibWl0OiAoKSA9PgogIG9uSW5wdXQ6IGUgPT4KICBvbklucHV0OiBlID0+CiAgb25DbGljazogZSA9PgogIGFyZyA9PgogIC5vbmxvYWQgPSAoKSA9PgogIHJlc3BvbnNlID0+CiAgZSA9PgogIHYgPT4KVGVzdEFyYzogKCkgPT4KKCkgPT4KKHB1c2gsIHN0b3ApID0+CigpID0+CihwdXNoLCBzdG9wKSA9PgogIHRhcmdldCA9PgogIChrZXksIG1vZGlmaWVycyA9IDApID0+CiAgLmZvY3VzU2VhcmNoID0gc3RhdGUgPT4KICBjaGlsZHJlbjogKCkgPT4KICBnZW9tZXRyaWVzOiAoKSA9PgogIHZhbHVlID0+CigpID0+CiAgdGVzdENvbXBvbmVudCA9IHByb3BzID0+CkZpbGUob2JqLCBpKQpGaWxlCkZpbGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKQooYSwgYikgPT4KKG9iaiwgaSkgPT4KKGFjYywgZmlsZSkgPT4KICBpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CiAgdXBkYXRlSWZDaGFuZ2VkID0gKHRya2wsIG5ld1ZhbHVlLCBjYWxsYmFjaykgPT4KICAoZWxlbSwgaSkgPT4KICBjaGFuZ2VJbnB1dCA9IGUgPT4KICBwID0+CiAgYXJnID0+CkNvbnN1bWVyID0gcHJvcHMgPT4KKCkKICBsb2codHlwZSwgdGltZSwgbXNnKQpMb2dnZXIgPSBwcm9wcyA9PgooKQooW3R5cGUsIGQsIHQsIG1dLCBpKSA9PgpEdW1wZXIgPSBwcm9wcyA9PgogIHZhbHVlID0+Cihbaywgdl0sIGkpID0+CkNvbW1hbmRlciA9ICh7IG9uQ29tbWFuZCwgLi4ucHJvcHMgfSkgPT4KICBoYW5kbGVyID0gZSA9PgogIHRvZ2dsZSA9IHRya2wgPT4KTGF5ZXIgPSAoeyB0aXRsZSwgbmFtZSwgbGFiZWwsIGksIGNvbG9yLCBlbGVtZW50LCBjbGFzc05hbWUsIC4uLnByb3BzIH0pID0+CiAgc2V0VmlzaWJsZSA9IHZhbHVlID0+CiAgZSA9PgogIGUgPT4KICBsID0+CiAgbCA9PgogIChpdGVtLCB2YWx1ZSkgPT4KICBpdGVtID0+CiAgbCA9PgooW2wsIHN0YXRlXSkgPT4KICBlID0+CiAgb25Nb3VzZU1vdmU6IGUgPT4KICBvbk1vdXNlVXA6IGUgPT4KRG9jdW1lbnRMaXN0CiAgY29uc3RydWN0b3IoKQoocHVzaCwgc3RvcCkgPT4KICBhZGQobmFtZSwgY29tcG9uZW50KQogIGFkZEVudHJ5KFtuYW1lLCBjb21wb25lbnRdKQogIHJlbW92ZShuYW1lKQogIHVwZGF0ZSgpCiAgZm46IGUgPT4KICBmbjogKCkgPT4KICBvcGVuID0+CiAgcHJvcHMgPT4KICBwcm9wcyA9PgogIGUgPT4KICBpID0+CiAgaSA9PgooeyBjb29yZCB9KSA9PgogIHNpZGUgPT4KICBjcmVhdGU6IChwcm9qZWN0LCBwcm9wcyA9IHt9KSA9PgogIGEgPT4KICBlID0+CiAgZSA9PgogIG5hbWUgPT4KICBlID0+CiAgbWFrZUxheWVyTmFtZShuYW1lLCBzaWRlKQogIGZuOiAoKSA9PgogIG9uQ2hhbmdlKGV2ZW50KQogIHByb3BzID0+CiAgcHJvcHMgPT4KICBwcm9wcyA9PgooZSwgcCwgaSkgPT4KICBtYWtlU29ydENvbXBhcmU6IGtleSA9PgogIGZ1bmN0aW9uKGEsIGIpCiAgZnVuY3Rpb24oYSwgYikKICBvbkNvbW1hbmQ6IGNtZFN0ciA9PgogIGhhbmRsZUNoYW5nZTogZSA9PgogIGV2ZW50ID0+CiAgZSA9PgpNb3ZlRXZlbnQoZXZlbnQsIHByZXZFdmVudCkKV2Fsa1VwKGUpCiAgZSA9PgogIHogPT4KICBwID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgdiA9PgogIGwgPT4KICBlID0+CiAgKCkgPT4KICAoZSwgZGVwdGgpID0+CiAgY2xhc3NlcyA9PgogIGUgPT4KICBlID0+CiAgKGEsIGIpID0+CiAgKGEsIGIpID0+Ck5vZGUKICBlID0+CiAgKHAsIGQsIHNldCwgc3RvcCkgPT4KICBlID0+CiAgZSA9PgpUb3VjaEV2ZW50KGV2ZW50KQogIGUgPT4KKHAsIGkpID0+CihhLCBiKSA9PgogIHNpemUgPT4KICBib3JkZXIgPT4KICByID0+CiAgbW9kKG4sIG0pCigpID0+CiAgKHBvcywgbGFzdCwgZmlyc3QpID0+CiAgY2FuY2VsKCkKICAub25jb250ZXh0bWVudSA9IGZ1bmN0aW9uKGUpCiAgLnByb2Nlc3NFdmVudHMgPSBmdW5jdGlvbiBldmVudExvb3AoKQogIGV2ZW50ID0+CiAgZSA9PgogIG9uUnVudGltZUluaXRpYWxpemVkOiAoKSA9PgogIHByaW50OiB0eHQgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.html",
						"symkeys":
						[
							[
								184,
								188
							],
							[
								257,
								263
							]
						],
						"symlist":
						[
							"body",
							"canvas"
						]
					},
					"AQAAAAAAAAAAAAAADwAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAICBib2R5CiAgY2FudmFzAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4797,
								4812
							],
							[
								4984,
								5015
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"AQAAAAAAAAAAAAAA8gAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					13,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4797,
								4812
							],
							[
								4984,
								5015
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"AQAAAAAAAAAAAAAA8gAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4797,
								4812
							],
							[
								4984,
								5015
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"AQAAAAAAAAAAAAAA8gAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					18,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4826,
								4841
							],
							[
								5013,
								5044
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4826,
								4841
							],
							[
								5013,
								5044
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4826,
								4841
							],
							[
								5013,
								5044
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"AQAAAAAAAAAAAAAA8gAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4826,
								4841
							],
							[
								5013,
								5044
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					25,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4826,
								4841
							],
							[
								5013,
								5044
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"AwAAAAAAAAAAAAAA8gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPIAAAAodiwgaSkgPT4KTG9vcCgpCiAgbG9nID0gKHQsIG5hbWUpID0+CkZpcmUoKQooYSwgcCkgPT4KUmVkcmF3KCkKQ3JlYXRlUGFsZXR0ZSgpCkNyZWF0ZVBhbGV0dGVIU0woKQogIHYgPT4KICAoKSA9PgogIHYgPT4KICBiID0+ClJhbmRvbUJ5dGUoKQpNb2R1bG8obiwgbSkKTW91c2VIYW5kbGVyKGUpCk1vdXNlSXRlcmF0b3IoKQpSZXNpemVIYW5kbGVyKGUpCkluaXQoKQogIChkdXJhdGlvbiwgbmFtZSwgYXJncywgcmV0KSA9PgAAAAAAAAAA8gAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4826,
								4841
							],
							[
								5013,
								5044
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"AQAAAAAAAAAAAAAA8gAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4826,
								4841
							],
							[
								5072,
								5103
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					30,
					5,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4826,
								4841
							],
							[
								5072,
								5103
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"CgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					31,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								802,
								811
							],
							[
								1168,
								1189
							],
							[
								1228,
								1246
							],
							[
								1528,
								1543
							],
							[
								1872,
								1881
							],
							[
								1952,
								1975
							],
							[
								2368,
								2392
							],
							[
								2757,
								2784
							],
							[
								3169,
								3179
							],
							[
								3189,
								3200
							],
							[
								3218,
								3228
							],
							[
								3259,
								3263
							],
							[
								3749,
								3770
							],
							[
								3869,
								3890
							],
							[
								3948,
								3972
							],
							[
								4397,
								4428
							],
							[
								4680,
								4705
							],
							[
								4826,
								4841
							],
							[
								5072,
								5103
							]
						],
						"symlist":
						[
							"(v, i) =>",
							"async function Loop()",
							"log = (t, name) =>",
							"function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							" v =>",
							" () =>",
							" v =>",
							"b =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function MouseHandler(e)",
							"async function* MouseIterator()",
							"function ResizeHandler(e)",
							"function Init()",
							" (duration, name, args, ret) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAPIAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/static/css/list.css",
						"symkeys":
						[
							[
								127,
								132
							],
							[
								138,
								151
							],
							[
								207,
								212
							],
							[
								304,
								309
							],
							[
								384,
								393
							],
							[
								444,
								451
							],
							[
								478,
								495
							],
							[
								524,
								526
							],
							[
								553,
								555
							],
							[
								619,
								631
							],
							[
								669,
								675
							],
							[
								723,
								735
							]
						],
						"symlist":
						[
							"table",
							".preformatted",
							".item",
							".name",
							".name > a",
							"td.size",
							"td.mtime, td.time",
							"td",
							"th",
							"tr.head > th",
							"th > a",
							"th > a:hover"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADyAAAAKHYsIGkpID0+Ckxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgpGaXJlKCkKKGEsIHApID0+ClJlZHJhdygpCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgYiA9PgpSYW5kb21CeXRlKCkKTW9kdWxvKG4sIG0pCk1vdXNlSGFuZGxlcihlKQpNb3VzZUl0ZXJhdG9yKCkKUmVzaXplSGFuZGxlcihlKQpJbml0KCkKICAoZHVyYXRpb24sIG5hbWUsIGFyZ3MsIHJldCkgPT4AAAAAAAAAAIIAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/static/css/grid.css",
						"symkeys":
						[
							[
								0,
								10
							],
							[
								49,
								59
							],
							[
								102,
								112
							],
							[
								160,
								169
							],
							[
								250,
								259
							],
							[
								309,
								354
							],
							[
								433,
								448
							],
							[
								504,
								517
							],
							[
								567,
								580
							],
							[
								630,
								641
							],
							[
								663,
								674
							],
							[
								696,
								707
							],
							[
								729,
								740
							],
							[
								762,
								773
							],
							[
								795,
								807
							],
							[
								830,
								842
							],
							[
								866,
								882
							],
							[
								940,
								955
							],
							[
								1009,
								1024
							]
						],
						"symlist":
						[
							".grid-2col",
							".grid-3col",
							".grid-4col",
							".grid-col",
							".grid-col",
							".grid-col, .grid-2col, .grid-3col, .grid-4col",
							".grid-gap-075em",
							".grid-gap-1em",
							".grid-gap-2em",
							".grid-gap-1",
							".grid-gap-2",
							".grid-gap-3",
							".grid-gap-5",
							".grid-gap-8",
							".grid-gap-10",
							".grid-gap-20",
							".grid-gap-05vmin",
							".grid-gap-1vmin",
							".grid-gap-2vmin"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACCAAAAICB0YWJsZQogIC5wcmVmb3JtYXR0ZWQKICAuaXRlbQogIC5uYW1lCiAgLm5hbWUgPiBhCiAgdGQuc2l6ZQogIHRkLm10aW1lLCB0ZC50aW1lCiAgdGQKICB0aAogIHRyLmhlYWQgPiB0aAogIHRoID4gYQogIHRoID4gYTpob3ZlcgAAAAAAAAAAOwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					3,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAAA7AQAAICAuZ3JpZC0yY29sCiAgLmdyaWQtM2NvbAogIC5ncmlkLTRjb2wKICAuZ3JpZC1jb2wKICAuZ3JpZC1jb2wKICAuZ3JpZC1jb2wsIC5ncmlkLTJjb2wsIC5ncmlkLTNjb2wsIC5ncmlkLTRjb2wKICAuZ3JpZC1nYXAtMDc1ZW0KICAuZ3JpZC1nYXAtMWVtCiAgLmdyaWQtZ2FwLTJlbQogIC5ncmlkLWdhcC0xCiAgLmdyaWQtZ2FwLTIKICAuZ3JpZC1nYXAtMwogIC5ncmlkLWdhcC01CiAgLmdyaWQtZ2FwLTgKICAuZ3JpZC1nYXAtMTAKICAuZ3JpZC1nYXAtMjAKICAuZ3JpZC1nYXAtMDV2bWluCiAgLmdyaWQtZ2FwLTF2bWluCiAgLmdyaWQtZ2FwLTJ2bWluAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/static/css/grid.css",
						"symkeys":
						[
							[
								0,
								10
							],
							[
								49,
								59
							],
							[
								102,
								112
							],
							[
								160,
								169
							],
							[
								250,
								259
							],
							[
								309,
								354
							],
							[
								433,
								448
							],
							[
								504,
								517
							],
							[
								567,
								580
							],
							[
								630,
								641
							],
							[
								663,
								674
							],
							[
								696,
								707
							],
							[
								729,
								740
							],
							[
								762,
								773
							],
							[
								795,
								807
							],
							[
								830,
								842
							],
							[
								866,
								882
							],
							[
								940,
								955
							],
							[
								1009,
								1024
							]
						],
						"symlist":
						[
							".grid-2col",
							".grid-3col",
							".grid-4col",
							".grid-col",
							".grid-col",
							".grid-col, .grid-2col, .grid-3col, .grid-4col",
							".grid-gap-075em",
							".grid-gap-1em",
							".grid-gap-2em",
							".grid-gap-1",
							".grid-gap-2",
							".grid-gap-3",
							".grid-gap-5",
							".grid-gap-8",
							".grid-gap-10",
							".grid-gap-20",
							".grid-gap-05vmin",
							".grid-gap-1vmin",
							".grid-gap-2vmin"
						]
					},
					"AQAAAAAAAAAAAAAAOwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA7AQAAICAuZ3JpZC0yY29sCiAgLmdyaWQtM2NvbAogIC5ncmlkLTRjb2wKICAuZ3JpZC1jb2wKICAuZ3JpZC1jb2wKICAuZ3JpZC1jb2wsIC5ncmlkLTJjb2wsIC5ncmlkLTNjb2wsIC5ncmlkLTRjb2wKICAuZ3JpZC1nYXAtMDc1ZW0KICAuZ3JpZC1nYXAtMWVtCiAgLmdyaWQtZ2FwLTJlbQogIC5ncmlkLWdhcC0xCiAgLmdyaWQtZ2FwLTIKICAuZ3JpZC1nYXAtMwogIC5ncmlkLWdhcC01CiAgLmdyaWQtZ2FwLTgKICAuZ3JpZC1nYXAtMTAKICAuZ3JpZC1nYXAtMjAKICAuZ3JpZC1nYXAtMDV2bWluCiAgLmdyaWQtZ2FwLTF2bWluCiAgLmdyaWQtZ2FwLTJ2bWluAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/list.html",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/static/css/list.css",
						"symkeys":
						[
							[
								127,
								132
							],
							[
								138,
								151
							],
							[
								207,
								212
							],
							[
								304,
								309
							],
							[
								384,
								393
							],
							[
								444,
								451
							],
							[
								478,
								495
							],
							[
								524,
								526
							],
							[
								553,
								555
							],
							[
								619,
								631
							],
							[
								669,
								675
							],
							[
								723,
								735
							]
						],
						"symlist":
						[
							"table",
							".preformatted",
							".item",
							".name",
							".name > a",
							"td.size",
							"td.mtime, td.time",
							"td",
							"th",
							"tr.head > th",
							"th > a",
							"th > a:hover"
						]
					},
					"AQAAAAAAAAAAAAAAggAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					8,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/static/css/list.css",
						"symkeys":
						[
							[
								127,
								132
							],
							[
								138,
								151
							],
							[
								207,
								212
							],
							[
								304,
								309
							],
							[
								384,
								393
							],
							[
								444,
								451
							],
							[
								478,
								495
							],
							[
								524,
								526
							],
							[
								553,
								555
							],
							[
								619,
								631
							],
							[
								669,
								675
							],
							[
								723,
								735
							]
						],
						"symlist":
						[
							"table",
							".preformatted",
							".item",
							".name",
							".name > a",
							"td.size",
							"td.mtime, td.time",
							"td",
							"th",
							"tr.head > th",
							"th > a",
							"th > a:hover"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACCAAAAICB0YWJsZQogIC5wcmVmb3JtYXR0ZWQKICAuaXRlbQogIC5uYW1lCiAgLm5hbWUgPiBhCiAgdGQuc2l6ZQogIHRkLm10aW1lLCB0ZC50aW1lCiAgdGQKICB0aAogIHRyLmhlYWQgPiB0aAogIHRoID4gYQogIHRoID4gYTpob3ZlcgAAAAAAAAAAggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIIAAAAgIHRhYmxlCiAgLnByZWZvcm1hdHRlZAogIC5pdGVtCiAgLm5hbWUKICAubmFtZSA+IGEKICB0ZC5zaXplCiAgdGQubXRpbWUsIHRkLnRpbWUKICB0ZAogIHRoCiAgdHIuaGVhZCA+IHRoCiAgdGggPiBhCiAgdGggPiBhOmhvdmVyAAAAAAAAAACCAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/list.html",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACCAAAAICB0YWJsZQogIC5wcmVmb3JtYXR0ZWQKICAuaXRlbQogIC5uYW1lCiAgLm5hbWUgPiBhCiAgdGQuc2l6ZQogIHRkLm10aW1lLCB0ZC50aW1lCiAgdGQKICB0aAogIHRyLmhlYWQgPiB0aAogIHRoID4gYQogIHRoID4gYTpob3ZlcgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/main.js",
						"symkeys":
						[
							[
								8625,
								8630
							],
							[
								8812,
								8818
							],
							[
								8876,
								8881
							],
							[
								8934,
								8938
							],
							[
								9012,
								9016
							],
							[
								9038,
								9047
							],
							[
								9706,
								9725
							],
							[
								9846,
								9850
							],
							[
								10230,
								10254
							],
							[
								10295,
								10316
							],
							[
								10318,
								10323
							],
							[
								10331,
								10336
							],
							[
								10358,
								10393
							],
							[
								10507,
								10525
							],
							[
								10607,
								10612
							],
							[
								10804,
								10825
							],
							[
								10958,
								10976
							],
							[
								11655,
								11680
							],
							[
								11726,
								11744
							],
							[
								12720,
								12747
							],
							[
								13108,
								13133
							],
							[
								13492,
								13526
							],
							[
								14042,
								14074
							],
							[
								14249,
								14259
							],
							[
								14392,
								14402
							],
							[
								14525,
								14535
							],
							[
								14706,
								14730
							],
							[
								14789,
								14838
							],
							[
								15079,
								15101
							],
							[
								15108,
								15132
							],
							[
								15140,
								15169
							],
							[
								15754,
								15806
							],
							[
								16259,
								16263
							],
							[
								16290,
								16295
							],
							[
								16730,
								16816
							],
							[
								17014,
								17036
							],
							[
								17549,
								17581
							],
							[
								17909,
								17943
							],
							[
								18058,
								18063
							],
							[
								18088,
								18124
							],
							[
								18337,
								18362
							],
							[
								18553,
								18578
							],
							[
								18633,
								18637
							],
							[
								18692,
								18696
							],
							[
								19143,
								19160
							],
							[
								19354,
								19369
							],
							[
								19492,
								19509
							],
							[
								19561,
								19565
							],
							[
								19610,
								19614
							],
							[
								19645,
								19649
							],
							[
								19692,
								19697
							],
							[
								19784,
								19803
							],
							[
								20018,
								20053
							],
							[
								20091,
								20099
							],
							[
								20168,
								20172
							],
							[
								20735,
								20739
							],
							[
								20798,
								20802
							],
							[
								21388,
								21394
							],
							[
								21569,
								21573
							],
							[
								21594,
								21598
							],
							[
								21633,
								21637
							],
							[
								21902,
								21915
							],
							[
								22043,
								22047
							],
							[
								22248,
								22264
							],
							[
								22530,
								22535
							],
							[
								22648,
								22657
							],
							[
								22729,
								22738
							],
							[
								22815,
								22824
							],
							[
								23464,
								23486
							],
							[
								23663,
								23723
							],
							[
								23972,
								23992
							],
							[
								24003,
								24012
							],
							[
								24067,
								24079
							],
							[
								24125,
								24136
							],
							[
								24225,
								24256
							],
							[
								24578,
								24611
							],
							[
								25690,
								25743
							],
							[
								25794,
								25807
							],
							[
								25889,
								25932
							],
							[
								26011,
								26015
							],
							[
								26144,
								26151
							],
							[
								26178,
								26185
							],
							[
								26263,
								26284
							],
							[
								26580,
								26622
							],
							[
								26745,
								26766
							],
							[
								27026,
								27071
							],
							[
								27264,
								27334
							],
							[
								27783,
								27808
							],
							[
								27831,
								27835
							],
							[
								27855,
								27868
							],
							[
								27984,
								28056
							],
							[
								28365,
								28374
							],
							[
								28806,
								28871
							],
							[
								28958,
								28984
							],
							[
								29230,
								29255
							],
							[
								29278,
								29282
							],
							[
								29302,
								29315
							],
							[
								29369,
								29425
							],
							[
								29427,
								29433
							],
							[
								29442,
								29444
							],
							[
								29469,
								29476
							],
							[
								29500,
								29594
							],
							[
								29601,
								29625
							],
							[
								29688,
								29715
							],
							[
								29724,
								29744
							],
							[
								29879,
								29883
							],
							[
								30070,
								30089
							],
							[
								30173,
								30192
							],
							[
								30289,
								30304
							],
							[
								31198,
								31213
							],
							[
								31313,
								31328
							],
							[
								32009,
								32050
							],
							[
								32255,
								32259
							],
							[
								32289,
								32300
							],
							[
								32383,
								32403
							],
							[
								32666,
								32690
							],
							[
								32748,
								32788
							],
							[
								33160,
								33179
							],
							[
								33230,
								33249
							],
							[
								34111,
								34139
							],
							[
								34358,
								34370
							],
							[
								34407,
								34419
							],
							[
								34930,
								34978
							],
							[
								35203,
								35209
							],
							[
								35359,
								35364
							],
							[
								35390,
								35397
							],
							[
								35460,
								35465
							],
							[
								35497,
								35504
							],
							[
								36140,
								36156
							],
							[
								36279,
								36283
							],
							[
								36791,
								36799
							],
							[
								37242,
								37250
							],
							[
								37303,
								37308
							],
							[
								37349,
								37357
							],
							[
								37497,
								37502
							],
							[
								37589,
								37605
							],
							[
								39281,
								39286
							],
							[
								39919,
								39970
							],
							[
								40394,
								40399
							],
							[
								40418,
								40423
							],
							[
								40731,
								40748
							],
							[
								40924,
								40930
							],
							[
								41078,
								41098
							],
							[
								41175,
								41205
							],
							[
								41381,
								41389
							],
							[
								41493,
								41504
							],
							[
								41620,
								41624
							],
							[
								42361,
								42402
							],
							[
								43025,
								43048
							],
							[
								43637,
								43641
							],
							[
								43785,
								43789
							],
							[
								44301,
								44305
							],
							[
								44320,
								44350
							],
							[
								44403,
								44407
							],
							[
								44426,
								44456
							],
							[
								44515,
								44519
							],
							[
								44543,
								44567
							],
							[
								44632,
								44636
							],
							[
								44676,
								44700
							],
							[
								44817,
								44821
							],
							[
								44860,
								44864
							],
							[
								44939,
								44943
							],
							[
								44982,
								44986
							],
							[
								45084,
								45088
							],
							[
								45446,
								45481
							],
							[
								45592,
								45605
							],
							[
								46046,
								46086
							],
							[
								46137,
								46146
							],
							[
								46167,
								46178
							],
							[
								46270,
								46281
							],
							[
								46327,
								46383
							],
							[
								46390,
								46396
							],
							[
								46478,
								46498
							],
							[
								46545,
								46603
							],
							[
								46610,
								46616
							],
							[
								46659,
								46666
							],
							[
								46683,
								46704
							],
							[
								46766,
								46777
							],
							[
								47007,
								47025
							],
							[
								47065,
								47071
							],
							[
								47104,
								47132
							],
							[
								47170,
								47192
							],
							[
								47277,
								47301
							],
							[
								47302,
								47316
							],
							[
								48438,
								48471
							],
							[
								48480,
								48481
							],
							[
								48533,
								48557
							],
							[
								48598,
								48629
							],
							[
								48638,
								48639
							],
							[
								48883,
								48926
							],
							[
								49245,
								49272
							],
							[
								49566,
								49585
							],
							[
								49798,
								49814
							],
							[
								50138,
								50158
							],
							[
								51053,
								51100
							],
							[
								51483,
								51498
							],
							[
								51715,
								51728
							],
							[
								52005,
								52018
							],
							[
								52224,
								52237
							],
							[
								52461,
								52467
							],
							[
								52517,
								52538
							],
							[
								56273,
								56284
							],
							[
								57120,
								57124
							],
							[
								57573,
								57578
							],
							[
								57732,
								57746
							],
							[
								57775,
								57780
							],
							[
								57908,
								57929
							],
							[
								57987,
								57992
							],
							[
								58100,
								58121
							],
							[
								58346,
								58359
							],
							[
								58360,
								58387
							],
							[
								58528,
								58551
							],
							[
								58833,
								58848
							],
							[
								58873,
								58890
							],
							[
								58957,
								58965
							],
							[
								59038,
								59043
							],
							[
								59149,
								59173
							],
							[
								59820,
								59847
							],
							[
								59943,
								59947
							],
							[
								60312,
								60348
							],
							[
								60453,
								60462
							],
							[
								60497,
								60508
							],
							[
								60569,
								60583
							],
							[
								61168,
								61172
							],
							[
								61857,
								61865
							],
							[
								61981,
								61989
							],
							[
								62109,
								62117
							],
							[
								62232,
								62240
							],
							[
								62297,
								62305
							],
							[
								62777,
								62785
							],
							[
								62970,
								63017
							],
							[
								63163,
								63176
							],
							[
								63339,
								63357
							],
							[
								63525,
								63529
							],
							[
								63601,
								63608
							],
							[
								63856,
								63875
							],
							[
								63907,
								63925
							],
							[
								64451,
								64471
							],
							[
								64796,
								64813
							],
							[
								65021,
								65039
							],
							[
								65316,
								65339
							],
							[
								65790,
								65807
							],
							[
								65899,
								65907
							],
							[
								66126,
								66140
							],
							[
								66323,
								66363
							],
							[
								66428,
								66442
							],
							[
								67017,
								67033
							],
							[
								67071,
								67146
							],
							[
								67397,
								67418
							],
							[
								67527,
								67531
							],
							[
								68010,
								68024
							],
							[
								68328,
								68332
							],
							[
								68404,
								68408
							],
							[
								68690,
								68707
							],
							[
								68875,
								68883
							],
							[
								69081,
								69085
							],
							[
								69181,
								69196
							],
							[
								69442,
								69446
							],
							[
								69653,
								69670
							],
							[
								69762,
								69777
							],
							[
								70575,
								70587
							],
							[
								70594,
								70607
							],
							[
								70645,
								70660
							],
							[
								70764,
								70784
							],
							[
								70964,
								70991
							],
							[
								71045,
								71057
							],
							[
								71175,
								71183
							],
							[
								71632,
								71640
							],
							[
								72462,
								72471
							],
							[
								72706,
								72713
							],
							[
								72812,
								72832
							],
							[
								73019,
								73039
							],
							[
								73405,
								73415
							],
							[
								74218,
								74222
							],
							[
								74318,
								74322
							],
							[
								74357,
								74371
							],
							[
								74628,
								74635
							],
							[
								77025,
								77057
							],
							[
								77566,
								77570
							],
							[
								77835,
								77839
							],
							[
								77907,
								77911
							],
							[
								77995,
								78002
							],
							[
								78081,
								78085
							],
							[
								79159,
								79205
							],
							[
								79672,
								79681
							],
							[
								80753,
								80768
							],
							[
								80947,
								80961
							],
							[
								81090,
								81104
							],
							[
								81253,
								81267
							],
							[
								82255,
								82273
							],
							[
								82471,
								82494
							],
							[
								82536,
								82551
							],
							[
								82907,
								82922
							],
							[
								83335,
								83355
							],
							[
								83837,
								83855
							],
							[
								84571,
								84580
							],
							[
								84623,
								84627
							],
							[
								84839,
								84877
							],
							[
								85052,
								85075
							],
							[
								85219,
								85224
							],
							[
								85263,
								85273
							],
							[
								85437,
								85441
							],
							[
								85588,
								85592
							],
							[
								85631,
								85636
							],
							[
								86041,
								86045
							],
							[
								86084,
								86098
							],
							[
								86102,
								86116
							],
							[
								86123,
								86127
							],
							[
								86148,
								86163
							],
							[
								86219,
								86244
							],
							[
								86376,
								86387
							],
							[
								86437,
								86442
							],
							[
								86502,
								86507
							],
							[
								86962,
								86972
							],
							[
								87086,
								87103
							],
							[
								87116,
								87120
							],
							[
								87310,
								87314
							],
							[
								87482,
								87503
							],
							[
								88649,
								88653
							],
							[
								88759,
								88763
							],
							[
								89057,
								89085
							],
							[
								89536,
								89540
							],
							[
								89996,
								90005
							],
							[
								90137,
								90146
							],
							[
								90250,
								90258
							],
							[
								90764,
								90773
							],
							[
								90922,
								90926
							],
							[
								90991,
								91017
							],
							[
								91662,
								91667
							],
							[
								91974,
								92005
							],
							[
								93042,
								93063
							],
							[
								93268,
								93296
							],
							[
								93663,
								93706
							],
							[
								95036,
								95045
							],
							[
								95925,
								95929
							],
							[
								96669,
								96696
							],
							[
								96819,
								96832
							]
						],
						"symlist":
						[
							"() =>",
							"res =>",
							"() =>",
							"r =>",
							"r =>",
							"entries()",
							"GetProject = arg =>",
							"p =>",
							"add = (arr, ...items) =>",
							"useSlot = (arr, i) =>",
							"() =>",
							" v =>",
							"trklGetSet = (get, set) => value =>",
							"MouseEvents = h =>",
							"() =>",
							"(parent, delegate) =>",
							"append_to(elem, p)",
							"function DrawSVG(...args)",
							"append_to(elem, p)",
							" function adjustViewBox(e)",
							"function calcViewBox(box)",
							"function setViewBox(svgOwner, box)",
							"ElementToXML = (e, predicate) =>",
							" (v, k) =>",
							" (v, k) =>",
							" (v, k) =>",
							"async readFile(filename)",
							"async writeFile(filename, data, overwrite = true)",
							"async exists(filename)",
							"async realpath(filename)",
							"async function LoadFile(file)",
							"async function SaveFile(filename, data, contentType)",
							"s =>",
							"() =>",
							"async function SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])",
							"predicate = element =>",
							"async function LoadSVG(filename)",
							"async function LoadImage(filename)",
							"() =>",
							" function RenderComponent(component)",
							"ModifyColors = fn => e =>",
							"FindLayer = name_or_id =>",
							"n =>",
							"l =>",
							"(id = '#geom') =>",
							"(props = {}) =>",
							"maxZIndex = () =>",
							"e =>",
							"z =>",
							"z =>",
							"() =>",
							"randomColor = () =>",
							"function DrawArc(start, end, angle)",
							"props =>",
							"p =>",
							"a =>",
							"m =>",
							"hex =>",
							"p =>",
							"p =>",
							"p =>",
							"({ x, y }) =>",
							"a =>",
							"({ x, y }, i) =>",
							" e =>",
							"(l, i) =>",
							"(p, i) =>",
							"(p, i) =>",
							"add = (level, item) =>",
							" function RecurseBinaryNode(node, parent = null, depth = 0)",
							"(nodes, i, level) =>",
							"fx = j =>",
							"(node, j) =>",
							" item =>",
							" function DrawNode(x, y, node)",
							" function DrawEdge(item, parent)",
							"function GetPaths(query, parent = project.svgElement)",
							" (a, e) =>",
							"function PathToPolylines(path, step = 0.01)",
							"p =>",
							"poly =>",
							"poly =>",
							" (p, d, set, stop) =>",
							"function PathToPolyline(path, step = 0.01)",
							" (p, d, set, stop) =>",
							"function PathsToPolylines(paths, step = 0.01)",
							"function OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)",
							"(a, p) =>",
							"function ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)",
							"add = (p, clip = false) =>",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function saveItemStates(itemList, get = item => Util.is.",
							"(item.",
							"))",
							"item =>",
							"function restoreItemStates( itemStates, /* prettier-ignore */ set = (item, value) => item.",
							"(value ? 'yes' : 'no') )",
							"function EagleMaps(project)",
							"transformPath = p =>",
							"e =>",
							"dom2eagle = node =>",
							"eagle2dom = elem =>",
							"path2dom = p =>",
							"(key, value) =>",
							"(key, value) =>",
							"function* PackageNames(doc = project.doc)",
							"e =>",
							"([e, b]) =>",
							"([e, w, h, m, v]) =>",
							"({ index, ...match }) =>",
							" ({ s, v, indexes }, match, i) =>",
							"([token, index]) =>",
							"([token, index]) =>",
							"function NextDocument(n = 1)",
							" (idx, i) =>",
							" (idx, i) =>",
							"async function LoadDocument(project, parentElem)",
							"err =>",
							"() =>",
							" ent =>",
							"() =>",
							" ent =>",
							"renamePackages()",
							"a =>",
							"value =>",
							"layer =>",
							"() =>",
							"layer =>",
							"() =>",
							"fn = function(v)",
							"() =>",
							".makeGroup = function({ transform, ...props } = {})",
							"id =>",
							"() =>",
							" function xx()",
							" () =>",
							"function (transform)",
							" (tag, attr, children = []) =>",
							"value =>",
							"async () =>",
							"Rect",
							"async function ChooseDocument(project, i)",
							"GenerateVoronoi = () =>",
							"Rect",
							"p =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ va, vb, ...edge }) =>",
							"v =>",
							"add = (arr, ...items) =>",
							"l =>",
							"t =>",
							"l =>",
							"t =>",
							"p =>",
							" (acc, { site, halfedges }) =>",
							"({ site }) =>",
							"function PackageChildren(element, layer)",
							"(c, i) =>",
							"([i, p]) =>",
							"([i, e]) =>",
							"function ElementChildren(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							"([name, element]) =>",
							"function ElementGeometries(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							" ent =>",
							"([name, children]) =>",
							"([i, e]) =>",
							"([name, lines]) =>",
							"pts =>",
							"([name, lines, polygons]) =>",
							"function NewPath(path)",
							"MakeFitAction = index =>",
							"async event =>",
							"function ZoomFactor(val = config.",
							")",
							"function ZoomLog(factor)",
							"function AdjustZoom(l = config.",
							")",
							"CreateGrblSocket = async (port = 'tnt1') =>",
							"function HandleMessage(msg)",
							" pointStr =>",
							"socketFn = () =>",
							".send = (...args) =>",
							"AuthorizationDialog = ({ onAuth, ...props }) =>",
							"onSubmit: () =>",
							"onInput: e =>",
							"onInput: e =>",
							"onClick: e =>",
							"arg =>",
							".onload = async () =>",
							"response =>",
							"e =>",
							" v =>",
							"TestArc: () =>",
							"() =>",
							"async (push, stop) =>",
							"() =>",
							"async (push, stop) =>",
							" target =>",
							" (key, modifiers = 0) =>",
							".focusSearch = state =>",
							"children: () =>",
							"geometries: () =>",
							"value =>",
							"() =>",
							"testComponent = props =>",
							" function File(obj, i)",
							"File",
							"File.prototype.toString = function()",
							"(a, b) =>",
							"(obj, i) =>",
							"(acc, file) =>",
							"i =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"updateIfChanged = (trkl, newValue, callback) =>",
							" (elem, i) =>",
							"changeInput = e =>",
							"p =>",
							" arg =>",
							"Consumer = props =>",
							"async function* ()",
							"log(type, time, msg)",
							"Logger = props =>",
							"async function* ()",
							"([type, d, t, m], i) =>",
							"Dumper = props =>",
							"value =>",
							"([k, v], i) =>",
							"Commander = ({ onCommand, ...props }) =>",
							"handler = e =>",
							"toggle = trkl =>",
							"Layer = ({ title, name, label, i, color, element, className, ...props }) =>",
							"setVisible = value =>",
							"e =>",
							" e =>",
							"l =>",
							"l =>",
							" (item, value) =>",
							" item =>",
							"l =>",
							"([l, state]) =>",
							"e =>",
							"onMouseMove: e =>",
							"onMouseUp: e =>",
							"DocumentList",
							"constructor()",
							"(push, stop) =>",
							"add(name, component)",
							"addEntry([name, component])",
							"remove(name)",
							"update()",
							"fn: e =>",
							"fn: () =>",
							"open =>",
							" props =>",
							" props =>",
							"async e =>",
							"i =>",
							"i =>",
							"({ coord }) =>",
							"side =>",
							"create: (project, props = {}) =>",
							"a =>",
							"e =>",
							"e =>",
							"name =>",
							"e =>",
							" function makeLayerName(name, side)",
							"fn: () =>",
							"onChange(event)",
							" props =>",
							" props =>",
							" props =>",
							"async (e, p, i) =>",
							"makeSortCompare: key =>",
							" function(a, b)",
							" function(a, b)",
							"onCommand: cmdStr =>",
							"handleChange: e =>",
							" event =>",
							"e =>",
							" function MoveEvent(event, prevEvent)",
							" function* WalkUp(e)",
							" e =>",
							" z =>",
							"p =>",
							"e =>",
							" e =>",
							"e =>",
							" v =>",
							" l =>",
							"e =>",
							" () =>",
							" (e, depth) =>",
							" classes =>",
							" e =>",
							" e =>",
							" (a, b) =>",
							" (a, b) =>",
							"Node",
							"e =>",
							" (p, d, set, stop) =>",
							"e =>",
							"e =>",
							" function TouchEvent(event)",
							"e =>",
							"(p, i) =>",
							"(a, b) =>",
							" size =>",
							"border =>",
							"r =>",
							" function mod(n, m)",
							"() =>",
							" (pos, last, first) =>",
							" function cancel()",
							".oncontextmenu = function(e)",
							".processEvents = async function eventLoop()",
							" event =>",
							"e =>",
							"onRuntimeInitialized: () =>",
							"print: txt =>"
						]
					},
					"AQAAAAAAAAAAAAAA0RUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "// prettier-ignore-start\nimport {\n  Transformation,\n  Rotation,\n  Translation,\n  Scaling,\n  MatrixTransformation,\n  TransformationList\n} from './lib/geom/transformation.js';\nimport dom from './lib/dom.js';\nimport { ReactComponent, Fragment } from './lib/dom/preactComponent.js';\nimport { iterator, eventIterator } from './lib/dom/iterator.js';\nimport keysim from './lib/dom/keysim.js';\nimport geom, { isBBox, BBox, Polygon, Circle, LineList, Arc } from './lib/geom.js';\nimport {\n  normalizePath,\n  reverseNormalizedPath,\n  reverseSubPath,\n  reversePath\n} from './lib/svg/pathReverse.js';\nimport { FixedMedium } from './lib/svg/fixedMedium.js';\nimport { TouchListener } from './lib/touchHandler.js';\nimport { trkl } from './lib/trkl.js';\nimport { ColorMap } from './lib/draw/colorMap.js';\nimport { ClipperLib } from './lib/clipper-lib.js';\nimport Shape from './lib/clipper.js';\nimport { devtools } from './lib/devtools.js';\nimport Util from './lib/util.js';\nimport tlite from './lib/tlite.js';\nimport { debounceAsync } from './lib/async/debounce.js';\nimport { SvgPath } from './lib/svg/path.js';\nimport objectInspect from './lib/objectInspect.js';\nimport tXml from './lib/tXml.js';\nimport deep from './lib/deep.js';\nimport Alea from './lib/alea.js';\nimport path from './lib/path.js';\nimport { TimeoutError } from './lib/repeater/timers.js';\nimport * as Timers from './lib/repeater/timers.js';\nimport asyncHelpers from './lib/async/helpers.js';\nimport { Cache } from './lib/dom/cache.js';\nimport { CacheStorage } from './lib/dom/cacheStorage.js';\n/* prettier-ignore */ import { InterpretGcode, gcodetogeometry, GcodeObject, gcodeToObject, objectToGcode, parseGcode, GcodeParser, GCodeLineStream, parseStream, parseFile, parseFileSync, parseString, parseStringSync, noop, Interpreter } from './lib/gcode.js';\nimport { Iterator } from './lib/iterator.js';\nimport { Functional } from './lib/functional.js';\nimport { makeLocalStorage } from './lib/autoStore.js';\nimport { Repeater } from './lib/repeater/repeater.js';\nimport { useResult, useValue } from './lib/repeater/react-hooks.js';\nimport { Portal } from './lib/dom/preactComponent.js';\nimport renderToString from './lib/preact-render-to-string.js';\nimport { BinaryTree } from './lib/container/binaryTree.js';\nimport LogJS from './lib/log.js';\nimport serial from './serial.js';\nimport { toXML, ImmutablePath, MutablePath, arrayDiff, objectDiff } from './lib/json.js';\nimport { Object2Array, XmlObject, XmlAttr, ImmutableXPath, MutableXPath } from './lib/xml.js';\nimport {\n  RGBA,\n  isRGBA,\n  ImmutableRGBA,\n  HSLA,\n  isHSLA,\n  ImmutableHSLA,\n  ColoredText\n} from './lib/color.js';\n//import { hydrate, Fragment, createRef, isValidElement, cloneElement, toChildArray } from './modules/preact/dist/preact.mjs';\n//import React, { h, html, render, Fragment, Component, useState, useLayoutEffect, useRef } from './lib/dom/preactComponent.js';\nimport * as React from './lib/preact.mjs';\nimport { h, html, render, Component, useState, useLayoutEffect, useRef } from './lib/preact.mjs';\nimport {\n  Chooser,\n  DynamicLabel,\n  Button,\n  FileList,\n  Panel,\n  SizedAspectRatioBox,\n  TransformedElement,\n  Canvas,\n  ColorWheel,\n  Slider,\n  CrossHair,\n  FloatingPanel,\n  DropDown,\n  Conditional,\n  Fence,\n  Zoomable,\n  DisplayList,\n  Ruler,\n  Toggle,\n  ButtonGroup\n} from './components.js';\nimport * as components from './components.js';\nimport { Message } from './message.js';\n\nimport {\n  useActive,\n  useClickout,\n  useDimensions,\n  useDoubleClick,\n  useElement,\n  EventTracker,\n  useEvent,\n  useFocus,\n  useRecognizers,\n  useDrag,\n  usePinch,\n  useWheel,\n  useMove,\n  useScroll,\n  useGesture,\n  useHover,\n  useMousePosition,\n  usePanZoom,\n  useToggleButtonGroupState\n} from './lib/hooks.js';\n\nimport { WebSocketClient } from './lib/net/websocket-async.js';\n/* prettier-ignore */ import * as ecmascript from './lib/ecmascript.js';\nimport {\n  PipeTo,\n  AsyncRead,\n  AsyncWrite,\n  DebugTransformStream,\n  TextEncodeTransformer,\n  TextEncoderStream,\n  TextDecodeTransformer,\n  TextDecoderStream,\n  TransformStreamSink,\n  TransformStreamSource,\n  TransformStreamDefaultController,\n  TransformStream,\n  ArrayWriter,\n  readStream,\n  WriteToRepeater,\n  LogSink,\n  RepeaterSink,\n  StringReader,\n  LineReader,\n  ChunkReader,\n  ByteReader,\n  PipeToRepeater,\n  WritableStream,\n  ReadFromIterator\n} from './lib/stream.js?ts=<?TS?>';\nimport {\n  PrimitiveComponents,\n  ElementNameToComponent,\n  ElementToComponent\n} from './lib/eagle/components.js';\nimport {\n  useTrkl,\n  RAD2DEG,\n  DEG2RAD,\n  VERTICAL,\n  HORIZONTAL,\n  HORIZONTAL_VERTICAL,\n  DEBUG,\n  log,\n  setDebug,\n  PinSizes,\n  EscapeClassName,\n  UnescapeClassName,\n  LayerToClass,\n  ElementToClass,\n  ClampAngle,\n  AlignmentAngle,\n  MakeRotation,\n  EagleAlignments,\n  Alignment,\n  SVGAlignments,\n  AlignmentAttrs,\n  RotateTransformation,\n  LayerAttributes,\n  InvertY,\n  PolarToCartesian,\n  CartesianToPolar,\n  CalculateArcRadius,\n  LinesToPath,\n  MakeCoordTransformer,\n  useAttributes,\n  RenderArc\n} from './lib/eagle/renderUtils.js';\nimport { Wire } from './lib/eagle/components/wire.js';\nimport { Instance } from './lib/eagle/components/instance.js';\nimport { SchematicSymbol } from './lib/eagle/components/symbol.js';\nimport { Emitter, EventIterator, EventEmitter, EventTarget } from './events.js';\nimport { Slot, SlotProvider } from './slots.js';\nimport Voronoi from './lib/geom/voronoi.js';\nimport GerberParser from './lib/gerber/parser.js';\nimport { lazyInitializer } from './lib/lazyInitializer.js';\nimport {\n  EagleElementProxy,\n  BoardRenderer,\n  DereferenceError,\n  EagleDocument,\n  EagleElement,\n  EagleNode,\n  EagleNodeList,\n  EagleNodeMap,\n  EagleProject,\n  EagleRef,\n  EagleReference,\n  EagleSVGRenderer,\n  Renderer,\n  SchematicRenderer,\n  LibraryRenderer,\n  makeEagleElement,\n  makeEagleNode\n} from './lib/eagle.js';\n//import PureCache from 'pure-cache';\nimport { brcache, lscache, BaseCache, CachedFetch } from './lib/lscache.js'; //const React = {Component, Fragment, create: h, html, render, useLayoutEffect, useRef, useState };\nimport commands, {\n  ListProjects,\n  GetLayer,\n  AddLayer,\n  BoardToGerber,\n  GerberToGcode,\n  GcodeToPolylines,\n  ClearCache\n} from './commands.js';\nimport { NormalizeResponse, ResponseData, FetchURL, FetchCached } from './lib/fetch.js';\nimport github, {\n  GithubListFiles,\n  GithubListRepositories,\n  GithubRepositories,\n  GithubListContents,\n  ListGithubRepoServer\n} from './lib/github.js';\n// prettier-ignore-end\n\n/* prettier-ignore */ const { Align, AlignToString, Anchor, CSS, Event, CSSTransformSetters, Element, ElementPosProps, ElementRectProps, ElementRectProxy, ElementSizeProps, ElementTransformation, ElementWHProps, ElementXYProps, isElement, isLine, isMatrix, isNumber, isPoint, isRect, isSize, Line,Matrix,  Point, PointList, Polyline, Rect, Select, Size, SVG, Transition, TransitionList, TRBL, Tree } = { ...dom, ...geom };\n\nimport { classNames } from './lib/classNames.js';\nimport rpc from './quickjs/qjs-net/rpc.js';\nimport * as rpc2 from './quickjs/qjs-net/rpc.js';\nimport { fnmatch, PATH_FNM_MULTI } from './lib/fnmatch.js';\n\nUtil.colorCtor = ColoredText;\nconst elementDefaultAttributes = {\n  stroke: 'red',\n  fill: 'none',\n  'stroke-linecap': 'round',\n  'stroke-linejoin': 'round',\n  'stroke-width': 0.1\n};\n\n/* prettier-ignore */\n//Util.extend(window, { React, ReactComponent, WebSocketClient, html }, { dom, keysim }, geom, { Iterator, Functional }, { EagleNodeList, EagleNodeMap, EagleDocument, EagleReference, EagleNode, EagleElement }, { toXML, XmlObject, XmlAttr }, { CTORS, ECMAScriptParser, ESNode, estree, Factory, Lexer, Parser, PathReplacer, Printer, Stack, Token, ReactComponent, ClipperLib, Shape, isRGBA, RGBA, ImmutableRGBA, isHSLA, HSLA, ImmutableHSLA, ColoredText, Alea, Message }, { Chooser, useState, useLayoutEffect, useRef, Polygon, Circle } );\nconst Timer = { ...Timers, once: dom.Timer };\n\nlet currentProj = trkl.property(window, 'project');\nlet layerList = trkl.property(window, 'layers', { value: [] });\nlet gcode = trkl(null);\nlet wantAuthorization = trkl(null);\n\nlet open = trkl();\nlet showSearch = trkl(true);\nlet dump = trkl({});\nlet cache = new lscache();\n\nlet projectName = 'Headphone-Amplifier-ClassAB-alt3';\nlet palette = null;\nlet svgElement;\nlet brdXml, schXml, brdDom, schDom;\nlet board, schematic;\nlet loadedProjects = [];\nlet container;\n\nlet projectFiles = [];\nlet activeFile;\nlet transform = trkl(new TransformationList());\nlet sizeListener = trkl({});\nlet aspectListener = trkl(1);\nconst documentTitle = trkl('');\nconst documentSize = trkl('');\nconst loading = trkl(false);\nconst filePanel = trkl(false);\n\nconst SaveConfig = Util.debounce(() => {\n  let obj = store.toObject();\n\n  return fetch('config', {\n    method: 'POST',\n    headers: { 'content-type': 'application/octet-stream' },\n    body: JSON.stringify(obj)\n  }).then(res => res.json());\n}, 5 * 1000);\n\nconst LoadConfig = Util.once(() =>\n  fetch('config')\n    .then(ResponseData)\n    .then(r => (console.log('config:', r), r))\n    //    .then(r => r.json())\n    .then(r => ({\n      ...r,\n      entries() {\n        return Object.entries(r);\n      }\n    }))\n);\n\nlet store = (window.store = makeLocalStorage());\n\nlet projects = trkl([]);\nlet socket = trkl();\nlet config = {\n  listURL: trkl(store.get('url') || null),\n  searchFilter: trkl(store.get('filter') || '*'),\n  zoomLog: trkl(store.get('zoom') || null),\n  logSize: trkl(store.get('console') || null),\n  debugFlag: trkl(store.get('debug') || false),\n  credentials: trkl(store.get('auth') || {}),\n  showGrid: trkl(store.get('grid') || true),\n  sortOrder: trkl(store.get('sortOrder') || -1),\n  sortKey: trkl(store.get('sortKey') || 'name'),\n  currentProject: trkl(store.get('currentProject') || null)\n};\n\nconst GetProject = arg => {\n  let ret =\n    typeof arg == 'number'\n      ? projects()[arg]\n      : typeof arg == 'string'\n      ? projects().find(p => p.name == arg)\n      : arg;\n  if(typeof ret == 'string') ret = { name: ret };\n  return ret;\n};\nlet elementChildren = null;\nlet elementGeometries = null;\n//let zoomValue = Util.getSet(() => ZoomFactor(config.zoomLog()), value => config.zoomLog(ZoomLog(value)));\nlet zoomValue = Util.deriveGetSet(config.zoomLog, ZoomFactor, ZoomLog);\n\nconfig.zoomLog.subscribe(AdjustZoom);\n\nconst add = (arr, ...items) => [...(arr ? arr : []), ...items];\n\nconst useSlot = (arr, i) => [() => arr[i], v => (arr[i] = v)];\nconst trklGetSet = (get, set) => value => value !== undefined ? set(value) : get();\n//const useTrkl = trkl => [() => trkl(), value => trkl(value)];\n\nconst MouseEvents = h => ({\n  onMouseDown: h,\n  /*  onBlur: h,*/ onMouseOut: h,\n  onMouseUp: h\n});\n\ntlite(() => ({\n  grav: 'nw',\n  attrib: ['data-tlite', 'data-tooltip', 'title', 'data-filename']\n}));\n\nconst utf8Decoder = new TextDecoder('utf-8');\nlet svgOwner, parent;\n\nconst svgFactory = Util.memoize((parent, delegate) => {\n  parent = parent ? Element.find(parent) : project.svgElement.parentElement;\n  const factory = SVG.factory({\n    ...delegate,\n    append_to(elem, p) {\n      if(delegate.append_to) delegate.append_to(elem, p || parent);\n    }\n  });\n  let rect = calcViewBox(parent);\n  let zIndex = maxZIndex() + 1;\n  const svg = [\n    'svg',\n    {\n      viewBox: rect.toString(),\n      style: `position: absolute; left: 0; top: 0; z-index: ${zIndex}; stroke: #000, fill: none;`\n    },\n    [\n      ['defs'],\n      [\n        'g',\n        {\n          transform: ` scale(1,-1) translate(0,1.27) translate(0,${-rect.y2}) `\n        },\n        [['rect', { ...rect.toObject(), fill: 'hsla(0,0%,50%,0.3333)' }]]\n      ]\n    ]\n  ];\n  const element = (svgOwner = factory(...svg));\n  factory.root = parent = element.lastElementChild;\n  return factory;\n});\n\nfunction DrawSVG(...args) {\n  const factory = svgFactory('body', {\n    append_to(elem, p) {\n      //console.log('append_to', this, { elem, p });\n      (p || this.root).appendChild(elem);\n      adjustViewBox(elem);\n    }\n  });\n  let e;\n  /*let parent = project.svg.parentElement.lastElementChild;\n    const append = e => parent.appendChild(e);*/\n  let c = RGBA.random();\n  let [tag, attrs, children] = args;\n  if(typeof tag == 'string') {\n    // console.log('draw(', ...args, ')');\n    e = factory(tag, { stroke: c.hex(), 'stroke-width': 0.1, ...attrs }, children);\n  } else if(Util.isArray(args[0])) {\n    let items = args.shift();\n    // document.querySelector('#main > div > div > div > svg:nth-child(2) > g');\n    //   setViewBox(factory.root.ownerSVGElement||factory.root, BBox.from(items));\n    for(let item of items) {\n      let line;\n      if(isLine(item)) line = new Line(item);\n      if(line) {\n        e = factory('line', {\n          ...line.toObject(),\n          stroke: c.hex(),\n          'stroke-width': 0.1\n        });\n      }\n    }\n\n    return;\n  }\n\n  function adjustViewBox(e) {\n    let ownerSVG;\n\n    if(!(ownerSVG = e.ownerSVGElement)) return;\n    let rect = new Rect(ownerSVG.getBBox());\n    //console.log('ownerSVG:', ownerSVG, 'rect:', rect);\n    ownerSVG.setAttribute('viewBox', rect + '');\n    if(!ownerSVG.style.maxHeight)\n      Element.setCSS(ownerSVG, { maxWidth: '100vw', maxHeight: '100vh' });\n  }\n\n  return e || factory;\n}\n\nfunction calcViewBox(box) {\n  box =\n    box ||\n    (project &&\n      project.doc &&\n      BBox.from(project.doc.getMeasures(true) || project.doc.getBounds(0)));\n  box = box || Element.rect('.aspect-ratio-box-inside');\n  const { width, height, x, y } = box;\n  let { x1, y1, x2, y2 } = new Rect(x, y, width, height);\n  const rect = new BBox(x1, y1 - y2, x2 - x1, y2);\n  return rect;\n}\n\nfunction setViewBox(svgOwner, box) {\n  svgOwner = svgOwner || [...Element.findAll('svg', Element.find('#main'))].reverse()[0];\n  const rect = box; // instanceof BBox ? box : DrawSVG.calcViewBox(box);\n  rect.y1 -= rect.y2;\n  rect.x2 -= rect.x1;\n  //console.log('setViewBox', { svgOwner, rect, box });\n  svgOwner.setAttribute('viewBox', rect.toString());\n  svgOwner.lastElementChild.setAttribute('transform', `scale(1,-1)  translate(0,${-rect.height})`);\n  Element.attr(svgOwner.lastElementChild.firstElementChild, {\n    ...rect.toRect()\n  });\n}\nconst ElementToXML = (e, predicate) => {\n  if(globalThis.XMLSerializer) return new XMLSerializer().serializeToString(e);\n\n  const x = Element.toObject(e, { predicate });\n\n  for(let [value, path] of deep.iterate(x, (v, k) => k[k.length - 1] == 'd')) {\n    deep.set(x, path, value.trim().replace(/\\s+/g, ' '));\n  }\n\n  for(let [value, path] of deep.iterate(x, (v, k) => k[k.length - 1] == 'id' && v == 'rects'))\n    deep.unset(x, path.slice(0, -1));\n  for(let [value, path] of deep.iterate(x, (v, k) => /(^data-|^class$)/.test(k[k.length - 1])))\n    deep.unset(x, path);\n  //console.log('x:', x);\n  return Element.toString(x, { newline: '\\n' });\n};\n\nconst filesystem = {\n  async readFile(filename) {\n    return await FetchURL(`static/${filename}`);\n  },\n  async writeFile(filename, data, overwrite = true) {\n    return await fetch('save', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/octet-stream',\n        'Content-Disposition': `attachment; filename=\"${filename}\"`\n      },\n      body: data + ''\n    });\n  },\n  async exists(filename) {},\n  async realpath(filename) {}\n};\n\nasync function LoadFile(file) {\n  let { url, name } =\n    typeof file == 'string' ? { url: file, name: file.replace(/.*\\//g, '') } : GetProject(file);\n  LogJS.info(`LoadFile ${name}`);\n  url = /:\\/\\//.test(url) ? url : /^(tmp|data|static)\\//.test(url) ? '/' + url : `/data/${name}`;\n  let response = await FetchURL(url);\n  let xml = await response.text();\n  let doc = new EagleDocument(await xml, null, name, null, filesystem);\n  if(/\\.brd$/.test(name)) window.board = doc;\n  if(/\\.sch$/.test(name)) window.schematic = doc;\n  if(/\\.lbr$/.test(name)) window.libraries = add(window.libraries, doc);\n  return doc;\n}\n\nasync function SaveFile(filename, data, contentType) {\n  if(!data.endsWith('\\n')) data += '\\n';\n  let response = await fetch('save', {\n    method: 'post',\n    headers: {\n      'Content-Type': contentType || 'application/xml',\n      'Content-Disposition': `attachment; filename=\"${filename}\"`\n    },\n    body: data\n  });\n  let { status, statusText } = response;\n  //console.log('SaveFile', {filename,data, response});\n  globalThis.saveResponse = response;\n  let body = await response\n    .text()\n    .then(s => JSON.parse(s))\n    .catch(() => null);\n  let headers = [...(await response.headers.entries())];\n  //console.log('SaveFile', { body, headers });\n  const result = { status, statusText };\n  const request = new Request(`/tmp/${filename}`);\n  response = new Response(data, { status, statusText });\n  let cache = await caches.open('fetch');\n  let r = await cache.put(request, response);\n  LogJS.info(`${filename} saved & cached (${body.size} bytes)`);\n  return result;\n}\n\nasync function SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51]) {\n  const { doc } = project;\n  const { basename, typeName } = doc;\n  if(!filename) filename = `${doc.basename}.${doc.typeName}.svg`;\n  //console.log('SaveSVG(', filename, ', ', layers, ')');\n  let predicate = element => {\n    /*  if(element.hasAttribute) {if(!element.hasAttribute('data-layer')) return true;\n    const layer = element.getAttribute('data-layer');\n    let [number, name] = layer.split(/\\ /);\n    if(number !== undefined && name !== undefined) return layers.indexOf(+number) != -1 || layers.indexOf(name) != -1;\n  }*/\n    return true;\n  };\n  let data = ElementToXML(project.svgElement, predicate);\n  //let data = ElementToXML(project.svgElement);\n  return await SaveFile(filename.replace(/\\.svg$/i, '.svg'), data);\n}\n\nasync function LoadSVG(filename) {\n  let data = await FetchURL(filename).then(ResponseData);\n  let xml = tXml(data.replace(/<\\?xml[^>]*>/, ''));\n  let element = Element.create('div', { style: { display: 'inline-block' } }, 'body');\n  let component = ReactComponent.fromObject(xml[0]);\n  React.render(component, element);\n  return element.firstElementChild;\n}\n\nasync function LoadImage(filename) {\n  let element = Element.create('img', { src: filename }, 'body');\n  return element;\n}\n\nconst RenderComponent = (() => {\n  let id = 1;\n  return function RenderComponent(component) {\n    let element = Element.create(\n      'div',\n      { id: `react-${id++}`, style: { display: 'inline-block' } },\n      'body'\n    );\n    React.render(component, element);\n    return element;\n  };\n})();\n\nconst ModifyColors = fn => e => {\n  const { type, buttons } = e;\n  if(type.endsWith('down')) {\n    if(!window.c) window.c = SVG.allColors(project.svgElement);\n    let { c } = window;\n    c.dump();\n    fn(c);\n  }\n};\n\nconst FindLayer = name_or_id => {\n  for(let id of (name_or_id + '').split(/\\s+/g).map(n => (isNaN(n) ? n : +n))) {\n    const layer = layers.find(l => l.i == id || l.name == id);\n    if(layer) return layer;\n  }\n};\n\nconst GerberLayers = {\n  GTL: 'Top (copper) Layer',\n  GBL: 'Bottom (copper) Layer ',\n  GTO: 'Top Overlay',\n  GBO: 'Bottom Overlay ',\n  GTP: 'Top Paste Mask ',\n  GBP: 'Bottom Paste Mask ',\n  GTS: 'Top Solder Mask ',\n  GBS: 'Bottom Solder Mask ',\n  GKO: 'Keep-Out Layer ',\n  GML: 'Mill layer',\n  gpi: 'Photoplotter info file',\n  TXT: 'Drill file'\n};\n\nlet svgDocFactory = Util.memoize((id = '#geom') =>\n  SVG.factory(Element.find(id)).initialize('svg', {\n    width: window.innerWidth,\n    height: window.innerHeight /*, style: \"pointer-events: none;\"*/\n  })\n);\nlet svgGroupFactory = Util.memoize((props = {}) =>\n  svgDocFactory().setRoot('g', {\n    stroke: '#f00',\n    'stroke-width': 3,\n    fill: 'none',\n    ...props\n  })\n);\n\nconst maxZIndex = () =>\n  Math.max(\n    ...Element.findAll('*')\n      .map(e => Element.getCSS(e, 'z-index'))\n      .filter(z => !/(auto)/.test(z))\n      .map(z => +z)\n  );\n\nconst groupProps = Util.memoize(() => {\n  let transform = `translate(300,-50)`;\n  const prng = new Alea(234234800);\n  const randomColor = () => HSLA.random([240, -120], [100, 100], [30, 75], [1, 1], prng).hex();\n  return [\n    { stroke: randomColor(), transform },\n    { stroke: randomColor(), transform },\n    { stroke: randomColor(), transform }\n  ];\n});\n\nfunction DrawArc(start, end, angle) {\n  let [r, g, b] = groupProps().map(props => svgGroupFactory(props).clear());\n\n  let [p1, p2] = [start, end].map(p => new Point(p));\n\n  let line = new Line(p1, p2);\n  let radius = Arc.radius(angle, p1, p2);\n  let length = Arc.length(angle, p1, p2);\n  let center = Arc.center(p1.x, p1.y, p2.x, p2.y, radius);\n\n  let rect = new Rect({ x: 50, y: 350, width: 300, height: 300 });\n  let middle = line.pointAt(0.5);\n  let points = [\n    ...line,\n    middle,\n    center\n    //...[0.25, 0.75].map(a => line.pointAt(a))\n  ];\n  let degA = (angle * 180) / Math.PI;\n  let a_b = (360 - degA) / 2;\n  let angles = [90, -a_b, a_b];\n  //console.log('angles:', angles);\n  let matrices = angles.map(a => new Rotation(a).toMatrix());\n\n  let slopes = matrices.map(m => new Point(m.transform_point(line.slope)).normal());\n\n  slopes[1].mul(-1);\n  //console.log('slopes:', slopes);\n\n  // r('rect', rect.toObject());\n  let rot = new TransformationList([\n    new Translation(middle.x, middle.y),\n    new Rotation(90),\n    new Translation(-middle.x, -middle.y)\n  ]);\n  //console.log('rot:', rot + '');\n  let pivots = [middle, line.a, line.b];\n  let colors = ['#EB1F00', '#F0CC11', '#34DB05', '#0078F0', '#8D1AE6'];\n  let compound = ['#2E17B3', '#554D85', '#3578E6', '#E9B470', '#B35917'];\n  let palette = ['ff595e', 'ffca3a', '8ac926', '1982c4', '6a4c93'].map(hex => `#${hex}`);\n  let rainbow = ['#E64535', '#E6AA4C', '#D0E634', '#1EE67B', '#3394E8'];\n  let lines2 = [new Line(p1, center), new Line(p2, center)];\n\n  let norms = [p1, p2].map(p => p.diff(center)).map(p => p.normal());\n  angles = norms.map(p => Util.mod(p.toAngle(true), 360));\n  //console.log('angles:', angles);\n  //console.log('angles abs:', Math.abs(angles[0] - angles[1]));\n  //console.log('angle :', angle);\n  //console.log('norms:', norms);\n  //console.log('center:', center);\n\n  let range = norms.map(({ x, y }) => new Point(x * radius, y * radius).sum(center));\n  let deg = (angle * 180) / Math.PI;\n  let approx = Util.range(0, deg, 10).map(a =>\n    Point.fromAngle((a * Math.PI) / 180 - angle, radius - 30)\n  );\n\n  //console.log('range:', range);\n  //console.log('approx:', approx);\n  //range = range.map(v => v. sum(center));\n\n  points.forEach(({ x, y }, i) =>\n    b('circle', {\n      cx: x,\n      cy: y,\n      r: 10,\n      fill: rainbow[i],\n      'stroke-width': 2,\n      stroke: 'black'\n    })\n  );\n\n  let svg = g('line', { ...line.toObject() }).ownerSVGElement;\n  //console.log('svg:', svg);\n  svg.addEventListener('click', e => {\n    //console.log('clicked:', e.target);\n    svg.style.setProperty('display', 'none');\n  });\n  lines2.forEach((l, i) => g('line', { ...l.toObject(), stroke: compound[i] }));\n\n  range.forEach((p, i) => b('circle', { cx: p.x, cy: p.y, r: 15, stroke: '#0ff' }));\n  approx.forEach((p, i) =>\n    b('circle', {\n      cx: p.x,\n      cy: p.y,\n      r: 9,\n      fill: '#ff0',\n      stroke: '#000',\n      'stroke-width': 1.5,\n      transform: `translate(${center})`\n    })\n  );\n\n  b('polyline', {\n    points: new PointList(approx),\n    fill: 'none',\n    stroke: '#000',\n    'stroke-width': 1.5,\n    transform: `translate(${center})`\n  });\n\n  r('path', { d: `M ${p1} A ${radius} ${radius} 0 0 1 ${p2}` });\n  r('path', {\n    d: `M ${p1} A ${radius} ${radius} 0 1 0 ${p2}`,\n    stroke: '#00dd0080'\n  });\n\n  //g('line', { ...line2.toObject(), stroke: '#0f0' });\n}\n\nconst DrawBinaryTree = (tree, draw = DrawSVG()) => {\n  let a = [];\n  const add = (level, item) => (a[level] ? a[level].push(item) : (a[level] = [item]));\n\n  RecurseBinaryNode(tree.root);\n\n  let svg = Element.find('body > svg');\n  [...svg.children].forEach(Element.remove);\n\n  function RecurseBinaryNode(node, parent = null, depth = 0) {\n    let item = { node, parent, y: depth * 20 };\n    add(depth, item);\n\n    if(node.left) RecurseBinaryNode(node.left, item, depth + 1);\n    if(node.right) RecurseBinaryNode(node.right, item, depth + 1);\n  }\n\n  //console.log('a:', a);\n  a.forEach((nodes, i, level) => {\n    let fx = j => j * 20 - ((nodes.length - 1) * 20) / 2;\n    nodes.map((node, j) => (node.x = fx(j)));\n  });\n  a.flat().forEach(\n    item => (DrawNode(item.x, item.y, item.node), item.parent && DrawEdge(item, item.parent))\n  );\n\n  function DrawNode(x, y, node) {\n    draw('circle', {\n      cx: x,\n      cy: y,\n      r: 5,\n      stroke: '#000',\n      fill: '#fff',\n      'stroke-width': 0.4\n    });\n    draw(\n      'text',\n      {\n        x: x + 0.2,\n        y: y + 0.5,\n        ...AlignmentAttrs({ x: 0, y: 0 }),\n        'font-size': '6px'\n      },\n      node.value + ''\n    );\n  }\n  function DrawEdge(item, parent) {\n    let points = [item, parent].map(Point);\n    let line = new Line(...points);\n    let slope = line.slope.normal().mul(5);\n\n    points[0].add(slope);\n    points[1].sub(slope);\n\n    //console.log('points:', points);\n    draw('line', {\n      ...Line(...points).round(0.001),\n      stroke: '#000',\n      'stroke-width': 0.4\n    });\n  }\n};\nDrawBinaryTree.bt = new BinaryTree(\n  new BinaryTree.Node(\n    'A',\n    new BinaryTree.Node('B', new BinaryTree.Node('D')),\n    new BinaryTree.Node(\n      'C',\n      new BinaryTree.Node('E', null, new BinaryTree.Node('G')),\n      new BinaryTree.Node('F')\n    )\n  )\n);\nDrawBinaryTree.bt = new BinaryTree(\n  new BinaryTree.Node(\n    'V',\n    new BinaryTree.Node('H', new BinaryTree.Node(2), new BinaryTree.Node(1)),\n    new BinaryTree.Node(\n      'H',\n      new BinaryTree.Node(\n        'H',\n        new BinaryTree.Node('V', new BinaryTree.Node(6), new BinaryTree.Node(7)),\n        new BinaryTree.Node('V', new BinaryTree.Node(4), new BinaryTree.Node(5)),\n        new BinaryTree.Node('V')\n      ),\n      new BinaryTree.Node(3)\n    )\n  )\n);\n\nfunction GetPaths(query, parent = project.svgElement) {\n  return Element.findAll(query, parent).reduce(\n    (a, e) => a.concat(e.tagName != 'path' ? Element.findAll('path', e) : [e]),\n    []\n  );\n}\n\nfunction PathToPolylines(path, step = 0.01) {\n  let poly,\n    polys = [];\n  [...SVG.pathIterator(path, { step })].forEach(p => {\n    if(p.move || !poly) polys.push((poly = []));\n\n    poly.push(new Point(p).round(0.001));\n  });\n\n  return polys\n    .filter(poly => poly.length > 1)\n    .map(poly => {\n      let transforms = new TransformationList(\n        Element.walkUp(path, (p, d, set, stop) =>\n          p.parentElement.tagName == 'svg'\n            ? stop()\n            : p.hasAttribute('transform') && set(p.getAttribute('transform'))\n        ).reverse()\n      ).collapse();\n      //console.log('transforms', transforms);\n      return new Polyline(poly).transform(transforms);\n    });\n}\n\nfunction PathToPolyline(path, step = 0.01) {\n  let poly = [...SVG.pathIterator(path, { step })];\n\n  let transforms = new TransformationList(\n    Element.walkUp(path, (p, d, set, stop) =>\n      p.parentElement.tagName == 'svg'\n        ? stop()\n        : p.hasAttribute('transform') && set(p.getAttribute('transform'))\n    ).reverse()\n  ).collapse();\n  //console.log('transforms', transforms);\n  return new Polyline(poly).transform(transforms);\n}\n\nfunction PathsToPolylines(paths, step = 0.01) {\n  if(typeof paths == 'string') paths = GetPaths(...paths.split(' '));\n  if(!Util.isArray(paths)) paths = [paths];\n  return new Map(paths.map(path => [path, PathToPolyline(path, step)]));\n}\n\nfunction OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01) {\n  let co = new ClipperLib.ClipperOffset(miterLimit, arcTolerance);\n  let output = (window.output = new ClipperLib.Paths());\n  co.AddPath(\n    path.closed ? path.slice(0, -1) : path,\n    ClipperLib.JoinType[path.closed ? 'jtRound' : 'jtSquare'],\n    ClipperLib.EndType[\n      path.closed ? 'etClosedLine' /*'etClosedPolygon' */ : 'etOpenSquare' || 'etOpenRound'\n    ]\n  );\n  co.Execute(output, offset);\n  //console.log('output:', output);\n  output.toPolylines = function() {\n    return this.map(p => new Polyline(p.map(({ X, Y }) => new Point(X, Y))).close());\n  };\n  return output;\n}\n\n//\n//  OutsetPaths(PathsToPolylines('path.top .R8'), 0.1);\n//\nfunction OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25) {\n  let ret;\n  // if(typeof paths == 'string') paths = PathsToPolylines(paths);\n  if(typeof paths.values == 'function') paths = [...paths.values()];\n\n  //console.log('OutsetPaths:', { paths, ret });\n\n  ret = paths.map(path => OutsetPath(path, offset, miterLimit, arcTolerance));\n\n  ret = ret.slice(1).reduce((a, p) => ClipPath(a, p), ret[0]);\n\n  let [outer, clip] = ret.toPolylines();\n\n  let f = project.makeFactory();\n  let d = [outer.toPath(), clip.toPath()].join(' ');\n\n  //console.log('d:', d);\n\n  /* outer.toSVG(f, { 'stroke-width': 0.0508, stroke: 'black', fill: 'none' });\n  clip.toSVG(f, { 'stroke-width': 0.0508, stroke: 'black', fill: 'none' });\n*/\n  f('path', { d, 'stroke-width': 0.0508, stroke: 'none', fill: 'red' });\n  return ret;\n}\n\nfunction ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion) {\n  let cl = new ClipperLib.Clipper();\n  let output = new ClipperLib.Paths();\n  const add = (p, clip = false) =>\n    (Util.isArray(p[0]) ? cl.AddPaths : cl.AddPath).call(\n      cl,\n      p,\n      clip ? ClipperLib.PolyType.ptClip : ClipperLib.PolyType.ptSubject,\n      true\n    );\n\n  add(path, false);\n  add(clip, true);\n\n  cl.Execute(mode, output);\n  output.toPolylines = function() {\n    return this.map(p => new Polyline(p.map(({ X, Y }) => new Point(X, Y))).close());\n  };\n  return output;\n}\n\nfunction saveItemStates(itemList, get = item => Util.is.on(item.visible())) {\n  return itemList.map(item => [item, get(item)]);\n}\n\nfunction restoreItemStates(\n  itemStates,\n  /* prettier-ignore */ set = (item, value) => item.visible(value ? 'yes' : 'no')\n) {\n  for(let [item, state] of itemStates) set(item, state);\n}\n\nfunction EagleMaps(project) {\n  let transformPath = p => p.replace(/\\s*➟\\s*/g, '/').replace(/\\/([0-9]+)/g, '/[$1]');\n  let dom2path = [...Element.findAll('*[data-path]', project.object)].map(e => [\n    e,\n    new ImmutableXPath(transformPath(e.getAttribute('data-path')))\n  ]);\n  // console.debug('dom2path:', dom2path);\n  dom2path = Util.mapFunction(new WeakMap(dom2path));\n\n  let dom2eagle = node => {\n    let p;\n    if((p = dom2path(node))) return project.doc.lookup(p);\n  };\n  let eagle2dom = elem =>\n    Element.find(`[data-type=${elem.tagName}][data-name=${elem.name}]`, project.element);\n  let path2dom = p => Element.find(`[data-path='${CSS.escape(p)}']`, project.element);\n\n  let mapElements = {\n    /*    eagle: Util.unique(eagle2dom.map(([e, d]) => e)),\n    dom: Util.unique(eagle2dom.map(([e, d]) => d), (a, b) => a.isSameNode(b))*/\n  };\n  let maps = { dom2path, dom2eagle, eagle2dom, path2dom };\n  /*  maps.eagle2dom = Util.mapFunction(new WeakMap(mapElements.eagle.map(eagle => [\n        eagle,\n        eagle2dom.filter(([e, d]) => e === eagle).map(([e, d]) => d)\n      ])\n    )\n  );\n  //console.debug('maps.eagle2dom:', maps.eagle2dom);*/\n  //) maps.dom2eagle = Util.mapFunction(new WeakMap(eagle2dom.map(([k, v]) => [v, k])));\n  const [path2component, component2path] = project.renderer.maps.map(Util.mapFunction);\n  const { /*path2obj, obj2path, */ path2eagle, eagle2path /*, eagle2obj, obj2eagle */ } =\n    project.doc.maps;\n  const [component2eagle, eagle2component] = [\n    Util.mapAdapter((key, value) =>\n      value === undefined ? path2eagle(component2path(key)) : undefined\n    ),\n    Util.mapAdapter((key, value) =>\n      value === undefined ? path2component(eagle2path(key) + '') : undefined\n    )\n  ];\n  Util.weakAssign(maps, {\n    path2eagle,\n    eagle2path,\n    path2component,\n    component2path\n  });\n\n  /* const [component2dom, dom2component] = [\n    Util.mapAdapter((key, value) =>\n      value === undefined ? eagle2dom(component2eagle(key)) : undefined\n    ),\n    Util.mapAdapter((key, value) =>\n      value === undefined ? eagle2component(dom2eagle(key)) : undefined\n    )\n  ]; */\n  Object.assign(maps, {\n    /*dom2component,\n component2dom, */\n    component2eagle,\n    component2path,\n    eagle2component,\n    path2component\n  });\n  Object.assign(project, { maps });\n  return maps;\n}\n\nfunction* PackageNames(doc = project.doc) {\n  const tokenize = Util.matchAll(/([A-Za-z]+|[0-9,]+|[^0-9A-Za-z]+)/g);\n  let packages = doc.packages && doc.packages.length ? doc.packages : [...doc.getAll('package')];\n  let names = packages\n    .map(e => [e, e.getBounds()])\n    .map(([e, b]) => [e, b.width, b.height, Math.max(b.width, b.height), b.height > b.width])\n    .map(([e, w, h, m, v]) => [\n      e,\n      e.name,\n      [...tokenize(e.name)],\n      Util.roundTo(w, 0.01),\n      Util.roundTo(h, 0.01),\n      Math.floor(m),\n      v ? 'V' : ''\n    ]);\n\n  for(let [element, name, matches, w, h, size, orientation] of names) {\n    let tokens = matches.map(({ index, ...match }) => match[0] + '');\n    let [index] = matches\n      .reduce(\n        ({ s, v, indexes }, match, i) => {\n          if(Number.isFinite(s) && indexes.length) return { s, v, indexes };\n          if(match[0] == '/' && !Number.isFinite(s)) s = i;\n          if(match[0] == 'V') v = i;\n          if(!isNaN(+(match[0] + ''))) indexes.push(i);\n          return { s, v, indexes };\n        },\n        { indexes: [] }\n      )\n      .indexes.reverse();\n    let sIndex = tokens.findIndex(([token, index]) => token == '/');\n    let vhIndex = tokens.findIndex(([token, index]) => token == 'V' || token == 'H');\n    let tokIndex = vhIndex != -1 ? vhIndex - 1 : sIndex + 1;\n\n    if(tokens[vhIndex]) {\n      while(tokIndex >= 0 && isNaN(tokens[tokIndex])) tokIndex--;\n    }\n    if(isNaN(+tokens[tokIndex])) tokIndex = index;\n\n    let token = tokens[tokIndex];\n    let vertical = tokens[vhIndex] == 'V';\n    let number = typeof token == 'string' ? +token.replace(/[^-.0-9]/g, '') : NaN;\n    //console.log('names:', { index, sIndex, vhIndex, token, vertical, number });\n\n    /*  if(number != size || vertical != (orientation == 'V')) */\n\n    if(token) {\n      let fromTo = [`${token}${tokens[vhIndex] || ''}`, `${size}${vertical ? 'V' : ''}`];\n      let newName = name.replace(...fromTo);\n\n      yield Object.assign([name, newName, ...fromTo], {\n        w,\n        h,\n        size,\n        orientation\n      });\n    }\n  }\n}\n\n//let projectIndex;\n\nfunction NextDocument(n = 1) {\n  let i;\n  const { projects } = globalThis;\n  if(typeof globalThis.projectIndex != 'number')\n    globalThis.projectIndex = projects.indexOf(project);\n  const cond =\n    Util.isObject(n) && n instanceof RegExp\n      ? (idx, i) => !n.test(projects[idx]?.name)\n      : (idx, i) => i < n;\n  let start = projectIndex;\n  for(i = 0; cond(++projectIndex, i); ++i) {\n    //LogJS.verbose(`NextDocument skip ${i} [${projectIndex}] ${projects[projectIndex].name}`);\n\n    projectIndex %= projects.length;\n    if(projectIndex == start) break;\n  }\n  LogJS.verbose(`NextDocument skipped ${projectIndex - start}`);\n\n  let next = projects[projectIndex];\n  config.currentProject(next.name);\n\n  //console.log('NextDocument', `[${projectIndex}]`, projects[projectIndex].name);\n  return LoadDocument(next);\n}\n\nasync function LoadDocument(project, parentElem) {\n  console.log('LoadDocument', project);\n  open(false);\n  gcode(null);\n\n  if(typeof project == 'string') project = GetProject(project);\n\n  config.currentProject(project.name);\n\n  project.doc = await LoadFile(project).catch(err => console.error(err));\n\n  currentProj(project);\n  LogJS.info(`${project.name} loaded.`);\n  const topPlace = 'tPlace';\n  elementChildren = Util.memoize(() => ElementChildren(topPlace, ent => Object.fromEntries(ent)));\n  elementGeometries = Util.memoize(() =>\n    ElementGeometries(topPlace, ent => Object.fromEntries(ent))\n  );\n  //polygonGeometries = Util.memoize(() => Object.entries(elementGeometries()).map(([name, lineList]) => [name, lineList.toPolygon((pts) => new Polyline(pts))]));\n\n  documentTitle(project.doc.file.replace(/.*\\//g, ''));\n  let s = project.doc.type != 'lbr' && project.doc.dimensions;\n\n  if(s) documentSize(s.round(0.01).toString({ unit: 'mm' }));\n\n  const { doc } = project;\n\n  window.eagle = doc;\n  window.project = project;\n  Element.remove('#fence');\n  let docElem = Element.find('#doc');\n  docElem.innerHTML = '';\n  //console.log('doc.basename', doc.basename);\n\n  Util.memoizedProperties(window, {\n    renamePackages() {\n      let names = [...PackageNames(doc)];\n      //console.log('Package names', names);\n      let changes = names.filter(a => a[0] != a[1]);\n      //console.log('Commands:\\n' + changes.map(([oldName, newName]) => `RENAME ${oldName} ${newName};`).join('\\n'));\n      //console.log('Expressions:\\n' + changes.map(([oldName, newName]) => `s|=\"${oldName}\"|=\"${newName}\"|g;`).join('\\n'));\n      return names;\n    }\n  });\n  let Component;\n\n  if(/*doc.type != 'lbr'*/ true) {\n    project.renderer = new Renderer(doc, ReactComponent.append, /* false && */ config.debugFlag());\n\n    config.showGrid = trkl(true);\n    config.showGrid.subscribe(value => {\n      let obj = { ...project.renderer.grid, visible: value };\n      //console.log('config.showGrid:', obj);\n      project.renderer.grid = obj;\n    });\n\n    //console.log('project.renderer', project.renderer);\n    let style = { width: '100%', height: '100%', position: 'relative' };\n    Component = project.renderer.render(doc, null, {});\n\n    //console.log('renderer.render =', Component);\n\n    let usedLayers = [...doc.layers.list].filter(layer => layer.elements.size > 0);\n\n    Timer.once(250).then(() =>\n      layerList(\n        usedLayers.map(layer => ({\n          i: layer.number,\n          name: layer.name,\n          color: layer.getColor(),\n          element: layer,\n          visible: (() => {\n            let fn;\n            const handler = layer.handlers.visible;\n            fn = function(v) {\n              if(v !== undefined) handler(Util.is.on(v) ? 'yes' : 'no');\n              else return handler();\n            };\n            fn.subscribe = handler.subscribe;\n            fn.unsubscribe = handler.unsubscribe;\n            return fn;\n          })()\n        }))\n      )\n    );\n    LogJS.info(`${project.name} rendered.`);\n    window.component = project.component = Component;\n  }\n\n  let element = Element.find('#main');\n\n  if(project.renderer) {\n    //console.debug('testRender:', Component);\n    //\n    let r = project.renderer.rect || project.renderer.bounds;\n    let size = (project.dimensions = project.renderer.size);\n    //console.debug('project.renderer:', project.renderer);\n    //console.debug('r:', r);\n    let aspectRatio = 1;\n    if(project.doc.type != 'lbr') {\n      if(r) {\n        aspectRatio = r.width / r.height;\n        sizeListener(size);\n      }\n    } else {\n      sizeListener({});\n    }\n    //console.\n    aspectListener(aspectRatio);\n    //console.debug('aspectRatio:', aspectRatio);\n    Component =\n      // h(Zoomable, { /*className: 'zoomable',*/ style: size.toCSS('mm') }, [Component]) ||\n      h(\n        Fence,\n        {\n          style: {},\n          sizeListener,\n          aspectListener,\n          listener: transform,\n          'data-name': project.name\n        },\n        [Component]\n      );\n  }\n\n  let svgElement;\n\n  if(window.component) {\n    //[...element.children].forEach(Element.remove);\n\n    React.render(Component, element);\n\n    let object = ReactComponent.toObject(Component);\n    project.object = object;\n    let rendered = object.children[0];\n    //console.debug('LoadDocument rendered:', rendered);\n\n    setTimeout(() => {\n      SaveSVG();\n    }, 500);\n\n    //console.debug('LoadDocument element:', element);\n    //console.debug('LoadDocument  project:', project);\n\n    //path2eagle: path2obj, eagle2path: obj2path\n\n    project.maps = {\n      ...project.doc.maps,\n      ...EagleMaps(project)\n    };\n\n    project.rendered = rendered;\n    window.project.element = element;\n    window.project.svgElement = svgElement = Element.find('svg', element);\n    project.grid = Element.find('g.grid', project.element);\n    project.bbox = SVG.bbox(project.grid);\n    project.aspectRatio = aspect;\n  }\n  let svg = Element.find('svg', '#main');\n\n  if(svg) {\n    project.makeGroup = function({ transform, ...props } = {}) {\n      let e;\n      if(props.id && (e = Element.find(`#${props.id}`))) return e;\n\n      let groupElement = Element.find('g.elements', svg) || Element.find('g.instances', svg);\n      transform =\n        (groupElement ? groupElement.getAttribute('transform') : '') +\n        (transform ? ' ' + transform : '');\n      return (e = SVG.create('g', { ...props, transform }, svg));\n    };\n\n    project.makeFactory = Util.memoize(id =>\n      SVG.factory(() =>\n        project.makeGroup({\n          ...((id !== undefined && { id }) || {}),\n          'stroke-width': 0.127 / 4\n        })\n      )\n    );\n\n    project.makeFactory();\n\n    let center = SVG.bbox(svgElement).center.round();\n    let defaultTransform = `translate(${center.x},${center.y}) scale(2.54,2.54)`;\n\n    function xx() {\n      let g = SVG.create('g', {});\n\n      project.svgElement.appendChild(g);\n      let ll =\n        geometries.R4 &&\n        geometries.R4.lines.toSVG(ReactComponent.append, () =>\n          h('g', { ...elementDefaultAttributes, defaultTransform })\n        );\n\n      render(ll, g);\n    }\n    /*xx();*/\n\n    window.AddElement = (function (transform) {\n      const root = project.svgElement;\n\n      let list = [];\n\n      return (tag, attr, children = []) => {\n        let e = SVG.create(tag, { ...elementDefaultAttributes, transform, ...attr }, root);\n        list.push(e);\n        let d = trkl.property(e, 'd');\n        d.subscribe(value => e.setAttribute('d', value));\n        return e;\n      };\n    })(defaultTransform);\n  }\n\n  Util.tryCatch(async () => {\n    let { name, data, doc, svg, bbox } = project;\n    let bounds = doc.getBounds();\n    let rect = bounds.toRect(Rect.prototype);\n    let size = new Size(r);\n    // currentProj(project);\n    size.mul(doc.type == 'brd' ? 2 : 1.5);\n    let svgrect = SVG.bbox(project.svgElement);\n    let measures = (doc.measures || doc.getBounds()).rect;\n    //console.debug('measures:', measures);\n    Element.attr(project.svgElement, {\n      'data-filename': project.name,\n      'data-aspect': project.aspectRatio\n    });\n    // let css = size.div(0.26458333333719).toCSS({ width: 'px', height: 'px' });\n    //  window.size = project.doc.type == 'lbr' ? {} : css;\n    AdjustZoom();\n    project.status = SaveSVG();\n  }, Util.putError);\n\n  /* sizeListener.subscribe(value => {\n    //console.log('sizeListener', { value }, Util.getCallers());\n  });\n*/\n  return project;\n}\n\nasync function ChooseDocument(project, i) {\n  let r;\n  if(i == undefined) i = project.i || projectFiles.indexOf(project);\n  const box = Element.findAll('.file')[i];\n  LogJS.info('ChooseDocument:', { project, i, box });\n  LogJS.info(`${project.name} selected.`);\n\n  if(!project.loaded) {\n    loading(true);\n    let data = await LoadDocument(project, box);\n    project.loaded = true;\n    //console.log('loaded:', project);\n    loading(false);\n  }\n  return project.loaded;\n}\n\n/* gerber=await BoardToGerber(project.name); gc=await GerberToGcode('tmp/7seg-2.54.GBL'); geom=gcodetogeometry(gc.data);lines = geom.lines.map(({start,end}) => new Line(start,end)) */\n\nconst GenerateVoronoi = () => {\n  //console.log('Loading document: ' + filename);\n  let { doc } = project;\n  //console.log('doc', doc);\n  let points = new PointList();\n  for(let element of doc.elements.list) {\n    const pkg = element.package;\n    let { x, y } = element;\n    //console.log('element:', element, { x, y });\n    let origin = new Point(x, y);\n    for(let item of pkg.children) {\n      if(item.drill !== undefined) {\n        let pos = new Point(+item.x, +item.y).add(origin);\n        //console.log('pos:', pos);\n        points.push(pos);\n      }\n    }\n  }\n  let bb = doc.getBounds();\n  let rect = bb.toRect(Rect.prototype);\n  //console.log('bb:', bb);\n  //console.log('rect:', rect);\n  rect.outset(1.27);\n  window.tmprect = rect;\n  let sites = points.map(p => p.toObject());\n  let bbox = { xl: bb.x1, xr: bb.x2, yt: bb.y1, yb: bb.y2 };\n  let voronoi = new Voronoi();\n  //pass an object which exhibits xl, xr, yt, yb properties. The bounding\n  //box will be used to connect unbound edges, and to close open cells\n  let result = voronoi.compute(sites, bbox);\n  //render, further analyze, etc.\n  //console.log('result:', Object.keys(result).join(', '));\n  let { site, cells, edges, vertices, execTime } = result;\n  //console.log('cells:', cells);\n  let holes = edges.filter(e => !e.rSite).map(({ lSite, rSite, ...edge }) => new Point(lSite));\n  let rlines = edges\n    .filter(e => e.rSite)\n    .map(({ lSite, rSite, ...edge }) => new Line(lSite, rSite));\n  let vlines = edges\n    .filter(e => e.va && e.vb)\n    .map(({ va, vb, ...edge }) => new Line(va, vb).round(0.127, 4));\n  let points2 = vertices.map(v => new Point(v).round(0.127, 4));\n  const add = (arr, ...items) => [...(Util.isArray(arr) ? arr : []), ...items];\n  const factory = SVG.factory();\n  const lines = [\n    ...rlines.map(l => [\n      'line',\n      { ...l.toObject(t => t + ''), stroke: '#000', 'stroke-width': 0.01 }\n    ]),\n    ...vlines.map(l => [\n      'line',\n      { ...l.toObject(t => t + ''), stroke: '#f00', 'stroke-width': 0.01 }\n    ])\n  ];\n  const circles = [\n    ...holes.map(p => [\n      'circle',\n      {\n        cx: p.x,\n        cy: p.y,\n        r: 0.254,\n        fill: 'none',\n        stroke: '#00f',\n        'stroke-width': 0.3\n      }\n    ]) /* ...points2.map(p => [ 'circle', { cx: p.x, cy: p.y, r: 0.254 * 2, fill: 'none', stroke: 'rgba(0,255,255,0.75)', 'stroke-width': 0.1 } ])*/\n  ];\n  const polylines = [\n    ...cells.reduce(\n      (acc, { site, halfedges }) => [\n        ...acc,\n        [\n          'polyline',\n          {\n            points: new PointList(halfedges.map(({ site }) => site)).toString(),\n            stroke: '#f0f',\n            'stroke-width': 0.1\n          }\n        ]\n      ],\n      []\n    )\n  ];\n  //console.log('polylines:', polylines);\n  //console.log('cells:', cells);\n  window.cells = cells;\n  Element.setCSS(svgElem, {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: 'auto'\n  });\n  //filesystem.writeFile('output.svg', svgFile);\n  //console.log('svg:', svgElem);\n};\n\nfunction PackageChildren(element, layer) {\n  let children = [...element.children]\n    .map((c, i) => [i, c])\n    .filter(([i, p]) => p.layer && p.layer.name == 'tPlace' && p.tagName == 'wire');\n  children.xml = children.map(([i, e]) => e.toXML()).join('\\n');\n  return children;\n}\n\nfunction ElementChildren(layer = 'tPlace', rfn = ent => new Map(ent)) {\n  const { elements = [] } = project.doc || {};\n\n  return rfn([...elements].map(([name, element]) => [name, PackageChildren(element, layer)]));\n}\n\nfunction ElementGeometries(layer = 'tPlace', rfn = ent => new Map(ent)) {\n  return rfn(\n    ElementChildren(layer, ent => ent)\n      .map(([name, children]) => [\n        name,\n        new LineList(\n          children.map(([i, e]) => {\n            let line = e.geometry;\n            if(e.curve !== undefined) line.curve = e.curve;\n            line.element = e;\n            line.xml = e.toXML();\n            return line;\n          })\n        )\n      ])\n      .map(([name, lines]) => [name, lines, lines.slice().toPolygons(pts => new Polyline(pts))])\n      .map(([name, lines, polygons]) => [name, { lines, polygons }])\n  );\n}\n\nfunction NewPath(path) {\n  let elem = SVG.create('path');\n  project.svgElement.appendChild(elem);\n}\n\nconst MakeFitAction = index => async event => {\n  // window.transform='';\n  const { buttons, type, target } = event;\n  if(!type.endsWith('down') || buttons == 0) return false;\n  //console.debug(`FitAct(${index})`, { buttons, type, target });\n  let oldSize = Element.rect('#fence');\n  let matrix = transform().invert().toMatrix();\n  oldSize = matrix.transform_rect(oldSize);\n  let topBar = Element.rect('.buttons');\n  let clientArea = Element.rect('#main');\n  let f = oldSize.fit(clientArea);\n  let factors = new Size(oldSize).fitFactors(new Size(clientArea));\n  let t = new TransformationList().scale(factors[index], factors[index]);\n  matrix = t.toMatrix();\n  let newSize = matrix.transform_rect(new Rect(oldSize));\n  let align = 0;\n  if(newSize.width > clientArea.width) align |= Align.LEFT;\n  else align |= Align.CENTER;\n  if(newSize.height > clientArea.height) align |= Align.TOP;\n  else align |= Align.MIDDLE;\n  newSize.align(clientArea, align);\n  matrix = Matrix.getAffineTransform(oldSize.toPoints(), newSize.toPoints());\n  //console.debug(`FitAction(${index})`, { oldSize, newSize, clientArea }, AlignToString(align), matrix.decompose());\n  transform(t);\n};\n\nfunction ZoomFactor(val = config.zoomLog()) {\n  return +Math.pow(10, val / 200).toFixed(5);\n}\n\nfunction ZoomLog(factor) {\n  return Math.log10(factor) * 200;\n}\n\nfunction AdjustZoom(l = config.zoomLog()) {\n  let zoomFactor = ZoomFactor(l);\n  let t = new TransformationList(window.transform);\n  if(!t.scaling) t.scale(zoomFactor, zoomFactor);\n  else {\n    t.scaling.x = zoomFactor;\n    t.scaling.y = zoomFactor;\n  }\n  window.transform = t;\n}\nconst CreateGrblSocket = async (port = 'tnt1') => {\n  let url = Util.makeURL({\n    location: '/serial',\n    protocol: 'ws',\n    query: { port }\n  });\n  let ws = new WebSocketClient();\n  await ws.connect(url);\n  LogJS.info('Grbl Connected:', ws.connected);\n  let output = await AsyncRead(ws);\n  for await(let data of output) {\n    //console.log('data:', data);\n  }\n};\n\nfunction HandleMessage(msg) {\n  const { type, origin, recipient, body } = msg;\n\n  switch (type) {\n    case 'CONTOURS': {\n      let { frame, width, height, contours } = body;\n      //console.log('HandleMessage', { contours });\n\n      let lists = (typeof contours == 'string' ? contours.split(/\\s*\\|\\s*/g) : contours).map(\n        pointStr => new Polyline(pointStr)\n      );\n\n      window.lists = lists;\n      //console.log('HandleMessage', { type, width, height, frame }, lists);\n\n      break;\n    }\n  }\n}\n\nconst CreateWebSocket = async (socketURL, log, socketFn = () => {}) => {\n  // log = log || ((...args) => console.log(...args));\n  socketURL =\n    socketURL ||\n    Util.makeURL({\n      location: Util.parseURL(window.location.href).location + 'ws',\n      protocol: window.location.href.startsWith('https') ? 'wss' : 'ws'\n    });\n  let ws = new WebSocketClient();\n  let send = ws.send;\n  ws.send = (...args) => {\n    let [msg] = args;\n    if(!(msg instanceof Message)) msg = new Message(...args);\n    //console.log('send:', msg.data);\n    return send.call(ws, msg.data);\n  };\n  window.socket = ws;\n  LogJS.info('New WebSocket: ' + socketURL);\n  await ws.connect(socketURL);\n  LogJS.info('WebSocket Connected:', ws.connected);\n  socketFn(ws);\n  ws.send('PING main.js:data!');\n  let data;\n  //console.log('ws', ws);\n\n  for await(event of ws) {\n    //console.log('WebSocket event:', event);\n    if(event.type == 'message') {\n      const { data } = event;\n      //   console.log('data:', Util.abbreviate(data, 40));\n      let msg = new Message(data);\n      window.msg = msg;\n      // LogJS.info('WebSocket recv: ' + Util.inspect(msg));\n      HandleMessage(msg);\n      ws.dataAvailable !== 0;\n    } else {\n      //console.log(`${event.type}:`, event);\n      break;\n    }\n  }\n  await ws.disconnect();\n};\n\nconst AuthorizationDialog = ({ onAuth, ...props }) => {\n  const [username, setUsername] = useState(props.username || '');\n  const [password, setPassword] = useState(props.password || '');\n\n  return h(\n    Portal,\n    { into: '#portal' },\n    h(\n      'div',\n      { class: 'auth-portal' },\n      h('div', { class: 'auth-dialog' }, [\n        h('h1', {}, 'Authorization'),\n        h(\n          'form',\n          { action: '', method: '', onSubmit: () => false },\n          h('div', { class: 'auth-form' }, [\n            h('input', {\n              name: 'username',\n              placeholder: 'Username',\n              type: 'text',\n              size: 30,\n              onInput: e => {\n                setUsername(e.target.value);\n              },\n              value: username\n            }),\n            h('input', {\n              name: 'password',\n              placeholder: 'Password',\n              type: 'password',\n              size: 30,\n              onInput: e => {\n                setPassword(e.target.value);\n              },\n              value: password\n            }),\n            h('input', {\n              name: 'Ok',\n              type: 'submit',\n              onClick: e => {\n                e.preventDefault();\n                onAuth({ username, password });\n                return false;\n              }\n            })\n          ])\n        )\n      ])\n    )\n  );\n};\n\nconst BindGlobal = Util.once(arg => trkl.bind(window, arg));\n\nconst AppMain = (window.onload = async () => {\n  const { sortOrder, sortKey } = config;\n  //prettier-ignore\n  const imports = {Transformation, Rotation, Translation, Scaling, MatrixTransformation, TransformationList, dom, ReactComponent, iterator, eventIterator, keysim, geom, isBBox, BBox, LineList, Polygon, Circle, TouchListener, trkl, ColorMap, ClipperLib, Shape, devtools, Util, tlite, debounceAsync, tXml, deep, Alea, path, TimeoutError, Timers, asyncHelpers, Cache, CacheStorage, InterpretGcode, gcodetogeometry, GcodeObject, gcodeToObject, objectToGcode, parseGcode, GcodeParser, GCodeLineStream, parseStream, parseFile, parseFileSync, parseString, parseStringSync, noop, Interpreter, Iterator, Functional, makeLocalStorage, Repeater, useResult, LogJS, useDimensions, toXML, MutablePath, ImmutablePath, MutablePath,arrayDiff, objectDiff, Object2Array, XmlObject, XmlAttr, MutableXPath,ImmutableXPath, RGBA, isRGBA, ImmutableRGBA, HSLA, isHSLA, ImmutableHSLA, ColoredText, React, h, html, render, Fragment, Component, useState, useLayoutEffect, useRef, components, Chooser, DynamicLabel, Button, FileList, Panel, SizedAspectRatioBox, TransformedElement, Canvas, ColorWheel, Slider, CrossHair, FloatingPanel, DropDown, Conditional, Message, WebSocketClient,    PipeTo, AsyncRead, AsyncWrite,   DebugTransformStream, TextEncodeTransformer, TextEncoderStream, TextDecodeTransformer, TextDecoderStream, TransformStreamSink, TransformStreamSource, TransformStreamDefaultController, TransformStream, ArrayWriter, readStream, WriteToRepeater, LogSink, RepeaterSink, StringReader, LineReader, ChunkReader, ByteReader, PipeToRepeater,ReadFromIterator, WritableStream, useTrkl, RAD2DEG, DEG2RAD, VERTICAL, HORIZONTAL, HORIZONTAL_VERTICAL, DEBUG, log, setDebug, PinSizes, EscapeClassName, UnescapeClassName, LayerToClass, ElementToClass, ClampAngle, AlignmentAngle, MakeRotation, EagleAlignments, Alignment, SVGAlignments, AlignmentAttrs, RotateTransformation, LayerAttributes, InvertY, PolarToCartesian, CartesianToPolar, RenderArc,\n CalculateArcRadius, LinesToPath, MakeCoordTransformer, useAttributes , Wire, Instance, SchematicSymbol, Emitter, EventIterator, Slot, SlotProvider, Voronoi, GerberParser, lazyInitializer, LibraryRenderer,EagleElementProxy,  BoardRenderer, DereferenceError, EagleDocument, EagleElement, EagleNode, EagleNodeList, EagleNodeMap, EagleProject, EagleRef, EagleReference, EagleSVGRenderer, Renderer, SchematicRenderer, makeEagleElement, makeEagleNode, brcache, lscache, BaseCache, CachedFetch, NormalizeResponse, ResponseData, FetchURL, FetchCached, GetProject, ListProjects, GetLayer, AddLayer, BoardToGerber, GerberToGcode, GcodeToPolylines, \n ...github, classNames , BinaryTree, normalizePath, reverseNormalizedPath, reverseSubPath, reversePath, ...commands,  DEBUG, objectInspect, SvgPath, renderToString , ...ecmascript };\n\n  const localFunctions = {\n    PackageChildren,\n    ElementChildren,\n    Timer,\n    MouseEvents,\n    DrawSVG,\n    ElementToXML,\n    filesystem,\n    LoadFile,\n    SaveFile,\n    SaveSVG,\n    LoadSVG,\n    LoadImage,\n    RenderComponent,\n    ModifyColors,\n    GerberLayers,\n    LoadDocument,\n    NextDocument,\n    ChooseDocument,\n    GenerateVoronoi,\n    MakeFitAction,\n    CreateWebSocket,\n    CreateGrblSocket,\n    BindGlobal,\n    AppMain,\n    serial,\n    FindLayer,\n    OutsetPath,\n    OutsetPaths,\n    ClipPath,\n    PathToPolyline,\n    PathsToPolylines,\n    GetPaths,\n    DrawArc,\n    maxZIndex,\n    ClearCache,\n    PackageNames,\n    DrawBinaryTree,\n    EagleMaps,\n    SaveConfig,\n    LoadConfig,\n    FixedMedium,\n    EventTarget,\n    EventEmitter,\n    ...rpc2,\n    ...components,\n    ...commands,\n    fnmatch,\n    PATH_FNM_MULTI,\n    rpc: { ...rpc }\n  };\n\n  if(store.keys().length == 0) {\n    await LoadConfig()\n      .then(response => {\n        for(let [key, value] of response.entries()) {\n          //console.log(`Initializing store set('${key}',`, value, `)`);\n          store.set(key, value);\n        }\n\n        for(let key of store.keys()) {\n          const value = store.get(key);\n          switch (key) {\n            case 'url':\n              config.listURL(value);\n              break;\n            case 'filter':\n              config.searchFilter(value);\n              break;\n            case 'zoom':\n              config.zoomLog(value);\n              break;\n            case 'console':\n              config.logSize(value);\n              break;\n            case 'debug':\n              config.debugFlag(value);\n              break;\n            case 'auth':\n              config.credentials(value);\n              break;\n          }\n        }\n      })\n      .catch(e => {});\n  }\n  const importedNames = Object.keys(imports);\n  //console.debug('Dupes:', Util.getMemberNames(window).filter(m => importedNames.indexOf(m) != -1));\n\n  //prettier-ignore\n  Util.weakAssign(window, { rpc });\n  Util.weakAssign(window, imports);\n  Util.weakAssign(window.Element, Util.getMethods(dom.Element));\n  Util.weakAssign(window, dom, geom, imports, localFunctions);\n  Util.weakAssign(window, {\n    functions: Util.filter(localFunctions, v => typeof v == 'function'),\n    dom,\n    geom,\n    config,\n    loading,\n    filePanel\n  });\n  Error.stackTraceLimit = 100;\n\n  Util.weakAssign(window, {\n    TestArc: () =>\n      Util.timer(2000).then(() =>\n        DrawArc({ x: 50, y: 150 }, { x: 350, y: 300 }, 120 * (Math.PI / 180))\n      )\n  });\n\n  const timestamps = new Repeater(async (push, stop) => {\n    push(Date.now());\n    const interval = setInterval(() => push(Date.now()), 1000);\n    await stop;\n    clearInterval(interval);\n  });\n\n  const logger = new Repeater(async (push, stop) => {\n    push(['DEBUG', null, null, 'Load ready!']);\n    window.pushlog = push;\n    await stop;\n  });\n  logger.push = window.pushlog;\n\n  //window.focusSearch = trkl();\n  window.currentSearch = trkl(null);\n\n  window.keystroke =\n    target =>\n    (key, modifiers = 0) =>\n      keysim.Keyboard.US_ENGLISH.dispatchEventsForKeystroke(\n        new keysim.Keystroke(modifiers, key),\n        target\n      );\n\n  window.focusSearch = state => {\n    const input = currentSearch();\n    //console.log('focusSearch', input.tagName, state);\n    input[state ? 'focus' : 'blur']();\n  };\n\n  // prettier-ignore\n  BindGlobal({ projects, socket, transform, size: sizeListener, aspect: aspectListener, showSearch,   watched: dump, \n    children: () => elementChildren(),\n     geometries: () => elementGeometries(),\n    ...config });\n\n  currentSearch.subscribe(value => {\n    if(value) {\n      focusSearch(false);\n      Timer.once(1000).then(() => focusSearch(true));\n    }\n  });\n\n  const inspectSym = Symbol.for('nodejs.util.inspect.custom');\n\n  const testComponent = props => html` <div>This is a test</div> `;\n\n  let c = h(testComponent, {});\n  window.testComponent = c;\n\n  const UpdateProjectList = async (\n    opts = config.listURL() ? { url: config.listURL(), ...credentials } : {}\n  ) => {\n    let list = [];\n    //console.log('opts:', opts);\n    let { url, ...restOfOpts } = opts;\n    let urls = url ? url.split(/\\n/g) : [null];\n    for(url of urls) {\n      //console.log('UpdateProjectList:', { ...opts, ...credentials, url });\n      let data = await ListProjects({ ...opts, ...credentials, url });\n      let files = (typeof data == 'object' && data != null && data.files) || [];\n      console.log('files', files);\n      function File(obj, i) {\n        const { name } = obj;\n        let file = this instanceof File ? this : Object.create(File.prototype);\n        let data = trkl({ percent: NaN });\n        Object.assign(file, obj);\n        file.name = name;\n        file.i = i;\n        trkl.bind(file, { data });\n        //        console.info(`Got file '${name.replace(/.*:\\/\\//g, '').replace(/raw.githubusercontent.com/, 'github.com') || name.replace(/.*\\//g, '')}'`);\n\n        return file;\n      }\n      File.prototype.toString = function() {\n        return this.name;\n      };\n      if(files) {\n        list = list.concat(\n          files.sort((a, b) => a.name.localeCompare(b.name)).map((obj, i) => new File(obj, i))\n        );\n        let svgs = list.reduce((acc, file) => {\n          if(/\\.lbr$/i.test(file.name)) return acc;\n          file.svg = `${EagleDocument.baseOf(file.name)}.${EagleDocument.typeOf(file.name)}.svg`;\n          //console.log(`file.svg = '${file.svg}'`);\n          return [...acc, file.svg];\n        }, []);\n\n        data = await ListProjects({ descriptions: false, names: svgs });\n        files = globalThis.files = (data && data.files) || [];\n        //      console.log('filesData:', files);\n\n        for(let svgFile of files) {\n          if(Util.isObject(svgFile) && svgFile.mtime !== undefined) {\n            const f = list.find(i => i.svg === svgFile.name);\n            if(Util.isObject(f) && f.mtime !== undefined) {\n              const delta = svgFile.mtime - f.mtime;\n\n              f.modified = delta < 0;\n            }\n          }\n        }\n      }\n    }\n\n    LogJS.info(`retrieved project list. Got ${list.length} items.`);\n\n    projects(list);\n  };\n\n  UpdateProjectList();\n\n  /*(async function() {\n    while(true) {\n      await CreateWebSocket(null, null, ws => (window.socket = ws)).catch(console.error);\n      await Util.waitFor(1000);\n    }\n  })();*/\n\n  const crosshair = { show: trkl(false), position: trkl({ x: 0, y: 0 }) };\n\n  window.crosshair = trkl.bind({}, crosshair);\n\n  config.credentials.subscribe(value => {\n    store.set('auth', value);\n    LogJS.info(`config.credentials`, value);\n  });\n  config.searchFilter.subscribe(value => {\n    store.set('filter', value);\n    LogJS.info(`config.searchFilter is ${value}`);\n  });\n\n  config.listURL.subscribe(value => {\n    store.set('url', value);\n    LogJS.info(`config.listURL is '${value}'`);\n  });\n  config.debugFlag.subscribe(value => store.set('debug', value));\n\n  config.logSize.subscribe(value => {\n    const { width, height } = value;\n\n    if(width === undefined || height === undefined) {\n      throw new Error('config.logSize undefined');\n    }\n    store.set('console', value);\n    //LogJS.info(`config.logSize is ${value.width} x ${value.height}`);\n  });\n\n  //trkl.bind(window, { config.searchFilter, config.listURL });\n  //trkl.bind(window, { svgFactory });\n\n  //trkl.bind(window, { config.zoomLog, zoom: zoomValue, config.logSize });\n\n  config.zoomLog.subscribe(value => {\n    let factor = ZoomFactor(value);\n    //console.info('zoomFactor changed', value, factor);\n    store.set('zoom', value);\n    if(value === 1) throw new Error(value);\n  });\n\n  const updateIfChanged = (trkl, newValue, callback) => {\n    const oldValue = trkl() || [];\n    //console.info('updateIfChanged ', { oldValue, newValue });\n    if(!Array.prototype.every.call(oldValue, (elem, i) => newValue[i] === elem)) return false;\n    trkl(newValue);\n    if(typeof callback == 'function') callback(trkl, oldValue, newValue);\n    return true;\n  };\n\n  const changeInput = e => {\n    const { target } = e;\n    LogJS.info('changeInput:', target.value);\n    let { value } = target;\n    let parts = value.split(/\\s+/g);\n    let urls = parts.filter(p => /\\:\\/\\//.test(p)).join('\\n');\n    updateIfChanged(config.listURL, urls, arg => {\n      //console.debug('updateIfChanged:', arg);\n    });\n    config.listURL(urls);\n    //    value = parts.filter(p => !/\\:\\/\\//.test(p)).join(' ');\n    config.searchFilter(value == '' ? '*' : value.split(/\\s*\\|\\s*/g).join(' | '));\n  };\n\n  const Consumer = props => {\n    const result = useResult(async function* () {\n      for await(let time of timestamps) {\n        yield time;\n      }\n    });\n    return h(\n      'div',\n      {\n        className: 'vcenter fixed grow no-select',\n        style: {\n          flex: '1 0 auto',\n          justifyContent: 'flex-end',\n          color: 'white',\n          height: '60px',\n          width: '200px',\n          padding: '0 10px 0 0'\n        }\n      },\n      [result && new Date(result.value).toLocaleTimeString('de-CH')]\n    );\n  };\n  LogJS.addAppender(\n    class extends LogJS.BaseAppender {\n      log(type, time, msg) {\n        let d = new Date(time);\n        if(typeof window.pushlog == 'function')\n          window.pushlog([\n            type,\n            Util.isoDate(d).replace(/-/g, ''),\n            d.toLocaleTimeString(navigator.language || 'de'),\n            msg\n          ]);\n      }\n    }\n  );\n  let loggerRect = new Rect();\n  const Logger = props => {\n    const [lines, setLines] = useState([]);\n    const [ref, rect] = useDimensions();\n\n    const r = new Rect(rect);\n    if(!loggerRect.equals(r)) {\n      loggerRect = r;\n    }\n    const result = useResult(async function* () {\n      for await(let msg of logger) {\n        //  console.debug(\"msg:\", msg);\n        yield msg;\n      }\n    });\n    if(result) {\n      lines.push(result.value);\n    }\n    return h(\n      'table',\n      { className: 'logger', ref },\n      lines.slice(-100, lines.length).map(([type, d, t, m], i) =>\n        h('tr', {}, [\n          h(\n            'td',\n            { className: 'log sign' },\n            h('img', {\n              className: 'log sign',\n              src: `static/${type.toLowerCase() || 'warn'}.svg`,\n              style: { height: '14px', width: 'auto', marginTop: '-1px' }\n            })\n          ),\n          h('td', { className: 'log message' }, m + '')\n        ])\n      )\n    );\n  };\n\n  dump({ ...dump(), test: 123 });\n\n  const Dumper = props => {\n    const [values, setValues] = useState(dump());\n    let lines = [];\n    dump.subscribe(value => setValues(value));\n    for(let [key, value] of Object.entries(values)) lines.push([key, value]);\n    return h(\n      'table',\n      { border: '0', cellpadding: 3, cellspacing: 0, className: 'dumper' },\n      lines.map(([k, v], i) =>\n        h('tr', { className: 'watch' }, [\n          h('td', { className: 'name' }, k + ''),\n          h('td', { className: 'value' }, v + '')\n        ])\n      )\n    );\n  };\n\n  const Commander = ({ onCommand, ...props }) => {\n    const [inputText, setInputText] = useState('');\n    const handler = e => {\n      const { target } = e;\n      if(e.type.endsWith('down') && e.keyCode == 13) {\n        const value = target.value || inputText;\n        if(value != '') {\n          if(typeof onCommand == 'function') onCommand(value);\n          setInputText('');\n        }\n      } else {\n        setInputText(target.value);\n      }\n    };\n    return h(\n      'input',\n      {\n        type: 'text',\n        className: 'commander',\n        value: inputText,\n        onKeyDown: handler,\n        autofocus: true\n      },\n      []\n    );\n  };\n\n  const layersDropDown = trkl(false);\n\n  const toggle = trkl => trkl(!trkl());\n  let setTo;\n\n  const Layer = ({ title, name, label, i, color, element, className, ...props }) => {\n    let setVisible = props.visible || element.handlers.visible,\n      visible = useTrkl(setVisible);\n    const isVisible = visible === true || (visible !== false && Util.is.on(visible));\n    if(Util.isObject(element) && 'visible' in element)\n      setVisible = value => (element.visible = value);\n    let [solo, setSolo] = useState(null);\n\n    const onMouseDown = Util.debounce(e => {\n      //console.log('onMouseDown', e);\n      /* if(e.buttons & 1)*/ {\n        setVisible((setTo = !isVisible));\n        return true;\n      }\n    }, 200);\n    // console.log(`Layer #${i} ${name} isVisible=${isVisible}`);\n    return h(\n      'div',\n      {\n        className: classNames(className, !isVisible && 'gray'),\n        id: `layer-${i}`,\n        'data-layer': `${(element && element.number) || i} ${(element && element.name) || name}`,\n        onClick: useDoubleClick(\n          e => {\n            let { target } = e;\n\n            while(!target.hasAttribute('id') && target.parentElement)\n              target = target.parentElement;\n            //console.log('Double click', { solo, i, target });\n            let layers = [...layerList()];\n            let visibleLayers = layers.filter(l => Util.is.on(l.visible()));\n            let hiddenLayers = layers.filter(l => !Util.is.on(l.visible()));\n            //console.log('Layer.onClick', { visibleLayers, hiddenLayers, solo });\n\n            if(solo) {\n              onMouseDown.clear();\n              let restoreData = solo;\n\n              setSolo(null);\n              restoreItemStates(restoreData, (item, value) => item.visible(value ? 'yes' : 'no'));\n\n              //console.debug('restoreData:', restoreData);\n            } else {\n              let saved = saveItemStates(layers, item => Util.is.on(item.visible()));\n              //console.debug('saved:', saved);\n              setSolo(saved);\n              //console.debug('layers:', layers);\n              const states = layers.map(l => [l, l.i == i]);\n              //console.debug('states:', states);\n              states.forEach(([l, state]) => l.visible(state ? 'yes' : 'no'));\n              //    for(let l of layers) l.visible(l.name == name ? 'no' : 'yes');\n              setVisible(true);\n            }\n            layerList(layers);\n          },\n          onMouseDown ||\n            (e => {\n              let layers = [...layerList()];\n              if(solo) {\n              } else {\n              }\n\n              layerList(layers);\n            }),\n          { timeout: 40 }\n        ),\n        onMouseMove: e => {\n          if(e.buttons & 1 && setTo !== undefined) setVisible(setTo);\n        },\n        onMouseUp: e => {\n          setTo = null;\n        } /*,\n        onMouseDown*/\n      },\n      [\n        h(\n          'span',\n          {\n            className: classNames(className, 'number'),\n            style: {\n              background: color || (Util.isObject(element) && element.color)\n            },\n            ...props\n          },\n          `${i}`\n        ),\n        h(\n          'span',\n          {\n            className: classNames(className, 'name', !isVisible && 'gray', solo && 'bold'),\n            ...props\n          },\n          `${name}`\n        ),\n        h('img', {\n          className: classNames(className, 'visible'),\n          ...props,\n          style: { height: '1em', width: 'auto' },\n          src: `static/svg/${isVisible ? 'show' : 'hide'}.svg`\n        })\n      ]\n    );\n  };\n\n  class DocumentList {\n    constructor() {\n      this.repeater = new Repeater((push, stop) => {\n        this.push = push;\n        this.stop = stop;\n      });\n      this.map = new Map();\n    }\n\n    add(name, component) {\n      const { map } = this;\n\n      if(!ReactComponent.isComponent(component)) component = h(component, {}, []);\n\n      map.set(name, component);\n      this.update();\n    }\n\n    addEntry([name, component]) {\n      return this.add(name, component);\n    }\n\n    remove(name) {\n      if(map.has(name)) {\n        map.delete(name);\n        this.update();\n        return true;\n      }\n    }\n\n    update() {\n      const { map } = this;\n      this.push([...map.values()]);\n    }\n  }\n  let data;\n\n  console.log('DUMMY');\n\n  window.documentList = data = new DocumentList();\n  React.render(h(DisplayList, { data }), Element.find('#display'));\n\n  let preactComponent = h(SlotProvider, {}, [\n    h(Panel, { className: classNames('buttons', 'no-select'), tag: 'header' }, [\n      h(Button, {\n        image: 'static/svg/browse.svg',\n        state: open,\n        fn: e => {\n          if(e.type.endsWith('down')) {\n            //console.log('file list push', e);\n            open(!open());\n          }\n        }\n      }),\n\n      /* h(Button, {\n          caption: 'Random',\n          fn: ModifyColors(c => c.replaceAll(c => HSLA.random()))\n        }),\n        h(Button, {\n          caption: 'Invert',\n          fn: ModifyColors(c => c.replaceAll(c => c.invert()))\n        }),*/\n      h(DropDown, {}, []),\n      h(Button, {\n        //  caption: '↔',\n        fn: MakeFitAction(VERTICAL & 1),\n        image: 'static/svg/fit-vertical.svg'\n      }),\n      h(Button, {\n        //  caption: '↕',\n        fn: MakeFitAction(HORIZONTAL & 1),\n        image: 'static/svg/fit-horizontal.svg'\n      }),\n      h(Conditional, { signal: currentProj }, [\n        h(Button, {\n          //  caption: '↕',\n          fn: () => config.showGrid(!config.showGrid()),\n          state: config.showGrid,\n          toggle: true,\n          image: 'static/svg/grid.svg'\n        }),\n        h(\n          DropDown,\n          {\n            isOpen: layersDropDown.subscribe(open => console.log('layers dropdown', { open }))\n            // into: '#portal'\n          },\n          [\n            props =>\n              h(Button, {\n                ...props,\n                toggle: true,\n                state: layersDropDown,\n                image: 'static/svg/layers.svg'\n              }),\n            props =>\n              h(\n                Chooser,\n                {\n                  ...props,\n                  className: 'layers',\n                  itemClass: 'layer',\n                  itemComponent: Layer,\n                  items: layerList\n                },\n                []\n              )\n          ]\n        ),\n        h(Button, {\n          fn: debounceAsync(async e => {\n            /*console.log(\"CAM button\",{e});\n              if(e.type.endsWith('up')) return false;*/\n            let r;\n            project.gerber = {};\n            project.gcode = {};\n            //console.debug('CAM Button');\n            for(let side of ['back', 'front', 'drill', 'outline']) {\n              let gerber = await BoardToGerber(project, {\n                side,\n                [side]: true,\n                fetch: ['drill', 'outline'].indexOf(side) != -1\n              });\n\n              if(gerber) {\n                //console.debug(`project.gerber['${side}'] =`, gerber);\n                project.gerber[side] = gerber;\n                if(gerber && gerber.data) {\n                  gerber.cmds = await GerberParser.parse(gerber.data);\n                  gerber.unit = gerber.cmds.find(i => i.prop == 'units');\n\n                  gerber.points = gerber.cmds\n                    .filter(i => i.coord)\n                    .map(({ coord }) => new Point(coord.x, coord.y));\n                }\n                //console.debug('BoardToGerber side =', side, ' file =', gerber.file);\n              }\n            }\n            const sides = /*Object.fromEntries*/ ['back', 'front', 'drill', 'outline'].map(side => [\n              side,\n              project.gerber[side].file\n            ]);\n            //console.debug('  sides = ', sides);\n            //console.debug('  project = ', project);\n            let allGcode = {};\n            for(let [side, file] of sides) {\n              let gcode = await GerberToGcode(project, {\n                side,\n                file,\n                nog64: true,\n                'fill-outline': true,\n                voronoi: true,\n                /*'zero-start': true,*/ nog81: true\n              });\n              allGcode[side] = gcode;\n              //project.gcode[side] = gcode.data && gcode.data.data ? gcode.data.data : gcode.data;\n            }\n            //console.debug('GerberToGcode allGcode = ', allGcode);\n            let bbox;\n            for(let side of ['outline', 'back', 'front', 'drill']) {\n              try {\n                let gerber = project.gerber[side];\n                let data = allGcode[side];\n                let file = gerber.file || allGcode.data.files[side];\n                //console.debug('GerberToGcode  ', { gerber, data, file });\n\n                if(data) {\n                  let gc = { data, file };\n\n                  if(side != 'drill') {\n                    let processed = file.replace(/\\.ngc$/, '.svg');\n                    //console.debug('processed', processed);\n                    gc.svg = await FetchURL(processed).then(ResponseData);\n                    let pos;\n\n                    if(gc.svg) {\n                      if((pos = gc.svg.indexOf('<svg ')) != -1) gc.svg = gc.svg.substring(pos);\n\n                      if(side == 'outline') {\n                        //console.debug('outline', gc.svg);\n                        let xmlData = tXml(gc.svg);\n                        let svgPath = Util.tail(xmlData[0].children).children[0];\n                        let points = SVG.pathToPoints(svgPath.attributes);\n                        //console.debug('points:', points);\n                        bbox = new Rect(new BBox().update(points)).round(0.001);\n                        //console.debug('bbox:', bbox);\n\n                        continue;\n                      }\n                      //  console.debug('gc.svg ',gc.svg );\n                      let layer = GetLayer({\n                        name: makeLayerName('processed', side),\n                        'data-filename': processed,\n                        create: (project, props = {}) => {\n                          let g = SVG.create(\n                            'g',\n                            { innerHTML: gc.svg, ...props },\n                            project.svgElement\n                          );\n                          g.innerHTML = gc.svg;\n                          if(g.firstElementChild && g.firstElementChild.tagName == 'svg') {\n                            let svg = g.firstElementChild;\n                            ['width', 'height', 'xmlns', 'xmlns:xlink', 'version'].forEach(a =>\n                              svg.removeAttribute(a)\n                            );\n                            svg.setAttribute('viewBox', bbox);\n                          }\n                          Element.findAll('path', g)\n                            .filter(e => e.style['fill-opacity'] == 1)\n                            .forEach(e => (e.style.display = 'none'));\n\n                          ['fill', 'stroke'].forEach(name =>\n                            Element.findAll(`[style*=\"${name}:\"]`, g).forEach(e => {\n                              const value = e.style[name];\n                              if(value != 'rgb(0, 0, 0)' && value != 'none') {\n                                e.setAttribute(name, value);\n                                e.style.removeProperty(name);\n                              }\n                            })\n                          );\n\n                          return g;\n                        }\n                      });\n                      /*\n                      layer.sublayers = Util.histogram(Element.walk(layer.dom, (e, acc) => (e.tagName.endsWith('g') ? acc : [...acc, e]), []),\n                        e => e.getAttribute('style'),\n                        new Map(),\n                        () => new Set()\n                      );*/\n                    }\n                  }\n\n                  //console.debug('GerberToGcode side =', side, ' gc =', gc.file, ' svg =', Util.abbreviate(gc.svg));\n                }\n              } catch(e) {\n                Util.putError(e);\n              }\n            }\n            gcode(project.gcode);\n\n            function makeLayerName(name, side) {\n              const prefix = side == 'front' ? 't-' : side == 'back' ? 'b-' : '';\n              return Util.camelize(\n                prefix + path.basename(name, /\\.[^.]+$/).replace(new RegExp(`_${side}`), '')\n              );\n            }\n          }, 100),\n          'data-tooltip': 'Generate Gerber RS274-X CAM data',\n          image: 'static/svg/cnc-obrabeni.svg'\n        })\n      ]),\n\n      h(Conditional, { signal: gcode }, [\n        h(Button, {\n          fn: () => {\n            const colors = {\n              front: 'hsl(300,100%,70%)',\n              back: 'hsl(230,100%,70%)'\n            };\n            for(let side of ['back', 'front']) {\n              let gc = project.gcode[side];\n              if(gc) {\n                //console.debug(`${side} gcode gc =`, gc);\n                GcodeToPolylines(gc.data, {\n                  fill: false,\n                  color: colors[side],\n                  side\n                });\n              }\n            }\n          },\n          'data-tooltip': 'Create Voronoi diagram',\n          image: 'static/svg/voronoi.svg'\n        })\n      ]),\n      h(Toggle, {\n        state: sortOrder,\n        images: ['static/svg/sort-asc.svg', 'static/svg/sort-desc.svg'],\n        //disable: trkl(true),\n        visible: open\n      }),\n      h(DynamicLabel, {\n        className: 'vcenter pad-lr',\n        caption: documentTitle\n      }),\n      h(DynamicLabel, {\n        className: 'vcenter pad-lr',\n        caption: documentSize\n      }),\n      h(Consumer, {})\n    ]),\n    h(ButtonGroup, {className: 'small', onChange(event) {\n         let { currentTarget, target } = event;\n         let key = target.getAttribute('data-key');\n\n console.log('Sort order changed', key);\n config.sortKey(key);\n\n    } }, [\n      props =>\n        h('img', {\n          src: 'static/svg/sort-name-2.svg',\n          alt: 'Name', 'data-key': 'name', ...props\n        }),\n      props =>\n      \n        h('img', {\n          src: 'static/svg/sort-time-2.svg',\n          alt: 'Modification time','data-key': 'mtime', ...props\n        }),\n      props =>\n        h('img', {\n          src: 'static/svg/sort-size-2.svg',\n          alt: 'Size','data-key': 'size', ...props\n        })\n    ]),\n    /*  h('div', { style: { display: 'inline-flex', flexFlow: 'row', alignItems: 'stretch', height: '100px', padding: '10px' } }, [\n        h(ColorWheel, {}),\n        h(Slider, {\n          min: 0,\n          max: 100,\n          value: 100,\n          orient: 'vertical',\n          name: 'S',\n          length: '10px',\n          style: { flex: '0 1 auto' },\n          onChange: value => {\n            //console.log('value:', value);\n          }\n        }),\n        h(Slider, {\n          min: 0,\n          max: 100,\n          orient: 'vertical',\n          name: 'L',\n          length: '10px',\n          style: { flex: '0 1 auto' },\n          onChange: value => {\n            //console.log('value:', value);\n          }\n        })\n      ]),*/\n    h(FileList, {\n      listTag: 'nav',\n      files: projects,\n      onActive: open,\n      onChange: debounceAsync(async (e, p, i) => await ChooseDocument(p, i), 5000, {\n        leading: true\n      }),\n      filter: config.searchFilter,\n      showSearch,\n      changeInput,\n      focusSearch,\n      sortKey,\n      sortOrder,\n      makeSortCompare: key =>\n        key == 'name' || !key\n          ? function(a, b) {\n              let nameA = a.name,\n                nameB = b.name;\n              let extA = path.extname(nameA),\n                extB = path.extname(nameB);\n              if(extA == '.lbr' && extB != '.lbr') return -1;\n              if(extA != '.lbr' && extB == '.lbr') return 1;\n              return nameA.localeCompare(nameB);\n            }\n          : function(a, b) {\n              let valueA = a[key],\n                valueB = b[key];\n              return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;\n            },\n      currentInput: currentSearch\n    }),\n\n    h(CrossHair, { ...crosshair }),\n    h(FloatingPanel, { onSize: config.logSize, className: 'no-select', id: 'console' }, [\n      /*h(div, {}, [ */ h(Logger, {}),\n      h(Dumper, {}),\n      h(Commander, {\n        onCommand: cmdStr => {\n          let fn = new Function(`return ${cmdStr};`);\n\n          //console.log('Command:', cmdStr);\n          LogJS.info(`> ${cmdStr}`);\n          let result = fn();\n          LogJS.info(`= ${Util.toSource(result)}`);\n        }\n      }) /*])*/\n    ]),\n    h(Slot, { name: 'layers' }),\n    h(\n      Conditional,\n      { signal: wantAuthorization },\n      h(AuthorizationDialog, { onAuth: config.credentials })\n    ),\n    h(Ruler, {\n      class: 'ruler-container vertical ',\n      handleChange: e => {\n        //console.log('Ruler changed:', e);\n      },\n      style: {\n        position: 'absolute',\n        right: 0\n      }\n    })\n  ]);\n  console.log('DUMMY', (window.preactComponent = preactComponent));\n  React.render(preactComponent, Element.find('#preact'));\n\n  let move, resize;\n  let box;\n  container = Element.find('#main');\n\n  let touchHandler = trkl();\n  let moveHandler = trkl();\n\n  //Element.find('.transformed-element-size').setAttribute('id', 'transformed-element');\n\n  TouchListener(touchHandler, { element: window });\n\n  window.addEventListener('pointermove', moveHandler);\n\n  let rects = (window.rects = new Map());\n  let elems = (window.elems = new Set());\n  window.addEventListener('pointerdown', event => {\n    window.elements = [...elems].filter(e => e.tagName == 'path');\n  });\n  let css = {\n    cursor: undefined,\n    'pointer-events': undefined,\n    'user-select': undefined\n  };\n\n  //moveHandler.subscribe(MoveEvent);\n\n  touchHandler.subscribe(TouchEvent);\n\n  function MoveEvent(event, prevEvent) {\n    const { x, y, clientX, clientY, index, buttons, start, type, target } = event;\n    window.lastMoveEvent = event;\n    event.elements = document.elementsFromPoint(x, y);\n    function* WalkUp(e) {\n      while(e) {\n        yield e;\n        e = e.parentElement;\n      }\n    }\n    let zIndex = Util.find(\n      Util.map(WalkUp(event.target), e => e.style.getPropertyValue('z-index')),\n      z => /^[0-9]/.test(z)\n    );\n    if(zIndex > 0) Util.clear(event.elements);\n    for(let e of event.elements)\n      Element.walkUp(e)\n        .slice(1)\n        .forEach(p => Util.remove(event.elements, p));\n    Util.remove(event.elements, document.documentElement);\n\n    event.layers = new Map(\n      event.elements.map(e => [\n        e,\n        Element.walkUp(e, e => {\n          if(e.hasAttribute('data-layer')) throw e.getAttribute('data-layer');\n        })\n      ])\n    );\n    event.colors = new Map();\n    for(let [e, layer] of event.layers) {\n      if(!layer || /(Measure|Dimension)/.test(layer)) continue;\n      let l = FindLayer(layer);\n      if(l) event.colors.set(e, l.color.setOpacity(0.8) || '#000');\n    }\n    event.classes = new Map(\n      event.elements.map(e => [\n        e,\n        Util.ifThenElse(\n          v => v,\n          l => l.map(e => e.classList.value),\n          () => ''\n        )(\n          Element.walkUp(\n            e,\n            (e, depth) => !e.classList.value.startsWith('aspect') && e.classList.value\n          )\n        )\n      ])\n    );\n    Util.removeIf(event.classes, classes => classes == '');\n    Util.removeIf(event.elements, e => e.tagName == 'polyline');\n    Util.removeIf(event.elements, e => !(event.classes.has(e) || event.colors.has(e)));\n    const group =\n      project &&\n      project.makeGroup &&\n      project.makeGroup({\n        id: 'rects',\n        stroke: '#ff6f00',\n        'stroke-width': 0.127,\n        fill: 'none',\n        'stroke-linecap': 'square',\n        'vector-effect': 'non-scaling-stroke',\n        'pointer-events': 'none'\n      });\n\n    if(prevEvent && group) {\n      let u = Util.union(prevEvent.elements, event.elements, (a, b) => a.isSameNode(b));\n      let [remove, add] = Util.difference(\n        prevEvent.elements,\n        event.elements,\n        (a, b) => a.findIndex(Node.prototype.isSameNode, b) != -1\n      );\n\n      //  console.log('difference:', [remove,add], 'union:', u);\n      //  console.log('add:', add);\n\n      const bboxes = new Map(\n        add.map(e => [e, new Rect(e.getBBox ? e.getBBox() : e.getBoundingClientRect())])\n      );\n\n      for(let [e, rect] of bboxes) {\n        let transforms =\n          Element.walkUp(e, (p, d, set, stop) =>\n            p.parentElement == null || p.parentElement.isSameNode(p.ownerSVGElement)\n              ? stop()\n              : p.hasAttribute('transform') && set(p.getAttribute('transform'))\n          ) || [];\n        transforms = transforms.reverse();\n        elems.add(e);\n        let props = {\n          ...rect.round(0.001).toObject(),\n          transform: transforms.join(' ')\n        };\n        rects.set(e, [\n          // SVG.create('rect', { ...props, stroke: '#000', 'stroke-width': 0.127 * 2 }, group),\n          SVG.create(\n            'rect',\n            { ...props, 'stroke-dasharray': '0.508 0.508', stroke: '#000' },\n            group\n          ),\n          SVG.create(\n            'rect',\n            {\n              ...props,\n              'stroke-dasharray': '0.508 0.508',\n              'stroke-dashoffset': 0.508,\n              stroke: '#ff0'\n            },\n            group\n          )\n        ]);\n      }\n      /*\n      add.forEach(e => {\n        elems.add(e);\n        rects.set(e, devtools.rect(new Rect(e.getBoundingClientRect()), event.colors.get(e) || '#00000000', event.colors.get(e)));\n      });*/\n      remove.forEach(e => {\n        let rect = rects.get(e);\n        rects.delete(e);\n\n        if(Util.isArray(rect)) rect.forEach(e => Element.remove(e));\n      });\n\n      if(bboxes.size) {\n        /* console.log('event.elements:', event.elements);\n        //console.log('event.classes:', event.classes);\n        //console.log('event.target:', zIndex);*/\n        //  console.log('rects:', Util.clone(bboxes));\n      }\n    }\n  }\n  function TouchEvent(event) {\n    const { x, y, index, buttons, start, type, target } = event;\n    //  console.log('touchHandler', event);\n    if(type.endsWith('end') || type.endsWith('up')) return cancel();\n    if(event.buttons === 0 && type.endsWith('move')) return cancel();\n    // if(event.index > 0) console.log('touch', { x, y, index, buttons, type, target }, container);\n    if(!move && !resize) {\n      let elemId;\n      //  console.log('target:', target);\n      box = (e => {\n        do {\n          elemId = e.getAttribute('id');\n          if(['fence', 'console'].indexOf(elemId) != -1) return e;\n        } while((e = e.parentElement));\n      })(target);\n      //console.log('box:', box);\n      if(event.buttons && event.buttons != 1) {\n        if('preventDefault' in event) event.preventDefault();\n        if(!resize && box) {\n          let edges = Element.rect(box).toPoints();\n          let corners = [edges[0], edges[2]].map((p, i) => [\n            i,\n            p.distance(new Point(start).sum(x, y)),\n            p\n          ]);\n          let edge = corners.sort((a, b) => a[1] - b[1])[0];\n          window.resize = resize = Element.resizeRelative(box, null, edge[0] ? -1 : 1, size => {\n            //    console.log('resizeRelative:', { elemId, size });\n            if(elemId == 'console') config.logSize(size);\n          });\n          box.style.cursor = `nwse-resize`;\n          //console.log('RESIZE:', { resize, box, corners, edge });\n          return true;\n        }\n        return cancel();\n      }\n\n      //        let box = Element.find('#main').firstElementChild;\n      const id = box && box.getAttribute('id');\n\n      if(id == 'console') {\n        const rects = [true, false].map(border => Element.rect(box, { border }));\n        let p = new Point(start.x + x, start.y + y);\n        //console.log('', p);\n        const inside = rects.map(r => r.inside(p));\n        const inBorder = inside[0] && !inside[1];\n        function mod(n, m) {\n          return ((n % m) + m) % m;\n        }\n        let rad = p.diff(rects[0].center).toAngle();\n        let deg = Math.round((rad * 180) / Math.PI);\n        let sector = mod(Math.floor(((180 - deg) * 8) / 360), 8);\n        let directions = ['n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'];\n        let norm = Point.fromAngle(rad, 1);\n        //console.log('box: ', id, ...inside, inBorder, p, { sector, deg });\n        let compass = directions[sector];\n      }\n      if(box) {\n        let translation = new Translation();\n        let transformList = new TransformationList([translation]).concat(transform());\n\n        let setStyle = Util.once(() =>\n          Element.setCSS(box, {\n            cursor: 'move',\n            'pointer-events': 'none',\n            'user-select': 'none'\n          })\n        );\n\n        window.move = move = Element.moveRelative(\n          box,\n          null,\n          id == 'console' ? ['right', 'bottom'] : ['left', 'top'],\n          (pos, last, first) => {\n            if(pos && first) {\n              let rel = Point.diff(pos, first);\n              if(rel.distanceSquared() > 0) {\n                setStyle();\n\n                translation.x = rel.x;\n                translation.y = rel.y;\n                transform(transformList.collapse());\n                //   console.log('TouchHandler transform:', transform());\n              }\n            }\n          }\n        );\n      }\n      return true;\n    }\n    if((move || resize) && event.buttons == 0) {\n      return cancel();\n    }\n\n    if(event.index > 0) {\n      let rel = new Point(event).sub(event.start);\n      let absolute = new Point(start).add(rel);\n\n      if(resize) {\n        if(event.buttons > 0) resize(-rel.x, -rel.y);\n        else resize = resize.jump();\n      } else if(move) {\n        /*  window.crosshair.show = true;\n          window.crosshair.position = absolute;*/\n\n        //          console.log('move', { rel, absolute });\n        if(event.buttons > 0) move(rel.x, rel.y);\n        else move = move.jump();\n      }\n    }\n    function cancel() {\n      move = null;\n      resize = null;\n      window.crosshair.show = false;\n\n      if(box && box.style) Element.setCSS(box, css);\n      /*return*/ event.cancel();\n      return false;\n    }\n  }\n  window.oncontextmenu = function(e) {\n    const { x, y, index, buttons, start, type, target } = event;\n    let rect = Element.rect('.transformed-element-size');\n    let cons = Element.rect('#console');\n    if(rect && cons) if (rect.inside(event) && !cons.inside(event)) return true;\n    if(e.shiftKey && e.altKey) return true;\n    //console.log('oncontextmenu',  event);\n    return false;\n  };\n  window.processEvents = async function eventLoop() {\n    for await(let e of new EventIterator('touch')) {\n      const {\n        altKey,\n        bubbles,\n        button,\n        buttons,\n        cancelBubble,\n        cancelable,\n        clientX,\n        clientY,\n        composed,\n        ctrlKey,\n        detail,\n        eventPhase,\n        fromElement,\n        isTrusted,\n        layerX,\n        layerY,\n        metaKey,\n        movementX,\n        movementY,\n        offsetX,\n        offsetY,\n        pageX,\n        pageY,\n        path,\n        region,\n        relatedTarget,\n        returnValue,\n        screenX,\n        screenY,\n        shiftKey,\n        srcElement,\n        target,\n        timeStamp,\n        toElement,\n        type,\n        view,\n        which,\n        x,\n        y,\n        ...event\n      } = e;\n      // LogJS.info(`${type} ` + /* Util.toSource(e)+ */ ` ${x},${y} → ${Element.xpath(target)}`);\n    }\n  };\n  processEvents();\n\n  //  eventLoop();\n\n  window.styles = CSS.create('head');\n\n  /* document.addEventListener('keydown', event => {\n    const { ctrlKey, shiftKey, altKey, metaKey } = event;\n\n    if(true || ctrlKey || shiftKey || altKey || metaKey) {\n      const { key, code, keyCode } = event;\n      const { target, currentTarget } = event;\n      //console.log('keydown: ', (window.keyEvent = event));\n    }\n  });*/\n\n  window.addEventListener('wheel', event => {\n    const {\n      wheelDelta,\n      deltaMode,\n      deltaX,\n      deltaY,\n      screenX,\n      screenY,\n      clientX,\n      clientY,\n      pageX,\n      pageY,\n      x,\n      y,\n      offsetX,\n      offsetY,\n      layerX,\n      layerY\n    } = event;\n\n    window.wheelEvent = event;\n\n    const clientArea = Element.rect('body > div');\n    const sideBar = Element.rect('.sidebar');\n\n    if(sideBar.x2 > clientArea.x1) {\n      clientArea.width -= sideBar.x2;\n      clientArea.x = sideBar.x2;\n      clientArea.width = window.innerWidth - clientArea.x;\n    }\n    clientArea.height = window.innerHeight;\n    clientArea.x += container.parentElement.scrollLeft;\n\n    const clientCenter = clientArea.center;\n    const { target, currentTarget, buttons, altKey, ctrlKey, shiftKey } = event;\n    const pos = new Point(clientX, clientY);\n\n    if(\n      Element.walkUp(target)\n        .map(e => [...e.classList])\n        .flat()\n        .indexOf('ruler-container') != -1\n    )\n      return;\n\n    //console.log('wheel:', { deltaY, deltaMode, wheelDelta, target });\n\n    if(!pos.inside(clientArea)) return;\n\n    const dy = Math.sign(event.deltaY) * 53;\n\n    const wheelPos = -dy.toFixed(2);\n    let zoomVal = config.zoomLog();\n\n    zoomVal = altKey || ctrlKey || shiftKey ? 0 : Util.clamp(-100, 300, zoomVal + wheelPos * 0.1);\n    config.zoomLog(zoomVal);\n    AdjustZoom();\n  });\n\n  //console.error('AppMain done');\n\n  //console.log(globalThis);\n\n  /*  for(let path of [...Element.findAll('path')]) {\n    let points = new PointList([...SVG.pathIterator(path, 30, p => p.toFixed(3))]);\n  }*/\n});\nconst Module = {\n  noInitialRun: true,\n  onRuntimeInitialized: () => {\n    //console.log('initialized');\n    let myString = prompt('Enter a string:');\n    Module.callMain([myString]);\n  },\n  print: txt => alert(`The MD5 hash is: ${txt}`)\n};\n",
			"file": "main.js",
			"file_size": 96872,
			"file_write_time": 132823881657472348,
			"settings":
			{
				"buffer_size": 96869,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					253,
					1,
					"cut",
					null,
					"AQAAAI87AQAAAAAAjzsBAAAAAAATAAAAY2xhc3NOYW1lOiAnc21hbGwnLA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjzsBAAAAAACiOwEAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"paste",
					null,
					"AQAAAF07AQAAAAAAcDsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXTsBAAAAAABdOwEAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"left_delete",
					null,
					"AQAAAG87AQAAAAAAbzsBAAAAAAABAAAALA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcDsBAAAAAABwOwEAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG87AQAAAAAAcDsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbzsBAAAAAABvOwEAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"insert_snippet",
					{
						"contents": "'${0:$SELECTION}'"
					},
					"AgAAAI47AQAAAAAAjjsBAAAAAAAGAAAAQnV0dG9ujjsBAAAAAACWOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjjsBAAAAAACUOwEAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "img"
					},
					"BAAAAI87AQAAAAAAkDsBAAAAAAAAAAAAkDsBAAAAAACQOwEAAAAAAAYAAABCdXR0b26QOwEAAAAAAJE7AQAAAAAAAAAAAJE7AQAAAAAAkjsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjzsBAAAAAACVOwEAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": "src"
					},
					"BAAAAKw7AQAAAAAArTsBAAAAAAAAAAAArTsBAAAAAACtOwEAAAAAAAUAAABpbWFnZa07AQAAAAAArjsBAAAAAAAAAAAArjsBAAAAAACvOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArDsBAAAAAACxOwEAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": "alt"
					},
					"BAAAANk7AQAAAAAA2jsBAAAAAAAAAAAA2jsBAAAAAADaOwEAAAAAAAcAAABjYXB0aW9u2jsBAAAAAADbOwEAAAAAAAAAAADbOwEAAAAAANw7AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2TsBAAAAAADgOwEAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"left_delete",
					null,
					"AQAAAJc7AQAAAAAAlzsBAAAAAAALAAAAICAgICAgICAgIAo",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlzsBAAAAAACiOwEAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"cut",
					null,
					"AQAAANk7AQAAAAAA2TsBAAAAAAAUAAAALAogICAgICAgICAgLi4ucHJvcHM",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2TsBAAAAAADtOwEAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					1,
					"paste",
					null,
					"AgAAAPU7AQAAAAAACDwBAAAAAAAAAAAACDwBAAAAAAAIPAEAAAAAABQAAAAgICAgICAgIGgoQnV0dG9uLCB7Cg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9TsBAAAAAAAJPAEAAAAAAAAAAAAAAPC/"
				],
				[
					321,
					1,
					"paste",
					null,
					"AgAAAKs8AQAAAAAAvjwBAAAAAAAAAAAAvjwBAAAAAAC+PAEAAAAAABQAAAAgICAgICAgIGgoQnV0dG9uLCB7Cg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqzwBAAAAAAC/PAEAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"left_delete",
					null,
					"AQAAAAg8AQAAAAAACDwBAAAAAAAeAAAAICAgICAgICAgIGNsYXNzTmFtZTogJ3NtYWxsJywK",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACDwBAAAAAAAmPAEAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": "src"
					},
					"BAAAABI8AQAAAAAAEzwBAAAAAAAAAAAAEzwBAAAAAAATPAEAAAAAAAUAAABpbWFnZRM8AQAAAAAAFDwBAAAAAAAAAAAAFDwBAAAAAAAVPAEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEjwBAAAAAAAXPAEAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert_completion",
					{
						"completion": "srch",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "srch"
					},
					"AgAAABI8AQAAAAAAEjwBAAAAAAADAAAAc3JjEjwBAAAAAAAWPAEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFTwBAAAAAAAVPAEAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": "alt"
					},
					"BAAAAEA8AQAAAAAAQTwBAAAAAAAAAAAAQTwBAAAAAABBPAEAAAAAAAcAAABjYXB0aW9uQTwBAAAAAABCPAEAAAAAAAAAAABCPAEAAAAAAEM8AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQDwBAAAAAABHPAEAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "src"
					},
					"BAAAABI8AQAAAAAAEzwBAAAAAAAAAAAAEzwBAAAAAAATPAEAAAAAAAQAAABzcmNoEzwBAAAAAAAUPAEAAAAAAAAAAAAUPAEAAAAAABU8AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEjwBAAAAAAAWPAEAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					1,
					"insert",
					{
						"characters": "src"
					},
					"BAAAAMI8AQAAAAAAwzwBAAAAAAAAAAAAwzwBAAAAAADDPAEAAAAAAAUAAABpbWFnZcM8AQAAAAAAxDwBAAAAAAAAAAAAxDwBAAAAAADFPAEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwjwBAAAAAADHPAEAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"left_delete",
					null,
					"AQAAAJo8AQAAAAAAmjwBAAAAAAAeAAAAICAgICAgICAgIGNsYXNzTmFtZTogJ3NtYWxsJywK",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmjwBAAAAAAC4PAEAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": "alt"
					},
					"BAAAANE8AQAAAAAA0jwBAAAAAAAAAAAA0jwBAAAAAADSPAEAAAAAAAcAAABjYXB0aW9u0jwBAAAAAADTPAEAAAAAAAAAAADTPAEAAAAAANQ8AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0TwBAAAAAADYPAEAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"left_delete",
					null,
					"AQAAAFk8AQAAAAAAWTwBAAAAAAATAAAAICAgICAgICAgIC4uLnByb3BzCg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWTwBAAAAAABsPAEAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					1,
					"left_delete",
					null,
					"AQAAAMs8AQAAAAAAyzwBAAAAAAATAAAAICAgICAgICAgIC4uLnByb3BzCg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyzwBAAAAAADePAEAAAAAAAAAAAAAAPC/"
				],
				[
					392,
					1,
					"insert",
					{
						"characters": " b"
					},
					"AgAAAGk7AQAAAAAAajsBAAAAAAAAAAAAajsBAAAAAABrOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaTsBAAAAAABpOwEAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					2,
					"left_delete",
					null,
					"AgAAAGo7AQAAAAAAajsBAAAAAAABAAAAYmk7AQAAAAAAaTsBAAAAAAABAAAAIA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAazsBAAAAAABrOwEAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"paste",
					null,
					"AQAAAKE7AQAAAAAAtDsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoTsBAAAAAAChOwEAAAAAAAAAAAAAAPC/"
				],
				[
					406,
					1,
					"left_delete",
					null,
					"AQAAALM7AQAAAAAAszsBAAAAAAABAAAAIA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtDsBAAAAAAC0OwEAAAAAAAAAAAAAAPC/"
				],
				[
					407,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALM7AQAAAAAAtDsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAszsBAAAAAACzOwEAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					1,
					"left_delete",
					null,
					"AQAAALM7AQAAAAAAszsBAAAAAAABAAAAIA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtDsBAAAAAAC0OwEAAAAAAAAAAAAAAPC/"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALM7AQAAAAAAtDsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAszsBAAAAAACzOwEAAAAAAAAAAAAAAPC/"
				],
				[
					414,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAKA7AQAAAAAAoTsBAAAAAAAAAAAAoTsBAAAAAAChOwEAAAAAABQAAAAgY2xhc3NOYW1lOiAnc21hbGwnLA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoDsBAAAAAAC0OwEAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"insert",
					{
						"characters": "m,"
					},
					"AgAAANk7AQAAAAAA2jsBAAAAAAAAAAAA2jsBAAAAAADbOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2TsBAAAAAADZOwEAAAAAAAAAAAAAAPC/"
				],
				[
					420,
					2,
					"left_delete",
					null,
					"AgAAANo7AQAAAAAA2jsBAAAAAAABAAAALNk7AQAAAAAA2TsBAAAAAAABAAAAbQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2zsBAAAAAADbOwEAAAAAAAAAAAAAAPC/"
				],
				[
					421,
					1,
					"insert",
					{
						"characters": ",...props"
					},
					"CQAAANk7AQAAAAAA2jsBAAAAAAAAAAAA2jsBAAAAAADbOwEAAAAAAAAAAADbOwEAAAAAANw7AQAAAAAAAAAAANw7AQAAAAAA3TsBAAAAAAAAAAAA3TsBAAAAAADeOwEAAAAAAAAAAADeOwEAAAAAAN87AQAAAAAAAAAAAN87AQAAAAAA4DsBAAAAAAAAAAAA4DsBAAAAAADhOwEAAAAAAAAAAADhOwEAAAAAAOI7AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2TsBAAAAAADZOwEAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"paste",
					null,
					"AgAAAGA8AQAAAAAAaTwBAAAAAAAAAAAAaTwBAAAAAABpPAEAAAAAAAEAAAAs",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYDwBAAAAAABhPAEAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"paste",
					null,
					"AgAAANo8AQAAAAAA4zwBAAAAAAAAAAAA4zwBAAAAAADjPAEAAAAAAAEAAAAs",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2jwBAAAAAADbPAEAAAAAAAAAAAAAAPC/"
				],
				[
					485,
					1,
					"insert",
					{
						"characters": " 'data-"
					},
					"BwAAANo7AQAAAAAA2zsBAAAAAAAAAAAA2zsBAAAAAADcOwEAAAAAAAAAAADcOwEAAAAAAN07AQAAAAAAAAAAAN07AQAAAAAA3jsBAAAAAAAAAAAA3jsBAAAAAADfOwEAAAAAAAAAAADfOwEAAAAAAOA7AQAAAAAAAAAAAOA7AQAAAAAA4TsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2jsBAAAAAADaOwEAAAAAAAAAAAAAAPC/"
				],
				[
					486,
					1,
					"insert",
					{
						"characters": "key':"
					},
					"BQAAAOE7AQAAAAAA4jsBAAAAAAAAAAAA4jsBAAAAAADjOwEAAAAAAAAAAADjOwEAAAAAAOQ7AQAAAAAAAAAAAOQ7AQAAAAAA5TsBAAAAAAAAAAAA5TsBAAAAAADmOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4TsBAAAAAADhOwEAAAAAAAAAAAAAAPC/"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": " 'name"
					},
					"BgAAAOY7AQAAAAAA5zsBAAAAAAAAAAAA5zsBAAAAAADoOwEAAAAAAAAAAADoOwEAAAAAAOk7AQAAAAAAAAAAAOk7AQAAAAAA6jsBAAAAAAAAAAAA6jsBAAAAAADrOwEAAAAAAAAAAADrOwEAAAAAAOw7AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5jsBAAAAAADmOwEAAAAAAAAAAAAAAPC/"
				],
				[
					488,
					1,
					"insert",
					{
						"characters": "0'"
					},
					"AgAAAOw7AQAAAAAA7TsBAAAAAAAAAAAA7TsBAAAAAADuOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7DsBAAAAAADsOwEAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					2,
					"left_delete",
					null,
					"AgAAAO07AQAAAAAA7TsBAAAAAAABAAAAJ+w7AQAAAAAA7DsBAAAAAAABAAAAMA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7jsBAAAAAADuOwEAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": "',"
					},
					"AgAAAOw7AQAAAAAA7TsBAAAAAAAAAAAA7TsBAAAAAADuOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7DsBAAAAAADsOwEAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO47AQAAAAAA7zsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7jsBAAAAAADuOwEAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"paste",
					null,
					"AQAAAHY8AQAAAAAAijwBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdjwBAAAAAAB2PAEAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": "mtime"
					},
					"BgAAAIM8AQAAAAAAhDwBAAAAAAAAAAAAhDwBAAAAAACEPAEAAAAAAAQAAABuYW1lhDwBAAAAAACFPAEAAAAAAAAAAACFPAEAAAAAAIY8AQAAAAAAAAAAAIY8AQAAAAAAhzwBAAAAAAAAAAAAhzwBAAAAAACIPAEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgzwBAAAAAACHPAEAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"paste",
					null,
					"AQAAAAU9AQAAAAAAGT0BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABT0BAAAAAAAFPQEAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"insert",
					{
						"characters": "size"
					},
					"BQAAABI9AQAAAAAAEz0BAAAAAAAAAAAAEz0BAAAAAAATPQEAAAAAAAQAAABuYW1lEz0BAAAAAAAUPQEAAAAAAAAAAAAUPQEAAAAAABU9AQAAAAAAAAAAABU9AQAAAAAAFj0BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEj0BAAAAAAAWPQEAAAAAAAAAAAAAAPC/"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": ",,"
					},
					"AgAAAG87AQAAAAAAcDsBAAAAAAAAAAAAcDsBAAAAAABxOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbzsBAAAAAABvOwEAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					1,
					"left_delete",
					null,
					"AQAAAHA7AQAAAAAAcDsBAAAAAAABAAAALA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcTsBAAAAAABxOwEAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": " onChange"
					},
					"CQAAAHA7AQAAAAAAcTsBAAAAAAAAAAAAcTsBAAAAAAByOwEAAAAAAAAAAAByOwEAAAAAAHM7AQAAAAAAAAAAAHM7AQAAAAAAdDsBAAAAAAAAAAAAdDsBAAAAAAB1OwEAAAAAAAAAAAB1OwEAAAAAAHY7AQAAAAAAAAAAAHY7AQAAAAAAdzsBAAAAAAAAAAAAdzsBAAAAAAB4OwEAAAAAAAAAAAB4OwEAAAAAAHk7AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcDsBAAAAAABwOwEAAAAAAAAAAAAAAPC/"
				],
				[
					527,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHk7AQAAAAAAezsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeTsBAAAAAAB5OwEAAAAAAAAAAAAAAPC/"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": "state"
					},
					"BQAAAHo7AQAAAAAAezsBAAAAAAAAAAAAezsBAAAAAAB8OwEAAAAAAAAAAAB8OwEAAAAAAH07AQAAAAAAAAAAAH07AQAAAAAAfjsBAAAAAAAAAAAAfjsBAAAAAAB/OwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAejsBAAAAAAB6OwEAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					5,
					"left_delete",
					null,
					"BQAAAH47AQAAAAAAfjsBAAAAAAABAAAAZX07AQAAAAAAfTsBAAAAAAABAAAAdHw7AQAAAAAAfDsBAAAAAAABAAAAYXs7AQAAAAAAezsBAAAAAAABAAAAdHo7AQAAAAAAejsBAAAAAAABAAAAcw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfzsBAAAAAAB/OwEAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": "inde"
					},
					"BAAAAHo7AQAAAAAAezsBAAAAAAAAAAAAezsBAAAAAAB8OwEAAAAAAAAAAAB8OwEAAAAAAH07AQAAAAAAAAAAAH07AQAAAAAAfjsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAejsBAAAAAAB6OwEAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"left_delete",
					null,
					"AQAAAH47AQAAAAAAfjsBAAAAAAABAAAAKQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfzsBAAAAAAB/OwEAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": "x)"
					},
					"AgAAAH47AQAAAAAAfzsBAAAAAAAAAAAAfzsBAAAAAACAOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfjsBAAAAAAB+OwEAAAAAAAAAAAAAAPC/"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIA7AQAAAAAAgTsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgDsBAAAAAACAOwEAAAAAAAAAAAAAAPC/"
				],
				[
					535,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIE7AQAAAAAAgzsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgTsBAAAAAACBOwEAAAAAAAAAAAAAAPC/"
				],
				[
					536,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAII7AQAAAAAAgzsBAAAAAAAAAAAAgzsBAAAAAACHOwEAAAAAAAAAAACHOwEAAAAAAIg7AQAAAAAAAAAAAIg7AQAAAAAAjDsBAAAAAAAAAAAAgzsBAAAAAACDOwEAAAAAAAQAAAAgICAggzsBAAAAAACJOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgjsBAAAAAACCOwEAAAAAAAAAAAAAAPC/"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": "console.log'"
					},
					"DAAAAIk7AQAAAAAAijsBAAAAAAAAAAAAijsBAAAAAACLOwEAAAAAAAAAAACLOwEAAAAAAIw7AQAAAAAAAAAAAIw7AQAAAAAAjTsBAAAAAAAAAAAAjTsBAAAAAACOOwEAAAAAAAAAAACOOwEAAAAAAI87AQAAAAAAAAAAAI87AQAAAAAAkDsBAAAAAAAAAAAAkDsBAAAAAACROwEAAAAAAAAAAACROwEAAAAAAJI7AQAAAAAAAAAAAJI7AQAAAAAAkzsBAAAAAAAAAAAAkzsBAAAAAACUOwEAAAAAAAAAAACUOwEAAAAAAJU7AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiTsBAAAAAACJOwEAAAAAAAAAAAAAAPC/"
				],
				[
					538,
					1,
					"left_delete",
					null,
					"AQAAAJQ7AQAAAAAAlDsBAAAAAAABAAAAJw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlTsBAAAAAACVOwEAAAAAAAAAAAAAAPC/"
				],
				[
					539,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJQ7AQAAAAAAljsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlDsBAAAAAACUOwEAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJU7AQAAAAAAlzsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlTsBAAAAAACVOwEAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": "Sort"
					},
					"BAAAAJY7AQAAAAAAlzsBAAAAAAAAAAAAlzsBAAAAAACYOwEAAAAAAAAAAACYOwEAAAAAAJk7AQAAAAAAAAAAAJk7AQAAAAAAmjsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAljsBAAAAAACWOwEAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": " order"
					},
					"BgAAAJo7AQAAAAAAmzsBAAAAAAAAAAAAmzsBAAAAAACcOwEAAAAAAAAAAACcOwEAAAAAAJ07AQAAAAAAAAAAAJ07AQAAAAAAnjsBAAAAAAAAAAAAnjsBAAAAAACfOwEAAAAAAAAAAACfOwEAAAAAAKA7AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmjsBAAAAAACaOwEAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"insert",
					{
						"characters": " changed"
					},
					"CAAAAKA7AQAAAAAAoTsBAAAAAAAAAAAAoTsBAAAAAACiOwEAAAAAAAAAAACiOwEAAAAAAKM7AQAAAAAAAAAAAKM7AQAAAAAApDsBAAAAAAAAAAAApDsBAAAAAAClOwEAAAAAAAAAAAClOwEAAAAAAKY7AQAAAAAAAAAAAKY7AQAAAAAApzsBAAAAAAAAAAAApzsBAAAAAACoOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoDsBAAAAAACgOwEAAAAAAAAAAAAAAPC/"
				],
				[
					545,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKk7AQAAAAAAqjsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqTsBAAAAAACpOwEAAAAAAAAAAAAAAPC/"
				],
				[
					546,
					1,
					"insert",
					{
						"characters": " index"
					},
					"BgAAAKo7AQAAAAAAqzsBAAAAAAAAAAAAqzsBAAAAAACsOwEAAAAAAAAAAACsOwEAAAAAAK07AQAAAAAAAAAAAK07AQAAAAAArjsBAAAAAAAAAAAArjsBAAAAAACvOwEAAAAAAAAAAACvOwEAAAAAALA7AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqjsBAAAAAACqOwEAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALE7AQAAAAAAsjsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsTsBAAAAAACxOwEAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALI7AQAAAAAAszsBAAAAAAAAAAAAszsBAAAAAAC5OwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsjsBAAAAAACyOwEAAAAAAAAAAAAAAPC/"
				],
				[
					556,
					1,
					"paste",
					null,
					"AQAAAIg7AQAAAAAAszsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiDsBAAAAAACIOwEAAAAAAAAAAAAAAPC/"
				],
				[
					560,
					1,
					"insert",
					{
						"characters": "evebnt"
					},
					"CAAAAHo7AQAAAAAAezsBAAAAAAAAAAAAezsBAAAAAAB7OwEAAAAAAAUAAABpbmRleNo7AQAAAAAA2jsBAAAAAAAGAAAAICAgICAgezsBAAAAAAB8OwEAAAAAAAAAAAB8OwEAAAAAAH07AQAAAAAAAAAAAH07AQAAAAAAfjsBAAAAAAAAAAAAfjsBAAAAAAB/OwEAAAAAAAAAAAB/OwEAAAAAAIA7AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAejsBAAAAAAB/OwEAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					3,
					"left_delete",
					null,
					"AwAAAH87AQAAAAAAfzsBAAAAAAABAAAAdH47AQAAAAAAfjsBAAAAAAABAAAAbn07AQAAAAAAfTsBAAAAAAABAAAAYg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgDsBAAAAAACAOwEAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "nt"
					},
					"AgAAAH07AQAAAAAAfjsBAAAAAAAAAAAAfjsBAAAAAAB/OwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfTsBAAAAAAB9OwEAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"paste",
					null,
					"AgAAANY7AQAAAAAA2zsBAAAAAAAAAAAA2zsBAAAAAADbOwEAAAAAAAUAAABpbmRleA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1jsBAAAAAADbOwEAAAAAAAAAAAAAAPC/"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAALI7AQAAAAAAszsBAAAAAAAAAAAAszsBAAAAAAC8OwEAAAAAAAAAAAC8OwEAAAAAAL07AQAAAAAAAAAAAL07AQAAAAAAvjsBAAAAAAAAAAAAvjsBAAAAAAC/OwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsjsBAAAAAACyOwEAAAAAAAAAAAAAAPC/"
				],
				[
					574,
					1,
					"insert",
					{
						"characters": " key"
					},
					"BAAAAL87AQAAAAAAwDsBAAAAAAAAAAAAwDsBAAAAAADBOwEAAAAAAAAAAADBOwEAAAAAAMI7AQAAAAAAAAAAAMI7AQAAAAAAwzsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvzsBAAAAAAC/OwEAAAAAAAAAAAAAAPC/"
				],
				[
					575,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAMM7AQAAAAAAxDsBAAAAAAAAAAAAxDsBAAAAAADFOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwzsBAAAAAADDOwEAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					1,
					"insert",
					{
						"characters": " tar"
					},
					"BAAAAMU7AQAAAAAAxjsBAAAAAAAAAAAAxjsBAAAAAADHOwEAAAAAAAAAAADHOwEAAAAAAMg7AQAAAAAAAAAAAMg7AQAAAAAAyTsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxTsBAAAAAADFOwEAAAAAAAAAAAAAAPC/"
				],
				[
					577,
					1,
					"insert",
					{
						"characters": "get.getAttribute"
					},
					"EAAAAMk7AQAAAAAAyjsBAAAAAAAAAAAAyjsBAAAAAADLOwEAAAAAAAAAAADLOwEAAAAAAMw7AQAAAAAAAAAAAMw7AQAAAAAAzTsBAAAAAAAAAAAAzTsBAAAAAADOOwEAAAAAAAAAAADOOwEAAAAAAM87AQAAAAAAAAAAAM87AQAAAAAA0DsBAAAAAAAAAAAA0DsBAAAAAADROwEAAAAAAAAAAADROwEAAAAAANI7AQAAAAAAAAAAANI7AQAAAAAA0zsBAAAAAAAAAAAA0zsBAAAAAADUOwEAAAAAAAAAAADUOwEAAAAAANU7AQAAAAAAAAAAANU7AQAAAAAA1jsBAAAAAAAAAAAA1jsBAAAAAADXOwEAAAAAAAAAAADXOwEAAAAAANg7AQAAAAAAAAAAANg7AQAAAAAA2TsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyTsBAAAAAADJOwEAAAAAAAAAAAAAAPC/"
				],
				[
					578,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANk7AQAAAAAA2zsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2TsBAAAAAADZOwEAAAAAAAAAAAAAAPC/"
				],
				[
					579,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANo7AQAAAAAA3DsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2jsBAAAAAADaOwEAAAAAAAAAAAAAAPC/"
				],
				[
					580,
					1,
					"insert",
					{
						"characters": "data-ey"
					},
					"BwAAANs7AQAAAAAA3DsBAAAAAAAAAAAA3DsBAAAAAADdOwEAAAAAAAAAAADdOwEAAAAAAN47AQAAAAAAAAAAAN47AQAAAAAA3zsBAAAAAAAAAAAA3zsBAAAAAADgOwEAAAAAAAAAAADgOwEAAAAAAOE7AQAAAAAAAAAAAOE7AQAAAAAA4jsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2zsBAAAAAADbOwEAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					2,
					"left_delete",
					null,
					"AgAAAOE7AQAAAAAA4TsBAAAAAAABAAAAeeA7AQAAAAAA4DsBAAAAAAABAAAAZQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4jsBAAAAAADiOwEAAAAAAAAAAAAAAPC/"
				],
				[
					582,
					1,
					"insert",
					{
						"characters": "key"
					},
					"AwAAAOA7AQAAAAAA4TsBAAAAAAAAAAAA4TsBAAAAAADiOwEAAAAAAAAAAADiOwEAAAAAAOM7AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4DsBAAAAAADgOwEAAAAAAAAAAAAAAPC/"
				],
				[
					584,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOU7AQAAAAAA5jsBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5TsBAAAAAADlOwEAAAAAAAAAAAAAAPC/"
				],
				[
					585,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOY7AQAAAAAA5zsBAAAAAAAAAAAA5zsBAAAAAADwOwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5jsBAAAAAADmOwEAAAAAAAAAAAAAAPC/"
				],
				[
					602,
					1,
					"paste",
					null,
					"AgAAABQ8AQAAAAAAFzwBAAAAAAAAAAAAFzwBAAAAAAAXPAEAAAAAAAUAAABldmVudA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFDwBAAAAAAAZPAEAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": "\nconfig.sortOr"
					},
					"EAAAABk8AQAAAAAAGjwBAAAAAAAAAAAAGjwBAAAAAAAbPAEAAAAAAAAAAADnOwEAAAAAAOc7AQAAAAAACQAAACAgICAgICAgIBI8AQAAAAAAEzwBAAAAAAAAAAAAEzwBAAAAAAAUPAEAAAAAAAAAAAAUPAEAAAAAABU8AQAAAAAAAAAAABU8AQAAAAAAFjwBAAAAAAAAAAAAFjwBAAAAAAAXPAEAAAAAAAAAAAAXPAEAAAAAABg8AQAAAAAAAAAAABg8AQAAAAAAGTwBAAAAAAAAAAAAGTwBAAAAAAAaPAEAAAAAAAAAAAAaPAEAAAAAABs8AQAAAAAAAAAAABs8AQAAAAAAHDwBAAAAAAAAAAAAHDwBAAAAAAAdPAEAAAAAAAAAAAAdPAEAAAAAAB48AQAAAAAAAAAAAB48AQAAAAAAHzwBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGTwBAAAAAAAZPAEAAAAAAAAAAAAAAPC/"
				],
				[
					610,
					1,
					"insert",
					{
						"characters": "der"
					},
					"AwAAAB88AQAAAAAAIDwBAAAAAAAAAAAAIDwBAAAAAAAhPAEAAAAAAAAAAAAhPAEAAAAAACI8AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHzwBAAAAAAAfPAEAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					5,
					"left_delete",
					null,
					"BQAAACE8AQAAAAAAITwBAAAAAAABAAAAciA8AQAAAAAAIDwBAAAAAAABAAAAZR88AQAAAAAAHzwBAAAAAAABAAAAZB48AQAAAAAAHjwBAAAAAAABAAAAch08AQAAAAAAHTwBAAAAAAABAAAATw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIjwBAAAAAAAiPAEAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"insert",
					{
						"characters": "Key"
					},
					"AwAAAB08AQAAAAAAHjwBAAAAAAAAAAAAHjwBAAAAAAAfPAEAAAAAAAAAAAAfPAEAAAAAACA8AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHTwBAAAAAAAdPAEAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACA8AQAAAAAAIjwBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIDwBAAAAAAAgPAEAAAAAAAAAAAAAAPC/"
				],
				[
					614,
					1,
					"insert",
					{
						"characters": "key"
					},
					"AwAAACE8AQAAAAAAIjwBAAAAAAAAAAAAIjwBAAAAAAAjPAEAAAAAAAAAAAAjPAEAAAAAACQ8AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAITwBAAAAAAAhPAEAAAAAAAAAAAAAAPC/"
				],
				[
					616,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACU8AQAAAAAAJjwBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJTwBAAAAAAAlPAEAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANA8AQAAAAAA0TwBAAAAAAAAAAAA0TwBAAAAAADXPAEAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANA8AQAAAAAA0DwBAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "fire.html",
			"settings":
			{
				"buffer_size": 500,
				"line_ending": "Unix"
			}
		},
		{
			"file": "fire.js",
			"settings":
			{
				"buffer_size": 5198,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					86,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAI4SAAAAAAAAjxIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjhIAAAAAAACOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"left_delete",
					null,
					"AQAAAI4SAAAAAAAAjhIAAAAAAAABAAAAdg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjxIAAAAAAACPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"paste",
					null,
					"AQAAAI4SAAAAAAAAuBIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjhIAAAAAAACOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					2,
					"left_delete",
					null,
					"AgAAAJ8SAAAAAAAAnxIAAAAAAAAWAAAAJHtlLnR5cGV9IEAgJHt4fSwke3l9YJ4SAAAAAAAAnhIAAAAAAAABAAAAYA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnxIAAAAAAAC1EgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJ4SAAAAAAAAnxIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnhIAAAAAAACeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"left_delete",
					null,
					"AQAAAJ4SAAAAAAAAnhIAAAAAAAABAAAAcg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnxIAAAAAAACfEgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJ4SAAAAAAAAoBIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnhIAAAAAAACeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "rect"
					},
					"BAAAAJ8SAAAAAAAAoBIAAAAAAAAAAAAAoBIAAAAAAAChEgAAAAAAAAAAAAChEgAAAAAAAKISAAAAAAAAAAAAAKISAAAAAAAAoxIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnxIAAAAAAACfEgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKQSAAAAAAAApRIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApBIAAAAAAACkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " ret"
					},
					"BAAAAKUSAAAAAAAAphIAAAAAAAAAAAAAphIAAAAAAACnEgAAAAAAAAAAAACnEgAAAAAAAKgSAAAAAAAAAAAAAKgSAAAAAAAAqRIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApRIAAAAAAAClEgAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					2,
					"right_delete",
					null,
					"AgAAAJASAAAAAAAAkBIAAAAAAAABAAAAL5ASAAAAAAAAkBIAAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkBIAAAAAAACQEgAAAAAAAAAAAAAAADBA"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "ct"
					},
					"AgAAAKcSAAAAAAAAqBIAAAAAAAAAAAAAqBIAAAAAAACpEgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApxIAAAAAAACnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					3,
					"left_delete",
					null,
					"AwAAAKgSAAAAAAAAqBIAAAAAAAABAAAAdKcSAAAAAAAApxIAAAAAAAABAAAAY6YSAAAAAAAAphIAAAAAAAABAAAAdA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqRIAAAAAAACpEgAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "ct"
					},
					"AgAAAKYSAAAAAAAApxIAAAAAAAAAAAAApxIAAAAAAACoEgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAphIAAAAAAACmEgAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "\nwindow.add"
					},
					"DAAAAAcUAAAAAAAACBQAAAAAAAAAAAAACBQAAAAAAAAKFAAAAAAAAAAAAAAKFAAAAAAAAAsUAAAAAAAAAAAAAAsUAAAAAAAADBQAAAAAAAAAAAAADBQAAAAAAAANFAAAAAAAAAAAAAANFAAAAAAAAA4UAAAAAAAAAAAAAA4UAAAAAAAADxQAAAAAAAAAAAAADxQAAAAAAAAQFAAAAAAAAAAAAAAQFAAAAAAAABEUAAAAAAAAAAAAABEUAAAAAAAAEhQAAAAAAAAAAAAAEhQAAAAAAAATFAAAAAAAAAAAAAATFAAAAAAAABQUAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABxQAAAAAAAAHFAAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert_completion",
					{
						"completion": "addEventListener($1)",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "addEventListener(...)"
					},
					"AgAAABEUAAAAAAAAERQAAAAAAAADAAAAYWRkERQAAAAAAAAjFAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFBQAAAAAAAAUFAAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACIUAAAAAAAAJBQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIhQAAAAAAAAiFAAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAACIUAAAAAAAAIhQAAAAAAAABAAAAKCIUAAAAAAAAIhQAAAAAAAABAAAAKQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIxQAAAAAAAAjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACIUAAAAAAAAJBQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIhQAAAAAAAAiFAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAACIUAAAAAAAAIhQAAAAAAAABAAAAIiIUAAAAAAAAIhQAAAAAAAABAAAAIg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIxQAAAAAAAAjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACIUAAAAAAAAJBQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIhQAAAAAAAAiFAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "0r"
					},
					"AgAAACMUAAAAAAAAJBQAAAAAAAAAAAAAJBQAAAAAAAAlFAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIxQAAAAAAAAjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					2,
					"left_delete",
					null,
					"AgAAACQUAAAAAAAAJBQAAAAAAAABAAAAciMUAAAAAAAAIxQAAAAAAAABAAAAMA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJRQAAAAAAAAlFAAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "resize"
					},
					"BgAAACMUAAAAAAAAJBQAAAAAAAAAAAAAJBQAAAAAAAAlFAAAAAAAAAAAAAAlFAAAAAAAACYUAAAAAAAAAAAAACYUAAAAAAAAJxQAAAAAAAAAAAAAJxQAAAAAAAAoFAAAAAAAAAAAAAAoFAAAAAAAACkUAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIxQAAAAAAAAjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACoUAAAAAAAAKxQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKhQAAAAAAAAqFAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " Res"
					},
					"BAAAACsUAAAAAAAALBQAAAAAAAAAAAAALBQAAAAAAAAtFAAAAAAAAAAAAAAtFAAAAAAAAC4UAAAAAAAAAAAAAC4UAAAAAAAALxQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKxQAAAAAAAArFAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert_completion",
					{
						"completion": "ResizeHandler",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ResizeHandler"
					},
					"AgAAACwUAAAAAAAALBQAAAAAAAADAAAAUmVzLBQAAAAAAAA5FAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALxQAAAAAAAAvFAAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADkUAAAAAAAAOhQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAORQAAAAAAAA5FAAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoUAAAAAAAAOxQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOhQAAAAAAAA6FAAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADsUAAAAAAAAPRQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOxQAAAAAAAA7FAAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "tr"
					},
					"AgAAADwUAAAAAAAAPRQAAAAAAAAAAAAAPRQAAAAAAAA+FAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPBQAAAAAAAA8FAAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					2,
					"left_delete",
					null,
					"AgAAAD0UAAAAAAAAPRQAAAAAAAABAAAAcjwUAAAAAAAAPBQAAAAAAAABAAAAdA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPhQAAAAAAAA+FAAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAADsUAAAAAAAAOxQAAAAAAAABAAAAJzsUAAAAAAAAOxQAAAAAAAABAAAAJw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPBQAAAAAAAA8FAAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "true"
					},
					"BAAAADsUAAAAAAAAPBQAAAAAAAAAAAAAPBQAAAAAAAA9FAAAAAAAAAAAAAA9FAAAAAAAAD4UAAAAAAAAAAAAAD4UAAAAAAAAPxQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOxQAAAAAAAA7FAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEAUAAAAAAAAQRQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQBQAAAAAAABAFAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"cut",
					null,
					"AQAAAAgUAAAAAAAACBQAAAAAAAA6AAAAICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgUmVzaXplSGFuZGxlciwgdHJ1ZSk7Cg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACBQAAAAAAABCFAAAAAAAAAAAAAAAAAAA"
				],
				[
					185,
					1,
					"paste",
					null,
					"AQAAAFUTAAAAAAAAjxMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVRMAAAAAAABVEwAAAAAAAAAAAAAAAAAA"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFUTAAAAAAAAVhMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVRMAAAAAAABVEwAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "list.html",
			"settings":
			{
				"buffer_size": 374,
				"line_ending": "Unix"
			}
		},
		{
			"file": "static/css/list.css",
			"settings":
			{
				"buffer_size": 801,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": "min-width"
					},
					"CgAAAFABAAAAAAAAUQEAAAAAAAAAAAAAUQEAAAAAAABRAQAAAAAAAAkAAABtYXgtd2lkdGhRAQAAAAAAAFIBAAAAAAAAAAAAAFIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABUAQAAAAAAAAAAAABUAQAAAAAAAFUBAAAAAAAAAAAAAFUBAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABXAQAAAAAAAAAAAABXAQAAAAAAAFgBAAAAAAAAAAAAAFgBAAAAAAAAWQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFABAAAAAAAAWQEAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "debugger-server.js",
			"settings":
			{
				"buffer_size": 12640,
				"line_ending": "Unix"
			}
		},
		{
			"file": "grammar-geda-netlist.js",
			"settings":
			{
				"buffer_size": 1913,
				"line_ending": "Unix"
			}
		},
		{
			"file": "libraries.js",
			"settings":
			{
				"buffer_size": 1407,
				"line_ending": "Unix"
			}
		},
		{
			"file": "list-proxies.js",
			"settings":
			{
				"buffer_size": 10062,
				"line_ending": "Unix"
			}
		},
		{
			"file": "plot-cv.js",
			"settings":
			{
				"buffer_size": 2430,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-minnet.js",
			"settings":
			{
				"buffer_size": 2946,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-net.js",
			"settings":
			{
				"buffer_size": 2878,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-cv.js",
			"settings":
			{
				"buffer_size": 8677,
				"line_ending": "Unix"
			}
		},
		{
			"file": "config.js",
			"settings":
			{
				"buffer_size": 852,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AQAAAKkAAAAAAAAAoQEAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpAAAAAAAAAKkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAACQBAAAAAAAAJAEAAAAAAAAGAAAAcmV0dXJu",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkAQAAAAAAACoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJkBAAAAAAAAmgEAAAAAAAAAAAAAmgEAAAAAAACdAQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZAQAAAAAAAJkBAAAAAAAA////////738"
				],
				[
					18,
					1,
					"paste",
					null,
					"AQAAAJ0BAAAAAAAACAIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAQAAAAAAAJ0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "lket"
					},
					"BAAAACIBAAAAAAAAIwEAAAAAAAAAAAAAIwEAAAAAAAAkAQAAAAAAAAAAAAAkAQAAAAAAACUBAAAAAAAAAAAAACUBAAAAAAAAJgEAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiAQAAAAAAACIBAAAAAAAAAAAAAAAAAAA"
				],
				[
					21,
					3,
					"left_delete",
					null,
					"AwAAACUBAAAAAAAAJQEAAAAAAAABAAAAdCQBAAAAAAAAJAEAAAAAAAABAAAAZSMBAAAAAAAAIwEAAAAAAAABAAAAaw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmAQAAAAAAACYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAACMBAAAAAAAAJAEAAAAAAAAAAAAAJAEAAAAAAAAlAQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAQAAAAAAACMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAACUBAAAAAAAAJgEAAAAAAAAAAAAAJgEAAAAAAAAnAQAAAAAAAAAAAAAnAQAAAAAAACgBAAAAAAAAAAAAACgBAAAAAAAAKQEAAAAAAAAAAAAAKQEAAAAAAAAqAQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlAQAAAAAAACUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAABACAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAASAgAAAAAAAAAAAAASAgAAAAAAABMCAAAAAAAAAAAAABMCAAAAAAAAFAIAAAAAAAAAAAAAFAIAAAAAAAAVAgAAAAAAAAAAAAAVAgAAAAAAABYCAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQAgAAAAAAABACAAAAAAAAAAAAAAAAUkA"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " ret;"
					},
					"BQAAABYCAAAAAAAAFwIAAAAAAAAAAAAAFwIAAAAAAAAYAgAAAAAAAAAAAAAYAgAAAAAAABkCAAAAAAAAAAAAABkCAAAAAAAAGgIAAAAAAAAAAAAAGgIAAAAAAAAbAgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWAgAAAAAAABYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAB4CAAAAAAAAHgIAAAAAAABvAQAAZXhwb3J0IGZ1bmN0aW9uIFNhdmVDb25maWcoY29uZmlnT2JqKSB7CiAgY29uZmlnT2JqID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGNvbmZpZ09iaikubWFwKChbaywgdl0pID0+IFtrLCArdl0pKTsKICBsZXQgZmlsZSA9IHN0ZC5vcGVuKGJhc2VuYW1lKCkgKyAnLmNvbmZpZy5qc29uJywgJ3crYicpOwogIGZpbGUucHV0cyhKU09OLnN0cmluZ2lmeShjb25maWdPYmosIG51bGwsIDIpICsgJ1xuJyk7CiAgZmlsZS5jbG9zZSgpOwogIGNvbnNvbGUubG9nKGBTYXZlZCBjb25maWcgdG8gJyR7YmFzZW5hbWUoKSArICcuY29uZmlnLmpzb24nfSdgLCBpbnNwZWN0KGNvbmZpZ09iaiwgeyBjb21wYWN0OiBmYWxzZSB9KSk7Cn0KCg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAgAAAAAAAI0DAAAAAAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAB4CAAAAAAAAHwIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAgAAAAAAAB4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"cut",
					null,
					"AQAAABwAAAAAAAAAHAAAAAAAAAAfAAAAaW1wb3J0IGluc3BlY3QgZnJvbSAnaW5zcGVjdCc7Cg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAAAAAAAAADsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					2,
					"paste",
					null,
					"AgAAABwAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAABaAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "fs"
					},
					"AwAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABDAAAAAAAAAAcAAABpbnNwZWN0QwAAAAAAAABEAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCAAAAAAAAAEkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAE0AAAAAAAAATgAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNAAAAAAAAAE0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "fs"
					},
					"AwAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABMAAAAAAAAAAgAAABpbmZzcGVjdEwAAAAAAAAATQAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLAAAAAAAAAFMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAFwDAAAAAAAAXQMAAAAAAAAAAAAAXQMAAAAAAABdAwAAAAAAAAkAAAAgaW5zcGVjdCg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAwAAAAAAAGUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"left_delete",
					null,
					"AQAAAGYDAAAAAAAAZgMAAAAAAAAVAAAALCB7IGNvbXBhY3Q6IGZhbHNlIH0p",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmAwAAAAAAAHsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					1,
					"left_delete",
					null,
					"AQAAABwAAAAAAAAAHAAAAAAAAAAfAAAAaW1wb3J0IGluc3BlY3QgZnJvbSAnaW5zcGVjdCc7Cg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAAAAAAAAADsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAaW1wb3J0ICogYXMgc3RkIGZyb20gJ3N0ZCc7Cg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					99,
					1,
					"paste",
					null,
					"AQAAAPgBAAAAAAAAZAMAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4AQAAAAAAAPgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGMDAAAAAAAAZAMAAAAAAAAAAAAAZAMAAAAAAABkAwAAAAAAAE0BAAAKCmV4cG9ydCBmdW5jdGlvbiBMb2FkQ29uZmlnKCkgewogIGxldCBzdHIgPSBzdGQubG9hZEZpbGUoYmFzZW5hbWUoKSArICcuY29uZmlnLmpzb24nKTsKICBsZXQgY29uZmlnT2JqID0gSlNPTi5wYXJzZShzdHIgfHwgJ3t9Jyk7CgogIGNvbmZpZ09iaiA9IE9iamVjdC5mcm9tRW50cmllcygKICAgIE9iamVjdC5lbnRyaWVzKGNvbmZpZ09iaikKICAgICAgLm1hcCgoW2ssIHZdKSA9PiBbaywgK3ZdKQogICAgICAuZmlsdGVyKChbaywgdl0pID0+ICFpc05hTih2KSkKICApOwogIGNvbnNvbGUubG9nKCdMb2FkQ29uZmlnOicsIGNvbmZpZ09iaik7CiAgcmV0dXJuIGNvbmZpZ09iajsKfQo",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjAwAAAAAAALAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					1,
					"",
					null,
					"AQAAAAcBAAAAAAAACQEAAAAAAAAKAAAAZmlsZXN5c3RlbQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHAQAAAAAAABEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"",
					null,
					"AQAAABUCAAAAAAAAFwIAAAAAAAAKAAAAZmlsZXN5c3RlbQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVAgAAAAAAAB8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAFQDAAAAAAAAVQMAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUAwAAAAAAAFQDAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"revert",
					null,
					"CQAAAAAAAAAAAAAAAAAAAAAAAABVAwAAaW1wb3J0IGZzIGZyb20gJ2ZzJzsKaW1wb3J0IHsgbWVtb2l6ZSB9IGZyb20gJy4vbGliL21pc2MuanMnOwoKbGV0IGJhc2VuYW1lID0gbWVtb2l6ZSgoKSA9PiBwcm9jZXNzLmFyZ3ZbMV0ucmVwbGFjZSgvXC5qcyQvLCAnJykpOwoKZnVuY3Rpb24gU2F2ZUNvbmZpZyhjb25maWdPYmopIHsKICBjb25maWdPYmogPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoY29uZmlnT2JqKS5tYXAoKFtrLCB2XSkgPT4gW2ssICt2XSkpOwoKbGV0IHJldD0gICBmcy53cml0ZUZpbGUoVXRpbC5nZXRBcmd2KClbMV0ucmVwbGFjZSgvXC5qcyQvLCAnLmNvbmZpZy5qc29uJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZ09iaiwgbnVsbCwgMikgKyAnXG4nKTsKICAgICBjb25zb2xlLmxvZyhgU2F2ZWQgY29uZmlnIHRvICcke2Jhc2VuYW1lKCkgKyAnLmNvbmZpZy5qc29uJ30nYCwgaW5zcGVjdChjb25maWdPYmosIHsgY29tcGFjdDogZmFsc2UgfSkpOwpyZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBMb2FkQ29uZmlnKCkgewogIGxldCBzdHIgPSBmcy5yZWFkRmlsZShVdGlsLmdldEFyZ3YoKVsxXS5yZXBsYWNlKC9cLmpzJC8sICcuY29uZmlnLmpzb24nKSwgJ3V0Zi04Jyk7CiAgbGV0IGNvbmZpZ09iaiA9IEpTT04ucGFyc2Uoc3RyID8/ICd7fScpOwoKICBjb25maWdPYmogPSBPYmplY3QuZnJvbUVudHJpZXMoCiAgICBPYmplY3QuZW50cmllcyhjb25maWdPYmopCiAgICAgIC5tYXAoKFtrLCB2XSkgPT4gW2ssICt2XSkKICAgICAgLmZpbHRlcigoW2ssIHZdKSA9PiAhaXNOYU4odikpCiAgKTsKICBjb25zb2xlLmxvZygnTG9hZENvbmZpZzonLCBjb25maWdPYmopOwogIHJldHVybiBjb25maWdPYmo7Cn0gCgAAAAAAAAAAVAMAAAAAAAAAAAAAAAAAAAAAAABUAwAAAAAAAAAAAAAAAAAAAAAAAFQDAAAAAAAAAAAAAAAAAAAAAAAAVAMAAAAAAAAAAAAAAAAAAAAAAABUAwAAAAAAAAAAAAAAAAAAAAAAAFQDAAAAAAAAAAAAAAAAAAAAAAAAVAMAAAAAAAAAAAAAAAAAAAAAAABUAwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXAwAAAAAAAB4DAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test-opencv.js",
			"settings":
			{
				"buffer_size": 17937,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-rpc.js",
			"settings":
			{
				"buffer_size": 9746,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-sockets.js",
			"settings":
			{
				"buffer_size": 1279,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ws-worker.js",
			"settings":
			{
				"buffer_size": 4112,
				"line_ending": "Unix"
			}
		},
		{
			"file": "components.js",
			"settings":
			{
				"buffer_size": 41432,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1639,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACcWAAAAAAAAKBYAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJxYAAAAAAAAnFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1640,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACgWAAAAAAAAKhYAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKBYAAAAAAAAoFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1642,
					1,
					"right_delete",
					null,
					"AQAAACoWAAAAAAAAKhYAAAAAAAABAAAAKQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKhYAAAAAAAAqFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1657,
					1,
					"insert",
					{
						"characters": "\nkl"
					},
					"BAAAANAYAAAAAAAA0RgAAAAAAAAAAAAA0RgAAAAAAADXGAAAAAAAAAAAAADXGAAAAAAAANgYAAAAAAAAAAAAANgYAAAAAAAA2RgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0BgAAAAAAADQGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1658,
					2,
					"left_delete",
					null,
					"AgAAANgYAAAAAAAA2BgAAAAAAAABAAAAbNcYAAAAAAAA1xgAAAAAAAABAAAAaw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2RgAAAAAAADZGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1659,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAANcYAAAAAAAA2BgAAAAAAAAAAAAA2BgAAAAAAADZGAAAAAAAAAAAAADZGAAAAAAAANoYAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1xgAAAAAAADXGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1660,
					1,
					"insert",
					{
						"characters": " j"
					},
					"AgAAANoYAAAAAAAA2xgAAAAAAAAAAAAA2xgAAAAAAADcGAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2hgAAAAAAADaGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1661,
					1,
					"insert",
					{
						"characters": " =siblin"
					},
					"CAAAANwYAAAAAAAA3RgAAAAAAAAAAAAA3RgAAAAAAADeGAAAAAAAAAAAAADeGAAAAAAAAN8YAAAAAAAAAAAAAN8YAAAAAAAA4BgAAAAAAAAAAAAA4BgAAAAAAADhGAAAAAAAAAAAAADhGAAAAAAAAOIYAAAAAAAAAAAAAOIYAAAAAAAA4xgAAAAAAAAAAAAA4xgAAAAAAADkGAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3BgAAAAAAADcGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1662,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAOQYAAAAAAAA5RgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5BgAAAAAAADkGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1663,
					1,
					"insert_completion",
					{
						"completion": "siblingCounter",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "siblingCounter"
					},
					"AgAAAN4YAAAAAAAA3hgAAAAAAAAHAAAAc2libGluZ94YAAAAAAAA7BgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5RgAAAAAAADlGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1664,
					1,
					"insert",
					{
						"characters": "-1;"
					},
					"AwAAAOwYAAAAAAAA7RgAAAAAAAAAAAAA7RgAAAAAAADuGAAAAAAAAAAAAADuGAAAAAAAAO8YAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7BgAAAAAAADsGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1670,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO8YAAAAAAAA8BgAAAAAAAAAAAAA8BgAAAAAAAD2GAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7xgAAAAAAADvGAAAAAAAAP///////+9/"
				],
				[
					1673,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAPYYAAAAAAAA9xgAAAAAAAAAAAAA9xgAAAAAAAD4GAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9hgAAAAAAAD2GAAAAAAAAAAAAAAAAPC/"
				],
				[
					1674,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPgYAAAAAAAA+hgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+BgAAAAAAAD4GAAAAAAAAAAAAAAAAPC/"
				],
				[
					1675,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAAPkYAAAAAAAA+hgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+RgAAAAAAAD5GAAAAAAAAAAAAAAAAPC/"
				],
				[
					1676,
					1,
					"left_delete",
					null,
					"AQAAAPkYAAAAAAAA+RgAAAAAAAABAAAAag",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+hgAAAAAAAD6GAAAAAAAAAAAAAAAAPC/"
				],
				[
					1677,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAAPkYAAAAAAAA+hgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+RgAAAAAAAD5GAAAAAAAAAAAAAAAAPC/"
				],
				[
					1678,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAPoYAAAAAAAA+xgAAAAAAAAAAAAA+xgAAAAAAAD8GAAAAAAAAAAAAAD8GAAAAAAAAP0YAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+hgAAAAAAAD6GAAAAAAAAAAAAAAAAPC/"
				],
				[
					1679,
					1,
					"insert",
					{
						"characters": " active"
					},
					"BwAAAP0YAAAAAAAA/hgAAAAAAAAAAAAA/hgAAAAAAAD/GAAAAAAAAAAAAAD/GAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAARkAAAAAAAAAAAAAARkAAAAAAAACGQAAAAAAAAAAAAACGQAAAAAAAAMZAAAAAAAAAAAAAAMZAAAAAAAABBkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/RgAAAAAAAD9GAAAAAAAAAAAAAAAAPC/"
				],
				[
					1684,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AgAAABIZAAAAAAAAExkAAAAAAAAAAAAAExkAAAAAAAATGQAAAAAAABAAAABzaWJsaW5nQ291bnRlci0x",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEhkAAAAAAAAiGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1688,
					1,
					"insert",
					{
						"characters": "\nonChange"
					},
					"DAAAABUZAAAAAAAAFhkAAAAAAAAAAAAAFhkAAAAAAAAcGQAAAAAAAAAAAAAWGQAAAAAAABYZAAAAAAAABgAAACAgICAgIBYZAAAAAAAAGhkAAAAAAAAAAAAAGhkAAAAAAAAbGQAAAAAAAAAAAAAbGQAAAAAAABwZAAAAAAAAAAAAABwZAAAAAAAAHRkAAAAAAAAAAAAAHRkAAAAAAAAeGQAAAAAAAAAAAAAeGQAAAAAAAB8ZAAAAAAAAAAAAAB8ZAAAAAAAAIBkAAAAAAAAAAAAAIBkAAAAAAAAhGQAAAAAAAAAAAAAhGQAAAAAAACIZAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFRkAAAAAAAAVGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1692,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUZAAAAAAAABhkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABRkAAAAAAAAFGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1693,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAYZAAAAAAAACBkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABhkAAAAAAAAGGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1694,
					1,
					"right_delete",
					null,
					"AQAAAAcZAAAAAAAABxkAAAAAAAABAAAAfQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABxkAAAAAAAAHGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1696,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACQZAAAAAAAAJhkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJBkAAAAAAAAkGQAAAAAAAAAAAAAA4GlA"
				],
				[
					1697,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAACUZAAAAAAAAJhkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJRkAAAAAAAAlGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1700,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACcZAAAAAAAAKBkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJxkAAAAAAAAnGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1701,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAACgZAAAAAAAAKRkAAAAAAAAAAAAAKRkAAAAAAAAqGQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKBkAAAAAAAAoGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1702,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACoZAAAAAAAAKxkAAAAAAAAAAAAAKxkAAAAAAAAvGQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKhkAAAAAAAAqGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1712,
					1,
					"insert",
					{
						"characters": "event"
					},
					"BwAAACUZAAAAAAAAJhkAAAAAAAAAAAAAJhkAAAAAAAAmGQAAAAAAAAEAAABqKxkAAAAAAAArGQAAAAAAAAQAAAAgICAgJhkAAAAAAAAnGQAAAAAAAAAAAAAnGQAAAAAAACgZAAAAAAAAAAAAACgZAAAAAAAAKRkAAAAAAAAAAAAAKRkAAAAAAAAqGQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJRkAAAAAAAAmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1745,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAFQXAAAAAAAAVhcAAAAAAAAAAAAAQBcAAAAAAABCFwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVBcAAAAAAABAFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmBYAAAAAAAC9FgAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYFgAAAAAAAL0WAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/hooks/useEvent.js",
			"settings":
			{
				"buffer_size": 706,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/modules",
		"/home/roman/Projects/plot-cv/static",
		"/home/roman/Projects/plot-cv/static/css"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/preact.js",
		"/home/roman/Projects/plot-cv/lib/preact.mjs",
		"/home/roman/Projects/plot-cv/lib/compat.mjs",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/hooks.mjs",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/preact.mjs",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useTrkl.js",
		"/home/roman/Projects/plot-cv/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/static/svg/sort-size-2.svg",
		"/home/roman/Projects/plot-cv/static/svg/sort-name-2.svg",
		"/home/roman/Projects/plot-cv/static/svg/sort-time-2.svg",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/commands.js",
		"/home/roman/Projects/plot-cv/static/debugger.css",
		"/home/roman/Projects/plot-cv/tlite.css",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/lib/geom/align.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/inotify_event.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/palette.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/geometry.hpp",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/plot-cv/test-voronoi.js",
		"/home/roman/Projects/plot-cv/quickjs/README.md",
		"/home/roman/Projects/plot-cv/quickjs/readme.txt",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/skeletonization.hpp",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/gif_write.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_gif.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/png_write.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/DomColors.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant_colors_grabber.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_imgproc.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant_colors_grabber.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/qjs-opencv/gifenc/example.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/DomColors.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/.git",
		"/home/roman/Projects/plot-cv/image-helpers.js",
		"/home/roman/Projects/plot-cv/test-eagle.js",
		"/home/roman/Projects/plot-cv/test-ecmascript2.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.cpp",
		"/home/roman/Projects/plot-cv/test-video.config.json",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.hpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_array.hpp",
		"/home/roman/Projects/plot-cv/test-repeater.js",
		"/home/roman/Projects/qjs-opencv/js_umat.hpp",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_typed_array.hpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/FindOpenCV.cmake",
		"/home/roman/Projects/plot-cv/test-xml.js",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/lib/repeater/timers.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/qjs-modules/lib/terminal.js",
		"/home/roman/Projects/plot-cv/convert-imports.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/estree.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/test-readdir.js",
		"/home/roman/Projects/plot-cv/RecursiveIterator.js",
		"/home/roman/Projects/plot-cv/lib/png.js",
		"/home/roman/Projects/plot-cv/lib/jpegSize.js",
		"/home/roman/Projects/plot-cv/lib/jpeg.js",
		"/home/roman/Projects/plot-cv/lib/image-info.js",
		"/home/roman/Projects/plot-cv/lib/image-size.js",
		"/home/roman/Projects/plot-cv/lib/repeater/limiters.js",
		"/home/roman/Projects/plot-cv/lib/repeater/pubsub.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.ts",
		"/home/roman/Projects/plot-cv/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/userscript-build.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/test-svgpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/test-lexer.js",
		"/home/roman/Projects/plot-cv/test-bpg.html",
		"/home/roman/Projects/plot-cv/test-call.js",
		"/home/roman/Projects/plot-cv/output-267.svg",
		"/home/roman/Projects/plot-cv/noise.js",
		"/home/roman/Projects/plot-cv/dump-structs.js",
		"/home/roman/Projects/plot-cv/debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/list-proxies.js",
		"/home/roman/Projects/plot-cv/lib.js",
		"/home/roman/Projects/plot-cv/jsobjstruct.c",
		"/home/roman/Projects/plot-cv/example_gl2.c",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/lib/svg/path.js",
		"/home/roman/Projects/plot-cv/undefinedundefined63undefined"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 118.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ResizeHandler",
			"\\.properties",
			"rect",
			"handler",
			"MouseIterator",
			"filesystem",
			"std\\.",
			"inspect",
			"          \n",
			"sort.*svg",
			"ButtonGroup",
			"useEvent",
			"mousedown",
			"ButtonGr",
			"sort-",
			"createRef",
			"IS_HYDRATE",
			"hydrate",
			"createRef",
			"preactCom",
			"Fragment",
			"vnode",
			"cloneElement",
			"cloneEleme",
			"clone",
			"\\(Button,",
			"\\(Button, ",
			"'group'",
			"ButtonGroup",
			"black",
			"#000",
			"black",
			"#000",
			"#fff",
			"#000",
			"fill",
			"button",
			"components.js",
			"ButtonGroup",
			"align",
			"CCimage",
			"resize",
			"fromImages",
			"input",
			"'ImageSize",
			"seq\\.size",
			"FAIL:",
			"ImageSize",
			"dst",
			"firstSize",
			"dst0Size",
			"videoSize",
			"video\\.",
			"videos",
			"ImageSequence",
			"fetch",
			"'/save'",
			"save'",
			"Compile\\(",
			"args",
			"SpawnCom",
			"SpawnCm",
			"-I",
			"'I'",
			"'-I'",
			"'-I?",
			"'-I'",
			"-I",
			"document",
			"global\\.",
			"outputName",
			"ResponseData",
			"dirs\\[",
			"dirs =",
			"'Request",
			"data'",
			"LoadFile",
			"LoadDoc",
			"file,",
			"file:",
			"POST files",
			"main",
			"fs\\.",
			"fsPromises",
			"\\.read",
			"post",
			"readdir",
			"safeStat",
			"filesystem",
			"fsProm",
			"\\.read",
			"fsProm",
			"readFile",
			"fsProm",
			"getDescription",
			"fsPromises",
			"open",
			"fs\\.promises",
			"fs.promises",
			"'req'",
			"'req",
			"dirs =",
			"names",
			"app.use",
			"util",
			"runMount",
			"getIterators",
			"GetFilesList",
			"files",
			"'data'",
			"POINT_METHOD_NORM",
			"fromAngle",
			"\\n\\n\\n",
			"^}$",
			"std::vector",
			"C<",
			"gif_write",
			"join",
			"paletteApply",
			"js_error_print",
			"Failed loading",
			"fs.open",
			"console.log",
			"'unhandled'",
			"'dst'",
			"invert",
			"JS_EValFunction",
			"js_color_read"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log",
			"puts",
			"export function",
			"type",
			"header.",
			"#000000",
			"a",
			"MakeListCommand",
			"si",
			"pi",
			"plen",
			"slen",
			"pattern[0]",
			"string[0]",
			"string.length",
			"pattern.length",
			"string.length",
			"export const",
			"this",
			"item",
			"js_deep_defaultflags",
			"sheet",
			"makeListMembersCmd",
			"get_websocket_obj",
			"0",
			"searchPath",
			"makeValueDescriptor",
			"socket",
			"",
			", func",
			"func,",
			"func",
			"function ",
			"readline",
			"",
			"(",
			"Pointer",
			"deref",
			"export \\1",
			"log",
			"\\1//console",
			"`${name}",
			"js_keypoint_data2(ctx, ",
			"String.fromCharCode",
			"UTF8MinCode",
			"UTF8FirstCodeMask"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5585,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/main.js",
							"function_name_status_row": 38,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									8625,
									8630
								],
								[
									8812,
									8818
								],
								[
									8876,
									8881
								],
								[
									8934,
									8938
								],
								[
									9012,
									9016
								],
								[
									9038,
									9047
								],
								[
									9706,
									9725
								],
								[
									9846,
									9850
								],
								[
									10230,
									10254
								],
								[
									10295,
									10316
								],
								[
									10318,
									10323
								],
								[
									10331,
									10336
								],
								[
									10358,
									10393
								],
								[
									10507,
									10525
								],
								[
									10607,
									10612
								],
								[
									10804,
									10825
								],
								[
									10958,
									10976
								],
								[
									11655,
									11680
								],
								[
									11726,
									11744
								],
								[
									12720,
									12747
								],
								[
									13108,
									13133
								],
								[
									13492,
									13526
								],
								[
									14042,
									14074
								],
								[
									14249,
									14259
								],
								[
									14392,
									14402
								],
								[
									14525,
									14535
								],
								[
									14706,
									14730
								],
								[
									14789,
									14838
								],
								[
									15079,
									15101
								],
								[
									15108,
									15132
								],
								[
									15140,
									15169
								],
								[
									15754,
									15806
								],
								[
									16259,
									16263
								],
								[
									16290,
									16295
								],
								[
									16730,
									16816
								],
								[
									17014,
									17036
								],
								[
									17549,
									17581
								],
								[
									17909,
									17943
								],
								[
									18058,
									18063
								],
								[
									18088,
									18124
								],
								[
									18337,
									18362
								],
								[
									18553,
									18578
								],
								[
									18633,
									18637
								],
								[
									18692,
									18696
								],
								[
									19143,
									19160
								],
								[
									19354,
									19369
								],
								[
									19492,
									19509
								],
								[
									19561,
									19565
								],
								[
									19610,
									19614
								],
								[
									19645,
									19649
								],
								[
									19692,
									19697
								],
								[
									19784,
									19803
								],
								[
									20018,
									20053
								],
								[
									20091,
									20099
								],
								[
									20168,
									20172
								],
								[
									20735,
									20739
								],
								[
									20798,
									20802
								],
								[
									21388,
									21394
								],
								[
									21569,
									21573
								],
								[
									21594,
									21598
								],
								[
									21633,
									21637
								],
								[
									21902,
									21915
								],
								[
									22043,
									22047
								],
								[
									22248,
									22264
								],
								[
									22530,
									22535
								],
								[
									22648,
									22657
								],
								[
									22729,
									22738
								],
								[
									22815,
									22824
								],
								[
									23464,
									23486
								],
								[
									23663,
									23723
								],
								[
									23972,
									23992
								],
								[
									24003,
									24012
								],
								[
									24067,
									24079
								],
								[
									24125,
									24136
								],
								[
									24225,
									24256
								],
								[
									24578,
									24611
								],
								[
									25690,
									25743
								],
								[
									25794,
									25807
								],
								[
									25889,
									25932
								],
								[
									26011,
									26015
								],
								[
									26144,
									26151
								],
								[
									26178,
									26185
								],
								[
									26263,
									26284
								],
								[
									26580,
									26622
								],
								[
									26745,
									26766
								],
								[
									27026,
									27071
								],
								[
									27264,
									27334
								],
								[
									27783,
									27808
								],
								[
									27831,
									27835
								],
								[
									27855,
									27868
								],
								[
									27984,
									28056
								],
								[
									28365,
									28374
								],
								[
									28806,
									28871
								],
								[
									28958,
									28984
								],
								[
									29230,
									29255
								],
								[
									29278,
									29282
								],
								[
									29302,
									29315
								],
								[
									29369,
									29425
								],
								[
									29427,
									29433
								],
								[
									29442,
									29444
								],
								[
									29469,
									29476
								],
								[
									29500,
									29594
								],
								[
									29601,
									29625
								],
								[
									29688,
									29715
								],
								[
									29724,
									29744
								],
								[
									29879,
									29883
								],
								[
									30070,
									30089
								],
								[
									30173,
									30192
								],
								[
									30289,
									30304
								],
								[
									31198,
									31213
								],
								[
									31313,
									31328
								],
								[
									32009,
									32050
								],
								[
									32255,
									32259
								],
								[
									32289,
									32300
								],
								[
									32383,
									32403
								],
								[
									32666,
									32690
								],
								[
									32748,
									32788
								],
								[
									33160,
									33179
								],
								[
									33230,
									33249
								],
								[
									34111,
									34139
								],
								[
									34358,
									34370
								],
								[
									34407,
									34419
								],
								[
									34930,
									34978
								],
								[
									35203,
									35209
								],
								[
									35359,
									35364
								],
								[
									35390,
									35397
								],
								[
									35460,
									35465
								],
								[
									35497,
									35504
								],
								[
									36140,
									36156
								],
								[
									36279,
									36283
								],
								[
									36791,
									36799
								],
								[
									37242,
									37250
								],
								[
									37303,
									37308
								],
								[
									37349,
									37357
								],
								[
									37497,
									37502
								],
								[
									37589,
									37605
								],
								[
									39281,
									39286
								],
								[
									39919,
									39970
								],
								[
									40394,
									40399
								],
								[
									40418,
									40423
								],
								[
									40731,
									40748
								],
								[
									40924,
									40930
								],
								[
									41078,
									41098
								],
								[
									41175,
									41205
								],
								[
									41381,
									41389
								],
								[
									41493,
									41504
								],
								[
									41620,
									41624
								],
								[
									42361,
									42402
								],
								[
									43025,
									43048
								],
								[
									43637,
									43641
								],
								[
									43785,
									43789
								],
								[
									44301,
									44305
								],
								[
									44320,
									44350
								],
								[
									44403,
									44407
								],
								[
									44426,
									44456
								],
								[
									44515,
									44519
								],
								[
									44543,
									44567
								],
								[
									44632,
									44636
								],
								[
									44676,
									44700
								],
								[
									44817,
									44821
								],
								[
									44860,
									44864
								],
								[
									44939,
									44943
								],
								[
									44982,
									44986
								],
								[
									45084,
									45088
								],
								[
									45446,
									45481
								],
								[
									45592,
									45605
								],
								[
									46046,
									46086
								],
								[
									46137,
									46146
								],
								[
									46167,
									46178
								],
								[
									46270,
									46281
								],
								[
									46327,
									46383
								],
								[
									46390,
									46396
								],
								[
									46478,
									46498
								],
								[
									46545,
									46603
								],
								[
									46610,
									46616
								],
								[
									46659,
									46666
								],
								[
									46683,
									46704
								],
								[
									46766,
									46777
								],
								[
									47007,
									47025
								],
								[
									47065,
									47071
								],
								[
									47104,
									47132
								],
								[
									47170,
									47192
								],
								[
									47277,
									47301
								],
								[
									47302,
									47316
								],
								[
									48438,
									48471
								],
								[
									48480,
									48481
								],
								[
									48533,
									48557
								],
								[
									48598,
									48629
								],
								[
									48638,
									48639
								],
								[
									48883,
									48926
								],
								[
									49245,
									49272
								],
								[
									49566,
									49585
								],
								[
									49798,
									49814
								],
								[
									50138,
									50158
								],
								[
									51053,
									51100
								],
								[
									51483,
									51498
								],
								[
									51715,
									51728
								],
								[
									52005,
									52018
								],
								[
									52224,
									52237
								],
								[
									52461,
									52467
								],
								[
									52517,
									52538
								],
								[
									56273,
									56284
								],
								[
									57120,
									57124
								],
								[
									57573,
									57578
								],
								[
									57732,
									57746
								],
								[
									57775,
									57780
								],
								[
									57908,
									57929
								],
								[
									57987,
									57992
								],
								[
									58100,
									58121
								],
								[
									58346,
									58359
								],
								[
									58360,
									58387
								],
								[
									58528,
									58551
								],
								[
									58833,
									58848
								],
								[
									58873,
									58890
								],
								[
									58957,
									58965
								],
								[
									59038,
									59043
								],
								[
									59149,
									59173
								],
								[
									59820,
									59847
								],
								[
									59943,
									59947
								],
								[
									60312,
									60348
								],
								[
									60453,
									60462
								],
								[
									60497,
									60508
								],
								[
									60569,
									60583
								],
								[
									61168,
									61172
								],
								[
									61857,
									61865
								],
								[
									61981,
									61989
								],
								[
									62109,
									62117
								],
								[
									62232,
									62240
								],
								[
									62297,
									62305
								],
								[
									62777,
									62785
								],
								[
									62970,
									63017
								],
								[
									63163,
									63176
								],
								[
									63339,
									63357
								],
								[
									63525,
									63529
								],
								[
									63601,
									63608
								],
								[
									63856,
									63875
								],
								[
									63907,
									63925
								],
								[
									64451,
									64471
								],
								[
									64796,
									64813
								],
								[
									65021,
									65039
								],
								[
									65316,
									65339
								],
								[
									65790,
									65807
								],
								[
									65899,
									65907
								],
								[
									66126,
									66140
								],
								[
									66323,
									66363
								],
								[
									66428,
									66442
								],
								[
									67017,
									67033
								],
								[
									67071,
									67146
								],
								[
									67397,
									67418
								],
								[
									67527,
									67531
								],
								[
									68010,
									68024
								],
								[
									68328,
									68332
								],
								[
									68404,
									68408
								],
								[
									68690,
									68707
								],
								[
									68875,
									68883
								],
								[
									69081,
									69085
								],
								[
									69181,
									69196
								],
								[
									69442,
									69446
								],
								[
									69653,
									69670
								],
								[
									69762,
									69777
								],
								[
									70575,
									70587
								],
								[
									70594,
									70607
								],
								[
									70645,
									70660
								],
								[
									70764,
									70784
								],
								[
									70964,
									70991
								],
								[
									71045,
									71057
								],
								[
									71175,
									71183
								],
								[
									71632,
									71640
								],
								[
									72462,
									72471
								],
								[
									72706,
									72713
								],
								[
									72812,
									72832
								],
								[
									73019,
									73039
								],
								[
									73405,
									73415
								],
								[
									74218,
									74222
								],
								[
									74318,
									74322
								],
								[
									74357,
									74371
								],
								[
									74628,
									74635
								],
								[
									77025,
									77057
								],
								[
									77566,
									77570
								],
								[
									77835,
									77839
								],
								[
									77907,
									77911
								],
								[
									77995,
									78002
								],
								[
									78081,
									78085
								],
								[
									79159,
									79205
								],
								[
									79672,
									79681
								],
								[
									80753,
									80768
								],
								[
									80947,
									80961
								],
								[
									81090,
									81104
								],
								[
									81253,
									81267
								],
								[
									82255,
									82273
								],
								[
									82471,
									82494
								],
								[
									82536,
									82551
								],
								[
									82907,
									82922
								],
								[
									83335,
									83355
								],
								[
									83837,
									83855
								],
								[
									84571,
									84580
								],
								[
									84623,
									84627
								],
								[
									84839,
									84877
								],
								[
									85052,
									85075
								],
								[
									85219,
									85224
								],
								[
									85263,
									85273
								],
								[
									85437,
									85441
								],
								[
									85588,
									85592
								],
								[
									85631,
									85636
								],
								[
									86041,
									86045
								],
								[
									86084,
									86098
								],
								[
									86102,
									86116
								],
								[
									86123,
									86127
								],
								[
									86148,
									86163
								],
								[
									86219,
									86244
								],
								[
									86376,
									86387
								],
								[
									86437,
									86442
								],
								[
									86502,
									86507
								],
								[
									86962,
									86972
								],
								[
									87086,
									87103
								],
								[
									87116,
									87120
								],
								[
									87310,
									87314
								],
								[
									87482,
									87503
								],
								[
									88649,
									88653
								],
								[
									88759,
									88763
								],
								[
									89057,
									89085
								],
								[
									89536,
									89540
								],
								[
									89996,
									90005
								],
								[
									90137,
									90146
								],
								[
									90250,
									90258
								],
								[
									90764,
									90773
								],
								[
									90922,
									90926
								],
								[
									90991,
									91017
								],
								[
									91662,
									91667
								],
								[
									91974,
									92005
								],
								[
									93042,
									93063
								],
								[
									93268,
									93296
								],
								[
									93663,
									93706
								],
								[
									95036,
									95045
								],
								[
									95925,
									95929
								],
								[
									96669,
									96696
								],
								[
									96819,
									96832
								]
							],
							"symlist":
							[
								"() =>",
								"  res =>",
								"() =>",
								"  r =>",
								"  r =>",
								"  entries()",
								"GetProject = arg =>",
								"  p =>",
								"  add = (arr, ...items) =>",
								"  useSlot = (arr, i) =>",
								"() =>",
								"\tv =>",
								"  trklGetSet = (get, set) => value =>",
								"MouseEvents = h =>",
								"() =>",
								"(parent, delegate) =>",
								"  append_to(elem, p)",
								"DrawSVG(...args)",
								"  append_to(elem, p)",
								"  adjustViewBox(e)",
								"  calcViewBox(box)",
								"  setViewBox(svgOwner, box)",
								"ElementToXML = (e, predicate) =>",
								"\t(v, k) =>",
								"\t(v, k) =>",
								"\t(v, k) =>",
								"  readFile(filename)",
								"  writeFile(filename, data, overwrite = true)",
								"  exists(filename)",
								"  realpath(filename)",
								"LoadFile(file)",
								"SaveFile(filename, data, contentType)",
								"  s =>",
								"() =>",
								"SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])",
								"  predicate = element =>",
								"LoadSVG(filename)",
								"LoadImage(filename)",
								"() =>",
								"RenderComponent(component)",
								"ModifyColors = fn => e =>",
								"FindLayer = name_or_id =>",
								"  n =>",
								"  l =>",
								"(id = '#geom') =>",
								"(props = {}) =>",
								"  maxZIndex = () =>",
								"  e =>",
								"  z =>",
								"  z =>",
								"() =>",
								"  randomColor = () =>",
								"DrawArc(start, end, angle)",
								"  props =>",
								"  p =>",
								"  a =>",
								"  m =>",
								"  hex =>",
								"  p =>",
								"  p =>",
								"  p =>",
								"({ x, y }) =>",
								"  a =>",
								"({ x, y }, i) =>",
								"\te =>",
								"(l, i) =>",
								"(p, i) =>",
								"(p, i) =>",
								"  add = (level, item) =>",
								"RecurseBinaryNode(node, parent = null, depth = 0)",
								"(nodes, i, level) =>",
								"  fx = j =>",
								"(node, j) =>",
								"\titem =>",
								"DrawNode(x, y, node)",
								"DrawEdge(item, parent)",
								"GetPaths(query, parent = project.svgElement)",
								"\t(a, e) =>",
								"PathToPolylines(path, step = 0.01)",
								"  p =>",
								"  poly =>",
								"  poly =>",
								"\t(p, d, set, stop) =>",
								"PathToPolyline(path, step = 0.01)",
								"\t(p, d, set, stop) =>",
								"PathsToPolylines(paths, step = 0.01)",
								"OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)",
								"  .toPolylines = function()",
								"  p =>",
								"({ X, Y }) =>",
								"OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)",
								"(a, p) =>",
								"ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)",
								"  add = (p, clip = false) =>",
								"  .toPolylines = function()",
								"  p =>",
								"({ X, Y }) =>",
								"  saveItemStates(itemList, get = item => Util.is.",
								"(item.",
								"))",
								"  item =>",
								"  restoreItemStates( itemStates, /*prettier-ignore */ set = (item, value) => item.",
								"(value ? 'yes' : 'no') )",
								"EagleMaps(project)",
								"  transformPath = p =>",
								"  e =>",
								"  dom2eagle = node =>",
								"  eagle2dom = elem =>",
								"  path2dom = p =>",
								"(key, value) =>",
								"(key, value) =>",
								"PackageNames(doc = project.doc)",
								"  e =>",
								"([e, b]) =>",
								"([e, w, h, m, v]) =>",
								"({ index, ...match }) =>",
								"\t({ s, v, indexes }, match, i) =>",
								"([token, index]) =>",
								"([token, index]) =>",
								"NextDocument(n = 1)",
								"\t(idx, i) =>",
								"\t(idx, i) =>",
								"LoadDocument(project, parentElem)",
								"  err =>",
								"() =>",
								"\tent =>",
								"() =>",
								"\tent =>",
								"  renamePackages()",
								"  a =>",
								"  value =>",
								"  layer =>",
								"() =>",
								"  layer =>",
								"() =>",
								"  fn = function(v)",
								"() =>",
								"  .makeGroup = function({ transform, ...props } = {})",
								"  id =>",
								"() =>",
								"  xx()",
								"\t() =>",
								"(transform)",
								"\t(tag, attr, children = []) =>",
								"  value =>",
								"() =>",
								"Rect",
								"ChooseDocument(project, i)",
								"GenerateVoronoi = () =>",
								"Rect",
								"  p =>",
								"  e =>",
								"({ lSite, rSite, ...edge }) =>",
								"  e =>",
								"({ lSite, rSite, ...edge }) =>",
								"  e =>",
								"({ va, vb, ...edge }) =>",
								"  v =>",
								"  add = (arr, ...items) =>",
								"  l =>",
								"  t =>",
								"  l =>",
								"  t =>",
								"  p =>",
								"\t(acc, { site, halfedges }) =>",
								"({ site }) =>",
								"PackageChildren(element, layer)",
								"(c, i) =>",
								"([i, p]) =>",
								"([i, e]) =>",
								"ElementChildren(layer = 'tPlace', rfn = ent => ",
								"(ent))",
								"([name, element]) =>",
								"ElementGeometries(layer = 'tPlace', rfn = ent => ",
								"(ent))",
								"\tent =>",
								"([name, children]) =>",
								"([i, e]) =>",
								"([name, lines]) =>",
								"  pts =>",
								"([name, lines, polygons]) =>",
								"NewPath(path)",
								"MakeFitAction = index =>",
								"  event =>",
								"ZoomFactor(val = config.",
								")",
								"ZoomLog(factor)",
								"AdjustZoom(l = config.",
								")",
								"CreateGrblSocket = (port = 'tnt1') =>",
								"HandleMessage(msg)",
								"\tpointStr =>",
								"  socketFn = () =>",
								"  .send = (...args) =>",
								"AuthorizationDialog = ({ onAuth, ...props }) =>",
								"  onSubmit: () =>",
								"  onInput: e =>",
								"  onInput: e =>",
								"  onClick: e =>",
								"  arg =>",
								"  .onload = () =>",
								"  response =>",
								"  e =>",
								"\tv =>",
								"TestArc: () =>",
								"() =>",
								"(push, stop) =>",
								"() =>",
								"(push, stop) =>",
								"\ttarget =>",
								"\t(key, modifiers = 0) =>",
								"  .focusSearch = state =>",
								"  children: () =>",
								"  geometries: () =>",
								"  value =>",
								"() =>",
								"  testComponent = props =>",
								"File(obj, i)",
								"File",
								"File.prototype.toString = function()",
								"(a, b) =>",
								"(obj, i) =>",
								"(acc, file) =>",
								"  i =>",
								"  value =>",
								"  value =>",
								"  value =>",
								"  value =>",
								"  value =>",
								"  value =>",
								"  updateIfChanged = (trkl, newValue, callback) =>",
								"\t(elem, i) =>",
								"  changeInput = e =>",
								"  p =>",
								"\targ =>",
								"Consumer = props =>",
								"()",
								"  log(type, time, msg)",
								"Logger = props =>",
								"()",
								"([type, d, t, m], i) =>",
								"Dumper = props =>",
								"  value =>",
								"([k, v], i) =>",
								"Commander = ({ onCommand, ...props }) =>",
								"  handler = e =>",
								"  toggle = trkl =>",
								"Layer = ({ title, name, label, i, color, element, className, ...props }) =>",
								"  setVisible = value =>",
								"  e =>",
								"\te =>",
								"  l =>",
								"  l =>",
								"\t(item, value) =>",
								"\titem =>",
								"  l =>",
								"([l, state]) =>",
								"  e =>",
								"  onMouseMove: e =>",
								"  onMouseUp: e =>",
								"DocumentList",
								"  constructor()",
								"(push, stop) =>",
								"  add(name, component)",
								"  addEntry([name, component])",
								"  remove(name)",
								"  update()",
								"  fn: e =>",
								"  fn: () =>",
								"  open =>",
								"\tprops =>",
								"\tprops =>",
								"  e =>",
								"  i =>",
								"  i =>",
								"({ coord }) =>",
								"  side =>",
								"  create: (project, props = {}) =>",
								"  a =>",
								"  e =>",
								"  e =>",
								"  name =>",
								"  e =>",
								"  makeLayerName(name, side)",
								"  fn: () =>",
								"  onChange(event)",
								"\tprops =>",
								"\tprops =>",
								"\tprops =>",
								"(e, p, i) =>",
								"  makeSortCompare: key =>",
								"\tfunction(a, b)",
								"\tfunction(a, b)",
								"  onCommand: cmdStr =>",
								"  handleChange: e =>",
								"\tevent =>",
								"  e =>",
								"MoveEvent(event, prevEvent)",
								"WalkUp(e)",
								"\te =>",
								"\tz =>",
								"  p =>",
								"  e =>",
								"\te =>",
								"  e =>",
								"\tv =>",
								"\tl =>",
								"  e =>",
								"\t() =>",
								"\t(e, depth) =>",
								"\tclasses =>",
								"\te =>",
								"\te =>",
								"\t(a, b) =>",
								"\t(a, b) =>",
								"Node",
								"  e =>",
								"\t(p, d, set, stop) =>",
								"  e =>",
								"  e =>",
								"TouchEvent(event)",
								"  e =>",
								"(p, i) =>",
								"(a, b) =>",
								"\tsize =>",
								"  border =>",
								"  r =>",
								"  mod(n, m)",
								"() =>",
								"\t(pos, last, first) =>",
								"  cancel()",
								"  .oncontextmenu = function(e)",
								"  .processEvents = function eventLoop()",
								"\tevent =>",
								"  e =>",
								"  onRuntimeInitialized: () =>",
								"  print: txt =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638108692.14,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "main.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 96869,
						"regions":
						{
						},
						"selection":
						[
							[
								17908,
								17908
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 562,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638958290.39,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10946.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "fire.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 500,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638156962.18,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "fire.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5198,
						"regions":
						{
						},
						"selection":
						[
							[
								3111,
								3102
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 128,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638750693.08,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1685.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 374,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638750846.37,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "static/css/list.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 801,
						"regions":
						{
						},
						"selection":
						[
							[
								345,
								345
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 22,
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638750845.23,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "debugger-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12640,
						"regions":
						{
						},
						"selection":
						[
							[
								5474,
								5480
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 160,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638133842.49,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2005.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "grammar-geda-netlist.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1913,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638133842.31,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "libraries.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1407,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638133842.14,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "list-proxies.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10062,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638108750.08,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "plot-cv.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2430,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638133841.96,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "test-minnet.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2946,
						"regions":
						{
						},
						"selection":
						[
							[
								397,
								400
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 12,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638108753.49,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "test-net.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2878,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638108879.84,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "test-cv.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8677,
						"regions":
						{
						},
						"selection":
						[
							[
								1361,
								1725
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 42,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638133841.53,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "config.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 852,
						"regions":
						{
						},
						"selection":
						[
							[
								493,
								493
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 10,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638133840.71,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "test-opencv.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17937,
						"regions":
						{
						},
						"selection":
						[
							[
								874,
								874
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 23,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638108903.43,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "test-rpc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9746,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 147,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638108801.05,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2805.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "test-sockets.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1279,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "ws-worker.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4112,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1638108711.43,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "components.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41432,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 251,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1637917132.9,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 3927.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "lib/hooks/useEvent.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 706,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1637913359.85,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.754262567352,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"list.htm",
				"list.html"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"useEve",
				"lib/hooks/useEvent.js"
			],
			[
				"ompat.mjs",
				"lib/compat.mjs"
			],
			[
				".mjs",
				"lib/compat.mjs"
			],
			[
				"hooks.mj",
				"lib/hooks.mjs"
			],
			[
				"preact.mjs",
				"preact.mjs"
			],
			[
				"hooks.",
				"lib/hooks.mjs"
			],
			[
				"compat.mj",
				"lib/compat.mjs"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"components.",
				"components.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"tlite.css",
				"tlite.css"
			],
			[
				"debugger.css",
				"static/debugger.css"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"useTrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"schema",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"commands",
				"commands.js"
			],
			[
				"components",
				"components.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"align.js",
				"lib/geom/align.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"cvVid",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"cvpip",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"imagepip",
				"imagePipeline.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"test-im",
				"test-image.js"
			],
			[
				"usetrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"fetch.j",
				"lib/fetch.js"
			],
			[
				"comm",
				"commands.js"
			],
			[
				"package",
				"package.json"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"js_Cv",
				"qjs-opencv/js_cv.cpp"
			],
			[
				"gif_wr",
				"qjs-opencv/gif_write.hpp"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/utils.c"
			],
			[
				"js_mat",
				"qjs-opencv/js_mat.cpp"
			],
			[
				"image-he",
				"image-helpers.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"test-eagle",
				"test-eagle.js"
			],
			[
				"test-xml",
				"test-xml.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-misc.c",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-mmap",
				"quickjs/qjs-modules/quickjs-mmap.c"
			],
			[
				"quickjs-libc.c",
				"quickjs/quickjs-libc.c"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-ins",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"webSOc",
				"webSocket.js"
			],
			[
				"timers.",
				"lib/repeater/timers.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvGUI",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"js_Mat",
				"qjs-opencv/js_mat.cpp"
			],
			[
				"-helper",
				"io-helpers.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"quickjs-lib",
				"quickjs/quickjs-libc.c"
			],
			[
				"test-repe",
				"test-repeater.js"
			],
			[
				"repea",
				"lib/repeater/repeater.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"jpeg.js",
				"lib/jpeg.js"
			],
			[
				"image-h",
				"image-helpers.js"
			],
			[
				"estree.js",
				"lib/ecmascript/estree.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"terminal",
				"qjs-modules/lib/terminal.js"
			],
			[
				"packa",
				"package.json"
			],
			[
				"Svgpath",
				"lib/svg/path.js"
			],
			[
				"cvVIde",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"js_poin",
				"qjs-opencv/js_point.hpp"
			],
			[
				"js_cont",
				"qjs-opencv/js_contour.hpp"
			],
			[
				"test.js",
				"test.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"path",
				"lib/svg/path.js"
			],
			[
				"path.js",
				"lib/svg/path.js"
			],
			[
				"svgpa",
				"lib/svg/path-parser.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"test-clip",
				"test-clipper.js"
			],
			[
				"13",
				"opencv/disabled/code10-3.cpp"
			],
			[
				"test-svg",
				"test-svgpath.js"
			],
			[
				"test-svgp",
				"test-svgpath.js"
			],
			[
				"svg",
				"src/simple_svg_writer.hpp"
			],
			[
				"player-sy",
				"static/svg/player-symbols.svg"
			],
			[
				".svg",
				"restart.svg"
			],
			[
				"server",
				"debugger-server.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"sockets.c",
				"quickjs/qjs-modules/quickjs-sockets.c"
			],
			[
				"debuggerprot",
				"debuggerprotocol.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"quickjs-debugg",
				"quickjs/quickjs-debugger.c"
			],
			[
				"debugger.cs",
				"static/debugger.css"
			],
			[
				"quickjs-debu",
				"quickjs/quickjs-debugger.c"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"repl",
				"repl.js"
			],
			[
				"wscli",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"test-rp",
				"test-rpc.js"
			],
			[
				"test-net",
				"test-net.js"
			],
			[
				"extend",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"useFe",
				"lib/hooks/useFetch.js"
			],
			[
				"lexer",
				"lib/lexer.js"
			],
			[
				"debugger-cli",
				"debugger-client.js"
			],
			[
				"process",
				"quickjs/qjs-modules/lib/process.js"
			],
			[
				"useClick",
				"lib/hooks/useClick.js"
			],
			[
				"style",
				"style.css"
			],
			[
				"css.j",
				"lib/dom/css.js"
			],
			[
				"debugger.ht",
				"debugger.html"
			],
			[
				"style.cs",
				"style.css"
			],
			[
				"arrow",
				"static/svg/arrow-right.svg"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 344.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
