{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"i",
				"is_dir"
			],
			[
				"getText",
				"getTextArray"
			],
			[
				"Lin",
				"LinearTransform"
			],
			[
				"CURL_LIB",
				"CURL_LIBRARY_DEBUG"
			],
			[
				"Circ",
				"CircuitJS"
			],
			[
				"dep",
				"dependency"
			],
			[
				"opt",
				"optimization"
			],
			[
				"OPENCV_LIB",
				"OPENCV_LIBRARIES"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"relat",
				"relativeTo"
			],
			[
				"max",
				"maxLineGap"
			],
			[
				"Pm_Op",
				"Pm_OpenInput"
			],
			[
				"Pm_Get",
				"Pm_GetDeviceInfo"
			],
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					12,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								433,
								442
							],
							[
								620,
								624
							],
							[
								655,
								659
							],
							[
								684,
								701
							],
							[
								760,
								768
							],
							[
								952,
								987
							],
							[
								1045,
								1074
							],
							[
								1192,
								1210
							],
							[
								1211,
								1218
							],
							[
								1219,
								1233
							],
							[
								1350,
								1363
							],
							[
								1364,
								1378
							],
							[
								1394,
								1406
							],
							[
								1463,
								1476
							],
							[
								1477,
								1491
							],
							[
								1507,
								1519
							],
							[
								1558,
								1576
							],
							[
								1597,
								1616
							],
							[
								1649,
								1668
							],
							[
								1669,
								1683
							],
							[
								1718,
								1738
							],
							[
								1785,
								1791
							],
							[
								1850,
								1873
							],
							[
								1902,
								1917
							],
							[
								1999,
								2034
							],
							[
								2063,
								2093
							],
							[
								2151,
								2177
							],
							[
								2219,
								2246
							],
							[
								2295,
								2308
							],
							[
								2309,
								2323
							],
							[
								2350,
								2355
							],
							[
								2379,
								2391
							],
							[
								2392,
								2401
							],
							[
								2475,
								2491
							],
							[
								2607,
								2631
							],
							[
								2665,
								2674
							],
							[
								2687,
								2695
							],
							[
								2751,
								2761
							],
							[
								2792,
								2798
							],
							[
								2824,
								2858
							],
							[
								2908,
								2925
							],
							[
								3190,
								3195
							],
							[
								3250,
								3260
							],
							[
								3312,
								3325
							],
							[
								3416,
								3435
							],
							[
								3436,
								3451
							],
							[
								3479,
								3511
							],
							[
								3579,
								3597
							],
							[
								3651,
								3687
							],
							[
								3737,
								3781
							],
							[
								3827,
								3857
							],
							[
								3924,
								3930
							],
							[
								3943,
								3949
							],
							[
								3969,
								3975
							],
							[
								3990,
								4006
							],
							[
								4040,
								4048
							],
							[
								4057,
								4075
							],
							[
								4088,
								4102
							],
							[
								4132,
								4150
							],
							[
								4180,
								4196
							],
							[
								4207,
								4242
							],
							[
								4286,
								4290
							],
							[
								4310,
								4319
							],
							[
								4403,
								4443
							],
							[
								4479,
								4493
							],
							[
								4582,
								4620
							],
							[
								4682,
								4686
							],
							[
								4724,
								4752
							],
							[
								4815,
								4822
							],
							[
								4823,
								4837
							],
							[
								4867,
								4884
							],
							[
								4915,
								4936
							],
							[
								4952,
								4956
							],
							[
								4986,
								5005
							],
							[
								5062,
								5079
							],
							[
								5156,
								5177
							],
							[
								5218,
								5235
							],
							[
								5279,
								5310
							],
							[
								5400,
								5418
							],
							[
								5591,
								5609
							],
							[
								5629,
								5651
							],
							[
								5665,
								5670
							],
							[
								5686,
								5709
							],
							[
								5723,
								5728
							],
							[
								5756,
								5780
							],
							[
								5794,
								5799
							],
							[
								5856,
								5893
							],
							[
								5935,
								5941
							],
							[
								6220,
								6235
							],
							[
								6539,
								6555
							],
							[
								6647,
								6651
							],
							[
								6824,
								6845
							],
							[
								6861,
								6874
							],
							[
								6918,
								6943
							],
							[
								7083,
								7101
							],
							[
								7113,
								7120
							],
							[
								7151,
								7160
							],
							[
								7168,
								7172
							],
							[
								7191,
								7212
							],
							[
								7224,
								7231
							],
							[
								7259,
								7268
							],
							[
								7276,
								7280
							],
							[
								7342,
								7348
							],
							[
								7384,
								7403
							],
							[
								7660,
								7679
							],
							[
								7776,
								7797
							],
							[
								7810,
								7823
							],
							[
								7841,
								7873
							],
							[
								7898,
								7934
							],
							[
								8049,
								8077
							],
							[
								8146,
								8164
							],
							[
								8196,
								8200
							],
							[
								8238,
								8250
							],
							[
								8254,
								8269
							],
							[
								8314,
								8331
							],
							[
								8344,
								8366
							],
							[
								8395,
								8424
							],
							[
								8563,
								8569
							],
							[
								8604,
								8610
							],
							[
								8684,
								8702
							],
							[
								8764,
								8779
							],
							[
								8834,
								8852
							],
							[
								8938,
								8943
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							".toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							".toArrayFn = fn =>",
							".toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							".trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								433,
								442
							],
							[
								620,
								624
							],
							[
								655,
								659
							],
							[
								684,
								701
							],
							[
								760,
								768
							],
							[
								952,
								987
							],
							[
								1045,
								1074
							],
							[
								1192,
								1210
							],
							[
								1211,
								1218
							],
							[
								1219,
								1233
							],
							[
								1350,
								1363
							],
							[
								1364,
								1378
							],
							[
								1394,
								1406
							],
							[
								1463,
								1476
							],
							[
								1477,
								1491
							],
							[
								1507,
								1519
							],
							[
								1558,
								1576
							],
							[
								1597,
								1616
							],
							[
								1649,
								1668
							],
							[
								1669,
								1683
							],
							[
								1718,
								1738
							],
							[
								1787,
								1793
							],
							[
								1852,
								1875
							],
							[
								1904,
								1919
							],
							[
								2001,
								2036
							],
							[
								2065,
								2095
							],
							[
								2153,
								2179
							],
							[
								2221,
								2248
							],
							[
								2297,
								2310
							],
							[
								2311,
								2325
							],
							[
								2352,
								2357
							],
							[
								2381,
								2393
							],
							[
								2394,
								2403
							],
							[
								2477,
								2493
							],
							[
								2609,
								2633
							],
							[
								2667,
								2676
							],
							[
								2689,
								2697
							],
							[
								2753,
								2763
							],
							[
								2794,
								2800
							],
							[
								2826,
								2860
							],
							[
								2910,
								2927
							],
							[
								3192,
								3197
							],
							[
								3252,
								3262
							],
							[
								3314,
								3327
							],
							[
								3418,
								3437
							],
							[
								3438,
								3453
							],
							[
								3481,
								3513
							],
							[
								3581,
								3599
							],
							[
								3653,
								3689
							],
							[
								3739,
								3783
							],
							[
								3829,
								3859
							],
							[
								3926,
								3932
							],
							[
								3945,
								3951
							],
							[
								3971,
								3977
							],
							[
								3992,
								4008
							],
							[
								4042,
								4050
							],
							[
								4059,
								4077
							],
							[
								4090,
								4104
							],
							[
								4134,
								4152
							],
							[
								4182,
								4198
							],
							[
								4209,
								4244
							],
							[
								4288,
								4292
							],
							[
								4312,
								4321
							],
							[
								4405,
								4445
							],
							[
								4481,
								4495
							],
							[
								4584,
								4622
							],
							[
								4684,
								4688
							],
							[
								4726,
								4754
							],
							[
								4817,
								4824
							],
							[
								4825,
								4839
							],
							[
								4869,
								4886
							],
							[
								4917,
								4938
							],
							[
								4954,
								4958
							],
							[
								4988,
								5007
							],
							[
								5064,
								5081
							],
							[
								5158,
								5179
							],
							[
								5220,
								5237
							],
							[
								5281,
								5312
							],
							[
								5402,
								5420
							],
							[
								5593,
								5611
							],
							[
								5631,
								5653
							],
							[
								5667,
								5672
							],
							[
								5688,
								5711
							],
							[
								5725,
								5730
							],
							[
								5758,
								5782
							],
							[
								5796,
								5801
							],
							[
								5858,
								5895
							],
							[
								5937,
								5943
							],
							[
								6222,
								6237
							],
							[
								6541,
								6557
							],
							[
								6649,
								6653
							],
							[
								6826,
								6847
							],
							[
								6863,
								6876
							],
							[
								6920,
								6945
							],
							[
								7085,
								7103
							],
							[
								7115,
								7122
							],
							[
								7153,
								7162
							],
							[
								7170,
								7174
							],
							[
								7193,
								7214
							],
							[
								7226,
								7233
							],
							[
								7261,
								7270
							],
							[
								7278,
								7282
							],
							[
								7344,
								7350
							],
							[
								7386,
								7405
							],
							[
								7662,
								7681
							],
							[
								7778,
								7799
							],
							[
								7812,
								7825
							],
							[
								7843,
								7875
							],
							[
								7900,
								7936
							],
							[
								8051,
								8079
							],
							[
								8148,
								8166
							],
							[
								8198,
								8202
							],
							[
								8240,
								8252
							],
							[
								8256,
								8271
							],
							[
								8316,
								8333
							],
							[
								8346,
								8368
							],
							[
								8397,
								8426
							],
							[
								8565,
								8571
							],
							[
								8606,
								8612
							],
							[
								8686,
								8704
							],
							[
								8766,
								8781
							],
							[
								8836,
								8854
							],
							[
								8940,
								8945
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							".toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							".toArrayFn = fn =>",
							".toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							".trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								433,
								442
							],
							[
								620,
								624
							],
							[
								655,
								659
							],
							[
								684,
								701
							],
							[
								760,
								768
							],
							[
								952,
								987
							],
							[
								1045,
								1074
							],
							[
								1192,
								1210
							],
							[
								1211,
								1218
							],
							[
								1219,
								1233
							],
							[
								1350,
								1363
							],
							[
								1364,
								1378
							],
							[
								1394,
								1406
							],
							[
								1463,
								1476
							],
							[
								1477,
								1491
							],
							[
								1507,
								1519
							],
							[
								1558,
								1576
							],
							[
								1597,
								1616
							],
							[
								1649,
								1668
							],
							[
								1669,
								1683
							],
							[
								1718,
								1738
							],
							[
								1787,
								1793
							],
							[
								1852,
								1875
							],
							[
								1904,
								1919
							],
							[
								2001,
								2036
							],
							[
								2065,
								2095
							],
							[
								2153,
								2179
							],
							[
								2221,
								2248
							],
							[
								2297,
								2310
							],
							[
								2311,
								2325
							],
							[
								2352,
								2357
							],
							[
								2381,
								2393
							],
							[
								2394,
								2403
							],
							[
								2477,
								2493
							],
							[
								2609,
								2633
							],
							[
								2667,
								2676
							],
							[
								2689,
								2697
							],
							[
								2753,
								2763
							],
							[
								2794,
								2800
							],
							[
								2826,
								2860
							],
							[
								2910,
								2927
							],
							[
								3192,
								3197
							],
							[
								3252,
								3262
							],
							[
								3314,
								3327
							],
							[
								3418,
								3437
							],
							[
								3438,
								3453
							],
							[
								3481,
								3513
							],
							[
								3581,
								3599
							],
							[
								3653,
								3689
							],
							[
								3739,
								3783
							],
							[
								3829,
								3859
							],
							[
								3926,
								3932
							],
							[
								3945,
								3951
							],
							[
								3971,
								3977
							],
							[
								3992,
								4008
							],
							[
								4042,
								4050
							],
							[
								4059,
								4077
							],
							[
								4090,
								4104
							],
							[
								4134,
								4152
							],
							[
								4182,
								4198
							],
							[
								4209,
								4244
							],
							[
								4288,
								4292
							],
							[
								4312,
								4321
							],
							[
								4405,
								4445
							],
							[
								4481,
								4495
							],
							[
								4584,
								4622
							],
							[
								4684,
								4688
							],
							[
								4726,
								4754
							],
							[
								4817,
								4824
							],
							[
								4825,
								4839
							],
							[
								4869,
								4886
							],
							[
								4917,
								4938
							],
							[
								4954,
								4958
							],
							[
								4988,
								5007
							],
							[
								5064,
								5081
							],
							[
								5158,
								5179
							],
							[
								5220,
								5237
							],
							[
								5281,
								5312
							],
							[
								5402,
								5420
							],
							[
								5593,
								5611
							],
							[
								5631,
								5653
							],
							[
								5667,
								5672
							],
							[
								5688,
								5711
							],
							[
								5725,
								5730
							],
							[
								5758,
								5782
							],
							[
								5796,
								5801
							],
							[
								5858,
								5895
							],
							[
								5937,
								5943
							],
							[
								6222,
								6237
							],
							[
								6541,
								6557
							],
							[
								6649,
								6653
							],
							[
								6826,
								6847
							],
							[
								6863,
								6876
							],
							[
								6920,
								6945
							],
							[
								7085,
								7103
							],
							[
								7115,
								7122
							],
							[
								7153,
								7162
							],
							[
								7170,
								7174
							],
							[
								7193,
								7214
							],
							[
								7226,
								7233
							],
							[
								7261,
								7270
							],
							[
								7278,
								7282
							],
							[
								7344,
								7350
							],
							[
								7386,
								7405
							],
							[
								7662,
								7681
							],
							[
								7778,
								7799
							],
							[
								7812,
								7825
							],
							[
								7843,
								7875
							],
							[
								7900,
								7936
							],
							[
								8051,
								8079
							],
							[
								8148,
								8166
							],
							[
								8198,
								8202
							],
							[
								8240,
								8252
							],
							[
								8256,
								8271
							],
							[
								8316,
								8333
							],
							[
								8346,
								8368
							],
							[
								8397,
								8426
							],
							[
								8565,
								8571
							],
							[
								8606,
								8612
							],
							[
								8686,
								8704
							],
							[
								8766,
								8781
							],
							[
								8836,
								8854
							],
							[
								8940,
								8945
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							".toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							".toArrayFn = fn =>",
							".toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							".trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					18,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					19,
					3,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								433,
								442
							],
							[
								620,
								624
							],
							[
								655,
								659
							],
							[
								684,
								701
							],
							[
								760,
								768
							],
							[
								952,
								987
							],
							[
								1045,
								1074
							],
							[
								1192,
								1210
							],
							[
								1211,
								1218
							],
							[
								1219,
								1233
							],
							[
								1350,
								1363
							],
							[
								1364,
								1378
							],
							[
								1394,
								1406
							],
							[
								1463,
								1476
							],
							[
								1477,
								1491
							],
							[
								1507,
								1519
							],
							[
								1558,
								1576
							],
							[
								1597,
								1616
							],
							[
								1649,
								1668
							],
							[
								1669,
								1683
							],
							[
								1718,
								1738
							],
							[
								1787,
								1793
							],
							[
								1852,
								1875
							],
							[
								1906,
								1921
							],
							[
								2003,
								2038
							],
							[
								2067,
								2097
							],
							[
								2155,
								2181
							],
							[
								2225,
								2252
							],
							[
								2301,
								2314
							],
							[
								2315,
								2329
							],
							[
								2356,
								2361
							],
							[
								2385,
								2397
							],
							[
								2398,
								2407
							],
							[
								2481,
								2497
							],
							[
								2613,
								2637
							],
							[
								2671,
								2680
							],
							[
								2693,
								2701
							],
							[
								2757,
								2767
							],
							[
								2798,
								2804
							],
							[
								2830,
								2864
							],
							[
								2914,
								2931
							],
							[
								3196,
								3201
							],
							[
								3256,
								3266
							],
							[
								3318,
								3331
							],
							[
								3422,
								3441
							],
							[
								3442,
								3457
							],
							[
								3485,
								3517
							],
							[
								3585,
								3603
							],
							[
								3657,
								3693
							],
							[
								3743,
								3787
							],
							[
								3833,
								3863
							],
							[
								3930,
								3936
							],
							[
								3949,
								3955
							],
							[
								3975,
								3981
							],
							[
								3996,
								4012
							],
							[
								4046,
								4054
							],
							[
								4063,
								4081
							],
							[
								4094,
								4108
							],
							[
								4138,
								4156
							],
							[
								4186,
								4202
							],
							[
								4213,
								4248
							],
							[
								4292,
								4296
							],
							[
								4316,
								4325
							],
							[
								4409,
								4449
							],
							[
								4485,
								4499
							],
							[
								4588,
								4626
							],
							[
								4688,
								4692
							],
							[
								4730,
								4758
							],
							[
								4821,
								4828
							],
							[
								4829,
								4843
							],
							[
								4873,
								4890
							],
							[
								4921,
								4942
							],
							[
								4958,
								4962
							],
							[
								4992,
								5011
							],
							[
								5068,
								5085
							],
							[
								5162,
								5183
							],
							[
								5224,
								5241
							],
							[
								5285,
								5316
							],
							[
								5406,
								5424
							],
							[
								5597,
								5615
							],
							[
								5635,
								5657
							],
							[
								5671,
								5676
							],
							[
								5692,
								5715
							],
							[
								5729,
								5734
							],
							[
								5762,
								5786
							],
							[
								5800,
								5805
							],
							[
								5862,
								5899
							],
							[
								5941,
								5947
							],
							[
								6226,
								6241
							],
							[
								6545,
								6561
							],
							[
								6653,
								6657
							],
							[
								6830,
								6851
							],
							[
								6867,
								6880
							],
							[
								6924,
								6949
							],
							[
								7089,
								7107
							],
							[
								7119,
								7126
							],
							[
								7157,
								7166
							],
							[
								7174,
								7178
							],
							[
								7197,
								7218
							],
							[
								7230,
								7237
							],
							[
								7265,
								7274
							],
							[
								7282,
								7286
							],
							[
								7350,
								7356
							],
							[
								7392,
								7411
							],
							[
								7668,
								7687
							],
							[
								7784,
								7805
							],
							[
								7818,
								7831
							],
							[
								7849,
								7881
							],
							[
								7906,
								7942
							],
							[
								8057,
								8085
							],
							[
								8154,
								8172
							],
							[
								8204,
								8208
							],
							[
								8246,
								8258
							],
							[
								8262,
								8277
							],
							[
								8322,
								8339
							],
							[
								8352,
								8374
							],
							[
								8403,
								8432
							],
							[
								8571,
								8577
							],
							[
								8612,
								8618
							],
							[
								8692,
								8710
							],
							[
								8772,
								8787
							],
							[
								8842,
								8860
							],
							[
								8946,
								8951
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							".toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							".toArrayFn = fn =>",
							".toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							".trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"BQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAgIGZ1bmN0aW9uKihvYmopCiAgLmdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgLmdldE9wdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24qKGUsIHQpAAAAAAAAAABYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAACAgZnVuY3Rpb24qKG9iaikKICAuZ2V0Q2FyZEl0ZXJhdG9yID0gZnVuY3Rpb24qKCkKICAuZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAFgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								433,
								442
							],
							[
								620,
								624
							],
							[
								655,
								659
							],
							[
								684,
								701
							],
							[
								760,
								768
							],
							[
								952,
								987
							],
							[
								1045,
								1074
							],
							[
								1192,
								1210
							],
							[
								1211,
								1218
							],
							[
								1219,
								1233
							],
							[
								1350,
								1363
							],
							[
								1364,
								1378
							],
							[
								1394,
								1406
							],
							[
								1463,
								1476
							],
							[
								1477,
								1491
							],
							[
								1507,
								1519
							],
							[
								1558,
								1576
							],
							[
								1597,
								1616
							],
							[
								1649,
								1668
							],
							[
								1669,
								1683
							],
							[
								1718,
								1738
							],
							[
								1785,
								1791
							],
							[
								1850,
								1873
							],
							[
								1902,
								1917
							],
							[
								1999,
								2034
							],
							[
								2063,
								2093
							],
							[
								2151,
								2177
							],
							[
								2219,
								2246
							],
							[
								2295,
								2308
							],
							[
								2309,
								2323
							],
							[
								2350,
								2355
							],
							[
								2379,
								2391
							],
							[
								2392,
								2401
							],
							[
								2475,
								2491
							],
							[
								2607,
								2631
							],
							[
								2665,
								2674
							],
							[
								2687,
								2695
							],
							[
								2751,
								2761
							],
							[
								2792,
								2798
							],
							[
								2824,
								2858
							],
							[
								2908,
								2925
							],
							[
								3190,
								3195
							],
							[
								3250,
								3260
							],
							[
								3312,
								3325
							],
							[
								3416,
								3435
							],
							[
								3436,
								3451
							],
							[
								3479,
								3511
							],
							[
								3579,
								3597
							],
							[
								3651,
								3687
							],
							[
								3737,
								3781
							],
							[
								3827,
								3857
							],
							[
								3924,
								3930
							],
							[
								3943,
								3949
							],
							[
								3969,
								3975
							],
							[
								3990,
								4006
							],
							[
								4040,
								4048
							],
							[
								4057,
								4075
							],
							[
								4088,
								4102
							],
							[
								4132,
								4150
							],
							[
								4180,
								4196
							],
							[
								4207,
								4242
							],
							[
								4286,
								4290
							],
							[
								4310,
								4319
							],
							[
								4403,
								4443
							],
							[
								4479,
								4493
							],
							[
								4582,
								4620
							],
							[
								4682,
								4686
							],
							[
								4724,
								4752
							],
							[
								4815,
								4822
							],
							[
								4823,
								4837
							],
							[
								4867,
								4884
							],
							[
								4915,
								4936
							],
							[
								4952,
								4956
							],
							[
								4986,
								5005
							],
							[
								5062,
								5079
							],
							[
								5156,
								5177
							],
							[
								5218,
								5235
							],
							[
								5279,
								5310
							],
							[
								5400,
								5418
							],
							[
								5591,
								5609
							],
							[
								5629,
								5651
							],
							[
								5665,
								5670
							],
							[
								5686,
								5709
							],
							[
								5723,
								5728
							],
							[
								5756,
								5780
							],
							[
								5794,
								5799
							],
							[
								5856,
								5893
							],
							[
								5935,
								5941
							],
							[
								6220,
								6235
							],
							[
								6539,
								6555
							],
							[
								6647,
								6651
							],
							[
								6824,
								6845
							],
							[
								6861,
								6874
							],
							[
								6918,
								6943
							],
							[
								7083,
								7101
							],
							[
								7113,
								7120
							],
							[
								7151,
								7160
							],
							[
								7168,
								7172
							],
							[
								7191,
								7212
							],
							[
								7224,
								7231
							],
							[
								7259,
								7268
							],
							[
								7276,
								7280
							],
							[
								7342,
								7348
							],
							[
								7384,
								7403
							],
							[
								7660,
								7679
							],
							[
								7776,
								7797
							],
							[
								7810,
								7823
							],
							[
								7841,
								7873
							],
							[
								7898,
								7934
							],
							[
								8049,
								8077
							],
							[
								8146,
								8164
							],
							[
								8196,
								8200
							],
							[
								8238,
								8250
							],
							[
								8254,
								8269
							],
							[
								8314,
								8331
							],
							[
								8344,
								8366
							],
							[
								8395,
								8424
							],
							[
								8563,
								8569
							],
							[
								8604,
								8610
							],
							[
								8684,
								8702
							],
							[
								8764,
								8779
							],
							[
								8834,
								8852
							],
							[
								8938,
								8943
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							".toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							".toArrayFn = fn =>",
							".toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							".trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								433,
								442
							],
							[
								620,
								624
							],
							[
								655,
								659
							],
							[
								684,
								701
							],
							[
								760,
								768
							],
							[
								952,
								987
							],
							[
								1045,
								1074
							],
							[
								1192,
								1210
							],
							[
								1211,
								1218
							],
							[
								1219,
								1233
							],
							[
								1350,
								1363
							],
							[
								1364,
								1378
							],
							[
								1394,
								1406
							],
							[
								1463,
								1476
							],
							[
								1477,
								1491
							],
							[
								1507,
								1519
							],
							[
								1557,
								1574
							],
							[
								1594,
								1612
							],
							[
								1645,
								1664
							],
							[
								1665,
								1679
							],
							[
								1714,
								1734
							],
							[
								1781,
								1787
							],
							[
								1846,
								1869
							],
							[
								1898,
								1913
							],
							[
								1995,
								2030
							],
							[
								2059,
								2089
							],
							[
								2147,
								2173
							],
							[
								2215,
								2242
							],
							[
								2291,
								2304
							],
							[
								2305,
								2319
							],
							[
								2346,
								2351
							],
							[
								2375,
								2387
							],
							[
								2388,
								2397
							],
							[
								2471,
								2487
							],
							[
								2603,
								2627
							],
							[
								2661,
								2670
							],
							[
								2683,
								2691
							],
							[
								2747,
								2757
							],
							[
								2788,
								2794
							],
							[
								2820,
								2854
							],
							[
								2904,
								2921
							],
							[
								3186,
								3191
							],
							[
								3246,
								3256
							],
							[
								3308,
								3321
							],
							[
								3412,
								3431
							],
							[
								3432,
								3447
							],
							[
								3475,
								3507
							],
							[
								3575,
								3593
							],
							[
								3647,
								3683
							],
							[
								3733,
								3777
							],
							[
								3823,
								3853
							],
							[
								3920,
								3926
							],
							[
								3939,
								3945
							],
							[
								3965,
								3971
							],
							[
								3986,
								4002
							],
							[
								4036,
								4044
							],
							[
								4053,
								4071
							],
							[
								4084,
								4098
							],
							[
								4128,
								4146
							],
							[
								4176,
								4192
							],
							[
								4203,
								4238
							],
							[
								4282,
								4286
							],
							[
								4306,
								4315
							],
							[
								4399,
								4439
							],
							[
								4475,
								4489
							],
							[
								4578,
								4616
							],
							[
								4678,
								4682
							],
							[
								4720,
								4748
							],
							[
								4811,
								4818
							],
							[
								4819,
								4833
							],
							[
								4863,
								4880
							],
							[
								4911,
								4932
							],
							[
								4948,
								4952
							],
							[
								4982,
								5001
							],
							[
								5058,
								5075
							],
							[
								5152,
								5173
							],
							[
								5214,
								5231
							],
							[
								5275,
								5306
							],
							[
								5396,
								5414
							],
							[
								5587,
								5605
							],
							[
								5625,
								5647
							],
							[
								5661,
								5666
							],
							[
								5682,
								5705
							],
							[
								5719,
								5724
							],
							[
								5752,
								5776
							],
							[
								5790,
								5795
							],
							[
								5852,
								5889
							],
							[
								5931,
								5937
							],
							[
								6216,
								6231
							],
							[
								6535,
								6551
							],
							[
								6643,
								6647
							],
							[
								6820,
								6841
							],
							[
								6857,
								6870
							],
							[
								6914,
								6939
							],
							[
								7079,
								7097
							],
							[
								7109,
								7116
							],
							[
								7147,
								7156
							],
							[
								7164,
								7168
							],
							[
								7187,
								7208
							],
							[
								7220,
								7227
							],
							[
								7255,
								7264
							],
							[
								7272,
								7276
							],
							[
								7338,
								7344
							],
							[
								7380,
								7399
							],
							[
								7656,
								7675
							],
							[
								7772,
								7793
							],
							[
								7806,
								7819
							],
							[
								7837,
								7869
							],
							[
								7894,
								7930
							],
							[
								8045,
								8073
							],
							[
								8142,
								8160
							],
							[
								8192,
								8196
							],
							[
								8234,
								8246
							],
							[
								8250,
								8265
							],
							[
								8310,
								8327
							],
							[
								8340,
								8362
							],
							[
								8391,
								8420
							],
							[
								8559,
								8565
							],
							[
								8600,
								8606
							],
							[
								8680,
								8698
							],
							[
								8760,
								8775
							],
							[
								8830,
								8848
							],
							[
								8934,
								8939
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							".toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							".trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								433,
								442
							],
							[
								620,
								624
							],
							[
								655,
								659
							],
							[
								684,
								701
							],
							[
								760,
								768
							],
							[
								952,
								987
							],
							[
								1045,
								1074
							],
							[
								1190,
								1208
							],
							[
								1209,
								1216
							],
							[
								1217,
								1231
							],
							[
								1348,
								1361
							],
							[
								1362,
								1376
							],
							[
								1392,
								1404
							],
							[
								1461,
								1474
							],
							[
								1475,
								1489
							],
							[
								1505,
								1517
							],
							[
								1555,
								1572
							],
							[
								1592,
								1610
							],
							[
								1643,
								1662
							],
							[
								1663,
								1677
							],
							[
								1712,
								1732
							],
							[
								1779,
								1785
							],
							[
								1844,
								1867
							],
							[
								1896,
								1911
							],
							[
								1993,
								2028
							],
							[
								2057,
								2087
							],
							[
								2145,
								2171
							],
							[
								2213,
								2240
							],
							[
								2289,
								2302
							],
							[
								2303,
								2317
							],
							[
								2344,
								2349
							],
							[
								2373,
								2385
							],
							[
								2386,
								2395
							],
							[
								2469,
								2485
							],
							[
								2601,
								2625
							],
							[
								2659,
								2668
							],
							[
								2681,
								2689
							],
							[
								2745,
								2755
							],
							[
								2786,
								2792
							],
							[
								2818,
								2852
							],
							[
								2902,
								2919
							],
							[
								3184,
								3189
							],
							[
								3244,
								3254
							],
							[
								3306,
								3319
							],
							[
								3410,
								3429
							],
							[
								3430,
								3445
							],
							[
								3473,
								3505
							],
							[
								3573,
								3591
							],
							[
								3645,
								3681
							],
							[
								3731,
								3775
							],
							[
								3821,
								3851
							],
							[
								3918,
								3924
							],
							[
								3937,
								3943
							],
							[
								3963,
								3969
							],
							[
								3984,
								4000
							],
							[
								4034,
								4042
							],
							[
								4051,
								4069
							],
							[
								4082,
								4096
							],
							[
								4126,
								4144
							],
							[
								4174,
								4190
							],
							[
								4201,
								4236
							],
							[
								4280,
								4284
							],
							[
								4304,
								4313
							],
							[
								4397,
								4437
							],
							[
								4473,
								4487
							],
							[
								4576,
								4614
							],
							[
								4676,
								4680
							],
							[
								4718,
								4746
							],
							[
								4809,
								4816
							],
							[
								4817,
								4831
							],
							[
								4861,
								4878
							],
							[
								4909,
								4930
							],
							[
								4946,
								4950
							],
							[
								4980,
								4999
							],
							[
								5056,
								5073
							],
							[
								5150,
								5171
							],
							[
								5212,
								5229
							],
							[
								5273,
								5304
							],
							[
								5394,
								5412
							],
							[
								5585,
								5603
							],
							[
								5623,
								5645
							],
							[
								5659,
								5664
							],
							[
								5680,
								5703
							],
							[
								5717,
								5722
							],
							[
								5750,
								5774
							],
							[
								5788,
								5793
							],
							[
								5850,
								5887
							],
							[
								5929,
								5935
							],
							[
								6214,
								6229
							],
							[
								6533,
								6549
							],
							[
								6641,
								6645
							],
							[
								6818,
								6839
							],
							[
								6855,
								6868
							],
							[
								6912,
								6937
							],
							[
								7077,
								7095
							],
							[
								7107,
								7114
							],
							[
								7145,
								7154
							],
							[
								7162,
								7166
							],
							[
								7185,
								7206
							],
							[
								7218,
								7225
							],
							[
								7253,
								7262
							],
							[
								7270,
								7274
							],
							[
								7336,
								7342
							],
							[
								7378,
								7397
							],
							[
								7654,
								7673
							],
							[
								7770,
								7791
							],
							[
								7804,
								7817
							],
							[
								7835,
								7867
							],
							[
								7892,
								7928
							],
							[
								8043,
								8071
							],
							[
								8140,
								8158
							],
							[
								8190,
								8194
							],
							[
								8232,
								8244
							],
							[
								8248,
								8263
							],
							[
								8308,
								8325
							],
							[
								8338,
								8360
							],
							[
								8389,
								8418
							],
							[
								8557,
								8563
							],
							[
								8598,
								8604
							],
							[
								8678,
								8696
							],
							[
								8758,
								8773
							],
							[
								8828,
								8846
							],
							[
								8932,
								8937
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							".toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							".trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								465,
								474
							],
							[
								664,
								668
							],
							[
								699,
								703
							],
							[
								730,
								747
							],
							[
								808,
								816
							],
							[
								1010,
								1045
							],
							[
								1109,
								1140
							],
							[
								1270,
								1290
							],
							[
								1291,
								1300
							],
							[
								1301,
								1317
							],
							[
								1442,
								1457
							],
							[
								1458,
								1474
							],
							[
								1492,
								1504
							],
							[
								1563,
								1578
							],
							[
								1579,
								1595
							],
							[
								1613,
								1625
							],
							[
								1665,
								1682
							],
							[
								1704,
								1722
							],
							[
								1757,
								1778
							],
							[
								1779,
								1795
							],
							[
								1834,
								1854
							],
							[
								1903,
								1909
							],
							[
								1970,
								1993
							],
							[
								2024,
								2039
							],
							[
								2127,
								2162
							],
							[
								2193,
								2223
							],
							[
								2283,
								2309
							],
							[
								2353,
								2380
							],
							[
								2431,
								2446
							],
							[
								2447,
								2463
							],
							[
								2492,
								2497
							],
							[
								2523,
								2537
							],
							[
								2538,
								2549
							],
							[
								2631,
								2647
							],
							[
								2777,
								2801
							],
							[
								2839,
								2850
							],
							[
								2863,
								2873
							],
							[
								2931,
								2941
							],
							[
								2972,
								2978
							],
							[
								3012,
								3046
							],
							[
								3104,
								3121
							],
							[
								3398,
								3403
							],
							[
								3460,
								3470
							],
							[
								3526,
								3539
							],
							[
								3634,
								3655
							],
							[
								3656,
								3673
							],
							[
								3705,
								3737
							],
							[
								3807,
								3825
							],
							[
								3883,
								3919
							],
							[
								3971,
								4015
							],
							[
								4063,
								4093
							],
							[
								4164,
								4170
							],
							[
								4183,
								4189
							],
							[
								4211,
								4217
							],
							[
								4234,
								4250
							],
							[
								4288,
								4296
							],
							[
								4305,
								4325
							],
							[
								4342,
								4356
							],
							[
								4388,
								4406
							],
							[
								4438,
								4454
							],
							[
								4467,
								4502
							],
							[
								4550,
								4554
							],
							[
								4576,
								4585
							],
							[
								4671,
								4711
							],
							[
								4751,
								4765
							],
							[
								4858,
								4896
							],
							[
								4960,
								4964
							],
							[
								5004,
								5032
							],
							[
								5097,
								5106
							],
							[
								5107,
								5123
							],
							[
								5157,
								5174
							],
							[
								5207,
								5228
							],
							[
								5244,
								5248
							],
							[
								5280,
								5299
							],
							[
								5358,
								5375
							],
							[
								5454,
								5475
							],
							[
								5518,
								5535
							],
							[
								5581,
								5612
							],
							[
								5716,
								5734
							],
							[
								5927,
								5945
							],
							[
								5967,
								5989
							],
							[
								6003,
								6008
							],
							[
								6026,
								6049
							],
							[
								6063,
								6068
							],
							[
								6098,
								6122
							],
							[
								6136,
								6141
							],
							[
								6200,
								6237
							],
							[
								6285,
								6291
							],
							[
								6588,
								6603
							],
							[
								6917,
								6933
							],
							[
								7027,
								7031
							],
							[
								7210,
								7231
							],
							[
								7247,
								7260
							],
							[
								7306,
								7331
							],
							[
								7473,
								7491
							],
							[
								7503,
								7510
							],
							[
								7541,
								7550
							],
							[
								7558,
								7562
							],
							[
								7583,
								7604
							],
							[
								7616,
								7623
							],
							[
								7651,
								7660
							],
							[
								7668,
								7672
							],
							[
								7738,
								7744
							],
							[
								7782,
								7801
							],
							[
								8070,
								8089
							],
							[
								8188,
								8209
							],
							[
								8222,
								8235
							],
							[
								8255,
								8287
							],
							[
								8314,
								8350
							],
							[
								8477,
								8505
							],
							[
								8576,
								8594
							],
							[
								8632,
								8636
							],
							[
								8678,
								8690
							],
							[
								8694,
								8709
							],
							[
								8760,
								8777
							],
							[
								8790,
								8812
							],
							[
								8843,
								8872
							],
							[
								9021,
								9027
							],
							[
								9064,
								9070
							],
							[
								9148,
								9166
							],
							[
								9230,
								9245
							],
							[
								9302,
								9320
							],
							[
								9414,
								9419
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							".toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							".trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								497,
								506
							],
							[
								708,
								712
							],
							[
								743,
								747
							],
							[
								775,
								791
							],
							[
								852,
								860
							],
							[
								1064,
								1099
							],
							[
								1169,
								1202
							],
							[
								1346,
								1368
							],
							[
								1369,
								1380
							],
							[
								1381,
								1399
							],
							[
								1532,
								1549
							],
							[
								1550,
								1568
							],
							[
								1588,
								1600
							],
							[
								1661,
								1678
							],
							[
								1679,
								1697
							],
							[
								1717,
								1729
							],
							[
								1771,
								1788
							],
							[
								1812,
								1830
							],
							[
								1867,
								1890
							],
							[
								1891,
								1909
							],
							[
								1952,
								1972
							],
							[
								2023,
								2029
							],
							[
								2092,
								2115
							],
							[
								2148,
								2163
							],
							[
								2257,
								2292
							],
							[
								2325,
								2355
							],
							[
								2417,
								2443
							],
							[
								2489,
								2516
							],
							[
								2569,
								2586
							],
							[
								2587,
								2605
							],
							[
								2636,
								2641
							],
							[
								2669,
								2685
							],
							[
								2686,
								2699
							],
							[
								2789,
								2805
							],
							[
								2949,
								2973
							],
							[
								3015,
								3028
							],
							[
								3041,
								3053
							],
							[
								3113,
								3123
							],
							[
								3154,
								3160
							],
							[
								3202,
								3236
							],
							[
								3302,
								3319
							],
							[
								3608,
								3613
							],
							[
								3672,
								3682
							],
							[
								3742,
								3755
							],
							[
								3854,
								3877
							],
							[
								3878,
								3897
							],
							[
								3933,
								3965
							],
							[
								4037,
								4055
							],
							[
								4117,
								4153
							],
							[
								4207,
								4251
							],
							[
								4301,
								4331
							],
							[
								4406,
								4412
							],
							[
								4425,
								4431
							],
							[
								4455,
								4461
							],
							[
								4480,
								4496
							],
							[
								4538,
								4546
							],
							[
								4555,
								4577
							],
							[
								4598,
								4612
							],
							[
								4646,
								4664
							],
							[
								4698,
								4714
							],
							[
								4729,
								4764
							],
							[
								4816,
								4820
							],
							[
								4844,
								4853
							],
							[
								4941,
								4981
							],
							[
								5025,
								5039
							],
							[
								5136,
								5174
							],
							[
								5240,
								5244
							],
							[
								5286,
								5314
							],
							[
								5381,
								5392
							],
							[
								5393,
								5411
							],
							[
								5449,
								5466
							],
							[
								5501,
								5522
							],
							[
								5538,
								5542
							],
							[
								5576,
								5595
							],
							[
								5656,
								5673
							],
							[
								5754,
								5775
							],
							[
								5820,
								5837
							],
							[
								5885,
								5916
							],
							[
								6034,
								6052
							],
							[
								6265,
								6283
							],
							[
								6307,
								6329
							],
							[
								6343,
								6348
							],
							[
								6368,
								6391
							],
							[
								6405,
								6410
							],
							[
								6442,
								6466
							],
							[
								6480,
								6485
							],
							[
								6546,
								6583
							],
							[
								6637,
								6643
							],
							[
								6958,
								6973
							],
							[
								7297,
								7313
							],
							[
								7409,
								7413
							],
							[
								7598,
								7619
							],
							[
								7635,
								7648
							],
							[
								7696,
								7721
							],
							[
								7865,
								7883
							],
							[
								7895,
								7902
							],
							[
								7933,
								7942
							],
							[
								7950,
								7954
							],
							[
								7977,
								7998
							],
							[
								8010,
								8017
							],
							[
								8045,
								8054
							],
							[
								8062,
								8066
							],
							[
								8136,
								8142
							],
							[
								8182,
								8201
							],
							[
								8482,
								8501
							],
							[
								8602,
								8623
							],
							[
								8636,
								8649
							],
							[
								8671,
								8703
							],
							[
								8732,
								8768
							],
							[
								8907,
								8935
							],
							[
								9008,
								9026
							],
							[
								9070,
								9074
							],
							[
								9120,
								9132
							],
							[
								9136,
								9151
							],
							[
								9208,
								9225
							],
							[
								9238,
								9260
							],
							[
								9293,
								9322
							],
							[
								9481,
								9487
							],
							[
								9526,
								9532
							],
							[
								9614,
								9632
							],
							[
								9698,
								9713
							],
							[
								9772,
								9790
							],
							[
								9892,
								9897
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							".trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								497,
								506
							],
							[
								708,
								712
							],
							[
								743,
								747
							],
							[
								775,
								791
							],
							[
								852,
								860
							],
							[
								1064,
								1099
							],
							[
								1169,
								1202
							],
							[
								1346,
								1368
							],
							[
								1369,
								1380
							],
							[
								1381,
								1399
							],
							[
								1531,
								1548
							],
							[
								1549,
								1567
							],
							[
								1587,
								1599
							],
							[
								1658,
								1675
							],
							[
								1676,
								1694
							],
							[
								1714,
								1726
							],
							[
								1768,
								1785
							],
							[
								1809,
								1827
							],
							[
								1862,
								1885
							],
							[
								1886,
								1904
							],
							[
								1946,
								1965
							],
							[
								2016,
								2022
							],
							[
								2085,
								2108
							],
							[
								2141,
								2156
							],
							[
								2250,
								2285
							],
							[
								2318,
								2348
							],
							[
								2410,
								2436
							],
							[
								2482,
								2509
							],
							[
								2562,
								2579
							],
							[
								2580,
								2598
							],
							[
								2629,
								2634
							],
							[
								2662,
								2678
							],
							[
								2679,
								2692
							],
							[
								2782,
								2798
							],
							[
								2942,
								2966
							],
							[
								3008,
								3021
							],
							[
								3034,
								3046
							],
							[
								3106,
								3116
							],
							[
								3147,
								3153
							],
							[
								3195,
								3229
							],
							[
								3295,
								3312
							],
							[
								3601,
								3606
							],
							[
								3665,
								3675
							],
							[
								3735,
								3748
							],
							[
								3847,
								3870
							],
							[
								3871,
								3890
							],
							[
								3926,
								3958
							],
							[
								4030,
								4048
							],
							[
								4110,
								4146
							],
							[
								4200,
								4244
							],
							[
								4294,
								4324
							],
							[
								4399,
								4405
							],
							[
								4418,
								4424
							],
							[
								4448,
								4454
							],
							[
								4473,
								4489
							],
							[
								4531,
								4539
							],
							[
								4548,
								4570
							],
							[
								4591,
								4605
							],
							[
								4639,
								4657
							],
							[
								4691,
								4707
							],
							[
								4722,
								4757
							],
							[
								4809,
								4813
							],
							[
								4837,
								4846
							],
							[
								4934,
								4974
							],
							[
								5018,
								5032
							],
							[
								5129,
								5167
							],
							[
								5233,
								5237
							],
							[
								5279,
								5307
							],
							[
								5374,
								5385
							],
							[
								5386,
								5404
							],
							[
								5442,
								5459
							],
							[
								5494,
								5515
							],
							[
								5531,
								5535
							],
							[
								5569,
								5588
							],
							[
								5649,
								5666
							],
							[
								5747,
								5768
							],
							[
								5813,
								5830
							],
							[
								5878,
								5909
							],
							[
								6027,
								6045
							],
							[
								6258,
								6276
							],
							[
								6300,
								6322
							],
							[
								6336,
								6341
							],
							[
								6361,
								6384
							],
							[
								6398,
								6403
							],
							[
								6435,
								6459
							],
							[
								6473,
								6478
							],
							[
								6539,
								6576
							],
							[
								6630,
								6636
							],
							[
								6951,
								6966
							],
							[
								7290,
								7306
							],
							[
								7402,
								7406
							],
							[
								7591,
								7612
							],
							[
								7628,
								7641
							],
							[
								7689,
								7714
							],
							[
								7858,
								7876
							],
							[
								7888,
								7895
							],
							[
								7926,
								7935
							],
							[
								7943,
								7947
							],
							[
								7970,
								7991
							],
							[
								8003,
								8010
							],
							[
								8038,
								8047
							],
							[
								8055,
								8059
							],
							[
								8129,
								8135
							],
							[
								8175,
								8194
							],
							[
								8475,
								8494
							],
							[
								8595,
								8616
							],
							[
								8629,
								8642
							],
							[
								8664,
								8696
							],
							[
								8725,
								8761
							],
							[
								8900,
								8928
							],
							[
								9001,
								9019
							],
							[
								9063,
								9067
							],
							[
								9113,
								9125
							],
							[
								9129,
								9144
							],
							[
								9201,
								9218
							],
							[
								9231,
								9253
							],
							[
								9286,
								9315
							],
							[
								9474,
								9480
							],
							[
								9519,
								9525
							],
							[
								9607,
								9625
							],
							[
								9691,
								9706
							],
							[
								9765,
								9783
							],
							[
								9885,
								9890
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								529,
								538
							],
							[
								752,
								756
							],
							[
								787,
								791
							],
							[
								821,
								837
							],
							[
								900,
								908
							],
							[
								1122,
								1157
							],
							[
								1233,
								1268
							],
							[
								1426,
								1450
							],
							[
								1451,
								1464
							],
							[
								1465,
								1485
							],
							[
								1625,
								1644
							],
							[
								1645,
								1665
							],
							[
								1687,
								1699
							],
							[
								1760,
								1779
							],
							[
								1780,
								1800
							],
							[
								1822,
								1834
							],
							[
								1878,
								1895
							],
							[
								1921,
								1939
							],
							[
								1976,
								2001
							],
							[
								2002,
								2022
							],
							[
								2068,
								2087
							],
							[
								2140,
								2146
							],
							[
								2211,
								2234
							],
							[
								2269,
								2284
							],
							[
								2384,
								2419
							],
							[
								2454,
								2484
							],
							[
								2548,
								2574
							],
							[
								2622,
								2649
							],
							[
								2704,
								2723
							],
							[
								2724,
								2744
							],
							[
								2777,
								2782
							],
							[
								2812,
								2830
							],
							[
								2831,
								2846
							],
							[
								2944,
								2960
							],
							[
								3118,
								3142
							],
							[
								3188,
								3203
							],
							[
								3216,
								3230
							],
							[
								3292,
								3302
							],
							[
								3333,
								3339
							],
							[
								3389,
								3423
							],
							[
								3497,
								3514
							],
							[
								3815,
								3820
							],
							[
								3881,
								3891
							],
							[
								3955,
								3968
							],
							[
								4071,
								4096
							],
							[
								4097,
								4118
							],
							[
								4158,
								4190
							],
							[
								4264,
								4282
							],
							[
								4348,
								4384
							],
							[
								4440,
								4484
							],
							[
								4536,
								4566
							],
							[
								4645,
								4651
							],
							[
								4664,
								4670
							],
							[
								4696,
								4702
							],
							[
								4723,
								4739
							],
							[
								4785,
								4793
							],
							[
								4802,
								4826
							],
							[
								4851,
								4865
							],
							[
								4901,
								4919
							],
							[
								4955,
								4971
							],
							[
								4988,
								5023
							],
							[
								5079,
								5083
							],
							[
								5109,
								5118
							],
							[
								5208,
								5248
							],
							[
								5296,
								5310
							],
							[
								5411,
								5449
							],
							[
								5517,
								5521
							],
							[
								5565,
								5593
							],
							[
								5662,
								5675
							],
							[
								5676,
								5696
							],
							[
								5738,
								5755
							],
							[
								5792,
								5813
							],
							[
								5829,
								5833
							],
							[
								5869,
								5888
							],
							[
								5951,
								5968
							],
							[
								6051,
								6072
							],
							[
								6119,
								6136
							],
							[
								6186,
								6217
							],
							[
								6349,
								6367
							],
							[
								6600,
								6618
							],
							[
								6644,
								6666
							],
							[
								6680,
								6685
							],
							[
								6707,
								6730
							],
							[
								6744,
								6749
							],
							[
								6783,
								6807
							],
							[
								6821,
								6826
							],
							[
								6889,
								6926
							],
							[
								6986,
								6992
							],
							[
								7325,
								7340
							],
							[
								7674,
								7690
							],
							[
								7788,
								7792
							],
							[
								7983,
								8004
							],
							[
								8020,
								8033
							],
							[
								8083,
								8108
							],
							[
								8254,
								8272
							],
							[
								8284,
								8291
							],
							[
								8322,
								8331
							],
							[
								8339,
								8343
							],
							[
								8368,
								8389
							],
							[
								8401,
								8408
							],
							[
								8436,
								8445
							],
							[
								8453,
								8457
							],
							[
								8531,
								8537
							],
							[
								8579,
								8598
							],
							[
								8891,
								8910
							],
							[
								9013,
								9034
							],
							[
								9047,
								9060
							],
							[
								9084,
								9116
							],
							[
								9147,
								9183
							],
							[
								9334,
								9362
							],
							[
								9437,
								9455
							],
							[
								9505,
								9509
							],
							[
								9559,
								9571
							],
							[
								9575,
								9590
							],
							[
								9653,
								9670
							],
							[
								9683,
								9705
							],
							[
								9740,
								9769
							],
							[
								9938,
								9944
							],
							[
								9985,
								9991
							],
							[
								10077,
								10095
							],
							[
								10163,
								10178
							],
							[
								10239,
								10257
							],
							[
								10367,
								10372
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								529,
								538
							],
							[
								752,
								756
							],
							[
								787,
								791
							],
							[
								821,
								837
							],
							[
								900,
								908
							],
							[
								1122,
								1157
							],
							[
								1233,
								1268
							],
							[
								1426,
								1450
							],
							[
								1451,
								1464
							],
							[
								1465,
								1485
							],
							[
								1624,
								1643
							],
							[
								1644,
								1664
							],
							[
								1686,
								1698
							],
							[
								1759,
								1778
							],
							[
								1779,
								1799
							],
							[
								1821,
								1833
							],
							[
								1877,
								1894
							],
							[
								1920,
								1938
							],
							[
								1975,
								2000
							],
							[
								2001,
								2021
							],
							[
								2067,
								2086
							],
							[
								2139,
								2145
							],
							[
								2210,
								2233
							],
							[
								2268,
								2283
							],
							[
								2383,
								2418
							],
							[
								2453,
								2483
							],
							[
								2547,
								2573
							],
							[
								2621,
								2648
							],
							[
								2703,
								2722
							],
							[
								2723,
								2743
							],
							[
								2776,
								2781
							],
							[
								2811,
								2829
							],
							[
								2830,
								2845
							],
							[
								2943,
								2959
							],
							[
								3117,
								3141
							],
							[
								3187,
								3202
							],
							[
								3215,
								3229
							],
							[
								3291,
								3301
							],
							[
								3332,
								3338
							],
							[
								3388,
								3422
							],
							[
								3496,
								3513
							],
							[
								3814,
								3819
							],
							[
								3880,
								3890
							],
							[
								3954,
								3967
							],
							[
								4070,
								4095
							],
							[
								4096,
								4117
							],
							[
								4157,
								4189
							],
							[
								4263,
								4281
							],
							[
								4347,
								4383
							],
							[
								4439,
								4483
							],
							[
								4535,
								4565
							],
							[
								4644,
								4650
							],
							[
								4663,
								4669
							],
							[
								4695,
								4701
							],
							[
								4722,
								4738
							],
							[
								4784,
								4792
							],
							[
								4801,
								4825
							],
							[
								4850,
								4864
							],
							[
								4900,
								4918
							],
							[
								4954,
								4970
							],
							[
								4987,
								5022
							],
							[
								5078,
								5082
							],
							[
								5108,
								5117
							],
							[
								5207,
								5247
							],
							[
								5295,
								5309
							],
							[
								5410,
								5448
							],
							[
								5516,
								5520
							],
							[
								5564,
								5592
							],
							[
								5661,
								5674
							],
							[
								5675,
								5695
							],
							[
								5737,
								5754
							],
							[
								5791,
								5812
							],
							[
								5828,
								5832
							],
							[
								5868,
								5887
							],
							[
								5950,
								5967
							],
							[
								6050,
								6071
							],
							[
								6118,
								6135
							],
							[
								6185,
								6216
							],
							[
								6348,
								6366
							],
							[
								6599,
								6617
							],
							[
								6643,
								6665
							],
							[
								6679,
								6684
							],
							[
								6706,
								6729
							],
							[
								6743,
								6748
							],
							[
								6782,
								6806
							],
							[
								6820,
								6825
							],
							[
								6888,
								6925
							],
							[
								6985,
								6991
							],
							[
								7324,
								7339
							],
							[
								7673,
								7689
							],
							[
								7787,
								7791
							],
							[
								7982,
								8003
							],
							[
								8019,
								8032
							],
							[
								8082,
								8107
							],
							[
								8253,
								8271
							],
							[
								8283,
								8290
							],
							[
								8321,
								8330
							],
							[
								8338,
								8342
							],
							[
								8367,
								8388
							],
							[
								8400,
								8407
							],
							[
								8435,
								8444
							],
							[
								8452,
								8456
							],
							[
								8530,
								8536
							],
							[
								8578,
								8597
							],
							[
								8890,
								8909
							],
							[
								9012,
								9033
							],
							[
								9046,
								9059
							],
							[
								9083,
								9115
							],
							[
								9146,
								9182
							],
							[
								9333,
								9361
							],
							[
								9436,
								9454
							],
							[
								9504,
								9508
							],
							[
								9558,
								9570
							],
							[
								9574,
								9589
							],
							[
								9652,
								9669
							],
							[
								9682,
								9704
							],
							[
								9739,
								9768
							],
							[
								9937,
								9943
							],
							[
								9984,
								9990
							],
							[
								10076,
								10094
							],
							[
								10162,
								10177
							],
							[
								10238,
								10256
							],
							[
								10366,
								10371
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								529,
								538
							],
							[
								752,
								756
							],
							[
								787,
								791
							],
							[
								821,
								837
							],
							[
								900,
								908
							],
							[
								1122,
								1157
							],
							[
								1233,
								1268
							],
							[
								1426,
								1450
							],
							[
								1451,
								1464
							],
							[
								1465,
								1485
							],
							[
								1624,
								1643
							],
							[
								1644,
								1664
							],
							[
								1686,
								1698
							],
							[
								1759,
								1778
							],
							[
								1779,
								1799
							],
							[
								1821,
								1833
							],
							[
								1877,
								1894
							],
							[
								1920,
								1938
							],
							[
								1975,
								2000
							],
							[
								2001,
								2021
							],
							[
								2067,
								2086
							],
							[
								2139,
								2145
							],
							[
								2210,
								2233
							],
							[
								2268,
								2283
							],
							[
								2383,
								2418
							],
							[
								2453,
								2483
							],
							[
								2547,
								2573
							],
							[
								2621,
								2648
							],
							[
								2703,
								2722
							],
							[
								2723,
								2743
							],
							[
								2776,
								2781
							],
							[
								2811,
								2829
							],
							[
								2830,
								2845
							],
							[
								2943,
								2959
							],
							[
								3117,
								3141
							],
							[
								3187,
								3202
							],
							[
								3215,
								3229
							],
							[
								3291,
								3301
							],
							[
								3332,
								3338
							],
							[
								3388,
								3422
							],
							[
								3496,
								3513
							],
							[
								3814,
								3819
							],
							[
								3880,
								3890
							],
							[
								3954,
								3967
							],
							[
								4070,
								4095
							],
							[
								4096,
								4117
							],
							[
								4157,
								4189
							],
							[
								4263,
								4281
							],
							[
								4347,
								4383
							],
							[
								4439,
								4483
							],
							[
								4535,
								4565
							],
							[
								4644,
								4650
							],
							[
								4663,
								4669
							],
							[
								4695,
								4701
							],
							[
								4722,
								4738
							],
							[
								4784,
								4792
							],
							[
								4801,
								4825
							],
							[
								4850,
								4864
							],
							[
								4900,
								4918
							],
							[
								4954,
								4970
							],
							[
								4987,
								5022
							],
							[
								5078,
								5082
							],
							[
								5108,
								5117
							],
							[
								5207,
								5247
							],
							[
								5295,
								5309
							],
							[
								5410,
								5448
							],
							[
								5516,
								5520
							],
							[
								5564,
								5592
							],
							[
								5661,
								5674
							],
							[
								5675,
								5695
							],
							[
								5737,
								5754
							],
							[
								5791,
								5812
							],
							[
								5828,
								5832
							],
							[
								5868,
								5887
							],
							[
								5950,
								5967
							],
							[
								6050,
								6071
							],
							[
								6118,
								6135
							],
							[
								6185,
								6216
							],
							[
								6348,
								6366
							],
							[
								6599,
								6617
							],
							[
								6643,
								6665
							],
							[
								6679,
								6684
							],
							[
								6706,
								6729
							],
							[
								6743,
								6748
							],
							[
								6782,
								6806
							],
							[
								6820,
								6825
							],
							[
								6888,
								6925
							],
							[
								6985,
								6991
							],
							[
								7324,
								7339
							],
							[
								7673,
								7689
							],
							[
								7787,
								7791
							],
							[
								7982,
								8003
							],
							[
								8019,
								8032
							],
							[
								8082,
								8107
							],
							[
								8253,
								8271
							],
							[
								8283,
								8290
							],
							[
								8321,
								8330
							],
							[
								8338,
								8342
							],
							[
								8367,
								8388
							],
							[
								8400,
								8407
							],
							[
								8435,
								8444
							],
							[
								8452,
								8456
							],
							[
								8530,
								8536
							],
							[
								8578,
								8597
							],
							[
								8890,
								8909
							],
							[
								9012,
								9033
							],
							[
								9046,
								9059
							],
							[
								9083,
								9115
							],
							[
								9146,
								9182
							],
							[
								9333,
								9361
							],
							[
								9436,
								9454
							],
							[
								9504,
								9508
							],
							[
								9558,
								9570
							],
							[
								9574,
								9589
							],
							[
								9652,
								9669
							],
							[
								9682,
								9704
							],
							[
								9739,
								9768
							],
							[
								9937,
								9943
							],
							[
								9984,
								9990
							],
							[
								10076,
								10094
							],
							[
								10162,
								10177
							],
							[
								10238,
								10256
							],
							[
								10366,
								10371
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					37,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					38,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					39,
					3,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8169,
								8173
							],
							[
								8370,
								8391
							],
							[
								8407,
								8420
							],
							[
								8472,
								8497
							],
							[
								8645,
								8663
							],
							[
								8675,
								8682
							],
							[
								8713,
								8722
							],
							[
								8730,
								8734
							],
							[
								8761,
								8782
							],
							[
								8794,
								8801
							],
							[
								8829,
								8838
							],
							[
								8846,
								8850
							],
							[
								8928,
								8934
							],
							[
								8978,
								8997
							],
							[
								9302,
								9321
							],
							[
								9426,
								9447
							],
							[
								9460,
								9473
							],
							[
								9499,
								9531
							],
							[
								9564,
								9600
							],
							[
								9763,
								9791
							],
							[
								9868,
								9886
							],
							[
								9942,
								9946
							],
							[
								10000,
								10012
							],
							[
								10016,
								10031
							],
							[
								10100,
								10117
							],
							[
								10130,
								10152
							],
							[
								10189,
								10218
							],
							[
								10397,
								10403
							],
							[
								10446,
								10452
							],
							[
								10542,
								10560
							],
							[
								10630,
								10645
							],
							[
								10708,
								10726
							],
							[
								10844,
								10849
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"BQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAgIGZ1bmN0aW9uKihvYmopCiAgLmdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgLmdldE9wdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24qKGUsIHQpAAAAAAAAAABYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAACAgZnVuY3Rpb24qKG9iaikKICAuZ2V0Q2FyZEl0ZXJhdG9yID0gZnVuY3Rpb24qKCkKICAuZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAFgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					40,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					41,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					42,
					2,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8167,
								8171
							],
							[
								8368,
								8389
							],
							[
								8405,
								8418
							],
							[
								8470,
								8495
							],
							[
								8643,
								8661
							],
							[
								8673,
								8680
							],
							[
								8711,
								8720
							],
							[
								8728,
								8732
							],
							[
								8759,
								8780
							],
							[
								8792,
								8799
							],
							[
								8827,
								8836
							],
							[
								8844,
								8848
							],
							[
								8926,
								8932
							],
							[
								8976,
								8995
							],
							[
								9300,
								9319
							],
							[
								9424,
								9445
							],
							[
								9458,
								9471
							],
							[
								9497,
								9529
							],
							[
								9562,
								9598
							],
							[
								9761,
								9789
							],
							[
								9866,
								9884
							],
							[
								9940,
								9944
							],
							[
								9998,
								10010
							],
							[
								10014,
								10029
							],
							[
								10098,
								10115
							],
							[
								10128,
								10150
							],
							[
								10187,
								10216
							],
							[
								10395,
								10401
							],
							[
								10444,
								10450
							],
							[
								10540,
								10558
							],
							[
								10628,
								10643
							],
							[
								10706,
								10724
							],
							[
								10842,
								10847
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AwAAAAAAAAAAAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAgIGZ1bmN0aW9uKihvYmopCiAgLmdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgLmdldE9wdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24qKGUsIHQpAAAAAAAAAABYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					43,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					44,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8188,
								8192
							],
							[
								8389,
								8410
							],
							[
								8426,
								8439
							],
							[
								8491,
								8516
							],
							[
								8664,
								8682
							],
							[
								8694,
								8701
							],
							[
								8732,
								8741
							],
							[
								8749,
								8753
							],
							[
								8780,
								8801
							],
							[
								8813,
								8820
							],
							[
								8848,
								8857
							],
							[
								8865,
								8869
							],
							[
								8947,
								8953
							],
							[
								8997,
								9016
							],
							[
								9321,
								9340
							],
							[
								9445,
								9466
							],
							[
								9479,
								9492
							],
							[
								9518,
								9550
							],
							[
								9583,
								9619
							],
							[
								9782,
								9810
							],
							[
								9887,
								9905
							],
							[
								9961,
								9965
							],
							[
								10019,
								10031
							],
							[
								10035,
								10050
							],
							[
								10119,
								10136
							],
							[
								10149,
								10171
							],
							[
								10208,
								10237
							],
							[
								10416,
								10422
							],
							[
								10465,
								10471
							],
							[
								10561,
								10579
							],
							[
								10649,
								10664
							],
							[
								10727,
								10745
							],
							[
								10863,
								10868
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					45,
					2,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8188,
								8192
							],
							[
								8389,
								8410
							],
							[
								8426,
								8439
							],
							[
								8491,
								8516
							],
							[
								8664,
								8682
							],
							[
								8694,
								8701
							],
							[
								8732,
								8741
							],
							[
								8749,
								8753
							],
							[
								8780,
								8801
							],
							[
								8813,
								8820
							],
							[
								8848,
								8857
							],
							[
								8865,
								8869
							],
							[
								8947,
								8953
							],
							[
								8997,
								9016
							],
							[
								9321,
								9340
							],
							[
								9445,
								9466
							],
							[
								9479,
								9492
							],
							[
								9518,
								9550
							],
							[
								9583,
								9619
							],
							[
								9782,
								9810
							],
							[
								9887,
								9905
							],
							[
								9961,
								9965
							],
							[
								10019,
								10031
							],
							[
								10035,
								10050
							],
							[
								10119,
								10136
							],
							[
								10149,
								10171
							],
							[
								10208,
								10237
							],
							[
								10416,
								10422
							],
							[
								10465,
								10471
							],
							[
								10561,
								10579
							],
							[
								10649,
								10664
							],
							[
								10727,
								10745
							],
							[
								10863,
								10868
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAgIGZ1bmN0aW9uKihvYmopCiAgLmdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgLmdldE9wdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24qKGUsIHQpAAAAAAAAAABYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					47,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8188,
								8192
							],
							[
								8389,
								8410
							],
							[
								8426,
								8439
							],
							[
								8491,
								8516
							],
							[
								8664,
								8682
							],
							[
								8694,
								8701
							],
							[
								8732,
								8741
							],
							[
								8749,
								8753
							],
							[
								8780,
								8801
							],
							[
								8813,
								8820
							],
							[
								8848,
								8857
							],
							[
								8865,
								8869
							],
							[
								8947,
								8953
							],
							[
								8997,
								9016
							],
							[
								9321,
								9340
							],
							[
								9445,
								9466
							],
							[
								9479,
								9492
							],
							[
								9518,
								9550
							],
							[
								9583,
								9619
							],
							[
								9782,
								9810
							],
							[
								9887,
								9905
							],
							[
								9961,
								9965
							],
							[
								10019,
								10031
							],
							[
								10035,
								10050
							],
							[
								10119,
								10136
							],
							[
								10149,
								10171
							],
							[
								10208,
								10237
							],
							[
								10416,
								10422
							],
							[
								10465,
								10471
							],
							[
								10561,
								10579
							],
							[
								10649,
								10664
							],
							[
								10727,
								10745
							],
							[
								10863,
								10868
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					48,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8192,
								8196
							],
							[
								8393,
								8414
							],
							[
								8430,
								8443
							],
							[
								8495,
								8520
							],
							[
								8668,
								8686
							],
							[
								8698,
								8705
							],
							[
								8736,
								8745
							],
							[
								8753,
								8757
							],
							[
								8784,
								8805
							],
							[
								8817,
								8824
							],
							[
								8852,
								8861
							],
							[
								8869,
								8873
							],
							[
								8951,
								8957
							],
							[
								9001,
								9020
							],
							[
								9325,
								9344
							],
							[
								9449,
								9470
							],
							[
								9483,
								9496
							],
							[
								9522,
								9554
							],
							[
								9587,
								9623
							],
							[
								9786,
								9814
							],
							[
								9891,
								9909
							],
							[
								9965,
								9969
							],
							[
								10023,
								10035
							],
							[
								10039,
								10054
							],
							[
								10123,
								10140
							],
							[
								10153,
								10175
							],
							[
								10212,
								10241
							],
							[
								10420,
								10426
							],
							[
								10469,
								10475
							],
							[
								10565,
								10583
							],
							[
								10653,
								10668
							],
							[
								10731,
								10749
							],
							[
								10867,
								10872
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					49,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					50,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					51,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					52,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					53,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8192,
								8196
							],
							[
								8393,
								8414
							],
							[
								8430,
								8443
							],
							[
								8495,
								8520
							],
							[
								8668,
								8686
							],
							[
								8698,
								8705
							],
							[
								8736,
								8745
							],
							[
								8753,
								8757
							],
							[
								8784,
								8805
							],
							[
								8817,
								8824
							],
							[
								8852,
								8861
							],
							[
								8869,
								8873
							],
							[
								8951,
								8957
							],
							[
								9001,
								9020
							],
							[
								9325,
								9344
							],
							[
								9449,
								9470
							],
							[
								9483,
								9496
							],
							[
								9522,
								9554
							],
							[
								9587,
								9623
							],
							[
								9786,
								9814
							],
							[
								9891,
								9909
							],
							[
								9965,
								9969
							],
							[
								10023,
								10035
							],
							[
								10039,
								10054
							],
							[
								10123,
								10140
							],
							[
								10153,
								10175
							],
							[
								10211,
								10239
							],
							[
								10418,
								10424
							],
							[
								10467,
								10473
							],
							[
								10563,
								10581
							],
							[
								10651,
								10666
							],
							[
								10729,
								10747
							],
							[
								10865,
								10870
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					54,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					55,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8192,
								8196
							],
							[
								8393,
								8414
							],
							[
								8430,
								8443
							],
							[
								8495,
								8520
							],
							[
								8668,
								8686
							],
							[
								8698,
								8705
							],
							[
								8736,
								8745
							],
							[
								8753,
								8757
							],
							[
								8784,
								8805
							],
							[
								8817,
								8824
							],
							[
								8852,
								8861
							],
							[
								8869,
								8873
							],
							[
								8951,
								8957
							],
							[
								9001,
								9020
							],
							[
								9325,
								9344
							],
							[
								9449,
								9470
							],
							[
								9483,
								9496
							],
							[
								9522,
								9554
							],
							[
								9587,
								9623
							],
							[
								9786,
								9814
							],
							[
								9891,
								9909
							],
							[
								9965,
								9969
							],
							[
								10023,
								10035
							],
							[
								10039,
								10054
							],
							[
								10123,
								10140
							],
							[
								10153,
								10175
							],
							[
								10211,
								10239
							],
							[
								10418,
								10424
							],
							[
								10467,
								10473
							],
							[
								10563,
								10581
							],
							[
								10651,
								10666
							],
							[
								10729,
								10747
							],
							[
								10865,
								10870
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					56,
					2,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4907,
								4913
							],
							[
								4941,
								4947
							],
							[
								4970,
								4986
							],
							[
								5038,
								5046
							],
							[
								5055,
								5081
							],
							[
								5110,
								5124
							],
							[
								5162,
								5180
							],
							[
								5218,
								5234
							],
							[
								5253,
								5288
							],
							[
								5348,
								5352
							],
							[
								5380,
								5389
							],
							[
								5481,
								5521
							],
							[
								5573,
								5587
							],
							[
								5692,
								5730
							],
							[
								5800,
								5804
							],
							[
								5850,
								5878
							],
							[
								5949,
								5964
							],
							[
								5965,
								5987
							],
							[
								6033,
								6050
							],
							[
								6089,
								6110
							],
							[
								6126,
								6130
							],
							[
								6168,
								6187
							],
							[
								6252,
								6269
							],
							[
								6354,
								6375
							],
							[
								6424,
								6441
							],
							[
								6493,
								6524
							],
							[
								6670,
								6688
							],
							[
								6941,
								6959
							],
							[
								6987,
								7009
							],
							[
								7023,
								7028
							],
							[
								7052,
								7075
							],
							[
								7089,
								7094
							],
							[
								7130,
								7154
							],
							[
								7168,
								7173
							],
							[
								7238,
								7275
							],
							[
								7341,
								7347
							],
							[
								7698,
								7713
							],
							[
								8057,
								8073
							],
							[
								8196,
								8200
							],
							[
								8397,
								8418
							],
							[
								8434,
								8447
							],
							[
								8499,
								8524
							],
							[
								8672,
								8690
							],
							[
								8702,
								8709
							],
							[
								8740,
								8749
							],
							[
								8757,
								8761
							],
							[
								8788,
								8809
							],
							[
								8821,
								8828
							],
							[
								8856,
								8865
							],
							[
								8873,
								8877
							],
							[
								8955,
								8961
							],
							[
								9005,
								9024
							],
							[
								9329,
								9348
							],
							[
								9453,
								9474
							],
							[
								9487,
								9500
							],
							[
								9526,
								9558
							],
							[
								9591,
								9627
							],
							[
								9790,
								9818
							],
							[
								9895,
								9913
							],
							[
								9969,
								9973
							],
							[
								10027,
								10039
							],
							[
								10043,
								10058
							],
							[
								10127,
								10144
							],
							[
								10157,
								10179
							],
							[
								10215,
								10243
							],
							[
								10422,
								10428
							],
							[
								10471,
								10477
							],
							[
								10567,
								10585
							],
							[
								10655,
								10670
							],
							[
								10733,
								10751
							],
							[
								10869,
								10874
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAgIGZ1bmN0aW9uKihvYmopCiAgLmdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgLmdldE9wdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24qKGUsIHQpAAAAAAAAAABYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					57,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					58,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					59,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								559,
								568
							],
							[
								794,
								798
							],
							[
								829,
								833
							],
							[
								865,
								881
							],
							[
								946,
								954
							],
							[
								1177,
								1211
							],
							[
								1293,
								1330
							],
							[
								1502,
								1528
							],
							[
								1529,
								1544
							],
							[
								1545,
								1567
							],
							[
								1714,
								1735
							],
							[
								1736,
								1758
							],
							[
								1782,
								1794
							],
							[
								1857,
								1878
							],
							[
								1879,
								1901
							],
							[
								1925,
								1937
							],
							[
								1983,
								2000
							],
							[
								2028,
								2046
							],
							[
								2085,
								2112
							],
							[
								2113,
								2135
							],
							[
								2185,
								2204
							],
							[
								2257,
								2263
							],
							[
								2328,
								2351
							],
							[
								2388,
								2403
							],
							[
								2508,
								2542
							],
							[
								2578,
								2607
							],
							[
								2672,
								2697
							],
							[
								2745,
								2772
							],
							[
								2827,
								2848
							],
							[
								2849,
								2871
							],
							[
								2906,
								2911
							],
							[
								2941,
								2961
							],
							[
								2962,
								2979
							],
							[
								3085,
								3101
							],
							[
								3272,
								3295
							],
							[
								3345,
								3362
							],
							[
								3375,
								3391
							],
							[
								3455,
								3465
							],
							[
								3496,
								3502
							],
							[
								3559,
								3592
							],
							[
								3674,
								3691
							],
							[
								4002,
								4007
							],
							[
								4068,
								4078
							],
							[
								4146,
								4159
							],
							[
								4264,
								4291
							],
							[
								4292,
								4315
							],
							[
								4359,
								4391
							],
							[
								4467,
								4485
							],
							[
								4554,
								4589
							],
							[
								4646,
								4689
							],
							[
								4742,
								4771
							],
							[
								4854,
								4860
							],
							[
								4873,
								4879
							],
							[
								4907,
								4913
							],
							[
								4935,
								4950
							],
							[
								4998,
								5006
							],
							[
								5015,
								5041
							],
							[
								5069,
								5082
							],
							[
								5119,
								5136
							],
							[
								5173,
								5188
							],
							[
								5206,
								5240
							],
							[
								5300,
								5304
							],
							[
								5332,
								5341
							],
							[
								5432,
								5471
							],
							[
								5523,
								5537
							],
							[
								5641,
								5678
							],
							[
								5748,
								5752
							],
							[
								5797,
								5824
							],
							[
								5893,
								5908
							],
							[
								5909,
								5931
							],
							[
								5976,
								5992
							],
							[
								6030,
								6050
							],
							[
								6066,
								6070
							],
							[
								6107,
								6125
							],
							[
								6189,
								6205
							],
							[
								6289,
								6309
							],
							[
								6357,
								6373
							],
							[
								6424,
								6454
							],
							[
								6599,
								6616
							],
							[
								6868,
								6885
							],
							[
								6912,
								6933
							],
							[
								6947,
								6952
							],
							[
								6975,
								6997
							],
							[
								7011,
								7016
							],
							[
								7051,
								7074
							],
							[
								7088,
								7093
							],
							[
								7157,
								7193
							],
							[
								7259,
								7265
							],
							[
								7609,
								7623
							],
							[
								7956,
								7971
							],
							[
								8092,
								8096
							],
							[
								8292,
								8312
							],
							[
								8328,
								8341
							],
							[
								8392,
								8416
							],
							[
								8563,
								8580
							],
							[
								8592,
								8599
							],
							[
								8630,
								8639
							],
							[
								8647,
								8651
							],
							[
								8677,
								8697
							],
							[
								8709,
								8716
							],
							[
								8744,
								8753
							],
							[
								8761,
								8765
							],
							[
								8839,
								8845
							],
							[
								8888,
								8906
							],
							[
								9204,
								9222
							],
							[
								9326,
								9346
							],
							[
								9359,
								9372
							],
							[
								9397,
								9428
							],
							[
								9460,
								9495
							],
							[
								9657,
								9684
							],
							[
								9760,
								9777
							],
							[
								9831,
								9835
							],
							[
								9889,
								9901
							],
							[
								9905,
								9920
							],
							[
								9988,
								10004
							],
							[
								10015,
								10037
							],
							[
								10073,
								10101
							],
							[
								10280,
								10286
							],
							[
								10327,
								10333
							],
							[
								10420,
								10437
							],
							[
								10506,
								10520
							],
							[
								10582,
								10599
							],
							[
								10717,
								10722
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							"defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							"find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							"propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							"propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"propertyProxy = (elem, obj = {}) =>",
							"getCols = (row, pred = e => !e.disabled) =>",
							"getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							"numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							"call = val =>",
							"toNumber = val =>",
							"toString = s =>",
							"getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							"recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							"getOptions = (element, t = a => a) =>",
							"e =>",
							"makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							"getCards = () =>",
							"getCardTexts = () =>",
							"e =>",
							"getCardPos = () =>",
							"getCard = pos =>",
							"getCardText = pos =>",
							"setCard = pos =>",
							"getCardIterator = function* ()",
							"nextOption = e =>",
							"numOptions = e =>",
							"getOptionTexts = e =>",
							" a =>",
							"getOptionValues = e =>",
							" a =>",
							"getOptionEntries = e =>",
							" a =>",
							"getOptionIterator = function* (e, t)",
							" () =>",
							"getName = e =>",
							"getValue = e =>",
							"e =>",
							"getSelections = e =>",
							"t = (o, i) =>",
							"setSelection = (e, i) =>",
							"findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							"parseNumber = v =>",
							"getCountry = () =>",
							"get = (obj, path) =>",
							"(acc, key) =>",
							"setTo = (parent, key, value) =>",
							"defineTo = (parent, key, ...fns) =>",
							"set = (obj, path, value) =>",
							"getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							"setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							"removeRow = () =>",
							"addRow = () =>",
							"setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAVgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					60,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								495,
								504
							],
							[
								706,
								710
							],
							[
								741,
								745
							],
							[
								773,
								789
							],
							[
								850,
								858
							],
							[
								1061,
								1095
							],
							[
								1165,
								1198
							],
							[
								1342,
								1364
							],
							[
								1365,
								1376
							],
							[
								1377,
								1395
							],
							[
								1526,
								1543
							],
							[
								1544,
								1562
							],
							[
								1582,
								1594
							],
							[
								1653,
								1670
							],
							[
								1671,
								1689
							],
							[
								1709,
								1721
							],
							[
								1763,
								1780
							],
							[
								1804,
								1822
							],
							[
								1857,
								1880
							],
							[
								1881,
								1899
							],
							[
								1941,
								1960
							],
							[
								2009,
								2015
							],
							[
								2076,
								2099
							],
							[
								2132,
								2147
							],
							[
								2240,
								2274
							],
							[
								2306,
								2335
							],
							[
								2396,
								2421
							],
							[
								2465,
								2492
							],
							[
								2543,
								2560
							],
							[
								2561,
								2579
							],
							[
								2610,
								2615
							],
							[
								2641,
								2657
							],
							[
								2658,
								2671
							],
							[
								2761,
								2777
							],
							[
								2920,
								2943
							],
							[
								2985,
								2998
							],
							[
								3011,
								3023
							],
							[
								3083,
								3093
							],
							[
								3124,
								3130
							],
							[
								3171,
								3204
							],
							[
								3270,
								3287
							],
							[
								3574,
								3579
							],
							[
								3636,
								3646
							],
							[
								3706,
								3719
							],
							[
								3816,
								3839
							],
							[
								3840,
								3859
							],
							[
								3895,
								3927
							],
							[
								3999,
								4017
							],
							[
								4078,
								4113
							],
							[
								4166,
								4209
							],
							[
								4258,
								4287
							],
							[
								4362,
								4368
							],
							[
								4381,
								4387
							],
							[
								4411,
								4417
							],
							[
								4435,
								4450
							],
							[
								4490,
								4498
							],
							[
								4507,
								4529
							],
							[
								4549,
								4562
							],
							[
								4595,
								4612
							],
							[
								4645,
								4660
							],
							[
								4674,
								4708
							],
							[
								4760,
								4764
							],
							[
								4788,
								4797
							],
							[
								4884,
								4923
							],
							[
								4967,
								4981
							],
							[
								5077,
								5114
							],
							[
								5180,
								5184
							],
							[
								5225,
								5252
							],
							[
								5317,
								5328
							],
							[
								5329,
								5347
							],
							[
								5384,
								5400
							],
							[
								5434,
								5454
							],
							[
								5470,
								5474
							],
							[
								5507,
								5525
							],
							[
								5585,
								5601
							],
							[
								5681,
								5701
							],
							[
								5745,
								5761
							],
							[
								5808,
								5838
							],
							[
								5955,
								5972
							],
							[
								6184,
								6201
							],
							[
								6224,
								6245
							],
							[
								6259,
								6264
							],
							[
								6283,
								6305
							],
							[
								6319,
								6324
							],
							[
								6355,
								6378
							],
							[
								6392,
								6397
							],
							[
								6457,
								6493
							],
							[
								6547,
								6553
							],
							[
								6861,
								6875
							],
							[
								7188,
								7203
							],
							[
								7320,
								7324
							],
							[
								7508,
								7528
							],
							[
								7544,
								7557
							],
							[
								7604,
								7628
							],
							[
								7771,
								7788
							],
							[
								7800,
								7807
							],
							[
								7838,
								7847
							],
							[
								7855,
								7859
							],
							[
								7881,
								7901
							],
							[
								7913,
								7920
							],
							[
								7948,
								7957
							],
							[
								7965,
								7969
							],
							[
								8035,
								8041
							],
							[
								8080,
								8098
							],
							[
								8372,
								8390
							],
							[
								8490,
								8510
							],
							[
								8523,
								8536
							],
							[
								8557,
								8588
							],
							[
								8616,
								8651
							],
							[
								8789,
								8816
							],
							[
								8888,
								8905
							],
							[
								8947,
								8951
							],
							[
								8997,
								9009
							],
							[
								9013,
								9028
							],
							[
								9084,
								9100
							],
							[
								9111,
								9133
							],
							[
								9165,
								9193
							],
							[
								9352,
								9358
							],
							[
								9395,
								9401
							],
							[
								9480,
								9497
							],
							[
								9562,
								9576
							],
							[
								9634,
								9651
							],
							[
								9753,
								9758
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							"defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							"find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							"propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							"propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"propertyProxy = (elem, obj = {}) =>",
							"getCols = (row, pred = e => !e.disabled) =>",
							"getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							"numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							"call = val =>",
							"toNumber = val =>",
							"toString = s =>",
							"getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							"recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							"getOptions = (element, t = a => a) =>",
							"e =>",
							"makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							"getCards = () =>",
							"getCardTexts = () =>",
							"e =>",
							"getCardPos = () =>",
							"getCard = pos =>",
							"getCardText = pos =>",
							"setCard = pos =>",
							"getCardIterator = function* ()",
							"nextOption = e =>",
							"numOptions = e =>",
							"getOptionTexts = e =>",
							" a =>",
							"getOptionValues = e =>",
							" a =>",
							"getOptionEntries = e =>",
							" a =>",
							"getOptionIterator = function* (e, t)",
							" () =>",
							"getName = e =>",
							"getValue = e =>",
							"e =>",
							"getSelections = e =>",
							"t = (o, i) =>",
							"setSelection = (e, i) =>",
							"findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							"parseNumber = v =>",
							"getCountry = () =>",
							"get = (obj, path) =>",
							"(acc, key) =>",
							"setTo = (parent, key, value) =>",
							"defineTo = (parent, key, ...fns) =>",
							"set = (obj, path, value) =>",
							"getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							"setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							"removeRow = () =>",
							"addRow = () =>",
							"setNumRows = n =>",
							" g =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWAAAAICBmdW5jdGlvbioob2JqKQogIGdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAFYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/mnt/srv-ubuntu/Projects/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								431,
								440
							],
							[
								618,
								622
							],
							[
								653,
								657
							],
							[
								681,
								697
							],
							[
								754,
								762
							],
							[
								945,
								979
							],
							[
								1037,
								1066
							],
							[
								1182,
								1200
							],
							[
								1201,
								1208
							],
							[
								1209,
								1223
							],
							[
								1338,
								1351
							],
							[
								1352,
								1366
							],
							[
								1382,
								1394
							],
							[
								1449,
								1462
							],
							[
								1463,
								1477
							],
							[
								1493,
								1505
							],
							[
								1543,
								1560
							],
							[
								1580,
								1598
							],
							[
								1629,
								1648
							],
							[
								1649,
								1663
							],
							[
								1697,
								1716
							],
							[
								1761,
								1767
							],
							[
								1824,
								1847
							],
							[
								1876,
								1891
							],
							[
								1972,
								2006
							],
							[
								2034,
								2063
							],
							[
								2120,
								2145
							],
							[
								2185,
								2212
							],
							[
								2259,
								2272
							],
							[
								2273,
								2287
							],
							[
								2314,
								2319
							],
							[
								2341,
								2353
							],
							[
								2354,
								2363
							],
							[
								2437,
								2453
							],
							[
								2568,
								2591
							],
							[
								2625,
								2634
							],
							[
								2647,
								2655
							],
							[
								2711,
								2721
							],
							[
								2752,
								2758
							],
							[
								2783,
								2816
							],
							[
								2866,
								2883
							],
							[
								3146,
								3151
							],
							[
								3204,
								3214
							],
							[
								3266,
								3279
							],
							[
								3368,
								3387
							],
							[
								3388,
								3403
							],
							[
								3431,
								3463
							],
							[
								3531,
								3549
							],
							[
								3602,
								3637
							],
							[
								3686,
								3729
							],
							[
								3774,
								3803
							],
							[
								3870,
								3876
							],
							[
								3889,
								3895
							],
							[
								3915,
								3921
							],
							[
								3935,
								3950
							],
							[
								3982,
								3990
							],
							[
								3999,
								4017
							],
							[
								4029,
								4042
							],
							[
								4071,
								4088
							],
							[
								4117,
								4132
							],
							[
								4142,
								4176
							],
							[
								4220,
								4224
							],
							[
								4244,
								4253
							],
							[
								4336,
								4375
							],
							[
								4411,
								4425
							],
							[
								4513,
								4550
							],
							[
								4612,
								4616
							],
							[
								4653,
								4680
							],
							[
								4741,
								4748
							],
							[
								4749,
								4763
							],
							[
								4792,
								4808
							],
							[
								4838,
								4858
							],
							[
								4874,
								4878
							],
							[
								4907,
								4925
							],
							[
								4981,
								4997
							],
							[
								5073,
								5093
							],
							[
								5133,
								5149
							],
							[
								5192,
								5222
							],
							[
								5311,
								5328
							],
							[
								5500,
								5517
							],
							[
								5536,
								5557
							],
							[
								5571,
								5576
							],
							[
								5591,
								5613
							],
							[
								5627,
								5632
							],
							[
								5659,
								5682
							],
							[
								5696,
								5701
							],
							[
								5757,
								5793
							],
							[
								5835,
								5841
							],
							[
								6113,
								6127
							],
							[
								6420,
								6435
							],
							[
								6548,
								6552
							],
							[
								6724,
								6744
							],
							[
								6760,
								6773
							],
							[
								6816,
								6840
							],
							[
								6979,
								6996
							],
							[
								7008,
								7015
							],
							[
								7046,
								7055
							],
							[
								7063,
								7067
							],
							[
								7085,
								7105
							],
							[
								7117,
								7124
							],
							[
								7152,
								7161
							],
							[
								7169,
								7173
							],
							[
								7231,
								7237
							],
							[
								7272,
								7290
							],
							[
								7540,
								7558
							],
							[
								7654,
								7674
							],
							[
								7687,
								7700
							],
							[
								7717,
								7748
							],
							[
								7772,
								7807
							],
							[
								7921,
								7948
							],
							[
								8016,
								8033
							],
							[
								8063,
								8067
							],
							[
								8105,
								8117
							],
							[
								8121,
								8136
							],
							[
								8180,
								8196
							],
							[
								8207,
								8229
							],
							[
								8257,
								8285
							],
							[
								8424,
								8430
							],
							[
								8463,
								8469
							],
							[
								8540,
								8557
							],
							[
								8618,
								8632
							],
							[
								8686,
								8703
							],
							[
								8789,
								8794
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							"defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							"find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							"propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							"propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"propertyProxy = (elem, obj = {}) =>",
							"getCols = (row, pred = e => !e.disabled) =>",
							"getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							"numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							"call = val =>",
							"toNumber = val =>",
							"toString = s =>",
							"getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							"recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							"getOptions = (element, t = a => a) =>",
							"e =>",
							"makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							"getCards = () =>",
							"getCardTexts = () =>",
							"e =>",
							"getCardPos = () =>",
							"getCard = pos =>",
							"getCardText = pos =>",
							"setCard = pos =>",
							"getCardIterator = function* ()",
							"nextOption = e =>",
							"numOptions = e =>",
							"getOptionTexts = e =>",
							" a =>",
							"getOptionValues = e =>",
							" a =>",
							"getOptionEntries = e =>",
							" a =>",
							"getOptionIterator = function* (e, t)",
							" () =>",
							"getName = e =>",
							"getValue = e =>",
							"e =>",
							"getSelections = e =>",
							"t = (o, i) =>",
							"setSelection = (e, i) =>",
							"findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							"parseNumber = v =>",
							"getCountry = () =>",
							"get = (obj, path) =>",
							"(acc, key) =>",
							"setTo = (parent, key, value) =>",
							"defineTo = (parent, key, ...fns) =>",
							"set = (obj, path, value) =>",
							"getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							"setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							"removeRow = () =>",
							"addRow = () =>",
							"setNumRows = n =>",
							" g =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWAAAAICBmdW5jdGlvbioob2JqKQogIGdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAFYAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWAAAAICBmdW5jdGlvbioob2JqKQogIGdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/mnt/srv-ubuntu/Projects/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								495,
								504
							],
							[
								706,
								710
							],
							[
								741,
								745
							],
							[
								773,
								789
							],
							[
								850,
								858
							],
							[
								1061,
								1095
							],
							[
								1165,
								1198
							],
							[
								1342,
								1364
							],
							[
								1365,
								1376
							],
							[
								1377,
								1395
							],
							[
								1526,
								1543
							],
							[
								1544,
								1562
							],
							[
								1582,
								1594
							],
							[
								1653,
								1670
							],
							[
								1671,
								1689
							],
							[
								1709,
								1721
							],
							[
								1763,
								1780
							],
							[
								1804,
								1822
							],
							[
								1857,
								1880
							],
							[
								1881,
								1899
							],
							[
								1941,
								1960
							],
							[
								2009,
								2015
							],
							[
								2076,
								2099
							],
							[
								2132,
								2147
							],
							[
								2240,
								2274
							],
							[
								2306,
								2335
							],
							[
								2396,
								2421
							],
							[
								2465,
								2492
							],
							[
								2543,
								2560
							],
							[
								2561,
								2579
							],
							[
								2610,
								2615
							],
							[
								2641,
								2657
							],
							[
								2658,
								2671
							],
							[
								2761,
								2777
							],
							[
								2920,
								2943
							],
							[
								2985,
								2998
							],
							[
								3011,
								3023
							],
							[
								3083,
								3093
							],
							[
								3124,
								3130
							],
							[
								3171,
								3204
							],
							[
								3270,
								3287
							],
							[
								3574,
								3579
							],
							[
								3636,
								3646
							],
							[
								3706,
								3719
							],
							[
								3816,
								3839
							],
							[
								3840,
								3859
							],
							[
								3895,
								3927
							],
							[
								3999,
								4017
							],
							[
								4078,
								4113
							],
							[
								4166,
								4209
							],
							[
								4258,
								4287
							],
							[
								4362,
								4368
							],
							[
								4381,
								4387
							],
							[
								4411,
								4417
							],
							[
								4435,
								4450
							],
							[
								4490,
								4498
							],
							[
								4507,
								4529
							],
							[
								4549,
								4562
							],
							[
								4595,
								4612
							],
							[
								4645,
								4660
							],
							[
								4674,
								4708
							],
							[
								4760,
								4764
							],
							[
								4788,
								4797
							],
							[
								4884,
								4923
							],
							[
								4967,
								4981
							],
							[
								5077,
								5114
							],
							[
								5180,
								5184
							],
							[
								5225,
								5252
							],
							[
								5317,
								5328
							],
							[
								5329,
								5347
							],
							[
								5384,
								5400
							],
							[
								5434,
								5454
							],
							[
								5470,
								5474
							],
							[
								5507,
								5525
							],
							[
								5585,
								5601
							],
							[
								5681,
								5701
							],
							[
								5745,
								5761
							],
							[
								5808,
								5838
							],
							[
								5955,
								5972
							],
							[
								6184,
								6201
							],
							[
								6224,
								6245
							],
							[
								6259,
								6264
							],
							[
								6283,
								6305
							],
							[
								6319,
								6324
							],
							[
								6355,
								6378
							],
							[
								6392,
								6397
							],
							[
								6457,
								6493
							],
							[
								6547,
								6553
							],
							[
								6861,
								6875
							],
							[
								7188,
								7203
							],
							[
								7320,
								7324
							],
							[
								7508,
								7528
							],
							[
								7544,
								7557
							],
							[
								7604,
								7628
							],
							[
								7771,
								7788
							],
							[
								7800,
								7807
							],
							[
								7838,
								7847
							],
							[
								7855,
								7859
							],
							[
								7881,
								7901
							],
							[
								7913,
								7920
							],
							[
								7948,
								7957
							],
							[
								7965,
								7969
							],
							[
								8035,
								8041
							],
							[
								8080,
								8098
							],
							[
								8372,
								8390
							],
							[
								8490,
								8510
							],
							[
								8523,
								8536
							],
							[
								8557,
								8588
							],
							[
								8616,
								8651
							],
							[
								8789,
								8816
							],
							[
								8888,
								8905
							],
							[
								8947,
								8951
							],
							[
								8997,
								9009
							],
							[
								9013,
								9028
							],
							[
								9084,
								9100
							],
							[
								9111,
								9133
							],
							[
								9165,
								9193
							],
							[
								9352,
								9358
							],
							[
								9395,
								9401
							],
							[
								9480,
								9497
							],
							[
								9562,
								9576
							],
							[
								9634,
								9651
							],
							[
								9753,
								9758
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							"defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							"find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							"propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							"propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"propertyProxy = (elem, obj = {}) =>",
							"getCols = (row, pred = e => !e.disabled) =>",
							"getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							"numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							"call = val =>",
							"toNumber = val =>",
							"toString = s =>",
							"getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							"recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							"getOptions = (element, t = a => a) =>",
							"e =>",
							"makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							"getCards = () =>",
							"getCardTexts = () =>",
							"e =>",
							"getCardPos = () =>",
							"getCard = pos =>",
							"getCardText = pos =>",
							"setCard = pos =>",
							"getCardIterator = function* ()",
							"nextOption = e =>",
							"numOptions = e =>",
							"getOptionTexts = e =>",
							" a =>",
							"getOptionValues = e =>",
							" a =>",
							"getOptionEntries = e =>",
							" a =>",
							"getOptionIterator = function* (e, t)",
							" () =>",
							"getName = e =>",
							"getValue = e =>",
							"e =>",
							"getSelections = e =>",
							"t = (o, i) =>",
							"setSelection = (e, i) =>",
							"findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							"parseNumber = v =>",
							"getCountry = () =>",
							"get = (obj, path) =>",
							"(acc, key) =>",
							"setTo = (parent, key, value) =>",
							"defineTo = (parent, key, ...fns) =>",
							"set = (obj, path, value) =>",
							"getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							"setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							"removeRow = () =>",
							"addRow = () =>",
							"setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAVgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWAAAAICBmdW5jdGlvbioob2JqKQogIGdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "check-discogs.js",
			"settings":
			{
				"buffer_size": 5104,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "discogs.js",
			"settings":
			{
				"buffer_size": 6868,
				"line_ending": "Unix"
			}
		},
		{
			"file": "discogs-shipping-policies.js",
			"redo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 9765,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK0JAAAAAAAArgkAAAAAAAAAAAAArgkAAAAAAACwCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtCQAAAAAAAK0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAYwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					12,
					3,
					"doxy_enter",
					null,
					"AwAAAGMBAAAAAAAAZwEAAAAAAAAAAAAAZwEAAAAAAABrAQAAAAAAAAAAAABrAQAAAAAAAG8BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYwEAAAAAAABjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					3,
					"left_delete",
					null,
					"AwAAAG4BAAAAAAAAbgEAAAAAAAABAAAAIG0BAAAAAAAAbQEAAAAAAAABAAAAL2wBAAAAAAAAbAEAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwEAAAAAAABvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "Discogs"
					},
					"CAAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAkAAAAAAAAAA4AAABOZXcgVXNlcnNjcmlwdCQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwAAAAAAAAAxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " shippin"
					},
					"CAAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADIAAAAAAAAAMwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMgAAAAAAAAAyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAADIAAAAAAAAAMgAAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAADIAAAAAAAAAMwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMgAAAAAAAAAyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " policies"
					},
					"CQAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADkAAAAAAAAAAAAAADkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "tranwsist"
					},
					"CgAAAFUAAAAAAAAAVgAAAAAAAAAAAAAAVgAAAAAAAABWAAAAAAAAAAwAAAB0YW1wZXJtb25rZXlWAAAAAAAAAFcAAAAAAAAAAAAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABZAAAAAAAAAAAAAABZAAAAAAAAAFoAAAAAAAAAAAAAAFoAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAF0AAAAAAAAAAAAAAF0AAAAAAAAAXgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVQAAAAAAAABhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					5,
					"left_delete",
					null,
					"BQAAAF0AAAAAAAAAXQAAAAAAAAABAAAAdFwAAAAAAAAAXAAAAAAAAAABAAAAc1sAAAAAAAAAWwAAAAAAAAABAAAAaVoAAAAAAAAAWgAAAAAAAAABAAAAc1kAAAAAAAAAWQAAAAAAAAABAAAAdw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "sistorisiert.c"
					},
					"DgAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAXQAAAAAAAAAAAAAAXQAAAAAAAABeAAAAAAAAAAAAAABeAAAAAAAAAF8AAAAAAAAAAAAAAF8AAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABhAAAAAAAAAAAAAABhAAAAAAAAAGIAAAAAAAAAAAAAAGIAAAAAAAAAYwAAAAAAAAAAAAAAYwAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGUAAAAAAAAAAAAAAGUAAAAAAAAAZgAAAAAAAAAAAAAAZgAAAAAAAABnAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAGcAAAAAAAAAaAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					4,
					"right_delete",
					null,
					"BAAAAGgAAAAAAAAAaAAAAAAAAAABAAAALmgAAAAAAAAAaAAAAAAAAAABAAAAbmgAAAAAAAAAaAAAAAAAAAABAAAAZWgAAAAAAAAAaAAAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaAAAAAAAAABoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": ".discogs={}"
					},
					"CwAAAIwBAAAAAAAAjQEAAAAAAAAAAAAAjQEAAAAAAACOAQAAAAAAAAAAAACOAQAAAAAAAI8BAAAAAAAAAAAAAI8BAAAAAAAAkAEAAAAAAAAAAAAAkAEAAAAAAACRAQAAAAAAAAAAAACRAQAAAAAAAJIBAAAAAAAAAAAAAJIBAAAAAAAAkwEAAAAAAAAAAAAAkwEAAAAAAACUAQAAAAAAAAAAAACUAQAAAAAAAJUBAAAAAAAAAAAAAJUBAAAAAAAAlgEAAAAAAAAAAAAAlgEAAAAAAACXAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAEAAAAAAACMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"cut",
					null,
					"AQAAAIEBAAAAAAAAgQEAAAAAAAAXAAAAIGdsb2JhbFRoaXMuZGlzY29ncz17fTs",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"doxy_enter",
					null,
					"AQAAAHkBAAAAAAAAfQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQEAAAAAAAB5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"paste",
					null,
					"AQAAAH0BAAAAAAAAlAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfQEAAAAAAAB9AQAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHoBAAAAAAAAewEAAAAAAAAAAAAAewEAAAAAAAB7AQAAAAAAAAMAAAAvLyA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfQEAAAAAAAB6AQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJoBAAAAAAAAnAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgEAAAAAAACaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJwBAAAAAAAAnQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"left_delete",
					null,
					"AQAAAJwBAAAAAAAAnAEAAAAAAAABAAAAOg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQEAAAAAAACdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJwBAAAAAAAAnQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AgAAAI8BAAAAAAAAkAEAAAAAAAAAAAAAkAEAAAAAAACQAQAAAAAAAAMAAAB7fTs",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwEAAAAAAACSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"cut",
					null,
					"AQAAAHoBAAAAAAAAegEAAAAAAAAXAAAAICBnbG9iYWxUaGlzLmRpc2NvZ3M9Zwo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegEAAAAAAACRAQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"paste",
					null,
					"AQAAAIUBAAAAAAAAnAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQEAAAAAAACFAQAAAAAAAAAAAAAAAAAA"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJsBAAAAAAAAnAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwEAAAAAAACbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					2,
					"left_delete",
					null,
					"AgAAABYGAAAAAAAAFgYAAAAAAAABAAAALhUGAAAAAAAAFQYAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFwYAAAAAAAAXBgAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					2,
					"left_delete",
					null,
					"AgAAADsGAAAAAAAAOwYAAAAAAAABAAAALjoGAAAAAAAAOgYAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAYAAAAAAAA8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAADoGAAAAAAAAOwYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgYAAAAAAAA6BgAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"left_delete",
					null,
					"AQAAADoGAAAAAAAAOgYAAAAAAAABAAAAUg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwYAAAAAAAA7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					2,
					"left_delete",
					null,
					"AgAAAKAEAAAAAAAAoAQAAAAAAAABAAAALp8EAAAAAAAAnwQAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQQAAAAAAAChBAAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"indent",
					null,
					"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AAAAADUiAAAAAAAANyIAAAAAAAAAAAAAiCIAAAAAAACKIgAAAAAAAAAAAACpIgAAAAAAAKsiAAAAAAAAAAAAANMiAAAAAAAA1SIAAAAAAAAAAAAAASMAAAAAAAADIwAAAAAAAAAAAAAJIwAAAAAAAAsjAAAAAAAAAAAAACojAAAAAAAALCMAAAAAAAAAAAAAVSMAAAAAAABXIwAAAAAAAAAAAACAIwAAAAAAAIIjAAAAAAAAAAAAALkjAAAAAAAAuyMAAAAAAAAAAAAACyQAAAAAAAANJAAAAAAAAAAAAABTJAAAAAAAAFUkAAAAAAAAAAAAAGskAAAAAAAAbSQAAAAAAAAAAAAAjiQAAAAAAACQJAAAAAAAAAAAAAC0JAAAAAAAALYkAAAAAAAAAAAAALokAAAAAAAAvCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAADwIgAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					2,
					"left_delete",
					null,
					"AgAAANoCAAAAAAAA2gIAAAAAAAABAAAALtkCAAAAAAAA2QIAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2wIAAAAAAADbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					2,
					"right_delete",
					null,
					"AgAAABMDAAAAAAAAEwMAAAAAAAABAAAAZxMDAAAAAAAAEwMAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwMAAAAAAAATAwAAAAAAAAAAAAAAADRA"
				],
				[
					230,
					1,
					"indent",
					null,
					"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"
				],
				[
					243,
					1,
					"left_delete",
					null,
					"AQAAAPAFAAAAAAAA8AUAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8AUAAAAAAADxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					2,
					"left_delete",
					null,
					"AgAAAHAGAAAAAAAAcAYAAAAAAAABAAAALm8GAAAAAAAAbwYAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcQYAAAAAAABxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					2,
					"right_delete",
					null,
					"AgAAADwHAAAAAAAAPAcAAAAAAAABAAAAZzwHAAAAAAAAPAcAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAcAAAAAAAA8BwAAAAAAAAAAAAAAAERA"
				],
				[
					251,
					2,
					"right_delete",
					null,
					"AgAAAJoHAAAAAAAAmgcAAAAAAAABAAAAZ5oHAAAAAAAAmgcAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgcAAAAAAACaBwAAAAAAAAAAAAAAAERA"
				],
				[
					270,
					1,
					"indent",
					null,
					"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"
				],
				[
					275,
					2,
					"left_delete",
					null,
					"AgAAAE8GAAAAAAAATwYAAAAAAAABAAAAY04GAAAAAAAATgYAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUAYAAAAAAABQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAE4GAAAAAAAATwYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgYAAAAAAABOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					2,
					"left_delete",
					null,
					"AgAAAJUJAAAAAAAAlQkAAAAAAAABAAAALpQJAAAAAAAAlAkAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlgkAAAAAAACWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					2,
					"right_delete",
					null,
					"AgAAAPAJAAAAAAAA8AkAAAAAAAABAAAAZ/AJAAAAAAAA8AkAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8AkAAAAAAADwCQAAAAAAAAAAAAAAAE5A"
				],
				[
					293,
					1,
					"indent",
					null,
					"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"
				],
				[
					314,
					1,
					"",
					null,
					"AQAAAOAfAAAAAAAA5h8AAAAAAAAIAAAAZy50cmltRm4",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4B8AAAAAAADoHwAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"expand_snippet",
					null,
					"BgAAAKUfAAAAAAAApR8AAAAAAAADAAAAZ2V0pR8AAAAAAAC9HwAAAAAAAAAAAACvHwAAAAAAALAfAAAAAAAAAAAAALAfAAAAAAAAsB8AAAAAAAABAAAAc7MfAAAAAAAAuR8AAAAAAAAAAAAAuR8AAAAAAAC5HwAAAAAAAAYAAABhZ05hbWU",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqB8AAAAAAACoHwAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAL0fAAAAAAAAvx8AAAAAAAAAAAAApB8AAAAAAACmHwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvR8AAAAAAACkHwAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"",
					null,
					"AQAAAOMnAAAAAAAA7ycAAAAAAAAOAAAAZy5kZWZpbmVHZXR0ZXI",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHRMAAAAAAAAdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"",
					null,
					"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"
				],
				[
					404,
					1,
					"insert",
					{
						"characters": "Q"
					},
					"AQAAAOkpAAAAAAAA6ikAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6SkAAAAAAADpKQAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"left_delete",
					null,
					"AQAAAOkpAAAAAAAA6SkAAAAAAAABAAAAUQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6ikAAAAAAADqKQAAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					2,
					"unindent",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAADpKQAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					2,
					"unindent",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAlJgAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAYSIAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"left_delete",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAGEiAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/mnt/srv-ubuntu/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/janos/Sources/plot-cv/test-video.js",
		"/home/janos/Sources/plot-cv/debugger.js",
		"/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
		"/home/janos/Sources/plot-cv/discogs.js",
		"/home/janos/Sources/plot-cv/check-discogs.js",
		"/home/janos/Sources/plot-cv/debugger-server.js",
		"/home/janos/Sources/plot-cv/test-image.js",
		"/home/janos/Sources/plot-cv/io-helpers.js",
		"/home/janos/Sources/plot-cv/scripts/prettier.sh",
		"/home/roman/Projects/plot-cv/qjs-opencv/highgui.cpp",
		"/home/janos/Sources/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/janos/Sources/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/janos/Sources/plot-cv/qjs-opencv/cmake/FindPNG.cmake",
		"/home/janos/Sources/dropbear/libtommath/tommath.h",
		"/home/janos/Sources/plot-cv/lib/grammars/ECMAScript.g4",
		"/home/janos/Sources/plot-cv/test-glfw.js",
		"/home/janos/Sources/plot-cv/lib/grammars/js_tokenizer.l",
		"/home/janos/Sources/plot-cv/lib/grammars/JavaScriptLexer.g4",
		"/home/janos/Sources/plot-cv/test-midi.js",
		"/home/roman/Projects/plot-cv/lib/grammars/css3.g4",
		"/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
		"/home/roman/Projects/plot-cv/lib/spawn.js",
		"/home/roman/Projects/plot-cv/trkl.es",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/deep.es",
		"/home/roman/Projects/plot-cv/preact.es",
		"/home/roman/Projects/plot-cv/preact.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/discogs.js",
		"/home/roman/Projects/plot-cv/lscache.es",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/nanovg-qjs.h",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-104",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/check-discogs.js",
		"/home/roman/Projects/plot-cv/libs.js",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-102",
		"/home/roman/Projects/plot-cv/discogs.es",
		"/home/roman/Projects/plot-cv/date-helpers.js",
		"/home/roman/Projects/plot-cv/io-helpers.js.orig",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/test-imread.js",
		"/home/roman/Projects/plot-cv/childProcess.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/make-bitmap.js",
		"/home/roman/Projects/plot-cv/diagram.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line_iterator.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/a.out",
		"/home/roman/Projects/plot-cv/test-autoplacer.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/param.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/size.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/workerScript.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/videoSource.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_array.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_clahe.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_draw.cpp",
		"/home/roman/Projects/plot-cv/test-diagram.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_rect.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_umat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point_iterator.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.hpp",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Sources/opencv/modules/videoio/src/cap_ffmpeg_impl.hpp",
		"/home/roman/Sources/opencv/modules/videoio/src/cap_ffmpeg.cpp",
		"/home/roman/Projects/ffmpeg-audio/orange-ffmpeg/ffmpeg-libs/static/ffmpeg/share/ffmpeg/examples/demuxing_decoding.c",
		"/home/roman/Projects/plot-cv/opencv-video.c",
		"/home/roman/Projects/plot-cv/simplest_ffmpeg_audio_decoder.cpp",
		"/home/roman/Projects/plot-cv/lib/filesystem.js",
		"/home/roman/Projects/plot-cv/fetch-post-prices.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/printer.js",
		"/home/roman/Projects/plot-cv/jack-session-client.c",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/mics.js",
		"/home/roman/Projects/plot-cv/create-tamper.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser2.js",
		"/home/roman/Projects/plot-cv/time-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point_iterator.hpp",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/JSBindings.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/Functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/scripts/collapse-imports.sh",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/lib/eda/circuitjs.js",
		"/home/roman/Projects/plot-cv/lib/eda/values.js",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/an-tronics/eagle/Headphone-Amplifier-ClassAB-alt.sch"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,-*/opencv/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"g\\.",
			"getRows",
			"g.defineGetter",
			"g.trimFn",
			"trimFn",
			"toEntries",
			"toFn",
			"toArrayFn",
			"main",
			"path",
			"child_proces",
			"WND_PROP",
			"POST_EXPR",
			"A-Z",
			"Key",
			"Property",
			"selectors",
			"DJS_SHARED_LIBRARY",
			"Shipping Address",
			"/\\*",
			"thread_content",
			"diskosenn",
			"import\\(",
			"ReadJSON",
			"orderDocuments",
			"pageParse",
			"ordersLoad",
			"pageParse",
			"Parser",
			"orderIdCells",
			"CachedFet",
			"CachedFett",
			"7",
			"pageFet",
			"CachedFetch",
			"CachedFetch\\(",
			"CachedFetch",
			"fetch =",
			"Fetch",
			"globalThis",
			"cacheLoad =",
			"$",
			"getTextFlat",
			"pageGetRequests",
			"Keys",
			"getAttribute",
			"scaleIFrame",
			"const frame",
			"makeIFrame",
			"naviga",
			"getTextFlat",
			"frameLoad",
			"^{",
			"options",
			"Util\\.",
			"setGlobal",
			"ordersGetRows",
			"');",
			"Util.getter",
			"//",
			"async",
			"\n}",
			"matchCache",
			"child_process",
			"pthread_create",
			"fork",
			"ReadCallback",
			"tls",
			"typeof ([^ ]*) == 'string'",
			"version",
			"child_proces",
			"waitRead",
			"filesystem\\.",
			"FdReader",
			"Util\\.",
			"Util",
			", '-H',",
			"child_proces",
			"selectROI",
			"recalc",
			"Pipeline",
			"threshold",
			"Pipeline",
			"Trackbar",
			"LoadConfig",
			"config",
			"NumericPara",
			"Trackbar",
			"Param",
			"Console",
			"getOther",
			"getOther\\(",
			"getOther",
			"'headers'",
			"bytes written",
			"fs\\.",
			"std\\.",
			"once",
			"mkstempSync",
			"VideoSou",
			"getLayer",
			"js_array_to",
			"90",
			"operator<<",
			"js_array_to",
			"js_draw_polylines",
			"polylines",
			"CORE_TRANSFORM",
			"js_contour_getmat",
			"transform",
			"ctor",
			"  console.log('axes.x', axes.x); \n",
			"187",
			"style",
			"audio",
			"_decode_",
			"decode_",
			"videoFormat",
			" CV_",
			"CV_",
			"cacheFields",
			"Location",
			"GetLoc",
			"gettok",
			" matchStatement",
			"'eof'",
			" parseTempl",
			"gettok"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"    ",
			"",
			"defineGetter",
			"trimFn",
			"g.toArrayFn",
			"ordersGetList",
			"getCacheValue",
			"tlsv",
			"\\1",
			"http",
			"fs.",
			",\\n    '-H', ",
			"Size.getOther(",
			"matrix",
			" cv::CV_",
			"CV_RGB(0, 0, 0)",
			"",
			"point",
			"\\\\D",
			"\\\\d",
			"\\.deref",
			"is_alphanumeric_char",
			"is_whitespace_char",
			"length",
			"{ const",
			"{ return",
			"const  {flags}=this;\\nreturn flags",
			"defines",
			"",
			"fs.\\1Sync",
			"define",
			",",
			"file",
			"target_compile_definitions",
			"msg",
			"PmDeviceInfo",
			"export function",
			"libportmidi",
			"\\1//\\2",
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": null,
							"function_name_status_row": -1,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1651806638.66,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "check-discogs.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5104,
						"regions":
						{
						},
						"selection":
						[
							[
								953,
								483
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 19,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1651799110.13,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								2,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 380.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "discogs.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6868,
						"regions":
						{
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1655,
										1660
									],
									[
										1735,
										1740
									],
									[
										1757,
										1762
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										1640,
										1640
									],
									[
										1705,
										1705
									],
									[
										1743,
										1743
									]
								],
								"scope": "col_gutter"
							},
							"col_EACF47FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1687,
										1702
									]
								],
								"scope": "col_EACF47FF"
							},
							"col_EACF47FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_EACF47FF_circle.png",
								"regions":
								[
									[
										1663,
										1663
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								1208,
								1175
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 50,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1651799110.46,
							"tabs_extra_last_activated_sheet_index": 1,
							"tabs_extra_moving":
							[
								2,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 980.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "discogs-shipping-policies.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9765,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1651818463.76,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139700989367200)":
	{
		"height": 0.0
	},
	"output.Protocol(139713492737424)":
	{
		"height": 0.0
	},
	"output.Protocol(140020110213280)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752054832)":
	{
		"height": 0.0
	},
	"output.Protocol(140156680251040)":
	{
		"height": 0.0
	},
	"output.Protocol(140161693477184)":
	{
		"height": 0.0
	},
	"output.Protocol(140190209186352)":
	{
		"height": 0.0
	},
	"output.Protocol(140264240155856)":
	{
		"height": 0.0
	},
	"output.Protocol(140490298408144)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873410144)":
	{
		"height": 0.0
	},
	"output.Protocol(140627243657680)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-midi",
				"test-midi.js"
			],
			[
				"css",
				"lib/grammars/css3.g4"
			],
			[
				"xpath",
				"lib/grammars/xpath.g4"
			],
			[
				"console",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"libs.js",
				"libs.js"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"disco",
				"discogs.js"
			],
			[
				"spawn.",
				"lib/spawn.js"
			],
			[
				"helpers",
				"io-helpers.js.orig"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"child-",
				"quickjs/qjs-modules/child-process.c"
			],
			[
				"package.j",
				"package.json"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"test-imrea",
				"test-imread.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"cvpipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"events.js",
				"quickjs/qjs-modules/lib/events.js"
			],
			[
				"test-vi",
				"test-video.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"server",
				"server.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"test-wor",
				"test-worker.js"
			],
			[
				"ws-work",
				"ws-worker.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"cvVi",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"ideoSou",
				"videoSource.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"documen",
				"lib/eagle/document.js"
			],
			[
				"cvPipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"dia",
				"diagram.js"
			],
			[
				"diagra",
				"diagram.js"
			],
			[
				"diag",
				"diagram.js"
			],
			[
				"opencv-vi",
				"opencv-video.c"
			],
			[
				"opencv-vide",
				"opencv-video.c"
			],
			[
				"simplest",
				"simplest_ffmpeg_audio_decoder.cpp"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"js",
				"jack-session-client.c"
			],
			[
				"package.js",
				"package.json"
			],
			[
				"printer",
				"lib/ecmascript/printer.js"
			],
			[
				"parser2.",
				"lib/ecmascript/parser2.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"cvHigh",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"diagram",
				"diagram.js"
			],
			[
				"point.hpp",
				"qjs-opencv/js_point.hpp"
			],
			[
				"jsbind",
				"qjs-opencv/jsbindings.hpp"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"help",
				"time-helpers.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"image",
				"imagePipeline.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"minnet-http",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"minnet-server",
				"quickjs/qjs-net/minnet-server.c"
			],
			[
				"minnet.c",
				"quickjs/qjs-net/minnet.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"time-help",
				"time-helpers.js"
			],
			[
				"io-helpers",
				"io-helpers.js"
			],
			[
				"test-bjson",
				"test-bjson.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"commands.j",
				"commands.js"
			],
			[
				"render",
				"lib/eagle/renderer.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"diff.js",
				"lib/json/diff.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"circuit",
				"lib/eda/circuitjs.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-shell.js",
				"cv-shell.js"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"queue.h",
				"quickjs/qjs-modules/queue.h"
			],
			[
				"queue.c",
				"quickjs/qjs-modules/queue.c"
			],
			[
				"char-utils",
				"quickjs/qjs-modules/char-utils.h"
			],
			[
				"quickjs-misc.",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"predicate.c",
				"quickjs/qjs-modules/predicate.c"
			],
			[
				"debugger-tran",
				"quickjs/quickjs-debugger-transport-win.c"
			],
			[
				"quickjs-debugg",
				"quickjs/quickjs-debugger-transport-unix.c"
			],
			[
				"defs",
				"quickjs/defs.cmake"
			],
			[
				"quickjs/CMakeLi",
				"quickjs/CMakeLists.txt"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-pred",
				"quickjs/qjs-modules/quickjs-predicate.c"
			],
			[
				"package",
				"package.json"
			],
			[
				"xpath.js",
				"lib/dom/xpath.js"
			],
			[
				"compileComm",
				"lib/build/compileCommand.js"
			],
			[
				"compile_com",
				"compile_commands.js"
			],
			[
				"quickjs-pat",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"test-child",
				"test-childprocess.js"
			],
			[
				"test-ini",
				"test-ini.js"
			],
			[
				"fn.js",
				"lib/parse/fn.js"
			],
			[
				"test-css",
				"test-css3.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"grammar-css3",
				"grammar-css3.js"
			],
			[
				"css3",
				"lib/grammars/css3.g4"
			],
			[
				"grammar.js",
				"lib/parse/grammar.js"
			],
			[
				"test-parse",
				"test-parse.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"lexer",
				"lib/parse/lexer.js"
			],
			[
				"ecmascript.js",
				"lib/ecmascript.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"imgui",
				"cmake/imgui-viewer.cmake"
			],
			[
				"high",
				"cmake/highgui-viewer.cmake"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"circui",
				"lib/eda/circuitjs.js"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"deep.c",
				"quickjs/qjs-modules/quickjs-deep.c"
			],
			[
				"test_xml",
				"quickjs/qjs-modules/tests/test_xml.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"highgui",
				"cmake/highgui-viewer.cmake"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"projec",
				"lib/eagle/project.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 247.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
