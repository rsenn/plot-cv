{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pathTo",
				"pathToPointIterator"
			],
			[
				"Element",
				"ElementTransformMatrix"
			],
			[
				"Elemen",
				"ElementTransformList"
			],
			[
				"getTra",
				"getTransformationList"
			],
			[
				"serialize",
				"serializeToString"
			],
			[
				"unitConv",
				"unitConvToMM"
			],
			[
				"lazy",
				"lazyProperties"
			],
			[
				"ex",
				"expansion"
			],
			[
				"isArra",
				"isArrayBuffer"
			],
			[
				"Extra",
				"ExtractRotation"
			],
			[
				"tra",
				"transformation"
			],
			[
				"define",
				"defineProperties"
			],
			[
				"getters",
				"gettersSetters"
			],
			[
				"circui",
				"circuitFilePath"
			],
			[
				"Conn",
				"ConnectionPoint"
			],
			[
				"parseCom",
				"parseCommentOrEmpty"
			],
			[
				"circ",
				"circuitFilePath"
			],
			[
				"built",
				"builtin_attr"
			],
			[
				"dep",
				"depthOrPred"
			],
			[
				"exte",
				"extendAsyncGenerator"
			],
			[
				"extend",
				"extendArray"
			],
			[
				"allo",
				"allowedDirs"
			],
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					312,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								957,
								971
							],
							[
								1051,
								1074
							],
							[
								1212,
								1229
							],
							[
								1270,
								1287
							],
							[
								1320,
								1329
							],
							[
								1363,
								1373
							],
							[
								1407,
								1417
							],
							[
								1452,
								1463
							],
							[
								1497,
								1507
							],
							[
								1542,
								1553
							],
							[
								1590,
								1603
							],
							[
								1641,
								1655
							],
							[
								1691,
								1703
							],
							[
								1739,
								1751
							],
							[
								1804,
								1824
							],
							[
								2086,
								2102
							],
							[
								2156,
								2175
							],
							[
								2210,
								2226
							],
							[
								2268,
								2283
							],
							[
								2304,
								2308
							],
							[
								2346,
								2380
							],
							[
								2403,
								2435
							],
							[
								2458,
								2501
							],
							[
								4330,
								4349
							],
							[
								4447,
								4463
							],
							[
								4525,
								4543
							],
							[
								4607,
								4626
							],
							[
								4691,
								4700
							],
							[
								4755,
								4772
							],
							[
								4835,
								4852
							],
							[
								4915,
								4929
							],
							[
								4989,
								5004
							],
							[
								5065,
								5080
							],
							[
								5141,
								5149
							],
							[
								5203,
								5215
							],
							[
								5273,
								5283
							],
							[
								5339,
								5350
							],
							[
								5407,
								5415
							],
							[
								5469,
								5491
							],
							[
								5559,
								5574
							],
							[
								5635,
								5657
							],
							[
								5725,
								5741
							],
							[
								5803,
								5819
							],
							[
								5881,
								5893
							],
							[
								5951,
								5963
							],
							[
								6021,
								6034
							],
							[
								6093,
								6111
							],
							[
								6169,
								6187
							],
							[
								6251,
								6273
							],
							[
								6341,
								6368
							],
							[
								6441,
								6458
							],
							[
								6515,
								6532
							],
							[
								6589,
								6606
							],
							[
								6653,
								6669
							],
							[
								6752,
								6768
							],
							[
								6840,
								6856
							],
							[
								6928,
								6945
							],
							[
								7002,
								7022
							],
							[
								7081,
								7101
							],
							[
								7260,
								7279
							],
							[
								7355,
								7362
							],
							[
								7391,
								7411
							],
							[
								7481,
								7496
							],
							[
								7557,
								7583
							],
							[
								7654,
								7670
							],
							[
								7726,
								7739
							],
							[
								7807,
								7825
							],
							[
								7898,
								7911
							],
							[
								7967,
								7981
							],
							[
								8083,
								8109
							],
							[
								8155,
								8176
							],
							[
								8335,
								8360
							],
							[
								8445,
								8487
							],
							[
								8621,
								8661
							],
							[
								11581,
								11624
							],
							[
								12023,
								12058
							],
							[
								12214,
								12232
							],
							[
								12262,
								12267
							],
							[
								12357,
								12384
							],
							[
								12503,
								12538
							],
							[
								12599,
								12603
							],
							[
								12619,
								12623
							],
							[
								12650,
								12659
							],
							[
								12822,
								12851
							],
							[
								12931,
								12964
							],
							[
								13093,
								13125
							],
							[
								13289,
								13322
							],
							[
								13509,
								13530
							],
							[
								13608,
								13614
							],
							[
								13631,
								13647
							],
							[
								13799,
								13811
							],
							[
								13824,
								13835
							],
							[
								13848,
								13869
							],
							[
								13905,
								13916
							],
							[
								14162,
								14168
							],
							[
								14181,
								14197
							],
							[
								14370,
								14375
							],
							[
								14389,
								14398
							],
							[
								14448,
								14475
							],
							[
								14520,
								14526
							],
							[
								14571,
								14583
							],
							[
								14613,
								14646
							],
							[
								14704,
								14710
							],
							[
								14825,
								14837
							],
							[
								14891,
								14903
							],
							[
								15051,
								15062
							],
							[
								15104,
								15137
							],
							[
								15195,
								15204
							],
							[
								15326,
								15347
							],
							[
								15408,
								15429
							],
							[
								15587,
								15601
							],
							[
								15903,
								15943
							],
							[
								16010,
								16020
							],
							[
								16178,
								16199
							],
							[
								16333,
								16354
							],
							[
								16386,
								16407
							],
							[
								16510,
								16531
							],
							[
								16806,
								16816
							],
							[
								16862,
								16885
							],
							[
								16942,
								16949
							],
							[
								16967,
								16974
							],
							[
								16999,
								17024
							],
							[
								17084,
								17091
							],
							[
								17112,
								17119
							],
							[
								17149,
								17204
							],
							[
								17309,
								17316
							],
							[
								17470,
								17494
							],
							[
								17544,
								17548
							],
							[
								17579,
								17613
							],
							[
								17624,
								17637
							],
							[
								17696,
								17741
							],
							[
								17806,
								17817
							],
							[
								17837,
								17857
							],
							[
								17897,
								17926
							],
							[
								17950,
								17961
							],
							[
								17976,
								17988
							],
							[
								18035,
								18074
							],
							[
								18175,
								18179
							],
							[
								18218,
								18223
							],
							[
								18249,
								18255
							],
							[
								18284,
								18290
							],
							[
								18383,
								18396
							],
							[
								18424,
								18437
							],
							[
								18563,
								18574
							],
							[
								18654,
								18714
							],
							[
								18784,
								18801
							],
							[
								18862,
								18886
							],
							[
								18961,
								18988
							],
							[
								19209,
								19229
							],
							[
								19259,
								19270
							],
							[
								19369,
								19404
							],
							[
								19444,
								19462
							],
							[
								19640,
								19661
							],
							[
								19685,
								19695
							],
							[
								19731,
								19760
							],
							[
								19816,
								19826
							],
							[
								19877,
								19882
							],
							[
								19939,
								19952
							],
							[
								20025,
								20055
							],
							[
								20594,
								20650
							],
							[
								20811,
								20875
							],
							[
								21023,
								21074
							],
							[
								21741,
								21803
							],
							[
								21985,
								22054
							],
							[
								22143,
								22165
							],
							[
								22199,
								22210
							],
							[
								22233,
								22255
							],
							[
								22497,
								22569
							],
							[
								22672,
								22743
							],
							[
								22839,
								22890
							],
							[
								23062,
								23109
							],
							[
								23232,
								23289
							],
							[
								23383,
								23389
							],
							[
								23403,
								23409
							],
							[
								23713,
								23747
							],
							[
								24054,
								24109
							],
							[
								24385,
								24429
							],
							[
								24596,
								24630
							],
							[
								24696,
								24732
							],
							[
								24807,
								24824
							],
							[
								24968,
								25013
							],
							[
								25147,
								25160
							],
							[
								25258,
								25271
							],
							[
								25353,
								25390
							],
							[
								25391,
								25405
							],
							[
								25411,
								25415
							],
							[
								25511,
								25531
							],
							[
								25584,
								25607
							],
							[
								25687,
								25707
							],
							[
								25789,
								25807
							],
							[
								25950,
								25968
							],
							[
								26041,
								26073
							],
							[
								26101,
								26127
							],
							[
								26445,
								26477
							],
							[
								26510,
								26526
							],
							[
								26541,
								26548
							],
							[
								26574,
								26590
							],
							[
								26629,
								26650
							],
							[
								26690,
								26703
							],
							[
								26754,
								26775
							],
							[
								26944,
								26972
							],
							[
								27191,
								27208
							],
							[
								27209,
								27218
							],
							[
								27270,
								27287
							],
							[
								27288,
								27297
							],
							[
								27357,
								27374
							],
							[
								27375,
								27398
							],
							[
								27454,
								27478
							],
							[
								30105,
								30133
							],
							[
								30564,
								30568
							],
							[
								30696,
								30709
							],
							[
								31025,
								31037
							],
							[
								31300,
								31313
							],
							[
								31418,
								31432
							],
							[
								32325,
								32353
							],
							[
								32469,
								32482
							],
							[
								32594,
								32618
							],
							[
								32711,
								32745
							],
							[
								32866,
								32905
							],
							[
								32952,
								32989
							],
							[
								33036,
								33063
							],
							[
								33074,
								33090
							],
							[
								33148,
								33170
							],
							[
								33203,
								33213
							],
							[
								33262,
								33274
							],
							[
								33556,
								33566
							],
							[
								33641,
								33653
							],
							[
								33931,
								33957
							],
							[
								34147,
								34195
							],
							[
								34243,
								34355
							],
							[
								34460,
								34483
							],
							[
								34622,
								34654
							],
							[
								34967,
								35021
							],
							[
								35379,
								35431
							],
							[
								35525,
								35541
							],
							[
								35625,
								35636
							],
							[
								35749,
								35753
							],
							[
								36032,
								36065
							],
							[
								36179,
								36231
							],
							[
								36405,
								36487
							],
							[
								36647,
								36657
							],
							[
								36675,
								36688
							],
							[
								36865,
								36909
							],
							[
								37172,
								37208
							],
							[
								37365,
								37381
							],
							[
								37399,
								37421
							],
							[
								37534,
								37540
							],
							[
								37644,
								37657
							],
							[
								39296,
								39334
							],
							[
								39434,
								39450
							],
							[
								39523,
								39567
							],
							[
								39926,
								39968
							],
							[
								40163,
								40194
							],
							[
								40244,
								40286
							],
							[
								40406,
								40430
							],
							[
								40650,
								40660
							],
							[
								40713,
								40717
							],
							[
								40756,
								40787
							],
							[
								40798,
								40815
							],
							[
								40956,
								40990
							],
							[
								41228,
								41247
							],
							[
								41285,
								41307
							],
							[
								41419,
								41441
							],
							[
								41553,
								41588
							],
							[
								41636,
								41663
							],
							[
								41754,
								41792
							],
							[
								42001,
								42049
							],
							[
								42629,
								42658
							],
							[
								43105,
								43145
							],
							[
								43240,
								43267
							],
							[
								43324,
								43351
							],
							[
								43554,
								43568
							],
							[
								43617,
								43623
							],
							[
								43664,
								43730
							],
							[
								43732,
								43736
							],
							[
								43894,
								43901
							],
							[
								43993,
								44003
							],
							[
								44114,
								44123
							],
							[
								44229,
								44255
							],
							[
								44388,
								44419
							],
							[
								44594,
								44613
							],
							[
								44655,
								44663
							],
							[
								44692,
								44726
							],
							[
								44870,
								44915
							],
							[
								44991,
								45001
							],
							[
								45052,
								45062
							],
							[
								45088,
								45098
							],
							[
								45126,
								45151
							],
							[
								45282,
								45307
							],
							[
								45405,
								45440
							],
							[
								45493,
								45527
							],
							[
								45609,
								45645
							],
							[
								45766,
								45770
							],
							[
								45797,
								45801
							],
							[
								45840,
								45844
							],
							[
								45872,
								45876
							],
							[
								45905,
								45933
							],
							[
								46063,
								46067
							],
							[
								46124,
								46155
							],
							[
								46494,
								46530
							],
							[
								46779,
								46809
							],
							[
								46945,
								46949
							],
							[
								47233,
								47260
							],
							[
								47304,
								47313
							],
							[
								47365,
								47377
							],
							[
								47519,
								47531
							],
							[
								47658,
								47683
							],
							[
								47723,
								47749
							],
							[
								48001,
								48025
							],
							[
								48218,
								48241
							],
							[
								48342,
								48382
							],
							[
								48531,
								48535
							],
							[
								48568,
								48576
							],
							[
								48605,
								48609
							],
							[
								48946,
								48959
							],
							[
								49012,
								49032
							],
							[
								49245,
								49411
							],
							[
								49420,
								49477
							],
							[
								49484,
								49525
							],
							[
								49774,
								49794
							],
							[
								49996,
								50011
							],
							[
								50297,
								50320
							],
							[
								50525,
								50543
							],
							[
								50756,
								50770
							],
							[
								50831,
								50843
							],
							[
								50941,
								50950
							],
							[
								51226,
								51242
							],
							[
								51677,
								51713
							],
							[
								51808,
								51817
							],
							[
								51993,
								52004
							],
							[
								52015,
								52023
							],
							[
								52072,
								52084
							],
							[
								52329,
								52341
							],
							[
								52522,
								52548
							],
							[
								52567,
								52571
							],
							[
								52658,
								52682
							],
							[
								52760,
								52789
							],
							[
								52843,
								52874
							],
							[
								52881,
								52884
							],
							[
								52928,
								52941
							],
							[
								53041,
								53096
							],
							[
								53122,
								53148
							],
							[
								53323,
								53350
							],
							[
								53439,
								53472
							],
							[
								53492,
								53508
							],
							[
								53615,
								53633
							],
							[
								53839,
								53890
							],
							[
								54260,
								54324
							],
							[
								54384,
								54399
							],
							[
								54465,
								54479
							],
							[
								54517,
								54540
							],
							[
								54732,
								54750
							],
							[
								54941,
								55011
							],
							[
								55160,
								55184
							],
							[
								55203,
								55211
							],
							[
								55247,
								55262
							],
							[
								55388,
								55401
							],
							[
								55556,
								55572
							],
							[
								55767,
								55793
							],
							[
								55808,
								55830
							],
							[
								56046,
								56050
							],
							[
								56236,
								56258
							],
							[
								56280,
								56290
							],
							[
								56308,
								56321
							],
							[
								56445,
								56467
							],
							[
								56489,
								56499
							],
							[
								56517,
								56530
							],
							[
								56636,
								56658
							],
							[
								56684,
								56694
							],
							[
								56712,
								56725
							],
							[
								56761,
								56783
							],
							[
								56804,
								56814
							],
							[
								56832,
								56845
							],
							[
								56865,
								56906
							],
							[
								57195,
								57218
							],
							[
								57299,
								57321
							],
							[
								57395,
								57415
							],
							[
								57542,
								57553
							],
							[
								57586,
								57603
							],
							[
								57767,
								57786
							],
							[
								57821,
								57843
							],
							[
								57975,
								57996
							],
							[
								58134,
								58154
							],
							[
								58221,
								58244
							],
							[
								58320,
								58342
							],
							[
								58451,
								58475
							],
							[
								58532,
								58544
							],
							[
								58715,
								58733
							],
							[
								58790,
								58802
							],
							[
								58954,
								58977
							],
							[
								59109,
								59125
							],
							[
								59172,
								59185
							],
							[
								59222,
								59289
							],
							[
								59325,
								59347
							],
							[
								59376,
								59386
							],
							[
								59402,
								59415
							],
							[
								59466,
								59479
							],
							[
								59546,
								59569
							],
							[
								59688,
								59710
							],
							[
								59798,
								59811
							],
							[
								59864,
								59880
							],
							[
								59918,
								59922
							],
							[
								60032,
								60069
							],
							[
								60080,
								60090
							],
							[
								60099,
								60128
							],
							[
								60345,
								60361
							],
							[
								60383,
								60394
							],
							[
								60449,
								60476
							],
							[
								60523,
								60541
							],
							[
								60615,
								60650
							],
							[
								60776,
								60797
							],
							[
								60831,
								60840
							],
							[
								60849,
								60857
							],
							[
								60900,
								60909
							],
							[
								60930,
								60939
							],
							[
								60950,
								60958
							],
							[
								61025,
								61034
							],
							[
								61066,
								61094
							],
							[
								61163,
								61182
							],
							[
								61389,
								61415
							],
							[
								61703,
								61725
							],
							[
								61870,
								61892
							],
							[
								62404,
								62454
							],
							[
								62618,
								62667
							],
							[
								62736,
								62743
							],
							[
								62832,
								62846
							],
							[
								62931,
								62941
							],
							[
								63047,
								63051
							],
							[
								63082,
								63102
							],
							[
								63158,
								63171
							],
							[
								63231,
								63243
							],
							[
								63383,
								63398
							],
							[
								63809,
								63847
							],
							[
								64029,
								64040
							],
							[
								64075,
								64096
							],
							[
								64165,
								64172
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(obj, ...optional)",
							" (...v) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							" (...v) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function define(obj, ...args)",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(handler = key => null)",
							"get(target, key, receiver)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							"handler = key =>",
							"function (...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					313,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								957,
								971
							],
							[
								1051,
								1074
							],
							[
								1212,
								1229
							],
							[
								1270,
								1287
							],
							[
								1320,
								1329
							],
							[
								1363,
								1373
							],
							[
								1407,
								1417
							],
							[
								1452,
								1463
							],
							[
								1497,
								1507
							],
							[
								1542,
								1553
							],
							[
								1590,
								1603
							],
							[
								1641,
								1655
							],
							[
								1691,
								1703
							],
							[
								1739,
								1751
							],
							[
								1804,
								1824
							],
							[
								2086,
								2102
							],
							[
								2156,
								2175
							],
							[
								2210,
								2226
							],
							[
								2268,
								2283
							],
							[
								2304,
								2308
							],
							[
								2346,
								2380
							],
							[
								2403,
								2435
							],
							[
								2458,
								2501
							],
							[
								4330,
								4349
							],
							[
								4447,
								4463
							],
							[
								4525,
								4543
							],
							[
								4607,
								4626
							],
							[
								4691,
								4700
							],
							[
								4755,
								4772
							],
							[
								4835,
								4852
							],
							[
								4915,
								4929
							],
							[
								4989,
								5004
							],
							[
								5065,
								5080
							],
							[
								5141,
								5149
							],
							[
								5203,
								5215
							],
							[
								5273,
								5283
							],
							[
								5339,
								5350
							],
							[
								5407,
								5415
							],
							[
								5469,
								5491
							],
							[
								5559,
								5574
							],
							[
								5635,
								5657
							],
							[
								5725,
								5741
							],
							[
								5803,
								5819
							],
							[
								5881,
								5893
							],
							[
								5951,
								5963
							],
							[
								6021,
								6034
							],
							[
								6093,
								6111
							],
							[
								6169,
								6187
							],
							[
								6251,
								6273
							],
							[
								6341,
								6368
							],
							[
								6441,
								6458
							],
							[
								6515,
								6532
							],
							[
								6589,
								6606
							],
							[
								6653,
								6669
							],
							[
								6752,
								6768
							],
							[
								6840,
								6856
							],
							[
								6928,
								6945
							],
							[
								7002,
								7022
							],
							[
								7081,
								7101
							],
							[
								7260,
								7279
							],
							[
								7355,
								7362
							],
							[
								7391,
								7411
							],
							[
								7481,
								7496
							],
							[
								7557,
								7583
							],
							[
								7654,
								7670
							],
							[
								7726,
								7739
							],
							[
								7807,
								7825
							],
							[
								7898,
								7911
							],
							[
								7967,
								7981
							],
							[
								8083,
								8109
							],
							[
								8155,
								8176
							],
							[
								8335,
								8360
							],
							[
								8445,
								8487
							],
							[
								8621,
								8661
							],
							[
								11581,
								11624
							],
							[
								12023,
								12058
							],
							[
								12214,
								12232
							],
							[
								12262,
								12267
							],
							[
								12357,
								12384
							],
							[
								12503,
								12538
							],
							[
								12599,
								12603
							],
							[
								12619,
								12623
							],
							[
								12650,
								12659
							],
							[
								12822,
								12851
							],
							[
								12931,
								12964
							],
							[
								13093,
								13125
							],
							[
								13289,
								13322
							],
							[
								13509,
								13530
							],
							[
								13608,
								13614
							],
							[
								13631,
								13647
							],
							[
								13799,
								13811
							],
							[
								13824,
								13835
							],
							[
								13848,
								13869
							],
							[
								13905,
								13916
							],
							[
								14162,
								14168
							],
							[
								14181,
								14197
							],
							[
								14370,
								14375
							],
							[
								14389,
								14398
							],
							[
								14448,
								14475
							],
							[
								14520,
								14526
							],
							[
								14571,
								14583
							],
							[
								14613,
								14646
							],
							[
								14704,
								14710
							],
							[
								14825,
								14837
							],
							[
								14891,
								14903
							],
							[
								15051,
								15062
							],
							[
								15104,
								15137
							],
							[
								15195,
								15204
							],
							[
								15326,
								15347
							],
							[
								15408,
								15429
							],
							[
								15587,
								15601
							],
							[
								15903,
								15943
							],
							[
								16010,
								16020
							],
							[
								16178,
								16199
							],
							[
								16333,
								16354
							],
							[
								16386,
								16407
							],
							[
								16510,
								16531
							],
							[
								16806,
								16816
							],
							[
								16862,
								16885
							],
							[
								16942,
								16949
							],
							[
								16967,
								16974
							],
							[
								16999,
								17024
							],
							[
								17084,
								17091
							],
							[
								17112,
								17119
							],
							[
								17149,
								17204
							],
							[
								17309,
								17316
							],
							[
								17470,
								17494
							],
							[
								17544,
								17548
							],
							[
								17579,
								17613
							],
							[
								17624,
								17637
							],
							[
								17696,
								17741
							],
							[
								17806,
								17817
							],
							[
								17837,
								17857
							],
							[
								17897,
								17926
							],
							[
								17950,
								17961
							],
							[
								17976,
								17988
							],
							[
								18035,
								18074
							],
							[
								18175,
								18179
							],
							[
								18218,
								18223
							],
							[
								18249,
								18255
							],
							[
								18284,
								18290
							],
							[
								18383,
								18396
							],
							[
								18424,
								18437
							],
							[
								18563,
								18574
							],
							[
								18654,
								18714
							],
							[
								18784,
								18801
							],
							[
								18862,
								18886
							],
							[
								18961,
								18988
							],
							[
								19209,
								19229
							],
							[
								19259,
								19270
							],
							[
								19369,
								19404
							],
							[
								19444,
								19462
							],
							[
								19640,
								19661
							],
							[
								19685,
								19695
							],
							[
								19731,
								19760
							],
							[
								19816,
								19826
							],
							[
								19877,
								19882
							],
							[
								19939,
								19952
							],
							[
								20025,
								20055
							],
							[
								20594,
								20650
							],
							[
								20811,
								20875
							],
							[
								21023,
								21074
							],
							[
								21741,
								21803
							],
							[
								21985,
								22054
							],
							[
								22143,
								22165
							],
							[
								22199,
								22210
							],
							[
								22233,
								22255
							],
							[
								22497,
								22569
							],
							[
								22672,
								22743
							],
							[
								22839,
								22890
							],
							[
								23062,
								23109
							],
							[
								23232,
								23289
							],
							[
								23383,
								23389
							],
							[
								23403,
								23409
							],
							[
								23713,
								23747
							],
							[
								24054,
								24109
							],
							[
								24385,
								24429
							],
							[
								24596,
								24630
							],
							[
								24696,
								24732
							],
							[
								24807,
								24824
							],
							[
								24968,
								25013
							],
							[
								25147,
								25160
							],
							[
								25258,
								25271
							],
							[
								25353,
								25390
							],
							[
								25391,
								25405
							],
							[
								25411,
								25415
							],
							[
								25511,
								25531
							],
							[
								25584,
								25607
							],
							[
								25687,
								25707
							],
							[
								25789,
								25807
							],
							[
								25950,
								25968
							],
							[
								26041,
								26073
							],
							[
								26101,
								26127
							],
							[
								26445,
								26477
							],
							[
								26510,
								26526
							],
							[
								26541,
								26548
							],
							[
								26574,
								26590
							],
							[
								26629,
								26650
							],
							[
								26690,
								26703
							],
							[
								26754,
								26775
							],
							[
								26944,
								26972
							],
							[
								27191,
								27208
							],
							[
								27209,
								27218
							],
							[
								27270,
								27287
							],
							[
								27288,
								27297
							],
							[
								27357,
								27374
							],
							[
								27375,
								27398
							],
							[
								27454,
								27478
							],
							[
								30105,
								30133
							],
							[
								30564,
								30568
							],
							[
								30696,
								30709
							],
							[
								31025,
								31037
							],
							[
								31300,
								31313
							],
							[
								31418,
								31432
							],
							[
								32325,
								32353
							],
							[
								32469,
								32482
							],
							[
								32594,
								32618
							],
							[
								32711,
								32745
							],
							[
								32866,
								32905
							],
							[
								32952,
								32989
							],
							[
								33036,
								33063
							],
							[
								33074,
								33090
							],
							[
								33148,
								33170
							],
							[
								33203,
								33213
							],
							[
								33262,
								33274
							],
							[
								33556,
								33566
							],
							[
								33641,
								33653
							],
							[
								33931,
								33957
							],
							[
								34147,
								34195
							],
							[
								34243,
								34355
							],
							[
								34460,
								34483
							],
							[
								34622,
								34654
							],
							[
								34967,
								35021
							],
							[
								35379,
								35431
							],
							[
								35525,
								35541
							],
							[
								35625,
								35636
							],
							[
								35749,
								35753
							],
							[
								36032,
								36065
							],
							[
								36179,
								36231
							],
							[
								36405,
								36487
							],
							[
								36647,
								36657
							],
							[
								36675,
								36688
							],
							[
								36865,
								36909
							],
							[
								37172,
								37208
							],
							[
								37365,
								37381
							],
							[
								37399,
								37421
							],
							[
								37534,
								37540
							],
							[
								37644,
								37657
							],
							[
								39296,
								39334
							],
							[
								39434,
								39450
							],
							[
								39523,
								39567
							],
							[
								39926,
								39968
							],
							[
								40163,
								40194
							],
							[
								40244,
								40286
							],
							[
								40406,
								40430
							],
							[
								40650,
								40660
							],
							[
								40713,
								40717
							],
							[
								40756,
								40787
							],
							[
								40798,
								40815
							],
							[
								40956,
								40990
							],
							[
								41228,
								41247
							],
							[
								41285,
								41307
							],
							[
								41419,
								41441
							],
							[
								41553,
								41588
							],
							[
								41636,
								41663
							],
							[
								41754,
								41792
							],
							[
								42001,
								42049
							],
							[
								42629,
								42658
							],
							[
								43105,
								43145
							],
							[
								43240,
								43267
							],
							[
								43324,
								43351
							],
							[
								43554,
								43568
							],
							[
								43617,
								43623
							],
							[
								43664,
								43730
							],
							[
								43732,
								43736
							],
							[
								43894,
								43901
							],
							[
								43993,
								44003
							],
							[
								44114,
								44123
							],
							[
								44229,
								44255
							],
							[
								44388,
								44419
							],
							[
								44594,
								44613
							],
							[
								44655,
								44663
							],
							[
								44692,
								44726
							],
							[
								44870,
								44915
							],
							[
								44991,
								45001
							],
							[
								45052,
								45062
							],
							[
								45088,
								45098
							],
							[
								45126,
								45151
							],
							[
								45282,
								45307
							],
							[
								45405,
								45440
							],
							[
								45493,
								45527
							],
							[
								45609,
								45645
							],
							[
								45766,
								45770
							],
							[
								45797,
								45801
							],
							[
								45840,
								45844
							],
							[
								45872,
								45876
							],
							[
								45905,
								45933
							],
							[
								46063,
								46067
							],
							[
								46124,
								46155
							],
							[
								46494,
								46530
							],
							[
								46779,
								46809
							],
							[
								46945,
								46949
							],
							[
								47233,
								47260
							],
							[
								47304,
								47313
							],
							[
								47365,
								47377
							],
							[
								47519,
								47531
							],
							[
								47658,
								47683
							],
							[
								47723,
								47749
							],
							[
								48001,
								48025
							],
							[
								48218,
								48241
							],
							[
								48342,
								48382
							],
							[
								48531,
								48535
							],
							[
								48568,
								48576
							],
							[
								48605,
								48609
							],
							[
								48946,
								48959
							],
							[
								49012,
								49032
							],
							[
								49245,
								49411
							],
							[
								49420,
								49477
							],
							[
								49484,
								49525
							],
							[
								49774,
								49794
							],
							[
								49996,
								50011
							],
							[
								50297,
								50320
							],
							[
								50525,
								50543
							],
							[
								50756,
								50770
							],
							[
								50831,
								50843
							],
							[
								50941,
								50950
							],
							[
								51226,
								51242
							],
							[
								51677,
								51713
							],
							[
								51808,
								51817
							],
							[
								51993,
								52004
							],
							[
								52015,
								52023
							],
							[
								52072,
								52084
							],
							[
								52329,
								52341
							],
							[
								52522,
								52548
							],
							[
								52567,
								52571
							],
							[
								52658,
								52682
							],
							[
								52760,
								52789
							],
							[
								52843,
								52874
							],
							[
								52881,
								52884
							],
							[
								52928,
								52941
							],
							[
								53041,
								53096
							],
							[
								53122,
								53148
							],
							[
								53323,
								53350
							],
							[
								53439,
								53472
							],
							[
								53492,
								53508
							],
							[
								53615,
								53633
							],
							[
								53839,
								53890
							],
							[
								54260,
								54324
							],
							[
								54384,
								54399
							],
							[
								54465,
								54479
							],
							[
								54517,
								54540
							],
							[
								54732,
								54750
							],
							[
								54941,
								55011
							],
							[
								55160,
								55184
							],
							[
								55203,
								55211
							],
							[
								55247,
								55262
							],
							[
								55388,
								55401
							],
							[
								55556,
								55572
							],
							[
								55767,
								55793
							],
							[
								55808,
								55830
							],
							[
								56046,
								56050
							],
							[
								56236,
								56258
							],
							[
								56280,
								56290
							],
							[
								56308,
								56321
							],
							[
								56445,
								56467
							],
							[
								56489,
								56499
							],
							[
								56517,
								56530
							],
							[
								56636,
								56658
							],
							[
								56684,
								56694
							],
							[
								56712,
								56725
							],
							[
								56761,
								56783
							],
							[
								56804,
								56814
							],
							[
								56832,
								56845
							],
							[
								56865,
								56906
							],
							[
								57195,
								57218
							],
							[
								57299,
								57321
							],
							[
								57395,
								57415
							],
							[
								57542,
								57553
							],
							[
								57586,
								57603
							],
							[
								57767,
								57786
							],
							[
								57821,
								57843
							],
							[
								57975,
								57996
							],
							[
								58134,
								58154
							],
							[
								58221,
								58244
							],
							[
								58320,
								58342
							],
							[
								58451,
								58475
							],
							[
								58532,
								58544
							],
							[
								58715,
								58733
							],
							[
								58790,
								58802
							],
							[
								58954,
								58977
							],
							[
								59109,
								59125
							],
							[
								59172,
								59185
							],
							[
								59222,
								59289
							],
							[
								59325,
								59347
							],
							[
								59376,
								59386
							],
							[
								59402,
								59415
							],
							[
								59466,
								59479
							],
							[
								59546,
								59569
							],
							[
								59688,
								59710
							],
							[
								59798,
								59811
							],
							[
								59864,
								59880
							],
							[
								59918,
								59922
							],
							[
								60032,
								60069
							],
							[
								60080,
								60090
							],
							[
								60099,
								60128
							],
							[
								60345,
								60361
							],
							[
								60383,
								60394
							],
							[
								60449,
								60476
							],
							[
								60523,
								60541
							],
							[
								60615,
								60650
							],
							[
								60776,
								60797
							],
							[
								60831,
								60840
							],
							[
								60849,
								60857
							],
							[
								60900,
								60909
							],
							[
								60930,
								60939
							],
							[
								60950,
								60958
							],
							[
								61025,
								61034
							],
							[
								61066,
								61094
							],
							[
								61163,
								61182
							],
							[
								61389,
								61415
							],
							[
								61703,
								61725
							],
							[
								61870,
								61892
							],
							[
								62404,
								62454
							],
							[
								62618,
								62667
							],
							[
								62736,
								62743
							],
							[
								62832,
								62846
							],
							[
								62931,
								62941
							],
							[
								63047,
								63051
							],
							[
								63082,
								63102
							],
							[
								63158,
								63171
							],
							[
								63231,
								63243
							],
							[
								63383,
								63398
							],
							[
								63809,
								63847
							],
							[
								64029,
								64040
							],
							[
								64075,
								64096
							],
							[
								64165,
								64172
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(obj, ...optional)",
							" (...v) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							" (...v) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function define(obj, ...args)",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(handler = key => null)",
							"get(target, key, receiver)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							"handler = key =>",
							"function (...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					314,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					315,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs-misc.c.ast.bjson",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					316,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					317,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs-misc.c.ast.bjson",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					318,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								957,
								971
							],
							[
								1051,
								1074
							],
							[
								1212,
								1229
							],
							[
								1270,
								1287
							],
							[
								1320,
								1329
							],
							[
								1363,
								1373
							],
							[
								1407,
								1417
							],
							[
								1452,
								1463
							],
							[
								1497,
								1507
							],
							[
								1542,
								1553
							],
							[
								1590,
								1603
							],
							[
								1641,
								1655
							],
							[
								1691,
								1703
							],
							[
								1739,
								1751
							],
							[
								1804,
								1824
							],
							[
								2086,
								2102
							],
							[
								2156,
								2175
							],
							[
								2210,
								2226
							],
							[
								2268,
								2283
							],
							[
								2304,
								2308
							],
							[
								2346,
								2380
							],
							[
								2403,
								2435
							],
							[
								2458,
								2501
							],
							[
								4330,
								4349
							],
							[
								4447,
								4463
							],
							[
								4525,
								4543
							],
							[
								4607,
								4626
							],
							[
								4691,
								4700
							],
							[
								4755,
								4772
							],
							[
								4835,
								4852
							],
							[
								4915,
								4929
							],
							[
								4989,
								5004
							],
							[
								5065,
								5080
							],
							[
								5141,
								5149
							],
							[
								5203,
								5215
							],
							[
								5273,
								5283
							],
							[
								5339,
								5350
							],
							[
								5407,
								5415
							],
							[
								5469,
								5491
							],
							[
								5559,
								5574
							],
							[
								5635,
								5657
							],
							[
								5725,
								5741
							],
							[
								5803,
								5819
							],
							[
								5881,
								5893
							],
							[
								5951,
								5963
							],
							[
								6021,
								6034
							],
							[
								6093,
								6111
							],
							[
								6169,
								6187
							],
							[
								6251,
								6273
							],
							[
								6341,
								6368
							],
							[
								6441,
								6458
							],
							[
								6515,
								6532
							],
							[
								6589,
								6606
							],
							[
								6653,
								6669
							],
							[
								6752,
								6768
							],
							[
								6840,
								6856
							],
							[
								6928,
								6945
							],
							[
								7002,
								7022
							],
							[
								7081,
								7101
							],
							[
								7260,
								7279
							],
							[
								7355,
								7362
							],
							[
								7391,
								7411
							],
							[
								7481,
								7496
							],
							[
								7557,
								7583
							],
							[
								7654,
								7670
							],
							[
								7726,
								7739
							],
							[
								7807,
								7825
							],
							[
								7898,
								7911
							],
							[
								7967,
								7981
							],
							[
								8083,
								8109
							],
							[
								8155,
								8176
							],
							[
								8335,
								8360
							],
							[
								8445,
								8487
							],
							[
								8621,
								8661
							],
							[
								11581,
								11624
							],
							[
								12023,
								12058
							],
							[
								12214,
								12232
							],
							[
								12262,
								12267
							],
							[
								12357,
								12384
							],
							[
								12503,
								12538
							],
							[
								12599,
								12603
							],
							[
								12619,
								12623
							],
							[
								12650,
								12659
							],
							[
								12822,
								12851
							],
							[
								12931,
								12964
							],
							[
								13093,
								13125
							],
							[
								13289,
								13322
							],
							[
								13509,
								13530
							],
							[
								13608,
								13614
							],
							[
								13631,
								13647
							],
							[
								13799,
								13811
							],
							[
								13824,
								13835
							],
							[
								13848,
								13869
							],
							[
								13905,
								13916
							],
							[
								14162,
								14168
							],
							[
								14181,
								14197
							],
							[
								14370,
								14375
							],
							[
								14389,
								14398
							],
							[
								14448,
								14475
							],
							[
								14520,
								14526
							],
							[
								14571,
								14583
							],
							[
								14613,
								14646
							],
							[
								14704,
								14710
							],
							[
								14825,
								14837
							],
							[
								14891,
								14903
							],
							[
								15051,
								15062
							],
							[
								15104,
								15137
							],
							[
								15195,
								15204
							],
							[
								15326,
								15347
							],
							[
								15408,
								15429
							],
							[
								15587,
								15601
							],
							[
								15903,
								15943
							],
							[
								16010,
								16020
							],
							[
								16178,
								16199
							],
							[
								16333,
								16354
							],
							[
								16386,
								16407
							],
							[
								16510,
								16531
							],
							[
								16806,
								16816
							],
							[
								16862,
								16885
							],
							[
								16942,
								16949
							],
							[
								16967,
								16974
							],
							[
								16999,
								17024
							],
							[
								17084,
								17091
							],
							[
								17112,
								17119
							],
							[
								17149,
								17204
							],
							[
								17309,
								17316
							],
							[
								17470,
								17494
							],
							[
								17544,
								17548
							],
							[
								17579,
								17613
							],
							[
								17624,
								17637
							],
							[
								17696,
								17741
							],
							[
								17806,
								17817
							],
							[
								17837,
								17857
							],
							[
								17897,
								17926
							],
							[
								17950,
								17961
							],
							[
								17976,
								17988
							],
							[
								18035,
								18074
							],
							[
								18175,
								18179
							],
							[
								18218,
								18223
							],
							[
								18249,
								18255
							],
							[
								18284,
								18290
							],
							[
								18383,
								18396
							],
							[
								18424,
								18437
							],
							[
								18563,
								18574
							],
							[
								18654,
								18714
							],
							[
								18784,
								18801
							],
							[
								18862,
								18886
							],
							[
								18961,
								18988
							],
							[
								19209,
								19229
							],
							[
								19259,
								19270
							],
							[
								19369,
								19404
							],
							[
								19444,
								19462
							],
							[
								19640,
								19661
							],
							[
								19685,
								19695
							],
							[
								19731,
								19760
							],
							[
								19816,
								19826
							],
							[
								19877,
								19882
							],
							[
								19939,
								19952
							],
							[
								20025,
								20055
							],
							[
								20594,
								20650
							],
							[
								20811,
								20875
							],
							[
								21023,
								21074
							],
							[
								21741,
								21803
							],
							[
								21985,
								22054
							],
							[
								22143,
								22165
							],
							[
								22199,
								22210
							],
							[
								22233,
								22255
							],
							[
								22497,
								22569
							],
							[
								22672,
								22743
							],
							[
								22839,
								22890
							],
							[
								23062,
								23109
							],
							[
								23232,
								23289
							],
							[
								23383,
								23389
							],
							[
								23403,
								23409
							],
							[
								23713,
								23747
							],
							[
								24054,
								24109
							],
							[
								24385,
								24429
							],
							[
								24596,
								24630
							],
							[
								24696,
								24732
							],
							[
								24807,
								24824
							],
							[
								24968,
								25013
							],
							[
								25147,
								25160
							],
							[
								25258,
								25271
							],
							[
								25353,
								25390
							],
							[
								25391,
								25405
							],
							[
								25411,
								25415
							],
							[
								25511,
								25531
							],
							[
								25584,
								25607
							],
							[
								25687,
								25707
							],
							[
								25789,
								25807
							],
							[
								25950,
								25968
							],
							[
								26041,
								26073
							],
							[
								26101,
								26127
							],
							[
								26445,
								26477
							],
							[
								26510,
								26526
							],
							[
								26541,
								26548
							],
							[
								26574,
								26590
							],
							[
								26629,
								26650
							],
							[
								26690,
								26703
							],
							[
								26754,
								26775
							],
							[
								26944,
								26972
							],
							[
								27191,
								27208
							],
							[
								27209,
								27218
							],
							[
								27270,
								27287
							],
							[
								27288,
								27297
							],
							[
								27357,
								27374
							],
							[
								27375,
								27398
							],
							[
								27454,
								27478
							],
							[
								30105,
								30133
							],
							[
								30564,
								30568
							],
							[
								30696,
								30709
							],
							[
								31025,
								31037
							],
							[
								31300,
								31313
							],
							[
								31418,
								31432
							],
							[
								32325,
								32353
							],
							[
								32469,
								32482
							],
							[
								32594,
								32618
							],
							[
								32711,
								32745
							],
							[
								32866,
								32905
							],
							[
								32952,
								32989
							],
							[
								33036,
								33063
							],
							[
								33074,
								33090
							],
							[
								33148,
								33170
							],
							[
								33203,
								33213
							],
							[
								33262,
								33274
							],
							[
								33556,
								33566
							],
							[
								33641,
								33653
							],
							[
								33931,
								33957
							],
							[
								34147,
								34195
							],
							[
								34243,
								34355
							],
							[
								34460,
								34483
							],
							[
								34622,
								34654
							],
							[
								34967,
								35021
							],
							[
								35379,
								35431
							],
							[
								35525,
								35541
							],
							[
								35625,
								35636
							],
							[
								35749,
								35753
							],
							[
								36032,
								36065
							],
							[
								36179,
								36231
							],
							[
								36405,
								36487
							],
							[
								36647,
								36657
							],
							[
								36675,
								36688
							],
							[
								36865,
								36909
							],
							[
								37172,
								37208
							],
							[
								37365,
								37381
							],
							[
								37399,
								37421
							],
							[
								37534,
								37540
							],
							[
								37644,
								37657
							],
							[
								39296,
								39334
							],
							[
								39434,
								39450
							],
							[
								39523,
								39567
							],
							[
								39926,
								39968
							],
							[
								40163,
								40194
							],
							[
								40244,
								40286
							],
							[
								40406,
								40430
							],
							[
								40650,
								40660
							],
							[
								40713,
								40717
							],
							[
								40756,
								40787
							],
							[
								40798,
								40815
							],
							[
								40956,
								40990
							],
							[
								41228,
								41247
							],
							[
								41285,
								41307
							],
							[
								41419,
								41441
							],
							[
								41553,
								41588
							],
							[
								41636,
								41663
							],
							[
								41754,
								41792
							],
							[
								42001,
								42049
							],
							[
								42629,
								42658
							],
							[
								43105,
								43145
							],
							[
								43240,
								43267
							],
							[
								43324,
								43351
							],
							[
								43554,
								43568
							],
							[
								43617,
								43623
							],
							[
								43664,
								43730
							],
							[
								43732,
								43736
							],
							[
								43894,
								43901
							],
							[
								43993,
								44003
							],
							[
								44114,
								44123
							],
							[
								44229,
								44255
							],
							[
								44388,
								44419
							],
							[
								44594,
								44613
							],
							[
								44655,
								44663
							],
							[
								44692,
								44726
							],
							[
								44870,
								44915
							],
							[
								44991,
								45001
							],
							[
								45052,
								45062
							],
							[
								45088,
								45098
							],
							[
								45126,
								45151
							],
							[
								45282,
								45307
							],
							[
								45405,
								45440
							],
							[
								45493,
								45527
							],
							[
								45609,
								45645
							],
							[
								45766,
								45770
							],
							[
								45797,
								45801
							],
							[
								45840,
								45844
							],
							[
								45872,
								45876
							],
							[
								45905,
								45933
							],
							[
								46063,
								46067
							],
							[
								46124,
								46155
							],
							[
								46494,
								46530
							],
							[
								46779,
								46809
							],
							[
								46945,
								46949
							],
							[
								47233,
								47260
							],
							[
								47304,
								47313
							],
							[
								47365,
								47377
							],
							[
								47519,
								47531
							],
							[
								47658,
								47683
							],
							[
								47723,
								47749
							],
							[
								48001,
								48025
							],
							[
								48218,
								48241
							],
							[
								48342,
								48382
							],
							[
								48531,
								48535
							],
							[
								48568,
								48576
							],
							[
								48605,
								48609
							],
							[
								48946,
								48959
							],
							[
								49012,
								49032
							],
							[
								49245,
								49411
							],
							[
								49420,
								49477
							],
							[
								49484,
								49525
							],
							[
								49774,
								49794
							],
							[
								49996,
								50011
							],
							[
								50297,
								50320
							],
							[
								50525,
								50543
							],
							[
								50756,
								50770
							],
							[
								50831,
								50843
							],
							[
								50941,
								50950
							],
							[
								51226,
								51242
							],
							[
								51677,
								51713
							],
							[
								51808,
								51817
							],
							[
								51993,
								52004
							],
							[
								52015,
								52023
							],
							[
								52072,
								52084
							],
							[
								52329,
								52341
							],
							[
								52522,
								52548
							],
							[
								52567,
								52571
							],
							[
								52658,
								52682
							],
							[
								52760,
								52789
							],
							[
								52843,
								52874
							],
							[
								52881,
								52884
							],
							[
								52928,
								52941
							],
							[
								53041,
								53096
							],
							[
								53122,
								53148
							],
							[
								53323,
								53350
							],
							[
								53439,
								53472
							],
							[
								53492,
								53508
							],
							[
								53615,
								53633
							],
							[
								53839,
								53890
							],
							[
								54260,
								54324
							],
							[
								54384,
								54399
							],
							[
								54465,
								54479
							],
							[
								54517,
								54540
							],
							[
								54732,
								54750
							],
							[
								54941,
								55011
							],
							[
								55160,
								55184
							],
							[
								55203,
								55211
							],
							[
								55247,
								55262
							],
							[
								55388,
								55401
							],
							[
								55556,
								55572
							],
							[
								55767,
								55793
							],
							[
								55808,
								55830
							],
							[
								56046,
								56050
							],
							[
								56236,
								56258
							],
							[
								56280,
								56290
							],
							[
								56308,
								56321
							],
							[
								56445,
								56467
							],
							[
								56489,
								56499
							],
							[
								56517,
								56530
							],
							[
								56636,
								56658
							],
							[
								56684,
								56694
							],
							[
								56712,
								56725
							],
							[
								56761,
								56783
							],
							[
								56804,
								56814
							],
							[
								56832,
								56845
							],
							[
								56865,
								56906
							],
							[
								57195,
								57218
							],
							[
								57299,
								57321
							],
							[
								57395,
								57415
							],
							[
								57542,
								57553
							],
							[
								57586,
								57603
							],
							[
								57767,
								57786
							],
							[
								57821,
								57843
							],
							[
								57975,
								57996
							],
							[
								58134,
								58154
							],
							[
								58221,
								58244
							],
							[
								58320,
								58342
							],
							[
								58451,
								58475
							],
							[
								58532,
								58544
							],
							[
								58715,
								58733
							],
							[
								58790,
								58802
							],
							[
								58954,
								58977
							],
							[
								59109,
								59125
							],
							[
								59172,
								59185
							],
							[
								59222,
								59289
							],
							[
								59325,
								59347
							],
							[
								59376,
								59386
							],
							[
								59402,
								59415
							],
							[
								59466,
								59479
							],
							[
								59546,
								59569
							],
							[
								59688,
								59710
							],
							[
								59798,
								59811
							],
							[
								59864,
								59880
							],
							[
								59918,
								59922
							],
							[
								60032,
								60069
							],
							[
								60080,
								60090
							],
							[
								60099,
								60128
							],
							[
								60345,
								60361
							],
							[
								60383,
								60394
							],
							[
								60449,
								60476
							],
							[
								60523,
								60541
							],
							[
								60615,
								60650
							],
							[
								60776,
								60797
							],
							[
								60831,
								60840
							],
							[
								60849,
								60857
							],
							[
								60900,
								60909
							],
							[
								60930,
								60939
							],
							[
								60950,
								60958
							],
							[
								61025,
								61034
							],
							[
								61066,
								61094
							],
							[
								61163,
								61182
							],
							[
								61389,
								61415
							],
							[
								61703,
								61725
							],
							[
								61870,
								61892
							],
							[
								62404,
								62454
							],
							[
								62618,
								62667
							],
							[
								62736,
								62743
							],
							[
								62832,
								62846
							],
							[
								62931,
								62941
							],
							[
								63047,
								63051
							],
							[
								63082,
								63102
							],
							[
								63158,
								63171
							],
							[
								63231,
								63243
							],
							[
								63383,
								63398
							],
							[
								63809,
								63847
							],
							[
								64029,
								64040
							],
							[
								64075,
								64096
							],
							[
								64165,
								64172
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(obj, ...optional)",
							" (...v) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							" (...v) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function define(obj, ...args)",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(handler = key => null)",
							"get(target, key, receiver)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							"handler = key =>",
							"function (...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>"
						]
					},
					"AQAAAAAAAAAAAAAAUSMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					319,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					320,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								465,
								477
							],
							[
								521,
								536
							],
							[
								575,
								585
							],
							[
								627,
								639
							],
							[
								679,
								689
							],
							[
								731,
								743
							],
							[
								789,
								805
							],
							[
								1182,
								1188
							],
							[
								1636,
								1655
							],
							[
								1683,
								1697
							],
							[
								1809,
								1823
							],
							[
								2132,
								2144
							],
							[
								2208,
								2224
							],
							[
								2321,
								2354
							],
							[
								2833,
								2853
							],
							[
								2934,
								2953
							],
							[
								3085,
								3109
							],
							[
								3251,
								3269
							],
							[
								3616,
								3632
							],
							[
								4387,
								4401
							],
							[
								4778,
								4795
							],
							[
								5844,
								5865
							],
							[
								6722,
								6735
							],
							[
								7446,
								7468
							],
							[
								8176,
								8201
							],
							[
								8962,
								8976
							],
							[
								9817,
								9842
							],
							[
								11878,
								11892
							],
							[
								12984,
								13000
							],
							[
								14070,
								14099
							],
							[
								14338,
								14354
							],
							[
								15236,
								15252
							],
							[
								16355,
								16380
							],
							[
								17374,
								17388
							],
							[
								18557,
								18572
							],
							[
								19000,
								19015
							],
							[
								19537,
								19552
							],
							[
								20201,
								20221
							],
							[
								20576,
								20588
							],
							[
								21726,
								21741
							],
							[
								22681,
								22694
							],
							[
								23288,
								23301
							],
							[
								23738,
								23756
							],
							[
								24617,
								24629
							],
							[
								25035,
								25047
							],
							[
								25462,
								25477
							],
							[
								26550,
								26566
							],
							[
								26625,
								26647
							],
							[
								26827,
								26856
							],
							[
								27163,
								27186
							],
							[
								28709,
								28729
							],
							[
								29067,
								29086
							],
							[
								29305,
								29317
							],
							[
								31443,
								31460
							],
							[
								32058,
								32076
							],
							[
								32606,
								32624
							],
							[
								33836,
								33856
							],
							[
								34317,
								34338
							],
							[
								34812,
								34827
							],
							[
								35320,
								35340
							],
							[
								35799,
								35811
							],
							[
								36578,
								36593
							],
							[
								38166,
								38178
							],
							[
								39166,
								39182
							],
							[
								43229,
								43242
							],
							[
								44288,
								44302
							],
							[
								47705,
								47719
							],
							[
								48458,
								48479
							],
							[
								49172,
								49188
							],
							[
								49578,
								49591
							],
							[
								51692,
								51705
							],
							[
								52683,
								52693
							],
							[
								54971,
								54984
							],
							[
								57511,
								57525
							],
							[
								57821,
								57833
							],
							[
								57984,
								57997
							],
							[
								58150,
								58164
							],
							[
								58335,
								58348
							],
							[
								58410,
								58432
							],
							[
								58644,
								58658
							],
							[
								59036,
								59048
							],
							[
								59434,
								59448
							],
							[
								59731,
								59745
							],
							[
								60049,
								60062
							],
							[
								72515,
								72527
							],
							[
								72943,
								72957
							],
							[
								72987,
								73001
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉGLOB_MAGCHAR‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉGLOB_ALTDIRFUNC‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉGLOB_BRACE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉGLOB_NOMAGIC‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉGLOB_TILDE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉGLOB_ONLYDIR‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉGLOB_TILDE_CHECK‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_pointer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getrelease‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_strcmp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_duparraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concat‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tempnam‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_mkstemp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_glob_errfunc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_glob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_wordexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_ioctl‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_screensize‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚í∏‚Äì‚ÄÉImmutableClosure‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_immutable_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_immutable_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_immutable_class‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_type‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitop‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_unescape_pred‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_unescape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_watch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_daemon‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fork‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_vfork‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_setsid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉJSAtExitEntry‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atexit_handler‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atexit‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_link‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_unlink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_access‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fcntl‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAIA4AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					321,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABQEQAAICDik4IgIEdMT0JfTUFHQ0hBUiDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgR0xPQl9BTFRESVJGVU5DIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBHTE9CX0JSQUNFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBHTE9CX05PTUFHSUMg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEdMT0JfVElMREUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEdMT0JfT05MWURJUiDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgR0xPQl9USUxERV9DSEVDSyDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKSoSAgbWVtbWVtICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrjigJMgcGNnX3N0YXRlX3NldHNlcV82NCB7IOKApiB9IDsg4oCUIHR5cGUKICDik4kgIHBjZzMyX3JhbmRvbV90IDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHBjZzMyX3JhbmRvbV9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGNnMzJfaW5pdF9zdGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbV9ib3VuZGVkX2RpdmlzaW9ubGVzcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3BvaW50ZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3RyaW5nX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cmVsZWFzZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3N0cmNtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZHVwYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Jlc2l6ZWFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb25jYXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3NlYXJjaGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19tZW1jcHkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZtZW1vcGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXRwZXJmb3JtYW5jZWNvdW50ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cHJvdG90eXBlY2hhaW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdGVtcG5hbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWtzdGVtcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZm5tYXRjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2xvYl9lcnJmdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nbG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193b3JkZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaW9jdGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3NjcmVlbnNpemUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2F0b2IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbXBpbGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSuOKAkyBJbW11dGFibGVDbG9zdXJlIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrvigJMganNfbWlzY19pbW11dGFibGVfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaW1tdXRhYmxlX2NvbnN0cnVjdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbW11dGFibGVfY2xhc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3dyaXRlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3ZhbHVldHlwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXZhbHN0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX2FycmF5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19vcGNvZGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXRfYnl0ZWNvZGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3R5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRvcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19lc2NhcGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuZXNjYXBlX3ByZWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193YXRjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZGFlbW9uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mb3JrICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192Zm9yayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfc2V0c2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTiSAgSlNBdEV4aXRFbnRyeSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBqc19taXNjX2F0ZXhpdF9oYW5kbGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdGV4aXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2xpbmsgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VubGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYWNjZXNzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mY250bCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					322,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					323,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					324,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					325,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					326,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					327,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					328,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					329,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					330,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					331,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "svg-crop-pad.js",
			"settings":
			{
				"buffer_size": 15901,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEk4AAAAAAAASjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASTgAAAAAAABJOAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " unit:"
					},
					"BgAAAEo4AAAAAAAASzgAAAAAAAAAAAAASzgAAAAAAABMOAAAAAAAAAAAAABMOAAAAAAAAE04AAAAAAAAAAAAAE04AAAAAAAATjgAAAAAAAAAAAAATjgAAAAAAABPOAAAAAAAAAAAAABPOAAAAAAAAFA4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASjgAAAAAAABKOAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFA4AAAAAAAAUTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUDgAAAAAAABQOAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAFE4AAAAAAAAUzgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUTgAAAAAAABROAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "mm"
					},
					"AgAAAFI4AAAAAAAAUzgAAAAAAAAAAAAAUzgAAAAAAABUOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUjgAAAAAAABSOAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					2,
					"left_delete",
					null,
					"AgAAABM4AAAAAAAAEzgAAAAAAAABAAAAbRI4AAAAAAAAEjgAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAFDgAAAAAAAAUOAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAAA04AAAAAAAADTgAAAAAAAABAAAAbQw4AAAAAAAADDgAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAADjgAAAAAAAAOOAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEI4AAAAAAAAQzgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQjgAAAAAAABCOAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEQ4AAAAAAAARTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARDgAAAAAAABEOAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "eagle2svg.js",
			"settings":
			{
				"buffer_size": 2439,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"cut",
					null,
					"AQAAAAQGAAAAAAAABAYAAAAAAAA1AAAAICBjb25zb2xlLmxvZygncmVuZGVyZXIucGFsZXR0ZScsIHJlbmRlcmVyLnBhbGV0dGUpOwo",
					"AQAAAAAAAAABAAAABAYAAAAAAAA5BgAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAAQGAAAAAAAAOQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAYAAAAAAAAEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAFcGAAAAAAAAjAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwYAAAAAAABXBgAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "str"
					},
					"BAAAAGYGAAAAAAAAZwYAAAAAAAAAAAAAZwYAAAAAAABnBgAAAAAAABAAAAByZW5kZXJlci5wYWxldHRlZwYAAAAAAABoBgAAAAAAAAAAAABoBgAAAAAAAGkGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgYAAAAAAAB2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "str"
					},
					"BAAAAHUGAAAAAAAAdgYAAAAAAAAAAAAAdgYAAAAAAAB2BgAAAAAAAAcAAABwYWxldHRldgYAAAAAAAB3BgAAAAAAAAAAAAB3BgAAAAAAAHgGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQYAAAAAAAB8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					2,
					"right_delete",
					null,
					"AgAAAGwGAAAAAAAAbAYAAAAAAAAIAAAAcmVuZGVyZXJsBgAAAAAAAGwGAAAAAAAAAQAAAC4",
					"AQAAAAAAAAABAAAAbAYAAAAAAAB0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AgAAAGwGAAAAAAAAbAYAAAAAAAADAAAAc3RybAYAAAAAAABxBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAYAAAAAAABvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "√üvg,m"
					},
					"BgAAAG0GAAAAAAAAbgYAAAAAAAAAAAAAbgYAAAAAAABuBgAAAAAAAAMAAABzdHJuBgAAAAAAAG8GAAAAAAAAAAAAAG8GAAAAAAAAcAYAAAAAAAAAAAAAcAYAAAAAAABxBgAAAAAAAAAAAABxBgAAAAAAAHIGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQYAAAAAAABwBgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					5,
					"left_delete",
					null,
					"BQAAAHEGAAAAAAAAcQYAAAAAAAABAAAAbXAGAAAAAAAAcAYAAAAAAAABAAAALG8GAAAAAAAAbwYAAAAAAAABAAAAZ24GAAAAAAAAbgYAAAAAAAABAAAAdm0GAAAAAAAAbQYAAAAAAAACAAAAw58",
					"AQAAAAAAAAABAAAAcgYAAAAAAAByBgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "svg,str"
					},
					"BwAAAG0GAAAAAAAAbgYAAAAAAAAAAAAAbgYAAAAAAABvBgAAAAAAAAAAAABvBgAAAAAAAHAGAAAAAAAAAAAAAHAGAAAAAAAAcQYAAAAAAAAAAAAAcQYAAAAAAAByBgAAAAAAAAAAAAByBgAAAAAAAHMGAAAAAAAAAAAAAHMGAAAAAAAAdAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQYAAAAAAABtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					3,
					"left_delete",
					null,
					"AwAAAGgGAAAAAAAAaAYAAAAAAAABAAAAcmcGAAAAAAAAZwYAAAAAAAABAAAAdGYGAAAAAAAAZgYAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAaQYAAAAAAABpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "render"
					},
					"BgAAAGYGAAAAAAAAZwYAAAAAAAAAAAAAZwYAAAAAAABoBgAAAAAAAAAAAABoBgAAAAAAAGkGAAAAAAAAAAAAAGkGAAAAAAAAagYAAAAAAAAAAAAAagYAAAAAAABrBgAAAAAAAAAAAABrBgAAAAAAAGwGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgYAAAAAAABmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAADkIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA6CAAAAAAAAAIAAAAxMA",
					"AQAAAAAAAAABAAAAOQgAAAAAAAA7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAiCgAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgKiBhcyBkZWVwIGZyb20gJy4vbGliL2RlZXAuanMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCB7IGxvZywgRWFnbGVEb2N1bWVudCwgUmVuZGVyZXIsIEVhZ2xlUHJvamVjdCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZSc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgcmVhZCBhcyBmcm9tWE1MLCB3cml0ZSBhcyB0b1hNTCB9IGZyb20gJy4vbGliL3htbC5qcyc7CmltcG9ydCB7IFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCB7IGdldE9wdCB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IFJlYWN0Q29tcG9uZW50LCByZW5kZXIgfSBmcm9tICcuL2xpYi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vbGliL3ByZWFjdC1yZW5kZXItdG8tc3RyaW5nLmpzJzsKaW1wb3J0IHsgUkdCQSwgaXNSR0JBLCBJbW11dGFibGVSR0JBLCBkZWZhdWx0IGFzIHJnYmEgfSBmcm9tICcuL2xpYi9jb2xvci9yZ2JhLmpzJzsKCmxldCBkZWJ1Z0ZsYWcgPSBmYWxzZTsKCmZ1bmN0aW9uIHJlbmRlcihkb2MsIGZpbGVuYW1lKSB7CiAgaWYoZG9jIGluc3RhbmNlb2YgRWFnbGVQcm9qZWN0KSB7CiAgICByZW5kZXIoZG9jLnNjaGVtYXRpYyk7CiAgICByZW5kZXIoZG9jLmJvYXJkKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGRvYywgUmVhY3RDb21wb25lbnQuYXBwZW5kLCBkZWJ1Z0ZsYWcpOwoKICAvKiByZW5kZXJlci5zZXRQYWxldHRlKFsKICAgIFsweGZmLCAweGZmLCAweGZmXSwKICAgIFsweDRiLCAweDRiLCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweGE1LCAweDRiLCAweGE1XSwKICAgIFsweGE1LCAweGE1LCAweDRiXSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweDRiLCAweGZmXSwKICAgIFsweDRiLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweGZmLCAweGZmXSwKICAgIFsweGZmLCAweDRiLCAweDRiXSwKICAgIFsweGZmLCAweDRiLCAweGZmXSwKICAgIFsweGZmLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweDRiLCAweDRiXSwKICAgIFsweGE1LCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXQogIF0ubWFwKChbcixnLGJdKSA9PiBuZXcgUkdCQShyLGcsYikpKTsqLwoKICBsZXQgc3RyOwogIGxldCBzdmcgPSByZW5kZXJlci5yZW5kZXIoZG9jKTsKICB0cnkgewogICAgc3RyID0gcmVuZGVyVG9TdHJpbmcoc3ZnKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlKTsKICAgIGNvbnNvbGUubG9nKCdTVEFDSzonLCBlLnN0YWNrKTsKICB9CiAgY29uc29sZS5sb2coJ3JlbmRlcmVyLnBhbGV0dGUnLCByZW5kZXJlci5wYWxldHRlKTsKICAvL2NvbnNvbGUubG9nKCdzdHInLCBzdHIpOwoKICBjb25zb2xlLmxvZygncmVuZGVyJywge3N2ZyxzdHJ9KTsKICBsZXQgeG1sID0gZnJvbVhNTChzdHIpOwoKICBmaWxlbmFtZSA/Pz0gcGF0aC5iYXNlbmFtZShkb2MuZmlsZW5hbWUsICcuJyArIGRvYy50eXBlKSArICctJyArIHsgc2NoOiAnc2NoZW1hdGljJywgYnJkOiAnYm9hcmQnLCBsYnI6ICdsaWJyYXJ5JyB9W2RvYy50eXBlXSArICcuc3ZnJzsKCiAgaWYoZmlsZW5hbWUpIHsKICAgIGxldCByZXQ7CiAgICByZXQgPSBXcml0ZUZpbGUoZmlsZW5hbWUsIChzdHIgPSB0b1hNTCh4bWwpKSk7CiAgICBjb25zb2xlLmxvZyhgU2F2aW5nIHRvICcke2ZpbGVuYW1lfScuLi5gLCByZXQpOwogIH0KICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBtYXhBcnJheUxlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiAyLCBjb21wYWN0OiAxLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0KICB9KTsKICBjb25zb2xlLmxvZygnYXJncycsIGFyZ3MpOwoKICBsZXQgcGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICBkZWJ1ZzogW2ZhbHNlLCB2YWx1ZSA9PiAoZGVidWdGbGFnID0gdmFsdWUpLCAneCddLAogICAgICAnb3V0cHV0LWRpcic6IFt0cnVlLCBudWxsLCAnZCddLAogICAgICAnQCc6ICdpbnB1dCcKICAgIH0sCiAgICBhcmdzCiAgKTsKICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICBsZXQgZG9jID0gRWFnbGVEb2N1bWVudC5vcGVuKGFyZywgeyByZWFkRmlsZVN5bmMgfSk7CgogICAgY29uc29sZS5sb2coJ2RvYycsIGRvYyk7CgogICAgcmVuZGVyKGRvYyk7CiAgfQp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKfQoAAAAAAAAAADUKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gkAAAAAAADnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAFgIAAAAAAAAWQgAAAAAAAAAAAAAWQgAAAAAAABZCAAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAAWAgAAAAAAABZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFgGAAAAAAAAWQYAAAAAAAAAAAAAWQYAAAAAAABaBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAYAAAAAAABYBgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAEGAAAAAAAAAgYAAAAAAAAAAAAAAgYAAAAAAAACBgAAAAAAAH8AAAAgfQogIGNvbnNvbGUubG9nKCdyZW5kZXJlci5wYWxldHRlJywgcmVuZGVyZXIucGFsZXR0ZSk7CiAgLy9jb25zb2xlLmxvZygnc3RyJywgc3RyKTsKCiAvLyBjb25zb2xlLmxvZygncmVuZGVyJywgeyBzdmcsIHN0ciB9KTsK",
					"AQAAAAAAAAABAAAAAQYAAAAAAACABgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAAIGAAAAAAAAAwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgYAAAAAAAACBgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAMGAAAAAAAABAYAAAAAAAAAAAAABAYAAAAAAAAGBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwYAAAAAAAADBgAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAP8HAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAAB0AAAAgIGNvbnNvbGUubG9nKCdhcmdzJywgYXJncyk7Cg",
					"AQAAAAAAAAABAAAA/wcAAAAAAAAcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPgIAAAAAAAA+QgAAAAAAAAAAAAA+QgAAAAAAAD5CAAAAAAAAB4AAAAKICAgIGNvbnNvbGUubG9nKCdkb2MnLCBkb2MpOwo",
					"AQAAAAAAAAABAAAA+AgAAAAAAAAWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKUIAAAAAAAApggAAAAAAAAAAAAApggAAAAAAACoCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQgAAAAAAAClCAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/src/qjsm.c",
			"settings":
			{
				"buffer_size": 46181,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/eagle/svgRenderer.js",
			"settings":
			{
				"buffer_size": 11951,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOsIAAAAAAAA7AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wgAAAAAAADrCAAAAAAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKYIAAAAAAAApwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApggAAAAAAACmCAAAAAAAAAAAAAAAAAAA"
				],
				[
					17,
					3,
					"right_delete",
					null,
					"AwAAAK4IAAAAAAAArggAAAAAAAABAAAAIK4IAAAAAAAArggAAAAAAAABAAAAL64IAAAAAAAArggAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAArggAAAAAAACuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					9,
					"left_delete",
					null,
					"CQAAAOQIAAAAAAAA5AgAAAAAAAABAAAAIOMIAAAAAAAA4wgAAAAAAAABAAAAL+IIAAAAAAAA4ggAAAAAAAABAAAAKuEIAAAAAAAA4QgAAAAAAAABAAAAZuAIAAAAAAAA4AgAAAAAAAABAAAAZd8IAAAAAAAA3wgAAAAAAAABAAAAct4IAAAAAAAA3ggAAAAAAAABAAAALN0IAAAAAAAA3QgAAAAAAAABAAAAKtwIAAAAAAAA3AgAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA5QgAAAAAAADlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN0IAAAAAAAA3ggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QgAAAAAAADdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " path.pa"
					},
					"CAAAAN4IAAAAAAAA3wgAAAAAAAAAAAAA3wgAAAAAAADgCAAAAAAAAAAAAADgCAAAAAAAAOEIAAAAAAAAAAAAAOEIAAAAAAAA4ggAAAAAAAAAAAAA4ggAAAAAAADjCAAAAAAAAAAAAADjCAAAAAAAAOQIAAAAAAAAAAAAAOQIAAAAAAAA5QgAAAAAAAAAAAAA5QgAAAAAAADmCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3ggAAAAAAADeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					2,
					"left_delete",
					null,
					"AgAAAOUIAAAAAAAA5QgAAAAAAAABAAAAYeQIAAAAAAAA5AgAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAA5ggAAAAAAADmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "apply"
					},
					"BQAAAOQIAAAAAAAA5QgAAAAAAAAAAAAA5QgAAAAAAADmCAAAAAAAAAAAAADmCAAAAAAAAOcIAAAAAAAAAAAAAOcIAAAAAAAA6AgAAAAAAAAAAAAA6AgAAAAAAADpCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AgAAAAAAADkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAOkIAAAAAAAA6ggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QgAAAAAAADpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOoIAAAAAAAA6wgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6ggAAAAAAADqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAAOoIAAAAAAAA6ggAAAAAAAABAAAAIOkIAAAAAAAA6QgAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA6wgAAAAAAADrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOkIAAAAAAAA6ggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QgAAAAAAADpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " util:"
					},
					"BgAAAOoIAAAAAAAA6wgAAAAAAAAAAAAA6wgAAAAAAADsCAAAAAAAAAAAAADsCAAAAAAAAO0IAAAAAAAAAAAAAO0IAAAAAAAA7ggAAAAAAAAAAAAA7ggAAAAAAADvCAAAAAAAAAAAAADvCAAAAAAAAPAIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6ggAAAAAAADqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAAO8IAAAAAAAA7wgAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAA8AgAAAAAAADwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": ".getMethodNames"
					},
					"DwAAAO8IAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAADxCAAAAAAAAAAAAADxCAAAAAAAAPIIAAAAAAAAAAAAAPIIAAAAAAAA8wgAAAAAAAAAAAAA8wgAAAAAAAD0CAAAAAAAAAAAAAD0CAAAAAAAAPUIAAAAAAAAAAAAAPUIAAAAAAAA9ggAAAAAAAAAAAAA9ggAAAAAAAD3CAAAAAAAAAAAAAD3CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA+QgAAAAAAAAAAAAA+QgAAAAAAAD6CAAAAAAAAAAAAAD6CAAAAAAAAPsIAAAAAAAAAAAAAPsIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAD9CAAAAAAAAAAAAAD9CAAAAAAAAP4IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wgAAAAAAADvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP4IAAAAAAAAAAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/ggAAAAAAAD+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "path"
					},
					"BAAAAP8IAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAABCQAAAAAAAAAAAAABCQAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wgAAAAAAAD/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAMJAAAAAAAABAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwkAAAAAAAADCQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " 2,0"
					},
					"BAAAAAQJAAAAAAAABQkAAAAAAAAAAAAABQkAAAAAAAAGCQAAAAAAAAAAAAAGCQAAAAAAAAcJAAAAAAAAAAAAAAcJAAAAAAAACAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAkAAAAAAAAECQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAAUJAAAAAAAABQkAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAABgkAAAAAAAAGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAAUJAAAAAAAABgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQkAAAAAAAAFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAAAUJAAAAAAAABQkAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAABgkAAAAAAAAGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAAUJAAAAAAAABgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQkAAAAAAAAFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "deref"
					},
					"BgAAADIJAAAAAAAAMwkAAAAAAAAAAAAAMwkAAAAAAAAzCQAAAAAAAAUAAABhcHBseTMJAAAAAAAANAkAAAAAAAAAAAAANAkAAAAAAAA1CQAAAAAAAAAAAAA1CQAAAAAAADYJAAAAAAAAAAAAADYJAAAAAAAANwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgkAAAAAAAA3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAK4IAAAAAAAArwgAAAAAAAAAAAAArwgAAAAAAACwCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArggAAAAAAACuCAAAAAAAAAAAAAAAgEhA"
				],
				[
					82,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJcJAAAAAAAAmAkAAAAAAAAAAAAAmAkAAAAAAACgCQAAAAAAAAAAAACgCQAAAAAAAKEJAAAAAAAAAAAAAKEJAAAAAAAAqQkAAAAAAAAAAAAAmAkAAAAAAACYCQAAAAAAAAgAAAAgICAgICAgIJgJAAAAAAAAogkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwkAAAAAAACXCQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAAKIJAAAAAAAA2wkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"paste",
					null,
					"AgAAALEJAAAAAAAAyQkAAAAAAAAAAAAAyQkAAAAAAADJCQAAAAAAAAQAAABGQUlM",
					"AQAAAAAAAAABAAAAsQkAAAAAAAC1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					6,
					"left_delete",
					null,
					"BgAAAMgJAAAAAAAAyAkAAAAAAAABAAAAJ8cJAAAAAAAAxwkAAAAAAAABAAAAZcYJAAAAAAAAxgkAAAAAAAABAAAAdMUJAAAAAAAAxQkAAAAAAAABAAAAYcQJAAAAAAAAxAkAAAAAAAABAAAAZcMJAAAAAAAAwwkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAyQkAAAAAAADJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "onstructor"
					},
					"CgAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADFCQAAAAAAAAAAAADFCQAAAAAAAMYJAAAAAAAAAAAAAMYJAAAAAAAAxwkAAAAAAAAAAAAAxwkAAAAAAADICQAAAAAAAAAAAADICQAAAAAAAMkJAAAAAAAAAAAAAMkJAAAAAAAAygkAAAAAAAAAAAAAygkAAAAAAADLCQAAAAAAAAAAAADLCQAAAAAAAMwJAAAAAAAAAAAAAMwJAAAAAAAAzQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwkAAAAAAADDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " ERROR:"
					},
					"BwAAAM0JAAAAAAAAzgkAAAAAAAAAAAAAzgkAAAAAAADPCQAAAAAAAAAAAADPCQAAAAAAANAJAAAAAAAAAAAAANAJAAAAAAAA0QkAAAAAAAAAAAAA0QkAAAAAAADSCQAAAAAAAAAAAADSCQAAAAAAANMJAAAAAAAAAAAAANMJAAAAAAAA1AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQkAAAAAAADNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"right_delete",
					null,
					"AQAAANQJAAAAAAAA1AkAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAA1AkAAAAAAADUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"left_delete",
					null,
					"AQAAAPgJAAAAAAAA+AkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA+QkAAAAAAAD5CQAAAAAAAAAAAAAAQHpA"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAkAAAAAAACUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					2,
					"left_delete",
					null,
					"AgAAAJUJAAAAAAAAlQkAAAAAAAABAAAAcpQJAAAAAAAAlAkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAlgkAAAAAAACWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "rror"
					},
					"BAAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAACWCQAAAAAAAJcJAAAAAAAAAAAAAJcJAAAAAAAAmAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAkAAAAAAACUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": " patrh"
					},
					"BgAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADEJAAAAAAAAAAAAADEJAAAAAAAAMgkAAAAAAAAAAAAAMgkAAAAAAAAzCQAAAAAAAAAAAAAzCQAAAAAAADQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgkAAAAAAAAuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					2,
					"left_delete",
					null,
					"AgAAADMJAAAAAAAAMwkAAAAAAAABAAAAaDIJAAAAAAAAMgkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAANAkAAAAAAAA0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "h.reduce"
					},
					"CAAAADIJAAAAAAAAMwkAAAAAAAAAAAAAMwkAAAAAAAA0CQAAAAAAAAAAAAA0CQAAAAAAADUJAAAAAAAAAAAAADUJAAAAAAAANgkAAAAAAAAAAAAANgkAAAAAAAA3CQAAAAAAAAAAAAA3CQAAAAAAADgJAAAAAAAAAAAAADgJAAAAAAAAOQkAAAAAAAAAAAAAOQkAAAAAAAA6CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgkAAAAAAAAyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAADoJAAAAAAAAPAkAAAAAAAAAAAAAOwkAAAAAAAA9CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgkAAAAAAAA6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "acc,p"
					},
					"BQAAADwJAAAAAAAAPQkAAAAAAAAAAAAAPQkAAAAAAAA+CQAAAAAAAAAAAAA+CQAAAAAAAD8JAAAAAAAAAAAAAD8JAAAAAAAAQAkAAAAAAAAAAAAAQAkAAAAAAABBCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAkAAAAAAAA8CQAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAEIJAAAAAAAAQwkAAAAAAAAAAAAAQwkAAAAAAABECQAAAAAAAAAAAABECQAAAAAAAEUJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgkAAAAAAABCCQAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABHCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQkAAAAAAABFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "acc"
					},
					"AwAAAEcJAAAAAAAASAkAAAAAAAAAAAAASAkAAAAAAABJCQAAAAAAAAAAAABJCQAAAAAAAEoJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwkAAAAAAABHCQAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEoJAAAAAAAATAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgkAAAAAAABKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "op"
					},
					"AgAAAEsJAAAAAAAATAkAAAAAAAAAAAAATAkAAAAAAABNCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwkAAAAAAABLCQAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					2,
					"left_delete",
					null,
					"AgAAAEwJAAAAAAAATAkAAAAAAAABAAAAcEsJAAAAAAAASwkAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAATQkAAAAAAABNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAEsJAAAAAAAATAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwkAAAAAAABLCQAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE0JAAAAAAAATgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQkAAAAAAABNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " doc"
					},
					"BAAAAE4JAAAAAAAATwkAAAAAAAAAAAAATwkAAAAAAABQCQAAAAAAAAAAAABQCQAAAAAAAFEJAAAAAAAAAAAAAFEJAAAAAAAAUgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgkAAAAAAABOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFMJAAAAAAAAVAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwkAAAAAAABTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " &//"
					},
					"BAAAAFQJAAAAAAAAVQkAAAAAAAAAAAAAVQkAAAAAAABWCQAAAAAAAAAAAABWCQAAAAAAAFcJAAAAAAAAAAAAAFcJAAAAAAAAWAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAkAAAAAAABUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					3,
					"left_delete",
					null,
					"AwAAAFcJAAAAAAAAVwkAAAAAAAABAAAAL1YJAAAAAAAAVgkAAAAAAAABAAAAL1UJAAAAAAAAVQkAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAWAkAAAAAAABYCQAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFUJAAAAAAAAVgkAAAAAAAAAAAAAVgkAAAAAAABXCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQkAAAAAAABVCQAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAAC8JAAAAAAAAMAkAAAAAAAAAAAAAMAkAAAAAAAAxCQAAAAAAAAAAAAAxCQAAAAAAADIJAAAAAAAAAAAAADIJAAAAAAAAMwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwkAAAAAAAAvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAADcJAAAAAAAAOAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwkAAAAAAAA3CQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 64701,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					227,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAvfwAAAAAAAC9/AAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/quickjs-misc.c",
			"settings":
			{
				"buffer_size": 73354,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/resolve-imports.js",
			"settings":
			{
				"buffer_size": 55471,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					63,
					1,
					"insert",
					{
						"characters": " buf"
					},
					"BAAAAEafAAAAAAAAR58AAAAAAAAAAAAAR58AAAAAAABInwAAAAAAAAAAAABInwAAAAAAAEmfAAAAAAAAAAAAAEmfAAAAAAAASp8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARp8AAAAAAABGnwAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAEqfAAAAAAAAS58AAAAAAAAAAAAAS58AAAAAAABMnwAAAAAAAAAAAABMnwAAAAAAAE2fAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASp8AAAAAAABKnwAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+p4AAAAAAAD6ngAAAAAAAAAAAAAA4HxA"
				]
			]
		},
		{
			"file": "lib/geom/graph.js",
			"settings":
			{
				"buffer_size": 11141,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/json/path.js",
			"settings":
			{
				"buffer_size": 18898,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/extendArray.js",
			"settings":
			{
				"buffer_size": 4304,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/xml/parse.js",
			"settings":
			{
				"buffer_size": 7066,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAH0bAAAAAAAAfxsAAAAAAAAAAAAA2RoAAAAAAADbGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRsAAAAAAADZGgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/json/util.js",
			"settings":
			{
				"buffer_size": 2514,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					14,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAM0JAAAAAAAAzwkAAAAAAAAAAAAA5AgAAAAAAADmCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQkAAAAAAADkCAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/src/utils.c",
			"settings":
			{
				"buffer_size": 93359,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGv8AAAAAAAAbPwAAAAAAAAAAAAAbPwAAAAAAABu/AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa/wAAAAAAABr/AAAAAAAAAAAAAAAYGJA"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AgAAAK/6AAAAAAAAr/oAAAAAAAABAAAAL2v8AAAAAAAAa/wAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAsPoAAAAAAACw+gAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"right_delete",
					null,
					"AQAAAK/6AAAAAAAAr/oAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAr/oAAAAAAACv+gAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"right_delete",
					null,
					"AQAAAMb6AAAAAAAAxvoAAAAAAAABAAAAXA",
					"AQAAAAAAAAABAAAAxvoAAAAAAADG+gAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMb6AAAAAAAAx/oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxvoAAAAAAADG+gAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"right_delete",
					null,
					"AQAAAMf6AAAAAAAAx/oAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAx/oAAAAAAADH+gAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/geom/transformation.js",
			"settings":
			{
				"buffer_size": 21715,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "matrix="
					},
					"BwAAANgVAAAAAAAA2RUAAAAAAAAAAAAA2RUAAAAAAADaFQAAAAAAAAAAAADaFQAAAAAAANsVAAAAAAAAAAAAANsVAAAAAAAA3BUAAAAAAAAAAAAA3BUAAAAAAADdFQAAAAAAAAAAAADdFQAAAAAAAN4VAAAAAAAAAAAAAN4VAAAAAAAA3xUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BUAAAAAAADYFQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					6,
					"right_delete",
					null,
					"BgAAAOwVAAAAAAAA7BUAAAAAAAABAAAAdOwVAAAAAAAA7BUAAAAAAAABAAAAZewVAAAAAAAA7BUAAAAAAAABAAAAU+wVAAAAAAAA7BUAAAAAAAABAAAAZewVAAAAAAAA7BUAAAAAAAABAAAAbOwVAAAAAAAA7BUAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAA7BUAAAAAAADsFQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "te"
					},
					"AgAAAOwVAAAAAAAA7RUAAAAAAAAAAAAA7RUAAAAAAADuFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7BUAAAAAAADsFQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					4,
					"right_delete",
					null,
					"BAAAAEgWAAAAAAAASBYAAAAAAAABAAAAU0gWAAAAAAAASBYAAAAAAAABAAAAZUgWAAAAAAAASBYAAAAAAAABAAAAbEgWAAAAAAAASBYAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAASBYAAAAAAABIFgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAASBYAAAAAAABIFgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/components/text.js",
			"settings":
			{
				"buffer_size": 2589,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAI4BAAAAAAAAjwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					2,
					"right_delete",
					null,
					"AgAAACAGAAAAAAAAIAYAAAAAAAAHAAAAY29uc29sZSAGAAAAAAAAIAYAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAIAYAAAAAAAAnBgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACAGAAAAAAAAIQYAAAAAAAAAAAAAIQYAAAAAAAAjBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAYAAAAAAAAgBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/renderUtils.js",
			"redo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "g1"
					},
					"AwAAAPoCAAAAAAAA+gIAAAAAAAABAAAAMfoCAAAAAAAA/QIAAAAAAAAAAAAA+QIAAAAAAAD5AgAAAAAAAAEAAABn",
					"AQAAAAAAAAABAAAA+wIAAAAAAAD7AgAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 15996,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/eagle/renderer.js",
			"settings":
			{
				"buffer_size": 893,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAFcDAAAAAAAAWAMAAAAAAAAAAAAAWAMAAAAAAABYAwAAAAAAADsAAAAgIGNvbnNvbGUubG9nKCdERUJVRzonLCBERUJVRyk7CiAgY29uc29sZS5sb2coJ2xvZzonLCBsb2cpOw",
					"AQAAAAAAAAABAAAAVwMAAAAAAACSAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/geom/size.js",
			"settings":
			{
				"buffer_size": 9300,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Project: Edit Project"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/dsp",
		"/home/roman/Projects/plot-cv/lib/eagle"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs-misc.c.ast.bjson",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Luscious.tmTheme",
		"/home/roman/Projects/plot-cv/lib/dom/svg.js",
		"/home/roman/mnt/samsung-roman/Projects/an-tronics/Mind-Synchronizing-Generator-PinHdrPotX.svg",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/svg-crop-pad.js",
		"/home/roman/Projects/plot-cv/40106-4069-Synth.cropped.svg",
		"/home/roman/mnt/samsung-roman/Projects/an-tronics/40106-4069-Synth.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/svg/path.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/eda/units.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/css3-selectors.js",
		"/home/roman/mnt/samsung-roman/Projects/an-tronics/StyroCutter-556-heatsink-5V.svg",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/geom/trbl.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/dom.js",
		"/home/roman/Projects/plot-cv/lib/grammars/ebnf.ebnf",
		"/home/roman/Projects/plot-cv/cli-helpers.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/lib/ecmascript.js",
		"/home/roman/Projects/plot-cv/getModuleProps.js",
		"/home/roman/Projects/plot-cv/test-operators.js",
		"/home/roman/Projects/plot-cv/data/test-websocket.functions.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/lib/alea.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/usr/include/sqlite3.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/test-sqlite3.js",
		"/home/roman/Projects/plot-cv/sqlite3.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/mysql_system_tables.sql",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/fill_help_tables.sql",
		"/home/roman/Projects/plot-cv/quickjs/run-test262.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build-libwebsockets.sh",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/build.ninja",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-schematic.svg",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-board.svg",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/dsp/util.js",
		"/home/roman/Projects/plot-cv/Zeichnung.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/svg/ZoomRedraw.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/elementProxy.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wirePath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/quickjs/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/lib/container/spatial-hash.js",
		"/home/roman/Projects/plot-cv/lib/container/Hash-Multimap.js",
		"/home/roman/Projects/plot-cv/lib/container/componentMap.js",
		"/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util-w-2.diff",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/new.diff",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"getprototypechain",
			"\"getPrototypeCha",
			"getPrototypeChain",
			"isObject",
			"ion isObject",
			"isObject",
			"getCallers",
			"getCalles",
			"Util\\.",
			"== last",
			"last",
			"Searching",
			"if\\(.*Util.getPlatform",
			"getPlatform",
			"Util.getPlatform\\(",
			"Util.getPlatform",
			"^js_error",
			"getPlatf",
			"Util.getPlat",
			"^js[^ ]*error",
			"^jsm_.*error",
			"_error",
			"'doc'",
			"reduce",
			"'args'",
			"'args",
			"DEBUG:",
			"Text.render.2",
			"Text.render",
			"renderer.palette",
			"'render'",
			"'render",
			"([Ss]tack|[Ee]rror)",
			"[Ss]tack",
			"[Ee]rror",
			"Saving to",
			"D",
			"setDebug\\(",
			"DEBUG =",
			"DEBUG",
			"log",
			"debugFlag",
			"Renderer",
			"Text.render",
			"toString =",
			"toString",
			"'mm'",
			"size.*unit",
			"debug",
			"clip-path",
			"AllPar",
			"clip-path",
			"xref",
			"clip-path",
			"clip3",
			"#clip3",
			"M 27\\.199933 474\\.158751 L 27\\.199933 486\\.086916 ",
			"M 27.199933 474.158751 L 27.199933 486.086916 ",
			"Positioned",
			"<clipPath",
			"clip.*path",
			"clip.*path\n",
			"clip.*path",
			"clip-path",
			"serialize",
			"FileWriter",
			"FileWriterw",
			"FileWriter",
			"open\\(",
			"written",
			"WriteFile",
			"\\, \\{mode\\:0o755\\}",
			"WriteFile",
			"verb",
			"WriteFile",
			"GetB",
			"ERROR",
			"GetPoints",
			"new Point",
			"pathToPoints",
			"GetPoints",
			"pathToPoints",
			"GetPoints",
			"map =",
			"filter =",
			"'z'",
			"filter =",
			"GetPoints",
			"roundTo",
			"round =",
			"at =",
			"deref =",
			"deref",
			"GetPoints",
			"GetTransformedPoints",
			"GetBounds",
			"pointsToAbsolute",
			"splitPath",
			"Element",
			"ELement",
			"parseValues",
			"parse",
			"parseS",
			"parseSVG",
			"parseSVGPath",
			"path293",
			"GetBounds",
			"GetPoints",
			"formMatrix",
			"ElementTransform",
			"AllTra",
			"AllTransforms",
			"GetTransform",
			"getTransformationMatrix",
			"AllTransforms",
			"Symbol.iterator",
			"'multiply'",
			"Matrix.multiply",
			"multiply'",
			"Util\\.",
			"Util.inherit",
			"Util\\.extend",
			"extend\\(",
			"inherit",
			"colorText",
			"Util\\.",
			"parse",
			"fromDOM"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"MakePoint",
			"",
			"define",
			"PointList\\.prototype",
			"};\\n\nPointList.",
			"}\\n\nfunction",
			"",
			"isObject",
			"roundTo",
			"define",
			"padding"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": null,
							"function_name_status_row": 28,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680856036.03,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "svg-crop-pad.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15901,
						"regions":
						{
						},
						"selection":
						[
							[
								14405,
								14405
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 525,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680889419.86,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6957.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "eagle2svg.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2439,
						"regions":
						{
						},
						"selection":
						[
							[
								2382,
								2382
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 94,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680890400.59,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 825.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "quickjs/qjs-modules/src/qjsm.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46181,
						"regions":
						{
						},
						"selection":
						[
							[
								5227,
								5227
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 215,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680890674.74,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2267.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/eagle/svgRenderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11951,
						"regions":
						{
						},
						"selection":
						[
							[
								2360,
								2360
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 54,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680890346.77,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 293.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "quickjs/qjs-modules/lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64701,
						"regions":
						{
						},
						"selection":
						[
							[
								64701,
								64701
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2332,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680893142.46,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 33151.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs/qjs-modules/quickjs-misc.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73354,
						"regions":
						{
						},
						"selection":
						[
							[
								16363,
								16380
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 624,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680896842.8,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8357.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "quickjs/qjs-modules/resolve-imports.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55471,
						"regions":
						{
						},
						"selection":
						[
							[
								40698,
								40698
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1487,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680892453.82,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20593.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/geom/graph.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11141,
						"regions":
						{
						},
						"selection":
						[
							[
								7,
								11
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680892502.34,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/json/path.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18898,
						"regions":
						{
						},
						"selection":
						[
							[
								987,
								992
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 311,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680892721.8,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "quickjs/qjs-modules/lib/extendArray.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4304,
						"regions":
						{
						},
						"selection":
						[
							[
								333,
								339
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 14,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680892093.27,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/xml/parse.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7066,
						"regions":
						{
						},
						"selection":
						[
							[
								7043,
								7043
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 273,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680891492.58,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3079.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/json/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2514,
						"regions":
						{
						},
						"selection":
						[
							[
								2511,
								2278
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 71,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680891020.74,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 461.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "quickjs/qjs-modules/src/utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 93359,
						"regions":
						{
						},
						"selection":
						[
							[
								64199,
								64199
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2467,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680891370.52,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 34131.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "lib/geom/transformation.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21715,
						"regions":
						{
						},
						"selection":
						[
							[
								5704,
								5704
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 205,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680889558.52,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2463.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "lib/eagle/components/text.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2589,
						"regions":
						{
						},
						"selection":
						[
							[
								2422,
								2422
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 57,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680890271.68,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 83.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "lib/eagle/renderUtils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15996,
						"regions":
						{
						},
						"selection":
						[
							[
								1474,
								1474
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 45,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680889686.37,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "lib/eagle/renderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 893,
						"regions":
						{
						},
						"selection":
						[
							[
								34,
								35
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680890270.93,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "lib/geom/size.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9300,
						"regions":
						{
						},
						"selection":
						[
							[
								7062,
								7072
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 207,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680889297.92,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2519.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Run with qjsm",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"misc.c",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-misc.c",
				"quickjs-misc.c.ast.bjson"
			],
			[
				"modules/lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"json/path",
				"lib/json/path.js"
			],
			[
				"geom/grap",
				"lib/geom/graph.js"
			],
			[
				"extendArra",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"xml/parse",
				"lib/xml/parse.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"json/util",
				"lib/json/util.js"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"svgRen",
				"lib/eagle/svgRenderer.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"eagle/ren",
				"lib/eagle/renderer.js"
			],
			[
				"text.js",
				"lib/eagle/components/text.js"
			],
			[
				"transforma",
				"lib/geom/transformation.js"
			],
			[
				"eagle2",
				"eagle2svg.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"svg-cro",
				"svg-crop-pad.js"
			],
			[
				"-lexer",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"location.h",
				"quickjs/qjs-modules/include/location.h"
			],
			[
				"res",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"PointList",
				"lib/geom/pointList.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"matrix",
				"lib/geom/matrix.js"
			],
			[
				"trans",
				"lib/geom/transformation.js"
			],
			[
				"transform",
				"lib/geom/transformation.js"
			],
			[
				"bbox",
				"lib/geom/bbox.js"
			],
			[
				"misc",
				"lib/misc.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"package.js",
				"package.json"
			],
			[
				"bbox.js",
				"lib/geom/bbox.js"
			],
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"svg/path.js",
				"lib/svg/path.js"
			],
			[
				"units",
				"lib/eda/units.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"lib/ut",
				"lib/util.js"
			],
			[
				"trbl",
				"lib/geom/trbl.js"
			],
			[
				"point",
				"lib/geom/point.js"
			],
			[
				"point.j",
				"lib/geom/point.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"bbox.j",
				"lib/geom/bbox.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"svg-crop",
				"svg-crop-pad.js"
			],
			[
				"cli-help",
				"cli-helpers.js"
			],
			[
				"project",
				"lib/eagle/project.js"
			],
			[
				"eagle-comm",
				"eagle-commands.js"
			],
			[
				"lib/util",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"os-helper",
				"os-helpers.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"lexer.c",
				"quickjs/qjs-modules/src/lexer.c"
			],
			[
				"-lexer.c",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"ecma",
				"lib/ecmascript.js"
			],
			[
				"lexer.c ",
				"quickjs/qjs-modules/src/lexer.c"
			],
			[
				"lexer.h",
				"quickjs/qjs-modules/include/lexer.h"
			],
			[
				"quickjs-lex",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"test_lexer",
				"quickjs/qjs-modules/tests/test_lexer.js"
			],
			[
				"buffer-u",
				"quickjs/qjs-modules/src/buffer-utils.c"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"debugger-cli",
				"debugger-client.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-lib",
				"quickjs/quickjs-libc.c"
			],
			[
				"list-ex",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"getMod",
				"getModuleProps.js"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"nanovg",
				"test-nanovg.js"
			],
			[
				"alea",
				"lib/alea.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"jsut",
				"quickjs/qjs-modules/src/js-utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"run-test",
				"quickjs/run-test262.c"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"build-libwe",
				"quickjs/qjs-net/build-libwebsockets.sh"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"pin.js",
				"lib/eagle/components/pin.js"
			],
			[
				"",
				"~/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"symb",
				"lib/eagle/components/symbol.js"
			],
			[
				"schematicren",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardren",
				"lib/eagle/boardRenderer.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"svgRend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"renderUtil",
				"lib/eagle/renderUtils.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"common",
				"lib/eagle/common.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"common.j",
				"lib/eagle/common.js"
			],
			[
				"nodeLi",
				"lib/eagle/nodeList.js"
			],
			[
				"common.js",
				"lib/eagle/common.js"
			],
			[
				"elementP",
				"lib/eagle/elementProxy.js"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"wirePa",
				"lib/eagle/components/wirePath.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"renderer.js",
				"lib/eagle/renderer.js"
			],
			[
				"functions.cmake",
				"qjs-opencv/cmake/functions.cmake"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 784.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
