{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"onRe",
				"onReceiveClientHttpRead"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"lws_pr",
				"lws_process_html_args"
			],
			[
				"ioha",
				"iohandler_functions"
			],
			[
				"JS_Sert",
				"JS_SetPropertyUint32"
			],
			[
				"lwsjs",
				"lwsjs_loglevel"
			],
			[
				"lwsjs_clear",
				"lwsjs_clear_all_handlers"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"lws_",
				"lws_context_class_id"
			],
			[
				"callba",
				"callback_names"
			],
			[
				"JS_Get",
				"JS_GetPropertyStr"
			],
			[
				"call",
				"callback_names"
			],
			[
				"FUNCTION_GET_",
				"FUNCTION_GET_CALLBACK_NUMBER"
			],
			[
				"PROP_PE",
				"PROP_PEER_WRITE_ALLOWANCE"
			],
			[
				"PROP_PEE",
				"PROP_PEER_WRITE_ALLOWANCE"
			],
			[
				"lws_callback",
				"lws_callback_names"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "MakeUUID = (rng = Math.random) =>\n  n =>\nLineReader = () =>\n  transform(chunk, controller)\n  part =>\n  flush(controller)\nReadIterator(stream)\nListJSON = (dir = 'uploads') =>\n  prioritySort(arr, predicates = [])\n  matchPred = item =>\n  p =>\n(a, b) =>\n  setLabel(text)\n  isComponent(obj)\nTable = ({ children, rows, ...props }) =>\n  row =>\n  cell =>\nPropertyList = ({ data, filter, ...props }) =>\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\nFileItem = ({ file, ref, ...props }) =>\n  filter: ([k, v]) =>\n(coord, i) =>\nFileList = ({ files, ref, ...props }) =>\n  file =>\ne =>\ne =>\ne =>\ne =>\n  err =>\n  resp =>\ne =>\nFileAction(cmd, file, contents)\n  r =>\nUploadFiles(files)\nListFiles()\n  r =>\n  upload =>\n(a, b) =>\n  file =>\nUploadFile(files)\n  f =>\n  err =>\n  response =>\nUploadDone(upload)\n({ name }) =>\nCreateWS(endpoint = 'uploads')\n  restart = (delay = 10) =>\n() =>\n  .onmessage = e =>\n() =>\n  .onopen = e =>\n  .onclose = e =>\n  .onerror = e =>\nXHRUpload(formData)\nfunction(e)\nFileSelectHandler(e)",
			"settings":
			{
				"buffer_size": 1047,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					44,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/openlayers/test/browser/spec/ol/dom/dom.test.js",
						"symkeys":
						[
							[
								272,
								284
							],
							[
								329,
								341
							],
							[
								549,
								561
							],
							[
								859,
								871
							],
							[
								1162,
								1174
							],
							[
								1485,
								1497
							],
							[
								1786,
								1798
							],
							[
								1840,
								1851
							],
							[
								2140,
								2151
							],
							[
								2281,
								2293
							],
							[
								2328,
								2340
							],
							[
								2474,
								2486
							],
							[
								2534,
								2546
							],
							[
								2726,
								2738
							],
							[
								2914,
								2926
							],
							[
								2974,
								2986
							],
							[
								3165,
								3177
							],
							[
								3352,
								3364
							],
							[
								3412,
								3424
							],
							[
								3619,
								3631
							],
							[
								3876,
								3888
							],
							[
								3936,
								3948
							],
							[
								4166,
								4178
							],
							[
								4408,
								4420
							],
							[
								4468,
								4480
							],
							[
								4714,
								4726
							],
							[
								5013,
								5025
							],
							[
								5073,
								5085
							],
							[
								5318,
								5330
							],
							[
								5625,
								5637
							],
							[
								5685,
								5697
							],
							[
								5969,
								5981
							],
							[
								6310,
								6322
							],
							[
								6364,
								6375
							],
							[
								6664,
								6675
							],
							[
								6805,
								6817
							],
							[
								6852,
								6864
							],
							[
								7001,
								7013
							],
							[
								7061,
								7073
							],
							[
								7256,
								7268
							],
							[
								7446,
								7458
							],
							[
								7506,
								7518
							],
							[
								7700,
								7712
							],
							[
								7889,
								7901
							],
							[
								7949,
								7961
							],
							[
								8159,
								8171
							],
							[
								8420,
								8432
							],
							[
								8480,
								8492
							],
							[
								8713,
								8725
							],
							[
								8956,
								8968
							],
							[
								9016,
								9028
							],
							[
								9265,
								9277
							],
							[
								9567,
								9579
							],
							[
								9627,
								9639
							],
							[
								9875,
								9887
							],
							[
								10185,
								10197
							],
							[
								10245,
								10257
							],
							[
								10532,
								10544
							],
							[
								10874,
								10886
							],
							[
								10889,
								10939
							],
							[
								11193,
								11205
							],
							[
								11527,
								11539
							],
							[
								11778,
								11794
							],
							[
								11962,
								11974
							],
							[
								12213,
								12229
							],
							[
								12554,
								12566
							],
							[
								12805,
								12821
							],
							[
								13210,
								13222
							],
							[
								13535,
								13551
							],
							[
								13811,
								13823
							],
							[
								14136,
								14152
							],
							[
								14545,
								14557
							],
							[
								14870,
								14886
							]
						],
						"symlist":
						[
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							"function ()",
							"function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							"function ()",
							"function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function ()",
							" function assertChildrenMatch(parent, children)",
							" function ()",
							" function ()",
							"function (child)",
							" function ()",
							"function (child)",
							" function ()",
							"function (child)",
							" function ()",
							"function (child)",
							" function ()",
							"function (child)",
							" function ()",
							"function (child)"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					45,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom.js",
						"symkeys":
						[
							[
								1740,
								1760
							],
							[
								1832,
								1850
							],
							[
								1889,
								1912
							],
							[
								1995,
								2011
							],
							[
								2030,
								2062
							],
							[
								2267,
								2296
							],
							[
								2805,
								2862
							],
							[
								3165,
								3226
							],
							[
								3682,
								3871
							],
							[
								4057,
								4083
							],
							[
								4095,
								4096
							],
							[
								4137,
								4168
							],
							[
								4312,
								4330
							],
							[
								4437,
								4463
							],
							[
								4592,
								4619
							],
							[
								4763,
								4772
							],
							[
								4946,
								4963
							],
							[
								4994,
								5013
							],
							[
								5099,
								5106
							],
							[
								5176,
								5183
							],
							[
								5237,
								5249
							],
							[
								5569,
								5592
							],
							[
								5647,
								5653
							],
							[
								5658,
								5678
							],
							[
								5748,
								5774
							],
							[
								6215,
								6234
							],
							[
								6373,
								6410
							],
							[
								6866,
								6875
							],
							[
								6880,
								6896
							],
							[
								7046,
								7065
							],
							[
								7177,
								7194
							],
							[
								7389,
								7404
							],
							[
								7501,
								7514
							],
							[
								7674,
								7693
							],
							[
								7735,
								7751
							],
							[
								7878,
								7894
							],
							[
								8020,
								8035
							],
							[
								8211,
								8228
							],
							[
								8604,
								8625
							],
							[
								9001,
								9018
							],
							[
								9178,
								9193
							],
							[
								9213,
								9227
							],
							[
								9454,
								9477
							],
							[
								9829,
								9846
							],
							[
								10142,
								10174
							],
							[
								10604,
								10631
							],
							[
								11023,
								11053
							],
							[
								11225,
								11230
							],
							[
								11272,
								11276
							],
							[
								11281,
								11305
							],
							[
								11389,
								11399
							],
							[
								11521,
								11539
							],
							[
								11683,
								11687
							],
							[
								11699,
								11706
							],
							[
								11718,
								11726
							],
							[
								11788,
								11809
							],
							[
								12046,
								12067
							],
							[
								12114,
								12132
							],
							[
								12496,
								12515
							],
							[
								12578,
								12599
							],
							[
								12725,
								12763
							],
							[
								13078,
								13099
							],
							[
								13158,
								13175
							],
							[
								13211,
								13233
							],
							[
								13449,
								13462
							],
							[
								13914,
								13924
							],
							[
								14023,
								14039
							],
							[
								14348,
								14352
							],
							[
								14364,
								14373
							],
							[
								14393,
								14397
							],
							[
								14452,
								14456
							],
							[
								14527,
								14560
							],
							[
								14571,
								14574
							],
							[
								14622,
								14640
							],
							[
								14814,
								14848
							],
							[
								14859,
								14862
							],
							[
								14889,
								14895
							],
							[
								14917,
								14932
							],
							[
								15089,
								15097
							],
							[
								15102,
								15125
							],
							[
								15138,
								15157
							],
							[
								15201,
								15217
							],
							[
								15399,
								15431
							],
							[
								15484,
								15492
							],
							[
								15518,
								15526
							],
							[
								15802,
								15845
							],
							[
								16098,
								16116
							],
							[
								16165,
								16172
							],
							[
								16221,
								16246
							],
							[
								16247,
								16255
							],
							[
								16581,
								16589
							],
							[
								16875,
								16909
							],
							[
								16970,
								16986
							],
							[
								17026,
								17053
							],
							[
								17180,
								17212
							],
							[
								17601,
								17619
							],
							[
								17747,
								17759
							],
							[
								17800,
								17812
							],
							[
								17907,
								17917
							],
							[
								17997,
								18006
							],
							[
								18045,
								18063
							],
							[
								18151,
								18172
							],
							[
								18222,
								18240
							],
							[
								20214,
								20221
							],
							[
								20239,
								20263
							],
							[
								20318,
								20334
							],
							[
								20375,
								20388
							],
							[
								20433,
								20451
							],
							[
								20497,
								20516
							],
							[
								20552,
								20566
							],
							[
								20601,
								20620
							],
							[
								20763,
								20779
							],
							[
								20998,
								21012
							],
							[
								21225,
								21236
							],
							[
								21462,
								21485
							],
							[
								21540,
								21563
							],
							[
								21611,
								21615
							],
							[
								21736,
								21758
							],
							[
								22037,
								22045
							],
							[
								22119,
								22137
							],
							[
								22176,
								22189
							],
							[
								22216,
								22235
							],
							[
								22274,
								22287
							],
							[
								22321,
								22339
							],
							[
								22378,
								22391
							],
							[
								22420,
								22435
							],
							[
								22493,
								22514
							],
							[
								22546,
								22559
							],
							[
								22593,
								22615
							],
							[
								22659,
								22684
							],
							[
								22915,
								22928
							],
							[
								22965,
								22980
							],
							[
								23732,
								23739
							],
							[
								23751,
								23759
							],
							[
								23846,
								23861
							],
							[
								23891,
								23914
							],
							[
								23975,
								23996
							],
							[
								24088,
								24095
							],
							[
								26403,
								26411
							],
							[
								26432,
								26457
							],
							[
								26498,
								26526
							],
							[
								26577,
								26599
							],
							[
								26684,
								26704
							],
							[
								26741,
								26888
							],
							[
								26962,
								26982
							],
							[
								27017,
								27037
							],
							[
								27095,
								27105
							],
							[
								27590,
								27598
							],
							[
								27667,
								27675
							],
							[
								27788,
								27792
							],
							[
								27810,
								27833
							],
							[
								27946,
								27956
							],
							[
								28104,
								28122
							],
							[
								28173,
								28192
							],
							[
								28234,
								28244
							],
							[
								28309,
								28324
							],
							[
								28365,
								28376
							],
							[
								28449,
								28465
							],
							[
								28691,
								28695
							],
							[
								28822,
								28826
							],
							[
								28885,
								28908
							],
							[
								29169,
								29180
							],
							[
								29203,
								29217
							],
							[
								29287,
								29298
							],
							[
								29323,
								29337
							],
							[
								29419,
								29429
							],
							[
								29460,
								29468
							],
							[
								29484,
								29499
							],
							[
								29530,
								29538
							],
							[
								29554,
								29564
							],
							[
								29771,
								29786
							],
							[
								29813,
								29817
							],
							[
								29840,
								29844
							],
							[
								29867,
								29871
							],
							[
								30058,
								30065
							],
							[
								30083,
								30106
							],
							[
								30176,
								30187
							],
							[
								30222,
								30236
							],
							[
								30298,
								30311
							],
							[
								30349,
								30365
							],
							[
								30411,
								30421
							],
							[
								30445,
								30453
							],
							[
								30486,
								30501
							],
							[
								30525,
								30533
							],
							[
								30677,
								30693
							],
							[
								30724,
								30731
							],
							[
								30754,
								30758
							],
							[
								30781,
								30788
							],
							[
								30987,
								30996
							],
							[
								31001,
								31034
							],
							[
								31125,
								31136
							],
							[
								31170,
								31184
							],
							[
								31253,
								31266
							],
							[
								31295,
								31311
							],
							[
								31357,
								31369
							],
							[
								31396,
								31404
							],
							[
								31427,
								31438
							],
							[
								31465,
								31473
							],
							[
								31499,
								31510
							],
							[
								31537,
								31545
							],
							[
								31568,
								31583
							],
							[
								31610,
								31618
							],
							[
								31655,
								31669
							],
							[
								31689,
								31702
							],
							[
								31860,
								31877
							],
							[
								31897,
								31910
							],
							[
								32076,
								32096
							],
							[
								32116,
								32129
							],
							[
								32307,
								32322
							],
							[
								32395,
								32422
							],
							[
								32442,
								32455
							],
							[
								32714,
								32723
							],
							[
								32851,
								32869
							],
							[
								32898,
								32907
							],
							[
								33022,
								33041
							],
							[
								33046,
								33071
							],
							[
								33195,
								33211
							],
							[
								33455,
								33463
							],
							[
								33540,
								33555
							],
							[
								33648,
								33659
							],
							[
								33813,
								33820
							],
							[
								33895,
								33902
							],
							[
								34005,
								34032
							],
							[
								34413,
								34437
							],
							[
								34758,
								34786
							],
							[
								35158,
								35173
							],
							[
								35212,
								35216
							],
							[
								35422,
								35439
							],
							[
								35480,
								35491
							],
							[
								35585,
								35606
							],
							[
								35653,
								35677
							],
							[
								35702,
								35721
							],
							[
								35771,
								35784
							],
							[
								35823,
								35841
							],
							[
								36326,
								36350
							],
							[
								36401,
								36408
							],
							[
								36434,
								36441
							],
							[
								36477,
								36493
							],
							[
								36523,
								36583
							],
							[
								36627,
								36638
							],
							[
								36694,
								36713
							],
							[
								36822,
								36838
							],
							[
								36871,
								36885
							],
							[
								36959,
								36969
							],
							[
								36974,
								36997
							],
							[
								37050,
								37085
							]
						],
						"symlist":
						[
							"EntityType = name =>",
							"(obj, name, id) =>",
							"keyOf = (obj, value) =>",
							"DereferenceError",
							"constructor(obj, i, path, error)",
							"function applyPath(path, obj)",
							"function query(root, selectors, t = (path, root) => path)",
							"function* queryAll(root, selectors, t = (path, root) => path)",
							" function Prototypes( constructors = { Document, Node, NodeList, Element, NamedNodeMap, Attr, Text, Comment, TokenList, CSSStyleDeclaration, }, )",
							" function Factory(types = ",
							")",
							"result = function Factory(type)",
							"(acc, proto, i) =>",
							"types = (type, ...args) =>",
							".cache = (type, ...args) =>",
							"(...a) =>",
							"new: (...args) =>",
							"cache: (...args) =>",
							"Factory",
							"Factory",
							"for: node =>",
							"set: (node, factory) =>",
							"Parser",
							"constructor(factory)",
							"parseFromString(str, file)",
							"parseFromFile(file)",
							"function GetNode(obj, owner, factory)",
							"Interface",
							"get parentNode()",
							"get parentElement()",
							"isSameNode(other)",
							"hasChildNodes()",
							"getRootNode()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" v =>",
							"insertBefore(node, ref)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"querySelector(...selectors)",
							"querySelectorAll(...selectors)",
							" p =>",
							"Node",
							"constructor(obj, parent)",
							"get path()",
							"static check(node)",
							"Node",
							"Element",
							"Document",
							"static raw(node, raw)",
							"static children(node)",
							"static owner(node)",
							"static parent(node)",
							"static document(node)",
							"static hier(node, pred = node => true)",
							"static document(node)",
							"({ nodeType }) =>",
							"static path(arg, path)",
							"(acc, key) =>",
							"toString()",
							"static from(obj)",
							"Node",
							"Interface",
							"Node",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (key, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"get: (target, prop, receiver) =>",
							"NodeList",
							"NodeList",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"getPrototypeOf: target =>",
							"NodeList",
							"NodeList",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"Element",
							"constructor(obj, parent)",
							"classList: () =>",
							"get tagName()",
							"set tagName(value)",
							"set nodeName(value)",
							"get nodeName()",
							"get parentElement()",
							"get attributes()",
							"get children()",
							"get style()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"get innerText()",
							"Element",
							"Document",
							"(obj, owner) =>",
							"static attributes(elem)",
							"static toString(elem)",
							"Element",
							"Document",
							"constructor(obj, factory)",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"createTreeWalker(root, whatToShow = TreeWalker.TYPE_ALL, filter = { acceptNode: node => TreeWalker.FILTER_ACCEPT }, expandEntityReferences = false)",
							" (node, key) =>",
							" (node, ptr) =>",
							"get body()",
							"Document",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(value)",
							"get value()",
							"set value(value)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							" (container, i) =>",
							"TokenList",
							"CSSStyleDeclaration",
							"constructor(style, owner)",
							"style = value =>",
							"get(key)",
							"set(key, value)",
							"remove(key)",
							"clear()",
							"*keys()",
							"get(target, prop, receiver)",
							"set(target, prop, value)",
							"deleteProperty(target, prop)",
							"ownKeys(target)",
							"k =>",
							"setProperty(k, v)",
							"item(index)",
							"getPropertyValue(key)",
							"getPropertyPriority(key)",
							"removeProperty(key)",
							"get cssText()",
							"set cssText(value)",
							"function parseStyle(str)",
							"item =>",
							"item =>",
							"(acc, [k, v]) =>",
							"function formatStyle(styles, eol = ';', spc = ' ', ind = '')",
							"([k, v]) =>",
							"CSSStyleDeclaration",
							"get parentRule()",
							"get cssFloat()",
							"Serializer",
							"serializeToString(node)",
							" function GetType(raw, owner, ctor)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAdAQAAKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKKCkKICBhc3NlcnRDaGlsZHJlbk1hdGNoKHBhcmVudCwgY2hpbGRyZW4pCigpCigpCihjaGlsZCkKKCkKKGNoaWxkKQooKQooY2hpbGQpCigpCihjaGlsZCkKKCkKKGNoaWxkKQooKQooY2hpbGQpAAAAAAAAAAAZEgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								106,
								126
							],
							[
								316,
								332
							],
							[
								386,
								405
							],
							[
								440,
								456
							],
							[
								516,
								532
							],
							[
								553,
								557
							],
							[
								595,
								629
							],
							[
								652,
								684
							],
							[
								707,
								750
							],
							[
								2579,
								2598
							],
							[
								2696,
								2712
							],
							[
								2774,
								2792
							],
							[
								2856,
								2875
							],
							[
								2940,
								2949
							],
							[
								3004,
								3021
							],
							[
								3084,
								3101
							],
							[
								3164,
								3178
							],
							[
								3238,
								3253
							],
							[
								3314,
								3329
							],
							[
								3390,
								3398
							],
							[
								3452,
								3464
							],
							[
								3522,
								3532
							],
							[
								3588,
								3599
							],
							[
								3656,
								3664
							],
							[
								3718,
								3740
							],
							[
								3808,
								3823
							],
							[
								3884,
								3906
							],
							[
								3974,
								3990
							],
							[
								4052,
								4068
							],
							[
								4130,
								4142
							],
							[
								4200,
								4212
							],
							[
								4270,
								4283
							],
							[
								4342,
								4360
							],
							[
								4418,
								4436
							],
							[
								4500,
								4522
							],
							[
								4590,
								4617
							],
							[
								4690,
								4707
							],
							[
								4764,
								4781
							],
							[
								4838,
								4855
							],
							[
								4902,
								4918
							],
							[
								5001,
								5017
							],
							[
								5089,
								5105
							],
							[
								5177,
								5194
							],
							[
								5251,
								5271
							],
							[
								5330,
								5350
							],
							[
								5430,
								5449
							],
							[
								5525,
								5532
							],
							[
								5560,
								5580
							],
							[
								5650,
								5665
							],
							[
								5726,
								5752
							],
							[
								5823,
								5839
							],
							[
								5895,
								5908
							],
							[
								5976,
								5994
							],
							[
								6067,
								6080
							],
							[
								6136,
								6150
							],
							[
								6253,
								6276
							],
							[
								6337,
								6358
							],
							[
								8242,
								8281
							],
							[
								8703,
								8715
							],
							[
								8749,
								8761
							],
							[
								8777,
								8790
							],
							[
								8973,
								9021
							],
							[
								11355,
								11359
							],
							[
								11390,
								11399
							],
							[
								11537,
								11556
							],
							[
								12070,
								12089
							],
							[
								12704,
								12747
							],
							[
								13128,
								13161
							],
							[
								13440,
								13469
							],
							[
								13516,
								13537
							],
							[
								13566,
								13582
							],
							[
								13675,
								13705
							],
							[
								13729,
								13745
							],
							[
								13746,
								13769
							],
							[
								13867,
								13902
							],
							[
								13926,
								13942
							],
							[
								13943,
								13966
							],
							[
								14064,
								14097
							],
							[
								14147,
								14170
							],
							[
								14264,
								14297
							],
							[
								14551,
								14572
							],
							[
								14650,
								14656
							],
							[
								14673,
								14689
							],
							[
								14841,
								14853
							],
							[
								14866,
								14877
							],
							[
								14890,
								14911
							],
							[
								14947,
								14958
							],
							[
								15205,
								15211
							],
							[
								15224,
								15240
							],
							[
								15413,
								15418
							],
							[
								15432,
								15441
							],
							[
								15504,
								15510
							],
							[
								15558,
								15564
							],
							[
								15582,
								15595
							],
							[
								15651,
								15656
							],
							[
								15690,
								15696
							],
							[
								15728,
								15750
							],
							[
								15820,
								15826
							],
							[
								15842,
								15858
							],
							[
								15884,
								15890
							],
							[
								15910,
								15931
							],
							[
								16037,
								16049
							],
							[
								16152,
								16179
							],
							[
								16224,
								16230
							],
							[
								16275,
								16287
							],
							[
								16317,
								16350
							],
							[
								16483,
								16489
							],
							[
								16600,
								16612
							],
							[
								16666,
								16678
							],
							[
								16826,
								16837
							],
							[
								16879,
								16912
							],
							[
								17045,
								17054
							],
							[
								17172,
								17193
							],
							[
								17254,
								17275
							],
							[
								17433,
								17447
							],
							[
								17496,
								17535
							],
							[
								17612,
								17629
							],
							[
								17752,
								17766
							],
							[
								17928,
								17945
							],
							[
								18086,
								18103
							],
							[
								18134,
								18151
							],
							[
								18251,
								18268
							],
							[
								18560,
								18574
							],
							[
								18620,
								18643
							],
							[
								18700,
								18707
							],
							[
								18725,
								18732
							],
							[
								18757,
								18782
							],
							[
								18842,
								18849
							],
							[
								18870,
								18877
							],
							[
								18907,
								18962
							],
							[
								19067,
								19074
							],
							[
								19212,
								19236
							],
							[
								19286,
								19290
							],
							[
								19330,
								19357
							],
							[
								19587,
								19607
							],
							[
								19637,
								19648
							],
							[
								19748,
								19783
							],
							[
								19823,
								19841
							],
							[
								20079,
								20090
							],
							[
								20341,
								20352
							],
							[
								20455,
								20466
							],
							[
								20617,
								20629
							],
							[
								20739,
								20759
							],
							[
								20857,
								20862
							],
							[
								20930,
								20951
							],
							[
								20975,
								20985
							],
							[
								21021,
								21080
							],
							[
								21147,
								21172
							],
							[
								21554,
								21584
							],
							[
								21839,
								21879
							],
							[
								22014,
								22025
							],
							[
								22069,
								22106
							],
							[
								22241,
								22252
							],
							[
								22298,
								22354
							],
							[
								22517,
								22581
							],
							[
								22730,
								22781
							],
							[
								23448,
								23510
							],
							[
								23692,
								23717
							],
							[
								23814,
								23839
							],
							[
								23952,
								24021
							],
							[
								24110,
								24132
							],
							[
								24166,
								24177
							],
							[
								24200,
								24222
							],
							[
								24464,
								24536
							],
							[
								24639,
								24710
							],
							[
								24806,
								24857
							],
							[
								25029,
								25076
							],
							[
								25143,
								25186
							],
							[
								25316,
								25373
							],
							[
								25467,
								25473
							],
							[
								25487,
								25493
							],
							[
								25797,
								25831
							],
							[
								26132,
								26156
							],
							[
								26225,
								26230
							],
							[
								26259,
								26264
							],
							[
								26423,
								26436
							],
							[
								26492,
								26544
							],
							[
								26550,
								26567
							],
							[
								26597,
								26606
							],
							[
								26622,
								26632
							],
							[
								26644,
								26661
							],
							[
								26684,
								26693
							],
							[
								26694,
								26717
							],
							[
								26762,
								26786
							],
							[
								26872,
								26927
							],
							[
								27205,
								27249
							],
							[
								27419,
								27453
							],
							[
								27519,
								27555
							],
							[
								27630,
								27647
							],
							[
								27973,
								28018
							],
							[
								28153,
								28166
							],
							[
								28265,
								28278
							],
							[
								28328,
								28371
							],
							[
								28372,
								28391
							],
							[
								28406,
								28410
							],
							[
								28533,
								28553
							],
							[
								28599,
								28631
							],
							[
								28659,
								28685
							],
							[
								29027,
								29046
							],
							[
								29253,
								29302
							],
							[
								29371,
								29378
							],
							[
								29463,
								29477
							],
							[
								29558,
								29568
							],
							[
								29674,
								29678
							],
							[
								29709,
								29729
							],
							[
								29775,
								29788
							],
							[
								29838,
								29850
							],
							[
								29992,
								30007
							],
							[
								30423,
								30463
							],
							[
								30612,
								30616
							],
							[
								30649,
								30657
							],
							[
								30686,
								30690
							],
							[
								31028,
								31041
							],
							[
								31114,
								31134
							],
							[
								31378,
								31525
							],
							[
								31534,
								31583
							],
							[
								31590,
								31627
							],
							[
								31876,
								31896
							],
							[
								32098,
								32113
							],
							[
								32399,
								32422
							],
							[
								32627,
								32645
							],
							[
								32858,
								32872
							],
							[
								32933,
								32945
							],
							[
								33043,
								33052
							],
							[
								33328,
								33344
							],
							[
								33780,
								33816
							],
							[
								33911,
								33920
							],
							[
								34096,
								34107
							],
							[
								34118,
								34126
							],
							[
								34175,
								34187
							],
							[
								34432,
								34444
							],
							[
								34627,
								34653
							],
							[
								34672,
								34676
							],
							[
								34763,
								34787
							],
							[
								34865,
								34894
							],
							[
								34948,
								34979
							],
							[
								34986,
								34989
							],
							[
								35033,
								35046
							],
							[
								35146,
								35217
							],
							[
								35243,
								35269
							],
							[
								35413,
								35443
							],
							[
								35600,
								35620
							],
							[
								35700,
								35733
							],
							[
								35890,
								35950
							],
							[
								36020,
								36037
							],
							[
								36098,
								36122
							],
							[
								36206,
								36262
							],
							[
								36273,
								36289
							],
							[
								36430,
								36461
							],
							[
								36501,
								36552
							],
							[
								36922,
								36950
							],
							[
								37104,
								37168
							],
							[
								37228,
								37243
							],
							[
								37309,
								37323
							],
							[
								37361,
								37384
							],
							[
								37576,
								37594
							],
							[
								37785,
								37855
							],
							[
								38004,
								38028
							],
							[
								38047,
								38055
							],
							[
								38091,
								38106
							],
							[
								38233,
								38246
							],
							[
								38401,
								38417
							],
							[
								38612,
								38638
							],
							[
								38653,
								38675
							],
							[
								38891,
								38895
							],
							[
								39081,
								39103
							],
							[
								39125,
								39135
							],
							[
								39153,
								39166
							],
							[
								39264,
								39286
							],
							[
								39308,
								39318
							],
							[
								39336,
								39349
							],
							[
								39455,
								39477
							],
							[
								39503,
								39513
							],
							[
								39531,
								39544
							],
							[
								39580,
								39602
							],
							[
								39623,
								39633
							],
							[
								39651,
								39664
							],
							[
								39684,
								39725
							],
							[
								40014,
								40037
							],
							[
								40118,
								40140
							],
							[
								40214,
								40234
							],
							[
								40361,
								40372
							],
							[
								40405,
								40422
							],
							[
								40586,
								40605
							],
							[
								40640,
								40662
							],
							[
								40794,
								40815
							],
							[
								40953,
								40973
							],
							[
								41040,
								41063
							],
							[
								41139,
								41161
							],
							[
								41270,
								41294
							],
							[
								41351,
								41363
							],
							[
								41536,
								41554
							],
							[
								41611,
								41623
							],
							[
								41777,
								41800
							],
							[
								41932,
								41948
							],
							[
								41995,
								42008
							],
							[
								42045,
								42112
							],
							[
								42148,
								42170
							],
							[
								42199,
								42209
							],
							[
								42225,
								42238
							],
							[
								42289,
								42302
							],
							[
								42369,
								42392
							],
							[
								42511,
								42533
							],
							[
								42621,
								42634
							],
							[
								42687,
								42703
							],
							[
								42741,
								42745
							],
							[
								42855,
								42892
							],
							[
								42903,
								42913
							],
							[
								42922,
								42951
							],
							[
								43168,
								43184
							],
							[
								43206,
								43217
							],
							[
								43272,
								43299
							],
							[
								43346,
								43364
							],
							[
								43438,
								43473
							],
							[
								43606,
								43628
							],
							[
								43666,
								43682
							],
							[
								43697,
								43704
							],
							[
								43726,
								43742
							],
							[
								43780,
								43808
							],
							[
								44027,
								44044
							],
							[
								44045,
								44054
							],
							[
								44106,
								44123
							],
							[
								44124,
								44133
							],
							[
								44193,
								44210
							],
							[
								44211,
								44234
							],
							[
								44290,
								44314
							],
							[
								46980,
								47008
							],
							[
								47439,
								47443
							],
							[
								47572,
								47585
							],
							[
								47901,
								47913
							],
							[
								48177,
								48190
							],
							[
								48296,
								48310
							],
							[
								49204,
								49232
							],
							[
								49349,
								49362
							],
							[
								49520,
								49544
							],
							[
								49637,
								49671
							],
							[
								49792,
								49831
							],
							[
								49878,
								49915
							],
							[
								49962,
								49988
							],
							[
								50178,
								50226
							],
							[
								50274,
								50318
							],
							[
								50499,
								50522
							],
							[
								50666,
								50698
							],
							[
								51011,
								51065
							],
							[
								51423,
								51475
							],
							[
								51648,
								51674
							],
							[
								51958,
								51974
							],
							[
								52141,
								52152
							],
							[
								52354,
								52406
							],
							[
								52650,
								52694
							],
							[
								53010,
								53046
							],
							[
								53203,
								53219
							],
							[
								53233,
								53255
							],
							[
								53368,
								53374
							],
							[
								53478,
								53491
							],
							[
								55130,
								55168
							],
							[
								55268,
								55284
							],
							[
								55357,
								55401
							],
							[
								55765,
								55785
							],
							[
								55985,
								56027
							],
							[
								56222,
								56253
							],
							[
								56303,
								56345
							],
							[
								56465,
								56489
							],
							[
								56747,
								56757
							],
							[
								56810,
								56814
							],
							[
								56853,
								56880
							],
							[
								56927,
								56939
							],
							[
								57009,
								57021
							],
							[
								57084,
								57109
							],
							[
								57154,
								57185
							],
							[
								57196,
								57213
							],
							[
								57354,
								57376
							],
							[
								57496,
								57518
							],
							[
								57638,
								57673
							],
							[
								57721,
								57748
							],
							[
								57839,
								57877
							],
							[
								58086,
								58134
							],
							[
								58722,
								58749
							],
							[
								58952,
								58966
							],
							[
								59015,
								59021
							],
							[
								59062,
								59128
							],
							[
								59130,
								59134
							],
							[
								59292,
								59299
							],
							[
								59391,
								59401
							],
							[
								59512,
								59521
							],
							[
								59627,
								59653
							],
							[
								59786,
								59817
							],
							[
								59982,
								60005
							],
							[
								60144,
								60168
							],
							[
								60338,
								60361
							],
							[
								60530,
								60543
							],
							[
								60609,
								60626
							],
							[
								60707,
								60726
							],
							[
								60777,
								60785
							],
							[
								60833,
								60842
							],
							[
								60876,
								60885
							],
							[
								60919,
								60928
							],
							[
								60962,
								60971
							],
							[
								61005,
								61014
							],
							[
								61047,
								61056
							],
							[
								61090,
								61099
							],
							[
								61133,
								61142
							],
							[
								61167,
								61201
							],
							[
								61345,
								61390
							],
							[
								61456,
								61466
							],
							[
								61505,
								61515
							],
							[
								61535,
								61545
							],
							[
								61573,
								61598
							],
							[
								61729,
								61754
							],
							[
								61852,
								61887
							],
							[
								61940,
								61974
							],
							[
								62056,
								62092
							],
							[
								62213,
								62217
							],
							[
								62248,
								62252
							],
							[
								62295,
								62299
							],
							[
								62327,
								62331
							],
							[
								62360,
								62388
							],
							[
								62518,
								62522
							],
							[
								62579,
								62610
							],
							[
								62949,
								62985
							],
							[
								63234,
								63259
							],
							[
								63344,
								63386
							],
							[
								63520,
								63560
							],
							[
								66490,
								66516
							],
							[
								66750,
								66774
							],
							[
								66967,
								66990
							],
							[
								67089,
								67127
							],
							[
								67309,
								67320
							],
							[
								67355,
								67376
							],
							[
								67445,
								67452
							],
							[
								67497,
								67511
							],
							[
								67544,
								67555
							],
							[
								67677,
								67684
							],
							[
								67767,
								67777
							],
							[
								67879,
								67888
							],
							[
								67985,
								68011
							],
							[
								68135,
								68166
							],
							[
								68462,
								68484
							],
							[
								68749,
								68793
							],
							[
								68884,
								68908
							],
							[
								68939,
								68967
							],
							[
								69033,
								69060
							],
							[
								69152,
								69177
							],
							[
								69265,
								69288
							],
							[
								69374,
								69397
							],
							[
								69445,
								69471
							],
							[
								69525,
								69550
							],
							[
								69603,
								69630
							],
							[
								69697,
								69727
							],
							[
								69762,
								69786
							],
							[
								69878,
								69906
							],
							[
								69934,
								69963
							],
							[
								70058,
								70085
							],
							[
								70134,
								70160
							],
							[
								70188,
								70223
							],
							[
								70394,
								70420
							],
							[
								70467,
								70493
							],
							[
								70521,
								70548
							],
							[
								70575,
								70598
							],
							[
								70635,
								70660
							],
							[
								70707,
								70735
							],
							[
								70785,
								70810
							],
							[
								70857,
								70889
							],
							[
								70917,
								70942
							],
							[
								71030,
								71065
							],
							[
								71093,
								71124
							],
							[
								71152,
								71168
							],
							[
								71214,
								71231
							],
							[
								71270,
								71287
							],
							[
								71323,
								71344
							],
							[
								71355,
								71385
							],
							[
								71676,
								71693
							],
							[
								71728,
								71791
							],
							[
								71863,
								71895
							],
							[
								71987,
								72009
							],
							[
								72059,
								72102
							],
							[
								72349,
								72374
							],
							[
								72421,
								72451
							],
							[
								72469,
								72487
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function isObject(arg)",
							" function isAsync(fn)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function toString(arrayBuf, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							"getset",
							"getset",
							"bind(...args)",
							"fn =>",
							"getset",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							"getset",
							" function(...args)",
							"get object()",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function extend(dst, src, options = { enumerable: false })",
							"options = (desc, prop) =>",
							" function define(obj, ...args)",
							" function nonenumerable(props, obj = {})",
							"([k, v]) =>",
							" function enumerable(props, obj = {})",
							"([k, v]) =>",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function merge(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							" function weakAssoc(fn = (value, ...args) => Object.",
							"(value, ...args))",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"function* (re, str)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms`), logInterval = 0, //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = (target, key, value) =>",
							".ownKeys = target =>",
							" function propertyLookup(...args)",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function padFn(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							" function pad(s, n, char = ' ')",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function trim(str, charset)",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set, rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"*map(callback, thisArg)",
							"every(callback, thisArg)",
							"some(callback, thisArg)",
							"find(...args)",
							"findLast(...args)",
							" function mod(a, b)",
							"b : n =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"isArray = a =>",
							"ArrayFacade",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function bits(buffer)",
							" function dupArrayBuffer(buf, start, length)",
							" function getTypeName(v)",
							" function isArrayBuffer(buf)",
							" function isBigDecimal(num)",
							" function isBigFloat(num)",
							" function isBigInt(num)",
							" function isBool(value)",
							" function isJSFunction(fn)",
							" function isCFunction(fn)",
							" function isConstructor(fn)",
							" function isEmptyString(value)",
							" function isError(value)",
							" function isException(value)",
							" function isExtensible(value)",
							" function isFunction(value)",
							" function isHTMLDDA(value)",
							" function isInstanceOf(value, ctor)",
							" function isInteger(value)",
							" function isJobPending(id)",
							" function isLiveObject(obj)",
							" function isNull(value)",
							" function isNumber(value)",
							" function isUndefined(value)",
							" function isString(value)",
							" function isUninitialized(value)",
							" function isSymbol(value)",
							" function isUncatchableError(value)",
							" function isRegisteredClass(id)",
							" function rand()",
							" function randi()",
							" function randf()",
							" function srand(seed)",
							" function toArrayBuffer(value)",
							" function error()",
							" function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAZEgAARW50aXR5VHlwZSA9IG5hbWUgPT4KKG9iaiwgbmFtZSwgaWQpID0+CiAga2V5T2YgPSAob2JqLCB2YWx1ZSkgPT4KRGVyZWZlcmVuY2VFcnJvcgogIGNvbnN0cnVjdG9yKG9iaiwgaSwgcGF0aCwgZXJyb3IpCiAgYXBwbHlQYXRoKHBhdGgsIG9iaikKICBxdWVyeShyb290LCBzZWxlY3RvcnMsIHQgPSAocGF0aCwgcm9vdCkgPT4gcGF0aCkKICBxdWVyeUFsbChyb290LCBzZWxlY3RvcnMsIHQgPSAocGF0aCwgcm9vdCkgPT4gcGF0aCkKUHJvdG90eXBlcyggY29uc3RydWN0b3JzID0geyBEb2N1bWVudCwgTm9kZSwgTm9kZUxpc3QsIEVsZW1lbnQsIE5hbWVkTm9kZU1hcCwgQXR0ciwgVGV4dCwgQ29tbWVudCwgVG9rZW5MaXN0LCBDU1NTdHlsZURlY2xhcmF0aW9uLCB9LCApCkZhY3RvcnkodHlwZXMgPSAKKQogIHJlc3VsdCA9IGZ1bmN0aW9uIEZhY3RvcnkodHlwZSkKKGFjYywgcHJvdG8sIGkpID0+CiAgdHlwZXMgPSAodHlwZSwgLi4uYXJncykgPT4KICAuY2FjaGUgPSAodHlwZSwgLi4uYXJncykgPT4KKC4uLmEpID0+CiAgbmV3OiAoLi4uYXJncykgPT4KICBjYWNoZTogKC4uLmFyZ3MpID0+CkZhY3RvcnkKRmFjdG9yeQogIGZvcjogbm9kZSA9PgogIHNldDogKG5vZGUsIGZhY3RvcnkpID0+ClBhcnNlcgogIGNvbnN0cnVjdG9yKGZhY3RvcnkpCiAgcGFyc2VGcm9tU3RyaW5nKHN0ciwgZmlsZSkKICBwYXJzZUZyb21GaWxlKGZpbGUpCkdldE5vZGUob2JqLCBvd25lciwgZmFjdG9yeSkKSW50ZXJmYWNlCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBpc1NhbWVOb2RlKG90aGVyKQogIGhhc0NoaWxkTm9kZXMoKQogIGdldFJvb3ROb2RlKCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IGNoaWxkTm9kZXMoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2aW91c1NpYmxpbmcoKQogIGFwcGVuZENoaWxkKG5vZGUpCigpID0+CnYgPT4KICBpbnNlcnRCZWZvcmUobm9kZSwgcmVmKQogIHJlbW92ZUNoaWxkKG5vZGUpCiAgcmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCkKICBxdWVyeVNlbGVjdG9yKC4uLnNlbGVjdG9ycykKICBxdWVyeVNlbGVjdG9yQWxsKC4uLnNlbGVjdG9ycykKcCA9PgpOb2RlCiAgY29uc3RydWN0b3Iob2JqLCBwYXJlbnQpCiAgZ2V0IHBhdGgoKQogIHN0YXRpYyBjaGVjayhub2RlKQpOb2RlCkVsZW1lbnQKRG9jdW1lbnQKICBzdGF0aWMgcmF3KG5vZGUsIHJhdykKICBzdGF0aWMgY2hpbGRyZW4obm9kZSkKICBzdGF0aWMgb3duZXIobm9kZSkKICBzdGF0aWMgcGFyZW50KG5vZGUpCiAgc3RhdGljIGRvY3VtZW50KG5vZGUpCiAgc3RhdGljIGhpZXIobm9kZSwgcHJlZCA9IG5vZGUgPT4gdHJ1ZSkKICBzdGF0aWMgZG9jdW1lbnQobm9kZSkKKHsgbm9kZVR5cGUgfSkgPT4KICBzdGF0aWMgcGF0aChhcmcsIHBhdGgpCihhY2MsIGtleSkgPT4KICB0b1N0cmluZygpCiAgc3RhdGljIGZyb20ob2JqKQpOb2RlCkludGVyZmFjZQpOb2RlCk5vZGUKTWFrZUNhY2hlKGN0b3IsIHN0b3JlID0gCigpKQooa2V5LCAuLi5hcmdzKSA9PgpNYWtlQ2FjaGUyKGN0b3IsIHN0b3JlID0gCigpKQogIGtleSA9PgooaWQsIG93bmVyKSA9PgpOb2RlTGlzdAogIGNvbnN0cnVjdG9yKG9iaiwgb3duZXIpCiAgaXNFbGVtZW50ID0gcHJvcCA9PgogIGlzTGlzdCA9IHByb3AgPT4KICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgpOb2RlTGlzdApOb2RlTGlzdAogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKHRhcmdldCwgcHJvcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KICBwcm9wID0+CiAgZ2V0UHJvdG90eXBlT2Y6IHRhcmdldCA9PgpOb2RlTGlzdApOb2RlTGlzdApOYW1lZE5vZGVNYXAob2JqLCBvd25lcikKICBpc0F0dHIgPSBwcm9wID0+CiAgd3JhcEF0dHIgPSAodmFsdWUsIHByb3ApID0+CiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KTmFtZWROb2RlTWFwCk5hbWVkTm9kZU1hcAogIGdldCBwYXRoKCkKICBpdGVtKGtleSkKICBzZXROYW1lZEl0ZW0oYXR0cikKICByZW1vdmVOYW1lZEl0ZW0obmFtZSkKICBnZXROYW1lZEl0ZW0obmFtZSkKRWxlbWVudAogIGNvbnN0cnVjdG9yKG9iaiwgcGFyZW50KQogIGNsYXNzTGlzdDogKCkgPT4KICBnZXQgdGFnTmFtZSgpCiAgc2V0IHRhZ05hbWUodmFsdWUpCiAgc2V0IG5vZGVOYW1lKHZhbHVlKQogIGdldCBub2RlTmFtZSgpCiAgZ2V0IHBhcmVudEVsZW1lbnQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXQgY2hpbGRyZW4oKQogIGdldCBzdHlsZSgpCiAgZ2V0IGNoaWxkRWxlbWVudENvdW50KCkKICBnZXQgZmlyc3RFbGVtZW50Q2hpbGQoKQogIG4gPT4KICBnZXQgbGFzdEVsZW1lbnRDaGlsZCgpCiAgZ2V0IGlkKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgZ2V0QXR0cmlidXRlTmFtZXMoKQogIGF0dHJpYnV0ZXMgPT4KICBoYXNBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgaGFzQXR0cmlidXRlcygpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGdldEF0dHJpYnV0ZU5vZGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgYXR0cmlidXRlcyA9PgogIGdldCBpbm5lclRleHQoKQpFbGVtZW50CkRvY3VtZW50CihvYmosIG93bmVyKSA9PgogIHN0YXRpYyBhdHRyaWJ1dGVzKGVsZW0pCiAgc3RhdGljIHRvU3RyaW5nKGVsZW0pCkVsZW1lbnQKRG9jdW1lbnQKICBjb25zdHJ1Y3RvcihvYmosIGZhY3RvcnkpCiAgY3JlYXRlQXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSkKICBjcmVhdGVUZXh0Tm9kZSh0ZXh0KQogIGNyZWF0ZVRyZWVXYWxrZXIocm9vdCwgd2hhdFRvU2hvdyA9IFRyZWVXYWxrZXIuVFlQRV9BTEwsIGZpbHRlciA9IHsgYWNjZXB0Tm9kZTogbm9kZSA9PiBUcmVlV2Fsa2VyLkZJTFRFUl9BQ0NFUFQgfSwgZXhwYW5kRW50aXR5UmVmZXJlbmNlcyA9IGZhbHNlKQoobm9kZSwga2V5KSA9Pgoobm9kZSwgcHRyKSA9PgogIGdldCBib2R5KCkKRG9jdW1lbnQKRG9jdW1lbnQKQXR0cgogIGNvbnN0cnVjdG9yKHJhdywgb3duZXIpCiAgZ2V0IHBhdGgoKQogIGdldCBvd25lckVsZW1lbnQoKQogIGdldCBvd25lckRvY3VtZW50KCkKICBnZXQgbmFtZSgpCiAgc2V0IG5hbWUodmFsdWUpCiAgZ2V0IHZhbHVlKCkKICBzZXQgdmFsdWUodmFsdWUpCkF0dHIKVGV4dAogIGNvbnN0cnVjdG9yKGtleSwgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9PgogIHRvU3RyaW5nKCkKKGtleSwgb3duZXIpID0+ClRleHQKTm9kZQpUZXh0CkNvbW1lbnQKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KKCkgPT4KdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9Pgoobm9kZSwgb3duZXIpID0+CkNvbW1lbnQKTm9kZQpDb21tZW50ClRva2VuTGlzdAogIGNvbnN0cnVjdG9yKG93bmVyLCBrZXkgPSAnY2xhc3MnKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KKCkgPT4KdmFsdWUgPT4KICBnZXQgbGVuZ3RoKCkKICB2YWx1ZSA9PgogIGdldCB2YWx1ZSgpCiAgdmFsdWUgPT4KICBpdGVtKGluZGV4KQogIHZhbHVlID0+CiAgY29udGFpbnModG9rZW4pCiAgdmFsdWUgPT4KICBhZGQoLi4udG9rZW5zKQooYXJyLCBzZXQpID0+CiAgcmVtb3ZlKC4uLnRva2VucykKKGFyciwgc2V0KSA9PgogIHRvZ2dsZSh0b2tlbiwgZm9yY2UpCihhcnIsIHNldCkgPT4KICBzdXBwb3J0cyh0b2tlbikKICByZXBsYWNlKG9sZFRva2VuLCBuZXdUb2tlbikKKGFyciwgc2V0KSA9PgpUb2tlbkxpc3QKKGNvbnRhaW5lciwgaSkgPT4KVG9rZW5MaXN0CkNTU1N0eWxlRGVjbGFyYXRpb24KICBjb25zdHJ1Y3RvcihzdHlsZSwgb3duZXIpCiAgc3R5bGUgPSB2YWx1ZSA9PgogIGdldChrZXkpCiAgc2V0KGtleSwgdmFsdWUpCiAgcmVtb3ZlKGtleSkKICBjbGVhcigpCiprZXlzKCkKICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikKICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkKICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3ApCiAgb3duS2V5cyh0YXJnZXQpCiAgayA9PgogIHNldFByb3BlcnR5KGssIHYpCiAgaXRlbShpbmRleCkKICBnZXRQcm9wZXJ0eVZhbHVlKGtleSkKICBnZXRQcm9wZXJ0eVByaW9yaXR5KGtleSkKICByZW1vdmVQcm9wZXJ0eShrZXkpCiAgZ2V0IGNzc1RleHQoKQogIHNldCBjc3NUZXh0KHZhbHVlKQogIHBhcnNlU3R5bGUoc3RyKQogIGl0ZW0gPT4KICBpdGVtID0+CihhY2MsIFtrLCB2XSkgPT4KICBmb3JtYXRTdHlsZShzdHlsZXMsIGVvbCA9ICc7Jywgc3BjID0gJyAnLCBpbmQgPSAnJykKKFtrLCB2XSkgPT4KQ1NTU3R5bGVEZWNsYXJhdGlvbgogIGdldCBwYXJlbnRSdWxlKCkKICBnZXQgY3NzRmxvYXQoKQpTZXJpYWxpemVyCiAgc2VyaWFsaXplVG9TdHJpbmcobm9kZSkKR2V0VHlwZShyYXcsIG93bmVyLCBjdG9yKQAAAAAAAAAAwiYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					47,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/components.js",
						"symkeys":
						[
							[
								685,
								744
							],
							[
								981,
								989
							],
							[
								1252,
								1272
							],
							[
								1306,
								1324
							],
							[
								1356,
								1376
							],
							[
								1408,
								1428
							],
							[
								1528,
								1548
							],
							[
								2218,
								2249
							],
							[
								2355,
								2409
							],
							[
								2594,
								2612
							],
							[
								3101,
								3124
							],
							[
								3543,
								3558
							],
							[
								3996,
								4069
							],
							[
								4199,
								4219
							],
							[
								4343,
								4360
							],
							[
								5033,
								5101
							],
							[
								5191,
								5199
							],
							[
								5414,
								5430
							],
							[
								5525,
								5542
							],
							[
								5785,
								5809
							],
							[
								6549,
								6631
							],
							[
								7009,
								7037
							],
							[
								7090,
								7095
							],
							[
								7155,
								7161
							],
							[
								7633,
								7661
							],
							[
								7702,
								7707
							],
							[
								7767,
								7773
							],
							[
								8249,
								8317
							],
							[
								8614,
								8672
							],
							[
								8743,
								8751
							],
							[
								8830,
								8913
							],
							[
								9204,
								9264
							],
							[
								9344,
								9392
							],
							[
								10733,
								10757
							],
							[
								12953,
								12973
							],
							[
								15139,
								15161
							],
							[
								15575,
								15595
							],
							[
								18792,
								18888
							],
							[
								19013,
								19021
							],
							[
								19141,
								19223
							],
							[
								19352,
								19360
							],
							[
								19500,
								19596
							],
							[
								19639,
								19654
							],
							[
								19783,
								19803
							],
							[
								20023,
								20128
							],
							[
								20238,
								20245
							],
							[
								20302,
								20316
							],
							[
								21426,
								21433
							],
							[
								21845,
								21860
							],
							[
								21922,
								21938
							],
							[
								21943,
								21957
							],
							[
								22290,
								22322
							],
							[
								22559,
								22567
							],
							[
								22599,
								22616
							],
							[
								22626,
								22633
							],
							[
								22643,
								22648
							],
							[
								22730,
								22734
							],
							[
								22880,
								22884
							],
							[
								22944,
								22948
							],
							[
								22972,
								22976
							],
							[
								23033,
								23037
							],
							[
								23161,
								23165
							],
							[
								23188,
								23192
							],
							[
								23211,
								23215
							],
							[
								23294,
								23308
							],
							[
								23323,
								23327
							],
							[
								23337,
								23342
							],
							[
								23373,
								23378
							],
							[
								23423,
								23436
							],
							[
								23454,
								23458
							],
							[
								23624,
								23637
							],
							[
								23659,
								23674
							],
							[
								24576,
								24616
							],
							[
								24938,
								24956
							],
							[
								25000,
								25018
							],
							[
								25609,
								25632
							],
							[
								25686,
								25694
							],
							[
								25735,
								25743
							],
							[
								26340,
								26358
							],
							[
								26512,
								26534
							],
							[
								26601,
								26647
							],
							[
								26743,
								26825
							],
							[
								28672,
								28806
							],
							[
								29490,
								29662
							],
							[
								29725,
								29739
							],
							[
								31071,
								31105
							],
							[
								31329,
								31334
							],
							[
								31815,
								31844
							],
							[
								32148,
								32174
							],
							[
								32510,
								32534
							],
							[
								32842,
								32885
							],
							[
								32989,
								33019
							],
							[
								33230,
								33257
							],
							[
								34593,
								34622
							],
							[
								34806,
								34833
							],
							[
								35081,
								35127
							],
							[
								36012,
								36070
							],
							[
								36191,
								36199
							],
							[
								36233,
								36241
							],
							[
								37151,
								37172
							],
							[
								38057,
								38065
							],
							[
								38157,
								38167
							],
							[
								38337,
								38349
							],
							[
								39275,
								39301
							],
							[
								39615,
								39692
							],
							[
								39885,
								39893
							],
							[
								39991,
								39999
							],
							[
								40447,
								40506
							],
							[
								40764,
								40785
							],
							[
								40825,
								40847
							],
							[
								40970,
								40981
							],
							[
								41414,
								41451
							],
							[
								41521,
								41539
							]
						],
						"symlist":
						[
							"Ruler = ({ handleChange, style = {}, class: className }) =>",
							"value =>",
							"pressingDown = () =>",
							"pressingUp = () =>",
							"stopPressing = () =>",
							"onChanged = value =>",
							"onChanged = value =>",
							"ClickHandler = callback => e =>",
							"ToggleHandler = (callback, getState, setState) => e =>",
							"MouseEvents = h =>",
							" (e, state) =>",
							" () =>",
							"Container = ({ className = 'panel', tag = 'div', children, ...props }) =>",
							"Button = allProps =>",
							"onPush = state =>",
							"Toggle = ({ className, images, fn, state, style = {}, ...props }) =>",
							"value =>",
							"onChange = () =>",
							"(component, i) =>",
							" function onPush(event)",
							"FloatingPanel = ({ children, className, onSize, onHide, style = {}, ...props }) =>",
							" function updateSize(value)",
							"() =>",
							" () =>",
							" function updateHide(value)",
							"() =>",
							" () =>",
							"Label = ({ className, text, title, tooltip, children, ...props }) =>",
							"DynamicLabel = ({ caption, title, children, ...props }) =>",
							"value =>",
							"Item = ({ className = 'item', title, tooltip, label, icon, children, ...props }) =>",
							"Icon = ({ className = 'icon', caption, image, ...props }) =>",
							"Progress = ({ className, percent, ...props }) =>",
							"SchematicIcon = props =>",
							"BoardIcon = props =>",
							"LibraryIcon = props =>",
							"GCodeIcon = props =>",
							"Conditional = ({ initialState, component = Fragment, className, children, signal, ...props }) =>",
							"value =>",
							"ShowHide = ({ initialState, component, className, children, signal, ...props }) =>",
							"value =>",
							"EditBox = ({ value = '', type = 'div', className, hidden = false, current, focus, ...props }) =>",
							".ref = input =>",
							".onSubmit = event =>",
							"File = ({ label, name, description, i, key, className = 'file', onPush, signal, data, doc, ...props }) =>",
							"data =>",
							"async state =>",
							"line =>",
							"tooltip = () =>",
							"onChange = () =>",
							"onPush = () =>",
							"pushHandler = i => (e, state) =>",
							"value =>",
							"list2re = list =>",
							"part =>",
							"() =>",
							"r =>",
							"p =>",
							"p =>",
							"p =>",
							"p =>",
							"p =>",
							"p =>",
							"p =>",
							"pred = name =>",
							"c =>",
							"re =>",
							"re =>",
							"({ name }) =>",
							"i =>",
							"({ name }) =>",
							"(value, key) =>",
							"ToolTipFn = ({ name, data, ...item }) =>",
							"([name, value]) =>",
							"([name, value]) =>",
							"sortCompare = (a, b) =>",
							"value =>",
							"value =>",
							"itemClass: item =>",
							"onChange: (...args) =>",
							"Panel = ({ className, children, ...props }) =>",
							"WrapInAspectBox = (enable, { width = '100%', aspect = 1, className }, children) =>",
							"TransformedElement = ({ type = 'div', id, aspect, listener, style = { position: 'relative' }, className, children = [], ...props }) =>",
							"Slider = ({ min = 0, max = 100, value: initialValue = 0, step = 1, name = 'slider', orient = 'horizontal', label, onChange = value => {}, style = {}, length, ...props }) =>",
							"onInput = e =>",
							"Canvas = ({ onInit, ...props }) =>",
							"() =>",
							" function handleMouseMove(e)",
							" function startDrawing(e)",
							" function stopDrawing()",
							"ColorWheel = ({ radius = 50, ...props }) =>",
							"onInit: (ctx, canvas, size) =>",
							" function drawCircle()",
							" function xy2polar(x, y)",
							" function rad2deg(rad)",
							" function hsv2rgb(hue, saturation, value)",
							"CrossHair = ({ position, show, radius = 20, ...props }) =>",
							"value =>",
							"value =>",
							"MoveCursor = props =>",
							"value =>",
							"element =>",
							"(e, prev) =>",
							" function onMouseWheel(e)",
							"Fence = ({ children, style = {}, sizeListener, aspectListener, ...props }) =>",
							"value =>",
							"value =>",
							"Zoomable = ({ type = 'div', style, children, ...props }) =>",
							" function onPan(arg)",
							" function onZoom(arg)",
							"ref = el =>",
							"DisplayList = ({ data, ...props }) =>",
							"async function* ()"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					48,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								106,
								126
							],
							[
								316,
								332
							],
							[
								386,
								405
							],
							[
								440,
								456
							],
							[
								516,
								532
							],
							[
								553,
								557
							],
							[
								595,
								629
							],
							[
								652,
								684
							],
							[
								707,
								750
							],
							[
								2579,
								2598
							],
							[
								2696,
								2712
							],
							[
								2774,
								2792
							],
							[
								2856,
								2875
							],
							[
								2940,
								2949
							],
							[
								3004,
								3021
							],
							[
								3084,
								3101
							],
							[
								3164,
								3178
							],
							[
								3238,
								3253
							],
							[
								3314,
								3329
							],
							[
								3390,
								3398
							],
							[
								3452,
								3464
							],
							[
								3522,
								3532
							],
							[
								3588,
								3599
							],
							[
								3656,
								3664
							],
							[
								3718,
								3740
							],
							[
								3808,
								3823
							],
							[
								3884,
								3906
							],
							[
								3974,
								3990
							],
							[
								4052,
								4068
							],
							[
								4130,
								4142
							],
							[
								4200,
								4212
							],
							[
								4270,
								4283
							],
							[
								4342,
								4360
							],
							[
								4418,
								4436
							],
							[
								4500,
								4522
							],
							[
								4590,
								4617
							],
							[
								4690,
								4707
							],
							[
								4764,
								4781
							],
							[
								4838,
								4855
							],
							[
								4902,
								4918
							],
							[
								5001,
								5017
							],
							[
								5089,
								5105
							],
							[
								5177,
								5194
							],
							[
								5251,
								5271
							],
							[
								5330,
								5350
							],
							[
								5430,
								5449
							],
							[
								5525,
								5532
							],
							[
								5560,
								5580
							],
							[
								5650,
								5665
							],
							[
								5726,
								5752
							],
							[
								5823,
								5839
							],
							[
								5895,
								5908
							],
							[
								5976,
								5994
							],
							[
								6067,
								6080
							],
							[
								6136,
								6150
							],
							[
								6253,
								6276
							],
							[
								6337,
								6358
							],
							[
								8242,
								8281
							],
							[
								8703,
								8715
							],
							[
								8749,
								8761
							],
							[
								8777,
								8790
							],
							[
								8973,
								9021
							],
							[
								11355,
								11359
							],
							[
								11390,
								11399
							],
							[
								11537,
								11556
							],
							[
								12070,
								12089
							],
							[
								12704,
								12747
							],
							[
								13128,
								13161
							],
							[
								13440,
								13469
							],
							[
								13516,
								13537
							],
							[
								13566,
								13582
							],
							[
								13675,
								13705
							],
							[
								13729,
								13745
							],
							[
								13746,
								13769
							],
							[
								13867,
								13902
							],
							[
								13926,
								13942
							],
							[
								13943,
								13966
							],
							[
								14064,
								14097
							],
							[
								14147,
								14170
							],
							[
								14264,
								14297
							],
							[
								14551,
								14572
							],
							[
								14650,
								14656
							],
							[
								14673,
								14689
							],
							[
								14841,
								14853
							],
							[
								14866,
								14877
							],
							[
								14890,
								14911
							],
							[
								14947,
								14958
							],
							[
								15205,
								15211
							],
							[
								15224,
								15240
							],
							[
								15413,
								15418
							],
							[
								15432,
								15441
							],
							[
								15504,
								15510
							],
							[
								15558,
								15564
							],
							[
								15582,
								15595
							],
							[
								15651,
								15656
							],
							[
								15690,
								15696
							],
							[
								15728,
								15750
							],
							[
								15820,
								15826
							],
							[
								15842,
								15858
							],
							[
								15884,
								15890
							],
							[
								15910,
								15931
							],
							[
								16037,
								16049
							],
							[
								16152,
								16179
							],
							[
								16224,
								16230
							],
							[
								16275,
								16287
							],
							[
								16317,
								16350
							],
							[
								16483,
								16489
							],
							[
								16600,
								16612
							],
							[
								16666,
								16678
							],
							[
								16826,
								16837
							],
							[
								16879,
								16912
							],
							[
								17045,
								17054
							],
							[
								17172,
								17193
							],
							[
								17254,
								17275
							],
							[
								17433,
								17447
							],
							[
								17496,
								17535
							],
							[
								17612,
								17629
							],
							[
								17752,
								17766
							],
							[
								17928,
								17945
							],
							[
								18086,
								18103
							],
							[
								18134,
								18151
							],
							[
								18251,
								18268
							],
							[
								18560,
								18574
							],
							[
								18620,
								18643
							],
							[
								18700,
								18707
							],
							[
								18725,
								18732
							],
							[
								18757,
								18782
							],
							[
								18842,
								18849
							],
							[
								18870,
								18877
							],
							[
								18907,
								18962
							],
							[
								19067,
								19074
							],
							[
								19212,
								19236
							],
							[
								19286,
								19290
							],
							[
								19330,
								19357
							],
							[
								19587,
								19607
							],
							[
								19637,
								19648
							],
							[
								19748,
								19783
							],
							[
								19823,
								19841
							],
							[
								20079,
								20090
							],
							[
								20341,
								20352
							],
							[
								20455,
								20466
							],
							[
								20617,
								20629
							],
							[
								20739,
								20759
							],
							[
								20857,
								20862
							],
							[
								20930,
								20951
							],
							[
								20975,
								20985
							],
							[
								21021,
								21080
							],
							[
								21147,
								21172
							],
							[
								21554,
								21584
							],
							[
								21839,
								21879
							],
							[
								22014,
								22025
							],
							[
								22069,
								22106
							],
							[
								22241,
								22252
							],
							[
								22298,
								22354
							],
							[
								22517,
								22581
							],
							[
								22730,
								22781
							],
							[
								23448,
								23510
							],
							[
								23692,
								23717
							],
							[
								23814,
								23839
							],
							[
								23952,
								24021
							],
							[
								24110,
								24132
							],
							[
								24166,
								24177
							],
							[
								24200,
								24222
							],
							[
								24464,
								24536
							],
							[
								24639,
								24710
							],
							[
								24806,
								24857
							],
							[
								25029,
								25076
							],
							[
								25143,
								25186
							],
							[
								25316,
								25373
							],
							[
								25467,
								25473
							],
							[
								25487,
								25493
							],
							[
								25797,
								25831
							],
							[
								26132,
								26156
							],
							[
								26225,
								26230
							],
							[
								26259,
								26264
							],
							[
								26423,
								26436
							],
							[
								26492,
								26544
							],
							[
								26550,
								26567
							],
							[
								26597,
								26606
							],
							[
								26622,
								26632
							],
							[
								26644,
								26661
							],
							[
								26684,
								26693
							],
							[
								26694,
								26717
							],
							[
								26762,
								26786
							],
							[
								26872,
								26927
							],
							[
								27205,
								27249
							],
							[
								27419,
								27453
							],
							[
								27519,
								27555
							],
							[
								27630,
								27647
							],
							[
								27973,
								28018
							],
							[
								28153,
								28166
							],
							[
								28265,
								28278
							],
							[
								28328,
								28371
							],
							[
								28372,
								28391
							],
							[
								28406,
								28410
							],
							[
								28533,
								28553
							],
							[
								28599,
								28631
							],
							[
								28659,
								28685
							],
							[
								29027,
								29046
							],
							[
								29253,
								29302
							],
							[
								29371,
								29378
							],
							[
								29463,
								29477
							],
							[
								29558,
								29568
							],
							[
								29674,
								29678
							],
							[
								29709,
								29729
							],
							[
								29775,
								29788
							],
							[
								29838,
								29850
							],
							[
								29992,
								30007
							],
							[
								30423,
								30463
							],
							[
								30612,
								30616
							],
							[
								30649,
								30657
							],
							[
								30686,
								30690
							],
							[
								31028,
								31041
							],
							[
								31114,
								31134
							],
							[
								31378,
								31525
							],
							[
								31534,
								31583
							],
							[
								31590,
								31627
							],
							[
								31876,
								31896
							],
							[
								32098,
								32113
							],
							[
								32399,
								32422
							],
							[
								32627,
								32645
							],
							[
								32858,
								32872
							],
							[
								32933,
								32945
							],
							[
								33043,
								33052
							],
							[
								33328,
								33344
							],
							[
								33780,
								33816
							],
							[
								33911,
								33920
							],
							[
								34096,
								34107
							],
							[
								34118,
								34126
							],
							[
								34175,
								34187
							],
							[
								34432,
								34444
							],
							[
								34627,
								34653
							],
							[
								34672,
								34676
							],
							[
								34763,
								34787
							],
							[
								34865,
								34894
							],
							[
								34948,
								34979
							],
							[
								34986,
								34989
							],
							[
								35033,
								35046
							],
							[
								35146,
								35217
							],
							[
								35243,
								35269
							],
							[
								35413,
								35443
							],
							[
								35600,
								35620
							],
							[
								35700,
								35733
							],
							[
								35890,
								35950
							],
							[
								36020,
								36037
							],
							[
								36098,
								36122
							],
							[
								36206,
								36262
							],
							[
								36273,
								36289
							],
							[
								36430,
								36461
							],
							[
								36501,
								36552
							],
							[
								36922,
								36950
							],
							[
								37104,
								37168
							],
							[
								37228,
								37243
							],
							[
								37309,
								37323
							],
							[
								37361,
								37384
							],
							[
								37576,
								37594
							],
							[
								37785,
								37855
							],
							[
								38004,
								38028
							],
							[
								38047,
								38055
							],
							[
								38091,
								38106
							],
							[
								38233,
								38246
							],
							[
								38401,
								38417
							],
							[
								38612,
								38638
							],
							[
								38653,
								38675
							],
							[
								38891,
								38895
							],
							[
								39081,
								39103
							],
							[
								39125,
								39135
							],
							[
								39153,
								39166
							],
							[
								39264,
								39286
							],
							[
								39308,
								39318
							],
							[
								39336,
								39349
							],
							[
								39455,
								39477
							],
							[
								39503,
								39513
							],
							[
								39531,
								39544
							],
							[
								39580,
								39602
							],
							[
								39623,
								39633
							],
							[
								39651,
								39664
							],
							[
								39684,
								39725
							],
							[
								40014,
								40037
							],
							[
								40118,
								40140
							],
							[
								40214,
								40234
							],
							[
								40361,
								40372
							],
							[
								40405,
								40422
							],
							[
								40586,
								40605
							],
							[
								40640,
								40662
							],
							[
								40794,
								40815
							],
							[
								40953,
								40973
							],
							[
								41040,
								41063
							],
							[
								41139,
								41161
							],
							[
								41270,
								41294
							],
							[
								41351,
								41363
							],
							[
								41536,
								41554
							],
							[
								41611,
								41623
							],
							[
								41777,
								41800
							],
							[
								41932,
								41948
							],
							[
								41995,
								42008
							],
							[
								42045,
								42112
							],
							[
								42148,
								42170
							],
							[
								42199,
								42209
							],
							[
								42225,
								42238
							],
							[
								42289,
								42302
							],
							[
								42369,
								42392
							],
							[
								42511,
								42533
							],
							[
								42621,
								42634
							],
							[
								42687,
								42703
							],
							[
								42741,
								42745
							],
							[
								42855,
								42892
							],
							[
								42903,
								42913
							],
							[
								42922,
								42951
							],
							[
								43168,
								43184
							],
							[
								43206,
								43217
							],
							[
								43272,
								43299
							],
							[
								43346,
								43364
							],
							[
								43438,
								43473
							],
							[
								43606,
								43628
							],
							[
								43666,
								43682
							],
							[
								43697,
								43704
							],
							[
								43726,
								43742
							],
							[
								43780,
								43808
							],
							[
								44027,
								44044
							],
							[
								44045,
								44054
							],
							[
								44106,
								44123
							],
							[
								44124,
								44133
							],
							[
								44193,
								44210
							],
							[
								44211,
								44234
							],
							[
								44290,
								44314
							],
							[
								46980,
								47008
							],
							[
								47439,
								47443
							],
							[
								47572,
								47585
							],
							[
								47901,
								47913
							],
							[
								48177,
								48190
							],
							[
								48296,
								48310
							],
							[
								49204,
								49232
							],
							[
								49349,
								49362
							],
							[
								49520,
								49544
							],
							[
								49637,
								49671
							],
							[
								49792,
								49831
							],
							[
								49878,
								49915
							],
							[
								49962,
								49988
							],
							[
								50178,
								50226
							],
							[
								50274,
								50318
							],
							[
								50499,
								50522
							],
							[
								50666,
								50698
							],
							[
								51011,
								51065
							],
							[
								51423,
								51475
							],
							[
								51648,
								51674
							],
							[
								51958,
								51974
							],
							[
								52141,
								52152
							],
							[
								52354,
								52406
							],
							[
								52650,
								52694
							],
							[
								53010,
								53046
							],
							[
								53203,
								53219
							],
							[
								53233,
								53255
							],
							[
								53368,
								53374
							],
							[
								53478,
								53491
							],
							[
								55130,
								55168
							],
							[
								55268,
								55284
							],
							[
								55357,
								55401
							],
							[
								55765,
								55785
							],
							[
								55985,
								56027
							],
							[
								56222,
								56253
							],
							[
								56303,
								56345
							],
							[
								56465,
								56489
							],
							[
								56747,
								56757
							],
							[
								56810,
								56814
							],
							[
								56853,
								56880
							],
							[
								56927,
								56939
							],
							[
								57009,
								57021
							],
							[
								57084,
								57109
							],
							[
								57154,
								57185
							],
							[
								57196,
								57213
							],
							[
								57354,
								57376
							],
							[
								57496,
								57518
							],
							[
								57638,
								57673
							],
							[
								57721,
								57748
							],
							[
								57839,
								57877
							],
							[
								58086,
								58134
							],
							[
								58722,
								58749
							],
							[
								58952,
								58966
							],
							[
								59015,
								59021
							],
							[
								59062,
								59128
							],
							[
								59130,
								59134
							],
							[
								59292,
								59299
							],
							[
								59391,
								59401
							],
							[
								59512,
								59521
							],
							[
								59627,
								59653
							],
							[
								59786,
								59817
							],
							[
								59982,
								60005
							],
							[
								60144,
								60168
							],
							[
								60338,
								60361
							],
							[
								60530,
								60543
							],
							[
								60609,
								60626
							],
							[
								60707,
								60726
							],
							[
								60777,
								60785
							],
							[
								60833,
								60842
							],
							[
								60876,
								60885
							],
							[
								60919,
								60928
							],
							[
								60962,
								60971
							],
							[
								61005,
								61014
							],
							[
								61047,
								61056
							],
							[
								61090,
								61099
							],
							[
								61133,
								61142
							],
							[
								61167,
								61201
							],
							[
								61345,
								61390
							],
							[
								61456,
								61466
							],
							[
								61505,
								61515
							],
							[
								61535,
								61545
							],
							[
								61573,
								61598
							],
							[
								61729,
								61754
							],
							[
								61852,
								61887
							],
							[
								61940,
								61974
							],
							[
								62056,
								62092
							],
							[
								62213,
								62217
							],
							[
								62248,
								62252
							],
							[
								62295,
								62299
							],
							[
								62327,
								62331
							],
							[
								62360,
								62388
							],
							[
								62518,
								62522
							],
							[
								62579,
								62610
							],
							[
								62949,
								62985
							],
							[
								63234,
								63259
							],
							[
								63344,
								63386
							],
							[
								63520,
								63560
							],
							[
								66490,
								66516
							],
							[
								66750,
								66774
							],
							[
								66967,
								66990
							],
							[
								67089,
								67127
							],
							[
								67309,
								67320
							],
							[
								67355,
								67376
							],
							[
								67445,
								67452
							],
							[
								67497,
								67511
							],
							[
								67544,
								67555
							],
							[
								67677,
								67684
							],
							[
								67767,
								67777
							],
							[
								67879,
								67888
							],
							[
								67985,
								68011
							],
							[
								68135,
								68166
							],
							[
								68462,
								68484
							],
							[
								68749,
								68793
							],
							[
								68884,
								68908
							],
							[
								68939,
								68967
							],
							[
								69033,
								69060
							],
							[
								69152,
								69177
							],
							[
								69265,
								69288
							],
							[
								69374,
								69397
							],
							[
								69445,
								69471
							],
							[
								69525,
								69550
							],
							[
								69603,
								69630
							],
							[
								69697,
								69727
							],
							[
								69762,
								69786
							],
							[
								69878,
								69906
							],
							[
								69934,
								69963
							],
							[
								70058,
								70085
							],
							[
								70134,
								70160
							],
							[
								70188,
								70223
							],
							[
								70394,
								70420
							],
							[
								70467,
								70493
							],
							[
								70521,
								70548
							],
							[
								70575,
								70598
							],
							[
								70635,
								70660
							],
							[
								70707,
								70735
							],
							[
								70785,
								70810
							],
							[
								70857,
								70889
							],
							[
								70917,
								70942
							],
							[
								71030,
								71065
							],
							[
								71093,
								71124
							],
							[
								71152,
								71168
							],
							[
								71214,
								71231
							],
							[
								71270,
								71287
							],
							[
								71323,
								71344
							],
							[
								71355,
								71385
							],
							[
								71676,
								71693
							],
							[
								71728,
								71791
							],
							[
								71863,
								71895
							],
							[
								71987,
								72009
							],
							[
								72059,
								72102
							],
							[
								72349,
								72374
							],
							[
								72421,
								72451
							],
							[
								72469,
								72487
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function isObject(arg)",
							" function isAsync(fn)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function toString(arrayBuf, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							"getset",
							"getset",
							"bind(...args)",
							"fn =>",
							"getset",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							"getset",
							" function(...args)",
							"get object()",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function extend(dst, src, options = { enumerable: false })",
							"options = (desc, prop) =>",
							" function define(obj, ...args)",
							" function nonenumerable(props, obj = {})",
							"([k, v]) =>",
							" function enumerable(props, obj = {})",
							"([k, v]) =>",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function merge(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							" function weakAssoc(fn = (value, ...args) => Object.",
							"(value, ...args))",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"function* (re, str)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms`), logInterval = 0, //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = (target, key, value) =>",
							".ownKeys = target =>",
							" function propertyLookup(...args)",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function padFn(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							" function pad(s, n, char = ' ')",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function trim(str, charset)",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set, rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"*map(callback, thisArg)",
							"every(callback, thisArg)",
							"some(callback, thisArg)",
							"find(...args)",
							"findLast(...args)",
							" function mod(a, b)",
							"b : n =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"isArray = a =>",
							"ArrayFacade",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function bits(buffer)",
							" function dupArrayBuffer(buf, start, length)",
							" function getTypeName(v)",
							" function isArrayBuffer(buf)",
							" function isBigDecimal(num)",
							" function isBigFloat(num)",
							" function isBigInt(num)",
							" function isBool(value)",
							" function isJSFunction(fn)",
							" function isCFunction(fn)",
							" function isConstructor(fn)",
							" function isEmptyString(value)",
							" function isError(value)",
							" function isException(value)",
							" function isExtensible(value)",
							" function isFunction(value)",
							" function isHTMLDDA(value)",
							" function isInstanceOf(value, ctor)",
							" function isInteger(value)",
							" function isJobPending(id)",
							" function isLiveObject(obj)",
							" function isNull(value)",
							" function isNumber(value)",
							" function isUndefined(value)",
							" function isString(value)",
							" function isUninitialized(value)",
							" function isSymbol(value)",
							" function isUncatchableError(value)",
							" function isRegisteredClass(id)",
							" function rand()",
							" function randi()",
							" function randf()",
							" function srand(seed)",
							" function toArrayBuffer(value)",
							" function error()",
							" function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABhDAAAUnVsZXIgPSAoeyBoYW5kbGVDaGFuZ2UsIHN0eWxlID0ge30sIGNsYXNzOiBjbGFzc05hbWUgfSkgPT4KICB2YWx1ZSA9PgogIHByZXNzaW5nRG93biA9ICgpID0+CiAgcHJlc3NpbmdVcCA9ICgpID0+CiAgc3RvcFByZXNzaW5nID0gKCkgPT4KICBvbkNoYW5nZWQgPSB2YWx1ZSA9PgogIG9uQ2hhbmdlZCA9IHZhbHVlID0+CkNsaWNrSGFuZGxlciA9IGNhbGxiYWNrID0+IGUgPT4KVG9nZ2xlSGFuZGxlciA9IChjYWxsYmFjaywgZ2V0U3RhdGUsIHNldFN0YXRlKSA9PiBlID0+Ck1vdXNlRXZlbnRzID0gaCA9PgooZSwgc3RhdGUpID0+CigpID0+CkNvbnRhaW5lciA9ICh7IGNsYXNzTmFtZSA9ICdwYW5lbCcsIHRhZyA9ICdkaXYnLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4KQnV0dG9uID0gYWxsUHJvcHMgPT4KICBvblB1c2ggPSBzdGF0ZSA9PgpUb2dnbGUgPSAoeyBjbGFzc05hbWUsIGltYWdlcywgZm4sIHN0YXRlLCBzdHlsZSA9IHt9LCAuLi5wcm9wcyB9KSA9PgogIHZhbHVlID0+CiAgb25DaGFuZ2UgPSAoKSA9PgooY29tcG9uZW50LCBpKSA9PgogIG9uUHVzaChldmVudCkKRmxvYXRpbmdQYW5lbCA9ICh7IGNoaWxkcmVuLCBjbGFzc05hbWUsIG9uU2l6ZSwgb25IaWRlLCBzdHlsZSA9IHt9LCAuLi5wcm9wcyB9KSA9PgogIHVwZGF0ZVNpemUodmFsdWUpCigpID0+CigpID0+CiAgdXBkYXRlSGlkZSh2YWx1ZSkKKCkgPT4KKCkgPT4KTGFiZWwgPSAoeyBjbGFzc05hbWUsIHRleHQsIHRpdGxlLCB0b29sdGlwLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4KRHluYW1pY0xhYmVsID0gKHsgY2FwdGlvbiwgdGl0bGUsIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHZhbHVlID0+Ckl0ZW0gPSAoeyBjbGFzc05hbWUgPSAnaXRlbScsIHRpdGxlLCB0b29sdGlwLCBsYWJlbCwgaWNvbiwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+Ckljb24gPSAoeyBjbGFzc05hbWUgPSAnaWNvbicsIGNhcHRpb24sIGltYWdlLCAuLi5wcm9wcyB9KSA9PgpQcm9ncmVzcyA9ICh7IGNsYXNzTmFtZSwgcGVyY2VudCwgLi4ucHJvcHMgfSkgPT4KU2NoZW1hdGljSWNvbiA9IHByb3BzID0+CkJvYXJkSWNvbiA9IHByb3BzID0+CkxpYnJhcnlJY29uID0gcHJvcHMgPT4KR0NvZGVJY29uID0gcHJvcHMgPT4KQ29uZGl0aW9uYWwgPSAoeyBpbml0aWFsU3RhdGUsIGNvbXBvbmVudCA9IEZyYWdtZW50LCBjbGFzc05hbWUsIGNoaWxkcmVuLCBzaWduYWwsIC4uLnByb3BzIH0pID0+CiAgdmFsdWUgPT4KU2hvd0hpZGUgPSAoeyBpbml0aWFsU3RhdGUsIGNvbXBvbmVudCwgY2xhc3NOYW1lLCBjaGlsZHJlbiwgc2lnbmFsLCAuLi5wcm9wcyB9KSA9PgogIHZhbHVlID0+CkVkaXRCb3ggPSAoeyB2YWx1ZSA9ICcnLCB0eXBlID0gJ2RpdicsIGNsYXNzTmFtZSwgaGlkZGVuID0gZmFsc2UsIGN1cnJlbnQsIGZvY3VzLCAuLi5wcm9wcyB9KSA9PgogIC5yZWYgPSBpbnB1dCA9PgogIC5vblN1Ym1pdCA9IGV2ZW50ID0+CkZpbGUgPSAoeyBsYWJlbCwgbmFtZSwgZGVzY3JpcHRpb24sIGksIGtleSwgY2xhc3NOYW1lID0gJ2ZpbGUnLCBvblB1c2gsIHNpZ25hbCwgZGF0YSwgZG9jLCAuLi5wcm9wcyB9KSA9PgogIGRhdGEgPT4KICBzdGF0ZSA9PgogIGxpbmUgPT4KICB0b29sdGlwID0gKCkgPT4KICBvbkNoYW5nZSA9ICgpID0+CiAgb25QdXNoID0gKCkgPT4KICBwdXNoSGFuZGxlciA9IGkgPT4gKGUsIHN0YXRlKSA9PgogIHZhbHVlID0+CiAgbGlzdDJyZSA9IGxpc3QgPT4KICBwYXJ0ID0+CigpID0+CiAgciA9PgogIHAgPT4KICBwID0+CiAgcCA9PgogIHAgPT4KICBwID0+CiAgcCA9PgogIHAgPT4KICBwcmVkID0gbmFtZSA9PgogIGMgPT4KICByZSA9PgogIHJlID0+Cih7IG5hbWUgfSkgPT4KICBpID0+Cih7IG5hbWUgfSkgPT4KKHZhbHVlLCBrZXkpID0+ClRvb2xUaXBGbiA9ICh7IG5hbWUsIGRhdGEsIC4uLml0ZW0gfSkgPT4KKFtuYW1lLCB2YWx1ZV0pID0+CihbbmFtZSwgdmFsdWVdKSA9PgogIHNvcnRDb21wYXJlID0gKGEsIGIpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIGl0ZW1DbGFzczogaXRlbSA9PgogIG9uQ2hhbmdlOiAoLi4uYXJncykgPT4KUGFuZWwgPSAoeyBjbGFzc05hbWUsIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgpXcmFwSW5Bc3BlY3RCb3ggPSAoZW5hYmxlLCB7IHdpZHRoID0gJzEwMCUnLCBhc3BlY3QgPSAxLCBjbGFzc05hbWUgfSwgY2hpbGRyZW4pID0+ClRyYW5zZm9ybWVkRWxlbWVudCA9ICh7IHR5cGUgPSAnZGl2JywgaWQsIGFzcGVjdCwgbGlzdGVuZXIsIHN0eWxlID0geyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9LCBjbGFzc05hbWUsIGNoaWxkcmVuID0gW10sIC4uLnByb3BzIH0pID0+ClNsaWRlciA9ICh7IG1pbiA9IDAsIG1heCA9IDEwMCwgdmFsdWU6IGluaXRpYWxWYWx1ZSA9IDAsIHN0ZXAgPSAxLCBuYW1lID0gJ3NsaWRlcicsIG9yaWVudCA9ICdob3Jpem9udGFsJywgbGFiZWwsIG9uQ2hhbmdlID0gdmFsdWUgPT4ge30sIHN0eWxlID0ge30sIGxlbmd0aCwgLi4ucHJvcHMgfSkgPT4KICBvbklucHV0ID0gZSA9PgpDYW52YXMgPSAoeyBvbkluaXQsIC4uLnByb3BzIH0pID0+CigpID0+CiAgaGFuZGxlTW91c2VNb3ZlKGUpCiAgc3RhcnREcmF3aW5nKGUpCiAgc3RvcERyYXdpbmcoKQpDb2xvcldoZWVsID0gKHsgcmFkaXVzID0gNTAsIC4uLnByb3BzIH0pID0+CiAgb25Jbml0OiAoY3R4LCBjYW52YXMsIHNpemUpID0+CiAgZHJhd0NpcmNsZSgpCiAgeHkycG9sYXIoeCwgeSkKICByYWQyZGVnKHJhZCkKICBoc3YycmdiKGh1ZSwgc2F0dXJhdGlvbiwgdmFsdWUpCkNyb3NzSGFpciA9ICh7IHBvc2l0aW9uLCBzaG93LCByYWRpdXMgPSAyMCwgLi4ucHJvcHMgfSkgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+Ck1vdmVDdXJzb3IgPSBwcm9wcyA9PgogIHZhbHVlID0+CiAgZWxlbWVudCA9PgooZSwgcHJldikgPT4KICBvbk1vdXNlV2hlZWwoZSkKRmVuY2UgPSAoeyBjaGlsZHJlbiwgc3R5bGUgPSB7fSwgc2l6ZUxpc3RlbmVyLCBhc3BlY3RMaXN0ZW5lciwgLi4ucHJvcHMgfSkgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+Clpvb21hYmxlID0gKHsgdHlwZSA9ICdkaXYnLCBzdHlsZSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgb25QYW4oYXJnKQogIG9uWm9vbShhcmcpCiAgcmVmID0gZWwgPT4KRGlzcGxheUxpc3QgPSAoeyBkYXRhLCAuLi5wcm9wcyB9KSA9PgooKQAAAAAAAAAAwiYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					49,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload.js",
						"symkeys":
						[
							[
								600,
								633
							],
							[
								655,
								659
							],
							[
								844,
								862
							],
							[
								919,
								947
							],
							[
								1046,
								1053
							],
							[
								1132,
								1149
							],
							[
								1214,
								1250
							],
							[
								1406,
								1443
							],
							[
								1993,
								2037
							],
							[
								2048,
								2067
							],
							[
								2089,
								2093
							],
							[
								2127,
								2136
							],
							[
								2170,
								2193
							],
							[
								2309,
								2334
							],
							[
								2414,
								2455
							],
							[
								2560,
								2566
							],
							[
								2659,
								2666
							],
							[
								2767,
								2813
							],
							[
								3029,
								3044
							],
							[
								3063,
								3078
							],
							[
								3094,
								3109
							],
							[
								3133,
								3148
							],
							[
								3170,
								3185
							],
							[
								3206,
								3221
							],
							[
								3239,
								3254
							],
							[
								3277,
								3292
							],
							[
								3392,
								3431
							],
							[
								3798,
								3817
							],
							[
								4437,
								4450
							],
							[
								4516,
								4556
							],
							[
								4636,
								4643
							],
							[
								4708,
								4713
							],
							[
								5278,
								5283
							],
							[
								5422,
								5427
							],
							[
								5625,
								5630
							],
							[
								5856,
								5862
							],
							[
								5940,
								5947
							],
							[
								6195,
								6200
							],
							[
								6686,
								6726
							],
							[
								6898,
								6902
							],
							[
								6917,
								6944
							],
							[
								7329,
								7355
							],
							[
								7419,
								7423
							],
							[
								7499,
								7508
							],
							[
								7561,
								7570
							],
							[
								7663,
								7670
							],
							[
								8068,
								8094
							],
							[
								8321,
								8325
							],
							[
								8445,
								8451
							],
							[
								8506,
								8523
							],
							[
								8593,
								8620
							],
							[
								8681,
								8694
							],
							[
								8796,
								8835
							],
							[
								9073,
								9098
							],
							[
								9124,
								9129
							],
							[
								9198,
								9215
							],
							[
								10190,
								10195
							],
							[
								10341,
								10355
							],
							[
								10399,
								10414
							],
							[
								10500,
								10515
							],
							[
								10600,
								10628
							],
							[
								10781,
								10798
							],
							[
								11079,
								11108
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"LineReader = () =>",
							"transform(chunk, controller)",
							"part =>",
							"flush(controller)",
							"async function* ReadIterator(stream)",
							"ListJSON = async (dir = 'uploads') =>",
							" function prioritySort(arr, predicates = [])",
							"matchPred = item =>",
							"p =>",
							"(a, b) =>",
							"function setLabel(text)",
							"function isComponent(obj)",
							"Table = ({ children, rows, ...props }) =>",
							"row =>",
							"cell =>",
							"PropertyList = ({ data, filter, ...props }) =>",
							" ([k, v]) =>",
							" ([k, v]) =>",
							" ([k, v]) =>",
							" ([k, v]) =>",
							" ([k, v]) =>",
							" ([k, v]) =>",
							" ([k, v]) =>",
							" ([k, v]) =>",
							"FileItem = ({ file, ref, ...props }) =>",
							"filter: ([k, v]) =>",
							"(coord, i) =>",
							"FileList = ({ files, ref, ...props }) =>",
							"file =>",
							" e =>",
							" e =>",
							" e =>",
							" e =>",
							"err =>",
							"resp =>",
							" e =>",
							"function FileAction(cmd, file, contents)",
							"r =>",
							"function UploadFiles(files)",
							"async function ListFiles()",
							"r =>",
							"upload =>",
							"(a, b) =>",
							"file =>",
							"function UploadFile(files)",
							"f =>",
							"err =>",
							"async response =>",
							"function UploadDone(upload)",
							"({ name }) =>",
							"function CreateWS(endpoint = 'uploads')",
							"restart = (delay = 10) =>",
							"() =>",
							".onmessage = e =>",
							"() =>",
							".onopen = e =>",
							".onclose = e =>",
							".onerror = e =>",
							"function XHRUpload(formData)",
							" function(e)",
							"function FileSelectHandler(e)"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 36203,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					26,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAN+BAAAAAAAA4IEAAAAAAAAAAAAA4IEAAAAAAADmgQAAAAAAAAAAAADmgQAAAAAAAOiBAAAAAAAAAAAAAOiBAAAAAAAA6YEAAAAAAAAAAAAA6YEAAAAAAADqgQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfgQAAAAAAAN+BAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOqBAAAAAAAA7IEAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqgQAAAAAAAOqBAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAAOuBAAAAAAAA7IEAAAAAAAAAAAAA7IEAAAAAAADtgQAAAAAAAAAAAADtgQAAAAAAAO6BAAAAAAAAAAAAAO6BAAAAAAAA74EAAAAAAAAAAAAA74EAAAAAAADwgQAAAAAAAAAAAADwgQAAAAAAAPGBAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrgQAAAAAAAOuBAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAPGBAAAAAAAA8oEAAAAAAAAAAAAA8oEAAAAAAADzgQAAAAAAAAAAAADzgQAAAAAAAPSBAAAAAAAAAAAAAPSBAAAAAAAA9YEAAAAAAAAAAAAA9YEAAAAAAAD2gQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxgQAAAAAAAPGBAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAPaBAAAAAAAA94EAAAAAAAAAAAAA94EAAAAAAAD4gQAAAAAAAAAAAAD4gQAAAAAAAPmBAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2gQAAAAAAAPaBAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPmBAAAAAAAA+oEAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5gQAAAAAAAPmBAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPqBAAAAAAAA/IEAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6gQAAAAAAAPqBAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "strien"
					},
					"BgAAAPuBAAAAAAAA/IEAAAAAAAAAAAAA/IEAAAAAAAD9gQAAAAAAAAAAAAD9gQAAAAAAAP6BAAAAAAAAAAAAAP6BAAAAAAAA/4EAAAAAAAAAAAAA/4EAAAAAAAAAggAAAAAAAAAAAAAAggAAAAAAAAGCAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7gQAAAAAAAPuBAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAAACCAAAAAAAAAIIAAAAAAAABAAAAbv+BAAAAAAAA/4EAAAAAAAABAAAAZQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABggAAAAAAAAGCAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "ng"
					},
					"AgAAAP+BAAAAAAAAAIIAAAAAAAAAAAAAAIIAAAAAAAABggAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/gQAAAAAAAP+BAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\ntoString"
					},
					"DAAAAAOCAAAAAAAABIIAAAAAAAAAAAAABIIAAAAAAAAMggAAAAAAAAAAAAAEggAAAAAAAASCAAAAAAAACAAAACAgICAgICAgBIIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA+CAAAAAAAAAAAAAA+CAAAAAAAAEIIAAAAAAAAAAAAAEIIAAAAAAAARggAAAAAAAAAAAAARggAAAAAAABKCAAAAAAAAAAAAABKCAAAAAAAAE4IAAAAAAAAAAAAAE4IAAAAAAAAUggAAAAAAAAAAAAAUggAAAAAAABWCAAAAAAAAAAAAABWCAAAAAAAAFoIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADggAAAAAAAAOCAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABaCAAAAAAAAGIIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWggAAAAAAABaCAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BAAAABeCAAAAAAAAGIIAAAAAAAAAAAAAGIIAAAAAAAAZggAAAAAAAAAAAAAZggAAAAAAABqCAAAAAAAAAAAAABqCAAAAAAAAG4IAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXggAAAAAAABeCAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAByCAAAAAAAAHYIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcggAAAAAAAByCAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "data="
					},
					"BQAAAA6CAAAAAAAAD4IAAAAAAAAAAAAAD4IAAAAAAAAQggAAAAAAAAAAAAAQggAAAAAAABGCAAAAAAAAAAAAABGCAAAAAAAAEoIAAAAAAAAAAAAAEoIAAAAAAAATggAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOggAAAAAAAA6CAAAAAAAAAAAAAACAVkA"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAACKCAAAAAAAAI4IAAAAAAAAAAAAAI4IAAAAAAAAtggAAAAAAAAAAAAAjggAAAAAAACOCAAAAAAAACgAAACAgICAgICAgICAjggAAAAAAACuCAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiggAAAAAAACKCAAAAAAAA////////738"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABKCAAAAAAAAE4IAAAAAAAAAAAAAJIIAAAAAAAAkggAAAAAAAAgAAAAgICAgICAgIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASggAAAAAAABKCAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABSCAAAAAAAAFYIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUggAAAAAAABSCAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAFKCAAAAAAAAVIIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSggAAAAAAAFKCAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFOCAAAAAAAAVIIAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTggAAAAAAAFOCAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAFSCAAAAAAAAVYIAAAAAAAAAAAAAVYIAAAAAAABWggAAAAAAAAAAAABWggAAAAAAAFeCAAAAAAAAAAAAAFeCAAAAAAAAWIIAAAAAAAAAAAAAWIIAAAAAAABZggAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUggAAAAAAAFSCAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAAFmCAAAAAAAAWYIAAAAAAAAKAAAAYCAke2RhdGF9YA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZggAAAAAAAGOCAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					12,
					"right_delete",
					null,
					"DAAAAAOCAAAAAAAAA4IAAAAAAAABAAAACgOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAZA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADggAAAAAAAAOCAAAAAAAAAAAAAACwfEA"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " d"
					},
					"AgAAAAOCAAAAAAAABIIAAAAAAAAAAAAABIIAAAAAAAAFggAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADggAAAAAAAAOCAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOiBAAAAAAAA6YEAAAAAAAAAAAAA6YEAAAAAAADqgQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADogQAAAAAAAOiBAAAAAAAAAAAAAAAAUkA"
				],
				[
					86,
					1,
					"paste",
					null,
					"AQAAAKVhAAAAAAAA/WEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApWEAAAAAAAClYQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "Close"
					},
					"BgAAAMlhAAAAAAAAymEAAAAAAAAAAAAAymEAAAAAAADKYQAAAAAAAAcAAABDb25uZWN0ymEAAAAAAADLYQAAAAAAAAAAAADLYQAAAAAAAMxhAAAAAAAAAAAAAMxhAAAAAAAAzWEAAAAAAAAAAAAAzWEAAAAAAADOYQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyWEAAAAAAADQYQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					5,
					"left_delete",
					null,
					"BQAAAMRhAAAAAAAAxGEAAAAAAAABAAAAM8NhAAAAAAAAw2EAAAAAAAABAAAAO8JhAAAAAAAAwmEAAAAAAAABAAAANcFhAAAAAAAAwWEAAAAAAAABAAAAO8BhAAAAAAAAwGEAAAAAAAABAAAAOA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxWEAAAAAAADFYQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "1;"
					},
					"AgAAAMBhAAAAAAAAwWEAAAAAAAAAAAAAwWEAAAAAAADCYQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwGEAAAAAAADAYQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"left_delete",
					null,
					"AQAAAMFhAAAAAAAAwWEAAAAAAAABAAAAOw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwmEAAAAAAADCYQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"right_delete",
					null,
					"AQAAAMFhAAAAAAAAwWEAAAAAAAABAAAAMw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwWEAAAAAAADBYQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "1M;"
					},
					"AwAAAL9hAAAAAAAAwGEAAAAAAAAAAAAAwGEAAAAAAADBYQAAAAAAAAAAAADBYQAAAAAAAMJhAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAv2EAAAAAAAC/YQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					2,
					"left_delete",
					null,
					"AgAAAMFhAAAAAAAAwWEAAAAAAAABAAAAO8BhAAAAAAAAwGEAAAAAAAABAAAATQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwmEAAAAAAADCYQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMBhAAAAAAAAwWEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwGEAAAAAAADAYQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "code,reason"
					},
					"DAAAANdhAAAAAAAA2GEAAAAAAAAAAAAA2GEAAAAAAADYYQAAAAAAAB0AAABhZGRyZXNzLCBwb3J0LCBwcm90b2NvbCwgdGxzINhhAAAAAAAA2WEAAAAAAAAAAAAA2WEAAAAAAADaYQAAAAAAAAAAAADaYQAAAAAAANthAAAAAAAAAAAAANthAAAAAAAA3GEAAAAAAAAAAAAA3GEAAAAAAADdYQAAAAAAAAAAAADdYQAAAAAAAN5hAAAAAAAAAAAAAN5hAAAAAAAA32EAAAAAAAAAAAAA32EAAAAAAADgYQAAAAAAAAAAAADgYQAAAAAAAOFhAAAAAAAAAAAAAOFhAAAAAAAA4mEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA12EAAAAAAAD0YQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "code,"
					},
					"BQAAAJZhAAAAAAAAl2EAAAAAAAAAAAAAl2EAAAAAAACYYQAAAAAAAAAAAACYYQAAAAAAAJlhAAAAAAAAAAAAAJlhAAAAAAAAmmEAAAAAAAAAAAAAmmEAAAAAAACbYQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlmEAAAAAAACWYQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOphAAAAAAAA62EAAAAAAAAAAAAA62EAAAAAAAD3YQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6mEAAAAAAADqYQAAAAAAAP///////+9/"
				],
				[
					125,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA92EAAAAAAAD3YQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "globalThis."
					},
					"CwAAAAsmAAAAAAAADCYAAAAAAAAAAAAADCYAAAAAAAANJgAAAAAAAAAAAAANJgAAAAAAAA4mAAAAAAAAAAAAAA4mAAAAAAAADyYAAAAAAAAAAAAADyYAAAAAAAAQJgAAAAAAAAAAAAAQJgAAAAAAABEmAAAAAAAAAAAAABEmAAAAAAAAEiYAAAAAAAAAAAAAEiYAAAAAAAATJgAAAAAAAAAAAAATJgAAAAAAABQmAAAAAAAAAAAAABQmAAAAAAAAFSYAAAAAAAAAAAAAFSYAAAAAAAAWJgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALJgAAAAAAAAsmAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "params"
					},
					"BgAAABYmAAAAAAAAFyYAAAAAAAAAAAAAFyYAAAAAAAAYJgAAAAAAAAAAAAAYJgAAAAAAABkmAAAAAAAAAAAAABkmAAAAAAAAGiYAAAAAAAAAAAAAGiYAAAAAAAAbJgAAAAAAAAAAAAAbJgAAAAAAABwmAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWJgAAAAAAABYmAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABwmAAAAAAAAHSYAAAAAAAAAAAAAHSYAAAAAAAAeJgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcJgAAAAAAABwmAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB4mAAAAAAAAHyYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeJgAAAAAAAB4mAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPQnAAAAAAAA9ScAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0JwAAAAAAAPQnAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPUnAAAAAAAA9icAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1JwAAAAAAAPUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPYnAAAAAAAA+CcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2JwAAAAAAAPYnAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAPcnAAAAAAAA+CcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3JwAAAAAAAPcnAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAM0nAAAAAAAAzicAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNJwAAAAAAAM0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM4nAAAAAAAAzycAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOJwAAAAAAAM4nAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAM8nAAAAAAAA0ScAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPJwAAAAAAAM8nAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAANAnAAAAAAAA0ScAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQJwAAAAAAANAnAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "upload.html",
			"settings":
			{
				"buffer_size": 1069,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					17,
					1,
					"right_delete",
					null,
					"AQAAAPgCAAAAAAAA+AIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA+AIAAAAAAAD4AgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "upload.js",
			"settings":
			{
				"buffer_size": 11366,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAAD0AAAAAAAAAPQAAAAAAAAAlAAAAaW1wb3J0ICogYXMgZG9tIGZyb20gJy4vbGliL2RvbS5qcyc7Cg",
					"AQAAAAAAAAABAAAAPQAAAAAAAABiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					2,
					"right_delete",
					null,
					"AgAAAIEGAAAAAAAAgQYAAAAAAAADAAAAZG9tgQYAAAAAAACBBgAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAAgQYAAAAAAACEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAgQYAAAAAAACBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					2,
					"left_delete",
					null,
					"AgAAALwGAAAAAAAAvAYAAAAAAAABAAAAILsGAAAAAAAAuwYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAvQYAAAAAAAC9BgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/misc.js",
			"settings":
			{
				"buffer_size": 72526,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/dom.js",
			"settings":
			{
				"buffer_size": 37400,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"camel",
				"Convert Case: camelCase"
			],
			[
				"came",
				"Convert Case: camelCase"
			],
			[
				"case ",
				"Convert Case: camelCase"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/openlayers/test/browser/spec/ol/dom/dom.test.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests/trusted-types/block-string-assignment-to-HTMLElement-generic.tentative.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/qjs-lws.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-x509.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-purify.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-writeable.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-ws-state.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-socket.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-socket.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core/context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/server/server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test-client.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-html.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/ws/server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-logs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-spa.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/list.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-lwsac.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/server/lws-spa.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-spa.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/system/async-dns/async-dns.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/misc/base64-decode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/ws-server/minimal-ws-raw-proxy/minimal-ws-raw-proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client/minimal-http-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/plugins/acme-client/protocol_lws_acme_client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/tls/openssl/openssl-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/tls/private-network.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/tls/tls-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/vhost.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-post/minimal-http-client-post.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/localhost.key",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/ws-server/minimal-ws-server-threadpool/minimal-ws-server-threadpool.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-h2-rxflow/minimal-http-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/private-lib-core-net.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/client/client-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/localhost-100y.key",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/minimal-raw-fallback-http-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-certinfo/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/crypto/minimal-crypto-jws/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/client-server/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-file/README.md",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.cx",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-state.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-captive-portal/minimal-http-client-captive-portal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/ws/ops-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-write.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-protocols-plugins.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/secure-streams/protocols/ss-h1.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/h1/ops-h1.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-ws-close.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-eventlib-exports.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/main.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-network-helper.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/wsi.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/gmon.out",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-form-post-file/minimal-http-server-form-post-file.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/plugins/deaddrop/protocol_lws_deaddrop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-adopt.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-async-dns.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/ws/private-lib-roles-ws.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-sse-ring/minimal-http-server-sse-ring.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-netdev.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-system.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"dom\\.",
			"readFileSync",
			"FieldDecl",
			"TypeFactory",
			"FieldDecl",
			"ion TypeFactory",
			"TypeFactory",
			"name \\?\\?=",
			"name =",
			"Found type",
			"isCompound",
			"isEnum",
			"getOpt",
			"getOpd",
			"peer, add",
			"onConnect",
			"[`'\"]onMessage",
			"'onMessage",
			"onMessage",
			"onConnect",
			"onClose",
			"onMessage",
			"rpc"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1047,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/upload.js",
							"function_name_status_row": 16,
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
								[
									600,
									633
								],
								[
									655,
									659
								],
								[
									844,
									862
								],
								[
									919,
									947
								],
								[
									1046,
									1053
								],
								[
									1132,
									1149
								],
								[
									1214,
									1250
								],
								[
									1406,
									1443
								],
								[
									1993,
									2037
								],
								[
									2048,
									2067
								],
								[
									2089,
									2093
								],
								[
									2127,
									2136
								],
								[
									2170,
									2193
								],
								[
									2309,
									2334
								],
								[
									2414,
									2455
								],
								[
									2560,
									2566
								],
								[
									2659,
									2666
								],
								[
									2767,
									2813
								],
								[
									3029,
									3044
								],
								[
									3063,
									3078
								],
								[
									3094,
									3109
								],
								[
									3133,
									3148
								],
								[
									3170,
									3185
								],
								[
									3206,
									3221
								],
								[
									3239,
									3254
								],
								[
									3277,
									3292
								],
								[
									3392,
									3431
								],
								[
									3798,
									3817
								],
								[
									4437,
									4450
								],
								[
									4516,
									4556
								],
								[
									4636,
									4643
								],
								[
									4708,
									4713
								],
								[
									5278,
									5283
								],
								[
									5422,
									5427
								],
								[
									5625,
									5630
								],
								[
									5856,
									5862
								],
								[
									5940,
									5947
								],
								[
									6195,
									6200
								],
								[
									6686,
									6726
								],
								[
									6898,
									6902
								],
								[
									6917,
									6944
								],
								[
									7329,
									7355
								],
								[
									7419,
									7423
								],
								[
									7499,
									7508
								],
								[
									7561,
									7570
								],
								[
									7663,
									7670
								],
								[
									8068,
									8094
								],
								[
									8321,
									8325
								],
								[
									8445,
									8451
								],
								[
									8506,
									8523
								],
								[
									8593,
									8620
								],
								[
									8681,
									8694
								],
								[
									8796,
									8835
								],
								[
									9073,
									9098
								],
								[
									9124,
									9129
								],
								[
									9198,
									9215
								],
								[
									10190,
									10195
								],
								[
									10341,
									10355
								],
								[
									10399,
									10414
								],
								[
									10500,
									10515
								],
								[
									10600,
									10628
								],
								[
									10781,
									10798
								],
								[
									11079,
									11108
								]
							],
							"symlist":
							[
								"MakeUUID = (rng = Math.random) =>",
								"  n =>",
								"LineReader = () =>",
								"  transform(chunk, controller)",
								"  part =>",
								"  flush(controller)",
								"ReadIterator(stream)",
								"ListJSON = (dir = 'uploads') =>",
								"  prioritySort(arr, predicates = [])",
								"  matchPred = item =>",
								"  p =>",
								"(a, b) =>",
								"  setLabel(text)",
								"  isComponent(obj)",
								"Table = ({ children, rows, ...props }) =>",
								"  row =>",
								"  cell =>",
								"PropertyList = ({ data, filter, ...props }) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"FileItem = ({ file, ref, ...props }) =>",
								"  filter: ([k, v]) =>",
								"(coord, i) =>",
								"FileList = ({ files, ref, ...props }) =>",
								"  file =>",
								"e =>",
								"e =>",
								"e =>",
								"e =>",
								"  err =>",
								"  resp =>",
								"e =>",
								"FileAction(cmd, file, contents)",
								"  r =>",
								"UploadFiles(files)",
								"ListFiles()",
								"  r =>",
								"  upload =>",
								"(a, b) =>",
								"  file =>",
								"UploadFile(files)",
								"  f =>",
								"  err =>",
								"  response =>",
								"UploadDone(upload)",
								"({ name }) =>",
								"CreateWS(endpoint = 'uploads')",
								"  restart = (delay = 10) =>",
								"() =>",
								"  .onmessage = e =>",
								"() =>",
								"  .onopen = e =>",
								"  .onclose = e =>",
								"  .onerror = e =>",
								"XHRUpload(formData)",
								"function(e)",
								"FileSelectHandler(e)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1754205264.16,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36203,
						"regions":
						{
							"col_0087FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										24506,
										24519
									],
									[
										32602,
										32615
									]
								],
								"scope": "col_0087FFFF"
							},
							"col_0087FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0087FFFF_circle.png",
								"regions":
								[
									[
										24485,
										24485
									],
									[
										32575,
										32575
									]
								],
								"scope": "col_gutter"
							},
							"col_00AFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										10840,
										10853
									]
								],
								"scope": "col_00AFFFFF"
							},
							"col_00AFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00AFFFFF_circle.png",
								"regions":
								[
									[
										10793,
										10793
									]
								],
								"scope": "col_gutter"
							},
							"col_D700FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										10816,
										10830
									]
								],
								"scope": "col_D700FFFF"
							},
							"col_D700FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D700FFFF_circle.png",
								"regions":
								[
									[
										10793,
										10793
									]
								],
								"scope": "col_gutter"
							},
							"col_DD0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										25097,
										25107
									]
								],
								"scope": "col_DD0000FF"
							},
							"col_DD0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD0000FF_circle.png",
								"regions":
								[
									[
										25076,
										25076
									]
								],
								"scope": "col_gutter"
							},
							"col_FFAF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										32389,
										32403
									]
								],
								"scope": "col_FFAF00FF"
							},
							"col_FFAF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFAF00FF_circle.png",
								"regions":
								[
									[
										32358,
										32358
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								10177,
								10177
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 321,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1755127569.41,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 136.0,
						"translation.y": 5144.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "upload.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1069,
						"regions":
						{
						},
						"selection":
						[
							[
								760,
								760
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 16,
							"show_line_column": "disabled",
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1756310574.98,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "upload.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11366,
						"regions":
						{
						},
						"selection":
						[
							[
								1722,
								1722
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 55,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1756310585.45,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 821.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/misc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 72526,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1756310583.91,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/dom.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37400,
						"regions":
						{
						},
						"selection":
						[
							[
								6253,
								6265
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 241,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1756309202.04,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3349.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"compon",
				"components.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"lib/dom",
				"lib/dom.js"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"clang-",
				"clang-list.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"clang-asst",
				"quickjs/qjs-modules/web-platform-tests/trusted-types/block-string-assignment-to-HTMLElement-generic.tentative.html"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"mirror",
				"libwebsockets/plugins/protocol_lws_mirror.c"
			],
			[
				"otocol_lws_raw_proxy.c",
				"libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c"
			],
			[
				"test-cli",
				"test-client.js"
			],
			[
				"lws-con",
				"lws-context.c"
			],
			[
				"test.js",
				"test.js"
			],
			[
				"lws-call",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"lws-sock",
				"lws-socket.c"
			],
			[
				"lws-ca",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"test-clie",
				"test-client.js"
			],
			[
				"lws-misc",
				"libwebsockets/include/libwebsockets/lws-misc.h"
			],
			[
				"lws-html",
				"libwebsockets/include/libwebsockets/lws-html.h"
			],
			[
				"lws-c",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"lws-soc",
				"lws-socket.c"
			],
			[
				"lws.h",
				"lws.h"
			],
			[
				"context.c",
				"libwebsockets/lib/core/context.c"
			],
			[
				"lws-conte",
				"lws-context.c"
			],
			[
				"lws-spa",
				"libwebsockets/lib/roles/http/server/lws-spa.c"
			],
			[
				"lws-sp",
				"libwebsockets/lib/roles/http/server/lws-spa.c"
			],
			[
				"lws.c",
				"lws.c"
			],
			[
				"quickj",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"lws-http",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"spa.c",
				"lws-spa.c"
			],
			[
				"lws-so",
				"lws-socket.c"
			],
			[
				"lws-htt",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"lws-client",
				"libwebsockets/include/libwebsockets/lws-client.h"
			],
			[
				"wsi-http",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"context",
				"libwebsockets/lib/core/context.c"
			],
			[
				"vhost",
				"libwebsockets/lib/core-net/vhost.c"
			],
			[
				"tls-clie",
				"libwebsockets/lib/tls/tls-client.c"
			],
			[
				"conte",
				"libwebsockets/lib/core/context.c"
			],
			[
				"context.",
				"libwebsockets/lib/core/context.c"
			],
			[
				"raw-fall",
				"libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/minimal-raw-fallback-http-server.c"
			],
			[
				"lws-clie",
				"libwebsockets/include/libwebsockets/lws-client.h"
			],
			[
				"test-cl",
				"test-client.js"
			],
			[
				"lws-",
				"libwebsockets/include/libwebsockets/lws-state.h"
			],
			[
				"socket.h",
				"lws-socket.h"
			],
			[
				"lws-log",
				"libwebsockets/include/libwebsockets/lws-logs.h"
			],
			[
				"spa.h",
				"libwebsockets/include/libwebsockets/lws-spa.h"
			],
			[
				"server.c",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"wsi.c",
				"libwebsockets/lib/core-net/wsi.c"
			],
			[
				"lws-vho",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"",
				"include/utils.h"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 353.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
