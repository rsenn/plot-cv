{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyFunctionList"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"JS_New",
				"JS_NewCFunctionData"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "FileTime(filename)\nNewer(file, ...other)\n  other =>\nOlder(file, other)\nGetSubscripts(str)\n  m =>\nTrimSubscripts(str, sub)\nList\n  constructor(...args)\n  filter(callback, thisArg = null)\n  callback = elem =>\n  slice(start, end)\n  get first()\n  elem =>\n  entries()\n  keys()\n  values()\n  toArray()\n(a, n) =>\nList\nNode\n  constructor(ast)\n  static get(ast)\n  get ast()\n  get id()\n  get loc()\n  get file()\n  (v,k) =>\n  (v,k) =>\n  get range()\n  r =>\n  toJSON(obj)\n(node, ast) =>\nPathOf(node, ast = $.data)\n  n =>\nHier(node_or_path, ast = $.data)\n  p =>\n([p, n]) =>\n  ([p, n]) =>\nFindType(typeName, ast = $.data)\n([tok]) =>\n  n =>\n  node =>\nType\n  constructor(node, ast)\n  n =>\n  n =>\n  (n, p) =>\n  get regExp()\n  isEnum()\n  isPointer()\n  isFunction()\n  isArray()\n  arrayOf()\n  get subscripts()\n  trimSubscripts()\n  get pointer()\n  getPointer(ast)\n  n =>\n  get unsigned()\n  get signed()\n  isCompound()\n  isFloatingPoint()\n  get alias()\n  get aliases()\n  isEnum()\n  isString()\n  get ffi()\n  get size()\n  toJS()\n  toJSON(obj)\n  static get(name_or_id, ast = $.data)\n  node =>\n  node =>\nRoundTo(value, align)\nRecordDecl\n  constructor(node, ast)\n  child =>\n  child =>\n  node =>\n(acc, node) =>\n  i =>\n  n =>\n  n =>\n  get size()\n(acc,[name,type]) =>\n  toJSON()\n([name, member]) =>\nEnumDecl\n  constructor(node, ast)\n  child =>\n({ name, type, inner }) =>\n  toJSON()\nTypedefDecl\n  constructor(node, ast)\n  n =>\n  (v, k) =>\n  n =>\n  n =>\n  n =>\n  get size()\n  toJSON()\nFieldDecl\n  constructor(node, ast)\n  n =>\nFunctionDecl\n  constructor(node, ast)\n  child =>\n  child =>\n  n =>\n({ name, type }) =>\n  toJSON()\nVarDecl\n  constructor(node, ast)\n  toJSON()\nClassDecl\nBuiltinType\n  constructor(node, ast)\nPointerType\n  constructor(node, ast)\n  toJSON()\nConstantArrayType\n  constructor(node, ast)\n  toJSON()\nLocation\n  constructor(loc)\n  (t, ...c) =>\n'\\x1b[m' : t =>\n  toString()\n  localeCompare(other)\nTypeFactory(node, ast, cache = true)\nSpawnCompiler(compiler, input, output, args = [])\n  p =>\n  data =>\n  data =>\n  reader =>\n  line =>\n  line =>\n  line =>\nPipeReader(fd, callback)\n(resolve, reject) =>\n  () =>\n  data =>\nReadPipe(fd, callback)\nReadOutput(fd)\nSourceDependencies(...args)\nAstDump(compiler, source, args, force)\n  size()\n  json()\n  data()\nSetFile = loc =>\n  files()\n  n =>\n  file =>\n  pred2 = (used, implicit) =>\n  node =>\n  types()\n  n =>\n  () =>\nList\n  functions()\n  n =>\n  () =>\n  n =>\nList\n  namespaces()\n  n =>\nList\n  classes()\n  predicate = n =>\nList\n  variables()\n  n =>\nList\n  names(depth = 1)\n  n =>\n  n =>\nNameFor(decl, ast = this.data)\n  (value, key) =>\nNodeType(n)\n  t =>\n  n =>\nNodeName(n, name)\nGetLoc(node)\nGetTypeNode(node, ast = $.data)\n  node =>\n  node =>\nGetTypeStr(node)\n  inner =>\n  inner =>\n([n, t]) =>\nNodePrinter(ast)\n  put(str)\n  trim()\n  printer = function(node)\n  get()\n  value()\n  value(node)\n  toString()\n  i =>\nNodePrinter\nAbiTagAttr(abi_tag_attr)\nAccessSpecDecl(access_spec_decl)\nAlignedAttr(aligned_attr)\nAlwaysInlineAttr(always_inline_attr)\nArraySubscriptExpr(array_subscript_expr)\nAsmLabelAttr(asm_label_attr)\nBinaryOperator(binary_operator)\nBlockCommandComment(block_command_comment)\nBreakStmt(break_stmt)\nCallExpr(call_expr)\nCaseStmt(case_stmt)\nCharacterLiteral(character_literal)\nCompoundAssignOperator(compound_assign_operator)\nCompoundStmt(compound_stmt)\nConditionalOperator(conditional_operator)\nConstantExpr(constant_expr)\nConstAttr(const_attr)\nContinueStmt(continue_stmt)\nCStyleCastExpr(cstyle_cast_expr)\nDeclRefExpr(decl_ref_expr)\nDeclStmt(decl_stmt)\nDefaultStmt(default_stmt)\nDeprecatedAttr(deprecated_attr)\nDoStmt(do_stmt)\nEmptyDecl(empty_decl)\nEnumConstantDecl(enum_constant_decl)\nEnumDecl(enum_decl)\nFieldDecl(field_decl)\nFloatingLiteral(floating_literal)\nFormatAttr(format_attr)\nForStmt(for_stmt)\n  n =>\nFullComment(full_comment)\nFunctionDecl(function_decl)\n  n =>\n  n =>\nGotoStmt(goto_stmt)\n  n =>\nHTMLEndTagComment(html_end_tag_comment)\nHTMLStartTagComment(html_start_tag_comment)\nIfStmt(if_stmt)\nImplicitCastExpr(implicit_cast_expr)\nInitListExpr(init_list_expr)\nInlineCommandComment(inline_command_comment)\nIntegerLiteral(integer_literal)\nLabelStmt(label_stmt)\nMemberExpr(member_expr)\nNonNullAttr(non_null_attr)\nNoThrowAttr(no_throw_attr)\nNullStmt(null_stmt)\nParagraphComment(paragraph_comment)\nParamCommandComment(param_command_comment)\nParenExpr(paren_expr)\nParenListExpr(paren_list_expr)\nParmVarDecl(parm_var_decl)\nPureAttr(pure_attr)\nRecordDecl(record_decl)\nRestrictAttr(restrict_attr)\nReturnStmt(return_stmt)\nReturnsTwiceAttr(returns_twice_attr)\nStringLiteral(string_literal)\nSwitchStmt(switch_stmt)\nTextComment(text_comment)\nTranslationUnitDecl(translation_unit_decl)\nTypedefDecl(typedef_decl)\nUnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)\nUnaryOperator(unary_operator)\nUnresolvedLookupExpr(unresolved_lookup_expr)\nUnresolvedMemberExpr(unresolved_member_expr)\nVarDecl(var_decl, base_type)\n([offset, subscript]) =>\nVerbatimBlockComment(verbatim_block_comment)\nVerbatimBlockLineComment(verbatim_block_line_comment)\nWarnUnusedResultAttr(warn_unused_result_attr)\nWeakAttr(weak_attr)\nWhileStmt(while_stmt)\nOverrideAttr(override_attr)\nAddrLabelExpr(addr_label_expr)\nAliasAttr(alias_attr)\nAlignValueAttr(align_value_attr)\nAllocSizeAttr(alloc_size_attr)\nArrayInitIndexExpr(array_init_index_expr)\nArrayInitLoopExpr(array_init_loop_expr)\nAtomicExpr(atomic_expr)\nAtomicType(atomic_type)\nAutoType(auto_type)\nBuiltinTemplateDecl(builtin_template_decl)\nBuiltinType(builtin_type)\nCallbackAttr(callback_attr)\nClassTemplateDecl(class_template_decl)\nClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)\nClassTemplateSpecializationDecl(class_template_specialization_decl)\nComplexType(complex_type)\nCompoundLiteralExpr(compound_literal_expr)\nConstantArrayType(constant_array_type)\nConstructorUsingShadowDecl(constructor_using_shadow_decl)\nConvertVectorExpr(convert_vector_expr)\nDecayedType(decayed_type)\nDecltypeType(decltype_type)\nDependentNameType(dependent_name_type)\nDependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)\nDependentSizedArrayType(dependent_sized_array_type)\nDependentTemplateSpecializationType(dependent_template_specialization_type)\nElaboratedType(elaborated_type)\nEnumType(enum_type)\nExprWithCleanups(expr_with_cleanups)\nFinalAttr(final_attr)\nFormatArgAttr(format_arg_attr)\nFriendDecl(friend_decl)\nFunctionNoProtoType(function_no_proto_type)\nFunctionProtoType(function_proto_type)\nFunctionTemplateDecl(function_template_decl)\nGCCAsmStmt(gcc_asm_stmt)\nGNUInlineAttr(gnu_inline_attr)\nGNUNullExpr(gnu_null_expr)\nImplicitValueInitExpr(implicit_value_init_expr)\nIncompleteArrayType(incomplete_array_type)\nIndirectFieldDecl(indirect_field_decl)\nIndirectGotoStmt(indirect_goto_stmt)\nInjectedClassNameType(injected_class_name_type)\nLambdaExpr(lambda_expr)\nLinkageSpecDecl(linkage_spec_decl)\nLValueReferenceType(l_value_reference_type)\nMaterializeTemporaryExpr(materialize_temporary_expr)\nMaxFieldAlignmentAttr(max_field_alignment_attr)\nMayAliasAttr(may_alias_attr)\nMemberPointerType(member_pointer_type)\nMinVectorWidthAttr(min_vector_width_attr)\nModeAttr(mode_attr)\nNamespaceDecl(namespace_decl)\nNoDebugAttr(no_debug_attr)\nNoInlineAttr(no_inline_attr)\nNonTypeTemplateParmDecl(non_type_template_parm_decl)\nOffsetOfExpr(offset_of_expr)\nOpaqueValueExpr(opaque_value_expr)\nOwnerAttr(owner_attr)\nPackedAttr(packed_attr)\nPackExpansionExpr(pack_expansion_expr)\nPackExpansionType(pack_expansion_type)\nParenType(paren_type)\nPointerAttr(pointer_attr)\nPointerType(pointer_type)\nPredefinedExpr(predefined_expr)\nQualType(qual_type)\nRecordType(record_type)\nReturnsNonNullAttr(returns_non_null_attr)\nRValueReferenceType(r_value_reference_type)\nSentinelAttr(sentinel_attr)\nShuffleVectorExpr(shuffle_vector_expr)\nSizeOfPackExpr(size_of_pack_expr)\nStaticAssertDecl(static_assert_decl)\nStmtExpr(stmt_expr)\nSubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)\nSubstTemplateTypeParmType(subst_template_type_parm_type)\nTargetAttr(target_attr)\nTemplateArgument(template_argument)\nTemplateSpecializationType(template_specialization_type)\nTemplateTemplateParmDecl(template_template_parm_decl)\nTemplateTypeParmDecl(template_type_parm_decl)\nTemplateTypeParmType(template_type_parm_type)\nTParamCommandComment(t_param_command_comment)\nTypeAliasDecl(type_alias_decl)\nTypeAliasTemplateDecl(type_alias_template_decl)\nTypedefType(typedef_type)\nTypeOfExprType(type_of_expr_type)\nTypeTraitExpr(type_trait_expr)\nUnaryTransformType(unary_transform_type)\nUnresolvedUsingValueDecl(unresolved_using_value_decl)\nUnusedAttr(unused_attr)\nUsingDecl(using_decl)\nUsingDirectiveDecl(using_directive_decl)\nUsingShadowDecl(using_shadow_decl)\nVAArgExpr(va_arg_expr)\nVarTemplateDecl(var_template_decl)\nVectorType(vector_type)\nVerbatimLineComment(verbatim_line_comment)\nVisibilityAttr(visibility_attr)\nWeakRefAttr(weak_ref_attr)\nCXXRecordDecl(cxx_record_decl)\nCXXConstructorDecl(cxx_constructor_decl)\n  n =>\nCXXCtorInitializer(cxx_ctor_initializer)\nCXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)\nCXXThisExpr(cxx_this_expr)\nCXXDestructorDecl(cxx_destructor_decl)\n  n =>\nCXXMethodDecl(cxx_method_decl)\n  n =>\nCXXStaticCastExpr(cxx_static_cast_expr)\nCXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)\nCXXNewExpr(cxx_new_expr)\nCXXDeleteExpr(cxx_delete_expr)\nCXXBoolLiteralExpr(cxx_bool_literal_expr)\nCXX11NoReturnAttr(cxx11_no_return_attr)\nCXXBindTemporaryExpr(cxx_bind_temporary_expr)\nCXXCatchStmt(cxx_catch_stmt)\nCXXConstructExpr(cxx_construct_expr)\nCXXConversionDecl(cxx_conversion_decl)\nCXXDefaultArgExpr(cxx_default_arg_expr)\nCXXDefaultInitExpr(cxx_default_init_expr)\nCXXForRangeStmt(cxx_for_range_stmt)\nCXXFunctionalCastExpr(cxx_functional_cast_expr)\nCXXMemberCallExpr(cxx_member_call_expr)\nCXXNoexceptExpr(cxx_noexcept_expr)\nCXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)\nCXXOperatorCallExpr(cxx_operator_call_expr)\nCXXReinterpretCastExpr(cxx_reinterpret_cast_expr)\nCXXScalarValueInitExpr(cxx_scalar_value_init_expr)\nCXXTemporaryObjectExpr(cxx_temporary_object_expr)\nCXXTryStmt(cxx_try_stmt)\nPrintNode(node)\nPrintAst(node, ast)\n  get()\n  isNode(obj)\nGetType(name_or_id, ast = $.data)\n  n =>\n  node =>\n  node =>\n  r =>\nGetFields(node)\n  (v, k) =>\n([v, p]) =>\n([loc, ptr]) =>\n  i =>\nGetParams(node)\n  child =>\nPathRemoveLoc(path)\n  p =>",
			"settings":
			{
				"buffer_size": 10202,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					28,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								715,
								742
							],
							[
								822,
								852
							],
							[
								919,
								927
							],
							[
								965,
								992
							],
							[
								1041,
								1068
							],
							[
								1150,
								1154
							],
							[
								1177,
								1210
							],
							[
								1397,
								1401
							],
							[
								1420,
								1440
							],
							[
								1596,
								1628
							],
							[
								1792,
								1810
							],
							[
								2062,
								2079
							],
							[
								2387,
								2398
							],
							[
								2422,
								2429
							],
							[
								2458,
								2467
							],
							[
								2597,
								2603
							],
							[
								2725,
								2733
							],
							[
								2858,
								2867
							],
							[
								2893,
								2902
							],
							[
								2933,
								2937
							],
							[
								2998,
								3002
							],
							[
								3078,
								3094
							],
							[
								3354,
								3369
							],
							[
								3436,
								3445
							],
							[
								3513,
								3521
							],
							[
								3576,
								3585
							],
							[
								3659,
								3669
							],
							[
								3723,
								3732
							],
							[
								3762,
								3771
							],
							[
								3881,
								3892
							],
							[
								4094,
								4098
							],
							[
								4753,
								4764
							],
							[
								5014,
								5028
							],
							[
								5078,
								5114
							],
							[
								5152,
								5157
							],
							[
								5198,
								5240
							],
							[
								5433,
								5437
							],
							[
								5471,
								5482
							],
							[
								5514,
								5533
							],
							[
								5852,
								5894
							],
							[
								5966,
								5976
							],
							[
								6197,
								6202
							],
							[
								6268,
								6275
							],
							[
								6392,
								6396
							],
							[
								6494,
								6516
							],
							[
								7007,
								7012
							],
							[
								8834,
								8838
							],
							[
								9619,
								9629
							],
							[
								9847,
								9859
							],
							[
								10000,
								10008
							],
							[
								10091,
								10102
							],
							[
								10189,
								10201
							],
							[
								10293,
								10302
							],
							[
								10373,
								10382
							],
							[
								10500,
								10516
							],
							[
								10586,
								10602
							],
							[
								10691,
								10704
							],
							[
								11237,
								11252
							],
							[
								11337,
								11342
							],
							[
								11594,
								11608
							],
							[
								11714,
								11726
							],
							[
								11795,
								11807
							],
							[
								11866,
								11883
							],
							[
								11969,
								11980
							],
							[
								12074,
								12087
							],
							[
								12227,
								12235
							],
							[
								12342,
								12352
							],
							[
								12554,
								12563
							],
							[
								14053,
								14063
							],
							[
								16946,
								16952
							],
							[
								17236,
								17247
							],
							[
								17347,
								17383
							],
							[
								17561,
								17569
							],
							[
								17629,
								17637
							],
							[
								19435,
								19465
							],
							[
								19544,
								19554
							],
							[
								19572,
								19594
							],
							[
								19774,
								19782
							],
							[
								19863,
								19871
							],
							[
								20050,
								20057
							],
							[
								20108,
								20122
							],
							[
								20531,
								20535
							],
							[
								20719,
								20724
							],
							[
								21354,
								21358
							],
							[
								22101,
								22111
							],
							[
								22186,
								22206
							],
							[
								22409,
								22417
							],
							[
								22539,
								22558
							],
							[
								22655,
								22663
							],
							[
								22681,
								22703
							],
							[
								22819,
								22827
							],
							[
								22932,
								22958
							],
							[
								23209,
								23217
							],
							[
								23332,
								23343
							],
							[
								23361,
								23383
							],
							[
								23451,
								23455
							],
							[
								23561,
								23571
							],
							[
								23631,
								23635
							],
							[
								23698,
								23702
							],
							[
								23752,
								23756
							],
							[
								24219,
								24229
							],
							[
								24267,
								24275
							],
							[
								24372,
								24381
							],
							[
								24399,
								24421
							],
							[
								24527,
								24531
							],
							[
								24931,
								24943
							],
							[
								24961,
								24983
							],
							[
								25173,
								25181
							],
							[
								25244,
								25252
							],
							[
								25442,
								25447
							],
							[
								25756,
								25775
							],
							[
								25836,
								25844
							],
							[
								25953,
								25960
							],
							[
								25978,
								26000
							],
							[
								26345,
								26353
							],
							[
								26450,
								26459
							],
							[
								26496,
								26507
							],
							[
								26525,
								26547
							],
							[
								26597,
								26608
							],
							[
								26626,
								26648
							],
							[
								26809,
								26817
							],
							[
								26920,
								26937
							],
							[
								26955,
								26977
							],
							[
								27233,
								27241
							],
							[
								27352,
								27360
							],
							[
								27365,
								27381
							],
							[
								27583,
								27596
							],
							[
								27631,
								27646
							],
							[
								27731,
								27741
							],
							[
								28054,
								28074
							],
							[
								28157,
								28203
							],
							[
								29656,
								29720
							],
							[
								29998,
								30002
							],
							[
								30756,
								30764
							],
							[
								30872,
								30880
							],
							[
								30955,
								30970
							],
							[
								31250,
								31257
							],
							[
								31311,
								31318
							],
							[
								31402,
								31409
							],
							[
								31586,
								31621
							],
							[
								31660,
								31680
							],
							[
								31710,
								31716
							],
							[
								31737,
								31745
							],
							[
								31851,
								31884
							],
							[
								32197,
								32222
							],
							[
								32617,
								32659
							],
							[
								33312,
								33365
							],
							[
								34286,
								34292
							],
							[
								34342,
								34348
							],
							[
								34476,
								34482
							],
							[
								34680,
								34696
							],
							[
								35063,
								35070
							],
							[
								35113,
								35117
							],
							[
								35137,
								35144
							],
							[
								35264,
								35291
							],
							[
								35349,
								35356
							],
							[
								35620,
								35627
							],
							[
								35687,
								35701
							],
							[
								35746,
								35761
							],
							[
								35786,
								35790
							],
							[
								35821,
								35832
							],
							[
								35865,
								35877
							],
							[
								35911,
								35924
							],
							[
								35996,
								36001
							],
							[
								36099,
								36103
							],
							[
								36127,
								36139
							],
							[
								36208,
								36213
							],
							[
								36273,
								36277
							],
							[
								36308,
								36317
							],
							[
								36330,
								36346
							],
							[
								36707,
								36711
							],
							[
								36735,
								36746
							],
							[
								36805,
								36809
							],
							[
								36847,
								36851
							],
							[
								36882,
								36898
							],
							[
								36936,
								36940
							],
							[
								36958,
								36962
							],
							[
								37005,
								37045
							],
							[
								37104,
								37120
							],
							[
								37482,
								37503
							],
							[
								37529,
								37533
							],
							[
								37976,
								37981
							],
							[
								38022,
								38049
							],
							[
								38243,
								38265
							],
							[
								39300,
								39341
							],
							[
								39421,
								39428
							],
							[
								39494,
								39501
							],
							[
								39538,
								39564
							],
							[
								39658,
								39666
							],
							[
								39732,
								39740
							],
							[
								39802,
								39813
							],
							[
								39960,
								39986
							],
							[
								40038,
								40057
							],
							[
								40133,
								40150
							],
							[
								40185,
								40209
							],
							[
								40455,
								40460
							],
							[
								40517,
								40524
							],
							[
								40605,
								40616
							],
							[
								41106,
								41116
							],
							[
								41162,
								41166
							],
							[
								41824,
								41835
							],
							[
								41846,
								41870
							],
							[
								41938,
								41970
							],
							[
								42126,
								42151
							],
							[
								42215,
								42251
							],
							[
								42321,
								42361
							],
							[
								42613,
								42641
							],
							[
								42688,
								42719
							],
							[
								42948,
								42990
							],
							[
								43193,
								43214
							],
							[
								43259,
								43278
							],
							[
								43612,
								43631
							],
							[
								43835,
								43870
							],
							[
								43988,
								44036
							],
							[
								44282,
								44309
							],
							[
								44927,
								44968
							],
							[
								45206,
								45233
							],
							[
								45376,
								45397
							],
							[
								45458,
								45485
							],
							[
								45530,
								45562
							],
							[
								45812,
								45838
							],
							[
								46032,
								46051
							],
							[
								46713,
								46738
							],
							[
								46786,
								46817
							],
							[
								46884,
								46899
							],
							[
								47094,
								47115
							],
							[
								47232,
								47268
							],
							[
								47488,
								47507
							],
							[
								47911,
								47932
							],
							[
								48149,
								48182
							],
							[
								48242,
								48265
							],
							[
								48328,
								48345
							],
							[
								48465,
								48469
							],
							[
								49296,
								49321
							],
							[
								49528,
								49555
							],
							[
								50020,
								50024
							],
							[
								50234,
								50238
							],
							[
								50437,
								50456
							],
							[
								50553,
								50558
							],
							[
								50712,
								50751
							],
							[
								50850,
								50893
							],
							[
								51103,
								51118
							],
							[
								51288,
								51324
							],
							[
								51420,
								51448
							],
							[
								51718,
								51762
							],
							[
								51824,
								51855
							],
							[
								51914,
								51935
							],
							[
								51994,
								52017
							],
							[
								52440,
								52466
							],
							[
								52534,
								52560
							],
							[
								52624,
								52643
							],
							[
								52684,
								52719
							],
							[
								52893,
								52935
							],
							[
								53120,
								53141
							],
							[
								53317,
								53347
							],
							[
								53567,
								53593
							],
							[
								54021,
								54040
							],
							[
								54101,
								54124
							],
							[
								54659,
								54686
							],
							[
								54736,
								54759
							],
							[
								54916,
								54952
							],
							[
								55022,
								55051
							],
							[
								55109,
								55132
							],
							[
								55310,
								55335
							],
							[
								55419,
								55461
							],
							[
								55560,
								55585
							],
							[
								55889,
								55944
							],
							[
								56186,
								56215
							],
							[
								56466,
								56510
							],
							[
								56642,
								56686
							],
							[
								56773,
								56801
							],
							[
								56945,
								56969
							],
							[
								57217,
								57261
							],
							[
								57583,
								57636
							],
							[
								57735,
								57780
							],
							[
								57855,
								57874
							],
							[
								57935,
								57956
							],
							[
								58133,
								58160
							],
							[
								58209,
								58239
							],
							[
								58251,
								58272
							],
							[
								58284,
								58316
							],
							[
								58458,
								58488
							],
							[
								58500,
								58541
							],
							[
								58553,
								58592
							],
							[
								58604,
								58627
							],
							[
								58639,
								58662
							],
							[
								58674,
								58693
							],
							[
								58705,
								58747
							],
							[
								58759,
								58784
							],
							[
								58796,
								58823
							],
							[
								58835,
								58873
							],
							[
								58885,
								58967
							],
							[
								58979,
								59046
							],
							[
								59058,
								59083
							],
							[
								59095,
								59137
							],
							[
								59149,
								59187
							],
							[
								59199,
								59256
							],
							[
								59268,
								59306
							],
							[
								59318,
								59343
							],
							[
								59355,
								59382
							],
							[
								59394,
								59432
							],
							[
								59444,
								59500
							],
							[
								59594,
								59645
							],
							[
								59657,
								59732
							],
							[
								59744,
								59775
							],
							[
								59787,
								59806
							],
							[
								59818,
								59854
							],
							[
								59950,
								59971
							],
							[
								59983,
								60013
							],
							[
								60025,
								60048
							],
							[
								60060,
								60103
							],
							[
								60115,
								60153
							],
							[
								60165,
								60209
							],
							[
								60221,
								60245
							],
							[
								60257,
								60287
							],
							[
								60299,
								60325
							],
							[
								60369,
								60416
							],
							[
								60428,
								60470
							],
							[
								60482,
								60520
							],
							[
								60532,
								60568
							],
							[
								60580,
								60627
							],
							[
								60639,
								60662
							],
							[
								60674,
								60708
							],
							[
								60720,
								60763
							],
							[
								60775,
								60827
							],
							[
								60931,
								60978
							],
							[
								60990,
								61018
							],
							[
								61030,
								61068
							],
							[
								61080,
								61121
							],
							[
								61133,
								61152
							],
							[
								61164,
								61193
							],
							[
								61205,
								61231
							],
							[
								61243,
								61271
							],
							[
								61283,
								61335
							],
							[
								61347,
								61375
							],
							[
								61387,
								61421
							],
							[
								61433,
								61454
							],
							[
								61466,
								61489
							],
							[
								61501,
								61539
							],
							[
								61551,
								61589
							],
							[
								61601,
								61622
							],
							[
								61634,
								61659
							],
							[
								61671,
								61696
							],
							[
								61708,
								61739
							],
							[
								61751,
								61770
							],
							[
								61782,
								61805
							],
							[
								61817,
								61858
							],
							[
								61870,
								61913
							],
							[
								61925,
								61952
							],
							[
								61964,
								62002
							],
							[
								62014,
								62047
							],
							[
								62059,
								62095
							],
							[
								62107,
								62126
							],
							[
								62138,
								62201
							],
							[
								62213,
								62269
							],
							[
								62281,
								62304
							],
							[
								62316,
								62351
							],
							[
								62363,
								62419
							],
							[
								62431,
								62484
							],
							[
								62496,
								62541
							],
							[
								62553,
								62598
							],
							[
								62610,
								62655
							],
							[
								62667,
								62697
							],
							[
								62709,
								62756
							],
							[
								62768,
								62793
							],
							[
								62805,
								62838
							],
							[
								62850,
								62880
							],
							[
								62892,
								62932
							],
							[
								62944,
								62997
							],
							[
								63009,
								63032
							],
							[
								63044,
								63065
							],
							[
								63077,
								63117
							],
							[
								63129,
								63163
							],
							[
								63175,
								63197
							],
							[
								63209,
								63243
							],
							[
								63255,
								63278
							],
							[
								63290,
								63332
							],
							[
								63344,
								63375
							],
							[
								63387,
								63413
							],
							[
								63426,
								63456
							],
							[
								64030,
								64070
							],
							[
								64280,
								64284
							],
							[
								65425,
								65465
							],
							[
								65847,
								65907
							],
							[
								66343,
								66369
							],
							[
								66477,
								66515
							],
							[
								66711,
								66715
							],
							[
								67002,
								67032
							],
							[
								67490,
								67494
							],
							[
								68146,
								68185
							],
							[
								68848,
								68905
							],
							[
								69226,
								69250
							],
							[
								69722,
								69752
							],
							[
								70015,
								70056
							],
							[
								70191,
								70230
							],
							[
								70242,
								70287
							],
							[
								70299,
								70327
							],
							[
								70339,
								70375
							],
							[
								70519,
								70557
							],
							[
								70569,
								70608
							],
							[
								70620,
								70661
							],
							[
								70673,
								70708
							],
							[
								70720,
								70767
							],
							[
								70779,
								70818
							],
							[
								70831,
								70865
							],
							[
								70877,
								70925
							],
							[
								70937,
								70980
							],
							[
								70992,
								71041
							],
							[
								71053,
								71103
							],
							[
								71115,
								71164
							],
							[
								71418,
								71442
							],
							[
								71497,
								71522
							],
							[
								71901,
								71930
							],
							[
								72109,
								72114
							],
							[
								72386,
								72407
							],
							[
								72474,
								72517
							],
							[
								72704,
								72708
							],
							[
								73290,
								73298
							],
							[
								73350,
								73358
							],
							[
								73470,
								73474
							],
							[
								73726,
								73751
							],
							[
								73786,
								73796
							],
							[
								73860,
								73871
							],
							[
								73945,
								73960
							],
							[
								73999,
								74003
							],
							[
								74082,
								74107
							],
							[
								74146,
								74154
							],
							[
								74195,
								74224
							],
							[
								74254,
								74258
							]
						],
						"symlist":
						[
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v,k) =>",
							" (v,k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"(node, ast) =>",
							" function PathOf(node, ast = $.data)",
							" n =>",
							" function Hier(node_or_path, ast = $.data)",
							"p =>",
							"([p, n]) =>",
							" ([p, n]) =>",
							" function FindType(typeName, ast = $.data)",
							"([tok]) =>",
							" n =>",
							"node =>",
							"Type",
							"constructor(node, ast)",
							" n =>",
							"n =>",
							" (n, p) =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isFunction()",
							"isArray()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"getPointer(ast)",
							" n =>",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = $.data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"get size()",
							"(acc,[name,type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"n =>",
							"FunctionDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							" n =>",
							"({ name, type }) =>",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"BuiltinType",
							"constructor(node, ast)",
							"PointerType",
							"constructor(node, ast)",
							"toJSON()",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Location",
							"constructor(loc)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, output, args = [])",
							"p =>",
							" data =>",
							" data =>",
							"async reader =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							"node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = this.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = $.data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = $.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/deep.js",
						"symkeys":
						[
							[
								330,
								374
							],
							[
								666,
								705
							],
							[
								781,
								798
							],
							[
								854,
								871
							],
							[
								921,
								938
							],
							[
								980,
								997
							],
							[
								1025,
								1047
							],
							[
								1180,
								1194
							],
							[
								1394,
								1412
							],
							[
								2049,
								2070
							],
							[
								2547,
								2584
							],
							[
								2631,
								2681
							],
							[
								3111,
								3152
							],
							[
								3679,
								3706
							],
							[
								3934,
								3963
							],
							[
								3980,
								3993
							],
							[
								4515,
								4533
							],
							[
								4571,
								4586
							],
							[
								4708,
								4733
							],
							[
								4797,
								4822
							],
							[
								4855,
								4880
							],
							[
								4997,
								5018
							],
							[
								5304,
								5332
							],
							[
								5925,
								5951
							],
							[
								6039,
								6055
							],
							[
								6145,
								6167
							],
							[
								6275,
								6306
							],
							[
								6881,
								6906
							],
							[
								7261,
								7291
							]
						],
						"symlist":
						[
							"function ReturnValuePath(value, path, flags)",
							"function ReturnValuePathFunction(flags)",
							" (value, path) =>",
							" (value, path) =>",
							" (value, path) =>",
							" (value, path) =>",
							"isPlainObject = obj =>",
							"clone = obj =>",
							"equals = (a, b) =>",
							"extend = (...args) =>",
							"select = (root, filter, flags = 0) =>",
							" function SelectFunction(root, filter, path = [])",
							"find = (node, filter, flags = 0, root) =>",
							"forEach = function(...args)",
							"iterate = function* (...args)",
							"filter = v =>",
							"filter = (v, p) =>",
							"map = (p, v) =>",
							"insert = (name, value) =>",
							"insert = (name, value) =>",
							"insert = (name, value) =>",
							"get = (root, path) =>",
							"set = (root, path, value) =>",
							"delegate = (root, path) =>",
							" function(value)",
							" function(path, value)",
							"transform = (obj, filter, t) =>",
							"unset = (object, path) =>",
							"unflatten = (map, obj = {}) =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								715,
								742
							],
							[
								822,
								852
							],
							[
								919,
								927
							],
							[
								965,
								992
							],
							[
								1041,
								1068
							],
							[
								1150,
								1154
							],
							[
								1177,
								1210
							],
							[
								1397,
								1401
							],
							[
								1420,
								1440
							],
							[
								1596,
								1628
							],
							[
								1792,
								1810
							],
							[
								2062,
								2079
							],
							[
								2387,
								2398
							],
							[
								2422,
								2429
							],
							[
								2458,
								2467
							],
							[
								2597,
								2603
							],
							[
								2725,
								2733
							],
							[
								2858,
								2867
							],
							[
								2893,
								2902
							],
							[
								2933,
								2937
							],
							[
								2998,
								3002
							],
							[
								3078,
								3094
							],
							[
								3354,
								3369
							],
							[
								3436,
								3445
							],
							[
								3513,
								3521
							],
							[
								3576,
								3585
							],
							[
								3659,
								3669
							],
							[
								3723,
								3732
							],
							[
								3762,
								3771
							],
							[
								3881,
								3892
							],
							[
								4094,
								4098
							],
							[
								4753,
								4764
							],
							[
								5014,
								5028
							],
							[
								5078,
								5114
							],
							[
								5152,
								5157
							],
							[
								5198,
								5240
							],
							[
								5433,
								5437
							],
							[
								5471,
								5482
							],
							[
								5514,
								5533
							],
							[
								5852,
								5894
							],
							[
								5966,
								5976
							],
							[
								6197,
								6202
							],
							[
								6268,
								6275
							],
							[
								6392,
								6396
							],
							[
								6494,
								6516
							],
							[
								7007,
								7012
							],
							[
								8834,
								8838
							],
							[
								9619,
								9629
							],
							[
								9847,
								9859
							],
							[
								10000,
								10008
							],
							[
								10091,
								10102
							],
							[
								10189,
								10201
							],
							[
								10293,
								10302
							],
							[
								10373,
								10382
							],
							[
								10500,
								10516
							],
							[
								10586,
								10602
							],
							[
								10691,
								10704
							],
							[
								11237,
								11252
							],
							[
								11337,
								11342
							],
							[
								11594,
								11608
							],
							[
								11714,
								11726
							],
							[
								11795,
								11807
							],
							[
								11866,
								11883
							],
							[
								11969,
								11980
							],
							[
								12074,
								12087
							],
							[
								12227,
								12235
							],
							[
								12342,
								12352
							],
							[
								12554,
								12563
							],
							[
								14053,
								14063
							],
							[
								16946,
								16952
							],
							[
								17236,
								17247
							],
							[
								17347,
								17383
							],
							[
								17561,
								17569
							],
							[
								17629,
								17637
							],
							[
								19435,
								19465
							],
							[
								19544,
								19554
							],
							[
								19572,
								19594
							],
							[
								19774,
								19782
							],
							[
								19863,
								19871
							],
							[
								20050,
								20057
							],
							[
								20108,
								20122
							],
							[
								20531,
								20535
							],
							[
								20719,
								20724
							],
							[
								21354,
								21358
							],
							[
								22101,
								22111
							],
							[
								22186,
								22206
							],
							[
								22409,
								22417
							],
							[
								22539,
								22558
							],
							[
								22655,
								22663
							],
							[
								22681,
								22703
							],
							[
								22819,
								22827
							],
							[
								22932,
								22958
							],
							[
								23209,
								23217
							],
							[
								23332,
								23343
							],
							[
								23361,
								23383
							],
							[
								23451,
								23455
							],
							[
								23561,
								23571
							],
							[
								23631,
								23635
							],
							[
								23698,
								23702
							],
							[
								23752,
								23756
							],
							[
								24219,
								24229
							],
							[
								24267,
								24275
							],
							[
								24372,
								24381
							],
							[
								24399,
								24421
							],
							[
								24527,
								24531
							],
							[
								24931,
								24943
							],
							[
								24961,
								24983
							],
							[
								25173,
								25181
							],
							[
								25244,
								25252
							],
							[
								25442,
								25447
							],
							[
								25756,
								25775
							],
							[
								25836,
								25844
							],
							[
								25953,
								25960
							],
							[
								25978,
								26000
							],
							[
								26345,
								26353
							],
							[
								26450,
								26459
							],
							[
								26496,
								26507
							],
							[
								26525,
								26547
							],
							[
								26597,
								26608
							],
							[
								26626,
								26648
							],
							[
								26809,
								26817
							],
							[
								26920,
								26937
							],
							[
								26955,
								26977
							],
							[
								27233,
								27241
							],
							[
								27352,
								27360
							],
							[
								27365,
								27381
							],
							[
								27583,
								27596
							],
							[
								27631,
								27646
							],
							[
								27731,
								27741
							],
							[
								28054,
								28074
							],
							[
								28157,
								28203
							],
							[
								29656,
								29720
							],
							[
								29998,
								30002
							],
							[
								30756,
								30764
							],
							[
								30872,
								30880
							],
							[
								30955,
								30970
							],
							[
								31250,
								31257
							],
							[
								31311,
								31318
							],
							[
								31402,
								31409
							],
							[
								31586,
								31621
							],
							[
								31660,
								31680
							],
							[
								31710,
								31716
							],
							[
								31737,
								31745
							],
							[
								31851,
								31884
							],
							[
								32197,
								32222
							],
							[
								32617,
								32659
							],
							[
								33312,
								33365
							],
							[
								34286,
								34292
							],
							[
								34342,
								34348
							],
							[
								34476,
								34482
							],
							[
								34680,
								34696
							],
							[
								35063,
								35070
							],
							[
								35113,
								35117
							],
							[
								35137,
								35144
							],
							[
								35264,
								35291
							],
							[
								35349,
								35356
							],
							[
								35620,
								35627
							],
							[
								35687,
								35701
							],
							[
								35746,
								35761
							],
							[
								35786,
								35790
							],
							[
								35821,
								35832
							],
							[
								35865,
								35877
							],
							[
								35911,
								35924
							],
							[
								35996,
								36001
							],
							[
								36099,
								36103
							],
							[
								36127,
								36139
							],
							[
								36208,
								36213
							],
							[
								36273,
								36277
							],
							[
								36308,
								36317
							],
							[
								36330,
								36346
							],
							[
								36707,
								36711
							],
							[
								36735,
								36746
							],
							[
								36805,
								36809
							],
							[
								36847,
								36851
							],
							[
								36882,
								36898
							],
							[
								36936,
								36940
							],
							[
								36958,
								36962
							],
							[
								37005,
								37045
							],
							[
								37104,
								37120
							],
							[
								37482,
								37503
							],
							[
								37529,
								37533
							],
							[
								37976,
								37981
							],
							[
								38022,
								38049
							],
							[
								38243,
								38265
							],
							[
								39300,
								39341
							],
							[
								39421,
								39428
							],
							[
								39494,
								39501
							],
							[
								39538,
								39564
							],
							[
								39658,
								39666
							],
							[
								39732,
								39740
							],
							[
								39802,
								39813
							],
							[
								39960,
								39986
							],
							[
								40038,
								40057
							],
							[
								40133,
								40150
							],
							[
								40185,
								40209
							],
							[
								40455,
								40460
							],
							[
								40517,
								40524
							],
							[
								40605,
								40616
							],
							[
								41106,
								41116
							],
							[
								41162,
								41166
							],
							[
								41824,
								41835
							],
							[
								41846,
								41870
							],
							[
								41938,
								41970
							],
							[
								42126,
								42151
							],
							[
								42215,
								42251
							],
							[
								42321,
								42361
							],
							[
								42613,
								42641
							],
							[
								42688,
								42719
							],
							[
								42948,
								42990
							],
							[
								43193,
								43214
							],
							[
								43259,
								43278
							],
							[
								43612,
								43631
							],
							[
								43835,
								43870
							],
							[
								43988,
								44036
							],
							[
								44282,
								44309
							],
							[
								44927,
								44968
							],
							[
								45206,
								45233
							],
							[
								45376,
								45397
							],
							[
								45458,
								45485
							],
							[
								45530,
								45562
							],
							[
								45812,
								45838
							],
							[
								46032,
								46051
							],
							[
								46713,
								46738
							],
							[
								46786,
								46817
							],
							[
								46884,
								46899
							],
							[
								47094,
								47115
							],
							[
								47232,
								47268
							],
							[
								47488,
								47507
							],
							[
								47911,
								47932
							],
							[
								48149,
								48182
							],
							[
								48242,
								48265
							],
							[
								48328,
								48345
							],
							[
								48465,
								48469
							],
							[
								49296,
								49321
							],
							[
								49528,
								49555
							],
							[
								50020,
								50024
							],
							[
								50234,
								50238
							],
							[
								50437,
								50456
							],
							[
								50553,
								50558
							],
							[
								50712,
								50751
							],
							[
								50850,
								50893
							],
							[
								51103,
								51118
							],
							[
								51288,
								51324
							],
							[
								51420,
								51448
							],
							[
								51718,
								51762
							],
							[
								51824,
								51855
							],
							[
								51914,
								51935
							],
							[
								51994,
								52017
							],
							[
								52440,
								52466
							],
							[
								52534,
								52560
							],
							[
								52624,
								52643
							],
							[
								52684,
								52719
							],
							[
								52893,
								52935
							],
							[
								53120,
								53141
							],
							[
								53317,
								53347
							],
							[
								53567,
								53593
							],
							[
								54021,
								54040
							],
							[
								54101,
								54124
							],
							[
								54659,
								54686
							],
							[
								54736,
								54759
							],
							[
								54916,
								54952
							],
							[
								55022,
								55051
							],
							[
								55109,
								55132
							],
							[
								55310,
								55335
							],
							[
								55419,
								55461
							],
							[
								55560,
								55585
							],
							[
								55889,
								55944
							],
							[
								56186,
								56215
							],
							[
								56466,
								56510
							],
							[
								56642,
								56686
							],
							[
								56773,
								56801
							],
							[
								56945,
								56969
							],
							[
								57217,
								57261
							],
							[
								57583,
								57636
							],
							[
								57735,
								57780
							],
							[
								57855,
								57874
							],
							[
								57935,
								57956
							],
							[
								58133,
								58160
							],
							[
								58209,
								58239
							],
							[
								58251,
								58272
							],
							[
								58284,
								58316
							],
							[
								58458,
								58488
							],
							[
								58500,
								58541
							],
							[
								58553,
								58592
							],
							[
								58604,
								58627
							],
							[
								58639,
								58662
							],
							[
								58674,
								58693
							],
							[
								58705,
								58747
							],
							[
								58759,
								58784
							],
							[
								58796,
								58823
							],
							[
								58835,
								58873
							],
							[
								58885,
								58967
							],
							[
								58979,
								59046
							],
							[
								59058,
								59083
							],
							[
								59095,
								59137
							],
							[
								59149,
								59187
							],
							[
								59199,
								59256
							],
							[
								59268,
								59306
							],
							[
								59318,
								59343
							],
							[
								59355,
								59382
							],
							[
								59394,
								59432
							],
							[
								59444,
								59500
							],
							[
								59594,
								59645
							],
							[
								59657,
								59732
							],
							[
								59744,
								59775
							],
							[
								59787,
								59806
							],
							[
								59818,
								59854
							],
							[
								59950,
								59971
							],
							[
								59983,
								60013
							],
							[
								60025,
								60048
							],
							[
								60060,
								60103
							],
							[
								60115,
								60153
							],
							[
								60165,
								60209
							],
							[
								60221,
								60245
							],
							[
								60257,
								60287
							],
							[
								60299,
								60325
							],
							[
								60369,
								60416
							],
							[
								60428,
								60470
							],
							[
								60482,
								60520
							],
							[
								60532,
								60568
							],
							[
								60580,
								60627
							],
							[
								60639,
								60662
							],
							[
								60674,
								60708
							],
							[
								60720,
								60763
							],
							[
								60775,
								60827
							],
							[
								60931,
								60978
							],
							[
								60990,
								61018
							],
							[
								61030,
								61068
							],
							[
								61080,
								61121
							],
							[
								61133,
								61152
							],
							[
								61164,
								61193
							],
							[
								61205,
								61231
							],
							[
								61243,
								61271
							],
							[
								61283,
								61335
							],
							[
								61347,
								61375
							],
							[
								61387,
								61421
							],
							[
								61433,
								61454
							],
							[
								61466,
								61489
							],
							[
								61501,
								61539
							],
							[
								61551,
								61589
							],
							[
								61601,
								61622
							],
							[
								61634,
								61659
							],
							[
								61671,
								61696
							],
							[
								61708,
								61739
							],
							[
								61751,
								61770
							],
							[
								61782,
								61805
							],
							[
								61817,
								61858
							],
							[
								61870,
								61913
							],
							[
								61925,
								61952
							],
							[
								61964,
								62002
							],
							[
								62014,
								62047
							],
							[
								62059,
								62095
							],
							[
								62107,
								62126
							],
							[
								62138,
								62201
							],
							[
								62213,
								62269
							],
							[
								62281,
								62304
							],
							[
								62316,
								62351
							],
							[
								62363,
								62419
							],
							[
								62431,
								62484
							],
							[
								62496,
								62541
							],
							[
								62553,
								62598
							],
							[
								62610,
								62655
							],
							[
								62667,
								62697
							],
							[
								62709,
								62756
							],
							[
								62768,
								62793
							],
							[
								62805,
								62838
							],
							[
								62850,
								62880
							],
							[
								62892,
								62932
							],
							[
								62944,
								62997
							],
							[
								63009,
								63032
							],
							[
								63044,
								63065
							],
							[
								63077,
								63117
							],
							[
								63129,
								63163
							],
							[
								63175,
								63197
							],
							[
								63209,
								63243
							],
							[
								63255,
								63278
							],
							[
								63290,
								63332
							],
							[
								63344,
								63375
							],
							[
								63387,
								63413
							],
							[
								63426,
								63456
							],
							[
								64030,
								64070
							],
							[
								64280,
								64284
							],
							[
								65425,
								65465
							],
							[
								65847,
								65907
							],
							[
								66343,
								66369
							],
							[
								66477,
								66515
							],
							[
								66711,
								66715
							],
							[
								67002,
								67032
							],
							[
								67490,
								67494
							],
							[
								68146,
								68185
							],
							[
								68848,
								68905
							],
							[
								69226,
								69250
							],
							[
								69722,
								69752
							],
							[
								70015,
								70056
							],
							[
								70191,
								70230
							],
							[
								70242,
								70287
							],
							[
								70299,
								70327
							],
							[
								70339,
								70375
							],
							[
								70519,
								70557
							],
							[
								70569,
								70608
							],
							[
								70620,
								70661
							],
							[
								70673,
								70708
							],
							[
								70720,
								70767
							],
							[
								70779,
								70818
							],
							[
								70831,
								70865
							],
							[
								70877,
								70925
							],
							[
								70937,
								70980
							],
							[
								70992,
								71041
							],
							[
								71053,
								71103
							],
							[
								71115,
								71164
							],
							[
								71418,
								71442
							],
							[
								71497,
								71522
							],
							[
								71901,
								71930
							],
							[
								72109,
								72114
							],
							[
								72386,
								72407
							],
							[
								72474,
								72517
							],
							[
								72704,
								72708
							],
							[
								73290,
								73298
							],
							[
								73350,
								73358
							],
							[
								73470,
								73474
							],
							[
								73726,
								73751
							],
							[
								73786,
								73796
							],
							[
								73860,
								73871
							],
							[
								73945,
								73960
							],
							[
								73999,
								74003
							],
							[
								74082,
								74107
							],
							[
								74146,
								74154
							],
							[
								74195,
								74224
							],
							[
								74254,
								74258
							]
						],
						"symlist":
						[
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v,k) =>",
							" (v,k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"(node, ast) =>",
							" function PathOf(node, ast = $.data)",
							" n =>",
							" function Hier(node_or_path, ast = $.data)",
							"p =>",
							"([p, n]) =>",
							" ([p, n]) =>",
							" function FindType(typeName, ast = $.data)",
							"([tok]) =>",
							" n =>",
							"node =>",
							"Type",
							"constructor(node, ast)",
							" n =>",
							"n =>",
							" (n, p) =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isFunction()",
							"isArray()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"getPointer(ast)",
							" n =>",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = $.data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"get size()",
							"(acc,[name,type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"n =>",
							"FunctionDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							" n =>",
							"({ name, type }) =>",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"BuiltinType",
							"constructor(node, ast)",
							"PointerType",
							"constructor(node, ast)",
							"toJSON()",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Location",
							"constructor(loc)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, output, args = [])",
							"p =>",
							" data =>",
							" data =>",
							"async reader =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							"node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = this.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = $.data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = $.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAwAAUmV0dXJuVmFsdWVQYXRoKHZhbHVlLCBwYXRoLCBmbGFncykKUmV0dXJuVmFsdWVQYXRoRnVuY3Rpb24oZmxhZ3MpCiAgKHZhbHVlLCBwYXRoKSA9PgogICh2YWx1ZSwgcGF0aCkgPT4KICAodmFsdWUsIHBhdGgpID0+CiAgKHZhbHVlLCBwYXRoKSA9PgogIGlzUGxhaW5PYmplY3QgPSBvYmogPT4KICBjbG9uZSA9IG9iaiA9PgogIGVxdWFscyA9IChhLCBiKSA9PgogIGV4dGVuZCA9ICguLi5hcmdzKSA9PgogIHNlbGVjdCA9IChyb290LCBmaWx0ZXIsIGZsYWdzID0gMCkgPT4KU2VsZWN0RnVuY3Rpb24ocm9vdCwgZmlsdGVyLCBwYXRoID0gW10pCiAgZmluZCA9IChub2RlLCBmaWx0ZXIsIGZsYWdzID0gMCwgcm9vdCkgPT4KICBmb3JFYWNoID0gZnVuY3Rpb24oLi4uYXJncykKICBpdGVyYXRlID0gZnVuY3Rpb24qKC4uLmFyZ3MpCiAgZmlsdGVyID0gdiA9PgogIGZpbHRlciA9ICh2LCBwKSA9PgogIG1hcCA9IChwLCB2KSA9PgogIGluc2VydCA9IChuYW1lLCB2YWx1ZSkgPT4KICBpbnNlcnQgPSAobmFtZSwgdmFsdWUpID0+CiAgaW5zZXJ0ID0gKG5hbWUsIHZhbHVlKSA9PgogIGdldCA9IChyb290LCBwYXRoKSA9PgogIHNldCA9IChyb290LCBwYXRoLCB2YWx1ZSkgPT4KICBkZWxlZ2F0ZSA9IChyb290LCBwYXRoKSA9PgogIGZ1bmN0aW9uKHZhbHVlKQogIGZ1bmN0aW9uKHBhdGgsIHZhbHVlKQogIHRyYW5zZm9ybSA9IChvYmosIGZpbHRlciwgdCkgPT4KICB1bnNldCA9IChvYmplY3QsIHBhdGgpID0+CiAgdW5mbGF0dGVuID0gKG1hcCwgb2JqID0ge30pID0+AAAAAAAAAADaJwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/qjs-opencv/js_rect.cpp",
						"symkeys":
						[
							[
								639,
								658
							],
							[
								1179,
								1198
							],
							[
								1319,
								1339
							],
							[
								1476,
								1488
							],
							[
								3049,
								3061
							],
							[
								3193,
								3206
							],
							[
								3543,
								3554
							],
							[
								4937,
								4948
							],
							[
								6235,
								6252
							],
							[
								6941,
								6958
							],
							[
								7505,
								7518
							],
							[
								9034,
								9049
							],
							[
								9800,
								9814
							],
							[
								14708,
								14731
							],
							[
								15126,
								15138
							],
							[
								15825,
								15842
							],
							[
								18394,
								18406
							],
							[
								19270,
								19284
							],
							[
								19365,
								19384
							],
							[
								19717,
								19731
							]
						],
						"symlist":
						[
							"JSValue\njs_rect_new",
							"JSValue\njs_rect_new",
							"JSValue\njs_rect_wrap",
							"js_rect_ctor",
							"js_rect_data",
							"js_rect_data2",
							"js_rect_get",
							"js_rect_set",
							"js_rect_to_string",
							"js_rect_to_source",
							"js_rect_funcs",
							"js_rect_inspect",
							"js_rect_method",
							"js_rect_symbol_iterator",
							"js_rect_from",
							"js_rect_finalizer",
							"js_rect_init",
							"js_rect_export",
							"js_rect_constructor",
							"JS_INIT_MODULE"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								715,
								742
							],
							[
								822,
								852
							],
							[
								919,
								927
							],
							[
								965,
								992
							],
							[
								1041,
								1068
							],
							[
								1150,
								1154
							],
							[
								1177,
								1210
							],
							[
								1397,
								1401
							],
							[
								1420,
								1440
							],
							[
								1596,
								1628
							],
							[
								1792,
								1810
							],
							[
								2062,
								2079
							],
							[
								2387,
								2398
							],
							[
								2422,
								2429
							],
							[
								2458,
								2467
							],
							[
								2597,
								2603
							],
							[
								2725,
								2733
							],
							[
								2858,
								2867
							],
							[
								2893,
								2902
							],
							[
								2933,
								2937
							],
							[
								2998,
								3002
							],
							[
								3078,
								3094
							],
							[
								3354,
								3369
							],
							[
								3436,
								3445
							],
							[
								3513,
								3521
							],
							[
								3576,
								3585
							],
							[
								3659,
								3669
							],
							[
								3723,
								3732
							],
							[
								3762,
								3771
							],
							[
								3881,
								3892
							],
							[
								4094,
								4098
							],
							[
								4753,
								4764
							],
							[
								5014,
								5028
							],
							[
								5078,
								5114
							],
							[
								5152,
								5157
							],
							[
								5198,
								5240
							],
							[
								5433,
								5437
							],
							[
								5471,
								5482
							],
							[
								5514,
								5533
							],
							[
								5852,
								5894
							],
							[
								5966,
								5976
							],
							[
								6197,
								6202
							],
							[
								6268,
								6275
							],
							[
								6392,
								6396
							],
							[
								6494,
								6516
							],
							[
								7007,
								7012
							],
							[
								8834,
								8838
							],
							[
								9619,
								9629
							],
							[
								9847,
								9859
							],
							[
								10000,
								10008
							],
							[
								10091,
								10102
							],
							[
								10189,
								10201
							],
							[
								10293,
								10302
							],
							[
								10373,
								10382
							],
							[
								10500,
								10516
							],
							[
								10586,
								10602
							],
							[
								10691,
								10704
							],
							[
								11237,
								11252
							],
							[
								11337,
								11342
							],
							[
								11594,
								11608
							],
							[
								11714,
								11726
							],
							[
								11795,
								11807
							],
							[
								11866,
								11883
							],
							[
								11969,
								11980
							],
							[
								12074,
								12087
							],
							[
								12227,
								12235
							],
							[
								12342,
								12352
							],
							[
								12554,
								12563
							],
							[
								14053,
								14063
							],
							[
								16946,
								16952
							],
							[
								17236,
								17247
							],
							[
								17347,
								17383
							],
							[
								17561,
								17569
							],
							[
								17629,
								17637
							],
							[
								19435,
								19465
							],
							[
								19544,
								19554
							],
							[
								19572,
								19594
							],
							[
								19774,
								19782
							],
							[
								19863,
								19871
							],
							[
								20050,
								20057
							],
							[
								20108,
								20122
							],
							[
								20531,
								20535
							],
							[
								20719,
								20724
							],
							[
								21354,
								21358
							],
							[
								22101,
								22111
							],
							[
								22186,
								22206
							],
							[
								22409,
								22417
							],
							[
								22539,
								22558
							],
							[
								22655,
								22663
							],
							[
								22681,
								22703
							],
							[
								22819,
								22827
							],
							[
								22932,
								22958
							],
							[
								23209,
								23217
							],
							[
								23332,
								23343
							],
							[
								23361,
								23383
							],
							[
								23451,
								23455
							],
							[
								23561,
								23571
							],
							[
								23631,
								23635
							],
							[
								23698,
								23702
							],
							[
								23752,
								23756
							],
							[
								24219,
								24229
							],
							[
								24267,
								24275
							],
							[
								24372,
								24381
							],
							[
								24399,
								24421
							],
							[
								24527,
								24531
							],
							[
								24931,
								24943
							],
							[
								24961,
								24983
							],
							[
								25173,
								25181
							],
							[
								25244,
								25252
							],
							[
								25442,
								25447
							],
							[
								25756,
								25775
							],
							[
								25836,
								25844
							],
							[
								25953,
								25960
							],
							[
								25978,
								26000
							],
							[
								26345,
								26353
							],
							[
								26450,
								26459
							],
							[
								26496,
								26507
							],
							[
								26525,
								26547
							],
							[
								26597,
								26608
							],
							[
								26626,
								26648
							],
							[
								26809,
								26817
							],
							[
								26920,
								26937
							],
							[
								26955,
								26977
							],
							[
								27233,
								27241
							],
							[
								27352,
								27360
							],
							[
								27365,
								27381
							],
							[
								27583,
								27596
							],
							[
								27631,
								27646
							],
							[
								27731,
								27741
							],
							[
								28054,
								28074
							],
							[
								28157,
								28203
							],
							[
								29656,
								29720
							],
							[
								29998,
								30002
							],
							[
								30756,
								30764
							],
							[
								30872,
								30880
							],
							[
								30955,
								30970
							],
							[
								31250,
								31257
							],
							[
								31311,
								31318
							],
							[
								31402,
								31409
							],
							[
								31586,
								31621
							],
							[
								31660,
								31680
							],
							[
								31710,
								31716
							],
							[
								31737,
								31745
							],
							[
								31851,
								31884
							],
							[
								32197,
								32222
							],
							[
								32617,
								32659
							],
							[
								33312,
								33365
							],
							[
								34286,
								34292
							],
							[
								34342,
								34348
							],
							[
								34476,
								34482
							],
							[
								34680,
								34696
							],
							[
								35063,
								35070
							],
							[
								35113,
								35117
							],
							[
								35137,
								35144
							],
							[
								35264,
								35291
							],
							[
								35349,
								35356
							],
							[
								35620,
								35627
							],
							[
								35687,
								35701
							],
							[
								35746,
								35761
							],
							[
								35786,
								35790
							],
							[
								35821,
								35832
							],
							[
								35865,
								35877
							],
							[
								35911,
								35924
							],
							[
								35996,
								36001
							],
							[
								36099,
								36103
							],
							[
								36127,
								36139
							],
							[
								36208,
								36213
							],
							[
								36273,
								36277
							],
							[
								36308,
								36317
							],
							[
								36330,
								36346
							],
							[
								36707,
								36711
							],
							[
								36735,
								36746
							],
							[
								36805,
								36809
							],
							[
								36847,
								36851
							],
							[
								36882,
								36898
							],
							[
								36936,
								36940
							],
							[
								36958,
								36962
							],
							[
								37005,
								37045
							],
							[
								37104,
								37120
							],
							[
								37482,
								37503
							],
							[
								37529,
								37533
							],
							[
								37976,
								37981
							],
							[
								38022,
								38049
							],
							[
								38243,
								38265
							],
							[
								39300,
								39341
							],
							[
								39421,
								39428
							],
							[
								39494,
								39501
							],
							[
								39538,
								39564
							],
							[
								39658,
								39666
							],
							[
								39732,
								39740
							],
							[
								39802,
								39813
							],
							[
								39960,
								39986
							],
							[
								40038,
								40057
							],
							[
								40133,
								40150
							],
							[
								40185,
								40209
							],
							[
								40455,
								40460
							],
							[
								40517,
								40524
							],
							[
								40605,
								40616
							],
							[
								41106,
								41116
							],
							[
								41162,
								41166
							],
							[
								41824,
								41835
							],
							[
								41846,
								41870
							],
							[
								41938,
								41970
							],
							[
								42126,
								42151
							],
							[
								42215,
								42251
							],
							[
								42321,
								42361
							],
							[
								42613,
								42641
							],
							[
								42688,
								42719
							],
							[
								42948,
								42990
							],
							[
								43193,
								43214
							],
							[
								43259,
								43278
							],
							[
								43612,
								43631
							],
							[
								43835,
								43870
							],
							[
								43988,
								44036
							],
							[
								44282,
								44309
							],
							[
								44927,
								44968
							],
							[
								45206,
								45233
							],
							[
								45376,
								45397
							],
							[
								45458,
								45485
							],
							[
								45530,
								45562
							],
							[
								45812,
								45838
							],
							[
								46032,
								46051
							],
							[
								46713,
								46738
							],
							[
								46786,
								46817
							],
							[
								46884,
								46899
							],
							[
								47094,
								47115
							],
							[
								47232,
								47268
							],
							[
								47488,
								47507
							],
							[
								47911,
								47932
							],
							[
								48149,
								48182
							],
							[
								48242,
								48265
							],
							[
								48328,
								48345
							],
							[
								48465,
								48469
							],
							[
								49296,
								49321
							],
							[
								49528,
								49555
							],
							[
								50020,
								50024
							],
							[
								50234,
								50238
							],
							[
								50437,
								50456
							],
							[
								50553,
								50558
							],
							[
								50712,
								50751
							],
							[
								50850,
								50893
							],
							[
								51103,
								51118
							],
							[
								51288,
								51324
							],
							[
								51420,
								51448
							],
							[
								51718,
								51762
							],
							[
								51824,
								51855
							],
							[
								51914,
								51935
							],
							[
								51994,
								52017
							],
							[
								52440,
								52466
							],
							[
								52534,
								52560
							],
							[
								52624,
								52643
							],
							[
								52684,
								52719
							],
							[
								52893,
								52935
							],
							[
								53120,
								53141
							],
							[
								53317,
								53347
							],
							[
								53567,
								53593
							],
							[
								54021,
								54040
							],
							[
								54101,
								54124
							],
							[
								54659,
								54686
							],
							[
								54736,
								54759
							],
							[
								54916,
								54952
							],
							[
								55022,
								55051
							],
							[
								55109,
								55132
							],
							[
								55310,
								55335
							],
							[
								55419,
								55461
							],
							[
								55560,
								55585
							],
							[
								55889,
								55944
							],
							[
								56186,
								56215
							],
							[
								56466,
								56510
							],
							[
								56642,
								56686
							],
							[
								56773,
								56801
							],
							[
								56945,
								56969
							],
							[
								57217,
								57261
							],
							[
								57583,
								57636
							],
							[
								57735,
								57780
							],
							[
								57855,
								57874
							],
							[
								57935,
								57956
							],
							[
								58133,
								58160
							],
							[
								58209,
								58239
							],
							[
								58251,
								58272
							],
							[
								58284,
								58316
							],
							[
								58458,
								58488
							],
							[
								58500,
								58541
							],
							[
								58553,
								58592
							],
							[
								58604,
								58627
							],
							[
								58639,
								58662
							],
							[
								58674,
								58693
							],
							[
								58705,
								58747
							],
							[
								58759,
								58784
							],
							[
								58796,
								58823
							],
							[
								58835,
								58873
							],
							[
								58885,
								58967
							],
							[
								58979,
								59046
							],
							[
								59058,
								59083
							],
							[
								59095,
								59137
							],
							[
								59149,
								59187
							],
							[
								59199,
								59256
							],
							[
								59268,
								59306
							],
							[
								59318,
								59343
							],
							[
								59355,
								59382
							],
							[
								59394,
								59432
							],
							[
								59444,
								59500
							],
							[
								59594,
								59645
							],
							[
								59657,
								59732
							],
							[
								59744,
								59775
							],
							[
								59787,
								59806
							],
							[
								59818,
								59854
							],
							[
								59950,
								59971
							],
							[
								59983,
								60013
							],
							[
								60025,
								60048
							],
							[
								60060,
								60103
							],
							[
								60115,
								60153
							],
							[
								60165,
								60209
							],
							[
								60221,
								60245
							],
							[
								60257,
								60287
							],
							[
								60299,
								60325
							],
							[
								60369,
								60416
							],
							[
								60428,
								60470
							],
							[
								60482,
								60520
							],
							[
								60532,
								60568
							],
							[
								60580,
								60627
							],
							[
								60639,
								60662
							],
							[
								60674,
								60708
							],
							[
								60720,
								60763
							],
							[
								60775,
								60827
							],
							[
								60931,
								60978
							],
							[
								60990,
								61018
							],
							[
								61030,
								61068
							],
							[
								61080,
								61121
							],
							[
								61133,
								61152
							],
							[
								61164,
								61193
							],
							[
								61205,
								61231
							],
							[
								61243,
								61271
							],
							[
								61283,
								61335
							],
							[
								61347,
								61375
							],
							[
								61387,
								61421
							],
							[
								61433,
								61454
							],
							[
								61466,
								61489
							],
							[
								61501,
								61539
							],
							[
								61551,
								61589
							],
							[
								61601,
								61622
							],
							[
								61634,
								61659
							],
							[
								61671,
								61696
							],
							[
								61708,
								61739
							],
							[
								61751,
								61770
							],
							[
								61782,
								61805
							],
							[
								61817,
								61858
							],
							[
								61870,
								61913
							],
							[
								61925,
								61952
							],
							[
								61964,
								62002
							],
							[
								62014,
								62047
							],
							[
								62059,
								62095
							],
							[
								62107,
								62126
							],
							[
								62138,
								62201
							],
							[
								62213,
								62269
							],
							[
								62281,
								62304
							],
							[
								62316,
								62351
							],
							[
								62363,
								62419
							],
							[
								62431,
								62484
							],
							[
								62496,
								62541
							],
							[
								62553,
								62598
							],
							[
								62610,
								62655
							],
							[
								62667,
								62697
							],
							[
								62709,
								62756
							],
							[
								62768,
								62793
							],
							[
								62805,
								62838
							],
							[
								62850,
								62880
							],
							[
								62892,
								62932
							],
							[
								62944,
								62997
							],
							[
								63009,
								63032
							],
							[
								63044,
								63065
							],
							[
								63077,
								63117
							],
							[
								63129,
								63163
							],
							[
								63175,
								63197
							],
							[
								63209,
								63243
							],
							[
								63255,
								63278
							],
							[
								63290,
								63332
							],
							[
								63344,
								63375
							],
							[
								63387,
								63413
							],
							[
								63426,
								63456
							],
							[
								64030,
								64070
							],
							[
								64280,
								64284
							],
							[
								65425,
								65465
							],
							[
								65847,
								65907
							],
							[
								66343,
								66369
							],
							[
								66477,
								66515
							],
							[
								66711,
								66715
							],
							[
								67002,
								67032
							],
							[
								67490,
								67494
							],
							[
								68146,
								68185
							],
							[
								68848,
								68905
							],
							[
								69226,
								69250
							],
							[
								69722,
								69752
							],
							[
								70015,
								70056
							],
							[
								70191,
								70230
							],
							[
								70242,
								70287
							],
							[
								70299,
								70327
							],
							[
								70339,
								70375
							],
							[
								70519,
								70557
							],
							[
								70569,
								70608
							],
							[
								70620,
								70661
							],
							[
								70673,
								70708
							],
							[
								70720,
								70767
							],
							[
								70779,
								70818
							],
							[
								70831,
								70865
							],
							[
								70877,
								70925
							],
							[
								70937,
								70980
							],
							[
								70992,
								71041
							],
							[
								71053,
								71103
							],
							[
								71115,
								71164
							],
							[
								71418,
								71442
							],
							[
								71497,
								71522
							],
							[
								71901,
								71930
							],
							[
								72109,
								72114
							],
							[
								72386,
								72407
							],
							[
								72474,
								72517
							],
							[
								72704,
								72708
							],
							[
								73290,
								73298
							],
							[
								73350,
								73358
							],
							[
								73470,
								73474
							],
							[
								73726,
								73751
							],
							[
								73786,
								73796
							],
							[
								73860,
								73871
							],
							[
								73945,
								73960
							],
							[
								73999,
								74003
							],
							[
								74082,
								74107
							],
							[
								74146,
								74154
							],
							[
								74195,
								74224
							],
							[
								74254,
								74258
							]
						],
						"symlist":
						[
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v,k) =>",
							" (v,k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"(node, ast) =>",
							" function PathOf(node, ast = $.data)",
							" n =>",
							" function Hier(node_or_path, ast = $.data)",
							"p =>",
							"([p, n]) =>",
							" ([p, n]) =>",
							" function FindType(typeName, ast = $.data)",
							"([tok]) =>",
							" n =>",
							"node =>",
							"Type",
							"constructor(node, ast)",
							" n =>",
							"n =>",
							" (n, p) =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isFunction()",
							"isArray()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"getPointer(ast)",
							" n =>",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = $.data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"get size()",
							"(acc,[name,type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"n =>",
							"FunctionDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							" n =>",
							"({ name, type }) =>",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"BuiltinType",
							"constructor(node, ast)",
							"PointerType",
							"constructor(node, ast)",
							"toJSON()",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Location",
							"constructor(loc)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, output, args = [])",
							"p =>",
							" data =>",
							" data =>",
							"async reader =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							"node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = this.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = $.data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = $.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjAQAASlNWYWx1ZQpqc19yZWN0X25ldwpKU1ZhbHVlCmpzX3JlY3RfbmV3CkpTVmFsdWUKanNfcmVjdF93cmFwCiAganNfcmVjdF9jdG9yCiAganNfcmVjdF9kYXRhCiAganNfcmVjdF9kYXRhMgogIGpzX3JlY3RfZ2V0CiAganNfcmVjdF9zZXQKICBqc19yZWN0X3RvX3N0cmluZwogIGpzX3JlY3RfdG9fc291cmNlCiAganNfcmVjdF9mdW5jcwogIGpzX3JlY3RfaW5zcGVjdAogIGpzX3JlY3RfbWV0aG9kCiAganNfcmVjdF9zeW1ib2xfaXRlcmF0b3IKICBqc19yZWN0X2Zyb20KICBqc19yZWN0X2ZpbmFsaXplcgogIGpzX3JlY3RfaW5pdAogIGpzX3JlY3RfZXhwb3J0CiAganNfcmVjdF9jb25zdHJ1Y3RvcgpKU19JTklUX01PRFVMRQAAAAAAAAAA2icAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 74374,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					23,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAyQAAAAAAAADZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADJAAAAAAAAAMkAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\nnames"
					},
					"BwAAAA2QAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAASkAAAAAAAAAAAAAASkAAAAAAAABOQAAAAAAAAAAAAABOQAAAAAAAAFJAAAAAAAAAAAAAAFJAAAAAAAAAVkAAAAAAAAAAAAAAVkAAAAAAAABaQAAAAAAAAAAAAABaQAAAAAAAAF5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADZAAAAAAAAANkAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABeQAAAAAAAAGZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAF5AAAAAAAAAXkAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "depth"
					},
					"BQAAABiQAAAAAAAAGZAAAAAAAAAAAAAAGZAAAAAAAAAakAAAAAAAAAAAAAAakAAAAAAAABuQAAAAAAAAAAAAABuQAAAAAAAAHJAAAAAAAAAAAAAAHJAAAAAAAAAdkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGJAAAAAAAAAYkAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " =1"
					},
					"AwAAAB2QAAAAAAAAHpAAAAAAAAAAAAAAHpAAAAAAAAAfkAAAAAAAAAAAAAAfkAAAAAAAACCQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHZAAAAAAAAAdkAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACCQAAAAAAAAIZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIJAAAAAAAAAgkAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAACCQAAAAAAAAIJAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAIZAAAAAAAAAhkAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACCQAAAAAAAAIZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIJAAAAAAAAAgkAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAACCQAAAAAAAAIJAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAIZAAAAAAAAAhkAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAACCQAAAAAAAAIZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIJAAAAAAAAAgkAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					2,
					"left_delete",
					null,
					"AgAAACCQAAAAAAAAIJAAAAAAAAABAAAAMR+QAAAAAAAAH5AAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAIZAAAAAAAAAhkAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAB+QAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAhkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAH5AAAAAAAAAfkAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACKQAAAAAAAAI5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIpAAAAAAAAAikAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACOQAAAAAAAAJZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAI5AAAAAAAAAjkAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAACSQAAAAAAAAJZAAAAAAAAAAAAAAJZAAAAAAAAApkAAAAAAAAAAAAAApkAAAAAAAACqQAAAAAAAAAAAAACqQAAAAAAAALpAAAAAAAAAAAAAAJZAAAAAAAAAlkAAAAAAAAAQAAAAgICAgJZAAAAAAAAArkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJJAAAAAAAAAkkAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": ".thi"
					},
					"BAAAACuQAAAAAAAALJAAAAAAAAAAAAAALJAAAAAAAAAtkAAAAAAAAAAAAAAtkAAAAAAAAC6QAAAAAAAAAAAAAC6QAAAAAAAAL5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAK5AAAAAAAAArkAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					3,
					"left_delete",
					null,
					"AwAAAC6QAAAAAAAALpAAAAAAAAABAAAAaS2QAAAAAAAALZAAAAAAAAABAAAAaCyQAAAAAAAALJAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAL5AAAAAAAAAvkAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "this.data.in"
					},
					"DAAAACyQAAAAAAAALZAAAAAAAAAAAAAALZAAAAAAAAAukAAAAAAAAAAAAAAukAAAAAAAAC+QAAAAAAAAAAAAAC+QAAAAAAAAMJAAAAAAAAAAAAAAMJAAAAAAAAAxkAAAAAAAAAAAAAAxkAAAAAAAADKQAAAAAAAAAAAAADKQAAAAAAAAM5AAAAAAAAAAAAAAM5AAAAAAAAA0kAAAAAAAAAAAAAA0kAAAAAAAADWQAAAAAAAAAAAAADWQAAAAAAAANpAAAAAAAAAAAAAANpAAAAAAAAA3kAAAAAAAAAAAAAA3kAAAAAAAADiQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALJAAAAAAAAAskAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "ner"
					},
					"AwAAADiQAAAAAAAAOZAAAAAAAAAAAAAAOZAAAAAAAAA6kAAAAAAAAAAAAAA6kAAAAAAAADuQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOJAAAAAAAAA4kAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADuQAAAAAAAAPZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO5AAAAAAAAA7kAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "this.filter"
					},
					"DAAAACqQAAAAAAAAK5AAAAAAAAAAAAAAK5AAAAAAAAArkAAAAAAAABMAAAAgLnRoaXMuZGF0YS5pbm5lcigpK5AAAAAAAAAskAAAAAAAAAAAAAAskAAAAAAAAC2QAAAAAAAAAAAAAC2QAAAAAAAALpAAAAAAAAAAAAAALpAAAAAAAAAvkAAAAAAAAAAAAAAvkAAAAAAAADCQAAAAAAAAAAAAADCQAAAAAAAAMZAAAAAAAAAAAAAAMZAAAAAAAAAykAAAAAAAAAAAAAAykAAAAAAAADOQAAAAAAAAAAAAADOQAAAAAAAANJAAAAAAAAAAAAAANJAAAAAAAAA1kAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKpAAAAAAAAA9kAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADWQAAAAAAAAN5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANZAAAAAAAAA1kAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAADaQAAAAAAAAN5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANpAAAAAAAAA2kAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAADeQAAAAAAAAOJAAAAAAAAAAAAAAOJAAAAAAAAA5kAAAAAAAAAAAAAA5kAAAAAAAADqQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAN5AAAAAAAAA3kAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADqQAAAAAAAAO5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOpAAAAAAAAA6kAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADuQAAAAAAAAPZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO5AAAAAAAAA7kAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAADyQAAAAAAAAPZAAAAAAAAAAAAAAPZAAAAAAAAA+kAAAAAAAAAAAAAA+kAAAAAAAAD+QAAAAAAAAAAAAAD+QAAAAAAAAQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPJAAAAAAAAA8kAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAEGQAAAAAAAAQpAAAAAAAAAAAAAAQpAAAAAAAABDkAAAAAAAAAAAAABDkAAAAAAAAESQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQZAAAAAAAABBkAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAESQAAAAAAAARZAAAAAAAAAAAAAARZAAAAAAAABGkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARJAAAAAAAABEkAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": ";:"
					},
					"AgAAAEeQAAAAAAAASJAAAAAAAAAAAAAASJAAAAAAAABJkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAR5AAAAAAAABHkAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					2,
					"left_delete",
					null,
					"AgAAAEiQAAAAAAAASJAAAAAAAAABAAAAOkeQAAAAAAAAR5AAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAASZAAAAAAAABJkAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEeQAAAAAAAASJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAR5AAAAAAAABHkAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"left_delete",
					null,
					"AQAAAEeQAAAAAAAAR5AAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAASJAAAAAAAABIkAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": ".mna"
					},
					"BAAAAEeQAAAAAAAASJAAAAAAAAAAAAAASJAAAAAAAABJkAAAAAAAAAAAAABJkAAAAAAAAEqQAAAAAAAAAAAAAEqQAAAAAAAAS5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAR5AAAAAAAABHkAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					3,
					"left_delete",
					null,
					"AwAAAEqQAAAAAAAASpAAAAAAAAABAAAAYUmQAAAAAAAASZAAAAAAAAABAAAAbkiQAAAAAAAASJAAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAS5AAAAAAAABLkAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "map"
					},
					"AwAAAEiQAAAAAAAASZAAAAAAAAAAAAAASZAAAAAAAABKkAAAAAAAAAAAAABKkAAAAAAAAEuQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASJAAAAAAAABIkAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEuQAAAAAAAATZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAS5AAAAAAAABLkAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAEyQAAAAAAAATZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATJAAAAAAAABMkAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAE2QAAAAAAAATpAAAAAAAAAAAAAATpAAAAAAAABPkAAAAAAAAAAAAABPkAAAAAAAAFCQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATZAAAAAAAABNkAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " n.name"
					},
					"BwAAAFCQAAAAAAAAUZAAAAAAAAAAAAAAUZAAAAAAAABSkAAAAAAAAAAAAABSkAAAAAAAAFOQAAAAAAAAAAAAAFOQAAAAAAAAVJAAAAAAAAAAAAAAVJAAAAAAAABVkAAAAAAAAAAAAABVkAAAAAAAAFaQAAAAAAAAAAAAAFaQAAAAAAAAV5AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUJAAAAAAAABQkAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFiQAAAAAAAAWZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWJAAAAAAAABYkAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAACqQAAAAAAAAK5AAAAAAAAAAAAAAK5AAAAAAAAAskAAAAAAAAAAAAAAskAAAAAAAAC2QAAAAAAAAAAAAAC2QAAAAAAAALpAAAAAAAAAAAAAALpAAAAAAAAAvkAAAAAAAAAAAAAAvkAAAAAAAADCQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKpAAAAAAAAAqkAAAAAAAAAAAAAAAAERA"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADCQAAAAAAAAMZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMJAAAAAAAAAwkAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "data.inner."
					},
					"CwAAADaQAAAAAAAAN5AAAAAAAAAAAAAAN5AAAAAAAAA4kAAAAAAAAAAAAAA4kAAAAAAAADmQAAAAAAAAAAAAADmQAAAAAAAAOpAAAAAAAAAAAAAAOpAAAAAAAAA7kAAAAAAAAAAAAAA7kAAAAAAAADyQAAAAAAAAAAAAADyQAAAAAAAAPZAAAAAAAAAAAAAAPZAAAAAAAAA+kAAAAAAAAAAAAAA+kAAAAAAAAD+QAAAAAAAAAAAAAD+QAAAAAAAAQJAAAAAAAAAAAAAAQJAAAAAAAABBkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANpAAAAAAAAA2kAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"Formatter: Beautify With Prettier"
			],
			[
				"json",
				"Pretty JSON: Format JSON"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/qjs-opencv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/qjs-opencv/js_rect.cpp",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/xml/util.js",
		"/home/roman/Projects/plot-cv/lib/tXml.js",
		"/home/roman/Projects/plot-cv/lib/grammars/css3.g4",
		"/home/roman/Projects/plot-cv/test-imread.js",
		"/home/roman/Projects/plot-cv/test-umat.js",
		"/home/roman/Projects/plot-cv/test-bitset.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_gif.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/roman/Projects/plot-cv/make-bitmap.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/127.0.0.1.har",
		"/home/roman/Projects/plot-cv/libs.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/lib/devtools.js",
		"/home/roman/Projects/plot-cv/check-discogs.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/point.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/test-glfw.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/src/tutf8e.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/include/tutf8e/iso_8859_15.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/include/tutf8e.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_textcode.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/clexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/ecmascript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libutf/include/libutf.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libutf/src/libutf.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/err",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/doc/latex/unionVector.tex",
		"/home/roman/.config/sublime-text/Packages/User/Themes/[ Argonaut ].tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/usr/include/archive.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,*.js,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*,-*/disabled/*,-*/qjs-opencv/opencv*/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*,-*/disabled/*,-*/qjs-opencv/opencv*/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*,-*/disabled/*,-*/opencv_contrib/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*,-*/disabled/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/(libwebsockets|glfw|nanovg)/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h",
			"/home/roman/Projects/plot-cv,*.[ch]pp,*.[ch]",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Util.isObject =",
			"symme",
			"elector",
			"compact",
			"misc\\.",
			"Rect",
			"VSPLIT:",
			"hsplit",
			"function ws",
			"dl\\(",
			"rotate =",
			"rotate",
			"begin",
			"context",
			"new GL$",
			"GLFW",
			"context =",
			"interpolate",
			"1\\.0 -",
			"alpha, ",
			"1 -",
			"1\\.0 -",
			"WINDOW_",
			"GLFW",
			"Window"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"util."
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10202,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/clang-ast.js",
							"function_name_status_row": 28,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									715,
									742
								],
								[
									822,
									852
								],
								[
									919,
									927
								],
								[
									965,
									992
								],
								[
									1041,
									1068
								],
								[
									1150,
									1154
								],
								[
									1177,
									1210
								],
								[
									1397,
									1401
								],
								[
									1420,
									1440
								],
								[
									1596,
									1628
								],
								[
									1792,
									1810
								],
								[
									2062,
									2079
								],
								[
									2387,
									2398
								],
								[
									2422,
									2429
								],
								[
									2458,
									2467
								],
								[
									2597,
									2603
								],
								[
									2725,
									2733
								],
								[
									2858,
									2867
								],
								[
									2893,
									2902
								],
								[
									2933,
									2937
								],
								[
									2998,
									3002
								],
								[
									3078,
									3094
								],
								[
									3354,
									3369
								],
								[
									3436,
									3445
								],
								[
									3513,
									3521
								],
								[
									3576,
									3585
								],
								[
									3659,
									3669
								],
								[
									3723,
									3732
								],
								[
									3762,
									3771
								],
								[
									3881,
									3892
								],
								[
									4094,
									4098
								],
								[
									4753,
									4764
								],
								[
									5014,
									5028
								],
								[
									5078,
									5114
								],
								[
									5152,
									5157
								],
								[
									5198,
									5240
								],
								[
									5433,
									5437
								],
								[
									5471,
									5482
								],
								[
									5514,
									5533
								],
								[
									5852,
									5894
								],
								[
									5966,
									5976
								],
								[
									6197,
									6202
								],
								[
									6268,
									6275
								],
								[
									6392,
									6396
								],
								[
									6494,
									6516
								],
								[
									7007,
									7012
								],
								[
									8834,
									8838
								],
								[
									9619,
									9629
								],
								[
									9847,
									9859
								],
								[
									10000,
									10008
								],
								[
									10091,
									10102
								],
								[
									10189,
									10201
								],
								[
									10293,
									10302
								],
								[
									10373,
									10382
								],
								[
									10500,
									10516
								],
								[
									10586,
									10602
								],
								[
									10691,
									10704
								],
								[
									11237,
									11252
								],
								[
									11337,
									11342
								],
								[
									11594,
									11608
								],
								[
									11714,
									11726
								],
								[
									11795,
									11807
								],
								[
									11866,
									11883
								],
								[
									11969,
									11980
								],
								[
									12074,
									12087
								],
								[
									12227,
									12235
								],
								[
									12342,
									12352
								],
								[
									12554,
									12563
								],
								[
									14053,
									14063
								],
								[
									16946,
									16952
								],
								[
									17236,
									17247
								],
								[
									17347,
									17383
								],
								[
									17561,
									17569
								],
								[
									17629,
									17637
								],
								[
									19435,
									19465
								],
								[
									19544,
									19554
								],
								[
									19572,
									19594
								],
								[
									19774,
									19782
								],
								[
									19863,
									19871
								],
								[
									20050,
									20057
								],
								[
									20108,
									20122
								],
								[
									20531,
									20535
								],
								[
									20719,
									20724
								],
								[
									21354,
									21358
								],
								[
									22101,
									22111
								],
								[
									22186,
									22206
								],
								[
									22409,
									22417
								],
								[
									22539,
									22558
								],
								[
									22655,
									22663
								],
								[
									22681,
									22703
								],
								[
									22819,
									22827
								],
								[
									22932,
									22958
								],
								[
									23209,
									23217
								],
								[
									23332,
									23343
								],
								[
									23361,
									23383
								],
								[
									23451,
									23455
								],
								[
									23561,
									23571
								],
								[
									23631,
									23635
								],
								[
									23698,
									23702
								],
								[
									23752,
									23756
								],
								[
									24219,
									24229
								],
								[
									24267,
									24275
								],
								[
									24372,
									24381
								],
								[
									24399,
									24421
								],
								[
									24527,
									24531
								],
								[
									24931,
									24943
								],
								[
									24961,
									24983
								],
								[
									25173,
									25181
								],
								[
									25244,
									25252
								],
								[
									25442,
									25447
								],
								[
									25756,
									25775
								],
								[
									25836,
									25844
								],
								[
									25953,
									25960
								],
								[
									25978,
									26000
								],
								[
									26345,
									26353
								],
								[
									26450,
									26459
								],
								[
									26496,
									26507
								],
								[
									26525,
									26547
								],
								[
									26597,
									26608
								],
								[
									26626,
									26648
								],
								[
									26809,
									26817
								],
								[
									26920,
									26937
								],
								[
									26955,
									26977
								],
								[
									27233,
									27241
								],
								[
									27352,
									27360
								],
								[
									27365,
									27381
								],
								[
									27583,
									27596
								],
								[
									27631,
									27646
								],
								[
									27731,
									27741
								],
								[
									28054,
									28074
								],
								[
									28157,
									28203
								],
								[
									29656,
									29720
								],
								[
									29998,
									30002
								],
								[
									30756,
									30764
								],
								[
									30872,
									30880
								],
								[
									30955,
									30970
								],
								[
									31250,
									31257
								],
								[
									31311,
									31318
								],
								[
									31402,
									31409
								],
								[
									31586,
									31621
								],
								[
									31660,
									31680
								],
								[
									31710,
									31716
								],
								[
									31737,
									31745
								],
								[
									31851,
									31884
								],
								[
									32197,
									32222
								],
								[
									32617,
									32659
								],
								[
									33312,
									33365
								],
								[
									34286,
									34292
								],
								[
									34342,
									34348
								],
								[
									34476,
									34482
								],
								[
									34680,
									34696
								],
								[
									35063,
									35070
								],
								[
									35113,
									35117
								],
								[
									35137,
									35144
								],
								[
									35264,
									35291
								],
								[
									35349,
									35356
								],
								[
									35620,
									35627
								],
								[
									35687,
									35701
								],
								[
									35746,
									35761
								],
								[
									35786,
									35790
								],
								[
									35821,
									35832
								],
								[
									35865,
									35877
								],
								[
									35911,
									35924
								],
								[
									35996,
									36001
								],
								[
									36099,
									36103
								],
								[
									36127,
									36139
								],
								[
									36208,
									36213
								],
								[
									36273,
									36277
								],
								[
									36308,
									36317
								],
								[
									36330,
									36346
								],
								[
									36707,
									36711
								],
								[
									36735,
									36746
								],
								[
									36805,
									36809
								],
								[
									36847,
									36851
								],
								[
									36882,
									36898
								],
								[
									36936,
									36940
								],
								[
									36958,
									36962
								],
								[
									37005,
									37045
								],
								[
									37104,
									37120
								],
								[
									37482,
									37503
								],
								[
									37529,
									37533
								],
								[
									37976,
									37981
								],
								[
									38022,
									38049
								],
								[
									38243,
									38265
								],
								[
									39300,
									39341
								],
								[
									39421,
									39428
								],
								[
									39494,
									39501
								],
								[
									39538,
									39564
								],
								[
									39658,
									39666
								],
								[
									39732,
									39740
								],
								[
									39802,
									39813
								],
								[
									39960,
									39986
								],
								[
									40038,
									40057
								],
								[
									40133,
									40150
								],
								[
									40185,
									40209
								],
								[
									40455,
									40460
								],
								[
									40517,
									40524
								],
								[
									40605,
									40616
								],
								[
									41106,
									41116
								],
								[
									41162,
									41166
								],
								[
									41824,
									41835
								],
								[
									41846,
									41870
								],
								[
									41938,
									41970
								],
								[
									42126,
									42151
								],
								[
									42215,
									42251
								],
								[
									42321,
									42361
								],
								[
									42613,
									42641
								],
								[
									42688,
									42719
								],
								[
									42948,
									42990
								],
								[
									43193,
									43214
								],
								[
									43259,
									43278
								],
								[
									43612,
									43631
								],
								[
									43835,
									43870
								],
								[
									43988,
									44036
								],
								[
									44282,
									44309
								],
								[
									44927,
									44968
								],
								[
									45206,
									45233
								],
								[
									45376,
									45397
								],
								[
									45458,
									45485
								],
								[
									45530,
									45562
								],
								[
									45812,
									45838
								],
								[
									46032,
									46051
								],
								[
									46713,
									46738
								],
								[
									46786,
									46817
								],
								[
									46884,
									46899
								],
								[
									47094,
									47115
								],
								[
									47232,
									47268
								],
								[
									47488,
									47507
								],
								[
									47911,
									47932
								],
								[
									48149,
									48182
								],
								[
									48242,
									48265
								],
								[
									48328,
									48345
								],
								[
									48465,
									48469
								],
								[
									49296,
									49321
								],
								[
									49528,
									49555
								],
								[
									50020,
									50024
								],
								[
									50234,
									50238
								],
								[
									50437,
									50456
								],
								[
									50553,
									50558
								],
								[
									50712,
									50751
								],
								[
									50850,
									50893
								],
								[
									51103,
									51118
								],
								[
									51288,
									51324
								],
								[
									51420,
									51448
								],
								[
									51718,
									51762
								],
								[
									51824,
									51855
								],
								[
									51914,
									51935
								],
								[
									51994,
									52017
								],
								[
									52440,
									52466
								],
								[
									52534,
									52560
								],
								[
									52624,
									52643
								],
								[
									52684,
									52719
								],
								[
									52893,
									52935
								],
								[
									53120,
									53141
								],
								[
									53317,
									53347
								],
								[
									53567,
									53593
								],
								[
									54021,
									54040
								],
								[
									54101,
									54124
								],
								[
									54659,
									54686
								],
								[
									54736,
									54759
								],
								[
									54916,
									54952
								],
								[
									55022,
									55051
								],
								[
									55109,
									55132
								],
								[
									55310,
									55335
								],
								[
									55419,
									55461
								],
								[
									55560,
									55585
								],
								[
									55889,
									55944
								],
								[
									56186,
									56215
								],
								[
									56466,
									56510
								],
								[
									56642,
									56686
								],
								[
									56773,
									56801
								],
								[
									56945,
									56969
								],
								[
									57217,
									57261
								],
								[
									57583,
									57636
								],
								[
									57735,
									57780
								],
								[
									57855,
									57874
								],
								[
									57935,
									57956
								],
								[
									58133,
									58160
								],
								[
									58209,
									58239
								],
								[
									58251,
									58272
								],
								[
									58284,
									58316
								],
								[
									58458,
									58488
								],
								[
									58500,
									58541
								],
								[
									58553,
									58592
								],
								[
									58604,
									58627
								],
								[
									58639,
									58662
								],
								[
									58674,
									58693
								],
								[
									58705,
									58747
								],
								[
									58759,
									58784
								],
								[
									58796,
									58823
								],
								[
									58835,
									58873
								],
								[
									58885,
									58967
								],
								[
									58979,
									59046
								],
								[
									59058,
									59083
								],
								[
									59095,
									59137
								],
								[
									59149,
									59187
								],
								[
									59199,
									59256
								],
								[
									59268,
									59306
								],
								[
									59318,
									59343
								],
								[
									59355,
									59382
								],
								[
									59394,
									59432
								],
								[
									59444,
									59500
								],
								[
									59594,
									59645
								],
								[
									59657,
									59732
								],
								[
									59744,
									59775
								],
								[
									59787,
									59806
								],
								[
									59818,
									59854
								],
								[
									59950,
									59971
								],
								[
									59983,
									60013
								],
								[
									60025,
									60048
								],
								[
									60060,
									60103
								],
								[
									60115,
									60153
								],
								[
									60165,
									60209
								],
								[
									60221,
									60245
								],
								[
									60257,
									60287
								],
								[
									60299,
									60325
								],
								[
									60369,
									60416
								],
								[
									60428,
									60470
								],
								[
									60482,
									60520
								],
								[
									60532,
									60568
								],
								[
									60580,
									60627
								],
								[
									60639,
									60662
								],
								[
									60674,
									60708
								],
								[
									60720,
									60763
								],
								[
									60775,
									60827
								],
								[
									60931,
									60978
								],
								[
									60990,
									61018
								],
								[
									61030,
									61068
								],
								[
									61080,
									61121
								],
								[
									61133,
									61152
								],
								[
									61164,
									61193
								],
								[
									61205,
									61231
								],
								[
									61243,
									61271
								],
								[
									61283,
									61335
								],
								[
									61347,
									61375
								],
								[
									61387,
									61421
								],
								[
									61433,
									61454
								],
								[
									61466,
									61489
								],
								[
									61501,
									61539
								],
								[
									61551,
									61589
								],
								[
									61601,
									61622
								],
								[
									61634,
									61659
								],
								[
									61671,
									61696
								],
								[
									61708,
									61739
								],
								[
									61751,
									61770
								],
								[
									61782,
									61805
								],
								[
									61817,
									61858
								],
								[
									61870,
									61913
								],
								[
									61925,
									61952
								],
								[
									61964,
									62002
								],
								[
									62014,
									62047
								],
								[
									62059,
									62095
								],
								[
									62107,
									62126
								],
								[
									62138,
									62201
								],
								[
									62213,
									62269
								],
								[
									62281,
									62304
								],
								[
									62316,
									62351
								],
								[
									62363,
									62419
								],
								[
									62431,
									62484
								],
								[
									62496,
									62541
								],
								[
									62553,
									62598
								],
								[
									62610,
									62655
								],
								[
									62667,
									62697
								],
								[
									62709,
									62756
								],
								[
									62768,
									62793
								],
								[
									62805,
									62838
								],
								[
									62850,
									62880
								],
								[
									62892,
									62932
								],
								[
									62944,
									62997
								],
								[
									63009,
									63032
								],
								[
									63044,
									63065
								],
								[
									63077,
									63117
								],
								[
									63129,
									63163
								],
								[
									63175,
									63197
								],
								[
									63209,
									63243
								],
								[
									63255,
									63278
								],
								[
									63290,
									63332
								],
								[
									63344,
									63375
								],
								[
									63387,
									63413
								],
								[
									63426,
									63456
								],
								[
									64030,
									64070
								],
								[
									64280,
									64284
								],
								[
									65425,
									65465
								],
								[
									65847,
									65907
								],
								[
									66343,
									66369
								],
								[
									66477,
									66515
								],
								[
									66711,
									66715
								],
								[
									67002,
									67032
								],
								[
									67490,
									67494
								],
								[
									68146,
									68185
								],
								[
									68848,
									68905
								],
								[
									69226,
									69250
								],
								[
									69722,
									69752
								],
								[
									70015,
									70056
								],
								[
									70191,
									70230
								],
								[
									70242,
									70287
								],
								[
									70299,
									70327
								],
								[
									70339,
									70375
								],
								[
									70519,
									70557
								],
								[
									70569,
									70608
								],
								[
									70620,
									70661
								],
								[
									70673,
									70708
								],
								[
									70720,
									70767
								],
								[
									70779,
									70818
								],
								[
									70831,
									70865
								],
								[
									70877,
									70925
								],
								[
									70937,
									70980
								],
								[
									70992,
									71041
								],
								[
									71053,
									71103
								],
								[
									71115,
									71164
								],
								[
									71418,
									71442
								],
								[
									71497,
									71522
								],
								[
									71901,
									71930
								],
								[
									72109,
									72114
								],
								[
									72386,
									72407
								],
								[
									72474,
									72517
								],
								[
									72704,
									72708
								],
								[
									73290,
									73298
								],
								[
									73350,
									73358
								],
								[
									73470,
									73474
								],
								[
									73726,
									73751
								],
								[
									73786,
									73796
								],
								[
									73860,
									73871
								],
								[
									73945,
									73960
								],
								[
									73999,
									74003
								],
								[
									74082,
									74107
								],
								[
									74146,
									74154
								],
								[
									74195,
									74224
								],
								[
									74254,
									74258
								]
							],
							"symlist":
							[
								"FileTime(filename)",
								"Newer(file, ...other)",
								"  other =>",
								"Older(file, other)",
								"GetSubscripts(str)",
								"  m =>",
								"TrimSubscripts(str, sub)",
								"List",
								"  constructor(...args)",
								"  filter(callback, thisArg = null)",
								"  callback = elem =>",
								"  slice(start, end)",
								"  get first()",
								"  elem =>",
								"  entries()",
								"  keys()",
								"  values()",
								"  toArray()",
								"(a, n) =>",
								"List",
								"Node",
								"  constructor(ast)",
								"  static get(ast)",
								"  get ast()",
								"  get id()",
								"  get loc()",
								"  get file()",
								"\t(v,k) =>",
								"\t(v,k) =>",
								"  get range()",
								"  r =>",
								"  toJSON(obj)",
								"(node, ast) =>",
								"PathOf(node, ast = $.data)",
								"\tn =>",
								"Hier(node_or_path, ast = $.data)",
								"  p =>",
								"([p, n]) =>",
								"\t([p, n]) =>",
								"FindType(typeName, ast = $.data)",
								"([tok]) =>",
								"\tn =>",
								"  node =>",
								"Type",
								"  constructor(node, ast)",
								"\tn =>",
								"  n =>",
								"\t(n, p) =>",
								"  get regExp()",
								"  isEnum()",
								"  isPointer()",
								"  isFunction()",
								"  isArray()",
								"  arrayOf()",
								"  get subscripts()",
								"  trimSubscripts()",
								"  get pointer()",
								"  getPointer(ast)",
								"\tn =>",
								"  get unsigned()",
								"  get signed()",
								"  isCompound()",
								"  isFloatingPoint()",
								"  get alias()",
								"  get aliases()",
								"  isEnum()",
								"  isString()",
								"  get ffi()",
								"  get size()",
								"  toJS()",
								"  toJSON(obj)",
								"  static get(name_or_id, ast = $.data)",
								"\tnode =>",
								"\tnode =>",
								"RoundTo(value, align)",
								"RecordDecl",
								"  constructor(node, ast)",
								"  child =>",
								"  child =>",
								"  node =>",
								"(acc, node) =>",
								"  i =>",
								"\tn =>",
								"  n =>",
								"  get size()",
								"(acc,[name,type]) =>",
								"  toJSON()",
								"([name, member]) =>",
								"EnumDecl",
								"  constructor(node, ast)",
								"  child =>",
								"({ name, type, inner }) =>",
								"  toJSON()",
								"TypedefDecl",
								"  constructor(node, ast)",
								"  n =>",
								"\t(v, k) =>",
								"  n =>",
								"  n =>",
								"  n =>",
								"  get size()",
								"  toJSON()",
								"FieldDecl",
								"  constructor(node, ast)",
								"  n =>",
								"FunctionDecl",
								"  constructor(node, ast)",
								"  child =>",
								"  child =>",
								"\tn =>",
								"({ name, type }) =>",
								"  toJSON()",
								"VarDecl",
								"  constructor(node, ast)",
								"  toJSON()",
								"ClassDecl",
								"BuiltinType",
								"  constructor(node, ast)",
								"PointerType",
								"  constructor(node, ast)",
								"  toJSON()",
								"ConstantArrayType",
								"  constructor(node, ast)",
								"  toJSON()",
								"Location",
								"  constructor(loc)",
								"\t(t, ...c) =>",
								"'\\x1b[m' : t =>",
								"  toString()",
								"  localeCompare(other)",
								"TypeFactory(node, ast, cache = true)",
								"SpawnCompiler(compiler, input, output, args = [])",
								"  p =>",
								"\tdata =>",
								"\tdata =>",
								"  reader =>",
								"  line =>",
								"  line =>",
								"  line =>",
								"PipeReader(fd, callback)",
								"(resolve, reject) =>",
								"\t() =>",
								"\tdata =>",
								"ReadPipe(fd, callback)",
								"ReadOutput(fd)",
								"SourceDependencies(...args)",
								"AstDump(compiler, source, args, force)",
								"  size()",
								"  json()",
								"  data()",
								"SetFile = loc =>",
								"  files()",
								"  n =>",
								"  file =>",
								"  pred2 = (used, implicit) =>",
								"  node =>",
								"  types()",
								"\tn =>",
								"\t() =>",
								"List",
								"  functions()",
								"\tn =>",
								"\t() =>",
								"\tn =>",
								"List",
								"  namespaces()",
								"\tn =>",
								"List",
								"  classes()",
								"  predicate = n =>",
								"List",
								"  variables()",
								"  n =>",
								"List",
								"  names(depth = 1)",
								"  n =>",
								"  n =>",
								"NameFor(decl, ast = this.data)",
								"\t(value, key) =>",
								"NodeType(n)",
								"  t =>",
								"\tn =>",
								"NodeName(n, name)",
								"GetLoc(node)",
								"GetTypeNode(node, ast = $.data)",
								"  node =>",
								"  node =>",
								"GetTypeStr(node)",
								"  inner =>",
								"  inner =>",
								"([n, t]) =>",
								"NodePrinter(ast)",
								"  put(str)",
								"  trim()",
								"  printer = function(node)",
								"  get()",
								"  value()",
								"  value(node)",
								"  toString()",
								"  i =>",
								"NodePrinter",
								"AbiTagAttr(abi_tag_attr)",
								"AccessSpecDecl(access_spec_decl)",
								"AlignedAttr(aligned_attr)",
								"AlwaysInlineAttr(always_inline_attr)",
								"ArraySubscriptExpr(array_subscript_expr)",
								"AsmLabelAttr(asm_label_attr)",
								"BinaryOperator(binary_operator)",
								"BlockCommandComment(block_command_comment)",
								"BreakStmt(break_stmt)",
								"CallExpr(call_expr)",
								"CaseStmt(case_stmt)",
								"CharacterLiteral(character_literal)",
								"CompoundAssignOperator(compound_assign_operator)",
								"CompoundStmt(compound_stmt)",
								"ConditionalOperator(conditional_operator)",
								"ConstantExpr(constant_expr)",
								"ConstAttr(const_attr)",
								"ContinueStmt(continue_stmt)",
								"CStyleCastExpr(cstyle_cast_expr)",
								"DeclRefExpr(decl_ref_expr)",
								"DeclStmt(decl_stmt)",
								"DefaultStmt(default_stmt)",
								"DeprecatedAttr(deprecated_attr)",
								"DoStmt(do_stmt)",
								"EmptyDecl(empty_decl)",
								"EnumConstantDecl(enum_constant_decl)",
								"EnumDecl(enum_decl)",
								"FieldDecl(field_decl)",
								"FloatingLiteral(floating_literal)",
								"FormatAttr(format_attr)",
								"ForStmt(for_stmt)",
								"  n =>",
								"FullComment(full_comment)",
								"FunctionDecl(function_decl)",
								"  n =>",
								"  n =>",
								"GotoStmt(goto_stmt)",
								"\tn =>",
								"HTMLEndTagComment(html_end_tag_comment)",
								"HTMLStartTagComment(html_start_tag_comment)",
								"IfStmt(if_stmt)",
								"ImplicitCastExpr(implicit_cast_expr)",
								"InitListExpr(init_list_expr)",
								"InlineCommandComment(inline_command_comment)",
								"IntegerLiteral(integer_literal)",
								"LabelStmt(label_stmt)",
								"MemberExpr(member_expr)",
								"NonNullAttr(non_null_attr)",
								"NoThrowAttr(no_throw_attr)",
								"NullStmt(null_stmt)",
								"ParagraphComment(paragraph_comment)",
								"ParamCommandComment(param_command_comment)",
								"ParenExpr(paren_expr)",
								"ParenListExpr(paren_list_expr)",
								"ParmVarDecl(parm_var_decl)",
								"PureAttr(pure_attr)",
								"RecordDecl(record_decl)",
								"RestrictAttr(restrict_attr)",
								"ReturnStmt(return_stmt)",
								"ReturnsTwiceAttr(returns_twice_attr)",
								"StringLiteral(string_literal)",
								"SwitchStmt(switch_stmt)",
								"TextComment(text_comment)",
								"TranslationUnitDecl(translation_unit_decl)",
								"TypedefDecl(typedef_decl)",
								"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
								"UnaryOperator(unary_operator)",
								"UnresolvedLookupExpr(unresolved_lookup_expr)",
								"UnresolvedMemberExpr(unresolved_member_expr)",
								"VarDecl(var_decl, base_type)",
								"([offset, subscript]) =>",
								"VerbatimBlockComment(verbatim_block_comment)",
								"VerbatimBlockLineComment(verbatim_block_line_comment)",
								"WarnUnusedResultAttr(warn_unused_result_attr)",
								"WeakAttr(weak_attr)",
								"WhileStmt(while_stmt)",
								"OverrideAttr(override_attr)",
								"AddrLabelExpr(addr_label_expr)",
								"AliasAttr(alias_attr)",
								"AlignValueAttr(align_value_attr)",
								"AllocSizeAttr(alloc_size_attr)",
								"ArrayInitIndexExpr(array_init_index_expr)",
								"ArrayInitLoopExpr(array_init_loop_expr)",
								"AtomicExpr(atomic_expr)",
								"AtomicType(atomic_type)",
								"AutoType(auto_type)",
								"BuiltinTemplateDecl(builtin_template_decl)",
								"BuiltinType(builtin_type)",
								"CallbackAttr(callback_attr)",
								"ClassTemplateDecl(class_template_decl)",
								"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
								"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
								"ComplexType(complex_type)",
								"CompoundLiteralExpr(compound_literal_expr)",
								"ConstantArrayType(constant_array_type)",
								"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
								"ConvertVectorExpr(convert_vector_expr)",
								"DecayedType(decayed_type)",
								"DecltypeType(decltype_type)",
								"DependentNameType(dependent_name_type)",
								"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
								"DependentSizedArrayType(dependent_sized_array_type)",
								"DependentTemplateSpecializationType(dependent_template_specialization_type)",
								"ElaboratedType(elaborated_type)",
								"EnumType(enum_type)",
								"ExprWithCleanups(expr_with_cleanups)",
								"FinalAttr(final_attr)",
								"FormatArgAttr(format_arg_attr)",
								"FriendDecl(friend_decl)",
								"FunctionNoProtoType(function_no_proto_type)",
								"FunctionProtoType(function_proto_type)",
								"FunctionTemplateDecl(function_template_decl)",
								"GCCAsmStmt(gcc_asm_stmt)",
								"GNUInlineAttr(gnu_inline_attr)",
								"GNUNullExpr(gnu_null_expr)",
								"ImplicitValueInitExpr(implicit_value_init_expr)",
								"IncompleteArrayType(incomplete_array_type)",
								"IndirectFieldDecl(indirect_field_decl)",
								"IndirectGotoStmt(indirect_goto_stmt)",
								"InjectedClassNameType(injected_class_name_type)",
								"LambdaExpr(lambda_expr)",
								"LinkageSpecDecl(linkage_spec_decl)",
								"LValueReferenceType(l_value_reference_type)",
								"MaterializeTemporaryExpr(materialize_temporary_expr)",
								"MaxFieldAlignmentAttr(max_field_alignment_attr)",
								"MayAliasAttr(may_alias_attr)",
								"MemberPointerType(member_pointer_type)",
								"MinVectorWidthAttr(min_vector_width_attr)",
								"ModeAttr(mode_attr)",
								"NamespaceDecl(namespace_decl)",
								"NoDebugAttr(no_debug_attr)",
								"NoInlineAttr(no_inline_attr)",
								"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
								"OffsetOfExpr(offset_of_expr)",
								"OpaqueValueExpr(opaque_value_expr)",
								"OwnerAttr(owner_attr)",
								"PackedAttr(packed_attr)",
								"PackExpansionExpr(pack_expansion_expr)",
								"PackExpansionType(pack_expansion_type)",
								"ParenType(paren_type)",
								"PointerAttr(pointer_attr)",
								"PointerType(pointer_type)",
								"PredefinedExpr(predefined_expr)",
								"QualType(qual_type)",
								"RecordType(record_type)",
								"ReturnsNonNullAttr(returns_non_null_attr)",
								"RValueReferenceType(r_value_reference_type)",
								"SentinelAttr(sentinel_attr)",
								"ShuffleVectorExpr(shuffle_vector_expr)",
								"SizeOfPackExpr(size_of_pack_expr)",
								"StaticAssertDecl(static_assert_decl)",
								"StmtExpr(stmt_expr)",
								"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
								"SubstTemplateTypeParmType(subst_template_type_parm_type)",
								"TargetAttr(target_attr)",
								"TemplateArgument(template_argument)",
								"TemplateSpecializationType(template_specialization_type)",
								"TemplateTemplateParmDecl(template_template_parm_decl)",
								"TemplateTypeParmDecl(template_type_parm_decl)",
								"TemplateTypeParmType(template_type_parm_type)",
								"TParamCommandComment(t_param_command_comment)",
								"TypeAliasDecl(type_alias_decl)",
								"TypeAliasTemplateDecl(type_alias_template_decl)",
								"TypedefType(typedef_type)",
								"TypeOfExprType(type_of_expr_type)",
								"TypeTraitExpr(type_trait_expr)",
								"UnaryTransformType(unary_transform_type)",
								"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
								"UnusedAttr(unused_attr)",
								"UsingDecl(using_decl)",
								"UsingDirectiveDecl(using_directive_decl)",
								"UsingShadowDecl(using_shadow_decl)",
								"VAArgExpr(va_arg_expr)",
								"VarTemplateDecl(var_template_decl)",
								"VectorType(vector_type)",
								"VerbatimLineComment(verbatim_line_comment)",
								"VisibilityAttr(visibility_attr)",
								"WeakRefAttr(weak_ref_attr)",
								"CXXRecordDecl(cxx_record_decl)",
								"CXXConstructorDecl(cxx_constructor_decl)",
								"  n =>",
								"CXXCtorInitializer(cxx_ctor_initializer)",
								"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
								"CXXThisExpr(cxx_this_expr)",
								"CXXDestructorDecl(cxx_destructor_decl)",
								"  n =>",
								"CXXMethodDecl(cxx_method_decl)",
								"  n =>",
								"CXXStaticCastExpr(cxx_static_cast_expr)",
								"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
								"CXXNewExpr(cxx_new_expr)",
								"CXXDeleteExpr(cxx_delete_expr)",
								"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
								"CXX11NoReturnAttr(cxx11_no_return_attr)",
								"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
								"CXXCatchStmt(cxx_catch_stmt)",
								"CXXConstructExpr(cxx_construct_expr)",
								"CXXConversionDecl(cxx_conversion_decl)",
								"CXXDefaultArgExpr(cxx_default_arg_expr)",
								"CXXDefaultInitExpr(cxx_default_init_expr)",
								"CXXForRangeStmt(cxx_for_range_stmt)",
								"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
								"CXXMemberCallExpr(cxx_member_call_expr)",
								"CXXNoexceptExpr(cxx_noexcept_expr)",
								"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
								"CXXOperatorCallExpr(cxx_operator_call_expr)",
								"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
								"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
								"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
								"CXXTryStmt(cxx_try_stmt)",
								"PrintNode(node)",
								"PrintAst(node, ast)",
								"  get()",
								"  isNode(obj)",
								"GetType(name_or_id, ast = $.data)",
								"  n =>",
								"\tnode =>",
								"\tnode =>",
								"  r =>",
								"GetFields(node)",
								"\t(v, k) =>",
								"([v, p]) =>",
								"([loc, ptr]) =>",
								"  i =>",
								"GetParams(node)",
								"  child =>",
								"PathRemoveLoc(path)",
								"  p =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647430555.87,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "clang-ast.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 74374,
						"regions":
						{
						},
						"selection":
						[
							[
								36997,
								37426
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": -1,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648111363.82,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18050.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139621681009616)":
	{
		"height": 0.0
	},
	"output.Protocol(139717987054208)":
	{
		"height": 0.0
	},
	"output.Protocol(139737090363696)":
	{
		"height": 0.0
	},
	"output.Protocol(139869175772064)":
	{
		"height": 0.0
	},
	"output.Protocol(140057995355088)":
	{
		"height": 0.0
	},
	"output.Protocol(140274144933008)":
	{
		"height": 0.0
	},
	"output.Protocol(140481508860304)":
	{
		"height": 0.0
	},
	"output.Protocol(140517145502288)":
	{
		"height": 0.0
	},
	"output.Protocol(140585354219824)":
	{
		"height": 0.0
	},
	"output.Protocol(140603239275824)":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"txml",
				"lib/tXml.js"
			],
			[
				"css.g4",
				"lib/grammars/css3.g4"
			],
			[
				"test-imread",
				"test-imread.js"
			],
			[
				"test-uma",
				"test-umat.js"
			],
			[
				"test-bitset",
				"test-bitset.js"
			],
			[
				"test_gif",
				"qjs-opencv/tests/test_gif.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"make-bit",
				"make-bitmap.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"devtoo",
				"lib/devtools.js"
			],
			[
				"check-disc",
				"check-discogs.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"draw-utils",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"rgba.js",
				"lib/color/rgba.js"
			],
			[
				"cvHigh",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"test-glfw",
				"test-glfw.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"path.h",
				"include/path.h"
			],
			[
				"location.h",
				"include/location.h"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"l",
				"quickjs-lexer.c"
			],
			[
				"resolve-impo",
				"resolve-imports.js"
			],
			[
				"path.c",
				"src/path.c"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"repl.j",
				"lib/repl.js"
			],
			[
				"js-u",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"streams.js",
				"tests/test_streams.js"
			],
			[
				"buffer",
				"src/buffer-utils.c"
			],
			[
				"test_te",
				"tests/test_textcode.js"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"extract-str",
				"extract-structs.js"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"token.c",
				"token.c"
			],
			[
				"quickjs-le",
				"quickjs-lexer.c"
			],
			[
				"jsutil",
				"js-utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"quickjs-location",
				"quickjs-location.h"
			],
			[
				"quickjs-loca",
				"quickjs-location.c"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"char-ut",
				"char-utils.h"
			],
			[
				"buff",
				"buffer-utils.h"
			],
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"location",
				"location.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"CMakeLi",
				"CMakeLists.txt"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"defines.h",
				"defines.h"
			],
			[
				"queue.c",
				"queue.c"
			],
			[
				"extend",
				"lib/extendArray.js"
			],
			[
				"quickjs-sockets",
				"quickjs-sockets.c"
			],
			[
				"lexer",
				"quickjs-lexer.c"
			],
			[
				"buffer-ut",
				"buffer-utils.h"
			],
			[
				"ringbuf",
				"ringbuffer.h"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"quickjs-lexer.c",
				"quickjs-lexer.c"
			],
			[
				"quickjs-loc",
				"quickjs-location.c"
			],
			[
				"xml.c",
				"quickjs-xml.c"
			],
			[
				"test-dia",
				"build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"quickjs-pa",
				"quickjs-path.c"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"location.c",
				"quickjs-location.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"extra",
				"extract-structs.js"
			],
			[
				"-inspe",
				"quickjs-inspect.c"
			],
			[
				"proper",
				"property-enumeration.h"
			],
			[
				"vector",
				"vector.h"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"res",
				"resolve-imports.js"
			],
			[
				"lexre",
				"lexer.c"
			],
			[
				"lexer.c",
				"quickjs-lexer.c"
			],
			[
				"pointer",
				"pointer.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"archive",
				"quickjs-archive.c"
			],
			[
				"pointer.c",
				"quickjs-pointer.c"
			],
			[
				"spect.c",
				"quickjs-inspect.c"
			],
			[
				"blob.c",
				"quickjs-blob.c"
			],
			[
				"repea",
				"quickjs-repeater.c"
			],
			[
				"loca",
				"quickjs-location.c"
			],
			[
				"bjson.c",
				"quickjs-bjson.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"char-u",
				"char-utils.h"
			],
			[
				"predi",
				"predicate.h"
			],
			[
				"virtua",
				"virtual-properties.c"
			],
			[
				"pointre",
				"pointer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"child-",
				"child-process.c"
			],
			[
				"child-pro",
				"quickjs-child-process.c"
			],
			[
				"gpio.c",
				"quickjs-gpio.c"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"ointer.h",
				"pointer.h"
			],
			[
				"defin",
				"defines.h"
			],
			[
				"defines",
				"defines.h"
			],
			[
				"cutils.h",
				"char-utils.h"
			],
			[
				"debu",
				"debug.h"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"test_le",
				"tests/test_lexer.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"test",
				"tests/test_stack.js"
			],
			[
				"jsutils",
				"CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d"
			],
			[
				"jslexe",
				"lib/jslexer.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
