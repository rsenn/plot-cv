{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"i",
				"is_dir"
			],
			[
				"getText",
				"getTextArray"
			],
			[
				"Lin",
				"LinearTransform"
			],
			[
				"CURL_LIB",
				"CURL_LIBRARY_DEBUG"
			],
			[
				"Circ",
				"CircuitJS"
			],
			[
				"dep",
				"dependency"
			],
			[
				"opt",
				"optimization"
			],
			[
				"OPENCV_LIB",
				"OPENCV_LIBRARIES"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"relat",
				"relativeTo"
			],
			[
				"max",
				"maxLineGap"
			],
			[
				"Pm_Op",
				"Pm_OpenInput"
			],
			[
				"Pm_Get",
				"Pm_GetDeviceInfo"
			],
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  main",
			"settings":
			{
				"buffer_size": 6,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								529,
								538
							],
							[
								752,
								756
							],
							[
								787,
								791
							],
							[
								821,
								837
							],
							[
								900,
								908
							],
							[
								1122,
								1157
							],
							[
								1233,
								1268
							],
							[
								1426,
								1450
							],
							[
								1451,
								1464
							],
							[
								1465,
								1485
							],
							[
								1624,
								1643
							],
							[
								1644,
								1664
							],
							[
								1686,
								1698
							],
							[
								1759,
								1778
							],
							[
								1779,
								1799
							],
							[
								1821,
								1833
							],
							[
								1877,
								1894
							],
							[
								1920,
								1938
							],
							[
								1975,
								2000
							],
							[
								2001,
								2021
							],
							[
								2067,
								2086
							],
							[
								2139,
								2145
							],
							[
								2210,
								2233
							],
							[
								2268,
								2283
							],
							[
								2383,
								2418
							],
							[
								2453,
								2483
							],
							[
								2547,
								2573
							],
							[
								2621,
								2648
							],
							[
								2703,
								2722
							],
							[
								2723,
								2743
							],
							[
								2776,
								2781
							],
							[
								2811,
								2829
							],
							[
								2830,
								2845
							],
							[
								2943,
								2959
							],
							[
								3117,
								3141
							],
							[
								3187,
								3202
							],
							[
								3215,
								3229
							],
							[
								3291,
								3301
							],
							[
								3332,
								3338
							],
							[
								3388,
								3422
							],
							[
								3496,
								3513
							],
							[
								3814,
								3819
							],
							[
								3880,
								3890
							],
							[
								3954,
								3967
							],
							[
								4070,
								4095
							],
							[
								4096,
								4117
							],
							[
								4157,
								4189
							],
							[
								4263,
								4281
							],
							[
								4347,
								4383
							],
							[
								4439,
								4483
							],
							[
								4535,
								4565
							],
							[
								4644,
								4650
							],
							[
								4663,
								4669
							],
							[
								4695,
								4701
							],
							[
								4722,
								4738
							],
							[
								4784,
								4792
							],
							[
								4801,
								4825
							],
							[
								4850,
								4864
							],
							[
								4900,
								4918
							],
							[
								4954,
								4970
							],
							[
								4987,
								5022
							],
							[
								5078,
								5082
							],
							[
								5108,
								5117
							],
							[
								5207,
								5247
							],
							[
								5295,
								5309
							],
							[
								5410,
								5448
							],
							[
								5516,
								5520
							],
							[
								5564,
								5592
							],
							[
								5661,
								5674
							],
							[
								5675,
								5695
							],
							[
								5737,
								5754
							],
							[
								5791,
								5812
							],
							[
								5828,
								5832
							],
							[
								5868,
								5887
							],
							[
								5950,
								5967
							],
							[
								6050,
								6071
							],
							[
								6118,
								6135
							],
							[
								6185,
								6216
							],
							[
								6348,
								6366
							],
							[
								6599,
								6617
							],
							[
								6643,
								6665
							],
							[
								6679,
								6684
							],
							[
								6706,
								6729
							],
							[
								6743,
								6748
							],
							[
								6782,
								6806
							],
							[
								6820,
								6825
							],
							[
								6888,
								6925
							],
							[
								6985,
								6991
							],
							[
								7324,
								7339
							],
							[
								7673,
								7689
							],
							[
								7787,
								7791
							],
							[
								7982,
								8003
							],
							[
								8019,
								8032
							],
							[
								8082,
								8107
							],
							[
								8253,
								8271
							],
							[
								8283,
								8290
							],
							[
								8321,
								8330
							],
							[
								8338,
								8342
							],
							[
								8367,
								8388
							],
							[
								8400,
								8407
							],
							[
								8435,
								8444
							],
							[
								8452,
								8456
							],
							[
								8530,
								8536
							],
							[
								8578,
								8597
							],
							[
								8890,
								8909
							],
							[
								9012,
								9033
							],
							[
								9046,
								9059
							],
							[
								9083,
								9115
							],
							[
								9146,
								9182
							],
							[
								9333,
								9361
							],
							[
								9436,
								9454
							],
							[
								9504,
								9508
							],
							[
								9558,
								9570
							],
							[
								9574,
								9589
							],
							[
								9652,
								9669
							],
							[
								9682,
								9704
							],
							[
								9739,
								9768
							],
							[
								9937,
								9943
							],
							[
								9984,
								9990
							],
							[
								10076,
								10094
							],
							[
								10162,
								10177
							],
							[
								10238,
								10256
							],
							[
								10366,
								10371
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							".getElement = (query, root) =>",
							".getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					37,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					38,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					39,
					3,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8169,
								8173
							],
							[
								8370,
								8391
							],
							[
								8407,
								8420
							],
							[
								8472,
								8497
							],
							[
								8645,
								8663
							],
							[
								8675,
								8682
							],
							[
								8713,
								8722
							],
							[
								8730,
								8734
							],
							[
								8761,
								8782
							],
							[
								8794,
								8801
							],
							[
								8829,
								8838
							],
							[
								8846,
								8850
							],
							[
								8928,
								8934
							],
							[
								8978,
								8997
							],
							[
								9302,
								9321
							],
							[
								9426,
								9447
							],
							[
								9460,
								9473
							],
							[
								9499,
								9531
							],
							[
								9564,
								9600
							],
							[
								9763,
								9791
							],
							[
								9868,
								9886
							],
							[
								9942,
								9946
							],
							[
								10000,
								10012
							],
							[
								10016,
								10031
							],
							[
								10100,
								10117
							],
							[
								10130,
								10152
							],
							[
								10189,
								10218
							],
							[
								10397,
								10403
							],
							[
								10446,
								10452
							],
							[
								10542,
								10560
							],
							[
								10630,
								10645
							],
							[
								10708,
								10726
							],
							[
								10844,
								10849
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"BQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAgIGZ1bmN0aW9uKihvYmopCiAgLmdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgLmdldE9wdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24qKGUsIHQpAAAAAAAAAABYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAACAgZnVuY3Rpb24qKG9iaikKICAuZ2V0Q2FyZEl0ZXJhdG9yID0gZnVuY3Rpb24qKCkKICAuZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAFgAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					40,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					41,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					42,
					2,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8167,
								8171
							],
							[
								8368,
								8389
							],
							[
								8405,
								8418
							],
							[
								8470,
								8495
							],
							[
								8643,
								8661
							],
							[
								8673,
								8680
							],
							[
								8711,
								8720
							],
							[
								8728,
								8732
							],
							[
								8759,
								8780
							],
							[
								8792,
								8799
							],
							[
								8827,
								8836
							],
							[
								8844,
								8848
							],
							[
								8926,
								8932
							],
							[
								8976,
								8995
							],
							[
								9300,
								9319
							],
							[
								9424,
								9445
							],
							[
								9458,
								9471
							],
							[
								9497,
								9529
							],
							[
								9562,
								9598
							],
							[
								9761,
								9789
							],
							[
								9866,
								9884
							],
							[
								9940,
								9944
							],
							[
								9998,
								10010
							],
							[
								10014,
								10029
							],
							[
								10098,
								10115
							],
							[
								10128,
								10150
							],
							[
								10187,
								10216
							],
							[
								10395,
								10401
							],
							[
								10444,
								10450
							],
							[
								10540,
								10558
							],
							[
								10628,
								10643
							],
							[
								10706,
								10724
							],
							[
								10842,
								10847
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AwAAAAAAAAAAAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAgIGZ1bmN0aW9uKihvYmopCiAgLmdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgLmdldE9wdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24qKGUsIHQpAAAAAAAAAABYAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					43,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					44,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8188,
								8192
							],
							[
								8389,
								8410
							],
							[
								8426,
								8439
							],
							[
								8491,
								8516
							],
							[
								8664,
								8682
							],
							[
								8694,
								8701
							],
							[
								8732,
								8741
							],
							[
								8749,
								8753
							],
							[
								8780,
								8801
							],
							[
								8813,
								8820
							],
							[
								8848,
								8857
							],
							[
								8865,
								8869
							],
							[
								8947,
								8953
							],
							[
								8997,
								9016
							],
							[
								9321,
								9340
							],
							[
								9445,
								9466
							],
							[
								9479,
								9492
							],
							[
								9518,
								9550
							],
							[
								9583,
								9619
							],
							[
								9782,
								9810
							],
							[
								9887,
								9905
							],
							[
								9961,
								9965
							],
							[
								10019,
								10031
							],
							[
								10035,
								10050
							],
							[
								10119,
								10136
							],
							[
								10149,
								10171
							],
							[
								10208,
								10237
							],
							[
								10416,
								10422
							],
							[
								10465,
								10471
							],
							[
								10561,
								10579
							],
							[
								10649,
								10664
							],
							[
								10727,
								10745
							],
							[
								10863,
								10868
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					45,
					2,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8188,
								8192
							],
							[
								8389,
								8410
							],
							[
								8426,
								8439
							],
							[
								8491,
								8516
							],
							[
								8664,
								8682
							],
							[
								8694,
								8701
							],
							[
								8732,
								8741
							],
							[
								8749,
								8753
							],
							[
								8780,
								8801
							],
							[
								8813,
								8820
							],
							[
								8848,
								8857
							],
							[
								8865,
								8869
							],
							[
								8947,
								8953
							],
							[
								8997,
								9016
							],
							[
								9321,
								9340
							],
							[
								9445,
								9466
							],
							[
								9479,
								9492
							],
							[
								9518,
								9550
							],
							[
								9583,
								9619
							],
							[
								9782,
								9810
							],
							[
								9887,
								9905
							],
							[
								9961,
								9965
							],
							[
								10019,
								10031
							],
							[
								10035,
								10050
							],
							[
								10119,
								10136
							],
							[
								10149,
								10171
							],
							[
								10208,
								10237
							],
							[
								10416,
								10422
							],
							[
								10465,
								10471
							],
							[
								10561,
								10579
							],
							[
								10649,
								10664
							],
							[
								10727,
								10745
							],
							[
								10863,
								10868
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAgIGZ1bmN0aW9uKihvYmopCiAgLmdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgLmdldE9wdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24qKGUsIHQpAAAAAAAAAABYAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					47,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8188,
								8192
							],
							[
								8389,
								8410
							],
							[
								8426,
								8439
							],
							[
								8491,
								8516
							],
							[
								8664,
								8682
							],
							[
								8694,
								8701
							],
							[
								8732,
								8741
							],
							[
								8749,
								8753
							],
							[
								8780,
								8801
							],
							[
								8813,
								8820
							],
							[
								8848,
								8857
							],
							[
								8865,
								8869
							],
							[
								8947,
								8953
							],
							[
								8997,
								9016
							],
							[
								9321,
								9340
							],
							[
								9445,
								9466
							],
							[
								9479,
								9492
							],
							[
								9518,
								9550
							],
							[
								9583,
								9619
							],
							[
								9782,
								9810
							],
							[
								9887,
								9905
							],
							[
								9961,
								9965
							],
							[
								10019,
								10031
							],
							[
								10035,
								10050
							],
							[
								10119,
								10136
							],
							[
								10149,
								10171
							],
							[
								10208,
								10237
							],
							[
								10416,
								10422
							],
							[
								10465,
								10471
							],
							[
								10561,
								10579
							],
							[
								10649,
								10664
							],
							[
								10727,
								10745
							],
							[
								10863,
								10868
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					48,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8192,
								8196
							],
							[
								8393,
								8414
							],
							[
								8430,
								8443
							],
							[
								8495,
								8520
							],
							[
								8668,
								8686
							],
							[
								8698,
								8705
							],
							[
								8736,
								8745
							],
							[
								8753,
								8757
							],
							[
								8784,
								8805
							],
							[
								8817,
								8824
							],
							[
								8852,
								8861
							],
							[
								8869,
								8873
							],
							[
								8951,
								8957
							],
							[
								9001,
								9020
							],
							[
								9325,
								9344
							],
							[
								9449,
								9470
							],
							[
								9483,
								9496
							],
							[
								9522,
								9554
							],
							[
								9587,
								9623
							],
							[
								9786,
								9814
							],
							[
								9891,
								9909
							],
							[
								9965,
								9969
							],
							[
								10023,
								10035
							],
							[
								10039,
								10054
							],
							[
								10123,
								10140
							],
							[
								10153,
								10175
							],
							[
								10212,
								10241
							],
							[
								10420,
								10426
							],
							[
								10469,
								10475
							],
							[
								10565,
								10583
							],
							[
								10653,
								10668
							],
							[
								10731,
								10749
							],
							[
								10867,
								10872
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							".defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					49,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					50,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					51,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					52,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					53,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8192,
								8196
							],
							[
								8393,
								8414
							],
							[
								8430,
								8443
							],
							[
								8495,
								8520
							],
							[
								8668,
								8686
							],
							[
								8698,
								8705
							],
							[
								8736,
								8745
							],
							[
								8753,
								8757
							],
							[
								8784,
								8805
							],
							[
								8817,
								8824
							],
							[
								8852,
								8861
							],
							[
								8869,
								8873
							],
							[
								8951,
								8957
							],
							[
								9001,
								9020
							],
							[
								9325,
								9344
							],
							[
								9449,
								9470
							],
							[
								9483,
								9496
							],
							[
								9522,
								9554
							],
							[
								9587,
								9623
							],
							[
								9786,
								9814
							],
							[
								9891,
								9909
							],
							[
								9965,
								9969
							],
							[
								10023,
								10035
							],
							[
								10039,
								10054
							],
							[
								10123,
								10140
							],
							[
								10153,
								10175
							],
							[
								10211,
								10239
							],
							[
								10418,
								10424
							],
							[
								10467,
								10473
							],
							[
								10563,
								10581
							],
							[
								10651,
								10666
							],
							[
								10729,
								10747
							],
							[
								10865,
								10870
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					54,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					55,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4905,
								4911
							],
							[
								4939,
								4945
							],
							[
								4968,
								4984
							],
							[
								5034,
								5042
							],
							[
								5051,
								5077
							],
							[
								5106,
								5120
							],
							[
								5158,
								5176
							],
							[
								5214,
								5230
							],
							[
								5249,
								5284
							],
							[
								5344,
								5348
							],
							[
								5376,
								5385
							],
							[
								5477,
								5517
							],
							[
								5569,
								5583
							],
							[
								5688,
								5726
							],
							[
								5796,
								5800
							],
							[
								5846,
								5874
							],
							[
								5945,
								5960
							],
							[
								5961,
								5983
							],
							[
								6029,
								6046
							],
							[
								6085,
								6106
							],
							[
								6122,
								6126
							],
							[
								6164,
								6183
							],
							[
								6248,
								6265
							],
							[
								6350,
								6371
							],
							[
								6420,
								6437
							],
							[
								6489,
								6520
							],
							[
								6666,
								6684
							],
							[
								6937,
								6955
							],
							[
								6983,
								7005
							],
							[
								7019,
								7024
							],
							[
								7048,
								7071
							],
							[
								7085,
								7090
							],
							[
								7126,
								7150
							],
							[
								7164,
								7169
							],
							[
								7234,
								7271
							],
							[
								7337,
								7343
							],
							[
								7694,
								7709
							],
							[
								8053,
								8069
							],
							[
								8192,
								8196
							],
							[
								8393,
								8414
							],
							[
								8430,
								8443
							],
							[
								8495,
								8520
							],
							[
								8668,
								8686
							],
							[
								8698,
								8705
							],
							[
								8736,
								8745
							],
							[
								8753,
								8757
							],
							[
								8784,
								8805
							],
							[
								8817,
								8824
							],
							[
								8852,
								8861
							],
							[
								8869,
								8873
							],
							[
								8951,
								8957
							],
							[
								9001,
								9020
							],
							[
								9325,
								9344
							],
							[
								9449,
								9470
							],
							[
								9483,
								9496
							],
							[
								9522,
								9554
							],
							[
								9587,
								9623
							],
							[
								9786,
								9814
							],
							[
								9891,
								9909
							],
							[
								9965,
								9969
							],
							[
								10023,
								10035
							],
							[
								10039,
								10054
							],
							[
								10123,
								10140
							],
							[
								10153,
								10175
							],
							[
								10211,
								10239
							],
							[
								10418,
								10424
							],
							[
								10467,
								10473
							],
							[
								10563,
								10581
							],
							[
								10651,
								10666
							],
							[
								10729,
								10747
							],
							[
								10865,
								10870
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAWAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					56,
					2,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								561,
								570
							],
							[
								796,
								800
							],
							[
								831,
								835
							],
							[
								867,
								883
							],
							[
								948,
								956
							],
							[
								1180,
								1215
							],
							[
								1297,
								1334
							],
							[
								1506,
								1532
							],
							[
								1533,
								1548
							],
							[
								1549,
								1571
							],
							[
								1718,
								1739
							],
							[
								1740,
								1762
							],
							[
								1786,
								1798
							],
							[
								1861,
								1882
							],
							[
								1883,
								1905
							],
							[
								1929,
								1941
							],
							[
								1987,
								2004
							],
							[
								2032,
								2050
							],
							[
								2089,
								2116
							],
							[
								2117,
								2139
							],
							[
								2189,
								2208
							],
							[
								2263,
								2269
							],
							[
								2336,
								2359
							],
							[
								2396,
								2411
							],
							[
								2517,
								2552
							],
							[
								2588,
								2617
							],
							[
								2682,
								2707
							],
							[
								2757,
								2784
							],
							[
								2841,
								2862
							],
							[
								2863,
								2885
							],
							[
								2920,
								2925
							],
							[
								2957,
								2977
							],
							[
								2978,
								2995
							],
							[
								3101,
								3117
							],
							[
								3289,
								3313
							],
							[
								3363,
								3380
							],
							[
								3393,
								3409
							],
							[
								3473,
								3483
							],
							[
								3514,
								3520
							],
							[
								3578,
								3612
							],
							[
								3694,
								3711
							],
							[
								4024,
								4029
							],
							[
								4092,
								4102
							],
							[
								4170,
								4183
							],
							[
								4290,
								4317
							],
							[
								4318,
								4341
							],
							[
								4385,
								4417
							],
							[
								4493,
								4511
							],
							[
								4581,
								4617
							],
							[
								4675,
								4719
							],
							[
								4773,
								4803
							],
							[
								4886,
								4892
							],
							[
								4907,
								4913
							],
							[
								4941,
								4947
							],
							[
								4970,
								4986
							],
							[
								5038,
								5046
							],
							[
								5055,
								5081
							],
							[
								5110,
								5124
							],
							[
								5162,
								5180
							],
							[
								5218,
								5234
							],
							[
								5253,
								5288
							],
							[
								5348,
								5352
							],
							[
								5380,
								5389
							],
							[
								5481,
								5521
							],
							[
								5573,
								5587
							],
							[
								5692,
								5730
							],
							[
								5800,
								5804
							],
							[
								5850,
								5878
							],
							[
								5949,
								5964
							],
							[
								5965,
								5987
							],
							[
								6033,
								6050
							],
							[
								6089,
								6110
							],
							[
								6126,
								6130
							],
							[
								6168,
								6187
							],
							[
								6252,
								6269
							],
							[
								6354,
								6375
							],
							[
								6424,
								6441
							],
							[
								6493,
								6524
							],
							[
								6670,
								6688
							],
							[
								6941,
								6959
							],
							[
								6987,
								7009
							],
							[
								7023,
								7028
							],
							[
								7052,
								7075
							],
							[
								7089,
								7094
							],
							[
								7130,
								7154
							],
							[
								7168,
								7173
							],
							[
								7238,
								7275
							],
							[
								7341,
								7347
							],
							[
								7698,
								7713
							],
							[
								8057,
								8073
							],
							[
								8196,
								8200
							],
							[
								8397,
								8418
							],
							[
								8434,
								8447
							],
							[
								8499,
								8524
							],
							[
								8672,
								8690
							],
							[
								8702,
								8709
							],
							[
								8740,
								8749
							],
							[
								8757,
								8761
							],
							[
								8788,
								8809
							],
							[
								8821,
								8828
							],
							[
								8856,
								8865
							],
							[
								8873,
								8877
							],
							[
								8955,
								8961
							],
							[
								9005,
								9024
							],
							[
								9329,
								9348
							],
							[
								9453,
								9474
							],
							[
								9487,
								9500
							],
							[
								9526,
								9558
							],
							[
								9591,
								9627
							],
							[
								9790,
								9818
							],
							[
								9895,
								9913
							],
							[
								9969,
								9973
							],
							[
								10027,
								10039
							],
							[
								10043,
								10058
							],
							[
								10127,
								10144
							],
							[
								10157,
								10179
							],
							[
								10215,
								10243
							],
							[
								10422,
								10428
							],
							[
								10471,
								10477
							],
							[
								10567,
								10585
							],
							[
								10655,
								10670
							],
							[
								10733,
								10751
							],
							[
								10869,
								10874
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							".defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							".find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							".propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							".propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							".propertyProxy = (elem, obj = {}) =>",
							".getCols = (row, pred = e => !e.disabled) =>",
							".getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							".numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							".call = val =>",
							".toNumber = val =>",
							".toString = s =>",
							".getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							".recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							".getOptions = (element, t = a => a) =>",
							"e =>",
							".makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							".getCards = () =>",
							".getCardTexts = () =>",
							"e =>",
							".getCardPos = () =>",
							".getCard = pos =>",
							".getCardText = pos =>",
							".setCard = pos =>",
							".getCardIterator = function* ()",
							".nextOption = e =>",
							".numOptions = e =>",
							".getOptionTexts = e =>",
							" a =>",
							".getOptionValues = e =>",
							" a =>",
							".getOptionEntries = e =>",
							" a =>",
							".getOptionIterator = function* (e, t)",
							" () =>",
							".getName = e =>",
							".getValue = e =>",
							"e =>",
							".getSelections = e =>",
							"t = (o, i) =>",
							".setSelection = (e, i) =>",
							".findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							".filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							".parseNumber = v =>",
							".getCountry = () =>",
							".get = (obj, path) =>",
							"(acc, key) =>",
							".setTo = (parent, key, value) =>",
							".defineTo = (parent, key, ...fns) =>",
							".set = (obj, path, value) =>",
							".getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							".setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							".removeRow = () =>",
							".addRow = () =>",
							".setNumRows = n =>",
							" g =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAAgIGZ1bmN0aW9uKihvYmopCiAgLmdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgLmdldE9wdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24qKGUsIHQpAAAAAAAAAABYAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					57,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYAAAAICBmdW5jdGlvbioob2JqKQogIC5nZXRDYXJkSXRlcmF0b3IgPSBmdW5jdGlvbiooKQogIC5nZXRPcHRpb25JdGVyYXRvciA9IGZ1bmN0aW9uKihlLCB0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					58,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					59,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								559,
								568
							],
							[
								794,
								798
							],
							[
								829,
								833
							],
							[
								865,
								881
							],
							[
								946,
								954
							],
							[
								1177,
								1211
							],
							[
								1293,
								1330
							],
							[
								1502,
								1528
							],
							[
								1529,
								1544
							],
							[
								1545,
								1567
							],
							[
								1714,
								1735
							],
							[
								1736,
								1758
							],
							[
								1782,
								1794
							],
							[
								1857,
								1878
							],
							[
								1879,
								1901
							],
							[
								1925,
								1937
							],
							[
								1983,
								2000
							],
							[
								2028,
								2046
							],
							[
								2085,
								2112
							],
							[
								2113,
								2135
							],
							[
								2185,
								2204
							],
							[
								2257,
								2263
							],
							[
								2328,
								2351
							],
							[
								2388,
								2403
							],
							[
								2508,
								2542
							],
							[
								2578,
								2607
							],
							[
								2672,
								2697
							],
							[
								2745,
								2772
							],
							[
								2827,
								2848
							],
							[
								2849,
								2871
							],
							[
								2906,
								2911
							],
							[
								2941,
								2961
							],
							[
								2962,
								2979
							],
							[
								3085,
								3101
							],
							[
								3272,
								3295
							],
							[
								3345,
								3362
							],
							[
								3375,
								3391
							],
							[
								3455,
								3465
							],
							[
								3496,
								3502
							],
							[
								3559,
								3592
							],
							[
								3674,
								3691
							],
							[
								4002,
								4007
							],
							[
								4068,
								4078
							],
							[
								4146,
								4159
							],
							[
								4264,
								4291
							],
							[
								4292,
								4315
							],
							[
								4359,
								4391
							],
							[
								4467,
								4485
							],
							[
								4554,
								4589
							],
							[
								4646,
								4689
							],
							[
								4742,
								4771
							],
							[
								4854,
								4860
							],
							[
								4873,
								4879
							],
							[
								4907,
								4913
							],
							[
								4935,
								4950
							],
							[
								4998,
								5006
							],
							[
								5015,
								5041
							],
							[
								5069,
								5082
							],
							[
								5119,
								5136
							],
							[
								5173,
								5188
							],
							[
								5206,
								5240
							],
							[
								5300,
								5304
							],
							[
								5332,
								5341
							],
							[
								5432,
								5471
							],
							[
								5523,
								5537
							],
							[
								5641,
								5678
							],
							[
								5748,
								5752
							],
							[
								5797,
								5824
							],
							[
								5893,
								5908
							],
							[
								5909,
								5931
							],
							[
								5976,
								5992
							],
							[
								6030,
								6050
							],
							[
								6066,
								6070
							],
							[
								6107,
								6125
							],
							[
								6189,
								6205
							],
							[
								6289,
								6309
							],
							[
								6357,
								6373
							],
							[
								6424,
								6454
							],
							[
								6599,
								6616
							],
							[
								6868,
								6885
							],
							[
								6912,
								6933
							],
							[
								6947,
								6952
							],
							[
								6975,
								6997
							],
							[
								7011,
								7016
							],
							[
								7051,
								7074
							],
							[
								7088,
								7093
							],
							[
								7157,
								7193
							],
							[
								7259,
								7265
							],
							[
								7609,
								7623
							],
							[
								7956,
								7971
							],
							[
								8092,
								8096
							],
							[
								8292,
								8312
							],
							[
								8328,
								8341
							],
							[
								8392,
								8416
							],
							[
								8563,
								8580
							],
							[
								8592,
								8599
							],
							[
								8630,
								8639
							],
							[
								8647,
								8651
							],
							[
								8677,
								8697
							],
							[
								8709,
								8716
							],
							[
								8744,
								8753
							],
							[
								8761,
								8765
							],
							[
								8839,
								8845
							],
							[
								8888,
								8906
							],
							[
								9204,
								9222
							],
							[
								9326,
								9346
							],
							[
								9359,
								9372
							],
							[
								9397,
								9428
							],
							[
								9460,
								9495
							],
							[
								9657,
								9684
							],
							[
								9760,
								9777
							],
							[
								9831,
								9835
							],
							[
								9889,
								9901
							],
							[
								9905,
								9920
							],
							[
								9988,
								10004
							],
							[
								10015,
								10037
							],
							[
								10073,
								10101
							],
							[
								10280,
								10286
							],
							[
								10327,
								10333
							],
							[
								10420,
								10437
							],
							[
								10506,
								10520
							],
							[
								10582,
								10599
							],
							[
								10717,
								10722
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							"defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							"find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							"propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							"propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"propertyProxy = (elem, obj = {}) =>",
							"getCols = (row, pred = e => !e.disabled) =>",
							"getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							"numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							"call = val =>",
							"toNumber = val =>",
							"toString = s =>",
							"getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							"recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							"getOptions = (element, t = a => a) =>",
							"e =>",
							"makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							"getCards = () =>",
							"getCardTexts = () =>",
							"e =>",
							"getCardPos = () =>",
							"getCard = pos =>",
							"getCardText = pos =>",
							"setCard = pos =>",
							"getCardIterator = function* ()",
							"nextOption = e =>",
							"numOptions = e =>",
							"getOptionTexts = e =>",
							" a =>",
							"getOptionValues = e =>",
							" a =>",
							"getOptionEntries = e =>",
							" a =>",
							"getOptionIterator = function* (e, t)",
							" () =>",
							"getName = e =>",
							"getValue = e =>",
							"e =>",
							"getSelections = e =>",
							"t = (o, i) =>",
							"setSelection = (e, i) =>",
							"findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							"parseNumber = v =>",
							"getCountry = () =>",
							"get = (obj, path) =>",
							"(acc, key) =>",
							"setTo = (parent, key, value) =>",
							"defineTo = (parent, key, ...fns) =>",
							"set = (obj, path, value) =>",
							"getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							"setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							"removeRow = () =>",
							"addRow = () =>",
							"setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAVgAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					60,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								495,
								504
							],
							[
								706,
								710
							],
							[
								741,
								745
							],
							[
								773,
								789
							],
							[
								850,
								858
							],
							[
								1061,
								1095
							],
							[
								1165,
								1198
							],
							[
								1342,
								1364
							],
							[
								1365,
								1376
							],
							[
								1377,
								1395
							],
							[
								1526,
								1543
							],
							[
								1544,
								1562
							],
							[
								1582,
								1594
							],
							[
								1653,
								1670
							],
							[
								1671,
								1689
							],
							[
								1709,
								1721
							],
							[
								1763,
								1780
							],
							[
								1804,
								1822
							],
							[
								1857,
								1880
							],
							[
								1881,
								1899
							],
							[
								1941,
								1960
							],
							[
								2009,
								2015
							],
							[
								2076,
								2099
							],
							[
								2132,
								2147
							],
							[
								2240,
								2274
							],
							[
								2306,
								2335
							],
							[
								2396,
								2421
							],
							[
								2465,
								2492
							],
							[
								2543,
								2560
							],
							[
								2561,
								2579
							],
							[
								2610,
								2615
							],
							[
								2641,
								2657
							],
							[
								2658,
								2671
							],
							[
								2761,
								2777
							],
							[
								2920,
								2943
							],
							[
								2985,
								2998
							],
							[
								3011,
								3023
							],
							[
								3083,
								3093
							],
							[
								3124,
								3130
							],
							[
								3171,
								3204
							],
							[
								3270,
								3287
							],
							[
								3574,
								3579
							],
							[
								3636,
								3646
							],
							[
								3706,
								3719
							],
							[
								3816,
								3839
							],
							[
								3840,
								3859
							],
							[
								3895,
								3927
							],
							[
								3999,
								4017
							],
							[
								4078,
								4113
							],
							[
								4166,
								4209
							],
							[
								4258,
								4287
							],
							[
								4362,
								4368
							],
							[
								4381,
								4387
							],
							[
								4411,
								4417
							],
							[
								4435,
								4450
							],
							[
								4490,
								4498
							],
							[
								4507,
								4529
							],
							[
								4549,
								4562
							],
							[
								4595,
								4612
							],
							[
								4645,
								4660
							],
							[
								4674,
								4708
							],
							[
								4760,
								4764
							],
							[
								4788,
								4797
							],
							[
								4884,
								4923
							],
							[
								4967,
								4981
							],
							[
								5077,
								5114
							],
							[
								5180,
								5184
							],
							[
								5225,
								5252
							],
							[
								5317,
								5328
							],
							[
								5329,
								5347
							],
							[
								5384,
								5400
							],
							[
								5434,
								5454
							],
							[
								5470,
								5474
							],
							[
								5507,
								5525
							],
							[
								5585,
								5601
							],
							[
								5681,
								5701
							],
							[
								5745,
								5761
							],
							[
								5808,
								5838
							],
							[
								5955,
								5972
							],
							[
								6184,
								6201
							],
							[
								6224,
								6245
							],
							[
								6259,
								6264
							],
							[
								6283,
								6305
							],
							[
								6319,
								6324
							],
							[
								6355,
								6378
							],
							[
								6392,
								6397
							],
							[
								6457,
								6493
							],
							[
								6547,
								6553
							],
							[
								6861,
								6875
							],
							[
								7188,
								7203
							],
							[
								7320,
								7324
							],
							[
								7508,
								7528
							],
							[
								7544,
								7557
							],
							[
								7604,
								7628
							],
							[
								7771,
								7788
							],
							[
								7800,
								7807
							],
							[
								7838,
								7847
							],
							[
								7855,
								7859
							],
							[
								7881,
								7901
							],
							[
								7913,
								7920
							],
							[
								7948,
								7957
							],
							[
								7965,
								7969
							],
							[
								8035,
								8041
							],
							[
								8080,
								8098
							],
							[
								8372,
								8390
							],
							[
								8490,
								8510
							],
							[
								8523,
								8536
							],
							[
								8557,
								8588
							],
							[
								8616,
								8651
							],
							[
								8789,
								8816
							],
							[
								8888,
								8905
							],
							[
								8947,
								8951
							],
							[
								8997,
								9009
							],
							[
								9013,
								9028
							],
							[
								9084,
								9100
							],
							[
								9111,
								9133
							],
							[
								9165,
								9193
							],
							[
								9352,
								9358
							],
							[
								9395,
								9401
							],
							[
								9480,
								9497
							],
							[
								9562,
								9576
							],
							[
								9634,
								9651
							],
							[
								9753,
								9758
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							"defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							"find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							"propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							"propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"propertyProxy = (elem, obj = {}) =>",
							"getCols = (row, pred = e => !e.disabled) =>",
							"getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							"numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							"call = val =>",
							"toNumber = val =>",
							"toString = s =>",
							"getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							"recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							"getOptions = (element, t = a => a) =>",
							"e =>",
							"makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							"getCards = () =>",
							"getCardTexts = () =>",
							"e =>",
							"getCardPos = () =>",
							"getCard = pos =>",
							"getCardText = pos =>",
							"setCard = pos =>",
							"getCardIterator = function* ()",
							"nextOption = e =>",
							"numOptions = e =>",
							"getOptionTexts = e =>",
							" a =>",
							"getOptionValues = e =>",
							" a =>",
							"getOptionEntries = e =>",
							" a =>",
							"getOptionIterator = function* (e, t)",
							" () =>",
							"getName = e =>",
							"getValue = e =>",
							"e =>",
							"getSelections = e =>",
							"t = (o, i) =>",
							"setSelection = (e, i) =>",
							"findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							"parseNumber = v =>",
							"getCountry = () =>",
							"get = (obj, path) =>",
							"(acc, key) =>",
							"setTo = (parent, key, value) =>",
							"defineTo = (parent, key, ...fns) =>",
							"set = (obj, path, value) =>",
							"getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							"setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							"removeRow = () =>",
							"addRow = () =>",
							"setNumRows = n =>",
							" g =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWAAAAICBmdW5jdGlvbioob2JqKQogIGdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAFYAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/mnt/srv-ubuntu/Projects/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								431,
								440
							],
							[
								618,
								622
							],
							[
								653,
								657
							],
							[
								681,
								697
							],
							[
								754,
								762
							],
							[
								945,
								979
							],
							[
								1037,
								1066
							],
							[
								1182,
								1200
							],
							[
								1201,
								1208
							],
							[
								1209,
								1223
							],
							[
								1338,
								1351
							],
							[
								1352,
								1366
							],
							[
								1382,
								1394
							],
							[
								1449,
								1462
							],
							[
								1463,
								1477
							],
							[
								1493,
								1505
							],
							[
								1543,
								1560
							],
							[
								1580,
								1598
							],
							[
								1629,
								1648
							],
							[
								1649,
								1663
							],
							[
								1697,
								1716
							],
							[
								1761,
								1767
							],
							[
								1824,
								1847
							],
							[
								1876,
								1891
							],
							[
								1972,
								2006
							],
							[
								2034,
								2063
							],
							[
								2120,
								2145
							],
							[
								2185,
								2212
							],
							[
								2259,
								2272
							],
							[
								2273,
								2287
							],
							[
								2314,
								2319
							],
							[
								2341,
								2353
							],
							[
								2354,
								2363
							],
							[
								2437,
								2453
							],
							[
								2568,
								2591
							],
							[
								2625,
								2634
							],
							[
								2647,
								2655
							],
							[
								2711,
								2721
							],
							[
								2752,
								2758
							],
							[
								2783,
								2816
							],
							[
								2866,
								2883
							],
							[
								3146,
								3151
							],
							[
								3204,
								3214
							],
							[
								3266,
								3279
							],
							[
								3368,
								3387
							],
							[
								3388,
								3403
							],
							[
								3431,
								3463
							],
							[
								3531,
								3549
							],
							[
								3602,
								3637
							],
							[
								3686,
								3729
							],
							[
								3774,
								3803
							],
							[
								3870,
								3876
							],
							[
								3889,
								3895
							],
							[
								3915,
								3921
							],
							[
								3935,
								3950
							],
							[
								3982,
								3990
							],
							[
								3999,
								4017
							],
							[
								4029,
								4042
							],
							[
								4071,
								4088
							],
							[
								4117,
								4132
							],
							[
								4142,
								4176
							],
							[
								4220,
								4224
							],
							[
								4244,
								4253
							],
							[
								4336,
								4375
							],
							[
								4411,
								4425
							],
							[
								4513,
								4550
							],
							[
								4612,
								4616
							],
							[
								4653,
								4680
							],
							[
								4741,
								4748
							],
							[
								4749,
								4763
							],
							[
								4792,
								4808
							],
							[
								4838,
								4858
							],
							[
								4874,
								4878
							],
							[
								4907,
								4925
							],
							[
								4981,
								4997
							],
							[
								5073,
								5093
							],
							[
								5133,
								5149
							],
							[
								5192,
								5222
							],
							[
								5311,
								5328
							],
							[
								5500,
								5517
							],
							[
								5536,
								5557
							],
							[
								5571,
								5576
							],
							[
								5591,
								5613
							],
							[
								5627,
								5632
							],
							[
								5659,
								5682
							],
							[
								5696,
								5701
							],
							[
								5757,
								5793
							],
							[
								5835,
								5841
							],
							[
								6113,
								6127
							],
							[
								6420,
								6435
							],
							[
								6548,
								6552
							],
							[
								6724,
								6744
							],
							[
								6760,
								6773
							],
							[
								6816,
								6840
							],
							[
								6979,
								6996
							],
							[
								7008,
								7015
							],
							[
								7046,
								7055
							],
							[
								7063,
								7067
							],
							[
								7085,
								7105
							],
							[
								7117,
								7124
							],
							[
								7152,
								7161
							],
							[
								7169,
								7173
							],
							[
								7231,
								7237
							],
							[
								7272,
								7290
							],
							[
								7540,
								7558
							],
							[
								7654,
								7674
							],
							[
								7687,
								7700
							],
							[
								7717,
								7748
							],
							[
								7772,
								7807
							],
							[
								7921,
								7948
							],
							[
								8016,
								8033
							],
							[
								8063,
								8067
							],
							[
								8105,
								8117
							],
							[
								8121,
								8136
							],
							[
								8180,
								8196
							],
							[
								8207,
								8229
							],
							[
								8257,
								8285
							],
							[
								8424,
								8430
							],
							[
								8463,
								8469
							],
							[
								8540,
								8557
							],
							[
								8618,
								8632
							],
							[
								8686,
								8703
							],
							[
								8789,
								8794
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							"defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							"find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							"propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							"propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"propertyProxy = (elem, obj = {}) =>",
							"getCols = (row, pred = e => !e.disabled) =>",
							"getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							"numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							"call = val =>",
							"toNumber = val =>",
							"toString = s =>",
							"getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							"recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							"getOptions = (element, t = a => a) =>",
							"e =>",
							"makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							"getCards = () =>",
							"getCardTexts = () =>",
							"e =>",
							"getCardPos = () =>",
							"getCard = pos =>",
							"getCardText = pos =>",
							"setCard = pos =>",
							"getCardIterator = function* ()",
							"nextOption = e =>",
							"numOptions = e =>",
							"getOptionTexts = e =>",
							" a =>",
							"getOptionValues = e =>",
							" a =>",
							"getOptionEntries = e =>",
							" a =>",
							"getOptionIterator = function* (e, t)",
							" () =>",
							"getName = e =>",
							"getValue = e =>",
							"e =>",
							"getSelections = e =>",
							"t = (o, i) =>",
							"setSelection = (e, i) =>",
							"findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							"parseNumber = v =>",
							"getCountry = () =>",
							"get = (obj, path) =>",
							"(acc, key) =>",
							"setTo = (parent, key, value) =>",
							"defineTo = (parent, key, ...fns) =>",
							"set = (obj, path, value) =>",
							"getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							"setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							"removeRow = () =>",
							"addRow = () =>",
							"setNumRows = n =>",
							" g =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWAAAAICBmdW5jdGlvbioob2JqKQogIGdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAFYAAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWAAAAICBmdW5jdGlvbioob2JqKQogIGdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/mnt/srv-ubuntu/Projects/plot-cv/discogs-shipping-policies.js",
						"symkeys":
						[
							[
								495,
								504
							],
							[
								706,
								710
							],
							[
								741,
								745
							],
							[
								773,
								789
							],
							[
								850,
								858
							],
							[
								1061,
								1095
							],
							[
								1165,
								1198
							],
							[
								1342,
								1364
							],
							[
								1365,
								1376
							],
							[
								1377,
								1395
							],
							[
								1526,
								1543
							],
							[
								1544,
								1562
							],
							[
								1582,
								1594
							],
							[
								1653,
								1670
							],
							[
								1671,
								1689
							],
							[
								1709,
								1721
							],
							[
								1763,
								1780
							],
							[
								1804,
								1822
							],
							[
								1857,
								1880
							],
							[
								1881,
								1899
							],
							[
								1941,
								1960
							],
							[
								2009,
								2015
							],
							[
								2076,
								2099
							],
							[
								2132,
								2147
							],
							[
								2240,
								2274
							],
							[
								2306,
								2335
							],
							[
								2396,
								2421
							],
							[
								2465,
								2492
							],
							[
								2543,
								2560
							],
							[
								2561,
								2579
							],
							[
								2610,
								2615
							],
							[
								2641,
								2657
							],
							[
								2658,
								2671
							],
							[
								2761,
								2777
							],
							[
								2920,
								2943
							],
							[
								2985,
								2998
							],
							[
								3011,
								3023
							],
							[
								3083,
								3093
							],
							[
								3124,
								3130
							],
							[
								3171,
								3204
							],
							[
								3270,
								3287
							],
							[
								3574,
								3579
							],
							[
								3636,
								3646
							],
							[
								3706,
								3719
							],
							[
								3816,
								3839
							],
							[
								3840,
								3859
							],
							[
								3895,
								3927
							],
							[
								3999,
								4017
							],
							[
								4078,
								4113
							],
							[
								4166,
								4209
							],
							[
								4258,
								4287
							],
							[
								4362,
								4368
							],
							[
								4381,
								4387
							],
							[
								4411,
								4417
							],
							[
								4435,
								4450
							],
							[
								4490,
								4498
							],
							[
								4507,
								4529
							],
							[
								4549,
								4562
							],
							[
								4595,
								4612
							],
							[
								4645,
								4660
							],
							[
								4674,
								4708
							],
							[
								4760,
								4764
							],
							[
								4788,
								4797
							],
							[
								4884,
								4923
							],
							[
								4967,
								4981
							],
							[
								5077,
								5114
							],
							[
								5180,
								5184
							],
							[
								5225,
								5252
							],
							[
								5317,
								5328
							],
							[
								5329,
								5347
							],
							[
								5384,
								5400
							],
							[
								5434,
								5454
							],
							[
								5470,
								5474
							],
							[
								5507,
								5525
							],
							[
								5585,
								5601
							],
							[
								5681,
								5701
							],
							[
								5745,
								5761
							],
							[
								5808,
								5838
							],
							[
								5955,
								5972
							],
							[
								6184,
								6201
							],
							[
								6224,
								6245
							],
							[
								6259,
								6264
							],
							[
								6283,
								6305
							],
							[
								6319,
								6324
							],
							[
								6355,
								6378
							],
							[
								6392,
								6397
							],
							[
								6457,
								6493
							],
							[
								6547,
								6553
							],
							[
								6861,
								6875
							],
							[
								7188,
								7203
							],
							[
								7320,
								7324
							],
							[
								7508,
								7528
							],
							[
								7544,
								7557
							],
							[
								7604,
								7628
							],
							[
								7771,
								7788
							],
							[
								7800,
								7807
							],
							[
								7838,
								7847
							],
							[
								7855,
								7859
							],
							[
								7881,
								7901
							],
							[
								7913,
								7920
							],
							[
								7948,
								7957
							],
							[
								7965,
								7969
							],
							[
								8035,
								8041
							],
							[
								8080,
								8098
							],
							[
								8372,
								8390
							],
							[
								8490,
								8510
							],
							[
								8523,
								8536
							],
							[
								8557,
								8588
							],
							[
								8616,
								8651
							],
							[
								8789,
								8816
							],
							[
								8888,
								8905
							],
							[
								8947,
								8951
							],
							[
								8997,
								9009
							],
							[
								9013,
								9028
							],
							[
								9084,
								9100
							],
							[
								9111,
								9133
							],
							[
								9165,
								9193
							],
							[
								9352,
								9358
							],
							[
								9395,
								9401
							],
							[
								9480,
								9497
							],
							[
								9562,
								9576
							],
							[
								9634,
								9651
							],
							[
								9753,
								9758
							]
						],
						"symlist":
						[
							"fn = e =>",
							"e =>",
							"n =>",
							"toArray = obj =>",
							"t = a =>",
							"defineEntries = entries => dest =>",
							" (acc, [k, get, set]) =>",
							" (t = toArray) =>",
							" fn =>",
							" (...args) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							" (...fns) =>",
							" (...args) =>",
							"(acc, fn) =>",
							"toArrayFn = fn =>",
							"toObjectFn = fn =>",
							" (fn, ...range) =>",
							" (...args) =>",
							"trimFn = fn => s =>",
							"obj =>",
							"t = (item, key, obj) =>",
							"function* (obj)",
							"find = (query, root = document) =>",
							"getElement = (query, root) =>",
							"getElementFn = fn => e =>",
							"(query, root = document) =>",
							" (...fns) =>",
							" (...args) =>",
							"() =>",
							" (n = 1) =>",
							" node =>",
							"n = (node, j) =>",
							"propertiesFn = style =>",
							" () =>",
							" k =>",
							" (k, v) =>",
							" () =>",
							"propertyFn = (style, property) =>",
							"fn = (...args) =>",
							" e =>",
							"element =>",
							" (...args) =>",
							" getSetFunction =>",
							" (obj = {}) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"propertyProxy = (elem, obj = {}) =>",
							"getCols = (row, pred = e => !e.disabled) =>",
							"getRows = (e = 'tr.range') =>",
							"row =>",
							" () =>",
							"row =>",
							"numRows = () =>",
							"t = a =>",
							" (fn, ...path) =>",
							"call = val =>",
							"toNumber = val =>",
							"toString = s =>",
							"getSet = (element, a = 'value') =>",
							"e =>",
							" value =>",
							"recurse = (arr, fn, path = [], root) =>",
							"(item, key) =>",
							"getOptions = (element, t = a => a) =>",
							"e =>",
							"makeExpr = (s, f = 'gi') =>",
							" fn =>",
							" (...args) =>",
							"getCards = () =>",
							"getCardTexts = () =>",
							"e =>",
							"getCardPos = () =>",
							"getCard = pos =>",
							"getCardText = pos =>",
							"setCard = pos =>",
							"getCardIterator = function* ()",
							"nextOption = e =>",
							"numOptions = e =>",
							"getOptionTexts = e =>",
							" a =>",
							"getOptionValues = e =>",
							" a =>",
							"getOptionEntries = e =>",
							" a =>",
							"getOptionIterator = function* (e, t)",
							" () =>",
							"getName = e =>",
							"getValue = e =>",
							"e =>",
							"getSelections = e =>",
							"t = (o, i) =>",
							"setSelection = (e, i) =>",
							"findOption = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"filterOptions = e =>",
							"expr =>",
							"(a, i) =>",
							"t =>",
							"str =>",
							"parseNumber = v =>",
							"getCountry = () =>",
							"get = (obj, path) =>",
							"(acc, key) =>",
							"setTo = (parent, key, value) =>",
							"defineTo = (parent, key, ...fns) =>",
							"set = (obj, path, value) =>",
							"getValues = () =>",
							"a =>",
							"object: a =>",
							"undefined: a =>",
							"setValues = v =>",
							" (item, path, root) =>",
							"defineGetter = (name, fn) =>",
							" () =>",
							" () =>",
							"removeRow = () =>",
							"addRow = () =>",
							"setNumRows = n =>",
							" g =>"
						]
					},
					"AQAAAAAAAAAAAAAAVgAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWAAAAICBmdW5jdGlvbioob2JqKQogIGdldENhcmRJdGVyYXRvciA9IGZ1bmN0aW9uKigpCiAgZ2V0T3B0aW9uSXRlcmF0b3IgPSBmdW5jdGlvbiooZSwgdCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/readline.js",
						"symkeys":
						[
							[
								299,
								325
							],
							[
								573,
								600
							],
							[
								916,
								952
							],
							[
								1257,
								1295
							],
							[
								1653,
								1695
							],
							[
								1933,
								1956
							],
							[
								2219,
								2251
							],
							[
								2517,
								2547
							],
							[
								2826,
								2861
							],
							[
								3144,
								3178
							],
							[
								3483,
								3525
							],
							[
								3833,
								3875
							],
							[
								4181,
								4219
							],
							[
								4535,
								4579
							],
							[
								4871,
								4905
							],
							[
								5183,
								5216
							],
							[
								5425,
								5453
							],
							[
								5749,
								5791
							],
							[
								6073,
								6102
							],
							[
								6408,
								6456
							],
							[
								6860,
								6921
							],
							[
								7284,
								7325
							],
							[
								7621,
								7656
							],
							[
								7983,
								8037
							],
							[
								8462,
								8529
							],
							[
								8913,
								8960
							],
							[
								9280,
								9323
							],
							[
								9636,
								9680
							],
							[
								10033,
								10085
							],
							[
								10335,
								10370
							],
							[
								10586,
								10616
							],
							[
								10830,
								10861
							],
							[
								11145,
								11182
							],
							[
								11462,
								11495
							],
							[
								11773,
								11804
							],
							[
								12003,
								12028
							],
							[
								12240,
								12272
							],
							[
								12470,
								12495
							],
							[
								12685,
								12710
							],
							[
								12918,
								12949
							],
							[
								13224,
								13258
							],
							[
								13459,
								13484
							],
							[
								13689,
								13719
							],
							[
								13991,
								14031
							],
							[
								14297,
								14336
							],
							[
								14658,
								14708
							],
							[
								14976,
								15008
							],
							[
								15304,
								15344
							],
							[
								15645,
								15684
							],
							[
								15990,
								16031
							],
							[
								16310,
								16339
							],
							[
								16508,
								16524
							],
							[
								16766,
								16797
							],
							[
								17107,
								17155
							],
							[
								17491,
								17539
							],
							[
								17828,
								17859
							],
							[
								18064,
								18091
							],
							[
								18369,
								18406
							],
							[
								18583,
								18599
							],
							[
								18789,
								18817
							],
							[
								19055,
								19084
							],
							[
								19423,
								19470
							],
							[
								19793,
								19841
							],
							[
								20038,
								20057
							],
							[
								20322,
								20356
							],
							[
								20643,
								20679
							],
							[
								20958,
								20991
							],
							[
								21276,
								21312
							],
							[
								21565,
								21596
							],
							[
								21891,
								21931
							],
							[
								22179,
								22209
							],
							[
								22491,
								22529
							],
							[
								22819,
								22855
							],
							[
								23132,
								23163
							],
							[
								23366,
								23392
							],
							[
								23695,
								23740
							],
							[
								23987,
								24012
							],
							[
								24250,
								24281
							],
							[
								24535,
								24568
							],
							[
								24792,
								24825
							],
							[
								25087,
								25116
							],
							[
								25391,
								25425
							],
							[
								25704,
								25737
							],
							[
								26046,
								26089
							],
							[
								26377,
								26410
							],
							[
								26628,
								26647
							],
							[
								26869,
								26895
							],
							[
								27095,
								27122
							],
							[
								27318,
								27344
							],
							[
								27593,
								27634
							],
							[
								28007,
								28054
							],
							[
								28490,
								28546
							],
							[
								28769,
								28793
							],
							[
								29151,
								29198
							],
							[
								29462,
								29492
							],
							[
								29743,
								29785
							],
							[
								30083,
								30121
							],
							[
								30429,
								30471
							],
							[
								30775,
								30812
							],
							[
								31056,
								31082
							],
							[
								31294,
								31316
							],
							[
								31618,
								31664
							],
							[
								31989,
								32034
							],
							[
								32398,
								32453
							],
							[
								32822,
								32876
							],
							[
								33088,
								33110
							],
							[
								33310,
								33339
							],
							[
								33592,
								33618
							],
							[
								33899,
								33942
							],
							[
								34237,
								34273
							],
							[
								34583,
								34633
							],
							[
								34890,
								34919
							],
							[
								35175,
								35207
							],
							[
								35542,
								35586
							],
							[
								35882,
								35918
							],
							[
								36194,
								36228
							],
							[
								36505,
								36537
							],
							[
								36805,
								36834
							],
							[
								37099,
								37129
							],
							[
								37340,
								37369
							],
							[
								37686,
								37726
							],
							[
								37982,
								38020
							],
							[
								38240,
								38270
							],
							[
								38471,
								38498
							],
							[
								38702,
								38731
							],
							[
								39010,
								39048
							],
							[
								39363,
								39400
							],
							[
								39674,
								39705
							],
							[
								39955,
								39987
							],
							[
								40250,
								40279
							],
							[
								40566,
								40604
							],
							[
								40915,
								40958
							],
							[
								41306,
								41355
							],
							[
								41677,
								41720
							],
							[
								42068,
								42117
							],
							[
								42436,
								42484
							],
							[
								42693,
								42716
							],
							[
								42934,
								42969
							],
							[
								43254,
								43290
							],
							[
								43542,
								43574
							],
							[
								43776,
								43802
							],
							[
								44106,
								44158
							],
							[
								44424,
								44458
							],
							[
								44762,
								44804
							],
							[
								45119,
								45164
							],
							[
								45431,
								45464
							],
							[
								45745,
								45779
							],
							[
								46078,
								46120
							],
							[
								46380,
								46414
							],
							[
								46600,
								46620
							],
							[
								46794,
								46815
							],
							[
								47032,
								47067
							],
							[
								47352,
								47392
							],
							[
								47688,
								47728
							],
							[
								47951,
								47981
							],
							[
								48185,
								48213
							],
							[
								48419,
								48448
							],
							[
								48698,
								48737
							],
							[
								48950,
								48977
							],
							[
								49254,
								49290
							],
							[
								49497,
								49523
							],
							[
								49822,
								49865
							],
							[
								50151,
								50184
							],
							[
								50445,
								50473
							],
							[
								50759,
								50797
							],
							[
								50997,
								51020
							],
							[
								51241,
								51265
							],
							[
								51573,
								51609
							],
							[
								51889,
								51928
							],
							[
								52167,
								52192
							],
							[
								52421,
								52458
							],
							[
								52751,
								52787
							],
							[
								53057,
								53087
							],
							[
								53352,
								53388
							],
							[
								53628,
								53656
							],
							[
								53940,
								53977
							],
							[
								54175,
								54198
							],
							[
								54412,
								54434
							],
							[
								54717,
								54756
							],
							[
								55056,
								55099
							],
							[
								55385,
								55418
							],
							[
								55649,
								55674
							],
							[
								55939,
								55971
							],
							[
								56250,
								56285
							],
							[
								56627,
								56670
							],
							[
								56967,
								57003
							],
							[
								57294,
								57330
							],
							[
								57610,
								57650
							],
							[
								57901,
								57929
							],
							[
								58197,
								58229
							],
							[
								58510,
								58552
							],
							[
								58873,
								58918
							],
							[
								59242,
								59285
							],
							[
								59526,
								59551
							],
							[
								59836,
								59873
							],
							[
								60156,
								60190
							],
							[
								60488,
								60528
							],
							[
								60838,
								60880
							],
							[
								61183,
								61222
							],
							[
								61519,
								61557
							],
							[
								61820,
								61853
							],
							[
								62128,
								62160
							],
							[
								62508,
								62559
							],
							[
								62866,
								62902
							],
							[
								63163,
								63204
							],
							[
								63462,
								63492
							],
							[
								63771,
								63806
							],
							[
								64093,
								64129
							],
							[
								64409,
								64441
							],
							[
								64710,
								64743
							],
							[
								65037,
								65076
							],
							[
								65317,
								65342
							],
							[
								65604,
								65637
							],
							[
								65925,
								65964
							],
							[
								66255,
								66291
							],
							[
								66573,
								66607
							],
							[
								66893,
								66929
							],
							[
								67117,
								67137
							],
							[
								67392,
								67423
							],
							[
								67698,
								67732
							],
							[
								68003,
								68034
							],
							[
								68311,
								68345
							],
							[
								68618,
								68648
							],
							[
								68915,
								68948
							],
							[
								69236,
								69273
							],
							[
								69553,
								69586
							],
							[
								69863,
								69895
							],
							[
								70164,
								70197
							],
							[
								70467,
								70500
							],
							[
								70789,
								70825
							],
							[
								71113,
								71149
							],
							[
								71422,
								71455
							],
							[
								71734,
								71768
							],
							[
								72051,
								72086
							],
							[
								72373,
								72409
							],
							[
								72706,
								72745
							],
							[
								73019,
								73050
							],
							[
								73339,
								73377
							],
							[
								73661,
								73695
							],
							[
								73978,
								74013
							],
							[
								74318,
								74360
							],
							[
								74648,
								74682
							],
							[
								74944,
								74972
							],
							[
								75229,
								75256
							],
							[
								75520,
								75551
							],
							[
								75819,
								75850
							],
							[
								76136,
								76173
							],
							[
								76453,
								76486
							],
							[
								76826,
								76873
							],
							[
								77154,
								77184
							],
							[
								77470,
								77508
							],
							[
								77777,
								77806
							],
							[
								78102,
								78143
							],
							[
								78427,
								78460
							],
							[
								78736,
								78769
							],
							[
								79042,
								79074
							],
							[
								79328,
								79354
							],
							[
								79629,
								79664
							],
							[
								79945,
								79979
							],
							[
								80247,
								80277
							]
						],
						"symlist":
						[
							" function readline(prompt)",
							" function abort(count, key)",
							" function add_defun(name, func, key)",
							" function add_funmap_entry(name, func)",
							" function add_undo(what, start, end, text)",
							" function alphabetic(c)",
							" function arrow_keys(count, key)",
							" function backward(count, key)",
							" function backward_byte(count, key)",
							" function backwardChar(count, key)",
							" function backward_char_search(count, key)",
							" function backwardKillLine(direction, key)",
							" function backwardKillWord(count, key)",
							" function backward_menu_complete(count, key)",
							" function backwardWord(count, key)",
							" function beg_of_line(count, key)",
							" function begin_undo_group()",
							" function beginning_of_history(count, key)",
							" function bind_key(key, func)",
							" function bind_key_if_unbound(key, default_func)",
							" function bind_key_if_unbound_in_map(key, default_func, kmap)",
							" function bind_key_in_map(key, func, map)",
							" function bind_keyseq(keyseq, func)",
							" function bind_keyseq_if_unbound(keyseq, default_func)",
							" function bind_keyseq_if_unbound_in_map(keyseq, default_func, kmap)",
							" function bind_keyseq_in_map(keyseq, func, map)",
							" function bracketed_paste_begin(count, key)",
							" function call_last_kbd_macro(count, ignore)",
							" function callback_handler_install(prompt, linefunc)",
							" function callback_handler_remove()",
							" function callback_read_char()",
							" function callback_sigcleanup()",
							" function capitalize_word(count, key)",
							" function char_search(count, key)",
							" function character_len(c, pos)",
							" function check_signals()",
							" function cleanup_after_signal()",
							" function clear_history()",
							" function clear_message()",
							" function clear_pending_input()",
							" function clear_screen(count, key)",
							" function clear_signals()",
							" function clear_visible_line()",
							" function complete(ignore, invoking_key)",
							" function complete_internal(what_to_do)",
							" function completion_matches(text, entry_function)",
							" function completion_mode(cfunc)",
							" function copy_backward_word(count, key)",
							" function copy_forward_word(count, key)",
							" function copy_region_to_kill(count, key)",
							" function copy_text(from, to)",
							" function crlf()",
							" function rl_delete(count, key)",
							" function delete_horizontal_space(count, ignore)",
							" function delete_or_show_completions(count, key)",
							" function delete_text(from, to)",
							" function deprep_terminal()",
							" function digit_argument(ignore, key)",
							" function ding()",
							" function discard_argument()",
							" function discard_keymap(map)",
							" function display_match_list(matches, len, max)",
							" function do_lowercase_version(ignore1, ignore2)",
							" function do_undo()",
							" function downcaseWord(count, key)",
							" function dump_functions(count, key)",
							" function dump_macros(count, key)",
							" function dump_variables(count, key)",
							" function echo_signal_char(sig)",
							" function emacs_editing_mode(count, key)",
							" function empty_keymap(keymap)",
							" function end_kbd_macro(count, ignore)",
							" function end_of_history(count, key)",
							" function endOfLine(count, key)",
							" function end_undo_group()",
							" function exchange_point_and_mark(count, key)",
							" function execute_next(c)",
							" function expand_prompt(prompt)",
							" function extend_line_buffer(len)",
							" function forced_update_display()",
							" function forward(count, key)",
							" function forward_byte(count, key)",
							" function forwardChar(count, key)",
							" function forward_search_history(sign, key)",
							" function forwardWord(count, key)",
							" function free(mem)",
							" function free_keymap(map)",
							" function free_line_state()",
							" function free_undo_list()",
							" function function_dumper(print_readably)",
							" function function_of_keyseq(keyseq, map, type)",
							" function function_of_keyseq_len(keyseq, len, map, type)",
							" function funmap_names()",
							" function generic_bind(type, keyseq, data, map)",
							" function get_keymap_name(map)",
							" function get_keymap_name_from_edit_mode()",
							" function get_next_history(count, key)",
							" function get_previous_history(count, key)",
							" function get_screen_size(rows, cols)",
							" function get_termcap(cap)",
							" function getc(stream)",
							" function historySearchBackward(count, ignore)",
							" function historySearchForward(count, ignore)",
							" function history_substr_search_backward(count, ignore)",
							" function history_substr_search_forward(count, ignore)",
							" function initialize()",
							" function initialize_funmap()",
							" function insert(count, c)",
							" function insert_close(count, invoking_key)",
							" function insert_comment(count, key)",
							" function insert_completions(ignore, invoking_key)",
							" function insert_text(string)",
							" function invoking_keyseqs(func)",
							" function invoking_keyseqs_in_map(func, map)",
							" function kill_full_line(count, key)",
							" function killLine(direction, key)",
							" function killRegion(count, key)",
							" function kill_text(from, to)",
							" function killWord(count, key)",
							" function list_funmap_names()",
							" function macro_bind(keyseq, macro, map)",
							" function macro_dumper(print_readably)",
							" function maybe_replace_line()",
							" function maybe_save_line()",
							" function maybe_unsave_line()",
							" function menu_complete(count, ignore)",
							" function message(format, arg1, arg2)",
							" function modifying(start, end)",
							" function named_function(string)",
							" function newline(count, key)",
							" function next_screen_line(count, key)",
							" function noninc_forward_search(count, key)",
							" function noninc_forward_search_again(count, key)",
							" function noninc_reverse_search(count, key)",
							" function noninc_reverse_search_again(count, key)",
							" function old_menu_complete(count, invoking_key)",
							" function on_new_line()",
							" function on_new_line_with_prompt()",
							" function overwrite_mode(count, key)",
							" function parse_and_bind(string)",
							" function pending_signal()",
							" function possible_completions(ignore, invoking_key)",
							" function prep_terminal(meta_flag)",
							" function previous_screen_line(count, key)",
							" function print_last_kbd_macro(count, ignore)",
							" function push_macro_input(macro)",
							" function quotedInsert(count, key)",
							" function re_read_init_file(count, ignore)",
							" function read_init_file(filename)",
							" function read_key()",
							" function redisplay()",
							" function redraw_prompt_last_line()",
							" function refresh_line(ignore1, ignore2)",
							" function replace_line(text, clear_undo)",
							" function reset_after_signal()",
							" function reset_line_state()",
							" function reset_screen_size()",
							" function reset_terminal(terminal_name)",
							" function resize_terminal()",
							" function restart_output(count, key)",
							" function restore_prompt()",
							" function reverse_search_history(sign, key)",
							" function revert_line(count, key)",
							" function rubout(count, key)",
							" function rubout_or_delete(count, key)",
							" function save_prompt()",
							" function save_state(sp)",
							" function set_key(keyseq, func, map)",
							" function set_keyboard_input_timeout(u)",
							" function set_keymap(map)",
							" function set_keymap_from_edit_mode()",
							" function set_keymap_name(name, map)",
							" function set_mark(count, key)",
							" function set_paren_blink_timeout(u)",
							" function set_prompt(prompt)",
							" function set_screen_size(rows, cols)",
							" function set_signals()",
							" function show_char(c)",
							" function skip_csi_sequence(count, key)",
							" function start_kbd_macro(ignore1, ignore2)",
							" function stop_output(count, key)",
							" function stuff_char(key)",
							" function tab_insert(count, key)",
							" function tilde_expand(ignore, key)",
							" function translate_keyseq(seq, array, len)",
							" function transposeChars(count, key)",
							" function transposeWords(count, key)",
							" function tty_set_default_bindings(kmap)",
							" function tty_set_echoing(u)",
							" function tty_status(count, key)",
							" function tty_unset_default_bindings(kmap)",
							" function unbind_command_in_map(command, map)",
							" function unbind_function_in_map(func, map)",
							" function unbind_key(key)",
							" function unbind_key_in_map(key, map)",
							" function undo_command(count, key)",
							" function universal_argument(count, key)",
							" function unix_filename_rubout(count, key)",
							" function unix_line_discard(count, key)",
							" function unix_word_rubout(count, key)",
							" function untranslate_keyseq(seq)",
							" function upcaseWord(count, key)",
							" function username_completion_function(text, state)",
							" function variable_bind(name, value)",
							" function variable_dumper(print_readably)",
							" function variable_value(name)",
							" function vi_append_eol(count, key)",
							" function vi_append_mode(count, key)",
							" function vi_arg_digit(count, c)",
							" function vi_bWord(count, ignore)",
							" function vi_back_to_indent(count, key)",
							" function vi_bracktype(c)",
							" function vi_bword(count, ignore)",
							" function vi_change_case(count, ignore)",
							" function vi_change_char(count, key)",
							" function vi_change_to(count, key)",
							" function vi_char_search(count, key)",
							" function vi_check()",
							" function vi_column(count, key)",
							" function vi_complete(ignore, key)",
							" function vi_delete(count, key)",
							" function vi_delete_to(count, key)",
							" function vi_domove(x, ignore)",
							" function vi_eWord(count, ignore)",
							" function vi_editing_mode(count, key)",
							" function vi_end_word(count, key)",
							" function vi_eof_maybe(count, c)",
							" function vi_eword(count, ignore)",
							" function vi_fWord(count, ignore)",
							" function vi_fetch_history(count, c)",
							" function vi_first_print(count, key)",
							" function vi_fword(count, ignore)",
							" function vi_goto_mark(count, key)",
							" function vi_insert_beg(count, key)",
							" function vi_insert_mode(count, key)",
							" function vi_insertion_mode(count, key)",
							" function vi_match(ignore, key)",
							" function vi_movement_mode(count, key)",
							" function vi_next_word(count, key)",
							" function vi_overstrike(count, key)",
							" function vi_overstrike_delete(count, key)",
							" function vi_prev_word(count, key)",
							" function vi_put(count, key)",
							" function vi_redo(count, c)",
							" function vi_rubout(count, key)",
							" function vi_search(count, key)",
							" function vi_search_again(count, key)",
							" function vi_set_mark(count, key)",
							" function vi_start_inserting(key, repeat, sign)",
							" function vi_subst(count, key)",
							" function vi_tilde_expand(ignore, key)",
							" function vi_undo(count, key)",
							" function vi_unix_word_rubout(count, key)",
							" function vi_yank_arg(count, key)",
							" function vi_yank_pop(count, key)",
							" function vi_yank_to(count, key)",
							" function yank(count, key)",
							" function yank_last_arg(count, key)",
							" function yank_nth_arg(count, key)",
							" function yank_pop(count, key)"
						]
					},
					"AQAAAAAAAAAAAAAAZxwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/readline.js",
						"symkeys":
						[
							[
								299,
								325
							],
							[
								573,
								600
							],
							[
								916,
								952
							],
							[
								1257,
								1295
							],
							[
								1653,
								1695
							],
							[
								1933,
								1956
							],
							[
								2219,
								2251
							],
							[
								2517,
								2547
							],
							[
								2826,
								2861
							],
							[
								3144,
								3178
							],
							[
								3483,
								3525
							],
							[
								3833,
								3875
							],
							[
								4181,
								4219
							],
							[
								4535,
								4579
							],
							[
								4871,
								4905
							],
							[
								5183,
								5216
							],
							[
								5425,
								5453
							],
							[
								5749,
								5791
							],
							[
								6073,
								6102
							],
							[
								6408,
								6456
							],
							[
								6860,
								6921
							],
							[
								7284,
								7325
							],
							[
								7621,
								7656
							],
							[
								7983,
								8037
							],
							[
								8462,
								8529
							],
							[
								8913,
								8960
							],
							[
								9280,
								9323
							],
							[
								9636,
								9680
							],
							[
								10033,
								10085
							],
							[
								10335,
								10370
							],
							[
								10586,
								10616
							],
							[
								10830,
								10861
							],
							[
								11145,
								11182
							],
							[
								11462,
								11495
							],
							[
								11773,
								11804
							],
							[
								12003,
								12028
							],
							[
								12240,
								12272
							],
							[
								12470,
								12495
							],
							[
								12685,
								12710
							],
							[
								12918,
								12949
							],
							[
								13224,
								13258
							],
							[
								13459,
								13484
							],
							[
								13689,
								13719
							],
							[
								13991,
								14031
							],
							[
								14297,
								14336
							],
							[
								14658,
								14708
							],
							[
								14976,
								15008
							],
							[
								15304,
								15344
							],
							[
								15645,
								15684
							],
							[
								15990,
								16031
							],
							[
								16310,
								16339
							],
							[
								16508,
								16524
							],
							[
								16766,
								16797
							],
							[
								17107,
								17155
							],
							[
								17491,
								17539
							],
							[
								17828,
								17859
							],
							[
								18064,
								18091
							],
							[
								18369,
								18406
							],
							[
								18583,
								18599
							],
							[
								18789,
								18817
							],
							[
								19055,
								19084
							],
							[
								19423,
								19470
							],
							[
								19793,
								19841
							],
							[
								20038,
								20057
							],
							[
								20322,
								20356
							],
							[
								20643,
								20679
							],
							[
								20958,
								20991
							],
							[
								21276,
								21312
							],
							[
								21565,
								21596
							],
							[
								21891,
								21931
							],
							[
								22179,
								22209
							],
							[
								22491,
								22529
							],
							[
								22819,
								22855
							],
							[
								23132,
								23163
							],
							[
								23366,
								23392
							],
							[
								23695,
								23740
							],
							[
								23987,
								24012
							],
							[
								24250,
								24281
							],
							[
								24535,
								24568
							],
							[
								24792,
								24825
							],
							[
								25087,
								25116
							],
							[
								25391,
								25425
							],
							[
								25704,
								25737
							],
							[
								26046,
								26089
							],
							[
								26377,
								26410
							],
							[
								26628,
								26647
							],
							[
								26869,
								26895
							],
							[
								27095,
								27122
							],
							[
								27318,
								27344
							],
							[
								27593,
								27634
							],
							[
								28007,
								28054
							],
							[
								28490,
								28546
							],
							[
								28769,
								28793
							],
							[
								29151,
								29198
							],
							[
								29462,
								29492
							],
							[
								29743,
								29785
							],
							[
								30083,
								30121
							],
							[
								30429,
								30471
							],
							[
								30775,
								30812
							],
							[
								31056,
								31082
							],
							[
								31294,
								31316
							],
							[
								31618,
								31664
							],
							[
								31989,
								32034
							],
							[
								32398,
								32453
							],
							[
								32822,
								32876
							],
							[
								33088,
								33110
							],
							[
								33310,
								33339
							],
							[
								33592,
								33618
							],
							[
								33899,
								33942
							],
							[
								34237,
								34273
							],
							[
								34583,
								34633
							],
							[
								34890,
								34919
							],
							[
								35175,
								35207
							],
							[
								35542,
								35586
							],
							[
								35882,
								35918
							],
							[
								36194,
								36228
							],
							[
								36505,
								36537
							],
							[
								36805,
								36834
							],
							[
								37099,
								37129
							],
							[
								37340,
								37369
							],
							[
								37686,
								37726
							],
							[
								37982,
								38020
							],
							[
								38240,
								38270
							],
							[
								38471,
								38498
							],
							[
								38702,
								38731
							],
							[
								39010,
								39048
							],
							[
								39363,
								39400
							],
							[
								39674,
								39705
							],
							[
								39955,
								39987
							],
							[
								40250,
								40279
							],
							[
								40566,
								40604
							],
							[
								40915,
								40958
							],
							[
								41306,
								41355
							],
							[
								41677,
								41720
							],
							[
								42068,
								42117
							],
							[
								42436,
								42484
							],
							[
								42693,
								42716
							],
							[
								42934,
								42969
							],
							[
								43254,
								43290
							],
							[
								43542,
								43574
							],
							[
								43776,
								43802
							],
							[
								44106,
								44158
							],
							[
								44424,
								44458
							],
							[
								44762,
								44804
							],
							[
								45119,
								45164
							],
							[
								45431,
								45464
							],
							[
								45745,
								45779
							],
							[
								46078,
								46120
							],
							[
								46380,
								46414
							],
							[
								46600,
								46620
							],
							[
								46794,
								46815
							],
							[
								47032,
								47067
							],
							[
								47352,
								47392
							],
							[
								47688,
								47728
							],
							[
								47951,
								47981
							],
							[
								48185,
								48213
							],
							[
								48419,
								48448
							],
							[
								48698,
								48737
							],
							[
								48950,
								48977
							],
							[
								49254,
								49290
							],
							[
								49497,
								49523
							],
							[
								49822,
								49865
							],
							[
								50151,
								50184
							],
							[
								50445,
								50473
							],
							[
								50759,
								50797
							],
							[
								50997,
								51020
							],
							[
								51241,
								51265
							],
							[
								51573,
								51609
							],
							[
								51889,
								51928
							],
							[
								52167,
								52192
							],
							[
								52421,
								52458
							],
							[
								52751,
								52787
							],
							[
								53057,
								53087
							],
							[
								53352,
								53388
							],
							[
								53628,
								53656
							],
							[
								53940,
								53977
							],
							[
								54175,
								54198
							],
							[
								54412,
								54434
							],
							[
								54717,
								54756
							],
							[
								55056,
								55099
							],
							[
								55385,
								55418
							],
							[
								55649,
								55674
							],
							[
								55939,
								55971
							],
							[
								56250,
								56285
							],
							[
								56627,
								56670
							],
							[
								56967,
								57003
							],
							[
								57294,
								57330
							],
							[
								57610,
								57650
							],
							[
								57901,
								57929
							],
							[
								58197,
								58229
							],
							[
								58510,
								58552
							],
							[
								58873,
								58918
							],
							[
								59242,
								59285
							],
							[
								59526,
								59551
							],
							[
								59836,
								59873
							],
							[
								60156,
								60190
							],
							[
								60488,
								60528
							],
							[
								60838,
								60880
							],
							[
								61183,
								61222
							],
							[
								61519,
								61557
							],
							[
								61820,
								61853
							],
							[
								62128,
								62160
							],
							[
								62508,
								62559
							],
							[
								62866,
								62902
							],
							[
								63163,
								63204
							],
							[
								63462,
								63492
							],
							[
								63771,
								63806
							],
							[
								64093,
								64129
							],
							[
								64409,
								64441
							],
							[
								64710,
								64743
							],
							[
								65037,
								65076
							],
							[
								65317,
								65342
							],
							[
								65604,
								65637
							],
							[
								65925,
								65964
							],
							[
								66255,
								66291
							],
							[
								66573,
								66607
							],
							[
								66893,
								66929
							],
							[
								67117,
								67137
							],
							[
								67392,
								67423
							],
							[
								67698,
								67732
							],
							[
								68003,
								68034
							],
							[
								68311,
								68345
							],
							[
								68618,
								68648
							],
							[
								68915,
								68948
							],
							[
								69236,
								69273
							],
							[
								69553,
								69586
							],
							[
								69863,
								69895
							],
							[
								70164,
								70197
							],
							[
								70467,
								70500
							],
							[
								70789,
								70825
							],
							[
								71113,
								71149
							],
							[
								71422,
								71455
							],
							[
								71734,
								71768
							],
							[
								72051,
								72086
							],
							[
								72373,
								72409
							],
							[
								72706,
								72745
							],
							[
								73019,
								73050
							],
							[
								73339,
								73377
							],
							[
								73661,
								73695
							],
							[
								73978,
								74013
							],
							[
								74318,
								74360
							],
							[
								74648,
								74682
							],
							[
								74944,
								74972
							],
							[
								75229,
								75256
							],
							[
								75520,
								75551
							],
							[
								75819,
								75850
							],
							[
								76136,
								76173
							],
							[
								76453,
								76486
							],
							[
								76826,
								76873
							],
							[
								77154,
								77184
							],
							[
								77470,
								77508
							],
							[
								77777,
								77806
							],
							[
								78102,
								78143
							],
							[
								78427,
								78460
							],
							[
								78736,
								78769
							],
							[
								79042,
								79074
							],
							[
								79328,
								79354
							],
							[
								79629,
								79664
							],
							[
								79945,
								79979
							],
							[
								80247,
								80277
							]
						],
						"symlist":
						[
							" function readline(prompt)",
							" function abort(count, key)",
							" function add_defun(name, func, key)",
							" function add_funmap_entry(name, func)",
							" function add_undo(what, start, end, text)",
							" function alphabetic(c)",
							" function arrow_keys(count, key)",
							" function backward(count, key)",
							" function backward_byte(count, key)",
							" function backwardChar(count, key)",
							" function backward_char_search(count, key)",
							" function backwardKillLine(direction, key)",
							" function backwardKillWord(count, key)",
							" function backward_menu_complete(count, key)",
							" function backwardWord(count, key)",
							" function beg_of_line(count, key)",
							" function begin_undo_group()",
							" function beginning_of_history(count, key)",
							" function bind_key(key, func)",
							" function bind_key_if_unbound(key, default_func)",
							" function bind_key_if_unbound_in_map(key, default_func, kmap)",
							" function bind_key_in_map(key, func, map)",
							" function bind_keyseq(keyseq, func)",
							" function bind_keyseq_if_unbound(keyseq, default_func)",
							" function bind_keyseq_if_unbound_in_map(keyseq, default_func, kmap)",
							" function bind_keyseq_in_map(keyseq, func, map)",
							" function bracketed_paste_begin(count, key)",
							" function call_last_kbd_macro(count, ignore)",
							" function callback_handler_install(prompt, linefunc)",
							" function callback_handler_remove()",
							" function callback_read_char()",
							" function callback_sigcleanup()",
							" function capitalize_word(count, key)",
							" function char_search(count, key)",
							" function character_len(c, pos)",
							" function check_signals()",
							" function cleanup_after_signal()",
							" function clear_history()",
							" function clear_message()",
							" function clear_pending_input()",
							" function clear_screen(count, key)",
							" function clear_signals()",
							" function clear_visible_line()",
							" function complete(ignore, invoking_key)",
							" function complete_internal(what_to_do)",
							" function completion_matches(text, entry_function)",
							" function completion_mode(cfunc)",
							" function copy_backward_word(count, key)",
							" function copy_forward_word(count, key)",
							" function copy_region_to_kill(count, key)",
							" function copy_text(from, to)",
							" function crlf()",
							" function rl_delete(count, key)",
							" function delete_horizontal_space(count, ignore)",
							" function delete_or_show_completions(count, key)",
							" function delete_text(from, to)",
							" function deprep_terminal()",
							" function digit_argument(ignore, key)",
							" function ding()",
							" function discard_argument()",
							" function discard_keymap(map)",
							" function display_match_list(matches, len, max)",
							" function do_lowercase_version(ignore1, ignore2)",
							" function do_undo()",
							" function downcaseWord(count, key)",
							" function dump_functions(count, key)",
							" function dump_macros(count, key)",
							" function dump_variables(count, key)",
							" function echo_signal_char(sig)",
							" function emacs_editing_mode(count, key)",
							" function empty_keymap(keymap)",
							" function end_kbd_macro(count, ignore)",
							" function end_of_history(count, key)",
							" function endOfLine(count, key)",
							" function end_undo_group()",
							" function exchange_point_and_mark(count, key)",
							" function execute_next(c)",
							" function expand_prompt(prompt)",
							" function extend_line_buffer(len)",
							" function forced_update_display()",
							" function forward(count, key)",
							" function forward_byte(count, key)",
							" function forwardChar(count, key)",
							" function forward_search_history(sign, key)",
							" function forwardWord(count, key)",
							" function free(mem)",
							" function free_keymap(map)",
							" function free_line_state()",
							" function free_undo_list()",
							" function function_dumper(print_readably)",
							" function function_of_keyseq(keyseq, map, type)",
							" function function_of_keyseq_len(keyseq, len, map, type)",
							" function funmap_names()",
							" function generic_bind(type, keyseq, data, map)",
							" function get_keymap_name(map)",
							" function get_keymap_name_from_edit_mode()",
							" function get_next_history(count, key)",
							" function get_previous_history(count, key)",
							" function get_screen_size(rows, cols)",
							" function get_termcap(cap)",
							" function getc(stream)",
							" function historySearchBackward(count, ignore)",
							" function historySearchForward(count, ignore)",
							" function history_substr_search_backward(count, ignore)",
							" function history_substr_search_forward(count, ignore)",
							" function initialize()",
							" function initialize_funmap()",
							" function insert(count, c)",
							" function insert_close(count, invoking_key)",
							" function insert_comment(count, key)",
							" function insert_completions(ignore, invoking_key)",
							" function insert_text(string)",
							" function invoking_keyseqs(func)",
							" function invoking_keyseqs_in_map(func, map)",
							" function kill_full_line(count, key)",
							" function killLine(direction, key)",
							" function killRegion(count, key)",
							" function kill_text(from, to)",
							" function killWord(count, key)",
							" function list_funmap_names()",
							" function macro_bind(keyseq, macro, map)",
							" function macro_dumper(print_readably)",
							" function maybe_replace_line()",
							" function maybe_save_line()",
							" function maybe_unsave_line()",
							" function menu_complete(count, ignore)",
							" function message(format, arg1, arg2)",
							" function modifying(start, end)",
							" function named_function(string)",
							" function newline(count, key)",
							" function next_screen_line(count, key)",
							" function noninc_forward_search(count, key)",
							" function noninc_forward_search_again(count, key)",
							" function noninc_reverse_search(count, key)",
							" function noninc_reverse_search_again(count, key)",
							" function old_menu_complete(count, invoking_key)",
							" function on_new_line()",
							" function on_new_line_with_prompt()",
							" function overwrite_mode(count, key)",
							" function parse_and_bind(string)",
							" function pending_signal()",
							" function possible_completions(ignore, invoking_key)",
							" function prep_terminal(meta_flag)",
							" function previous_screen_line(count, key)",
							" function print_last_kbd_macro(count, ignore)",
							" function push_macro_input(macro)",
							" function quotedInsert(count, key)",
							" function re_read_init_file(count, ignore)",
							" function read_init_file(filename)",
							" function read_key()",
							" function redisplay()",
							" function redraw_prompt_last_line()",
							" function refresh_line(ignore1, ignore2)",
							" function replace_line(text, clear_undo)",
							" function reset_after_signal()",
							" function reset_line_state()",
							" function reset_screen_size()",
							" function reset_terminal(terminal_name)",
							" function resize_terminal()",
							" function restart_output(count, key)",
							" function restore_prompt()",
							" function reverse_search_history(sign, key)",
							" function revert_line(count, key)",
							" function rubout(count, key)",
							" function rubout_or_delete(count, key)",
							" function save_prompt()",
							" function save_state(sp)",
							" function set_key(keyseq, func, map)",
							" function set_keyboard_input_timeout(u)",
							" function set_keymap(map)",
							" function set_keymap_from_edit_mode()",
							" function set_keymap_name(name, map)",
							" function set_mark(count, key)",
							" function set_paren_blink_timeout(u)",
							" function set_prompt(prompt)",
							" function set_screen_size(rows, cols)",
							" function set_signals()",
							" function show_char(c)",
							" function skip_csi_sequence(count, key)",
							" function start_kbd_macro(ignore1, ignore2)",
							" function stop_output(count, key)",
							" function stuff_char(key)",
							" function tab_insert(count, key)",
							" function tilde_expand(ignore, key)",
							" function translate_keyseq(seq, array, len)",
							" function transposeChars(count, key)",
							" function transposeWords(count, key)",
							" function tty_set_default_bindings(kmap)",
							" function tty_set_echoing(u)",
							" function tty_status(count, key)",
							" function tty_unset_default_bindings(kmap)",
							" function unbind_command_in_map(command, map)",
							" function unbind_function_in_map(func, map)",
							" function unbind_key(key)",
							" function unbind_key_in_map(key, map)",
							" function undo_command(count, key)",
							" function universal_argument(count, key)",
							" function unix_filename_rubout(count, key)",
							" function unix_line_discard(count, key)",
							" function unix_word_rubout(count, key)",
							" function untranslate_keyseq(seq)",
							" function upcaseWord(count, key)",
							" function username_completion_function(text, state)",
							" function variable_bind(name, value)",
							" function variable_dumper(print_readably)",
							" function variable_value(name)",
							" function vi_append_eol(count, key)",
							" function vi_append_mode(count, key)",
							" function vi_arg_digit(count, c)",
							" function vi_bWord(count, ignore)",
							" function vi_back_to_indent(count, key)",
							" function vi_bracktype(c)",
							" function vi_bword(count, ignore)",
							" function vi_change_case(count, ignore)",
							" function vi_change_char(count, key)",
							" function vi_change_to(count, key)",
							" function vi_char_search(count, key)",
							" function vi_check()",
							" function vi_column(count, key)",
							" function vi_complete(ignore, key)",
							" function vi_delete(count, key)",
							" function vi_delete_to(count, key)",
							" function vi_domove(x, ignore)",
							" function vi_eWord(count, ignore)",
							" function vi_editing_mode(count, key)",
							" function vi_end_word(count, key)",
							" function vi_eof_maybe(count, c)",
							" function vi_eword(count, ignore)",
							" function vi_fWord(count, ignore)",
							" function vi_fetch_history(count, c)",
							" function vi_first_print(count, key)",
							" function vi_fword(count, ignore)",
							" function vi_goto_mark(count, key)",
							" function vi_insert_beg(count, key)",
							" function vi_insert_mode(count, key)",
							" function vi_insertion_mode(count, key)",
							" function vi_match(ignore, key)",
							" function vi_movement_mode(count, key)",
							" function vi_next_word(count, key)",
							" function vi_overstrike(count, key)",
							" function vi_overstrike_delete(count, key)",
							" function vi_prev_word(count, key)",
							" function vi_put(count, key)",
							" function vi_redo(count, c)",
							" function vi_rubout(count, key)",
							" function vi_search(count, key)",
							" function vi_search_again(count, key)",
							" function vi_set_mark(count, key)",
							" function vi_start_inserting(key, repeat, sign)",
							" function vi_subst(count, key)",
							" function vi_tilde_expand(ignore, key)",
							" function vi_undo(count, key)",
							" function vi_unix_word_rubout(count, key)",
							" function vi_yank_arg(count, key)",
							" function vi_yank_pop(count, key)",
							" function vi_yank_to(count, key)",
							" function yank(count, key)",
							" function yank_last_arg(count, key)",
							" function yank_nth_arg(count, key)",
							" function yank_pop(count, key)"
						]
					},
					"AQAAAAAAAAAAAAAAZxwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-preact.js",
						"symkeys":
						[
							[
								148,
								172
							],
							[
								188,
								192
							]
						],
						"symlist":
						[
							"TestComponent = props =>",
							"test"
						]
					},
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-preact.js",
						"symkeys":
						[
							[
								103,
								127
							],
							[
								143,
								147
							]
						],
						"symlist":
						[
							"TestComponent = props =>",
							"test"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAVGVzdENvbXBvbmVudCA9IHByb3BzID0+CiAgdGVzdAAAAAAAAAAAHwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAVGVzdENvbXBvbmVudCA9IHByb3BzID0+CiAgdGVzdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-preact.js",
						"symkeys":
						[
							[
								166,
								190
							],
							[
								206,
								210
							]
						],
						"symlist":
						[
							"TestComponent = props =>",
							"test"
						]
					},
					"AQAAAAAAAAAAAAAAHwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-ffi/lib/fcntl.js",
						"symkeys":
						[
							[
								1202,
								1235
							]
						],
						"symlist":
						[
							" function fcntl(fd, cmd, arg = 0)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAVGVzdENvbXBvbmVudCA9IHByb3BzID0+CiAgdGVzdAAAAAAAAAAAGQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAZAAAAICBmY250bChmZCwgY21kLCBhcmcgPSAwKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/qjs-opencv/LCCV/example/takephoto.cpp",
						"symkeys":
						[
							[
								55,
								59
							]
						],
						"symlist":
						[
							"main"
						]
					},
					"AQAAAAAAAAAAAAAABgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "quickjs/qjs-ffi/lib/fcntl.js",
			"settings":
			{
				"buffer_size": 1371,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nDebugger\n--------\n\n  For getting set up see https://github.com/daveleroy/sublime_debugger\n\n  For a full list of changes see https://github.com/daveleroy/sublime_debugger/commits\n\n  Version 0.7.0\n\n  - Redesigned debugger ui so that the console output can appear in an output panel\n  - The hover expression behavior is smarter and can evaluate simple expressions like `a.b` `a->c` etc\n  - lua: Adds lua debugger via lua-local (@naoufalzerai)\n  - python: support for multiprocess debugging\n  - ruby: allow specifying readapt path via `ruby_readapt` preference \n  - go: updated to use dlv dap\n\n  Version 0.6.8\n\n  - python: fixes issue with installing adapter\n  - python: allow specifying the python interpreter with `python`\n\n\n  Version 0.6.7\n\n  - Fixes an issue with the latest version of vscode lldb\n\n\n  Version 0.6.6\n\n  - Allow inputing debugger commands directly into the debugger console\n  - Auto complete for debugger commands (not all adapters support this)\n  - A number of performance/usability improvements for the debugger console\n\n\n  Version 0.6.4\n\n  - Added support for vscode-js-debug for chrome/node/edge adapters\n  - Improved snippet support\n\n\n  Version 0.6.3\n\n  - Adjusted the calculation for determining a good value for ui_rem_width_scale\n  - Added setting ui_rem_width_scale_adjust_automatically for disabling automatic calculation of ui_rem_width_scale\n\n\n  Version 0.6.2\n\n  - Fixes a layout issue on Linux\n\n\n  Version 0.6.1\n\n  - Fixes an issue with the debugger panel not being correctly sized on Windows/Linux #121\n  - Fixes an issue with hover evaluation #152 (@ta946)\n\n\n  Version 0.6.0\n\n  - This update changes how the output is handled. Instead of showing up as a tab in the debugger UI the layout is changed to a split view and the output is created in a standard view. This isn't perfect but it at least allows copy/paste/scrolling etc. The output view now also supports some ansi escape codes. You can customize the layout/placement of the view in the settings.\n  - Adds dissasembly syntax for LLDB\n  - Elixer support (@timfjord)\n\n\n  Version 0.5.4\n\n  - Resolve the`$workspaceFolder` variable to first folder project instead of being an alias of `$project_path`  (@rchl)\n  - Fix layout positioning in latest ST dev builds (@rchl)\n  - lldb: Fixes an issue with the integrated terminal handling\n\n\n  Version 0.5.3\n\n  - Tool tips when hovering over debugger controls\n  - Moved Debugger menu item into tools -> Debugger\n  - Improved json schema support for auto completeing adapter configurations (requires LSP-json)\n  - Fixes node json schema contributions\n  - Fixes issue with installing the php adapter\n  - Fixes issues with localized pacakages and json schema/snippets\n  - Fixes issue with external terminal on mac\n\n\n  Version 0.5.2\n\n  - Disable winpty on Windows (needs to be rebuilt for python 3.8)\n\n\n  Version 0.5.1\n\n  - Fixes 64/32 bit windows importing the wrong winpyty versions\n\n\n  Version 0.5.0\n\n  - python: Allow module launch configurations (@anergictcell)\n  - lldb: fixes issue with toggle disassembly\n  - ruby: added adapter (requires readapt)\n\n  - The install adapter menu now checks installed adapters for updates (for most adapters)\n  - The install adapter menu now has a link to each adapters documentations\n\n  - Added 'Debugger: Clear Breakpoints' command that clears all breakpoints\n\n  - Support for exception breakpoint filter conditions (not all adapters support this)\n  - Support for debug session hierarchies which is going to be required for some complex adapter setups such as vscode-debug-js\n  - Support the \"clipboard\" context when copying a variables value\n\n  - When expanding a variable display a loading indicator when the variables children are fetched.\n  - Show error message inline when expanding a variable fails\n  - Allow expanding/collapsing a debug session\n  - Improved handling of stack frames that marked as labels\n  - Improved handling of stack frames that are marked as deemphasized or their source is deemphasized\n  - Fixes integrated terminal\n\n\n  Version 0.4.1\n\n  - Adds explicit font setting for debugger panel\n\n\n  Version 0.4.0\n\n  - debugger_configuration replaces debug.configurations and is now defined at the root of the .sublime-project instead of inside settings\n  - Adds support for tasks see https://github.com/daveleroy/sublime_debugger#tasks\n  - Adds support for pre_debug_task and post_debug_task which can be used to build etc\n  - Adds schema support for LSP-json for auto completeing adapter configurations (see https://github.com/sublimelsp/LSP-json)\n  - Improvements to lldb adapter adding toggle disassembly, display options, dereference options\n  - Clicking a terminal panel when already selected now shows an output panel with the entire contents\n  - Renamed a bunch of commands (so if you bound any commands check them)\n  - Node adapter now has snippets\n  - Fixes issues with latest release of lldb adapter\n  - Fixes default ui scale accross platforms\n\n\n  Version 0.3.1\n\n  - Fixes issue with sizing and alignment of panels on windows\n  - Fixes path of go adapter\n\n\n  Version 0.3.0\n\n  - Initial support for multiple debug sessions\n  - Use debugpy instead of ptvsd for python adapter\n  - Right align line numbers in variables/callstack panel\n  - Improved layout of panels\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.2\n\n  - Show dialog with error message when launching fails (to match vscode)\n  - In multi-threaded programs the reason for why a specific thread was stopped is now only displayed on that thread even if all threads were stopped\n  - If running a build with `sublime_build` in the configuration don't start debugging if the build fails with an exit code\n  - Fixes issue with pause not working\n  - Fixes rendering performance regression\n  - Fixes gutter icons on windows\n\n\n  Version 0.2.1\n\n  - Debugging with a single thread now just displays the stack frames without the thread header\n  - When launching a configuration and the adapter is not installed offer to install it\n  - When auto selecting a stack frame prefer the first none subtle stack frame\n  - Fixes call stack layout when encountering long stack frame names\n  - Fixes various issues with multi threaded debugging\n  - Fixes hover providers\n\n\n  Version 0.2.0\n\n  - Support for column breakpoints (requires adapter support)\n  - Support for data breakpoints (requires adapter support, currently only lldb?)\n  - Left-click gutter now toggles breakpoints, right-clicking a breakpoint allows editing/advanced options\n  - Watch expressions\n  - Loaded Modules/Sources panels\n  - Adds Node debug adapter (@appelgriebsch)\n  - External terminal support. Terminal on Mac (Needs support for Windows/Linux) or Sublime's Terminus package.\n  - Integrated terminal now strips ascii control sequences \n  - Settings button\n  - Show currently installed version of an adapter, show download progress when installing an adapter\n  - Fixes issues that sometimes occurred installing/reinstalling adapters\n  - Fixes issues with reloading plugin\n\n\n  Version 0.1.8\n\n  - Fixes core not defined error\n\n\n  Version 0.1.7\n\n  - Allow setting logging options in settings\n  - Updated url for vscode-firefox-debugger (@appelgriebsch)\n  - Fixes issue preventing Debugger: Install Adapters from being run from the command palette\n  - Fixes issue where some debug adapters were failing to be fully unzipped on Windows because of long paths\n\n\n  Version 0.1.6\n\n  - Adds run to cursor command\n  - Fixes issue preventing installing debug adapters\n\n\n  Version 0.1.5\n\n  - Fixes issue that prevented debugging on windows\n\n\n  Version 0.1.4\n\n  - New styling of panels and updated layout to better support temporary panels created for build results/integrated terminal (and in the future allow customizing the layout of the panels)\n  - New console rendering code to support text wrapping and build results/integrated terminal\n  - Support internal terminal requests to allow program input. Requires configuration changes to use this feature which depends on the adapter in question. (LLVM uses \"terminal\": \"integrated\")\n  - Allow defining platform specific configuration settings with a top level object called \"linux\", \"osx\", or \"windows\" in your configuration. Same as vscode \n  - Fixes issue where hover providers/autocomplete/run command was not working for some debug adapters \n  - Fixes issue where using $file and other variables in a configuration had their values expanded when the debugger was opened not when the debugger was started\n  - Fixes some wonkiness that occurred when stepping the debugger that caused it to not update correctly\n\n\n  Version 0.1.3\n\n  - When attempting to open the debugger in a window without a sublime project prompt the user to create one.\n  - Fixes some other minor bugs and configuration issues\n\n\n  Version 0.1.0\n\n  - Adds package control support",
			"settings":
			{
				"buffer_size": 8904,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "Package Control Messages\n========================\n\nDebugger\n--------\n\n  For getting set up see https://github.com/daveleroy/sublime_debugger\n\n  For a full list of changes see https://github.com/daveleroy/sublime_debugger/commits\n\n  Version 0.7.0\n\n  - Redesigned debugger ui so that the console output can appear in an output panel\n  - The hover expression behavior is smarter and can evaluate simple expressions like `a.b` `a->c` etc\n  - lua: Adds lua debugger via lua-local (@naoufalzerai)\n  - python: support for multiprocess debugging\n  - ruby: allow specifying readapt path via `ruby_readapt` preference \n  - go: updated to use dlv dap\n\n  Version 0.6.8\n\n  - python: fixes issue with installing adapter\n  - python: allow specifying the python interpreter with `python`\n\n\n  Version 0.6.7\n\n  - Fixes an issue with the latest version of vscode lldb\n\n\n  Version 0.6.6\n\n  - Allow inputing debugger commands directly into the debugger console\n  - Auto complete for debugger commands (not all adapters support this)\n  - A number of performance/usability improvements for the debugger console\n\n\n  Version 0.6.4\n\n  - Added support for vscode-js-debug for chrome/node/edge adapters\n  - Improved snippet support\n\n\n  Version 0.6.3\n\n  - Adjusted the calculation for determining a good value for ui_rem_width_scale\n  - Added setting ui_rem_width_scale_adjust_automatically for disabling automatic calculation of ui_rem_width_scale\n\n\n  Version 0.6.2\n\n  - Fixes a layout issue on Linux\n\n\n  Version 0.6.1\n\n  - Fixes an issue with the debugger panel not being correctly sized on Windows/Linux #121\n  - Fixes an issue with hover evaluation #152 (@ta946)\n\n\n  Version 0.6.0\n\n  - This update changes how the output is handled. Instead of showing up as a tab in the debugger UI the layout is changed to a split view and the output is created in a standard view. This isn't perfect but it at least allows copy/paste/scrolling etc. The output view now also supports some ansi escape codes. You can customize the layout/placement of the view in the settings.\n  - Adds dissasembly syntax for LLDB\n  - Elixer support (@timfjord)\n\n\n  Version 0.5.4\n\n  - Resolve the`$workspaceFolder` variable to first folder project instead of being an alias of `$project_path`  (@rchl)\n  - Fix layout positioning in latest ST dev builds (@rchl)\n  - lldb: Fixes an issue with the integrated terminal handling\n\n\n  Version 0.5.3\n\n  - Tool tips when hovering over debugger controls\n  - Moved Debugger menu item into tools -> Debugger\n  - Improved json schema support for auto completeing adapter configurations (requires LSP-json)\n  - Fixes node json schema contributions\n  - Fixes issue with installing the php adapter\n  - Fixes issues with localized pacakages and json schema/snippets\n  - Fixes issue with external terminal on mac\n\n\n  Version 0.5.2\n\n  - Disable winpty on Windows (needs to be rebuilt for python 3.8)\n\n\n  Version 0.5.1\n\n  - Fixes 64/32 bit windows importing the wrong winpyty versions\n\n\n  Version 0.5.0\n\n  - python: Allow module launch configurations (@anergictcell)\n  - lldb: fixes issue with toggle disassembly\n  - ruby: added adapter (requires readapt)\n\n  - The install adapter menu now checks installed adapters for updates (for most adapters)\n  - The install adapter menu now has a link to each adapters documentations\n\n  - Added 'Debugger: Clear Breakpoints' command that clears all breakpoints\n\n  - Support for exception breakpoint filter conditions (not all adapters support this)\n  - Support for debug session hierarchies which is going to be required for some complex adapter setups such as vscode-debug-js\n  - Support the \"clipboard\" context when copying a variables value\n\n  - When expanding a variable display a loading indicator when the variables children are fetched.\n  - Show error message inline when expanding a variable fails\n  - Allow expanding/collapsing a debug session\n  - Improved handling of stack frames that marked as labels\n  - Improved handling of stack frames that are marked as deemphasized or their source is deemphasized\n  - Fixes integrated terminal\n\n\n  Version 0.4.1\n\n  - Adds explicit font setting for debugger panel\n\n\n  Version 0.4.0\n\n  - debugger_configuration replaces debug.configurations and is now defined at the root of the .sublime-project instead of inside settings\n  - Adds support for tasks see https://github.com/daveleroy/sublime_debugger#tasks\n  - Adds support for pre_debug_task and post_debug_task which can be used to build etc\n  - Adds schema support for LSP-json for auto completeing adapter configurations (see https://github.com/sublimelsp/LSP-json)\n  - Improvements to lldb adapter adding toggle disassembly, display options, dereference options\n  - Clicking a terminal panel when already selected now shows an output panel with the entire contents\n  - Renamed a bunch of commands (so if you bound any commands check them)\n  - Node adapter now has snippets\n  - Fixes issues with latest release of lldb adapter\n  - Fixes default ui scale accross platforms\n\n\n  Version 0.3.1\n\n  - Fixes issue with sizing and alignment of panels on windows\n  - Fixes path of go adapter\n\n\n  Version 0.3.0\n\n  - Initial support for multiple debug sessions\n  - Use debugpy instead of ptvsd for python adapter\n  - Right align line numbers in variables/callstack panel\n  - Improved layout of panels\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.2\n\n  - Show dialog with error message when launching fails (to match vscode)\n  - In multi-threaded programs the reason for why a specific thread was stopped is now only displayed on that thread even if all threads were stopped\n  - If running a build with `sublime_build` in the configuration don't start debugging if the build fails with an exit code\n  - Fixes issue with pause not working\n  - Fixes rendering performance regression\n  - Fixes gutter icons on windows\n\n\n  Version 0.2.1\n\n  - Debugging with a single thread now just displays the stack frames without the thread header\n  - When launching a configuration and the adapter is not installed offer to install it\n  - When auto selecting a stack frame prefer the first none subtle stack frame\n  - Fixes call stack layout when encountering long stack frame names\n  - Fixes various issues with multi threaded debugging\n  - Fixes hover providers\n\n\n  Version 0.2.0\n\n  - Support for column breakpoints (requires adapter support)\n  - Support for data breakpoints (requires adapter support, currently only lldb?)\n  - Left-click gutter now toggles breakpoints, right-clicking a breakpoint allows editing/advanced options\n  - Watch expressions\n  - Loaded Modules/Sources panels\n  - Adds Node debug adapter (@appelgriebsch)\n  - External terminal support. Terminal on Mac (Needs support for Windows/Linux) or Sublime's Terminus package.\n  - Integrated terminal now strips ascii control sequences \n  - Settings button\n  - Show currently installed version of an adapter, show download progress when installing an adapter\n  - Fixes issues that sometimes occurred installing/reinstalling adapters\n  - Fixes issues with reloading plugin\n\n\n  Version 0.1.8\n\n  - Fixes core not defined error\n\n\n  Version 0.1.7\n\n  - Allow setting logging options in settings\n  - Updated url for vscode-firefox-debugger (@appelgriebsch)\n  - Fixes issue preventing Debugger: Install Adapters from being run from the command palette\n  - Fixes issue where some debug adapters were failing to be fully unzipped on Windows because of long paths\n\n\n  Version 0.1.6\n\n  - Adds run to cursor command\n  - Fixes issue preventing installing debug adapters\n\n\n  Version 0.1.5\n\n  - Fixes issue that prevented debugging on windows\n\n\n  Version 0.1.4\n\n  - New styling of panels and updated layout to better support temporary panels created for build results/integrated terminal (and in the future allow customizing the layout of the panels)\n  - New console rendering code to support text wrapping and build results/integrated terminal\n  - Support internal terminal requests to allow program input. Requires configuration changes to use this feature which depends on the adapter in question. (LLVM uses \"terminal\": \"integrated\")\n  - Allow defining platform specific configuration settings with a top level object called \"linux\", \"osx\", or \"windows\" in your configuration. Same as vscode \n  - Fixes issue where hover providers/autocomplete/run command was not working for some debug adapters \n  - Fixes issue where using $file and other variables in a configuration had their values expanded when the debugger was opened not when the debugger was started\n  - Fixes some wonkiness that occurred when stepping the debugger that caused it to not update correctly\n\n\n  Version 0.1.3\n\n  - When attempting to open the debugger in a window without a sublime project prompt the user to create one.\n  - Fixes some other minor bugs and configuration issues\n\n\n  Version 0.1.0\n\n  - Adds package control support"
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "qjs-opencv/LCCV/example/takephoto.cpp",
			"settings":
			{
				"buffer_size": 688,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/check-discogs.js",
		"/home/roman/Projects/plot-cv/discogs.js",
		"/home/roman/Projects/plot-cv/test-preact.js",
		"/home/roman/Projects/plot-cv/discogs-shipping-policies.js",
		"/home/roman/Projects/plot-cv/adsb-common.js",
		"/home/janos/Sources/plot-cv/test-video.js",
		"/home/janos/Sources/plot-cv/debugger.js",
		"/home/janos/Sources/plot-cv/discogs-shipping-policies.js",
		"/home/janos/Sources/plot-cv/discogs.js",
		"/home/janos/Sources/plot-cv/check-discogs.js",
		"/home/janos/Sources/plot-cv/debugger-server.js",
		"/home/janos/Sources/plot-cv/test-image.js",
		"/home/janos/Sources/plot-cv/io-helpers.js",
		"/home/janos/Sources/plot-cv/scripts/prettier.sh",
		"/home/roman/Projects/plot-cv/qjs-opencv/highgui.cpp",
		"/home/janos/Sources/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/janos/Sources/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/janos/Sources/plot-cv/qjs-opencv/cmake/FindPNG.cmake",
		"/home/janos/Sources/dropbear/libtommath/tommath.h",
		"/home/janos/Sources/plot-cv/lib/grammars/ECMAScript.g4",
		"/home/janos/Sources/plot-cv/test-glfw.js",
		"/home/janos/Sources/plot-cv/lib/grammars/js_tokenizer.l",
		"/home/janos/Sources/plot-cv/lib/grammars/JavaScriptLexer.g4",
		"/home/janos/Sources/plot-cv/test-midi.js",
		"/home/roman/Projects/plot-cv/lib/grammars/css3.g4",
		"/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
		"/home/roman/Projects/plot-cv/lib/spawn.js",
		"/home/roman/Projects/plot-cv/trkl.es",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/deep.es",
		"/home/roman/Projects/plot-cv/preact.es",
		"/home/roman/Projects/plot-cv/preact.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lscache.es",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/nanovg-qjs.h",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-104",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/libs.js",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-102",
		"/home/roman/Projects/plot-cv/discogs.es",
		"/home/roman/Projects/plot-cv/date-helpers.js",
		"/home/roman/Projects/plot-cv/io-helpers.js.orig",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/test-imread.js",
		"/home/roman/Projects/plot-cv/childProcess.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/make-bitmap.js",
		"/home/roman/Projects/plot-cv/diagram.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line_iterator.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/a.out",
		"/home/roman/Projects/plot-cv/test-autoplacer.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/param.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/size.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/workerScript.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/videoSource.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_array.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_clahe.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_draw.cpp",
		"/home/roman/Projects/plot-cv/test-diagram.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_rect.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_umat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point_iterator.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.hpp",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Sources/opencv/modules/videoio/src/cap_ffmpeg_impl.hpp",
		"/home/roman/Sources/opencv/modules/videoio/src/cap_ffmpeg.cpp",
		"/home/roman/Projects/ffmpeg-audio/orange-ffmpeg/ffmpeg-libs/static/ffmpeg/share/ffmpeg/examples/demuxing_decoding.c",
		"/home/roman/Projects/plot-cv/opencv-video.c",
		"/home/roman/Projects/plot-cv/simplest_ffmpeg_audio_decoder.cpp",
		"/home/roman/Projects/plot-cv/lib/filesystem.js",
		"/home/roman/Projects/plot-cv/fetch-post-prices.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/printer.js",
		"/home/roman/Projects/plot-cv/jack-session-client.c",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/mics.js",
		"/home/roman/Projects/plot-cv/create-tamper.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser2.js",
		"/home/roman/Projects/plot-cv/time-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point_iterator.hpp",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/JSBindings.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/Functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/scripts/collapse-imports.sh",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/lib/eda/circuitjs.js"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,-*/opencv/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"g\\.",
			"getRows",
			"g.defineGetter",
			"g.trimFn",
			"trimFn",
			"toEntries",
			"toFn",
			"toArrayFn",
			"main",
			"path",
			"child_proces",
			"WND_PROP",
			"POST_EXPR",
			"A-Z",
			"Key",
			"Property",
			"selectors",
			"DJS_SHARED_LIBRARY",
			"Shipping Address",
			"/\\*",
			"thread_content",
			"diskosenn",
			"import\\(",
			"ReadJSON",
			"orderDocuments",
			"pageParse",
			"ordersLoad",
			"pageParse",
			"Parser",
			"orderIdCells",
			"CachedFet",
			"CachedFett",
			"7",
			"pageFet",
			"CachedFetch",
			"CachedFetch\\(",
			"CachedFetch",
			"fetch =",
			"Fetch",
			"globalThis",
			"cacheLoad =",
			"$",
			"getTextFlat",
			"pageGetRequests",
			"Keys",
			"getAttribute",
			"scaleIFrame",
			"const frame",
			"makeIFrame",
			"naviga",
			"getTextFlat",
			"frameLoad",
			"^{",
			"options",
			"Util\\.",
			"setGlobal",
			"ordersGetRows",
			"');",
			"Util.getter",
			"//",
			"async",
			"\n}",
			"matchCache",
			"child_process",
			"pthread_create",
			"fork",
			"ReadCallback",
			"tls",
			"typeof ([^ ]*) == 'string'",
			"version",
			"child_proces",
			"waitRead",
			"filesystem\\.",
			"FdReader",
			"Util\\.",
			"Util",
			", '-H',",
			"child_proces",
			"selectROI",
			"recalc",
			"Pipeline",
			"threshold",
			"Pipeline",
			"Trackbar",
			"LoadConfig",
			"config",
			"NumericPara",
			"Trackbar",
			"Param",
			"Console",
			"getOther",
			"getOther\\(",
			"getOther",
			"'headers'",
			"bytes written",
			"fs\\.",
			"std\\.",
			"once",
			"mkstempSync",
			"VideoSou",
			"getLayer",
			"js_array_to",
			"90",
			"operator<<",
			"js_array_to",
			"js_draw_polylines",
			"polylines",
			"CORE_TRANSFORM",
			"js_contour_getmat",
			"transform",
			"ctor",
			"  console.log('axes.x', axes.x); \n",
			"187",
			"style",
			"audio",
			"_decode_",
			"decode_",
			"videoFormat",
			" CV_",
			"CV_",
			"cacheFields",
			"Location",
			"GetLoc",
			"gettok",
			" matchStatement",
			"'eof'",
			" parseTempl",
			"gettok"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"    ",
			"",
			"defineGetter",
			"trimFn",
			"g.toArrayFn",
			"ordersGetList",
			"getCacheValue",
			"tlsv",
			"\\1",
			"http",
			"fs.",
			",\\n    '-H', ",
			"Size.getOther(",
			"matrix",
			" cv::CV_",
			"CV_RGB(0, 0, 0)",
			"",
			"point",
			"\\\\D",
			"\\\\d",
			"\\.deref",
			"is_alphanumeric_char",
			"is_whitespace_char",
			"length",
			"{ const",
			"{ return",
			"const  {flags}=this;\\nreturn flags",
			"defines",
			"",
			"fs.\\1Sync",
			"define",
			",",
			"file",
			"target_compile_definitions",
			"msg",
			"PmDeviceInfo",
			"export function",
			"libportmidi",
			"\\1//\\2",
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/qjs-opencv/LCCV/example/takephoto.cpp",
							"function_name_status_row": -1,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									55,
									59
								]
							],
							"symlist":
							[
								"  main"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1651806638.66,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "quickjs/qjs-ffi/lib/fcntl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1371,
						"regions":
						{
							"col_00040001":
							{
								"flags": 16,
								"regions":
								[
									[
										1085,
										1095
									]
								],
								"scope": "col_00040001"
							},
							"col_00040001_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00040001_circle.png",
								"regions":
								[
									[
										1060,
										1060
									]
								],
								"scope": "col_gutter"
							},
							"col_101000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										983,
										991
									],
									[
										1015,
										1023
									]
								],
								"scope": "col_101000FF"
							},
							"col_101000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_101000FF_circle.png",
								"regions":
								[
									[
										960,
										960
									],
									[
										993,
										993
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								773,
								783
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 27,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659405344.42,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 249.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8904,
						"regions":
						{
						},
						"selection":
						[
							[
								8904,
								8904
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"auto_indent": false,
							"function_name_status_row": 240,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"tabs_extra_last_activated": 1659405375.15,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "qjs-opencv/LCCV/example/takephoto.cpp",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 688,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659405377.49,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139700989367200)":
	{
		"height": 0.0
	},
	"output.Protocol(139713492737424)":
	{
		"height": 0.0
	},
	"output.Protocol(140020110213280)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752054832)":
	{
		"height": 0.0
	},
	"output.Protocol(140156680251040)":
	{
		"height": 0.0
	},
	"output.Protocol(140161693477184)":
	{
		"height": 0.0
	},
	"output.Protocol(140190209186352)":
	{
		"height": 0.0
	},
	"output.Protocol(140264240155856)":
	{
		"height": 0.0
	},
	"output.Protocol(140490298408144)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873410144)":
	{
		"height": 0.0
	},
	"output.Protocol(140627243657680)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"fntl.js",
				"quickjs/qjs-ffi/lib/fcntl.js"
			],
			[
				"adsb",
				"adsb-common.js"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-midi",
				"test-midi.js"
			],
			[
				"css",
				"lib/grammars/css3.g4"
			],
			[
				"xpath",
				"lib/grammars/xpath.g4"
			],
			[
				"console",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"libs.js",
				"libs.js"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"disco",
				"discogs.js"
			],
			[
				"spawn.",
				"lib/spawn.js"
			],
			[
				"helpers",
				"io-helpers.js.orig"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"child-",
				"quickjs/qjs-modules/child-process.c"
			],
			[
				"package.j",
				"package.json"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"test-imrea",
				"test-imread.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"cvpipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"events.js",
				"quickjs/qjs-modules/lib/events.js"
			],
			[
				"test-vi",
				"test-video.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"server",
				"server.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"test-wor",
				"test-worker.js"
			],
			[
				"ws-work",
				"ws-worker.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"cvVi",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"ideoSou",
				"videoSource.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"documen",
				"lib/eagle/document.js"
			],
			[
				"cvPipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"dia",
				"diagram.js"
			],
			[
				"diagra",
				"diagram.js"
			],
			[
				"diag",
				"diagram.js"
			],
			[
				"opencv-vi",
				"opencv-video.c"
			],
			[
				"opencv-vide",
				"opencv-video.c"
			],
			[
				"simplest",
				"simplest_ffmpeg_audio_decoder.cpp"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"js",
				"jack-session-client.c"
			],
			[
				"package.js",
				"package.json"
			],
			[
				"printer",
				"lib/ecmascript/printer.js"
			],
			[
				"parser2.",
				"lib/ecmascript/parser2.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"cvHigh",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"diagram",
				"diagram.js"
			],
			[
				"point.hpp",
				"qjs-opencv/js_point.hpp"
			],
			[
				"jsbind",
				"qjs-opencv/jsbindings.hpp"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"help",
				"time-helpers.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"image",
				"imagePipeline.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"minnet-http",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"minnet-server",
				"quickjs/qjs-net/minnet-server.c"
			],
			[
				"minnet.c",
				"quickjs/qjs-net/minnet.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"time-help",
				"time-helpers.js"
			],
			[
				"io-helpers",
				"io-helpers.js"
			],
			[
				"test-bjson",
				"test-bjson.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"commands.j",
				"commands.js"
			],
			[
				"render",
				"lib/eagle/renderer.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"diff.js",
				"lib/json/diff.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"circuit",
				"lib/eda/circuitjs.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-shell.js",
				"cv-shell.js"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"queue.h",
				"quickjs/qjs-modules/queue.h"
			],
			[
				"queue.c",
				"quickjs/qjs-modules/queue.c"
			],
			[
				"char-utils",
				"quickjs/qjs-modules/char-utils.h"
			],
			[
				"quickjs-misc.",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"predicate.c",
				"quickjs/qjs-modules/predicate.c"
			],
			[
				"debugger-tran",
				"quickjs/quickjs-debugger-transport-win.c"
			],
			[
				"quickjs-debugg",
				"quickjs/quickjs-debugger-transport-unix.c"
			],
			[
				"defs",
				"quickjs/defs.cmake"
			],
			[
				"quickjs/CMakeLi",
				"quickjs/CMakeLists.txt"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-pred",
				"quickjs/qjs-modules/quickjs-predicate.c"
			],
			[
				"package",
				"package.json"
			],
			[
				"xpath.js",
				"lib/dom/xpath.js"
			],
			[
				"compileComm",
				"lib/build/compileCommand.js"
			],
			[
				"compile_com",
				"compile_commands.js"
			],
			[
				"quickjs-pat",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"test-child",
				"test-childprocess.js"
			],
			[
				"test-ini",
				"test-ini.js"
			],
			[
				"fn.js",
				"lib/parse/fn.js"
			],
			[
				"test-css",
				"test-css3.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"grammar-css3",
				"grammar-css3.js"
			],
			[
				"css3",
				"lib/grammars/css3.g4"
			],
			[
				"grammar.js",
				"lib/parse/grammar.js"
			],
			[
				"test-parse",
				"test-parse.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"lexer",
				"lib/parse/lexer.js"
			],
			[
				"ecmascript.js",
				"lib/ecmascript.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"imgui",
				"cmake/imgui-viewer.cmake"
			],
			[
				"high",
				"cmake/highgui-viewer.cmake"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"circui",
				"lib/eda/circuitjs.js"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"deep.c",
				"quickjs/qjs-modules/quickjs-deep.c"
			],
			[
				"test_xml",
				"quickjs/qjs-modules/tests/test_xml.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"highgui",
				"cmake/highgui-viewer.cmake"
			],
			[
				"list-exp",
				"list-exports.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 247.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
