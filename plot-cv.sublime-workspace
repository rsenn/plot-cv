{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"CURL_LIB",
				"CURL_LIBRARY_DEBUG"
			],
			[
				"Circ",
				"CircuitJS"
			],
			[
				"dep",
				"dependency"
			],
			[
				"opt",
				"optimization"
			],
			[
				"OPENCV_LIB",
				"OPENCV_LIBRARIES"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"relat",
				"relativeTo"
			],
			[
				"max",
				"maxLineGap"
			],
			[
				"Pm_Op",
				"Pm_OpenInput"
			],
			[
				"Pm_Get",
				"Pm_GetDeviceInfo"
			],
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			],
			[
				"arg",
				"argc"
			],
			[
				"instru",
				"instrument"
			],
			[
				"defaul",
				"defaultExport"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Util(g)\nUtil.formatAnnotatedObject = function(subject, o)\n  i =>\n  item =>\n  padding = x =>\n  arr =>\nUtil.curry = (fn, arity) =>\n  ret = function curried(...args)\n  (v, i) =>\nCurried = function(...a)\n  function()\n  function(a)\n  function(a, b)\n  function(a, b, c)\n  function(a, b, c, d)\n  get()\nUtil.arityN = (fn, n) =>\n  function(fn)\n  function()\n  function(fn)\n  function(a)\n  function(fn)\n  function(a, b)\n  function(fn)\n  function(a, b, c)\n  function(fn)\n  function(a, b, c, d)\n  function(fn)\n  function(a, b, c, d, e)\nUtil.getter = target =>\n  self = function(key)\n  .fn = key =>\n  .fn = key =>\nUtil.setter = target =>\n  self = function(key, value)\n  .fn = (key, value) =>\n  .fn = (key, value) =>\nUtil.remover = target =>\n  key =>\n  key =>\nUtil.hasFn = target =>\n  key =>\n  key =>\nUtil.adder = target =>\n  arg =>\n  arg =>\n  self = function(obj, arg = 1)\nChooseFn(a, o)\n  .fn = (obj, arg) =>\n  .fn = (obj, arg) =>\n  .fn = (obj, arg) =>\n  .fn = (num, arg) =>\n  .fn = (obj, arg) =>\nUtil.updater = (target, get, set, fn) =>\n  (k, f, i) =>\n  doUpdate(key, func, i)\n  create = () =>\n  key =>\n  () =>\n  self = function(...args)\nUtil.once = (fn, thisArg, memoFn) =>\n  function(...args)\nUtil.delay = (func, wait, thisObj) =>\n  function(...args)\n()\nUtil.throttle = (f, t, thisObj) =>\n  function(...args)\nUtil.debounce = (func, wait, options = {}) =>\n  later()\n  debounced(...a)\n  .clear = function()\n  .flush = function()\nUtil.debounceAsync = (fn, wait, options = {}) =>\n  function(...a)\n  resolve =>\n() =>\n  arg =>\n  g =>\n  g =>\n  () =>\n  err =>\n  () =>\n  err =>\n  () =>\n  err =>\n() =>\nUtil.log = (...args) =>\n  f =>\n  f =>\n(a, p, i) =>\n  get: () =>\n  .setFilters = function(args)\n  arg =>\n  .getFilters = function()\nUtil.msg = (strings, ...substitutions) =>\n(base, n) =>\nUtil.generalLog = function(n, x)\nUtil.toSource = function(arg, opts = {})\n  print = (...args) =>\nUtil.debug = function(message)\n  removeCircular = function(key, value)\n  arg =>\nUtil.type = function({ type })\nUtil.functionName = function(fn)\nUtil.className = function(obj)\n  obj\nUtil.unwrapComponent = function(c)\nUtil.componentName = function(c)\nUtil.count = function(s, ch)\nUtil.parseNum = function(str)\nUtil.minmax = function(num, min, max)\nUtil.getExponential = function(num)\nUtil.getNumberParts = function(num)\nUtil.pow2 = function(n)\nUtil.pow10 = function(n)\nUtil.bitValue = function(n)\nUtil.bitMask = function(bits, start = 0)\nUtil.bitGroups = function(num, bpp, minLen)\nUtil.bitStuff = (arr, bpp) =>\n([b, f], n) =>\nUtil.toBinary = function(num)\nUtil.toBits = function(num)\n  bit =>\nUtil.getBit = function(v, n)\nUtil.isSet = function(v, n)\nUtil.bitCount = function(n)\nUtil.bitNo = function(n)\nUtil.toggleBit = function(num, bit)\nUtil.setBit = function(num, bit)\nUtil.clearBit = function(num, bit)\nUtil.range = function(...args)\n  (v, k) =>\n  n =>\nUtil.set = function(obj, prop, value)\n  (prop, value) =>\n  (prop, value) =>\n  (prop, value) =>\n  value =>\n(obj, prop) =>\n() =>\nUtil.bitArrayToNumbers = function(arr)\nUtil.bitsToNumbers = function(bits)\n(val, key, arr) =>\nUtil.shuffle = function(arr, rnd = Util.rng)\n(a, b) =>\nUtil.sortNum = function(arr)\n(a, b) =>\nUtil.draw = (arr, n = 1, rnd = Util.rng) =>\nUtil.is = function(what, ...pred)\n  type =>\n  fn =>\nUtil.instanceOf = (value, ctor) =>\nUtil.onoff = function(val)\nUtil.numbersToBits = function(arr)\n(bits, num) =>\nUtil.randomNumbers = function([start, end], draws)\nUtil.randomBits = function(r = [1, 50], n = 5)\nUtil.padFn = function(len, char = ' ', fn = (str, pad) => pad)\n  (s, n = len) =>\nUtil.pad = function(s, n, char = ' ')\nUtil.abbreviate = function(str, max = 40, suffix = '...')\nUtil.trim = function(str, charset)\nUtil.trimRight = function(str, charset)\nUtil.indent = (text, space = ' ') =>\nUtil.define = (obj, ...args) =>\nUtil.memoizedProperties = (obj, methods) =>\n  get()\nUtil.copyWhole = (dst, ...args) =>\nUtil.copyEntries = (obj, entries) =>\nUtil.extend = (...args) =>\nUtil.isCloneable = obj =>\nUtil.isUnextendable = val =>\n  pred = (k, v, f) =>\n(key, depth) =>\n  value = function(...args)\nUtil.defineGetter = (obj, key, fn, enumerable = false) =>\nUtil.defineGetterSetter = (obj, key, g, s, enumerable = false) =>\nUtil.defineGettersSetters = (obj, gettersSetters) =>\nUtil.extendArray = function(arr = Array.prototype)\n  function(pred)\n  function()\n  function()\n(item, i, a) =>\n  function()\n  function(value)\nUtil.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.\n(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))\n  get length()\n  get instance()\n  key(i)\n  get(key)\n  has(key)\n  set(key, value)\n*keys()\n*entries()\n  toObject()\n  toMap()\n  .localStorage = function(s)\n  () =>\n  w =>\n  () =>\n  l =>\n  (l, i) =>\n  (l, key) =>\n  (l, key, v) =>\nUtil.array = function(a)\nUtil.arrayFromEntries = entries =>\n([k, v]) =>\n  key =>\n([k, v]) =>\nUtil.toMap = function(hash = {}, fn)\nUtil.extendMap = function(map)\n  .entries = function*iterator()\n  .toObject = function()\n  .match = function(...args)\n  entries =>\nUtil.objectFrom = function(any)\nUtil.tail = function(arr)\nUtil.splice = function(str, index, delcount, insert)\nUtil.identity = arg =>\nUtil.reverse = arr =>\nUtil.keyOf = function(obj, prop)\nUtil.rotateRight = function(arr, n)\nUtil.repeater = function(n, what)\n()\n()\nUtil.repeat = function(n, what)\nUtil.arrayDim = function(dimensions, init)\nUtil.flatten = function(arr)\nUtil.chunkArray = (a, size) =>\n(acc, item, i) =>\nUtil.partition = function*(a, size)\nUtil.intersect = (a, b) =>\nUtil.difference = (a, b, incicludes) =>\n  x =>\n  x =>\n  x =>\n  x =>\nUtil.symmetricDifference = (a, b) =>\nUtil.union = (a, b, equality) =>\nUtil.chances = function(numbers, matches)\nUtil.sum = function(arr)\n(acc, n) =>\nUtil.expr = fn =>\n  expr(...args)\n  addArgs(args)\n  ret = function returnFn(...args)\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\nUtil.mod = (a, b) =>\n  n =>\n(a, b) =>\nUtil.fnName = function(f, parent)\nUtil.objName = function(o)\nUtil.findKey = function(obj, pred, thisVal)\n  value : v =>\nUtil.find = function(arr, value, prop = 'id')\n  pred = function(obj)\n  obj =>\n  obj =>\n  pred = ([key, value], arr) =>\nUtil.findIndex = function(obj, pred, thisArg)\nUtil.match = function(arg, pred)\n  match = (val, key) =>\n(acc, val, key) =>\n(acc, key) =>\nUtil.toHash = function(map, keyTransform = k => \n('' + k))\n  (v, k) =>\nUtil.indexOf = function(obj, prop)\nUtil.greatestCommonDenominator = (a, b) =>\nUtil.leastCommonMultiple = (n1, n2) =>\n(re, str)\nUtil.inspect = function(obj, opts = {})\n  stringFn = str =>\n  print = (...args) =>\n  (space = false) =>\n  (space = false) =>\n  key =>\n  key =>\nUtil.dump = function(name, props)\n  () =>\n  w =>\n  () =>\nUtil.ucfirst = function(str)\nUtil.lcfirst = function(str)\nUtil.typeOf = v =>\nUtil.camelize = (text, sep = '') =>\n  (match, p1, p2, offset) =>\nUtil.decamelize = function(str, separator = '-')\nUtil.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})\n  function(value)\nUtil.if = (value, _then, _else, pred) =>\n  v =>\n() =>\n() =>\nUtil.ifElse = (value, _else, pred) =>\n  v =>\n  () =>\n  () =>\n  () =>\nUtil.ifThen = (value, _then, pred) =>\n  v =>\n  () =>\n  () =>\n  () =>\nUtil.switch = ({ default: defaultCase, ...cases }) =>\n  function(value)\n(fn, arr)\nUtil.colorDump = (iterable, textFn) =>\n(color, n) =>\nUtil.bucketInserter = (map, ...extraArgs) =>\n  function(...args)\n  function(...args)\nUtil.fifo = function fifo()\n  resolve = () =>\n  generator()\n  r =>\n  push(...args)\n  process: function run()\nUtil.isEmail = function(v)\nUtil.isString = function(v)\nUtil.isNumeric = v =>\nUtil.isUndefined = arg =>\nUtil.isObject = obj =>\nUtil.isPrimitive = obj =>\nUtil.isFunction = arg =>\nUtil.not = fn =>\n  function(...args)\nUtil.isAsync = fn =>\nUtil.isArrowFunction = fn =>\nUtil.isEmptyString = v =>\nUtil.isEmpty = (...args) =>\n  empty(v)\nUtil.isNonEmpty = (...args) =>\n  nonEmpty = v =>\nUtil.isIpAddress = v =>\n  i =>\n  i =>\nUtil.isPortNumber = v =>\nUtil.hasProps = function(obj, props)\n  prop =>\nUtil.validatePassword = function(value)\nUtil.clone = function(obj, proto)\n  constructor\nUtil.deepClone = function(data)\nUtil.findVal = function(object, propName, maxDepth = 10)\nUtil.deepCloneObservable = function(data)\nUtil.toArray = function(observableArray)\nUtil.arryToTree = function(data, id, pId, appId)\n(e, i) =>\nUtil.to3wei = function(a, old, id, pId)\n(e, i) =>\n(se, si) =>\nUtil.arrExchangePos = function(arr, i, j)\nUtil.arrRemove = function(arr, i)\nUtil.move = function(src, dst = [])\nUtil.moveIf = function(src, pred, dst = [])\nUtil.logOutClearStorage = function()\nUtil.getCookie = function(cookie, name)\nUtil.parseCookie = function(c = document.cookie)\n  pred = char =>\n  char =>\n  char =>\nUtil.encodeCookie = c =>\n([key, value]) =>\nUtil.setCookies = c =>\n([key, value]) =>\nUtil.clearCookies = function(c)\n  (acc, name) =>\nUtil.deleteCookie = function(name)\n  () =>\n  w =>\n  () =>\nUtil.accAdd = function(arg1, arg2)\nUtil.Subtr = function(arg1, arg2)\nUtil.accDiv = function(arg1, arg2)\nUtil.accMul = function(arg1, arg2)\nUtil.dateFormatter = function(date, formate)\nUtil.numberFormatter = function(numStr)\nUtil.searchObject = function(object, matchCallback, currentPath, result, searched)\n(req = {}) =>\n  () =>\n  () =>\n  () =>\n  url =>\n  () =>\n() =>\n() =>\n() =>\n() =>\n() =>\n() =>\nUtil.parseQuery = function(url = \n)\nUtil.encodeQuery = function(data)\nUtil.parseURL = function(href = this.\n)\n  part =>\n([k, v]) =>\n(acc, m) =>\n  href(override)\nUtil.makeURL = function(...args)\nUtil.numberFromURL = function(url, fn)\nUtil.tryPromise = fn =>\n(resolve, reject) =>\n  resolve = a =>\n  reject = () =>\n  resolve = () =>\n  reject = () =>\n  function(...args)\n  function(...args)\n  resolve = a =>\n  reject = () =>\nUtil.putError = err =>\n() =>\n  fn =>\n  ret =>\nUtil.tryPredicate = (fn, defaultRet) =>\n  ret =>\n  () =>\nUtil.isBrowser = function()\n  () =>\n  w =>\n  () =>\n  () =>\n  d =>\n  () =>\nUtil.waitFor = function waitFor(msecs)\n({ setTimeout, clearTimeout, setInterval, clearInterval }) =>\n(resolve, reject) =>\n() =>\n  clear = () =>\nUtil.timeout = (msecs, promises, promiseClass = Promise) =>\nUtil.isServer = function()\nUtil.isMobile = function()\nUtil.uniquePred = (cmp = null) =>\n  (el, i, arr) =>\n  item =>\n  (el, i, arr) =>\nUtil.unique = (arr, cmp) =>\n  cmp = (a, b) =>\n(e, i, a) =>\nUtil.zip = a =>\n(a, b) =>\n(_, i) =>\n  arr =>\nUtil.histogram = (...args) =>\n  (k, v) =>\n  initVal = () =>\n  setVal = v =>\n(it, i) =>\n(item, i) =>\n  (entry, idx, key) =>\n([k, v]) =>\n(a, b) =>\nUtil.concat = function*(...args)\nUtil.distinct = function(arr)\n  (value, index, me) =>\nUtil.rangeMinMax = function(arr, field)\n  obj =>\nUtil.remap = (...args) =>\n  getR = () =>\n  r = val =>\nUtil.mergeLists = function(arr1, arr2, key = 'id')\nUtil.foreach = function(o, fn)\nUtil.all = function(obj, pred)\nUtil.isGenerator = function(fn)\nUtil.isIterator = obj =>\nUtil.isIterable = obj =>\n  x =>\nUtil.isConstructor = x =>\n  construct(target, args)\n  target\n  x\n  m =>\nUtil.filter = function(a, pred)\n()\n  fn = (k, v) =>\nUtil.reduce = (obj, fn, accu) =>\nUtil.mapFunctional = fn =>\n(arg)\nUtil.map = (...args) =>\n  ret = a =>\n()\n  ret = a =>\n()\nUtil.entriesToObj = function(arr)\n(acc, item) =>\nUtil.isDate = function(d)\nUtil.parseDate = function(d)\nUtil.isoDate = function(date)\nUtil.toUnixTime = function(dateObj, utc = false)\nUtil.unixTime = function(utc = false)\nUtil.fromUnixTime = function(epoch, utc = false)\nUtil.formatTime = function(date = \n(), format = 'HH:MM:SS')\nUtil.leapYear = function(year)\nUtil.timeSpan = function(s)\nUtil.randFloat = function(min, max, rnd = Util.rng)\nUtil.randInt = (...args) =>\nUtil.randStr = (len, charset, rnd = Util.rng) =>\nUtil.hex = function(num, numDigits)\nUtil.numberParts = (num, base) =>\nUtil.roundDigits = precision =>\nUtil.roundFunction = (prec, digits, type) =>\n  function(value)\nUtil.roundTo = function(value, prec, digits, type)\n() =>\n  utf8 =>\n  v =>\n  utf8 =>\n  base64 =>\n  v =>\n  string =>\nUtil.formatRecord = function(obj)\n  item =>\n  function(obj)\nUtil.isArrayLike = obj =>\nUtil.equals = function(a, b)\n(e, i) =>\nUtil.versionCompare = (a, b) =>\n  isdigit = c =>\nUtil.isGetter = (obj, propName) =>\nUtil.isBool = value =>\nUtil.size = (...args) =>\n  size(obj)\nUtil.isMap = function(obj)\nUtil.effectiveDeviceWidth = function()\nUtil.getFormFields = function(initialState)\n(acc, { elements }) =>\n(acc2, { name, value }) =>\nUtil.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))\nUtil.getUserAgent = function(headers = req.headers)\nUtil.factor = function(start, end)\nUtil.factorial = function(n)\nUtil.increment = function(obj, key)\nUtil.counter = function()\n  self = function()\nUtil.filterKeys = function(obj, pred = k => true)\n  pred = str =>\n  pred = str =>\nUtil.filterMembers = function(obj, fn)\n  pred = (k, v, o) =>\nUtil.filterOutMembers = function(obj, fn)\n  pred = (v, k, o) =>\nUtil.dumpMembers = obj =>\nUtil.filterOutKeys = function(obj, arr)\n  (v, k, o) =>\n  (k, v) =>\n  key =>\n  () =>\n  (v, k, o) =>\nUtil.removeKeys = function(obj, arr)\n  (v, k, o) =>\n  (k, v) =>\n  key =>\nUtil.getKeys = function(obj, arr)\nUtil.numbersConvert = function(str)\n(ch, i) =>\nUtil.entries = function(arg)\n()\nUtil.keys = function(arg)\n()\nUtil.values = function(arg)\n()\nUtil.removeEqual = function(a, b)\nUtil.clear = obj =>\nUtil.remove = (arr, item) =>\n  (other, i, arr) =>\nUtil.removeIf = function(arr, pred)\nUtil.traverse = function(o, fn)\n  (v, k, a) =>\n  walker(o, depth = 0)\nUtil.traverseWithPath = function(o, rootPath = [])\n  walker(o, path)\nUtil.indexByPath = function(o, p)\nUtil.pushUnique = (arr, ...args) =>\n(acc, item) =>\nUtil.insertSorted = function(arr, item, cmp = (a, b) => b - a)\n  next = (k, v) =>\n  (k, v) =>\n  (k, v) =>\n  (k, v) =>\n  fn = function(key, value)\nUtil.keyIterator = obj =>\nUtil.entryIterator = obj =>\n()\nUtil.mapAdapter = getSetFunction =>\n  get(key)\n  set(key, value)\n  .keys = () =>\n  .entries = () =>\nUtil.mapFunction = map =>\n  fn = function(...args)\n  m =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .update = function(key, fn = (k, v) => v)\n  .entries = function*()\n  .values = function*()\n  .keys = function*()\n  function()\n([key, value]) =>\n  .keys = () =>\n  .entries = () =>\n  .values = () =>\n  .keys = function*()\n  .entries = function*()\n  .values = function*()\n  .filter = function(pred)\n()\n  .map = function(t)\n()\n  .forEach = function(fn)\n  .delete = key =>\n  .has = key =>\nUtil.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .keys = () =>\n  .entries = function*()\n  .values = function*()\n  .has = key =>\n  .delete = key =>\n  m =>\nUtil.mapCombinator = (forward, backward) =>\n  fn = function(key, value)\n(a,m) =>\n  key =>\n  a =>\n  makeGetter(map, next = a => a)\n  key =>\nUtil.predicate = (fn_or_regex, pred) =>\n  fn = arg =>\n  .valueOf = function()\n  arg =>\nUtil.some = predicates =>\n  value =>\n  pred =>\nUtil.every = predicates =>\n  value =>\n  pred =>\nUtil.iterateMembers = function*(obj, predicate = (name, depth, obj, proto) => true, depth = 0)\n  (...predicates) =>\n  (...args) =>\n  pred =>\n  (...predicates) =>\n  (...args) =>\n  pred =>\n(pred, obj) =>\nUtil.memberNameFilter = (depth = 1, start = 0) =>\n  (m, l, o) =>\n  (m, l, o) =>\n  (name, depth, obj, proto) =>\nUtil.getMemberNames = (obj, ...args) =>\nUtil.getMemberEntries = (obj, ...args) =>\n  name =>\n  accFn = (a, m, o) =>\n  (obj, ...args) =>\n  (a, m) =>\n  (r, a, m) =>\n  (r, a) =>\n  incFn = (c, n, self) =>\n  incFn = (c, n, self) =>\n  inc = (i, n = 1) =>\n  self = function Count(n = 1)\n  .valueOf = function()\n  filterFn = (key, value) =>\n(acc, mem, idx) =>\n  r =>\n  () =>\n  fn = function ReduceIntoMap(arg, acc = mapObj)\n(acc, arg) =>\n  (a, m, o) =>\nUtil.methodNameFilter = (depth = 1, start = 0) =>\n  (m, l, o) =>\n  () =>\n  b =>\n  () =>\nUtil.getMethodNames = (obj, depth = 1, start = 0) =>\n  (a, m, o) =>\nUtil.inherit = (dst, src, depth = 1) =>\n  inherits(ctor, superCtor)\n  ctor\n  superCtor\n  inherits(ctor, superCtor)\nTempCtor = function()\nTempCtor\n  superCtor\n  ctor\n  ctor\nUtil.bindMethods = (obj, methods, dest) =>\nUtil.getConstructor = obj =>\nUtil.getPrototypeChain = function(obj, fn = p => p)\nUtil.getObjectChain = (obj, fn = p => p) =>\nUtil.getPropertyDescriptors = function(obj)\n  p =>\n  fn = (c, p) =>\n  (p, o) =>\nUtil.weakAssign = function(...args)\n  other =>\nUtil.exception = function Exception(...args)\n  toString(color = false)\nUtil.location = function Location(...args)\n  toString(color = false)\n  t =>\n  getFileName()\n  getLineNumber()\n  getColumnNumber()\nUtil.stackFrame = function StackFrame(frame)\n  prop =>\n  propertyMap()\n  method =>\n([method, func]) =>\n  getFunction()\n  getMethodName()\n  getFunctionName()\n  getTypeName()\n  getFileName()\n  getLineNumber()\n  getColumnNumber()\n  get()\n  toString(color, opts = {})\n  (t, color) =>\n  t =>\n  p =>\n  p =>\n(f, i) =>\n  getLocation()\n  get location()\nUtil.scriptName = () =>\n  () =>\n  args =>\n  () =>\nUtil.getFunctionName = () =>\nUtil.getFunctionArguments = fn =>\nUtil.scriptDir = () =>\n  () =>\n  script =>\n  () =>\nUtil.stack = function Stack(stack, offset)\n  frame =>\n([m, p]) =>\n  (acc, [method, property]) =>\n  getStack()\n  .prepareStackTrace = (_, stack) =>\n  stackToString(st, start = 0)\n()\n  frame =>\n  part =>\n  frame =>\n([func, file]) =>\n  n =>\n([func, file]) =>\n([func, [columnNumber, lineNumber, ...file]]) =>\n({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>\n  s =>\n  s =>\n  () =>\n  s =>\n  s =>\n  () =>\n  frame =>\n  frame =>\n  get: () =>\n  get: () =>\n*value()\n  toString(opts = {})\n  f =>\n  getFunctionName()\n  getMethodName()\n  getFileName()\n  getLineNumber()\n  get()\n(a, f) =>\n(fn, i) =>\nUtil.getCallerStack = function(position = 2, limit = 1000, stack)\n  .prepareStackTrace = (_, stack) =>\nUtil.getCallerFile = function(position = 2)\nUtil.getCallerFunction = function(position = 2)\nUtil.getCallerFunctionName = function(position = 2)\nUtil.getCallerFunctionNames = function(position = 2)\nUtil.getCaller = function(index = 1, stack)\n  f =>\nUtil.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)\n  f =>\nUtil.getStackFrames = function(offset = 2)\n  frame =>\nUtil.getStackFrame = function(offset = 2)\nUtil.rotateLeft = function(x, n)\nUtil.rotateRight = function(x, n)\nUtil.hashString = function(string, bits = 32, mask = 0xffffffff)\nUtil.flatTree = function(tree, addOutput)\n  addOutput = arg =>\n  key =>\nUtil.traverseTree = function(tree, fn, depth = 0, parent = null)\nUtil.walkTree = function(node, pred, t, depth = 0, parent = null)\n()\n  pred = i =>\n  t = function(i)\nUtil.isPromise = function(obj)\n  setImmediate = fn =>\nUtil.next = function(iter, observer, prev = undefined)\n  val =>\n() =>\n  err =>\n() =>\nUtil.getImageAverageColor = function(imageElement, options)\n  toStringRgb()\n  toStringRgba()\n  toStringHex()\n  toHex = function(d)\nUtil.jsonToObject = function(jsonStr)\nUtil.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)\nUtil.splitAt = function*(str, ...indexes)\n(a, b) =>\nUtil.decodeEscapes = function(text)\n  m =>\n([s, t]) =>\nUtil.stripXML = text =>\nUtil.stripHTML = html =>\n  p =>\n  p =>\nUtil.stripNonPrintable = text =>\nUtil.decodeHTMLEntities = function(text)\n  (match, entity) =>\nUtil.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>\n  i =>\nUtil.stripAnsi = function(str)\nUtil.proxy = (obj = {}, handler) =>\n  get(target, key, receiver)\n  set(target, key, value, receiver)\nUtil.propertyLookup = (obj = {}, handler = key => null) =>\n  get(target, key, receiver)\nUtil.traceProxy = (obj, handler) =>\n  function(name, args)\n  get(target, key, receiver)\n  member = function()\nUtil.proxyTree = function proxyTree(...callbacks)\n  applyCallback = () =>\n  get(target, key)\n  set(target, key, value)\n  apply(target, thisArg, args)\n  node(path)\n() =>\nUtil.construct = constructor =>\nF(args)\nF\n  constructor\nUtil.constructApply = (constructor, array) =>\nUtil.immutable = args =>\n  set: () =>\n  deleteProperty: () =>\n  defineProperty: () =>\nUtil.immutableClass = (orig, ...proto) =>\n  p =>\n  ctor =>\n  ctor\n  imm = base =>\n  constructor(...args)\nUtil.partial = function partial(fn /*, arg1, arg2 etc */)\n  function()\n(min, max, value) =>\nUtil.coloring = (useColor = true) =>\n  code(...args)\n  text(text)\n  concat(...args)\n  code(...args)\n  text(text, ...color)\n  concat(...args)\n  code(...args)\n  text(text, ...color)\n  concat(...args)\nUtil.colorText = (...args) =>\nUtil.decodeAnsi = (str, index) =>\n  isDigit = c =>\n  notDigit = c =>\n  findIndex = (pred, start) =>\nUtil.stripAnsi = str =>\nUtil.ansiCode = (...args) =>\nUtil.wordWrap = (str, width, delimiter) =>\nUtil.multiParagraphWordWrap = (str, width, delimiter) =>\nUtil.defineInspect = (proto, ...props) =>\n  function()\n(acc, key) =>\n(a, b, value) =>\nUtil.bindProperties = (proxy, target, props, gen) =>\n  name =>\n(acc, name) =>\n  gen = p => v =>\n  k =>\n  (a, [k, v]) =>\n  (...args) =>\n(...args) =>\n  (a, k) =>\n  get: () =>\n  get: () =>\n()\n  obj =>\n  on: val =>\n  off: val =>\n  true: val =>\n  false: val =>\nAssertionFailed\n  constructor(message, stack)\nUtil.assert = function assert(val, message)\nUtil.assertEqual = function assertEqual(val1, val2, message)\nUtil.assignGlobal = () =>\nUtil.weakMapper = function(createFn, map = \n(), hitFn)\n  self = function(obj, ...args)\n  .set = (k, v) =>\n  .get = k =>\nUtil.merge = function(...args)\n  a =>\n  a =>\n(acc, arg) =>\nUtil.transformer = (a, ...l) =>\n  (c, f) =>\n  function(...v)\nUtil.toPlainObject = obj =>\n  v =>\nUtil.toBuiltinObject = obj =>\n  v =>\n  t = (v, n) =>\n(acc, k) =>\nUtil.timer = msecs =>\n  remaining = () =>\n  finish = callback =>\n  log = (method, ...args) =>\n  obj =>\n  v =>\n  timeout = (msecs, tmr = timer) =>\n() =>\n  (...args) =>\n  () =>\n  add = (arr, ...items) =>\n  get delay()\n  get created()\n  get start()\n  get stop()\n  get elapsed()\n  get end()\n  get remain()\n  cancel()\n  pause()\n  .resume = function()\n  .restart = function()\n  callback(...args)\n  subscribe(f)\n  unsubscribe(f)\n  start = () =>\n(resolve, reject) =>\nUtil.thenableReject = error =>\n  then: (resolve, reject) =>\nUtil.wrapGenerator = fn =>\n  function(...args)\nUtil.wrapGeneratorMethods = obj =>\nUtil.decorateIterable = (proto, generators = false) =>\n  forEach(fn, thisArg)\n*map(fn, thisArg)\n*filter(pred, thisArg)\n  findIndex(pred, thisArg)\n  indexOf(item, startIndex = -1)\n(e, i) =>\n  find(pred, thisArg)\n  every(pred, thisArg)\n  some(pred, thisArg)\n  reduce(fn, accu)\n*entries()\n*keys()\n*values()\nUtil.swap = (a, b) =>\nUtil.swapArray = ([a, b]) =>\nUtil.cacheAdapter = (st, defaultOpts = {}) =>\n  () =>\n  c =>\n  () =>\n  getItem(request, opts = {})\n  setItem(request, response)\n  addItem(request)\n  removeItem(request, opts = {})\n  key(index)\n  keys(urls = false, t = a => a)\n  response =>\n  r =>\n  clear()\nUtil.cachedFetch = (allOpts = {}) =>\n() =>\n  self = function CachedFetch(request, opts = {})\n(returnValue, fn, ...args) =>\nUtil.proxyObject = (root, handler) =>\n  ptr = path =>\n(a, i) =>\n  (value, path) =>\n  get(target, key)\n  node(path)\nUtil.parseXML = function(xmlStr)\n  () =>\n  parser =>\n  fn = (value, ...args) =>\n  () =>\n  map =>\n(obj, ...args) =>\n  () =>\n  (obj, ...args) =>\n  self = (obj, ...args) =>\n() =>\n  () =>\n  a =>\n  () =>\n  () =>\n  fn =>\n  () =>\n  () =>\n  a =>\n() =>\n  () =>\n  a =>\n  () =>\n() =>\nUtil.getOpt = (options = {}, args) =>\n  findOpt = arg =>\n([optname, option]) =>\n  opt =>\n  () =>\n  v =>\n  () =>\n  () =>\n  v =>\nUtil.getEnv = varName =>\n  () =>\n  e =>\n  () =>\nUtil.getEnvVars = () =>\n  () =>\n  e =>\n  () =>\nUtil.safeFunction = (fn, trapExceptions, thisObj) =>\n  function(...args)\n  function(...args)\n  a =>\n  error =>\nUtil.safeCall = (fn, ...args) =>\nUtil.safeApply = (fn, args = []) =>\nUtil.exit = exitCode =>\n  stdExit = std =>\n  () =>\n  ([obj, exit]) =>\n  () =>\nUtil.atexit = handler =>\nUtil.callMain = (fn, trapExceptions) =>\n(...args) =>\n  ret =>\n() =>\n  err =>\n  () =>\n  argv1 =>\nUtil.printReturnValue = (fn, opts = {}) =>\n  print = (returnValue, fn, ...args) =>\n  self = (...args) =>\nUtil.replaceAll = (needles, haystack) =>\n([re, str]) =>\n(acc, [match, replacement]) =>\nUtil.quote = (str, q = '\"') =>\nUtil.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>\nUtil.escapeRegex = string =>\nUtil.consolePrinter = function ConsolePrinter(log = console.log)\n  self = function(...args)\n  .log = (...args) =>\nUtil.consoleJoin = function(...args)\nUtil.consoleConcat = function(...args)\n  self = function ConsoleConcat(...args)\n  clear()\n  log = (...args) =>\n  print()\n  i =>\n  output()\n  add(...args)\nUtil.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>\n  function(value)\n  set = () =>\n  function(...args)\nUtil.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>\n  () =>\n  v =>\n  handler = () =>\nExFunc\n  constructor()\n  __call__(...args)\nUtil.isatty = fd =>\n  mod =>\nUtil.ttyGetWinSize = (fd = 1) =>\n  m =>\n  (resolve, reject) =>\n  (resolve, reject) =>\n  (fd = 0, mode = true) =>\nUtil.stdio = (fd, mode = true) =>\nUtil.signal = (num, act) =>\n  m =>\n() =>\nUtil.timeit = (fn, args = [], options = {}) =>\n(p, c) =>\nUtil.lazyProperty = (obj, name, getter, opts = {}) =>\n  replaceProperty = value =>\n  function()\n  function()\n  v =>\nUtil.lazyProperties = (obj, gettersObj, opts = {}) =>\n  f = (a, b) =>\n  function(a, b)\n(a, b) =>\n(a, b) =>\n() =>\nHighResolutionTime\n  constructor(secs = 0, nano = 0)\n  static create(s, n)\n  get seconds()\n  get milliseconds()\n  get nanoseconds()\n  diff(o)\n  sum(o)\n  since(o)\n  toString()\n  inspect()\n  hrtime(previousTimestamp)\n  hrtime(previousTimestamp)\n  () =>\n  (minDelay = 0) =>\n  resolve =>\n  resolve =>\n  animationFrame(t)\nUtil.getNow = () =>\n  performanceNow = () =>\n  performanceNow = function(clock = CLOCK_MONOTONIC_RAW)\nUtil.formatColumns = a =>\n(acc, row, i) =>\n(col, j) =>\n  row =>\n(col, j) =>\nUtil.getPlatform = () =>\n  () =>\n  () =>\n  () =>\n  () =>\n  () =>\n  () =>\n  () =>\n() =>\nUtil.colIndexes = line =>\n([prev, cols], char, i) =>\nUtil.colSplit = (line, indexes) =>\n  map = (name, flag) =>\n(value)\n  log = (duration, name, args, ret) =>\n(args, ret) =>\n  (args, ret) =>\n  function(...args)\n  function(...args)\n  both = () =>\n(name, args) =>\n  arg =>\n(name, ret) =>\n  function(...args)\nUtil.bind = function(f, ...args)\n  ret = function()\n  ret = function()\n  ret\n  f\nUtil.bytesToUTF8 = function*(bytes)\nUtil.codePointsToString = codePoints =>\nUtil.bufferToString = b =>\nUtil.levenshteinDistance = function levenshteinDistance(a, b)\nUtil.padTrunc = (...args) =>\n  (s, pad = ' ') =>\nUtil.setReadHandler = (fd, handler) =>",
			"settings":
			{
				"buffer_size": 26606,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					23,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
							[
								771,
								788
							],
							[
								1023,
								1072
							],
							[
								1959,
								1963
							],
							[
								2779,
								2786
							],
							[
								3308,
								3322
							],
							[
								3582,
								3588
							],
							[
								3691,
								3718
							],
							[
								3766,
								3797
							],
							[
								3953,
								3963
							],
							[
								4002,
								4026
							],
							[
								4093,
								4109
							],
							[
								4154,
								4171
							],
							[
								4219,
								4239
							],
							[
								4290,
								4313
							],
							[
								4361,
								4387
							],
							[
								4788,
								4793
							],
							[
								4852,
								4876
							],
							[
								4899,
								4915
							],
							[
								4930,
								4941
							],
							[
								4981,
								4997
							],
							[
								5012,
								5024
							],
							[
								5065,
								5081
							],
							[
								5096,
								5111
							],
							[
								5155,
								5171
							],
							[
								5186,
								5204
							],
							[
								5251,
								5267
							],
							[
								5282,
								5303
							],
							[
								5353,
								5369
							],
							[
								5384,
								5408
							],
							[
								5534,
								5557
							],
							[
								5640,
								5660
							],
							[
								5915,
								5927
							],
							[
								5977,
								5989
							],
							[
								6109,
								6132
							],
							[
								6215,
								6242
							],
							[
								6497,
								6518
							],
							[
								6581,
								6602
							],
							[
								6738,
								6762
							],
							[
								6848,
								6855
							],
							[
								6876,
								6883
							],
							[
								6913,
								6935
							],
							[
								7018,
								7025
							],
							[
								7043,
								7050
							],
							[
								7075,
								7097
							],
							[
								7147,
								7154
							],
							[
								7208,
								7215
							],
							[
								7247,
								7276
							],
							[
								7622,
								7647
							],
							[
								7774,
								7793
							],
							[
								7875,
								7894
							],
							[
								8081,
								8100
							],
							[
								8178,
								8197
							],
							[
								8262,
								8281
							],
							[
								8377,
								8417
							],
							[
								8559,
								8572
							],
							[
								8598,
								8631
							],
							[
								8880,
								8894
							],
							[
								9055,
								9062
							],
							[
								9279,
								9285
							],
							[
								9691,
								9715
							],
							[
								10094,
								10130
							],
							[
								10172,
								10190
							],
							[
								10373,
								10410
							],
							[
								10491,
								10509
							],
							[
								10527,
								10538
							],
							[
								10604,
								10638
							],
							[
								10665,
								10683
							],
							[
								10958,
								11003
							],
							[
								11203,
								11221
							],
							[
								11472,
								11498
							],
							[
								11757,
								11776
							],
							[
								11855,
								11874
							],
							[
								12024,
								12072
							],
							[
								12253,
								12268
							],
							[
								12294,
								12304
							],
							[
								12391,
								12396
							],
							[
								13163,
								13169
							],
							[
								13245,
								13250
							],
							[
								13259,
								13264
							],
							[
								13293,
								13302
							],
							[
								13326,
								13336
							],
							[
								13358,
								13371
							],
							[
								13399,
								13413
							],
							[
								13439,
								13456
							],
							[
								13484,
								13502
							],
							[
								13603,
								13608
							],
							[
								13816,
								13839
							],
							[
								14290,
								14294
							],
							[
								14336,
								14340
							],
							[
								14447,
								14459
							],
							[
								15048,
								15058
							],
							[
								15146,
								15174
							],
							[
								15208,
								15214
							],
							[
								15276,
								15300
							],
							[
								15330,
								15371
							],
							[
								15647,
								15659
							],
							[
								15692,
								15724
							],
							[
								15766,
								15806
							],
							[
								15960,
								15980
							],
							[
								17266,
								17296
							],
							[
								17356,
								17393
							],
							[
								17578,
								17584
							],
							[
								17799,
								17829
							],
							[
								17909,
								17941
							],
							[
								18169,
								18199
							],
							[
								18336,
								18339
							],
							[
								18476,
								18510
							],
							[
								18667,
								18699
							],
							[
								18989,
								19017
							],
							[
								19095,
								19124
							],
							[
								19199,
								19236
							],
							[
								19286,
								19321
							],
							[
								19502,
								19537
							],
							[
								19837,
								19860
							],
							[
								19891,
								19915
							],
							[
								19979,
								20006
							],
							[
								20039,
								20079
							],
							[
								20197,
								20240
							],
							[
								20543,
								20572
							],
							[
								20629,
								20643
							],
							[
								20692,
								20721
							],
							[
								20763,
								20790
							],
							[
								20900,
								20907
							],
							[
								20927,
								20955
							],
							[
								21045,
								21072
							],
							[
								21111,
								21138
							],
							[
								21188,
								21212
							],
							[
								21287,
								21322
							],
							[
								21424,
								21456
							],
							[
								21541,
								21575
							],
							[
								21660,
								21690
							],
							[
								21910,
								21920
							],
							[
								21973,
								21977
							],
							[
								22045,
								22082
							],
							[
								22119,
								22136
							],
							[
								22159,
								22176
							],
							[
								22236,
								22253
							],
							[
								22339,
								22348
							],
							[
								22420,
								22434
							],
							[
								22502,
								22507
							],
							[
								23205,
								23243
							],
							[
								23394,
								23429
							],
							[
								23513,
								23531
							],
							[
								23589,
								23633
							],
							[
								23647,
								23656
							],
							[
								23688,
								23716
							],
							[
								23730,
								23739
							],
							[
								23808,
								23851
							],
							[
								23971,
								24004
							],
							[
								24031,
								24038
							],
							[
								24167,
								24172
							],
							[
								24188,
								24222
							],
							[
								24299,
								24325
							],
							[
								24423,
								24457
							],
							[
								24480,
								24494
							],
							[
								24529,
								24579
							],
							[
								24717,
								24763
							],
							[
								24824,
								24886
							],
							[
								24897,
								24913
							],
							[
								25048,
								25085
							],
							[
								25124,
								25181
							],
							[
								25552,
								25586
							],
							[
								25726,
								25765
							],
							[
								25845,
								25882
							],
							[
								25999,
								26030
							],
							[
								26785,
								26828
							],
							[
								26959,
								26964
							],
							[
								27120,
								27154
							],
							[
								27362,
								27398
							],
							[
								27460,
								27486
							],
							[
								28246,
								28271
							],
							[
								28339,
								28367
							],
							[
								28960,
								28979
							],
							[
								29074,
								29089
							],
							[
								29217,
								29242
							],
							[
								29542,
								29599
							],
							[
								29722,
								29787
							],
							[
								29897,
								29949
							],
							[
								30070,
								30120
							],
							[
								30236,
								30251
							],
							[
								30322,
								30333
							],
							[
								30421,
								30432
							],
							[
								30458,
								30473
							],
							[
								30551,
								30565
							],
							[
								30605,
								30624
							],
							[
								30847,
								30936
							],
							[
								30939,
								31036
							],
							[
								31092,
								31104
							],
							[
								31169,
								31183
							],
							[
								31215,
								31221
							],
							[
								31264,
								31272
							],
							[
								31318,
								31326
							],
							[
								31382,
								31397
							],
							[
								31450,
								31457
							],
							[
								31568,
								31578
							],
							[
								31720,
								31730
							],
							[
								31793,
								31800
							],
							[
								31885,
								31912
							],
							[
								31936,
								31945
							],
							[
								31971,
								31979
							],
							[
								31996,
								32005
							],
							[
								32044,
								32052
							],
							[
								32063,
								32076
							],
							[
								32087,
								32102
							],
							[
								32131,
								32149
							],
							[
								32229,
								32253
							],
							[
								32674,
								32708
							],
							[
								32739,
								32750
							],
							[
								32755,
								32765
							],
							[
								32779,
								32790
							],
							[
								32811,
								32847
							],
							[
								33351,
								33381
							],
							[
								33425,
								33456
							],
							[
								33691,
								33713
							],
							[
								33773,
								33799
							],
							[
								33915,
								33926
							],
							[
								34038,
								34069
							],
							[
								34273,
								34298
							],
							[
								34365,
								34417
							],
							[
								34529,
								34551
							],
							[
								34557,
								34578
							],
							[
								34595,
								34627
							],
							[
								34747,
								34782
							],
							[
								34847,
								34880
							],
							[
								34927,
								34939
							],
							[
								35009,
								35021
							],
							[
								35078,
								35109
							],
							[
								35153,
								35195
							],
							[
								35371,
								35399
							],
							[
								35510,
								35540
							],
							[
								35552,
								35569
							],
							[
								35693,
								35729
							],
							[
								35806,
								35832
							],
							[
								35874,
								35913
							],
							[
								36025,
								36029
							],
							[
								36056,
								36060
							],
							[
								36099,
								36103
							],
							[
								36131,
								36135
							],
							[
								36158,
								36194
							],
							[
								36232,
								36264
							],
							[
								36382,
								36423
							],
							[
								36516,
								36540
							],
							[
								36563,
								36574
							],
							[
								36592,
								36609
							],
							[
								36695,
								36719
							],
							[
								36742,
								36768
							],
							[
								37224,
								37256
							],
							[
								37510,
								37519
							],
							[
								37550,
								37559
							],
							[
								37590,
								37599
							],
							[
								37630,
								37639
							],
							[
								37670,
								37679
							],
							[
								37709,
								37718
							],
							[
								37749,
								37758
							],
							[
								37767,
								37787
							],
							[
								37831,
								37836
							],
							[
								37879,
								37888
							],
							[
								38056,
								38089
							],
							[
								38463,
								38489
							],
							[
								38715,
								38758
							],
							[
								38800,
								38812
							],
							[
								38890,
								38935
							],
							[
								39056,
								39076
							],
							[
								39197,
								39204
							],
							[
								39223,
								39230
							],
							[
								39410,
								39439
							],
							[
								39568,
								39613
							],
							[
								39741,
								39773
							],
							[
								39852,
								39873
							],
							[
								40124,
								40142
							],
							[
								40329,
								40342
							],
							[
								40464,
								40512
							],
							[
								40525,
								40534
							],
							[
								40572,
								40582
							],
							[
								40629,
								40663
							],
							[
								40940,
								40982
							],
							[
								41036,
								41074
							],
							[
								41236,
								41255
							],
							[
								41455,
								41494
							],
							[
								41628,
								41645
							],
							[
								42185,
								42205
							],
							[
								42293,
								42312
							],
							[
								42353,
								42372
							],
							[
								44225,
								44232
							],
							[
								44247,
								44254
							],
							[
								45871,
								45904
							],
							[
								46052,
								46061
							],
							[
								46081,
								46089
							],
							[
								46093,
								46102
							],
							[
								46243,
								46271
							],
							[
								46385,
								46413
							],
							[
								46527,
								46545
							],
							[
								46924,
								46959
							],
							[
								46999,
								47026
							],
							[
								47107,
								47155
							],
							[
								47366,
								47453
							],
							[
								47464,
								47480
							],
							[
								47589,
								47629
							],
							[
								47655,
								47659
							],
							[
								47676,
								47681
							],
							[
								47700,
								47705
							],
							[
								47723,
								47760
							],
							[
								47786,
								47790
							],
							[
								47796,
								47802
							],
							[
								47817,
								47823
							],
							[
								47831,
								47837
							],
							[
								47853,
								47890
							],
							[
								47916,
								47920
							],
							[
								47934,
								47940
							],
							[
								47948,
								47954
							],
							[
								47961,
								47967
							],
							[
								47984,
								48037
							],
							[
								48038,
								48055
							],
							[
								48160,
								48179
							],
							[
								48226,
								48264
							],
							[
								48289,
								48302
							],
							[
								48897,
								48941
							],
							[
								49013,
								49031
							],
							[
								49285,
								49303
							],
							[
								49630,
								49657
							],
							[
								49666,
								49681
							],
							[
								49757,
								49784
							],
							[
								49911,
								49915
							],
							[
								49993,
								50006
							],
							[
								50203,
								50232
							],
							[
								50340,
								50366
							],
							[
								50434,
								50461
							],
							[
								50733,
								50754
							],
							[
								50824,
								50849
							],
							[
								50869,
								50891
							],
							[
								50955,
								50980
							],
							[
								51105,
								51129
							],
							[
								51353,
								51369
							],
							[
								51370,
								51389
							],
							[
								51422,
								51442
							],
							[
								51531,
								51559
							],
							[
								51657,
								51682
							],
							[
								51732,
								51759
							],
							[
								51762,
								51781
							],
							[
								52086,
								52116
							],
							[
								52159,
								52174
							],
							[
								52242,
								52265
							],
							[
								52304,
								52308
							],
							[
								52348,
								52352
							],
							[
								52390,
								52414
							],
							[
								52481,
								52517
							],
							[
								52582,
								52589
							],
							[
								52627,
								52666
							],
							[
								52806,
								52839
							],
							[
								53031,
								53042
							],
							[
								53139,
								53170
							],
							[
								53229,
								53285
							],
							[
								53649,
								53690
							],
							[
								54056,
								54096
							],
							[
								54324,
								54372
							],
							[
								54404,
								54413
							],
							[
								54696,
								54735
							],
							[
								54746,
								54755
							],
							[
								54794,
								54805
							],
							[
								55210,
								55251
							],
							[
								55297,
								55330
							],
							[
								55407,
								55442
							],
							[
								55542,
								55585
							],
							[
								55765,
								55801
							],
							[
								56118,
								56157
							],
							[
								56293,
								56341
							],
							[
								56509,
								56523
							],
							[
								56695,
								56702
							],
							[
								56818,
								56825
							],
							[
								57160,
								57184
							],
							[
								57214,
								57231
							],
							[
								57288,
								57310
							],
							[
								57339,
								57356
							],
							[
								57462,
								57493
							],
							[
								57567,
								57587
							],
							[
								57721,
								57755
							],
							[
								57785,
								57794
							],
							[
								57814,
								57822
							],
							[
								57826,
								57835
							],
							[
								57928,
								57962
							],
							[
								58263,
								58296
							],
							[
								58658,
								58692
							],
							[
								59062,
								59096
							],
							[
								59379,
								59423
							],
							[
								60048,
								60087
							],
							[
								60215,
								60297
							],
							[
								61423,
								61436
							],
							[
								61454,
								61463
							],
							[
								61481,
								61490
							],
							[
								61541,
								61552
							],
							[
								61576,
								61588
							],
							[
								61595,
								61606
							],
							[
								61643,
								61648
							],
							[
								61751,
								61756
							],
							[
								61901,
								61906
							],
							[
								61939,
								61944
							],
							[
								61979,
								61984
							],
							[
								62179,
								62184
							],
							[
								62388,
								62421
							],
							[
								62434,
								62435
							],
							[
								62844,
								62877
							],
							[
								63041,
								63078
							],
							[
								63086,
								63087
							],
							[
								63563,
								63570
							],
							[
								63709,
								63720
							],
							[
								63806,
								63817
							],
							[
								64104,
								64118
							],
							[
								64661,
								64693
							],
							[
								65203,
								65241
							],
							[
								65540,
								65563
							],
							[
								65576,
								65596
							],
							[
								65659,
								65673
							],
							[
								65677,
								65691
							],
							[
								65768,
								65783
							],
							[
								65857,
								65871
							],
							[
								65914,
								65937
							],
							[
								66129,
								66147
							],
							[
								66353,
								66367
							],
							[
								66371,
								66385
							],
							[
								66556,
								66578
							],
							[
								67122,
								67127
							],
							[
								67169,
								67175
							],
							[
								67218,
								67225
							],
							[
								67254,
								67293
							],
							[
								67322,
								67332
							],
							[
								67338,
								67347
							],
							[
								67365,
								67392
							],
							[
								67432,
								67441
							],
							[
								67450,
								67458
							],
							[
								67506,
								67515
							],
							[
								67541,
								67550
							],
							[
								67561,
								67569
							],
							[
								67641,
								67650
							],
							[
								67741,
								67785
							],
							[
								67847,
								67908
							],
							[
								68216,
								68242
							],
							[
								68270,
								68275
							],
							[
								68299,
								68312
							],
							[
								68420,
								68485
							],
							[
								68589,
								68615
							],
							[
								68649,
								68675
							],
							[
								68696,
								68729
							],
							[
								68757,
								68773
							],
							[
								68788,
								68795
							],
							[
								68817,
								68833
							],
							[
								68858,
								68885
							],
							[
								68942,
								68957
							],
							[
								68979,
								68991
							],
							[
								69008,
								69023
							],
							[
								69033,
								69042
							],
							[
								69082,
								69091
							],
							[
								69098,
								69104
							],
							[
								69116,
								69145
							],
							[
								69231,
								69241
							],
							[
								69282,
								69297
							],
							[
								69316,
								69329
							],
							[
								69754,
								69764
							],
							[
								69903,
								69915
							],
							[
								70195,
								70216
							],
							[
								70402,
								70413
							],
							[
								70450,
								70459
							],
							[
								70539,
								70572
							],
							[
								70877,
								70906
							],
							[
								70950,
								70972
							],
							[
								71006,
								71045
							],
							[
								71079,
								71085
							],
							[
								71158,
								71183
							],
							[
								71194,
								71206
							],
							[
								71398,
								71408
							],
							[
								71460,
								71510
							],
							[
								71918,
								71948
							],
							[
								72034,
								72064
							],
							[
								72137,
								72168
							],
							[
								72322,
								72346
							],
							[
								72401,
								72425
							],
							[
								72552,
								72556
							],
							[
								72636,
								72661
							],
							[
								72749,
								72772
							],
							[
								72804,
								72810
							],
							[
								72953,
								72954
							],
							[
								73045,
								73049
							],
							[
								73183,
								73214
							],
							[
								73465,
								73477
							],
							[
								73593,
								73607
							],
							[
								73753,
								73785
							],
							[
								73989,
								74015
							],
							[
								74016,
								74033
							],
							[
								74082,
								74105
							],
							[
								74138,
								74148
							],
							[
								74197,
								74209
							],
							[
								74524,
								74534
							],
							[
								74726,
								74738
							],
							[
								75413,
								75446
							],
							[
								75474,
								75488
							],
							[
								75582,
								75607
							],
							[
								75756,
								75784
							],
							[
								75918,
								75947
							],
							[
								76247,
								76295
							],
							[
								76484,
								76521
							],
							[
								76570,
								76618
							],
							[
								76732,
								76766
							],
							[
								76774,
								76798
							],
							[
								77312,
								77342
							],
							[
								77468,
								77495
							],
							[
								77972,
								78023
							],
							[
								78065,
								78092
							],
							[
								78262,
								78310
							],
							[
								78522,
								78557
							],
							[
								78764,
								78797
							],
							[
								79069,
								79100
							],
							[
								79346,
								79390
							],
							[
								79526,
								79542
							],
							[
								79702,
								79752
							],
							[
								80146,
								80151
							],
							[
								80232,
								80245
							],
							[
								80294,
								80304
							],
							[
								80308,
								80321
							],
							[
								80396,
								80411
							],
							[
								80460,
								80470
							],
							[
								80474,
								80489
							],
							[
								80556,
								80589
							],
							[
								80699,
								80706
							],
							[
								80990,
								81005
							],
							[
								81262,
								81287
							],
							[
								81348,
								81376
							],
							[
								81465,
								81474
							],
							[
								82441,
								82472
							],
							[
								82644,
								82658
							],
							[
								83281,
								83315
							],
							[
								83500,
								83522
							],
							[
								83558,
								83582
							],
							[
								83585,
								83605
							],
							[
								83849,
								83875
							],
							[
								83970,
								84008
							],
							[
								84410,
								84453
							],
							[
								84525,
								84547
							],
							[
								84569,
								84595
							],
							[
								84720,
								84828
							],
							[
								85066,
								85117
							],
							[
								85195,
								85229
							],
							[
								85317,
								85345
							],
							[
								85379,
								85414
							],
							[
								85488,
								85513
							],
							[
								85535,
								85552
							],
							[
								85594,
								85643
							],
							[
								85716,
								85729
							],
							[
								85800,
								85813
							],
							[
								85989,
								86027
							],
							[
								86038,
								86057
							],
							[
								86111,
								86152
							],
							[
								86163,
								86182
							],
							[
								86240,
								86265
							],
							[
								86312,
								86351
							],
							[
								86436,
								86449
							],
							[
								86488,
								86498
							],
							[
								86552,
								86559
							],
							[
								86584,
								86590
							],
							[
								86632,
								86645
							],
							[
								86665,
								86701
							],
							[
								86786,
								86799
							],
							[
								86838,
								86848
							],
							[
								86881,
								86888
							],
							[
								86994,
								87027
							],
							[
								87107,
								87142
							],
							[
								87182,
								87192
							],
							[
								87307,
								87335
							],
							[
								87497,
								87509
							],
							[
								87614,
								87639
							],
							[
								87754,
								87767
							],
							[
								87866,
								87893
							],
							[
								88012,
								88025
							],
							[
								88128,
								88161
							],
							[
								88384,
								88403
							],
							[
								88482,
								88510
							],
							[
								88529,
								88548
							],
							[
								88566,
								88601
							],
							[
								88944,
								88975
							],
							[
								89034,
								89047
							],
							[
								89131,
								89163
							],
							[
								89344,
								89394
							],
							[
								89437,
								89464
							],
							[
								89666,
								89699
							],
							[
								89750,
								89785
							],
							[
								89798,
								89812
							],
							[
								89879,
								89941
							],
							[
								90140,
								90156
							],
							[
								90383,
								90393
							],
							[
								90431,
								90441
							],
							[
								90461,
								90471
							],
							[
								90499,
								90524
							],
							[
								90650,
								90675
							],
							[
								90949,
								90976
							],
							[
								91208,
								91220
							],
							[
								92873,
								92908
							],
							[
								92927,
								92935
							],
							[
								92983,
								92998
							],
							[
								93146,
								93159
							],
							[
								93352,
								93368
							],
							[
								93575,
								93600
							],
							[
								93615,
								93637
							],
							[
								93853,
								93857
							],
							[
								94071,
								94093
							],
							[
								94115,
								94125
							],
							[
								94143,
								94156
							],
							[
								94303,
								94325
							],
							[
								94347,
								94357
							],
							[
								94375,
								94388
							],
							[
								94517,
								94539
							],
							[
								94565,
								94575
							],
							[
								94593,
								94606
							],
							[
								94642,
								94664
							],
							[
								94685,
								94695
							],
							[
								94713,
								94726
							],
							[
								94746,
								94787
							],
							[
								95094,
								95117
							],
							[
								95198,
								95220
							],
							[
								95294,
								95314
							],
							[
								95441,
								95452
							],
							[
								95485,
								95502
							],
							[
								95678,
								95697
							],
							[
								95732,
								95754
							],
							[
								95886,
								95907
							],
							[
								96045,
								96065
							],
							[
								96132,
								96155
							],
							[
								96231,
								96253
							],
							[
								96371,
								96395
							],
							[
								96457,
								96469
							],
							[
								96640,
								96658
							],
							[
								96720,
								96732
							],
							[
								96884,
								96907
							],
							[
								97048,
								97064
							],
							[
								97120,
								97133
							],
							[
								97165,
								97233
							],
							[
								97274,
								97296
							],
							[
								97325,
								97335
							],
							[
								97351,
								97364
							],
							[
								97424,
								97437
							],
							[
								97513,
								97536
							],
							[
								97664,
								97686
							],
							[
								97783,
								97796
							],
							[
								97858,
								97874
							],
							[
								97912,
								97916
							],
							[
								98175,
								98218
							],
							[
								98233,
								98258
							],
							[
								98401,
								98409
							],
							[
								98423,
								98430
							],
							[
								98439,
								98444
							],
							[
								98462,
								98503
							],
							[
								98516,
								98523
							],
							[
								98600,
								98639
							],
							[
								98796,
								98807
							],
							[
								98842,
								98863
							],
							[
								98941,
								98948
							],
							[
								98980,
								99005
							],
							[
								99063,
								99072
							],
							[
								99089,
								99096
							],
							[
								99114,
								99140
							],
							[
								99198,
								99207
							],
							[
								99225,
								99232
							],
							[
								99251,
								99346
							],
							[
								99978,
								99998
							],
							[
								99999,
								100013
							],
							[
								100035,
								100042
							],
							[
								100069,
								100089
							],
							[
								100090,
								100104
							],
							[
								100125,
								100132
							],
							[
								100176,
								100190
							],
							[
								100262,
								100311
							],
							[
								100324,
								100340
							],
							[
								100374,
								100390
							],
							[
								100482,
								100514
							],
							[
								100545,
								100584
							],
							[
								100965,
								101006
							],
							[
								101045,
								101052
							],
							[
								101108,
								101128
							],
							[
								101166,
								101185
							],
							[
								101259,
								101276
							],
							[
								101295,
								101315
							],
							[
								101319,
								101336
							],
							[
								101386,
								101409
							],
							[
								101510,
								101533
							],
							[
								101577,
								101596
							],
							[
								101639,
								101667
							],
							[
								101763,
								101784
							],
							[
								101860,
								101886
							],
							[
								101999,
								102017
							],
							[
								102071,
								102076
							],
							[
								102079,
								102085
							],
							[
								102098,
								102144
							],
							[
								102227,
								102240
							],
							[
								102618,
								102631
							],
							[
								102694,
								102743
							],
							[
								102756,
								102772
							],
							[
								102794,
								102807
							],
							[
								102835,
								102847
							],
							[
								102851,
								102864
							],
							[
								102926,
								102978
							],
							[
								103167,
								103180
							],
							[
								103243,
								103282
							],
							[
								103426,
								103461
							],
							[
								103533,
								103537
							],
							[
								103564,
								103573
							],
							[
								103824,
								103859
							],
							[
								103935,
								103956
							],
							[
								103971,
								103979
							],
							[
								103992,
								104001
							],
							[
								104023,
								104027
							],
							[
								104066,
								104070
							],
							[
								104217,
								104259
							],
							[
								104591,
								104619
							],
							[
								104679,
								104730
							],
							[
								104981,
								105024
							],
							[
								105077,
								105120
							],
							[
								105156,
								105161
							],
							[
								105238,
								105252
							],
							[
								105287,
								105297
							],
							[
								105310,
								105345
							],
							[
								105389,
								105397
							],
							[
								105944,
								105988
							],
							[
								106523,
								106546
							],
							[
								106954,
								106996
							],
							[
								107802,
								107825
							],
							[
								108197,
								108202
							],
							[
								108756,
								108769
							],
							[
								108805,
								108820
							],
							[
								108858,
								108875
							],
							[
								108917,
								108961
							],
							[
								109160,
								109167
							],
							[
								109810,
								109823
							],
							[
								109858,
								109867
							],
							[
								109924,
								109943
							],
							[
								110049,
								110062
							],
							[
								110237,
								110252
							],
							[
								110296,
								110313
							],
							[
								110359,
								110372
							],
							[
								110414,
								110427
							],
							[
								110469,
								110484
							],
							[
								110528,
								110545
							],
							[
								110673,
								110678
							],
							[
								110827,
								110853
							],
							[
								111030,
								111044
							],
							[
								111067,
								111072
							],
							[
								111706,
								111710
							],
							[
								111768,
								111772
							],
							[
								112015,
								112024
							],
							[
								112149,
								112162
							],
							[
								112236,
								112250
							],
							[
								112501,
								112524
							],
							[
								112542,
								112551
							],
							[
								112568,
								112579
							],
							[
								112589,
								112598
							],
							[
								112618,
								112646
							],
							[
								112754,
								112787
							],
							[
								112954,
								112976
							],
							[
								112994,
								113003
							],
							[
								113023,
								113036
							],
							[
								113094,
								113103
							],
							[
								113123,
								113165
							],
							[
								113638,
								113646
							],
							[
								113681,
								113692
							],
							[
								113769,
								113807
							],
							[
								114158,
								114179
							],
							[
								114264,
								114298
							],
							[
								114451,
								114490
							],
							[
								114545,
								114557
							],
							[
								115016,
								115024
							],
							[
								115156,
								115163
							],
							[
								115222,
								115230
							],
							[
								115343,
								115360
							],
							[
								115439,
								115443
							],
							[
								115497,
								115514
							],
							[
								115626,
								115674
							],
							[
								115960,
								116055
							],
							[
								116190,
								116202
							],
							[
								116212,
								116224
							],
							[
								116229,
								116242
							],
							[
								116348,
								116360
							],
							[
								116370,
								116382
							],
							[
								116387,
								116400
							],
							[
								116508,
								116516
							],
							[
								116727,
								116735
							],
							[
								117110,
								117120
							],
							[
								117200,
								117210
							],
							[
								117291,
								117299
							],
							[
								117430,
								117449
							],
							[
								117998,
								118002
							],
							[
								118071,
								118088
							],
							[
								118128,
								118143
							],
							[
								118181,
								118194
							],
							[
								118230,
								118245
							],
							[
								118355,
								118360
							],
							[
								118430,
								118439
							],
							[
								118460,
								118470
							],
							[
								118577,
								118642
							],
							[
								118993,
								119027
							],
							[
								119111,
								119154
							],
							[
								119370,
								119417
							],
							[
								119608,
								119659
							],
							[
								119879,
								119931
							],
							[
								120279,
								120322
							],
							[
								120638,
								120642
							],
							[
								120757,
								120832
							],
							[
								121150,
								121154
							],
							[
								121387,
								121429
							],
							[
								121493,
								121501
							],
							[
								121662,
								121703
							],
							[
								121750,
								121782
							],
							[
								121863,
								121896
							],
							[
								121955,
								122019
							],
							[
								122259,
								122300
							],
							[
								122338,
								122356
							],
							[
								122405,
								122412
							],
							[
								122606,
								122670
							],
							[
								122846,
								122911
							],
							[
								122924,
								122936
							],
							[
								122953,
								122964
							],
							[
								122988,
								123003
							],
							[
								123386,
								123416
							],
							[
								123593,
								123613
							],
							[
								123633,
								123687
							],
							[
								123910,
								123916
							],
							[
								123968,
								123973
							],
							[
								124029,
								124035
							],
							[
								124112,
								124117
							],
							[
								124160,
								124219
							],
							[
								126268,
								126281
							],
							[
								126429,
								126443
							],
							[
								126603,
								126616
							],
							[
								126698,
								126717
							],
							[
								126960,
								126997
							],
							[
								127345,
								127415
							],
							[
								127771,
								127813
							],
							[
								127864,
								127873
							],
							[
								128039,
								128074
							],
							[
								128201,
								128205
							],
							[
								128227,
								128238
							],
							[
								128348,
								128371
							],
							[
								128515,
								128539
							],
							[
								128640,
								128644
							],
							[
								128667,
								128671
							],
							[
								128683,
								128715
							],
							[
								128763,
								128803
							],
							[
								129032,
								129051
							],
							[
								129083,
								129147
							],
							[
								129199,
								129204
							],
							[
								129237,
								129267
							],
							[
								129354,
								129389
							],
							[
								129413,
								129439
							],
							[
								129553,
								129586
							],
							[
								129725,
								129783
							],
							[
								129808,
								129834
							],
							[
								129877,
								129912
							],
							[
								129955,
								129976
							],
							[
								130125,
								130151
							],
							[
								130309,
								130328
							],
							[
								130650,
								130699
							],
							[
								130724,
								130745
							],
							[
								130787,
								130803
							],
							[
								130857,
								130880
							],
							[
								130943,
								130971
							],
							[
								131033,
								131054
							],
							[
								131078,
								131083
							],
							[
								131656,
								131687
							],
							[
								131690,
								131708
							],
							[
								131760,
								131761
							],
							[
								131774,
								131785
							],
							[
								132340,
								132385
							],
							[
								132487,
								132511
							],
							[
								132773,
								132783
							],
							[
								132831,
								132852
							],
							[
								132900,
								132921
							],
							[
								133008,
								133049
							],
							[
								133197,
								133201
							],
							[
								133247,
								133255
							],
							[
								133284,
								133288
							],
							[
								133663,
								133676
							],
							[
								133729,
								133749
							],
							[
								134075,
								134132
							],
							[
								134239,
								134250
							],
							[
								134590,
								134610
							],
							[
								134650,
								134686
							],
							[
								134715,
								134728
							],
							[
								134771,
								134781
							],
							[
								134826,
								134841
							],
							[
								135644,
								135657
							],
							[
								136228,
								136248
							],
							[
								136323,
								136338
							],
							[
								136715,
								136728
							],
							[
								136799,
								136819
							],
							[
								136901,
								136916
							],
							[
								136982,
								137011
							],
							[
								137085,
								137118
							],
							[
								137230,
								137244
							],
							[
								137284,
								137299
							],
							[
								137321,
								137349
							],
							[
								137878,
								137901
							],
							[
								138108,
								138136
							],
							[
								138243,
								138285
							],
							[
								138612,
								138668
							],
							[
								138902,
								138943
							],
							[
								139029,
								139040
							],
							[
								139189,
								139202
							],
							[
								139523,
								139539
							],
							[
								139568,
								139620
							],
							[
								139689,
								139696
							],
							[
								139780,
								139794
							],
							[
								139878,
								139893
							],
							[
								139999,
								140003
							],
							[
								140035,
								140055
							],
							[
								140106,
								140119
							],
							[
								140169,
								140181
							],
							[
								140475,
								140490
							],
							[
								140811,
								140821
							],
							[
								140876,
								140886
							],
							[
								140970,
								140981
							],
							[
								141038,
								141045
							],
							[
								141648,
								141658
							],
							[
								141724,
								141735
							],
							[
								141803,
								141815
							],
							[
								141850,
								141863
							],
							[
								141908,
								141923
							],
							[
								141942,
								141969
							],
							[
								142155,
								142198
							],
							[
								142359,
								142419
							],
							[
								142505,
								142530
							],
							[
								142579,
								142622
							],
							[
								142633,
								142643
							],
							[
								142652,
								142681
							],
							[
								142937,
								142953
							],
							[
								142975,
								142986
							],
							[
								143036,
								143066
							],
							[
								143135,
								143140
							],
							[
								143169,
								143174
							],
							[
								143469,
								143482
							],
							[
								143533,
								143564
							],
							[
								143585,
								143598
							],
							[
								143599,
								143619
							],
							[
								145123,
								145150
							],
							[
								145175,
								145180
							],
							[
								145231,
								145260
							],
							[
								145339,
								145344
							],
							[
								145426,
								145439
							],
							[
								145490,
								145501
							],
							[
								145541,
								145562
							],
							[
								145686,
								145703
							],
							[
								145833,
								145853
							],
							[
								146049,
								146075
							],
							[
								146163,
								146169
							],
							[
								146199,
								146204
							],
							[
								146280,
								146313
							],
							[
								146471,
								146476
							],
							[
								146527,
								146540
							],
							[
								146564,
								146570
							],
							[
								146653,
								146677
							],
							[
								146771,
								146782
							],
							[
								146838,
								146851
							],
							[
								146913,
								146924
							],
							[
								147023,
								147033
							],
							[
								147131,
								147144
							],
							[
								147257,
								147266
							],
							[
								147324,
								147336
							],
							[
								147419,
								147427
							],
							[
								147527,
								147534
							],
							[
								147636,
								147656
							],
							[
								147844,
								147865
							],
							[
								148124,
								148141
							],
							[
								148294,
								148306
							],
							[
								148435,
								148449
							],
							[
								148620,
								148633
							],
							[
								148650,
								148670
							],
							[
								148929,
								148959
							],
							[
								148965,
								148991
							],
							[
								149010,
								149036
							],
							[
								149065,
								149083
							],
							[
								149149,
								149183
							],
							[
								149297,
								149351
							],
							[
								149378,
								149398
							],
							[
								149488,
								149505
							],
							[
								149601,
								149623
							],
							[
								149730,
								149754
							],
							[
								149862,
								149892
							],
							[
								149923,
								149932
							],
							[
								149975,
								149994
							],
							[
								150143,
								150163
							],
							[
								150280,
								150299
							],
							[
								150413,
								150429
							],
							[
								150537,
								150547
							],
							[
								150625,
								150632
							],
							[
								150698,
								150707
							],
							[
								151052,
								151073
							],
							[
								151082,
								151110
							],
							[
								151120,
								151165
							],
							[
								151220,
								151231
							],
							[
								151253,
								151263
							],
							[
								151276,
								151287
							],
							[
								151315,
								151348
							],
							[
								151509,
								151541
							],
							[
								151609,
								151631
							],
							[
								151803,
								151839
							],
							[
								152001,
								152017
							],
							[
								152078,
								152114
							],
							[
								152190,
								152201
							],
							[
								152266,
								152270
							],
							[
								152309,
								152322
							],
							[
								152436,
								152472
							],
							[
								152649,
								152654
							],
							[
								152695,
								152748
							],
							[
								153686,
								153715
							],
							[
								153869,
								153906
							],
							[
								153917,
								153930
							],
							[
								153943,
								153952
							],
							[
								153999,
								154019
							],
							[
								154053,
								154069
							],
							[
								154291,
								154312
							],
							[
								154440,
								154472
							],
							[
								154499,
								154508
							],
							[
								154520,
								154533
							],
							[
								154611,
								154635
							],
							[
								154702,
								154711
							],
							[
								154727,
								154737
							],
							[
								154754,
								154771
							],
							[
								154799,
								154808
							],
							[
								154809,
								154832
							],
							[
								154878,
								154902
							],
							[
								155050,
								155055
							],
							[
								155073,
								155082
							],
							[
								155182,
								155190
							],
							[
								155194,
								155203
							],
							[
								155225,
								155238
							],
							[
								155255,
								155268
							],
							[
								155275,
								155288
							],
							[
								155314,
								155331
							],
							[
								155344,
								155360
							],
							[
								155430,
								155435
							],
							[
								155453,
								155462
							],
							[
								155562,
								155570
							],
							[
								155583,
								155592
							],
							[
								155607,
								155612
							],
							[
								155700,
								155737
							],
							[
								155894,
								155910
							],
							[
								155924,
								155946
							],
							[
								156059,
								156065
							],
							[
								157113,
								157128
							],
							[
								157178,
								157192
							],
							[
								157206,
								157221
							],
							[
								157751,
								157768
							],
							[
								157818,
								157834
							],
							[
								158118,
								158148
							],
							[
								158166,
								158175
							],
							[
								158193,
								158203
							],
							[
								158216,
								158225
							],
							[
								158368,
								158397
							],
							[
								158415,
								158424
							],
							[
								158442,
								158452
							],
							[
								158456,
								158465
							],
							[
								159746,
								159798
							],
							[
								159864,
								159887
							],
							[
								159959,
								159977
							],
							[
								160326,
								160336
							],
							[
								160340,
								160354
							],
							[
								160556,
								160588
							],
							[
								160615,
								160650
							],
							[
								160690,
								160713
							],
							[
								160874,
								160890
							],
							[
								161075,
								161084
							],
							[
								161110,
								161130
							],
							[
								161157,
								161166
							],
							[
								161181,
								161205
							],
							[
								161345,
								161390
							],
							[
								161422,
								161440
							],
							[
								161586,
								161598
							],
							[
								161743,
								161748
							],
							[
								162062,
								162069
							],
							[
								162206,
								162225
							],
							[
								162243,
								162265
							],
							[
								162549,
								162591
							],
							[
								162608,
								162645
							],
							[
								162893,
								162912
							],
							[
								163282,
								163322
							],
							[
								163365,
								163379
							],
							[
								163449,
								163479
							],
							[
								163528,
								163558
							],
							[
								163625,
								163703
							],
							[
								164153,
								164181
							],
							[
								164233,
								164297
							],
							[
								164315,
								164339
							],
							[
								164598,
								164617
							],
							[
								164732,
								164768
							],
							[
								165493,
								165531
							],
							[
								165548,
								165586
							],
							[
								166875,
								166882
							],
							[
								166938,
								166956
							],
							[
								167168,
								167175
							],
							[
								167223,
								167227
							],
							[
								167359,
								167367
							],
							[
								167434,
								167446
							],
							[
								168422,
								168488
							],
							[
								168489,
								168506
							],
							[
								168744,
								168755
							],
							[
								168772,
								168791
							],
							[
								168905,
								168969
							],
							[
								168985,
								168994
							],
							[
								169006,
								169014
							],
							[
								169067,
								169082
							],
							[
								169098,
								169104
							],
							[
								169128,
								169141
							],
							[
								169336,
								169353
							],
							[
								169398,
								169423
							],
							[
								169522,
								169528
							],
							[
								169648,
								169680
							],
							[
								169757,
								169761
							],
							[
								169891,
								169912
							],
							[
								169950,
								169971
							],
							[
								170063,
								170088
							],
							[
								170259,
								170292
							],
							[
								170525,
								170552
							],
							[
								170644,
								170648
							],
							[
								170755,
								170760
							],
							[
								171024,
								171070
							],
							[
								171660,
								171669
							],
							[
								171905,
								171958
							],
							[
								171969,
								171995
							],
							[
								172298,
								172314
							],
							[
								172398,
								172409
							],
							[
								172655,
								172659
							],
							[
								172943,
								172996
							],
							[
								173224,
								173237
							],
							[
								173248,
								173264
							],
							[
								173439,
								173448
							],
							[
								173490,
								173499
							],
							[
								173539,
								173544
							],
							[
								173580,
								173598
							],
							[
								173619,
								173650
							],
							[
								173757,
								173776
							],
							[
								174069,
								174082
							],
							[
								174171,
								174189
							],
							[
								174284,
								174301
							],
							[
								174434,
								174441
							],
							[
								174560,
								174566
							],
							[
								174716,
								174724
							],
							[
								174843,
								174853
							],
							[
								175082,
								175091
							],
							[
								175584,
								175624
							],
							[
								175933,
								175968
							],
							[
								176299,
								176305
							],
							[
								176341,
								176359
							],
							[
								176403,
								176413
							],
							[
								176496,
								176506
							],
							[
								176555,
								176587
							],
							[
								176834,
								176853
							],
							[
								177471,
								177493
							],
							[
								177792,
								177852
							],
							[
								178562,
								178587
							],
							[
								178616,
								178632
							],
							[
								178641,
								178652
							],
							[
								178744,
								178750
							],
							[
								178759,
								178770
							],
							[
								178830,
								178854
							],
							[
								178872,
								178881
							],
							[
								178905,
								178914
							],
							[
								178942,
								178953
							],
							[
								178980,
								178991
							],
							[
								179024,
								179037
							],
							[
								179056,
								179069
							],
							[
								179081,
								179094
							],
							[
								179245,
								179256
							],
							[
								179358,
								179383
							],
							[
								179401,
								179427
							],
							[
								179518,
								179552
							],
							[
								179824,
								179845
							],
							[
								179910,
								179928
							],
							[
								180096,
								180132
							],
							[
								180554,
								180574
							],
							[
								180777,
								180792
							],
							[
								181068,
								181091
							],
							[
								181300,
								181318
							],
							[
								181536,
								181548
							],
							[
								181578,
								181593
							],
							[
								181638,
								181644
							],
							[
								181696,
								181710
							],
							[
								181852,
								181870
							],
							[
								182066,
								182098
							],
							[
								182164,
								182180
							],
							[
								182516,
								182532
							],
							[
								182979,
								182982
							],
							[
								182995,
								182996
							],
							[
								183026,
								183062
							],
							[
								183503,
								183542
							],
							[
								183631,
								183657
							],
							[
								183705,
								183766
							],
							[
								184173,
								184201
							],
							[
								184308,
								184326
							],
							[
								184621,
								184659
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"self = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							"(key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.intersect = (a, b) =>",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = function(arr)",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							"(acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							"x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							"Util.isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							"(acc, { elements }) =>",
							"(acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods, dest) =>",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakAssign = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.getFunctionArguments = fn =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							"(a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							"gen = p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							" (fd = 0, mode = true) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							"([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>"
						]
					},
					"AQAAAAAAAAAAAAAA7mcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 73900,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					64,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAJWUAAAAAAAAlpQAAAAAAAAAAAAAlpQAAAAAAACYlAAAAAAAAAAAAACYlAAAAAAAAJmUAAAAAAAAAAAAAJmUAAAAAAAAm5QAAAAAAAAAAAAAlpQAAAAAAACWlAAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJWUAAAAAAAAlZQAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAJmUAAAAAAAAmpQAAAAAAAAAAAAAmpQAAAAAAACblAAAAAAAAAAAAACblAAAAAAAAJyUAAAAAAAAAAAAAJyUAAAAAAAAnZQAAAAAAAAAAAAAnZQAAAAAAACelAAAAAAAAAAAAACelAAAAAAAAJ+UAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJmUAAAAAAAAmZQAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAAJ+UAAAAAAAAoJQAAAAAAAAAAAAAoJQAAAAAAAChlAAAAAAAAAAAAAChlAAAAAAAAKKUAAAAAAAAAAAAAKKUAAAAAAAAo5QAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ+UAAAAAAAAn5QAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " Location"
					},
					"CQAAAKOUAAAAAAAApJQAAAAAAAAAAAAApJQAAAAAAACllAAAAAAAAAAAAACllAAAAAAAAKaUAAAAAAAAAAAAAKaUAAAAAAAAp5QAAAAAAAAAAAAAp5QAAAAAAAColAAAAAAAAAAAAAColAAAAAAAAKmUAAAAAAAAAAAAAKmUAAAAAAAAqpQAAAAAAAAAAAAAqpQAAAAAAACrlAAAAAAAAAAAAACrlAAAAAAAAKyUAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKOUAAAAAAAAo5QAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKyUAAAAAAAArpQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKyUAAAAAAAArJQAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "loc"
					},
					"AwAAAK2UAAAAAAAArpQAAAAAAAAAAAAArpQAAAAAAACvlAAAAAAAAAAAAACvlAAAAAAAALCUAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK2UAAAAAAAArZQAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALGUAAAAAAAAspQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALGUAAAAAAAAsZQAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/eagle/document.js",
			"settings":
			{
				"buffer_size": 10432,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAD0OAAAAAAAAPg4AAAAAAAAAAAAAPg4AAAAAAAA/DgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9DgAAAAAAAD0OAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "io-helpers.js",
			"settings":
			{
				"buffer_size": 7256,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					44,
					1,
					"cut",
					null,
					"AQAAAIIXAAAAAAAAghcAAAAAAAADAgAACgpleHBvcnQgZnVuY3Rpb24gRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KSB7CiAgbGV0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJTaXplKTsKICByZXR1cm4gbmV3IFJlcGVhdGVyKGFzeW5jIChwdXNoLCBzdG9wKSA9PiB7CiAgICBsZXQgcmV0OwogICAgZG8gewogICAgICBsZXQgciA9IGF3YWl0IHdhaXRSZWFkKGZkKTsKICAgICAgcmV0ID0gdHlwZW9mIGZkID09ICdudW1iZXInID8gZmlsZXN5c3RlbS5yZWFkU3luYyhmZCwgYnVmKSA6IGZkLnJlYWQoYnVmKTsKICAgICAgaWYocmV0ID4gMCkgewogICAgICAgIGxldCBkYXRhID0gYnVmLnNsaWNlKDAsIHJldCk7CiAgICAgICAgYXdhaXQgcHVzaChmaWxlc3lzdGVtLmJ1ZmZlclRvU3RyaW5nKGRhdGEpKTsKICAgICAgfQogICAgfSB3aGlsZShyZXQgPT0gYnVmZmVyU2l6ZSk7CiAgICBzdG9wKCk7CiAgICB0eXBlb2YgZmQgPT0gJ251bWJlcicgPyBmaWxlc3lzdGVtLmNsb3NlU3luYyhmZCkgOiBmZC5kZXN0cm95KCk7CiAgfSk7Cn0",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAghcAAAAAAACFGQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					2,
					"paste",
					null,
					"AgAAAIIXAAAAAAAAhRkAAAAAAAAAAAAAhRkAAAAAAACIGwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAghcAAAAAAACCFwAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "ReadF"
					},
					"BgAAAJQXAAAAAAAAlRcAAAAAAAAAAAAAlRcAAAAAAACVFwAAAAAAAAgAAABGZFJlYWRlcpUXAAAAAAAAlhcAAAAAAAAAAAAAlhcAAAAAAACXFwAAAAAAAAAAAACXFwAAAAAAAJgXAAAAAAAAAAAAAJgXAAAAAAAAmRcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlBcAAAAAAACcFwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAJkXAAAAAAAAmhcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmRcAAAAAAACZFwAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"cut",
					null,
					"AQAAALYXAAAAAAAAthcAAAAAAADLAQAAbGV0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJTaXplKTsKICByZXR1cm4gbmV3IFJlcGVhdGVyKGFzeW5jIChwdXNoLCBzdG9wKSA9PiB7CiAgICBsZXQgcmV0OwogICAgZG8gewogICAgICBsZXQgciA9IGF3YWl0IHdhaXRSZWFkKGZkKTsKICAgICAgcmV0ID0gdHlwZW9mIGZkID09ICdudW1iZXInID8gZmlsZXN5c3RlbS5yZWFkU3luYyhmZCwgYnVmKSA6IGZkLnJlYWQoYnVmKTsKICAgICAgaWYocmV0ID4gMCkgewogICAgICAgIGxldCBkYXRhID0gYnVmLnNsaWNlKDAsIHJldCk7CiAgICAgICAgYXdhaXQgcHVzaChmaWxlc3lzdGVtLmJ1ZmZlclRvU3RyaW5nKGRhdGEpKTsKICAgICAgfQogICAgfSB3aGlsZShyZXQgPT0gYnVmZmVyU2l6ZSk7CiAgICBzdG9wKCk7CiAgICB0eXBlb2YgZmQgPT0gJ251bWJlcicgPyBmaWxlc3lzdGVtLmNsb3NlU3luYyhmZCkgOiBmZC5kZXN0cm95KCk7CiAgfSk7",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAthcAAAAAAACBGQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAIMXAAAAAAAAhBcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgxcAAAAAAACDFwAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAAIMXAAAAAAAAgxcAAAAAAAABAAAAKg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhBcAAAAAAACEFwAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAJQXAAAAAAAAlRcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlBcAAAAAAACUFwAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALQXAAAAAAAAtRcAAAAAAAAAAAAAtRcAAAAAAAC3FwAAAAAAAAAAAAC3FwAAAAAAALgXAAAAAAAAAAAAALgXAAAAAAAAuhcAAAAAAAAAAAAAtRcAAAAAAAC1FwAAAAAAAAIAAAAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtBcAAAAAAAC0FwAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"paste",
					null,
					"AQAAALUXAAAAAAAA3hcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtRcAAAAAAAC1FwAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "for"
					},
					"BAAAAN4XAAAAAAAA3xcAAAAAAAAAAAAA4BcAAAAAAADgFwAAAAAAAAIAAAAgIN8XAAAAAAAA4BcAAAAAAAAAAAAA4BcAAAAAAADhFwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3hcAAAAAAADeFwAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOEXAAAAAAAA4xcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4RcAAAAAAADhFwAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					5,
					"left_delete",
					null,
					"BQAAAOIXAAAAAAAA4hcAAAAAAAABAAAAKeEXAAAAAAAA4RcAAAAAAAABAAAAKOAXAAAAAAAA4BcAAAAAAAABAAAAct8XAAAAAAAA3xcAAAAAAAABAAAAb94XAAAAAAAA3hcAAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4xcAAAAAAADjFwAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "cd"
					},
					"AgAAAN4XAAAAAAAA3xcAAAAAAAAAAAAA3xcAAAAAAADgFwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3hcAAAAAAADeFwAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					2,
					"left_delete",
					null,
					"AgAAAN8XAAAAAAAA3xcAAAAAAAABAAAAZN4XAAAAAAAA3hcAAAAAAAABAAAAYw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4BcAAAAAAADgFwAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "do"
					},
					"AgAAAN4XAAAAAAAA3xcAAAAAAAAAAAAA3xcAAAAAAADgFwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3hcAAAAAAADeFwAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOAXAAAAAAAA4RcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4BcAAAAAAADgFwAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOEXAAAAAAAA4xcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4RcAAAAAAADhFwAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAOIXAAAAAAAA4xcAAAAAAAAAAAAA4xcAAAAAAADkFwAAAAAAAAAAAADjFwAAAAAAAOUXAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4hcAAAAAAADiFwAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "\nĺet"
					},
					"BgAAAOUXAAAAAAAA5hcAAAAAAAAAAAAA5hcAAAAAAADoFwAAAAAAAAAAAADjFwAAAAAAAOMXAAAAAAAAAgAAACAg5hcAAAAAAADnFwAAAAAAAAAAAADnFwAAAAAAAOgXAAAAAAAAAAAAAOgXAAAAAAAA6RcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5RcAAAAAAADlFwAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOkXAAAAAAAA6hcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6RcAAAAAAADpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					4,
					"left_delete",
					null,
					"BAAAAOkXAAAAAAAA6RcAAAAAAAABAAAAIOgXAAAAAAAA6BcAAAAAAAABAAAAdOcXAAAAAAAA5xcAAAAAAAABAAAAZeYXAAAAAAAA5hcAAAAAAAACAAAAxLo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6hcAAAAAAADqFwAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "lt"
					},
					"AgAAAOYXAAAAAAAA5xcAAAAAAAAAAAAA5xcAAAAAAADoFwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5hcAAAAAAADmFwAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOgXAAAAAAAA6RcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6BcAAAAAAADoFwAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					2,
					"left_delete",
					null,
					"AgAAAOgXAAAAAAAA6BcAAAAAAAABAAAAIOcXAAAAAAAA5xcAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6RcAAAAAAADpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAAOcXAAAAAAAA6BcAAAAAAAAAAAAA6BcAAAAAAADpFwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5xcAAAAAAADnFwAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " ret"
					},
					"BAAAAOkXAAAAAAAA6hcAAAAAAAAAAAAA6hcAAAAAAADrFwAAAAAAAAAAAADrFwAAAAAAAOwXAAAAAAAAAAAAAOwXAAAAAAAA7RcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6RcAAAAAAADpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAO0XAAAAAAAA7hcAAAAAAAAAAAAA7hcAAAAAAADvFwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7RcAAAAAAADtFwAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " fs.rea"
					},
					"BwAAAO8XAAAAAAAA8BcAAAAAAAAAAAAA8BcAAAAAAADxFwAAAAAAAAAAAADxFwAAAAAAAPIXAAAAAAAAAAAAAPIXAAAAAAAA8xcAAAAAAAAAAAAA8xcAAAAAAAD0FwAAAAAAAAAAAAD0FwAAAAAAAPUXAAAAAAAAAAAAAPUXAAAAAAAA9hcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7xcAAAAAAADvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "dF"
					},
					"AgAAAPYXAAAAAAAA9xcAAAAAAAAAAAAA9xcAAAAAAAD4FwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9hcAAAAAAAD2FwAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"left_delete",
					null,
					"AQAAAPcXAAAAAAAA9xcAAAAAAAABAAAARg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+BcAAAAAAAD4FwAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "Sync"
					},
					"BAAAAPcXAAAAAAAA+BcAAAAAAAAAAAAA+BcAAAAAAAD5FwAAAAAAAAAAAAD5FwAAAAAAAPoXAAAAAAAAAAAAAPoXAAAAAAAA+xcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9xcAAAAAAAD3FwAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPsXAAAAAAAA/RcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+xcAAAAAAAD7FwAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "fd,"
					},
					"AwAAAPwXAAAAAAAA/RcAAAAAAAAAAAAA/RcAAAAAAAD+FwAAAAAAAAAAAAD+FwAAAAAAAP8XAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/BcAAAAAAAD8FwAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " buf,"
					},
					"BQAAAP8XAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAAEGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/xcAAAAAAAD/FwAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": " 0,"
					},
					"AwAAAAQYAAAAAAAABRgAAAAAAAAAAAAABRgAAAAAAAAGGAAAAAAAAAAAAAAGGAAAAAAAAAcYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABBgAAAAAAAAEGAAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAcYAAAAAAAACBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABxgAAAAAAAAHGAAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "buf.b"
					},
					"BQAAAAgYAAAAAAAACRgAAAAAAAAAAAAACRgAAAAAAAAKGAAAAAAAAAAAAAAKGAAAAAAAAAsYAAAAAAAAAAAAAAsYAAAAAAAADBgAAAAAAAAAAAAADBgAAAAAAAANGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACBgAAAAAAAAIGAAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "yteS"
					},
					"BAAAAA0YAAAAAAAADhgAAAAAAAAAAAAADhgAAAAAAAAPGAAAAAAAAAAAAAAPGAAAAAAAABAYAAAAAAAAAAAAABAYAAAAAAAAERgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADRgAAAAAAAANGAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"left_delete",
					null,
					"AQAAABAYAAAAAAAAEBgAAAAAAAABAAAAUw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAERgAAAAAAAARGAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "Length"
					},
					"BgAAABAYAAAAAAAAERgAAAAAAAAAAAAAERgAAAAAAAASGAAAAAAAAAAAAAASGAAAAAAAABMYAAAAAAAAAAAAABMYAAAAAAAAFBgAAAAAAAAAAAAAFBgAAAAAAAAVGAAAAAAAAAAAAAAVGAAAAAAAABYYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEBgAAAAAAAAQGAAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABcYAAAAAAAAGBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFxgAAAAAAAAXGAAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAABgYAAAAAAAAGRgAAAAAAAAAAAAAGRgAAAAAAAAbGAAAAAAAAAAAAAAbGAAAAAAAABwYAAAAAAAAAAAAABwYAAAAAAAAHhgAAAAAAAAAAAAAGRgAAAAAAAAZGAAAAAAAAAIAAAAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGBgAAAAAAAAYGAAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"left_delete",
					null,
					"AgAAAOIXAAAAAAAA4hcAAAAAAAABAAAAChkYAAAAAAAAGRgAAAAAAAACAAAAICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4xcAAAAAAADjFwAAAAAAAAAAAAAAADBA"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "le"
					},
					"AgAAABgYAAAAAAAAGRgAAAAAAAAAAAAAGRgAAAAAAAAaGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGBgAAAAAAAAYGAAAAAAAAAAAAAAAAEBA"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": " tb"
					},
					"AwAAABoYAAAAAAAAGxgAAAAAAAAAAAAAGxgAAAAAAAAcGAAAAAAAAAAAAAAcGAAAAAAAAB0YAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGhgAAAAAAAAaGAAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					3,
					"left_delete",
					null,
					"AwAAABwYAAAAAAAAHBgAAAAAAAABAAAAYhsYAAAAAAAAGxgAAAAAAAABAAAAdBoYAAAAAAAAGhgAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHRgAAAAAAAAdGAAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAABoYAAAAAAAAGxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGhgAAAAAAAAaGAAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": " block"
					},
					"BgAAABsYAAAAAAAAHBgAAAAAAAAAAAAAHBgAAAAAAAAdGAAAAAAAAAAAAAAdGAAAAAAAAB4YAAAAAAAAAAAAAB4YAAAAAAAAHxgAAAAAAAAAAAAAHxgAAAAAAAAgGAAAAAAAAAAAAAAgGAAAAAAAACEYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGxgAAAAAAAAbGAAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACEYAAAAAAAAIhgAAAAAAAAAAAAAIhgAAAAAAAAjGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIRgAAAAAAAAhGAAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACMYAAAAAAAAJBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIxgAAAAAAAAjGAAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					12,
					"left_delete",
					null,
					"DAAAACMYAAAAAAAAIxgAAAAAAAABAAAAICIYAAAAAAAAIhgAAAAAAAABAAAAPSEYAAAAAAAAIRgAAAAAAAABAAAAICAYAAAAAAAAIBgAAAAAAAABAAAAax8YAAAAAAAAHxgAAAAAAAABAAAAYx4YAAAAAAAAHhgAAAAAAAABAAAAbx0YAAAAAAAAHRgAAAAAAAABAAAAbBwYAAAAAAAAHBgAAAAAAAABAAAAYhsYAAAAAAAAGxgAAAAAAAABAAAAIBoYAAAAAAAAGhgAAAAAAAABAAAAdBkYAAAAAAAAGRgAAAAAAAABAAAAZRgYAAAAAAAAGBgAAAAAAAABAAAAbA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJBgAAAAAAAAkGAAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAABgYAAAAAAAAGRgAAAAAAAAAAAAAGRgAAAAAAAAaGAAAAAAAAAAAAAAaGAAAAAAAABsYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGBgAAAAAAAAYGAAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " block"
					},
					"BgAAABsYAAAAAAAAHBgAAAAAAAAAAAAAHBgAAAAAAAAdGAAAAAAAAAAAAAAdGAAAAAAAAB4YAAAAAAAAAAAAAB4YAAAAAAAAHxgAAAAAAAAAAAAAHxgAAAAAAAAgGAAAAAAAAAAAAAAgGAAAAAAAACEYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGxgAAAAAAAAbGAAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACEYAAAAAAAAIhgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIRgAAAAAAAAhGAAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "\nf"
					},
					"AgAAACIYAAAAAAAAIxgAAAAAAAAAAAAAIxgAAAAAAAAkGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIhgAAAAAAAAiGAAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"left_delete",
					null,
					"AQAAACMYAAAAAAAAIxgAAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJBgAAAAAAAAkGAAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAACMYAAAAAAAAJBgAAAAAAAAAAAAAJBgAAAAAAAAlGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIxgAAAAAAAAjGAAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACUYAAAAAAAAJxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJRgAAAAAAAAlGAAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAACYYAAAAAAAAJxgAAAAAAAAAAAAAJxgAAAAAAAAoGAAAAAAAAAAAAAAoGAAAAAAAACkYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJhgAAAAAAAAmGAAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": " >"
					},
					"AgAAACkYAAAAAAAAKhgAAAAAAAAAAAAAKhgAAAAAAAArGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKRgAAAAAAAApGAAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAACsYAAAAAAAALBgAAAAAAAAAAAAALBgAAAAAAAAtGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKxgAAAAAAAArGAAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "\nyield"
					},
					"BgAAAC4YAAAAAAAALxgAAAAAAAAAAAAALxgAAAAAAAAwGAAAAAAAAAAAAAAwGAAAAAAAADEYAAAAAAAAAAAAADEYAAAAAAAAMhgAAAAAAAAAAAAAMhgAAAAAAAAzGAAAAAAAAAAAAAAzGAAAAAAAADQYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALhgAAAAAAAAuGAAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADQYAAAAAAAANRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANBgAAAAAAAA0GAAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "buf"
					},
					"AwAAADUYAAAAAAAANhgAAAAAAAAAAAAANhgAAAAAAAA3GAAAAAAAAAAAAAA3GAAAAAAAADgYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANRgAAAAAAAA1GAAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADgYAAAAAAAAORgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOBgAAAAAAAA4GAAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"left_delete",
					null,
					"AQAAADgYAAAAAAAAOBgAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAORgAAAAAAAA5GAAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": ".byteLength"
					},
					"CwAAADgYAAAAAAAAORgAAAAAAAAAAAAAORgAAAAAAAA6GAAAAAAAAAAAAAA6GAAAAAAAADsYAAAAAAAAAAAAADsYAAAAAAAAPBgAAAAAAAAAAAAAPBgAAAAAAAA9GAAAAAAAAAAAAAA9GAAAAAAAAD4YAAAAAAAAAAAAAD4YAAAAAAAAPxgAAAAAAAAAAAAAPxgAAAAAAABAGAAAAAAAAAAAAABAGAAAAAAAAEEYAAAAAAAAAAAAAEEYAAAAAAAAQhgAAAAAAAAAAAAAQhgAAAAAAABDGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOBgAAAAAAAA4GAAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMYAAAAAAAARBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQxgAAAAAAABDGAAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAADUYAAAAAAAANhgAAAAAAAAAAAAANhgAAAAAAAA3GAAAAAAAAAAAAAA3GAAAAAAAADgYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANRgAAAAAAAA1GAAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": " =?="
					},
					"BAAAADgYAAAAAAAAORgAAAAAAAAAAAAAORgAAAAAAAA6GAAAAAAAAAAAAAA6GAAAAAAAADsYAAAAAAAAAAAAADsYAAAAAAAAPBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOBgAAAAAAAA4GAAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					2,
					"left_delete",
					null,
					"AgAAADsYAAAAAAAAOxgAAAAAAAABAAAAPToYAAAAAAAAOhgAAAAAAAABAAAAPw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPBgAAAAAAAA8GAAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAADoYAAAAAAAAOxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOhgAAAAAAAA6GAAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsYAAAAAAAAPBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOxgAAAAAAAA7GAAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEsYAAAAAAAATBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASxgAAAAAAABLGAAAAAAAAP///////+9/"
				],
				[
					230,
					1,
					"left_delete",
					null,
					"AQAAAEsYAAAAAAAASxgAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATBgAAAAAAABMGAAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAEsYAAAAAAAATBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASxgAAAAAAABLGAAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": " buf"
					},
					"BAAAAEwYAAAAAAAATRgAAAAAAAAAAAAATRgAAAAAAABOGAAAAAAAAAAAAABOGAAAAAAAAE8YAAAAAAAAAAAAAE8YAAAAAAAAUBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATBgAAAAAAABMGAAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAFAYAAAAAAAAURgAAAAAAAAAAAAAURgAAAAAAABSGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUBgAAAAAAABQGAAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": " buf.slice"
					},
					"CgAAAFIYAAAAAAAAUxgAAAAAAAAAAAAAUxgAAAAAAABUGAAAAAAAAAAAAABUGAAAAAAAAFUYAAAAAAAAAAAAAFUYAAAAAAAAVhgAAAAAAAAAAAAAVhgAAAAAAABXGAAAAAAAAAAAAABXGAAAAAAAAFgYAAAAAAAAAAAAAFgYAAAAAAAAWRgAAAAAAAAAAAAAWRgAAAAAAABaGAAAAAAAAAAAAABaGAAAAAAAAFsYAAAAAAAAAAAAAFsYAAAAAAAAXBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUhgAAAAAAABSGAAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFwYAAAAAAAAXhgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXBgAAAAAAABcGAAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": "0,"
					},
					"AgAAAF0YAAAAAAAAXhgAAAAAAAAAAAAAXhgAAAAAAABfGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXRgAAAAAAABdGAAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": " ret"
					},
					"BAAAAF8YAAAAAAAAYBgAAAAAAAAAAAAAYBgAAAAAAABhGAAAAAAAAAAAAABhGAAAAAAAAGIYAAAAAAAAAAAAAGIYAAAAAAAAYxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXxgAAAAAAABfGAAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGQYAAAAAAAAZRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZBgAAAAAAABkGAAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": " whi"
					},
					"BAAAAGgYAAAAAAAAaRgAAAAAAAAAAAAAaRgAAAAAAABqGAAAAAAAAAAAAABqGAAAAAAAAGsYAAAAAAAAAAAAAGsYAAAAAAAAbBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaBgAAAAAAABoGAAAAAAAAP///////+9/"
				],
				[
					248,
					1,
					"left_delete",
					null,
					"AQAAAGsYAAAAAAAAaxgAAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbBgAAAAAAABsGAAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": "ile"
					},
					"AwAAAGsYAAAAAAAAbBgAAAAAAAAAAAAAbBgAAAAAAABtGAAAAAAAAAAAAABtGAAAAAAAAG4YAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaxgAAAAAAABrGAAAAAAAAAAAAAAAAPC/"
				],
				[
					250,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG4YAAAAAAAAcBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbhgAAAAAAABuGAAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": "ret,"
					},
					"BAAAALsXAAAAAAAAvBcAAAAAAAAAAAAAvBcAAAAAAAC9FwAAAAAAAAAAAAC9FwAAAAAAAL4XAAAAAAAAAAAAAL4XAAAAAAAAvxcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuxcAAAAAAAC7FwAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					4,
					"left_delete",
					null,
					"BAAAAOwXAAAAAAAA7BcAAAAAAAABAAAAIOsXAAAAAAAA6xcAAAAAAAABAAAAdOoXAAAAAAAA6hcAAAAAAAABAAAAZekXAAAAAAAA6RcAAAAAAAABAAAAbA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7RcAAAAAAADtFwAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"left_delete",
					null,
					"AQAAABgYAAAAAAAAGBgAAAAAAAAKAAAAbGV0IGJsb2NrOw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGBgAAAAAAAAiGAAAAAAAAAAAAAAAAHhA"
				],
				[
					269,
					1,
					"cut",
					null,
					"AQAAAOkXAAAAAAAA6RcAAAAAAAAtAAAAcmV0ID0gZnMucmVhZFN5bmMoZmQsIGJ1ZiwgMCwgYnVmLmJ5dGVMZW5ndGgp",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6RcAAAAAAAAWGAAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAO8XAAAAAAAA8BcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7xcAAAAAAADvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"paste",
					null,
					"AQAAAPAXAAAAAAAAHRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8BcAAAAAAADwFwAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAB0YAAAAAAAAHhgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHRgAAAAAAAAdGAAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"cut",
					null,
					"AQAAAB4YAAAAAAAAHhgAAAAAAAADAAAAcmV0",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHhgAAAAAAAAhGAAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACQYAAAAAAAAJhgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJBgAAAAAAAAkGAAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					2,
					"right_delete",
					null,
					"AgAAAOkXAAAAAAAA6RcAAAAAAAABAAAAO+kXAAAAAAAA6RcAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6RcAAAAAAADpFwAAAAAAAAAAAAAAADBA"
				],
				[
					284,
					2,
					"left_delete",
					null,
					"AgAAAOcXAAAAAAAA5xcAAAAAAAACAAAAICDmFwAAAAAAAOYXAAAAAAAAAQAAAAo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6RcAAAAAAADpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAAGEYAAAAAAAAYhgAAAAAAAAAAAAAYhgAAAAAAABjGAAAAAAAAAAAAABjGAAAAAAAAGQYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYRgAAAAAAABhGAAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGQYAAAAAAAAZRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZBgAAAAAAABkGAAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"left_delete",
					null,
					"AQAAAGQYAAAAAAAAZBgAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZRgAAAAAAABlGAAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": " >"
					},
					"AgAAAGQYAAAAAAAAZRgAAAAAAAAAAAAAZRgAAAAAAABmGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZBgAAAAAAABkGAAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAGYYAAAAAAAAZxgAAAAAAAAAAAAAZxgAAAAAAABoGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZhgAAAAAAABmGAAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGkYAAAAAAAAahgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaRgAAAAAAABpGAAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					3,
					"left_delete",
					null,
					"AwAAAGwYAAAAAAAAbBgAAAAAAAACAAAAICBrGAAAAAAAAGsYAAAAAAAAAQAAAApqGAAAAAAAAGoYAAAAAAAAAQAAAAo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbhgAAAAAAABuGAAAAAAAAAAAAAAAAGFA"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIsXAAAAAAAAjBcAAAAAAAAAAAAAjBcAAAAAAACNFwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAixcAAAAAAACLFwAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAIsXAAAAAAAAjBcAAAAAAAAAAAAAjBcAAAAAAACNFwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAixcAAAAAAACLFwAAAAAAAP///////+9/"
				],
				[
					420,
					1,
					"left_delete",
					null,
					"AQAAAIwXAAAAAAAAjBcAAAAAAAABAAAAbg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjRcAAAAAAACNFwAAAAAAAAAAAAAAAPC/"
				],
				[
					421,
					1,
					"insert",
					{
						"characters": "unction"
					},
					"BwAAAIwXAAAAAAAAjRcAAAAAAAAAAAAAjRcAAAAAAACOFwAAAAAAAAAAAACOFwAAAAAAAI8XAAAAAAAAAAAAAI8XAAAAAAAAkBcAAAAAAAAAAAAAkBcAAAAAAACRFwAAAAAAAAAAAACRFwAAAAAAAJIXAAAAAAAAAAAAAJIXAAAAAAAAkxcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjBcAAAAAAACMFwAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": " ReadFd"
					},
					"BwAAAJMXAAAAAAAAlBcAAAAAAAAAAAAAlBcAAAAAAACVFwAAAAAAAAAAAACVFwAAAAAAAJYXAAAAAAAAAAAAAJYXAAAAAAAAlxcAAAAAAAAAAAAAlxcAAAAAAACYFwAAAAAAAAAAAACYFwAAAAAAAJkXAAAAAAAAAAAAAJkXAAAAAAAAmhcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkxcAAAAAAACTFwAAAAAAAAAAAAAAAPC/"
				],
				[
					423,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJoXAAAAAAAAnBcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmhcAAAAAAACaFwAAAAAAAAAAAAAAAPC/"
				],
				[
					424,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAJsXAAAAAAAAnBcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmxcAAAAAAACbFwAAAAAAAAAAAAAAAPC/"
				],
				[
					425,
					1,
					"left_delete",
					null,
					"AQAAAJsXAAAAAAAAmxcAAAAAAAABAAAAYg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnBcAAAAAAACcFwAAAAAAAAAAAAAAAPC/"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": "fd,"
					},
					"AwAAAJsXAAAAAAAAnBcAAAAAAAAAAAAAnBcAAAAAAACdFwAAAAAAAAAAAACdFwAAAAAAAJ4XAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmxcAAAAAAACbFwAAAAAAAAAAAAAAAPC/"
				],
				[
					427,
					1,
					"insert",
					{
						"characters": " buffer"
					},
					"BwAAAJ4XAAAAAAAAnxcAAAAAAAAAAAAAnxcAAAAAAACgFwAAAAAAAAAAAACgFwAAAAAAAKEXAAAAAAAAAAAAAKEXAAAAAAAAohcAAAAAAAAAAAAAohcAAAAAAACjFwAAAAAAAAAAAACjFwAAAAAAAKQXAAAAAAAAAAAAAKQXAAAAAAAApRcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnhcAAAAAAACeFwAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					1,
					"insert_completion",
					{
						"completion": "bufferSize",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "bufferSize"
					},
					"AgAAAJ8XAAAAAAAAnxcAAAAAAAAGAAAAYnVmZmVynxcAAAAAAACpFwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApRcAAAAAAAClFwAAAAAAAAAAAAAAAPC/"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKoXAAAAAAAAqxcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqhcAAAAAAACqFwAAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKsXAAAAAAAArRcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqxcAAAAAAACrFwAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"right_delete",
					null,
					"AQAAAKwXAAAAAAAArBcAAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArBcAAAAAAACsFwAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"cut",
					null,
					"AQAAALgXAAAAAAAAuBcAAAAAAAAEAAAAUmVhZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvBcAAAAAAAC4FwAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"paste",
					null,
					"AQAAALoXAAAAAAAAvhcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuhcAAAAAAAC6FwAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAK4XAAAAAAAArxcAAAAAAAAAAAAArxcAAAAAAACwFwAAAAAAAAAAAACwFwAAAAAAALEXAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArhcAAAAAAACuFwAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": " fn="
					},
					"BAAAALEXAAAAAAAAshcAAAAAAAAAAAAAshcAAAAAAACzFwAAAAAAAAAAAACzFwAAAAAAALQXAAAAAAAAAAAAALQXAAAAAAAAtRcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsRcAAAAAAACxFwAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"right_delete",
					null,
					"AQAAAK4XAAAAAAAArhcAAAAAAAAHAAAAbGV0IGZuPQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtRcAAAAAAACuFwAAAAAAAAAAAAAAAAAA"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJAYAAAAAAAAkRgAAAAAAAAAAAAAkRgAAAAAAACSGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkBgAAAAAAACQGAAAAAAAAAAAAAAAAAAA"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAJEYAAAAAAAAkhgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkRgAAAAAAACRGAAAAAAAAAAAAAAAAAAA"
				],
				[
					461,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkBgAAAAAAACQGAAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAKYYAAAAAAAApxgAAAAAAAAAAAAApxgAAAAAAACpGAAAAAAAAAAAAACpGAAAAAAAAKoYAAAAAAAAAAAAAKoYAAAAAAAAqxgAAAAAAAAAAAAAqxgAAAAAAACsGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAphgAAAAAAACmGAAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAAKwYAAAAAAAArRgAAAAAAAAAAAAArRgAAAAAAACuGAAAAAAAAAAAAACuGAAAAAAAAK8YAAAAAAAAAAAAAK8YAAAAAAAAsBgAAAAAAAAAAAAAsBgAAAAAAACxGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArBgAAAAAAACsGAAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALEYAAAAAAAAsxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsRgAAAAAAACxGAAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": "...FdR"
					},
					"BgAAALIYAAAAAAAAsxgAAAAAAAAAAAAAsxgAAAAAAAC0GAAAAAAAAAAAAAC0GAAAAAAAALUYAAAAAAAAAAAAALUYAAAAAAAAthgAAAAAAAAAAAAAthgAAAAAAAC3GAAAAAAAAAAAAAC3GAAAAAAAALgYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAshgAAAAAAACyGAAAAAAAAAAAAAAAAPC/"
				],
				[
					474,
					1,
					"insert",
					{
						"characters": "ead"
					},
					"AwAAALgYAAAAAAAAuRgAAAAAAAAAAAAAuRgAAAAAAAC6GAAAAAAAAAAAAAC6GAAAAAAAALsYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuBgAAAAAAAC4GAAAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALsYAAAAAAAAvRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuxgAAAAAAAC7GAAAAAAAAAAAAAAAAPC/"
				],
				[
					476,
					1,
					"insert",
					{
						"characters": "fd,"
					},
					"AwAAALwYAAAAAAAAvRgAAAAAAAAAAAAAvRgAAAAAAAC+GAAAAAAAAAAAAAC+GAAAAAAAAL8YAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvBgAAAAAAAC8GAAAAAAAAAAAAAAAAPC/"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": " buff"
					},
					"BQAAAL8YAAAAAAAAwBgAAAAAAAAAAAAAwBgAAAAAAADBGAAAAAAAAAAAAADBGAAAAAAAAMIYAAAAAAAAAAAAAMIYAAAAAAAAwxgAAAAAAAAAAAAAwxgAAAAAAADEGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvxgAAAAAAAC/GAAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					1,
					"insert_completion",
					{
						"completion": "bufferSize",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "bufferSize"
					},
					"AgAAAMAYAAAAAAAAwBgAAAAAAAAEAAAAYnVmZsAYAAAAAAAAyhgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxBgAAAAAAADEGAAAAAAAAAAAAAAAAPC/"
				],
				[
					482,
					2,
					"left_delete",
					null,
					"AgAAAMEXAAAAAAAAwRcAAAAAAAAUAAAAZCwgYnVmZmVyU2l6ZSA9IDEwMjTAFwAAAAAAAMAXAAAAAAAAAQAAAGY",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwRcAAAAAAADVFwAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"left_delete",
					null,
					"AQAAAKcYAAAAAAAApxgAAAAAAAAOAAAAZmQsIGJ1ZmZlclNpemU",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApxgAAAAAAAC1GAAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": ".map"
					},
					"BAAAAKkYAAAAAAAAqhgAAAAAAAAAAAAAqhgAAAAAAACrGAAAAAAAAAAAAACrGAAAAAAAAKwYAAAAAAAAAAAAAKwYAAAAAAAArRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqRgAAAAAAACpGAAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAK0YAAAAAAAArxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArRgAAAAAAACtGAAAAAAAAAAAAAAAAPC/"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAK4YAAAAAAAArxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArhgAAAAAAACuGAAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"left_delete",
					null,
					"AQAAAK4YAAAAAAAArhgAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArxgAAAAAAACvGAAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": "buf,"
					},
					"BAAAAK4YAAAAAAAArxgAAAAAAAAAAAAArxgAAAAAAACwGAAAAAAAAAAAAACwGAAAAAAAALEYAAAAAAAAAAAAALEYAAAAAAAAshgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArhgAAAAAAACuGAAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALIYAAAAAAAAsxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAshgAAAAAAACyGAAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					2,
					"left_delete",
					null,
					"AgAAALIYAAAAAAAAshgAAAAAAAABAAAAILEYAAAAAAAAsRgAAAAAAAABAAAALA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsxgAAAAAAACzGAAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAALEYAAAAAAAAshgAAAAAAAAAAAAAshgAAAAAAACzGAAAAAAAAAAAAACzGAAAAAAAALQYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsRgAAAAAAACxGAAAAAAAAAAAAAAAAPC/"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": " tz"
					},
					"AwAAALQYAAAAAAAAtRgAAAAAAAAAAAAAtRgAAAAAAAC2GAAAAAAAAAAAAAC2GAAAAAAAALcYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtBgAAAAAAAC0GAAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALcYAAAAAAAAuBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtxgAAAAAAAC3GAAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					2,
					"left_delete",
					null,
					"AgAAALcYAAAAAAAAtxgAAAAAAAABAAAAILYYAAAAAAAAthgAAAAAAAABAAAAeg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuBgAAAAAAAC4GAAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					1,
					"insert",
					{
						"characters": "oString"
					},
					"BwAAALYYAAAAAAAAtxgAAAAAAAAAAAAAtxgAAAAAAAC4GAAAAAAAAAAAAAC4GAAAAAAAALkYAAAAAAAAAAAAALkYAAAAAAAAuhgAAAAAAAAAAAAAuhgAAAAAAAC7GAAAAAAAAAAAAAC7GAAAAAAAALwYAAAAAAAAAAAAALwYAAAAAAAAvRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAthgAAAAAAAC2GAAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAL0YAAAAAAAAvxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvRgAAAAAAAC9GAAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": "buf"
					},
					"AwAAAL4YAAAAAAAAvxgAAAAAAAAAAAAAvxgAAAAAAADAGAAAAAAAAAAAAADAGAAAAAAAAMEYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvhgAAAAAAAC+GAAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": "reducxe"
					},
					"CAAAAKoYAAAAAAAAqxgAAAAAAAAAAAAAqxgAAAAAAACrGAAAAAAAAAMAAABtYXCrGAAAAAAAAKwYAAAAAAAAAAAAAKwYAAAAAAAArRgAAAAAAAAAAAAArRgAAAAAAACuGAAAAAAAAAAAAACuGAAAAAAAAK8YAAAAAAAAAAAAAK8YAAAAAAAAsBgAAAAAAAAAAAAAsBgAAAAAAACxGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqhgAAAAAAACtGAAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"left_delete",
					null,
					"AQAAAK8YAAAAAAAArxgAAAAAAAABAAAAeA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsBgAAAAAAACwGAAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"insert",
					{
						"characters": "()a"
					},
					"AwAAALEYAAAAAAAAshgAAAAAAAAAAAAAshgAAAAAAACzGAAAAAAAAAAAAACzGAAAAAAAALQYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsRgAAAAAAACxGAAAAAAAAAAAAAAAAPC/"
				],
				[
					521,
					2,
					"left_delete",
					null,
					"AgAAALMYAAAAAAAAsxgAAAAAAAABAAAAYbIYAAAAAAAAshgAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtBgAAAAAAAC0GAAAAAAAAAAAAAAAAPC/"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": "acc,"
					},
					"BAAAALIYAAAAAAAAsxgAAAAAAAAAAAAAsxgAAAAAAAC0GAAAAAAAAAAAAAC0GAAAAAAAALUYAAAAAAAAAAAAALUYAAAAAAAAthgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAshgAAAAAAACyGAAAAAAAAAAAAAAAAPC/"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAALkYAAAAAAAAuhgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuRgAAAAAAAC5GAAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": "acc+="
					},
					"BQAAAL4YAAAAAAAAvxgAAAAAAAAAAAAAvxgAAAAAAADAGAAAAAAAAAAAAADAGAAAAAAAAMEYAAAAAAAAAAAAAMEYAAAAAAAAwhgAAAAAAAAAAAAAwhgAAAAAAADDGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvhgAAAAAAAC+GAAAAAAAAAAAAAAAAPC/"
				],
				[
					531,
					1,
					"left_delete",
					null,
					"AQAAANAYAAAAAAAA0BgAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0RgAAAAAAADRGAAAAAAAAP///////+9/"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANAYAAAAAAAA0RgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0BgAAAAAAADQGAAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANEYAAAAAAAA0xgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0RgAAAAAAADRGAAAAAAAAAAAAAAAAPC/"
				],
				[
					535,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAANMYAAAAAAAA1BgAAAAAAAAAAAAA1BgAAAAAAADVGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0xgAAAAAAADTGAAAAAAAAAAAAAAAAPC/"
				],
				[
					537,
					8,
					"right_delete",
					null,
					"CAAAAJQYAAAAAAAAlBgAAAAAAAABAAAAbJQYAAAAAAAAlBgAAAAAAAABAAAAZZQYAAAAAAAAlBgAAAAAAAABAAAAdJQYAAAAAAAAlBgAAAAAAAABAAAAIJQYAAAAAAAAlBgAAAAAAAABAAAAcpQYAAAAAAAAlBgAAAAAAAABAAAAZZQYAAAAAAAAlBgAAAAAAAABAAAAdJQYAAAAAAAAlBgAAAAAAAABAAAAPQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlBgAAAAAAACUGAAAAAAAAAAAAAAAADBA"
				],
				[
					538,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAJQYAAAAAAAAlRgAAAAAAAAAAAAAlRgAAAAAAACWGAAAAAAAAAAAAACWGAAAAAAAAJcYAAAAAAAAAAAAAJcYAAAAAAAAmBgAAAAAAAAAAAAAmBgAAAAAAACZGAAAAAAAAAAAAACZGAAAAAAAAJoYAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlBgAAAAAAACUGAAAAAAAAAAAAAAAAPC/"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJoYAAAAAAAAmxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmhgAAAAAAACaGAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "fetch-post-prices.js",
			"settings":
			{
				"buffer_size": 574,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "import"
					},
					"BgAAABoAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAACAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACEAAAAAAAAAIwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAACIAAAAAAAAAKAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAACgAAAAAAAAAKQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAACgAAAAAAAAAKAAAAAAAAAABAAAAXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " frpm"
					},
					"BQAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAuAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC4AAAAAAAAALwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgAAAAAAAAAuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					3,
					"left_delete",
					null,
					"AwAAAC4AAAAAAAAALgAAAAAAAAABAAAAIC0AAAAAAAAALQAAAAAAAAABAAAAbSwAAAAAAAAALAAAAAAAAAABAAAAcA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "om"
					},
					"AgAAACwAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAuAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALAAAAAAAAAAsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " io-he"
					},
					"BgAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgAAAAAAAAAuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					5,
					"left_delete",
					null,
					"BQAAADMAAAAAAAAAMwAAAAAAAAABAAAAZTIAAAAAAAAAMgAAAAAAAAABAAAAaDEAAAAAAAAAMQAAAAAAAAABAAAALTAAAAAAAAAAMAAAAAAAAAABAAAAby8AAAAAAAAALwAAAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAC8AAAAAAAAAMQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "./io-help"
					},
					"CQAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert_completion",
					{
						"completion": "io-helpers.js",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "io-helpers.js"
					},
					"AgAAADIAAAAAAAAAMgAAAAAAAAAHAAAAaW8taGVscDIAAAAAAAAAPwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEAAAAAAAAAAQQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEEAAAAAAAAAQgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADpBwAAaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnOwppbXBvcnQge1JlYWRGZH0gZnJvbSAnLi9pby1oZWxwZXJzLmpzJzsKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGxldCBbcmQsIHdyXSA9IG9zLnBpcGUoKTsKCiAgb3MuZXhlYygKICAgIFsKICAgICAgJ2N1cmwnLAogICAgICAnaHR0cHM6Ly9zZXJ2aWNlLnBvc3QuY2gvdmdra2xwL2luZm8vaW5mb3JtYXRpb25lbi9Qcm9kdWt0ZUFuemVpZ2VuLycsCiAgICAgICctSCcsCiAgICAgICdhdXRob3JpdHk6IHNlcnZpY2UucG9zdC5jaCcsCiAgICAgICctSCcsCiAgICAgICdjYWNoZS1jb250cm9sOiBtYXgtYWdlPTAnLAogICAgICAnLUgnLAogICAgICAnc2VjLWNoLXVhOiAiKE5vdChBOkJyYW5kIjt2PSI4IiwgIkNocm9taXVtIjt2PSI5OCIsICJHb29nbGUgQ2hyb21lIjt2PSI5OCInLAogICAgICAnLUgnLAogICAgICAnc2VjLWNoLXVhLW1vYmlsZTogPzAnLAogICAgICAnLUgnLAogICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtOiAiTGludXgiJywKICAgICAgJy1IJywKICAgICAgJ3VwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHM6IDEnLAogICAgICAnLUgnLAogICAgICAnb3JpZ2luOiBodHRwczovL3NlcnZpY2UucG9zdC5jaCcsCiAgICAgICctSCcsCiAgICAgICdjb250ZW50LXR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICctSCcsCiAgICAgICd1c2VyLWFnZW50OiBNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS85OC4wLjQ3NTguNjYgU2FmYXJpLzUzNy4zNicsCiAgICAgICctSCcsCiAgICAgICdhY2NlcHQ6IHRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOScsCiAgICAgICctSCcsCiAgICAgICdzZWMtZmV0Y2gtc2l0ZTogc2FtZS1vcmlnaW4nLAogICAgICAnLUgnLAogICAgICAnc2VjLWZldGNoLW1vZGU6IG5hdmlnYXRlJywKICAgICAgJy1IJywKICAgICAgJ3NlYy1mZXRjaC11c2VyOiA/MScsCiAgICAgICctSCcsCiAgICAgICdzZWMtZmV0Y2gtZGVzdDogZG9jdW1lbnQnLAogICAgICAnLUgnLAogICAgICAncmVmZXJlcjogaHR0cHM6Ly9zZXJ2aWNlLnBvc3QuY2gvJywKICAgICAgJy1IJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZTogZW4tVVMsZW47cT0wLjknLAogICAgICAnLUgnLAogICAgICAnY29va2llOiB1c2VyX3Byb2ZpbGVfcHJvZmlsZUluZm9fbG9naW5TdGF0dXNDb29raWU9dW5kZWZpbmVkOyB4LXVuYmx1LWRldmljZT0iazMwdTVURk1SWGU5Y0hKNXJjUnB5dyI7IHVzZXJfcHJvZmlsZV9hdHRyaWJ1dGVzX3ByaW1hcnlTZWdtZW50PXVua25vd247IE5QS2xwaXBTZXNzaW9uPTYwMmMxMWFjMTc5MUxGMXJOM2VFcWVrYkl4VkJFWG9hb09qUjk3dzhsbUxIUWUxWXhKNnhqREFHeUs7IFNDX0FOQUxZVElDU19HTE9CQUxfQ09PS0lFPTU2OWUzZGIyYjkxNDQxYTY5YmM4MzY5NjI3ZDdmOWZmfEZhbHNlOyB1dGFnX21haW49dl9pZDowMTdlYTMxYWUwMGEwMDFjNDA5OWZiN2ZhYzMxMDUwNjgwMDVmMDYwMDBiZDAkX3NuOjEkX3NzOjAkX3N0OjE2NDM0MTU5OTQwNDckc2VzX2lkOjE2NDM0MTM5NTQ1NzElM0JleHAtc2Vzc2lvbiRfcG46MTMlM0JleHAtc2Vzc2lvbicsCiAgICAgICctLWRhdGEtcmF3JywKICAgICAgJ2YwZDg1NDY1MzhkNTIyPTJmYjMxZjU1MzUzYTRiN2U4YTM5NDEyNmVjZTcwYzIwJmJiMzg2NTM4ZDUyMjY5PTAmZjdkYzk5YmRhYzI4ODM9MSZJbmZvSW50LkRlc3RpbmF0aW9uR2V3YWVobHQ9MTI4NTU5NDgzJkluZm9JbnQuR2V3aWNodD0xLjAwMCcsCiAgICAgICctLWNvbXByZXNzZWQnCiAgICBdLAogICAgeyBzdGRvdXQ6IHdyLCBibG9jazogZmFsc2UgfQogICk7CiAgb3MuY2xvc2Uod3IpOwogIAoKfQoKbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKAAAAAAAAAADnBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAcAAAAAAADEBwAAAAAAAAAAAAAAAAAA"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\nklet"
					},
					"BgAAAMUHAAAAAAAAxgcAAAAAAAAAAAAAxgcAAAAAAADIBwAAAAAAAAAAAADIBwAAAAAAAMkHAAAAAAAAAAAAAMkHAAAAAAAAygcAAAAAAAAAAAAAygcAAAAAAADLBwAAAAAAAAAAAADLBwAAAAAAAMwHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQcAAAAAAADFBwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					4,
					"left_delete",
					null,
					"BAAAAMsHAAAAAAAAywcAAAAAAAABAAAAdMoHAAAAAAAAygcAAAAAAAABAAAAZckHAAAAAAAAyQcAAAAAAAABAAAAbMgHAAAAAAAAyAcAAAAAAAABAAAAaw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAcAAAAAAADMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAMgHAAAAAAAAyQcAAAAAAAAAAAAAyQcAAAAAAADKBwAAAAAAAAAAAADKBwAAAAAAAMsHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyAcAAAAAAADIBwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " str"
					},
					"BAAAAMsHAAAAAAAAzAcAAAAAAAAAAAAAzAcAAAAAAADNBwAAAAAAAAAAAADNBwAAAAAAAM4HAAAAAAAAAAAAAM4HAAAAAAAAzwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAywcAAAAAAADLBwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM8HAAAAAAAA0AcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzwcAAAAAAADPBwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					4,
					"left_delete",
					null,
					"BAAAAM8HAAAAAAAAzwcAAAAAAAABAAAAIM4HAAAAAAAAzgcAAAAAAAABAAAAcs0HAAAAAAAAzQcAAAAAAAABAAAAdMwHAAAAAAAAzAcAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0AcAAAAAAADQBwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "html"
					},
					"BAAAAMwHAAAAAAAAzQcAAAAAAAAAAAAAzQcAAAAAAADOBwAAAAAAAAAAAADOBwAAAAAAAM8HAAAAAAAAAAAAAM8HAAAAAAAA0AcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAcAAAAAAADMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANAHAAAAAAAA0QcAAAAAAAAAAAAA0QcAAAAAAADSBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0AcAAAAAAADQBwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " R"
					},
					"AgAAANIHAAAAAAAA0wcAAAAAAAAAAAAA0wcAAAAAAADUBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gcAAAAAAADSBwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "eadFd"
					},
					"BQAAANQHAAAAAAAA1QcAAAAAAAAAAAAA1QcAAAAAAADWBwAAAAAAAAAAAADWBwAAAAAAANcHAAAAAAAAAAAAANcHAAAAAAAA2AcAAAAAAAAAAAAA2AcAAAAAAADZBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AcAAAAAAADUBwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANkHAAAAAAAA2wcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QcAAAAAAADZBwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "rd,"
					},
					"AwAAANoHAAAAAAAA2wcAAAAAAAAAAAAA2wcAAAAAAADcBwAAAAAAAAAAAADcBwAAAAAAAN0HAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gcAAAAAAADaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN0HAAAAAAAA3gcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QcAAAAAAADdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					2,
					"left_delete",
					null,
					"AgAAAN0HAAAAAAAA3QcAAAAAAAABAAAAINwHAAAAAAAA3AcAAAAAAAABAAAALA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gcAAAAAAADeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANwHAAAAAAAA3QcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AcAAAAAAADcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN0HAAAAAAAA3gcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QcAAAAAAADdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					2,
					"left_delete",
					null,
					"AgAAAN0HAAAAAAAA3QcAAAAAAAABAAAAINwHAAAAAAAA3AcAAAAAAAABAAAALA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gcAAAAAAADeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAN0HAAAAAAAA3gcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QcAAAAAAADdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "\n\nconsole.log"
					},
					"EAAAAN4HAAAAAAAA3wcAAAAAAAAAAAAA3wcAAAAAAADhBwAAAAAAAAAAAADhBwAAAAAAAOIHAAAAAAAAAAAAAOIHAAAAAAAA5AcAAAAAAAAAAAAA3wcAAAAAAADfBwAAAAAAAAIAAAAgIOIHAAAAAAAA4wcAAAAAAAAAAAAA4wcAAAAAAADkBwAAAAAAAAAAAADkBwAAAAAAAOUHAAAAAAAAAAAAAOUHAAAAAAAA5gcAAAAAAAAAAAAA5gcAAAAAAADnBwAAAAAAAAAAAADnBwAAAAAAAOgHAAAAAAAAAAAAAOgHAAAAAAAA6QcAAAAAAAAAAAAA6QcAAAAAAADqBwAAAAAAAAAAAADqBwAAAAAAAOsHAAAAAAAAAAAAAOsHAAAAAAAA7AcAAAAAAAAAAAAA7AcAAAAAAADtBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gcAAAAAAADeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAO0HAAAAAAAA7wcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7QcAAAAAAADtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAO4HAAAAAAAA8AcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7gcAAAAAAADuBwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "html"
					},
					"BAAAAO8HAAAAAAAA8AcAAAAAAAAAAAAA8AcAAAAAAADxBwAAAAAAAAAAAADxBwAAAAAAAPIHAAAAAAAAAAAAAPIHAAAAAAAA8wcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7wcAAAAAAADvBwAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPQHAAAAAAAA9QcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9AcAAAAAAAD0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " html"
					},
					"BQAAAPUHAAAAAAAA9gcAAAAAAAAAAAAA9gcAAAAAAAD3BwAAAAAAAAAAAAD3BwAAAAAAAPgHAAAAAAAAAAAAAPgHAAAAAAAA+QcAAAAAAAAAAAAA+QcAAAAAAAD6BwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9QcAAAAAAAD1BwAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPsHAAAAAAAA/AcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+wcAAAAAAAD7BwAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJkAAAAAAAAAmgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJoAAAAAAAAAnAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "-v"
					},
					"AgAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwAAAAAAAACbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAngAAAAAAAACeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"paste",
					null,
					"AgAAAKcAAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAGAQAAAAAAAEMAAABodHRwczovL3NlcnZpY2UucG9zdC5jaC92Z2trbHAvaW5mby9pbmZvcm1hdGlvbmVuL1Byb2R1a3RlQW56ZWlnZW4v",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwAAAAAAAADqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"left_delete",
					null,
					"AQAAAB8FAAAAAAAAHwUAAAAAAAB3AgAAICAgICAnLUgnLAogICAgICAnY29va2llOiB1c2VyX3Byb2ZpbGVfcHJvZmlsZUluZm9fbG9naW5TdGF0dXNDb29raWU9dW5kZWZpbmVkOyB4LXVuYmx1LWRldmljZT0iazMwdTVURk1SWGU5Y0hKNXJjUnB5dyI7IHVzZXJfcHJvZmlsZV9hdHRyaWJ1dGVzX3ByaW1hcnlTZWdtZW50PXVua25vd247IE5QS2xwaXBTZXNzaW9uPTYwMmMxMWFjMTc5MUxGMXJOM2VFcWVrYkl4VkJFWG9hb09qUjk3dzhsbUxIUWUxWXhKNnhqREFHeUs7IFNDX0FOQUxZVElDU19HTE9CQUxfQ09PS0lFPTU2OWUzZGIyYjkxNDQxYTY5YmM4MzY5NjI3ZDdmOWZmfEZhbHNlOyB1dGFnX21haW49dl9pZDowMTdlYTMxYWUwMGEwMDFjNDA5OWZiN2ZhYzMxMDUwNjgwMDVmMDYwMDBiZDAkX3NuOjEkX3NzOjAkX3N0OjE2NDM0MTU5OTQwNDckc2VzX2lkOjE2NDM0MTM5NTQ1NzElM0JleHAtc2Vzc2lvbiRfcG46MTMlM0JleHAtc2Vzc2lvbicsCiAgICAgICctLWRhdGEtcmF3JywKICAgICAgJ2YwZDg1NDY1MzhkNTIyPTJmYjMxZjU1MzUzYTRiN2U4YTM5NDEyNmVjZTcwYzIwJmJiMzg2NTM4ZDUyMjY5PTAmZjdkYzk5YmRhYzI4ODM9MSZJbmZvSW50LkRlc3RpbmF0aW9uR2V3YWVobHQ9MTI4NTU5NDgzJkluZm9JbnQuR2V3aWNodD0xLjAwMCcsCg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwUAAAAAAACWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"right_delete",
					null,
					"AQAAAIoCAAAAAAAAigIAAAAAAABFAAAAICAgICAnLUgnLAogICAgICAnY29udGVudC10eXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAog",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigIAAAAAAADPAgAAAAAAAAAAAAAAACBA"
				],
				[
					146,
					1,
					"cut",
					null,
					"AQAAAMUDAAAAAAAAxQMAAAAAAAC1AAAAICAgICAnc2VjLWZldGNoLXNpdGU6IHNhbWUtb3JpZ2luJywKICAgICAgJy1IJywKICAgICAgJ3NlYy1mZXRjaC1tb2RlOiBuYXZpZ2F0ZScsCiAgICAgICctSCcsCiAgICAgICdzZWMtZmV0Y2gtdXNlcjogPzEnLAogICAgICAnLUgnLAogICAgICAnc2VjLWZldGNoLWRlc3Q6IGRvY3VtZW50JywKICAgICAgJy1IJywKIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegQAAAAAAADFAwAAAAAAAAAAAAAAACBA"
				],
				[
					152,
					1,
					"right_delete",
					null,
					"AQAAABkDAAAAAAAAGQMAAAAAAAClAAAAJy1IJywKICAgICAgJ2FjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JywKICAgICAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQMAAAAAAAC+AwAAAAAAAAAAAAAAAEhA"
				],
				[
					155,
					1,
					"cut",
					null,
					"AQAAAFADAAAAAAAAUAMAAAAAAAA1AAAAJy1IJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZTogZW4tVVMsZW47cT0wLjknLAogICAgICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQMAAAAAAABQAwAAAAAAAAAAAAAAAEhA"
				],
				[
					157,
					1,
					"cut",
					null,
					"AQAAABkDAAAAAAAAGQMAAAAAAAA3AAAAJy1IJywKICAgICAgJ3JlZmVyZXI6IGh0dHBzOi8vc2VydmljZS5wb3N0LmNoLycsCiAgICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUAMAAAAAAAAZAwAAAAAAAAAAAAAAAEhA"
				],
				[
					161,
					1,
					"right_delete",
					null,
					"AQAAAA8BAAAAAAAADwEAAAAAAACAAQAAJy1IJywKICAgICAgJ2F1dGhvcml0eTogc2VydmljZS5wb3N0LmNoJywKICAgICAgJy1IJywKICAgICAgJ2NhY2hlLWNvbnRyb2w6IG1heC1hZ2U9MCcsCiAgICAgICctSCcsCiAgICAgICdzZWMtY2gtdWE6ICIoTm90KEE6QnJhbmQiO3Y9IjgiLCAiQ2hyb21pdW0iO3Y9Ijk4IiwgIkdvb2dsZSBDaHJvbWUiO3Y9Ijk4IicsCiAgICAgICctSCcsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlOiA/MCcsCiAgICAgICctSCcsCiAgICAgICdzZWMtY2gtdWEtcGxhdGZvcm06ICJMaW51eCInLAogICAgICAnLUgnLAogICAgICAndXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0czogMScsCiAgICAgICctSCcsCiAgICAgICdvcmlnaW46IGh0dHBzOi8vc2VydmljZS5wb3N0LmNoJywKICAgICAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwIAAAAAAAAPAQAAAAAAAAAAAAAAAEhA"
				]
			]
		},
		{
			"file": "test-diagram.js",
			"settings":
			{
				"buffer_size": 1290,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAO8FAAAAAAAA7wUAAAAAAAAhBAAACiAgY29uc29sZS5sb2coJ29yaWdpbicsIG9yaWdpbik7CgogIGxldCBtYXQ4ID0gbmV3IE1hdChtYXQuc2l6ZSwgQ1ZfOFVDMSk7CiAgbGV0IG1hdDE2ID0gbmV3IE1hdChtYXQuc2l6ZSwgQ1ZfMTZVQzEpOwogIGxldCBtYXQzMiA9IG5ldyBNYXQobWF0LnNpemUsIENWXzMyRkMxKTsKICBsZXQgbWF0NjQgPSBuZXcgTWF0KG1hdC5zaXplLCBDVl82NEZDMSk7CgogIGZ1bmN0aW9uIE1ha2VMaW5lSXRlcmF0b3IobWF0KSB7CiAgICBsZXQgbGkgPSBuZXcgTGluZUl0ZXJhdG9yKG1hdCwgbmV3IFBvaW50KDAsIDApLCBuZXcgUG9pbnQobWF0LmNvbHMgLSAxLCBtYXQucm93cyAtIDEpKTsKICAgIGNvbnNvbGUubG9nKCdMaW5lSXRlcmF0b3IuZXJyJywgbGkuZXJyKTsKICAgIGNvbnN0IHsgcHRyLCBwdHIwIH0gPSBsaTsKCiAgICBsaS5wb3N0SW5jcigpOwogICAgLy8gIGxpLnByZUluY3IoKTsKICAgIC8qICBsaS5wcmVJbmNyKCk7CiAgbGkucHJlSW5jcigpOwogIGNvbnNvbGUubG9nKCdsaS5wb3N0SW5jcigpJywgbGkucG9zdEluY3IoKSk7CiovCiAgICBsaS5wb3N0SW5jcigpOwogICAgbGkucG9zdEluY3IoKTsKICAgIGxpLnBvc3RJbmNyKCk7CiAgICBjb25zdCB7IGNvdW50LCBlbGVtU2l6ZSwgZXJyLCBtaW51c0RlbHRhLCBtaW51c1NoaWZ0LCBtaW51c1N0ZXAsIHAsIHBsdXNEZWx0YSwgcGx1c1NoaWZ0LCBwbHVzU3RlcCwgcHRtb2RlLCBzdGVwIH0gPSBsaTsKCiAgICBjb25zb2xlLmxvZygnTGluZUl0ZXJhdG9yJywgeyBjb3VudCwgZWxlbVNpemUsIGVyciwgbWludXNEZWx0YSwgbWludXNTaGlmdCwgbWludXNTdGVwLCBwLCBwbHVzRGVsdGEsIHBsdXNTaGlmdCwgcGx1c1N0ZXAsIHB0bW9kZSwgcHRyLCBwdHIwLCBzdGVwIH0pOwogICAgY29uc29sZS5sb2coJ2xpLnB0ciAtIGxpLnB0cjAnLCBsaS5wdHIgLSBsaS5wdHIwKTsKICAgIGNvbnNvbGUubG9nKCdtYXQucHRyKDApJywgbWF0LnB0cigwKSk7CiAgfQoKICBNYWtlTGluZUl0ZXJhdG9yKG1hdDgpOwogIE1ha2VMaW5lSXRlcmF0b3IobWF0MTYpOwogIE1ha2VMaW5lSXRlcmF0b3IobWF0MzIpOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAKAAAAAAAA7wUAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAlwUAAAAAAAAAAAAAlwUAAAAAAACXBQAAAAAAAEMGAABpbXBvcnQgeyBBeGlzUG9pbnRzLCBEcmF3QXhpcywgT3JpZ2luLCBEcmF3Q3Jvc3MsIEdldFJlY3QsIE1heCwgWCwgWSwgRmxpcCB9IGZyb20gJy4vZGlhZ3JhbS5qcyc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgUG9pbnQsIFNpemUsIFJlY3QsIExpbmUsIFRpY2tNZXRlciwgTWF0LCBEcmF3LCBpbXdyaXRlLCBDVl84VUMzLCBDVl84VUMxLCBDVl8xNlVDMSwgQ1ZfMzJGQzEsIENWXzY0RkMxLCBGSUxMRUQsIENWX1JHQiwgTGluZUl0ZXJhdG9yIH0gZnJvbSAnb3BlbmN2JzsKaW1wb3J0IHsgVGV4dFN0eWxlLCBEcmF3VGV4dCB9IGZyb20gJy4vcWpzLW9wZW5jdi9qcy9jdkhpZ2hHVUkuanMnOwoKZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoewogICAgaW5zcGVjdE9wdGlvbnM6IHsgbWF4QXJyYXlMZW5ndGg6IDEwMCwgY29sb3JzOiB0cnVlLCBkZXB0aDogSW5maW5pdHksIGNvbXBhY3Q6IDAsIGN1c3RvbUluc3BlY3Q6IHRydWUgfQogIH0pOwoKICBsZXQgZm9udEZpbGUgPSAncWpzLW9wZW5jdi9NaXNjRml4ZWRTQzYxMy50dGYnLAogICAgZm9udFNpemUgPSAxMjsKCiAgbGV0IGZvbnQgPSBuZXcgVGV4dFN0eWxlKGZvbnRGaWxlLCBmb250U2l6ZSk7CgogIGxldCBzaXplID0gZm9udC5zaXplKCdYJyk7CgogIGxldCBtYXQgPSBuZXcgTWF0KFs2NDAsIDQ4MF0sIENWXzhVQzMpOwogIGxldCBhcmVhID0gbmV3IFJlY3QoMCwgMCwgLi4ubWF0LnNpemUpLmluc2V0KDIwKTsKICBsZXQgZGlhZ3JhbU1hdCA9IG1hdChhcmVhKTsKCiAgY29uc29sZS5sb2coJ2FyZWEnLCBhcmVhKTsKCiAgRHJhdy5yZWN0YW5nbGUoZGlhZ3JhbU1hdCwgbmV3IFBvaW50KDAsIDApLCBuZXcgUG9pbnQoLi4uZGlhZ3JhbU1hdC5zaXplKSwgWzI1NSwgMjU1LCAyNTVdLCBGSUxMRUQpOwoKICBsZXQgYXhlcyA9IHsKICAgIHg6IEF4aXNQb2ludHMoMTAwLCAxMCwgWCwgZm9udCwgZGlhZ3JhbU1hdC5zaXplKSwKICAgIHk6IEF4aXNQb2ludHMoMTAwLCAxMCwgWSwgZm9udCwgZGlhZ3JhbU1hdC5zaXplKQogIH07CgogIGxldCByZWN0ID0gR2V0UmVjdChkaWFncmFtTWF0LCBheGVzLngsIGF4ZXMueSwgZm9udCk7CiAgLy9jb25zb2xlLmxvZygncmVjdCcsIHJlY3QpOwoKICBsZXQgb3JpZ2luID0gT3JpZ2luKGRpYWdyYW1NYXQsIGF4ZXMueCwgYXhlcy55KTsKICAvLyBEcmF3Q3Jvc3MoZGlhZ3JhbU1hdCwgb3JpZ2luKTsKCiAgY29uc3QgeyB0bCwgYnIgfSA9IEZsaXAoZGlhZ3JhbU1hdCwgcmVjdCk7CiAgLy9jb25zb2xlLmxvZygncmVjdCcsIHsgdGwsIGJyIH0pOwoKICB0bC54ICs9IDE7CiAgdGwueSAtPSAxOwoKICAvL0RyYXcucmVjdGFuZ2xlKGRpYWdyYW1NYXQsIHRsLCBiciwgQ1ZfUkdCKDI1NSwgMCwgMCksIEZJTExFRCwgOCk7CgogIERyYXdBeGlzKGRpYWdyYW1NYXQsIGF4ZXMueCwgcmVjdCwgZm9udCk7CiAgRHJhd0F4aXMoZGlhZ3JhbU1hdCwgYXhlcy55LCByZWN0LCBmb250KTsKCiAgTWFrZUxpbmVJdGVyYXRvcihtYXQ2NCk7CgogIGltd3JpdGUoJ2RpYWdyYW0ucG5nJywgbWF0KTsKfQoKbWFpbiguLi5zY3JpcHRBcmdzKTsK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAQwYAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AQAAAGoEAAAAAAAAuQQAAAAAAABSAAAACiAgbGV0IG9yaWdpbiA9IE9yaWdpbihkaWFncmFtTWF0LCBheGVzLngsIGF4ZXMueSk7CgoKICBjb25zdCB7IHRsLCBiciB9ID0gRmxpcChkaQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoEAAAAAAAAvAQAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJwEAAAAAAAAnQQAAAAAAAAAAAAAnQQAAAAAAACfBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwEAAAAAAAAnAQAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AgAAAOcEAAAAAAAA5wQAAAAAAAABAAAACp0EAAAAAAAAnQQAAAAAAAACAAAAICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgEAAAAAAAA6AQAAAAAAAAAAAAAAABYQA"
				],
				[
					29,
					2,
					"left_delete",
					null,
					"AgAAAEAFAAAAAAAAQAUAAAAAAAAbAAAAICBNYWtlTGluZUl0ZXJhdG9yKG1hdDY0KTsKPwUAAAAAAAA/BQAAAAAAAAEAAAAK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAFAAAAAAAAWwUAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					3,
					"left_delete",
					null,
					"AwAAAAYBAAAAAAAABgEAAAAAAAAMAAAATGluZUl0ZXJhdG9yBQEAAAAAAAAFAQAAAAAAAAEAAAAgBAEAAAAAAAAEAQAAAAAAAAEAAAAs",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYBAAAAAAAAEgEAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAABqBQAAaW1wb3J0IHsgQXhpc1BvaW50cywgRHJhd0F4aXMsIE9yaWdpbiwgRHJhd0Nyb3NzLCBHZXRSZWN0LCBNYXgsIFgsIFksIEZsaXAgfSBmcm9tICcuL2RpYWdyYW0uanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IFBvaW50LCBTaXplLCBSZWN0LCBMaW5lLCBUaWNrTWV0ZXIsIE1hdCwgRHJhdywgaW13cml0ZSwgQ1ZfOFVDMywgQ1ZfOFVDMSwgQ1ZfMTZVQzEsIENWXzMyRkMxLCBDVl82NEZDMSwgRklMTEVELCBDVl9SR0IgfSBmcm9tICdvcGVuY3YnOwppbXBvcnQgeyBUZXh0U3R5bGUsIERyYXdUZXh0IH0gZnJvbSAnLi9xanMtb3BlbmN2L2pzL2N2SGlnaEdVSS5qcyc7CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBtYXhBcnJheUxlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMCwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9CiAgfSk7CgogIGxldCBmb250RmlsZSA9ICdxanMtb3BlbmN2L01pc2NGaXhlZFNDNjEzLnR0ZicsCiAgICBmb250U2l6ZSA9IDEyOwoKICBsZXQgZm9udCA9IG5ldyBUZXh0U3R5bGUoZm9udEZpbGUsIGZvbnRTaXplKTsKCiAgbGV0IHNpemUgPSBmb250LnNpemUoJ1gnKTsKCiAgbGV0IG1hdCA9IG5ldyBNYXQoWzY0MCwgNDgwXSwgQ1ZfOFVDMyk7CiAgbGV0IGFyZWEgPSBuZXcgUmVjdCgwLCAwLCAuLi5tYXQuc2l6ZSkuaW5zZXQoMjApOwogIGxldCBkaWFncmFtTWF0ID0gbWF0KGFyZWEpOwoKICBjb25zb2xlLmxvZygnYXJlYScsIGFyZWEpOwoKICBEcmF3LnJlY3RhbmdsZShkaWFncmFtTWF0LCBuZXcgUG9pbnQoMCwgMCksIG5ldyBQb2ludCguLi5kaWFncmFtTWF0LnNpemUpLCBbMjU1LCAyNTUsIDI1NV0sIEZJTExFRCk7CgogIGxldCBheGVzID0gewogICAgeDogQXhpc1BvaW50cygxMDAsIDEwLCBYLCBmb250LCBkaWFncmFtTWF0LnNpemUpLAogICAgeTogQXhpc1BvaW50cygxMDAsIDEwLCBZLCBmb250LCBkaWFncmFtTWF0LnNpemUpCiAgfTsKCiAgbGV0IHJlY3QgPSBHZXRSZWN0KGRpYWdyYW1NYXQsIGF4ZXMueCwgYXhlcy55LCBmb250KTsKICBsZXQgb3JpZ2luID0gT3JpZ2luKGRpYWdyYW1NYXQsIGF4ZXMueCwgYXhlcy55KTsKCiAgY29uc3QgeyB0bCwgYnIgfSA9IEZsaXAoZGlhZ3JhbU1hdCwgcmVjdCk7CgogIHRsLnggKz0gMTsKICB0bC55IC09IDE7CgogIERyYXdBeGlzKGRpYWdyYW1NYXQsIGF4ZXMueCwgcmVjdCwgZm9udCk7CiAgRHJhd0F4aXMoZGlhZ3JhbU1hdCwgYXhlcy55LCByZWN0LCBmb250KTsKCiAgaW13cml0ZSgnZGlhZ3JhbS5wbmcnLCBtYXQpOwp9CgptYWluKC4uLnNjcmlwdEFyZ3MpOwoKAAAAAAAAAAAKBQAAAAAAAAAAAAAAAAAAAAAAAAoFAAAAAAAAAAAAAAAAAAAAAAAACgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQBAAAAAAAABAEAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "diagram.js",
			"settings":
			{
				"buffer_size": 5129,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nDebugger\n--------\n\n  For getting set up see https://github.com/daveleroy/sublime_debugger\n\n  Version 0.6.0\n\n  - This update changes how the output is handled. Instead of showing up as a tab in the debugger UI the layout is changed to a split view and the output is created in a standard view. This isn't perfect but it at least allows copy/paste/scrolling etc. The output view now also supports some ansi escape codes. You can customize the layout/placement of the view in the settings.\n  - Adds dissasembly syntax for LLDB\n  - Elixer support (@timfjord)\n\n\n  Version 0.5.4\n\n  - Resolve the`$workspaceFolder` variable to first folder project instead of being an alias of `$project_path`  (@rchl)\n  - Fix layout positioning in latest ST dev builds (@rchl)\n  - lldb: Fixes an issue with the integrated terminal handling\n\n\n  Version 0.5.3\n\n  - Tool tips when hovering over debugger controls\n  - Moved Debugger menu item into tools -> Debugger\n  - Improved json schema support for auto completeing adapter configurations (requires LSP-json)\n  - Fixes node json schema contributions\n  - Fixes issue with installing the php adapter\n  - Fixes issues with localized pacakages and json schema/snippets\n  - Fixes issue with external terminal on mac\n\n\n  Version 0.5.2\n\n  - Disable winpty on Windows (needs to be rebuilt for python 3.8)\n\n\n  Version 0.5.1\n\n  - Fixes 64/32 bit windows importing the wrong winpyty versions\n\n\n  Version 0.5.0\n\n  - python: Allow module launch configurations (@anergictcell)\n  - lldb: fixes issue with toggle disassembly\n  - ruby: added adapter (requires readapt)\n\n  - The install adapter menu now checks installed adapters for updates (for most adapters)\n  - The install adapter menu now has a link to each adapters documentations\n\n  - Added 'Debugger: Clear Breakpoints' command that clears all breakpoints\n\n  - Support for exception breakpoint filter conditions (not all adapters support this)\n  - Support for debug session hierarchies which is going to be required for some complex adapter setups such as vscode-debug-js\n  - Support the \"clipboard\" context when copying a variables value\n\n  - When expanding a variable display a loading indicator when the variables children are fetched.\n  - Show error message inline when expanding a variable fails\n  - Allow expanding/collapsing a debug session\n  - Improved handling of stack frames that marked as labels\n  - Improved handling of stack frames that are marked as deemphasized or their source is deemphasized\n  - Fixes integrated terminal\n\n  For a full list of changes see https://github.com/daveleroy/sublime_debugger/commits\n\n\n  Version 0.4.1\n\n  - Adds explicit font setting for debugger panel\n\n\n  Version 0.4.0\n\n  - debugger_configuration replaces debug.configurations and is now defined at the root of the .sublime-project instead of inside settings\n  - Adds support for tasks see https://github.com/daveleroy/sublime_debugger#tasks\n  - Adds support for pre_debug_task and post_debug_task which can be used to build etc\n  - Adds schema support for LSP-json for auto completeing adapter configurations (see https://github.com/sublimelsp/LSP-json)\n  - Improvements to lldb adapter adding toggle disassembly, display options, dereference options\n  - Clicking a terminal panel when already selected now shows an output panel with the entire contents\n  - Renamed a bunch of commands (so if you bound any commands check them)\n  - Node adapter now has snippets\n  - Fixes issues with latest release of lldb adapter\n  - Fixes default ui scale accross platforms\n\n\n  Version 0.3.1\n\n  - Fixes issue with sizing and alignment of panels on windows\n  - Fixes path of go adapter\n\n\n  Version 0.3.0\n\n  - Initial support for multiple debug sessions\n  - Use debugpy instead of ptvsd for python adapter\n  - Right align line numbers in variables/callstack panel\n  - Improved layout of panels\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.2\n\n  - Show dialog with error message when launching fails (to match vscode)\n  - In multi-threaded programs the reason for why a specific thread was stopped is now only displayed on that thread even if all threads were stopped\n  - If running a build with `sublime_build` in the configuration don't start debugging if the build fails with an exit code\n  - Fixes issue with pause not working\n  - Fixes rendering performance regression\n  - Fixes gutter icons on windows\n\n\n  Version 0.2.1\n\n  - Debugging with a single thread now just displays the stack frames without the thread header\n  - When launching a configuration and the adapter is not installed offer to install it\n  - When auto selecting a stack frame prefer the first none subtle stack frame\n  - Fixes call stack layout when encountering long stack frame names\n  - Fixes various issues with multi threaded debugging\n  - Fixes hover providers\n\n\n  Version 0.2.0\n\n  - Support for column breakpoints (requires adapter support)\n  - Support for data breakpoints (requires adapter support, currently only lldb?)\n  - Left-click gutter now toggles breakpoints, right-clicking a breakpoint allows editing/advanced options\n  - Watch expressions\n  - Loaded Modules/Sources panels\n  - Adds Node debug adapter (@appelgriebsch)\n  - External terminal support. Terminal on Mac (Needs support for Windows/Linux) or Sublime's Terminus package.\n  - Integrated terminal now strips ascii control sequences \n  - Settings button\n  - Show currently installed version of an adapter, show download progress when installing an adapter\n  - Fixes issues that sometimes occurred installing/reinstalling adapters\n  - Fixes issues with reloading plugin\n\n\n  Version 0.1.8\n\n  - Fixes core not defined error\n\n\n  Version 0.1.7\n\n  - Allow setting logging options in settings\n  - Updated url for vscode-firefox-debugger (@appelgriebsch)\n  - Fixes issue preventing Debugger: Install Adapters from being run from the command palette\n  - Fixes issue where some debug adapters were failing to be fully unzipped on Windows because of long paths\n\n\n  Version 0.1.6\n\n  - Adds run to cursor command\n  - Fixes issue preventing installing debug adapters\n\n\n  Version 0.1.5\n\n  - Fixes issue that prevented debugging on windows\n\n\n  Version 0.1.4\n\n  - New styling of panels and updated layout to better support temporary panels created for build results/integrated terminal (and in the future allow customizing the layout of the panels)\n  - New console rendering code to support text wrapping and build results/integrated terminal\n  - Support internal terminal requests to allow program input. Requires configuration changes to use this feature which depends on the adapter in question. (LLVM uses \"terminal\": \"integrated\")\n  - Allow defining platform specific configuration settings with a top level object called \"linux\", \"osx\", or \"windows\" in your configuration. Same as vscode \n  - Fixes issue where hover providers/autocomplete/run command was not working for some debug adapters \n  - Fixes issue where using $file and other variables in a configuration had their values expanded when the debugger was opened not when the debugger was started\n  - Fixes some wonkiness that occurred when stepping the debugger that caused it to not update correctly\n\n\n  Version 0.1.3\n\n  - When attempting to open the debugger in a window without a sublime project prompt the user to create one.\n  - Fixes some other minor bugs and configuration issues\n\n\n  Version 0.1.0\n\n  - Adds package control support",
			"settings":
			{
				"buffer_size": 7494,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "Package Control Messages\n========================\n\nDebugger\n--------\n\n  For getting set up see https://github.com/daveleroy/sublime_debugger\n\n  Version 0.6.0\n\n  - This update changes how the output is handled. Instead of showing up as a tab in the debugger UI the layout is changed to a split view and the output is created in a standard view. This isn't perfect but it at least allows copy/paste/scrolling etc. The output view now also supports some ansi escape codes. You can customize the layout/placement of the view in the settings.\n  - Adds dissasembly syntax for LLDB\n  - Elixer support (@timfjord)\n\n\n  Version 0.5.4\n\n  - Resolve the`$workspaceFolder` variable to first folder project instead of being an alias of `$project_path`  (@rchl)\n  - Fix layout positioning in latest ST dev builds (@rchl)\n  - lldb: Fixes an issue with the integrated terminal handling\n\n\n  Version 0.5.3\n\n  - Tool tips when hovering over debugger controls\n  - Moved Debugger menu item into tools -> Debugger\n  - Improved json schema support for auto completeing adapter configurations (requires LSP-json)\n  - Fixes node json schema contributions\n  - Fixes issue with installing the php adapter\n  - Fixes issues with localized pacakages and json schema/snippets\n  - Fixes issue with external terminal on mac\n\n\n  Version 0.5.2\n\n  - Disable winpty on Windows (needs to be rebuilt for python 3.8)\n\n\n  Version 0.5.1\n\n  - Fixes 64/32 bit windows importing the wrong winpyty versions\n\n\n  Version 0.5.0\n\n  - python: Allow module launch configurations (@anergictcell)\n  - lldb: fixes issue with toggle disassembly\n  - ruby: added adapter (requires readapt)\n\n  - The install adapter menu now checks installed adapters for updates (for most adapters)\n  - The install adapter menu now has a link to each adapters documentations\n\n  - Added 'Debugger: Clear Breakpoints' command that clears all breakpoints\n\n  - Support for exception breakpoint filter conditions (not all adapters support this)\n  - Support for debug session hierarchies which is going to be required for some complex adapter setups such as vscode-debug-js\n  - Support the \"clipboard\" context when copying a variables value\n\n  - When expanding a variable display a loading indicator when the variables children are fetched.\n  - Show error message inline when expanding a variable fails\n  - Allow expanding/collapsing a debug session\n  - Improved handling of stack frames that marked as labels\n  - Improved handling of stack frames that are marked as deemphasized or their source is deemphasized\n  - Fixes integrated terminal\n\n  For a full list of changes see https://github.com/daveleroy/sublime_debugger/commits\n\n\n  Version 0.4.1\n\n  - Adds explicit font setting for debugger panel\n\n\n  Version 0.4.0\n\n  - debugger_configuration replaces debug.configurations and is now defined at the root of the .sublime-project instead of inside settings\n  - Adds support for tasks see https://github.com/daveleroy/sublime_debugger#tasks\n  - Adds support for pre_debug_task and post_debug_task which can be used to build etc\n  - Adds schema support for LSP-json for auto completeing adapter configurations (see https://github.com/sublimelsp/LSP-json)\n  - Improvements to lldb adapter adding toggle disassembly, display options, dereference options\n  - Clicking a terminal panel when already selected now shows an output panel with the entire contents\n  - Renamed a bunch of commands (so if you bound any commands check them)\n  - Node adapter now has snippets\n  - Fixes issues with latest release of lldb adapter\n  - Fixes default ui scale accross platforms\n\n\n  Version 0.3.1\n\n  - Fixes issue with sizing and alignment of panels on windows\n  - Fixes path of go adapter\n\n\n  Version 0.3.0\n\n  - Initial support for multiple debug sessions\n  - Use debugpy instead of ptvsd for python adapter\n  - Right align line numbers in variables/callstack panel\n  - Improved layout of panels\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.2\n\n  - Show dialog with error message when launching fails (to match vscode)\n  - In multi-threaded programs the reason for why a specific thread was stopped is now only displayed on that thread even if all threads were stopped\n  - If running a build with `sublime_build` in the configuration don't start debugging if the build fails with an exit code\n  - Fixes issue with pause not working\n  - Fixes rendering performance regression\n  - Fixes gutter icons on windows\n\n\n  Version 0.2.1\n\n  - Debugging with a single thread now just displays the stack frames without the thread header\n  - When launching a configuration and the adapter is not installed offer to install it\n  - When auto selecting a stack frame prefer the first none subtle stack frame\n  - Fixes call stack layout when encountering long stack frame names\n  - Fixes various issues with multi threaded debugging\n  - Fixes hover providers\n\n\n  Version 0.2.0\n\n  - Support for column breakpoints (requires adapter support)\n  - Support for data breakpoints (requires adapter support, currently only lldb?)\n  - Left-click gutter now toggles breakpoints, right-clicking a breakpoint allows editing/advanced options\n  - Watch expressions\n  - Loaded Modules/Sources panels\n  - Adds Node debug adapter (@appelgriebsch)\n  - External terminal support. Terminal on Mac (Needs support for Windows/Linux) or Sublime's Terminus package.\n  - Integrated terminal now strips ascii control sequences \n  - Settings button\n  - Show currently installed version of an adapter, show download progress when installing an adapter\n  - Fixes issues that sometimes occurred installing/reinstalling adapters\n  - Fixes issues with reloading plugin\n\n\n  Version 0.1.8\n\n  - Fixes core not defined error\n\n\n  Version 0.1.7\n\n  - Allow setting logging options in settings\n  - Updated url for vscode-firefox-debugger (@appelgriebsch)\n  - Fixes issue preventing Debugger: Install Adapters from being run from the command palette\n  - Fixes issue where some debug adapters were failing to be fully unzipped on Windows because of long paths\n\n\n  Version 0.1.6\n\n  - Adds run to cursor command\n  - Fixes issue preventing installing debug adapters\n\n\n  Version 0.1.5\n\n  - Fixes issue that prevented debugging on windows\n\n\n  Version 0.1.4\n\n  - New styling of panels and updated layout to better support temporary panels created for build results/integrated terminal (and in the future allow customizing the layout of the panels)\n  - New console rendering code to support text wrapping and build results/integrated terminal\n  - Support internal terminal requests to allow program input. Requires configuration changes to use this feature which depends on the adapter in question. (LLVM uses \"terminal\": \"integrated\")\n  - Allow defining platform specific configuration settings with a top level object called \"linux\", \"osx\", or \"windows\" in your configuration. Same as vscode \n  - Fixes issue where hover providers/autocomplete/run command was not working for some debug adapters \n  - Fixes issue where using $file and other variables in a configuration had their values expanded when the debugger was opened not when the debugger was started\n  - Fixes some wonkiness that occurred when stepping the debugger that caused it to not update correctly\n\n\n  Version 0.1.3\n\n  - When attempting to open the debugger in a window without a sublime project prompt the user to create one.\n  - Fixes some other minor bugs and configuration issues\n\n\n  Version 0.1.0\n\n  - Adds package control support"
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/filesystem.js",
			"settings":
			{
				"buffer_size": 27843,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 184802,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/eagle/node.js",
			"settings":
			{
				"buffer_size": 15380,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/qjs-opencv",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/diagram.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/printer.js",
		"/home/roman/Projects/plot-cv/jack-session-client.c",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/mics.js",
		"/home/roman/Projects/plot-cv/create-tamper.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/test-diagram.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser2.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/time-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point_iterator.hpp",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/JSBindings.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/Functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/date-helpers.js",
		"/home/roman/Projects/plot-cv/scripts/collapse-imports.sh",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/eda/circuitjs.js",
		"/home/roman/Projects/plot-cv/lib/eda/values.js",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/an-tronics/eagle/Headphone-Amplifier-ClassAB-alt.sch",
		"/home/roman/Projects/plot-cv/lib/json/path.js",
		"/home/roman/Projects/plot-cv/commands.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/json/diff.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/plot-cv/lib/grammars/CSV.g4",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/test-rpc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/defs.cmake",
		"/home/roman/Projects/plot-cv/quickjs/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger-transport-win.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/contours-802.json",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger-transport-unix.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/lib/build/compileCommand.js",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/contours-801.json",
		"/home/roman/Projects/plot-cv/lib/dom/xpath.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/test-css3.js",
		"/home/roman/Projects/plot-cv/lib/parse/grammar.js",
		"/home/roman/Projects/plot-cv/list-exports.js",
		"/home/roman/Projects/plot-cv/test-parse.js",
		"/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
		"/home/roman/Projects/plot-cv/lib/grammars/css3.g4",
		"/home/roman/Projects/plot-cv/ini-grammar.js",
		"/home/roman/Projects/plot-cv/test-ini.js",
		"/home/roman/Projects/plot-cv/lib/parse/fn.js",
		"/home/roman/Projects/plot-cv/grammar-css3.js",
		"/home/roman/Projects/plot-cv/test-childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test-css3.js",
		"/home/roman/Projects/plot-cv/lib/xml/parse.js",
		"/home/roman/Projects/plot-cv/lib/xml/util.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/cmake/imgui-viewer.cmake",
		"/home/roman/Projects/plot-cv/cmake/highgui-viewer.cmake",
		"/home/roman/Projects/plot-cv/test-ecmascript2.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript.js",
		"/home/roman/Projects/plot-cv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/lib/parse/lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/fontsample.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/cmake/OpenCV.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/image-helpers.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/test-line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/lib/pointer.js",
		"/home/roman/Projects/plot-cv/lib/preact.m.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/circuitjs1-1.2.2/modified_files/CirSim.java",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/lib/iterator/helpers.js",
		"/home/roman/Projects/plot-cv/lib/iterable.js",
		"/home/roman/Projects/plot-cv/lib/iterator.js",
		"/home/roman/Projects/plot-cv/test-mmap.js"
	],
	"find":
	{
		"height": 47.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"cacheFields",
			"Location",
			"GetLoc",
			"gettok",
			" matchStatement",
			"'eof'",
			" parseTempl",
			"gettok",
			"revert",
			"isTemplateLiteral",
			"matchTemplateLiteral",
			"gettok",
			"\\.lex\\(",
			"this.lexer",
			"Lexer",
			"lexer",
			"gett",
			"Unexpected tok",
			"\\.lex\\(",
			"kind",
			"printObject",
			"ge",
			"get",
			"'get'",
			"printTemplate",
			"WriteFile",
			"'rect",
			"DrawDottedLine",
			"\\[0, 0, 0\\]",
			" \n",
			"GetRect",
			"cv",
			"cv\\.",
			"yAxis",
			"yAxxis",
			", \\[0, 0, 0\\], 1, LINE_AA",
			"rect",
			"_",
			"offset",
			"point_read",
			"js_point_arith",
			"\\*s",
			"POINT_ARITH_ADD",
			"make_shared_module",
			"make_shared",
			"POINT_ARITH_ADD:",
			"POINT_ARITH_ADD",
			"style",
			"Font",
			"Console",
			"main",
			"getDirect",
			"hasDirect",
			"directives",
			"new REPL",
			"directives",
			"help\\(",
			"importModule",
			"new REPL",
			"REPL",
			"ReadBJ",
			"io-help",
			"BJSON",
			"import express from 'express';\nimport * as path from 'path';\nimport * as util from 'util';\nimport Util from './lib/util.js';\nimport bodyParser from 'body-parser';\nimport expressWs from 'express-ws';\nimport { Alea } from './lib/alea.js';\nimport crypto from 'crypto';\nimport fetch from 'isomorphic-fetch';\nimport { exec } from 'promisify-child-process';\nimport * as fs from 'fs';\nimport { promises as fsPromises } from 'fs';\nimport { IfDebug, LogIfDebug, ReadFile, LoadHistory, ReadJSON, MapFile,  WriteFile, WriteJSON,  DirIterator, RecursiveDirIterator, ReadDirRecursive, Filter, FilterImages, SortFiles, StatFiles } from './io-helpers.js';\nimport { Console } from 'console';\nimport SerialPort from 'serialport';\nimport SerialStream from '@serialport/stream';\n//import SerialBinding from '@serialport/bindings';\nimport Socket from './webSocket.js';\nimport WebSocket from 'ws';\nimport PortableFileSystem from './lib/filesystem.js';\nimport PortableChildProcess, { SIGTERM, SIGKILL, SIGSTOP, SIGCONT } from './lib/childProcess.js';\nimport { Repeater } from './lib/repeater/repeater.js';\nimport { Message } from './message.js';\n\n//SerialStream.Binding = SerialBinding;\nlet names = [],\n  dirs = {};\n\nlet filesystem, childProcess;\nconst port = process.env.PORT || 3000;\n\nconst files = new Set();\nconst hash = crypto.createHash('sha1');\n\nconst prng = new Alea();\nprng.seed(Date.now());\nconsole.log('random:', prng.uint32());\nconsole.log('randStr:', Util.randStr(8, null, prng));\n\nlet app = express();\nexpressWs(app, null, { perMessageDeflate: false });\nconst p = path.join(path.dirname(process.argv[1]), '.');\n\nlet mountDirs = ['data', '../an-tronics/eagle', '../insider/eagle', '../lc-meter/eagle', '../pictest/eagle'];\nlet tmpDir = './tmp';\n\nasync function waitChild(proc) {\n  const { pid, stdout, stderr, wait } = proc;\n  console.log('Process ID =', pid);\n  let ret = await wait();\n  console.log('wait() =', ret);\n  return ret;\n}\n\nasync function runMount(dirsIterator) {\n  for await(let dirs of await dirsIterator) {\n    console.log(`runMount`, dirs);\n    console.debug(`Mount ${dirs} to tmp/`);\n\n    let proc = childProcess('./mount-tmp.sh', ['-f', ...Util.unique(dirs || [])], {\n      env: { OPTS: 'auto_unmount,atomic_o_trunc,big_writes,kernel_cache' }\n    });\n    async function readData(output, callback = d => {}) {\n      try {\n        for await(let data of new Repeater((push, stop) => {\n          output.on('data', chunk => push(chunk.toString()));\n          proc.on('exit', stop);\n          //          output.on('close', () => push(null));\n        })) {\n          if(data === null) {\n            console.log('output EOF');\n            //return;\n          }\n          if(typeof data == 'string') data.split(/\\n/g).forEach(line => callback(line));\n        }\n      } catch(e) {\n        return e;\n      }\n    }\n    readData(proc.stdout);\n    readData(proc.stderr, data => console.log('stderr data:', Util.abbreviate(Util.escape(data), Util.getEnv('COLUMNS') || 120)));\n    let exitCode = await waitChild(proc);\n    console.log('exitCode:', exitCode);\n    return exitCode;\n  }\n}\n\nasync function RequestContours(req, res) {\n  const { body } = req;\n  const { contours, frame, width, height } = body;\n  console.log(`${req.url}`, { contours, frame, width, height });\n\n  res.status(200).send('OK');\n\n  Socket.sendAll({ type: 'CONTOURS', origin: '*', recipient: '*', body });\n\n  //  res.json({ status: 'OK' });\n}\n\n//console.log('Serving from', p);\n\nasync function main() {\n  const { stdout, stderr } = process;\n  globalThis.console = new Console({\n    stdout,\n    stderr,\n    inspectOptions: {\n      breakLength: 120,\n      maxStringLength: Infinity,\n      maxArrayLength: 30,\n      compact: 2\n    }\n  });\n  await PortableChildProcess(cp => (childProcess = cp));\n\n  Socket.timeoutCycler();\n\n  /*  let mounter = runMount(\n    new Repeater(async (push, stop) => {\n      while(true) await push(mountDirs);\n    })\n  ).then(exitCode => {\n    console.log('runMount', { exitCode });\n    if(exitCode == 127) {\n      Util.exit(127);\n    }\n    return exitCode;\n  });*/\n  console.log('mountDirs', { mountDirs });\n\n  app.use((req, res, next) => {\n    //    console.log(\"req\", req.url, req.method);\n    next();\n  });\n  app.use(express.text({ type: 'application/xml', limit: '16384kb' }));\n\n  app.use(bodyParser.json({ limit: '200mb' }));\n  app.use(bodyParser.raw({ type: 'text/plain;charset=UTF-8', limit: '524288kb' }));\n  app.use(bodyParser.raw({ type: 'text/plain', limit: '524288kb' }));\n  app.use(bodyParser.raw({ type: 'application/octet-stream', limit: '524288kb' }));\n  app.use(bodyParser.raw({ type: 'multipart/mixed', limit: '16384kb' }));\n\n  app.use((req, res, next) => {\n    res.append('Access-Control-Allow-Origin', `https://api.github.com, http://127.0.0.1:${port}`);\n    res.append('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.append('Access-Control-Allow-Headers', 'Content-Type, Accept, Authorization');\n    res.append('Access-Control-Allow-Credentials', 'true');\n    next();\n  });\n\n  function SendRaw(res, file, data, type = 'application/octet-stream') {\n    res.setHeader('Content-Disposition', `attachment; filename=\"${path.basename(file)}\"`);\n\n    if(type) res.setHeader('Content-Type', type);\n    if(data) return res.send(data);\n    else if(file && typeof file == 'string') {\n      console.log('sendFile', { file });\n      return res.sendFile(file, { root: process.cwd() });\n    }\n  }\n\n  const convertToGerber = async (boardFile, opts = {}) => {\n    console.log('convertToGerber', { boardFile, opts });\n    let { layers = opts.side == 'outline' ? ['Measures'] : opts.drill ? ['Drills', 'Holes'] : [opts.front ? 'Top' : 'Bottom', 'Pads', 'Vias'], format = opts.drill ? 'EXCELLON' : 'GERBER_RS274X', data, fetch = false, front, back } = opts;\n    const base = path.basename(boardFile, '.brd');\n    const formatToExt = (layers, format) => {\n      if(opts.drill || format.startsWith('EXCELLON') || layers.indexOf('Drills') != -1 || layers.indexOf('Holes') != -1) return 'TXT';\n      if(layers.indexOf('Bottom') != -1 || format.startsWith('GERBER')) return opts.side == 'outline' ? 'GKO' : front ? 'GTL' : 'GBL';\n\n      return 'rs274x';\n    };\n    const gerberFile = `./tmp/${base}.${formatToExt(layers, format)}`;\n    const cmd = `eagle -X -d ${format} -o \"${gerberFile}\" \"${boardFile}\" ${layers.join(' ')}`;\n    console.log(`executing '${cmd}'`);\n    const child = exec(`${cmd} 2>&1 0</dev/null`, {});\n    // do whatever you want with `child` here - it's a ChildProcess instance just\n    // with promise-friendly `.then()` & `.catch()` functions added to it!\n    let output = '';\n    child.stdout.on('data', data => (output += data));\n    child.stderr.on('data', data => (output += data));\n    const { stdout, stderr, code, signal } = await child;\n    console.log(`code: ${code}`);\n    //  console.log(`output: ${output}`);\n    if(code !== 0) throw new Error(output);\n    if(output) output = output.replace(/\\s*\\r*\\n/g, '\\n');\n    let result = { code, output };\n    if(opts.fetch) result.data = await (await fsPromises.readFile(GetVFSPath(gerberFile))).toString();\n    result.file = gerberFile;\n    console.log('convertToGerber result =', result);\n    return result;\n  };\n\n  const gerberEndpoint = async (req, res) => {\n    const { body } = req;\n    let { board, save, file: filename, raw, ...opts } = body;\n    let result;\n    console.log('Request /gerber', { board, save, opts });\n    try {\n      result = await convertToGerber(board, opts);\n      if(save) {\n        filename = filename || typeof save == 'string' ? save : null;\n        filename = `tmp/` + filename.replace(/.*\\/([^\\/])*\\.[^\\/.]*$/g, '$1');\n        await fsPromises.writeFile(filename, result.data).then(res => console.log('Wrote file:', res));\n      }\n    } catch(error) {\n      result = { error };\n    }\n    console.log('Response /gerber', Util.filterOutKeys(result, /(output|data)/));\n\n    if(/get/i.test(req.method) || raw) {\n      const { file } = result;\n      return SendRaw(res, file, result.data);\n    }\n    res.json(result);\n  };\n\n  app.get(/^\\/gerber/, gerberEndpoint);\n  app.post(/^\\/gerber/, gerberEndpoint);\n\n  const gerberToGcode = async (gerberFile, allOpts = {}) => {\n    const basename = gerberFile.replace(/.*\\//g, '').replace(/\\.[^.]*$/, '');\n    let { fetch, data, raw, ...opts } = allOpts;\n    opts = {\n      basename,\n      zsafe: '1mm',\n      zchange: '2mm',\n      zwork: '-1mm',\n      zdrill: '-2mm',\n      zcut: '-2mm',\n      'cutter-diameter': '1mm',\n      'drill-feed': 1000,\n      'drill-speed': 10000,\n      'mill-feed': 600,\n      'mill-speed': 16000,\n      'cut-feed': 200,\n      'cut-speed': 10000,\n      'cut-infeed': '1mm',\n\n      'output-dir': './tmp/',\n      ...opts\n    };\n    if(opts.front == undefined && opts.back == undefined && opts.drill == undefined) opts.back = gerberFile;\n    let sides = [];\n\n    for(let side of ['front', 'back', 'drill', 'outline'])\n      if(side in opts) {\n        if(typeof opts[side] != 'string') opts[side] = gerberFile;\n        sides.push(side);\n      }\n\n    if(opts.voronoi && !opts.vectorial) opts.vectorial = 1;\n\n    console.debug(`gerberToGcode`, opts);\n    function makePath(ext, side, base = basename) {\n      return path.join(opts['output-dir'], `${base}_${side}.${ext}`);\n    }\n\n    const params = [...Object.entries(opts)].filter(([k, v]) => typeof v == 'string' || typeof v == 'number' || (typeof v == 'boolean' && v === true)).map(([k, v]) => `--${k}${typeof v != 'boolean' && v != '' ? '=' + v : ''}`);\n    console.log('Request /gcode', { gerberFile, fetch, raw });\n    //console.warn(`gerberToGcode`, Util.abbreviate(gerberFile), { gcodeFile, opts });\n\n    let wait;\n    try {\n      const cmd = `pcb2gcode ${params.join(' ')} 2>&1`;\n      console.warn(`executing '${cmd}'`);\n      const child = exec(cmd, {});\n      // do whatever you want with `child` here - it's a ChildProcess instance just\n      // with promise-friendly `.then()` & `.catch()` functions added to it!\n      let output = '';\n      child.stdout.on('data', data => (output += data));\n      child.stderr.on('data', data => (output += data));\n      wait = await child.catch(error => ({ code: -1, error }));\n\n      const { stdout, stderr, code, signal } = wait;\n      if(output) output = Util.abbreviate(output.replace(/\\s*\\r*\\n/g, '\\n'), 200);\n      console.log('Response /gcode', { stdout, output, sides });\n\n      //   if(code !== 0) throw new Error(output);\n\n      const gcodeFile = makePath('ngc', sides[0]);\n      const svgFile = makePath('svg', sides[0], 'processed');\n\n      for(let [file, to] of sides.map(side => [makePath('svg', side, 'processed'), makePath('svg', side)])) if(fs.existsSync(file)) fs.renameSync(file, to);\n\n      let files = sides.map(side => [side, makePath('ngc', side)]).filter(([side, file]) => fs.existsSync(file));\n      console.log('Response /gcode', { files });\n\n      let result = { code, output, cmd };\n      if(fetch) {\n        for(let [side, file] of files) result[side] = await (await fsPromises.readFile(GetVFSPath(file))).toString();\n      }\n      if(/*/get/i.test(req.method) || */ raw) {\n        const { file } = result;\n        return SendRaw(res, file, result.data);\n      }\n      result.files = Object.fromEntries(files);\n      console.log('Response /gcode', Util.filterOutKeys(result, /(Xoutput|data)/));\n      return result;\n    } catch(error) {\n      Util.putError(error);\n    }\n  };\n\n  let gcodeEndpoint = async (req, res) => {\n    const { body } = req;\n    let { file, ...opts } = body;\n    let result;\n\n    try {\n      result = await gerberToGcode(file, opts).catch(error => ({ error }));\n    } catch(error) {\n      result = { error };\n    } finally {\n      res.json(result);\n    }\n  };\n  app.post(/^\\/gcode/, gcodeEndpoint);\n  app.get(/^\\/gcode/, gcodeEndpoint);\n\n  const GithubListContents = async (owner, repo, dir, filter) => {\n    const url = `https://api.github.com/repos/${owner}/${repo}/contents/${dir}`;\n    console.log(`GITHUB list`, { owner, repo, dir, filter });\n    let response = await fetch(url);\n    let result = JSON.parse(await response.text());\n    console.log('result', result);\n    if(filter) {\n      const re = new RegExp(filter, 'g');\n      result = result.filter(({ name }) => re.test(name));\n    }\n    return result;\n  };\n\n  app.use(async (req, res, next) => {\n    if(!/overrides\\//.test(req.path)) {\n      let relativePath = path.join('.', req.path);\n      let overridePath = path.join('overrides', req.path);\n      let isFile = false;\n\n      await fsPromises\n        .stat(GetVFSPath(relativePath))\n        .then(st => (isFile = st.isFile()))\n        .catch(err => {});\n\n      let override = false;\n\n      if(isFile)\n        await fsPromises\n          .access(GetVFSPath(overridePath), fs.constants.F_OK)\n          .then(() => (override = true))\n          .catch(err => {});\n\n      if(override) {\n        console.log('Static request:', { overridePath, override, res });\n\n        return res.redirect('/' + overridePath);\n      }\n    }\n    if(/lib\\/preact.js/.test(req.url)) req.url = '/lib/preact.mjs';\n\n    if(!/lib\\//.test(req.url)) {\n      const { path, url, method, headers, query, body } = req;\n      false &&\n        console.log(\n          'Static request:',\n          { path, url, method, headers, query, body } /* Object.keys(req), */,\n          ...Util.if(\n            Util.filterOutKeys(req.headers, /(^sec|^accept|^cache|^dnt|-length|^host$|^if-|^connect|^user-agent|-type$|^origin$|^referer$)/),\n            () => [],\n            value => ['headers: ', value],\n            Util.isEmpty\n          )\n        );\n    }\n\n    next();\n  });\n\n  /*  app.use((req, res, next) => {\n    let file = req.url.replace(/^\\/?/, '');\n\n    if(/(data|tmp)/.test(req.url)) {\n      console.log(`Data file '${file}'`);\n      file = file.replace(/^\\/?(data\\/|tmp\\/|)/, '');\n      let dir = dirs[file];\n      if(dir) {\n        console.log('Data file ' + file + ' was requested.');\n      }\n    }\n    next();\n  });*/\n\n  /* app.use((req, res, next) => {\n    console.log('Request', req.url);\n    next();\n  });*/\n\n  let logfile;\n\n  app.use((req, res, next) => {\n    let file = req.url.replace(/^\\/?/, '');\n\n    logfile ??= fs.openSync('server.log', 'a+', 0o644);\n    let str;\n    let now = new Date();\n    str = `${now.toISOString().slice(0, 10).replace(/-/g, '')} ${now.toTimeString().slice(0, 8)} ${req.method.padEnd(4)} ${file}\\n`;\n\n    let written = fs.writeSync(logfile, str, 0, str.length);\n\n    console.log('Request: ' + file, `(${written} bytes written)`);\n\n    if(fs.existsSync(file)) {\n      const re = /[^\\n]*'util'[^\\n]*/g;\n      /*let m,\n        data = fs.readFileSync(file, 'utf-8');\n      if((m = re.exec(data))) {\n        console.log('The file ' + file + ` was requested. (${data.length})`, `match @ ${m.index}: ${m[0]}`);\n      }*/\n\n      files.add(file);\n    }\n    next();\n  });\n  app.use('/static', express.static(path.join(p, 'static')));\n  app.use('/modules', express.static(path.join(p, 'node_modules')));\n  app.use('/htm', express.static(path.join(p, 'htm')));\n  app.use('/node_modules', express.static(path.join(p, 'node_modules')));\n  app.use('/overrides', express.static(path.join(p, 'overrides')));\n  app.use('/components', express.static(path.join(p, 'components')));\n  app.use('/lib', express.static(path.join(p, 'lib')));\n  app.use('/tmp', express.static(path.join(p, 'tmp')));\n\n  app.use('/', express.static(p));\n\n  function FindFile(relative) {\n    for(let mnt of mountDirs) {\n      let file = path.join(mnt, relative);\n      const exists = fs.existsSync(file);\n      //console.log('FILE', file,exists);\n\n      if(exists) return mnt;\n    }\n  }\n\n  app.get(/^\\/?(data|tmp|vfs)\\//, async (req, res) => {\n    const file = req.url.replace(/^\\/?(data|tmp|vfs)\\//, '');\n    const dir = dirs[file] ?? FindFile(file);\n    const p = path.resolve(dir, file);\n    console.log('DATA', file, dir, p);\n    let data = await fsPromises.readFile(p, 'utf-8');\n    return res.type('application/json').status(200).send(data);\n\n    //   return res.sendFile(p);\n  });\n\n  app.get('/favicon.ico', (req, res) =>\n    res.sendFile(path.join(p, 'lib/eagle/icon/eagleicon.ico'), {\n      headers: {\n        'Content-Type': 'image/x-icon'\n      }\n    })\n  );\n  app.get(/\\/[^\\/]*\\.js$/, async (req, res) => res.sendFile(path.join(p, req.path)));\n\n  //app.get('/components.js', async (req, res) => res.sendFile(path.join(p, 'components.js')));\n\n  app.get(/\\/[^\\/]*\\.css$/, async (req, res) =>\n    res.sendFile(path.join(p, 'style.css'), {\n      headers: { 'Content-Type': 'text/css', cacheControl: false }\n    })\n  );\n\n  function GetVFSPath(file) {\n    let dir = dirs[file];\n    let ret = file;\n    if(dir) ret = path.join(dir, file);\n\n    // if(ret != file) console.log('GetVFSPath', dir, file);\n    return ret;\n  }\n\n  async function getDescription(file) {\n    // console.log('getDescription()', { file});\n    let str = await fsPromises.readFile(GetVFSPath(file)).then(r => r.toString());\n    let r = [...Util.matchAll('<(/)?(board|schematic|library)[ >]', str)]\n      .map(m => m.index)\n      .sort((a, b) => a - b)\n      .slice(0, 2);\n    let chunk = str.substring(...r);\n    let a = ['<description>', '</description>'];\n    let indexes = a\n      .map(s => new RegExp(s))\n      .map(re => re.exec(chunk))\n      .map(m => m && m.index);\n    let d = chunk.substring(...indexes);\n    if(d.startsWith('<description')) return Util.decodeHTMLEntities(d.substring(a[0].length));\n    return '';\n  }\n\n  const descMap = Util.weakMapper(getDescription, new Map());\n\n  async function GetFilesList(dir = './tmp', opts = {}) {\n    let { filter = '.*\\\\.(brd|sch|lbr|GBL|GTL|GKO|ngc)$', descriptions = false, names } = opts;\n    const re = new RegExp(filter, 'i');\n    const f = ent => re.test(ent);\n\n    console.log('GetFilesList()', { filter, descriptions }, ...(names ? [names.length] : []));\n\n    let dirmap = {};\n\n    //    if(!names) names = [...(await fsPromises.readdir(dir))].filter(f);\n    dirmap = mountDirs.reduce((acc, dir) => {\n      console.log('ReadDirRecursive', dir);\n      for(let entry of ReadDirRecursive(dir)) {\n        if(entry.endsWith('/')) continue;\n        if(!f(entry)) continue;\n        let relative = entry.startsWith(dir + '/') ? entry.slice(dir.length + 1) : entry;\n        acc[relative] = dir;\n        dirs[relative] = dir;\n      }\n      return acc;\n    }, {});\n\n    //   console.log('dirmap', dirmap);\n    if(!names) names = Object.keys(dirmap);\n    console.log('names', names.length);\n    return Promise.all(\n      names\n        //.map(entry => dirs[entry] +'/'+entry)\n        .reduce((acc, file) => {\n          let dir = dirs[file];\n          let abs = dir + '/' + file;\n          let description = descriptions ? descMap(file) : descMap.get(file);\n          //   console.log('descMap:', util.inspect(descMap, { depth: 1 }));\n          let obj = {\n            name: file,\n            //file,\n            dir: dirs[file]\n          };\n          if(typeof description == 'string') obj.description = description;\n          acc.push(\n            fsPromises\n              .stat(abs)\n              .then(({ ctime, mtime, mode, size }) =>\n                Object.assign(obj, {\n                  mtime: Util.toUnixTime(mtime),\n                  time: Util.toUnixTime(ctime),\n                  mode: `0${(mode & 0x09ff).toString(8)}`,\n                  size\n                })\n              )\n              .catch(err => {})\n          );\n          return acc;\n        }, [])\n    ).then(a => a.filter(i => i != null));\n  }\n\n  function FilesURLs(list) {\n    const base_url = list[0].replace(/\\/[^\\/]*$/, '');\n    const files = list.map(url => url.replace(/.*\\//g, ''));\n    return { base_url, files };\n  }\n  //app.use(\"/serialport\", remoteSerialPort.http({ verbose: true }));\n\n  app.get(/\\/list-serial/, async (req, res) => {\n    const list = await SerialPort.list();\n\n    res.json(list.filter(port => ['manufacturer', 'pnpId', 'vendorId', 'productId'].some(key => port[key])));\n  });\n\n  app.ws('/serial', async (ws, req) => {\n    const { port } = req.body;\n    console.debug('Object.keys(req)', Object.keys(req));\n\n    const duplex = WebSocket.createWebSocketStream(ws, { encoding: 'utf8' });\n\n    let serial = new SerialStream(port || '/dev/tnt1');\n\n    duplex.on('data', async data => {\n      data = data + '' + '\\r\\n';\n\n      console.debug('ws -> serial:', escape(data));\n\n      serial.write(data);\n      serial.flush();\n    });\n\n    serial.on('data', async data => {\n      data = (data + '').replace(/\\r?\\n?$/, '');\n\n      console.debug('serial -> ws:', escape(data));\n      duplex.write(data);\n    });\n\n    console.debug('websocket:', Util.getMethods(ws, Infinity, 0));\n  });\n\n  app.post(/\\/serial/, async (req, res) => {\n    const { body } = req;\n    const { port } = body;\n  });\n  const configFile = 'config.json';\n  const safeStat = Util.tryFunction(\n    f => filesystem.stat(f),\n    st => st,\n    () => {}\n  );\n\n  app.get(/\\/config/, async (req, res) => {\n    let str = '',\n      data = {},\n      time = 0;\n    Util.tryCatch(\n      () => filesystem.readFile(configFile),\n      c => {\n        str = c;\n        let stat = safeStat(configFile);\n        console.log('stat:', stat);\n        if(Util.isObject(stat.mtime)) time = stat.mtime.getTime();\n      },\n      () => (str = '{}')\n    );\n    let config = Util.tryCatch(\n      () => JSON.parse(str),\n      o => o,\n      () => ({})\n    );\n    console.log('config:', config);\n\n    res.json({ config, time, hash: Util.hashString(str) });\n  });\n  app.post(/\\/config/, async (req, res) => {\n    const { body } = req;\n    let text = body.toString();\n    console.log('text:', text);\n    let ret = filesystem.writeFile(configFile, text);\n    console.log('ret:', ret);\n    let stat = safeStat(configFile);\n    res.json({\n      size: ret,\n      time: stat.mtime.getTime(),\n      hash: Util.hashString(text)\n    });\n  });\n\n  app.get(/\\/github/, async (req, res) => {\n    Util.tryCatch(\n      async () => {\n        const { body } = req;\n        const url = Util.parseURL(req.url);\n        const { location, query } = url;\n        let args = location.split(/\\//g).filter(p => !/(^github$|^$)/.test(p));\n        let options = { ...query, ...body };\n\n        if(args.length > 0) {\n          const [owner, repo, dir, filter] = args;\n          Util.weakAssign(options, { owner, repo, dir, filter });\n        }\n\n        console.log(`GET ${location}`, { args, query, options });\n\n        let result;\n        const { owner, repo, dir, filter, tab, after } = options;\n\n        if(owner && repo && dir) result = await GithubListContents(owner, repo, dir, filter && new RegExp(filter, 'g'));\n        /*if(owner && (tab || after))*/ else {\n          let proxyUrl = Util.makeURL({\n            ...url,\n            protocol: 'https',\n            host: 'github.com',\n            location: ['', ...args].join('/')\n          });\n          console.log(`PROXY ${proxyUrl}`);\n\n          let response = await fetch(proxyUrl);\n          let type = response.headers['content-type'];\n\n          console.log(`RESPONSE`, response.url, type);\n          let data = await response.text();\n          res.send(data);\n          //, 200, { headers: { 'content-type': type }});\n          return;\n        }\n\n        res.json(FilesURLs(result.map(file => file.download_url)));\n      },\n      () => {},\n      Util.putError\n    );\n  });\n\n  app.post(/\\/github.*/, async (req, res) => {\n    const { body } = req;\n    let result;\n    const { owner, repo, dir, filter } = body;\n    console.log('POST github', { owner, repo, dir, filter });\n\n    res.json(\n      await GithubListContents(owner, repo, dir, filter && new RegExp(filter, 'g'))\n        .then(result => FilesURLs(result.map(file => file.download_url)))\n        .catch(error => ({ error }))\n    );\n  });\n\n  app.get(/^\\/!urls/, async (req, res) => res.json({ files: [...files].sort() }));\n  app.get(/^\\/files/, async (req, res) => res.json({ files: await GetFilesList() }));\n  app.post(/^\\/(files|list)(.html|)/, async (req, res) => {\n    const { body } = req;\n    let { filter = '.*', descriptions, names } = body;\n    let opts = { filter };\n    if(descriptions) opts.descriptions = descriptions;\n\n    if(names !== undefined) {\n      if(typeof names == 'string') names = names.split(/\\n/g);\n      if(Util.isArray(names)) names = names.map(name => name.replace(/.*\\//g, ''));\n      opts.names = names;\n    }\n    let files = await GetFilesList('tmp', opts);\n    console.log('POST files', util.inspect(files, { breakLength: Infinity, colors: true, maxArrayLength: 10, compact: 1 }));\n    res.json({\n      files\n    });\n  });\n\n  app.get('/index.html', async (req, res) => {\n    let data = await fsPromises.readFile(path.join(p, 'index.html'));\n    res.send(data.toString().replace(/<TS>/g, Util.unixTime() + ''));\n  });\n  app.get('/contours', RequestContours);\n  app.post('/contours', RequestContours);\n\n  app.post('/save', async (req, res, next) => {\n    //   const filename = (req.headers['content-disposition']||'').replace(new RegExp('.*\"([^\"]*)\".*','g'), '$1') || 'output.svg';\n    /*    const filename = path.join(process.cwd(), 'tmp', 'upload-' + Util.toUnixTime(Date.now()) + '.txt');\n    let output = fs.createWriteStream(filename, { autoClose: true, emitClose: true });\n    let s = req.pipe(output);\n    console.log('s', Util.className(s));\n    let data;\n    s.on('close', () => Util.waitFor(1000).then(() => end()));\n\n    //  req.on('end', () => Util.waitFor(500).then(() => end()));\n\n    function end() {\n      data = fs.readFileSync(filename).toString();\n      console.log('req end', { data });\n      res.end(data + '\\n\\nUpload complete');\n      next();\n    }\n*/\n\n    const { body } = req;\n    console.log('req.headers:', req.headers);\n    console.log('body:', Util.abbreviate(body), Util.className(body), Util.inspect(body));\n    console.log('save body:', typeof body == 'string' ? Util.abbreviate(body, 100) : body);\n    let st,\n      err,\n      filename = (req.headers['content-disposition'] || '').replace(new RegExp('.*\"([^\"]*)\".*', 'g'), '$1') || 'output.svg';\n    filename = 'tmp/' + filename.replace(/^tmp\\//, '');\n    await fsPromises\n      .writeFile(filename, body, { mode: 0x0180, flag: 'w' })\n      .then(() => (st = fs.statSync(filename)))\n      .catch(error => (err = error));\n\n    if(err) {\n      console.log('save error:', err);\n      res.json(err);\n    } else {\n      console.log('saved:', filename, `${st.size} bytes`);\n      res.json({ size: st.size, filename });\n    }\n  });\n\n  app.ws('/ws', Socket.endpoint);\n  app.ws('/.websocket', Socket.endpoint);\n  app.ws('/ws/.websocket', Socket.endpoint);\n\n  app.get('/', (req, res) => {\n    res.redirect(302, '/index.html');\n  });\n\n  app.listen(port, () => {\n    console.log(`Ready at http://127.0.0.1:${port}`);\n  });\n}\n/*\ntry {\n  await main();\n} catch(err) {\n  Util.putError(err);\n}*/\nUtil.callMain(main, true);\n",
			"input",
			"ImagePipeline",
			"\"jsm_module_loader",
			"getDirect",
			"directives",
			"\"jsm_mo",
			"\\\\h",
			"historySave",
			"RPATH",
			"RPATH ",
			"pkgcfg_lib_CURL_curl",
			"CURL",
			"link_dir",
			"cmdStart",
			"new REPL",
			"Not an",
			"history",
			"\\[\\^0-9\\]",
			"\\[0-9\\]",
			"isPointer",
			"zlib\\.",
			"\\.log",
			"console.*equest",
			"equest",
			"ListFiles",
			"files[^a-z]",
			"files",
			"inspect\\(",
			"main",
			"DebugFlag",
			"require\\(",
			"app\\.",
			"EagleElement.get",
			"getAll",
			" getAll",
			"getAll",
			"<instance",
			"EagleReference",
			"\\.apply",
			"class extends base",
			"Util\\.",
			" apply",
			"'instances'",
			"'sheet'",
			"GetSheets",
			"getRaw",
			"newProj",
			"lazyProp",
			"newProject",
			"printStatus",
			"printStat",
			"new REPL",
			"Loading",
			"ValueToNumber",
			"await",
			"main",
			"handleKey",
			"WriteJSON",
			"IfDebug",
			"getContextObject",
			"CircuitJS",
			"Wire",
			"Wire\n",
			"CircuitJS"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"CV_RGB(0, 0, 0)",
			"",
			"point",
			"\\\\D",
			"\\\\d",
			"\\.deref",
			"is_alphanumeric_char",
			"is_whitespace_char",
			"length",
			"{ const",
			"{ return",
			"const  {flags}=this;\\nreturn flags",
			"defines",
			"",
			"fs.\\1Sync",
			"define",
			",",
			"file",
			"target_compile_definitions",
			"msg",
			"PmDeviceInfo",
			"export function",
			"libportmidi",
			"\\1//\\2",
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log",
			"puts",
			"export function",
			"type",
			"header.",
			"#000000",
			"a",
			"MakeListCommand",
			"si",
			"pi",
			"plen",
			"slen",
			"pattern[0]",
			"string[0]",
			"string.length",
			"pattern.length"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26606,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/util.js",
							"function_name_status_row": 21,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									771,
									788
								],
								[
									1023,
									1072
								],
								[
									1959,
									1963
								],
								[
									2779,
									2786
								],
								[
									3308,
									3322
								],
								[
									3582,
									3588
								],
								[
									3691,
									3718
								],
								[
									3766,
									3797
								],
								[
									3953,
									3963
								],
								[
									4002,
									4026
								],
								[
									4093,
									4109
								],
								[
									4154,
									4171
								],
								[
									4219,
									4239
								],
								[
									4290,
									4313
								],
								[
									4361,
									4387
								],
								[
									4788,
									4793
								],
								[
									4852,
									4876
								],
								[
									4899,
									4915
								],
								[
									4930,
									4941
								],
								[
									4981,
									4997
								],
								[
									5012,
									5024
								],
								[
									5065,
									5081
								],
								[
									5096,
									5111
								],
								[
									5155,
									5171
								],
								[
									5186,
									5204
								],
								[
									5251,
									5267
								],
								[
									5282,
									5303
								],
								[
									5353,
									5369
								],
								[
									5384,
									5408
								],
								[
									5534,
									5557
								],
								[
									5640,
									5660
								],
								[
									5915,
									5927
								],
								[
									5977,
									5989
								],
								[
									6109,
									6132
								],
								[
									6215,
									6242
								],
								[
									6497,
									6518
								],
								[
									6581,
									6602
								],
								[
									6738,
									6762
								],
								[
									6848,
									6855
								],
								[
									6876,
									6883
								],
								[
									6913,
									6935
								],
								[
									7018,
									7025
								],
								[
									7043,
									7050
								],
								[
									7075,
									7097
								],
								[
									7147,
									7154
								],
								[
									7208,
									7215
								],
								[
									7247,
									7276
								],
								[
									7622,
									7647
								],
								[
									7774,
									7793
								],
								[
									7875,
									7894
								],
								[
									8081,
									8100
								],
								[
									8178,
									8197
								],
								[
									8262,
									8281
								],
								[
									8377,
									8417
								],
								[
									8559,
									8572
								],
								[
									8598,
									8631
								],
								[
									8880,
									8894
								],
								[
									9055,
									9062
								],
								[
									9279,
									9285
								],
								[
									9691,
									9715
								],
								[
									10094,
									10130
								],
								[
									10172,
									10190
								],
								[
									10373,
									10410
								],
								[
									10491,
									10509
								],
								[
									10527,
									10538
								],
								[
									10604,
									10638
								],
								[
									10665,
									10683
								],
								[
									10958,
									11003
								],
								[
									11203,
									11221
								],
								[
									11472,
									11498
								],
								[
									11757,
									11776
								],
								[
									11855,
									11874
								],
								[
									12024,
									12072
								],
								[
									12253,
									12268
								],
								[
									12294,
									12304
								],
								[
									12391,
									12396
								],
								[
									13163,
									13169
								],
								[
									13245,
									13250
								],
								[
									13259,
									13264
								],
								[
									13293,
									13302
								],
								[
									13326,
									13336
								],
								[
									13358,
									13371
								],
								[
									13399,
									13413
								],
								[
									13439,
									13456
								],
								[
									13484,
									13502
								],
								[
									13603,
									13608
								],
								[
									13816,
									13839
								],
								[
									14290,
									14294
								],
								[
									14336,
									14340
								],
								[
									14447,
									14459
								],
								[
									15048,
									15058
								],
								[
									15146,
									15174
								],
								[
									15208,
									15214
								],
								[
									15276,
									15300
								],
								[
									15330,
									15371
								],
								[
									15647,
									15659
								],
								[
									15692,
									15724
								],
								[
									15766,
									15806
								],
								[
									15960,
									15980
								],
								[
									17266,
									17296
								],
								[
									17356,
									17393
								],
								[
									17578,
									17584
								],
								[
									17799,
									17829
								],
								[
									17909,
									17941
								],
								[
									18169,
									18199
								],
								[
									18336,
									18339
								],
								[
									18476,
									18510
								],
								[
									18667,
									18699
								],
								[
									18989,
									19017
								],
								[
									19095,
									19124
								],
								[
									19199,
									19236
								],
								[
									19286,
									19321
								],
								[
									19502,
									19537
								],
								[
									19837,
									19860
								],
								[
									19891,
									19915
								],
								[
									19979,
									20006
								],
								[
									20039,
									20079
								],
								[
									20197,
									20240
								],
								[
									20543,
									20572
								],
								[
									20629,
									20643
								],
								[
									20692,
									20721
								],
								[
									20763,
									20790
								],
								[
									20900,
									20907
								],
								[
									20927,
									20955
								],
								[
									21045,
									21072
								],
								[
									21111,
									21138
								],
								[
									21188,
									21212
								],
								[
									21287,
									21322
								],
								[
									21424,
									21456
								],
								[
									21541,
									21575
								],
								[
									21660,
									21690
								],
								[
									21910,
									21920
								],
								[
									21973,
									21977
								],
								[
									22045,
									22082
								],
								[
									22119,
									22136
								],
								[
									22159,
									22176
								],
								[
									22236,
									22253
								],
								[
									22339,
									22348
								],
								[
									22420,
									22434
								],
								[
									22502,
									22507
								],
								[
									23205,
									23243
								],
								[
									23394,
									23429
								],
								[
									23513,
									23531
								],
								[
									23589,
									23633
								],
								[
									23647,
									23656
								],
								[
									23688,
									23716
								],
								[
									23730,
									23739
								],
								[
									23808,
									23851
								],
								[
									23971,
									24004
								],
								[
									24031,
									24038
								],
								[
									24167,
									24172
								],
								[
									24188,
									24222
								],
								[
									24299,
									24325
								],
								[
									24423,
									24457
								],
								[
									24480,
									24494
								],
								[
									24529,
									24579
								],
								[
									24717,
									24763
								],
								[
									24824,
									24886
								],
								[
									24897,
									24913
								],
								[
									25048,
									25085
								],
								[
									25124,
									25181
								],
								[
									25552,
									25586
								],
								[
									25726,
									25765
								],
								[
									25845,
									25882
								],
								[
									25999,
									26030
								],
								[
									26785,
									26828
								],
								[
									26959,
									26964
								],
								[
									27120,
									27154
								],
								[
									27362,
									27398
								],
								[
									27460,
									27486
								],
								[
									28246,
									28271
								],
								[
									28339,
									28367
								],
								[
									28960,
									28979
								],
								[
									29074,
									29089
								],
								[
									29217,
									29242
								],
								[
									29542,
									29599
								],
								[
									29722,
									29787
								],
								[
									29897,
									29949
								],
								[
									30070,
									30120
								],
								[
									30236,
									30251
								],
								[
									30322,
									30333
								],
								[
									30421,
									30432
								],
								[
									30458,
									30473
								],
								[
									30551,
									30565
								],
								[
									30605,
									30624
								],
								[
									30847,
									30936
								],
								[
									30939,
									31036
								],
								[
									31092,
									31104
								],
								[
									31169,
									31183
								],
								[
									31215,
									31221
								],
								[
									31264,
									31272
								],
								[
									31318,
									31326
								],
								[
									31382,
									31397
								],
								[
									31450,
									31457
								],
								[
									31568,
									31578
								],
								[
									31720,
									31730
								],
								[
									31793,
									31800
								],
								[
									31885,
									31912
								],
								[
									31936,
									31945
								],
								[
									31971,
									31979
								],
								[
									31996,
									32005
								],
								[
									32044,
									32052
								],
								[
									32063,
									32076
								],
								[
									32087,
									32102
								],
								[
									32131,
									32149
								],
								[
									32229,
									32253
								],
								[
									32674,
									32708
								],
								[
									32739,
									32750
								],
								[
									32755,
									32765
								],
								[
									32779,
									32790
								],
								[
									32811,
									32847
								],
								[
									33351,
									33381
								],
								[
									33425,
									33456
								],
								[
									33691,
									33713
								],
								[
									33773,
									33799
								],
								[
									33915,
									33926
								],
								[
									34038,
									34069
								],
								[
									34273,
									34298
								],
								[
									34365,
									34417
								],
								[
									34529,
									34551
								],
								[
									34557,
									34578
								],
								[
									34595,
									34627
								],
								[
									34747,
									34782
								],
								[
									34847,
									34880
								],
								[
									34927,
									34939
								],
								[
									35009,
									35021
								],
								[
									35078,
									35109
								],
								[
									35153,
									35195
								],
								[
									35371,
									35399
								],
								[
									35510,
									35540
								],
								[
									35552,
									35569
								],
								[
									35693,
									35729
								],
								[
									35806,
									35832
								],
								[
									35874,
									35913
								],
								[
									36025,
									36029
								],
								[
									36056,
									36060
								],
								[
									36099,
									36103
								],
								[
									36131,
									36135
								],
								[
									36158,
									36194
								],
								[
									36232,
									36264
								],
								[
									36382,
									36423
								],
								[
									36516,
									36540
								],
								[
									36563,
									36574
								],
								[
									36592,
									36609
								],
								[
									36695,
									36719
								],
								[
									36742,
									36768
								],
								[
									37224,
									37256
								],
								[
									37510,
									37519
								],
								[
									37550,
									37559
								],
								[
									37590,
									37599
								],
								[
									37630,
									37639
								],
								[
									37670,
									37679
								],
								[
									37709,
									37718
								],
								[
									37749,
									37758
								],
								[
									37767,
									37787
								],
								[
									37831,
									37836
								],
								[
									37879,
									37888
								],
								[
									38056,
									38089
								],
								[
									38463,
									38489
								],
								[
									38715,
									38758
								],
								[
									38800,
									38812
								],
								[
									38890,
									38935
								],
								[
									39056,
									39076
								],
								[
									39197,
									39204
								],
								[
									39223,
									39230
								],
								[
									39410,
									39439
								],
								[
									39568,
									39613
								],
								[
									39741,
									39773
								],
								[
									39852,
									39873
								],
								[
									40124,
									40142
								],
								[
									40329,
									40342
								],
								[
									40464,
									40512
								],
								[
									40525,
									40534
								],
								[
									40572,
									40582
								],
								[
									40629,
									40663
								],
								[
									40940,
									40982
								],
								[
									41036,
									41074
								],
								[
									41236,
									41255
								],
								[
									41455,
									41494
								],
								[
									41628,
									41645
								],
								[
									42185,
									42205
								],
								[
									42293,
									42312
								],
								[
									42353,
									42372
								],
								[
									44225,
									44232
								],
								[
									44247,
									44254
								],
								[
									45871,
									45904
								],
								[
									46052,
									46061
								],
								[
									46081,
									46089
								],
								[
									46093,
									46102
								],
								[
									46243,
									46271
								],
								[
									46385,
									46413
								],
								[
									46527,
									46545
								],
								[
									46924,
									46959
								],
								[
									46999,
									47026
								],
								[
									47107,
									47155
								],
								[
									47366,
									47453
								],
								[
									47464,
									47480
								],
								[
									47589,
									47629
								],
								[
									47655,
									47659
								],
								[
									47676,
									47681
								],
								[
									47700,
									47705
								],
								[
									47723,
									47760
								],
								[
									47786,
									47790
								],
								[
									47796,
									47802
								],
								[
									47817,
									47823
								],
								[
									47831,
									47837
								],
								[
									47853,
									47890
								],
								[
									47916,
									47920
								],
								[
									47934,
									47940
								],
								[
									47948,
									47954
								],
								[
									47961,
									47967
								],
								[
									47984,
									48037
								],
								[
									48038,
									48055
								],
								[
									48160,
									48179
								],
								[
									48226,
									48264
								],
								[
									48289,
									48302
								],
								[
									48897,
									48941
								],
								[
									49013,
									49031
								],
								[
									49285,
									49303
								],
								[
									49630,
									49657
								],
								[
									49666,
									49681
								],
								[
									49757,
									49784
								],
								[
									49911,
									49915
								],
								[
									49993,
									50006
								],
								[
									50203,
									50232
								],
								[
									50340,
									50366
								],
								[
									50434,
									50461
								],
								[
									50733,
									50754
								],
								[
									50824,
									50849
								],
								[
									50869,
									50891
								],
								[
									50955,
									50980
								],
								[
									51105,
									51129
								],
								[
									51353,
									51369
								],
								[
									51370,
									51389
								],
								[
									51422,
									51442
								],
								[
									51531,
									51559
								],
								[
									51657,
									51682
								],
								[
									51732,
									51759
								],
								[
									51762,
									51781
								],
								[
									52086,
									52116
								],
								[
									52159,
									52174
								],
								[
									52242,
									52265
								],
								[
									52304,
									52308
								],
								[
									52348,
									52352
								],
								[
									52390,
									52414
								],
								[
									52481,
									52517
								],
								[
									52582,
									52589
								],
								[
									52627,
									52666
								],
								[
									52806,
									52839
								],
								[
									53031,
									53042
								],
								[
									53139,
									53170
								],
								[
									53229,
									53285
								],
								[
									53649,
									53690
								],
								[
									54056,
									54096
								],
								[
									54324,
									54372
								],
								[
									54404,
									54413
								],
								[
									54696,
									54735
								],
								[
									54746,
									54755
								],
								[
									54794,
									54805
								],
								[
									55210,
									55251
								],
								[
									55297,
									55330
								],
								[
									55407,
									55442
								],
								[
									55542,
									55585
								],
								[
									55765,
									55801
								],
								[
									56118,
									56157
								],
								[
									56293,
									56341
								],
								[
									56509,
									56523
								],
								[
									56695,
									56702
								],
								[
									56818,
									56825
								],
								[
									57160,
									57184
								],
								[
									57214,
									57231
								],
								[
									57288,
									57310
								],
								[
									57339,
									57356
								],
								[
									57462,
									57493
								],
								[
									57567,
									57587
								],
								[
									57721,
									57755
								],
								[
									57785,
									57794
								],
								[
									57814,
									57822
								],
								[
									57826,
									57835
								],
								[
									57928,
									57962
								],
								[
									58263,
									58296
								],
								[
									58658,
									58692
								],
								[
									59062,
									59096
								],
								[
									59379,
									59423
								],
								[
									60048,
									60087
								],
								[
									60215,
									60297
								],
								[
									61423,
									61436
								],
								[
									61454,
									61463
								],
								[
									61481,
									61490
								],
								[
									61541,
									61552
								],
								[
									61576,
									61588
								],
								[
									61595,
									61606
								],
								[
									61643,
									61648
								],
								[
									61751,
									61756
								],
								[
									61901,
									61906
								],
								[
									61939,
									61944
								],
								[
									61979,
									61984
								],
								[
									62179,
									62184
								],
								[
									62388,
									62421
								],
								[
									62434,
									62435
								],
								[
									62844,
									62877
								],
								[
									63041,
									63078
								],
								[
									63086,
									63087
								],
								[
									63563,
									63570
								],
								[
									63709,
									63720
								],
								[
									63806,
									63817
								],
								[
									64104,
									64118
								],
								[
									64661,
									64693
								],
								[
									65203,
									65241
								],
								[
									65540,
									65563
								],
								[
									65576,
									65596
								],
								[
									65659,
									65673
								],
								[
									65677,
									65691
								],
								[
									65768,
									65783
								],
								[
									65857,
									65871
								],
								[
									65914,
									65937
								],
								[
									66129,
									66147
								],
								[
									66353,
									66367
								],
								[
									66371,
									66385
								],
								[
									66556,
									66578
								],
								[
									67122,
									67127
								],
								[
									67169,
									67175
								],
								[
									67218,
									67225
								],
								[
									67254,
									67293
								],
								[
									67322,
									67332
								],
								[
									67338,
									67347
								],
								[
									67365,
									67392
								],
								[
									67432,
									67441
								],
								[
									67450,
									67458
								],
								[
									67506,
									67515
								],
								[
									67541,
									67550
								],
								[
									67561,
									67569
								],
								[
									67641,
									67650
								],
								[
									67741,
									67785
								],
								[
									67847,
									67908
								],
								[
									68216,
									68242
								],
								[
									68270,
									68275
								],
								[
									68299,
									68312
								],
								[
									68420,
									68485
								],
								[
									68589,
									68615
								],
								[
									68649,
									68675
								],
								[
									68696,
									68729
								],
								[
									68757,
									68773
								],
								[
									68788,
									68795
								],
								[
									68817,
									68833
								],
								[
									68858,
									68885
								],
								[
									68942,
									68957
								],
								[
									68979,
									68991
								],
								[
									69008,
									69023
								],
								[
									69033,
									69042
								],
								[
									69082,
									69091
								],
								[
									69098,
									69104
								],
								[
									69116,
									69145
								],
								[
									69231,
									69241
								],
								[
									69282,
									69297
								],
								[
									69316,
									69329
								],
								[
									69754,
									69764
								],
								[
									69903,
									69915
								],
								[
									70195,
									70216
								],
								[
									70402,
									70413
								],
								[
									70450,
									70459
								],
								[
									70539,
									70572
								],
								[
									70877,
									70906
								],
								[
									70950,
									70972
								],
								[
									71006,
									71045
								],
								[
									71079,
									71085
								],
								[
									71158,
									71183
								],
								[
									71194,
									71206
								],
								[
									71398,
									71408
								],
								[
									71460,
									71510
								],
								[
									71918,
									71948
								],
								[
									72034,
									72064
								],
								[
									72137,
									72168
								],
								[
									72322,
									72346
								],
								[
									72401,
									72425
								],
								[
									72552,
									72556
								],
								[
									72636,
									72661
								],
								[
									72749,
									72772
								],
								[
									72804,
									72810
								],
								[
									72953,
									72954
								],
								[
									73045,
									73049
								],
								[
									73183,
									73214
								],
								[
									73465,
									73477
								],
								[
									73593,
									73607
								],
								[
									73753,
									73785
								],
								[
									73989,
									74015
								],
								[
									74016,
									74033
								],
								[
									74082,
									74105
								],
								[
									74138,
									74148
								],
								[
									74197,
									74209
								],
								[
									74524,
									74534
								],
								[
									74726,
									74738
								],
								[
									75413,
									75446
								],
								[
									75474,
									75488
								],
								[
									75582,
									75607
								],
								[
									75756,
									75784
								],
								[
									75918,
									75947
								],
								[
									76247,
									76295
								],
								[
									76484,
									76521
								],
								[
									76570,
									76618
								],
								[
									76732,
									76766
								],
								[
									76774,
									76798
								],
								[
									77312,
									77342
								],
								[
									77468,
									77495
								],
								[
									77972,
									78023
								],
								[
									78065,
									78092
								],
								[
									78262,
									78310
								],
								[
									78522,
									78557
								],
								[
									78764,
									78797
								],
								[
									79069,
									79100
								],
								[
									79346,
									79390
								],
								[
									79526,
									79542
								],
								[
									79702,
									79752
								],
								[
									80146,
									80151
								],
								[
									80232,
									80245
								],
								[
									80294,
									80304
								],
								[
									80308,
									80321
								],
								[
									80396,
									80411
								],
								[
									80460,
									80470
								],
								[
									80474,
									80489
								],
								[
									80556,
									80589
								],
								[
									80699,
									80706
								],
								[
									80990,
									81005
								],
								[
									81262,
									81287
								],
								[
									81348,
									81376
								],
								[
									81465,
									81474
								],
								[
									82441,
									82472
								],
								[
									82644,
									82658
								],
								[
									83281,
									83315
								],
								[
									83500,
									83522
								],
								[
									83558,
									83582
								],
								[
									83585,
									83605
								],
								[
									83849,
									83875
								],
								[
									83970,
									84008
								],
								[
									84410,
									84453
								],
								[
									84525,
									84547
								],
								[
									84569,
									84595
								],
								[
									84720,
									84828
								],
								[
									85066,
									85117
								],
								[
									85195,
									85229
								],
								[
									85317,
									85345
								],
								[
									85379,
									85414
								],
								[
									85488,
									85513
								],
								[
									85535,
									85552
								],
								[
									85594,
									85643
								],
								[
									85716,
									85729
								],
								[
									85800,
									85813
								],
								[
									85989,
									86027
								],
								[
									86038,
									86057
								],
								[
									86111,
									86152
								],
								[
									86163,
									86182
								],
								[
									86240,
									86265
								],
								[
									86312,
									86351
								],
								[
									86436,
									86449
								],
								[
									86488,
									86498
								],
								[
									86552,
									86559
								],
								[
									86584,
									86590
								],
								[
									86632,
									86645
								],
								[
									86665,
									86701
								],
								[
									86786,
									86799
								],
								[
									86838,
									86848
								],
								[
									86881,
									86888
								],
								[
									86994,
									87027
								],
								[
									87107,
									87142
								],
								[
									87182,
									87192
								],
								[
									87307,
									87335
								],
								[
									87497,
									87509
								],
								[
									87614,
									87639
								],
								[
									87754,
									87767
								],
								[
									87866,
									87893
								],
								[
									88012,
									88025
								],
								[
									88128,
									88161
								],
								[
									88384,
									88403
								],
								[
									88482,
									88510
								],
								[
									88529,
									88548
								],
								[
									88566,
									88601
								],
								[
									88944,
									88975
								],
								[
									89034,
									89047
								],
								[
									89131,
									89163
								],
								[
									89344,
									89394
								],
								[
									89437,
									89464
								],
								[
									89666,
									89699
								],
								[
									89750,
									89785
								],
								[
									89798,
									89812
								],
								[
									89879,
									89941
								],
								[
									90140,
									90156
								],
								[
									90383,
									90393
								],
								[
									90431,
									90441
								],
								[
									90461,
									90471
								],
								[
									90499,
									90524
								],
								[
									90650,
									90675
								],
								[
									90949,
									90976
								],
								[
									91208,
									91220
								],
								[
									92873,
									92908
								],
								[
									92927,
									92935
								],
								[
									92983,
									92998
								],
								[
									93146,
									93159
								],
								[
									93352,
									93368
								],
								[
									93575,
									93600
								],
								[
									93615,
									93637
								],
								[
									93853,
									93857
								],
								[
									94071,
									94093
								],
								[
									94115,
									94125
								],
								[
									94143,
									94156
								],
								[
									94303,
									94325
								],
								[
									94347,
									94357
								],
								[
									94375,
									94388
								],
								[
									94517,
									94539
								],
								[
									94565,
									94575
								],
								[
									94593,
									94606
								],
								[
									94642,
									94664
								],
								[
									94685,
									94695
								],
								[
									94713,
									94726
								],
								[
									94746,
									94787
								],
								[
									95094,
									95117
								],
								[
									95198,
									95220
								],
								[
									95294,
									95314
								],
								[
									95441,
									95452
								],
								[
									95485,
									95502
								],
								[
									95678,
									95697
								],
								[
									95732,
									95754
								],
								[
									95886,
									95907
								],
								[
									96045,
									96065
								],
								[
									96132,
									96155
								],
								[
									96231,
									96253
								],
								[
									96371,
									96395
								],
								[
									96457,
									96469
								],
								[
									96640,
									96658
								],
								[
									96720,
									96732
								],
								[
									96884,
									96907
								],
								[
									97048,
									97064
								],
								[
									97120,
									97133
								],
								[
									97165,
									97233
								],
								[
									97274,
									97296
								],
								[
									97325,
									97335
								],
								[
									97351,
									97364
								],
								[
									97424,
									97437
								],
								[
									97513,
									97536
								],
								[
									97664,
									97686
								],
								[
									97783,
									97796
								],
								[
									97858,
									97874
								],
								[
									97912,
									97916
								],
								[
									98175,
									98218
								],
								[
									98233,
									98258
								],
								[
									98401,
									98409
								],
								[
									98423,
									98430
								],
								[
									98439,
									98444
								],
								[
									98462,
									98503
								],
								[
									98516,
									98523
								],
								[
									98600,
									98639
								],
								[
									98796,
									98807
								],
								[
									98842,
									98863
								],
								[
									98941,
									98948
								],
								[
									98980,
									99005
								],
								[
									99063,
									99072
								],
								[
									99089,
									99096
								],
								[
									99114,
									99140
								],
								[
									99198,
									99207
								],
								[
									99225,
									99232
								],
								[
									99251,
									99346
								],
								[
									99978,
									99998
								],
								[
									99999,
									100013
								],
								[
									100035,
									100042
								],
								[
									100069,
									100089
								],
								[
									100090,
									100104
								],
								[
									100125,
									100132
								],
								[
									100176,
									100190
								],
								[
									100262,
									100311
								],
								[
									100324,
									100340
								],
								[
									100374,
									100390
								],
								[
									100482,
									100514
								],
								[
									100545,
									100584
								],
								[
									100965,
									101006
								],
								[
									101045,
									101052
								],
								[
									101108,
									101128
								],
								[
									101166,
									101185
								],
								[
									101259,
									101276
								],
								[
									101295,
									101315
								],
								[
									101319,
									101336
								],
								[
									101386,
									101409
								],
								[
									101510,
									101533
								],
								[
									101577,
									101596
								],
								[
									101639,
									101667
								],
								[
									101763,
									101784
								],
								[
									101860,
									101886
								],
								[
									101999,
									102017
								],
								[
									102071,
									102076
								],
								[
									102079,
									102085
								],
								[
									102098,
									102144
								],
								[
									102227,
									102240
								],
								[
									102618,
									102631
								],
								[
									102694,
									102743
								],
								[
									102756,
									102772
								],
								[
									102794,
									102807
								],
								[
									102835,
									102847
								],
								[
									102851,
									102864
								],
								[
									102926,
									102978
								],
								[
									103167,
									103180
								],
								[
									103243,
									103282
								],
								[
									103426,
									103461
								],
								[
									103533,
									103537
								],
								[
									103564,
									103573
								],
								[
									103824,
									103859
								],
								[
									103935,
									103956
								],
								[
									103971,
									103979
								],
								[
									103992,
									104001
								],
								[
									104023,
									104027
								],
								[
									104066,
									104070
								],
								[
									104217,
									104259
								],
								[
									104591,
									104619
								],
								[
									104679,
									104730
								],
								[
									104981,
									105024
								],
								[
									105077,
									105120
								],
								[
									105156,
									105161
								],
								[
									105238,
									105252
								],
								[
									105287,
									105297
								],
								[
									105310,
									105345
								],
								[
									105389,
									105397
								],
								[
									105944,
									105988
								],
								[
									106523,
									106546
								],
								[
									106954,
									106996
								],
								[
									107802,
									107825
								],
								[
									108197,
									108202
								],
								[
									108756,
									108769
								],
								[
									108805,
									108820
								],
								[
									108858,
									108875
								],
								[
									108917,
									108961
								],
								[
									109160,
									109167
								],
								[
									109810,
									109823
								],
								[
									109858,
									109867
								],
								[
									109924,
									109943
								],
								[
									110049,
									110062
								],
								[
									110237,
									110252
								],
								[
									110296,
									110313
								],
								[
									110359,
									110372
								],
								[
									110414,
									110427
								],
								[
									110469,
									110484
								],
								[
									110528,
									110545
								],
								[
									110673,
									110678
								],
								[
									110827,
									110853
								],
								[
									111030,
									111044
								],
								[
									111067,
									111072
								],
								[
									111706,
									111710
								],
								[
									111768,
									111772
								],
								[
									112015,
									112024
								],
								[
									112149,
									112162
								],
								[
									112236,
									112250
								],
								[
									112501,
									112524
								],
								[
									112542,
									112551
								],
								[
									112568,
									112579
								],
								[
									112589,
									112598
								],
								[
									112618,
									112646
								],
								[
									112754,
									112787
								],
								[
									112954,
									112976
								],
								[
									112994,
									113003
								],
								[
									113023,
									113036
								],
								[
									113094,
									113103
								],
								[
									113123,
									113165
								],
								[
									113638,
									113646
								],
								[
									113681,
									113692
								],
								[
									113769,
									113807
								],
								[
									114158,
									114179
								],
								[
									114264,
									114298
								],
								[
									114451,
									114490
								],
								[
									114545,
									114557
								],
								[
									115016,
									115024
								],
								[
									115156,
									115163
								],
								[
									115222,
									115230
								],
								[
									115343,
									115360
								],
								[
									115439,
									115443
								],
								[
									115497,
									115514
								],
								[
									115626,
									115674
								],
								[
									115960,
									116055
								],
								[
									116190,
									116202
								],
								[
									116212,
									116224
								],
								[
									116229,
									116242
								],
								[
									116348,
									116360
								],
								[
									116370,
									116382
								],
								[
									116387,
									116400
								],
								[
									116508,
									116516
								],
								[
									116727,
									116735
								],
								[
									117110,
									117120
								],
								[
									117200,
									117210
								],
								[
									117291,
									117299
								],
								[
									117430,
									117449
								],
								[
									117998,
									118002
								],
								[
									118071,
									118088
								],
								[
									118128,
									118143
								],
								[
									118181,
									118194
								],
								[
									118230,
									118245
								],
								[
									118355,
									118360
								],
								[
									118430,
									118439
								],
								[
									118460,
									118470
								],
								[
									118577,
									118642
								],
								[
									118993,
									119027
								],
								[
									119111,
									119154
								],
								[
									119370,
									119417
								],
								[
									119608,
									119659
								],
								[
									119879,
									119931
								],
								[
									120279,
									120322
								],
								[
									120638,
									120642
								],
								[
									120757,
									120832
								],
								[
									121150,
									121154
								],
								[
									121387,
									121429
								],
								[
									121493,
									121501
								],
								[
									121662,
									121703
								],
								[
									121750,
									121782
								],
								[
									121863,
									121896
								],
								[
									121955,
									122019
								],
								[
									122259,
									122300
								],
								[
									122338,
									122356
								],
								[
									122405,
									122412
								],
								[
									122606,
									122670
								],
								[
									122846,
									122911
								],
								[
									122924,
									122936
								],
								[
									122953,
									122964
								],
								[
									122988,
									123003
								],
								[
									123386,
									123416
								],
								[
									123593,
									123613
								],
								[
									123633,
									123687
								],
								[
									123910,
									123916
								],
								[
									123968,
									123973
								],
								[
									124029,
									124035
								],
								[
									124112,
									124117
								],
								[
									124160,
									124219
								],
								[
									126268,
									126281
								],
								[
									126429,
									126443
								],
								[
									126603,
									126616
								],
								[
									126698,
									126717
								],
								[
									126960,
									126997
								],
								[
									127345,
									127415
								],
								[
									127771,
									127813
								],
								[
									127864,
									127873
								],
								[
									128039,
									128074
								],
								[
									128201,
									128205
								],
								[
									128227,
									128238
								],
								[
									128348,
									128371
								],
								[
									128515,
									128539
								],
								[
									128640,
									128644
								],
								[
									128667,
									128671
								],
								[
									128683,
									128715
								],
								[
									128763,
									128803
								],
								[
									129032,
									129051
								],
								[
									129083,
									129147
								],
								[
									129199,
									129204
								],
								[
									129237,
									129267
								],
								[
									129354,
									129389
								],
								[
									129413,
									129439
								],
								[
									129553,
									129586
								],
								[
									129725,
									129783
								],
								[
									129808,
									129834
								],
								[
									129877,
									129912
								],
								[
									129955,
									129976
								],
								[
									130125,
									130151
								],
								[
									130309,
									130328
								],
								[
									130650,
									130699
								],
								[
									130724,
									130745
								],
								[
									130787,
									130803
								],
								[
									130857,
									130880
								],
								[
									130943,
									130971
								],
								[
									131033,
									131054
								],
								[
									131078,
									131083
								],
								[
									131656,
									131687
								],
								[
									131690,
									131708
								],
								[
									131760,
									131761
								],
								[
									131774,
									131785
								],
								[
									132340,
									132385
								],
								[
									132487,
									132511
								],
								[
									132773,
									132783
								],
								[
									132831,
									132852
								],
								[
									132900,
									132921
								],
								[
									133008,
									133049
								],
								[
									133197,
									133201
								],
								[
									133247,
									133255
								],
								[
									133284,
									133288
								],
								[
									133663,
									133676
								],
								[
									133729,
									133749
								],
								[
									134075,
									134132
								],
								[
									134239,
									134250
								],
								[
									134590,
									134610
								],
								[
									134650,
									134686
								],
								[
									134715,
									134728
								],
								[
									134771,
									134781
								],
								[
									134826,
									134841
								],
								[
									135644,
									135657
								],
								[
									136228,
									136248
								],
								[
									136323,
									136338
								],
								[
									136715,
									136728
								],
								[
									136799,
									136819
								],
								[
									136901,
									136916
								],
								[
									136982,
									137011
								],
								[
									137085,
									137118
								],
								[
									137230,
									137244
								],
								[
									137284,
									137299
								],
								[
									137321,
									137349
								],
								[
									137878,
									137901
								],
								[
									138108,
									138136
								],
								[
									138243,
									138285
								],
								[
									138612,
									138668
								],
								[
									138902,
									138943
								],
								[
									139029,
									139040
								],
								[
									139189,
									139202
								],
								[
									139523,
									139539
								],
								[
									139568,
									139620
								],
								[
									139689,
									139696
								],
								[
									139780,
									139794
								],
								[
									139878,
									139893
								],
								[
									139999,
									140003
								],
								[
									140035,
									140055
								],
								[
									140106,
									140119
								],
								[
									140169,
									140181
								],
								[
									140475,
									140490
								],
								[
									140811,
									140821
								],
								[
									140876,
									140886
								],
								[
									140970,
									140981
								],
								[
									141038,
									141045
								],
								[
									141648,
									141658
								],
								[
									141724,
									141735
								],
								[
									141803,
									141815
								],
								[
									141850,
									141863
								],
								[
									141908,
									141923
								],
								[
									141942,
									141969
								],
								[
									142155,
									142198
								],
								[
									142359,
									142419
								],
								[
									142505,
									142530
								],
								[
									142579,
									142622
								],
								[
									142633,
									142643
								],
								[
									142652,
									142681
								],
								[
									142937,
									142953
								],
								[
									142975,
									142986
								],
								[
									143036,
									143066
								],
								[
									143135,
									143140
								],
								[
									143169,
									143174
								],
								[
									143469,
									143482
								],
								[
									143533,
									143564
								],
								[
									143585,
									143598
								],
								[
									143599,
									143619
								],
								[
									145123,
									145150
								],
								[
									145175,
									145180
								],
								[
									145231,
									145260
								],
								[
									145339,
									145344
								],
								[
									145426,
									145439
								],
								[
									145490,
									145501
								],
								[
									145541,
									145562
								],
								[
									145686,
									145703
								],
								[
									145833,
									145853
								],
								[
									146049,
									146075
								],
								[
									146163,
									146169
								],
								[
									146199,
									146204
								],
								[
									146280,
									146313
								],
								[
									146471,
									146476
								],
								[
									146527,
									146540
								],
								[
									146564,
									146570
								],
								[
									146653,
									146677
								],
								[
									146771,
									146782
								],
								[
									146838,
									146851
								],
								[
									146913,
									146924
								],
								[
									147023,
									147033
								],
								[
									147131,
									147144
								],
								[
									147257,
									147266
								],
								[
									147324,
									147336
								],
								[
									147419,
									147427
								],
								[
									147527,
									147534
								],
								[
									147636,
									147656
								],
								[
									147844,
									147865
								],
								[
									148124,
									148141
								],
								[
									148294,
									148306
								],
								[
									148435,
									148449
								],
								[
									148620,
									148633
								],
								[
									148650,
									148670
								],
								[
									148929,
									148959
								],
								[
									148965,
									148991
								],
								[
									149010,
									149036
								],
								[
									149065,
									149083
								],
								[
									149149,
									149183
								],
								[
									149297,
									149351
								],
								[
									149378,
									149398
								],
								[
									149488,
									149505
								],
								[
									149601,
									149623
								],
								[
									149730,
									149754
								],
								[
									149862,
									149892
								],
								[
									149923,
									149932
								],
								[
									149975,
									149994
								],
								[
									150143,
									150163
								],
								[
									150280,
									150299
								],
								[
									150413,
									150429
								],
								[
									150537,
									150547
								],
								[
									150625,
									150632
								],
								[
									150698,
									150707
								],
								[
									151052,
									151073
								],
								[
									151082,
									151110
								],
								[
									151120,
									151165
								],
								[
									151220,
									151231
								],
								[
									151253,
									151263
								],
								[
									151276,
									151287
								],
								[
									151315,
									151348
								],
								[
									151509,
									151541
								],
								[
									151609,
									151631
								],
								[
									151803,
									151839
								],
								[
									152001,
									152017
								],
								[
									152078,
									152114
								],
								[
									152190,
									152201
								],
								[
									152266,
									152270
								],
								[
									152309,
									152322
								],
								[
									152436,
									152472
								],
								[
									152649,
									152654
								],
								[
									152695,
									152748
								],
								[
									153686,
									153715
								],
								[
									153869,
									153906
								],
								[
									153917,
									153930
								],
								[
									153943,
									153952
								],
								[
									153999,
									154019
								],
								[
									154053,
									154069
								],
								[
									154291,
									154312
								],
								[
									154440,
									154472
								],
								[
									154499,
									154508
								],
								[
									154520,
									154533
								],
								[
									154611,
									154635
								],
								[
									154702,
									154711
								],
								[
									154727,
									154737
								],
								[
									154754,
									154771
								],
								[
									154799,
									154808
								],
								[
									154809,
									154832
								],
								[
									154878,
									154902
								],
								[
									155050,
									155055
								],
								[
									155073,
									155082
								],
								[
									155182,
									155190
								],
								[
									155194,
									155203
								],
								[
									155225,
									155238
								],
								[
									155255,
									155268
								],
								[
									155275,
									155288
								],
								[
									155314,
									155331
								],
								[
									155344,
									155360
								],
								[
									155430,
									155435
								],
								[
									155453,
									155462
								],
								[
									155562,
									155570
								],
								[
									155583,
									155592
								],
								[
									155607,
									155612
								],
								[
									155700,
									155737
								],
								[
									155894,
									155910
								],
								[
									155924,
									155946
								],
								[
									156059,
									156065
								],
								[
									157113,
									157128
								],
								[
									157178,
									157192
								],
								[
									157206,
									157221
								],
								[
									157751,
									157768
								],
								[
									157818,
									157834
								],
								[
									158118,
									158148
								],
								[
									158166,
									158175
								],
								[
									158193,
									158203
								],
								[
									158216,
									158225
								],
								[
									158368,
									158397
								],
								[
									158415,
									158424
								],
								[
									158442,
									158452
								],
								[
									158456,
									158465
								],
								[
									159746,
									159798
								],
								[
									159864,
									159887
								],
								[
									159959,
									159977
								],
								[
									160326,
									160336
								],
								[
									160340,
									160354
								],
								[
									160556,
									160588
								],
								[
									160615,
									160650
								],
								[
									160690,
									160713
								],
								[
									160874,
									160890
								],
								[
									161075,
									161084
								],
								[
									161110,
									161130
								],
								[
									161157,
									161166
								],
								[
									161181,
									161205
								],
								[
									161345,
									161390
								],
								[
									161422,
									161440
								],
								[
									161586,
									161598
								],
								[
									161743,
									161748
								],
								[
									162062,
									162069
								],
								[
									162206,
									162225
								],
								[
									162243,
									162265
								],
								[
									162549,
									162591
								],
								[
									162608,
									162645
								],
								[
									162893,
									162912
								],
								[
									163282,
									163322
								],
								[
									163365,
									163379
								],
								[
									163449,
									163479
								],
								[
									163528,
									163558
								],
								[
									163625,
									163703
								],
								[
									164153,
									164181
								],
								[
									164233,
									164297
								],
								[
									164315,
									164339
								],
								[
									164598,
									164617
								],
								[
									164732,
									164768
								],
								[
									165493,
									165531
								],
								[
									165548,
									165586
								],
								[
									166875,
									166882
								],
								[
									166938,
									166956
								],
								[
									167168,
									167175
								],
								[
									167223,
									167227
								],
								[
									167359,
									167367
								],
								[
									167434,
									167446
								],
								[
									168422,
									168488
								],
								[
									168489,
									168506
								],
								[
									168744,
									168755
								],
								[
									168772,
									168791
								],
								[
									168905,
									168969
								],
								[
									168985,
									168994
								],
								[
									169006,
									169014
								],
								[
									169067,
									169082
								],
								[
									169098,
									169104
								],
								[
									169128,
									169141
								],
								[
									169336,
									169353
								],
								[
									169398,
									169423
								],
								[
									169522,
									169528
								],
								[
									169648,
									169680
								],
								[
									169757,
									169761
								],
								[
									169891,
									169912
								],
								[
									169950,
									169971
								],
								[
									170063,
									170088
								],
								[
									170259,
									170292
								],
								[
									170525,
									170552
								],
								[
									170644,
									170648
								],
								[
									170755,
									170760
								],
								[
									171024,
									171070
								],
								[
									171660,
									171669
								],
								[
									171905,
									171958
								],
								[
									171969,
									171995
								],
								[
									172298,
									172314
								],
								[
									172398,
									172409
								],
								[
									172655,
									172659
								],
								[
									172943,
									172996
								],
								[
									173224,
									173237
								],
								[
									173248,
									173264
								],
								[
									173439,
									173448
								],
								[
									173490,
									173499
								],
								[
									173539,
									173544
								],
								[
									173580,
									173598
								],
								[
									173619,
									173650
								],
								[
									173757,
									173776
								],
								[
									174069,
									174082
								],
								[
									174171,
									174189
								],
								[
									174284,
									174301
								],
								[
									174434,
									174441
								],
								[
									174560,
									174566
								],
								[
									174716,
									174724
								],
								[
									174843,
									174853
								],
								[
									175082,
									175091
								],
								[
									175584,
									175624
								],
								[
									175933,
									175968
								],
								[
									176299,
									176305
								],
								[
									176341,
									176359
								],
								[
									176403,
									176413
								],
								[
									176496,
									176506
								],
								[
									176555,
									176587
								],
								[
									176834,
									176853
								],
								[
									177471,
									177493
								],
								[
									177792,
									177852
								],
								[
									178562,
									178587
								],
								[
									178616,
									178632
								],
								[
									178641,
									178652
								],
								[
									178744,
									178750
								],
								[
									178759,
									178770
								],
								[
									178830,
									178854
								],
								[
									178872,
									178881
								],
								[
									178905,
									178914
								],
								[
									178942,
									178953
								],
								[
									178980,
									178991
								],
								[
									179024,
									179037
								],
								[
									179056,
									179069
								],
								[
									179081,
									179094
								],
								[
									179245,
									179256
								],
								[
									179358,
									179383
								],
								[
									179401,
									179427
								],
								[
									179518,
									179552
								],
								[
									179824,
									179845
								],
								[
									179910,
									179928
								],
								[
									180096,
									180132
								],
								[
									180554,
									180574
								],
								[
									180777,
									180792
								],
								[
									181068,
									181091
								],
								[
									181300,
									181318
								],
								[
									181536,
									181548
								],
								[
									181578,
									181593
								],
								[
									181638,
									181644
								],
								[
									181696,
									181710
								],
								[
									181852,
									181870
								],
								[
									182066,
									182098
								],
								[
									182164,
									182180
								],
								[
									182516,
									182532
								],
								[
									182979,
									182982
								],
								[
									182995,
									182996
								],
								[
									183026,
									183062
								],
								[
									183503,
									183542
								],
								[
									183631,
									183657
								],
								[
									183705,
									183766
								],
								[
									184173,
									184201
								],
								[
									184308,
									184326
								],
								[
									184621,
									184659
								]
							],
							"symlist":
							[
								"Util(g)",
								"Util.formatAnnotatedObject = function(subject, o)",
								"  i =>",
								"  item =>",
								"  padding = x =>",
								"  arr =>",
								"Util.curry = (fn, arity) =>",
								"  ret = function curried(...args)",
								"\t(v, i) =>",
								"Curried = function(...a)",
								"\tfunction()",
								"\tfunction(a)",
								"\tfunction(a, b)",
								"\tfunction(a, b, c)",
								"\tfunction(a, b, c, d)",
								"  get()",
								"Util.arityN = (fn, n) =>",
								"\tfunction(fn)",
								"\tfunction()",
								"\tfunction(fn)",
								"\tfunction(a)",
								"\tfunction(fn)",
								"\tfunction(a, b)",
								"\tfunction(fn)",
								"\tfunction(a, b, c)",
								"\tfunction(fn)",
								"\tfunction(a, b, c, d)",
								"\tfunction(fn)",
								"\tfunction(a, b, c, d, e)",
								"Util.getter = target =>",
								"  self = function(key)",
								"  .fn = key =>",
								"  .fn = key =>",
								"Util.setter = target =>",
								"  self = function(key, value)",
								"  .fn = (key, value) =>",
								"  .fn = (key, value) =>",
								"Util.remover = target =>",
								"\tkey =>",
								"\tkey =>",
								"Util.hasFn = target =>",
								"\tkey =>",
								"\tkey =>",
								"Util.adder = target =>",
								"\targ =>",
								"\targ =>",
								"  self = function(obj, arg = 1)",
								"ChooseFn(a, o)",
								"  .fn = (obj, arg) =>",
								"  .fn = (obj, arg) =>",
								"  .fn = (obj, arg) =>",
								"  .fn = (num, arg) =>",
								"  .fn = (obj, arg) =>",
								"Util.updater = (target, get, set, fn) =>",
								"\t(k, f, i) =>",
								"  doUpdate(key, func, i)",
								"  create = () =>",
								"\tkey =>",
								"\t() =>",
								"  self = function(...args)",
								"Util.once = (fn, thisArg, memoFn) =>",
								"\tfunction(...args)",
								"Util.delay = (func, wait, thisObj) =>",
								"\tfunction(...args)",
								"()",
								"Util.throttle = (f, t, thisObj) =>",
								"\tfunction(...args)",
								"Util.debounce = (func, wait, options = {}) =>",
								"  later()",
								"  debounced(...a)",
								"  .clear = function()",
								"  .flush = function()",
								"Util.debounceAsync = (fn, wait, options = {}) =>",
								"\tfunction(...a)",
								"  resolve =>",
								"() =>",
								"  arg =>",
								"\tg =>",
								"\tg =>",
								"\t() =>",
								"\terr =>",
								"\t() =>",
								"\terr =>",
								"\t() =>",
								"\terr =>",
								"() =>",
								"Util.log = (...args) =>",
								"  f =>",
								"  f =>",
								"(a, p, i) =>",
								"  get: () =>",
								"  .setFilters = function(args)",
								"  arg =>",
								"  .getFilters = function()",
								"Util.msg = (strings, ...substitutions) =>",
								"(base, n) =>",
								"Util.generalLog = function(n, x)",
								"Util.toSource = function(arg, opts = {})",
								"  print = (...args) =>",
								"Util.debug = function(message)",
								"  removeCircular = function(key, value)",
								"  arg =>",
								"Util.type = function({ type })",
								"Util.functionName = function(fn)",
								"Util.className = function(obj)",
								"  obj",
								"Util.unwrapComponent = function(c)",
								"Util.componentName = function(c)",
								"Util.count = function(s, ch)",
								"Util.parseNum = function(str)",
								"Util.minmax = function(num, min, max)",
								"Util.getExponential = function(num)",
								"Util.getNumberParts = function(num)",
								"Util.pow2 = function(n)",
								"Util.pow10 = function(n)",
								"Util.bitValue = function(n)",
								"Util.bitMask = function(bits, start = 0)",
								"Util.bitGroups = function(num, bpp, minLen)",
								"Util.bitStuff = (arr, bpp) =>",
								"([b, f], n) =>",
								"Util.toBinary = function(num)",
								"Util.toBits = function(num)",
								"\tbit =>",
								"Util.getBit = function(v, n)",
								"Util.isSet = function(v, n)",
								"Util.bitCount = function(n)",
								"Util.bitNo = function(n)",
								"Util.toggleBit = function(num, bit)",
								"Util.setBit = function(num, bit)",
								"Util.clearBit = function(num, bit)",
								"Util.range = function(...args)",
								"\t(v, k) =>",
								"  n =>",
								"Util.set = function(obj, prop, value)",
								"\t(prop, value) =>",
								"\t(prop, value) =>",
								"\t(prop, value) =>",
								"\tvalue =>",
								"(obj, prop) =>",
								"() =>",
								"Util.bitArrayToNumbers = function(arr)",
								"Util.bitsToNumbers = function(bits)",
								"(val, key, arr) =>",
								"Util.shuffle = function(arr, rnd = Util.rng)",
								"(a, b) =>",
								"Util.sortNum = function(arr)",
								"(a, b) =>",
								"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
								"Util.is = function(what, ...pred)",
								"  type =>",
								"  fn =>",
								"Util.instanceOf = (value, ctor) =>",
								"Util.onoff = function(val)",
								"Util.numbersToBits = function(arr)",
								"(bits, num) =>",
								"Util.randomNumbers = function([start, end], draws)",
								"Util.randomBits = function(r = [1, 50], n = 5)",
								"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
								"\t(s, n = len) =>",
								"Util.pad = function(s, n, char = ' ')",
								"Util.abbreviate = function(str, max = 40, suffix = '...')",
								"Util.trim = function(str, charset)",
								"Util.trimRight = function(str, charset)",
								"Util.indent = (text, space = ' ') =>",
								"Util.define = (obj, ...args) =>",
								"Util.memoizedProperties = (obj, methods) =>",
								"  get()",
								"Util.copyWhole = (dst, ...args) =>",
								"Util.copyEntries = (obj, entries) =>",
								"Util.extend = (...args) =>",
								"Util.isCloneable = obj =>",
								"Util.isUnextendable = val =>",
								"  pred = (k, v, f) =>",
								"(key, depth) =>",
								"  value = function(...args)",
								"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
								"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
								"Util.defineGettersSetters = (obj, gettersSetters) =>",
								"Util.extendArray = function(arr = Array.prototype)",
								"\tfunction(pred)",
								"\tfunction()",
								"\tfunction()",
								"(item, i, a) =>",
								"\tfunction()",
								"\tfunction(value)",
								"Util.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
								"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))",
								"  get length()",
								"  get instance()",
								"  key(i)",
								"  get(key)",
								"  has(key)",
								"  set(key, value)",
								"*keys()",
								"*entries()",
								"  toObject()",
								"  toMap()",
								"  .localStorage = function(s)",
								"\t() =>",
								"\tw =>",
								"\t() =>",
								"\tl =>",
								"\t(l, i) =>",
								"\t(l, key) =>",
								"\t(l, key, v) =>",
								"Util.array = function(a)",
								"Util.arrayFromEntries = entries =>",
								"([k, v]) =>",
								"\tkey =>",
								"([k, v]) =>",
								"Util.toMap = function(hash = {}, fn)",
								"Util.extendMap = function(map)",
								"  .entries = function*iterator()",
								"  .toObject = function()",
								"  .match = function(...args)",
								"\tentries =>",
								"Util.objectFrom = function(any)",
								"Util.tail = function(arr)",
								"Util.splice = function(str, index, delcount, insert)",
								"Util.identity = arg =>",
								"Util.reverse = arr =>",
								"Util.keyOf = function(obj, prop)",
								"Util.rotateRight = function(arr, n)",
								"Util.repeater = function(n, what)",
								"()",
								"()",
								"Util.repeat = function(n, what)",
								"Util.arrayDim = function(dimensions, init)",
								"Util.flatten = function(arr)",
								"Util.chunkArray = (a, size) =>",
								"(acc, item, i) =>",
								"Util.partition = function*(a, size)",
								"Util.intersect = (a, b) =>",
								"Util.difference = (a, b, incicludes) =>",
								"  x =>",
								"  x =>",
								"  x =>",
								"  x =>",
								"Util.symmetricDifference = (a, b) =>",
								"Util.union = (a, b, equality) =>",
								"Util.chances = function(numbers, matches)",
								"Util.sum = function(arr)",
								"(acc, n) =>",
								"Util.expr = fn =>",
								"  expr(...args)",
								"  addArgs(args)",
								"  ret = function returnFn(...args)",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"Util.mod = (a, b) =>",
								"\tn =>",
								"(a, b) =>",
								"Util.fnName = function(f, parent)",
								"Util.objName = function(o)",
								"Util.findKey = function(obj, pred, thisVal)",
								"  value : v =>",
								"Util.find = function(arr, value, prop = 'id')",
								"  pred = function(obj)",
								"\tobj =>",
								"\tobj =>",
								"  pred = ([key, value], arr) =>",
								"Util.findIndex = function(obj, pred, thisArg)",
								"Util.match = function(arg, pred)",
								"  match = (val, key) =>",
								"(acc, val, key) =>",
								"(acc, key) =>",
								"Util.toHash = function(map, keyTransform = k => ",
								"('' + k))",
								"\t(v, k) =>",
								"Util.indexOf = function(obj, prop)",
								"Util.greatestCommonDenominator = (a, b) =>",
								"Util.leastCommonMultiple = (n1, n2) =>",
								"(re, str)",
								"Util.inspect = function(obj, opts = {})",
								"  stringFn = str =>",
								"  print = (...args) =>",
								"\t(space = false) =>",
								"\t(space = false) =>",
								"\tkey =>",
								"\tkey =>",
								"Util.dump = function(name, props)",
								"\t() =>",
								"\tw =>",
								"\t() =>",
								"Util.ucfirst = function(str)",
								"Util.lcfirst = function(str)",
								"Util.typeOf = v =>",
								"Util.camelize = (text, sep = '') =>",
								"\t(match, p1, p2, offset) =>",
								"Util.decamelize = function(str, separator = '-')",
								"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
								"\tfunction(value)",
								"Util.if = (value, _then, _else, pred) =>",
								"  v =>",
								"() =>",
								"() =>",
								"Util.ifElse = (value, _else, pred) =>",
								"  v =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"Util.ifThen = (value, _then, pred) =>",
								"  v =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"Util.switch = ({ default: defaultCase, ...cases }) =>",
								"\tfunction(value)",
								"(fn, arr)",
								"Util.colorDump = (iterable, textFn) =>",
								"(color, n) =>",
								"Util.bucketInserter = (map, ...extraArgs) =>",
								"\tfunction(...args)",
								"\tfunction(...args)",
								"Util.fifo = function fifo()",
								"  resolve = () =>",
								"  generator()",
								"  r =>",
								"  push(...args)",
								"  process: function run()",
								"Util.isEmail = function(v)",
								"Util.isString = function(v)",
								"Util.isNumeric = v =>",
								"Util.isUndefined = arg =>",
								"Util.isObject = obj =>",
								"Util.isPrimitive = obj =>",
								"Util.isFunction = arg =>",
								"Util.not = fn =>",
								"\tfunction(...args)",
								"Util.isAsync = fn =>",
								"Util.isArrowFunction = fn =>",
								"Util.isEmptyString = v =>",
								"Util.isEmpty = (...args) =>",
								"  empty(v)",
								"Util.isNonEmpty = (...args) =>",
								"  nonEmpty = v =>",
								"Util.isIpAddress = v =>",
								"  i =>",
								"  i =>",
								"Util.isPortNumber = v =>",
								"Util.hasProps = function(obj, props)",
								"  prop =>",
								"Util.validatePassword = function(value)",
								"Util.clone = function(obj, proto)",
								"  constructor",
								"Util.deepClone = function(data)",
								"Util.findVal = function(object, propName, maxDepth = 10)",
								"Util.deepCloneObservable = function(data)",
								"Util.toArray = function(observableArray)",
								"Util.arryToTree = function(data, id, pId, appId)",
								"(e, i) =>",
								"Util.to3wei = function(a, old, id, pId)",
								"(e, i) =>",
								"(se, si) =>",
								"Util.arrExchangePos = function(arr, i, j)",
								"Util.arrRemove = function(arr, i)",
								"Util.move = function(src, dst = [])",
								"Util.moveIf = function(src, pred, dst = [])",
								"Util.logOutClearStorage = function()",
								"Util.getCookie = function(cookie, name)",
								"Util.parseCookie = function(c = document.cookie)",
								"  pred = char =>",
								"  char =>",
								"  char =>",
								"Util.encodeCookie = c =>",
								"([key, value]) =>",
								"Util.setCookies = c =>",
								"([key, value]) =>",
								"Util.clearCookies = function(c)",
								"\t(acc, name) =>",
								"Util.deleteCookie = function(name)",
								"\t() =>",
								"\tw =>",
								"\t() =>",
								"Util.accAdd = function(arg1, arg2)",
								"Util.Subtr = function(arg1, arg2)",
								"Util.accDiv = function(arg1, arg2)",
								"Util.accMul = function(arg1, arg2)",
								"Util.dateFormatter = function(date, formate)",
								"Util.numberFormatter = function(numStr)",
								"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
								"(req = {}) =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\turl =>",
								"\t() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"Util.parseQuery = function(url = ",
								")",
								"Util.encodeQuery = function(data)",
								"Util.parseURL = function(href = this.",
								")",
								"  part =>",
								"([k, v]) =>",
								"(acc, m) =>",
								"  href(override)",
								"Util.makeURL = function(...args)",
								"Util.numberFromURL = function(url, fn)",
								"Util.tryPromise = fn =>",
								"(resolve, reject) =>",
								"  resolve = a =>",
								"  reject = () =>",
								"  resolve = () =>",
								"  reject = () =>",
								"  function(...args)",
								"\tfunction(...args)",
								"  resolve = a =>",
								"  reject = () =>",
								"Util.putError = err =>",
								"() =>",
								"\tfn =>",
								"\tret =>",
								"Util.tryPredicate = (fn, defaultRet) =>",
								"\tret =>",
								"\t() =>",
								"Util.isBrowser = function()",
								"\t() =>",
								"\tw =>",
								"\t() =>",
								"\t() =>",
								"\td =>",
								"\t() =>",
								"Util.waitFor = function waitFor(msecs)",
								"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
								"(resolve, reject) =>",
								"() =>",
								"  clear = () =>",
								"Util.timeout = (msecs, promises, promiseClass = Promise) =>",
								"Util.isServer = function()",
								"Util.isMobile = function()",
								"Util.uniquePred = (cmp = null) =>",
								"\t(el, i, arr) =>",
								"  item =>",
								"\t(el, i, arr) =>",
								"Util.unique = (arr, cmp) =>",
								"  cmp = (a, b) =>",
								"(e, i, a) =>",
								"Util.zip = a =>",
								"(a, b) =>",
								"(_, i) =>",
								"  arr =>",
								"Util.histogram = (...args) =>",
								"\t(k, v) =>",
								"  initVal = () =>",
								"  setVal = v =>",
								"(it, i) =>",
								"(item, i) =>",
								"\t(entry, idx, key) =>",
								"([k, v]) =>",
								"(a, b) =>",
								"Util.concat = function*(...args)",
								"Util.distinct = function(arr)",
								"\t(value, index, me) =>",
								"Util.rangeMinMax = function(arr, field)",
								"  obj =>",
								"Util.remap = (...args) =>",
								"  getR = () =>",
								"  r = val =>",
								"Util.mergeLists = function(arr1, arr2, key = 'id')",
								"Util.foreach = function(o, fn)",
								"Util.all = function(obj, pred)",
								"Util.isGenerator = function(fn)",
								"Util.isIterator = obj =>",
								"Util.isIterable = obj =>",
								"  x =>",
								"Util.isConstructor = x =>",
								"  construct(target, args)",
								"  target",
								"  x",
								"  m =>",
								"Util.filter = function(a, pred)",
								"()",
								"  fn = (k, v) =>",
								"Util.reduce = (obj, fn, accu) =>",
								"Util.mapFunctional = fn =>",
								"(arg)",
								"Util.map = (...args) =>",
								"  ret = a =>",
								"()",
								"  ret = a =>",
								"()",
								"Util.entriesToObj = function(arr)",
								"(acc, item) =>",
								"Util.isDate = function(d)",
								"Util.parseDate = function(d)",
								"Util.isoDate = function(date)",
								"Util.toUnixTime = function(dateObj, utc = false)",
								"Util.unixTime = function(utc = false)",
								"Util.fromUnixTime = function(epoch, utc = false)",
								"Util.formatTime = function(date = ",
								"(), format = 'HH:MM:SS')",
								"Util.leapYear = function(year)",
								"Util.timeSpan = function(s)",
								"Util.randFloat = function(min, max, rnd = Util.rng)",
								"Util.randInt = (...args) =>",
								"Util.randStr = (len, charset, rnd = Util.rng) =>",
								"Util.hex = function(num, numDigits)",
								"Util.numberParts = (num, base) =>",
								"Util.roundDigits = precision =>",
								"Util.roundFunction = (prec, digits, type) =>",
								"\tfunction(value)",
								"Util.roundTo = function(value, prec, digits, type)",
								"() =>",
								"\tutf8 =>",
								"\tv =>",
								"\tutf8 =>",
								"\tbase64 =>",
								"\tv =>",
								"\tstring =>",
								"Util.formatRecord = function(obj)",
								"  item =>",
								"\tfunction(obj)",
								"Util.isArrayLike = obj =>",
								"Util.equals = function(a, b)",
								"(e, i) =>",
								"Util.versionCompare = (a, b) =>",
								"  isdigit = c =>",
								"Util.isGetter = (obj, propName) =>",
								"Util.isBool = value =>",
								"Util.size = (...args) =>",
								"  size(obj)",
								"Util.isMap = function(obj)",
								"Util.effectiveDeviceWidth = function()",
								"Util.getFormFields = function(initialState)",
								"(acc, { elements }) =>",
								"(acc2, { name, value }) =>",
								"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
								"Util.getUserAgent = function(headers = req.headers)",
								"Util.factor = function(start, end)",
								"Util.factorial = function(n)",
								"Util.increment = function(obj, key)",
								"Util.counter = function()",
								"  self = function()",
								"Util.filterKeys = function(obj, pred = k => true)",
								"  pred = str =>",
								"  pred = str =>",
								"Util.filterMembers = function(obj, fn)",
								"  pred = (k, v, o) =>",
								"Util.filterOutMembers = function(obj, fn)",
								"  pred = (v, k, o) =>",
								"Util.dumpMembers = obj =>",
								"Util.filterOutKeys = function(obj, arr)",
								"\t(v, k, o) =>",
								"\t(k, v) =>",
								"\tkey =>",
								"\t() =>",
								"\t(v, k, o) =>",
								"Util.removeKeys = function(obj, arr)",
								"\t(v, k, o) =>",
								"\t(k, v) =>",
								"\tkey =>",
								"Util.getKeys = function(obj, arr)",
								"Util.numbersConvert = function(str)",
								"(ch, i) =>",
								"Util.entries = function(arg)",
								"()",
								"Util.keys = function(arg)",
								"()",
								"Util.values = function(arg)",
								"()",
								"Util.removeEqual = function(a, b)",
								"Util.clear = obj =>",
								"Util.remove = (arr, item) =>",
								"\t(other, i, arr) =>",
								"Util.removeIf = function(arr, pred)",
								"Util.traverse = function(o, fn)",
								"\t(v, k, a) =>",
								"  walker(o, depth = 0)",
								"Util.traverseWithPath = function(o, rootPath = [])",
								"  walker(o, path)",
								"Util.indexByPath = function(o, p)",
								"Util.pushUnique = (arr, ...args) =>",
								"(acc, item) =>",
								"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
								"  next = (k, v) =>",
								"\t(k, v) =>",
								"\t(k, v) =>",
								"\t(k, v) =>",
								"  fn = function(key, value)",
								"Util.keyIterator = obj =>",
								"Util.entryIterator = obj =>",
								"()",
								"Util.mapAdapter = getSetFunction =>",
								"  get(key)",
								"  set(key, value)",
								"  .keys = () =>",
								"  .entries = () =>",
								"Util.mapFunction = map =>",
								"  fn = function(...args)",
								"  m =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .update = function(key, fn = (k, v) => v)",
								"  .entries = function*()",
								"  .values = function*()",
								"  .keys = function*()",
								"\tfunction()",
								"([key, value]) =>",
								"  .keys = () =>",
								"  .entries = () =>",
								"  .values = () =>",
								"  .keys = function*()",
								"  .entries = function*()",
								"  .values = function*()",
								"  .filter = function(pred)",
								"()",
								"  .map = function(t)",
								"()",
								"  .forEach = function(fn)",
								"  .delete = key =>",
								"  .has = key =>",
								"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .keys = () =>",
								"  .entries = function*()",
								"  .values = function*()",
								"  .has = key =>",
								"  .delete = key =>",
								"  m =>",
								"Util.mapCombinator = (forward, backward) =>",
								"  fn = function(key, value)",
								"(a,m) =>",
								"\tkey =>",
								"\ta =>",
								"  makeGetter(map, next = a => a)",
								"\tkey =>",
								"Util.predicate = (fn_or_regex, pred) =>",
								"  fn = arg =>",
								"  .valueOf = function()",
								"\targ =>",
								"Util.some = predicates =>",
								"\tvalue =>",
								"  pred =>",
								"Util.every = predicates =>",
								"\tvalue =>",
								"  pred =>",
								"Util.iterateMembers = function*(obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
								"\t(...predicates) =>",
								"\t(...args) =>",
								"  pred =>",
								"\t(...predicates) =>",
								"\t(...args) =>",
								"  pred =>",
								"(pred, obj) =>",
								"Util.memberNameFilter = (depth = 1, start = 0) =>",
								"\t(m, l, o) =>",
								"\t(m, l, o) =>",
								"\t(name, depth, obj, proto) =>",
								"Util.getMemberNames = (obj, ...args) =>",
								"Util.getMemberEntries = (obj, ...args) =>",
								"  name =>",
								"  accFn = (a, m, o) =>",
								"\t(obj, ...args) =>",
								"\t(a, m) =>",
								"\t(r, a, m) =>",
								"\t(r, a) =>",
								"  incFn = (c, n, self) =>",
								"  incFn = (c, n, self) =>",
								"  inc = (i, n = 1) =>",
								"  self = function Count(n = 1)",
								"  .valueOf = function()",
								"  filterFn = (key, value) =>",
								"(acc, mem, idx) =>",
								"\tr =>",
								"\t() =>",
								"  fn = function ReduceIntoMap(arg, acc = mapObj)",
								"(acc, arg) =>",
								"\t(a, m, o) =>",
								"Util.methodNameFilter = (depth = 1, start = 0) =>",
								"\t(m, l, o) =>",
								"\t() =>",
								"\tb =>",
								"\t() =>",
								"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
								"\t(a, m, o) =>",
								"Util.inherit = (dst, src, depth = 1) =>",
								"  inherits(ctor, superCtor)",
								"  ctor",
								"  superCtor",
								"  inherits(ctor, superCtor)",
								"TempCtor = function()",
								"TempCtor",
								"  superCtor",
								"  ctor",
								"  ctor",
								"Util.bindMethods = (obj, methods, dest) =>",
								"Util.getConstructor = obj =>",
								"Util.getPrototypeChain = function(obj, fn = p => p)",
								"Util.getObjectChain = (obj, fn = p => p) =>",
								"Util.getPropertyDescriptors = function(obj)",
								"\tp =>",
								"  fn = (c, p) =>",
								"\t(p, o) =>",
								"Util.weakAssign = function(...args)",
								"  other =>",
								"Util.exception = function Exception(...args)",
								"  toString(color = false)",
								"Util.location = function Location(...args)",
								"  toString(color = false)",
								"\tt =>",
								"  getFileName()",
								"  getLineNumber()",
								"  getColumnNumber()",
								"Util.stackFrame = function StackFrame(frame)",
								"  prop =>",
								"  propertyMap()",
								"  method =>",
								"([method, func]) =>",
								"  getFunction()",
								"  getMethodName()",
								"  getFunctionName()",
								"  getTypeName()",
								"  getFileName()",
								"  getLineNumber()",
								"  getColumnNumber()",
								"  get()",
								"  toString(color, opts = {})",
								"\t(t, color) =>",
								"\tt =>",
								"  p =>",
								"  p =>",
								"(f, i) =>",
								"  getLocation()",
								"  get location()",
								"Util.scriptName = () =>",
								"\t() =>",
								"\targs =>",
								"\t() =>",
								"Util.getFunctionName = () =>",
								"Util.getFunctionArguments = fn =>",
								"Util.scriptDir = () =>",
								"\t() =>",
								"\tscript =>",
								"\t() =>",
								"Util.stack = function Stack(stack, offset)",
								"  frame =>",
								"([m, p]) =>",
								"\t(acc, [method, property]) =>",
								"  getStack()",
								"  .prepareStackTrace = (_, stack) =>",
								"  stackToString(st, start = 0)",
								"()",
								"  frame =>",
								"  part =>",
								"  frame =>",
								"([func, file]) =>",
								"  n =>",
								"([func, file]) =>",
								"([func, [columnNumber, lineNumber, ...file]]) =>",
								"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
								"\ts =>",
								"\ts =>",
								"\t() =>",
								"\ts =>",
								"\ts =>",
								"\t() =>",
								"  frame =>",
								"  frame =>",
								"  get: () =>",
								"  get: () =>",
								"*value()",
								"  toString(opts = {})",
								"  f =>",
								"  getFunctionName()",
								"  getMethodName()",
								"  getFileName()",
								"  getLineNumber()",
								"  get()",
								"(a, f) =>",
								"(fn, i) =>",
								"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
								"  .prepareStackTrace = (_, stack) =>",
								"Util.getCallerFile = function(position = 2)",
								"Util.getCallerFunction = function(position = 2)",
								"Util.getCallerFunctionName = function(position = 2)",
								"Util.getCallerFunctionNames = function(position = 2)",
								"Util.getCaller = function(index = 1, stack)",
								"  f =>",
								"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
								"  f =>",
								"Util.getStackFrames = function(offset = 2)",
								"  frame =>",
								"Util.getStackFrame = function(offset = 2)",
								"Util.rotateLeft = function(x, n)",
								"Util.rotateRight = function(x, n)",
								"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
								"Util.flatTree = function(tree, addOutput)",
								"  addOutput = arg =>",
								"\tkey =>",
								"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
								"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
								"()",
								"  pred = i =>",
								"  t = function(i)",
								"Util.isPromise = function(obj)",
								"  setImmediate = fn =>",
								"Util.next = function(iter, observer, prev = undefined)",
								"  val =>",
								"() =>",
								"  err =>",
								"() =>",
								"Util.getImageAverageColor = function(imageElement, options)",
								"  toStringRgb()",
								"  toStringRgba()",
								"  toStringHex()",
								"  toHex = function(d)",
								"Util.jsonToObject = function(jsonStr)",
								"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
								"Util.splitAt = function*(str, ...indexes)",
								"(a, b) =>",
								"Util.decodeEscapes = function(text)",
								"  m =>",
								"([s, t]) =>",
								"Util.stripXML = text =>",
								"Util.stripHTML = html =>",
								"  p =>",
								"  p =>",
								"Util.stripNonPrintable = text =>",
								"Util.decodeHTMLEntities = function(text)",
								"\t(match, entity) =>",
								"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
								"\ti =>",
								"Util.stripAnsi = function(str)",
								"Util.proxy = (obj = {}, handler) =>",
								"  get(target, key, receiver)",
								"  set(target, key, value, receiver)",
								"Util.propertyLookup = (obj = {}, handler = key => null) =>",
								"  get(target, key, receiver)",
								"Util.traceProxy = (obj, handler) =>",
								"\tfunction(name, args)",
								"  get(target, key, receiver)",
								"  member = function()",
								"Util.proxyTree = function proxyTree(...callbacks)",
								"  applyCallback = () =>",
								"  get(target, key)",
								"  set(target, key, value)",
								"  apply(target, thisArg, args)",
								"  node(path)",
								"() =>",
								"Util.construct = constructor =>",
								"F(args)",
								"F",
								"  constructor",
								"Util.constructApply = (constructor, array) =>",
								"Util.immutable = args =>",
								"  set: () =>",
								"  deleteProperty: () =>",
								"  defineProperty: () =>",
								"Util.immutableClass = (orig, ...proto) =>",
								"  p =>",
								"\tctor =>",
								"  ctor",
								"  imm = base =>",
								"  constructor(...args)",
								"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
								"\tfunction()",
								"(min, max, value) =>",
								"Util.coloring = (useColor = true) =>",
								"  code(...args)",
								"  text(text)",
								"  concat(...args)",
								"  code(...args)",
								"  text(text, ...color)",
								"  concat(...args)",
								"  code(...args)",
								"  text(text, ...color)",
								"  concat(...args)",
								"Util.colorText = (...args) =>",
								"Util.decodeAnsi = (str, index) =>",
								"  isDigit = c =>",
								"  notDigit = c =>",
								"  findIndex = (pred, start) =>",
								"Util.stripAnsi = str =>",
								"Util.ansiCode = (...args) =>",
								"Util.wordWrap = (str, width, delimiter) =>",
								"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
								"Util.defineInspect = (proto, ...props) =>",
								"\tfunction()",
								"(acc, key) =>",
								"(a, b, value) =>",
								"Util.bindProperties = (proxy, target, props, gen) =>",
								"  name =>",
								"(acc, name) =>",
								"  gen = p => v =>",
								"  k =>",
								"\t(a, [k, v]) =>",
								"\t(...args) =>",
								"(...args) =>",
								"\t(a, k) =>",
								"  get: () =>",
								"  get: () =>",
								"()",
								"\tobj =>",
								"  on: val =>",
								"  off: val =>",
								"  true: val =>",
								"  false: val =>",
								"AssertionFailed",
								"  constructor(message, stack)",
								"Util.assert = function assert(val, message)",
								"Util.assertEqual = function assertEqual(val1, val2, message)",
								"Util.assignGlobal = () =>",
								"Util.weakMapper = function(createFn, map = ",
								"(), hitFn)",
								"  self = function(obj, ...args)",
								"  .set = (k, v) =>",
								"  .get = k =>",
								"Util.merge = function(...args)",
								"\ta =>",
								"\ta =>",
								"(acc, arg) =>",
								"Util.transformer = (a, ...l) =>",
								"\t(c, f) =>",
								"\tfunction(...v)",
								"Util.toPlainObject = obj =>",
								"\tv =>",
								"Util.toBuiltinObject = obj =>",
								"\tv =>",
								"  t = (v, n) =>",
								"(acc, k) =>",
								"Util.timer = msecs =>",
								"  remaining = () =>",
								"  finish = callback =>",
								"  log = (method, ...args) =>",
								"  obj =>",
								"\tv =>",
								"  timeout = (msecs, tmr = timer) =>",
								"() =>",
								"\t(...args) =>",
								"\t() =>",
								"  add = (arr, ...items) =>",
								"  get delay()",
								"  get created()",
								"  get start()",
								"  get stop()",
								"  get elapsed()",
								"  get end()",
								"  get remain()",
								"  cancel()",
								"  pause()",
								"  .resume = function()",
								"  .restart = function()",
								"  callback(...args)",
								"  subscribe(f)",
								"  unsubscribe(f)",
								"  start = () =>",
								"(resolve, reject) =>",
								"Util.thenableReject = error =>",
								"  then: (resolve, reject) =>",
								"Util.wrapGenerator = fn =>",
								"\tfunction(...args)",
								"Util.wrapGeneratorMethods = obj =>",
								"Util.decorateIterable = (proto, generators = false) =>",
								"  forEach(fn, thisArg)",
								"*map(fn, thisArg)",
								"*filter(pred, thisArg)",
								"  findIndex(pred, thisArg)",
								"  indexOf(item, startIndex = -1)",
								"(e, i) =>",
								"  find(pred, thisArg)",
								"  every(pred, thisArg)",
								"  some(pred, thisArg)",
								"  reduce(fn, accu)",
								"*entries()",
								"*keys()",
								"*values()",
								"Util.swap = (a, b) =>",
								"Util.swapArray = ([a, b]) =>",
								"Util.cacheAdapter = (st, defaultOpts = {}) =>",
								"\t() =>",
								"  c =>",
								"\t() =>",
								"  getItem(request, opts = {})",
								"  setItem(request, response)",
								"  addItem(request)",
								"  removeItem(request, opts = {})",
								"  key(index)",
								"  keys(urls = false, t = a => a)",
								"  response =>",
								"  r =>",
								"  clear()",
								"Util.cachedFetch = (allOpts = {}) =>",
								"() =>",
								"  self = function CachedFetch(request, opts = {})",
								"(returnValue, fn, ...args) =>",
								"Util.proxyObject = (root, handler) =>",
								"  ptr = path =>",
								"(a, i) =>",
								"\t(value, path) =>",
								"  get(target, key)",
								"  node(path)",
								"Util.parseXML = function(xmlStr)",
								"\t() =>",
								"\tparser =>",
								"  fn = (value, ...args) =>",
								"\t() =>",
								"\tmap =>",
								"(obj, ...args) =>",
								"\t() =>",
								"\t(obj, ...args) =>",
								"  self = (obj, ...args) =>",
								"() =>",
								"\t() =>",
								"\ta =>",
								"\t() =>",
								"\t() =>",
								"\tfn =>",
								"\t() =>",
								"\t() =>",
								"\ta =>",
								"() =>",
								"\t() =>",
								"\ta =>",
								"\t() =>",
								"() =>",
								"Util.getOpt = (options = {}, args) =>",
								"  findOpt = arg =>",
								"([optname, option]) =>",
								"  opt =>",
								"\t() =>",
								"\tv =>",
								"\t() =>",
								"\t() =>",
								"\tv =>",
								"Util.getEnv = varName =>",
								"\t() =>",
								"  e =>",
								"\t() =>",
								"Util.getEnvVars = () =>",
								"\t() =>",
								"  e =>",
								"\t() =>",
								"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
								"  function(...args)",
								"\tfunction(...args)",
								"\ta =>",
								"\terror =>",
								"Util.safeCall = (fn, ...args) =>",
								"Util.safeApply = (fn, args = []) =>",
								"Util.exit = exitCode =>",
								"  stdExit = std =>",
								"\t() =>",
								"\t([obj, exit]) =>",
								"\t() =>",
								"Util.atexit = handler =>",
								"Util.callMain = (fn, trapExceptions) =>",
								"(...args) =>",
								"  ret =>",
								"() =>",
								"\terr =>",
								"\t() =>",
								"\targv1 =>",
								"Util.printReturnValue = (fn, opts = {}) =>",
								"  print = (returnValue, fn, ...args) =>",
								"  self = (...args) =>",
								"Util.replaceAll = (needles, haystack) =>",
								"([re, str]) =>",
								"(acc, [match, replacement]) =>",
								"Util.quote = (str, q = '\"') =>",
								"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
								"Util.escapeRegex = string =>",
								"Util.consolePrinter = function ConsolePrinter(log = console.log)",
								"  self = function(...args)",
								"  .log = (...args) =>",
								"Util.consoleJoin = function(...args)",
								"Util.consoleConcat = function(...args)",
								"  self = function ConsoleConcat(...args)",
								"  clear()",
								"  log = (...args) =>",
								"  print()",
								"  i =>",
								"  output()",
								"  add(...args)",
								"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
								"\tfunction(value)",
								"  set = () =>",
								"\tfunction(...args)",
								"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
								"\t() =>",
								"\tv =>",
								"  handler = () =>",
								"ExFunc",
								"  constructor()",
								"  __call__(...args)",
								"Util.isatty = fd =>",
								"  mod =>",
								"Util.ttyGetWinSize = (fd = 1) =>",
								"  m =>",
								"\t(resolve, reject) =>",
								"\t(resolve, reject) =>",
								"\t(fd = 0, mode = true) =>",
								"Util.stdio = (fd, mode = true) =>",
								"Util.signal = (num, act) =>",
								"  m =>",
								"() =>",
								"Util.timeit = (fn, args = [], options = {}) =>",
								"(p, c) =>",
								"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
								"  replaceProperty = value =>",
								"  function()",
								"\tfunction()",
								"  v =>",
								"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
								"  f = (a, b) =>",
								"\tfunction(a, b)",
								"(a, b) =>",
								"(a, b) =>",
								"() =>",
								"HighResolutionTime",
								"  constructor(secs = 0, nano = 0)",
								"  static create(s, n)",
								"  get seconds()",
								"  get milliseconds()",
								"  get nanoseconds()",
								"  diff(o)",
								"  sum(o)",
								"  since(o)",
								"  toString()",
								"  inspect()",
								"  hrtime(previousTimestamp)",
								"  hrtime(previousTimestamp)",
								"\t() =>",
								"\t(minDelay = 0) =>",
								"  resolve =>",
								"  resolve =>",
								"  animationFrame(t)",
								"Util.getNow = () =>",
								"  performanceNow = () =>",
								"  performanceNow = function(clock = CLOCK_MONOTONIC_RAW)",
								"Util.formatColumns = a =>",
								"(acc, row, i) =>",
								"(col, j) =>",
								"  row =>",
								"(col, j) =>",
								"Util.getPlatform = () =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"() =>",
								"Util.colIndexes = line =>",
								"([prev, cols], char, i) =>",
								"Util.colSplit = (line, indexes) =>",
								"  map = (name, flag) =>",
								"(value)",
								"  log = (duration, name, args, ret) =>",
								"(args, ret) =>",
								"\t(args, ret) =>",
								"  function(...args)",
								"\tfunction(...args)",
								"  both = () =>",
								"(name, args) =>",
								"  arg =>",
								"(name, ret) =>",
								"\tfunction(...args)",
								"Util.bind = function(f, ...args)",
								"  ret = function()",
								"  ret = function()",
								"  ret",
								"  f",
								"Util.bytesToUTF8 = function*(bytes)",
								"Util.codePointsToString = codePoints =>",
								"Util.bufferToString = b =>",
								"Util.levenshteinDistance = function levenshteinDistance(a, b)",
								"Util.padTrunc = (...args) =>",
								"\t(s, pad = ' ') =>",
								"Util.setReadHandler = (fd, handler) =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643414861.51,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73900,
						"regions":
						{
						},
						"selection":
						[
							[
								38395,
								38395
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1308,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643319551.57,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26631.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/eagle/document.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10432,
						"regions":
						{
						},
						"selection":
						[
							[
								6310,
								6310
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 188,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643414293.99,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2655.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "io-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7256,
						"regions":
						{
						},
						"selection":
						[
							[
								6299,
								6299
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 230,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643415330.3,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2985.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "fetch-post-prices.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 574,
						"regions":
						{
						},
						"selection":
						[
							[
								271,
								271
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 10,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643662787.69,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "test-diagram.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1290,
						"regions":
						{
						},
						"selection":
						[
							[
								1264,
								1264
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 41,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643793890.86,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "diagram.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5129,
						"regions":
						{
						},
						"selection":
						[
							[
								3415,
								3415
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 118,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643766940.8,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2205.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7494,
						"regions":
						{
						},
						"selection":
						[
							[
								7494,
								7494
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"auto_indent": false,
							"function_name_status_row": 190,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"tabs_extra_last_activated": 1643766940.07,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/filesystem.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27843,
						"regions":
						{
						},
						"selection":
						[
							[
								2641,
								2641
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 102,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643414861.53,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1522.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/util.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 184802,
						"regions":
						{
						},
						"selection":
						[
							[
								25551,
								25142
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 845,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643811258.84,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17367.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/eagle/node.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15380,
						"regions":
						{
						},
						"selection":
						[
							[
								3926,
								3937
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 137,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643319554.48,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5632.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.798319483226,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(140502873410144)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"util.",
				"lib/util.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"js",
				"jack-session-client.c"
			],
			[
				"package.js",
				"package.json"
			],
			[
				"printer",
				"lib/ecmascript/printer.js"
			],
			[
				"parser2.",
				"lib/ecmascript/parser2.js"
			],
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"cvHigh",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"diagram",
				"diagram.js"
			],
			[
				"point.hpp",
				"qjs-opencv/js_point.hpp"
			],
			[
				"jsbind",
				"qjs-opencv/jsbindings.hpp"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"help",
				"time-helpers.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"image",
				"imagePipeline.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"minnet-http",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"minnet-server",
				"quickjs/qjs-net/minnet-server.c"
			],
			[
				"minnet.c",
				"quickjs/qjs-net/minnet.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"time-help",
				"time-helpers.js"
			],
			[
				"io-helpers",
				"io-helpers.js"
			],
			[
				"test-bjson",
				"test-bjson.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"commands.j",
				"commands.js"
			],
			[
				"render",
				"lib/eagle/renderer.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"diff.js",
				"lib/json/diff.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"circuit",
				"lib/eda/circuitjs.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-shell.js",
				"cv-shell.js"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"queue.h",
				"quickjs/qjs-modules/queue.h"
			],
			[
				"queue.c",
				"quickjs/qjs-modules/queue.c"
			],
			[
				"char-utils",
				"quickjs/qjs-modules/char-utils.h"
			],
			[
				"quickjs-misc.",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"predicate.c",
				"quickjs/qjs-modules/predicate.c"
			],
			[
				"debugger-tran",
				"quickjs/quickjs-debugger-transport-win.c"
			],
			[
				"quickjs-debugg",
				"quickjs/quickjs-debugger-transport-unix.c"
			],
			[
				"defs",
				"quickjs/defs.cmake"
			],
			[
				"quickjs/CMakeLi",
				"quickjs/CMakeLists.txt"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-pred",
				"quickjs/qjs-modules/quickjs-predicate.c"
			],
			[
				"package",
				"package.json"
			],
			[
				"xpath.js",
				"lib/dom/xpath.js"
			],
			[
				"compileComm",
				"lib/build/compileCommand.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"compile_com",
				"compile_commands.js"
			],
			[
				"quickjs-pat",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"test-child",
				"test-childprocess.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"test-ini",
				"test-ini.js"
			],
			[
				"fn.js",
				"lib/parse/fn.js"
			],
			[
				"test-css",
				"test-css3.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"grammar-css3",
				"grammar-css3.js"
			],
			[
				"css3",
				"lib/grammars/css3.g4"
			],
			[
				"grammar.js",
				"lib/parse/grammar.js"
			],
			[
				"test-parse",
				"test-parse.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"lexer",
				"lib/parse/lexer.js"
			],
			[
				"ecmascript.js",
				"lib/ecmascript.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"imgui",
				"cmake/imgui-viewer.cmake"
			],
			[
				"high",
				"cmake/highgui-viewer.cmake"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"circui",
				"lib/eda/circuitjs.js"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"deep.c",
				"quickjs/qjs-modules/quickjs-deep.c"
			],
			[
				"test_xml",
				"quickjs/qjs-modules/tests/test_xml.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"highgui",
				"cmake/highgui-viewer.cmake"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"projec",
				"lib/eagle/project.js"
			],
			[
				"agle-she",
				"eagle-shell.js"
			],
			[
				"point",
				"lib/geom/point.js"
			],
			[
				"path.c",
				"quickjs/qjs-modules/path.c"
			],
			[
				"element.",
				"lib/dom/element.js"
			],
			[
				"quickjs-pa",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"lib/u til",
				"lib/util.js"
			],
			[
				"jslex",
				"quickjs/qjs-modules/lib/jslexer.js"
			],
			[
				"preact.m.",
				"lib/preact.m.js"
			],
			[
				"location.c",
				"quickjs/qjs-modules/location.c"
			],
			[
				"location.h",
				"quickjs/qjs-modules/location.h"
			],
			[
				"lexer.h",
				"quickjs/qjs-modules/lexer.h"
			],
			[
				"lexer.c",
				"quickjs/qjs-modules/lexer.c"
			],
			[
				"quickjs-lexe",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				" circui",
				"lib/eda/circuitjs.js"
			],
			[
				"extend",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"eagle-s",
				"eagle-shell.js"
			],
			[
				"Rect",
				"lib/geom/rect.js"
			],
			[
				"-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"image-he",
				"image-helpers.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"test-mma",
				"test-mmap.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"portmi",
				"portmidi-testio.c"
			],
			[
				"portmidi-",
				"portmidi-testio.c"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"test_mmap",
				"quickjs/qjs-modules/tests/test_mmap.js"
			],
			[
				"quickjs-op",
				"quickjs/quickjs-opcode.h"
			],
			[
				"eagle-comm",
				"eagle-commands.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"eagle-",
				"eagle-commands.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"clang-li",
				"clang-list.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"ser",
				"server.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 245.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
